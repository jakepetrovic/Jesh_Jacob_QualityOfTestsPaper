package randoop;

import junit.framework.*;

public class RandoopTest1 extends TestCase {

  public static boolean debug = false;

  public void test1() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest1.test1");


    com.allenstudio.ir.ui.MainFrame var0 = new com.allenstudio.ir.ui.MainFrame();
    java.lang.String var1 = var0.getWarningString();
    java.lang.String var2 = var0.getWarningString();
    java.awt.Container var3 = var0.getFocusCycleRootAncestor();
    com.allenstudio.ir.ui.StatusBar var4 = new com.allenstudio.ir.ui.StatusBar();
    boolean var5 = var4.isBackgroundSet();
    boolean var8 = var4.contains(10, 100);
    var4.revalidate();
    javax.swing.JToolTip var10 = var4.createToolTip();
    com.allenstudio.ir.ui.StatusBar var11 = new com.allenstudio.ir.ui.StatusBar();
    javax.swing.JRootPane var12 = var11.getRootPane();
    java.awt.Point var13 = var11.location();
    com.allenstudio.ir.ui.StatusBar var14 = new com.allenstudio.ir.ui.StatusBar();
    javax.swing.JRootPane var15 = var14.getRootPane();
    java.awt.Point var16 = var14.location();
    com.allenstudio.ir.ui.Toolbar var17 = new com.allenstudio.ir.ui.Toolbar();
    boolean var18 = var17.isFloatable();
    java.awt.Component var20 = var17.getComponentAtIndex(10);
    java.lang.Object var21 = var14.getClientProperty((java.lang.Object)10);
    java.awt.Dimension var22 = var14.getMaximumSize();
    var11.setMinimumSize(var22);
    java.awt.Rectangle var24 = var11.getBounds();
    var4.scrollRectToVisible(var24);
    var0.setMaximizedBounds(var24);
    float var27 = var0.getAlignmentX();
    var0.revalidate();
    int var29 = var0.getState();
    var0.setCursor(4);
    com.allenstudio.ir.ui.MainFrame var32 = new com.allenstudio.ir.ui.MainFrame();
    java.lang.String var33 = var32.getWarningString();
    boolean var34 = var32.isAlwaysOnTopSupported();
    com.allenstudio.ir.ui.StatusBar var35 = new com.allenstudio.ir.ui.StatusBar();
    javax.swing.JRootPane var36 = var35.getRootPane();
    java.awt.Point var37 = var35.location();
    com.allenstudio.ir.ui.StatusBar var38 = new com.allenstudio.ir.ui.StatusBar();
    javax.swing.JRootPane var39 = var38.getRootPane();
    java.awt.Point var40 = var38.location();
    com.allenstudio.ir.ui.Toolbar var41 = new com.allenstudio.ir.ui.Toolbar();
    boolean var42 = var41.isFloatable();
    java.awt.Component var44 = var41.getComponentAtIndex(10);
    java.lang.Object var45 = var38.getClientProperty((java.lang.Object)10);
    java.awt.Dimension var46 = var38.getMaximumSize();
    var35.setMinimumSize(var46);
    java.awt.Rectangle var48 = var35.getBounds();
    java.awt.Rectangle var49 = var32.getBounds(var48);
    var0.setBounds(var48);
    com.allenstudio.ir.ui.Toolbar var51 = new com.allenstudio.ir.ui.Toolbar();
    java.awt.image.ColorModel var52 = var51.getColorModel();
    java.awt.im.InputContext var53 = var51.getInputContext();
    java.awt.Component var55 = var51.getComponentAtIndex(0);
    boolean var56 = var51.isManagingFocus();
    var0.setGlassPane((java.awt.Component)var51);
    var51.setDoubleBuffered(true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var1);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var2);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var3);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var5 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var8 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var10);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var12);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var13);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var15);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var16);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var18 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var20);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var21);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var22);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var24);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var27 == 0.5f);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var29 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var33);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var34 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var36);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var37);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var39);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var40);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var42 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var44);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var45);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var46);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var48);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var49);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var52);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var53);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var55);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var56 == false);

  }

  public void test2() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest1.test2");


    com.allenstudio.ir.ui.StatusBar var0 = new com.allenstudio.ir.ui.StatusBar();
    int var1 = var0.getY();
    var0.setIgnoreRepaint(true);
    boolean var4 = var0.requestFocusInWindow();
    boolean var5 = var0.isOpaque();
    var0.enableInputMethods(false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var1 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var4 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var5 == false);

  }

  public void test3() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest1.test3");


    com.allenstudio.ir.ui.Toolbar var0 = new com.allenstudio.ir.ui.Toolbar();
    java.awt.image.ColorModel var1 = var0.getColorModel();
    java.awt.im.InputContext var2 = var0.getInputContext();
    java.awt.Component var4 = var0.getComponent(0);
    java.awt.LayoutManager var5 = var0.getLayout();
    var0.setBorderPainted(true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var1);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var2);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var4);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var5);

  }

  public void test4() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest1.test4");


    com.allenstudio.ir.ui.MainFrame var0 = new com.allenstudio.ir.ui.MainFrame();
    java.lang.String var1 = var0.getWarningString();
    java.awt.Rectangle var2 = var0.getMaximizedBounds();
    java.awt.MenuBar var3 = var0.getMenuBar();
    var0.removeNotify();
    var0.enable();
    com.allenstudio.ir.ui.MainFrame var6 = new com.allenstudio.ir.ui.MainFrame();
    boolean var7 = var6.isShowing();
    int var8 = var6.countComponents();
    com.allenstudio.ir.ui.StatusBar var9 = new com.allenstudio.ir.ui.StatusBar();
    var9.enable();
    com.allenstudio.ir.ui.StatusBar var11 = new com.allenstudio.ir.ui.StatusBar();
    var11.enable();
    boolean var13 = var11.isFocusOwner();
    var11.firePropertyChange("hi!", 10L, 0L);
    var11.layout();
    var11.removeAll();
    com.allenstudio.ir.ui.StatusBar var20 = new com.allenstudio.ir.ui.StatusBar();
    javax.swing.JRootPane var21 = var20.getRootPane();
    java.awt.Point var22 = var20.location();
    java.awt.Point var23 = var11.getLocation(var22);
    var9.setLocation(var23);
    var6.setLocation(var23);
    java.awt.Color var26 = var6.getBackground();
    var0.setForeground(var26);
    java.lang.Object var28 = var0.getTreeLock();
    boolean var29 = var0.isActive();
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var1);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var2);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var3);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var7 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var8 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var13 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var21);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var22);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var23);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var26);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var28);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var29 == false);

  }

  public void test5() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest1.test5");


    com.allenstudio.ir.ui.NoteListsTabPane var0 = new com.allenstudio.ir.ui.NoteListsTabPane();
    com.allenstudio.ir.ui.Toolbar var1 = new com.allenstudio.ir.ui.Toolbar();
    boolean var2 = var1.isFloatable();
    var1.show();
    java.awt.image.ColorModel var4 = var1.getColorModel();
    boolean var5 = var1.isFocusCycleRoot();
    com.allenstudio.ir.ui.DatePickerPane var6 = new com.allenstudio.ir.ui.DatePickerPane();
    var6.transferFocus();
    com.allenstudio.ir.ui.Toolbar var8 = new com.allenstudio.ir.ui.Toolbar();
    java.awt.image.ColorModel var9 = var8.getColorModel();
    var8.setEnabled(true);
    java.awt.Component var13 = var8.getComponentAtIndex(1);
    boolean var14 = var8.isFloatable();
    var6.setContent((java.awt.Component)var8);
    java.awt.Dimension var16 = var6.size();
    com.allenstudio.ir.ui.Toolbar var17 = new com.allenstudio.ir.ui.Toolbar();
    boolean var18 = var17.isFloatable();
    var17.show();
    boolean var20 = var17.isRequestFocusEnabled();
    java.awt.Dimension var21 = var17.minimumSize();
    var6.setToolBar((javax.swing.JToolBar)var17);
    java.awt.Image var25 = var6.createImage(10, (-1));
    var0.add((java.awt.Component)var1, (java.lang.Object)10);
    com.allenstudio.ir.ui.DatePickerPane var27 = new com.allenstudio.ir.ui.DatePickerPane();
    java.lang.String var28 = var27.getTitle();
    java.awt.dnd.DropTarget var29 = var27.getDropTarget();
    com.allenstudio.ir.util.XmlElement var30 = new com.allenstudio.ir.util.XmlElement();
    boolean var31 = var30.hasChanged();
    var0.add((java.awt.Component)var27, (java.lang.Object)var31, (-1));
    com.allenstudio.ir.ui.NoteListsTabPane var34 = new com.allenstudio.ir.ui.NoteListsTabPane();
    com.allenstudio.ir.ui.Toolbar var35 = new com.allenstudio.ir.ui.Toolbar();
    boolean var36 = var35.isFloatable();
    var35.show();
    java.awt.image.ColorModel var38 = var35.getColorModel();
    boolean var39 = var35.isFocusCycleRoot();
    com.allenstudio.ir.ui.DatePickerPane var40 = new com.allenstudio.ir.ui.DatePickerPane();
    var40.transferFocus();
    com.allenstudio.ir.ui.Toolbar var42 = new com.allenstudio.ir.ui.Toolbar();
    java.awt.image.ColorModel var43 = var42.getColorModel();
    var42.setEnabled(true);
    java.awt.Component var47 = var42.getComponentAtIndex(1);
    boolean var48 = var42.isFloatable();
    var40.setContent((java.awt.Component)var42);
    java.awt.Dimension var50 = var40.size();
    com.allenstudio.ir.ui.Toolbar var51 = new com.allenstudio.ir.ui.Toolbar();
    boolean var52 = var51.isFloatable();
    var51.show();
    boolean var54 = var51.isRequestFocusEnabled();
    java.awt.Dimension var55 = var51.minimumSize();
    var40.setToolBar((javax.swing.JToolBar)var51);
    java.awt.Image var59 = var40.createImage(10, (-1));
    var34.add((java.awt.Component)var35, (java.lang.Object)10);
    com.allenstudio.ir.ui.Toolbar var61 = new com.allenstudio.ir.ui.Toolbar();
    java.awt.image.ColorModel var62 = var61.getColorModel();
    var61.setEnabled(true);
    var34.add((java.awt.Component)var61, (java.lang.Object)100L, 0);
    java.awt.Component var69 = var0.add((java.awt.Component)var34, 1);
    var0.setBounds(0, 4, 0, 4);
    int var75 = var0.getTabCount();
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var2 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var4);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var5 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var9);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var13);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var14 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var16);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var18 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var20 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var21);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var25);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var28 + "' != '" + "Date Picker"+ "'", var28.equals("Date Picker"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var29);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var31 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var36 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var38);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var39 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var43);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var47);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var48 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var50);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var52 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var54 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var55);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var59);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var62);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var69);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var75 == 6);

  }

  public void test6() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest1.test6");


    com.allenstudio.ir.ui.DatePickerPane var0 = new com.allenstudio.ir.ui.DatePickerPane();
    javax.swing.KeyStroke[] var1 = var0.getRegisteredKeyStrokes();
    com.allenstudio.ir.ui.calendar.DateChooser var2 = var0.getDateChooser();
    var0.setOpaque(true);
    java.awt.Dimension var5 = var0.preferredSize();
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var1);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var2);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var5);

  }

  public void test7() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest1.test7");


    com.allenstudio.ir.ui.Toolbar var0 = new com.allenstudio.ir.ui.Toolbar();
    java.awt.image.ColorModel var1 = var0.getColorModel();
    var0.setEnabled(true);
    java.awt.Component var5 = var0.getComponentAtIndex(1);
    boolean var6 = var0.isFloatable();
    java.lang.String var7 = var0.toString();
    com.allenstudio.ir.ui.Toolbar var8 = new com.allenstudio.ir.ui.Toolbar();
    java.awt.event.MouseWheelListener[] var9 = var8.getMouseWheelListeners();
    java.awt.event.MouseListener[] var10 = var8.getMouseListeners();
    var8.firePropertyChange("", false, true);
    var0.add((java.awt.Component)var8, (java.lang.Object)10.0f);
    java.awt.event.HierarchyBoundsListener[] var17 = var8.getHierarchyBoundsListeners();
    com.allenstudio.ir.ui.Toolbar var18 = new com.allenstudio.ir.ui.Toolbar();
    boolean var19 = var18.isFloatable();
    var18.show();
    boolean var21 = var18.isRequestFocusEnabled();
    java.awt.Dimension var22 = var18.minimumSize();
    java.awt.Dimension var23 = var18.getMinimumSize();
    var8.resize(var23);
    var8.setSize(10, 1);
    var8.revalidate();
    java.awt.event.MouseListener[] var29 = var8.getMouseListeners();
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var1);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var5);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var6 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var9);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var10);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var17);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var19 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var21 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var22);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var23);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var29);

  }

  public void test8() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest1.test8");


    com.allenstudio.ir.util.XmlElement var0 = new com.allenstudio.ir.util.XmlElement();
    com.allenstudio.ir.util.XmlElement var2 = var0.addSubElement("hi!");
    com.allenstudio.ir.util.XmlElement var5 = var2.addSubElement("", "hi!");
    java.util.Hashtable var6 = var5.getAttributes();
    com.allenstudio.ir.ui.MainFrame var7 = new com.allenstudio.ir.ui.MainFrame();
    java.lang.String var8 = var7.getWarningString();
    java.awt.Rectangle var9 = var7.getMaximizedBounds();
    java.awt.MenuBar var10 = var7.getMenuBar();
    com.allenstudio.ir.ui.NoteListsTabPane var11 = new com.allenstudio.ir.ui.NoteListsTabPane();
    var7.widgetChanged((com.allenstudio.ir.core.InspirentoWidget)var11);
    var7.dispose();
    java.lang.Object var14 = var6.get((java.lang.Object)var7);
    com.allenstudio.ir.util.XmlElement var15 = new com.allenstudio.ir.util.XmlElement();
    com.allenstudio.ir.util.XmlElement var17 = var15.addSubElement("hi!");
    com.allenstudio.ir.util.XmlElement var20 = var17.addSubElement("", "hi!");
    java.util.Hashtable var21 = var20.getAttributes();
    com.allenstudio.ir.ui.Toolbar var22 = new com.allenstudio.ir.ui.Toolbar();
    java.awt.image.ColorModel var23 = var22.getColorModel();
    var22.setEnabled(true);
    java.awt.ComponentOrientation var26 = var22.getComponentOrientation();
    java.lang.Object var27 = var6.put((java.lang.Object)var21, (java.lang.Object)var26);
    com.allenstudio.ir.ui.Toolbar var28 = new com.allenstudio.ir.ui.Toolbar();
    java.awt.image.ColorModel var29 = var28.getColorModel();
    java.awt.im.InputContext var30 = var28.getInputContext();
    java.awt.Component var32 = var28.getComponentAtIndex(0);
    var28.revalidate();
    com.allenstudio.ir.ui.MainFrame var34 = new com.allenstudio.ir.ui.MainFrame();
    java.lang.String var35 = var34.getWarningString();
    boolean var36 = var34.isAlwaysOnTopSupported();
    java.awt.Color var37 = var34.getBackground();
    var28.setForeground(var37);
    boolean var39 = var6.contains((java.lang.Object)var28);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var2);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var5);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var6);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var8);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var9);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var10);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var14);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var17);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var20);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var21);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var23);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var26);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var27);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var29);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var30);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var32);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var35);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var36 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var37);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var39 == false);

  }

  public void test9() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest1.test9");


    com.allenstudio.ir.ui.DatePickerPane var0 = new com.allenstudio.ir.ui.DatePickerPane();
    var0.transferFocus();
    com.allenstudio.ir.ui.Toolbar var2 = new com.allenstudio.ir.ui.Toolbar();
    java.awt.image.ColorModel var3 = var2.getColorModel();
    var2.setEnabled(true);
    java.awt.Component var7 = var2.getComponentAtIndex(1);
    boolean var8 = var2.isFloatable();
    var0.setContent((java.awt.Component)var2);
    java.awt.Color var10 = var2.getForeground();
    boolean var11 = var2.requestFocusInWindow();
    var2.setDoubleBuffered(true);
    boolean var14 = var2.requestDefaultFocus();
    var2.setAutoscrolls(false);
    javax.swing.ActionMap var17 = var2.getActionMap();
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var3);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var7);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var8 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var10);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var11 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var14 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var17);

  }

  public void test10() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest1.test10");


    com.allenstudio.ir.ui.DatePickerPane var0 = new com.allenstudio.ir.ui.DatePickerPane();
    javax.swing.KeyStroke[] var1 = var0.getRegisteredKeyStrokes();
    boolean var2 = var0.isOptimizedDrawingEnabled();
    java.awt.Component var3 = var0.getContent();
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var2 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var3);

  }

  public void test11() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest1.test11");


    com.allenstudio.ir.ui.StatusBar var0 = new com.allenstudio.ir.ui.StatusBar();
    var0.enable();
    boolean var2 = var0.isFocusOwner();
    var0.firePropertyChange("hi!", 10L, 0L);
    var0.layout();
    var0.removeAll();
    com.allenstudio.ir.ui.StatusBar var9 = new com.allenstudio.ir.ui.StatusBar();
    javax.swing.JRootPane var10 = var9.getRootPane();
    java.awt.Point var11 = var9.location();
    java.awt.Component var12 = var0.getComponentAt(var11);
    javax.swing.event.AncestorListener[] var13 = var0.getAncestorListeners();
    boolean var14 = var0.isFocusable();
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var2 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var10);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var11);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var12);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var13);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var14 == true);

  }

  public void test12() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest1.test12");


    com.allenstudio.ir.ui.StatusBar var0 = new com.allenstudio.ir.ui.StatusBar();
    var0.enable();
    boolean var2 = var0.isFocusOwner();
    java.lang.String var3 = var0.getToolTipText();
    com.allenstudio.ir.ui.Toolbar var4 = new com.allenstudio.ir.ui.Toolbar();
    boolean var5 = var4.isFloatable();
    var4.firePropertyChange("Date Picker", (byte)0, (byte)(-1));
    java.awt.Component var10 = var0.add((java.awt.Component)var4);
    var4.setOrientation(0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var2 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var3);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var5 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var10);

  }

  public void test13() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest1.test13");


    com.allenstudio.ir.ui.Toolbar var0 = new com.allenstudio.ir.ui.Toolbar();
    java.awt.image.ColorModel var1 = var0.getColorModel();
    var0.setEnabled(true);
    javax.accessibility.AccessibleContext var4 = var0.getAccessibleContext();
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var1);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var4);

  }

  public void test14() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest1.test14");


    com.allenstudio.ir.ui.Toolbar var0 = new com.allenstudio.ir.ui.Toolbar();
    boolean var1 = var0.isFloatable();
    var0.setAutoscrolls(true);
    com.allenstudio.ir.core.plugins.CommonNote var4 = new com.allenstudio.ir.core.plugins.CommonNote();
    var4.resize(0, 1);
    com.allenstudio.ir.ui.NoteListCell var8 = new com.allenstudio.ir.ui.NoteListCell((com.allenstudio.ir.core.plugins.AbstractNote)var4);
    com.allenstudio.ir.ui.StatusBar var9 = new com.allenstudio.ir.ui.StatusBar();
    boolean var10 = var9.isBackgroundSet();
    boolean var13 = var9.contains(10, 100);
    var9.revalidate();
    javax.swing.JToolTip var15 = var9.createToolTip();
    com.allenstudio.ir.ui.StatusBar var16 = new com.allenstudio.ir.ui.StatusBar();
    javax.swing.JRootPane var17 = var16.getRootPane();
    java.awt.Point var18 = var16.location();
    com.allenstudio.ir.ui.StatusBar var19 = new com.allenstudio.ir.ui.StatusBar();
    javax.swing.JRootPane var20 = var19.getRootPane();
    java.awt.Point var21 = var19.location();
    com.allenstudio.ir.ui.Toolbar var22 = new com.allenstudio.ir.ui.Toolbar();
    boolean var23 = var22.isFloatable();
    java.awt.Component var25 = var22.getComponentAtIndex(10);
    java.lang.Object var26 = var19.getClientProperty((java.lang.Object)10);
    java.awt.Dimension var27 = var19.getMaximumSize();
    var16.setMinimumSize(var27);
    java.awt.Rectangle var29 = var16.getBounds();
    var9.scrollRectToVisible(var29);
    var4.repaint(var29);
    boolean var32 = var0.isAncestorOf((java.awt.Component)var4);
    javax.accessibility.AccessibleContext var33 = var0.getAccessibleContext();
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var1 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var10 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var13 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var15);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var17);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var18);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var20);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var21);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var23 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var25);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var26);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var27);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var29);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var32 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var33);

  }

  public void test15() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest1.test15");


    javax.swing.JFrame.setDefaultLookAndFeelDecorated(true);

  }

  public void test16() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest1.test16");


    com.allenstudio.ir.core.plugins.CommonNote var0 = new com.allenstudio.ir.core.plugins.CommonNote();
    var0.resize(0, 1);
    java.lang.String var4 = var0.getOtherInfo();
    var0.setIgnoreRepaint(true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var4);

  }

  public void test17() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest1.test17");


    com.allenstudio.ir.util.XmlIO var0 = new com.allenstudio.ir.util.XmlIO();
    var0.unparsedEntityDecl("", "hi!", "", "");
    var0.skippedEntity("This is a testing description. \u03E3\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\u073F\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD");
    var0.notationDecl("Date Picker", "Title", "This is a testing description. \u03E3\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\u073F\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD");
    var0.skippedEntity("");
    var0.processingInstruction("MenuBarUI", "ToolBarUI");

  }

  public void test18() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest1.test18");


    com.allenstudio.ir.ui.NoteListsTabPane var0 = new com.allenstudio.ir.ui.NoteListsTabPane();
    com.allenstudio.ir.ui.Toolbar var1 = new com.allenstudio.ir.ui.Toolbar();
    boolean var2 = var1.isFloatable();
    var1.show();
    java.awt.image.ColorModel var4 = var1.getColorModel();
    boolean var5 = var1.isFocusCycleRoot();
    com.allenstudio.ir.ui.DatePickerPane var6 = new com.allenstudio.ir.ui.DatePickerPane();
    var6.transferFocus();
    com.allenstudio.ir.ui.Toolbar var8 = new com.allenstudio.ir.ui.Toolbar();
    java.awt.image.ColorModel var9 = var8.getColorModel();
    var8.setEnabled(true);
    java.awt.Component var13 = var8.getComponentAtIndex(1);
    boolean var14 = var8.isFloatable();
    var6.setContent((java.awt.Component)var8);
    java.awt.Dimension var16 = var6.size();
    com.allenstudio.ir.ui.Toolbar var17 = new com.allenstudio.ir.ui.Toolbar();
    boolean var18 = var17.isFloatable();
    var17.show();
    boolean var20 = var17.isRequestFocusEnabled();
    java.awt.Dimension var21 = var17.minimumSize();
    var6.setToolBar((javax.swing.JToolBar)var17);
    java.awt.Image var25 = var6.createImage(10, (-1));
    var0.add((java.awt.Component)var1, (java.lang.Object)10);
    com.allenstudio.ir.ui.NoteListsTabPane var27 = new com.allenstudio.ir.ui.NoteListsTabPane();
    com.allenstudio.ir.ui.Toolbar var28 = new com.allenstudio.ir.ui.Toolbar();
    boolean var29 = var28.isFloatable();
    var28.show();
    java.awt.image.ColorModel var31 = var28.getColorModel();
    boolean var32 = var28.isFocusCycleRoot();
    com.allenstudio.ir.ui.DatePickerPane var33 = new com.allenstudio.ir.ui.DatePickerPane();
    var33.transferFocus();
    com.allenstudio.ir.ui.Toolbar var35 = new com.allenstudio.ir.ui.Toolbar();
    java.awt.image.ColorModel var36 = var35.getColorModel();
    var35.setEnabled(true);
    java.awt.Component var40 = var35.getComponentAtIndex(1);
    boolean var41 = var35.isFloatable();
    var33.setContent((java.awt.Component)var35);
    java.awt.Dimension var43 = var33.size();
    com.allenstudio.ir.ui.Toolbar var44 = new com.allenstudio.ir.ui.Toolbar();
    boolean var45 = var44.isFloatable();
    var44.show();
    boolean var47 = var44.isRequestFocusEnabled();
    java.awt.Dimension var48 = var44.minimumSize();
    var33.setToolBar((javax.swing.JToolBar)var44);
    java.awt.Image var52 = var33.createImage(10, (-1));
    var27.add((java.awt.Component)var28, (java.lang.Object)10);
    com.allenstudio.ir.ui.Toolbar var54 = new com.allenstudio.ir.ui.Toolbar();
    boolean var55 = var54.isFloatable();
    java.awt.Component var57 = var54.getComponentAtIndex(10);
    boolean var58 = var54.isLightweight();
    java.awt.Component var59 = var27.add((java.awt.Component)var54);
    com.allenstudio.ir.ui.NoteListsTabPane var60 = new com.allenstudio.ir.ui.NoteListsTabPane();
    com.allenstudio.ir.ui.Toolbar var61 = new com.allenstudio.ir.ui.Toolbar();
    boolean var62 = var61.isFloatable();
    var61.show();
    java.awt.image.ColorModel var64 = var61.getColorModel();
    boolean var65 = var61.isFocusCycleRoot();
    com.allenstudio.ir.ui.DatePickerPane var66 = new com.allenstudio.ir.ui.DatePickerPane();
    var66.transferFocus();
    com.allenstudio.ir.ui.Toolbar var68 = new com.allenstudio.ir.ui.Toolbar();
    java.awt.image.ColorModel var69 = var68.getColorModel();
    var68.setEnabled(true);
    java.awt.Component var73 = var68.getComponentAtIndex(1);
    boolean var74 = var68.isFloatable();
    var66.setContent((java.awt.Component)var68);
    java.awt.Dimension var76 = var66.size();
    com.allenstudio.ir.ui.Toolbar var77 = new com.allenstudio.ir.ui.Toolbar();
    boolean var78 = var77.isFloatable();
    var77.show();
    boolean var80 = var77.isRequestFocusEnabled();
    java.awt.Dimension var81 = var77.minimumSize();
    var66.setToolBar((javax.swing.JToolBar)var77);
    java.awt.Image var85 = var66.createImage(10, (-1));
    var60.add((java.awt.Component)var61, (java.lang.Object)10);
    var60.setSelectedIndex(1);
    javax.swing.plaf.TabbedPaneUI var89 = var60.getUI();
    javax.swing.SingleSelectionModel var90 = var60.getModel();
    var27.setModel(var90);
    var0.setModel(var90);
    var0.firePropertyChange("", 'a', ' ');
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var2 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var4);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var5 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var9);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var13);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var14 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var16);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var18 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var20 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var21);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var25);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var29 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var31);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var32 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var36);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var40);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var41 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var43);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var45 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var47 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var48);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var52);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var55 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var57);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var58 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var59);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var62 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var64);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var65 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var69);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var73);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var74 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var76);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var78 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var80 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var81);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var85);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var89);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var90);

  }

  public void test19() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest1.test19");


    com.allenstudio.ir.util.XmlElement var0 = new com.allenstudio.ir.util.XmlElement();
    com.allenstudio.ir.util.XmlElement var2 = var0.addSubElement("hi!");
    com.allenstudio.ir.util.XmlElement var5 = var2.addSubElement("", "hi!");
    java.util.Hashtable var6 = var5.getAttributes();
    com.allenstudio.ir.core.plugins.CommonNote var7 = new com.allenstudio.ir.core.plugins.CommonNote();
    var7.resize(0, 1);
    com.allenstudio.ir.ui.NoteListCell var11 = new com.allenstudio.ir.ui.NoteListCell((com.allenstudio.ir.core.plugins.AbstractNote)var7);
    java.lang.String var12 = var7.getFeature();
    boolean var13 = var5.equals((java.lang.Object)var7);
    java.lang.Object var16 = var5.addAttribute("TabbedPaneUI", "");
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var2);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var5);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var6);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var12 + "' != '" + "C:\\boot.ini"+ "'", var12.equals("C:\\boot.ini"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var13 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var16);

  }

  public void test20() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest1.test20");


    com.allenstudio.ir.ui.DatePickerPane var0 = new com.allenstudio.ir.ui.DatePickerPane();
    javax.swing.plaf.PanelUI var1 = var0.getUI();
    com.allenstudio.ir.ui.Toolbar var2 = new com.allenstudio.ir.ui.Toolbar();
    boolean var3 = var2.isFloatable();
    var2.setAutoscrolls(true);
    com.allenstudio.ir.ui.DatePickerPane var6 = new com.allenstudio.ir.ui.DatePickerPane();
    var6.transferFocus();
    com.allenstudio.ir.ui.Toolbar var8 = new com.allenstudio.ir.ui.Toolbar();
    java.awt.image.ColorModel var9 = var8.getColorModel();
    var8.setEnabled(true);
    java.awt.Component var13 = var8.getComponentAtIndex(1);
    boolean var14 = var8.isFloatable();
    var6.setContent((java.awt.Component)var8);
    java.awt.Font var16 = var6.getFont();
    java.awt.FontMetrics var17 = var2.getFontMetrics(var16);
    java.awt.FontMetrics var18 = var0.getFontMetrics(var16);
    var0.updateUI();
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var3 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var9);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var13);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var14 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var16);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var17);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var18);

  }

  public void test21() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest1.test21");


    com.allenstudio.ir.ui.NoteList var0 = new com.allenstudio.ir.ui.NoteList();
    com.allenstudio.ir.ui.NoteList var1 = new com.allenstudio.ir.ui.NoteList();
    com.allenstudio.ir.ui.MainFrame var2 = new com.allenstudio.ir.ui.MainFrame();
    java.lang.String var3 = var2.getWarningString();
    java.awt.Rectangle var4 = var2.getMaximizedBounds();
    java.awt.MenuBar var5 = var2.getMenuBar();
    com.allenstudio.ir.core.plugins.CommonNote var6 = new com.allenstudio.ir.core.plugins.CommonNote();
    var6.resize(0, 1);
    com.allenstudio.ir.ui.NoteListCell var10 = new com.allenstudio.ir.ui.NoteListCell((com.allenstudio.ir.core.plugins.AbstractNote)var6);
    com.allenstudio.ir.ui.StatusBar var11 = new com.allenstudio.ir.ui.StatusBar();
    boolean var12 = var11.isBackgroundSet();
    boolean var15 = var11.contains(10, 100);
    var11.revalidate();
    javax.swing.JToolTip var17 = var11.createToolTip();
    com.allenstudio.ir.ui.StatusBar var18 = new com.allenstudio.ir.ui.StatusBar();
    javax.swing.JRootPane var19 = var18.getRootPane();
    java.awt.Point var20 = var18.location();
    com.allenstudio.ir.ui.StatusBar var21 = new com.allenstudio.ir.ui.StatusBar();
    javax.swing.JRootPane var22 = var21.getRootPane();
    java.awt.Point var23 = var21.location();
    com.allenstudio.ir.ui.Toolbar var24 = new com.allenstudio.ir.ui.Toolbar();
    boolean var25 = var24.isFloatable();
    java.awt.Component var27 = var24.getComponentAtIndex(10);
    java.lang.Object var28 = var21.getClientProperty((java.lang.Object)10);
    java.awt.Dimension var29 = var21.getMaximumSize();
    var18.setMinimumSize(var29);
    java.awt.Rectangle var31 = var18.getBounds();
    var11.scrollRectToVisible(var31);
    var6.repaint(var31);
    var2.setMaximizedBounds(var31);
    int var37 = var1.getScrollableBlockIncrement(var31, 1, 4);
    int var40 = var0.getScrollableBlockIncrement(var31, 0, 0);
    com.allenstudio.ir.core.plugins.CommonNote var41 = new com.allenstudio.ir.core.plugins.CommonNote();
    var41.resize(0, 1);
    com.allenstudio.ir.ui.NoteListCell var45 = new com.allenstudio.ir.ui.NoteListCell((com.allenstudio.ir.core.plugins.AbstractNote)var41);
    com.allenstudio.ir.ui.StatusBar var46 = new com.allenstudio.ir.ui.StatusBar();
    boolean var47 = var46.isBackgroundSet();
    boolean var50 = var46.contains(10, 100);
    var46.revalidate();
    javax.swing.JToolTip var52 = var46.createToolTip();
    com.allenstudio.ir.ui.StatusBar var53 = new com.allenstudio.ir.ui.StatusBar();
    javax.swing.JRootPane var54 = var53.getRootPane();
    java.awt.Point var55 = var53.location();
    com.allenstudio.ir.ui.StatusBar var56 = new com.allenstudio.ir.ui.StatusBar();
    javax.swing.JRootPane var57 = var56.getRootPane();
    java.awt.Point var58 = var56.location();
    com.allenstudio.ir.ui.Toolbar var59 = new com.allenstudio.ir.ui.Toolbar();
    boolean var60 = var59.isFloatable();
    java.awt.Component var62 = var59.getComponentAtIndex(10);
    java.lang.Object var63 = var56.getClientProperty((java.lang.Object)10);
    java.awt.Dimension var64 = var56.getMaximumSize();
    var53.setMinimumSize(var64);
    java.awt.Rectangle var66 = var53.getBounds();
    var46.scrollRectToVisible(var66);
    var41.repaint(var66);
    int var71 = var0.getScrollableBlockIncrement(var66, 10, 10);
    boolean var72 = var0.getScrollableTracksViewportWidth();
    java.awt.Dimension var73 = var0.getPreferredScrollableViewportSize();
    var0.removeListEventListener();
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var3);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var4);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var5);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var12 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var15 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var17);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var19);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var20);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var22);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var23);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var25 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var27);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var28);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var29);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var31);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var37 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var40 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var47 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var50 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var52);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var54);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var55);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var57);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var58);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var60 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var62);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var63);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var64);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var66);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var71 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var72 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var73);

  }

  public void test22() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest1.test22");


    com.allenstudio.ir.ui.DatePickerPane var0 = new com.allenstudio.ir.ui.DatePickerPane();
    javax.swing.KeyStroke[] var1 = var0.getRegisteredKeyStrokes();
    com.allenstudio.ir.ui.Toolbar var2 = new com.allenstudio.ir.ui.Toolbar();
    java.awt.image.ColorModel var3 = var2.getColorModel();
    java.awt.im.InputContext var4 = var2.getInputContext();
    java.awt.Component var6 = var2.getComponentAtIndex(0);
    var0.setToolBar((javax.swing.JToolBar)var2);
    boolean var9 = var0.areFocusTraversalKeysSet(0);
    javax.swing.border.Border var10 = var0.getContentPaneBorder();
    com.allenstudio.ir.ui.MainFrame var11 = new com.allenstudio.ir.ui.MainFrame();
    java.lang.String var12 = var11.getWarningString();
    java.awt.Rectangle var13 = var11.getMaximizedBounds();
    java.awt.MenuBar var14 = var11.getMenuBar();
    com.allenstudio.ir.ui.NoteListsTabPane var15 = new com.allenstudio.ir.ui.NoteListsTabPane();
    com.allenstudio.ir.ui.Toolbar var16 = new com.allenstudio.ir.ui.Toolbar();
    boolean var17 = var16.isFloatable();
    var16.show();
    java.awt.image.ColorModel var19 = var16.getColorModel();
    boolean var20 = var16.isFocusCycleRoot();
    com.allenstudio.ir.ui.DatePickerPane var21 = new com.allenstudio.ir.ui.DatePickerPane();
    var21.transferFocus();
    com.allenstudio.ir.ui.Toolbar var23 = new com.allenstudio.ir.ui.Toolbar();
    java.awt.image.ColorModel var24 = var23.getColorModel();
    var23.setEnabled(true);
    java.awt.Component var28 = var23.getComponentAtIndex(1);
    boolean var29 = var23.isFloatable();
    var21.setContent((java.awt.Component)var23);
    java.awt.Dimension var31 = var21.size();
    com.allenstudio.ir.ui.Toolbar var32 = new com.allenstudio.ir.ui.Toolbar();
    boolean var33 = var32.isFloatable();
    var32.show();
    boolean var35 = var32.isRequestFocusEnabled();
    java.awt.Dimension var36 = var32.minimumSize();
    var21.setToolBar((javax.swing.JToolBar)var32);
    java.awt.Image var40 = var21.createImage(10, (-1));
    var15.add((java.awt.Component)var16, (java.lang.Object)10);
    var11.widgetChanged((com.allenstudio.ir.core.InspirentoWidget)var15);
    java.awt.event.ComponentListener[] var43 = var15.getComponentListeners();
    com.allenstudio.ir.ui.calendar.MonthlyCalendar var44 = new com.allenstudio.ir.ui.calendar.MonthlyCalendar();
    java.awt.Color var45 = var44.getDateBackground();
    var44.setYearMonth(1, (-1));
    java.util.Calendar var49 = var44.getSelectedDate();
    var15.remove((java.awt.Component)var44);
    var0.removeMouseListener((java.awt.event.MouseListener)var44);
    var0.setName("ToolBarUI");
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var1);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var3);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var4);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var6);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var9 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var10);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var12);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var13);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var14);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var17 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var19);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var20 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var24);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var28);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var29 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var31);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var33 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var35 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var36);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var40);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var43);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var45);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var49);

  }

  public void test23() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest1.test23");


    com.allenstudio.ir.ui.NoteListsTabPane var0 = new com.allenstudio.ir.ui.NoteListsTabPane();
    com.allenstudio.ir.ui.Toolbar var1 = new com.allenstudio.ir.ui.Toolbar();
    boolean var2 = var1.isFloatable();
    var1.show();
    java.awt.image.ColorModel var4 = var1.getColorModel();
    boolean var5 = var1.isFocusCycleRoot();
    com.allenstudio.ir.ui.DatePickerPane var6 = new com.allenstudio.ir.ui.DatePickerPane();
    var6.transferFocus();
    com.allenstudio.ir.ui.Toolbar var8 = new com.allenstudio.ir.ui.Toolbar();
    java.awt.image.ColorModel var9 = var8.getColorModel();
    var8.setEnabled(true);
    java.awt.Component var13 = var8.getComponentAtIndex(1);
    boolean var14 = var8.isFloatable();
    var6.setContent((java.awt.Component)var8);
    java.awt.Dimension var16 = var6.size();
    com.allenstudio.ir.ui.Toolbar var17 = new com.allenstudio.ir.ui.Toolbar();
    boolean var18 = var17.isFloatable();
    var17.show();
    boolean var20 = var17.isRequestFocusEnabled();
    java.awt.Dimension var21 = var17.minimumSize();
    var6.setToolBar((javax.swing.JToolBar)var17);
    java.awt.Image var25 = var6.createImage(10, (-1));
    var0.add((java.awt.Component)var1, (java.lang.Object)10);
    var0.setSelectedIndex(1);
    javax.swing.plaf.TabbedPaneUI var29 = var0.getUI();
    int var30 = var0.getTabRunCount();
    com.allenstudio.ir.ui.DatePickerPane var31 = new com.allenstudio.ir.ui.DatePickerPane();
    java.awt.Container var32 = var31.getContentPane();
    int var33 = var0.indexOfTabComponent((java.awt.Component)var31);
    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      var0.setToolTipTextAt(6, "TabbedPaneUI");
      fail("Expected exception of type java.lang.IndexOutOfBoundsException");
    } catch (java.lang.IndexOutOfBoundsException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var2 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var4);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var5 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var9);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var13);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var14 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var16);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var18 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var20 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var21);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var25);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var29);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var30 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var32);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var33 == (-1));

  }

  public void test24() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest1.test24");


    com.allenstudio.ir.ui.NoteList var0 = new com.allenstudio.ir.ui.NoteList();
    com.allenstudio.ir.ui.MainFrame var1 = new com.allenstudio.ir.ui.MainFrame();
    java.lang.String var2 = var1.getWarningString();
    java.awt.Rectangle var3 = var1.getMaximizedBounds();
    java.awt.MenuBar var4 = var1.getMenuBar();
    com.allenstudio.ir.core.plugins.CommonNote var5 = new com.allenstudio.ir.core.plugins.CommonNote();
    var5.resize(0, 1);
    com.allenstudio.ir.ui.NoteListCell var9 = new com.allenstudio.ir.ui.NoteListCell((com.allenstudio.ir.core.plugins.AbstractNote)var5);
    com.allenstudio.ir.ui.StatusBar var10 = new com.allenstudio.ir.ui.StatusBar();
    boolean var11 = var10.isBackgroundSet();
    boolean var14 = var10.contains(10, 100);
    var10.revalidate();
    javax.swing.JToolTip var16 = var10.createToolTip();
    com.allenstudio.ir.ui.StatusBar var17 = new com.allenstudio.ir.ui.StatusBar();
    javax.swing.JRootPane var18 = var17.getRootPane();
    java.awt.Point var19 = var17.location();
    com.allenstudio.ir.ui.StatusBar var20 = new com.allenstudio.ir.ui.StatusBar();
    javax.swing.JRootPane var21 = var20.getRootPane();
    java.awt.Point var22 = var20.location();
    com.allenstudio.ir.ui.Toolbar var23 = new com.allenstudio.ir.ui.Toolbar();
    boolean var24 = var23.isFloatable();
    java.awt.Component var26 = var23.getComponentAtIndex(10);
    java.lang.Object var27 = var20.getClientProperty((java.lang.Object)10);
    java.awt.Dimension var28 = var20.getMaximumSize();
    var17.setMinimumSize(var28);
    java.awt.Rectangle var30 = var17.getBounds();
    var10.scrollRectToVisible(var30);
    var5.repaint(var30);
    var1.setMaximizedBounds(var30);
    int var36 = var0.getScrollableBlockIncrement(var30, 1, 4);
    int var37 = var0.getDebugGraphicsOptions();
    boolean var38 = var0.getScrollableTracksViewportHeight();
    int var39 = var0.getCellCount();
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var2);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var3);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var4);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var11 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var14 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var16);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var18);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var19);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var21);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var22);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var24 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var26);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var27);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var28);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var30);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var36 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var37 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var38 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var39 == 5);

  }

  public void test25() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest1.test25");


    com.allenstudio.ir.ui.MainFrame var0 = new com.allenstudio.ir.ui.MainFrame();
    java.lang.String var1 = var0.getWarningString();
    java.lang.String var2 = var0.getWarningString();
    var0.toFront();
    java.awt.im.InputContext var4 = var0.getInputContext();
    java.awt.Graphics var5 = var0.getGraphics();
    var0.setAutoRequestFocus(true);
    boolean var8 = var0.isFocused();
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var1);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var2);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var4);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var5);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var8 == false);

  }

  public void test26() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest1.test26");


    com.allenstudio.ir.ui.DatePickerPane var0 = new com.allenstudio.ir.ui.DatePickerPane();
    java.awt.Container var1 = var0.getContentPane();
    var0.setIgnoreRepaint(true);
    boolean var4 = var0.isSelected();
    java.lang.String var5 = var0.getUIClassID();
    java.awt.event.ComponentListener[] var6 = var0.getComponentListeners();
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var4 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var5 + "' != '" + "PanelUI"+ "'", var5.equals("PanelUI"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var6);

  }

  public void test27() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest1.test27");


    com.allenstudio.ir.ui.calendar.MonthlyCalendar var0 = new com.allenstudio.ir.ui.calendar.MonthlyCalendar();
    com.allenstudio.ir.ui.DatePickerPane var1 = new com.allenstudio.ir.ui.DatePickerPane();
    var1.transferFocus();
    com.allenstudio.ir.ui.Toolbar var3 = new com.allenstudio.ir.ui.Toolbar();
    java.awt.image.ColorModel var4 = var3.getColorModel();
    var3.setEnabled(true);
    java.awt.Component var8 = var3.getComponentAtIndex(1);
    boolean var9 = var3.isFloatable();
    var1.setContent((java.awt.Component)var3);
    java.awt.Color var11 = var3.getForeground();
    boolean var12 = var3.requestFocusInWindow();
    var3.setDoubleBuffered(true);
    com.allenstudio.ir.ui.Toolbar var15 = new com.allenstudio.ir.ui.Toolbar();
    java.awt.image.ColorModel var16 = var15.getColorModel();
    var15.setEnabled(true);
    java.awt.Component var20 = var15.getComponentAtIndex(1);
    java.awt.Component var22 = var15.getComponentAtIndex(1);
    java.awt.event.InputMethodListener[] var23 = var15.getInputMethodListeners();
    com.allenstudio.ir.ui.Toolbar var24 = new com.allenstudio.ir.ui.Toolbar();
    java.awt.Dimension var25 = var24.size();
    java.awt.Dimension var26 = var15.getSize(var25);
    var3.addSeparator(var26);
    javax.swing.border.Border var28 = var3.getBorder();
    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      var0.setBorder(var28);
      fail("Expected exception of type java.lang.ClassCastException");
    } catch (java.lang.ClassCastException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var4);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var8);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var9 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var11);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var12 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var16);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var20);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var22);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var23);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var25);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var26);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var28);

  }

  public void test28() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest1.test28");


    com.allenstudio.ir.ui.MainFrame var0 = new com.allenstudio.ir.ui.MainFrame();
    java.lang.String var1 = var0.getWarningString();
    java.awt.Rectangle var2 = var0.getMaximizedBounds();
    java.awt.MenuBar var3 = var0.getMenuBar();
    com.allenstudio.ir.ui.NoteListsTabPane var4 = new com.allenstudio.ir.ui.NoteListsTabPane();
    var0.widgetChanged((com.allenstudio.ir.core.InspirentoWidget)var4);
    var4.changed();
    com.allenstudio.ir.ui.DatePickerPane var8 = new com.allenstudio.ir.ui.DatePickerPane();
    var8.transferFocus();
    com.allenstudio.ir.ui.Toolbar var10 = new com.allenstudio.ir.ui.Toolbar();
    java.awt.image.ColorModel var11 = var10.getColorModel();
    var10.setEnabled(true);
    java.awt.Component var15 = var10.getComponentAtIndex(1);
    boolean var16 = var10.isFloatable();
    var8.setContent((java.awt.Component)var10);
    var8.setSelected(true);
    var8.resize(0, 1);
    java.awt.Rectangle var23 = var8.getBounds();
    java.awt.Point var24 = var8.location();
    com.allenstudio.ir.ui.Toolbar var25 = new com.allenstudio.ir.ui.Toolbar();
    java.awt.image.ColorModel var26 = var25.getColorModel();
    java.awt.im.InputContext var27 = var25.getInputContext();
    java.awt.Component var29 = var25.getComponent(0);
    java.awt.Font var30 = var25.getFont();
    java.awt.FontMetrics var31 = var8.getFontMetrics(var30);
    var4.addTab("", (java.awt.Component)var8);
    com.allenstudio.ir.ui.NoteListsTabPane var34 = new com.allenstudio.ir.ui.NoteListsTabPane();
    com.allenstudio.ir.ui.Toolbar var35 = new com.allenstudio.ir.ui.Toolbar();
    boolean var36 = var35.isFloatable();
    var35.show();
    java.awt.image.ColorModel var38 = var35.getColorModel();
    boolean var39 = var35.isFocusCycleRoot();
    com.allenstudio.ir.ui.DatePickerPane var40 = new com.allenstudio.ir.ui.DatePickerPane();
    var40.transferFocus();
    com.allenstudio.ir.ui.Toolbar var42 = new com.allenstudio.ir.ui.Toolbar();
    java.awt.image.ColorModel var43 = var42.getColorModel();
    var42.setEnabled(true);
    java.awt.Component var47 = var42.getComponentAtIndex(1);
    boolean var48 = var42.isFloatable();
    var40.setContent((java.awt.Component)var42);
    java.awt.Dimension var50 = var40.size();
    com.allenstudio.ir.ui.Toolbar var51 = new com.allenstudio.ir.ui.Toolbar();
    boolean var52 = var51.isFloatable();
    var51.show();
    boolean var54 = var51.isRequestFocusEnabled();
    java.awt.Dimension var55 = var51.minimumSize();
    var40.setToolBar((javax.swing.JToolBar)var51);
    java.awt.Image var59 = var40.createImage(10, (-1));
    var34.add((java.awt.Component)var35, (java.lang.Object)10);
    com.allenstudio.ir.ui.Toolbar var61 = new com.allenstudio.ir.ui.Toolbar();
    boolean var62 = var61.isFloatable();
    java.awt.Component var64 = var61.getComponentAtIndex(10);
    boolean var65 = var61.isLightweight();
    java.awt.Component var66 = var34.add((java.awt.Component)var61);
    com.allenstudio.ir.ui.NoteListsTabPane var67 = new com.allenstudio.ir.ui.NoteListsTabPane();
    com.allenstudio.ir.ui.Toolbar var68 = new com.allenstudio.ir.ui.Toolbar();
    boolean var69 = var68.isFloatable();
    var68.show();
    java.awt.image.ColorModel var71 = var68.getColorModel();
    boolean var72 = var68.isFocusCycleRoot();
    com.allenstudio.ir.ui.DatePickerPane var73 = new com.allenstudio.ir.ui.DatePickerPane();
    var73.transferFocus();
    com.allenstudio.ir.ui.Toolbar var75 = new com.allenstudio.ir.ui.Toolbar();
    java.awt.image.ColorModel var76 = var75.getColorModel();
    var75.setEnabled(true);
    java.awt.Component var80 = var75.getComponentAtIndex(1);
    boolean var81 = var75.isFloatable();
    var73.setContent((java.awt.Component)var75);
    java.awt.Dimension var83 = var73.size();
    com.allenstudio.ir.ui.Toolbar var84 = new com.allenstudio.ir.ui.Toolbar();
    boolean var85 = var84.isFloatable();
    var84.show();
    boolean var87 = var84.isRequestFocusEnabled();
    java.awt.Dimension var88 = var84.minimumSize();
    var73.setToolBar((javax.swing.JToolBar)var84);
    java.awt.Image var92 = var73.createImage(10, (-1));
    var67.add((java.awt.Component)var68, (java.lang.Object)10);
    var67.setSelectedIndex(1);
    javax.swing.plaf.TabbedPaneUI var96 = var67.getUI();
    javax.swing.SingleSelectionModel var97 = var67.getModel();
    var34.setModel(var97);
    java.awt.Component var99 = var4.add("Title", (java.awt.Component)var34);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var1);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var2);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var3);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var11);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var15);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var16 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var23);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var24);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var26);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var27);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var29);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var30);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var31);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var36 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var38);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var39 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var43);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var47);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var48 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var50);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var52 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var54 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var55);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var59);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var62 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var64);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var65 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var66);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var69 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var71);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var72 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var76);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var80);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var81 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var83);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var85 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var87 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var88);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var92);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var96);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var97);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var99);

  }

  public void test29() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest1.test29");


    com.allenstudio.ir.core.plugins.CommonNote var0 = new com.allenstudio.ir.core.plugins.CommonNote();
    var0.setFocusTraversalPolicyProvider(false);
    com.allenstudio.ir.ui.StatusBar var3 = new com.allenstudio.ir.ui.StatusBar();
    int var4 = var3.getY();
    javax.swing.JToolTip var5 = var3.createToolTip();
    float var6 = var5.getAlignmentY();
    java.awt.Color var7 = var5.getForeground();
    var0.remove((java.awt.Component)var5);
    com.allenstudio.ir.ui.MainFrame var10 = new com.allenstudio.ir.ui.MainFrame();
    java.lang.String var11 = var10.getWarningString();
    java.lang.String var12 = var10.getWarningString();
    java.awt.Container var13 = var10.getFocusCycleRootAncestor();
    com.allenstudio.ir.ui.StatusBar var14 = new com.allenstudio.ir.ui.StatusBar();
    boolean var15 = var14.isBackgroundSet();
    boolean var18 = var14.contains(10, 100);
    var14.revalidate();
    javax.swing.JToolTip var20 = var14.createToolTip();
    com.allenstudio.ir.ui.StatusBar var21 = new com.allenstudio.ir.ui.StatusBar();
    javax.swing.JRootPane var22 = var21.getRootPane();
    java.awt.Point var23 = var21.location();
    com.allenstudio.ir.ui.StatusBar var24 = new com.allenstudio.ir.ui.StatusBar();
    javax.swing.JRootPane var25 = var24.getRootPane();
    java.awt.Point var26 = var24.location();
    com.allenstudio.ir.ui.Toolbar var27 = new com.allenstudio.ir.ui.Toolbar();
    boolean var28 = var27.isFloatable();
    java.awt.Component var30 = var27.getComponentAtIndex(10);
    java.lang.Object var31 = var24.getClientProperty((java.lang.Object)10);
    java.awt.Dimension var32 = var24.getMaximumSize();
    var21.setMinimumSize(var32);
    java.awt.Rectangle var34 = var21.getBounds();
    var14.scrollRectToVisible(var34);
    var10.setMaximizedBounds(var34);
    var10.pack();
    float var38 = var10.getOpacity();
    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      java.awt.Component var39 = var5.add("TabbedPaneUI", (java.awt.Component)var10);
      fail("Expected exception of type java.lang.IllegalArgumentException");
    } catch (java.lang.IllegalArgumentException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var4 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var5);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var6 == 0.5f);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var7);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var11);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var12);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var13);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var15 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var18 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var20);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var22);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var23);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var25);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var26);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var28 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var30);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var31);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var32);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var34);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var38 == 1.0f);

  }

  public void test30() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest1.test30");


    com.allenstudio.ir.ui.MainFrame var0 = new com.allenstudio.ir.ui.MainFrame();
    java.awt.event.MouseWheelListener[] var1 = var0.getMouseWheelListeners();
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var1);

  }

  public void test31() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest1.test31");


    com.allenstudio.ir.ui.MainFrame var0 = new com.allenstudio.ir.ui.MainFrame();
    java.lang.String var1 = var0.getWarningString();
    java.awt.Rectangle var2 = var0.getMaximizedBounds();
    java.awt.MenuBar var3 = var0.getMenuBar();
    com.allenstudio.ir.ui.NoteListsTabPane var4 = new com.allenstudio.ir.ui.NoteListsTabPane();
    var0.widgetChanged((com.allenstudio.ir.core.InspirentoWidget)var4);
    var4.changed();
    com.allenstudio.ir.ui.DatePickerPane var8 = new com.allenstudio.ir.ui.DatePickerPane();
    var8.transferFocus();
    com.allenstudio.ir.ui.Toolbar var10 = new com.allenstudio.ir.ui.Toolbar();
    java.awt.image.ColorModel var11 = var10.getColorModel();
    var10.setEnabled(true);
    java.awt.Component var15 = var10.getComponentAtIndex(1);
    boolean var16 = var10.isFloatable();
    var8.setContent((java.awt.Component)var10);
    var8.setSelected(true);
    var8.resize(0, 1);
    java.awt.Rectangle var23 = var8.getBounds();
    java.awt.Point var24 = var8.location();
    com.allenstudio.ir.ui.Toolbar var25 = new com.allenstudio.ir.ui.Toolbar();
    java.awt.image.ColorModel var26 = var25.getColorModel();
    java.awt.im.InputContext var27 = var25.getInputContext();
    java.awt.Component var29 = var25.getComponent(0);
    java.awt.Font var30 = var25.getFont();
    java.awt.FontMetrics var31 = var8.getFontMetrics(var30);
    var4.addTab("", (java.awt.Component)var8);
    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      javax.swing.InputMap var34 = var4.getInputMap((-1));
      fail("Expected exception of type java.lang.IllegalArgumentException");
    } catch (java.lang.IllegalArgumentException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var1);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var2);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var3);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var11);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var15);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var16 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var23);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var24);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var26);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var27);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var29);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var30);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var31);

  }

  public void test32() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest1.test32");


    com.allenstudio.ir.ui.DatePickerPane var0 = new com.allenstudio.ir.ui.DatePickerPane();
    java.lang.String var1 = var0.getTitle();
    boolean var2 = var0.isManagingFocus();
    java.awt.LayoutManager var3 = var0.getLayout();
    var0.setDebugGraphicsOptions(1);
    java.awt.Color var6 = var0.getHeaderBackground();
    com.allenstudio.ir.ui.DatePickerPane var7 = new com.allenstudio.ir.ui.DatePickerPane();
    var7.transferFocus();
    java.awt.Dimension var9 = var7.getMinimumSize();
    com.allenstudio.ir.ui.StatusBar var10 = new com.allenstudio.ir.ui.StatusBar();
    int var11 = var10.getY();
    javax.swing.JToolTip var12 = var10.createToolTip();
    float var13 = var12.getAlignmentY();
    java.awt.Color var14 = var12.getForeground();
    var7.setBackground(var14);
    java.awt.Component.BaselineResizeBehavior var16 = var7.getBaselineResizeBehavior();
    var0.setContent((java.awt.Component)var7);
    var7.repaint();
    var7.updateUI();
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var1 + "' != '" + "Date Picker"+ "'", var1.equals("Date Picker"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var2 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var3);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var6);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var9);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var11 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var12);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var13 == 0.5f);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var14);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var16);

  }

  public void test33() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest1.test33");


    com.allenstudio.ir.ui.DatePickerPane var0 = new com.allenstudio.ir.ui.DatePickerPane();
    var0.transferFocus();
    com.allenstudio.ir.ui.Toolbar var2 = new com.allenstudio.ir.ui.Toolbar();
    java.awt.image.ColorModel var3 = var2.getColorModel();
    var2.setEnabled(true);
    java.awt.Component var7 = var2.getComponentAtIndex(1);
    boolean var8 = var2.isFloatable();
    var0.setContent((java.awt.Component)var2);
    var0.setSelected(true);
    var0.resize(0, 1);
    java.awt.Rectangle var15 = var0.getBounds();
    java.awt.Point var16 = var0.location();
    boolean var19 = var0.contains(100, 1);
    var0.addNotify();
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var3);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var7);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var8 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var15);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var16);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var19 == false);

  }

  public void test34() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest1.test34");


    com.allenstudio.ir.ui.NoteListsTabPane var0 = new com.allenstudio.ir.ui.NoteListsTabPane();
    com.allenstudio.ir.ui.Toolbar var1 = new com.allenstudio.ir.ui.Toolbar();
    boolean var2 = var1.isFloatable();
    var1.show();
    java.awt.image.ColorModel var4 = var1.getColorModel();
    boolean var5 = var1.isFocusCycleRoot();
    com.allenstudio.ir.ui.DatePickerPane var6 = new com.allenstudio.ir.ui.DatePickerPane();
    var6.transferFocus();
    com.allenstudio.ir.ui.Toolbar var8 = new com.allenstudio.ir.ui.Toolbar();
    java.awt.image.ColorModel var9 = var8.getColorModel();
    var8.setEnabled(true);
    java.awt.Component var13 = var8.getComponentAtIndex(1);
    boolean var14 = var8.isFloatable();
    var6.setContent((java.awt.Component)var8);
    java.awt.Dimension var16 = var6.size();
    com.allenstudio.ir.ui.Toolbar var17 = new com.allenstudio.ir.ui.Toolbar();
    boolean var18 = var17.isFloatable();
    var17.show();
    boolean var20 = var17.isRequestFocusEnabled();
    java.awt.Dimension var21 = var17.minimumSize();
    var6.setToolBar((javax.swing.JToolBar)var17);
    java.awt.Image var25 = var6.createImage(10, (-1));
    var0.add((java.awt.Component)var1, (java.lang.Object)10);
    var0.setSelectedIndex(1);
    javax.swing.plaf.TabbedPaneUI var29 = var0.getUI();
    com.allenstudio.ir.ui.StatusBar var30 = new com.allenstudio.ir.ui.StatusBar();
    int var31 = var30.getY();
    javax.swing.JToolTip var32 = var30.createToolTip();
    javax.swing.JToolTip var33 = var32.createToolTip();
    boolean var34 = var33.isFocusable();
    com.allenstudio.ir.ui.StatusBar var35 = new com.allenstudio.ir.ui.StatusBar();
    javax.swing.JRootPane var36 = var35.getRootPane();
    java.awt.Point var37 = var35.location();
    com.allenstudio.ir.ui.Toolbar var38 = new com.allenstudio.ir.ui.Toolbar();
    boolean var39 = var38.isFloatable();
    java.awt.Component var41 = var38.getComponentAtIndex(10);
    java.lang.Object var42 = var35.getClientProperty((java.lang.Object)10);
    java.awt.Dimension var43 = var35.getMaximumSize();
    var33.resize(var43);
    int var45 = var33.getY();
    com.allenstudio.ir.ui.StatusBar var46 = new com.allenstudio.ir.ui.StatusBar();
    com.allenstudio.ir.core.plugins.CommonNote var47 = new com.allenstudio.ir.core.plugins.CommonNote();
    var47.setFocusTraversalPolicyProvider(false);
    var46.remove((java.awt.Component)var47);
    com.allenstudio.ir.ui.StatusBar var51 = new com.allenstudio.ir.ui.StatusBar();
    int var52 = var51.getY();
    javax.swing.JToolTip var53 = var51.createToolTip();
    java.awt.Insets var54 = var53.getInsets();
    java.awt.Insets var55 = var47.getInsets(var54);
    java.awt.Insets var56 = var33.getInsets(var55);
    boolean var57 = var33.isManagingFocus();
    var33.setIgnoreRepaint(true);
    int var60 = var0.indexOfTabComponent((java.awt.Component)var33);
    var0.changed();
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var2 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var4);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var5 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var9);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var13);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var14 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var16);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var18 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var20 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var21);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var25);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var29);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var31 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var32);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var33);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var34 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var36);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var37);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var39 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var41);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var42);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var43);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var45 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var52 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var53);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var54);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var55);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var56);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var57 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var60 == (-1));

  }

  public void test35() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest1.test35");


    com.allenstudio.ir.util.XmlElement var0 = new com.allenstudio.ir.util.XmlElement();
    com.allenstudio.ir.util.XmlElement var2 = var0.addSubElement("hi!");
    com.allenstudio.ir.util.XmlElement var5 = var2.addSubElement("", "hi!");
    com.allenstudio.ir.ui.StatusBar var6 = new com.allenstudio.ir.ui.StatusBar();
    int var7 = var6.getY();
    var6.disable();
    var6.firePropertyChange("hi!", (byte)(-1), (byte)10);
    var2.notifyObservers((java.lang.Object)(byte)(-1));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var2);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var5);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var7 == 0);

  }

  public void test36() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest1.test36");


    com.allenstudio.ir.ui.DatePickerPane var0 = new com.allenstudio.ir.ui.DatePickerPane();
    java.lang.String var1 = var0.getTitle();
    boolean var2 = var0.isManagingFocus();
    com.allenstudio.ir.event.NoteListDataEvent var4 = new com.allenstudio.ir.event.NoteListDataEvent((java.lang.Object)var0, 6);
    int var5 = var4.getIndex();
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var1 + "' != '" + "Date Picker"+ "'", var1.equals("Date Picker"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var2 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var5 == 6);

  }

  public void test37() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest1.test37");


    com.allenstudio.ir.ui.Toolbar var0 = new com.allenstudio.ir.ui.Toolbar();
    java.awt.image.ColorModel var1 = var0.getColorModel();
    var0.setEnabled(true);
    java.awt.Component var5 = var0.getComponentAtIndex(1);
    boolean var6 = var0.requestFocusInWindow();
    java.awt.FocusTraversalPolicy var7 = var0.getFocusTraversalPolicy();
    java.beans.PropertyChangeListener[] var9 = var0.getPropertyChangeListeners("Date Picker");
    boolean var10 = var0.isFontSet();
    com.allenstudio.ir.ui.calendar.MonthlyCalendar var11 = new com.allenstudio.ir.ui.calendar.MonthlyCalendar();
    var0.removeMouseListener((java.awt.event.MouseListener)var11);
    var11.setMonth(4);
    com.allenstudio.ir.ui.Toolbar var15 = new com.allenstudio.ir.ui.Toolbar();
    boolean var16 = var15.isFloatable();
    var15.show();
    java.awt.image.ColorModel var18 = var15.getColorModel();
    boolean var19 = var15.isFocusCycleRoot();
    com.allenstudio.ir.ui.DatePickerPane var20 = new com.allenstudio.ir.ui.DatePickerPane();
    var20.transferFocus();
    com.allenstudio.ir.ui.Toolbar var22 = new com.allenstudio.ir.ui.Toolbar();
    java.awt.image.ColorModel var23 = var22.getColorModel();
    var22.setEnabled(true);
    java.awt.Component var27 = var22.getComponentAtIndex(1);
    boolean var28 = var22.isFloatable();
    var20.setContent((java.awt.Component)var22);
    java.awt.Font var30 = var20.getFont();
    java.awt.FontMetrics var31 = var15.getFontMetrics(var30);
    var11.setHeaderFont(var30);
    com.allenstudio.ir.ui.calendar.MonthlyCalendar var33 = new com.allenstudio.ir.ui.calendar.MonthlyCalendar();
    javax.swing.JComponent var34 = var33.getHeaderComponent();
    java.awt.Color var35 = var33.getDateForeground();
    var11.setHeaderForeground(var35);
    boolean var37 = var11.getWeekStartOnSunday();
    com.allenstudio.ir.ui.calendar.IMonthlyCalendarModel var38 = var11.getModel();
    var11.repaint(4, 30, 100, 32);
    java.awt.Component.BaselineResizeBehavior var44 = var11.getBaselineResizeBehavior();
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var1);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var5);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var6 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var7);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var9);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var10 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var16 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var18);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var19 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var23);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var27);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var28 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var30);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var31);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var34);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var35);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var37 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var38);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var44);

  }

  public void test38() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest1.test38");


    com.allenstudio.ir.ui.StatusBar var0 = new com.allenstudio.ir.ui.StatusBar();
    boolean var1 = var0.isBackgroundSet();
    var0.repaint(100L);
    var0.disable();
    var0.repaint((-1), 100, 100, 10);
    com.allenstudio.ir.ui.MainFrame var10 = new com.allenstudio.ir.ui.MainFrame();
    java.lang.String var11 = var10.getWarningString();
    java.awt.Rectangle var12 = var10.getMaximizedBounds();
    java.awt.MenuBar var13 = var10.getMenuBar();
    com.allenstudio.ir.core.plugins.CommonNote var14 = new com.allenstudio.ir.core.plugins.CommonNote();
    var14.resize(0, 1);
    com.allenstudio.ir.ui.NoteListCell var18 = new com.allenstudio.ir.ui.NoteListCell((com.allenstudio.ir.core.plugins.AbstractNote)var14);
    com.allenstudio.ir.ui.StatusBar var19 = new com.allenstudio.ir.ui.StatusBar();
    boolean var20 = var19.isBackgroundSet();
    boolean var23 = var19.contains(10, 100);
    var19.revalidate();
    javax.swing.JToolTip var25 = var19.createToolTip();
    com.allenstudio.ir.ui.StatusBar var26 = new com.allenstudio.ir.ui.StatusBar();
    javax.swing.JRootPane var27 = var26.getRootPane();
    java.awt.Point var28 = var26.location();
    com.allenstudio.ir.ui.StatusBar var29 = new com.allenstudio.ir.ui.StatusBar();
    javax.swing.JRootPane var30 = var29.getRootPane();
    java.awt.Point var31 = var29.location();
    com.allenstudio.ir.ui.Toolbar var32 = new com.allenstudio.ir.ui.Toolbar();
    boolean var33 = var32.isFloatable();
    java.awt.Component var35 = var32.getComponentAtIndex(10);
    java.lang.Object var36 = var29.getClientProperty((java.lang.Object)10);
    java.awt.Dimension var37 = var29.getMaximumSize();
    var26.setMinimumSize(var37);
    java.awt.Rectangle var39 = var26.getBounds();
    var19.scrollRectToVisible(var39);
    var14.repaint(var39);
    var10.setMaximizedBounds(var39);
    var0.repaint(var39);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var1 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var11);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var12);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var13);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var20 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var23 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var25);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var27);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var28);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var30);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var31);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var33 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var35);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var36);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var37);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var39);

  }

  public void test39() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest1.test39");


    com.allenstudio.ir.ui.StatusBar var0 = new com.allenstudio.ir.ui.StatusBar();
    var0.enable();
    boolean var2 = var0.isFocusOwner();
    var0.firePropertyChange("hi!", 10L, 0L);
    var0.layout();
    int var8 = var0.getY();
    var0.setAlignmentX(1.0f);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var2 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var8 == 0);

  }

  public void test40() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest1.test40");


    com.allenstudio.ir.ui.Toolbar var0 = new com.allenstudio.ir.ui.Toolbar();
    boolean var1 = var0.isFloatable();
    var0.show();
    boolean var3 = var0.isRequestFocusEnabled();
    java.awt.Dimension var4 = var0.minimumSize();
    var0.grabFocus();
    var0.disable();
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var1 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var3 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var4);

  }

  public void test41() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest1.test41");


    com.allenstudio.ir.util.XmlIO var0 = new com.allenstudio.ir.util.XmlIO();
    var0.warningDialog("C:\\boot.ini");
    var0.warningDialog(" ");

  }

  public void test42() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest1.test42");


    com.allenstudio.ir.ui.calendar.MonthlyCalendar var0 = new com.allenstudio.ir.ui.calendar.MonthlyCalendar();
    java.awt.event.MouseMotionListener[] var1 = var0.getMouseMotionListeners();
    var0.resize(0, 2015);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var1);

  }

  public void test43() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest1.test43");


    com.allenstudio.ir.ui.Toolbar var0 = new com.allenstudio.ir.ui.Toolbar();
    java.awt.image.ColorModel var1 = var0.getColorModel();
    java.awt.im.InputContext var2 = var0.getInputContext();
    java.awt.Component var4 = var0.getComponent(0);
    java.awt.LayoutManager var5 = var0.getLayout();
    boolean var6 = var0.isRequestFocusEnabled();
    var0.setBounds(31, 0, 1, 100);
    javax.swing.KeyStroke[] var12 = var0.getRegisteredKeyStrokes();
    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      java.awt.Component var14 = var0.getComponent(2015);
      fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException");
    } catch (java.lang.ArrayIndexOutOfBoundsException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var1);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var2);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var4);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var5);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var6 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var12);

  }

  public void test44() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest1.test44");


    com.allenstudio.ir.ui.calendar.MonthlyCalendar var0 = new com.allenstudio.ir.ui.calendar.MonthlyCalendar();
    var0.setWeekStartOnSunday(true);
    com.allenstudio.ir.ui.StatusBar var3 = new com.allenstudio.ir.ui.StatusBar();
    javax.swing.JRootPane var4 = var3.getRootPane();
    java.awt.Point var5 = var3.location();
    com.allenstudio.ir.ui.StatusBar var6 = new com.allenstudio.ir.ui.StatusBar();
    javax.swing.JRootPane var7 = var6.getRootPane();
    java.awt.Point var8 = var6.location();
    com.allenstudio.ir.ui.Toolbar var9 = new com.allenstudio.ir.ui.Toolbar();
    boolean var10 = var9.isFloatable();
    java.awt.Component var12 = var9.getComponentAtIndex(10);
    java.lang.Object var13 = var6.getClientProperty((java.lang.Object)10);
    java.awt.Dimension var14 = var6.getMaximumSize();
    var3.setMinimumSize(var14);
    var3.revalidate();
    var3.firePropertyChange("", '#', ' ');
    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      var0.setComponentZOrder((java.awt.Component)var3, 4);
      fail("Expected exception of type java.lang.IllegalArgumentException");
    } catch (java.lang.IllegalArgumentException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var4);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var5);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var7);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var8);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var10 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var12);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var13);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var14);

  }

  public void test45() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest1.test45");


    com.allenstudio.ir.ui.StatusBar var0 = new com.allenstudio.ir.ui.StatusBar();
    int var1 = var0.getY();
    boolean var2 = var0.isLightweight();
    java.awt.Dimension var3 = var0.getMaximumSize();
    java.awt.event.KeyListener[] var4 = var0.getKeyListeners();
    java.awt.ComponentOrientation var5 = var0.getComponentOrientation();
    java.beans.PropertyChangeListener[] var7 = var0.getPropertyChangeListeners("ToolBarUI");
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var1 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var2 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var3);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var4);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var5);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var7);

  }

  public void test46() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest1.test46");


    com.allenstudio.ir.ui.NoteListsTabPane var0 = new com.allenstudio.ir.ui.NoteListsTabPane();
    com.allenstudio.ir.ui.Toolbar var1 = new com.allenstudio.ir.ui.Toolbar();
    boolean var2 = var1.isFloatable();
    var1.show();
    java.awt.image.ColorModel var4 = var1.getColorModel();
    boolean var5 = var1.isFocusCycleRoot();
    com.allenstudio.ir.ui.DatePickerPane var6 = new com.allenstudio.ir.ui.DatePickerPane();
    var6.transferFocus();
    com.allenstudio.ir.ui.Toolbar var8 = new com.allenstudio.ir.ui.Toolbar();
    java.awt.image.ColorModel var9 = var8.getColorModel();
    var8.setEnabled(true);
    java.awt.Component var13 = var8.getComponentAtIndex(1);
    boolean var14 = var8.isFloatable();
    var6.setContent((java.awt.Component)var8);
    java.awt.Dimension var16 = var6.size();
    com.allenstudio.ir.ui.Toolbar var17 = new com.allenstudio.ir.ui.Toolbar();
    boolean var18 = var17.isFloatable();
    var17.show();
    boolean var20 = var17.isRequestFocusEnabled();
    java.awt.Dimension var21 = var17.minimumSize();
    var6.setToolBar((javax.swing.JToolBar)var17);
    java.awt.Image var25 = var6.createImage(10, (-1));
    var0.add((java.awt.Component)var1, (java.lang.Object)10);
    com.allenstudio.ir.ui.DatePickerPane var27 = new com.allenstudio.ir.ui.DatePickerPane();
    java.lang.String var28 = var27.getTitle();
    java.awt.dnd.DropTarget var29 = var27.getDropTarget();
    com.allenstudio.ir.util.XmlElement var30 = new com.allenstudio.ir.util.XmlElement();
    boolean var31 = var30.hasChanged();
    var0.add((java.awt.Component)var27, (java.lang.Object)var31, (-1));
    com.allenstudio.ir.ui.NoteListsTabPane var34 = new com.allenstudio.ir.ui.NoteListsTabPane();
    com.allenstudio.ir.ui.Toolbar var35 = new com.allenstudio.ir.ui.Toolbar();
    boolean var36 = var35.isFloatable();
    var35.show();
    java.awt.image.ColorModel var38 = var35.getColorModel();
    boolean var39 = var35.isFocusCycleRoot();
    com.allenstudio.ir.ui.DatePickerPane var40 = new com.allenstudio.ir.ui.DatePickerPane();
    var40.transferFocus();
    com.allenstudio.ir.ui.Toolbar var42 = new com.allenstudio.ir.ui.Toolbar();
    java.awt.image.ColorModel var43 = var42.getColorModel();
    var42.setEnabled(true);
    java.awt.Component var47 = var42.getComponentAtIndex(1);
    boolean var48 = var42.isFloatable();
    var40.setContent((java.awt.Component)var42);
    java.awt.Dimension var50 = var40.size();
    com.allenstudio.ir.ui.Toolbar var51 = new com.allenstudio.ir.ui.Toolbar();
    boolean var52 = var51.isFloatable();
    var51.show();
    boolean var54 = var51.isRequestFocusEnabled();
    java.awt.Dimension var55 = var51.minimumSize();
    var40.setToolBar((javax.swing.JToolBar)var51);
    java.awt.Image var59 = var40.createImage(10, (-1));
    var34.add((java.awt.Component)var35, (java.lang.Object)10);
    com.allenstudio.ir.ui.Toolbar var61 = new com.allenstudio.ir.ui.Toolbar();
    java.awt.image.ColorModel var62 = var61.getColorModel();
    var61.setEnabled(true);
    var34.add((java.awt.Component)var61, (java.lang.Object)100L, 0);
    java.awt.Component var69 = var0.add((java.awt.Component)var34, 1);
    com.allenstudio.ir.core.plugins.CommonNote var70 = new com.allenstudio.ir.core.plugins.CommonNote();
    java.lang.String var71 = var70.getDescription();
    int var72 = var34.indexOfComponent((java.awt.Component)var70);
    com.allenstudio.ir.ui.MainFrame var74 = new com.allenstudio.ir.ui.MainFrame();
    boolean var75 = var74.isShowing();
    var74.addNotify();
    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      var34.addTab("PanelUI", (java.awt.Component)var74);
      fail("Expected exception of type java.lang.IllegalArgumentException");
    } catch (java.lang.IllegalArgumentException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var2 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var4);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var5 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var9);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var13);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var14 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var16);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var18 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var20 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var21);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var25);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var28 + "' != '" + "Date Picker"+ "'", var28.equals("Date Picker"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var29);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var31 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var36 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var38);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var39 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var43);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var47);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var48 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var50);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var52 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var54 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var55);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var59);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var62);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var69);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var71 + "' != '" + "This is a testing description. \u03E3\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\u073F\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD"+ "'", var71.equals("This is a testing description. \u03E3\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\u073F\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var72 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var75 == false);

  }

  public void test47() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest1.test47");


    com.allenstudio.ir.ui.NoteListsTabPane var0 = new com.allenstudio.ir.ui.NoteListsTabPane();
    com.allenstudio.ir.ui.Toolbar var1 = new com.allenstudio.ir.ui.Toolbar();
    boolean var2 = var1.isFloatable();
    var1.show();
    java.awt.image.ColorModel var4 = var1.getColorModel();
    boolean var5 = var1.isFocusCycleRoot();
    com.allenstudio.ir.ui.DatePickerPane var6 = new com.allenstudio.ir.ui.DatePickerPane();
    var6.transferFocus();
    com.allenstudio.ir.ui.Toolbar var8 = new com.allenstudio.ir.ui.Toolbar();
    java.awt.image.ColorModel var9 = var8.getColorModel();
    var8.setEnabled(true);
    java.awt.Component var13 = var8.getComponentAtIndex(1);
    boolean var14 = var8.isFloatable();
    var6.setContent((java.awt.Component)var8);
    java.awt.Dimension var16 = var6.size();
    com.allenstudio.ir.ui.Toolbar var17 = new com.allenstudio.ir.ui.Toolbar();
    boolean var18 = var17.isFloatable();
    var17.show();
    boolean var20 = var17.isRequestFocusEnabled();
    java.awt.Dimension var21 = var17.minimumSize();
    var6.setToolBar((javax.swing.JToolBar)var17);
    java.awt.Image var25 = var6.createImage(10, (-1));
    var0.add((java.awt.Component)var1, (java.lang.Object)10);
    com.allenstudio.ir.ui.Toolbar var27 = new com.allenstudio.ir.ui.Toolbar();
    boolean var28 = var27.isFloatable();
    java.awt.Component var30 = var27.getComponentAtIndex(10);
    boolean var31 = var27.isLightweight();
    java.awt.Component var32 = var0.add((java.awt.Component)var27);
    com.allenstudio.ir.ui.NoteListsTabPane var33 = new com.allenstudio.ir.ui.NoteListsTabPane();
    com.allenstudio.ir.ui.Toolbar var34 = new com.allenstudio.ir.ui.Toolbar();
    boolean var35 = var34.isFloatable();
    var34.show();
    java.awt.image.ColorModel var37 = var34.getColorModel();
    boolean var38 = var34.isFocusCycleRoot();
    com.allenstudio.ir.ui.DatePickerPane var39 = new com.allenstudio.ir.ui.DatePickerPane();
    var39.transferFocus();
    com.allenstudio.ir.ui.Toolbar var41 = new com.allenstudio.ir.ui.Toolbar();
    java.awt.image.ColorModel var42 = var41.getColorModel();
    var41.setEnabled(true);
    java.awt.Component var46 = var41.getComponentAtIndex(1);
    boolean var47 = var41.isFloatable();
    var39.setContent((java.awt.Component)var41);
    java.awt.Dimension var49 = var39.size();
    com.allenstudio.ir.ui.Toolbar var50 = new com.allenstudio.ir.ui.Toolbar();
    boolean var51 = var50.isFloatable();
    var50.show();
    boolean var53 = var50.isRequestFocusEnabled();
    java.awt.Dimension var54 = var50.minimumSize();
    var39.setToolBar((javax.swing.JToolBar)var50);
    java.awt.Image var58 = var39.createImage(10, (-1));
    var33.add((java.awt.Component)var34, (java.lang.Object)10);
    var33.setSelectedIndex(1);
    javax.swing.plaf.TabbedPaneUI var62 = var33.getUI();
    javax.swing.SingleSelectionModel var63 = var33.getModel();
    var0.setModel(var63);
    javax.swing.plaf.TabbedPaneUI var65 = var0.getUI();
    boolean var66 = var0.requestFocusInWindow();
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var2 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var4);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var5 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var9);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var13);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var14 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var16);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var18 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var20 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var21);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var25);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var28 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var30);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var31 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var32);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var35 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var37);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var38 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var42);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var46);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var47 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var49);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var51 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var53 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var54);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var58);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var62);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var63);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var65);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var66 == false);

  }

  public void test48() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest1.test48");


    com.allenstudio.ir.ui.NoteListsTabPane var0 = new com.allenstudio.ir.ui.NoteListsTabPane();
    com.allenstudio.ir.ui.Toolbar var1 = new com.allenstudio.ir.ui.Toolbar();
    boolean var2 = var1.isFloatable();
    var1.show();
    java.awt.image.ColorModel var4 = var1.getColorModel();
    boolean var5 = var1.isFocusCycleRoot();
    com.allenstudio.ir.ui.DatePickerPane var6 = new com.allenstudio.ir.ui.DatePickerPane();
    var6.transferFocus();
    com.allenstudio.ir.ui.Toolbar var8 = new com.allenstudio.ir.ui.Toolbar();
    java.awt.image.ColorModel var9 = var8.getColorModel();
    var8.setEnabled(true);
    java.awt.Component var13 = var8.getComponentAtIndex(1);
    boolean var14 = var8.isFloatable();
    var6.setContent((java.awt.Component)var8);
    java.awt.Dimension var16 = var6.size();
    com.allenstudio.ir.ui.Toolbar var17 = new com.allenstudio.ir.ui.Toolbar();
    boolean var18 = var17.isFloatable();
    var17.show();
    boolean var20 = var17.isRequestFocusEnabled();
    java.awt.Dimension var21 = var17.minimumSize();
    var6.setToolBar((javax.swing.JToolBar)var17);
    java.awt.Image var25 = var6.createImage(10, (-1));
    var0.add((java.awt.Component)var1, (java.lang.Object)10);
    com.allenstudio.ir.ui.DatePickerPane var27 = new com.allenstudio.ir.ui.DatePickerPane();
    java.lang.String var28 = var27.getTitle();
    java.awt.dnd.DropTarget var29 = var27.getDropTarget();
    com.allenstudio.ir.util.XmlElement var30 = new com.allenstudio.ir.util.XmlElement();
    boolean var31 = var30.hasChanged();
    var0.add((java.awt.Component)var27, (java.lang.Object)var31, (-1));
    com.allenstudio.ir.ui.NoteListsTabPane var34 = new com.allenstudio.ir.ui.NoteListsTabPane();
    com.allenstudio.ir.ui.Toolbar var35 = new com.allenstudio.ir.ui.Toolbar();
    boolean var36 = var35.isFloatable();
    var35.show();
    java.awt.image.ColorModel var38 = var35.getColorModel();
    boolean var39 = var35.isFocusCycleRoot();
    com.allenstudio.ir.ui.DatePickerPane var40 = new com.allenstudio.ir.ui.DatePickerPane();
    var40.transferFocus();
    com.allenstudio.ir.ui.Toolbar var42 = new com.allenstudio.ir.ui.Toolbar();
    java.awt.image.ColorModel var43 = var42.getColorModel();
    var42.setEnabled(true);
    java.awt.Component var47 = var42.getComponentAtIndex(1);
    boolean var48 = var42.isFloatable();
    var40.setContent((java.awt.Component)var42);
    java.awt.Dimension var50 = var40.size();
    com.allenstudio.ir.ui.Toolbar var51 = new com.allenstudio.ir.ui.Toolbar();
    boolean var52 = var51.isFloatable();
    var51.show();
    boolean var54 = var51.isRequestFocusEnabled();
    java.awt.Dimension var55 = var51.minimumSize();
    var40.setToolBar((javax.swing.JToolBar)var51);
    java.awt.Image var59 = var40.createImage(10, (-1));
    var34.add((java.awt.Component)var35, (java.lang.Object)10);
    com.allenstudio.ir.ui.Toolbar var61 = new com.allenstudio.ir.ui.Toolbar();
    java.awt.image.ColorModel var62 = var61.getColorModel();
    var61.setEnabled(true);
    var34.add((java.awt.Component)var61, (java.lang.Object)100L, 0);
    java.awt.Component var69 = var0.add((java.awt.Component)var34, 1);
    java.lang.String var71 = var34.getTitleAt(0);
    java.util.Locale var72 = var34.getLocale();
    javax.swing.JComponent.setDefaultLocale(var72);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var2 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var4);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var5 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var9);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var13);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var14 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var16);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var18 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var20 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var21);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var25);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var28 + "' != '" + "Date Picker"+ "'", var28.equals("Date Picker"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var29);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var31 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var36 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var38);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var39 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var43);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var47);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var48 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var50);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var52 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var54 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var55);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var59);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var62);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var69);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var71 + "' != '" + ""+ "'", var71.equals(""));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var72);

  }

  public void test49() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest1.test49");


    com.allenstudio.ir.ui.Toolbar var0 = new com.allenstudio.ir.ui.Toolbar();
    java.awt.image.ColorModel var1 = var0.getColorModel();
    var0.setEnabled(true);
    java.awt.Component var5 = var0.getComponentAtIndex(1);
    boolean var6 = var0.isValidateRoot();
    var0.addSeparator();
    var0.nextFocus();
    javax.swing.plaf.ToolBarUI var9 = var0.getUI();
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var1);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var5);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var6 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var9);

  }

  public void test50() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest1.test50");


    com.allenstudio.ir.ui.StatusBar var0 = new com.allenstudio.ir.ui.StatusBar();
    boolean var1 = var0.isBackgroundSet();
    boolean var4 = var0.contains(10, 100);
    var0.revalidate();
    int var8 = var0.getBaseline(1, 100);
    var0.layout();
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var1 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var4 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var8 == (-1));

  }

  public void test51() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest1.test51");


    com.allenstudio.ir.ui.DatePickerPane var0 = new com.allenstudio.ir.ui.DatePickerPane();
    java.lang.String var1 = var0.getTitle();
    var0.move(100, 10);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var1 + "' != '" + "Date Picker"+ "'", var1.equals("Date Picker"));

  }

  public void test52() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest1.test52");


    com.allenstudio.ir.ui.MainFrame var0 = new com.allenstudio.ir.ui.MainFrame();
    boolean var1 = var0.isShowing();
    java.lang.String var2 = var0.getWarningString();
    var0.setAutoRequestFocus(true);
    com.allenstudio.ir.ui.MainFrame var5 = new com.allenstudio.ir.ui.MainFrame();
    boolean var6 = var5.isShowing();
    int var7 = var5.countComponents();
    com.allenstudio.ir.ui.StatusBar var8 = new com.allenstudio.ir.ui.StatusBar();
    var8.enable();
    com.allenstudio.ir.ui.StatusBar var10 = new com.allenstudio.ir.ui.StatusBar();
    var10.enable();
    boolean var12 = var10.isFocusOwner();
    var10.firePropertyChange("hi!", 10L, 0L);
    var10.layout();
    var10.removeAll();
    com.allenstudio.ir.ui.StatusBar var19 = new com.allenstudio.ir.ui.StatusBar();
    javax.swing.JRootPane var20 = var19.getRootPane();
    java.awt.Point var21 = var19.location();
    java.awt.Point var22 = var10.getLocation(var21);
    var8.setLocation(var22);
    var5.setLocation(var22);
    java.awt.Color var25 = var5.getBackground();
    var0.setBackground(var25);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var1 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var2);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var6 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var7 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var12 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var20);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var21);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var22);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var25);

  }

  public void test53() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest1.test53");


    com.allenstudio.ir.ui.MainFrame var0 = new com.allenstudio.ir.ui.MainFrame();
    java.lang.String var1 = var0.getWarningString();
    java.awt.Rectangle var2 = var0.getMaximizedBounds();
    boolean var3 = var0.isLocationByPlatform();
    boolean var4 = var0.getFocusableWindowState();
    var0.setExtendedState(6);
    var0.removeNotify();
    var0.transferFocusBackward();
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var1);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var2);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var3 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var4 == true);

  }

  public void test54() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest1.test54");


    com.allenstudio.ir.ui.NoteListsTabPane var0 = new com.allenstudio.ir.ui.NoteListsTabPane();
    com.allenstudio.ir.ui.Toolbar var1 = new com.allenstudio.ir.ui.Toolbar();
    boolean var2 = var1.isFloatable();
    var1.show();
    java.awt.image.ColorModel var4 = var1.getColorModel();
    boolean var5 = var1.isFocusCycleRoot();
    com.allenstudio.ir.ui.DatePickerPane var6 = new com.allenstudio.ir.ui.DatePickerPane();
    var6.transferFocus();
    com.allenstudio.ir.ui.Toolbar var8 = new com.allenstudio.ir.ui.Toolbar();
    java.awt.image.ColorModel var9 = var8.getColorModel();
    var8.setEnabled(true);
    java.awt.Component var13 = var8.getComponentAtIndex(1);
    boolean var14 = var8.isFloatable();
    var6.setContent((java.awt.Component)var8);
    java.awt.Dimension var16 = var6.size();
    com.allenstudio.ir.ui.Toolbar var17 = new com.allenstudio.ir.ui.Toolbar();
    boolean var18 = var17.isFloatable();
    var17.show();
    boolean var20 = var17.isRequestFocusEnabled();
    java.awt.Dimension var21 = var17.minimumSize();
    var6.setToolBar((javax.swing.JToolBar)var17);
    java.awt.Image var25 = var6.createImage(10, (-1));
    var0.add((java.awt.Component)var1, (java.lang.Object)10);
    com.allenstudio.ir.ui.DatePickerPane var27 = new com.allenstudio.ir.ui.DatePickerPane();
    java.lang.String var28 = var27.getTitle();
    java.awt.dnd.DropTarget var29 = var27.getDropTarget();
    com.allenstudio.ir.util.XmlElement var30 = new com.allenstudio.ir.util.XmlElement();
    boolean var31 = var30.hasChanged();
    var0.add((java.awt.Component)var27, (java.lang.Object)var31, (-1));
    com.allenstudio.ir.ui.NoteListsTabPane var34 = new com.allenstudio.ir.ui.NoteListsTabPane();
    com.allenstudio.ir.ui.Toolbar var35 = new com.allenstudio.ir.ui.Toolbar();
    boolean var36 = var35.isFloatable();
    var35.show();
    java.awt.image.ColorModel var38 = var35.getColorModel();
    boolean var39 = var35.isFocusCycleRoot();
    com.allenstudio.ir.ui.DatePickerPane var40 = new com.allenstudio.ir.ui.DatePickerPane();
    var40.transferFocus();
    com.allenstudio.ir.ui.Toolbar var42 = new com.allenstudio.ir.ui.Toolbar();
    java.awt.image.ColorModel var43 = var42.getColorModel();
    var42.setEnabled(true);
    java.awt.Component var47 = var42.getComponentAtIndex(1);
    boolean var48 = var42.isFloatable();
    var40.setContent((java.awt.Component)var42);
    java.awt.Dimension var50 = var40.size();
    com.allenstudio.ir.ui.Toolbar var51 = new com.allenstudio.ir.ui.Toolbar();
    boolean var52 = var51.isFloatable();
    var51.show();
    boolean var54 = var51.isRequestFocusEnabled();
    java.awt.Dimension var55 = var51.minimumSize();
    var40.setToolBar((javax.swing.JToolBar)var51);
    java.awt.Image var59 = var40.createImage(10, (-1));
    var34.add((java.awt.Component)var35, (java.lang.Object)10);
    com.allenstudio.ir.ui.Toolbar var61 = new com.allenstudio.ir.ui.Toolbar();
    java.awt.image.ColorModel var62 = var61.getColorModel();
    var61.setEnabled(true);
    var34.add((java.awt.Component)var61, (java.lang.Object)100L, 0);
    java.awt.Component var69 = var0.add((java.awt.Component)var34, 1);
    var0.setBounds(0, 4, 0, 4);
    com.allenstudio.ir.ui.StatusBar var76 = new com.allenstudio.ir.ui.StatusBar();
    com.allenstudio.ir.core.plugins.CommonNote var77 = new com.allenstudio.ir.core.plugins.CommonNote();
    var77.setFocusTraversalPolicyProvider(false);
    var76.remove((java.awt.Component)var77);
    var77.setFeature("ToolBarUI");
    javax.swing.Icon var83 = var77.getIcon();
    com.allenstudio.ir.ui.StatusBar var84 = new com.allenstudio.ir.ui.StatusBar();
    int var85 = var84.getY();
    javax.swing.JToolTip var86 = var84.createToolTip();
    float var87 = var86.getAlignmentY();
    java.awt.Color var88 = var86.getForeground();
    java.beans.VetoableChangeListener[] var89 = var86.getVetoableChangeListeners();
    var86.setIgnoreRepaint(false);
    var0.addTab("{}", var83, (java.awt.Component)var86);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var2 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var4);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var5 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var9);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var13);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var14 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var16);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var18 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var20 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var21);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var25);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var28 + "' != '" + "Date Picker"+ "'", var28.equals("Date Picker"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var29);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var31 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var36 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var38);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var39 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var43);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var47);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var48 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var50);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var52 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var54 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var55);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var59);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var62);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var69);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var83);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var85 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var86);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var87 == 0.5f);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var88);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var89);

  }

  public void test55() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest1.test55");


    com.allenstudio.ir.ui.MainFrame var0 = new com.allenstudio.ir.ui.MainFrame();
    boolean var1 = var0.isShowing();
    int var2 = var0.countComponents();
    var0.setAutoRequestFocus(false);
    javax.swing.JMenuBar var5 = var0.getJMenuBar();
    boolean var6 = var5.isBorderPainted();
    var5.menuSelectionChanged(true);
    com.allenstudio.ir.ui.MainFrame var9 = new com.allenstudio.ir.ui.MainFrame();
    boolean var10 = var9.isShowing();
    int var11 = var9.countComponents();
    var9.setAutoRequestFocus(false);
    javax.swing.JMenuBar var14 = var9.getJMenuBar();
    boolean var15 = var14.isBorderPainted();
    var14.updateUI();
    com.allenstudio.ir.ui.DatePickerPane var17 = new com.allenstudio.ir.ui.DatePickerPane();
    var17.transferFocus();
    java.awt.Dimension var19 = var17.getMinimumSize();
    java.awt.Dimension var20 = var14.getSize(var19);
    javax.swing.plaf.MenuBarUI var21 = var14.getUI();
    var5.setUI(var21);
    boolean var23 = var5.isBorderPainted();
    java.awt.Insets var24 = var5.getInsets();
    java.awt.Component var25 = var5.getComponent();
    var5.resetKeyboardActions();
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var1 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var2 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var5);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var6 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var10 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var11 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var14);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var15 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var19);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var20);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var21);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var23 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var24);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var25);

  }

  public void test56() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest1.test56");


    com.allenstudio.ir.core.plugins.CommonNote var0 = new com.allenstudio.ir.core.plugins.CommonNote();
    java.awt.Component var1 = var0.getNextFocusableComponent();
    java.lang.String var2 = var0.getDescription();
    var0.setDoubleBuffered(true);
    java.lang.String var5 = var0.getOtherInfo();
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var2 + "' != '" + "This is a testing description. \u03E3\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\u073F\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD"+ "'", var2.equals("This is a testing description. \u03E3\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\u073F\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var5);

  }

  public void test57() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest1.test57");


    com.allenstudio.ir.ui.StatusBar var0 = new com.allenstudio.ir.ui.StatusBar();
    var0.firePropertyChange("com.allenstudio.ir.ui.StatusBar[,0,0,0x0,invalid,layout=java.awt.BorderLayout,alignmentX=0.0,alignmentY=0.0,border=,flags=0,maximumSize=,minimumSize=,preferredSize=]", ' ', ' ');
    javax.swing.event.AncestorListener[] var5 = var0.getAncestorListeners();
    boolean var6 = var0.requestDefaultFocus();
    int var7 = var0.getX();
    int var8 = var0.getX();
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var5);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var6 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var7 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var8 == 0);

  }

  public void test58() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest1.test58");


    com.allenstudio.ir.ui.StatusBar var0 = new com.allenstudio.ir.ui.StatusBar();
    int var1 = var0.getY();
    boolean var2 = var0.isLightweight();
    java.awt.Dimension var3 = var0.getMaximumSize();
    java.awt.event.KeyListener[] var4 = var0.getKeyListeners();
    boolean var5 = var0.getInheritsPopupMenu();
    var0.firePropertyChange("This is a testing description. \u03E3\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\u073F\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD", 100.0d, 100.0d);
    var0.displayTooltip("PanelUI");
    java.awt.Component var14 = var0.getComponentAt(5, 100);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var1 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var2 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var3);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var4);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var5 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var14);

  }

  public void test59() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest1.test59");


    com.allenstudio.ir.ui.MainFrame var0 = new com.allenstudio.ir.ui.MainFrame();
    boolean var1 = var0.isShowing();
    int var2 = var0.countComponents();
    var0.setAutoRequestFocus(false);
    java.awt.Graphics var5 = var0.getGraphics();
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var1 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var2 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var5);

  }

  public void test60() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest1.test60");


    com.allenstudio.ir.ui.DatePickerPane var0 = new com.allenstudio.ir.ui.DatePickerPane();
    var0.transferFocus();
    com.allenstudio.ir.ui.Toolbar var2 = new com.allenstudio.ir.ui.Toolbar();
    java.awt.image.ColorModel var3 = var2.getColorModel();
    var2.setEnabled(true);
    java.awt.Component var7 = var2.getComponentAtIndex(1);
    boolean var8 = var2.isFloatable();
    var0.setContent((java.awt.Component)var2);
    java.awt.Color var10 = var2.getForeground();
    boolean var11 = var2.requestFocusInWindow();
    javax.swing.ActionMap var12 = var2.getActionMap();
    var2.repaint(1L);
    var2.validate();
    com.allenstudio.ir.ui.StatusBar var16 = new com.allenstudio.ir.ui.StatusBar();
    boolean var17 = var16.isBackgroundSet();
    boolean var20 = var16.contains(10, 100);
    var16.revalidate();
    javax.swing.JToolTip var22 = var16.createToolTip();
    com.allenstudio.ir.ui.StatusBar var23 = new com.allenstudio.ir.ui.StatusBar();
    javax.swing.JRootPane var24 = var23.getRootPane();
    java.awt.Point var25 = var23.location();
    com.allenstudio.ir.ui.StatusBar var26 = new com.allenstudio.ir.ui.StatusBar();
    javax.swing.JRootPane var27 = var26.getRootPane();
    java.awt.Point var28 = var26.location();
    com.allenstudio.ir.ui.Toolbar var29 = new com.allenstudio.ir.ui.Toolbar();
    boolean var30 = var29.isFloatable();
    java.awt.Component var32 = var29.getComponentAtIndex(10);
    java.lang.Object var33 = var26.getClientProperty((java.lang.Object)10);
    java.awt.Dimension var34 = var26.getMaximumSize();
    var23.setMinimumSize(var34);
    java.awt.Rectangle var36 = var23.getBounds();
    var16.scrollRectToVisible(var36);
    var2.scrollRectToVisible(var36);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var3);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var7);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var8 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var10);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var11 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var12);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var17 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var20 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var22);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var24);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var25);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var27);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var28);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var30 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var32);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var33);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var34);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var36);

  }

  public void test61() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest1.test61");


    com.allenstudio.ir.util.XmlElement var0 = new com.allenstudio.ir.util.XmlElement();
    com.allenstudio.ir.util.XmlElement var2 = var0.addSubElement("hi!");
    com.allenstudio.ir.util.XmlElement var5 = var2.addSubElement("", "hi!");
    java.util.Hashtable var6 = var5.getAttributes();
    com.allenstudio.ir.core.plugins.CommonNote var7 = new com.allenstudio.ir.core.plugins.CommonNote();
    var7.resize(0, 1);
    com.allenstudio.ir.ui.NoteListCell var11 = new com.allenstudio.ir.ui.NoteListCell((com.allenstudio.ir.core.plugins.AbstractNote)var7);
    java.lang.String var12 = var7.getFeature();
    boolean var13 = var5.equals((java.lang.Object)var7);
    java.lang.String var14 = var7.getTitle();
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var2);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var5);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var6);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var12 + "' != '" + "C:\\boot.ini"+ "'", var12.equals("C:\\boot.ini"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var13 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var14 + "' != '" + "Title"+ "'", var14.equals("Title"));

  }

  public void test62() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest1.test62");


    com.allenstudio.ir.ui.NoteListsTabPane var0 = new com.allenstudio.ir.ui.NoteListsTabPane();
    com.allenstudio.ir.ui.Toolbar var1 = new com.allenstudio.ir.ui.Toolbar();
    boolean var2 = var1.isFloatable();
    var1.show();
    java.awt.image.ColorModel var4 = var1.getColorModel();
    boolean var5 = var1.isFocusCycleRoot();
    com.allenstudio.ir.ui.DatePickerPane var6 = new com.allenstudio.ir.ui.DatePickerPane();
    var6.transferFocus();
    com.allenstudio.ir.ui.Toolbar var8 = new com.allenstudio.ir.ui.Toolbar();
    java.awt.image.ColorModel var9 = var8.getColorModel();
    var8.setEnabled(true);
    java.awt.Component var13 = var8.getComponentAtIndex(1);
    boolean var14 = var8.isFloatable();
    var6.setContent((java.awt.Component)var8);
    java.awt.Dimension var16 = var6.size();
    com.allenstudio.ir.ui.Toolbar var17 = new com.allenstudio.ir.ui.Toolbar();
    boolean var18 = var17.isFloatable();
    var17.show();
    boolean var20 = var17.isRequestFocusEnabled();
    java.awt.Dimension var21 = var17.minimumSize();
    var6.setToolBar((javax.swing.JToolBar)var17);
    java.awt.Image var25 = var6.createImage(10, (-1));
    var0.add((java.awt.Component)var1, (java.lang.Object)10);
    com.allenstudio.ir.ui.DatePickerPane var27 = new com.allenstudio.ir.ui.DatePickerPane();
    java.lang.String var28 = var27.getTitle();
    java.awt.dnd.DropTarget var29 = var27.getDropTarget();
    com.allenstudio.ir.util.XmlElement var30 = new com.allenstudio.ir.util.XmlElement();
    boolean var31 = var30.hasChanged();
    var0.add((java.awt.Component)var27, (java.lang.Object)var31, (-1));
    com.allenstudio.ir.ui.NoteListsTabPane var34 = new com.allenstudio.ir.ui.NoteListsTabPane();
    com.allenstudio.ir.ui.Toolbar var35 = new com.allenstudio.ir.ui.Toolbar();
    boolean var36 = var35.isFloatable();
    var35.show();
    java.awt.image.ColorModel var38 = var35.getColorModel();
    boolean var39 = var35.isFocusCycleRoot();
    com.allenstudio.ir.ui.DatePickerPane var40 = new com.allenstudio.ir.ui.DatePickerPane();
    var40.transferFocus();
    com.allenstudio.ir.ui.Toolbar var42 = new com.allenstudio.ir.ui.Toolbar();
    java.awt.image.ColorModel var43 = var42.getColorModel();
    var42.setEnabled(true);
    java.awt.Component var47 = var42.getComponentAtIndex(1);
    boolean var48 = var42.isFloatable();
    var40.setContent((java.awt.Component)var42);
    java.awt.Dimension var50 = var40.size();
    com.allenstudio.ir.ui.Toolbar var51 = new com.allenstudio.ir.ui.Toolbar();
    boolean var52 = var51.isFloatable();
    var51.show();
    boolean var54 = var51.isRequestFocusEnabled();
    java.awt.Dimension var55 = var51.minimumSize();
    var40.setToolBar((javax.swing.JToolBar)var51);
    java.awt.Image var59 = var40.createImage(10, (-1));
    var34.add((java.awt.Component)var35, (java.lang.Object)10);
    com.allenstudio.ir.ui.Toolbar var61 = new com.allenstudio.ir.ui.Toolbar();
    java.awt.image.ColorModel var62 = var61.getColorModel();
    var61.setEnabled(true);
    var34.add((java.awt.Component)var61, (java.lang.Object)100L, 0);
    java.awt.Component var69 = var0.add((java.awt.Component)var34, 1);
    java.lang.String var71 = var34.getTitleAt(0);
    java.util.Locale var72 = var34.getLocale();
    com.allenstudio.ir.ui.StatusBar var73 = new com.allenstudio.ir.ui.StatusBar();
    var73.enable();
    boolean var75 = var73.isFocusOwner();
    var73.repaint(100L, 32, 4, 32, 4);
    var34.remove((java.awt.Component)var73);
    java.awt.Dimension var83 = var34.getPreferredSize();
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var2 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var4);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var5 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var9);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var13);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var14 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var16);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var18 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var20 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var21);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var25);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var28 + "' != '" + "Date Picker"+ "'", var28.equals("Date Picker"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var29);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var31 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var36 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var38);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var39 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var43);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var47);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var48 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var50);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var52 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var54 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var55);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var59);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var62);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var69);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var71 + "' != '" + ""+ "'", var71.equals(""));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var72);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var75 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var83);

  }

  public void test63() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest1.test63");


    com.allenstudio.ir.ui.MainFrame var0 = new com.allenstudio.ir.ui.MainFrame();
    boolean var1 = var0.isShowing();
    int var2 = var0.countComponents();
    var0.setAutoRequestFocus(false);
    javax.swing.JMenuBar var5 = var0.getJMenuBar();
    boolean var6 = var5.isBorderPainted();
    var5.menuSelectionChanged(true);
    com.allenstudio.ir.ui.MainFrame var9 = new com.allenstudio.ir.ui.MainFrame();
    boolean var10 = var9.isShowing();
    int var11 = var9.countComponents();
    var9.setAutoRequestFocus(false);
    javax.swing.JMenuBar var14 = var9.getJMenuBar();
    boolean var15 = var14.isBorderPainted();
    var14.updateUI();
    com.allenstudio.ir.ui.DatePickerPane var17 = new com.allenstudio.ir.ui.DatePickerPane();
    var17.transferFocus();
    java.awt.Dimension var19 = var17.getMinimumSize();
    java.awt.Dimension var20 = var14.getSize(var19);
    javax.swing.plaf.MenuBarUI var21 = var14.getUI();
    var5.setUI(var21);
    boolean var23 = var5.isBorderPainted();
    com.allenstudio.ir.ui.MainFrame var24 = new com.allenstudio.ir.ui.MainFrame();
    java.lang.String var25 = var24.getWarningString();
    java.awt.Rectangle var26 = var24.getMaximizedBounds();
    java.awt.MenuBar var27 = var24.getMenuBar();
    var24.removeNotify();
    var24.pack();
    var24.setFocusCycleRoot(false);
    var24.reshape(32, 100, 0, 0);
    com.allenstudio.ir.ui.MainFrame var37 = new com.allenstudio.ir.ui.MainFrame();
    java.lang.String var38 = var37.getWarningString();
    java.lang.String var39 = var37.getWarningString();
    boolean var40 = var37.isAutoRequestFocus();
    boolean var41 = var37.isResizable();
    javax.swing.JLayeredPane var42 = var37.getLayeredPane();
    int var43 = var42.getX();
    var24.setGlassPane((java.awt.Component)var42);
    int var45 = var5.getComponentIndex((java.awt.Component)var24);
    java.awt.Component var46 = var5.getComponent();
    boolean var47 = var5.isSelected();
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var1 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var2 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var5);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var6 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var10 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var11 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var14);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var15 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var19);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var20);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var21);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var23 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var25);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var26);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var27);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var38);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var39);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var40 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var41 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var42);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var43 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var45 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var46);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var47 == false);

  }

  public void test64() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest1.test64");


    com.allenstudio.ir.ui.MainFrame var0 = new com.allenstudio.ir.ui.MainFrame();
    boolean var1 = var0.isShowing();
    int var2 = var0.countComponents();
    var0.setAutoRequestFocus(false);
    javax.swing.JMenuBar var5 = var0.getJMenuBar();
    var0.addNotify();
    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      var0.applyResourceBundle("Date Picker");
      fail("Expected exception of type java.util.MissingResourceException");
    } catch (java.util.MissingResourceException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var1 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var2 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var5);

  }

  public void test65() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest1.test65");


    com.allenstudio.ir.ui.StatusBar var0 = new com.allenstudio.ir.ui.StatusBar();
    int var1 = var0.getY();
    boolean var2 = var0.isLightweight();
    java.awt.Dimension var3 = var0.getMaximumSize();
    java.awt.event.KeyListener[] var4 = var0.getKeyListeners();
    boolean var5 = var0.getInheritsPopupMenu();
    var0.firePropertyChange("This is a testing description. \u03E3\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\u073F\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD", 100.0d, 100.0d);
    java.awt.event.HierarchyBoundsListener[] var10 = var0.getHierarchyBoundsListeners();
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var1 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var2 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var3);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var4);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var5 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var10);

  }

  public void test66() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest1.test66");


    java.lang.String[] var1 = com.allenstudio.ir.util.InspirentoUtilities.tokenize("{}");
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var1);

  }

  public void test67() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest1.test67");


    com.allenstudio.ir.ui.StatusBar var0 = new com.allenstudio.ir.ui.StatusBar();
    javax.swing.JRootPane var1 = var0.getRootPane();
    java.awt.Point var2 = var0.location();
    com.allenstudio.ir.ui.Toolbar var3 = new com.allenstudio.ir.ui.Toolbar();
    boolean var4 = var3.isFloatable();
    java.awt.Component var6 = var3.getComponentAtIndex(10);
    java.lang.Object var7 = var0.getClientProperty((java.lang.Object)10);
    var0.setFocusTraversalPolicyProvider(false);
    boolean var10 = javax.swing.JComponent.isLightweightComponent((java.awt.Component)var0);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var1);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var2);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var4 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var6);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var7);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var10 == false);

  }

  public void test68() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest1.test68");


    com.allenstudio.ir.ui.Toolbar var0 = new com.allenstudio.ir.ui.Toolbar();
    java.awt.image.ColorModel var1 = var0.getColorModel();
    var0.setEnabled(true);
    java.awt.Component var5 = var0.getComponentAtIndex(1);
    boolean var6 = var0.requestFocusInWindow();
    java.awt.FocusTraversalPolicy var7 = var0.getFocusTraversalPolicy();
    var0.transferFocusBackward();
    int var9 = var0.getOrientation();
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var1);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var5);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var6 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var7);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var9 == 0);

  }

  public void test69() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest1.test69");


    com.allenstudio.ir.util.XmlElement var0 = new com.allenstudio.ir.util.XmlElement();
    com.allenstudio.ir.util.XmlElement var2 = var0.addSubElement("hi!");
    var2.notifyObservers((java.lang.Object)(byte)1);
    java.lang.String var5 = var2.getData();
    java.lang.String var8 = var2.getAttribute("", "");
    com.allenstudio.ir.util.XmlElement var9 = new com.allenstudio.ir.util.XmlElement();
    com.allenstudio.ir.util.XmlElement var11 = var9.addSubElement("hi!");
    var11.notifyObservers((java.lang.Object)(byte)1);
    com.allenstudio.ir.util.XmlElement var14 = new com.allenstudio.ir.util.XmlElement();
    com.allenstudio.ir.util.XmlElement var16 = var14.addSubElement("hi!");
    var16.notifyObservers((java.lang.Object)(byte)1);
    com.allenstudio.ir.util.XmlElement var19 = var11.removeElement(var16);
    com.allenstudio.ir.util.XmlElement var20 = var2.removeElement(var16);
    boolean var21 = var2.hasChanged();
    com.allenstudio.ir.util.XmlElement var22 = new com.allenstudio.ir.util.XmlElement();
    com.allenstudio.ir.util.XmlElement var24 = var22.addSubElement("hi!");
    var24.notifyObservers((java.lang.Object)(byte)1);
    com.allenstudio.ir.util.XmlElement var27 = new com.allenstudio.ir.util.XmlElement();
    com.allenstudio.ir.util.XmlElement var29 = var27.addSubElement("hi!");
    var29.notifyObservers((java.lang.Object)(byte)1);
    com.allenstudio.ir.util.XmlElement var32 = var24.removeElement(var29);
    com.allenstudio.ir.util.XmlElement var33 = var29.getParent();
    com.allenstudio.ir.util.XmlElement var34 = new com.allenstudio.ir.util.XmlElement();
    com.allenstudio.ir.util.XmlElement var36 = var34.addSubElement("hi!");
    var36.notifyObservers((java.lang.Object)(byte)1);
    java.lang.String var39 = var36.getData();
    com.allenstudio.ir.util.XmlElement var40 = var29.addSubElement(var36);
    var2.append(var40);
    var40.removeFromParent();
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var2);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var5 + "' != '" + ""+ "'", var5.equals(""));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var8 + "' != '" + ""+ "'", var8.equals(""));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var11);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var16);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var19);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var20);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var21 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var24);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var29);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var32);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var33);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var36);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var39 + "' != '" + ""+ "'", var39.equals(""));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var40);

  }

  public void test70() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest1.test70");


    com.allenstudio.ir.ui.Toolbar var0 = new com.allenstudio.ir.ui.Toolbar();
    boolean var1 = var0.isFloatable();
    var0.show();
    javax.swing.plaf.ToolBarUI var3 = var0.getUI();
    var0.setFloatable(true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var1 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var3);

  }

  public void test71() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest1.test71");


    com.allenstudio.ir.ui.StatusBar var0 = new com.allenstudio.ir.ui.StatusBar();
    int var1 = var0.getY();
    javax.swing.JToolTip var2 = var0.createToolTip();
    float var3 = var2.getAlignmentY();
    java.awt.Color var4 = var2.getForeground();
    boolean var5 = var2.isDisplayable();
    java.awt.Dimension var6 = var2.getPreferredSize();
    var2.setBounds(100, 32, 6, 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var1 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var2);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var3 == 0.5f);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var4);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var5 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var6);

  }

  public void test72() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest1.test72");


    com.allenstudio.ir.ui.MainFrame var0 = new com.allenstudio.ir.ui.MainFrame();
    boolean var1 = var0.isShowing();
    int var2 = var0.countComponents();
    var0.setAutoRequestFocus(false);
    javax.swing.JMenuBar var5 = var0.getJMenuBar();
    java.awt.Component var7 = var5.getComponentAtIndex(32);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var1 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var2 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var5);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var7);

  }

  public void test73() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest1.test73");


    com.allenstudio.ir.ui.MainFrame var0 = new com.allenstudio.ir.ui.MainFrame();
    java.lang.String var1 = var0.getWarningString();
    java.awt.Rectangle var2 = var0.getMaximizedBounds();
    boolean var3 = var0.isLocationByPlatform();
    int var4 = var0.getY();
    var0.setSize(100, 10);
    var0.firePropertyChange("MenuBarUI", 'a', ' ');
    com.allenstudio.ir.ui.Toolbar var12 = new com.allenstudio.ir.ui.Toolbar();
    java.awt.image.ColorModel var13 = var12.getColorModel();
    var12.setEnabled(true);
    java.awt.ComponentOrientation var16 = var12.getComponentOrientation();
    boolean var17 = var12.isFloatable();
    com.allenstudio.ir.core.plugins.CommonNote var18 = new com.allenstudio.ir.core.plugins.CommonNote();
    var18.resize(0, 1);
    java.lang.String var22 = var18.getOtherInfo();
    com.allenstudio.ir.core.plugins.CommonNote var23 = new com.allenstudio.ir.core.plugins.CommonNote();
    java.lang.String var24 = var23.getFeature();
    com.allenstudio.ir.ui.StatusBar var25 = new com.allenstudio.ir.ui.StatusBar();
    var25.enable();
    boolean var27 = var25.isFocusOwner();
    var25.firePropertyChange("hi!", 10L, 0L);
    var25.layout();
    var25.removeAll();
    com.allenstudio.ir.ui.StatusBar var34 = new com.allenstudio.ir.ui.StatusBar();
    javax.swing.JRootPane var35 = var34.getRootPane();
    java.awt.Point var36 = var34.location();
    java.awt.Component var37 = var25.getComponentAt(var36);
    java.awt.Point var38 = var23.getLocation(var36);
    java.awt.Component var39 = var18.getComponentAt(var38);
    java.awt.Point var40 = var12.getLocation(var38);
    var0.setLocation(var38);
    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      var0.applyResourceBundle("Title");
      fail("Expected exception of type java.util.MissingResourceException");
    } catch (java.util.MissingResourceException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var1);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var2);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var3 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var4 == 32);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var13);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var16);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var17 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var22);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var24 + "' != '" + "C:\\boot.ini"+ "'", var24.equals("C:\\boot.ini"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var27 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var35);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var36);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var37);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var38);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var39);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var40);

  }

  public void test74() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest1.test74");


    com.allenstudio.ir.ui.MainFrame var0 = new com.allenstudio.ir.ui.MainFrame();
    java.lang.String var1 = var0.getWarningString();
    java.lang.String var2 = var0.getWarningString();
    boolean var3 = var0.isAutoRequestFocus();
    boolean var4 = var0.isResizable();
    var0.pack();
    boolean var6 = var0.isFocusOwner();
    com.allenstudio.ir.ui.MainMenu var7 = new com.allenstudio.ir.ui.MainMenu((com.allenstudio.ir.core.InspirentoMediator)var0);
    var7.removeNotify();
    com.allenstudio.ir.ui.DatePickerPane var9 = new com.allenstudio.ir.ui.DatePickerPane();
    java.lang.String var10 = var9.getTitle();
    int var11 = var7.getComponentIndex((java.awt.Component)var9);
    java.awt.Image var14 = var9.createImage(32, 30);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var1);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var2);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var3 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var4 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var6 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var10 + "' != '" + "Date Picker"+ "'", var10.equals("Date Picker"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var11 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var14);

  }

  public void test75() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest1.test75");


    com.allenstudio.ir.ui.DatePickerPane var0 = new com.allenstudio.ir.ui.DatePickerPane();
    javax.swing.plaf.PanelUI var1 = var0.getUI();
    java.lang.String var2 = var0.getTitle();
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var2 + "' != '" + "Date Picker"+ "'", var2.equals("Date Picker"));

  }

  public void test76() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest1.test76");


    com.allenstudio.ir.core.PluginManager var0 = com.allenstudio.ir.core.PluginManager.getInstance();
    java.lang.String[] var1 = var0.getPlugins();
    java.lang.String[] var2 = var0.getPlugins();
    java.lang.String[] var3 = var0.getAllPluginNames();
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var0);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var1);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var2);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var3);

  }

  public void test77() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest1.test77");


    com.allenstudio.ir.ui.NoteList var0 = new com.allenstudio.ir.ui.NoteList();
    com.allenstudio.ir.ui.MainFrame var1 = new com.allenstudio.ir.ui.MainFrame();
    java.lang.String var2 = var1.getWarningString();
    java.awt.Rectangle var3 = var1.getMaximizedBounds();
    java.awt.MenuBar var4 = var1.getMenuBar();
    com.allenstudio.ir.core.plugins.CommonNote var5 = new com.allenstudio.ir.core.plugins.CommonNote();
    var5.resize(0, 1);
    com.allenstudio.ir.ui.NoteListCell var9 = new com.allenstudio.ir.ui.NoteListCell((com.allenstudio.ir.core.plugins.AbstractNote)var5);
    com.allenstudio.ir.ui.StatusBar var10 = new com.allenstudio.ir.ui.StatusBar();
    boolean var11 = var10.isBackgroundSet();
    boolean var14 = var10.contains(10, 100);
    var10.revalidate();
    javax.swing.JToolTip var16 = var10.createToolTip();
    com.allenstudio.ir.ui.StatusBar var17 = new com.allenstudio.ir.ui.StatusBar();
    javax.swing.JRootPane var18 = var17.getRootPane();
    java.awt.Point var19 = var17.location();
    com.allenstudio.ir.ui.StatusBar var20 = new com.allenstudio.ir.ui.StatusBar();
    javax.swing.JRootPane var21 = var20.getRootPane();
    java.awt.Point var22 = var20.location();
    com.allenstudio.ir.ui.Toolbar var23 = new com.allenstudio.ir.ui.Toolbar();
    boolean var24 = var23.isFloatable();
    java.awt.Component var26 = var23.getComponentAtIndex(10);
    java.lang.Object var27 = var20.getClientProperty((java.lang.Object)10);
    java.awt.Dimension var28 = var20.getMaximumSize();
    var17.setMinimumSize(var28);
    java.awt.Rectangle var30 = var17.getBounds();
    var10.scrollRectToVisible(var30);
    var5.repaint(var30);
    var1.setMaximizedBounds(var30);
    int var36 = var0.getScrollableBlockIncrement(var30, 1, 4);
    int var37 = var0.getDebugGraphicsOptions();
    boolean var38 = var0.getScrollableTracksViewportHeight();
    java.awt.Dimension var39 = var0.getPreferredScrollableViewportSize();
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var2);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var3);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var4);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var11 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var14 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var16);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var18);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var19);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var21);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var22);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var24 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var26);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var27);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var28);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var30);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var36 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var37 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var38 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var39);

  }

  public void test78() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest1.test78");


    com.allenstudio.ir.ui.DefaultNoteListModel var0 = new com.allenstudio.ir.ui.DefaultNoteListModel();
    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      var0.removeElementAt(30);
      fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException");
    } catch (java.lang.ArrayIndexOutOfBoundsException e) {
      // Expected exception.
    }

  }

  public void test79() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest1.test79");


    com.allenstudio.ir.ui.Toolbar var0 = new com.allenstudio.ir.ui.Toolbar();
    java.awt.image.ColorModel var1 = var0.getColorModel();
    var0.setEnabled(true);
    java.awt.Component var5 = var0.getComponentAtIndex(1);
    boolean var6 = var0.requestFocusInWindow();
    java.awt.FocusTraversalPolicy var7 = var0.getFocusTraversalPolicy();
    java.beans.PropertyChangeListener[] var9 = var0.getPropertyChangeListeners("Date Picker");
    boolean var10 = var0.isFontSet();
    com.allenstudio.ir.ui.calendar.MonthlyCalendar var11 = new com.allenstudio.ir.ui.calendar.MonthlyCalendar();
    var0.removeMouseListener((java.awt.event.MouseListener)var11);
    boolean var13 = var11.getWeekStartOnSunday();
    int var14 = var11.getSelectedDay();
    int var15 = var11.getYear();
    java.awt.Color var16 = var11.getDateBackground();
    java.awt.Color var17 = var11.getHeaderBackground();
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var1);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var5);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var6 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var7);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var9);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var10 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var13 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var14 == 31);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var15 == 2015);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var16);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var17);

  }

  public void test80() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest1.test80");


    com.allenstudio.ir.ui.NoteListsTabPane var0 = new com.allenstudio.ir.ui.NoteListsTabPane();
    com.allenstudio.ir.ui.Toolbar var1 = new com.allenstudio.ir.ui.Toolbar();
    boolean var2 = var1.isFloatable();
    var1.show();
    java.awt.image.ColorModel var4 = var1.getColorModel();
    boolean var5 = var1.isFocusCycleRoot();
    com.allenstudio.ir.ui.DatePickerPane var6 = new com.allenstudio.ir.ui.DatePickerPane();
    var6.transferFocus();
    com.allenstudio.ir.ui.Toolbar var8 = new com.allenstudio.ir.ui.Toolbar();
    java.awt.image.ColorModel var9 = var8.getColorModel();
    var8.setEnabled(true);
    java.awt.Component var13 = var8.getComponentAtIndex(1);
    boolean var14 = var8.isFloatable();
    var6.setContent((java.awt.Component)var8);
    java.awt.Dimension var16 = var6.size();
    com.allenstudio.ir.ui.Toolbar var17 = new com.allenstudio.ir.ui.Toolbar();
    boolean var18 = var17.isFloatable();
    var17.show();
    boolean var20 = var17.isRequestFocusEnabled();
    java.awt.Dimension var21 = var17.minimumSize();
    var6.setToolBar((javax.swing.JToolBar)var17);
    java.awt.Image var25 = var6.createImage(10, (-1));
    var0.add((java.awt.Component)var1, (java.lang.Object)10);
    com.allenstudio.ir.ui.DatePickerPane var27 = new com.allenstudio.ir.ui.DatePickerPane();
    java.lang.String var28 = var27.getTitle();
    java.awt.dnd.DropTarget var29 = var27.getDropTarget();
    com.allenstudio.ir.util.XmlElement var30 = new com.allenstudio.ir.util.XmlElement();
    boolean var31 = var30.hasChanged();
    var0.add((java.awt.Component)var27, (java.lang.Object)var31, (-1));
    com.allenstudio.ir.ui.NoteListsTabPane var34 = new com.allenstudio.ir.ui.NoteListsTabPane();
    com.allenstudio.ir.ui.Toolbar var35 = new com.allenstudio.ir.ui.Toolbar();
    boolean var36 = var35.isFloatable();
    var35.show();
    java.awt.image.ColorModel var38 = var35.getColorModel();
    boolean var39 = var35.isFocusCycleRoot();
    com.allenstudio.ir.ui.DatePickerPane var40 = new com.allenstudio.ir.ui.DatePickerPane();
    var40.transferFocus();
    com.allenstudio.ir.ui.Toolbar var42 = new com.allenstudio.ir.ui.Toolbar();
    java.awt.image.ColorModel var43 = var42.getColorModel();
    var42.setEnabled(true);
    java.awt.Component var47 = var42.getComponentAtIndex(1);
    boolean var48 = var42.isFloatable();
    var40.setContent((java.awt.Component)var42);
    java.awt.Dimension var50 = var40.size();
    com.allenstudio.ir.ui.Toolbar var51 = new com.allenstudio.ir.ui.Toolbar();
    boolean var52 = var51.isFloatable();
    var51.show();
    boolean var54 = var51.isRequestFocusEnabled();
    java.awt.Dimension var55 = var51.minimumSize();
    var40.setToolBar((javax.swing.JToolBar)var51);
    java.awt.Image var59 = var40.createImage(10, (-1));
    var34.add((java.awt.Component)var35, (java.lang.Object)10);
    com.allenstudio.ir.ui.Toolbar var61 = new com.allenstudio.ir.ui.Toolbar();
    java.awt.image.ColorModel var62 = var61.getColorModel();
    var61.setEnabled(true);
    var34.add((java.awt.Component)var61, (java.lang.Object)100L, 0);
    java.awt.Component var69 = var0.add((java.awt.Component)var34, 1);
    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      var34.setTabLayoutPolicy(32);
      fail("Expected exception of type java.lang.IllegalArgumentException");
    } catch (java.lang.IllegalArgumentException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var2 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var4);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var5 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var9);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var13);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var14 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var16);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var18 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var20 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var21);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var25);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var28 + "' != '" + "Date Picker"+ "'", var28.equals("Date Picker"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var29);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var31 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var36 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var38);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var39 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var43);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var47);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var48 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var50);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var52 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var54 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var55);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var59);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var62);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var69);

  }

  public void test81() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest1.test81");


    com.allenstudio.ir.ui.NoteListsTabPane var0 = new com.allenstudio.ir.ui.NoteListsTabPane();
    com.allenstudio.ir.ui.Toolbar var1 = new com.allenstudio.ir.ui.Toolbar();
    boolean var2 = var1.isFloatable();
    var1.show();
    java.awt.image.ColorModel var4 = var1.getColorModel();
    boolean var5 = var1.isFocusCycleRoot();
    com.allenstudio.ir.ui.DatePickerPane var6 = new com.allenstudio.ir.ui.DatePickerPane();
    var6.transferFocus();
    com.allenstudio.ir.ui.Toolbar var8 = new com.allenstudio.ir.ui.Toolbar();
    java.awt.image.ColorModel var9 = var8.getColorModel();
    var8.setEnabled(true);
    java.awt.Component var13 = var8.getComponentAtIndex(1);
    boolean var14 = var8.isFloatable();
    var6.setContent((java.awt.Component)var8);
    java.awt.Dimension var16 = var6.size();
    com.allenstudio.ir.ui.Toolbar var17 = new com.allenstudio.ir.ui.Toolbar();
    boolean var18 = var17.isFloatable();
    var17.show();
    boolean var20 = var17.isRequestFocusEnabled();
    java.awt.Dimension var21 = var17.minimumSize();
    var6.setToolBar((javax.swing.JToolBar)var17);
    java.awt.Image var25 = var6.createImage(10, (-1));
    var0.add((java.awt.Component)var1, (java.lang.Object)10);
    var0.setSelectedIndex(1);
    boolean var29 = var0.isPaintingTile();
    var0.setIgnoreRepaint(true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var2 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var4);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var5 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var9);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var13);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var14 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var16);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var18 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var20 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var21);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var25);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var29 == false);

  }

  public void test82() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest1.test82");


    com.allenstudio.ir.ui.DefaultNoteListModel var0 = new com.allenstudio.ir.ui.DefaultNoteListModel();
    com.allenstudio.ir.core.plugins.CommonNote var1 = new com.allenstudio.ir.core.plugins.CommonNote();
    java.awt.Component var2 = var1.getNextFocusableComponent();
    java.lang.String var3 = var1.getDescription();
    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      var0.setElementAt((com.allenstudio.ir.core.plugins.AbstractNote)var1, 31);
      fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException");
    } catch (java.lang.ArrayIndexOutOfBoundsException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var2);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var3 + "' != '" + "This is a testing description. \u03E3\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\u073F\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD"+ "'", var3.equals("This is a testing description. \u03E3\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\u073F\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD"));

  }

  public void test83() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest1.test83");


    com.allenstudio.ir.util.XmlElement var0 = new com.allenstudio.ir.util.XmlElement();
    com.allenstudio.ir.util.XmlElement var2 = var0.addSubElement("hi!");
    com.allenstudio.ir.util.XmlElement var3 = new com.allenstudio.ir.util.XmlElement();
    com.allenstudio.ir.util.XmlElement var5 = var3.addSubElement("hi!");
    var5.notifyObservers((java.lang.Object)(byte)1);
    var0.append(var5);
    java.lang.String var10 = var5.getAttribute(" ");
    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      com.allenstudio.ir.util.XmlElement var12 = var5.getElement(6);
      fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException");
    } catch (java.lang.ArrayIndexOutOfBoundsException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var2);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var5);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var10);

  }

  public void test84() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest1.test84");


    com.allenstudio.ir.core.plugins.CommonNote var0 = new com.allenstudio.ir.core.plugins.CommonNote();
    var0.setFocusTraversalPolicyProvider(false);
    com.allenstudio.ir.ui.StatusBar var3 = new com.allenstudio.ir.ui.StatusBar();
    int var4 = var3.getY();
    javax.swing.JToolTip var5 = var3.createToolTip();
    float var6 = var5.getAlignmentY();
    java.awt.Color var7 = var5.getForeground();
    var0.remove((java.awt.Component)var5);
    com.allenstudio.ir.ui.StatusBar var9 = new com.allenstudio.ir.ui.StatusBar();
    int var10 = var9.getY();
    boolean var11 = var9.isLightweight();
    java.awt.Dimension var12 = var9.getMaximumSize();
    java.awt.event.KeyListener[] var13 = var9.getKeyListeners();
    java.awt.ComponentOrientation var14 = var9.getComponentOrientation();
    var0.setComponentOrientation(var14);
    java.awt.Component.BaselineResizeBehavior var16 = var0.getBaselineResizeBehavior();
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var4 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var5);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var6 == 0.5f);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var7);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var10 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var11 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var12);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var13);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var14);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var16);

  }

  public void test85() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest1.test85");


    com.allenstudio.ir.ui.NoteListsTabPane var0 = new com.allenstudio.ir.ui.NoteListsTabPane();
    com.allenstudio.ir.ui.Toolbar var1 = new com.allenstudio.ir.ui.Toolbar();
    boolean var2 = var1.isFloatable();
    var1.show();
    java.awt.image.ColorModel var4 = var1.getColorModel();
    boolean var5 = var1.isFocusCycleRoot();
    com.allenstudio.ir.ui.DatePickerPane var6 = new com.allenstudio.ir.ui.DatePickerPane();
    var6.transferFocus();
    com.allenstudio.ir.ui.Toolbar var8 = new com.allenstudio.ir.ui.Toolbar();
    java.awt.image.ColorModel var9 = var8.getColorModel();
    var8.setEnabled(true);
    java.awt.Component var13 = var8.getComponentAtIndex(1);
    boolean var14 = var8.isFloatable();
    var6.setContent((java.awt.Component)var8);
    java.awt.Dimension var16 = var6.size();
    com.allenstudio.ir.ui.Toolbar var17 = new com.allenstudio.ir.ui.Toolbar();
    boolean var18 = var17.isFloatable();
    var17.show();
    boolean var20 = var17.isRequestFocusEnabled();
    java.awt.Dimension var21 = var17.minimumSize();
    var6.setToolBar((javax.swing.JToolBar)var17);
    java.awt.Image var25 = var6.createImage(10, (-1));
    var0.add((java.awt.Component)var1, (java.lang.Object)10);
    var0.setSelectedIndex(1);
    javax.swing.plaf.TabbedPaneUI var29 = var0.getUI();
    javax.swing.SingleSelectionModel var30 = var0.getModel();
    com.allenstudio.ir.ui.calendar.MonthlyCalendar var32 = new com.allenstudio.ir.ui.calendar.MonthlyCalendar();
    java.awt.Color var33 = var32.getDateBackground();
    var0.setForegroundAt(1, var33);
    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      var0.remove(32);
      fail("Expected exception of type java.lang.IndexOutOfBoundsException");
    } catch (java.lang.IndexOutOfBoundsException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var2 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var4);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var5 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var9);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var13);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var14 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var16);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var18 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var20 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var21);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var25);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var29);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var30);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var33);

  }

  public void test86() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest1.test86");


    com.allenstudio.ir.util.XmlIO var0 = new com.allenstudio.ir.util.XmlIO();
    var0.unparsedEntityDecl("", "hi!", "", "");
    var0.errorDialog("{}");

  }

  public void test87() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest1.test87");


    com.allenstudio.ir.ui.NoteListsTabPane var0 = new com.allenstudio.ir.ui.NoteListsTabPane();
    com.allenstudio.ir.ui.Toolbar var1 = new com.allenstudio.ir.ui.Toolbar();
    boolean var2 = var1.isFloatable();
    var1.show();
    java.awt.image.ColorModel var4 = var1.getColorModel();
    boolean var5 = var1.isFocusCycleRoot();
    com.allenstudio.ir.ui.DatePickerPane var6 = new com.allenstudio.ir.ui.DatePickerPane();
    var6.transferFocus();
    com.allenstudio.ir.ui.Toolbar var8 = new com.allenstudio.ir.ui.Toolbar();
    java.awt.image.ColorModel var9 = var8.getColorModel();
    var8.setEnabled(true);
    java.awt.Component var13 = var8.getComponentAtIndex(1);
    boolean var14 = var8.isFloatable();
    var6.setContent((java.awt.Component)var8);
    java.awt.Dimension var16 = var6.size();
    com.allenstudio.ir.ui.Toolbar var17 = new com.allenstudio.ir.ui.Toolbar();
    boolean var18 = var17.isFloatable();
    var17.show();
    boolean var20 = var17.isRequestFocusEnabled();
    java.awt.Dimension var21 = var17.minimumSize();
    var6.setToolBar((javax.swing.JToolBar)var17);
    java.awt.Image var25 = var6.createImage(10, (-1));
    var0.add((java.awt.Component)var1, (java.lang.Object)10);
    var0.setSelectedIndex(1);
    javax.swing.plaf.TabbedPaneUI var29 = var0.getUI();
    var0.setFocusTraversalKeysEnabled(true);
    com.allenstudio.ir.ui.MainFrame var32 = new com.allenstudio.ir.ui.MainFrame();
    java.awt.Component var33 = var32.getGlassPane();
    java.awt.Component var34 = var0.add(var33);
    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      var0.setTitleAt(32, "ToolBarUI");
      fail("Expected exception of type java.lang.IndexOutOfBoundsException");
    } catch (java.lang.IndexOutOfBoundsException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var2 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var4);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var5 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var9);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var13);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var14 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var16);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var18 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var20 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var21);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var25);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var29);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var33);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var34);

  }

  public void test88() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest1.test88");


    com.allenstudio.ir.ui.MainFrame var0 = new com.allenstudio.ir.ui.MainFrame();
    java.lang.String var1 = var0.getWarningString();
    java.lang.String var2 = var0.getWarningString();
    java.awt.Container var3 = var0.getFocusCycleRootAncestor();
    com.allenstudio.ir.ui.StatusBar var4 = new com.allenstudio.ir.ui.StatusBar();
    boolean var5 = var4.isBackgroundSet();
    boolean var8 = var4.contains(10, 100);
    var4.revalidate();
    javax.swing.JToolTip var10 = var4.createToolTip();
    com.allenstudio.ir.ui.StatusBar var11 = new com.allenstudio.ir.ui.StatusBar();
    javax.swing.JRootPane var12 = var11.getRootPane();
    java.awt.Point var13 = var11.location();
    com.allenstudio.ir.ui.StatusBar var14 = new com.allenstudio.ir.ui.StatusBar();
    javax.swing.JRootPane var15 = var14.getRootPane();
    java.awt.Point var16 = var14.location();
    com.allenstudio.ir.ui.Toolbar var17 = new com.allenstudio.ir.ui.Toolbar();
    boolean var18 = var17.isFloatable();
    java.awt.Component var20 = var17.getComponentAtIndex(10);
    java.lang.Object var21 = var14.getClientProperty((java.lang.Object)10);
    java.awt.Dimension var22 = var14.getMaximumSize();
    var11.setMinimumSize(var22);
    java.awt.Rectangle var24 = var11.getBounds();
    var4.scrollRectToVisible(var24);
    var0.setMaximizedBounds(var24);
    float var27 = var0.getAlignmentX();
    var0.revalidate();
    int var29 = var0.getState();
    var0.setCursor(4);
    com.allenstudio.ir.ui.MainFrame var32 = new com.allenstudio.ir.ui.MainFrame();
    java.lang.String var33 = var32.getWarningString();
    boolean var34 = var32.isAlwaysOnTopSupported();
    com.allenstudio.ir.ui.StatusBar var35 = new com.allenstudio.ir.ui.StatusBar();
    javax.swing.JRootPane var36 = var35.getRootPane();
    java.awt.Point var37 = var35.location();
    com.allenstudio.ir.ui.StatusBar var38 = new com.allenstudio.ir.ui.StatusBar();
    javax.swing.JRootPane var39 = var38.getRootPane();
    java.awt.Point var40 = var38.location();
    com.allenstudio.ir.ui.Toolbar var41 = new com.allenstudio.ir.ui.Toolbar();
    boolean var42 = var41.isFloatable();
    java.awt.Component var44 = var41.getComponentAtIndex(10);
    java.lang.Object var45 = var38.getClientProperty((java.lang.Object)10);
    java.awt.Dimension var46 = var38.getMaximumSize();
    var35.setMinimumSize(var46);
    java.awt.Rectangle var48 = var35.getBounds();
    java.awt.Rectangle var49 = var32.getBounds(var48);
    var0.setBounds(var48);
    com.allenstudio.ir.ui.Toolbar var51 = new com.allenstudio.ir.ui.Toolbar();
    java.awt.image.ColorModel var52 = var51.getColorModel();
    java.awt.im.InputContext var53 = var51.getInputContext();
    java.awt.Component var55 = var51.getComponentAtIndex(0);
    boolean var56 = var51.isManagingFocus();
    var0.setGlassPane((java.awt.Component)var51);
    com.allenstudio.ir.ui.Toolbar var58 = new com.allenstudio.ir.ui.Toolbar();
    java.awt.image.ColorModel var59 = var58.getColorModel();
    var58.setEnabled(true);
    java.awt.Component var63 = var58.getComponentAtIndex(1);
    boolean var64 = var58.requestFocusInWindow();
    java.awt.FocusTraversalPolicy var65 = var58.getFocusTraversalPolicy();
    var58.grabFocus();
    var58.addNotify();
    java.awt.Graphics var68 = var58.getGraphics();
    java.awt.Insets var69 = var58.getMargin();
    var51.setMargin(var69);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var1);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var2);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var3);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var5 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var8 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var10);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var12);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var13);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var15);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var16);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var18 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var20);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var21);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var22);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var24);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var27 == 0.5f);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var29 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var33);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var34 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var36);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var37);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var39);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var40);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var42 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var44);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var45);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var46);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var48);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var49);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var52);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var53);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var55);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var56 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var59);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var63);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var64 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var65);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var68);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var69);

  }

  public void test89() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest1.test89");


    com.allenstudio.ir.ui.MainFrame var0 = new com.allenstudio.ir.ui.MainFrame();
    boolean var1 = var0.isShowing();
    java.lang.String var2 = var0.getWarningString();
    var0.setAutoRequestFocus(true);
    var0.removeAll();
    var0.setLocation(2015, 31);
    java.awt.event.MouseListener[] var9 = var0.getMouseListeners();
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var1 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var2);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var9);

  }

  public void test90() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest1.test90");


    com.allenstudio.ir.ui.NoteListsTabPane var0 = new com.allenstudio.ir.ui.NoteListsTabPane();
    com.allenstudio.ir.ui.Toolbar var1 = new com.allenstudio.ir.ui.Toolbar();
    boolean var2 = var1.isFloatable();
    var1.show();
    java.awt.image.ColorModel var4 = var1.getColorModel();
    boolean var5 = var1.isFocusCycleRoot();
    com.allenstudio.ir.ui.DatePickerPane var6 = new com.allenstudio.ir.ui.DatePickerPane();
    var6.transferFocus();
    com.allenstudio.ir.ui.Toolbar var8 = new com.allenstudio.ir.ui.Toolbar();
    java.awt.image.ColorModel var9 = var8.getColorModel();
    var8.setEnabled(true);
    java.awt.Component var13 = var8.getComponentAtIndex(1);
    boolean var14 = var8.isFloatable();
    var6.setContent((java.awt.Component)var8);
    java.awt.Dimension var16 = var6.size();
    com.allenstudio.ir.ui.Toolbar var17 = new com.allenstudio.ir.ui.Toolbar();
    boolean var18 = var17.isFloatable();
    var17.show();
    boolean var20 = var17.isRequestFocusEnabled();
    java.awt.Dimension var21 = var17.minimumSize();
    var6.setToolBar((javax.swing.JToolBar)var17);
    java.awt.Image var25 = var6.createImage(10, (-1));
    var0.add((java.awt.Component)var1, (java.lang.Object)10);
    com.allenstudio.ir.ui.DatePickerPane var27 = new com.allenstudio.ir.ui.DatePickerPane();
    java.lang.String var28 = var27.getTitle();
    java.awt.dnd.DropTarget var29 = var27.getDropTarget();
    com.allenstudio.ir.util.XmlElement var30 = new com.allenstudio.ir.util.XmlElement();
    boolean var31 = var30.hasChanged();
    var0.add((java.awt.Component)var27, (java.lang.Object)var31, (-1));
    com.allenstudio.ir.ui.NoteListsTabPane var34 = new com.allenstudio.ir.ui.NoteListsTabPane();
    com.allenstudio.ir.ui.Toolbar var35 = new com.allenstudio.ir.ui.Toolbar();
    boolean var36 = var35.isFloatable();
    var35.show();
    java.awt.image.ColorModel var38 = var35.getColorModel();
    boolean var39 = var35.isFocusCycleRoot();
    com.allenstudio.ir.ui.DatePickerPane var40 = new com.allenstudio.ir.ui.DatePickerPane();
    var40.transferFocus();
    com.allenstudio.ir.ui.Toolbar var42 = new com.allenstudio.ir.ui.Toolbar();
    java.awt.image.ColorModel var43 = var42.getColorModel();
    var42.setEnabled(true);
    java.awt.Component var47 = var42.getComponentAtIndex(1);
    boolean var48 = var42.isFloatable();
    var40.setContent((java.awt.Component)var42);
    java.awt.Dimension var50 = var40.size();
    com.allenstudio.ir.ui.Toolbar var51 = new com.allenstudio.ir.ui.Toolbar();
    boolean var52 = var51.isFloatable();
    var51.show();
    boolean var54 = var51.isRequestFocusEnabled();
    java.awt.Dimension var55 = var51.minimumSize();
    var40.setToolBar((javax.swing.JToolBar)var51);
    java.awt.Image var59 = var40.createImage(10, (-1));
    var34.add((java.awt.Component)var35, (java.lang.Object)10);
    com.allenstudio.ir.ui.Toolbar var61 = new com.allenstudio.ir.ui.Toolbar();
    java.awt.image.ColorModel var62 = var61.getColorModel();
    var61.setEnabled(true);
    var34.add((java.awt.Component)var61, (java.lang.Object)100L, 0);
    java.awt.Component var69 = var0.add((java.awt.Component)var34, 1);
    com.allenstudio.ir.core.plugins.CommonNote var70 = new com.allenstudio.ir.core.plugins.CommonNote();
    java.lang.String var71 = var70.getDescription();
    int var72 = var34.indexOfComponent((java.awt.Component)var70);
    com.allenstudio.ir.ui.MainFrame var74 = new com.allenstudio.ir.ui.MainFrame();
    java.lang.String var75 = var74.getWarningString();
    java.lang.String var76 = var74.getWarningString();
    boolean var77 = var74.isAutoRequestFocus();
    com.allenstudio.ir.ui.MainFrame var78 = new com.allenstudio.ir.ui.MainFrame();
    java.lang.String var79 = var78.getWarningString();
    boolean var80 = var78.isAlwaysOnTopSupported();
    java.awt.Color var81 = var78.getBackground();
    var74.setBackground(var81);
    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      var34.setBackgroundAt(5, var81);
      fail("Expected exception of type java.lang.IndexOutOfBoundsException");
    } catch (java.lang.IndexOutOfBoundsException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var2 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var4);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var5 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var9);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var13);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var14 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var16);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var18 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var20 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var21);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var25);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var28 + "' != '" + "Date Picker"+ "'", var28.equals("Date Picker"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var29);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var31 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var36 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var38);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var39 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var43);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var47);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var48 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var50);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var52 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var54 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var55);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var59);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var62);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var69);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var71 + "' != '" + "This is a testing description. \u03E3\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\u073F\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD"+ "'", var71.equals("This is a testing description. \u03E3\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\u073F\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var72 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var75);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var76);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var77 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var79);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var80 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var81);

  }

  public void test91() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest1.test91");


    com.allenstudio.ir.ui.DatePickerPane var0 = new com.allenstudio.ir.ui.DatePickerPane();
    javax.swing.KeyStroke[] var1 = var0.getRegisteredKeyStrokes();
    com.allenstudio.ir.ui.Toolbar var2 = new com.allenstudio.ir.ui.Toolbar();
    java.awt.image.ColorModel var3 = var2.getColorModel();
    java.awt.im.InputContext var4 = var2.getInputContext();
    java.awt.Component var6 = var2.getComponentAtIndex(0);
    var0.setToolBar((javax.swing.JToolBar)var2);
    boolean var9 = var0.areFocusTraversalKeysSet(0);
    java.awt.event.MouseListener[] var10 = var0.getMouseListeners();
    var0.setLocation(556, 556);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var1);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var3);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var4);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var6);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var9 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var10);

  }

  public void test92() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest1.test92");


    com.allenstudio.ir.ui.MainFrame var0 = new com.allenstudio.ir.ui.MainFrame();
    java.lang.String var1 = var0.getWarningString();
    java.lang.String var2 = var0.getWarningString();
    boolean var3 = var0.isAutoRequestFocus();
    com.allenstudio.ir.ui.DatePickerPane var4 = new com.allenstudio.ir.ui.DatePickerPane();
    var4.transferFocus();
    java.awt.Dimension var6 = var4.getMinimumSize();
    com.allenstudio.ir.ui.StatusBar var7 = new com.allenstudio.ir.ui.StatusBar();
    int var8 = var7.getY();
    javax.swing.JToolTip var9 = var7.createToolTip();
    float var10 = var9.getAlignmentY();
    java.awt.Color var11 = var9.getForeground();
    var4.setBackground(var11);
    var0.setGlassPane((java.awt.Component)var4);
    boolean var14 = var0.isResizable();
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var1);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var2);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var3 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var6);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var8 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var9);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var10 == 0.5f);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var11);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var14 == true);

  }

  public void test93() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest1.test93");


    com.allenstudio.ir.ui.MainFrame var0 = new com.allenstudio.ir.ui.MainFrame();
    java.lang.String var1 = var0.getWarningString();
    java.lang.String var2 = var0.getWarningString();
    boolean var3 = var0.isAutoRequestFocus();
    boolean var4 = var0.isResizable();
    javax.swing.JLayeredPane var5 = var0.getLayeredPane();
    java.awt.Component var6 = var0.getFocusOwner();
    int var7 = var0.getExtendedState();
    var0.pack();
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var1);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var2);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var3 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var4 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var5);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var6);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var7 == 0);

  }

  public void test94() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest1.test94");


    com.allenstudio.ir.ui.MainFrame var0 = new com.allenstudio.ir.ui.MainFrame();
    java.lang.String var1 = var0.getWarningString();
    java.util.Locale var2 = var0.getLocale();
    com.allenstudio.ir.ui.calendar.DateChooser var3 = new com.allenstudio.ir.ui.calendar.DateChooser();
    var3.setSize(0, (-1));
    javax.swing.event.AncestorListener[] var7 = var3.getAncestorListeners();
    var0.setLocationRelativeTo((java.awt.Component)var3);
    var0.setExtendedState(556);
    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      var0.createBufferStrategy(10);
      fail("Expected exception of type java.lang.IllegalStateException");
    } catch (java.lang.IllegalStateException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var1);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var2);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var7);

  }

  public void test95() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest1.test95");


    com.allenstudio.ir.ui.MainFrame var0 = new com.allenstudio.ir.ui.MainFrame();
    java.lang.String var1 = var0.getWarningString();
    java.lang.String var2 = var0.getWarningString();
    java.awt.Container var3 = var0.getFocusCycleRootAncestor();
    com.allenstudio.ir.ui.StatusBar var4 = new com.allenstudio.ir.ui.StatusBar();
    boolean var5 = var4.isBackgroundSet();
    boolean var8 = var4.contains(10, 100);
    var4.revalidate();
    javax.swing.JToolTip var10 = var4.createToolTip();
    com.allenstudio.ir.ui.StatusBar var11 = new com.allenstudio.ir.ui.StatusBar();
    javax.swing.JRootPane var12 = var11.getRootPane();
    java.awt.Point var13 = var11.location();
    com.allenstudio.ir.ui.StatusBar var14 = new com.allenstudio.ir.ui.StatusBar();
    javax.swing.JRootPane var15 = var14.getRootPane();
    java.awt.Point var16 = var14.location();
    com.allenstudio.ir.ui.Toolbar var17 = new com.allenstudio.ir.ui.Toolbar();
    boolean var18 = var17.isFloatable();
    java.awt.Component var20 = var17.getComponentAtIndex(10);
    java.lang.Object var21 = var14.getClientProperty((java.lang.Object)10);
    java.awt.Dimension var22 = var14.getMaximumSize();
    var11.setMinimumSize(var22);
    java.awt.Rectangle var24 = var11.getBounds();
    var4.scrollRectToVisible(var24);
    var0.setMaximizedBounds(var24);
    float var27 = var0.getAlignmentX();
    var0.revalidate();
    int var29 = var0.getState();
    var0.setCursor(4);
    com.allenstudio.ir.ui.MainFrame var32 = new com.allenstudio.ir.ui.MainFrame();
    java.lang.String var33 = var32.getWarningString();
    boolean var34 = var32.isAlwaysOnTopSupported();
    com.allenstudio.ir.ui.StatusBar var35 = new com.allenstudio.ir.ui.StatusBar();
    javax.swing.JRootPane var36 = var35.getRootPane();
    java.awt.Point var37 = var35.location();
    com.allenstudio.ir.ui.StatusBar var38 = new com.allenstudio.ir.ui.StatusBar();
    javax.swing.JRootPane var39 = var38.getRootPane();
    java.awt.Point var40 = var38.location();
    com.allenstudio.ir.ui.Toolbar var41 = new com.allenstudio.ir.ui.Toolbar();
    boolean var42 = var41.isFloatable();
    java.awt.Component var44 = var41.getComponentAtIndex(10);
    java.lang.Object var45 = var38.getClientProperty((java.lang.Object)10);
    java.awt.Dimension var46 = var38.getMaximumSize();
    var35.setMinimumSize(var46);
    java.awt.Rectangle var48 = var35.getBounds();
    java.awt.Rectangle var49 = var32.getBounds(var48);
    var0.setBounds(var48);
    com.allenstudio.ir.ui.Toolbar var51 = new com.allenstudio.ir.ui.Toolbar();
    java.awt.image.ColorModel var52 = var51.getColorModel();
    java.awt.im.InputContext var53 = var51.getInputContext();
    java.awt.Component var55 = var51.getComponentAtIndex(0);
    boolean var56 = var51.isManagingFocus();
    var0.setGlassPane((java.awt.Component)var51);
    float var58 = var0.getOpacity();
    var0.repaint(10L, 100, (-1), 5, 10);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var1);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var2);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var3);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var5 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var8 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var10);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var12);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var13);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var15);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var16);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var18 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var20);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var21);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var22);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var24);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var27 == 0.5f);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var29 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var33);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var34 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var36);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var37);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var39);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var40);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var42 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var44);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var45);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var46);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var48);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var49);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var52);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var53);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var55);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var56 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var58 == 1.0f);

  }

  public void test96() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest1.test96");


    com.allenstudio.ir.ui.DatePickerPane var0 = new com.allenstudio.ir.ui.DatePickerPane();
    var0.transferFocus();
    com.allenstudio.ir.ui.Toolbar var2 = new com.allenstudio.ir.ui.Toolbar();
    java.awt.image.ColorModel var3 = var2.getColorModel();
    var2.setEnabled(true);
    java.awt.Component var7 = var2.getComponentAtIndex(1);
    boolean var8 = var2.isFloatable();
    var0.setContent((java.awt.Component)var2);
    var0.setSelected(true);
    var0.resize(0, 1);
    java.awt.Rectangle var15 = var0.getBounds();
    java.awt.Point var16 = var0.location();
    com.allenstudio.ir.ui.Toolbar var17 = new com.allenstudio.ir.ui.Toolbar();
    java.awt.image.ColorModel var18 = var17.getColorModel();
    java.awt.im.InputContext var19 = var17.getInputContext();
    java.awt.Component var21 = var17.getComponent(0);
    java.awt.Font var22 = var17.getFont();
    java.awt.FontMetrics var23 = var0.getFontMetrics(var22);
    java.awt.event.HierarchyBoundsListener[] var24 = var0.getHierarchyBoundsListeners();
    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      javax.swing.InputMap var26 = var0.getInputMap(6);
      fail("Expected exception of type java.lang.IllegalArgumentException");
    } catch (java.lang.IllegalArgumentException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var3);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var7);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var8 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var15);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var16);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var18);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var19);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var21);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var22);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var23);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var24);

  }

  public void test97() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest1.test97");


    com.allenstudio.ir.ui.Toolbar var0 = new com.allenstudio.ir.ui.Toolbar();
    java.awt.image.ColorModel var1 = var0.getColorModel();
    var0.setEnabled(true);
    java.awt.Component var5 = var0.getComponentAtIndex(1);
    boolean var6 = var0.isFloatable();
    javax.swing.InputMap var7 = var0.getInputMap();
    int var8 = var0.getWidth();
    javax.accessibility.AccessibleContext var9 = var0.getAccessibleContext();
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var1);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var5);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var6 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var7);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var8 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var9);

  }

  public void test98() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest1.test98");


    com.allenstudio.ir.ui.Toolbar var0 = new com.allenstudio.ir.ui.Toolbar();
    java.awt.event.MouseWheelListener[] var1 = var0.getMouseWheelListeners();
    java.awt.Dimension var2 = var0.getMinimumSize();
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var1);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var2);

  }

  public void test99() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest1.test99");


    com.allenstudio.ir.ui.MainFrame var0 = new com.allenstudio.ir.ui.MainFrame();
    java.lang.String var1 = var0.getWarningString();
    java.lang.String var2 = var0.getWarningString();
    com.allenstudio.ir.ui.DatePickerPane var3 = new com.allenstudio.ir.ui.DatePickerPane();
    javax.swing.KeyStroke[] var4 = var3.getRegisteredKeyStrokes();
    com.allenstudio.ir.ui.Toolbar var5 = new com.allenstudio.ir.ui.Toolbar();
    java.awt.image.ColorModel var6 = var5.getColorModel();
    java.awt.im.InputContext var7 = var5.getInputContext();
    java.awt.Component var9 = var5.getComponentAtIndex(0);
    var3.setToolBar((javax.swing.JToolBar)var5);
    boolean var12 = var3.areFocusTraversalKeysSet(0);
    java.awt.Rectangle var13 = var3.bounds();
    var0.setMaximizedBounds(var13);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var1);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var2);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var4);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var6);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var7);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var9);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var12 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var13);

  }

  public void test100() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest1.test100");


    com.allenstudio.ir.ui.NoteListsTabPane var0 = new com.allenstudio.ir.ui.NoteListsTabPane();
    com.allenstudio.ir.ui.Toolbar var1 = new com.allenstudio.ir.ui.Toolbar();
    boolean var2 = var1.isFloatable();
    var1.show();
    java.awt.image.ColorModel var4 = var1.getColorModel();
    boolean var5 = var1.isFocusCycleRoot();
    com.allenstudio.ir.ui.DatePickerPane var6 = new com.allenstudio.ir.ui.DatePickerPane();
    var6.transferFocus();
    com.allenstudio.ir.ui.Toolbar var8 = new com.allenstudio.ir.ui.Toolbar();
    java.awt.image.ColorModel var9 = var8.getColorModel();
    var8.setEnabled(true);
    java.awt.Component var13 = var8.getComponentAtIndex(1);
    boolean var14 = var8.isFloatable();
    var6.setContent((java.awt.Component)var8);
    java.awt.Dimension var16 = var6.size();
    com.allenstudio.ir.ui.Toolbar var17 = new com.allenstudio.ir.ui.Toolbar();
    boolean var18 = var17.isFloatable();
    var17.show();
    boolean var20 = var17.isRequestFocusEnabled();
    java.awt.Dimension var21 = var17.minimumSize();
    var6.setToolBar((javax.swing.JToolBar)var17);
    java.awt.Image var25 = var6.createImage(10, (-1));
    var0.add((java.awt.Component)var1, (java.lang.Object)10);
    com.allenstudio.ir.ui.Toolbar var27 = new com.allenstudio.ir.ui.Toolbar();
    boolean var28 = var27.isFloatable();
    java.awt.Component var30 = var27.getComponentAtIndex(10);
    boolean var31 = var27.isLightweight();
    java.awt.Component var32 = var0.add((java.awt.Component)var27);
    com.allenstudio.ir.ui.NoteListsTabPane var33 = new com.allenstudio.ir.ui.NoteListsTabPane();
    com.allenstudio.ir.ui.Toolbar var34 = new com.allenstudio.ir.ui.Toolbar();
    boolean var35 = var34.isFloatable();
    var34.show();
    java.awt.image.ColorModel var37 = var34.getColorModel();
    boolean var38 = var34.isFocusCycleRoot();
    com.allenstudio.ir.ui.DatePickerPane var39 = new com.allenstudio.ir.ui.DatePickerPane();
    var39.transferFocus();
    com.allenstudio.ir.ui.Toolbar var41 = new com.allenstudio.ir.ui.Toolbar();
    java.awt.image.ColorModel var42 = var41.getColorModel();
    var41.setEnabled(true);
    java.awt.Component var46 = var41.getComponentAtIndex(1);
    boolean var47 = var41.isFloatable();
    var39.setContent((java.awt.Component)var41);
    java.awt.Dimension var49 = var39.size();
    com.allenstudio.ir.ui.Toolbar var50 = new com.allenstudio.ir.ui.Toolbar();
    boolean var51 = var50.isFloatable();
    var50.show();
    boolean var53 = var50.isRequestFocusEnabled();
    java.awt.Dimension var54 = var50.minimumSize();
    var39.setToolBar((javax.swing.JToolBar)var50);
    java.awt.Image var58 = var39.createImage(10, (-1));
    var33.add((java.awt.Component)var34, (java.lang.Object)10);
    var33.setSelectedIndex(1);
    javax.swing.plaf.TabbedPaneUI var62 = var33.getUI();
    javax.swing.SingleSelectionModel var63 = var33.getModel();
    var0.setModel(var63);
    int var66 = var0.indexOfTab("This is a testing description. \u03E3\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\u073F\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD");
    int var67 = var0.getTabPlacement();
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var2 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var4);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var5 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var9);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var13);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var14 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var16);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var18 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var20 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var21);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var25);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var28 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var30);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var31 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var32);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var35 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var37);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var38 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var42);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var46);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var47 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var49);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var51 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var53 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var54);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var58);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var62);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var63);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var66 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var67 == 1);

  }

  public void test101() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest1.test101");


    com.allenstudio.ir.ui.StatusBar var0 = new com.allenstudio.ir.ui.StatusBar();
    javax.swing.JRootPane var1 = var0.getRootPane();
    java.awt.Point var2 = var0.location();
    com.allenstudio.ir.ui.Toolbar var3 = new com.allenstudio.ir.ui.Toolbar();
    boolean var4 = var3.isFloatable();
    java.awt.Component var6 = var3.getComponentAtIndex(10);
    java.lang.Object var7 = var0.getClientProperty((java.lang.Object)10);
    var0.enable();
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var1);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var2);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var4 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var6);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var7);

  }

  public void test102() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest1.test102");


    com.allenstudio.ir.ui.NoteListsTabPane var0 = new com.allenstudio.ir.ui.NoteListsTabPane();
    com.allenstudio.ir.ui.Toolbar var1 = new com.allenstudio.ir.ui.Toolbar();
    boolean var2 = var1.isFloatable();
    var1.show();
    java.awt.image.ColorModel var4 = var1.getColorModel();
    boolean var5 = var1.isFocusCycleRoot();
    com.allenstudio.ir.ui.DatePickerPane var6 = new com.allenstudio.ir.ui.DatePickerPane();
    var6.transferFocus();
    com.allenstudio.ir.ui.Toolbar var8 = new com.allenstudio.ir.ui.Toolbar();
    java.awt.image.ColorModel var9 = var8.getColorModel();
    var8.setEnabled(true);
    java.awt.Component var13 = var8.getComponentAtIndex(1);
    boolean var14 = var8.isFloatable();
    var6.setContent((java.awt.Component)var8);
    java.awt.Dimension var16 = var6.size();
    com.allenstudio.ir.ui.Toolbar var17 = new com.allenstudio.ir.ui.Toolbar();
    boolean var18 = var17.isFloatable();
    var17.show();
    boolean var20 = var17.isRequestFocusEnabled();
    java.awt.Dimension var21 = var17.minimumSize();
    var6.setToolBar((javax.swing.JToolBar)var17);
    java.awt.Image var25 = var6.createImage(10, (-1));
    var0.add((java.awt.Component)var1, (java.lang.Object)10);
    var0.setSelectedIndex(1);
    javax.swing.plaf.TabbedPaneUI var29 = var0.getUI();
    javax.swing.SingleSelectionModel var30 = var0.getModel();
    int var31 = var0.getTabPlacement();
    com.allenstudio.ir.ui.StatusBar var33 = new com.allenstudio.ir.ui.StatusBar();
    com.allenstudio.ir.core.plugins.CommonNote var34 = new com.allenstudio.ir.core.plugins.CommonNote();
    var34.setFocusTraversalPolicyProvider(false);
    var33.remove((java.awt.Component)var34);
    var34.setFeature("ToolBarUI");
    javax.swing.Icon var40 = var34.getIcon();
    var0.setDisabledIconAt(0, var40);
    var0.firePropertyChange("hi!", ' ', ' ');
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var2 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var4);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var5 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var9);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var13);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var14 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var16);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var18 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var20 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var21);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var25);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var29);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var30);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var31 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var40);

  }

  public void test103() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest1.test103");


    com.allenstudio.ir.ui.DatePickerPane var0 = new com.allenstudio.ir.ui.DatePickerPane();
    var0.transferFocus();
    com.allenstudio.ir.ui.Toolbar var2 = new com.allenstudio.ir.ui.Toolbar();
    java.awt.image.ColorModel var3 = var2.getColorModel();
    var2.setEnabled(true);
    java.awt.Component var7 = var2.getComponentAtIndex(1);
    boolean var8 = var2.isFloatable();
    var0.setContent((java.awt.Component)var2);
    java.awt.Color var10 = var2.getForeground();
    var2.setVisible(true);
    boolean var13 = var2.isRequestFocusEnabled();
    com.allenstudio.ir.ui.Toolbar var14 = new com.allenstudio.ir.ui.Toolbar();
    java.awt.image.ColorModel var15 = var14.getColorModel();
    var14.setEnabled(true);
    java.awt.Component var19 = var14.getComponentAtIndex(1);
    boolean var20 = var14.isFloatable();
    java.lang.String var21 = var14.toString();
    com.allenstudio.ir.ui.Toolbar var22 = new com.allenstudio.ir.ui.Toolbar();
    java.awt.event.MouseWheelListener[] var23 = var22.getMouseWheelListeners();
    java.awt.event.MouseListener[] var24 = var22.getMouseListeners();
    var22.firePropertyChange("", false, true);
    var14.add((java.awt.Component)var22, (java.lang.Object)10.0f);
    java.awt.event.HierarchyBoundsListener[] var31 = var22.getHierarchyBoundsListeners();
    com.allenstudio.ir.ui.Toolbar var32 = new com.allenstudio.ir.ui.Toolbar();
    boolean var33 = var32.isFloatable();
    var32.show();
    boolean var35 = var32.isRequestFocusEnabled();
    java.awt.Dimension var36 = var32.minimumSize();
    java.awt.Dimension var37 = var32.getMinimumSize();
    var22.resize(var37);
    var2.setMaximumSize(var37);
    var2.firePropertyChange("C:\\boot.ini", (short)(-1), (short)0);
    com.allenstudio.ir.ui.MainFrame var44 = new com.allenstudio.ir.ui.MainFrame();
    java.lang.String var45 = var44.getWarningString();
    java.lang.String var46 = var44.getWarningString();
    boolean var47 = var44.isAutoRequestFocus();
    boolean var48 = var44.isResizable();
    javax.swing.JLayeredPane var49 = var44.getLayeredPane();
    javax.swing.TransferHandler var50 = var44.getTransferHandler();
    java.lang.String var51 = var44.getTitle();
    java.awt.event.WindowListener[] var52 = var44.getWindowListeners();
    boolean var53 = var44.isShowing();
    boolean var54 = var44.isResizable();
    java.awt.Dimension var55 = var44.minimumSize();
    var2.setSize(var55);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var3);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var7);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var8 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var10);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var13 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var15);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var19);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var20 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var23);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var24);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var31);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var33 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var35 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var36);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var37);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var45);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var46);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var47 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var48 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var49);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var50);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var51 + "' != '" + "Inspirento - alpha 0.86"+ "'", var51.equals("Inspirento - alpha 0.86"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var52);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var53 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var54 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var55);

  }

  public void test104() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest1.test104");


    com.allenstudio.ir.ui.DefaultNoteListModel var0 = new com.allenstudio.ir.ui.DefaultNoteListModel();
    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      com.allenstudio.ir.core.plugins.AbstractNote var1 = var0.firstElement();
      fail("Expected exception of type java.util.NoSuchElementException");
    } catch (java.util.NoSuchElementException e) {
      // Expected exception.
    }

  }

  public void test105() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest1.test105");


    com.allenstudio.ir.ui.StatusBar var0 = new com.allenstudio.ir.ui.StatusBar();
    javax.swing.JRootPane var1 = var0.getRootPane();
    java.awt.Point var2 = var0.location();
    com.allenstudio.ir.ui.Toolbar var3 = new com.allenstudio.ir.ui.Toolbar();
    boolean var4 = var3.isFloatable();
    java.awt.Component var6 = var3.getComponentAtIndex(10);
    java.lang.Object var7 = var0.getClientProperty((java.lang.Object)10);
    var0.setFocusTraversalPolicyProvider(false);
    boolean var10 = var0.isManagingFocus();
    int var11 = var0.getHeight();
    javax.swing.JToolTip var12 = var0.createToolTip();
    boolean var13 = var12.isDoubleBuffered();
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var1);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var2);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var4 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var6);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var7);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var10 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var11 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var12);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var13 == false);

  }

  public void test106() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest1.test106");


    com.allenstudio.ir.ui.Toolbar var0 = new com.allenstudio.ir.ui.Toolbar();
    java.awt.image.ColorModel var1 = var0.getColorModel();
    var0.setEnabled(true);
    java.awt.Component var5 = var0.getComponentAtIndex(1);
    boolean var6 = var0.isFloatable();
    javax.swing.InputMap var7 = var0.getInputMap();
    javax.swing.plaf.ToolBarUI var8 = var0.getUI();
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var1);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var5);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var6 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var7);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var8);

  }

  public void test107() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest1.test107");


    com.allenstudio.ir.ui.DatePickerPane var0 = new com.allenstudio.ir.ui.DatePickerPane();
    javax.swing.KeyStroke[] var1 = var0.getRegisteredKeyStrokes();
    boolean var2 = var0.isFocusTraversalPolicySet();
    var0.updateUI();
    java.util.GregorianCalendar var4 = var0.reportSelectedDate();
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var2 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var4);

  }

  public void test108() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest1.test108");


    com.allenstudio.ir.ui.DatePickerPane var0 = new com.allenstudio.ir.ui.DatePickerPane();
    var0.transferFocus();
    com.allenstudio.ir.ui.Toolbar var2 = new com.allenstudio.ir.ui.Toolbar();
    java.awt.image.ColorModel var3 = var2.getColorModel();
    var2.setEnabled(true);
    java.awt.Component var7 = var2.getComponentAtIndex(1);
    boolean var8 = var2.isFloatable();
    var0.setContent((java.awt.Component)var2);
    var0.setSelected(true);
    boolean var12 = var0.isFocusable();
    boolean var13 = var0.isVisible();
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var3);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var7);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var8 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var12 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var13 == true);

  }

  public void test109() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest1.test109");


    com.allenstudio.ir.ui.calendar.MonthlyCalendar var0 = new com.allenstudio.ir.ui.calendar.MonthlyCalendar();
    java.awt.event.MouseMotionListener[] var1 = var0.getMouseMotionListeners();
    java.util.Calendar var2 = var0.getSelectedDate();
    java.awt.Dimension var3 = var0.size();
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var1);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var2);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var3);

  }

  public void test110() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest1.test110");


    com.allenstudio.ir.ui.MainFrame var0 = new com.allenstudio.ir.ui.MainFrame();
    java.lang.String var1 = var0.getWarningString();
    java.lang.String var2 = var0.getWarningString();
    java.awt.Container var3 = var0.getFocusCycleRootAncestor();
    com.allenstudio.ir.ui.StatusBar var4 = new com.allenstudio.ir.ui.StatusBar();
    boolean var5 = var4.isBackgroundSet();
    boolean var8 = var4.contains(10, 100);
    var4.revalidate();
    javax.swing.JToolTip var10 = var4.createToolTip();
    com.allenstudio.ir.ui.StatusBar var11 = new com.allenstudio.ir.ui.StatusBar();
    javax.swing.JRootPane var12 = var11.getRootPane();
    java.awt.Point var13 = var11.location();
    com.allenstudio.ir.ui.StatusBar var14 = new com.allenstudio.ir.ui.StatusBar();
    javax.swing.JRootPane var15 = var14.getRootPane();
    java.awt.Point var16 = var14.location();
    com.allenstudio.ir.ui.Toolbar var17 = new com.allenstudio.ir.ui.Toolbar();
    boolean var18 = var17.isFloatable();
    java.awt.Component var20 = var17.getComponentAtIndex(10);
    java.lang.Object var21 = var14.getClientProperty((java.lang.Object)10);
    java.awt.Dimension var22 = var14.getMaximumSize();
    var11.setMinimumSize(var22);
    java.awt.Rectangle var24 = var11.getBounds();
    var4.scrollRectToVisible(var24);
    var0.setMaximizedBounds(var24);
    float var27 = var0.getAlignmentX();
    var0.revalidate();
    int var29 = var0.getState();
    var0.setCursor(4);
    com.allenstudio.ir.ui.MainFrame var32 = new com.allenstudio.ir.ui.MainFrame();
    java.lang.String var33 = var32.getWarningString();
    boolean var34 = var32.isAlwaysOnTopSupported();
    com.allenstudio.ir.ui.StatusBar var35 = new com.allenstudio.ir.ui.StatusBar();
    javax.swing.JRootPane var36 = var35.getRootPane();
    java.awt.Point var37 = var35.location();
    com.allenstudio.ir.ui.StatusBar var38 = new com.allenstudio.ir.ui.StatusBar();
    javax.swing.JRootPane var39 = var38.getRootPane();
    java.awt.Point var40 = var38.location();
    com.allenstudio.ir.ui.Toolbar var41 = new com.allenstudio.ir.ui.Toolbar();
    boolean var42 = var41.isFloatable();
    java.awt.Component var44 = var41.getComponentAtIndex(10);
    java.lang.Object var45 = var38.getClientProperty((java.lang.Object)10);
    java.awt.Dimension var46 = var38.getMaximumSize();
    var35.setMinimumSize(var46);
    java.awt.Rectangle var48 = var35.getBounds();
    java.awt.Rectangle var49 = var32.getBounds(var48);
    var0.setBounds(var48);
    com.allenstudio.ir.ui.Toolbar var51 = new com.allenstudio.ir.ui.Toolbar();
    java.awt.image.ColorModel var52 = var51.getColorModel();
    java.awt.im.InputContext var53 = var51.getInputContext();
    java.awt.Component var55 = var51.getComponentAtIndex(0);
    boolean var56 = var51.isManagingFocus();
    var0.setGlassPane((java.awt.Component)var51);
    float var58 = var0.getOpacity();
    com.allenstudio.ir.ui.MainFrame var59 = new com.allenstudio.ir.ui.MainFrame();
    boolean var60 = var59.isShowing();
    int var61 = var59.countComponents();
    var59.setAutoRequestFocus(false);
    javax.swing.JMenuBar var64 = var59.getJMenuBar();
    boolean var65 = var64.isBorderPainted();
    com.allenstudio.ir.ui.StatusBar var66 = new com.allenstudio.ir.ui.StatusBar();
    int var67 = var66.getY();
    boolean var68 = var66.isLightweight();
    java.awt.Dimension var69 = var66.getMaximumSize();
    java.awt.event.KeyListener[] var70 = var66.getKeyListeners();
    boolean var71 = var66.getInheritsPopupMenu();
    var66.firePropertyChange("This is a testing description. \u03E3\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\u073F\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD", 100.0d, 100.0d);
    var66.repaint(100L, 100, 1, 100, (-1));
    boolean var82 = var66.isOpaque();
    var64.setSelected((java.awt.Component)var66);
    var0.setJMenuBar(var64);
    java.lang.String var85 = var64.getUIClassID();
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var1);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var2);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var3);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var5 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var8 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var10);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var12);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var13);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var15);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var16);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var18 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var20);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var21);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var22);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var24);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var27 == 0.5f);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var29 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var33);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var34 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var36);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var37);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var39);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var40);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var42 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var44);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var45);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var46);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var48);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var49);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var52);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var53);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var55);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var56 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var58 == 1.0f);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var60 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var61 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var64);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var65 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var67 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var68 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var69);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var70);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var71 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var82 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var85 + "' != '" + "MenuBarUI"+ "'", var85.equals("MenuBarUI"));

  }

  public void test111() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest1.test111");


    com.allenstudio.ir.ui.NoteListsTabPane var0 = new com.allenstudio.ir.ui.NoteListsTabPane();
    com.allenstudio.ir.ui.Toolbar var1 = new com.allenstudio.ir.ui.Toolbar();
    boolean var2 = var1.isFloatable();
    var1.show();
    java.awt.image.ColorModel var4 = var1.getColorModel();
    boolean var5 = var1.isFocusCycleRoot();
    com.allenstudio.ir.ui.DatePickerPane var6 = new com.allenstudio.ir.ui.DatePickerPane();
    var6.transferFocus();
    com.allenstudio.ir.ui.Toolbar var8 = new com.allenstudio.ir.ui.Toolbar();
    java.awt.image.ColorModel var9 = var8.getColorModel();
    var8.setEnabled(true);
    java.awt.Component var13 = var8.getComponentAtIndex(1);
    boolean var14 = var8.isFloatable();
    var6.setContent((java.awt.Component)var8);
    java.awt.Dimension var16 = var6.size();
    com.allenstudio.ir.ui.Toolbar var17 = new com.allenstudio.ir.ui.Toolbar();
    boolean var18 = var17.isFloatable();
    var17.show();
    boolean var20 = var17.isRequestFocusEnabled();
    java.awt.Dimension var21 = var17.minimumSize();
    var6.setToolBar((javax.swing.JToolBar)var17);
    java.awt.Image var25 = var6.createImage(10, (-1));
    var0.add((java.awt.Component)var1, (java.lang.Object)10);
    var0.setSelectedIndex(1);
    javax.swing.plaf.TabbedPaneUI var29 = var0.getUI();
    int var30 = var0.getTabRunCount();
    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      java.lang.String var32 = var0.getTitleAt(4);
      fail("Expected exception of type java.lang.IndexOutOfBoundsException");
    } catch (java.lang.IndexOutOfBoundsException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var2 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var4);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var5 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var9);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var13);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var14 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var16);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var18 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var20 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var21);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var25);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var29);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var30 == 1);

  }

  public void test112() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest1.test112");


    com.allenstudio.ir.ui.NoteListsTabPane var0 = new com.allenstudio.ir.ui.NoteListsTabPane();
    com.allenstudio.ir.ui.Toolbar var1 = new com.allenstudio.ir.ui.Toolbar();
    boolean var2 = var1.isFloatable();
    var1.show();
    java.awt.image.ColorModel var4 = var1.getColorModel();
    boolean var5 = var1.isFocusCycleRoot();
    com.allenstudio.ir.ui.DatePickerPane var6 = new com.allenstudio.ir.ui.DatePickerPane();
    var6.transferFocus();
    com.allenstudio.ir.ui.Toolbar var8 = new com.allenstudio.ir.ui.Toolbar();
    java.awt.image.ColorModel var9 = var8.getColorModel();
    var8.setEnabled(true);
    java.awt.Component var13 = var8.getComponentAtIndex(1);
    boolean var14 = var8.isFloatable();
    var6.setContent((java.awt.Component)var8);
    java.awt.Dimension var16 = var6.size();
    com.allenstudio.ir.ui.Toolbar var17 = new com.allenstudio.ir.ui.Toolbar();
    boolean var18 = var17.isFloatable();
    var17.show();
    boolean var20 = var17.isRequestFocusEnabled();
    java.awt.Dimension var21 = var17.minimumSize();
    var6.setToolBar((javax.swing.JToolBar)var17);
    java.awt.Image var25 = var6.createImage(10, (-1));
    var0.add((java.awt.Component)var1, (java.lang.Object)10);
    com.allenstudio.ir.ui.Toolbar var27 = new com.allenstudio.ir.ui.Toolbar();
    boolean var28 = var27.isFloatable();
    java.awt.Component var30 = var27.getComponentAtIndex(10);
    boolean var31 = var27.isLightweight();
    java.awt.Component var32 = var0.add((java.awt.Component)var27);
    int var33 = var0.getTabLayoutPolicy();
    javax.swing.Icon var35 = var0.getIconAt(1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var2 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var4);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var5 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var9);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var13);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var14 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var16);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var18 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var20 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var21);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var25);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var28 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var30);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var31 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var32);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var33 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var35);

  }

  public void test113() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest1.test113");


    com.allenstudio.ir.ui.MainFrame var0 = new com.allenstudio.ir.ui.MainFrame();
    java.lang.String var1 = var0.getWarningString();
    java.lang.String var2 = var0.getWarningString();
    boolean var3 = var0.isAutoRequestFocus();
    com.allenstudio.ir.ui.MainFrame var4 = new com.allenstudio.ir.ui.MainFrame();
    java.lang.String var5 = var4.getWarningString();
    boolean var6 = var4.isAlwaysOnTopSupported();
    java.awt.Color var7 = var4.getBackground();
    var0.setBackground(var7);
    javax.swing.JLayeredPane var9 = var0.getLayeredPane();
    var0.toFront();
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var1);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var2);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var3 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var5);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var6 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var7);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var9);

  }

  public void test114() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest1.test114");


    com.allenstudio.ir.ui.MainFrame var0 = new com.allenstudio.ir.ui.MainFrame();
    java.lang.String var1 = var0.getWarningString();
    java.lang.String var2 = var0.getWarningString();
    boolean var3 = var0.isAutoRequestFocus();
    com.allenstudio.ir.ui.DatePickerPane var4 = new com.allenstudio.ir.ui.DatePickerPane();
    var4.transferFocus();
    java.awt.Dimension var6 = var4.getMinimumSize();
    com.allenstudio.ir.ui.StatusBar var7 = new com.allenstudio.ir.ui.StatusBar();
    int var8 = var7.getY();
    javax.swing.JToolTip var9 = var7.createToolTip();
    float var10 = var9.getAlignmentY();
    java.awt.Color var11 = var9.getForeground();
    var4.setBackground(var11);
    var0.setGlassPane((java.awt.Component)var4);
    java.util.Locale var14 = var4.getLocale();
    javax.swing.JComponent.setDefaultLocale(var14);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var1);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var2);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var3 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var6);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var8 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var9);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var10 == 0.5f);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var11);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var14);

  }

  public void test115() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest1.test115");


    com.allenstudio.ir.ui.DefaultNoteListModel var0 = new com.allenstudio.ir.ui.DefaultNoteListModel();
    com.allenstudio.ir.core.plugins.CommonNote var1 = new com.allenstudio.ir.core.plugins.CommonNote();
    java.lang.String var2 = var1.getFeature();
    com.allenstudio.ir.ui.StatusBar var3 = new com.allenstudio.ir.ui.StatusBar();
    var3.enable();
    boolean var5 = var3.isFocusOwner();
    var3.firePropertyChange("hi!", 10L, 0L);
    var3.layout();
    var3.removeAll();
    com.allenstudio.ir.ui.StatusBar var12 = new com.allenstudio.ir.ui.StatusBar();
    javax.swing.JRootPane var13 = var12.getRootPane();
    java.awt.Point var14 = var12.location();
    java.awt.Component var15 = var3.getComponentAt(var14);
    java.awt.Point var16 = var1.getLocation(var14);
    var1.setOtherInfo("");
    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      int var20 = var0.lastIndexOf((com.allenstudio.ir.core.plugins.AbstractNote)var1, 31);
      fail("Expected exception of type java.lang.IndexOutOfBoundsException");
    } catch (java.lang.IndexOutOfBoundsException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var2 + "' != '" + "C:\\boot.ini"+ "'", var2.equals("C:\\boot.ini"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var5 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var13);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var14);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var15);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var16);

  }

  public void test116() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest1.test116");


    com.allenstudio.ir.ui.MainFrame var0 = new com.allenstudio.ir.ui.MainFrame();
    java.lang.String var1 = var0.getWarningString();
    java.lang.String var2 = var0.getWarningString();
    boolean var3 = var0.isAutoRequestFocus();
    boolean var4 = var0.isResizable();
    javax.swing.JLayeredPane var5 = var0.getLayeredPane();
    java.awt.Component var6 = var0.getFocusOwner();
    javax.accessibility.AccessibleContext var7 = var0.getAccessibleContext();
    boolean var8 = var0.isUndecorated();
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var1);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var2);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var3 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var4 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var5);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var6);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var7);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var8 == false);

  }

  public void test117() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest1.test117");


    com.allenstudio.ir.ui.NoteListsTabPane var0 = new com.allenstudio.ir.ui.NoteListsTabPane();
    com.allenstudio.ir.ui.Toolbar var1 = new com.allenstudio.ir.ui.Toolbar();
    boolean var2 = var1.isFloatable();
    var1.show();
    java.awt.image.ColorModel var4 = var1.getColorModel();
    boolean var5 = var1.isFocusCycleRoot();
    com.allenstudio.ir.ui.DatePickerPane var6 = new com.allenstudio.ir.ui.DatePickerPane();
    var6.transferFocus();
    com.allenstudio.ir.ui.Toolbar var8 = new com.allenstudio.ir.ui.Toolbar();
    java.awt.image.ColorModel var9 = var8.getColorModel();
    var8.setEnabled(true);
    java.awt.Component var13 = var8.getComponentAtIndex(1);
    boolean var14 = var8.isFloatable();
    var6.setContent((java.awt.Component)var8);
    java.awt.Dimension var16 = var6.size();
    com.allenstudio.ir.ui.Toolbar var17 = new com.allenstudio.ir.ui.Toolbar();
    boolean var18 = var17.isFloatable();
    var17.show();
    boolean var20 = var17.isRequestFocusEnabled();
    java.awt.Dimension var21 = var17.minimumSize();
    var6.setToolBar((javax.swing.JToolBar)var17);
    java.awt.Image var25 = var6.createImage(10, (-1));
    var0.add((java.awt.Component)var1, (java.lang.Object)10);
    com.allenstudio.ir.ui.Toolbar var27 = new com.allenstudio.ir.ui.Toolbar();
    boolean var28 = var27.isFloatable();
    java.awt.Component var30 = var27.getComponentAtIndex(10);
    boolean var31 = var27.isLightweight();
    java.awt.Component var32 = var0.add((java.awt.Component)var27);
    float var33 = var0.getAlignmentX();
    com.allenstudio.ir.ui.NoteListsTabPane var34 = new com.allenstudio.ir.ui.NoteListsTabPane();
    com.allenstudio.ir.ui.Toolbar var35 = new com.allenstudio.ir.ui.Toolbar();
    boolean var36 = var35.isFloatable();
    var35.show();
    java.awt.image.ColorModel var38 = var35.getColorModel();
    boolean var39 = var35.isFocusCycleRoot();
    com.allenstudio.ir.ui.DatePickerPane var40 = new com.allenstudio.ir.ui.DatePickerPane();
    var40.transferFocus();
    com.allenstudio.ir.ui.Toolbar var42 = new com.allenstudio.ir.ui.Toolbar();
    java.awt.image.ColorModel var43 = var42.getColorModel();
    var42.setEnabled(true);
    java.awt.Component var47 = var42.getComponentAtIndex(1);
    boolean var48 = var42.isFloatable();
    var40.setContent((java.awt.Component)var42);
    java.awt.Dimension var50 = var40.size();
    com.allenstudio.ir.ui.Toolbar var51 = new com.allenstudio.ir.ui.Toolbar();
    boolean var52 = var51.isFloatable();
    var51.show();
    boolean var54 = var51.isRequestFocusEnabled();
    java.awt.Dimension var55 = var51.minimumSize();
    var40.setToolBar((javax.swing.JToolBar)var51);
    java.awt.Image var59 = var40.createImage(10, (-1));
    var34.add((java.awt.Component)var35, (java.lang.Object)10);
    com.allenstudio.ir.ui.Toolbar var61 = new com.allenstudio.ir.ui.Toolbar();
    boolean var62 = var61.isFloatable();
    java.awt.Component var64 = var61.getComponentAtIndex(10);
    boolean var65 = var61.isLightweight();
    java.awt.Component var66 = var34.add((java.awt.Component)var61);
    com.allenstudio.ir.ui.NoteListsTabPane var67 = new com.allenstudio.ir.ui.NoteListsTabPane();
    com.allenstudio.ir.ui.Toolbar var68 = new com.allenstudio.ir.ui.Toolbar();
    boolean var69 = var68.isFloatable();
    var68.show();
    java.awt.image.ColorModel var71 = var68.getColorModel();
    boolean var72 = var68.isFocusCycleRoot();
    com.allenstudio.ir.ui.DatePickerPane var73 = new com.allenstudio.ir.ui.DatePickerPane();
    var73.transferFocus();
    com.allenstudio.ir.ui.Toolbar var75 = new com.allenstudio.ir.ui.Toolbar();
    java.awt.image.ColorModel var76 = var75.getColorModel();
    var75.setEnabled(true);
    java.awt.Component var80 = var75.getComponentAtIndex(1);
    boolean var81 = var75.isFloatable();
    var73.setContent((java.awt.Component)var75);
    java.awt.Dimension var83 = var73.size();
    com.allenstudio.ir.ui.Toolbar var84 = new com.allenstudio.ir.ui.Toolbar();
    boolean var85 = var84.isFloatable();
    var84.show();
    boolean var87 = var84.isRequestFocusEnabled();
    java.awt.Dimension var88 = var84.minimumSize();
    var73.setToolBar((javax.swing.JToolBar)var84);
    java.awt.Image var92 = var73.createImage(10, (-1));
    var67.add((java.awt.Component)var68, (java.lang.Object)10);
    var67.setSelectedIndex(1);
    javax.swing.plaf.TabbedPaneUI var96 = var67.getUI();
    javax.swing.SingleSelectionModel var97 = var67.getModel();
    var34.setModel(var97);
    var0.setModel(var97);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var2 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var4);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var5 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var9);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var13);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var14 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var16);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var18 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var20 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var21);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var25);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var28 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var30);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var31 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var32);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var33 == 0.5f);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var36 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var38);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var39 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var43);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var47);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var48 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var50);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var52 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var54 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var55);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var59);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var62 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var64);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var65 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var66);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var69 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var71);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var72 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var76);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var80);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var81 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var83);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var85 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var87 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var88);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var92);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var96);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var97);

  }

  public void test118() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest1.test118");


    com.allenstudio.ir.util.XmlElement var0 = new com.allenstudio.ir.util.XmlElement();
    com.allenstudio.ir.util.XmlElement var2 = var0.addSubElement("hi!");
    java.lang.String var4 = var0.getAttribute("C:\\boot.ini");
    com.allenstudio.ir.util.XmlElement var5 = new com.allenstudio.ir.util.XmlElement();
    com.allenstudio.ir.util.XmlElement var7 = var5.addSubElement("hi!");
    var7.notifyObservers((java.lang.Object)(byte)1);
    com.allenstudio.ir.util.XmlElement var10 = new com.allenstudio.ir.util.XmlElement();
    com.allenstudio.ir.util.XmlElement var12 = var10.addSubElement("hi!");
    var12.notifyObservers((java.lang.Object)(byte)1);
    com.allenstudio.ir.util.XmlElement var15 = var7.removeElement(var12);
    com.allenstudio.ir.util.XmlElement var16 = var12.getParent();
    var0.append(var12);
    boolean var18 = var12.hasChanged();
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var2);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var4);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var7);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var12);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var15);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var16);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var18 == false);

  }

  public void test119() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest1.test119");


    com.allenstudio.ir.ui.StatusBar var0 = new com.allenstudio.ir.ui.StatusBar();
    int var1 = var0.getY();
    var0.setIgnoreRepaint(true);
    boolean var4 = var0.requestFocusInWindow();
    java.awt.event.HierarchyBoundsListener[] var5 = var0.getHierarchyBoundsListeners();
    java.awt.Insets var6 = var0.insets();
    java.awt.event.HierarchyBoundsListener[] var7 = var0.getHierarchyBoundsListeners();
    var0.firePropertyChange("C:\\boot.ini", 100, 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var1 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var4 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var5);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var6);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var7);

  }

  public void test120() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest1.test120");


    com.allenstudio.ir.ui.DatePickerPane var0 = new com.allenstudio.ir.ui.DatePickerPane();
    java.lang.String var1 = var0.getUIClassID();
    com.allenstudio.ir.ui.StatusBar var2 = new com.allenstudio.ir.ui.StatusBar();
    int var3 = var2.getY();
    javax.swing.JToolTip var4 = var2.createToolTip();
    float var5 = var4.getAlignmentY();
    java.awt.Color var6 = var4.getForeground();
    var0.setBackground(var6);
    var0.move(10, 10);
    java.lang.String var11 = var0.getUIClassID();
    var0.firePropertyChange("hi!", 556, 6);
    java.awt.Color var16 = var0.getHeaderBackground();
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var1 + "' != '" + "PanelUI"+ "'", var1.equals("PanelUI"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var3 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var4);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var5 == 0.5f);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var6);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var11 + "' != '" + "PanelUI"+ "'", var11.equals("PanelUI"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var16);

  }

  public void test121() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest1.test121");


    com.allenstudio.ir.ui.MainFrame var0 = new com.allenstudio.ir.ui.MainFrame();
    java.lang.String var1 = var0.getWarningString();
    java.lang.String var2 = var0.getWarningString();
    boolean var3 = var0.isAutoRequestFocus();
    com.allenstudio.ir.ui.DatePickerPane var4 = new com.allenstudio.ir.ui.DatePickerPane();
    var4.transferFocus();
    java.awt.Dimension var6 = var4.getMinimumSize();
    com.allenstudio.ir.ui.StatusBar var7 = new com.allenstudio.ir.ui.StatusBar();
    int var8 = var7.getY();
    javax.swing.JToolTip var9 = var7.createToolTip();
    float var10 = var9.getAlignmentY();
    java.awt.Color var11 = var9.getForeground();
    var4.setBackground(var11);
    var0.setGlassPane((java.awt.Component)var4);
    com.allenstudio.ir.ui.StatusBar var14 = new com.allenstudio.ir.ui.StatusBar();
    int var15 = var14.getY();
    javax.swing.JToolTip var16 = var14.createToolTip();
    float var17 = var16.getAlignmentY();
    java.awt.Color var18 = var16.getForeground();
    var0.setBackground(var18);
    var0.setFocusCycleRoot(false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var1);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var2);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var3 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var6);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var8 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var9);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var10 == 0.5f);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var11);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var15 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var16);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var17 == 0.5f);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var18);

  }

  public void test122() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest1.test122");


    com.allenstudio.ir.util.XmlElement var0 = new com.allenstudio.ir.util.XmlElement();
    com.allenstudio.ir.util.XmlElement var2 = var0.addSubElement("hi!");
    com.allenstudio.ir.util.XmlElement var4 = var0.getElement("hi!");
    var0.deleteObservers();
    var0.setName("hi!");
    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      com.allenstudio.ir.util.XmlElement var9 = var0.getElement(4);
      fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException");
    } catch (java.lang.ArrayIndexOutOfBoundsException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var2);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var4);

  }

  public void test123() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest1.test123");


    com.allenstudio.ir.util.XmlElement var0 = new com.allenstudio.ir.util.XmlElement();
    com.allenstudio.ir.util.XmlElement var2 = var0.addSubElement("hi!");
    com.allenstudio.ir.util.XmlElement var3 = new com.allenstudio.ir.util.XmlElement();
    com.allenstudio.ir.util.XmlElement var5 = var3.addSubElement("hi!");
    var5.notifyObservers((java.lang.Object)(byte)1);
    var0.append(var5);
    com.allenstudio.ir.util.XmlElement var9 = new com.allenstudio.ir.util.XmlElement();
    com.allenstudio.ir.util.XmlElement var11 = var9.addSubElement("hi!");
    com.allenstudio.ir.util.XmlElement var12 = new com.allenstudio.ir.util.XmlElement();
    com.allenstudio.ir.util.XmlElement var14 = var12.addSubElement("hi!");
    var14.notifyObservers((java.lang.Object)(byte)1);
    var9.append(var14);
    com.allenstudio.ir.util.XmlElement var18 = new com.allenstudio.ir.util.XmlElement();
    com.allenstudio.ir.util.XmlElement var20 = var18.addSubElement("hi!");
    java.lang.String var22 = var18.getAttribute("C:\\boot.ini");
    com.allenstudio.ir.util.XmlElement var23 = var14.addSubElement(var18);
    java.lang.String var26 = var14.getAttribute("Title", "ToolBarUI");
    var14.setName("PanelUI");
    var0.append(var14);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var2);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var5);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var11);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var14);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var20);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var22);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var23);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var26 + "' != '" + "ToolBarUI"+ "'", var26.equals("ToolBarUI"));

  }

  public void test124() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest1.test124");


    com.allenstudio.ir.ui.MainFrame var0 = new com.allenstudio.ir.ui.MainFrame();
    java.lang.String var1 = var0.getWarningString();
    java.util.Locale var2 = var0.getLocale();
    com.allenstudio.ir.ui.calendar.DateChooser var3 = new com.allenstudio.ir.ui.calendar.DateChooser();
    var3.setSize(0, (-1));
    javax.swing.event.AncestorListener[] var7 = var3.getAncestorListeners();
    var0.setLocationRelativeTo((java.awt.Component)var3);
    var0.setExtendedState(556);
    com.allenstudio.ir.ui.MainFrame var11 = new com.allenstudio.ir.ui.MainFrame();
    boolean var12 = var11.isShowing();
    int var13 = var11.countComponents();
    var11.setAutoRequestFocus(false);
    javax.swing.JMenuBar var16 = var11.getJMenuBar();
    boolean var17 = var16.isBorderPainted();
    var16.menuSelectionChanged(true);
    com.allenstudio.ir.ui.MainFrame var20 = new com.allenstudio.ir.ui.MainFrame();
    boolean var21 = var20.isShowing();
    int var22 = var20.countComponents();
    var20.setAutoRequestFocus(false);
    javax.swing.JMenuBar var25 = var20.getJMenuBar();
    boolean var26 = var25.isBorderPainted();
    var25.updateUI();
    com.allenstudio.ir.ui.DatePickerPane var28 = new com.allenstudio.ir.ui.DatePickerPane();
    var28.transferFocus();
    java.awt.Dimension var30 = var28.getMinimumSize();
    java.awt.Dimension var31 = var25.getSize(var30);
    javax.swing.plaf.MenuBarUI var32 = var25.getUI();
    var16.setUI(var32);
    var0.setJMenuBar(var16);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var1);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var2);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var7);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var12 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var13 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var16);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var17 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var21 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var22 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var25);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var26 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var30);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var31);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var32);

  }

  public void test125() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest1.test125");


    com.allenstudio.ir.core.plugins.CommonNote var0 = new com.allenstudio.ir.core.plugins.CommonNote();
    java.lang.String var1 = var0.getDescription();
    var0.setOtherInfo("hi!");
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var1 + "' != '" + "This is a testing description. \u03E3\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\u073F\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD"+ "'", var1.equals("This is a testing description. \u03E3\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\u073F\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD"));

  }

  public void test126() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest1.test126");


    com.allenstudio.ir.util.XmlElement var1 = new com.allenstudio.ir.util.XmlElement();
    com.allenstudio.ir.util.XmlElement var3 = var1.addSubElement("hi!");
    java.lang.String var5 = var1.getAttribute("C:\\boot.ini");
    java.util.Hashtable var6 = var1.getAttributes();
    com.allenstudio.ir.util.XmlElement var7 = new com.allenstudio.ir.util.XmlElement("PanelUI", var6);
    java.lang.String var8 = var6.toString();
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var3);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var5);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var6);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var8 + "' != '" + "{}"+ "'", var8.equals("{}"));

  }

  public void test127() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest1.test127");


    com.allenstudio.ir.util.XmlElement var1 = new com.allenstudio.ir.util.XmlElement();
    com.allenstudio.ir.util.XmlElement var3 = var1.addSubElement("hi!");
    com.allenstudio.ir.util.XmlElement var6 = var3.addSubElement("", "hi!");
    java.util.Hashtable var7 = var6.getAttributes();
    com.allenstudio.ir.ui.MainFrame var8 = new com.allenstudio.ir.ui.MainFrame();
    java.lang.String var9 = var8.getWarningString();
    java.awt.Rectangle var10 = var8.getMaximizedBounds();
    java.awt.MenuBar var11 = var8.getMenuBar();
    com.allenstudio.ir.ui.NoteListsTabPane var12 = new com.allenstudio.ir.ui.NoteListsTabPane();
    var8.widgetChanged((com.allenstudio.ir.core.InspirentoWidget)var12);
    var8.dispose();
    java.lang.Object var15 = var7.get((java.lang.Object)var8);
    com.allenstudio.ir.util.XmlElement var16 = new com.allenstudio.ir.util.XmlElement();
    com.allenstudio.ir.util.XmlElement var18 = var16.addSubElement("hi!");
    com.allenstudio.ir.util.XmlElement var21 = var18.addSubElement("", "hi!");
    java.util.Hashtable var22 = var21.getAttributes();
    com.allenstudio.ir.ui.Toolbar var23 = new com.allenstudio.ir.ui.Toolbar();
    java.awt.image.ColorModel var24 = var23.getColorModel();
    var23.setEnabled(true);
    java.awt.ComponentOrientation var27 = var23.getComponentOrientation();
    java.lang.Object var28 = var7.put((java.lang.Object)var22, (java.lang.Object)var27);
    com.allenstudio.ir.util.XmlElement var29 = new com.allenstudio.ir.util.XmlElement(" ", var7);
    com.allenstudio.ir.ui.MainFrame var30 = new com.allenstudio.ir.ui.MainFrame();
    boolean var31 = var30.isShowing();
    int var32 = var30.countComponents();
    var30.setAutoRequestFocus(false);
    javax.swing.JMenuBar var35 = var30.getJMenuBar();
    boolean var36 = var35.isBorderPainted();
    var35.menuSelectionChanged(true);
    com.allenstudio.ir.ui.MainFrame var39 = new com.allenstudio.ir.ui.MainFrame();
    boolean var40 = var39.isShowing();
    int var41 = var39.countComponents();
    var39.setAutoRequestFocus(false);
    javax.swing.JMenuBar var44 = var39.getJMenuBar();
    boolean var45 = var44.isBorderPainted();
    var44.updateUI();
    com.allenstudio.ir.ui.DatePickerPane var47 = new com.allenstudio.ir.ui.DatePickerPane();
    var47.transferFocus();
    java.awt.Dimension var49 = var47.getMinimumSize();
    java.awt.Dimension var50 = var44.getSize(var49);
    javax.swing.plaf.MenuBarUI var51 = var44.getUI();
    var35.setUI(var51);
    boolean var53 = var7.equals((java.lang.Object)var51);
    com.allenstudio.ir.ui.calendar.DateChooser var54 = new com.allenstudio.ir.ui.calendar.DateChooser();
    boolean var56 = var54.requestFocus(false);
    com.allenstudio.ir.ui.StatusBar var57 = new com.allenstudio.ir.ui.StatusBar();
    boolean var58 = var57.isBackgroundSet();
    var57.repaint(100L);
    int var61 = var57.getWidth();
    com.allenstudio.ir.ui.MainFrame var62 = new com.allenstudio.ir.ui.MainFrame();
    java.lang.String var63 = var62.getWarningString();
    java.lang.String var64 = var62.getWarningString();
    java.awt.Container var65 = var62.getFocusCycleRootAncestor();
    com.allenstudio.ir.ui.StatusBar var66 = new com.allenstudio.ir.ui.StatusBar();
    boolean var67 = var66.isBackgroundSet();
    boolean var70 = var66.contains(10, 100);
    var66.revalidate();
    javax.swing.JToolTip var72 = var66.createToolTip();
    com.allenstudio.ir.ui.StatusBar var73 = new com.allenstudio.ir.ui.StatusBar();
    javax.swing.JRootPane var74 = var73.getRootPane();
    java.awt.Point var75 = var73.location();
    com.allenstudio.ir.ui.StatusBar var76 = new com.allenstudio.ir.ui.StatusBar();
    javax.swing.JRootPane var77 = var76.getRootPane();
    java.awt.Point var78 = var76.location();
    com.allenstudio.ir.ui.Toolbar var79 = new com.allenstudio.ir.ui.Toolbar();
    boolean var80 = var79.isFloatable();
    java.awt.Component var82 = var79.getComponentAtIndex(10);
    java.lang.Object var83 = var76.getClientProperty((java.lang.Object)10);
    java.awt.Dimension var84 = var76.getMaximumSize();
    var73.setMinimumSize(var84);
    java.awt.Rectangle var86 = var73.getBounds();
    var66.scrollRectToVisible(var86);
    var62.setMaximizedBounds(var86);
    var57.computeVisibleRect(var86);
    var54.paintImmediately(var86);
    com.allenstudio.ir.event.DateChooserListener var91 = var54.getDateChooserListener();
    boolean var92 = var7.equals((java.lang.Object)var54);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var3);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var6);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var7);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var9);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var10);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var11);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var15);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var18);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var21);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var22);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var24);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var27);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var28);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var31 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var32 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var35);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var36 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var40 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var41 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var44);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var45 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var49);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var50);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var51);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var53 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var56 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var58 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var61 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var63);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var64);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var65);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var67 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var70 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var72);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var74);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var75);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var77);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var78);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var80 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var82);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var83);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var84);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var86);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var91);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var92 == false);

  }

  public void test128() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest1.test128");


    com.allenstudio.ir.util.XmlElement var0 = new com.allenstudio.ir.util.XmlElement();
    com.allenstudio.ir.util.XmlElement var2 = var0.addSubElement("hi!");
    var2.notifyObservers((java.lang.Object)(byte)1);
    java.lang.String var5 = var2.getData();
    java.lang.String var8 = var2.getAttribute("", "");
    com.allenstudio.ir.util.XmlElement var9 = new com.allenstudio.ir.util.XmlElement();
    com.allenstudio.ir.util.XmlElement var11 = var9.addSubElement("hi!");
    var11.notifyObservers((java.lang.Object)(byte)1);
    com.allenstudio.ir.util.XmlElement var14 = new com.allenstudio.ir.util.XmlElement();
    com.allenstudio.ir.util.XmlElement var16 = var14.addSubElement("hi!");
    var16.notifyObservers((java.lang.Object)(byte)1);
    com.allenstudio.ir.util.XmlElement var19 = var11.removeElement(var16);
    com.allenstudio.ir.util.XmlElement var20 = var2.removeElement(var16);
    boolean var21 = var2.hasChanged();
    java.util.Hashtable var22 = var2.getAttributes();
    java.util.Enumeration var23 = var22.keys();
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var2);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var5 + "' != '" + ""+ "'", var5.equals(""));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var8 + "' != '" + ""+ "'", var8.equals(""));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var11);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var16);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var19);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var20);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var21 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var22);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var23);

  }

  public void test129() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest1.test129");


    com.allenstudio.ir.ui.NoteListsTabPane var0 = new com.allenstudio.ir.ui.NoteListsTabPane();
    com.allenstudio.ir.ui.Toolbar var1 = new com.allenstudio.ir.ui.Toolbar();
    boolean var2 = var1.isFloatable();
    var1.show();
    java.awt.image.ColorModel var4 = var1.getColorModel();
    boolean var5 = var1.isFocusCycleRoot();
    com.allenstudio.ir.ui.DatePickerPane var6 = new com.allenstudio.ir.ui.DatePickerPane();
    var6.transferFocus();
    com.allenstudio.ir.ui.Toolbar var8 = new com.allenstudio.ir.ui.Toolbar();
    java.awt.image.ColorModel var9 = var8.getColorModel();
    var8.setEnabled(true);
    java.awt.Component var13 = var8.getComponentAtIndex(1);
    boolean var14 = var8.isFloatable();
    var6.setContent((java.awt.Component)var8);
    java.awt.Dimension var16 = var6.size();
    com.allenstudio.ir.ui.Toolbar var17 = new com.allenstudio.ir.ui.Toolbar();
    boolean var18 = var17.isFloatable();
    var17.show();
    boolean var20 = var17.isRequestFocusEnabled();
    java.awt.Dimension var21 = var17.minimumSize();
    var6.setToolBar((javax.swing.JToolBar)var17);
    java.awt.Image var25 = var6.createImage(10, (-1));
    var0.add((java.awt.Component)var1, (java.lang.Object)10);
    var0.setSelectedIndex(1);
    boolean var30 = var0.isEnabledAt(0);
    boolean var31 = var0.isValidateRoot();
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var2 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var4);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var5 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var9);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var13);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var14 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var16);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var18 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var20 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var21);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var25);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var30 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var31 == false);

  }

  public void test130() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest1.test130");


    com.allenstudio.ir.ui.NoteListsTabPane var0 = new com.allenstudio.ir.ui.NoteListsTabPane();
    com.allenstudio.ir.ui.Toolbar var1 = new com.allenstudio.ir.ui.Toolbar();
    boolean var2 = var1.isFloatable();
    var1.show();
    java.awt.image.ColorModel var4 = var1.getColorModel();
    boolean var5 = var1.isFocusCycleRoot();
    com.allenstudio.ir.ui.DatePickerPane var6 = new com.allenstudio.ir.ui.DatePickerPane();
    var6.transferFocus();
    com.allenstudio.ir.ui.Toolbar var8 = new com.allenstudio.ir.ui.Toolbar();
    java.awt.image.ColorModel var9 = var8.getColorModel();
    var8.setEnabled(true);
    java.awt.Component var13 = var8.getComponentAtIndex(1);
    boolean var14 = var8.isFloatable();
    var6.setContent((java.awt.Component)var8);
    java.awt.Dimension var16 = var6.size();
    com.allenstudio.ir.ui.Toolbar var17 = new com.allenstudio.ir.ui.Toolbar();
    boolean var18 = var17.isFloatable();
    var17.show();
    boolean var20 = var17.isRequestFocusEnabled();
    java.awt.Dimension var21 = var17.minimumSize();
    var6.setToolBar((javax.swing.JToolBar)var17);
    java.awt.Image var25 = var6.createImage(10, (-1));
    var0.add((java.awt.Component)var1, (java.lang.Object)10);
    com.allenstudio.ir.ui.NoteListsTabPane var27 = new com.allenstudio.ir.ui.NoteListsTabPane();
    com.allenstudio.ir.ui.Toolbar var28 = new com.allenstudio.ir.ui.Toolbar();
    boolean var29 = var28.isFloatable();
    var28.show();
    java.awt.image.ColorModel var31 = var28.getColorModel();
    boolean var32 = var28.isFocusCycleRoot();
    com.allenstudio.ir.ui.DatePickerPane var33 = new com.allenstudio.ir.ui.DatePickerPane();
    var33.transferFocus();
    com.allenstudio.ir.ui.Toolbar var35 = new com.allenstudio.ir.ui.Toolbar();
    java.awt.image.ColorModel var36 = var35.getColorModel();
    var35.setEnabled(true);
    java.awt.Component var40 = var35.getComponentAtIndex(1);
    boolean var41 = var35.isFloatable();
    var33.setContent((java.awt.Component)var35);
    java.awt.Dimension var43 = var33.size();
    com.allenstudio.ir.ui.Toolbar var44 = new com.allenstudio.ir.ui.Toolbar();
    boolean var45 = var44.isFloatable();
    var44.show();
    boolean var47 = var44.isRequestFocusEnabled();
    java.awt.Dimension var48 = var44.minimumSize();
    var33.setToolBar((javax.swing.JToolBar)var44);
    java.awt.Image var52 = var33.createImage(10, (-1));
    var27.add((java.awt.Component)var28, (java.lang.Object)10);
    com.allenstudio.ir.ui.Toolbar var54 = new com.allenstudio.ir.ui.Toolbar();
    boolean var55 = var54.isFloatable();
    java.awt.Component var57 = var54.getComponentAtIndex(10);
    boolean var58 = var54.isLightweight();
    java.awt.Component var59 = var27.add((java.awt.Component)var54);
    com.allenstudio.ir.ui.NoteListsTabPane var60 = new com.allenstudio.ir.ui.NoteListsTabPane();
    com.allenstudio.ir.ui.Toolbar var61 = new com.allenstudio.ir.ui.Toolbar();
    boolean var62 = var61.isFloatable();
    var61.show();
    java.awt.image.ColorModel var64 = var61.getColorModel();
    boolean var65 = var61.isFocusCycleRoot();
    com.allenstudio.ir.ui.DatePickerPane var66 = new com.allenstudio.ir.ui.DatePickerPane();
    var66.transferFocus();
    com.allenstudio.ir.ui.Toolbar var68 = new com.allenstudio.ir.ui.Toolbar();
    java.awt.image.ColorModel var69 = var68.getColorModel();
    var68.setEnabled(true);
    java.awt.Component var73 = var68.getComponentAtIndex(1);
    boolean var74 = var68.isFloatable();
    var66.setContent((java.awt.Component)var68);
    java.awt.Dimension var76 = var66.size();
    com.allenstudio.ir.ui.Toolbar var77 = new com.allenstudio.ir.ui.Toolbar();
    boolean var78 = var77.isFloatable();
    var77.show();
    boolean var80 = var77.isRequestFocusEnabled();
    java.awt.Dimension var81 = var77.minimumSize();
    var66.setToolBar((javax.swing.JToolBar)var77);
    java.awt.Image var85 = var66.createImage(10, (-1));
    var60.add((java.awt.Component)var61, (java.lang.Object)10);
    var60.setSelectedIndex(1);
    javax.swing.plaf.TabbedPaneUI var89 = var60.getUI();
    javax.swing.SingleSelectionModel var90 = var60.getModel();
    var27.setModel(var90);
    var0.setModel(var90);
    var0.reshape(6, 556, 10, 4);
    java.awt.Font var98 = var0.getFont();
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var2 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var4);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var5 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var9);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var13);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var14 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var16);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var18 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var20 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var21);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var25);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var29 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var31);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var32 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var36);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var40);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var41 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var43);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var45 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var47 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var48);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var52);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var55 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var57);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var58 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var59);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var62 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var64);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var65 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var69);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var73);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var74 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var76);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var78 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var80 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var81);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var85);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var89);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var90);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var98);

  }

  public void test131() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest1.test131");


    com.allenstudio.ir.util.XmlElement var0 = new com.allenstudio.ir.util.XmlElement();
    com.allenstudio.ir.util.XmlElement var2 = var0.addSubElement("hi!");
    com.allenstudio.ir.util.XmlElement var3 = new com.allenstudio.ir.util.XmlElement();
    com.allenstudio.ir.util.XmlElement var5 = var3.addSubElement("hi!");
    var5.notifyObservers((java.lang.Object)(byte)1);
    var0.append(var5);
    com.allenstudio.ir.util.XmlElement var9 = new com.allenstudio.ir.util.XmlElement();
    com.allenstudio.ir.util.XmlElement var11 = var9.addSubElement("hi!");
    java.lang.String var13 = var9.getAttribute("C:\\boot.ini");
    com.allenstudio.ir.util.XmlElement var14 = var5.addSubElement(var9);
    var5.setName("C:\\boot.ini");
    com.allenstudio.ir.util.XmlElement var17 = new com.allenstudio.ir.util.XmlElement();
    com.allenstudio.ir.util.XmlElement var19 = var17.addSubElement("hi!");
    com.allenstudio.ir.util.XmlElement var20 = new com.allenstudio.ir.util.XmlElement();
    com.allenstudio.ir.util.XmlElement var22 = var20.addSubElement("hi!");
    var22.notifyObservers((java.lang.Object)(byte)1);
    var17.append(var22);
    com.allenstudio.ir.util.XmlElement var28 = var17.addSubElement("C:\\boot.ini", "This is a testing description. \u03E3\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\u073F\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD");
    int var29 = var17.countObservers();
    com.allenstudio.ir.util.XmlElement var30 = var5.addSubElement(var17);
    var30.setData("This is a testing description. \u03E3\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\u073F\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD");
    java.lang.Object var33 = var30.clone();
    var30.deleteObservers();
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var2);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var5);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var11);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var13);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var14);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var19);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var22);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var28);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var29 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var30);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var33);

  }

  public void test132() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest1.test132");


    com.allenstudio.ir.ui.Toolbar var0 = new com.allenstudio.ir.ui.Toolbar();
    boolean var1 = var0.isFloatable();
    var0.setAutoscrolls(true);
    javax.accessibility.AccessibleContext var4 = var0.getAccessibleContext();
    java.awt.Dimension var5 = var0.getPreferredSize();
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var1 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var4);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var5);

  }

  public void test133() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest1.test133");


    com.allenstudio.ir.ui.MainFrame var0 = new com.allenstudio.ir.ui.MainFrame();
    java.lang.String var1 = var0.getWarningString();
    java.lang.String var2 = var0.getWarningString();
    java.awt.Container var3 = var0.getFocusCycleRootAncestor();
    com.allenstudio.ir.ui.StatusBar var4 = new com.allenstudio.ir.ui.StatusBar();
    boolean var5 = var4.isBackgroundSet();
    boolean var8 = var4.contains(10, 100);
    var4.revalidate();
    javax.swing.JToolTip var10 = var4.createToolTip();
    com.allenstudio.ir.ui.StatusBar var11 = new com.allenstudio.ir.ui.StatusBar();
    javax.swing.JRootPane var12 = var11.getRootPane();
    java.awt.Point var13 = var11.location();
    com.allenstudio.ir.ui.StatusBar var14 = new com.allenstudio.ir.ui.StatusBar();
    javax.swing.JRootPane var15 = var14.getRootPane();
    java.awt.Point var16 = var14.location();
    com.allenstudio.ir.ui.Toolbar var17 = new com.allenstudio.ir.ui.Toolbar();
    boolean var18 = var17.isFloatable();
    java.awt.Component var20 = var17.getComponentAtIndex(10);
    java.lang.Object var21 = var14.getClientProperty((java.lang.Object)10);
    java.awt.Dimension var22 = var14.getMaximumSize();
    var11.setMinimumSize(var22);
    java.awt.Rectangle var24 = var11.getBounds();
    var4.scrollRectToVisible(var24);
    var0.setMaximizedBounds(var24);
    float var27 = var0.getAlignmentX();
    var0.revalidate();
    int var29 = var0.getState();
    var0.setCursor(4);
    com.allenstudio.ir.ui.MainFrame var32 = new com.allenstudio.ir.ui.MainFrame();
    java.lang.String var33 = var32.getWarningString();
    boolean var34 = var32.isAlwaysOnTopSupported();
    com.allenstudio.ir.ui.StatusBar var35 = new com.allenstudio.ir.ui.StatusBar();
    javax.swing.JRootPane var36 = var35.getRootPane();
    java.awt.Point var37 = var35.location();
    com.allenstudio.ir.ui.StatusBar var38 = new com.allenstudio.ir.ui.StatusBar();
    javax.swing.JRootPane var39 = var38.getRootPane();
    java.awt.Point var40 = var38.location();
    com.allenstudio.ir.ui.Toolbar var41 = new com.allenstudio.ir.ui.Toolbar();
    boolean var42 = var41.isFloatable();
    java.awt.Component var44 = var41.getComponentAtIndex(10);
    java.lang.Object var45 = var38.getClientProperty((java.lang.Object)10);
    java.awt.Dimension var46 = var38.getMaximumSize();
    var35.setMinimumSize(var46);
    java.awt.Rectangle var48 = var35.getBounds();
    java.awt.Rectangle var49 = var32.getBounds(var48);
    var0.setBounds(var48);
    com.allenstudio.ir.ui.Toolbar var51 = new com.allenstudio.ir.ui.Toolbar();
    java.awt.image.ColorModel var52 = var51.getColorModel();
    java.awt.im.InputContext var53 = var51.getInputContext();
    java.awt.Component var55 = var51.getComponentAtIndex(0);
    boolean var56 = var51.isManagingFocus();
    var0.setGlassPane((java.awt.Component)var51);
    boolean var58 = var0.isMinimumSizeSet();
    com.allenstudio.ir.ui.MainFrame var59 = new com.allenstudio.ir.ui.MainFrame();
    boolean var60 = var59.isShowing();
    int var61 = var59.countComponents();
    var59.setAutoRequestFocus(false);
    javax.swing.JMenuBar var64 = var59.getJMenuBar();
    boolean var65 = var64.isBorderPainted();
    var0.setJMenuBar(var64);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var1);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var2);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var3);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var5 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var8 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var10);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var12);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var13);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var15);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var16);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var18 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var20);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var21);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var22);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var24);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var27 == 0.5f);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var29 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var33);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var34 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var36);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var37);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var39);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var40);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var42 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var44);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var45);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var46);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var48);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var49);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var52);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var53);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var55);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var56 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var58 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var60 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var61 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var64);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var65 == true);

  }

  public void test134() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest1.test134");


    com.allenstudio.ir.ui.DefaultNoteListModel var0 = new com.allenstudio.ir.ui.DefaultNoteListModel();
    com.allenstudio.ir.core.plugins.CommonNote var1 = new com.allenstudio.ir.core.plugins.CommonNote();
    var1.resize(0, 1);
    java.lang.String var5 = var1.getOtherInfo();
    java.awt.Graphics var6 = var1.getGraphics();
    boolean var7 = var1.requestFocusInWindow();
    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      var0.setElementAt((com.allenstudio.ir.core.plugins.AbstractNote)var1, 32);
      fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException");
    } catch (java.lang.ArrayIndexOutOfBoundsException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var5);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var6);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var7 == false);

  }

  public void test135() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest1.test135");


    com.allenstudio.ir.ui.MainFrame var0 = new com.allenstudio.ir.ui.MainFrame();
    boolean var1 = var0.isShowing();
    int var2 = var0.countComponents();
    var0.setAutoRequestFocus(false);
    javax.swing.JMenuBar var5 = var0.getJMenuBar();
    boolean var6 = var5.isBorderPainted();
    var5.menuSelectionChanged(true);
    com.allenstudio.ir.ui.MainFrame var9 = new com.allenstudio.ir.ui.MainFrame();
    boolean var10 = var9.isShowing();
    int var11 = var9.countComponents();
    var9.setAutoRequestFocus(false);
    javax.swing.JMenuBar var14 = var9.getJMenuBar();
    boolean var15 = var14.isBorderPainted();
    var14.updateUI();
    com.allenstudio.ir.ui.DatePickerPane var17 = new com.allenstudio.ir.ui.DatePickerPane();
    var17.transferFocus();
    java.awt.Dimension var19 = var17.getMinimumSize();
    java.awt.Dimension var20 = var14.getSize(var19);
    javax.swing.plaf.MenuBarUI var21 = var14.getUI();
    var5.setUI(var21);
    var5.setAlignmentY(1.0f);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var1 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var2 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var5);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var6 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var10 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var11 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var14);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var15 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var19);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var20);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var21);

  }

  public void test136() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest1.test136");


    com.allenstudio.ir.ui.StatusBar var0 = new com.allenstudio.ir.ui.StatusBar();
    int var1 = var0.getY();
    javax.swing.JToolTip var2 = var0.createToolTip();
    com.allenstudio.ir.ui.Toolbar var3 = new com.allenstudio.ir.ui.Toolbar();
    boolean var4 = var3.isFloatable();
    var3.setAutoscrolls(true);
    com.allenstudio.ir.ui.DatePickerPane var7 = new com.allenstudio.ir.ui.DatePickerPane();
    var7.transferFocus();
    com.allenstudio.ir.ui.Toolbar var9 = new com.allenstudio.ir.ui.Toolbar();
    java.awt.image.ColorModel var10 = var9.getColorModel();
    var9.setEnabled(true);
    java.awt.Component var14 = var9.getComponentAtIndex(1);
    boolean var15 = var9.isFloatable();
    var7.setContent((java.awt.Component)var9);
    java.awt.Font var17 = var7.getFont();
    java.awt.FontMetrics var18 = var3.getFontMetrics(var17);
    var0.setFont(var17);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var1 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var2);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var4 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var10);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var14);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var15 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var17);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var18);

  }

  public void test137() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest1.test137");


    com.allenstudio.ir.ui.StatusBar var0 = new com.allenstudio.ir.ui.StatusBar();
    boolean var1 = var0.isBackgroundSet();
    boolean var4 = var0.contains(10, 100);
    var0.revalidate();
    javax.swing.JToolTip var6 = var0.createToolTip();
    com.allenstudio.ir.ui.StatusBar var7 = new com.allenstudio.ir.ui.StatusBar();
    javax.swing.JRootPane var8 = var7.getRootPane();
    java.awt.Point var9 = var7.location();
    com.allenstudio.ir.ui.StatusBar var10 = new com.allenstudio.ir.ui.StatusBar();
    javax.swing.JRootPane var11 = var10.getRootPane();
    java.awt.Point var12 = var10.location();
    com.allenstudio.ir.ui.Toolbar var13 = new com.allenstudio.ir.ui.Toolbar();
    boolean var14 = var13.isFloatable();
    java.awt.Component var16 = var13.getComponentAtIndex(10);
    java.lang.Object var17 = var10.getClientProperty((java.lang.Object)10);
    java.awt.Dimension var18 = var10.getMaximumSize();
    var7.setMinimumSize(var18);
    java.awt.Rectangle var20 = var7.getBounds();
    var0.scrollRectToVisible(var20);
    boolean var22 = var0.isOpaque();
    var0.displayTooltip("");
    java.awt.image.ColorModel var25 = var0.getColorModel();
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var1 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var4 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var6);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var8);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var9);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var11);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var12);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var14 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var16);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var17);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var18);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var20);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var22 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var25);

  }

  public void test138() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest1.test138");


    com.allenstudio.ir.ui.MainFrame var0 = new com.allenstudio.ir.ui.MainFrame();
    java.lang.String var1 = var0.getWarningString();
    java.lang.String var2 = var0.getWarningString();
    java.awt.Container var3 = var0.getFocusCycleRootAncestor();
    com.allenstudio.ir.ui.StatusBar var4 = new com.allenstudio.ir.ui.StatusBar();
    boolean var5 = var4.isBackgroundSet();
    boolean var8 = var4.contains(10, 100);
    var4.revalidate();
    javax.swing.JToolTip var10 = var4.createToolTip();
    com.allenstudio.ir.ui.StatusBar var11 = new com.allenstudio.ir.ui.StatusBar();
    javax.swing.JRootPane var12 = var11.getRootPane();
    java.awt.Point var13 = var11.location();
    com.allenstudio.ir.ui.StatusBar var14 = new com.allenstudio.ir.ui.StatusBar();
    javax.swing.JRootPane var15 = var14.getRootPane();
    java.awt.Point var16 = var14.location();
    com.allenstudio.ir.ui.Toolbar var17 = new com.allenstudio.ir.ui.Toolbar();
    boolean var18 = var17.isFloatable();
    java.awt.Component var20 = var17.getComponentAtIndex(10);
    java.lang.Object var21 = var14.getClientProperty((java.lang.Object)10);
    java.awt.Dimension var22 = var14.getMaximumSize();
    var11.setMinimumSize(var22);
    java.awt.Rectangle var24 = var11.getBounds();
    var4.scrollRectToVisible(var24);
    var0.setMaximizedBounds(var24);
    float var27 = var0.getAlignmentX();
    var0.revalidate();
    int var29 = var0.getState();
    var0.setCursor(4);
    com.allenstudio.ir.ui.MainFrame var32 = new com.allenstudio.ir.ui.MainFrame();
    java.lang.String var33 = var32.getWarningString();
    boolean var34 = var32.isAlwaysOnTopSupported();
    com.allenstudio.ir.ui.StatusBar var35 = new com.allenstudio.ir.ui.StatusBar();
    javax.swing.JRootPane var36 = var35.getRootPane();
    java.awt.Point var37 = var35.location();
    com.allenstudio.ir.ui.StatusBar var38 = new com.allenstudio.ir.ui.StatusBar();
    javax.swing.JRootPane var39 = var38.getRootPane();
    java.awt.Point var40 = var38.location();
    com.allenstudio.ir.ui.Toolbar var41 = new com.allenstudio.ir.ui.Toolbar();
    boolean var42 = var41.isFloatable();
    java.awt.Component var44 = var41.getComponentAtIndex(10);
    java.lang.Object var45 = var38.getClientProperty((java.lang.Object)10);
    java.awt.Dimension var46 = var38.getMaximumSize();
    var35.setMinimumSize(var46);
    java.awt.Rectangle var48 = var35.getBounds();
    java.awt.Rectangle var49 = var32.getBounds(var48);
    var0.setBounds(var48);
    com.allenstudio.ir.ui.Toolbar var51 = new com.allenstudio.ir.ui.Toolbar();
    java.awt.image.ColorModel var52 = var51.getColorModel();
    java.awt.im.InputContext var53 = var51.getInputContext();
    java.awt.Component var55 = var51.getComponentAtIndex(0);
    boolean var56 = var51.isManagingFocus();
    var0.setGlassPane((java.awt.Component)var51);
    float var58 = var0.getOpacity();
    com.allenstudio.ir.ui.MainFrame var59 = new com.allenstudio.ir.ui.MainFrame();
    boolean var60 = var59.isShowing();
    int var61 = var59.countComponents();
    var59.setAutoRequestFocus(false);
    javax.swing.JMenuBar var64 = var59.getJMenuBar();
    boolean var65 = var64.isBorderPainted();
    com.allenstudio.ir.ui.StatusBar var66 = new com.allenstudio.ir.ui.StatusBar();
    int var67 = var66.getY();
    boolean var68 = var66.isLightweight();
    java.awt.Dimension var69 = var66.getMaximumSize();
    java.awt.event.KeyListener[] var70 = var66.getKeyListeners();
    boolean var71 = var66.getInheritsPopupMenu();
    var66.firePropertyChange("This is a testing description. \u03E3\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\u073F\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD", 100.0d, 100.0d);
    var66.repaint(100L, 100, 1, 100, (-1));
    boolean var82 = var66.isOpaque();
    var64.setSelected((java.awt.Component)var66);
    var0.setJMenuBar(var64);
    var0.repaint(100L, (-1), 30, 5, 32);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var1);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var2);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var3);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var5 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var8 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var10);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var12);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var13);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var15);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var16);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var18 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var20);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var21);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var22);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var24);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var27 == 0.5f);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var29 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var33);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var34 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var36);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var37);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var39);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var40);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var42 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var44);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var45);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var46);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var48);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var49);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var52);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var53);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var55);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var56 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var58 == 1.0f);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var60 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var61 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var64);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var65 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var67 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var68 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var69);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var70);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var71 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var82 == false);

  }

  public void test139() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest1.test139");


    com.allenstudio.ir.ui.NoteListsTabPane var0 = new com.allenstudio.ir.ui.NoteListsTabPane();
    com.allenstudio.ir.ui.Toolbar var1 = new com.allenstudio.ir.ui.Toolbar();
    boolean var2 = var1.isFloatable();
    var1.show();
    java.awt.image.ColorModel var4 = var1.getColorModel();
    boolean var5 = var1.isFocusCycleRoot();
    com.allenstudio.ir.ui.DatePickerPane var6 = new com.allenstudio.ir.ui.DatePickerPane();
    var6.transferFocus();
    com.allenstudio.ir.ui.Toolbar var8 = new com.allenstudio.ir.ui.Toolbar();
    java.awt.image.ColorModel var9 = var8.getColorModel();
    var8.setEnabled(true);
    java.awt.Component var13 = var8.getComponentAtIndex(1);
    boolean var14 = var8.isFloatable();
    var6.setContent((java.awt.Component)var8);
    java.awt.Dimension var16 = var6.size();
    com.allenstudio.ir.ui.Toolbar var17 = new com.allenstudio.ir.ui.Toolbar();
    boolean var18 = var17.isFloatable();
    var17.show();
    boolean var20 = var17.isRequestFocusEnabled();
    java.awt.Dimension var21 = var17.minimumSize();
    var6.setToolBar((javax.swing.JToolBar)var17);
    java.awt.Image var25 = var6.createImage(10, (-1));
    var0.add((java.awt.Component)var1, (java.lang.Object)10);
    com.allenstudio.ir.ui.Toolbar var27 = new com.allenstudio.ir.ui.Toolbar();
    boolean var28 = var27.isFloatable();
    java.awt.Component var30 = var27.getComponentAtIndex(10);
    boolean var31 = var27.isLightweight();
    java.awt.Component var32 = var0.add((java.awt.Component)var27);
    com.allenstudio.ir.ui.NoteListsTabPane var33 = new com.allenstudio.ir.ui.NoteListsTabPane();
    com.allenstudio.ir.ui.Toolbar var34 = new com.allenstudio.ir.ui.Toolbar();
    boolean var35 = var34.isFloatable();
    var34.show();
    java.awt.image.ColorModel var37 = var34.getColorModel();
    boolean var38 = var34.isFocusCycleRoot();
    com.allenstudio.ir.ui.DatePickerPane var39 = new com.allenstudio.ir.ui.DatePickerPane();
    var39.transferFocus();
    com.allenstudio.ir.ui.Toolbar var41 = new com.allenstudio.ir.ui.Toolbar();
    java.awt.image.ColorModel var42 = var41.getColorModel();
    var41.setEnabled(true);
    java.awt.Component var46 = var41.getComponentAtIndex(1);
    boolean var47 = var41.isFloatable();
    var39.setContent((java.awt.Component)var41);
    java.awt.Dimension var49 = var39.size();
    com.allenstudio.ir.ui.Toolbar var50 = new com.allenstudio.ir.ui.Toolbar();
    boolean var51 = var50.isFloatable();
    var50.show();
    boolean var53 = var50.isRequestFocusEnabled();
    java.awt.Dimension var54 = var50.minimumSize();
    var39.setToolBar((javax.swing.JToolBar)var50);
    java.awt.Image var58 = var39.createImage(10, (-1));
    var33.add((java.awt.Component)var34, (java.lang.Object)10);
    var33.setSelectedIndex(1);
    javax.swing.plaf.TabbedPaneUI var62 = var33.getUI();
    javax.swing.SingleSelectionModel var63 = var33.getModel();
    var0.setModel(var63);
    javax.swing.event.ChangeListener[] var65 = var0.getChangeListeners();
    java.awt.Component var67 = var0.getTabComponentAt(4);
    java.awt.Insets var68 = var0.getInsets();
    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      var0.setDisplayedMnemonicIndexAt(31, (-1));
      fail("Expected exception of type java.lang.IndexOutOfBoundsException");
    } catch (java.lang.IndexOutOfBoundsException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var2 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var4);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var5 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var9);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var13);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var14 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var16);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var18 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var20 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var21);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var25);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var28 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var30);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var31 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var32);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var35 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var37);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var38 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var42);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var46);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var47 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var49);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var51 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var53 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var54);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var58);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var62);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var63);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var65);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var67);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var68);

  }

  public void test140() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest1.test140");


    com.allenstudio.ir.ui.MainFrame var0 = new com.allenstudio.ir.ui.MainFrame();
    java.lang.String var1 = var0.getWarningString();
    java.awt.Rectangle var2 = var0.getMaximizedBounds();
    java.awt.MenuBar var3 = var0.getMenuBar();
    var0.disable();
    com.allenstudio.ir.ui.MainFrame var5 = new com.allenstudio.ir.ui.MainFrame();
    java.lang.String var6 = var5.getWarningString();
    java.awt.Rectangle var7 = var5.getMaximizedBounds();
    java.awt.MenuBar var8 = var5.getMenuBar();
    com.allenstudio.ir.ui.NoteListsTabPane var9 = new com.allenstudio.ir.ui.NoteListsTabPane();
    var5.widgetChanged((com.allenstudio.ir.core.InspirentoWidget)var9);
    var5.dispose();
    var5.setLocation(0, 0);
    var0.setLocationRelativeTo((java.awt.Component)var5);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var1);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var2);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var3);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var6);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var7);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var8);

  }

  public void test141() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest1.test141");


    com.allenstudio.ir.ui.StatusBar var0 = new com.allenstudio.ir.ui.StatusBar();
    var0.enable();
    boolean var2 = var0.isFocusOwner();
    java.lang.String var3 = var0.getToolTipText();
    com.allenstudio.ir.ui.Toolbar var4 = new com.allenstudio.ir.ui.Toolbar();
    boolean var5 = var4.isFloatable();
    var4.firePropertyChange("Date Picker", (byte)0, (byte)(-1));
    java.awt.Component var10 = var0.add((java.awt.Component)var4);
    com.allenstudio.ir.ui.Toolbar var11 = new com.allenstudio.ir.ui.Toolbar();
    java.awt.image.ColorModel var12 = var11.getColorModel();
    java.awt.Insets var13 = var11.insets();
    var4.setMargin(var13);
    boolean var15 = var4.requestFocusInWindow();
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var2 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var3);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var5 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var10);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var12);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var13);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var15 == false);

  }

  public void test142() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest1.test142");


    com.allenstudio.ir.ui.DatePickerPane var0 = new com.allenstudio.ir.ui.DatePickerPane();
    javax.swing.KeyStroke[] var1 = var0.getRegisteredKeyStrokes();
    boolean var2 = var0.isOptimizedDrawingEnabled();
    com.allenstudio.ir.ui.DatePickerPane var3 = new com.allenstudio.ir.ui.DatePickerPane();
    java.lang.String var4 = var3.getTitle();
    java.awt.dnd.DropTarget var5 = var3.getDropTarget();
    var0.setComponentZOrder((java.awt.Component)var3, 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var2 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var4 + "' != '" + "Date Picker"+ "'", var4.equals("Date Picker"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var5);

  }

  public void test143() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest1.test143");


    com.allenstudio.ir.ui.NoteListsTabPane var0 = new com.allenstudio.ir.ui.NoteListsTabPane();
    com.allenstudio.ir.ui.Toolbar var1 = new com.allenstudio.ir.ui.Toolbar();
    boolean var2 = var1.isFloatable();
    var1.show();
    java.awt.image.ColorModel var4 = var1.getColorModel();
    boolean var5 = var1.isFocusCycleRoot();
    com.allenstudio.ir.ui.DatePickerPane var6 = new com.allenstudio.ir.ui.DatePickerPane();
    var6.transferFocus();
    com.allenstudio.ir.ui.Toolbar var8 = new com.allenstudio.ir.ui.Toolbar();
    java.awt.image.ColorModel var9 = var8.getColorModel();
    var8.setEnabled(true);
    java.awt.Component var13 = var8.getComponentAtIndex(1);
    boolean var14 = var8.isFloatable();
    var6.setContent((java.awt.Component)var8);
    java.awt.Dimension var16 = var6.size();
    com.allenstudio.ir.ui.Toolbar var17 = new com.allenstudio.ir.ui.Toolbar();
    boolean var18 = var17.isFloatable();
    var17.show();
    boolean var20 = var17.isRequestFocusEnabled();
    java.awt.Dimension var21 = var17.minimumSize();
    var6.setToolBar((javax.swing.JToolBar)var17);
    java.awt.Image var25 = var6.createImage(10, (-1));
    var0.add((java.awt.Component)var1, (java.lang.Object)10);
    com.allenstudio.ir.ui.DatePickerPane var27 = new com.allenstudio.ir.ui.DatePickerPane();
    java.lang.String var28 = var27.getTitle();
    java.awt.dnd.DropTarget var29 = var27.getDropTarget();
    com.allenstudio.ir.util.XmlElement var30 = new com.allenstudio.ir.util.XmlElement();
    boolean var31 = var30.hasChanged();
    var0.add((java.awt.Component)var27, (java.lang.Object)var31, (-1));
    int var34 = var0.getTabPlacement();
    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      var0.setTabLayoutPolicy(100);
      fail("Expected exception of type java.lang.IllegalArgumentException");
    } catch (java.lang.IllegalArgumentException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var2 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var4);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var5 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var9);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var13);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var14 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var16);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var18 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var20 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var21);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var25);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var28 + "' != '" + "Date Picker"+ "'", var28.equals("Date Picker"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var29);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var31 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var34 == 1);

  }

  public void test144() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest1.test144");


    com.allenstudio.ir.util.XmlIO var0 = new com.allenstudio.ir.util.XmlIO();
    var0.unparsedEntityDecl("", "hi!", "", "");
    var0.errorDialog("Title");
    com.allenstudio.ir.util.XmlElement var8 = var0.getRoot();
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var8);

  }

  public void test145() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest1.test145");


    com.allenstudio.ir.ui.NoteListsTabPane var0 = new com.allenstudio.ir.ui.NoteListsTabPane();
    com.allenstudio.ir.ui.Toolbar var1 = new com.allenstudio.ir.ui.Toolbar();
    boolean var2 = var1.isFloatable();
    var1.show();
    java.awt.image.ColorModel var4 = var1.getColorModel();
    boolean var5 = var1.isFocusCycleRoot();
    com.allenstudio.ir.ui.DatePickerPane var6 = new com.allenstudio.ir.ui.DatePickerPane();
    var6.transferFocus();
    com.allenstudio.ir.ui.Toolbar var8 = new com.allenstudio.ir.ui.Toolbar();
    java.awt.image.ColorModel var9 = var8.getColorModel();
    var8.setEnabled(true);
    java.awt.Component var13 = var8.getComponentAtIndex(1);
    boolean var14 = var8.isFloatable();
    var6.setContent((java.awt.Component)var8);
    java.awt.Dimension var16 = var6.size();
    com.allenstudio.ir.ui.Toolbar var17 = new com.allenstudio.ir.ui.Toolbar();
    boolean var18 = var17.isFloatable();
    var17.show();
    boolean var20 = var17.isRequestFocusEnabled();
    java.awt.Dimension var21 = var17.minimumSize();
    var6.setToolBar((javax.swing.JToolBar)var17);
    java.awt.Image var25 = var6.createImage(10, (-1));
    var0.add((java.awt.Component)var1, (java.lang.Object)10);
    com.allenstudio.ir.ui.Toolbar var27 = new com.allenstudio.ir.ui.Toolbar();
    boolean var28 = var27.isFloatable();
    java.awt.Component var30 = var27.getComponentAtIndex(10);
    boolean var31 = var27.isLightweight();
    java.awt.Component var32 = var0.add((java.awt.Component)var27);
    int var33 = var0.getTabLayoutPolicy();
    var0.setEnabled(true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var2 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var4);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var5 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var9);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var13);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var14 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var16);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var18 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var20 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var21);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var25);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var28 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var30);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var31 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var32);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var33 == 0);

  }

  public void test146() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest1.test146");


    com.allenstudio.ir.ui.MainFrame var0 = new com.allenstudio.ir.ui.MainFrame();
    boolean var1 = var0.isShowing();
    int var2 = var0.countComponents();
    var0.setAutoRequestFocus(false);
    javax.swing.JMenuBar var5 = var0.getJMenuBar();
    boolean var6 = var5.isBorderPainted();
    var5.menuSelectionChanged(true);
    com.allenstudio.ir.ui.MainFrame var9 = new com.allenstudio.ir.ui.MainFrame();
    boolean var10 = var9.isShowing();
    int var11 = var9.countComponents();
    var9.setAutoRequestFocus(false);
    javax.swing.JMenuBar var14 = var9.getJMenuBar();
    boolean var15 = var14.isBorderPainted();
    var14.updateUI();
    com.allenstudio.ir.ui.DatePickerPane var17 = new com.allenstudio.ir.ui.DatePickerPane();
    var17.transferFocus();
    java.awt.Dimension var19 = var17.getMinimumSize();
    java.awt.Dimension var20 = var14.getSize(var19);
    javax.swing.plaf.MenuBarUI var21 = var14.getUI();
    var5.setUI(var21);
    boolean var23 = var5.isBorderPainted();
    var5.invalidate();
    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      boolean var26 = var5.areFocusTraversalKeysSet(30);
      fail("Expected exception of type java.lang.IllegalArgumentException");
    } catch (java.lang.IllegalArgumentException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var1 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var2 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var5);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var6 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var10 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var11 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var14);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var15 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var19);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var20);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var21);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var23 == true);

  }

  public void test147() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest1.test147");


    com.allenstudio.ir.ui.DefaultNoteListModel var0 = new com.allenstudio.ir.ui.DefaultNoteListModel();
    com.allenstudio.ir.ui.StatusBar var1 = new com.allenstudio.ir.ui.StatusBar();
    int var2 = var1.getY();
    javax.swing.JToolTip var3 = var1.createToolTip();
    float var4 = var3.getAlignmentY();
    java.awt.Color var5 = var3.getForeground();
    java.awt.event.MouseMotionListener[] var6 = var3.getMouseMotionListeners();
    com.allenstudio.ir.core.plugins.CommonNote var7 = new com.allenstudio.ir.core.plugins.CommonNote();
    java.lang.String var8 = var7.getFeature();
    com.allenstudio.ir.ui.StatusBar var9 = new com.allenstudio.ir.ui.StatusBar();
    var9.enable();
    boolean var11 = var9.isFocusOwner();
    var9.firePropertyChange("hi!", 10L, 0L);
    var9.layout();
    var9.removeAll();
    com.allenstudio.ir.ui.StatusBar var18 = new com.allenstudio.ir.ui.StatusBar();
    javax.swing.JRootPane var19 = var18.getRootPane();
    java.awt.Point var20 = var18.location();
    java.awt.Component var21 = var9.getComponentAt(var20);
    java.awt.Point var22 = var7.getLocation(var20);
    var7.setOtherInfo("");
    var7.setFeature("Title");
    var7.removeNotify();
    com.allenstudio.ir.util.XmlElement var28 = new com.allenstudio.ir.util.XmlElement();
    com.allenstudio.ir.util.XmlElement var30 = var28.addSubElement("hi!");
    com.allenstudio.ir.util.XmlElement var31 = new com.allenstudio.ir.util.XmlElement();
    com.allenstudio.ir.util.XmlElement var33 = var31.addSubElement("hi!");
    var33.notifyObservers((java.lang.Object)(byte)1);
    var28.append(var33);
    com.allenstudio.ir.util.XmlElement var37 = new com.allenstudio.ir.util.XmlElement();
    com.allenstudio.ir.util.XmlElement var39 = var37.addSubElement("hi!");
    java.lang.String var41 = var37.getAttribute("C:\\boot.ini");
    com.allenstudio.ir.util.XmlElement var42 = var33.addSubElement(var37);
    java.lang.String var45 = var33.getAttribute("Title", "ToolBarUI");
    var3.putClientProperty((java.lang.Object)var7, (java.lang.Object)"Title");
    var7.doLayout();
    java.lang.String var48 = var7.getDescription();
    int var50 = var0.indexOf((com.allenstudio.ir.core.plugins.AbstractNote)var7, 556);
    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      com.allenstudio.ir.core.plugins.AbstractNote var52 = var0.remove((-1));
      fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException");
    } catch (java.lang.ArrayIndexOutOfBoundsException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var2 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var3);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var4 == 0.5f);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var5);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var6);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var8 + "' != '" + "C:\\boot.ini"+ "'", var8.equals("C:\\boot.ini"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var11 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var19);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var20);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var21);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var22);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var30);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var33);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var39);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var41);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var42);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var45 + "' != '" + "ToolBarUI"+ "'", var45.equals("ToolBarUI"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var48 + "' != '" + "This is a testing description. \u03E3\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\u073F\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD"+ "'", var48.equals("This is a testing description. \u03E3\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\u073F\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var50 == (-1));

  }

  public void test148() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest1.test148");


    com.allenstudio.ir.ui.MainFrame var0 = new com.allenstudio.ir.ui.MainFrame();
    boolean var1 = var0.isShowing();
    java.lang.String var2 = var0.getWarningString();
    var0.setAutoRequestFocus(true);
    java.awt.image.ColorModel var5 = var0.getColorModel();
    var0.setLocation(31, 100);
    java.awt.Component var9 = var0.getMostRecentFocusOwner();
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var1 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var2);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var5);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var9);

  }

  public void test149() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest1.test149");


    com.allenstudio.ir.ui.MainFrame var0 = new com.allenstudio.ir.ui.MainFrame();
    java.lang.String var1 = var0.getWarningString();
    java.awt.Rectangle var2 = var0.getMaximizedBounds();
    boolean var3 = var0.isLocationByPlatform();
    java.awt.Toolkit var4 = var0.getToolkit();
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var1);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var2);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var3 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var4);

  }

  public void test150() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest1.test150");


    com.allenstudio.ir.ui.NoteListsTabPane var0 = new com.allenstudio.ir.ui.NoteListsTabPane();
    com.allenstudio.ir.ui.Toolbar var1 = new com.allenstudio.ir.ui.Toolbar();
    boolean var2 = var1.isFloatable();
    var1.show();
    java.awt.image.ColorModel var4 = var1.getColorModel();
    boolean var5 = var1.isFocusCycleRoot();
    com.allenstudio.ir.ui.DatePickerPane var6 = new com.allenstudio.ir.ui.DatePickerPane();
    var6.transferFocus();
    com.allenstudio.ir.ui.Toolbar var8 = new com.allenstudio.ir.ui.Toolbar();
    java.awt.image.ColorModel var9 = var8.getColorModel();
    var8.setEnabled(true);
    java.awt.Component var13 = var8.getComponentAtIndex(1);
    boolean var14 = var8.isFloatable();
    var6.setContent((java.awt.Component)var8);
    java.awt.Dimension var16 = var6.size();
    com.allenstudio.ir.ui.Toolbar var17 = new com.allenstudio.ir.ui.Toolbar();
    boolean var18 = var17.isFloatable();
    var17.show();
    boolean var20 = var17.isRequestFocusEnabled();
    java.awt.Dimension var21 = var17.minimumSize();
    var6.setToolBar((javax.swing.JToolBar)var17);
    java.awt.Image var25 = var6.createImage(10, (-1));
    var0.add((java.awt.Component)var1, (java.lang.Object)10);
    var0.setSelectedIndex(1);
    javax.swing.plaf.TabbedPaneUI var29 = var0.getUI();
    javax.swing.SingleSelectionModel var30 = var0.getModel();
    int var31 = var0.getTabPlacement();
    var0.setLocation(4, 0);
    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      java.awt.Component var36 = var0.getTabComponentAt(10);
      fail("Expected exception of type java.lang.IndexOutOfBoundsException");
    } catch (java.lang.IndexOutOfBoundsException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var2 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var4);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var5 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var9);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var13);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var14 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var16);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var18 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var20 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var21);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var25);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var29);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var30);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var31 == 1);

  }

  public void test151() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest1.test151");


    com.allenstudio.ir.util.XmlElement var0 = new com.allenstudio.ir.util.XmlElement();
    com.allenstudio.ir.util.XmlElement var2 = var0.addSubElement("hi!");
    java.lang.String var4 = var0.getAttribute("C:\\boot.ini");
    com.allenstudio.ir.util.XmlElement var5 = new com.allenstudio.ir.util.XmlElement();
    com.allenstudio.ir.util.XmlElement var7 = var5.addSubElement("hi!");
    var7.notifyObservers((java.lang.Object)(byte)1);
    com.allenstudio.ir.util.XmlElement var10 = new com.allenstudio.ir.util.XmlElement();
    com.allenstudio.ir.util.XmlElement var12 = var10.addSubElement("hi!");
    var12.notifyObservers((java.lang.Object)(byte)1);
    com.allenstudio.ir.util.XmlElement var15 = var7.removeElement(var12);
    com.allenstudio.ir.util.XmlElement var16 = var12.getParent();
    var0.append(var12);
    com.allenstudio.ir.util.XmlElement var18 = new com.allenstudio.ir.util.XmlElement();
    com.allenstudio.ir.util.XmlElement var20 = var18.addSubElement("hi!");
    com.allenstudio.ir.util.XmlIO var21 = new com.allenstudio.ir.util.XmlIO(var20);
    com.allenstudio.ir.util.XmlElement var22 = new com.allenstudio.ir.util.XmlElement();
    com.allenstudio.ir.util.XmlElement var24 = var22.addSubElement("hi!");
    java.lang.String var26 = var22.getAttribute("C:\\boot.ini");
    java.util.Hashtable var27 = var22.getAttributes();
    var20.append(var22);
    com.allenstudio.ir.util.XmlElement var29 = var12.removeElement(var20);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var2);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var4);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var7);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var12);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var15);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var16);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var20);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var24);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var26);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var27);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var29);

  }

  public void test152() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest1.test152");


    com.allenstudio.ir.ui.StatusBar var0 = new com.allenstudio.ir.ui.StatusBar();
    int var1 = var0.getY();
    boolean var2 = var0.isLightweight();
    java.awt.Dimension var3 = var0.getMaximumSize();
    java.awt.event.KeyListener[] var4 = var0.getKeyListeners();
    boolean var5 = var0.getInheritsPopupMenu();
    var0.firePropertyChange("This is a testing description. \u03E3\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\u073F\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD", 100.0d, 100.0d);
    var0.repaint(100L, 100, 1, 100, (-1));
    java.awt.im.InputMethodRequests var16 = var0.getInputMethodRequests();
    boolean var17 = var0.isFocusOwner();
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var1 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var2 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var3);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var4);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var5 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var16);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var17 == false);

  }

  public void test153() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest1.test153");


    com.allenstudio.ir.ui.DatePickerPane var0 = new com.allenstudio.ir.ui.DatePickerPane();
    var0.transferFocus();
    com.allenstudio.ir.ui.Toolbar var2 = new com.allenstudio.ir.ui.Toolbar();
    java.awt.image.ColorModel var3 = var2.getColorModel();
    var2.setEnabled(true);
    java.awt.Component var7 = var2.getComponentAtIndex(1);
    boolean var8 = var2.isFloatable();
    var0.setContent((java.awt.Component)var2);
    java.awt.Font var10 = var0.getFont();
    var0.disable();
    javax.swing.Icon var12 = var0.getFrameIcon();
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var3);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var7);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var8 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var10);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var12);

  }

  public void test154() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest1.test154");


    com.allenstudio.ir.ui.MainFrame var0 = new com.allenstudio.ir.ui.MainFrame();
    java.lang.String var1 = var0.getWarningString();
    boolean var2 = var0.isAlwaysOnTopSupported();
    java.lang.String var3 = var0.getTitle();
    com.allenstudio.ir.ui.MainFrame var4 = new com.allenstudio.ir.ui.MainFrame();
    java.lang.String var5 = var4.getWarningString();
    java.awt.Rectangle var6 = var4.getMaximizedBounds();
    java.awt.MenuBar var7 = var4.getMenuBar();
    com.allenstudio.ir.core.plugins.CommonNote var8 = new com.allenstudio.ir.core.plugins.CommonNote();
    var8.resize(0, 1);
    com.allenstudio.ir.ui.NoteListCell var12 = new com.allenstudio.ir.ui.NoteListCell((com.allenstudio.ir.core.plugins.AbstractNote)var8);
    com.allenstudio.ir.ui.StatusBar var13 = new com.allenstudio.ir.ui.StatusBar();
    boolean var14 = var13.isBackgroundSet();
    boolean var17 = var13.contains(10, 100);
    var13.revalidate();
    javax.swing.JToolTip var19 = var13.createToolTip();
    com.allenstudio.ir.ui.StatusBar var20 = new com.allenstudio.ir.ui.StatusBar();
    javax.swing.JRootPane var21 = var20.getRootPane();
    java.awt.Point var22 = var20.location();
    com.allenstudio.ir.ui.StatusBar var23 = new com.allenstudio.ir.ui.StatusBar();
    javax.swing.JRootPane var24 = var23.getRootPane();
    java.awt.Point var25 = var23.location();
    com.allenstudio.ir.ui.Toolbar var26 = new com.allenstudio.ir.ui.Toolbar();
    boolean var27 = var26.isFloatable();
    java.awt.Component var29 = var26.getComponentAtIndex(10);
    java.lang.Object var30 = var23.getClientProperty((java.lang.Object)10);
    java.awt.Dimension var31 = var23.getMaximumSize();
    var20.setMinimumSize(var31);
    java.awt.Rectangle var33 = var20.getBounds();
    var13.scrollRectToVisible(var33);
    var8.repaint(var33);
    var4.setMaximizedBounds(var33);
    com.allenstudio.ir.ui.MainFrame var37 = new com.allenstudio.ir.ui.MainFrame();
    java.lang.String var38 = var37.getWarningString();
    java.awt.Rectangle var39 = var37.getMaximizedBounds();
    java.awt.MenuBar var40 = var37.getMenuBar();
    com.allenstudio.ir.core.plugins.CommonNote var41 = new com.allenstudio.ir.core.plugins.CommonNote();
    var41.resize(0, 1);
    com.allenstudio.ir.ui.NoteListCell var45 = new com.allenstudio.ir.ui.NoteListCell((com.allenstudio.ir.core.plugins.AbstractNote)var41);
    com.allenstudio.ir.ui.StatusBar var46 = new com.allenstudio.ir.ui.StatusBar();
    boolean var47 = var46.isBackgroundSet();
    boolean var50 = var46.contains(10, 100);
    var46.revalidate();
    javax.swing.JToolTip var52 = var46.createToolTip();
    com.allenstudio.ir.ui.StatusBar var53 = new com.allenstudio.ir.ui.StatusBar();
    javax.swing.JRootPane var54 = var53.getRootPane();
    java.awt.Point var55 = var53.location();
    com.allenstudio.ir.ui.StatusBar var56 = new com.allenstudio.ir.ui.StatusBar();
    javax.swing.JRootPane var57 = var56.getRootPane();
    java.awt.Point var58 = var56.location();
    com.allenstudio.ir.ui.Toolbar var59 = new com.allenstudio.ir.ui.Toolbar();
    boolean var60 = var59.isFloatable();
    java.awt.Component var62 = var59.getComponentAtIndex(10);
    java.lang.Object var63 = var56.getClientProperty((java.lang.Object)10);
    java.awt.Dimension var64 = var56.getMaximumSize();
    var53.setMinimumSize(var64);
    java.awt.Rectangle var66 = var53.getBounds();
    var46.scrollRectToVisible(var66);
    var41.repaint(var66);
    var37.setMaximizedBounds(var66);
    var4.setBounds(var66);
    var0.setMaximizedBounds(var66);
    javax.swing.JMenuBar var72 = var0.getJMenuBar();
    javax.swing.SingleSelectionModel var73 = var72.getSelectionModel();
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var2 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var3 + "' != '" + "Inspirento - alpha 0.86"+ "'", var3.equals("Inspirento - alpha 0.86"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var5);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var6);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var7);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var14 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var17 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var19);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var21);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var22);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var24);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var25);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var27 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var29);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var30);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var31);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var33);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var38);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var39);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var40);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var47 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var50 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var52);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var54);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var55);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var57);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var58);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var60 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var62);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var63);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var64);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var66);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var72);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var73);

  }

  public void test155() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest1.test155");


    com.allenstudio.ir.ui.DatePickerPane var0 = new com.allenstudio.ir.ui.DatePickerPane();
    var0.transferFocus();
    com.allenstudio.ir.ui.Toolbar var2 = new com.allenstudio.ir.ui.Toolbar();
    java.awt.image.ColorModel var3 = var2.getColorModel();
    var2.setEnabled(true);
    java.awt.Component var7 = var2.getComponentAtIndex(1);
    boolean var8 = var2.isFloatable();
    var0.setContent((java.awt.Component)var2);
    java.awt.Color var10 = var2.getForeground();
    boolean var11 = var2.requestFocusInWindow();
    var2.setDoubleBuffered(true);
    com.allenstudio.ir.ui.Toolbar var14 = new com.allenstudio.ir.ui.Toolbar();
    java.awt.image.ColorModel var15 = var14.getColorModel();
    var14.setEnabled(true);
    java.awt.Component var19 = var14.getComponentAtIndex(1);
    java.awt.Component var21 = var14.getComponentAtIndex(1);
    java.awt.event.InputMethodListener[] var22 = var14.getInputMethodListeners();
    com.allenstudio.ir.ui.Toolbar var23 = new com.allenstudio.ir.ui.Toolbar();
    java.awt.Dimension var24 = var23.size();
    java.awt.Dimension var25 = var14.getSize(var24);
    var2.addSeparator(var25);
    javax.swing.border.Border var27 = var2.getBorder();
    java.awt.Component.BaselineResizeBehavior var28 = var2.getBaselineResizeBehavior();
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var3);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var7);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var8 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var10);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var11 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var15);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var19);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var21);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var22);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var24);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var25);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var27);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var28);

  }

  public void test156() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest1.test156");


    com.allenstudio.ir.ui.Toolbar var0 = new com.allenstudio.ir.ui.Toolbar();
    java.awt.image.ColorModel var1 = var0.getColorModel();
    var0.setEnabled(true);
    java.awt.Component var5 = var0.getComponentAtIndex(1);
    boolean var6 = var0.isFloatable();
    java.lang.String var7 = var0.toString();
    com.allenstudio.ir.ui.Toolbar var8 = new com.allenstudio.ir.ui.Toolbar();
    java.awt.event.MouseWheelListener[] var9 = var8.getMouseWheelListeners();
    java.awt.event.MouseListener[] var10 = var8.getMouseListeners();
    var8.firePropertyChange("", false, true);
    var0.add((java.awt.Component)var8, (java.lang.Object)10.0f);
    java.awt.peer.ComponentPeer var17 = var0.getPeer();
    com.allenstudio.ir.ui.NoteListsTabPane var18 = new com.allenstudio.ir.ui.NoteListsTabPane();
    var18.setSelectedIndex(1);
    java.awt.Component var21 = var18.getSelectedComponent();
    com.allenstudio.ir.ui.StatusBar var22 = new com.allenstudio.ir.ui.StatusBar();
    boolean var23 = var22.isBackgroundSet();
    boolean var26 = var22.contains(10, 100);
    var22.revalidate();
    var22.setEnabled(false);
    com.allenstudio.ir.ui.DatePickerPane var30 = new com.allenstudio.ir.ui.DatePickerPane();
    java.lang.String var31 = var30.getTitle();
    boolean var32 = var30.isManagingFocus();
    java.awt.LayoutManager var33 = var30.getLayout();
    var22.setLayout(var33);
    var18.setLayout(var33);
    var0.setLayout(var33);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var1);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var5);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var6 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var9);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var10);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var17);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var21);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var23 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var26 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var31 + "' != '" + "Date Picker"+ "'", var31.equals("Date Picker"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var32 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var33);

  }

  public void test157() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest1.test157");


    com.allenstudio.ir.ui.DatePickerPane var0 = new com.allenstudio.ir.ui.DatePickerPane();
    var0.transferFocus();
    var0.addNotify();
    java.lang.String var3 = var0.getTitle();
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var3 + "' != '" + "Date Picker"+ "'", var3.equals("Date Picker"));

  }

  public void test158() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest1.test158");


    com.allenstudio.ir.ui.MainFrame var0 = new com.allenstudio.ir.ui.MainFrame();
    java.lang.String var1 = var0.getWarningString();
    java.awt.Rectangle var2 = var0.getMaximizedBounds();
    java.awt.MenuBar var3 = var0.getMenuBar();
    com.allenstudio.ir.ui.NoteListsTabPane var4 = new com.allenstudio.ir.ui.NoteListsTabPane();
    var0.widgetChanged((com.allenstudio.ir.core.InspirentoWidget)var4);
    var0.dispose();
    var0.setLocation(0, 0);
    com.allenstudio.ir.ui.MainFrame var10 = new com.allenstudio.ir.ui.MainFrame();
    boolean var11 = var10.isShowing();
    var10.setAutoRequestFocus(false);
    var10.setTitle("PanelUI");
    var10.setVisible(true);
    java.awt.Image var18 = var10.getIconImage();
    java.awt.Dimension var19 = var10.getMinimumSize();
    var0.setSize(var19);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var1);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var2);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var3);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var11 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var18);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var19);

  }

  public void test159() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest1.test159");


    com.allenstudio.ir.ui.calendar.DateChooser var0 = new com.allenstudio.ir.ui.calendar.DateChooser();
    boolean var2 = var0.requestFocus(false);
    var0.removeDateChooserListener();
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var2 == false);

  }

  public void test160() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest1.test160");


    com.allenstudio.ir.ui.StatusBar var0 = new com.allenstudio.ir.ui.StatusBar();
    int var1 = var0.getY();
    javax.swing.JToolTip var2 = var0.createToolTip();
    float var3 = var2.getAlignmentY();
    java.awt.Color var4 = var2.getForeground();
    boolean var5 = var2.isDisplayable();
    boolean var6 = var2.getAutoscrolls();
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var1 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var2);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var3 == 0.5f);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var4);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var5 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var6 == false);

  }

  public void test161() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest1.test161");


    com.allenstudio.ir.ui.Toolbar var0 = new com.allenstudio.ir.ui.Toolbar();
    java.awt.image.ColorModel var1 = var0.getColorModel();
    java.awt.im.InputContext var2 = var0.getInputContext();
    java.awt.Component var4 = var0.getComponent(0);
    java.awt.LayoutManager var5 = var0.getLayout();
    boolean var6 = var0.isRequestFocusEnabled();
    boolean var7 = var0.requestFocusInWindow();
    boolean var8 = var0.isMinimumSizeSet();
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var1);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var2);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var4);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var5);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var6 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var7 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var8 == false);

  }

  public void test162() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest1.test162");


    com.allenstudio.ir.ui.StatusBar var0 = new com.allenstudio.ir.ui.StatusBar();
    int var1 = var0.getY();
    java.awt.Dimension var2 = var0.getMaximumSize();
    javax.swing.InputMap var3 = var0.getInputMap();
    com.allenstudio.ir.ui.calendar.MonthlyCalendar var4 = new com.allenstudio.ir.ui.calendar.MonthlyCalendar();
    javax.swing.JComponent var5 = var4.getHeaderComponent();
    var4.setWeekStartOnSunday(true);
    com.allenstudio.ir.ui.Toolbar var8 = new com.allenstudio.ir.ui.Toolbar();
    boolean var9 = var8.isFloatable();
    var8.show();
    boolean var11 = var8.isRequestFocusEnabled();
    java.awt.Dimension var12 = var8.minimumSize();
    java.awt.Dimension var13 = var8.getMinimumSize();
    var4.setMaximumSize(var13);
    var0.addMouseMotionListener((java.awt.event.MouseMotionListener)var4);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var1 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var2);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var3);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var5);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var9 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var11 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var12);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var13);

  }

  public void test163() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest1.test163");


    com.allenstudio.ir.ui.DatePickerPane var0 = new com.allenstudio.ir.ui.DatePickerPane();
    java.lang.String var1 = var0.getTitle();
    boolean var2 = var0.isManagingFocus();
    java.awt.LayoutManager var3 = var0.getLayout();
    var0.setDebugGraphicsOptions(1);
    java.awt.Color var6 = var0.getHeaderBackground();
    com.allenstudio.ir.ui.DatePickerPane var7 = new com.allenstudio.ir.ui.DatePickerPane();
    var7.transferFocus();
    java.awt.Dimension var9 = var7.getMinimumSize();
    com.allenstudio.ir.ui.StatusBar var10 = new com.allenstudio.ir.ui.StatusBar();
    int var11 = var10.getY();
    javax.swing.JToolTip var12 = var10.createToolTip();
    float var13 = var12.getAlignmentY();
    java.awt.Color var14 = var12.getForeground();
    var7.setBackground(var14);
    java.awt.Component.BaselineResizeBehavior var16 = var7.getBaselineResizeBehavior();
    var0.setContent((java.awt.Component)var7);
    var7.repaint();
    com.allenstudio.ir.ui.StatusBar var19 = new com.allenstudio.ir.ui.StatusBar();
    int var20 = var19.getY();
    javax.swing.JToolTip var21 = var19.createToolTip();
    float var22 = var21.getAlignmentY();
    java.awt.Color var23 = var21.getForeground();
    boolean var24 = var21.isDisplayable();
    javax.swing.ActionMap var25 = var21.getActionMap();
    var7.setActionMap(var25);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var1 + "' != '" + "Date Picker"+ "'", var1.equals("Date Picker"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var2 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var3);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var6);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var9);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var11 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var12);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var13 == 0.5f);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var14);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var16);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var20 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var21);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var22 == 0.5f);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var23);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var24 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var25);

  }

  public void test164() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest1.test164");


    com.allenstudio.ir.ui.MainFrame var0 = new com.allenstudio.ir.ui.MainFrame();
    boolean var1 = var0.isShowing();
    int var2 = var0.countComponents();
    boolean var3 = var0.isAutoRequestFocus();
    java.awt.im.InputMethodRequests var4 = var0.getInputMethodRequests();
    java.awt.Window[] var5 = var0.getOwnedWindows();
    var0.setResizable(false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var1 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var2 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var3 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var4);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var5);

  }

  public void test165() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest1.test165");


    com.allenstudio.ir.ui.MainFrame var0 = new com.allenstudio.ir.ui.MainFrame();
    java.lang.String var1 = var0.getWarningString();
    java.lang.String var2 = var0.getWarningString();
    java.awt.Container var3 = var0.getFocusCycleRootAncestor();
    com.allenstudio.ir.ui.StatusBar var4 = new com.allenstudio.ir.ui.StatusBar();
    boolean var5 = var4.isBackgroundSet();
    boolean var8 = var4.contains(10, 100);
    var4.revalidate();
    javax.swing.JToolTip var10 = var4.createToolTip();
    com.allenstudio.ir.ui.StatusBar var11 = new com.allenstudio.ir.ui.StatusBar();
    javax.swing.JRootPane var12 = var11.getRootPane();
    java.awt.Point var13 = var11.location();
    com.allenstudio.ir.ui.StatusBar var14 = new com.allenstudio.ir.ui.StatusBar();
    javax.swing.JRootPane var15 = var14.getRootPane();
    java.awt.Point var16 = var14.location();
    com.allenstudio.ir.ui.Toolbar var17 = new com.allenstudio.ir.ui.Toolbar();
    boolean var18 = var17.isFloatable();
    java.awt.Component var20 = var17.getComponentAtIndex(10);
    java.lang.Object var21 = var14.getClientProperty((java.lang.Object)10);
    java.awt.Dimension var22 = var14.getMaximumSize();
    var11.setMinimumSize(var22);
    java.awt.Rectangle var24 = var11.getBounds();
    var4.scrollRectToVisible(var24);
    var0.setMaximizedBounds(var24);
    float var27 = var0.getAlignmentX();
    var0.doLayout();
    java.lang.String var29 = var0.getName();
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var1);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var2);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var3);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var5 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var8 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var10);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var12);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var13);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var15);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var16);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var18 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var20);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var21);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var22);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var24);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var27 == 0.5f);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var29 + "' != '" + "frame2"+ "'", var29.equals("frame2"));

  }

  public void test166() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest1.test166");


    com.allenstudio.ir.util.XmlElement var0 = new com.allenstudio.ir.util.XmlElement();
    com.allenstudio.ir.util.XmlElement var2 = var0.addSubElement("hi!");
    var2.notifyObservers((java.lang.Object)(byte)1);
    com.allenstudio.ir.util.XmlElement var5 = new com.allenstudio.ir.util.XmlElement();
    com.allenstudio.ir.util.XmlElement var7 = var5.addSubElement("hi!");
    var7.notifyObservers((java.lang.Object)(byte)1);
    com.allenstudio.ir.util.XmlElement var10 = var2.removeElement(var7);
    com.allenstudio.ir.util.XmlElement var12 = new com.allenstudio.ir.util.XmlElement();
    com.allenstudio.ir.util.XmlElement var14 = var12.addSubElement("hi!");
    com.allenstudio.ir.util.XmlElement var17 = var14.addSubElement("", "hi!");
    java.util.Hashtable var18 = var17.getAttributes();
    com.allenstudio.ir.ui.MainFrame var19 = new com.allenstudio.ir.ui.MainFrame();
    java.lang.String var20 = var19.getWarningString();
    java.awt.Rectangle var21 = var19.getMaximizedBounds();
    java.awt.MenuBar var22 = var19.getMenuBar();
    com.allenstudio.ir.ui.NoteListsTabPane var23 = new com.allenstudio.ir.ui.NoteListsTabPane();
    var19.widgetChanged((com.allenstudio.ir.core.InspirentoWidget)var23);
    var19.dispose();
    java.lang.Object var26 = var18.get((java.lang.Object)var19);
    java.util.Set var27 = var18.entrySet();
    com.allenstudio.ir.util.XmlElement var28 = new com.allenstudio.ir.util.XmlElement("Title", var18);
    boolean var29 = var18.isEmpty();
    var2.setAttributes(var18);
    java.lang.String var31 = var18.toString();
    java.util.Collection var32 = var18.values();
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var2);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var7);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var10);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var14);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var17);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var18);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var20);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var21);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var22);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var26);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var27);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var29 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var31 + "' != '" + "{}"+ "'", var31.equals("{}"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var32);

  }

  public void test167() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest1.test167");


    com.allenstudio.ir.util.XmlElement var0 = new com.allenstudio.ir.util.XmlElement();
    com.allenstudio.ir.util.XmlElement var2 = var0.addSubElement("hi!");
    com.allenstudio.ir.util.XmlElement var4 = var0.getElement("hi!");
    var0.deleteObservers();
    var0.setName("hi!");
    com.allenstudio.ir.util.XmlIO var8 = new com.allenstudio.ir.util.XmlIO(var0);
    var0.removeAllElements();
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var2);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var4);

  }

  public void test168() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest1.test168");


    com.allenstudio.ir.core.plugins.CommonNote var0 = new com.allenstudio.ir.core.plugins.CommonNote();
    java.lang.String var1 = var0.getFeature();
    com.allenstudio.ir.ui.StatusBar var2 = new com.allenstudio.ir.ui.StatusBar();
    var2.enable();
    boolean var4 = var2.isFocusOwner();
    var2.firePropertyChange("hi!", 10L, 0L);
    var2.layout();
    var2.removeAll();
    com.allenstudio.ir.ui.StatusBar var11 = new com.allenstudio.ir.ui.StatusBar();
    javax.swing.JRootPane var12 = var11.getRootPane();
    java.awt.Point var13 = var11.location();
    java.awt.Component var14 = var2.getComponentAt(var13);
    java.awt.Point var15 = var0.getLocation(var13);
    var0.setOtherInfo("");
    int var18 = var0.getWidth();
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var1 + "' != '" + "C:\\boot.ini"+ "'", var1.equals("C:\\boot.ini"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var4 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var12);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var13);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var14);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var15);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var18 == 0);

  }

  public void test169() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest1.test169");


    com.allenstudio.ir.util.XmlElement var1 = new com.allenstudio.ir.util.XmlElement("");
    com.allenstudio.ir.ui.Toolbar var2 = new com.allenstudio.ir.ui.Toolbar();
    java.awt.image.ColorModel var3 = var2.getColorModel();
    java.awt.im.InputContext var4 = var2.getInputContext();
    java.awt.Component var6 = var2.getComponent(0);
    boolean var9 = var2.contains((-1), 1);
    var1.notifyObservers((java.lang.Object)var2);
    var2.resetKeyboardActions();
    float var12 = var2.getAlignmentX();
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var3);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var4);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var6);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var9 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var12 == 0.5f);

  }

  public void test170() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest1.test170");


    com.allenstudio.ir.util.XmlElement var0 = new com.allenstudio.ir.util.XmlElement();
    com.allenstudio.ir.util.XmlElement var2 = var0.addSubElement("hi!");
    com.allenstudio.ir.util.XmlElement var3 = new com.allenstudio.ir.util.XmlElement();
    com.allenstudio.ir.util.XmlElement var5 = var3.addSubElement("hi!");
    var5.notifyObservers((java.lang.Object)(byte)1);
    var0.append(var5);
    java.lang.String var10 = var5.getAttribute(" ");
    java.lang.Object var11 = var5.clone();
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var2);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var5);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var10);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var11);

  }

  public void test171() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest1.test171");


    com.allenstudio.ir.ui.MainFrame var0 = new com.allenstudio.ir.ui.MainFrame();
    boolean var1 = var0.isShowing();
    int var2 = var0.countComponents();
    var0.setAutoRequestFocus(false);
    javax.swing.JMenuBar var5 = var0.getJMenuBar();
    boolean var6 = var5.isBorderPainted();
    var5.updateUI();
    com.allenstudio.ir.ui.NoteList var8 = new com.allenstudio.ir.ui.NoteList();
    com.allenstudio.ir.ui.NoteList var9 = new com.allenstudio.ir.ui.NoteList();
    com.allenstudio.ir.ui.MainFrame var10 = new com.allenstudio.ir.ui.MainFrame();
    java.lang.String var11 = var10.getWarningString();
    java.awt.Rectangle var12 = var10.getMaximizedBounds();
    java.awt.MenuBar var13 = var10.getMenuBar();
    com.allenstudio.ir.core.plugins.CommonNote var14 = new com.allenstudio.ir.core.plugins.CommonNote();
    var14.resize(0, 1);
    com.allenstudio.ir.ui.NoteListCell var18 = new com.allenstudio.ir.ui.NoteListCell((com.allenstudio.ir.core.plugins.AbstractNote)var14);
    com.allenstudio.ir.ui.StatusBar var19 = new com.allenstudio.ir.ui.StatusBar();
    boolean var20 = var19.isBackgroundSet();
    boolean var23 = var19.contains(10, 100);
    var19.revalidate();
    javax.swing.JToolTip var25 = var19.createToolTip();
    com.allenstudio.ir.ui.StatusBar var26 = new com.allenstudio.ir.ui.StatusBar();
    javax.swing.JRootPane var27 = var26.getRootPane();
    java.awt.Point var28 = var26.location();
    com.allenstudio.ir.ui.StatusBar var29 = new com.allenstudio.ir.ui.StatusBar();
    javax.swing.JRootPane var30 = var29.getRootPane();
    java.awt.Point var31 = var29.location();
    com.allenstudio.ir.ui.Toolbar var32 = new com.allenstudio.ir.ui.Toolbar();
    boolean var33 = var32.isFloatable();
    java.awt.Component var35 = var32.getComponentAtIndex(10);
    java.lang.Object var36 = var29.getClientProperty((java.lang.Object)10);
    java.awt.Dimension var37 = var29.getMaximumSize();
    var26.setMinimumSize(var37);
    java.awt.Rectangle var39 = var26.getBounds();
    var19.scrollRectToVisible(var39);
    var14.repaint(var39);
    var10.setMaximizedBounds(var39);
    int var45 = var9.getScrollableBlockIncrement(var39, 1, 4);
    int var48 = var8.getScrollableBlockIncrement(var39, 0, 0);
    java.awt.Dimension var49 = var8.getMaximumSize();
    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      java.awt.Component var51 = var5.add((java.awt.Component)var8, 30);
      fail("Expected exception of type java.lang.IllegalArgumentException");
    } catch (java.lang.IllegalArgumentException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var1 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var2 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var5);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var6 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var11);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var12);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var13);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var20 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var23 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var25);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var27);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var28);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var30);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var31);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var33 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var35);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var36);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var37);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var39);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var45 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var48 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var49);

  }

  public void test172() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest1.test172");


    com.allenstudio.ir.util.XmlElement var0 = new com.allenstudio.ir.util.XmlElement();
    com.allenstudio.ir.util.XmlElement var2 = var0.addSubElement("hi!");
    var2.notifyObservers((java.lang.Object)(byte)1);
    java.lang.String var5 = var2.getData();
    com.allenstudio.ir.util.XmlElement var7 = var2.getElement("Date Picker");
    var2.removeAllElements();
    com.allenstudio.ir.util.XmlElement var9 = var2.getParent();
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var2);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var5 + "' != '" + ""+ "'", var5.equals(""));
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var7);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var9);

  }

  public void test173() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest1.test173");


    com.allenstudio.ir.ui.calendar.MonthlyCalendar var0 = new com.allenstudio.ir.ui.calendar.MonthlyCalendar();
    boolean var1 = var0.isMaximumSizeSet();
    javax.swing.JComponent var2 = var0.getHeaderComponent();
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var1 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var2);

  }

  public void test174() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest1.test174");


    com.allenstudio.ir.ui.MainFrame var0 = new com.allenstudio.ir.ui.MainFrame();
    java.lang.String var1 = var0.getWarningString();
    java.awt.Rectangle var2 = var0.getMaximizedBounds();
    java.awt.MenuBar var3 = var0.getMenuBar();
    var0.removeNotify();
    var0.addNotify();
    java.awt.Window var6 = var0.getOwner();
    com.allenstudio.ir.ui.MainFrame var7 = new com.allenstudio.ir.ui.MainFrame();
    boolean var8 = var7.isShowing();
    int var9 = var7.countComponents();
    com.allenstudio.ir.ui.StatusBar var10 = new com.allenstudio.ir.ui.StatusBar();
    var10.enable();
    com.allenstudio.ir.ui.StatusBar var12 = new com.allenstudio.ir.ui.StatusBar();
    var12.enable();
    boolean var14 = var12.isFocusOwner();
    var12.firePropertyChange("hi!", 10L, 0L);
    var12.layout();
    var12.removeAll();
    com.allenstudio.ir.ui.StatusBar var21 = new com.allenstudio.ir.ui.StatusBar();
    javax.swing.JRootPane var22 = var21.getRootPane();
    java.awt.Point var23 = var21.location();
    java.awt.Point var24 = var12.getLocation(var23);
    var10.setLocation(var24);
    var7.setLocation(var24);
    java.awt.Container var27 = var7.getContentPane();
    java.awt.Window.Type var28 = var7.getType();
    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      var0.setType(var28);
      fail("Expected exception of type java.awt.IllegalComponentStateException");
    } catch (java.awt.IllegalComponentStateException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var1);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var2);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var3);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var6);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var8 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var9 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var14 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var22);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var23);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var24);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var27);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var28);

  }

  public void test175() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest1.test175");


    com.allenstudio.ir.ui.Toolbar var0 = new com.allenstudio.ir.ui.Toolbar();
    java.awt.image.ColorModel var1 = var0.getColorModel();
    var0.setEnabled(true);
    java.awt.Component var5 = var0.getComponentAtIndex(1);
    boolean var6 = var0.requestFocusInWindow();
    java.awt.FocusTraversalPolicy var7 = var0.getFocusTraversalPolicy();
    java.beans.PropertyChangeListener[] var9 = var0.getPropertyChangeListeners("Date Picker");
    boolean var10 = var0.isFontSet();
    com.allenstudio.ir.ui.calendar.MonthlyCalendar var11 = new com.allenstudio.ir.ui.calendar.MonthlyCalendar();
    var0.removeMouseListener((java.awt.event.MouseListener)var11);
    var11.setMonth(4);
    com.allenstudio.ir.ui.Toolbar var15 = new com.allenstudio.ir.ui.Toolbar();
    boolean var16 = var15.isFloatable();
    var15.show();
    java.awt.image.ColorModel var18 = var15.getColorModel();
    boolean var19 = var15.isFocusCycleRoot();
    com.allenstudio.ir.ui.DatePickerPane var20 = new com.allenstudio.ir.ui.DatePickerPane();
    var20.transferFocus();
    com.allenstudio.ir.ui.Toolbar var22 = new com.allenstudio.ir.ui.Toolbar();
    java.awt.image.ColorModel var23 = var22.getColorModel();
    var22.setEnabled(true);
    java.awt.Component var27 = var22.getComponentAtIndex(1);
    boolean var28 = var22.isFloatable();
    var20.setContent((java.awt.Component)var22);
    java.awt.Font var30 = var20.getFont();
    java.awt.FontMetrics var31 = var15.getFontMetrics(var30);
    var11.setHeaderFont(var30);
    com.allenstudio.ir.ui.calendar.MonthlyCalendar var33 = new com.allenstudio.ir.ui.calendar.MonthlyCalendar();
    javax.swing.JComponent var34 = var33.getHeaderComponent();
    java.awt.Color var35 = var33.getDateForeground();
    var11.setHeaderForeground(var35);
    boolean var37 = var11.getWeekStartOnSunday();
    com.allenstudio.ir.ui.calendar.IMonthlyCalendarModel var38 = var11.getModel();
    var11.repaint(4, 30, 100, 32);
    java.awt.Color var44 = var11.getHighlightForeground();
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var1);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var5);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var6 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var7);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var9);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var10 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var16 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var18);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var19 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var23);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var27);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var28 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var30);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var31);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var34);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var35);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var37 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var38);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var44);

  }

  public void test176() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest1.test176");


    com.allenstudio.ir.ui.DefaultNoteListModel var0 = new com.allenstudio.ir.ui.DefaultNoteListModel();
    com.allenstudio.ir.ui.StatusBar var1 = new com.allenstudio.ir.ui.StatusBar();
    com.allenstudio.ir.core.plugins.CommonNote var2 = new com.allenstudio.ir.core.plugins.CommonNote();
    var2.setFocusTraversalPolicyProvider(false);
    var1.remove((java.awt.Component)var2);
    com.allenstudio.ir.ui.StatusBar var6 = new com.allenstudio.ir.ui.StatusBar();
    int var7 = var6.getY();
    javax.swing.JToolTip var8 = var6.createToolTip();
    java.awt.Insets var9 = var8.getInsets();
    java.awt.Insets var10 = var2.getInsets(var9);
    int var11 = var0.indexOf((com.allenstudio.ir.core.plugins.AbstractNote)var2);
    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      com.allenstudio.ir.core.plugins.AbstractNote var13 = var0.getElementAt(6);
      fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException");
    } catch (java.lang.ArrayIndexOutOfBoundsException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var7 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var8);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var9);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var10);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var11 == (-1));

  }

  public void test177() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest1.test177");


    com.allenstudio.ir.ui.StatusBar var0 = new com.allenstudio.ir.ui.StatusBar();
    javax.swing.JRootPane var1 = var0.getRootPane();
    java.awt.Point var2 = var0.location();
    boolean var3 = var0.isManagingFocus();
    java.awt.Rectangle var4 = var0.bounds();
    java.awt.Dimension var5 = var0.minimumSize();
    boolean var6 = var0.isPaintingForPrint();
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var1);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var2);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var3 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var4);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var5);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var6 == false);

  }

  public void test178() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest1.test178");


    com.allenstudio.ir.ui.DatePickerPane var0 = new com.allenstudio.ir.ui.DatePickerPane();
    var0.transferFocus();
    java.awt.Dimension var2 = var0.getMinimumSize();
    com.allenstudio.ir.ui.StatusBar var3 = new com.allenstudio.ir.ui.StatusBar();
    int var4 = var3.getY();
    javax.swing.JToolTip var5 = var3.createToolTip();
    float var6 = var5.getAlignmentY();
    java.awt.Color var7 = var5.getForeground();
    var0.setBackground(var7);
    java.awt.im.InputContext var9 = var0.getInputContext();
    com.allenstudio.ir.ui.calendar.DateChooser var10 = var0.getDateChooser();
    com.allenstudio.ir.ui.DatePickerPane var11 = new com.allenstudio.ir.ui.DatePickerPane();
    var11.transferFocus();
    com.allenstudio.ir.ui.Toolbar var13 = new com.allenstudio.ir.ui.Toolbar();
    java.awt.image.ColorModel var14 = var13.getColorModel();
    var13.setEnabled(true);
    java.awt.Component var18 = var13.getComponentAtIndex(1);
    boolean var19 = var13.isFloatable();
    var11.setContent((java.awt.Component)var13);
    java.awt.Dimension var21 = var11.size();
    com.allenstudio.ir.ui.Toolbar var22 = new com.allenstudio.ir.ui.Toolbar();
    boolean var23 = var22.isFloatable();
    var22.show();
    boolean var25 = var22.isRequestFocusEnabled();
    java.awt.Dimension var26 = var22.minimumSize();
    var11.setToolBar((javax.swing.JToolBar)var22);
    java.awt.Image var30 = var11.createImage(10, (-1));
    var11.setTitle("Date Picker");
    javax.swing.border.Border var33 = var11.getContentPaneBorder();
    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      var0.setBorder(var33);
      fail("Expected exception of type java.lang.ClassCastException");
    } catch (java.lang.ClassCastException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var2);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var4 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var5);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var6 == 0.5f);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var7);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var9);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var10);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var14);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var18);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var19 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var21);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var23 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var25 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var26);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var30);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var33);

  }

  public void test179() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest1.test179");


    com.allenstudio.ir.ui.MainFrame var0 = new com.allenstudio.ir.ui.MainFrame();
    java.awt.Component var1 = var0.getGlassPane();
    java.util.Locale var2 = var0.getLocale();
    java.awt.MenuBar var3 = var0.getMenuBar();
    com.allenstudio.ir.ui.MainFrame var4 = new com.allenstudio.ir.ui.MainFrame();
    java.lang.String var5 = var4.getWarningString();
    java.lang.String var6 = var4.getWarningString();
    boolean var7 = var4.isAutoRequestFocus();
    boolean var8 = var4.isResizable();
    javax.swing.JRootPane var9 = var4.getRootPane();
    java.util.List var10 = var4.getIconImages();
    var0.setIconImages(var10);
    java.awt.event.WindowStateListener[] var12 = var0.getWindowStateListeners();
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var1);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var2);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var3);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var5);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var6);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var7 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var8 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var9);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var10);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var12);

  }

  public void test180() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest1.test180");


    com.allenstudio.ir.util.XmlIO var0 = new com.allenstudio.ir.util.XmlIO();
    char[] var2 = new char[] { 'a'};
    var0.ignorableWhitespace(var2, 0, (-1));
    com.allenstudio.ir.util.XmlIO var6 = new com.allenstudio.ir.util.XmlIO();
    var6.errorDialog("hi!");
    char[] var11 = new char[] { 'a', '4'};
    var6.ignorableWhitespace(var11, 100, 0);
    var0.ignorableWhitespace(var11, 10, 0);
    var0.errorDialog("This is a testing description. \u03E3\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\u073F\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD");
    var0.endDocument();
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var2);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var11);

  }

  public void test181() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest1.test181");


    com.allenstudio.ir.ui.MainFrame var0 = new com.allenstudio.ir.ui.MainFrame();
    java.lang.String var1 = var0.getWarningString();
    var0.show(true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var1);

  }

  public void test182() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest1.test182");


    com.allenstudio.ir.ui.MainFrame var0 = new com.allenstudio.ir.ui.MainFrame();
    boolean var1 = var0.isShowing();
    int var2 = var0.countComponents();
    var0.setAutoRequestFocus(false);
    javax.swing.JMenuBar var5 = var0.getJMenuBar();
    boolean var6 = var5.isBorderPainted();
    var5.menuSelectionChanged(true);
    com.allenstudio.ir.ui.MainFrame var9 = new com.allenstudio.ir.ui.MainFrame();
    boolean var10 = var9.isShowing();
    int var11 = var9.countComponents();
    var9.setAutoRequestFocus(false);
    javax.swing.JMenuBar var14 = var9.getJMenuBar();
    boolean var15 = var14.isBorderPainted();
    var14.menuSelectionChanged(true);
    com.allenstudio.ir.ui.MainFrame var18 = new com.allenstudio.ir.ui.MainFrame();
    boolean var19 = var18.isShowing();
    int var20 = var18.countComponents();
    var18.setAutoRequestFocus(false);
    javax.swing.JMenuBar var23 = var18.getJMenuBar();
    boolean var24 = var23.isBorderPainted();
    var23.updateUI();
    com.allenstudio.ir.ui.DatePickerPane var26 = new com.allenstudio.ir.ui.DatePickerPane();
    var26.transferFocus();
    java.awt.Dimension var28 = var26.getMinimumSize();
    java.awt.Dimension var29 = var23.getSize(var28);
    javax.swing.plaf.MenuBarUI var30 = var23.getUI();
    var14.setUI(var30);
    var5.setUI(var30);
    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      int var35 = var5.getBaseline((-1), 31);
      fail("Expected exception of type java.lang.IllegalArgumentException");
    } catch (java.lang.IllegalArgumentException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var1 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var2 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var5);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var6 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var10 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var11 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var14);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var15 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var19 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var20 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var23);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var24 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var28);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var29);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var30);

  }

  public void test183() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest1.test183");


    com.allenstudio.ir.ui.MainFrame var0 = new com.allenstudio.ir.ui.MainFrame();
    boolean var1 = var0.isShowing();
    var0.setAutoRequestFocus(false);
    var0.setTitle("PanelUI");
    var0.setVisible(true);
    java.awt.Image var8 = var0.getIconImage();
    java.awt.Dimension var9 = var0.getMinimumSize();
    var0.show();
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var1 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var8);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var9);

  }

  public void test184() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest1.test184");


    com.allenstudio.ir.ui.Toolbar var0 = new com.allenstudio.ir.ui.Toolbar();
    java.awt.image.ColorModel var1 = var0.getColorModel();
    var0.setEnabled(true);
    java.awt.Component var5 = var0.getComponentAtIndex(1);
    boolean var6 = var0.isFloatable();
    javax.swing.InputMap var7 = var0.getInputMap();
    java.awt.Component var9 = var0.getComponentAtIndex(100);
    var0.firePropertyChange("MenuBarUI", false, false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var1);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var5);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var6 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var7);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var9);

  }

  public void test185() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest1.test185");


    com.allenstudio.ir.ui.DatePickerPane var0 = new com.allenstudio.ir.ui.DatePickerPane();
    java.awt.Container var1 = var0.getContentPane();
    javax.swing.InputMap var2 = var0.getInputMap();
    java.lang.String var3 = var0.getUIClassID();
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var1);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var2);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var3 + "' != '" + "PanelUI"+ "'", var3.equals("PanelUI"));

  }

  public void test186() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest1.test186");


    com.allenstudio.ir.util.XmlElement var0 = new com.allenstudio.ir.util.XmlElement();
    boolean var1 = var0.hasChanged();
    boolean var2 = var0.hasChanged();
    java.lang.Object var5 = var0.addAttribute("com.allenstudio.ir.ui.StatusBar[,0,0,0x0,invalid,layout=java.awt.BorderLayout,alignmentX=0.0,alignmentY=0.0,border=,flags=0,maximumSize=,minimumSize=,preferredSize=]", "Date Picker");
    com.allenstudio.ir.util.XmlElement var6 = new com.allenstudio.ir.util.XmlElement();
    com.allenstudio.ir.util.XmlElement var8 = var6.addSubElement("hi!");
    com.allenstudio.ir.util.XmlElement var9 = new com.allenstudio.ir.util.XmlElement();
    com.allenstudio.ir.util.XmlElement var11 = var9.addSubElement("hi!");
    var11.notifyObservers((java.lang.Object)(byte)1);
    var6.append(var11);
    com.allenstudio.ir.util.XmlElement var15 = new com.allenstudio.ir.util.XmlElement();
    com.allenstudio.ir.util.XmlElement var17 = var15.addSubElement("hi!");
    java.lang.String var19 = var15.getAttribute("C:\\boot.ini");
    com.allenstudio.ir.util.XmlElement var20 = var11.addSubElement(var15);
    com.allenstudio.ir.util.XmlElement var21 = var20.getParent();
    boolean var22 = var0.addElement(var21);
    java.lang.Object var23 = var0.clone();
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var1 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var2 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var5);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var8);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var11);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var17);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var19);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var20);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var21);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var22 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var23);

  }

  public void test187() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest1.test187");


    com.allenstudio.ir.ui.StatusBar var0 = new com.allenstudio.ir.ui.StatusBar();
    var0.enable();
    boolean var2 = var0.isFocusOwner();
    var0.firePropertyChange("hi!", 10L, 0L);
    int var7 = var0.getWidth();
    boolean var9 = var0.requestFocus(true);
    java.awt.image.VolatileImage var12 = var0.createVolatileImage(0, (-1));
    var0.revalidate();
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var2 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var7 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var9 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var12);

  }

  public void test188() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest1.test188");


    com.allenstudio.ir.ui.DatePickerPane var0 = new com.allenstudio.ir.ui.DatePickerPane();
    var0.transferFocus();
    com.allenstudio.ir.ui.Toolbar var2 = new com.allenstudio.ir.ui.Toolbar();
    java.awt.image.ColorModel var3 = var2.getColorModel();
    var2.setEnabled(true);
    java.awt.Component var7 = var2.getComponentAtIndex(1);
    boolean var8 = var2.isFloatable();
    var0.setContent((java.awt.Component)var2);
    var0.setSelected(true);
    var0.resize(0, 1);
    java.awt.Rectangle var15 = var0.getBounds();
    java.awt.Point var16 = var0.location();
    com.allenstudio.ir.ui.NoteListsTabPane var17 = new com.allenstudio.ir.ui.NoteListsTabPane();
    com.allenstudio.ir.ui.Toolbar var18 = new com.allenstudio.ir.ui.Toolbar();
    boolean var19 = var18.isFloatable();
    var18.show();
    java.awt.image.ColorModel var21 = var18.getColorModel();
    boolean var22 = var18.isFocusCycleRoot();
    com.allenstudio.ir.ui.DatePickerPane var23 = new com.allenstudio.ir.ui.DatePickerPane();
    var23.transferFocus();
    com.allenstudio.ir.ui.Toolbar var25 = new com.allenstudio.ir.ui.Toolbar();
    java.awt.image.ColorModel var26 = var25.getColorModel();
    var25.setEnabled(true);
    java.awt.Component var30 = var25.getComponentAtIndex(1);
    boolean var31 = var25.isFloatable();
    var23.setContent((java.awt.Component)var25);
    java.awt.Dimension var33 = var23.size();
    com.allenstudio.ir.ui.Toolbar var34 = new com.allenstudio.ir.ui.Toolbar();
    boolean var35 = var34.isFloatable();
    var34.show();
    boolean var37 = var34.isRequestFocusEnabled();
    java.awt.Dimension var38 = var34.minimumSize();
    var23.setToolBar((javax.swing.JToolBar)var34);
    java.awt.Image var42 = var23.createImage(10, (-1));
    var17.add((java.awt.Component)var18, (java.lang.Object)10);
    var0.setToolBar((javax.swing.JToolBar)var18);
    int var45 = var0.getWidth();
    javax.swing.Icon var46 = var0.getFrameIcon();
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var3);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var7);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var8 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var15);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var16);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var19 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var21);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var22 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var26);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var30);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var31 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var33);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var35 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var37 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var38);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var42);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var45 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var46);

  }

  public void test189() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest1.test189");


    com.allenstudio.ir.core.ConfigurationManager var0 = com.allenstudio.ir.core.ConfigurationManager.getInstance();
    java.util.Set var1 = var0.stringPropertyNames();
    java.util.Enumeration var2 = var0.keys();
    java.util.Set var3 = var0.stringPropertyNames();
    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      java.lang.String var5 = var0.getProperty("ToolBarUI");
      fail("Expected exception of type java.lang.StringIndexOutOfBoundsException");
    } catch (java.lang.StringIndexOutOfBoundsException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var0);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var1);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var2);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var3);

  }

  public void test190() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest1.test190");


    com.allenstudio.ir.ui.StatusBar var0 = new com.allenstudio.ir.ui.StatusBar();
    int var1 = var0.getY();
    var0.disable();
    boolean var5 = var0.inside((-1), 100);
    boolean var6 = var0.isMaximumSizeSet();
    boolean var7 = var0.isFontSet();
    var0.repaint();
    com.allenstudio.ir.ui.StatusBar var9 = new com.allenstudio.ir.ui.StatusBar();
    javax.swing.JRootPane var10 = var9.getRootPane();
    java.awt.Point var11 = var9.location();
    boolean var12 = var9.isManagingFocus();
    java.awt.Rectangle var13 = var9.bounds();
    var9.firePropertyChange("Date Picker", 0L, (-1L));
    com.allenstudio.ir.util.XmlIO var18 = new com.allenstudio.ir.util.XmlIO();
    var18.errorDialog("hi!");
    char[] var23 = new char[] { 'a', '4'};
    var18.ignorableWhitespace(var23, 100, 0);
    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      var0.add((java.awt.Component)var9, (java.lang.Object)var23);
      fail("Expected exception of type java.lang.IllegalArgumentException");
    } catch (java.lang.IllegalArgumentException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var1 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var5 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var6 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var7 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var10);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var11);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var12 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var13);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var23);

  }

  public void test191() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest1.test191");


    com.allenstudio.ir.ui.Toolbar var0 = new com.allenstudio.ir.ui.Toolbar();
    java.awt.image.ColorModel var1 = var0.getColorModel();
    var0.setEnabled(true);
    java.awt.Component var5 = var0.getComponentAtIndex(1);
    boolean var6 = var0.requestFocusInWindow();
    java.awt.FocusTraversalPolicy var7 = var0.getFocusTraversalPolicy();
    java.beans.PropertyChangeListener[] var9 = var0.getPropertyChangeListeners("Date Picker");
    boolean var10 = var0.isFontSet();
    com.allenstudio.ir.ui.calendar.MonthlyCalendar var11 = new com.allenstudio.ir.ui.calendar.MonthlyCalendar();
    var0.removeMouseListener((java.awt.event.MouseListener)var11);
    var11.setMonth(4);
    com.allenstudio.ir.ui.StatusBar var15 = new com.allenstudio.ir.ui.StatusBar();
    int var16 = var15.getY();
    boolean var17 = var15.isLightweight();
    java.awt.Dimension var18 = var15.getMaximumSize();
    var11.setCellDimension(var18);
    com.allenstudio.ir.ui.DatePickerPane var20 = new com.allenstudio.ir.ui.DatePickerPane();
    var20.transferFocus();
    com.allenstudio.ir.ui.Toolbar var22 = new com.allenstudio.ir.ui.Toolbar();
    java.awt.image.ColorModel var23 = var22.getColorModel();
    var22.setEnabled(true);
    java.awt.Component var27 = var22.getComponentAtIndex(1);
    boolean var28 = var22.isFloatable();
    var20.setContent((java.awt.Component)var22);
    java.awt.Color var30 = var22.getForeground();
    boolean var31 = var22.requestFocusInWindow();
    var22.setDoubleBuffered(true);
    com.allenstudio.ir.ui.Toolbar var34 = new com.allenstudio.ir.ui.Toolbar();
    java.awt.image.ColorModel var35 = var34.getColorModel();
    var34.setEnabled(true);
    java.awt.Component var39 = var34.getComponentAtIndex(1);
    java.awt.Component var41 = var34.getComponentAtIndex(1);
    java.awt.event.InputMethodListener[] var42 = var34.getInputMethodListeners();
    com.allenstudio.ir.ui.Toolbar var43 = new com.allenstudio.ir.ui.Toolbar();
    java.awt.Dimension var44 = var43.size();
    java.awt.Dimension var45 = var34.getSize(var44);
    var22.addSeparator(var45);
    javax.swing.border.Border var47 = var22.getBorder();
    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      var11.setBorder(var47);
      fail("Expected exception of type java.lang.ClassCastException");
    } catch (java.lang.ClassCastException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var1);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var5);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var6 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var7);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var9);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var10 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var16 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var17 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var18);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var23);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var27);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var28 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var30);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var31 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var35);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var39);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var41);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var42);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var44);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var45);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var47);

  }

  public void test192() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest1.test192");


    com.allenstudio.ir.ui.Toolbar var0 = new com.allenstudio.ir.ui.Toolbar();
    java.awt.image.ColorModel var1 = var0.getColorModel();
    var0.setEnabled(true);
    java.awt.Component var5 = var0.getComponentAtIndex(1);
    boolean var6 = var0.requestFocusInWindow();
    java.awt.FocusTraversalPolicy var7 = var0.getFocusTraversalPolicy();
    java.beans.PropertyChangeListener[] var9 = var0.getPropertyChangeListeners("Date Picker");
    boolean var10 = var0.isFontSet();
    com.allenstudio.ir.ui.calendar.MonthlyCalendar var11 = new com.allenstudio.ir.ui.calendar.MonthlyCalendar();
    var0.removeMouseListener((java.awt.event.MouseListener)var11);
    var11.setMonth(4);
    int var15 = var11.getMonth();
    com.allenstudio.ir.ui.Toolbar var16 = new com.allenstudio.ir.ui.Toolbar();
    java.awt.image.ColorModel var17 = var16.getColorModel();
    var16.setEnabled(true);
    java.awt.Component var21 = var16.getComponentAtIndex(1);
    boolean var22 = var16.requestFocusInWindow();
    java.awt.FocusTraversalPolicy var23 = var16.getFocusTraversalPolicy();
    java.beans.PropertyChangeListener[] var25 = var16.getPropertyChangeListeners("Date Picker");
    boolean var26 = var16.isFontSet();
    com.allenstudio.ir.ui.calendar.MonthlyCalendar var27 = new com.allenstudio.ir.ui.calendar.MonthlyCalendar();
    var16.removeMouseListener((java.awt.event.MouseListener)var27);
    boolean var29 = var27.getWeekStartOnSunday();
    int var30 = var27.getSelectedDay();
    javax.swing.JComponent var31 = var27.getHeaderComponent();
    java.awt.Color var32 = var27.getHighlightBackground();
    var11.setDateForeground(var32);
    com.allenstudio.ir.ui.DatePickerPane var34 = new com.allenstudio.ir.ui.DatePickerPane();
    java.lang.String var35 = var34.getUIClassID();
    com.allenstudio.ir.ui.StatusBar var36 = new com.allenstudio.ir.ui.StatusBar();
    int var37 = var36.getY();
    javax.swing.JToolTip var38 = var36.createToolTip();
    float var39 = var38.getAlignmentY();
    java.awt.Color var40 = var38.getForeground();
    var34.setBackground(var40);
    var34.move(10, 10);
    com.allenstudio.ir.ui.DatePickerPane var45 = new com.allenstudio.ir.ui.DatePickerPane();
    var45.transferFocus();
    com.allenstudio.ir.ui.Toolbar var47 = new com.allenstudio.ir.ui.Toolbar();
    java.awt.image.ColorModel var48 = var47.getColorModel();
    var47.setEnabled(true);
    java.awt.Component var52 = var47.getComponentAtIndex(1);
    boolean var53 = var47.isFloatable();
    var45.setContent((java.awt.Component)var47);
    java.awt.Color var55 = var47.getForeground();
    boolean var56 = var47.requestFocusInWindow();
    var47.setDoubleBuffered(true);
    com.allenstudio.ir.ui.Toolbar var59 = new com.allenstudio.ir.ui.Toolbar();
    java.awt.image.ColorModel var60 = var59.getColorModel();
    var59.setEnabled(true);
    java.awt.Component var64 = var59.getComponentAtIndex(1);
    java.awt.Component var66 = var59.getComponentAtIndex(1);
    java.awt.event.InputMethodListener[] var67 = var59.getInputMethodListeners();
    com.allenstudio.ir.ui.Toolbar var68 = new com.allenstudio.ir.ui.Toolbar();
    java.awt.Dimension var69 = var68.size();
    java.awt.Dimension var70 = var59.getSize(var69);
    var47.addSeparator(var70);
    javax.swing.border.Border var72 = var47.getBorder();
    var34.setContentPaneBorder(var72);
    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      var11.setBorder(var72);
      fail("Expected exception of type java.lang.ClassCastException");
    } catch (java.lang.ClassCastException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var1);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var5);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var6 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var7);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var9);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var10 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var15 == 4);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var17);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var21);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var22 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var23);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var25);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var26 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var29 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var30 == 31);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var31);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var32);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var35 + "' != '" + "PanelUI"+ "'", var35.equals("PanelUI"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var37 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var38);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var39 == 0.5f);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var40);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var48);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var52);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var53 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var55);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var56 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var60);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var64);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var66);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var67);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var69);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var70);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var72);

  }

  public void test193() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest1.test193");


    com.allenstudio.ir.util.XmlElement var0 = new com.allenstudio.ir.util.XmlElement();
    com.allenstudio.ir.util.XmlElement var2 = var0.addSubElement("hi!");
    var0.setName("");
    com.allenstudio.ir.util.XmlElement var6 = var0.addSubElement("ToolBarUI");
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var2);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var6);

  }

  public void test194() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest1.test194");


    com.allenstudio.ir.ui.StatusBar var0 = new com.allenstudio.ir.ui.StatusBar();
    com.allenstudio.ir.core.plugins.CommonNote var1 = new com.allenstudio.ir.core.plugins.CommonNote();
    var1.setFocusTraversalPolicyProvider(false);
    var0.remove((java.awt.Component)var1);
    com.allenstudio.ir.ui.StatusBar var5 = new com.allenstudio.ir.ui.StatusBar();
    int var6 = var5.getY();
    javax.swing.JToolTip var7 = var5.createToolTip();
    java.awt.Insets var8 = var7.getInsets();
    java.awt.Insets var9 = var1.getInsets(var8);
    java.lang.String var10 = var1.getTitle();
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var6 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var7);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var8);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var9);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var10 + "' != '" + "Title"+ "'", var10.equals("Title"));

  }

  public void test195() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest1.test195");


    com.allenstudio.ir.ui.calendar.DateChooser var0 = new com.allenstudio.ir.ui.calendar.DateChooser();
    boolean var2 = var0.requestFocus(false);
    com.allenstudio.ir.ui.StatusBar var3 = new com.allenstudio.ir.ui.StatusBar();
    boolean var4 = var3.isBackgroundSet();
    var3.repaint(100L);
    int var7 = var3.getWidth();
    com.allenstudio.ir.ui.MainFrame var8 = new com.allenstudio.ir.ui.MainFrame();
    java.lang.String var9 = var8.getWarningString();
    java.lang.String var10 = var8.getWarningString();
    java.awt.Container var11 = var8.getFocusCycleRootAncestor();
    com.allenstudio.ir.ui.StatusBar var12 = new com.allenstudio.ir.ui.StatusBar();
    boolean var13 = var12.isBackgroundSet();
    boolean var16 = var12.contains(10, 100);
    var12.revalidate();
    javax.swing.JToolTip var18 = var12.createToolTip();
    com.allenstudio.ir.ui.StatusBar var19 = new com.allenstudio.ir.ui.StatusBar();
    javax.swing.JRootPane var20 = var19.getRootPane();
    java.awt.Point var21 = var19.location();
    com.allenstudio.ir.ui.StatusBar var22 = new com.allenstudio.ir.ui.StatusBar();
    javax.swing.JRootPane var23 = var22.getRootPane();
    java.awt.Point var24 = var22.location();
    com.allenstudio.ir.ui.Toolbar var25 = new com.allenstudio.ir.ui.Toolbar();
    boolean var26 = var25.isFloatable();
    java.awt.Component var28 = var25.getComponentAtIndex(10);
    java.lang.Object var29 = var22.getClientProperty((java.lang.Object)10);
    java.awt.Dimension var30 = var22.getMaximumSize();
    var19.setMinimumSize(var30);
    java.awt.Rectangle var32 = var19.getBounds();
    var12.scrollRectToVisible(var32);
    var8.setMaximizedBounds(var32);
    var3.computeVisibleRect(var32);
    var0.paintImmediately(var32);
    int var37 = var0.getHeight();
    var0.setAutoscrolls(true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var2 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var4 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var7 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var9);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var10);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var11);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var13 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var16 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var18);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var20);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var21);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var23);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var24);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var26 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var28);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var29);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var30);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var32);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var37 == 0);

  }

  public void test196() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest1.test196");


    com.allenstudio.ir.ui.StatusBar var0 = new com.allenstudio.ir.ui.StatusBar();
    var0.enable();
    boolean var2 = var0.isFocusOwner();
    var0.firePropertyChange("hi!", 10L, 0L);
    var0.layout();
    boolean var8 = var0.requestDefaultFocus();
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var2 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var8 == false);

  }

  public void test197() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest1.test197");


    com.allenstudio.ir.ui.calendar.MonthlyCalendarModel var0 = new com.allenstudio.ir.ui.calendar.MonthlyCalendarModel();
    var0.setMarked(4, false);
    boolean var5 = var0.isMarked(1);
    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      var0.setMarked((-1), true);
      fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException");
    } catch (java.lang.ArrayIndexOutOfBoundsException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var5 == false);

  }

  public void test198() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest1.test198");


    com.allenstudio.ir.ui.NoteListsTabPane var0 = new com.allenstudio.ir.ui.NoteListsTabPane();
    com.allenstudio.ir.ui.Toolbar var1 = new com.allenstudio.ir.ui.Toolbar();
    boolean var2 = var1.isFloatable();
    var1.show();
    java.awt.image.ColorModel var4 = var1.getColorModel();
    boolean var5 = var1.isFocusCycleRoot();
    com.allenstudio.ir.ui.DatePickerPane var6 = new com.allenstudio.ir.ui.DatePickerPane();
    var6.transferFocus();
    com.allenstudio.ir.ui.Toolbar var8 = new com.allenstudio.ir.ui.Toolbar();
    java.awt.image.ColorModel var9 = var8.getColorModel();
    var8.setEnabled(true);
    java.awt.Component var13 = var8.getComponentAtIndex(1);
    boolean var14 = var8.isFloatable();
    var6.setContent((java.awt.Component)var8);
    java.awt.Dimension var16 = var6.size();
    com.allenstudio.ir.ui.Toolbar var17 = new com.allenstudio.ir.ui.Toolbar();
    boolean var18 = var17.isFloatable();
    var17.show();
    boolean var20 = var17.isRequestFocusEnabled();
    java.awt.Dimension var21 = var17.minimumSize();
    var6.setToolBar((javax.swing.JToolBar)var17);
    java.awt.Image var25 = var6.createImage(10, (-1));
    var0.add((java.awt.Component)var1, (java.lang.Object)10);
    com.allenstudio.ir.ui.DatePickerPane var27 = new com.allenstudio.ir.ui.DatePickerPane();
    java.lang.String var28 = var27.getTitle();
    java.awt.dnd.DropTarget var29 = var27.getDropTarget();
    com.allenstudio.ir.util.XmlElement var30 = new com.allenstudio.ir.util.XmlElement();
    boolean var31 = var30.hasChanged();
    var0.add((java.awt.Component)var27, (java.lang.Object)var31, (-1));
    com.allenstudio.ir.ui.NoteListsTabPane var34 = new com.allenstudio.ir.ui.NoteListsTabPane();
    com.allenstudio.ir.ui.Toolbar var35 = new com.allenstudio.ir.ui.Toolbar();
    boolean var36 = var35.isFloatable();
    var35.show();
    java.awt.image.ColorModel var38 = var35.getColorModel();
    boolean var39 = var35.isFocusCycleRoot();
    com.allenstudio.ir.ui.DatePickerPane var40 = new com.allenstudio.ir.ui.DatePickerPane();
    var40.transferFocus();
    com.allenstudio.ir.ui.Toolbar var42 = new com.allenstudio.ir.ui.Toolbar();
    java.awt.image.ColorModel var43 = var42.getColorModel();
    var42.setEnabled(true);
    java.awt.Component var47 = var42.getComponentAtIndex(1);
    boolean var48 = var42.isFloatable();
    var40.setContent((java.awt.Component)var42);
    java.awt.Dimension var50 = var40.size();
    com.allenstudio.ir.ui.Toolbar var51 = new com.allenstudio.ir.ui.Toolbar();
    boolean var52 = var51.isFloatable();
    var51.show();
    boolean var54 = var51.isRequestFocusEnabled();
    java.awt.Dimension var55 = var51.minimumSize();
    var40.setToolBar((javax.swing.JToolBar)var51);
    java.awt.Image var59 = var40.createImage(10, (-1));
    var34.add((java.awt.Component)var35, (java.lang.Object)10);
    com.allenstudio.ir.ui.Toolbar var61 = new com.allenstudio.ir.ui.Toolbar();
    java.awt.image.ColorModel var62 = var61.getColorModel();
    var61.setEnabled(true);
    var34.add((java.awt.Component)var61, (java.lang.Object)100L, 0);
    java.awt.Component var69 = var0.add((java.awt.Component)var34, 1);
    java.lang.String var71 = var34.getTitleAt(0);
    java.util.Locale var72 = var34.getLocale();
    com.allenstudio.ir.ui.StatusBar var73 = new com.allenstudio.ir.ui.StatusBar();
    var73.enable();
    boolean var75 = var73.isFocusOwner();
    var73.repaint(100L, 32, 4, 32, 4);
    var34.remove((java.awt.Component)var73);
    int var83 = var34.getTabPlacement();
    int var84 = var34.getSelectedIndex();
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var2 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var4);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var5 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var9);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var13);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var14 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var16);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var18 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var20 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var21);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var25);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var28 + "' != '" + "Date Picker"+ "'", var28.equals("Date Picker"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var29);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var31 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var36 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var38);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var39 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var43);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var47);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var48 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var50);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var52 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var54 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var55);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var59);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var62);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var69);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var71 + "' != '" + ""+ "'", var71.equals(""));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var72);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var75 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var83 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var84 == 1);

  }

  public void test199() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest1.test199");


    com.allenstudio.ir.util.XmlElement var0 = new com.allenstudio.ir.util.XmlElement();
    com.allenstudio.ir.util.XmlElement var2 = var0.addSubElement("hi!");
    java.lang.String var4 = var0.getAttribute("C:\\boot.ini");
    com.allenstudio.ir.util.XmlElement var5 = new com.allenstudio.ir.util.XmlElement();
    com.allenstudio.ir.util.XmlElement var7 = var5.addSubElement("hi!");
    var7.notifyObservers((java.lang.Object)(byte)1);
    com.allenstudio.ir.util.XmlElement var10 = new com.allenstudio.ir.util.XmlElement();
    com.allenstudio.ir.util.XmlElement var12 = var10.addSubElement("hi!");
    var12.notifyObservers((java.lang.Object)(byte)1);
    com.allenstudio.ir.util.XmlElement var15 = var7.removeElement(var12);
    com.allenstudio.ir.util.XmlElement var16 = var12.getParent();
    java.util.List var17 = var16.getElements();
    int var18 = var16.countObservers();
    java.lang.Object var21 = var16.addAttribute("hi!", "C:\\boot.ini");
    com.allenstudio.ir.util.XmlElement var22 = var0.addSubElement(var16);
    java.lang.String var24 = var0.getAttribute("This is a testing description. \u03E3\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\u073F\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD");
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var2);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var4);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var7);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var12);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var15);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var16);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var17);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var18 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var21);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var22);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var24);

  }

  public void test200() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest1.test200");


    com.allenstudio.ir.ui.Toolbar var0 = new com.allenstudio.ir.ui.Toolbar();
    java.awt.image.ColorModel var1 = var0.getColorModel();
    var0.setEnabled(true);
    java.awt.Component var5 = var0.getComponentAtIndex(1);
    boolean var6 = var0.requestFocusInWindow();
    java.awt.FocusTraversalPolicy var7 = var0.getFocusTraversalPolicy();
    var0.grabFocus();
    com.allenstudio.ir.ui.DatePickerPane var9 = new com.allenstudio.ir.ui.DatePickerPane();
    javax.swing.KeyStroke[] var10 = var9.getRegisteredKeyStrokes();
    com.allenstudio.ir.ui.Toolbar var11 = new com.allenstudio.ir.ui.Toolbar();
    java.awt.image.ColorModel var12 = var11.getColorModel();
    java.awt.im.InputContext var13 = var11.getInputContext();
    java.awt.Component var15 = var11.getComponentAtIndex(0);
    var9.setToolBar((javax.swing.JToolBar)var11);
    boolean var18 = var9.areFocusTraversalKeysSet(0);
    java.awt.Rectangle var19 = var9.bounds();
    int var20 = var0.getComponentZOrder((java.awt.Component)var9);
    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      java.util.Set var22 = var9.getFocusTraversalKeys((-1));
      fail("Expected exception of type java.lang.IllegalArgumentException");
    } catch (java.lang.IllegalArgumentException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var1);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var5);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var6 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var7);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var10);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var12);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var13);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var15);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var18 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var19);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var20 == (-1));

  }

  public void test201() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest1.test201");


    com.allenstudio.ir.ui.Toolbar var0 = new com.allenstudio.ir.ui.Toolbar();
    java.awt.image.ColorModel var1 = var0.getColorModel();
    var0.setEnabled(true);
    java.awt.Component var5 = var0.getComponentAtIndex(1);
    boolean var6 = var0.requestFocusInWindow();
    java.awt.FocusTraversalPolicy var7 = var0.getFocusTraversalPolicy();
    java.beans.PropertyChangeListener[] var9 = var0.getPropertyChangeListeners("Date Picker");
    boolean var10 = var0.isFontSet();
    com.allenstudio.ir.ui.calendar.MonthlyCalendar var11 = new com.allenstudio.ir.ui.calendar.MonthlyCalendar();
    var0.removeMouseListener((java.awt.event.MouseListener)var11);
    boolean var15 = var0.contains(4, 1);
    javax.swing.JToolTip var16 = var0.createToolTip();
    com.allenstudio.ir.ui.StatusBar var17 = new com.allenstudio.ir.ui.StatusBar();
    javax.swing.JRootPane var18 = var17.getRootPane();
    java.awt.Point var19 = var17.location();
    com.allenstudio.ir.ui.Toolbar var20 = new com.allenstudio.ir.ui.Toolbar();
    boolean var21 = var20.isFloatable();
    java.awt.Component var23 = var20.getComponentAtIndex(10);
    java.lang.Object var24 = var17.getClientProperty((java.lang.Object)10);
    java.awt.Dimension var25 = var17.getMaximumSize();
    java.awt.Dimension var26 = var16.getSize(var25);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var1);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var5);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var6 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var7);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var9);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var10 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var15 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var16);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var18);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var19);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var21 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var23);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var24);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var25);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var26);

  }

  public void test202() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest1.test202");


    com.allenstudio.ir.ui.StatusBar var0 = new com.allenstudio.ir.ui.StatusBar();
    javax.swing.JRootPane var1 = var0.getRootPane();
    java.awt.Point var2 = var0.location();
    com.allenstudio.ir.ui.StatusBar var3 = new com.allenstudio.ir.ui.StatusBar();
    javax.swing.JRootPane var4 = var3.getRootPane();
    java.awt.Point var5 = var3.location();
    com.allenstudio.ir.ui.Toolbar var6 = new com.allenstudio.ir.ui.Toolbar();
    boolean var7 = var6.isFloatable();
    java.awt.Component var9 = var6.getComponentAtIndex(10);
    java.lang.Object var10 = var3.getClientProperty((java.lang.Object)10);
    java.awt.Dimension var11 = var3.getMaximumSize();
    var0.setMinimumSize(var11);
    var0.revalidate();
    com.allenstudio.ir.ui.StatusBar var14 = new com.allenstudio.ir.ui.StatusBar();
    boolean var15 = var14.isBackgroundSet();
    var14.repaint(100L);
    var14.disable();
    java.awt.Dimension var19 = var14.getSize();
    var0.resize(var19);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var1);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var2);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var4);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var5);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var7 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var9);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var10);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var11);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var15 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var19);

  }

  public void test203() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest1.test203");


    com.allenstudio.ir.ui.MainFrame var0 = new com.allenstudio.ir.ui.MainFrame();
    java.lang.String var1 = var0.getWarningString();
    java.lang.String var2 = var0.getWarningString();
    var0.toFront();
    java.awt.im.InputContext var4 = var0.getInputContext();
    java.awt.Graphics var5 = var0.getGraphics();
    java.awt.Dialog.ModalExclusionType var6 = var0.getModalExclusionType();
    var0.dispose();
    boolean var8 = var0.requestFocusInWindow();
    java.awt.MenuBar var9 = var0.getMenuBar();
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var1);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var2);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var4);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var5);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var6);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var8 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var9);

  }

  public void test204() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest1.test204");


    com.allenstudio.ir.ui.MainFrame var0 = new com.allenstudio.ir.ui.MainFrame();
    java.lang.String var1 = var0.getWarningString();
    java.lang.String var2 = var0.getWarningString();
    var0.toFront();
    java.awt.im.InputContext var4 = var0.getInputContext();
    java.awt.Graphics var5 = var0.getGraphics();
    float var6 = var0.getOpacity();
    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      var0.applyResourceBundle(" ");
      fail("Expected exception of type java.util.MissingResourceException");
    } catch (java.util.MissingResourceException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var1);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var2);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var4);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var5);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var6 == 1.0f);

  }

  public void test205() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest1.test205");


    com.allenstudio.ir.ui.MainFrame var0 = new com.allenstudio.ir.ui.MainFrame();
    java.awt.Component var1 = var0.getGlassPane();
    var0.repaint(10L, 10, 6, 1, 5);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var1);

  }

  public void test206() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest1.test206");


    com.allenstudio.ir.ui.NoteList var0 = new com.allenstudio.ir.ui.NoteList();
    com.allenstudio.ir.ui.MainFrame var1 = new com.allenstudio.ir.ui.MainFrame();
    java.lang.String var2 = var1.getWarningString();
    java.awt.Rectangle var3 = var1.getMaximizedBounds();
    java.awt.MenuBar var4 = var1.getMenuBar();
    com.allenstudio.ir.core.plugins.CommonNote var5 = new com.allenstudio.ir.core.plugins.CommonNote();
    var5.resize(0, 1);
    com.allenstudio.ir.ui.NoteListCell var9 = new com.allenstudio.ir.ui.NoteListCell((com.allenstudio.ir.core.plugins.AbstractNote)var5);
    com.allenstudio.ir.ui.StatusBar var10 = new com.allenstudio.ir.ui.StatusBar();
    boolean var11 = var10.isBackgroundSet();
    boolean var14 = var10.contains(10, 100);
    var10.revalidate();
    javax.swing.JToolTip var16 = var10.createToolTip();
    com.allenstudio.ir.ui.StatusBar var17 = new com.allenstudio.ir.ui.StatusBar();
    javax.swing.JRootPane var18 = var17.getRootPane();
    java.awt.Point var19 = var17.location();
    com.allenstudio.ir.ui.StatusBar var20 = new com.allenstudio.ir.ui.StatusBar();
    javax.swing.JRootPane var21 = var20.getRootPane();
    java.awt.Point var22 = var20.location();
    com.allenstudio.ir.ui.Toolbar var23 = new com.allenstudio.ir.ui.Toolbar();
    boolean var24 = var23.isFloatable();
    java.awt.Component var26 = var23.getComponentAtIndex(10);
    java.lang.Object var27 = var20.getClientProperty((java.lang.Object)10);
    java.awt.Dimension var28 = var20.getMaximumSize();
    var17.setMinimumSize(var28);
    java.awt.Rectangle var30 = var17.getBounds();
    var10.scrollRectToVisible(var30);
    var5.repaint(var30);
    var1.setMaximizedBounds(var30);
    int var36 = var0.getScrollableBlockIncrement(var30, 1, 4);
    var0.requestFocus();
    com.allenstudio.ir.core.plugins.CommonNote var38 = new com.allenstudio.ir.core.plugins.CommonNote();
    var38.resize(0, 1);
    com.allenstudio.ir.ui.NoteListCell var42 = new com.allenstudio.ir.ui.NoteListCell((com.allenstudio.ir.core.plugins.AbstractNote)var38);
    int var43 = var42.getIndexInList();
    java.awt.Dimension var44 = var42.getMaximumSize();
    java.awt.LayoutManager var45 = var42.getLayout();
    var0.addCell(var42);
    var42.setIndexInList(2015);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var2);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var3);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var4);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var11 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var14 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var16);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var18);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var19);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var21);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var22);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var24 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var26);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var27);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var28);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var30);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var36 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var43 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var44);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var45);

  }

  public void test207() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest1.test207");


    com.allenstudio.ir.ui.NoteList var0 = new com.allenstudio.ir.ui.NoteList();
    com.allenstudio.ir.ui.NoteList var1 = new com.allenstudio.ir.ui.NoteList();
    com.allenstudio.ir.ui.MainFrame var2 = new com.allenstudio.ir.ui.MainFrame();
    java.lang.String var3 = var2.getWarningString();
    java.awt.Rectangle var4 = var2.getMaximizedBounds();
    java.awt.MenuBar var5 = var2.getMenuBar();
    com.allenstudio.ir.core.plugins.CommonNote var6 = new com.allenstudio.ir.core.plugins.CommonNote();
    var6.resize(0, 1);
    com.allenstudio.ir.ui.NoteListCell var10 = new com.allenstudio.ir.ui.NoteListCell((com.allenstudio.ir.core.plugins.AbstractNote)var6);
    com.allenstudio.ir.ui.StatusBar var11 = new com.allenstudio.ir.ui.StatusBar();
    boolean var12 = var11.isBackgroundSet();
    boolean var15 = var11.contains(10, 100);
    var11.revalidate();
    javax.swing.JToolTip var17 = var11.createToolTip();
    com.allenstudio.ir.ui.StatusBar var18 = new com.allenstudio.ir.ui.StatusBar();
    javax.swing.JRootPane var19 = var18.getRootPane();
    java.awt.Point var20 = var18.location();
    com.allenstudio.ir.ui.StatusBar var21 = new com.allenstudio.ir.ui.StatusBar();
    javax.swing.JRootPane var22 = var21.getRootPane();
    java.awt.Point var23 = var21.location();
    com.allenstudio.ir.ui.Toolbar var24 = new com.allenstudio.ir.ui.Toolbar();
    boolean var25 = var24.isFloatable();
    java.awt.Component var27 = var24.getComponentAtIndex(10);
    java.lang.Object var28 = var21.getClientProperty((java.lang.Object)10);
    java.awt.Dimension var29 = var21.getMaximumSize();
    var18.setMinimumSize(var29);
    java.awt.Rectangle var31 = var18.getBounds();
    var11.scrollRectToVisible(var31);
    var6.repaint(var31);
    var2.setMaximizedBounds(var31);
    int var37 = var1.getScrollableBlockIncrement(var31, 1, 4);
    int var40 = var0.getScrollableBlockIncrement(var31, 0, 0);
    java.awt.Dimension var41 = var0.getMaximumSize();
    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      var0.select(31, false);
      fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException");
    } catch (java.lang.ArrayIndexOutOfBoundsException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var3);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var4);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var5);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var12 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var15 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var17);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var19);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var20);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var22);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var23);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var25 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var27);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var28);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var29);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var31);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var37 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var40 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var41);

  }

  public void test208() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest1.test208");


    com.allenstudio.ir.ui.StatusBar var0 = new com.allenstudio.ir.ui.StatusBar();
    javax.swing.JRootPane var1 = var0.getRootPane();
    java.awt.Point var2 = var0.location();
    com.allenstudio.ir.ui.Toolbar var3 = new com.allenstudio.ir.ui.Toolbar();
    boolean var4 = var3.isFloatable();
    java.awt.Component var6 = var3.getComponentAtIndex(10);
    java.lang.Object var7 = var0.getClientProperty((java.lang.Object)10);
    var0.setFocusTraversalPolicyProvider(false);
    boolean var10 = var0.isManagingFocus();
    int var11 = var0.getHeight();
    var0.grabFocus();
    com.allenstudio.ir.ui.Toolbar var13 = new com.allenstudio.ir.ui.Toolbar();
    java.awt.image.ColorModel var14 = var13.getColorModel();
    var13.setEnabled(true);
    java.awt.Component var18 = var13.getComponentAtIndex(1);
    boolean var19 = var13.requestFocusInWindow();
    java.awt.FocusTraversalPolicy var20 = var13.getFocusTraversalPolicy();
    java.beans.PropertyChangeListener[] var22 = var13.getPropertyChangeListeners("Date Picker");
    boolean var23 = var13.isFontSet();
    com.allenstudio.ir.ui.calendar.MonthlyCalendar var24 = new com.allenstudio.ir.ui.calendar.MonthlyCalendar();
    var13.removeMouseListener((java.awt.event.MouseListener)var24);
    var24.setMonth(4);
    var0.addMouseListener((java.awt.event.MouseListener)var24);
    com.allenstudio.ir.ui.NoteList var29 = new com.allenstudio.ir.ui.NoteList();
    com.allenstudio.ir.ui.MainFrame var30 = new com.allenstudio.ir.ui.MainFrame();
    java.lang.String var31 = var30.getWarningString();
    java.awt.Rectangle var32 = var30.getMaximizedBounds();
    java.awt.MenuBar var33 = var30.getMenuBar();
    com.allenstudio.ir.core.plugins.CommonNote var34 = new com.allenstudio.ir.core.plugins.CommonNote();
    var34.resize(0, 1);
    com.allenstudio.ir.ui.NoteListCell var38 = new com.allenstudio.ir.ui.NoteListCell((com.allenstudio.ir.core.plugins.AbstractNote)var34);
    com.allenstudio.ir.ui.StatusBar var39 = new com.allenstudio.ir.ui.StatusBar();
    boolean var40 = var39.isBackgroundSet();
    boolean var43 = var39.contains(10, 100);
    var39.revalidate();
    javax.swing.JToolTip var45 = var39.createToolTip();
    com.allenstudio.ir.ui.StatusBar var46 = new com.allenstudio.ir.ui.StatusBar();
    javax.swing.JRootPane var47 = var46.getRootPane();
    java.awt.Point var48 = var46.location();
    com.allenstudio.ir.ui.StatusBar var49 = new com.allenstudio.ir.ui.StatusBar();
    javax.swing.JRootPane var50 = var49.getRootPane();
    java.awt.Point var51 = var49.location();
    com.allenstudio.ir.ui.Toolbar var52 = new com.allenstudio.ir.ui.Toolbar();
    boolean var53 = var52.isFloatable();
    java.awt.Component var55 = var52.getComponentAtIndex(10);
    java.lang.Object var56 = var49.getClientProperty((java.lang.Object)10);
    java.awt.Dimension var57 = var49.getMaximumSize();
    var46.setMinimumSize(var57);
    java.awt.Rectangle var59 = var46.getBounds();
    var39.scrollRectToVisible(var59);
    var34.repaint(var59);
    var30.setMaximizedBounds(var59);
    int var65 = var29.getScrollableBlockIncrement(var59, 1, 4);
    com.allenstudio.ir.core.plugins.CommonNote var66 = new com.allenstudio.ir.core.plugins.CommonNote();
    var66.resize(0, 1);
    com.allenstudio.ir.ui.NoteListCell var70 = new com.allenstudio.ir.ui.NoteListCell((com.allenstudio.ir.core.plugins.AbstractNote)var66);
    int var71 = var70.getIndexInList();
    var29.addCell(var70);
    com.allenstudio.ir.core.plugins.CommonNote var73 = new com.allenstudio.ir.core.plugins.CommonNote();
    var73.resize(0, 1);
    com.allenstudio.ir.ui.NoteListCell var77 = new com.allenstudio.ir.ui.NoteListCell((com.allenstudio.ir.core.plugins.AbstractNote)var73);
    int var78 = var77.getIndexInList();
    java.awt.Dimension var79 = var77.getMaximumSize();
    java.awt.LayoutManager var80 = var77.getLayout();
    var29.addCell(var77);
    java.awt.Dimension var82 = var77.getMaximumSize();
    var24.setPreferredSize(var82);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var1);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var2);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var4 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var6);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var7);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var10 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var11 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var14);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var18);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var19 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var20);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var22);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var23 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var31);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var32);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var33);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var40 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var43 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var45);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var47);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var48);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var50);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var51);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var53 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var55);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var56);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var57);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var59);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var65 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var71 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var78 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var79);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var80);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var82);

  }

  public void test209() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest1.test209");


    com.allenstudio.ir.ui.calendar.DateChooser var0 = new com.allenstudio.ir.ui.calendar.DateChooser();
    boolean var2 = var0.requestFocus(false);
    com.allenstudio.ir.ui.StatusBar var3 = new com.allenstudio.ir.ui.StatusBar();
    boolean var4 = var3.isBackgroundSet();
    var3.repaint(100L);
    int var7 = var3.getWidth();
    com.allenstudio.ir.ui.MainFrame var8 = new com.allenstudio.ir.ui.MainFrame();
    java.lang.String var9 = var8.getWarningString();
    java.lang.String var10 = var8.getWarningString();
    java.awt.Container var11 = var8.getFocusCycleRootAncestor();
    com.allenstudio.ir.ui.StatusBar var12 = new com.allenstudio.ir.ui.StatusBar();
    boolean var13 = var12.isBackgroundSet();
    boolean var16 = var12.contains(10, 100);
    var12.revalidate();
    javax.swing.JToolTip var18 = var12.createToolTip();
    com.allenstudio.ir.ui.StatusBar var19 = new com.allenstudio.ir.ui.StatusBar();
    javax.swing.JRootPane var20 = var19.getRootPane();
    java.awt.Point var21 = var19.location();
    com.allenstudio.ir.ui.StatusBar var22 = new com.allenstudio.ir.ui.StatusBar();
    javax.swing.JRootPane var23 = var22.getRootPane();
    java.awt.Point var24 = var22.location();
    com.allenstudio.ir.ui.Toolbar var25 = new com.allenstudio.ir.ui.Toolbar();
    boolean var26 = var25.isFloatable();
    java.awt.Component var28 = var25.getComponentAtIndex(10);
    java.lang.Object var29 = var22.getClientProperty((java.lang.Object)10);
    java.awt.Dimension var30 = var22.getMaximumSize();
    var19.setMinimumSize(var30);
    java.awt.Rectangle var32 = var19.getBounds();
    var12.scrollRectToVisible(var32);
    var8.setMaximizedBounds(var32);
    var3.computeVisibleRect(var32);
    var0.paintImmediately(var32);
    float var37 = var0.getAlignmentY();
    var0.removeDateChooserListener();
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var2 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var4 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var7 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var9);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var10);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var11);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var13 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var16 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var18);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var20);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var21);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var23);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var24);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var26 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var28);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var29);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var30);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var32);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var37 == 0.5f);

  }

  public void test210() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest1.test210");


    com.allenstudio.ir.ui.calendar.MonthlyCalendar var0 = new com.allenstudio.ir.ui.calendar.MonthlyCalendar();
    java.awt.Color var1 = var0.getDateBackground();
    java.awt.Color var2 = var0.getHighlightBackground();
    com.allenstudio.ir.ui.Toolbar var3 = new com.allenstudio.ir.ui.Toolbar();
    boolean var4 = var3.isFloatable();
    java.awt.Component var6 = var3.getComponentAtIndex(10);
    com.allenstudio.ir.ui.DatePickerPane var7 = new com.allenstudio.ir.ui.DatePickerPane();
    var7.transferFocus();
    java.awt.Dimension var9 = var7.getMinimumSize();
    com.allenstudio.ir.ui.StatusBar var10 = new com.allenstudio.ir.ui.StatusBar();
    int var11 = var10.getY();
    javax.swing.JToolTip var12 = var10.createToolTip();
    float var13 = var12.getAlignmentY();
    java.awt.Color var14 = var12.getForeground();
    var7.setBackground(var14);
    var3.setForeground(var14);
    var0.setHeaderForeground(var14);
    var0.transferFocusBackward();
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var1);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var2);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var4 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var6);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var9);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var11 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var12);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var13 == 0.5f);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var14);

  }

  public void test211() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest1.test211");


    com.allenstudio.ir.ui.MainFrame var0 = new com.allenstudio.ir.ui.MainFrame();
    java.lang.String var1 = var0.getWarningString();
    java.awt.Rectangle var2 = var0.getMaximizedBounds();
    java.awt.MenuBar var3 = var0.getMenuBar();
    com.allenstudio.ir.ui.NoteListsTabPane var4 = new com.allenstudio.ir.ui.NoteListsTabPane();
    var0.widgetChanged((com.allenstudio.ir.core.InspirentoWidget)var4);
    com.allenstudio.ir.ui.MainFrame var6 = new com.allenstudio.ir.ui.MainFrame();
    java.lang.String var7 = var6.getWarningString();
    java.awt.Rectangle var8 = var6.getMaximizedBounds();
    java.awt.MenuBar var9 = var6.getMenuBar();
    com.allenstudio.ir.ui.NoteListsTabPane var10 = new com.allenstudio.ir.ui.NoteListsTabPane();
    com.allenstudio.ir.ui.Toolbar var11 = new com.allenstudio.ir.ui.Toolbar();
    boolean var12 = var11.isFloatable();
    var11.show();
    java.awt.image.ColorModel var14 = var11.getColorModel();
    boolean var15 = var11.isFocusCycleRoot();
    com.allenstudio.ir.ui.DatePickerPane var16 = new com.allenstudio.ir.ui.DatePickerPane();
    var16.transferFocus();
    com.allenstudio.ir.ui.Toolbar var18 = new com.allenstudio.ir.ui.Toolbar();
    java.awt.image.ColorModel var19 = var18.getColorModel();
    var18.setEnabled(true);
    java.awt.Component var23 = var18.getComponentAtIndex(1);
    boolean var24 = var18.isFloatable();
    var16.setContent((java.awt.Component)var18);
    java.awt.Dimension var26 = var16.size();
    com.allenstudio.ir.ui.Toolbar var27 = new com.allenstudio.ir.ui.Toolbar();
    boolean var28 = var27.isFloatable();
    var27.show();
    boolean var30 = var27.isRequestFocusEnabled();
    java.awt.Dimension var31 = var27.minimumSize();
    var16.setToolBar((javax.swing.JToolBar)var27);
    java.awt.Image var35 = var16.createImage(10, (-1));
    var10.add((java.awt.Component)var11, (java.lang.Object)10);
    var6.widgetChanged((com.allenstudio.ir.core.InspirentoWidget)var10);
    java.awt.event.ComponentListener[] var38 = var10.getComponentListeners();
    com.allenstudio.ir.ui.calendar.MonthlyCalendar var39 = new com.allenstudio.ir.ui.calendar.MonthlyCalendar();
    java.awt.Color var40 = var39.getDateBackground();
    var39.setYearMonth(1, (-1));
    java.util.Calendar var44 = var39.getSelectedDate();
    var10.remove((java.awt.Component)var39);
    var4.removeMouseListener((java.awt.event.MouseListener)var39);
    com.allenstudio.ir.ui.StatusBar var47 = new com.allenstudio.ir.ui.StatusBar();
    boolean var48 = var47.isBackgroundSet();
    boolean var51 = var47.contains(10, 100);
    var47.revalidate();
    var47.setEnabled(false);
    com.allenstudio.ir.ui.DatePickerPane var55 = new com.allenstudio.ir.ui.DatePickerPane();
    java.lang.String var56 = var55.getTitle();
    boolean var57 = var55.isManagingFocus();
    java.awt.LayoutManager var58 = var55.getLayout();
    var47.setLayout(var58);
    var47.setRequestFocusEnabled(true);
    java.lang.Object var62 = var4.getClientProperty((java.lang.Object)var47);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var1);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var2);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var3);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var7);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var8);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var9);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var12 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var14);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var15 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var19);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var23);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var24 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var26);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var28 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var30 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var31);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var35);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var38);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var40);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var44);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var48 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var51 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var56 + "' != '" + "Date Picker"+ "'", var56.equals("Date Picker"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var57 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var58);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var62);

  }

  public void test212() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest1.test212");


    com.allenstudio.ir.ui.MainFrame var0 = new com.allenstudio.ir.ui.MainFrame();
    java.lang.String var1 = var0.getWarningString();
    java.lang.String var2 = var0.getWarningString();
    boolean var3 = var0.isAutoRequestFocus();
    boolean var4 = var0.isResizable();
    var0.setLocation(31, 30);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var1);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var2);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var3 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var4 == true);

  }

  public void test213() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest1.test213");


    com.allenstudio.ir.ui.NoteListsTabPane var0 = new com.allenstudio.ir.ui.NoteListsTabPane();
    com.allenstudio.ir.ui.Toolbar var1 = new com.allenstudio.ir.ui.Toolbar();
    boolean var2 = var1.isFloatable();
    var1.show();
    java.awt.image.ColorModel var4 = var1.getColorModel();
    boolean var5 = var1.isFocusCycleRoot();
    com.allenstudio.ir.ui.DatePickerPane var6 = new com.allenstudio.ir.ui.DatePickerPane();
    var6.transferFocus();
    com.allenstudio.ir.ui.Toolbar var8 = new com.allenstudio.ir.ui.Toolbar();
    java.awt.image.ColorModel var9 = var8.getColorModel();
    var8.setEnabled(true);
    java.awt.Component var13 = var8.getComponentAtIndex(1);
    boolean var14 = var8.isFloatable();
    var6.setContent((java.awt.Component)var8);
    java.awt.Dimension var16 = var6.size();
    com.allenstudio.ir.ui.Toolbar var17 = new com.allenstudio.ir.ui.Toolbar();
    boolean var18 = var17.isFloatable();
    var17.show();
    boolean var20 = var17.isRequestFocusEnabled();
    java.awt.Dimension var21 = var17.minimumSize();
    var6.setToolBar((javax.swing.JToolBar)var17);
    java.awt.Image var25 = var6.createImage(10, (-1));
    var0.add((java.awt.Component)var1, (java.lang.Object)10);
    com.allenstudio.ir.ui.Toolbar var27 = new com.allenstudio.ir.ui.Toolbar();
    boolean var28 = var27.isFloatable();
    java.awt.Component var30 = var27.getComponentAtIndex(10);
    boolean var31 = var27.isLightweight();
    java.awt.Component var32 = var0.add((java.awt.Component)var27);
    com.allenstudio.ir.ui.StatusBar var34 = new com.allenstudio.ir.ui.StatusBar();
    int var35 = var34.getY();
    var34.disable();
    var34.firePropertyChange("hi!", (byte)(-1), (byte)10);
    var0.setComponentAt(0, (java.awt.Component)var34);
    var34.setVerifyInputWhenFocusTarget(true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var2 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var4);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var5 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var9);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var13);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var14 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var16);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var18 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var20 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var21);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var25);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var28 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var30);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var31 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var32);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var35 == 0);

  }

  public void test214() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest1.test214");


    com.allenstudio.ir.util.XmlElement var0 = new com.allenstudio.ir.util.XmlElement();
    com.allenstudio.ir.util.XmlElement var2 = var0.addSubElement("hi!");
    com.allenstudio.ir.util.XmlElement var4 = var0.getElement("hi!");
    var0.deleteObservers();
    var0.setData("ToolBarUI");
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var2);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var4);

  }

  public void test215() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest1.test215");


    com.allenstudio.ir.ui.StatusBar var0 = new com.allenstudio.ir.ui.StatusBar();
    boolean var1 = var0.isBackgroundSet();
    boolean var4 = var0.contains(10, 100);
    var0.revalidate();
    int var8 = var0.getBaseline(1, 100);
    java.awt.peer.ComponentPeer var9 = var0.getPeer();
    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      boolean var11 = var0.areFocusTraversalKeysSet(31);
      fail("Expected exception of type java.lang.IllegalArgumentException");
    } catch (java.lang.IllegalArgumentException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var1 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var4 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var8 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var9);

  }

  public void test216() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest1.test216");


    com.allenstudio.ir.ui.MainFrame var0 = new com.allenstudio.ir.ui.MainFrame();
    java.lang.String var1 = var0.getWarningString();
    java.awt.Rectangle var2 = var0.getMaximizedBounds();
    java.awt.MenuBar var3 = var0.getMenuBar();
    com.allenstudio.ir.ui.NoteListsTabPane var4 = new com.allenstudio.ir.ui.NoteListsTabPane();
    com.allenstudio.ir.ui.Toolbar var5 = new com.allenstudio.ir.ui.Toolbar();
    boolean var6 = var5.isFloatable();
    var5.show();
    java.awt.image.ColorModel var8 = var5.getColorModel();
    boolean var9 = var5.isFocusCycleRoot();
    com.allenstudio.ir.ui.DatePickerPane var10 = new com.allenstudio.ir.ui.DatePickerPane();
    var10.transferFocus();
    com.allenstudio.ir.ui.Toolbar var12 = new com.allenstudio.ir.ui.Toolbar();
    java.awt.image.ColorModel var13 = var12.getColorModel();
    var12.setEnabled(true);
    java.awt.Component var17 = var12.getComponentAtIndex(1);
    boolean var18 = var12.isFloatable();
    var10.setContent((java.awt.Component)var12);
    java.awt.Dimension var20 = var10.size();
    com.allenstudio.ir.ui.Toolbar var21 = new com.allenstudio.ir.ui.Toolbar();
    boolean var22 = var21.isFloatable();
    var21.show();
    boolean var24 = var21.isRequestFocusEnabled();
    java.awt.Dimension var25 = var21.minimumSize();
    var10.setToolBar((javax.swing.JToolBar)var21);
    java.awt.Image var29 = var10.createImage(10, (-1));
    var4.add((java.awt.Component)var5, (java.lang.Object)10);
    var0.widgetChanged((com.allenstudio.ir.core.InspirentoWidget)var4);
    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      var4.setToolTipTextAt(5, " ");
      fail("Expected exception of type java.lang.IndexOutOfBoundsException");
    } catch (java.lang.IndexOutOfBoundsException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var1);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var2);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var3);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var6 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var8);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var9 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var13);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var17);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var18 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var20);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var22 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var24 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var25);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var29);

  }

  public void test217() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest1.test217");


    com.allenstudio.ir.ui.calendar.MonthlyCalendar var0 = new com.allenstudio.ir.ui.calendar.MonthlyCalendar();
    javax.swing.JComponent var1 = var0.getHeaderComponent();
    var0.setWeekStartOnSunday(true);
    java.awt.Font var4 = var0.getHeaderFont();
    int var5 = var0.getSelectedDay();
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var1);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var4);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var5 == 31);

  }

  public void test218() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest1.test218");


    com.allenstudio.ir.ui.NoteListsTabPane var0 = new com.allenstudio.ir.ui.NoteListsTabPane();
    com.allenstudio.ir.ui.Toolbar var1 = new com.allenstudio.ir.ui.Toolbar();
    boolean var2 = var1.isFloatable();
    var1.show();
    java.awt.image.ColorModel var4 = var1.getColorModel();
    boolean var5 = var1.isFocusCycleRoot();
    com.allenstudio.ir.ui.DatePickerPane var6 = new com.allenstudio.ir.ui.DatePickerPane();
    var6.transferFocus();
    com.allenstudio.ir.ui.Toolbar var8 = new com.allenstudio.ir.ui.Toolbar();
    java.awt.image.ColorModel var9 = var8.getColorModel();
    var8.setEnabled(true);
    java.awt.Component var13 = var8.getComponentAtIndex(1);
    boolean var14 = var8.isFloatable();
    var6.setContent((java.awt.Component)var8);
    java.awt.Dimension var16 = var6.size();
    com.allenstudio.ir.ui.Toolbar var17 = new com.allenstudio.ir.ui.Toolbar();
    boolean var18 = var17.isFloatable();
    var17.show();
    boolean var20 = var17.isRequestFocusEnabled();
    java.awt.Dimension var21 = var17.minimumSize();
    var6.setToolBar((javax.swing.JToolBar)var17);
    java.awt.Image var25 = var6.createImage(10, (-1));
    var0.add((java.awt.Component)var1, (java.lang.Object)10);
    com.allenstudio.ir.ui.DatePickerPane var27 = new com.allenstudio.ir.ui.DatePickerPane();
    java.lang.String var28 = var27.getTitle();
    java.awt.dnd.DropTarget var29 = var27.getDropTarget();
    com.allenstudio.ir.util.XmlElement var30 = new com.allenstudio.ir.util.XmlElement();
    boolean var31 = var30.hasChanged();
    var0.add((java.awt.Component)var27, (java.lang.Object)var31, (-1));
    com.allenstudio.ir.ui.NoteListsTabPane var34 = new com.allenstudio.ir.ui.NoteListsTabPane();
    com.allenstudio.ir.ui.Toolbar var35 = new com.allenstudio.ir.ui.Toolbar();
    boolean var36 = var35.isFloatable();
    var35.show();
    java.awt.image.ColorModel var38 = var35.getColorModel();
    boolean var39 = var35.isFocusCycleRoot();
    com.allenstudio.ir.ui.DatePickerPane var40 = new com.allenstudio.ir.ui.DatePickerPane();
    var40.transferFocus();
    com.allenstudio.ir.ui.Toolbar var42 = new com.allenstudio.ir.ui.Toolbar();
    java.awt.image.ColorModel var43 = var42.getColorModel();
    var42.setEnabled(true);
    java.awt.Component var47 = var42.getComponentAtIndex(1);
    boolean var48 = var42.isFloatable();
    var40.setContent((java.awt.Component)var42);
    java.awt.Dimension var50 = var40.size();
    com.allenstudio.ir.ui.Toolbar var51 = new com.allenstudio.ir.ui.Toolbar();
    boolean var52 = var51.isFloatable();
    var51.show();
    boolean var54 = var51.isRequestFocusEnabled();
    java.awt.Dimension var55 = var51.minimumSize();
    var40.setToolBar((javax.swing.JToolBar)var51);
    java.awt.Image var59 = var40.createImage(10, (-1));
    var34.add((java.awt.Component)var35, (java.lang.Object)10);
    com.allenstudio.ir.ui.Toolbar var61 = new com.allenstudio.ir.ui.Toolbar();
    java.awt.image.ColorModel var62 = var61.getColorModel();
    var61.setEnabled(true);
    var34.add((java.awt.Component)var61, (java.lang.Object)100L, 0);
    java.awt.Component var69 = var0.add((java.awt.Component)var34, 1);
    java.awt.Rectangle var70 = var0.bounds();
    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      var0.setMnemonicAt(10, 4);
      fail("Expected exception of type java.lang.IndexOutOfBoundsException");
    } catch (java.lang.IndexOutOfBoundsException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var2 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var4);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var5 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var9);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var13);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var14 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var16);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var18 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var20 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var21);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var25);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var28 + "' != '" + "Date Picker"+ "'", var28.equals("Date Picker"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var29);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var31 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var36 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var38);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var39 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var43);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var47);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var48 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var50);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var52 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var54 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var55);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var59);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var62);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var69);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var70);

  }

  public void test219() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest1.test219");


    com.allenstudio.ir.ui.MainFrame var0 = new com.allenstudio.ir.ui.MainFrame();
    java.lang.String var1 = var0.getWarningString();
    java.awt.Rectangle var2 = var0.getMaximizedBounds();
    java.awt.MenuBar var3 = var0.getMenuBar();
    com.allenstudio.ir.ui.NoteListsTabPane var4 = new com.allenstudio.ir.ui.NoteListsTabPane();
    var0.widgetChanged((com.allenstudio.ir.core.InspirentoWidget)var4);
    var0.dispose();
    var0.setLocation(0, 0);
    boolean var10 = var0.isFocusTraversalPolicySet();
    com.allenstudio.ir.ui.StatusBar var12 = new com.allenstudio.ir.ui.StatusBar();
    int var13 = var12.getY();
    javax.swing.JToolTip var14 = var12.createToolTip();
    float var15 = var14.getAlignmentY();
    java.awt.Color var16 = var14.getForeground();
    boolean var17 = var14.isDisplayable();
    java.awt.Dimension var18 = var14.getPreferredSize();
    com.allenstudio.ir.util.XmlElement var20 = new com.allenstudio.ir.util.XmlElement();
    com.allenstudio.ir.util.XmlElement var22 = var20.addSubElement("hi!");
    com.allenstudio.ir.util.XmlElement var25 = var22.addSubElement("", "hi!");
    java.util.Hashtable var26 = var25.getAttributes();
    com.allenstudio.ir.ui.MainFrame var27 = new com.allenstudio.ir.ui.MainFrame();
    java.lang.String var28 = var27.getWarningString();
    java.awt.Rectangle var29 = var27.getMaximizedBounds();
    java.awt.MenuBar var30 = var27.getMenuBar();
    com.allenstudio.ir.ui.NoteListsTabPane var31 = new com.allenstudio.ir.ui.NoteListsTabPane();
    var27.widgetChanged((com.allenstudio.ir.core.InspirentoWidget)var31);
    var27.dispose();
    java.lang.Object var34 = var26.get((java.lang.Object)var27);
    java.util.Set var35 = var26.entrySet();
    var14.setFocusTraversalKeys(1, var35);
    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      var0.setFocusTraversalKeys(100, var35);
      fail("Expected exception of type java.lang.IllegalArgumentException");
    } catch (java.lang.IllegalArgumentException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var1);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var2);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var3);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var10 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var13 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var14);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var15 == 0.5f);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var16);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var17 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var18);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var22);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var25);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var26);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var28);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var29);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var30);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var34);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var35);

  }

  public void test220() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest1.test220");


    com.allenstudio.ir.util.XmlIO var0 = new com.allenstudio.ir.util.XmlIO();
    var0.errorDialog("hi!");
    char[] var5 = new char[] { 'a', '4'};
    var0.ignorableWhitespace(var5, 100, 0);
    var0.processingInstruction(" ", "This is a testing description. \u03E3\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\u073F\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD");
    var0.endPrefixMapping("This is a testing description. \u03E3\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\u073F\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD");
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var5);

  }

  public void test221() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest1.test221");


    com.allenstudio.ir.ui.DatePickerPane var0 = new com.allenstudio.ir.ui.DatePickerPane();
    var0.transferFocus();
    java.awt.Dimension var2 = var0.getMinimumSize();
    com.allenstudio.ir.ui.StatusBar var3 = new com.allenstudio.ir.ui.StatusBar();
    int var4 = var3.getY();
    javax.swing.JToolTip var5 = var3.createToolTip();
    float var6 = var5.getAlignmentY();
    java.awt.Color var7 = var5.getForeground();
    var0.setBackground(var7);
    java.awt.Component.BaselineResizeBehavior var9 = var0.getBaselineResizeBehavior();
    var0.doLayout();
    var0.layout();
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var2);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var4 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var5);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var6 == 0.5f);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var7);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var9);

  }

  public void test222() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest1.test222");


    com.allenstudio.ir.ui.calendar.MonthlyCalendarModel var0 = new com.allenstudio.ir.ui.calendar.MonthlyCalendarModel();
    int var1 = var0.getSelectedDate();
    boolean var3 = var0.isMarked(31);
    var0.setMarked(1, false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var1 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var3 == false);

  }

  public void test223() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest1.test223");


    com.allenstudio.ir.util.XmlElement var0 = new com.allenstudio.ir.util.XmlElement();
    com.allenstudio.ir.util.XmlElement var2 = var0.addSubElement("hi!");
    com.allenstudio.ir.util.XmlElement var3 = new com.allenstudio.ir.util.XmlElement();
    com.allenstudio.ir.util.XmlElement var5 = var3.addSubElement("hi!");
    var5.notifyObservers((java.lang.Object)(byte)1);
    var0.append(var5);
    com.allenstudio.ir.util.XmlElement var11 = var0.addSubElement("C:\\boot.ini", "This is a testing description. \u03E3\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\u073F\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD");
    java.lang.String var14 = var0.getAttribute("Title", "Date Picker");
    com.allenstudio.ir.util.XmlElement var16 = new com.allenstudio.ir.util.XmlElement();
    com.allenstudio.ir.util.XmlElement var18 = var16.addSubElement("hi!");
    java.lang.String var20 = var16.getAttribute("C:\\boot.ini");
    java.util.Hashtable var21 = var16.getAttributes();
    com.allenstudio.ir.util.XmlElement var22 = new com.allenstudio.ir.util.XmlElement("PanelUI", var21);
    java.lang.Object var25 = var22.addAttribute("This is a testing description. \u03E3\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\u073F\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD", "frame2");
    boolean var26 = var0.addElement(var22);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var2);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var5);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var11);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var14 + "' != '" + "Date Picker"+ "'", var14.equals("Date Picker"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var18);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var20);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var21);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var25);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var26 == true);

  }

  public void test224() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest1.test224");


    com.allenstudio.ir.ui.StatusBar var0 = new com.allenstudio.ir.ui.StatusBar();
    var0.firePropertyChange("com.allenstudio.ir.ui.StatusBar[,0,0,0x0,invalid,layout=java.awt.BorderLayout,alignmentX=0.0,alignmentY=0.0,border=,flags=0,maximumSize=,minimumSize=,preferredSize=]", ' ', ' ');
    com.allenstudio.ir.ui.DatePickerPane var5 = new com.allenstudio.ir.ui.DatePickerPane();
    javax.swing.KeyStroke[] var6 = var5.getRegisteredKeyStrokes();
    com.allenstudio.ir.ui.Toolbar var7 = new com.allenstudio.ir.ui.Toolbar();
    java.awt.image.ColorModel var8 = var7.getColorModel();
    java.awt.im.InputContext var9 = var7.getInputContext();
    java.awt.Component var11 = var7.getComponentAtIndex(0);
    var5.setToolBar((javax.swing.JToolBar)var7);
    boolean var14 = var5.areFocusTraversalKeysSet(0);
    javax.swing.border.Border var15 = var5.getContentPaneBorder();
    com.allenstudio.ir.ui.MainFrame var16 = new com.allenstudio.ir.ui.MainFrame();
    java.lang.String var17 = var16.getWarningString();
    java.awt.Rectangle var18 = var16.getMaximizedBounds();
    java.awt.MenuBar var19 = var16.getMenuBar();
    com.allenstudio.ir.ui.NoteListsTabPane var20 = new com.allenstudio.ir.ui.NoteListsTabPane();
    com.allenstudio.ir.ui.Toolbar var21 = new com.allenstudio.ir.ui.Toolbar();
    boolean var22 = var21.isFloatable();
    var21.show();
    java.awt.image.ColorModel var24 = var21.getColorModel();
    boolean var25 = var21.isFocusCycleRoot();
    com.allenstudio.ir.ui.DatePickerPane var26 = new com.allenstudio.ir.ui.DatePickerPane();
    var26.transferFocus();
    com.allenstudio.ir.ui.Toolbar var28 = new com.allenstudio.ir.ui.Toolbar();
    java.awt.image.ColorModel var29 = var28.getColorModel();
    var28.setEnabled(true);
    java.awt.Component var33 = var28.getComponentAtIndex(1);
    boolean var34 = var28.isFloatable();
    var26.setContent((java.awt.Component)var28);
    java.awt.Dimension var36 = var26.size();
    com.allenstudio.ir.ui.Toolbar var37 = new com.allenstudio.ir.ui.Toolbar();
    boolean var38 = var37.isFloatable();
    var37.show();
    boolean var40 = var37.isRequestFocusEnabled();
    java.awt.Dimension var41 = var37.minimumSize();
    var26.setToolBar((javax.swing.JToolBar)var37);
    java.awt.Image var45 = var26.createImage(10, (-1));
    var20.add((java.awt.Component)var21, (java.lang.Object)10);
    var16.widgetChanged((com.allenstudio.ir.core.InspirentoWidget)var20);
    java.awt.event.ComponentListener[] var48 = var20.getComponentListeners();
    com.allenstudio.ir.ui.calendar.MonthlyCalendar var49 = new com.allenstudio.ir.ui.calendar.MonthlyCalendar();
    java.awt.Color var50 = var49.getDateBackground();
    var49.setYearMonth(1, (-1));
    java.util.Calendar var54 = var49.getSelectedDate();
    var20.remove((java.awt.Component)var49);
    var5.removeMouseListener((java.awt.event.MouseListener)var49);
    boolean var57 = var49.getMouseListeningEnabled();
    int var58 = var49.getSelectedDay();
    var0.removeMouseMotionListener((java.awt.event.MouseMotionListener)var49);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var6);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var8);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var9);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var11);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var14 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var15);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var17);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var18);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var19);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var22 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var24);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var25 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var29);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var33);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var34 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var36);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var38 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var40 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var41);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var45);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var48);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var50);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var54);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var57 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var58 == 30);

  }

  public void test225() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest1.test225");


    com.allenstudio.ir.ui.StatusBar var0 = new com.allenstudio.ir.ui.StatusBar();
    int var1 = var0.getY();
    java.awt.Dimension var2 = var0.getMaximumSize();
    javax.swing.InputMap var3 = var0.getInputMap();
    java.awt.Dimension var4 = var0.getMinimumSize();
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var1 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var2);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var3);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var4);

  }

  public void test226() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest1.test226");


    com.allenstudio.ir.ui.NoteListsTabPane var0 = new com.allenstudio.ir.ui.NoteListsTabPane();
    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      var0.remove(32);
      fail("Expected exception of type java.lang.IndexOutOfBoundsException");
    } catch (java.lang.IndexOutOfBoundsException e) {
      // Expected exception.
    }

  }

  public void test227() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest1.test227");


    com.allenstudio.ir.util.XmlElement var0 = new com.allenstudio.ir.util.XmlElement();
    com.allenstudio.ir.util.XmlElement var2 = var0.addSubElement("hi!");
    com.allenstudio.ir.util.XmlElement var3 = new com.allenstudio.ir.util.XmlElement();
    com.allenstudio.ir.util.XmlElement var5 = var3.addSubElement("hi!");
    var5.notifyObservers((java.lang.Object)(byte)1);
    var0.append(var5);
    com.allenstudio.ir.util.XmlElement var9 = new com.allenstudio.ir.util.XmlElement();
    com.allenstudio.ir.util.XmlElement var11 = var9.addSubElement("hi!");
    java.lang.String var13 = var9.getAttribute("C:\\boot.ini");
    com.allenstudio.ir.util.XmlElement var14 = var5.addSubElement(var9);
    com.allenstudio.ir.util.XmlElement var15 = var14.getParent();
    com.allenstudio.ir.util.XmlIO var16 = new com.allenstudio.ir.util.XmlIO(var14);
    int var17 = var14.count();
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var2);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var5);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var11);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var13);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var14);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var15);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var17 == 1);

  }

  public void test228() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest1.test228");


    com.allenstudio.ir.ui.Toolbar var0 = new com.allenstudio.ir.ui.Toolbar();
    java.awt.image.ColorModel var1 = var0.getColorModel();
    var0.setEnabled(true);
    java.awt.Component var5 = var0.getComponentAtIndex(1);
    java.awt.Component var7 = var0.getComponentAtIndex(1);
    java.awt.event.InputMethodListener[] var8 = var0.getInputMethodListeners();
    com.allenstudio.ir.ui.Toolbar var9 = new com.allenstudio.ir.ui.Toolbar();
    java.awt.image.ColorModel var10 = var9.getColorModel();
    var9.setEnabled(true);
    java.awt.Component var14 = var9.getComponentAtIndex(1);
    boolean var15 = var9.requestFocusInWindow();
    java.awt.FocusTraversalPolicy var16 = var9.getFocusTraversalPolicy();
    var9.enable();
    javax.swing.plaf.ToolBarUI var18 = var9.getUI();
    var0.setUI(var18);
    com.allenstudio.ir.ui.Toolbar var20 = new com.allenstudio.ir.ui.Toolbar();
    java.awt.image.ColorModel var21 = var20.getColorModel();
    var20.setEnabled(true);
    java.awt.Component var25 = var20.getComponentAtIndex(1);
    boolean var26 = var20.isValidateRoot();
    boolean var27 = var20.isPaintingTile();
    var20.setVisible(false);
    javax.swing.plaf.ToolBarUI var30 = var20.getUI();
    var0.setUI(var30);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var1);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var5);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var7);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var8);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var10);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var14);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var15 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var16);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var18);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var21);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var25);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var26 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var27 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var30);

  }

  public void test229() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest1.test229");


    com.allenstudio.ir.ui.DatePickerPane var0 = new com.allenstudio.ir.ui.DatePickerPane();
    javax.swing.KeyStroke[] var1 = var0.getRegisteredKeyStrokes();
    com.allenstudio.ir.ui.Toolbar var2 = new com.allenstudio.ir.ui.Toolbar();
    java.awt.image.ColorModel var3 = var2.getColorModel();
    java.awt.im.InputContext var4 = var2.getInputContext();
    java.awt.Component var6 = var2.getComponentAtIndex(0);
    var0.setToolBar((javax.swing.JToolBar)var2);
    boolean var9 = var0.areFocusTraversalKeysSet(0);
    javax.swing.border.Border var10 = var0.getContentPaneBorder();
    com.allenstudio.ir.ui.MainFrame var11 = new com.allenstudio.ir.ui.MainFrame();
    java.lang.String var12 = var11.getWarningString();
    java.awt.Rectangle var13 = var11.getMaximizedBounds();
    java.awt.MenuBar var14 = var11.getMenuBar();
    com.allenstudio.ir.ui.NoteListsTabPane var15 = new com.allenstudio.ir.ui.NoteListsTabPane();
    com.allenstudio.ir.ui.Toolbar var16 = new com.allenstudio.ir.ui.Toolbar();
    boolean var17 = var16.isFloatable();
    var16.show();
    java.awt.image.ColorModel var19 = var16.getColorModel();
    boolean var20 = var16.isFocusCycleRoot();
    com.allenstudio.ir.ui.DatePickerPane var21 = new com.allenstudio.ir.ui.DatePickerPane();
    var21.transferFocus();
    com.allenstudio.ir.ui.Toolbar var23 = new com.allenstudio.ir.ui.Toolbar();
    java.awt.image.ColorModel var24 = var23.getColorModel();
    var23.setEnabled(true);
    java.awt.Component var28 = var23.getComponentAtIndex(1);
    boolean var29 = var23.isFloatable();
    var21.setContent((java.awt.Component)var23);
    java.awt.Dimension var31 = var21.size();
    com.allenstudio.ir.ui.Toolbar var32 = new com.allenstudio.ir.ui.Toolbar();
    boolean var33 = var32.isFloatable();
    var32.show();
    boolean var35 = var32.isRequestFocusEnabled();
    java.awt.Dimension var36 = var32.minimumSize();
    var21.setToolBar((javax.swing.JToolBar)var32);
    java.awt.Image var40 = var21.createImage(10, (-1));
    var15.add((java.awt.Component)var16, (java.lang.Object)10);
    var11.widgetChanged((com.allenstudio.ir.core.InspirentoWidget)var15);
    java.awt.event.ComponentListener[] var43 = var15.getComponentListeners();
    com.allenstudio.ir.ui.calendar.MonthlyCalendar var44 = new com.allenstudio.ir.ui.calendar.MonthlyCalendar();
    java.awt.Color var45 = var44.getDateBackground();
    var44.setYearMonth(1, (-1));
    java.util.Calendar var49 = var44.getSelectedDate();
    var15.remove((java.awt.Component)var44);
    var0.removeMouseListener((java.awt.event.MouseListener)var44);
    com.allenstudio.ir.ui.Toolbar var52 = new com.allenstudio.ir.ui.Toolbar();
    java.awt.image.ColorModel var53 = var52.getColorModel();
    var52.setEnabled(true);
    java.awt.Component var57 = var52.getComponentAtIndex(1);
    boolean var58 = var52.requestFocusInWindow();
    java.awt.FocusTraversalPolicy var59 = var52.getFocusTraversalPolicy();
    java.beans.PropertyChangeListener[] var61 = var52.getPropertyChangeListeners("Date Picker");
    boolean var62 = var52.isFontSet();
    com.allenstudio.ir.ui.calendar.MonthlyCalendar var63 = new com.allenstudio.ir.ui.calendar.MonthlyCalendar();
    var52.removeMouseListener((java.awt.event.MouseListener)var63);
    boolean var67 = var52.contains(4, 1);
    java.awt.Insets var68 = var52.getMargin();
    java.awt.Font var69 = var52.getFont();
    var44.setHeaderFont(var69);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var1);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var3);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var4);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var6);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var9 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var10);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var12);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var13);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var14);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var17 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var19);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var20 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var24);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var28);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var29 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var31);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var33 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var35 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var36);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var40);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var43);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var45);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var49);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var53);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var57);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var58 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var59);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var61);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var62 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var67 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var68);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var69);

  }

  public void test230() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest1.test230");


    com.allenstudio.ir.ui.Toolbar var0 = new com.allenstudio.ir.ui.Toolbar();
    java.awt.event.MouseWheelListener[] var1 = var0.getMouseWheelListeners();
    java.awt.LayoutManager var2 = var0.getLayout();
    com.allenstudio.ir.ui.Toolbar var3 = new com.allenstudio.ir.ui.Toolbar();
    java.awt.image.ColorModel var4 = var3.getColorModel();
    var3.setEnabled(true);
    java.awt.Component var8 = var3.getComponentAtIndex(1);
    boolean var9 = var3.isFloatable();
    javax.swing.InputMap var10 = var3.getInputMap();
    com.allenstudio.ir.ui.Toolbar var11 = new com.allenstudio.ir.ui.Toolbar();
    boolean var12 = var11.isFloatable();
    var11.show();
    javax.swing.plaf.ToolBarUI var14 = var11.getUI();
    var3.setUI(var14);
    var0.setUI(var14);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var1);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var2);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var4);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var8);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var9 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var10);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var12 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var14);

  }

  public void test231() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest1.test231");


    com.allenstudio.ir.ui.calendar.DateChooser var0 = new com.allenstudio.ir.ui.calendar.DateChooser();
    boolean var2 = var0.requestFocus(false);
    var0.repaint(1L, 32, (-1), 100, 1);
    java.awt.Component.BaselineResizeBehavior var9 = var0.getBaselineResizeBehavior();
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var2 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var9);

  }

  public void test232() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest1.test232");


    com.allenstudio.ir.ui.MainFrame var0 = new com.allenstudio.ir.ui.MainFrame();
    java.lang.String var1 = var0.getWarningString();
    java.lang.String var2 = var0.getWarningString();
    var0.toFront();
    java.awt.im.InputContext var4 = var0.getInputContext();
    var0.removeNotify();
    java.lang.String var6 = var0.getName();
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var1);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var2);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var4);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var6 + "' != '" + "frame3"+ "'", var6.equals("frame3"));

  }

  public void test233() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest1.test233");


    com.allenstudio.ir.ui.NoteListsTabPane var0 = new com.allenstudio.ir.ui.NoteListsTabPane();
    com.allenstudio.ir.ui.Toolbar var1 = new com.allenstudio.ir.ui.Toolbar();
    boolean var2 = var1.isFloatable();
    var1.show();
    java.awt.image.ColorModel var4 = var1.getColorModel();
    boolean var5 = var1.isFocusCycleRoot();
    com.allenstudio.ir.ui.DatePickerPane var6 = new com.allenstudio.ir.ui.DatePickerPane();
    var6.transferFocus();
    com.allenstudio.ir.ui.Toolbar var8 = new com.allenstudio.ir.ui.Toolbar();
    java.awt.image.ColorModel var9 = var8.getColorModel();
    var8.setEnabled(true);
    java.awt.Component var13 = var8.getComponentAtIndex(1);
    boolean var14 = var8.isFloatable();
    var6.setContent((java.awt.Component)var8);
    java.awt.Dimension var16 = var6.size();
    com.allenstudio.ir.ui.Toolbar var17 = new com.allenstudio.ir.ui.Toolbar();
    boolean var18 = var17.isFloatable();
    var17.show();
    boolean var20 = var17.isRequestFocusEnabled();
    java.awt.Dimension var21 = var17.minimumSize();
    var6.setToolBar((javax.swing.JToolBar)var17);
    java.awt.Image var25 = var6.createImage(10, (-1));
    var0.add((java.awt.Component)var1, (java.lang.Object)10);
    com.allenstudio.ir.ui.DatePickerPane var27 = new com.allenstudio.ir.ui.DatePickerPane();
    java.lang.String var28 = var27.getTitle();
    java.awt.dnd.DropTarget var29 = var27.getDropTarget();
    com.allenstudio.ir.util.XmlElement var30 = new com.allenstudio.ir.util.XmlElement();
    boolean var31 = var30.hasChanged();
    var0.add((java.awt.Component)var27, (java.lang.Object)var31, (-1));
    com.allenstudio.ir.ui.NoteListsTabPane var34 = new com.allenstudio.ir.ui.NoteListsTabPane();
    com.allenstudio.ir.ui.Toolbar var35 = new com.allenstudio.ir.ui.Toolbar();
    boolean var36 = var35.isFloatable();
    var35.show();
    java.awt.image.ColorModel var38 = var35.getColorModel();
    boolean var39 = var35.isFocusCycleRoot();
    com.allenstudio.ir.ui.DatePickerPane var40 = new com.allenstudio.ir.ui.DatePickerPane();
    var40.transferFocus();
    com.allenstudio.ir.ui.Toolbar var42 = new com.allenstudio.ir.ui.Toolbar();
    java.awt.image.ColorModel var43 = var42.getColorModel();
    var42.setEnabled(true);
    java.awt.Component var47 = var42.getComponentAtIndex(1);
    boolean var48 = var42.isFloatable();
    var40.setContent((java.awt.Component)var42);
    java.awt.Dimension var50 = var40.size();
    com.allenstudio.ir.ui.Toolbar var51 = new com.allenstudio.ir.ui.Toolbar();
    boolean var52 = var51.isFloatable();
    var51.show();
    boolean var54 = var51.isRequestFocusEnabled();
    java.awt.Dimension var55 = var51.minimumSize();
    var40.setToolBar((javax.swing.JToolBar)var51);
    java.awt.Image var59 = var40.createImage(10, (-1));
    var34.add((java.awt.Component)var35, (java.lang.Object)10);
    com.allenstudio.ir.ui.Toolbar var61 = new com.allenstudio.ir.ui.Toolbar();
    java.awt.image.ColorModel var62 = var61.getColorModel();
    var61.setEnabled(true);
    var34.add((java.awt.Component)var61, (java.lang.Object)100L, 0);
    java.awt.Component var69 = var0.add((java.awt.Component)var34, 1);
    var0.setBounds(0, 4, 0, 4);
    com.allenstudio.ir.ui.StatusBar var76 = new com.allenstudio.ir.ui.StatusBar();
    int var77 = var76.getY();
    boolean var78 = var76.isLightweight();
    var76.setFocusTraversalKeysEnabled(true);
    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      var0.setComponentAt(31, (java.awt.Component)var76);
      fail("Expected exception of type java.lang.IndexOutOfBoundsException");
    } catch (java.lang.IndexOutOfBoundsException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var2 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var4);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var5 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var9);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var13);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var14 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var16);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var18 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var20 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var21);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var25);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var28 + "' != '" + "Date Picker"+ "'", var28.equals("Date Picker"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var29);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var31 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var36 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var38);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var39 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var43);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var47);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var48 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var50);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var52 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var54 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var55);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var59);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var62);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var69);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var77 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var78 == false);

  }

  public void test234() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest1.test234");


    com.allenstudio.ir.core.ConfigurationManager var0 = com.allenstudio.ir.core.ConfigurationManager.getInstance();
    var0.readIn();
    var0.writeBack();
    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      java.lang.Object var5 = var0.setProperty("ToolBarUI", "");
      fail("Expected exception of type java.lang.StringIndexOutOfBoundsException");
    } catch (java.lang.StringIndexOutOfBoundsException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var0);

  }

  public void test235() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest1.test235");


    com.allenstudio.ir.ui.MainFrame var0 = new com.allenstudio.ir.ui.MainFrame();
    java.lang.String var1 = var0.getWarningString();
    java.awt.Rectangle var2 = var0.getMaximizedBounds();
    boolean var3 = var0.isLocationByPlatform();
    int var4 = var0.getY();
    java.awt.Component var5 = var0.getMostRecentFocusOwner();
    java.awt.Image var6 = var0.getIconImage();
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var1);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var2);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var3 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var4 == 32);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var5);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var6);

  }

  public void test236() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest1.test236");


    com.allenstudio.ir.util.XmlElement var0 = new com.allenstudio.ir.util.XmlElement();
    com.allenstudio.ir.util.XmlElement var2 = var0.addSubElement("hi!");
    com.allenstudio.ir.util.XmlElement var3 = new com.allenstudio.ir.util.XmlElement();
    com.allenstudio.ir.util.XmlElement var5 = var3.addSubElement("hi!");
    var5.notifyObservers((java.lang.Object)(byte)1);
    var0.append(var5);
    com.allenstudio.ir.util.XmlElement var9 = new com.allenstudio.ir.util.XmlElement();
    com.allenstudio.ir.util.XmlElement var11 = var9.addSubElement("hi!");
    java.lang.String var13 = var9.getAttribute("C:\\boot.ini");
    com.allenstudio.ir.util.XmlElement var14 = var5.addSubElement(var9);
    java.lang.String var17 = var9.getAttribute("", "Title");
    com.allenstudio.ir.util.XmlElement var18 = var9.getParent();
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var2);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var5);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var11);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var13);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var14);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var17 + "' != '" + "Title"+ "'", var17.equals("Title"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var18);

  }

  public void test237() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest1.test237");


    com.allenstudio.ir.ui.MainFrame var0 = new com.allenstudio.ir.ui.MainFrame();
    java.lang.String var1 = var0.getWarningString();
    java.awt.Rectangle var2 = var0.getMaximizedBounds();
    java.awt.MenuBar var3 = var0.getMenuBar();
    var0.disable();
    var0.setSize(10, 3);
    com.allenstudio.ir.ui.StatusBar var8 = new com.allenstudio.ir.ui.StatusBar();
    var8.firePropertyChange("com.allenstudio.ir.ui.StatusBar[,0,0,0x0,invalid,layout=java.awt.BorderLayout,alignmentX=0.0,alignmentY=0.0,border=,flags=0,maximumSize=,minimumSize=,preferredSize=]", ' ', ' ');
    javax.swing.event.AncestorListener[] var13 = var8.getAncestorListeners();
    boolean var14 = var8.requestDefaultFocus();
    com.allenstudio.ir.ui.StatusBar var15 = new com.allenstudio.ir.ui.StatusBar();
    int var16 = var15.getY();
    javax.swing.JToolTip var17 = var15.createToolTip();
    float var18 = var17.getAlignmentY();
    java.awt.Color var19 = var17.getForeground();
    java.awt.event.MouseMotionListener[] var20 = var17.getMouseMotionListeners();
    com.allenstudio.ir.core.plugins.CommonNote var21 = new com.allenstudio.ir.core.plugins.CommonNote();
    java.lang.String var22 = var21.getFeature();
    com.allenstudio.ir.ui.StatusBar var23 = new com.allenstudio.ir.ui.StatusBar();
    var23.enable();
    boolean var25 = var23.isFocusOwner();
    var23.firePropertyChange("hi!", 10L, 0L);
    var23.layout();
    var23.removeAll();
    com.allenstudio.ir.ui.StatusBar var32 = new com.allenstudio.ir.ui.StatusBar();
    javax.swing.JRootPane var33 = var32.getRootPane();
    java.awt.Point var34 = var32.location();
    java.awt.Component var35 = var23.getComponentAt(var34);
    java.awt.Point var36 = var21.getLocation(var34);
    var21.setOtherInfo("");
    var21.setFeature("Title");
    var21.removeNotify();
    com.allenstudio.ir.util.XmlElement var42 = new com.allenstudio.ir.util.XmlElement();
    com.allenstudio.ir.util.XmlElement var44 = var42.addSubElement("hi!");
    com.allenstudio.ir.util.XmlElement var45 = new com.allenstudio.ir.util.XmlElement();
    com.allenstudio.ir.util.XmlElement var47 = var45.addSubElement("hi!");
    var47.notifyObservers((java.lang.Object)(byte)1);
    var42.append(var47);
    com.allenstudio.ir.util.XmlElement var51 = new com.allenstudio.ir.util.XmlElement();
    com.allenstudio.ir.util.XmlElement var53 = var51.addSubElement("hi!");
    java.lang.String var55 = var51.getAttribute("C:\\boot.ini");
    com.allenstudio.ir.util.XmlElement var56 = var47.addSubElement(var51);
    java.lang.String var59 = var47.getAttribute("Title", "ToolBarUI");
    var17.putClientProperty((java.lang.Object)var21, (java.lang.Object)"Title");
    var21.doLayout();
    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      var0.add((java.awt.Component)var8, (java.lang.Object)var21);
      fail("Expected exception of type java.lang.IllegalArgumentException");
    } catch (java.lang.IllegalArgumentException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var1);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var2);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var3);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var13);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var14 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var16 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var17);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var18 == 0.5f);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var19);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var20);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var22 + "' != '" + "C:\\boot.ini"+ "'", var22.equals("C:\\boot.ini"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var25 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var33);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var34);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var35);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var36);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var44);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var47);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var53);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var55);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var56);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var59 + "' != '" + "ToolBarUI"+ "'", var59.equals("ToolBarUI"));

  }

  public void test238() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest1.test238");


    com.allenstudio.ir.ui.MainFrame var0 = new com.allenstudio.ir.ui.MainFrame();
    java.lang.String var1 = var0.getWarningString();
    boolean var2 = var0.isAlwaysOnTopSupported();
    com.allenstudio.ir.ui.MainFrame var3 = new com.allenstudio.ir.ui.MainFrame();
    java.lang.String var4 = var3.getWarningString();
    java.lang.String var5 = var3.getWarningString();
    boolean var6 = var3.isAutoRequestFocus();
    com.allenstudio.ir.ui.MainFrame var7 = new com.allenstudio.ir.ui.MainFrame();
    java.lang.String var8 = var7.getWarningString();
    boolean var9 = var7.isAlwaysOnTopSupported();
    java.awt.Color var10 = var7.getBackground();
    var3.setBackground(var10);
    com.allenstudio.ir.util.XmlElement var12 = new com.allenstudio.ir.util.XmlElement();
    com.allenstudio.ir.util.XmlElement var14 = var12.addSubElement("hi!");
    var14.notifyObservers((java.lang.Object)(byte)1);
    com.allenstudio.ir.util.XmlElement var17 = new com.allenstudio.ir.util.XmlElement();
    com.allenstudio.ir.util.XmlElement var19 = var17.addSubElement("hi!");
    var19.notifyObservers((java.lang.Object)(byte)1);
    com.allenstudio.ir.util.XmlElement var22 = var14.removeElement(var19);
    com.allenstudio.ir.util.XmlElement var23 = var19.getParent();
    java.util.List var24 = var23.getElements();
    var3.setIconImages(var24);
    var0.setIconImages(var24);
    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      var0.setDefaultCloseOperation(10);
      fail("Expected exception of type java.lang.IllegalArgumentException");
    } catch (java.lang.IllegalArgumentException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var2 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var4);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var5);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var6 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var8);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var9 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var10);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var14);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var19);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var22);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var23);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var24);

  }

  public void test239() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest1.test239");


    com.allenstudio.ir.util.XmlIO var0 = new com.allenstudio.ir.util.XmlIO();
    var0.unparsedEntityDecl("", "hi!", "", "");
    var0.skippedEntity("This is a testing description. \u03E3\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\u073F\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD");
    var0.notationDecl("Date Picker", "Title", "This is a testing description. \u03E3\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\u073F\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD");
    var0.skippedEntity("");
    var0.errorDialog("frame2");

  }

  public void test240() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest1.test240");


    com.allenstudio.ir.ui.StatusBar var0 = new com.allenstudio.ir.ui.StatusBar();
    boolean var1 = var0.isBackgroundSet();
    boolean var4 = var0.contains(10, 100);
    var0.revalidate();
    javax.swing.JToolTip var6 = var0.createToolTip();
    com.allenstudio.ir.ui.StatusBar var7 = new com.allenstudio.ir.ui.StatusBar();
    javax.swing.JRootPane var8 = var7.getRootPane();
    java.awt.Point var9 = var7.location();
    com.allenstudio.ir.ui.StatusBar var10 = new com.allenstudio.ir.ui.StatusBar();
    javax.swing.JRootPane var11 = var10.getRootPane();
    java.awt.Point var12 = var10.location();
    com.allenstudio.ir.ui.Toolbar var13 = new com.allenstudio.ir.ui.Toolbar();
    boolean var14 = var13.isFloatable();
    java.awt.Component var16 = var13.getComponentAtIndex(10);
    java.lang.Object var17 = var10.getClientProperty((java.lang.Object)10);
    java.awt.Dimension var18 = var10.getMaximumSize();
    var7.setMinimumSize(var18);
    java.awt.Rectangle var20 = var7.getBounds();
    var0.scrollRectToVisible(var20);
    boolean var22 = var0.isOpaque();
    java.lang.String var23 = var0.getToolTipText();
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var1 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var4 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var6);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var8);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var9);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var11);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var12);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var14 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var16);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var17);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var18);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var20);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var22 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var23);

  }

  public void test241() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest1.test241");


    com.allenstudio.ir.ui.MainFrame var0 = new com.allenstudio.ir.ui.MainFrame();
    java.lang.String var1 = var0.getWarningString();
    boolean var2 = var0.isAlwaysOnTopSupported();
    var0.setTitle("ToolBarUI");
    java.awt.Container var5 = var0.getContentPane();
    com.allenstudio.ir.ui.MainFrame var6 = new com.allenstudio.ir.ui.MainFrame();
    java.lang.String var7 = var6.getWarningString();
    java.lang.String var8 = var6.getWarningString();
    boolean var9 = var6.isAutoRequestFocus();
    boolean var10 = var6.isResizable();
    javax.swing.JLayeredPane var11 = var6.getLayeredPane();
    int var12 = var11.getX();
    var0.setLayeredPane(var11);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var2 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var5);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var7);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var8);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var9 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var10 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var11);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var12 == 0);

  }

  public void test242() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest1.test242");


    com.allenstudio.ir.ui.Toolbar var0 = new com.allenstudio.ir.ui.Toolbar();
    java.awt.image.ColorModel var1 = var0.getColorModel();
    var0.setEnabled(true);
    java.awt.Component var5 = var0.getComponentAtIndex(1);
    boolean var6 = var0.requestFocusInWindow();
    java.awt.FocusTraversalPolicy var7 = var0.getFocusTraversalPolicy();
    java.beans.PropertyChangeListener[] var9 = var0.getPropertyChangeListeners("Date Picker");
    boolean var10 = var0.isFontSet();
    com.allenstudio.ir.ui.calendar.MonthlyCalendar var11 = new com.allenstudio.ir.ui.calendar.MonthlyCalendar();
    var0.removeMouseListener((java.awt.event.MouseListener)var11);
    boolean var13 = var11.getWeekStartOnSunday();
    int var14 = var11.getSelectedDay();
    java.awt.Dimension var15 = var11.getCellDimension();
    java.util.Calendar var16 = var11.getSelectedDate();
    var11.setMonth(5);
    com.allenstudio.ir.ui.Toolbar var19 = new com.allenstudio.ir.ui.Toolbar();
    java.awt.image.ColorModel var20 = var19.getColorModel();
    java.awt.im.InputContext var21 = var19.getInputContext();
    java.awt.Component var23 = var19.getComponentAtIndex(0);
    var19.revalidate();
    com.allenstudio.ir.ui.MainFrame var25 = new com.allenstudio.ir.ui.MainFrame();
    java.lang.String var26 = var25.getWarningString();
    boolean var27 = var25.isAlwaysOnTopSupported();
    java.awt.Color var28 = var25.getBackground();
    var19.setForeground(var28);
    var11.setDateForeground(var28);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var1);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var5);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var6 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var7);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var9);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var10 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var13 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var14 == 31);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var15);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var16);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var20);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var21);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var23);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var26);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var27 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var28);

  }

  public void test243() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest1.test243");


    com.allenstudio.ir.ui.calendar.DateChooser var0 = new com.allenstudio.ir.ui.calendar.DateChooser();
    boolean var2 = var0.requestFocus(false);
    com.allenstudio.ir.ui.StatusBar var3 = new com.allenstudio.ir.ui.StatusBar();
    boolean var4 = var3.isBackgroundSet();
    var3.repaint(100L);
    int var7 = var3.getWidth();
    com.allenstudio.ir.ui.MainFrame var8 = new com.allenstudio.ir.ui.MainFrame();
    java.lang.String var9 = var8.getWarningString();
    java.lang.String var10 = var8.getWarningString();
    java.awt.Container var11 = var8.getFocusCycleRootAncestor();
    com.allenstudio.ir.ui.StatusBar var12 = new com.allenstudio.ir.ui.StatusBar();
    boolean var13 = var12.isBackgroundSet();
    boolean var16 = var12.contains(10, 100);
    var12.revalidate();
    javax.swing.JToolTip var18 = var12.createToolTip();
    com.allenstudio.ir.ui.StatusBar var19 = new com.allenstudio.ir.ui.StatusBar();
    javax.swing.JRootPane var20 = var19.getRootPane();
    java.awt.Point var21 = var19.location();
    com.allenstudio.ir.ui.StatusBar var22 = new com.allenstudio.ir.ui.StatusBar();
    javax.swing.JRootPane var23 = var22.getRootPane();
    java.awt.Point var24 = var22.location();
    com.allenstudio.ir.ui.Toolbar var25 = new com.allenstudio.ir.ui.Toolbar();
    boolean var26 = var25.isFloatable();
    java.awt.Component var28 = var25.getComponentAtIndex(10);
    java.lang.Object var29 = var22.getClientProperty((java.lang.Object)10);
    java.awt.Dimension var30 = var22.getMaximumSize();
    var19.setMinimumSize(var30);
    java.awt.Rectangle var32 = var19.getBounds();
    var12.scrollRectToVisible(var32);
    var8.setMaximizedBounds(var32);
    var3.computeVisibleRect(var32);
    var0.paintImmediately(var32);
    float var37 = var0.getAlignmentY();
    java.awt.Component[] var38 = var0.getComponents();
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var2 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var4 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var7 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var9);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var10);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var11);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var13 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var16 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var18);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var20);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var21);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var23);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var24);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var26 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var28);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var29);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var30);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var32);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var37 == 0.5f);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var38);

  }

  public void test244() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest1.test244");


    com.allenstudio.ir.ui.MainFrame var0 = new com.allenstudio.ir.ui.MainFrame();
    java.lang.String var1 = var0.getWarningString();
    java.lang.String var2 = var0.getWarningString();
    boolean var3 = var0.isAutoRequestFocus();
    boolean var4 = var0.isResizable();
    var0.pack();
    boolean var6 = var0.isFocusOwner();
    com.allenstudio.ir.ui.MainMenu var7 = new com.allenstudio.ir.ui.MainMenu((com.allenstudio.ir.core.InspirentoMediator)var0);
    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      var0.applyResourceBundle("MenuBarUI");
      fail("Expected exception of type java.util.MissingResourceException");
    } catch (java.util.MissingResourceException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var1);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var2);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var3 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var4 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var6 == false);

  }

  public void test245() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest1.test245");


    com.allenstudio.ir.ui.MainFrame var0 = new com.allenstudio.ir.ui.MainFrame();
    boolean var1 = var0.isShowing();
    int var2 = var0.countComponents();
    com.allenstudio.ir.ui.StatusBar var3 = new com.allenstudio.ir.ui.StatusBar();
    var3.enable();
    com.allenstudio.ir.ui.StatusBar var5 = new com.allenstudio.ir.ui.StatusBar();
    var5.enable();
    boolean var7 = var5.isFocusOwner();
    var5.firePropertyChange("hi!", 10L, 0L);
    var5.layout();
    var5.removeAll();
    com.allenstudio.ir.ui.StatusBar var14 = new com.allenstudio.ir.ui.StatusBar();
    javax.swing.JRootPane var15 = var14.getRootPane();
    java.awt.Point var16 = var14.location();
    java.awt.Point var17 = var5.getLocation(var16);
    var3.setLocation(var17);
    var0.setLocation(var17);
    java.awt.Container var20 = var0.getContentPane();
    java.awt.event.WindowFocusListener[] var21 = var0.getWindowFocusListeners();
    java.awt.image.ColorModel var22 = var0.getColorModel();
    javax.accessibility.AccessibleContext var23 = var0.getAccessibleContext();
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var1 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var2 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var7 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var15);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var16);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var17);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var20);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var21);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var22);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var23);

  }

  public void test246() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest1.test246");


    com.allenstudio.ir.ui.NoteListsTabPane var0 = new com.allenstudio.ir.ui.NoteListsTabPane();
    com.allenstudio.ir.ui.Toolbar var1 = new com.allenstudio.ir.ui.Toolbar();
    boolean var2 = var1.isFloatable();
    var1.show();
    java.awt.image.ColorModel var4 = var1.getColorModel();
    boolean var5 = var1.isFocusCycleRoot();
    com.allenstudio.ir.ui.DatePickerPane var6 = new com.allenstudio.ir.ui.DatePickerPane();
    var6.transferFocus();
    com.allenstudio.ir.ui.Toolbar var8 = new com.allenstudio.ir.ui.Toolbar();
    java.awt.image.ColorModel var9 = var8.getColorModel();
    var8.setEnabled(true);
    java.awt.Component var13 = var8.getComponentAtIndex(1);
    boolean var14 = var8.isFloatable();
    var6.setContent((java.awt.Component)var8);
    java.awt.Dimension var16 = var6.size();
    com.allenstudio.ir.ui.Toolbar var17 = new com.allenstudio.ir.ui.Toolbar();
    boolean var18 = var17.isFloatable();
    var17.show();
    boolean var20 = var17.isRequestFocusEnabled();
    java.awt.Dimension var21 = var17.minimumSize();
    var6.setToolBar((javax.swing.JToolBar)var17);
    java.awt.Image var25 = var6.createImage(10, (-1));
    var0.add((java.awt.Component)var1, (java.lang.Object)10);
    com.allenstudio.ir.ui.Toolbar var27 = new com.allenstudio.ir.ui.Toolbar();
    boolean var28 = var27.isFloatable();
    java.awt.Component var30 = var27.getComponentAtIndex(10);
    boolean var31 = var27.isLightweight();
    java.awt.Component var32 = var0.add((java.awt.Component)var27);
    java.awt.event.KeyListener[] var33 = var0.getKeyListeners();
    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      var0.setDisplayedMnemonicIndexAt(1, 31);
      fail("Expected exception of type java.lang.IllegalArgumentException");
    } catch (java.lang.IllegalArgumentException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var2 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var4);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var5 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var9);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var13);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var14 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var16);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var18 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var20 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var21);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var25);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var28 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var30);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var31 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var32);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var33);

  }

  public void test247() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest1.test247");


    com.allenstudio.ir.ui.DatePickerPane var0 = new com.allenstudio.ir.ui.DatePickerPane();
    var0.transferFocus();
    com.allenstudio.ir.ui.Toolbar var2 = new com.allenstudio.ir.ui.Toolbar();
    java.awt.image.ColorModel var3 = var2.getColorModel();
    var2.setEnabled(true);
    java.awt.Component var7 = var2.getComponentAtIndex(1);
    boolean var8 = var2.isFloatable();
    var0.setContent((java.awt.Component)var2);
    var0.setSelected(true);
    var0.resize(0, 1);
    javax.swing.TransferHandler var15 = var0.getTransferHandler();
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var3);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var7);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var8 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var15);

  }

  public void test248() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest1.test248");


    com.allenstudio.ir.util.XmlElement var0 = new com.allenstudio.ir.util.XmlElement();
    com.allenstudio.ir.util.XmlElement var2 = var0.addSubElement("hi!");
    com.allenstudio.ir.util.XmlElement var3 = new com.allenstudio.ir.util.XmlElement();
    com.allenstudio.ir.util.XmlElement var5 = var3.addSubElement("hi!");
    var5.notifyObservers((java.lang.Object)(byte)1);
    var0.append(var5);
    com.allenstudio.ir.util.XmlElement var9 = new com.allenstudio.ir.util.XmlElement();
    com.allenstudio.ir.util.XmlElement var11 = var9.addSubElement("hi!");
    java.lang.String var13 = var9.getAttribute("C:\\boot.ini");
    com.allenstudio.ir.util.XmlElement var14 = var5.addSubElement(var9);
    java.lang.String var17 = var5.getAttribute("Title", "ToolBarUI");
    var5.setName("PanelUI");
    com.allenstudio.ir.util.XmlElement var20 = new com.allenstudio.ir.util.XmlElement();
    com.allenstudio.ir.util.XmlElement var22 = var20.addSubElement("hi!");
    var22.notifyObservers((java.lang.Object)(byte)1);
    com.allenstudio.ir.util.XmlElement var25 = new com.allenstudio.ir.util.XmlElement();
    com.allenstudio.ir.util.XmlElement var27 = var25.addSubElement("hi!");
    var27.notifyObservers((java.lang.Object)(byte)1);
    com.allenstudio.ir.util.XmlElement var30 = var22.removeElement(var27);
    com.allenstudio.ir.util.XmlElement var31 = var27.getParent();
    boolean var32 = var5.addElement(var27);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var2);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var5);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var11);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var13);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var14);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var17 + "' != '" + "ToolBarUI"+ "'", var17.equals("ToolBarUI"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var22);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var27);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var30);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var31);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var32 == true);

  }

  public void test249() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest1.test249");


    com.allenstudio.ir.ui.MainFrame var0 = new com.allenstudio.ir.ui.MainFrame();
    java.lang.String var1 = var0.getWarningString();
    java.awt.Rectangle var2 = var0.getMaximizedBounds();
    java.awt.MenuBar var3 = var0.getMenuBar();
    com.allenstudio.ir.ui.NoteListsTabPane var4 = new com.allenstudio.ir.ui.NoteListsTabPane();
    com.allenstudio.ir.ui.Toolbar var5 = new com.allenstudio.ir.ui.Toolbar();
    boolean var6 = var5.isFloatable();
    var5.show();
    java.awt.image.ColorModel var8 = var5.getColorModel();
    boolean var9 = var5.isFocusCycleRoot();
    com.allenstudio.ir.ui.DatePickerPane var10 = new com.allenstudio.ir.ui.DatePickerPane();
    var10.transferFocus();
    com.allenstudio.ir.ui.Toolbar var12 = new com.allenstudio.ir.ui.Toolbar();
    java.awt.image.ColorModel var13 = var12.getColorModel();
    var12.setEnabled(true);
    java.awt.Component var17 = var12.getComponentAtIndex(1);
    boolean var18 = var12.isFloatable();
    var10.setContent((java.awt.Component)var12);
    java.awt.Dimension var20 = var10.size();
    com.allenstudio.ir.ui.Toolbar var21 = new com.allenstudio.ir.ui.Toolbar();
    boolean var22 = var21.isFloatable();
    var21.show();
    boolean var24 = var21.isRequestFocusEnabled();
    java.awt.Dimension var25 = var21.minimumSize();
    var10.setToolBar((javax.swing.JToolBar)var21);
    java.awt.Image var29 = var10.createImage(10, (-1));
    var4.add((java.awt.Component)var5, (java.lang.Object)10);
    var0.widgetChanged((com.allenstudio.ir.core.InspirentoWidget)var4);
    java.awt.event.ComponentListener[] var32 = var4.getComponentListeners();
    com.allenstudio.ir.ui.calendar.MonthlyCalendar var33 = new com.allenstudio.ir.ui.calendar.MonthlyCalendar();
    java.awt.Color var34 = var33.getDateBackground();
    var33.setYearMonth(1, (-1));
    java.util.Calendar var38 = var33.getSelectedDate();
    var4.remove((java.awt.Component)var33);
    var33.setMarked(1, true);
    java.awt.Color var43 = var33.getDateBackground();
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var1);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var2);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var3);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var6 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var8);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var9 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var13);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var17);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var18 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var20);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var22 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var24 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var25);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var29);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var32);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var34);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var38);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var43);

  }

  public void test250() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest1.test250");


    com.allenstudio.ir.ui.NoteListsTabPane var0 = new com.allenstudio.ir.ui.NoteListsTabPane();
    com.allenstudio.ir.ui.Toolbar var1 = new com.allenstudio.ir.ui.Toolbar();
    boolean var2 = var1.isFloatable();
    var1.show();
    java.awt.image.ColorModel var4 = var1.getColorModel();
    boolean var5 = var1.isFocusCycleRoot();
    com.allenstudio.ir.ui.DatePickerPane var6 = new com.allenstudio.ir.ui.DatePickerPane();
    var6.transferFocus();
    com.allenstudio.ir.ui.Toolbar var8 = new com.allenstudio.ir.ui.Toolbar();
    java.awt.image.ColorModel var9 = var8.getColorModel();
    var8.setEnabled(true);
    java.awt.Component var13 = var8.getComponentAtIndex(1);
    boolean var14 = var8.isFloatable();
    var6.setContent((java.awt.Component)var8);
    java.awt.Dimension var16 = var6.size();
    com.allenstudio.ir.ui.Toolbar var17 = new com.allenstudio.ir.ui.Toolbar();
    boolean var18 = var17.isFloatable();
    var17.show();
    boolean var20 = var17.isRequestFocusEnabled();
    java.awt.Dimension var21 = var17.minimumSize();
    var6.setToolBar((javax.swing.JToolBar)var17);
    java.awt.Image var25 = var6.createImage(10, (-1));
    var0.add((java.awt.Component)var1, (java.lang.Object)10);
    var0.setSelectedIndex(1);
    javax.swing.plaf.TabbedPaneUI var29 = var0.getUI();
    javax.swing.SingleSelectionModel var30 = var0.getModel();
    int var31 = var0.getTabPlacement();
    com.allenstudio.ir.ui.StatusBar var33 = new com.allenstudio.ir.ui.StatusBar();
    com.allenstudio.ir.core.plugins.CommonNote var34 = new com.allenstudio.ir.core.plugins.CommonNote();
    var34.setFocusTraversalPolicyProvider(false);
    var33.remove((java.awt.Component)var34);
    var34.setFeature("ToolBarUI");
    javax.swing.Icon var40 = var34.getIcon();
    var0.setDisabledIconAt(0, var40);
    com.allenstudio.ir.ui.DatePickerPane var43 = new com.allenstudio.ir.ui.DatePickerPane();
    var43.transferFocus();
    com.allenstudio.ir.ui.Toolbar var45 = new com.allenstudio.ir.ui.Toolbar();
    java.awt.image.ColorModel var46 = var45.getColorModel();
    var45.setEnabled(true);
    java.awt.Component var50 = var45.getComponentAtIndex(1);
    boolean var51 = var45.isFloatable();
    var43.setContent((java.awt.Component)var45);
    var43.setSelected(true);
    boolean var55 = var43.isFocusable();
    com.allenstudio.ir.ui.StatusBar var56 = new com.allenstudio.ir.ui.StatusBar();
    com.allenstudio.ir.core.plugins.CommonNote var57 = new com.allenstudio.ir.core.plugins.CommonNote();
    var57.setFocusTraversalPolicyProvider(false);
    var56.remove((java.awt.Component)var57);
    var57.setFeature("ToolBarUI");
    javax.swing.Icon var63 = var57.getIcon();
    var43.setFrameIcon(var63);
    com.allenstudio.ir.ui.StatusBar var65 = new com.allenstudio.ir.ui.StatusBar();
    javax.swing.JRootPane var66 = var65.getRootPane();
    java.awt.Point var67 = var65.location();
    com.allenstudio.ir.ui.Toolbar var68 = new com.allenstudio.ir.ui.Toolbar();
    boolean var69 = var68.isFloatable();
    java.awt.Component var71 = var68.getComponentAtIndex(10);
    java.lang.Object var72 = var65.getClientProperty((java.lang.Object)10);
    var65.setFocusTraversalPolicyProvider(false);
    var0.addTab("Title", var63, (java.awt.Component)var65, " ");
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var2 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var4);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var5 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var9);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var13);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var14 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var16);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var18 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var20 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var21);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var25);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var29);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var30);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var31 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var40);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var46);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var50);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var51 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var55 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var63);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var66);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var67);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var69 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var71);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var72);

  }

  public void test251() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest1.test251");


    com.allenstudio.ir.util.XmlElement var1 = new com.allenstudio.ir.util.XmlElement();
    com.allenstudio.ir.util.XmlElement var3 = var1.addSubElement("hi!");
    com.allenstudio.ir.util.XmlElement var6 = var3.addSubElement("", "hi!");
    java.util.Hashtable var7 = var6.getAttributes();
    com.allenstudio.ir.ui.MainFrame var8 = new com.allenstudio.ir.ui.MainFrame();
    java.lang.String var9 = var8.getWarningString();
    java.awt.Rectangle var10 = var8.getMaximizedBounds();
    java.awt.MenuBar var11 = var8.getMenuBar();
    com.allenstudio.ir.ui.NoteListsTabPane var12 = new com.allenstudio.ir.ui.NoteListsTabPane();
    var8.widgetChanged((com.allenstudio.ir.core.InspirentoWidget)var12);
    var8.dispose();
    java.lang.Object var15 = var7.get((java.lang.Object)var8);
    java.util.Set var16 = var7.entrySet();
    com.allenstudio.ir.util.XmlElement var17 = new com.allenstudio.ir.util.XmlElement("Title", var7);
    java.lang.Object var18 = var7.clone();
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var3);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var6);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var7);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var9);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var10);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var11);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var15);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var16);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var18);

  }

  public void test252() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest1.test252");


    com.allenstudio.ir.ui.MainFrame var0 = new com.allenstudio.ir.ui.MainFrame();
    java.lang.String var1 = var0.getWarningString();
    java.lang.String var2 = var0.getWarningString();
    boolean var3 = var0.isAutoRequestFocus();
    boolean var4 = var0.isResizable();
    javax.swing.JLayeredPane var5 = var0.getLayeredPane();
    javax.swing.TransferHandler var6 = var0.getTransferHandler();
    java.lang.String var7 = var0.getTitle();
    java.awt.Container var8 = var0.getFocusCycleRootAncestor();
    var0.setResizable(true);
    var0.setEnabled(true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var1);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var2);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var3 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var4 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var5);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var6);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var7 + "' != '" + "Inspirento - alpha 0.86"+ "'", var7.equals("Inspirento - alpha 0.86"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var8);

  }

  public void test253() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest1.test253");


    com.allenstudio.ir.ui.NoteList var0 = new com.allenstudio.ir.ui.NoteList();
    com.allenstudio.ir.ui.MainFrame var1 = new com.allenstudio.ir.ui.MainFrame();
    java.lang.String var2 = var1.getWarningString();
    java.awt.Rectangle var3 = var1.getMaximizedBounds();
    java.awt.MenuBar var4 = var1.getMenuBar();
    com.allenstudio.ir.core.plugins.CommonNote var5 = new com.allenstudio.ir.core.plugins.CommonNote();
    var5.resize(0, 1);
    com.allenstudio.ir.ui.NoteListCell var9 = new com.allenstudio.ir.ui.NoteListCell((com.allenstudio.ir.core.plugins.AbstractNote)var5);
    com.allenstudio.ir.ui.StatusBar var10 = new com.allenstudio.ir.ui.StatusBar();
    boolean var11 = var10.isBackgroundSet();
    boolean var14 = var10.contains(10, 100);
    var10.revalidate();
    javax.swing.JToolTip var16 = var10.createToolTip();
    com.allenstudio.ir.ui.StatusBar var17 = new com.allenstudio.ir.ui.StatusBar();
    javax.swing.JRootPane var18 = var17.getRootPane();
    java.awt.Point var19 = var17.location();
    com.allenstudio.ir.ui.StatusBar var20 = new com.allenstudio.ir.ui.StatusBar();
    javax.swing.JRootPane var21 = var20.getRootPane();
    java.awt.Point var22 = var20.location();
    com.allenstudio.ir.ui.Toolbar var23 = new com.allenstudio.ir.ui.Toolbar();
    boolean var24 = var23.isFloatable();
    java.awt.Component var26 = var23.getComponentAtIndex(10);
    java.lang.Object var27 = var20.getClientProperty((java.lang.Object)10);
    java.awt.Dimension var28 = var20.getMaximumSize();
    var17.setMinimumSize(var28);
    java.awt.Rectangle var30 = var17.getBounds();
    var10.scrollRectToVisible(var30);
    var5.repaint(var30);
    var1.setMaximizedBounds(var30);
    int var36 = var0.getScrollableBlockIncrement(var30, 1, 4);
    com.allenstudio.ir.core.plugins.CommonNote var37 = new com.allenstudio.ir.core.plugins.CommonNote();
    var37.resize(0, 1);
    com.allenstudio.ir.ui.NoteListCell var41 = new com.allenstudio.ir.ui.NoteListCell((com.allenstudio.ir.core.plugins.AbstractNote)var37);
    int var42 = var41.getIndexInList();
    var0.addCell(var41);
    boolean var44 = var0.getScrollableTracksViewportWidth();
    java.awt.Dimension var45 = var0.getPreferredScrollableViewportSize();
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var2);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var3);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var4);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var11 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var14 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var16);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var18);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var19);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var21);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var22);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var24 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var26);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var27);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var28);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var30);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var36 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var42 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var44 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var45);

  }

  public void test254() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest1.test254");


    com.allenstudio.ir.ui.Toolbar var0 = new com.allenstudio.ir.ui.Toolbar();
    boolean var1 = var0.isFloatable();
    var0.setAutoscrolls(true);
    com.allenstudio.ir.core.plugins.CommonNote var4 = new com.allenstudio.ir.core.plugins.CommonNote();
    var4.resize(0, 1);
    com.allenstudio.ir.ui.NoteListCell var8 = new com.allenstudio.ir.ui.NoteListCell((com.allenstudio.ir.core.plugins.AbstractNote)var4);
    com.allenstudio.ir.ui.StatusBar var9 = new com.allenstudio.ir.ui.StatusBar();
    boolean var10 = var9.isBackgroundSet();
    boolean var13 = var9.contains(10, 100);
    var9.revalidate();
    javax.swing.JToolTip var15 = var9.createToolTip();
    com.allenstudio.ir.ui.StatusBar var16 = new com.allenstudio.ir.ui.StatusBar();
    javax.swing.JRootPane var17 = var16.getRootPane();
    java.awt.Point var18 = var16.location();
    com.allenstudio.ir.ui.StatusBar var19 = new com.allenstudio.ir.ui.StatusBar();
    javax.swing.JRootPane var20 = var19.getRootPane();
    java.awt.Point var21 = var19.location();
    com.allenstudio.ir.ui.Toolbar var22 = new com.allenstudio.ir.ui.Toolbar();
    boolean var23 = var22.isFloatable();
    java.awt.Component var25 = var22.getComponentAtIndex(10);
    java.lang.Object var26 = var19.getClientProperty((java.lang.Object)10);
    java.awt.Dimension var27 = var19.getMaximumSize();
    var16.setMinimumSize(var27);
    java.awt.Rectangle var29 = var16.getBounds();
    var9.scrollRectToVisible(var29);
    var4.repaint(var29);
    boolean var32 = var0.isAncestorOf((java.awt.Component)var4);
    java.lang.String var33 = var4.getOtherInfoText();
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var1 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var10 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var13 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var15);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var17);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var18);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var20);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var21);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var23 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var25);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var26);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var27);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var29);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var32 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var33 + "' != '" + " "+ "'", var33.equals(" "));

  }

  public void test255() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest1.test255");


    com.allenstudio.ir.ui.StatusBar var0 = new com.allenstudio.ir.ui.StatusBar();
    javax.swing.JRootPane var1 = var0.getRootPane();
    java.awt.Point var2 = var0.location();
    com.allenstudio.ir.ui.StatusBar var3 = new com.allenstudio.ir.ui.StatusBar();
    javax.swing.JRootPane var4 = var3.getRootPane();
    java.awt.Point var5 = var3.location();
    com.allenstudio.ir.ui.Toolbar var6 = new com.allenstudio.ir.ui.Toolbar();
    boolean var7 = var6.isFloatable();
    java.awt.Component var9 = var6.getComponentAtIndex(10);
    java.lang.Object var10 = var3.getClientProperty((java.lang.Object)10);
    java.awt.Dimension var11 = var3.getMaximumSize();
    var0.setMinimumSize(var11);
    boolean var13 = var0.isLightweight();
    java.beans.PropertyChangeListener[] var14 = var0.getPropertyChangeListeners();
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var1);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var2);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var4);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var5);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var7 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var9);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var10);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var11);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var13 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var14);

  }

  public void test256() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest1.test256");


    com.allenstudio.ir.core.plugins.CommonNote var0 = new com.allenstudio.ir.core.plugins.CommonNote();
    var0.setFocusTraversalPolicyProvider(false);
    com.allenstudio.ir.ui.StatusBar var3 = new com.allenstudio.ir.ui.StatusBar();
    int var4 = var3.getY();
    javax.swing.JToolTip var5 = var3.createToolTip();
    float var6 = var5.getAlignmentY();
    java.awt.Color var7 = var5.getForeground();
    var0.remove((java.awt.Component)var5);
    com.allenstudio.ir.ui.StatusBar var9 = new com.allenstudio.ir.ui.StatusBar();
    int var10 = var9.getY();
    boolean var11 = var9.isLightweight();
    java.awt.Dimension var12 = var9.getMaximumSize();
    java.awt.event.KeyListener[] var13 = var9.getKeyListeners();
    java.awt.ComponentOrientation var14 = var9.getComponentOrientation();
    var0.setComponentOrientation(var14);
    java.lang.String var16 = var0.getOtherInfoText();
    var0.setVisible(false);
    com.allenstudio.ir.ui.DatePickerPane var20 = new com.allenstudio.ir.ui.DatePickerPane();
    java.lang.String var21 = var20.getUIClassID();
    com.allenstudio.ir.ui.StatusBar var22 = new com.allenstudio.ir.ui.StatusBar();
    int var23 = var22.getY();
    javax.swing.JToolTip var24 = var22.createToolTip();
    float var25 = var24.getAlignmentY();
    java.awt.Color var26 = var24.getForeground();
    var20.setBackground(var26);
    var20.move(10, 10);
    com.allenstudio.ir.ui.Toolbar var31 = new com.allenstudio.ir.ui.Toolbar();
    java.awt.image.ColorModel var32 = var31.getColorModel();
    java.awt.im.InputContext var33 = var31.getInputContext();
    java.awt.Component var35 = var31.getComponentAtIndex(0);
    var20.setToolBar((javax.swing.JToolBar)var31);
    com.allenstudio.ir.util.XmlElement var38 = new com.allenstudio.ir.util.XmlElement();
    com.allenstudio.ir.util.XmlElement var40 = var38.addSubElement("hi!");
    com.allenstudio.ir.util.XmlElement var43 = var40.addSubElement("", "hi!");
    java.util.Hashtable var44 = var43.getAttributes();
    com.allenstudio.ir.ui.MainFrame var45 = new com.allenstudio.ir.ui.MainFrame();
    java.lang.String var46 = var45.getWarningString();
    java.awt.Rectangle var47 = var45.getMaximizedBounds();
    java.awt.MenuBar var48 = var45.getMenuBar();
    com.allenstudio.ir.ui.NoteListsTabPane var49 = new com.allenstudio.ir.ui.NoteListsTabPane();
    var45.widgetChanged((com.allenstudio.ir.core.InspirentoWidget)var49);
    var45.dispose();
    java.lang.Object var52 = var44.get((java.lang.Object)var45);
    java.util.Set var53 = var44.entrySet();
    var20.setFocusTraversalKeys(0, var53);
    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      var0.setFocusTraversalKeys(100, var53);
      fail("Expected exception of type java.lang.IllegalArgumentException");
    } catch (java.lang.IllegalArgumentException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var4 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var5);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var6 == 0.5f);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var7);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var10 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var11 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var12);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var13);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var14);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var16 + "' != '" + " "+ "'", var16.equals(" "));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var21 + "' != '" + "PanelUI"+ "'", var21.equals("PanelUI"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var23 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var24);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var25 == 0.5f);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var26);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var32);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var33);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var35);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var40);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var43);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var44);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var46);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var47);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var48);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var52);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var53);

  }

  public void test257() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest1.test257");


    com.allenstudio.ir.ui.DatePickerPane var0 = new com.allenstudio.ir.ui.DatePickerPane();
    java.awt.Container var1 = var0.getContentPane();
    var0.setIgnoreRepaint(true);
    java.lang.String var4 = var0.getTitle();
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var4 + "' != '" + "Date Picker"+ "'", var4.equals("Date Picker"));

  }

  public void test258() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest1.test258");


    com.allenstudio.ir.ui.MainFrame var0 = new com.allenstudio.ir.ui.MainFrame();
    boolean var1 = var0.isShowing();
    int var2 = var0.countComponents();
    var0.setAutoRequestFocus(false);
    javax.swing.JMenuBar var5 = var0.getJMenuBar();
    boolean var6 = var5.isBorderPainted();
    var5.updateUI();
    boolean var8 = var5.isBorderPainted();
    java.lang.Object var9 = var5.getTreeLock();
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var1 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var2 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var5);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var6 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var8 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var9);

  }

  public void test259() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest1.test259");


    com.allenstudio.ir.ui.Toolbar var0 = new com.allenstudio.ir.ui.Toolbar();
    java.awt.image.ColorModel var1 = var0.getColorModel();
    var0.setEnabled(true);
    java.awt.ComponentOrientation var4 = var0.getComponentOrientation();
    boolean var5 = var0.isFloatable();
    var0.setFocusCycleRoot(true);
    var0.firePropertyChange("This is a testing description. \u03E3\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\u073F\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD", ' ', ' ');
    var0.transferFocusDownCycle();
    var0.setOpaque(false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var1);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var4);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var5 == false);

  }

  public void test260() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest1.test260");


    com.allenstudio.ir.ui.StatusBar var0 = new com.allenstudio.ir.ui.StatusBar();
    var0.enable();
    boolean var2 = var0.isFocusOwner();
    var0.firePropertyChange("hi!", 10L, 0L);
    java.awt.im.InputMethodRequests var7 = var0.getInputMethodRequests();
    var0.setBounds(31, 3, 10, 30);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var2 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var7);

  }

  public void test261() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest1.test261");


    com.allenstudio.ir.ui.NoteListsTabPane var0 = new com.allenstudio.ir.ui.NoteListsTabPane();
    var0.setSelectedIndex(1);
    com.allenstudio.ir.core.plugins.CommonNote var3 = new com.allenstudio.ir.core.plugins.CommonNote();
    var3.setFocusTraversalPolicyProvider(false);
    int var6 = var3.getY();
    int var7 = var0.indexOfComponent((java.awt.Component)var3);
    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      javax.swing.Icon var9 = var0.getDisabledIconAt((-1));
      fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException");
    } catch (java.lang.ArrayIndexOutOfBoundsException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var6 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var7 == (-1));

  }

  public void test262() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest1.test262");


    com.allenstudio.ir.ui.MainFrame var0 = new com.allenstudio.ir.ui.MainFrame();
    java.lang.String var1 = var0.getWarningString();
    boolean var2 = var0.isAlwaysOnTopSupported();
    java.awt.Color var3 = var0.getBackground();
    var0.show();
    java.awt.Image var5 = var0.getIconImage();
    var0.move(10, 31);
    boolean var9 = var0.hasFocus();
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var2 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var3);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var5);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var9 == false);

  }

  public void test263() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest1.test263");


    com.allenstudio.ir.ui.DefaultNoteListModel var0 = new com.allenstudio.ir.ui.DefaultNoteListModel();
    com.allenstudio.ir.ui.StatusBar var1 = new com.allenstudio.ir.ui.StatusBar();
    int var2 = var1.getY();
    javax.swing.JToolTip var3 = var1.createToolTip();
    float var4 = var3.getAlignmentY();
    java.awt.Color var5 = var3.getForeground();
    java.awt.event.MouseMotionListener[] var6 = var3.getMouseMotionListeners();
    com.allenstudio.ir.core.plugins.CommonNote var7 = new com.allenstudio.ir.core.plugins.CommonNote();
    java.lang.String var8 = var7.getFeature();
    com.allenstudio.ir.ui.StatusBar var9 = new com.allenstudio.ir.ui.StatusBar();
    var9.enable();
    boolean var11 = var9.isFocusOwner();
    var9.firePropertyChange("hi!", 10L, 0L);
    var9.layout();
    var9.removeAll();
    com.allenstudio.ir.ui.StatusBar var18 = new com.allenstudio.ir.ui.StatusBar();
    javax.swing.JRootPane var19 = var18.getRootPane();
    java.awt.Point var20 = var18.location();
    java.awt.Component var21 = var9.getComponentAt(var20);
    java.awt.Point var22 = var7.getLocation(var20);
    var7.setOtherInfo("");
    var7.setFeature("Title");
    var7.removeNotify();
    com.allenstudio.ir.util.XmlElement var28 = new com.allenstudio.ir.util.XmlElement();
    com.allenstudio.ir.util.XmlElement var30 = var28.addSubElement("hi!");
    com.allenstudio.ir.util.XmlElement var31 = new com.allenstudio.ir.util.XmlElement();
    com.allenstudio.ir.util.XmlElement var33 = var31.addSubElement("hi!");
    var33.notifyObservers((java.lang.Object)(byte)1);
    var28.append(var33);
    com.allenstudio.ir.util.XmlElement var37 = new com.allenstudio.ir.util.XmlElement();
    com.allenstudio.ir.util.XmlElement var39 = var37.addSubElement("hi!");
    java.lang.String var41 = var37.getAttribute("C:\\boot.ini");
    com.allenstudio.ir.util.XmlElement var42 = var33.addSubElement(var37);
    java.lang.String var45 = var33.getAttribute("Title", "ToolBarUI");
    var3.putClientProperty((java.lang.Object)var7, (java.lang.Object)"Title");
    var7.doLayout();
    java.lang.String var48 = var7.getDescription();
    int var50 = var0.indexOf((com.allenstudio.ir.core.plugins.AbstractNote)var7, 556);
    com.allenstudio.ir.core.plugins.CommonNote var51 = new com.allenstudio.ir.core.plugins.CommonNote();
    var51.resize(0, 1);
    java.lang.String var55 = var51.getOtherInfo();
    javax.swing.event.AncestorListener[] var56 = var51.getAncestorListeners();
    boolean var57 = var0.removeElement((com.allenstudio.ir.core.plugins.AbstractNote)var51);
    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      com.allenstudio.ir.core.plugins.AbstractNote var58 = var0.lastElement();
      fail("Expected exception of type java.util.NoSuchElementException");
    } catch (java.util.NoSuchElementException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var2 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var3);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var4 == 0.5f);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var5);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var6);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var8 + "' != '" + "C:\\boot.ini"+ "'", var8.equals("C:\\boot.ini"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var11 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var19);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var20);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var21);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var22);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var30);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var33);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var39);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var41);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var42);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var45 + "' != '" + "ToolBarUI"+ "'", var45.equals("ToolBarUI"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var48 + "' != '" + "This is a testing description. \u03E3\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\u073F\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD"+ "'", var48.equals("This is a testing description. \u03E3\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\u073F\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var50 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var55);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var56);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var57 == false);

  }

  public void test264() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest1.test264");


    com.allenstudio.ir.util.XmlElement var0 = new com.allenstudio.ir.util.XmlElement();
    com.allenstudio.ir.util.XmlElement var2 = var0.addSubElement("hi!");
    com.allenstudio.ir.util.XmlElement var3 = new com.allenstudio.ir.util.XmlElement();
    com.allenstudio.ir.util.XmlElement var5 = var3.addSubElement("hi!");
    var5.notifyObservers((java.lang.Object)(byte)1);
    var0.append(var5);
    com.allenstudio.ir.util.XmlElement var9 = new com.allenstudio.ir.util.XmlElement();
    com.allenstudio.ir.util.XmlElement var11 = var9.addSubElement("hi!");
    java.lang.String var13 = var9.getAttribute("C:\\boot.ini");
    com.allenstudio.ir.util.XmlElement var14 = var5.addSubElement(var9);
    com.allenstudio.ir.util.XmlElement var15 = var14.getParent();
    java.lang.String var18 = var15.getAttribute("", "This is a testing description. \u03E3\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\u073F\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD");
    com.allenstudio.ir.util.XmlElement var19 = new com.allenstudio.ir.util.XmlElement();
    com.allenstudio.ir.util.XmlElement var21 = var19.addSubElement("hi!");
    com.allenstudio.ir.util.XmlElement var22 = new com.allenstudio.ir.util.XmlElement();
    com.allenstudio.ir.util.XmlElement var24 = var22.addSubElement("hi!");
    var24.notifyObservers((java.lang.Object)(byte)1);
    var19.append(var24);
    com.allenstudio.ir.util.XmlElement var28 = new com.allenstudio.ir.util.XmlElement();
    com.allenstudio.ir.util.XmlElement var30 = var28.addSubElement("hi!");
    java.lang.String var32 = var28.getAttribute("C:\\boot.ini");
    com.allenstudio.ir.util.XmlElement var33 = var24.addSubElement(var28);
    java.lang.String var36 = var24.getAttribute("Title", "ToolBarUI");
    var15.setParent(var24);
    com.allenstudio.ir.util.XmlElement var38 = var15.getParent();
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var2);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var5);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var11);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var13);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var14);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var15);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var18 + "' != '" + "This is a testing description. \u03E3\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\u073F\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD"+ "'", var18.equals("This is a testing description. \u03E3\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\u073F\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var21);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var24);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var30);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var32);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var33);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var36 + "' != '" + "ToolBarUI"+ "'", var36.equals("ToolBarUI"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var38);

  }

  public void test265() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest1.test265");


    com.allenstudio.ir.core.plugins.CommonNote var0 = new com.allenstudio.ir.core.plugins.CommonNote();
    var0.resize(0, 1);
    var0.setFocusCycleRoot(false);
    float var6 = var0.getAlignmentY();
    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      var0.remove(2015);
      fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException");
    } catch (java.lang.ArrayIndexOutOfBoundsException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var6 == 0.5f);

  }

  public void test266() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest1.test266");


    com.allenstudio.ir.ui.StatusBar var0 = new com.allenstudio.ir.ui.StatusBar();
    var0.enable();
    boolean var2 = var0.isFocusOwner();
    var0.firePropertyChange("hi!", 10L, 0L);
    com.allenstudio.ir.ui.StatusBar var7 = new com.allenstudio.ir.ui.StatusBar();
    var7.enable();
    boolean var9 = var7.isFocusOwner();
    var7.firePropertyChange("hi!", 10L, 0L);
    var7.layout();
    var7.removeAll();
    com.allenstudio.ir.ui.StatusBar var16 = new com.allenstudio.ir.ui.StatusBar();
    javax.swing.JRootPane var17 = var16.getRootPane();
    java.awt.Point var18 = var16.location();
    java.awt.Component var19 = var7.getComponentAt(var18);
    java.awt.Component var20 = var0.getComponentAt(var18);
    java.beans.VetoableChangeListener[] var21 = var0.getVetoableChangeListeners();
    int var22 = var0.getHeight();
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var2 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var9 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var17);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var18);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var19);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var20);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var21);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var22 == 0);

  }

  public void test267() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest1.test267");


    com.allenstudio.ir.ui.DatePickerPane var0 = new com.allenstudio.ir.ui.DatePickerPane();
    var0.transferFocus();
    com.allenstudio.ir.ui.Toolbar var2 = new com.allenstudio.ir.ui.Toolbar();
    java.awt.image.ColorModel var3 = var2.getColorModel();
    var2.setEnabled(true);
    java.awt.Component var7 = var2.getComponentAtIndex(1);
    boolean var8 = var2.isFloatable();
    var0.setContent((java.awt.Component)var2);
    java.awt.Dimension var10 = var0.size();
    com.allenstudio.ir.ui.Toolbar var11 = new com.allenstudio.ir.ui.Toolbar();
    boolean var12 = var11.isFloatable();
    var11.show();
    boolean var14 = var11.isRequestFocusEnabled();
    java.awt.Dimension var15 = var11.minimumSize();
    var0.setToolBar((javax.swing.JToolBar)var11);
    java.awt.Image var19 = var0.createImage(10, (-1));
    java.lang.String var20 = var0.getToolTipText();
    var0.invalidate();
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var3);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var7);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var8 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var10);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var12 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var14 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var15);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var19);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var20);

  }

  public void test268() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest1.test268");


    com.allenstudio.ir.ui.NoteListsTabPane var0 = new com.allenstudio.ir.ui.NoteListsTabPane();
    com.allenstudio.ir.ui.Toolbar var1 = new com.allenstudio.ir.ui.Toolbar();
    boolean var2 = var1.isFloatable();
    var1.show();
    java.awt.image.ColorModel var4 = var1.getColorModel();
    boolean var5 = var1.isFocusCycleRoot();
    com.allenstudio.ir.ui.DatePickerPane var6 = new com.allenstudio.ir.ui.DatePickerPane();
    var6.transferFocus();
    com.allenstudio.ir.ui.Toolbar var8 = new com.allenstudio.ir.ui.Toolbar();
    java.awt.image.ColorModel var9 = var8.getColorModel();
    var8.setEnabled(true);
    java.awt.Component var13 = var8.getComponentAtIndex(1);
    boolean var14 = var8.isFloatable();
    var6.setContent((java.awt.Component)var8);
    java.awt.Dimension var16 = var6.size();
    com.allenstudio.ir.ui.Toolbar var17 = new com.allenstudio.ir.ui.Toolbar();
    boolean var18 = var17.isFloatable();
    var17.show();
    boolean var20 = var17.isRequestFocusEnabled();
    java.awt.Dimension var21 = var17.minimumSize();
    var6.setToolBar((javax.swing.JToolBar)var17);
    java.awt.Image var25 = var6.createImage(10, (-1));
    var0.add((java.awt.Component)var1, (java.lang.Object)10);
    com.allenstudio.ir.ui.Toolbar var27 = new com.allenstudio.ir.ui.Toolbar();
    boolean var28 = var27.isFloatable();
    java.awt.Component var30 = var27.getComponentAtIndex(10);
    boolean var31 = var27.isLightweight();
    java.awt.Component var32 = var0.add((java.awt.Component)var27);
    com.allenstudio.ir.ui.NoteListsTabPane var33 = new com.allenstudio.ir.ui.NoteListsTabPane();
    com.allenstudio.ir.ui.Toolbar var34 = new com.allenstudio.ir.ui.Toolbar();
    boolean var35 = var34.isFloatable();
    var34.show();
    java.awt.image.ColorModel var37 = var34.getColorModel();
    boolean var38 = var34.isFocusCycleRoot();
    com.allenstudio.ir.ui.DatePickerPane var39 = new com.allenstudio.ir.ui.DatePickerPane();
    var39.transferFocus();
    com.allenstudio.ir.ui.Toolbar var41 = new com.allenstudio.ir.ui.Toolbar();
    java.awt.image.ColorModel var42 = var41.getColorModel();
    var41.setEnabled(true);
    java.awt.Component var46 = var41.getComponentAtIndex(1);
    boolean var47 = var41.isFloatable();
    var39.setContent((java.awt.Component)var41);
    java.awt.Dimension var49 = var39.size();
    com.allenstudio.ir.ui.Toolbar var50 = new com.allenstudio.ir.ui.Toolbar();
    boolean var51 = var50.isFloatable();
    var50.show();
    boolean var53 = var50.isRequestFocusEnabled();
    java.awt.Dimension var54 = var50.minimumSize();
    var39.setToolBar((javax.swing.JToolBar)var50);
    java.awt.Image var58 = var39.createImage(10, (-1));
    var33.add((java.awt.Component)var34, (java.lang.Object)10);
    var33.setSelectedIndex(1);
    javax.swing.plaf.TabbedPaneUI var62 = var33.getUI();
    javax.swing.SingleSelectionModel var63 = var33.getModel();
    var0.setModel(var63);
    javax.accessibility.AccessibleContext var65 = var0.getAccessibleContext();
    var0.setDoubleBuffered(false);
    com.allenstudio.ir.ui.NoteListsTabPane var68 = new com.allenstudio.ir.ui.NoteListsTabPane();
    var68.setSelectedIndex(1);
    java.awt.Component var71 = var68.getSelectedComponent();
    java.awt.Component var72 = var68.getSelectedComponent();
    com.allenstudio.ir.ui.DatePickerPane var73 = new com.allenstudio.ir.ui.DatePickerPane();
    var73.transferFocus();
    com.allenstudio.ir.ui.Toolbar var75 = new com.allenstudio.ir.ui.Toolbar();
    java.awt.image.ColorModel var76 = var75.getColorModel();
    var75.setEnabled(true);
    java.awt.Component var80 = var75.getComponentAtIndex(1);
    boolean var81 = var75.isFloatable();
    var73.setContent((java.awt.Component)var75);
    var73.setSelected(true);
    boolean var85 = var73.isFocusable();
    com.allenstudio.ir.ui.StatusBar var86 = new com.allenstudio.ir.ui.StatusBar();
    com.allenstudio.ir.core.plugins.CommonNote var87 = new com.allenstudio.ir.core.plugins.CommonNote();
    var87.setFocusTraversalPolicyProvider(false);
    var86.remove((java.awt.Component)var87);
    var87.setFeature("ToolBarUI");
    javax.swing.Icon var93 = var87.getIcon();
    var73.setFrameIcon(var93);
    int var95 = var68.indexOfTab(var93);
    int var96 = var0.indexOfTab(var93);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var2 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var4);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var5 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var9);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var13);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var14 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var16);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var18 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var20 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var21);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var25);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var28 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var30);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var31 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var32);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var35 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var37);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var38 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var42);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var46);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var47 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var49);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var51 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var53 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var54);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var58);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var62);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var63);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var65);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var71);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var72);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var76);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var80);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var81 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var85 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var93);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var95 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var96 == (-1));

  }

  public void test269() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest1.test269");


    com.allenstudio.ir.ui.DatePickerPane var0 = new com.allenstudio.ir.ui.DatePickerPane();
    var0.transferFocus();
    com.allenstudio.ir.ui.Toolbar var2 = new com.allenstudio.ir.ui.Toolbar();
    java.awt.image.ColorModel var3 = var2.getColorModel();
    var2.setEnabled(true);
    java.awt.Component var7 = var2.getComponentAtIndex(1);
    boolean var8 = var2.isFloatable();
    var0.setContent((java.awt.Component)var2);
    var0.setSelected(true);
    var0.invalidate();
    var0.show();
    java.awt.Container var14 = var0.getContentPane();
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var3);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var7);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var8 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var14);

  }

  public void test270() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest1.test270");


    com.allenstudio.ir.ui.MainFrame var0 = new com.allenstudio.ir.ui.MainFrame();
    boolean var1 = var0.isShowing();
    int var2 = var0.countComponents();
    com.allenstudio.ir.ui.StatusBar var3 = new com.allenstudio.ir.ui.StatusBar();
    var3.enable();
    com.allenstudio.ir.ui.StatusBar var5 = new com.allenstudio.ir.ui.StatusBar();
    var5.enable();
    boolean var7 = var5.isFocusOwner();
    var5.firePropertyChange("hi!", 10L, 0L);
    var5.layout();
    var5.removeAll();
    com.allenstudio.ir.ui.StatusBar var14 = new com.allenstudio.ir.ui.StatusBar();
    javax.swing.JRootPane var15 = var14.getRootPane();
    java.awt.Point var16 = var14.location();
    java.awt.Point var17 = var5.getLocation(var16);
    var3.setLocation(var17);
    var0.setLocation(var17);
    int var20 = var0.getExtendedState();
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var1 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var2 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var7 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var15);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var16);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var17);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var20 == 0);

  }

  public void test271() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest1.test271");


    com.allenstudio.ir.ui.MainFrame var0 = new com.allenstudio.ir.ui.MainFrame();
    java.lang.String var1 = var0.getWarningString();
    boolean var2 = var0.isAlwaysOnTopSupported();
    com.allenstudio.ir.ui.StatusBar var3 = new com.allenstudio.ir.ui.StatusBar();
    javax.swing.JRootPane var4 = var3.getRootPane();
    java.awt.Point var5 = var3.location();
    com.allenstudio.ir.ui.StatusBar var6 = new com.allenstudio.ir.ui.StatusBar();
    javax.swing.JRootPane var7 = var6.getRootPane();
    java.awt.Point var8 = var6.location();
    com.allenstudio.ir.ui.Toolbar var9 = new com.allenstudio.ir.ui.Toolbar();
    boolean var10 = var9.isFloatable();
    java.awt.Component var12 = var9.getComponentAtIndex(10);
    java.lang.Object var13 = var6.getClientProperty((java.lang.Object)10);
    java.awt.Dimension var14 = var6.getMaximumSize();
    var3.setMinimumSize(var14);
    java.awt.Rectangle var16 = var3.getBounds();
    java.awt.Rectangle var17 = var0.getBounds(var16);
    java.awt.Rectangle var18 = var0.getMaximizedBounds();
    java.awt.Image var19 = var0.getIconImage();
    var0.setBounds(10, 3, 0, 6);
    var0.enableInputMethods(false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var2 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var4);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var5);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var7);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var8);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var10 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var12);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var13);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var14);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var16);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var17);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var18);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var19);

  }

  public void test272() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest1.test272");


    com.allenstudio.ir.ui.NoteListsTabPane var0 = new com.allenstudio.ir.ui.NoteListsTabPane();
    com.allenstudio.ir.ui.Toolbar var1 = new com.allenstudio.ir.ui.Toolbar();
    boolean var2 = var1.isFloatable();
    var1.show();
    java.awt.image.ColorModel var4 = var1.getColorModel();
    boolean var5 = var1.isFocusCycleRoot();
    com.allenstudio.ir.ui.DatePickerPane var6 = new com.allenstudio.ir.ui.DatePickerPane();
    var6.transferFocus();
    com.allenstudio.ir.ui.Toolbar var8 = new com.allenstudio.ir.ui.Toolbar();
    java.awt.image.ColorModel var9 = var8.getColorModel();
    var8.setEnabled(true);
    java.awt.Component var13 = var8.getComponentAtIndex(1);
    boolean var14 = var8.isFloatable();
    var6.setContent((java.awt.Component)var8);
    java.awt.Dimension var16 = var6.size();
    com.allenstudio.ir.ui.Toolbar var17 = new com.allenstudio.ir.ui.Toolbar();
    boolean var18 = var17.isFloatable();
    var17.show();
    boolean var20 = var17.isRequestFocusEnabled();
    java.awt.Dimension var21 = var17.minimumSize();
    var6.setToolBar((javax.swing.JToolBar)var17);
    java.awt.Image var25 = var6.createImage(10, (-1));
    var0.add((java.awt.Component)var1, (java.lang.Object)10);
    com.allenstudio.ir.ui.Toolbar var27 = new com.allenstudio.ir.ui.Toolbar();
    boolean var28 = var27.isFloatable();
    java.awt.Component var30 = var27.getComponentAtIndex(10);
    boolean var31 = var27.isLightweight();
    java.awt.Component var32 = var0.add((java.awt.Component)var27);
    var0.repaint((-1L));
    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      java.awt.Component var36 = var0.getTabComponentAt(5);
      fail("Expected exception of type java.lang.IndexOutOfBoundsException");
    } catch (java.lang.IndexOutOfBoundsException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var2 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var4);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var5 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var9);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var13);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var14 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var16);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var18 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var20 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var21);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var25);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var28 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var30);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var31 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var32);

  }

  public void test273() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest1.test273");


    com.allenstudio.ir.core.plugins.CommonNote var0 = new com.allenstudio.ir.core.plugins.CommonNote();
    java.lang.String var1 = var0.getFeature();
    com.allenstudio.ir.ui.StatusBar var2 = new com.allenstudio.ir.ui.StatusBar();
    var2.enable();
    boolean var4 = var2.isFocusOwner();
    var2.firePropertyChange("hi!", 10L, 0L);
    var2.layout();
    var2.removeAll();
    com.allenstudio.ir.ui.StatusBar var11 = new com.allenstudio.ir.ui.StatusBar();
    javax.swing.JRootPane var12 = var11.getRootPane();
    java.awt.Point var13 = var11.location();
    java.awt.Component var14 = var2.getComponentAt(var13);
    java.awt.Point var15 = var0.getLocation(var13);
    var0.setOtherInfo("");
    var0.setFeature("Title");
    boolean var20 = var0.requestFocusInWindow();
    com.allenstudio.ir.ui.StatusBar var21 = new com.allenstudio.ir.ui.StatusBar();
    int var22 = var21.getY();
    javax.swing.JToolTip var23 = var21.createToolTip();
    float var24 = var23.getAlignmentY();
    java.awt.Color var25 = var23.getForeground();
    boolean var26 = var23.isDisplayable();
    java.awt.Dimension var27 = var23.getPreferredSize();
    var0.setSize(var27);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var1 + "' != '" + "C:\\boot.ini"+ "'", var1.equals("C:\\boot.ini"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var4 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var12);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var13);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var14);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var15);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var20 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var22 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var23);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var24 == 0.5f);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var25);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var26 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var27);

  }

  public void test274() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest1.test274");


    com.allenstudio.ir.ui.DatePickerPane var0 = new com.allenstudio.ir.ui.DatePickerPane();
    java.awt.Container var1 = var0.getContentPane();
    java.awt.Container var2 = var0.getContentPane();
    com.allenstudio.ir.ui.Toolbar var3 = new com.allenstudio.ir.ui.Toolbar();
    java.awt.image.ColorModel var4 = var3.getColorModel();
    java.awt.im.InputContext var5 = var3.getInputContext();
    java.awt.Component var7 = var3.getComponent(0);
    java.awt.LayoutManager var8 = var3.getLayout();
    boolean var9 = var3.isRequestFocusEnabled();
    boolean var10 = var3.requestFocusInWindow();
    var0.setToolBar((javax.swing.JToolBar)var3);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var1);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var2);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var4);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var5);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var7);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var8);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var9 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var10 == false);

  }

  public void test275() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest1.test275");


    com.allenstudio.ir.ui.MainFrame var0 = new com.allenstudio.ir.ui.MainFrame();
    boolean var1 = var0.isShowing();
    int var2 = var0.countComponents();
    var0.setAutoRequestFocus(false);
    javax.swing.JMenuBar var5 = var0.getJMenuBar();
    boolean var6 = var5.isBorderPainted();
    var5.updateUI();
    var5.removeNotify();
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var1 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var2 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var5);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var6 == true);

  }

  public void test276() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest1.test276");


    com.allenstudio.ir.ui.calendar.MonthlyCalendarModel var0 = new com.allenstudio.ir.ui.calendar.MonthlyCalendarModel();
    int var1 = var0.getSelectedDate();
    boolean var3 = var0.isMarked(31);
    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      boolean var5 = var0.isMarked(0);
      fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException");
    } catch (java.lang.ArrayIndexOutOfBoundsException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var1 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var3 == false);

  }

  public void test277() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest1.test277");


    com.allenstudio.ir.ui.StatusBar var0 = new com.allenstudio.ir.ui.StatusBar();
    int var1 = var0.getY();
    var0.setIgnoreRepaint(true);
    boolean var4 = var0.requestFocusInWindow();
    boolean var5 = var0.isOpaque();
    int var6 = var0.getY();
    boolean var7 = var0.isEnabled();
    boolean var8 = var0.isManagingFocus();
    int var9 = var0.getWidth();
    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      boolean var11 = var0.areFocusTraversalKeysSet(5);
      fail("Expected exception of type java.lang.IllegalArgumentException");
    } catch (java.lang.IllegalArgumentException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var1 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var4 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var5 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var6 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var7 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var8 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var9 == 0);

  }

  public void test278() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest1.test278");


    com.allenstudio.ir.ui.StatusBar var0 = new com.allenstudio.ir.ui.StatusBar();
    var0.enable();
    boolean var2 = var0.isFocusOwner();
    var0.firePropertyChange("hi!", 10L, 0L);
    var0.layout();
    int var8 = var0.getY();
    var0.updateUI();
    boolean var11 = var0.areFocusTraversalKeysSet(1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var2 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var8 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var11 == false);

  }

  public void test279() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest1.test279");


    com.allenstudio.ir.ui.DatePickerPane var0 = new com.allenstudio.ir.ui.DatePickerPane();
    javax.swing.KeyStroke[] var1 = var0.getRegisteredKeyStrokes();
    boolean var2 = var0.isFocusTraversalPolicySet();
    boolean var3 = var0.isDisplayable();
    var0.setLocation(1, 4);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var2 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var3 == false);

  }

  public void test280() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest1.test280");


    com.allenstudio.ir.util.XmlElement var1 = new com.allenstudio.ir.util.XmlElement("C:\\boot.ini");

  }

  public void test281() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest1.test281");


    com.allenstudio.ir.ui.Toolbar var0 = new com.allenstudio.ir.ui.Toolbar();
    java.awt.event.MouseWheelListener[] var1 = var0.getMouseWheelListeners();
    java.awt.event.MouseListener[] var2 = var0.getMouseListeners();
    var0.firePropertyChange("", false, true);
    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      var0.setOrientation(3);
      fail("Expected exception of type java.lang.IllegalArgumentException");
    } catch (java.lang.IllegalArgumentException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var1);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var2);

  }

  public void test282() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest1.test282");


    com.allenstudio.ir.core.ConfigurationManager var0 = com.allenstudio.ir.core.ConfigurationManager.getInstance();
    java.util.Set var1 = var0.stringPropertyNames();
    java.util.Set var2 = var0.stringPropertyNames();
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var0);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var1);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var2);

  }

  public void test283() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest1.test283");


    com.allenstudio.ir.ui.StatusBar var0 = new com.allenstudio.ir.ui.StatusBar();
    int var1 = var0.getY();
    javax.swing.JToolTip var2 = var0.createToolTip();
    javax.swing.border.Border var3 = var0.getBorder();
    boolean var4 = var0.isFocusTraversalPolicySet();
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var1 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var2);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var3);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var4 == false);

  }

  public void test284() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest1.test284");


    com.allenstudio.ir.ui.MainFrame var0 = new com.allenstudio.ir.ui.MainFrame();
    java.lang.String var1 = var0.getWarningString();
    java.lang.String var2 = var0.getWarningString();
    java.awt.Container var3 = var0.getFocusCycleRootAncestor();
    com.allenstudio.ir.ui.StatusBar var4 = new com.allenstudio.ir.ui.StatusBar();
    boolean var5 = var4.isBackgroundSet();
    boolean var8 = var4.contains(10, 100);
    var4.revalidate();
    javax.swing.JToolTip var10 = var4.createToolTip();
    com.allenstudio.ir.ui.StatusBar var11 = new com.allenstudio.ir.ui.StatusBar();
    javax.swing.JRootPane var12 = var11.getRootPane();
    java.awt.Point var13 = var11.location();
    com.allenstudio.ir.ui.StatusBar var14 = new com.allenstudio.ir.ui.StatusBar();
    javax.swing.JRootPane var15 = var14.getRootPane();
    java.awt.Point var16 = var14.location();
    com.allenstudio.ir.ui.Toolbar var17 = new com.allenstudio.ir.ui.Toolbar();
    boolean var18 = var17.isFloatable();
    java.awt.Component var20 = var17.getComponentAtIndex(10);
    java.lang.Object var21 = var14.getClientProperty((java.lang.Object)10);
    java.awt.Dimension var22 = var14.getMaximumSize();
    var11.setMinimumSize(var22);
    java.awt.Rectangle var24 = var11.getBounds();
    var4.scrollRectToVisible(var24);
    var0.setMaximizedBounds(var24);
    var0.pack();
    float var28 = var0.getOpacity();
    com.allenstudio.ir.ui.MainFrame var29 = new com.allenstudio.ir.ui.MainFrame();
    java.lang.String var30 = var29.getWarningString();
    java.lang.String var31 = var29.getWarningString();
    boolean var32 = var29.isAutoRequestFocus();
    boolean var33 = var29.isResizable();
    javax.swing.JRootPane var34 = var29.getRootPane();
    java.util.List var35 = var29.getIconImages();
    var0.setIconImages(var35);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var1);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var2);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var3);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var5 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var8 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var10);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var12);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var13);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var15);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var16);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var18 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var20);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var21);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var22);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var24);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var28 == 1.0f);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var30);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var31);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var32 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var33 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var34);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var35);

  }

  public void test285() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest1.test285");


    com.allenstudio.ir.core.plugins.CommonNoteModel var0 = new com.allenstudio.ir.core.plugins.CommonNoteModel();
    var0.setSelected(true);
    java.lang.String[] var3 = var0.getThumbnailContent();
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var3);

  }

  public void test286() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest1.test286");


    com.allenstudio.ir.ui.MainFrame var0 = new com.allenstudio.ir.ui.MainFrame();
    boolean var1 = var0.isShowing();
    int var2 = var0.countComponents();
    var0.setAutoRequestFocus(false);
    javax.swing.JMenuBar var5 = var0.getJMenuBar();
    boolean var6 = var5.isBorderPainted();
    var5.updateUI();
    com.allenstudio.ir.ui.DatePickerPane var8 = new com.allenstudio.ir.ui.DatePickerPane();
    var8.transferFocus();
    java.awt.Dimension var10 = var8.getMinimumSize();
    java.awt.Dimension var11 = var5.getSize(var10);
    javax.swing.plaf.MenuBarUI var12 = var5.getUI();
    javax.swing.JToolTip var13 = var5.createToolTip();
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var1 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var2 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var5);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var6 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var10);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var11);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var12);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var13);

  }

  public void test287() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest1.test287");


    com.allenstudio.ir.ui.StatusBar var0 = new com.allenstudio.ir.ui.StatusBar();
    int var1 = var0.getY();
    javax.swing.JToolTip var2 = var0.createToolTip();
    java.beans.PropertyChangeListener[] var4 = var2.getPropertyChangeListeners("This is a testing description. \u03E3\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\u073F\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD");
    java.util.Locale var5 = var2.getLocale();
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var1 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var2);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var4);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var5);

  }

  public void test288() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest1.test288");


    com.allenstudio.ir.ui.StatusBar var0 = new com.allenstudio.ir.ui.StatusBar();
    javax.swing.JRootPane var1 = var0.getRootPane();
    java.awt.Point var2 = var0.location();
    com.allenstudio.ir.ui.Toolbar var3 = new com.allenstudio.ir.ui.Toolbar();
    boolean var4 = var3.isFloatable();
    java.awt.Component var6 = var3.getComponentAtIndex(10);
    java.lang.Object var7 = var0.getClientProperty((java.lang.Object)10);
    var0.setFocusTraversalPolicyProvider(false);
    boolean var10 = var0.isManagingFocus();
    int var11 = var0.getHeight();
    javax.swing.JToolTip var12 = var0.createToolTip();
    var12.removeNotify();
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var1);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var2);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var4 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var6);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var7);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var10 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var11 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var12);

  }

  public void test289() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest1.test289");


    com.allenstudio.ir.ui.StatusBar var0 = new com.allenstudio.ir.ui.StatusBar();
    var0.enable();
    boolean var2 = var0.isFocusOwner();
    var0.firePropertyChange("hi!", 10L, 0L);
    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      java.util.Set var8 = var0.getFocusTraversalKeys(4);
      fail("Expected exception of type java.lang.IllegalArgumentException");
    } catch (java.lang.IllegalArgumentException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var2 == false);

  }

  public void test290() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest1.test290");


    com.allenstudio.ir.ui.DatePickerPane var0 = new com.allenstudio.ir.ui.DatePickerPane();
    var0.transferFocus();
    com.allenstudio.ir.ui.Toolbar var2 = new com.allenstudio.ir.ui.Toolbar();
    java.awt.image.ColorModel var3 = var2.getColorModel();
    var2.setEnabled(true);
    java.awt.Component var7 = var2.getComponentAtIndex(1);
    boolean var8 = var2.isFloatable();
    var0.setContent((java.awt.Component)var2);
    var0.setSelected(true);
    java.lang.Object var12 = var0.getTreeLock();
    java.awt.Dimension var13 = var0.getSize();
    java.awt.Dimension var14 = var0.getPreferredSize();
    com.allenstudio.ir.ui.MainFrame var15 = new com.allenstudio.ir.ui.MainFrame();
    boolean var16 = var15.isShowing();
    var15.setAutoRequestFocus(false);
    var15.setTitle("PanelUI");
    var15.setVisible(true);
    java.awt.Image var23 = var15.getIconImage();
    java.awt.Dimension var24 = var15.getMinimumSize();
    var0.resize(var24);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var3);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var7);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var8 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var12);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var13);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var14);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var16 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var23);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var24);

  }

  public void test291() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest1.test291");


    com.allenstudio.ir.ui.NoteList var0 = new com.allenstudio.ir.ui.NoteList();
    com.allenstudio.ir.ui.MainFrame var1 = new com.allenstudio.ir.ui.MainFrame();
    java.lang.String var2 = var1.getWarningString();
    java.awt.Rectangle var3 = var1.getMaximizedBounds();
    java.awt.MenuBar var4 = var1.getMenuBar();
    com.allenstudio.ir.core.plugins.CommonNote var5 = new com.allenstudio.ir.core.plugins.CommonNote();
    var5.resize(0, 1);
    com.allenstudio.ir.ui.NoteListCell var9 = new com.allenstudio.ir.ui.NoteListCell((com.allenstudio.ir.core.plugins.AbstractNote)var5);
    com.allenstudio.ir.ui.StatusBar var10 = new com.allenstudio.ir.ui.StatusBar();
    boolean var11 = var10.isBackgroundSet();
    boolean var14 = var10.contains(10, 100);
    var10.revalidate();
    javax.swing.JToolTip var16 = var10.createToolTip();
    com.allenstudio.ir.ui.StatusBar var17 = new com.allenstudio.ir.ui.StatusBar();
    javax.swing.JRootPane var18 = var17.getRootPane();
    java.awt.Point var19 = var17.location();
    com.allenstudio.ir.ui.StatusBar var20 = new com.allenstudio.ir.ui.StatusBar();
    javax.swing.JRootPane var21 = var20.getRootPane();
    java.awt.Point var22 = var20.location();
    com.allenstudio.ir.ui.Toolbar var23 = new com.allenstudio.ir.ui.Toolbar();
    boolean var24 = var23.isFloatable();
    java.awt.Component var26 = var23.getComponentAtIndex(10);
    java.lang.Object var27 = var20.getClientProperty((java.lang.Object)10);
    java.awt.Dimension var28 = var20.getMaximumSize();
    var17.setMinimumSize(var28);
    java.awt.Rectangle var30 = var17.getBounds();
    var10.scrollRectToVisible(var30);
    var5.repaint(var30);
    var1.setMaximizedBounds(var30);
    int var36 = var0.getScrollableBlockIncrement(var30, 1, 4);
    com.allenstudio.ir.core.plugins.CommonNote var37 = new com.allenstudio.ir.core.plugins.CommonNote();
    var37.resize(0, 1);
    com.allenstudio.ir.ui.NoteListCell var41 = new com.allenstudio.ir.ui.NoteListCell((com.allenstudio.ir.core.plugins.AbstractNote)var37);
    int var42 = var41.getIndexInList();
    var0.addCell(var41);
    com.allenstudio.ir.core.plugins.CommonNote var44 = new com.allenstudio.ir.core.plugins.CommonNote();
    var44.resize(0, 1);
    com.allenstudio.ir.ui.NoteListCell var48 = new com.allenstudio.ir.ui.NoteListCell((com.allenstudio.ir.core.plugins.AbstractNote)var44);
    int var49 = var48.getIndexInList();
    java.awt.Dimension var50 = var48.getMaximumSize();
    java.awt.LayoutManager var51 = var48.getLayout();
    var0.addCell(var48);
    var48.updateUI();
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var2);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var3);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var4);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var11 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var14 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var16);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var18);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var19);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var21);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var22);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var24 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var26);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var27);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var28);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var30);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var36 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var42 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var49 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var50);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var51);

  }

  public void test292() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest1.test292");


    com.allenstudio.ir.ui.NoteList var0 = new com.allenstudio.ir.ui.NoteList();
    com.allenstudio.ir.ui.NoteList var1 = new com.allenstudio.ir.ui.NoteList();
    com.allenstudio.ir.ui.MainFrame var2 = new com.allenstudio.ir.ui.MainFrame();
    java.lang.String var3 = var2.getWarningString();
    java.awt.Rectangle var4 = var2.getMaximizedBounds();
    java.awt.MenuBar var5 = var2.getMenuBar();
    com.allenstudio.ir.core.plugins.CommonNote var6 = new com.allenstudio.ir.core.plugins.CommonNote();
    var6.resize(0, 1);
    com.allenstudio.ir.ui.NoteListCell var10 = new com.allenstudio.ir.ui.NoteListCell((com.allenstudio.ir.core.plugins.AbstractNote)var6);
    com.allenstudio.ir.ui.StatusBar var11 = new com.allenstudio.ir.ui.StatusBar();
    boolean var12 = var11.isBackgroundSet();
    boolean var15 = var11.contains(10, 100);
    var11.revalidate();
    javax.swing.JToolTip var17 = var11.createToolTip();
    com.allenstudio.ir.ui.StatusBar var18 = new com.allenstudio.ir.ui.StatusBar();
    javax.swing.JRootPane var19 = var18.getRootPane();
    java.awt.Point var20 = var18.location();
    com.allenstudio.ir.ui.StatusBar var21 = new com.allenstudio.ir.ui.StatusBar();
    javax.swing.JRootPane var22 = var21.getRootPane();
    java.awt.Point var23 = var21.location();
    com.allenstudio.ir.ui.Toolbar var24 = new com.allenstudio.ir.ui.Toolbar();
    boolean var25 = var24.isFloatable();
    java.awt.Component var27 = var24.getComponentAtIndex(10);
    java.lang.Object var28 = var21.getClientProperty((java.lang.Object)10);
    java.awt.Dimension var29 = var21.getMaximumSize();
    var18.setMinimumSize(var29);
    java.awt.Rectangle var31 = var18.getBounds();
    var11.scrollRectToVisible(var31);
    var6.repaint(var31);
    var2.setMaximizedBounds(var31);
    int var37 = var1.getScrollableBlockIncrement(var31, 1, 4);
    int var40 = var0.getScrollableBlockIncrement(var31, 0, 0);
    java.awt.Dimension var41 = var0.getPreferredScrollableViewportSize();
    var0.grabFocus();
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var3);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var4);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var5);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var12 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var15 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var17);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var19);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var20);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var22);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var23);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var25 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var27);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var28);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var29);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var31);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var37 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var40 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var41);

  }

  public void test293() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest1.test293");


    com.allenstudio.ir.ui.DatePickerPane var0 = new com.allenstudio.ir.ui.DatePickerPane();
    java.awt.Container var1 = var0.getContentPane();
    var0.setIgnoreRepaint(true);
    boolean var4 = var0.isSelected();
    java.awt.Color var5 = var0.getHeaderBackground();
    java.awt.Dimension var6 = var0.getMinimumSize();
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var4 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var5);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var6);

  }

  public void test294() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest1.test294");


    com.allenstudio.ir.ui.NoteList var0 = new com.allenstudio.ir.ui.NoteList();
    com.allenstudio.ir.ui.MainFrame var1 = new com.allenstudio.ir.ui.MainFrame();
    java.lang.String var2 = var1.getWarningString();
    java.awt.Rectangle var3 = var1.getMaximizedBounds();
    java.awt.MenuBar var4 = var1.getMenuBar();
    com.allenstudio.ir.core.plugins.CommonNote var5 = new com.allenstudio.ir.core.plugins.CommonNote();
    var5.resize(0, 1);
    com.allenstudio.ir.ui.NoteListCell var9 = new com.allenstudio.ir.ui.NoteListCell((com.allenstudio.ir.core.plugins.AbstractNote)var5);
    com.allenstudio.ir.ui.StatusBar var10 = new com.allenstudio.ir.ui.StatusBar();
    boolean var11 = var10.isBackgroundSet();
    boolean var14 = var10.contains(10, 100);
    var10.revalidate();
    javax.swing.JToolTip var16 = var10.createToolTip();
    com.allenstudio.ir.ui.StatusBar var17 = new com.allenstudio.ir.ui.StatusBar();
    javax.swing.JRootPane var18 = var17.getRootPane();
    java.awt.Point var19 = var17.location();
    com.allenstudio.ir.ui.StatusBar var20 = new com.allenstudio.ir.ui.StatusBar();
    javax.swing.JRootPane var21 = var20.getRootPane();
    java.awt.Point var22 = var20.location();
    com.allenstudio.ir.ui.Toolbar var23 = new com.allenstudio.ir.ui.Toolbar();
    boolean var24 = var23.isFloatable();
    java.awt.Component var26 = var23.getComponentAtIndex(10);
    java.lang.Object var27 = var20.getClientProperty((java.lang.Object)10);
    java.awt.Dimension var28 = var20.getMaximumSize();
    var17.setMinimumSize(var28);
    java.awt.Rectangle var30 = var17.getBounds();
    var10.scrollRectToVisible(var30);
    var5.repaint(var30);
    var1.setMaximizedBounds(var30);
    int var36 = var0.getScrollableBlockIncrement(var30, 1, 4);
    com.allenstudio.ir.core.plugins.CommonNote var37 = new com.allenstudio.ir.core.plugins.CommonNote();
    var37.resize(0, 1);
    com.allenstudio.ir.ui.NoteListCell var41 = new com.allenstudio.ir.ui.NoteListCell((com.allenstudio.ir.core.plugins.AbstractNote)var37);
    int var42 = var41.getIndexInList();
    var0.addCell(var41);
    boolean var44 = var0.getScrollableTracksViewportWidth();
    com.allenstudio.ir.ui.StatusBar var45 = new com.allenstudio.ir.ui.StatusBar();
    var45.enable();
    boolean var47 = var45.isFocusOwner();
    var45.firePropertyChange("hi!", 10L, 0L);
    var45.layout();
    int var53 = var45.getY();
    var45.updateUI();
    com.allenstudio.ir.core.plugins.CommonNote var55 = new com.allenstudio.ir.core.plugins.CommonNote();
    var55.resize(0, 1);
    com.allenstudio.ir.ui.NoteListCell var59 = new com.allenstudio.ir.ui.NoteListCell((com.allenstudio.ir.core.plugins.AbstractNote)var55);
    com.allenstudio.ir.ui.StatusBar var60 = new com.allenstudio.ir.ui.StatusBar();
    boolean var61 = var60.isBackgroundSet();
    boolean var64 = var60.contains(10, 100);
    var60.revalidate();
    javax.swing.JToolTip var66 = var60.createToolTip();
    com.allenstudio.ir.ui.StatusBar var67 = new com.allenstudio.ir.ui.StatusBar();
    javax.swing.JRootPane var68 = var67.getRootPane();
    java.awt.Point var69 = var67.location();
    com.allenstudio.ir.ui.StatusBar var70 = new com.allenstudio.ir.ui.StatusBar();
    javax.swing.JRootPane var71 = var70.getRootPane();
    java.awt.Point var72 = var70.location();
    com.allenstudio.ir.ui.Toolbar var73 = new com.allenstudio.ir.ui.Toolbar();
    boolean var74 = var73.isFloatable();
    java.awt.Component var76 = var73.getComponentAtIndex(10);
    java.lang.Object var77 = var70.getClientProperty((java.lang.Object)10);
    java.awt.Dimension var78 = var70.getMaximumSize();
    var67.setMinimumSize(var78);
    java.awt.Rectangle var80 = var67.getBounds();
    var60.scrollRectToVisible(var80);
    var55.repaint(var80);
    var45.computeVisibleRect(var80);
    java.awt.Rectangle var84 = var45.getBounds();
    int var87 = var0.getScrollableBlockIncrement(var84, 761, 556);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var2);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var3);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var4);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var11 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var14 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var16);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var18);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var19);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var21);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var22);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var24 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var26);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var27);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var28);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var30);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var36 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var42 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var44 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var47 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var53 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var61 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var64 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var66);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var68);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var69);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var71);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var72);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var74 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var76);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var77);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var78);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var80);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var84);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var87 == 0);

  }

  public void test295() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest1.test295");


    com.allenstudio.ir.util.XmlElement var0 = new com.allenstudio.ir.util.XmlElement();
    com.allenstudio.ir.util.XmlElement var2 = var0.addSubElement("hi!");
    com.allenstudio.ir.util.XmlElement var3 = new com.allenstudio.ir.util.XmlElement();
    com.allenstudio.ir.util.XmlElement var5 = var3.addSubElement("hi!");
    var5.notifyObservers((java.lang.Object)(byte)1);
    var0.append(var5);
    com.allenstudio.ir.util.XmlElement var9 = new com.allenstudio.ir.util.XmlElement();
    com.allenstudio.ir.util.XmlElement var11 = var9.addSubElement("hi!");
    java.lang.String var13 = var9.getAttribute("C:\\boot.ini");
    com.allenstudio.ir.util.XmlElement var14 = var5.addSubElement(var9);
    com.allenstudio.ir.util.XmlElement var15 = var14.getParent();
    com.allenstudio.ir.util.XmlIO var16 = new com.allenstudio.ir.util.XmlIO(var14);
    var16.endDocument();
    var16.infoDialog("hi!");
    var16.endPrefixMapping(" ");
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var2);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var5);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var11);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var13);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var14);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var15);

  }

  public void test296() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest1.test296");


    com.allenstudio.ir.ui.Toolbar var0 = new com.allenstudio.ir.ui.Toolbar();
    java.awt.image.ColorModel var1 = var0.getColorModel();
    var0.setEnabled(true);
    java.awt.Component var5 = var0.getComponentAtIndex(1);
    boolean var6 = var0.requestFocusInWindow();
    java.awt.FocusTraversalPolicy var7 = var0.getFocusTraversalPolicy();
    java.beans.PropertyChangeListener[] var9 = var0.getPropertyChangeListeners("Date Picker");
    boolean var10 = var0.isFontSet();
    com.allenstudio.ir.ui.calendar.MonthlyCalendar var11 = new com.allenstudio.ir.ui.calendar.MonthlyCalendar();
    var0.removeMouseListener((java.awt.event.MouseListener)var11);
    var0.setBorderPainted(false);
    com.allenstudio.ir.ui.StatusBar var15 = new com.allenstudio.ir.ui.StatusBar();
    boolean var16 = var15.isBackgroundSet();
    boolean var19 = var15.contains(10, 100);
    var15.revalidate();
    javax.swing.JToolTip var21 = var15.createToolTip();
    var15.displayTooltip("This is a testing description. \u03E3\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\u073F\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD");
    java.lang.Object var24 = var0.getClientProperty((java.lang.Object)"This is a testing description. \u03E3\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\u073F\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD");
    var0.doLayout();
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var1);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var5);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var6 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var7);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var9);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var10 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var16 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var19 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var21);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var24);

  }

  public void test297() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest1.test297");


    com.allenstudio.ir.ui.MainFrame var0 = new com.allenstudio.ir.ui.MainFrame();
    java.lang.String var1 = var0.getWarningString();
    java.lang.String var2 = var0.getWarningString();
    boolean var3 = var0.isAutoRequestFocus();
    com.allenstudio.ir.ui.MainFrame var4 = new com.allenstudio.ir.ui.MainFrame();
    java.lang.String var5 = var4.getWarningString();
    boolean var6 = var4.isAlwaysOnTopSupported();
    java.awt.Color var7 = var4.getBackground();
    var0.setBackground(var7);
    var0.transferFocusDownCycle();
    boolean var10 = var0.isFocusCycleRoot();
    var0.hide();
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var1);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var2);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var3 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var5);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var6 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var7);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var10 == true);

  }

  public void test298() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest1.test298");


    com.allenstudio.ir.util.XmlElement var0 = new com.allenstudio.ir.util.XmlElement();
    com.allenstudio.ir.util.XmlElement var2 = var0.addSubElement("hi!");
    var2.notifyObservers((java.lang.Object)(byte)1);
    java.lang.String var5 = var2.getData();
    java.lang.String var8 = var2.getAttribute("", "");
    com.allenstudio.ir.util.XmlElement var9 = new com.allenstudio.ir.util.XmlElement();
    com.allenstudio.ir.util.XmlElement var11 = var9.addSubElement("hi!");
    var11.notifyObservers((java.lang.Object)(byte)1);
    com.allenstudio.ir.util.XmlElement var14 = new com.allenstudio.ir.util.XmlElement();
    com.allenstudio.ir.util.XmlElement var16 = var14.addSubElement("hi!");
    var16.notifyObservers((java.lang.Object)(byte)1);
    com.allenstudio.ir.util.XmlElement var19 = var11.removeElement(var16);
    com.allenstudio.ir.util.XmlElement var20 = var2.removeElement(var16);
    boolean var21 = var2.hasChanged();
    com.allenstudio.ir.util.XmlElement var22 = new com.allenstudio.ir.util.XmlElement();
    com.allenstudio.ir.util.XmlElement var24 = var22.addSubElement("hi!");
    var24.notifyObservers((java.lang.Object)(byte)1);
    com.allenstudio.ir.util.XmlElement var27 = new com.allenstudio.ir.util.XmlElement();
    com.allenstudio.ir.util.XmlElement var29 = var27.addSubElement("hi!");
    var29.notifyObservers((java.lang.Object)(byte)1);
    com.allenstudio.ir.util.XmlElement var32 = var24.removeElement(var29);
    com.allenstudio.ir.util.XmlElement var33 = var29.getParent();
    com.allenstudio.ir.util.XmlElement var34 = new com.allenstudio.ir.util.XmlElement();
    com.allenstudio.ir.util.XmlElement var36 = var34.addSubElement("hi!");
    var36.notifyObservers((java.lang.Object)(byte)1);
    java.lang.String var39 = var36.getData();
    com.allenstudio.ir.util.XmlElement var40 = var29.addSubElement(var36);
    var2.append(var40);
    var40.deleteObservers();
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var2);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var5 + "' != '" + ""+ "'", var5.equals(""));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var8 + "' != '" + ""+ "'", var8.equals(""));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var11);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var16);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var19);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var20);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var21 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var24);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var29);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var32);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var33);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var36);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var39 + "' != '" + ""+ "'", var39.equals(""));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var40);

  }

  public void test299() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest1.test299");


    com.allenstudio.ir.ui.MainFrame var0 = new com.allenstudio.ir.ui.MainFrame();
    boolean var1 = var0.isShowing();
    var0.setAutoRequestFocus(false);
    var0.setTitle("PanelUI");
    var0.setVisible(true);
    boolean var8 = var0.isValidateRoot();
    com.allenstudio.ir.ui.DatePickerPane var9 = new com.allenstudio.ir.ui.DatePickerPane();
    java.lang.String var10 = var9.getUIClassID();
    com.allenstudio.ir.ui.StatusBar var11 = new com.allenstudio.ir.ui.StatusBar();
    int var12 = var11.getY();
    javax.swing.JToolTip var13 = var11.createToolTip();
    float var14 = var13.getAlignmentY();
    java.awt.Color var15 = var13.getForeground();
    var9.setBackground(var15);
    com.allenstudio.ir.ui.MainFrame var17 = new com.allenstudio.ir.ui.MainFrame();
    java.lang.String var18 = var17.getWarningString();
    boolean var19 = var17.isAlwaysOnTopSupported();
    com.allenstudio.ir.ui.StatusBar var20 = new com.allenstudio.ir.ui.StatusBar();
    javax.swing.JRootPane var21 = var20.getRootPane();
    java.awt.Point var22 = var20.location();
    com.allenstudio.ir.ui.StatusBar var23 = new com.allenstudio.ir.ui.StatusBar();
    javax.swing.JRootPane var24 = var23.getRootPane();
    java.awt.Point var25 = var23.location();
    com.allenstudio.ir.ui.Toolbar var26 = new com.allenstudio.ir.ui.Toolbar();
    boolean var27 = var26.isFloatable();
    java.awt.Component var29 = var26.getComponentAtIndex(10);
    java.lang.Object var30 = var23.getClientProperty((java.lang.Object)10);
    java.awt.Dimension var31 = var23.getMaximumSize();
    var20.setMinimumSize(var31);
    java.awt.Rectangle var33 = var20.getBounds();
    java.awt.Rectangle var34 = var17.getBounds(var33);
    java.awt.Rectangle var35 = var9.getBounds(var33);
    var0.setBounds(var35);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var1 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var8 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var10 + "' != '" + "PanelUI"+ "'", var10.equals("PanelUI"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var12 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var13);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var14 == 0.5f);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var15);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var18);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var19 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var21);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var22);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var24);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var25);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var27 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var29);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var30);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var31);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var33);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var34);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var35);

  }

  public void test300() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest1.test300");


    com.allenstudio.ir.ui.StatusBar var0 = new com.allenstudio.ir.ui.StatusBar();
    int var1 = var0.getY();
    var0.setIgnoreRepaint(true);
    com.allenstudio.ir.ui.StatusBar var4 = new com.allenstudio.ir.ui.StatusBar();
    int var5 = var4.getY();
    java.awt.Dimension var6 = var4.getMaximumSize();
    var0.setMinimumSize(var6);
    var0.setVerifyInputWhenFocusTarget(true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var1 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var5 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var6);

  }

  public void test301() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest1.test301");


    com.allenstudio.ir.ui.DefaultNoteListModel var0 = new com.allenstudio.ir.ui.DefaultNoteListModel();
    com.allenstudio.ir.ui.StatusBar var1 = new com.allenstudio.ir.ui.StatusBar();
    com.allenstudio.ir.core.plugins.CommonNote var2 = new com.allenstudio.ir.core.plugins.CommonNote();
    var2.setFocusTraversalPolicyProvider(false);
    var1.remove((java.awt.Component)var2);
    com.allenstudio.ir.ui.StatusBar var6 = new com.allenstudio.ir.ui.StatusBar();
    int var7 = var6.getY();
    javax.swing.JToolTip var8 = var6.createToolTip();
    java.awt.Insets var9 = var8.getInsets();
    java.awt.Insets var10 = var2.getInsets(var9);
    int var11 = var0.indexOf((com.allenstudio.ir.core.plugins.AbstractNote)var2);
    com.allenstudio.ir.core.plugins.CommonNote var12 = new com.allenstudio.ir.core.plugins.CommonNote();
    java.lang.String var13 = var12.getFeature();
    com.allenstudio.ir.ui.StatusBar var14 = new com.allenstudio.ir.ui.StatusBar();
    var14.enable();
    boolean var16 = var14.isFocusOwner();
    var14.firePropertyChange("hi!", 10L, 0L);
    var14.layout();
    var14.removeAll();
    com.allenstudio.ir.ui.StatusBar var23 = new com.allenstudio.ir.ui.StatusBar();
    javax.swing.JRootPane var24 = var23.getRootPane();
    java.awt.Point var25 = var23.location();
    java.awt.Component var26 = var14.getComponentAt(var25);
    java.awt.Point var27 = var12.getLocation(var25);
    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      int var29 = var0.lastIndexOf((com.allenstudio.ir.core.plugins.AbstractNote)var12, 30);
      fail("Expected exception of type java.lang.IndexOutOfBoundsException");
    } catch (java.lang.IndexOutOfBoundsException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var7 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var8);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var9);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var10);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var11 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var13 + "' != '" + "C:\\boot.ini"+ "'", var13.equals("C:\\boot.ini"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var16 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var24);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var25);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var26);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var27);

  }

  public void test302() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest1.test302");


    com.allenstudio.ir.util.XmlElement var1 = new com.allenstudio.ir.util.XmlElement();
    com.allenstudio.ir.util.XmlElement var3 = var1.addSubElement("hi!");
    com.allenstudio.ir.util.XmlElement var6 = var3.addSubElement("", "hi!");
    java.util.Hashtable var7 = var6.getAttributes();
    com.allenstudio.ir.ui.MainFrame var8 = new com.allenstudio.ir.ui.MainFrame();
    java.lang.String var9 = var8.getWarningString();
    java.awt.Rectangle var10 = var8.getMaximizedBounds();
    java.awt.MenuBar var11 = var8.getMenuBar();
    com.allenstudio.ir.ui.NoteListsTabPane var12 = new com.allenstudio.ir.ui.NoteListsTabPane();
    var8.widgetChanged((com.allenstudio.ir.core.InspirentoWidget)var12);
    var8.dispose();
    java.lang.Object var15 = var7.get((java.lang.Object)var8);
    java.util.Set var16 = var7.entrySet();
    com.allenstudio.ir.util.XmlElement var17 = new com.allenstudio.ir.util.XmlElement("Title", var7);
    com.allenstudio.ir.util.XmlElement var18 = new com.allenstudio.ir.util.XmlElement();
    com.allenstudio.ir.util.XmlElement var20 = var18.addSubElement("hi!");
    com.allenstudio.ir.util.XmlElement var21 = new com.allenstudio.ir.util.XmlElement();
    com.allenstudio.ir.util.XmlElement var23 = var21.addSubElement("hi!");
    var23.notifyObservers((java.lang.Object)(byte)1);
    var18.append(var23);
    com.allenstudio.ir.util.XmlElement var27 = new com.allenstudio.ir.util.XmlElement();
    com.allenstudio.ir.util.XmlElement var29 = var27.addSubElement("hi!");
    java.lang.String var31 = var27.getAttribute("C:\\boot.ini");
    com.allenstudio.ir.util.XmlElement var32 = var23.addSubElement(var27);
    var23.setName("C:\\boot.ini");
    com.allenstudio.ir.util.XmlElement var35 = new com.allenstudio.ir.util.XmlElement();
    com.allenstudio.ir.util.XmlElement var37 = var35.addSubElement("hi!");
    com.allenstudio.ir.util.XmlElement var38 = new com.allenstudio.ir.util.XmlElement();
    com.allenstudio.ir.util.XmlElement var40 = var38.addSubElement("hi!");
    var40.notifyObservers((java.lang.Object)(byte)1);
    var35.append(var40);
    com.allenstudio.ir.util.XmlElement var46 = var35.addSubElement("C:\\boot.ini", "This is a testing description. \u03E3\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\u073F\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD");
    int var47 = var35.countObservers();
    com.allenstudio.ir.util.XmlElement var48 = var23.addSubElement(var35);
    var48.setData("This is a testing description. \u03E3\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\u073F\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD");
    java.lang.Object var51 = var48.clone();
    com.allenstudio.ir.util.XmlElement var52 = var17.removeElement(var48);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var3);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var6);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var7);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var9);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var10);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var11);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var15);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var16);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var20);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var23);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var29);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var31);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var32);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var37);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var40);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var46);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var47 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var48);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var51);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var52);

  }

  public void test303() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest1.test303");


    com.allenstudio.ir.util.XmlElement var0 = new com.allenstudio.ir.util.XmlElement();
    com.allenstudio.ir.util.XmlElement var2 = var0.addSubElement("hi!");
    var2.notifyObservers((java.lang.Object)(byte)1);
    java.lang.String var5 = var2.getData();
    com.allenstudio.ir.ui.Toolbar var6 = new com.allenstudio.ir.ui.Toolbar();
    java.awt.image.ColorModel var7 = var6.getColorModel();
    var6.setEnabled(true);
    java.awt.Component var11 = var6.getComponentAtIndex(1);
    boolean var12 = var6.isValidateRoot();
    boolean var13 = var2.equals((java.lang.Object)var12);
    com.allenstudio.ir.ui.UIResources var14 = new com.allenstudio.ir.ui.UIResources();
    var2.notifyObservers((java.lang.Object)var14);
    var2.notifyObservers();
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var2);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var5 + "' != '" + ""+ "'", var5.equals(""));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var7);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var11);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var12 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var13 == false);

  }

  public void test304() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest1.test304");


    com.allenstudio.ir.ui.MainFrame var0 = new com.allenstudio.ir.ui.MainFrame();
    boolean var1 = var0.isShowing();
    java.lang.String var2 = var0.getWarningString();
    var0.setAutoRequestFocus(true);
    var0.removeAll();
    com.allenstudio.ir.ui.MainFrame var6 = new com.allenstudio.ir.ui.MainFrame();
    boolean var7 = var6.isShowing();
    java.lang.String var8 = var6.getWarningString();
    var6.setAutoRequestFocus(true);
    java.awt.image.ColorModel var11 = var6.getColorModel();
    var6.setLocation(31, 100);
    com.allenstudio.ir.ui.MainFrame var15 = new com.allenstudio.ir.ui.MainFrame();
    boolean var16 = var15.isShowing();
    int var17 = var15.countComponents();
    var15.setAutoRequestFocus(false);
    javax.swing.JMenuBar var20 = var15.getJMenuBar();
    boolean var21 = var20.isBorderPainted();
    var20.menuSelectionChanged(true);
    com.allenstudio.ir.ui.MainFrame var24 = new com.allenstudio.ir.ui.MainFrame();
    boolean var25 = var24.isShowing();
    int var26 = var24.countComponents();
    var24.setAutoRequestFocus(false);
    javax.swing.JMenuBar var29 = var24.getJMenuBar();
    boolean var30 = var29.isBorderPainted();
    var29.updateUI();
    com.allenstudio.ir.ui.DatePickerPane var32 = new com.allenstudio.ir.ui.DatePickerPane();
    var32.transferFocus();
    java.awt.Dimension var34 = var32.getMinimumSize();
    java.awt.Dimension var35 = var29.getSize(var34);
    javax.swing.plaf.MenuBarUI var36 = var29.getUI();
    var20.setUI(var36);
    boolean var38 = var20.isBorderPainted();
    var20.invalidate();
    java.awt.Cursor var40 = var20.getCursor();
    var6.setCursor(var40);
    var0.setCursor(var40);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var1 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var2);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var7 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var8);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var11);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var16 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var17 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var20);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var21 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var25 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var26 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var29);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var30 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var34);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var35);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var36);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var38 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var40);

  }

  public void test305() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest1.test305");


    com.allenstudio.ir.util.XmlElement var0 = new com.allenstudio.ir.util.XmlElement();
    com.allenstudio.ir.util.XmlElement var2 = var0.addSubElement("hi!");
    com.allenstudio.ir.util.XmlElement var5 = var2.addSubElement("", "hi!");
    java.util.Hashtable var6 = var5.getAttributes();
    com.allenstudio.ir.ui.MainFrame var7 = new com.allenstudio.ir.ui.MainFrame();
    java.lang.String var8 = var7.getWarningString();
    java.awt.Rectangle var9 = var7.getMaximizedBounds();
    java.awt.MenuBar var10 = var7.getMenuBar();
    com.allenstudio.ir.ui.NoteListsTabPane var11 = new com.allenstudio.ir.ui.NoteListsTabPane();
    var7.widgetChanged((com.allenstudio.ir.core.InspirentoWidget)var11);
    var7.dispose();
    java.lang.Object var14 = var6.get((java.lang.Object)var7);
    java.util.Set var15 = var6.entrySet();
    java.util.Enumeration var16 = var6.keys();
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var2);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var5);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var6);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var8);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var9);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var10);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var14);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var15);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var16);

  }

  public void test306() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest1.test306");


    com.allenstudio.ir.ui.MainFrame var0 = new com.allenstudio.ir.ui.MainFrame();
    java.lang.String var1 = var0.getWarningString();
    boolean var2 = var0.isAlwaysOnTopSupported();
    java.awt.image.VolatileImage var5 = var0.createVolatileImage(100, 32);
    boolean var6 = var0.isFocusableWindow();
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var2 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var5);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var6 == true);

  }

  public void test307() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest1.test307");


    com.allenstudio.ir.ui.MainFrame var0 = new com.allenstudio.ir.ui.MainFrame();
    java.lang.String var1 = var0.getWarningString();
    java.lang.String var2 = var0.getWarningString();
    boolean var3 = var0.isAutoRequestFocus();
    boolean var4 = var0.isResizable();
    javax.swing.JLayeredPane var5 = var0.getLayeredPane();
    java.awt.Component var6 = var0.getFocusOwner();
    var0.setLocation(31, 0);
    boolean var10 = var0.isFocused();
    float var11 = var0.getOpacity();
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var1);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var2);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var3 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var4 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var5);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var6);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var10 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var11 == 1.0f);

  }

  public void test308() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest1.test308");


    com.allenstudio.ir.ui.DefaultNoteListModel var0 = new com.allenstudio.ir.ui.DefaultNoteListModel();
    com.allenstudio.ir.ui.StatusBar var1 = new com.allenstudio.ir.ui.StatusBar();
    com.allenstudio.ir.core.plugins.CommonNote var2 = new com.allenstudio.ir.core.plugins.CommonNote();
    var2.setFocusTraversalPolicyProvider(false);
    var1.remove((java.awt.Component)var2);
    com.allenstudio.ir.ui.StatusBar var6 = new com.allenstudio.ir.ui.StatusBar();
    int var7 = var6.getY();
    javax.swing.JToolTip var8 = var6.createToolTip();
    java.awt.Insets var9 = var8.getInsets();
    java.awt.Insets var10 = var2.getInsets(var9);
    int var11 = var0.indexOf((com.allenstudio.ir.core.plugins.AbstractNote)var2);
    com.allenstudio.ir.core.plugins.CommonNote var13 = new com.allenstudio.ir.core.plugins.CommonNote();
    var13.resize(0, 1);
    var13.setFocusCycleRoot(false);
    float var19 = var13.getAlignmentY();
    var13.setToolTipText("ToolBarUI");
    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      com.allenstudio.ir.core.plugins.AbstractNote var22 = var0.set(10, (com.allenstudio.ir.core.plugins.AbstractNote)var13);
      fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException");
    } catch (java.lang.ArrayIndexOutOfBoundsException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var7 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var8);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var9);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var10);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var11 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var19 == 0.5f);

  }

  public void test309() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest1.test309");


    com.allenstudio.ir.ui.Toolbar var0 = new com.allenstudio.ir.ui.Toolbar();
    boolean var1 = var0.isFloatable();
    java.awt.Component var3 = var0.getComponentAtIndex(10);
    boolean var4 = var0.isLightweight();
    java.awt.event.MouseWheelListener[] var5 = var0.getMouseWheelListeners();
    var0.setRollover(false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var1 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var3);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var4 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var5);

  }

  public void test310() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest1.test310");


    com.allenstudio.ir.ui.MainFrame var0 = new com.allenstudio.ir.ui.MainFrame();
    java.lang.String var1 = var0.getWarningString();
    java.awt.Rectangle var2 = var0.getMaximizedBounds();
    java.awt.MenuBar var3 = var0.getMenuBar();
    var0.removeNotify();
    var0.addNotify();
    boolean var6 = var0.getFocusableWindowState();
    java.awt.Image var7 = var0.getIconImage();
    com.allenstudio.ir.ui.NoteListsTabPane var8 = new com.allenstudio.ir.ui.NoteListsTabPane();
    com.allenstudio.ir.ui.Toolbar var9 = new com.allenstudio.ir.ui.Toolbar();
    boolean var10 = var9.isFloatable();
    var9.show();
    java.awt.image.ColorModel var12 = var9.getColorModel();
    boolean var13 = var9.isFocusCycleRoot();
    com.allenstudio.ir.ui.DatePickerPane var14 = new com.allenstudio.ir.ui.DatePickerPane();
    var14.transferFocus();
    com.allenstudio.ir.ui.Toolbar var16 = new com.allenstudio.ir.ui.Toolbar();
    java.awt.image.ColorModel var17 = var16.getColorModel();
    var16.setEnabled(true);
    java.awt.Component var21 = var16.getComponentAtIndex(1);
    boolean var22 = var16.isFloatable();
    var14.setContent((java.awt.Component)var16);
    java.awt.Dimension var24 = var14.size();
    com.allenstudio.ir.ui.Toolbar var25 = new com.allenstudio.ir.ui.Toolbar();
    boolean var26 = var25.isFloatable();
    var25.show();
    boolean var28 = var25.isRequestFocusEnabled();
    java.awt.Dimension var29 = var25.minimumSize();
    var14.setToolBar((javax.swing.JToolBar)var25);
    java.awt.Image var33 = var14.createImage(10, (-1));
    var8.add((java.awt.Component)var9, (java.lang.Object)10);
    com.allenstudio.ir.ui.Toolbar var35 = new com.allenstudio.ir.ui.Toolbar();
    java.awt.image.ColorModel var36 = var35.getColorModel();
    var35.setEnabled(true);
    var8.add((java.awt.Component)var35, (java.lang.Object)100L, 0);
    com.allenstudio.ir.ui.calendar.MonthlyCalendar var42 = new com.allenstudio.ir.ui.calendar.MonthlyCalendar();
    java.awt.Color var43 = var42.getDateBackground();
    var42.setYearMonth(1, (-1));
    java.util.Calendar var47 = var42.getSelectedDate();
    var35.addMouseListener((java.awt.event.MouseListener)var42);
    var0.removeMouseListener((java.awt.event.MouseListener)var42);
    java.lang.Object var50 = var0.getTreeLock();
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var1);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var2);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var3);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var6 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var7);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var10 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var12);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var13 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var17);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var21);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var22 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var24);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var26 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var28 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var29);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var33);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var36);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var43);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var47);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var50);

  }

  public void test311() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest1.test311");


    com.allenstudio.ir.ui.DatePickerPane var0 = new com.allenstudio.ir.ui.DatePickerPane();
    javax.swing.KeyStroke[] var1 = var0.getRegisteredKeyStrokes();
    boolean var2 = var0.isFocusTraversalPolicySet();
    boolean var3 = var0.isDisplayable();
    com.allenstudio.ir.ui.Toolbar var4 = new com.allenstudio.ir.ui.Toolbar();
    java.awt.image.ColorModel var5 = var4.getColorModel();
    var4.setEnabled(true);
    java.awt.Component var9 = var4.getComponentAtIndex(1);
    java.awt.Component var11 = var4.getComponentAtIndex(1);
    java.awt.Point var12 = var11.getLocation();
    var0.setLocation(var12);
    javax.swing.border.Border var14 = var0.getContentPaneBorder();
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var2 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var3 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var5);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var9);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var11);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var12);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var14);

  }

  public void test312() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest1.test312");


    com.allenstudio.ir.ui.StatusBar var0 = new com.allenstudio.ir.ui.StatusBar();
    int var1 = var0.getY();
    var0.setIgnoreRepaint(true);
    boolean var4 = var0.requestFocusInWindow();
    java.awt.event.HierarchyBoundsListener[] var5 = var0.getHierarchyBoundsListeners();
    java.awt.Insets var6 = var0.insets();
    java.awt.event.HierarchyBoundsListener[] var7 = var0.getHierarchyBoundsListeners();
    com.allenstudio.ir.ui.MainFrame var8 = new com.allenstudio.ir.ui.MainFrame();
    java.lang.String var9 = var8.getWarningString();
    java.lang.String var10 = var8.getWarningString();
    boolean var11 = var8.isAutoRequestFocus();
    com.allenstudio.ir.ui.MainFrame var12 = new com.allenstudio.ir.ui.MainFrame();
    java.lang.String var13 = var12.getWarningString();
    boolean var14 = var12.isAlwaysOnTopSupported();
    java.awt.Color var15 = var12.getBackground();
    var8.setBackground(var15);
    javax.swing.JLayeredPane var17 = var8.getLayeredPane();
    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      java.awt.Component var19 = var0.add((java.awt.Component)var8, 6);
      fail("Expected exception of type java.lang.IllegalArgumentException");
    } catch (java.lang.IllegalArgumentException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var1 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var4 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var5);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var6);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var7);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var9);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var10);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var11 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var13);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var14 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var15);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var17);

  }

  public void test313() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest1.test313");


    com.allenstudio.ir.ui.Toolbar var0 = new com.allenstudio.ir.ui.Toolbar();
    java.awt.image.ColorModel var1 = var0.getColorModel();
    var0.setEnabled(true);
    java.awt.Component var5 = var0.getComponentAtIndex(1);
    java.awt.Component var7 = var0.getComponentAtIndex(1);
    java.awt.Point var8 = var7.getLocation();
    java.awt.Image var11 = var7.createImage(10, 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var1);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var5);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var7);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var8);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var11);

  }

  public void test314() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest1.test314");


    com.allenstudio.ir.ui.Toolbar var0 = new com.allenstudio.ir.ui.Toolbar();
    java.awt.image.ColorModel var1 = var0.getColorModel();
    var0.setEnabled(true);
    java.awt.Component var5 = var0.getComponentAtIndex(1);
    boolean var6 = var0.isValidateRoot();
    com.allenstudio.ir.ui.Toolbar var7 = new com.allenstudio.ir.ui.Toolbar();
    java.awt.image.ColorModel var8 = var7.getColorModel();
    var7.setEnabled(true);
    java.awt.ComponentOrientation var11 = var7.getComponentOrientation();
    boolean var12 = var7.isFloatable();
    com.allenstudio.ir.core.plugins.CommonNote var13 = new com.allenstudio.ir.core.plugins.CommonNote();
    var13.resize(0, 1);
    java.lang.String var17 = var13.getOtherInfo();
    com.allenstudio.ir.core.plugins.CommonNote var18 = new com.allenstudio.ir.core.plugins.CommonNote();
    java.lang.String var19 = var18.getFeature();
    com.allenstudio.ir.ui.StatusBar var20 = new com.allenstudio.ir.ui.StatusBar();
    var20.enable();
    boolean var22 = var20.isFocusOwner();
    var20.firePropertyChange("hi!", 10L, 0L);
    var20.layout();
    var20.removeAll();
    com.allenstudio.ir.ui.StatusBar var29 = new com.allenstudio.ir.ui.StatusBar();
    javax.swing.JRootPane var30 = var29.getRootPane();
    java.awt.Point var31 = var29.location();
    java.awt.Component var32 = var20.getComponentAt(var31);
    java.awt.Point var33 = var18.getLocation(var31);
    java.awt.Component var34 = var13.getComponentAt(var33);
    java.awt.Point var35 = var7.getLocation(var33);
    boolean var36 = var0.contains(var35);
    com.allenstudio.ir.ui.DatePickerPane var37 = new com.allenstudio.ir.ui.DatePickerPane();
    var37.transferFocus();
    java.awt.Dimension var39 = var37.getMinimumSize();
    com.allenstudio.ir.core.plugins.CommonNote var40 = new com.allenstudio.ir.core.plugins.CommonNote();
    var40.setFocusTraversalPolicyProvider(false);
    com.allenstudio.ir.ui.StatusBar var43 = new com.allenstudio.ir.ui.StatusBar();
    int var44 = var43.getY();
    javax.swing.JToolTip var45 = var43.createToolTip();
    float var46 = var45.getAlignmentY();
    java.awt.Color var47 = var45.getForeground();
    var40.remove((java.awt.Component)var45);
    com.allenstudio.ir.ui.StatusBar var49 = new com.allenstudio.ir.ui.StatusBar();
    int var50 = var49.getY();
    boolean var51 = var49.isLightweight();
    java.awt.Dimension var52 = var49.getMaximumSize();
    java.awt.event.KeyListener[] var53 = var49.getKeyListeners();
    java.awt.ComponentOrientation var54 = var49.getComponentOrientation();
    var40.setComponentOrientation(var54);
    var37.setComponentOrientation(var54);
    var0.setComponentOrientation(var54);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var1);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var5);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var6 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var8);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var11);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var12 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var17);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var19 + "' != '" + "C:\\boot.ini"+ "'", var19.equals("C:\\boot.ini"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var22 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var30);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var31);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var32);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var33);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var34);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var35);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var36 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var39);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var44 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var45);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var46 == 0.5f);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var47);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var50 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var51 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var52);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var53);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var54);

  }

  public void test315() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest1.test315");


    com.allenstudio.ir.ui.Toolbar var0 = new com.allenstudio.ir.ui.Toolbar();
    java.awt.image.ColorModel var1 = var0.getColorModel();
    var0.setEnabled(true);
    java.awt.Component var5 = var0.getComponentAtIndex(1);
    boolean var6 = var0.requestFocusInWindow();
    java.awt.FocusTraversalPolicy var7 = var0.getFocusTraversalPolicy();
    var0.setFocusCycleRoot(true);
    var0.setBorderPainted(true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var1);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var5);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var6 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var7);

  }

  public void test316() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest1.test316");


    com.allenstudio.ir.ui.MainFrame var0 = new com.allenstudio.ir.ui.MainFrame();
    boolean var1 = var0.isShowing();
    java.awt.event.FocusListener[] var2 = var0.getFocusListeners();
    java.awt.Rectangle var3 = var0.getMaximizedBounds();
    boolean var4 = var0.isResizable();
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var1 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var2);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var3);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var4 == true);

  }

  public void test317() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest1.test317");


    com.allenstudio.ir.ui.Toolbar var0 = new com.allenstudio.ir.ui.Toolbar();
    java.awt.image.ColorModel var1 = var0.getColorModel();
    java.awt.im.InputContext var2 = var0.getInputContext();
    boolean var3 = var0.isFloatable();
    var0.firePropertyChange("Date Picker", ' ', ' ');
    java.awt.Component var9 = var0.getComponentAtIndex(100);
    var0.setVerifyInputWhenFocusTarget(false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var1);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var2);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var3 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var9);

  }

  public void test318() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest1.test318");


    com.allenstudio.ir.ui.MainFrame var0 = new com.allenstudio.ir.ui.MainFrame();
    java.lang.String var1 = var0.getWarningString();
    java.awt.Rectangle var2 = var0.getMaximizedBounds();
    java.awt.MenuBar var3 = var0.getMenuBar();
    com.allenstudio.ir.ui.NoteListsTabPane var4 = new com.allenstudio.ir.ui.NoteListsTabPane();
    var0.widgetChanged((com.allenstudio.ir.core.InspirentoWidget)var4);
    var0.dispose();
    var0.setLocation(0, 0);
    boolean var10 = var0.isFocusTraversalPolicySet();
    java.awt.Graphics var11 = var0.getGraphics();
    com.allenstudio.ir.ui.MainMenu var12 = new com.allenstudio.ir.ui.MainMenu((com.allenstudio.ir.core.InspirentoMediator)var0);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var1);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var2);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var3);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var10 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var11);

  }

  public void test319() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest1.test319");


    com.allenstudio.ir.ui.DatePickerPane var0 = new com.allenstudio.ir.ui.DatePickerPane();
    java.lang.String var1 = var0.getTitle();
    java.awt.dnd.DropTarget var2 = var0.getDropTarget();
    var0.setSelected(false);
    com.allenstudio.ir.ui.DatePickerPane var5 = new com.allenstudio.ir.ui.DatePickerPane();
    var5.transferFocus();
    com.allenstudio.ir.ui.Toolbar var7 = new com.allenstudio.ir.ui.Toolbar();
    java.awt.image.ColorModel var8 = var7.getColorModel();
    var7.setEnabled(true);
    java.awt.Component var12 = var7.getComponentAtIndex(1);
    boolean var13 = var7.isFloatable();
    var5.setContent((java.awt.Component)var7);
    java.awt.Color var15 = var7.getForeground();
    boolean var16 = var7.requestFocusInWindow();
    var7.setDoubleBuffered(true);
    com.allenstudio.ir.ui.Toolbar var19 = new com.allenstudio.ir.ui.Toolbar();
    java.awt.image.ColorModel var20 = var19.getColorModel();
    var19.setEnabled(true);
    java.awt.Component var24 = var19.getComponentAtIndex(1);
    java.awt.Component var26 = var19.getComponentAtIndex(1);
    java.awt.event.InputMethodListener[] var27 = var19.getInputMethodListeners();
    com.allenstudio.ir.ui.Toolbar var28 = new com.allenstudio.ir.ui.Toolbar();
    java.awt.Dimension var29 = var28.size();
    java.awt.Dimension var30 = var19.getSize(var29);
    var7.addSeparator(var30);
    javax.swing.border.Border var32 = var7.getBorder();
    var0.setContentPaneBorder(var32);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var1 + "' != '" + "Date Picker"+ "'", var1.equals("Date Picker"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var2);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var8);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var12);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var13 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var15);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var16 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var20);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var24);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var26);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var27);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var29);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var30);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var32);

  }

  public void test320() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest1.test320");


    com.allenstudio.ir.ui.MainFrame var0 = new com.allenstudio.ir.ui.MainFrame();
    java.lang.String var1 = var0.getWarningString();
    java.awt.Rectangle var2 = var0.getMaximizedBounds();
    boolean var3 = var0.isLocationByPlatform();
    boolean var4 = var0.getFocusableWindowState();
    var0.setLocationByPlatform(true);
    com.allenstudio.ir.ui.StatusBar var7 = new com.allenstudio.ir.ui.StatusBar();
    var7.enable();
    boolean var9 = var7.isFocusOwner();
    var7.firePropertyChange("hi!", 10L, 0L);
    var7.layout();
    int var15 = var7.getY();
    var7.updateUI();
    com.allenstudio.ir.core.plugins.CommonNote var17 = new com.allenstudio.ir.core.plugins.CommonNote();
    var17.resize(0, 1);
    com.allenstudio.ir.ui.NoteListCell var21 = new com.allenstudio.ir.ui.NoteListCell((com.allenstudio.ir.core.plugins.AbstractNote)var17);
    com.allenstudio.ir.ui.StatusBar var22 = new com.allenstudio.ir.ui.StatusBar();
    boolean var23 = var22.isBackgroundSet();
    boolean var26 = var22.contains(10, 100);
    var22.revalidate();
    javax.swing.JToolTip var28 = var22.createToolTip();
    com.allenstudio.ir.ui.StatusBar var29 = new com.allenstudio.ir.ui.StatusBar();
    javax.swing.JRootPane var30 = var29.getRootPane();
    java.awt.Point var31 = var29.location();
    com.allenstudio.ir.ui.StatusBar var32 = new com.allenstudio.ir.ui.StatusBar();
    javax.swing.JRootPane var33 = var32.getRootPane();
    java.awt.Point var34 = var32.location();
    com.allenstudio.ir.ui.Toolbar var35 = new com.allenstudio.ir.ui.Toolbar();
    boolean var36 = var35.isFloatable();
    java.awt.Component var38 = var35.getComponentAtIndex(10);
    java.lang.Object var39 = var32.getClientProperty((java.lang.Object)10);
    java.awt.Dimension var40 = var32.getMaximumSize();
    var29.setMinimumSize(var40);
    java.awt.Rectangle var42 = var29.getBounds();
    var22.scrollRectToVisible(var42);
    var17.repaint(var42);
    var7.computeVisibleRect(var42);
    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      var0.setShape((java.awt.Shape)var42);
      fail("Expected exception of type java.awt.IllegalComponentStateException");
    } catch (java.awt.IllegalComponentStateException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var1);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var2);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var3 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var4 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var9 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var15 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var23 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var26 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var28);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var30);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var31);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var33);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var34);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var36 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var38);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var39);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var40);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var42);

  }

  public void test321() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest1.test321");


    com.allenstudio.ir.ui.Toolbar var0 = new com.allenstudio.ir.ui.Toolbar();
    boolean var1 = var0.isFloatable();
    var0.show();
    java.lang.Object var3 = var0.getTreeLock();
    java.awt.Container var4 = var0.getFocusCycleRootAncestor();
    var0.setRollover(true);
    com.allenstudio.ir.core.plugins.CommonNote var7 = new com.allenstudio.ir.core.plugins.CommonNote();
    var7.resize(0, 1);
    com.allenstudio.ir.ui.NoteListCell var11 = new com.allenstudio.ir.ui.NoteListCell((com.allenstudio.ir.core.plugins.AbstractNote)var7);
    int var12 = var11.getIndexInList();
    var11.hide();
    int var14 = var0.getComponentIndex((java.awt.Component)var11);
    var11.setIndexInList(31);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var1 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var3);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var4);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var12 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var14 == (-1));

  }

  public void test322() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest1.test322");


    com.allenstudio.ir.ui.DatePickerPane var0 = new com.allenstudio.ir.ui.DatePickerPane();
    java.lang.String var1 = var0.getUIClassID();
    com.allenstudio.ir.ui.StatusBar var2 = new com.allenstudio.ir.ui.StatusBar();
    int var3 = var2.getY();
    javax.swing.JToolTip var4 = var2.createToolTip();
    float var5 = var4.getAlignmentY();
    java.awt.Color var6 = var4.getForeground();
    var0.setBackground(var6);
    var0.move(10, 10);
    java.lang.String var11 = var0.getUIClassID();
    var0.setSelected(true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var1 + "' != '" + "PanelUI"+ "'", var1.equals("PanelUI"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var3 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var4);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var5 == 0.5f);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var6);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var11 + "' != '" + "PanelUI"+ "'", var11.equals("PanelUI"));

  }

  public void test323() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest1.test323");


    com.allenstudio.ir.ui.DatePickerPane var0 = new com.allenstudio.ir.ui.DatePickerPane();
    var0.transferFocus();
    com.allenstudio.ir.ui.Toolbar var2 = new com.allenstudio.ir.ui.Toolbar();
    java.awt.image.ColorModel var3 = var2.getColorModel();
    var2.setEnabled(true);
    java.awt.Component var7 = var2.getComponentAtIndex(1);
    boolean var8 = var2.isFloatable();
    var0.setContent((java.awt.Component)var2);
    java.awt.Dimension var10 = var0.size();
    com.allenstudio.ir.ui.Toolbar var11 = new com.allenstudio.ir.ui.Toolbar();
    boolean var12 = var11.isFloatable();
    var11.show();
    boolean var14 = var11.isRequestFocusEnabled();
    java.awt.Dimension var15 = var11.minimumSize();
    var0.setToolBar((javax.swing.JToolBar)var11);
    java.awt.Image var19 = var0.createImage(10, (-1));
    javax.swing.Icon var20 = var0.getFrameIcon();
    var0.setEnabled(false);
    var0.requestFocus();
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var3);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var7);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var8 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var10);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var12 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var14 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var15);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var19);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var20);

  }

  public void test324() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest1.test324");


    com.allenstudio.ir.ui.MainFrame var0 = new com.allenstudio.ir.ui.MainFrame();
    boolean var1 = var0.isShowing();
    var0.setAutoRequestFocus(false);
    var0.setTitle("PanelUI");
    var0.setVisible(true);
    boolean var8 = var0.isValidateRoot();
    com.allenstudio.ir.ui.calendar.MonthlyCalendar var9 = new com.allenstudio.ir.ui.calendar.MonthlyCalendar();
    var9.setWeekStartOnSunday(true);
    java.awt.Color var12 = var9.getDateForeground();
    var0.setBackground(var12);
    java.util.Locale var14 = var0.getLocale();
    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      var0.applyResourceBundle("");
      fail("Expected exception of type java.util.MissingResourceException");
    } catch (java.util.MissingResourceException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var1 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var8 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var12);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var14);

  }

  public void test325() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest1.test325");


    java.lang.String[] var1 = com.allenstudio.ir.util.InspirentoUtilities.tokenize("PanelUI");
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var1);

  }

  public void test326() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest1.test326");


    com.allenstudio.ir.ui.DatePickerPane var0 = new com.allenstudio.ir.ui.DatePickerPane();
    java.awt.Container var1 = var0.getContentPane();
    var1.setFocusTraversalKeysEnabled(false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var1);

  }

  public void test327() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest1.test327");


    com.allenstudio.ir.ui.MainFrame var0 = new com.allenstudio.ir.ui.MainFrame();
    java.lang.String var1 = var0.getWarningString();
    java.lang.String var2 = var0.getWarningString();
    boolean var3 = var0.isAutoRequestFocus();
    boolean var4 = var0.isResizable();
    javax.swing.JRootPane var5 = var0.getRootPane();
    java.lang.String var6 = var0.getTitle();
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var1);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var2);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var3 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var4 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var5);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var6 + "' != '" + "Inspirento - alpha 0.86"+ "'", var6.equals("Inspirento - alpha 0.86"));

  }

  public void test328() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest1.test328");


    com.allenstudio.ir.ui.StatusBar var0 = new com.allenstudio.ir.ui.StatusBar();
    boolean var1 = var0.isBackgroundSet();
    var0.repaint(100L);
    var0.disable();
    var0.setBounds(100, 100, 10, 100);
    var0.displayTooltip("Date Picker");
    var0.move(32, (-1));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var1 == false);

  }

  public void test329() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest1.test329");


    com.allenstudio.ir.ui.MainFrame var0 = new com.allenstudio.ir.ui.MainFrame();
    java.lang.String var1 = var0.getWarningString();
    java.awt.Rectangle var2 = var0.getMaximizedBounds();
    boolean var3 = var0.isLocationByPlatform();
    com.allenstudio.ir.ui.Toolbar var4 = new com.allenstudio.ir.ui.Toolbar();
    boolean var5 = var4.isFloatable();
    var4.show();
    boolean var7 = var4.isRequestFocusEnabled();
    java.awt.Dimension var8 = var4.minimumSize();
    java.awt.Dimension var9 = var0.getSize(var8);
    java.awt.Graphics var10 = var0.getGraphics();
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var1);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var2);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var3 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var5 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var7 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var8);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var9);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var10);

  }

  public void test330() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest1.test330");


    com.allenstudio.ir.ui.DefaultNoteListModel var0 = new com.allenstudio.ir.ui.DefaultNoteListModel();
    com.allenstudio.ir.ui.StatusBar var1 = new com.allenstudio.ir.ui.StatusBar();
    int var2 = var1.getY();
    javax.swing.JToolTip var3 = var1.createToolTip();
    float var4 = var3.getAlignmentY();
    java.awt.Color var5 = var3.getForeground();
    java.awt.event.MouseMotionListener[] var6 = var3.getMouseMotionListeners();
    com.allenstudio.ir.core.plugins.CommonNote var7 = new com.allenstudio.ir.core.plugins.CommonNote();
    java.lang.String var8 = var7.getFeature();
    com.allenstudio.ir.ui.StatusBar var9 = new com.allenstudio.ir.ui.StatusBar();
    var9.enable();
    boolean var11 = var9.isFocusOwner();
    var9.firePropertyChange("hi!", 10L, 0L);
    var9.layout();
    var9.removeAll();
    com.allenstudio.ir.ui.StatusBar var18 = new com.allenstudio.ir.ui.StatusBar();
    javax.swing.JRootPane var19 = var18.getRootPane();
    java.awt.Point var20 = var18.location();
    java.awt.Component var21 = var9.getComponentAt(var20);
    java.awt.Point var22 = var7.getLocation(var20);
    var7.setOtherInfo("");
    var7.setFeature("Title");
    var7.removeNotify();
    com.allenstudio.ir.util.XmlElement var28 = new com.allenstudio.ir.util.XmlElement();
    com.allenstudio.ir.util.XmlElement var30 = var28.addSubElement("hi!");
    com.allenstudio.ir.util.XmlElement var31 = new com.allenstudio.ir.util.XmlElement();
    com.allenstudio.ir.util.XmlElement var33 = var31.addSubElement("hi!");
    var33.notifyObservers((java.lang.Object)(byte)1);
    var28.append(var33);
    com.allenstudio.ir.util.XmlElement var37 = new com.allenstudio.ir.util.XmlElement();
    com.allenstudio.ir.util.XmlElement var39 = var37.addSubElement("hi!");
    java.lang.String var41 = var37.getAttribute("C:\\boot.ini");
    com.allenstudio.ir.util.XmlElement var42 = var33.addSubElement(var37);
    java.lang.String var45 = var33.getAttribute("Title", "ToolBarUI");
    var3.putClientProperty((java.lang.Object)var7, (java.lang.Object)"Title");
    var7.doLayout();
    java.lang.String var48 = var7.getDescription();
    int var50 = var0.indexOf((com.allenstudio.ir.core.plugins.AbstractNote)var7, 556);
    int var51 = var0.capacity();
    com.allenstudio.ir.core.plugins.CommonNote var53 = new com.allenstudio.ir.core.plugins.CommonNote();
    java.lang.String var54 = var53.getDescription();
    var53.reshape(10, 1, 10, (-1));
    var53.setFeature("Title");
    var53.enable();
    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      var0.add(31, (com.allenstudio.ir.core.plugins.AbstractNote)var53);
      fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException");
    } catch (java.lang.ArrayIndexOutOfBoundsException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var2 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var3);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var4 == 0.5f);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var5);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var6);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var8 + "' != '" + "C:\\boot.ini"+ "'", var8.equals("C:\\boot.ini"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var11 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var19);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var20);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var21);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var22);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var30);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var33);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var39);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var41);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var42);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var45 + "' != '" + "ToolBarUI"+ "'", var45.equals("ToolBarUI"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var48 + "' != '" + "This is a testing description. \u03E3\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\u073F\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD"+ "'", var48.equals("This is a testing description. \u03E3\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\u073F\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var50 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var51 == 10);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var54 + "' != '" + "This is a testing description. \u03E3\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\u073F\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD"+ "'", var54.equals("This is a testing description. \u03E3\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\u073F\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD"));

  }

  public void test331() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest1.test331");


    com.allenstudio.ir.ui.StatusBar var0 = new com.allenstudio.ir.ui.StatusBar();
    int var1 = var0.getY();
    var0.setIgnoreRepaint(true);
    boolean var4 = var0.requestFocusInWindow();
    java.awt.Dimension var5 = var0.size();
    boolean var6 = var0.isFocusable();
    com.allenstudio.ir.ui.DatePickerPane var7 = new com.allenstudio.ir.ui.DatePickerPane();
    var7.transferFocus();
    com.allenstudio.ir.ui.Toolbar var9 = new com.allenstudio.ir.ui.Toolbar();
    java.awt.image.ColorModel var10 = var9.getColorModel();
    var9.setEnabled(true);
    java.awt.Component var14 = var9.getComponentAtIndex(1);
    boolean var15 = var9.isFloatable();
    var7.setContent((java.awt.Component)var9);
    java.awt.Color var17 = var9.getForeground();
    boolean var18 = var9.requestFocusInWindow();
    javax.swing.ActionMap var19 = var9.getActionMap();
    var9.repaint(1L);
    var9.validate();
    com.allenstudio.ir.core.plugins.CommonNote var23 = new com.allenstudio.ir.core.plugins.CommonNote();
    boolean var24 = var23.isPaintingTile();
    com.allenstudio.ir.ui.Toolbar var25 = new com.allenstudio.ir.ui.Toolbar();
    java.awt.image.ColorModel var26 = var25.getColorModel();
    java.awt.im.InputContext var27 = var25.getInputContext();
    java.awt.Component var29 = var25.getComponent(0);
    java.awt.Font var30 = var25.getFont();
    java.awt.FontMetrics var31 = var23.getFontMetrics(var30);
    java.awt.FontMetrics var32 = var9.getFontMetrics(var30);
    java.awt.FontMetrics var33 = var0.getFontMetrics(var30);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var1 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var4 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var5);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var6 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var10);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var14);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var15 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var17);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var18 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var19);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var24 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var26);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var27);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var29);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var30);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var31);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var32);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var33);

  }

  public void test332() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest1.test332");


    com.allenstudio.ir.ui.StatusBar var0 = new com.allenstudio.ir.ui.StatusBar();
    var0.enable();
    boolean var2 = var0.isFocusOwner();
    var0.firePropertyChange("hi!", 10L, 0L);
    java.awt.im.InputMethodRequests var7 = var0.getInputMethodRequests();
    int var8 = var0.getY();
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var2 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var7);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var8 == 0);

  }

  public void test333() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest1.test333");


    com.allenstudio.ir.ui.MainFrame var0 = new com.allenstudio.ir.ui.MainFrame();
    java.awt.Component var1 = var0.getGlassPane();
    javax.swing.JLayeredPane var2 = var0.getLayeredPane();
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var1);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var2);

  }

  public void test334() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest1.test334");


    com.allenstudio.ir.ui.DatePickerPane var0 = new com.allenstudio.ir.ui.DatePickerPane();
    var0.transferFocus();
    com.allenstudio.ir.ui.Toolbar var2 = new com.allenstudio.ir.ui.Toolbar();
    java.awt.image.ColorModel var3 = var2.getColorModel();
    var2.setEnabled(true);
    java.awt.Component var7 = var2.getComponentAtIndex(1);
    boolean var8 = var2.isFloatable();
    var0.setContent((java.awt.Component)var2);
    var0.setSelected(true);
    java.lang.Object var12 = var0.getTreeLock();
    java.awt.Dimension var13 = var0.getSize();
    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      int var16 = var0.getBaseline(761, (-1));
      fail("Expected exception of type java.lang.IllegalArgumentException");
    } catch (java.lang.IllegalArgumentException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var3);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var7);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var8 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var12);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var13);

  }

  public void test335() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest1.test335");


    com.allenstudio.ir.util.XmlElement var0 = new com.allenstudio.ir.util.XmlElement();
    com.allenstudio.ir.util.XmlElement var2 = var0.addSubElement("hi!");
    com.allenstudio.ir.util.XmlElement var5 = var2.addSubElement("", "hi!");
    java.util.Hashtable var6 = var5.getAttributes();
    com.allenstudio.ir.ui.StatusBar var7 = new com.allenstudio.ir.ui.StatusBar();
    int var8 = var7.getY();
    boolean var9 = var7.isLightweight();
    java.awt.Dimension var10 = var7.getMaximumSize();
    java.awt.event.KeyListener[] var11 = var7.getKeyListeners();
    boolean var12 = var7.getInheritsPopupMenu();
    var7.firePropertyChange("This is a testing description. \u03E3\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\u073F\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD", 100.0d, 100.0d);
    var7.repaint(100L, 100, 1, 100, (-1));
    boolean var23 = var7.isOpaque();
    boolean var24 = var6.equals((java.lang.Object)var7);
    com.allenstudio.ir.util.XmlElement var25 = new com.allenstudio.ir.util.XmlElement();
    com.allenstudio.ir.util.XmlElement var27 = var25.addSubElement("hi!");
    com.allenstudio.ir.util.XmlElement var30 = var27.addSubElement("", "hi!");
    java.util.Hashtable var31 = var30.getAttributes();
    com.allenstudio.ir.ui.MainFrame var32 = new com.allenstudio.ir.ui.MainFrame();
    java.lang.String var33 = var32.getWarningString();
    java.awt.Rectangle var34 = var32.getMaximizedBounds();
    java.awt.MenuBar var35 = var32.getMenuBar();
    com.allenstudio.ir.ui.NoteListsTabPane var36 = new com.allenstudio.ir.ui.NoteListsTabPane();
    var32.widgetChanged((com.allenstudio.ir.core.InspirentoWidget)var36);
    var32.dispose();
    java.lang.Object var39 = var31.get((java.lang.Object)var32);
    com.allenstudio.ir.util.XmlElement var40 = new com.allenstudio.ir.util.XmlElement();
    com.allenstudio.ir.util.XmlElement var42 = var40.addSubElement("hi!");
    com.allenstudio.ir.util.XmlElement var45 = var42.addSubElement("", "hi!");
    java.util.Hashtable var46 = var45.getAttributes();
    com.allenstudio.ir.ui.Toolbar var47 = new com.allenstudio.ir.ui.Toolbar();
    java.awt.image.ColorModel var48 = var47.getColorModel();
    var47.setEnabled(true);
    java.awt.ComponentOrientation var51 = var47.getComponentOrientation();
    java.lang.Object var52 = var31.put((java.lang.Object)var46, (java.lang.Object)var51);
    java.util.Enumeration var53 = var46.keys();
    var6.putAll((java.util.Map)var46);
    java.lang.String var55 = var46.toString();
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var2);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var5);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var6);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var8 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var9 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var10);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var11);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var12 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var23 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var24 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var27);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var30);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var31);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var33);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var34);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var35);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var39);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var42);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var45);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var46);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var48);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var51);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var52);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var53);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var55 + "' != '" + "{}"+ "'", var55.equals("{}"));

  }

  public void test336() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest1.test336");


    com.allenstudio.ir.util.XmlIO var0 = new com.allenstudio.ir.util.XmlIO();
    var0.unparsedEntityDecl("", "hi!", "", "");
    var0.skippedEntity("This is a testing description. \u03E3\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\u073F\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD");
    var0.endPrefixMapping(" ");
    com.allenstudio.ir.util.XmlIO var10 = new com.allenstudio.ir.util.XmlIO();
    char[] var12 = new char[] { 'a'};
    var10.ignorableWhitespace(var12, 0, (-1));
    com.allenstudio.ir.util.XmlIO var16 = new com.allenstudio.ir.util.XmlIO();
    var16.errorDialog("hi!");
    char[] var21 = new char[] { 'a', '4'};
    var16.ignorableWhitespace(var21, 100, 0);
    var10.ignorableWhitespace(var21, 10, 0);
    var0.ignorableWhitespace(var21, 0, 0);
    var0.processingInstruction("frame3", "");
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var12);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var21);

  }

  public void test337() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest1.test337");


    com.allenstudio.ir.ui.StatusBar var0 = new com.allenstudio.ir.ui.StatusBar();
    boolean var1 = var0.isBackgroundSet();
    var0.repaint(100L);
    int var4 = var0.getWidth();
    com.allenstudio.ir.ui.MainFrame var5 = new com.allenstudio.ir.ui.MainFrame();
    java.lang.String var6 = var5.getWarningString();
    java.lang.String var7 = var5.getWarningString();
    java.awt.Container var8 = var5.getFocusCycleRootAncestor();
    com.allenstudio.ir.ui.StatusBar var9 = new com.allenstudio.ir.ui.StatusBar();
    boolean var10 = var9.isBackgroundSet();
    boolean var13 = var9.contains(10, 100);
    var9.revalidate();
    javax.swing.JToolTip var15 = var9.createToolTip();
    com.allenstudio.ir.ui.StatusBar var16 = new com.allenstudio.ir.ui.StatusBar();
    javax.swing.JRootPane var17 = var16.getRootPane();
    java.awt.Point var18 = var16.location();
    com.allenstudio.ir.ui.StatusBar var19 = new com.allenstudio.ir.ui.StatusBar();
    javax.swing.JRootPane var20 = var19.getRootPane();
    java.awt.Point var21 = var19.location();
    com.allenstudio.ir.ui.Toolbar var22 = new com.allenstudio.ir.ui.Toolbar();
    boolean var23 = var22.isFloatable();
    java.awt.Component var25 = var22.getComponentAtIndex(10);
    java.lang.Object var26 = var19.getClientProperty((java.lang.Object)10);
    java.awt.Dimension var27 = var19.getMaximumSize();
    var16.setMinimumSize(var27);
    java.awt.Rectangle var29 = var16.getBounds();
    var9.scrollRectToVisible(var29);
    var5.setMaximizedBounds(var29);
    var0.computeVisibleRect(var29);
    boolean var34 = var0.requestFocus(false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var1 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var4 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var6);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var7);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var8);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var10 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var13 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var15);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var17);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var18);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var20);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var21);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var23 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var25);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var26);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var27);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var29);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var34 == false);

  }

  public void test338() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest1.test338");


    com.allenstudio.ir.ui.MainFrame var0 = new com.allenstudio.ir.ui.MainFrame();
    java.lang.String var1 = var0.getWarningString();
    java.lang.String var2 = var0.getWarningString();
    boolean var3 = var0.isAutoRequestFocus();
    boolean var4 = var0.isResizable();
    javax.swing.JLayeredPane var5 = var0.getLayeredPane();
    com.allenstudio.ir.ui.DatePickerPane var6 = new com.allenstudio.ir.ui.DatePickerPane();
    var6.transferFocus();
    com.allenstudio.ir.ui.Toolbar var8 = new com.allenstudio.ir.ui.Toolbar();
    java.awt.image.ColorModel var9 = var8.getColorModel();
    var8.setEnabled(true);
    java.awt.Component var13 = var8.getComponentAtIndex(1);
    boolean var14 = var8.isFloatable();
    var6.setContent((java.awt.Component)var8);
    var6.setSelected(true);
    boolean var18 = var6.isFocusTraversalPolicySet();
    java.awt.Dimension var19 = var6.getPreferredSize();
    java.awt.Dimension var20 = var0.getSize(var19);
    java.awt.Container var21 = var0.getFocusCycleRootAncestor();
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var1);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var2);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var3 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var4 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var5);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var9);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var13);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var14 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var18 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var19);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var20);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var21);

  }

  public void test339() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest1.test339");


    com.allenstudio.ir.ui.DefaultNoteListModel var0 = new com.allenstudio.ir.ui.DefaultNoteListModel();
    com.allenstudio.ir.ui.StatusBar var1 = new com.allenstudio.ir.ui.StatusBar();
    int var2 = var1.getY();
    javax.swing.JToolTip var3 = var1.createToolTip();
    float var4 = var3.getAlignmentY();
    java.awt.Color var5 = var3.getForeground();
    java.awt.event.MouseMotionListener[] var6 = var3.getMouseMotionListeners();
    com.allenstudio.ir.core.plugins.CommonNote var7 = new com.allenstudio.ir.core.plugins.CommonNote();
    java.lang.String var8 = var7.getFeature();
    com.allenstudio.ir.ui.StatusBar var9 = new com.allenstudio.ir.ui.StatusBar();
    var9.enable();
    boolean var11 = var9.isFocusOwner();
    var9.firePropertyChange("hi!", 10L, 0L);
    var9.layout();
    var9.removeAll();
    com.allenstudio.ir.ui.StatusBar var18 = new com.allenstudio.ir.ui.StatusBar();
    javax.swing.JRootPane var19 = var18.getRootPane();
    java.awt.Point var20 = var18.location();
    java.awt.Component var21 = var9.getComponentAt(var20);
    java.awt.Point var22 = var7.getLocation(var20);
    var7.setOtherInfo("");
    var7.setFeature("Title");
    var7.removeNotify();
    com.allenstudio.ir.util.XmlElement var28 = new com.allenstudio.ir.util.XmlElement();
    com.allenstudio.ir.util.XmlElement var30 = var28.addSubElement("hi!");
    com.allenstudio.ir.util.XmlElement var31 = new com.allenstudio.ir.util.XmlElement();
    com.allenstudio.ir.util.XmlElement var33 = var31.addSubElement("hi!");
    var33.notifyObservers((java.lang.Object)(byte)1);
    var28.append(var33);
    com.allenstudio.ir.util.XmlElement var37 = new com.allenstudio.ir.util.XmlElement();
    com.allenstudio.ir.util.XmlElement var39 = var37.addSubElement("hi!");
    java.lang.String var41 = var37.getAttribute("C:\\boot.ini");
    com.allenstudio.ir.util.XmlElement var42 = var33.addSubElement(var37);
    java.lang.String var45 = var33.getAttribute("Title", "ToolBarUI");
    var3.putClientProperty((java.lang.Object)var7, (java.lang.Object)"Title");
    var7.doLayout();
    java.lang.String var48 = var7.getDescription();
    int var50 = var0.indexOf((com.allenstudio.ir.core.plugins.AbstractNote)var7, 556);
    com.allenstudio.ir.core.plugins.CommonNote var51 = new com.allenstudio.ir.core.plugins.CommonNote();
    var51.resize(0, 1);
    java.lang.String var55 = var51.getOtherInfo();
    javax.swing.event.AncestorListener[] var56 = var51.getAncestorListeners();
    boolean var57 = var0.removeElement((com.allenstudio.ir.core.plugins.AbstractNote)var51);
    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      com.allenstudio.ir.core.plugins.AbstractNote var59 = var0.remove(32);
      fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException");
    } catch (java.lang.ArrayIndexOutOfBoundsException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var2 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var3);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var4 == 0.5f);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var5);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var6);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var8 + "' != '" + "C:\\boot.ini"+ "'", var8.equals("C:\\boot.ini"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var11 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var19);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var20);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var21);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var22);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var30);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var33);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var39);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var41);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var42);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var45 + "' != '" + "ToolBarUI"+ "'", var45.equals("ToolBarUI"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var48 + "' != '" + "This is a testing description. \u03E3\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\u073F\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD"+ "'", var48.equals("This is a testing description. \u03E3\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\u073F\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var50 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var55);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var56);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var57 == false);

  }

  public void test340() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest1.test340");


    com.allenstudio.ir.ui.NoteListsTabPane var0 = new com.allenstudio.ir.ui.NoteListsTabPane();
    var0.setSelectedIndex(1);
    java.awt.Component var3 = var0.getSelectedComponent();
    com.allenstudio.ir.ui.DatePickerPane var5 = new com.allenstudio.ir.ui.DatePickerPane();
    var5.transferFocus();
    com.allenstudio.ir.ui.Toolbar var7 = new com.allenstudio.ir.ui.Toolbar();
    java.awt.image.ColorModel var8 = var7.getColorModel();
    var7.setEnabled(true);
    java.awt.Component var12 = var7.getComponentAtIndex(1);
    boolean var13 = var7.isFloatable();
    var5.setContent((java.awt.Component)var7);
    var5.setSelected(true);
    boolean var17 = var5.isFocusable();
    com.allenstudio.ir.ui.StatusBar var18 = new com.allenstudio.ir.ui.StatusBar();
    com.allenstudio.ir.core.plugins.CommonNote var19 = new com.allenstudio.ir.core.plugins.CommonNote();
    var19.setFocusTraversalPolicyProvider(false);
    var18.remove((java.awt.Component)var19);
    var19.setFeature("ToolBarUI");
    javax.swing.Icon var25 = var19.getIcon();
    var5.setFrameIcon(var25);
    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      var0.setIconAt(5, var25);
      fail("Expected exception of type java.lang.IndexOutOfBoundsException");
    } catch (java.lang.IndexOutOfBoundsException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var3);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var8);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var12);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var13 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var17 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var25);

  }

  public void test341() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest1.test341");


    com.allenstudio.ir.ui.NoteListsTabPane var0 = new com.allenstudio.ir.ui.NoteListsTabPane();
    com.allenstudio.ir.ui.Toolbar var1 = new com.allenstudio.ir.ui.Toolbar();
    boolean var2 = var1.isFloatable();
    var1.show();
    java.awt.image.ColorModel var4 = var1.getColorModel();
    boolean var5 = var1.isFocusCycleRoot();
    com.allenstudio.ir.ui.DatePickerPane var6 = new com.allenstudio.ir.ui.DatePickerPane();
    var6.transferFocus();
    com.allenstudio.ir.ui.Toolbar var8 = new com.allenstudio.ir.ui.Toolbar();
    java.awt.image.ColorModel var9 = var8.getColorModel();
    var8.setEnabled(true);
    java.awt.Component var13 = var8.getComponentAtIndex(1);
    boolean var14 = var8.isFloatable();
    var6.setContent((java.awt.Component)var8);
    java.awt.Dimension var16 = var6.size();
    com.allenstudio.ir.ui.Toolbar var17 = new com.allenstudio.ir.ui.Toolbar();
    boolean var18 = var17.isFloatable();
    var17.show();
    boolean var20 = var17.isRequestFocusEnabled();
    java.awt.Dimension var21 = var17.minimumSize();
    var6.setToolBar((javax.swing.JToolBar)var17);
    java.awt.Image var25 = var6.createImage(10, (-1));
    var0.add((java.awt.Component)var1, (java.lang.Object)10);
    com.allenstudio.ir.ui.Toolbar var27 = new com.allenstudio.ir.ui.Toolbar();
    boolean var28 = var27.isFloatable();
    java.awt.Component var30 = var27.getComponentAtIndex(10);
    boolean var31 = var27.isLightweight();
    java.awt.Component var32 = var0.add((java.awt.Component)var27);
    com.allenstudio.ir.ui.NoteListsTabPane var33 = new com.allenstudio.ir.ui.NoteListsTabPane();
    com.allenstudio.ir.ui.Toolbar var34 = new com.allenstudio.ir.ui.Toolbar();
    boolean var35 = var34.isFloatable();
    var34.show();
    java.awt.image.ColorModel var37 = var34.getColorModel();
    boolean var38 = var34.isFocusCycleRoot();
    com.allenstudio.ir.ui.DatePickerPane var39 = new com.allenstudio.ir.ui.DatePickerPane();
    var39.transferFocus();
    com.allenstudio.ir.ui.Toolbar var41 = new com.allenstudio.ir.ui.Toolbar();
    java.awt.image.ColorModel var42 = var41.getColorModel();
    var41.setEnabled(true);
    java.awt.Component var46 = var41.getComponentAtIndex(1);
    boolean var47 = var41.isFloatable();
    var39.setContent((java.awt.Component)var41);
    java.awt.Dimension var49 = var39.size();
    com.allenstudio.ir.ui.Toolbar var50 = new com.allenstudio.ir.ui.Toolbar();
    boolean var51 = var50.isFloatable();
    var50.show();
    boolean var53 = var50.isRequestFocusEnabled();
    java.awt.Dimension var54 = var50.minimumSize();
    var39.setToolBar((javax.swing.JToolBar)var50);
    java.awt.Image var58 = var39.createImage(10, (-1));
    var33.add((java.awt.Component)var34, (java.lang.Object)10);
    var33.setSelectedIndex(1);
    javax.swing.plaf.TabbedPaneUI var62 = var33.getUI();
    javax.swing.SingleSelectionModel var63 = var33.getModel();
    var0.setModel(var63);
    javax.accessibility.AccessibleContext var65 = var0.getAccessibleContext();
    var0.setFocusTraversalKeysEnabled(false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var2 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var4);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var5 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var9);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var13);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var14 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var16);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var18 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var20 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var21);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var25);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var28 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var30);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var31 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var32);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var35 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var37);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var38 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var42);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var46);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var47 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var49);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var51 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var53 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var54);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var58);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var62);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var63);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var65);

  }

  public void test342() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest1.test342");


    com.allenstudio.ir.ui.MainFrame var0 = new com.allenstudio.ir.ui.MainFrame();
    java.lang.String var1 = var0.getWarningString();
    java.lang.String var2 = var0.getWarningString();
    java.awt.Container var3 = var0.getFocusCycleRootAncestor();
    com.allenstudio.ir.ui.StatusBar var4 = new com.allenstudio.ir.ui.StatusBar();
    boolean var5 = var4.isBackgroundSet();
    boolean var8 = var4.contains(10, 100);
    var4.revalidate();
    javax.swing.JToolTip var10 = var4.createToolTip();
    com.allenstudio.ir.ui.StatusBar var11 = new com.allenstudio.ir.ui.StatusBar();
    javax.swing.JRootPane var12 = var11.getRootPane();
    java.awt.Point var13 = var11.location();
    com.allenstudio.ir.ui.StatusBar var14 = new com.allenstudio.ir.ui.StatusBar();
    javax.swing.JRootPane var15 = var14.getRootPane();
    java.awt.Point var16 = var14.location();
    com.allenstudio.ir.ui.Toolbar var17 = new com.allenstudio.ir.ui.Toolbar();
    boolean var18 = var17.isFloatable();
    java.awt.Component var20 = var17.getComponentAtIndex(10);
    java.lang.Object var21 = var14.getClientProperty((java.lang.Object)10);
    java.awt.Dimension var22 = var14.getMaximumSize();
    var11.setMinimumSize(var22);
    java.awt.Rectangle var24 = var11.getBounds();
    var4.scrollRectToVisible(var24);
    var0.setMaximizedBounds(var24);
    float var27 = var0.getAlignmentX();
    var0.setVisible(false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var1);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var2);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var3);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var5 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var8 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var10);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var12);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var13);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var15);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var16);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var18 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var20);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var21);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var22);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var24);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var27 == 0.5f);

  }

  public void test343() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest1.test343");


    com.allenstudio.ir.ui.NoteListsTabPane var0 = new com.allenstudio.ir.ui.NoteListsTabPane();
    com.allenstudio.ir.ui.Toolbar var1 = new com.allenstudio.ir.ui.Toolbar();
    boolean var2 = var1.isFloatable();
    var1.show();
    java.awt.image.ColorModel var4 = var1.getColorModel();
    boolean var5 = var1.isFocusCycleRoot();
    com.allenstudio.ir.ui.DatePickerPane var6 = new com.allenstudio.ir.ui.DatePickerPane();
    var6.transferFocus();
    com.allenstudio.ir.ui.Toolbar var8 = new com.allenstudio.ir.ui.Toolbar();
    java.awt.image.ColorModel var9 = var8.getColorModel();
    var8.setEnabled(true);
    java.awt.Component var13 = var8.getComponentAtIndex(1);
    boolean var14 = var8.isFloatable();
    var6.setContent((java.awt.Component)var8);
    java.awt.Dimension var16 = var6.size();
    com.allenstudio.ir.ui.Toolbar var17 = new com.allenstudio.ir.ui.Toolbar();
    boolean var18 = var17.isFloatable();
    var17.show();
    boolean var20 = var17.isRequestFocusEnabled();
    java.awt.Dimension var21 = var17.minimumSize();
    var6.setToolBar((javax.swing.JToolBar)var17);
    java.awt.Image var25 = var6.createImage(10, (-1));
    var0.add((java.awt.Component)var1, (java.lang.Object)10);
    com.allenstudio.ir.ui.Toolbar var27 = new com.allenstudio.ir.ui.Toolbar();
    boolean var28 = var27.isFloatable();
    java.awt.Component var30 = var27.getComponentAtIndex(10);
    boolean var31 = var27.isLightweight();
    java.awt.Component var32 = var0.add((java.awt.Component)var27);
    com.allenstudio.ir.ui.NoteListsTabPane var33 = new com.allenstudio.ir.ui.NoteListsTabPane();
    com.allenstudio.ir.ui.Toolbar var34 = new com.allenstudio.ir.ui.Toolbar();
    boolean var35 = var34.isFloatable();
    var34.show();
    java.awt.image.ColorModel var37 = var34.getColorModel();
    boolean var38 = var34.isFocusCycleRoot();
    com.allenstudio.ir.ui.DatePickerPane var39 = new com.allenstudio.ir.ui.DatePickerPane();
    var39.transferFocus();
    com.allenstudio.ir.ui.Toolbar var41 = new com.allenstudio.ir.ui.Toolbar();
    java.awt.image.ColorModel var42 = var41.getColorModel();
    var41.setEnabled(true);
    java.awt.Component var46 = var41.getComponentAtIndex(1);
    boolean var47 = var41.isFloatable();
    var39.setContent((java.awt.Component)var41);
    java.awt.Dimension var49 = var39.size();
    com.allenstudio.ir.ui.Toolbar var50 = new com.allenstudio.ir.ui.Toolbar();
    boolean var51 = var50.isFloatable();
    var50.show();
    boolean var53 = var50.isRequestFocusEnabled();
    java.awt.Dimension var54 = var50.minimumSize();
    var39.setToolBar((javax.swing.JToolBar)var50);
    java.awt.Image var58 = var39.createImage(10, (-1));
    var33.add((java.awt.Component)var34, (java.lang.Object)10);
    var33.setSelectedIndex(1);
    javax.swing.plaf.TabbedPaneUI var62 = var33.getUI();
    javax.swing.SingleSelectionModel var63 = var33.getModel();
    var0.setModel(var63);
    int var66 = var0.indexOfTab("This is a testing description. \u03E3\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\u073F\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD");
    java.awt.event.ComponentListener[] var67 = var0.getComponentListeners();
    int var69 = var0.indexOfTab("Title");
    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      int var71 = var0.getDisplayedMnemonicIndexAt(2015);
      fail("Expected exception of type java.lang.IndexOutOfBoundsException");
    } catch (java.lang.IndexOutOfBoundsException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var2 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var4);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var5 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var9);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var13);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var14 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var16);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var18 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var20 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var21);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var25);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var28 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var30);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var31 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var32);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var35 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var37);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var38 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var42);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var46);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var47 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var49);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var51 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var53 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var54);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var58);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var62);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var63);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var66 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var67);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var69 == (-1));

  }

  public void test344() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest1.test344");


    com.allenstudio.ir.ui.MainFrame var0 = new com.allenstudio.ir.ui.MainFrame();
    boolean var1 = var0.isShowing();
    var0.setAutoRequestFocus(false);
    java.awt.Toolkit var4 = var0.getToolkit();
    var0.repaint(100L, 3, 31, 100, 556);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var1 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var4);

  }

  public void test345() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest1.test345");


    com.allenstudio.ir.ui.NoteListsTabPane var0 = new com.allenstudio.ir.ui.NoteListsTabPane();
    com.allenstudio.ir.ui.Toolbar var1 = new com.allenstudio.ir.ui.Toolbar();
    boolean var2 = var1.isFloatable();
    var1.show();
    java.awt.image.ColorModel var4 = var1.getColorModel();
    boolean var5 = var1.isFocusCycleRoot();
    com.allenstudio.ir.ui.DatePickerPane var6 = new com.allenstudio.ir.ui.DatePickerPane();
    var6.transferFocus();
    com.allenstudio.ir.ui.Toolbar var8 = new com.allenstudio.ir.ui.Toolbar();
    java.awt.image.ColorModel var9 = var8.getColorModel();
    var8.setEnabled(true);
    java.awt.Component var13 = var8.getComponentAtIndex(1);
    boolean var14 = var8.isFloatable();
    var6.setContent((java.awt.Component)var8);
    java.awt.Dimension var16 = var6.size();
    com.allenstudio.ir.ui.Toolbar var17 = new com.allenstudio.ir.ui.Toolbar();
    boolean var18 = var17.isFloatable();
    var17.show();
    boolean var20 = var17.isRequestFocusEnabled();
    java.awt.Dimension var21 = var17.minimumSize();
    var6.setToolBar((javax.swing.JToolBar)var17);
    java.awt.Image var25 = var6.createImage(10, (-1));
    var0.add((java.awt.Component)var1, (java.lang.Object)10);
    var0.setSelectedIndex(1);
    javax.swing.plaf.TabbedPaneUI var29 = var0.getUI();
    javax.swing.SingleSelectionModel var30 = var0.getModel();
    int var31 = var0.getTabPlacement();
    com.allenstudio.ir.ui.StatusBar var33 = new com.allenstudio.ir.ui.StatusBar();
    com.allenstudio.ir.core.plugins.CommonNote var34 = new com.allenstudio.ir.core.plugins.CommonNote();
    var34.setFocusTraversalPolicyProvider(false);
    var33.remove((java.awt.Component)var34);
    var34.setFeature("ToolBarUI");
    javax.swing.Icon var40 = var34.getIcon();
    var0.setDisabledIconAt(0, var40);
    com.allenstudio.ir.ui.DatePickerPane var43 = new com.allenstudio.ir.ui.DatePickerPane();
    var43.transferFocus();
    com.allenstudio.ir.ui.Toolbar var45 = new com.allenstudio.ir.ui.Toolbar();
    java.awt.image.ColorModel var46 = var45.getColorModel();
    var45.setEnabled(true);
    java.awt.Component var50 = var45.getComponentAtIndex(1);
    boolean var51 = var45.isFloatable();
    var43.setContent((java.awt.Component)var45);
    java.awt.Color var53 = var45.getForeground();
    var45.setVisible(true);
    java.awt.Component var56 = var0.add("frame2", (java.awt.Component)var45);
    var45.show();
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var2 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var4);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var5 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var9);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var13);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var14 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var16);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var18 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var20 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var21);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var25);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var29);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var30);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var31 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var40);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var46);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var50);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var51 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var53);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var56);

  }

  public void test346() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest1.test346");


    com.allenstudio.ir.ui.MainFrame var0 = new com.allenstudio.ir.ui.MainFrame();
    java.lang.String var1 = var0.getWarningString();
    java.awt.Rectangle var2 = var0.getMaximizedBounds();
    boolean var3 = var0.isLocationByPlatform();
    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      java.util.Set var5 = var0.getFocusTraversalKeys(10);
      fail("Expected exception of type java.lang.IllegalArgumentException");
    } catch (java.lang.IllegalArgumentException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var1);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var2);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var3 == false);

  }

  public void test347() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest1.test347");


    com.allenstudio.ir.ui.StatusBar var0 = new com.allenstudio.ir.ui.StatusBar();
    var0.enable();
    boolean var2 = var0.isFocusOwner();
    var0.firePropertyChange("hi!", 10L, 0L);
    var0.layout();
    var0.removeAll();
    com.allenstudio.ir.ui.StatusBar var9 = new com.allenstudio.ir.ui.StatusBar();
    javax.swing.JRootPane var10 = var9.getRootPane();
    java.awt.Point var11 = var9.location();
    java.awt.Component var12 = var0.getComponentAt(var11);
    javax.swing.event.AncestorListener[] var13 = var0.getAncestorListeners();
    com.allenstudio.ir.ui.DatePickerPane var14 = new com.allenstudio.ir.ui.DatePickerPane();
    java.lang.String var15 = var14.getUIClassID();
    com.allenstudio.ir.ui.StatusBar var16 = new com.allenstudio.ir.ui.StatusBar();
    int var17 = var16.getY();
    javax.swing.JToolTip var18 = var16.createToolTip();
    float var19 = var18.getAlignmentY();
    java.awt.Color var20 = var18.getForeground();
    var14.setBackground(var20);
    boolean var22 = var14.isPaintingTile();
    int var23 = var0.getComponentZOrder((java.awt.Component)var14);
    com.allenstudio.ir.ui.NoteListsTabPane var24 = new com.allenstudio.ir.ui.NoteListsTabPane();
    com.allenstudio.ir.ui.Toolbar var25 = new com.allenstudio.ir.ui.Toolbar();
    boolean var26 = var25.isFloatable();
    var25.show();
    java.awt.image.ColorModel var28 = var25.getColorModel();
    boolean var29 = var25.isFocusCycleRoot();
    com.allenstudio.ir.ui.DatePickerPane var30 = new com.allenstudio.ir.ui.DatePickerPane();
    var30.transferFocus();
    com.allenstudio.ir.ui.Toolbar var32 = new com.allenstudio.ir.ui.Toolbar();
    java.awt.image.ColorModel var33 = var32.getColorModel();
    var32.setEnabled(true);
    java.awt.Component var37 = var32.getComponentAtIndex(1);
    boolean var38 = var32.isFloatable();
    var30.setContent((java.awt.Component)var32);
    java.awt.Dimension var40 = var30.size();
    com.allenstudio.ir.ui.Toolbar var41 = new com.allenstudio.ir.ui.Toolbar();
    boolean var42 = var41.isFloatable();
    var41.show();
    boolean var44 = var41.isRequestFocusEnabled();
    java.awt.Dimension var45 = var41.minimumSize();
    var30.setToolBar((javax.swing.JToolBar)var41);
    java.awt.Image var49 = var30.createImage(10, (-1));
    var24.add((java.awt.Component)var25, (java.lang.Object)10);
    var24.setSelectedIndex(1);
    javax.swing.plaf.TabbedPaneUI var53 = var24.getUI();
    javax.swing.SingleSelectionModel var54 = var24.getModel();
    int var55 = var24.getTabPlacement();
    com.allenstudio.ir.ui.StatusBar var57 = new com.allenstudio.ir.ui.StatusBar();
    com.allenstudio.ir.core.plugins.CommonNote var58 = new com.allenstudio.ir.core.plugins.CommonNote();
    var58.setFocusTraversalPolicyProvider(false);
    var57.remove((java.awt.Component)var58);
    var58.setFeature("ToolBarUI");
    javax.swing.Icon var64 = var58.getIcon();
    var24.setDisabledIconAt(0, var64);
    var14.setFrameIcon(var64);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var2 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var10);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var11);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var12);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var13);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var15 + "' != '" + "PanelUI"+ "'", var15.equals("PanelUI"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var17 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var18);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var19 == 0.5f);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var20);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var22 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var23 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var26 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var28);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var29 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var33);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var37);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var38 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var40);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var42 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var44 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var45);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var49);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var53);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var54);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var55 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var64);

  }

  public void test348() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest1.test348");


    com.allenstudio.ir.ui.MainFrame var0 = new com.allenstudio.ir.ui.MainFrame();
    boolean var1 = var0.isShowing();
    int var2 = var0.countComponents();
    var0.setAutoRequestFocus(false);
    javax.swing.JMenuBar var5 = var0.getJMenuBar();
    boolean var6 = var5.isBorderPainted();
    var5.updateUI();
    com.allenstudio.ir.ui.DatePickerPane var8 = new com.allenstudio.ir.ui.DatePickerPane();
    var8.transferFocus();
    java.awt.Dimension var10 = var8.getMinimumSize();
    java.awt.Dimension var11 = var5.getSize(var10);
    javax.swing.plaf.MenuBarUI var12 = var5.getUI();
    java.awt.Dimension var13 = var5.getPreferredSize();
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var1 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var2 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var5);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var6 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var10);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var11);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var12);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var13);

  }

  public void test349() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest1.test349");


    com.allenstudio.ir.util.InspirentoUtilities var0 = new com.allenstudio.ir.util.InspirentoUtilities();
    com.allenstudio.ir.event.NoteListDataEvent var2 = new com.allenstudio.ir.event.NoteListDataEvent((java.lang.Object)var0, 1);
    int var3 = var2.getIndex();
    int var4 = var2.getType();
    int var5 = var2.getType();
    int var6 = var2.getType();
    java.lang.Object var7 = var2.getSource();
    java.lang.String var8 = var2.toString();
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var3 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var4 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var5 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var6 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var7);

  }

  public void test350() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest1.test350");


    com.allenstudio.ir.ui.MainFrame var0 = new com.allenstudio.ir.ui.MainFrame();
    java.lang.String var1 = var0.getWarningString();
    java.lang.String var2 = var0.getWarningString();
    boolean var3 = var0.isAutoRequestFocus();
    boolean var4 = var0.isResizable();
    javax.swing.JLayeredPane var5 = var0.getLayeredPane();
    javax.swing.TransferHandler var6 = var0.getTransferHandler();
    java.lang.String var7 = var0.getTitle();
    java.awt.Container var8 = var0.getFocusCycleRootAncestor();
    var0.setResizable(true);
    java.awt.event.WindowListener[] var11 = var0.getWindowListeners();
    boolean var12 = var0.isAlwaysOnTopSupported();
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var1);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var2);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var3 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var4 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var5);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var6);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var7 + "' != '" + "Inspirento - alpha 0.86"+ "'", var7.equals("Inspirento - alpha 0.86"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var8);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var11);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var12 == true);

  }

  public void test351() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest1.test351");


    com.allenstudio.ir.ui.DatePickerPane var0 = new com.allenstudio.ir.ui.DatePickerPane();
    javax.swing.KeyStroke[] var1 = var0.getRegisteredKeyStrokes();
    com.allenstudio.ir.ui.Toolbar var2 = new com.allenstudio.ir.ui.Toolbar();
    java.awt.image.ColorModel var3 = var2.getColorModel();
    java.awt.im.InputContext var4 = var2.getInputContext();
    java.awt.Component var6 = var2.getComponentAtIndex(0);
    var0.setToolBar((javax.swing.JToolBar)var2);
    boolean var9 = var0.areFocusTraversalKeysSet(0);
    javax.swing.border.Border var10 = var0.getContentPaneBorder();
    com.allenstudio.ir.ui.MainFrame var11 = new com.allenstudio.ir.ui.MainFrame();
    java.lang.String var12 = var11.getWarningString();
    java.awt.Rectangle var13 = var11.getMaximizedBounds();
    java.awt.MenuBar var14 = var11.getMenuBar();
    com.allenstudio.ir.ui.NoteListsTabPane var15 = new com.allenstudio.ir.ui.NoteListsTabPane();
    com.allenstudio.ir.ui.Toolbar var16 = new com.allenstudio.ir.ui.Toolbar();
    boolean var17 = var16.isFloatable();
    var16.show();
    java.awt.image.ColorModel var19 = var16.getColorModel();
    boolean var20 = var16.isFocusCycleRoot();
    com.allenstudio.ir.ui.DatePickerPane var21 = new com.allenstudio.ir.ui.DatePickerPane();
    var21.transferFocus();
    com.allenstudio.ir.ui.Toolbar var23 = new com.allenstudio.ir.ui.Toolbar();
    java.awt.image.ColorModel var24 = var23.getColorModel();
    var23.setEnabled(true);
    java.awt.Component var28 = var23.getComponentAtIndex(1);
    boolean var29 = var23.isFloatable();
    var21.setContent((java.awt.Component)var23);
    java.awt.Dimension var31 = var21.size();
    com.allenstudio.ir.ui.Toolbar var32 = new com.allenstudio.ir.ui.Toolbar();
    boolean var33 = var32.isFloatable();
    var32.show();
    boolean var35 = var32.isRequestFocusEnabled();
    java.awt.Dimension var36 = var32.minimumSize();
    var21.setToolBar((javax.swing.JToolBar)var32);
    java.awt.Image var40 = var21.createImage(10, (-1));
    var15.add((java.awt.Component)var16, (java.lang.Object)10);
    var11.widgetChanged((com.allenstudio.ir.core.InspirentoWidget)var15);
    java.awt.event.ComponentListener[] var43 = var15.getComponentListeners();
    com.allenstudio.ir.ui.calendar.MonthlyCalendar var44 = new com.allenstudio.ir.ui.calendar.MonthlyCalendar();
    java.awt.Color var45 = var44.getDateBackground();
    var44.setYearMonth(1, (-1));
    java.util.Calendar var49 = var44.getSelectedDate();
    var15.remove((java.awt.Component)var44);
    var0.removeMouseListener((java.awt.event.MouseListener)var44);
    boolean var52 = var44.getMouseListeningEnabled();
    int var53 = var44.getSelectedDay();
    boolean var54 = var44.requestFocusInWindow();
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var1);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var3);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var4);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var6);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var9 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var10);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var12);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var13);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var14);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var17 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var19);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var20 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var24);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var28);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var29 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var31);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var33 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var35 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var36);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var40);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var43);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var45);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var49);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var52 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var53 == 30);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var54 == false);

  }

  public void test352() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest1.test352");


    com.allenstudio.ir.core.plugins.CommonNote var0 = new com.allenstudio.ir.core.plugins.CommonNote();
    var0.resize(0, 1);
    com.allenstudio.ir.ui.NoteListCell var4 = new com.allenstudio.ir.ui.NoteListCell((com.allenstudio.ir.core.plugins.AbstractNote)var0);
    java.lang.String var5 = var0.getFeature();
    java.lang.String var6 = var0.getFeature();
    var0.firePropertyChange("C:\\boot.ini", '#', 'a');
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var5 + "' != '" + "C:\\boot.ini"+ "'", var5.equals("C:\\boot.ini"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var6 + "' != '" + "C:\\boot.ini"+ "'", var6.equals("C:\\boot.ini"));

  }

  public void test353() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest1.test353");


    com.allenstudio.ir.util.XmlElement var0 = new com.allenstudio.ir.util.XmlElement();
    com.allenstudio.ir.util.XmlElement var2 = var0.addSubElement("hi!");
    com.allenstudio.ir.util.XmlElement var5 = var2.addSubElement("", "hi!");
    java.util.Hashtable var6 = var5.getAttributes();
    com.allenstudio.ir.core.plugins.CommonNote var7 = new com.allenstudio.ir.core.plugins.CommonNote();
    var7.resize(0, 1);
    com.allenstudio.ir.ui.NoteListCell var11 = new com.allenstudio.ir.ui.NoteListCell((com.allenstudio.ir.core.plugins.AbstractNote)var7);
    java.lang.String var12 = var7.getFeature();
    boolean var13 = var5.equals((java.lang.Object)var7);
    java.lang.String var16 = var5.getAttribute("", " ");
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var2);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var5);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var6);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var12 + "' != '" + "C:\\boot.ini"+ "'", var12.equals("C:\\boot.ini"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var13 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var16 + "' != '" + " "+ "'", var16.equals(" "));

  }

  public void test354() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest1.test354");


    com.allenstudio.ir.core.plugins.CommonNote var0 = new com.allenstudio.ir.core.plugins.CommonNote();
    java.lang.String var1 = var0.getFeature();
    com.allenstudio.ir.ui.StatusBar var2 = new com.allenstudio.ir.ui.StatusBar();
    var2.enable();
    boolean var4 = var2.isFocusOwner();
    var2.firePropertyChange("hi!", 10L, 0L);
    var2.layout();
    var2.removeAll();
    com.allenstudio.ir.ui.StatusBar var11 = new com.allenstudio.ir.ui.StatusBar();
    javax.swing.JRootPane var12 = var11.getRootPane();
    java.awt.Point var13 = var11.location();
    java.awt.Component var14 = var2.getComponentAt(var13);
    java.awt.Point var15 = var0.getLocation(var13);
    java.lang.String var16 = var0.getDescription();
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var1 + "' != '" + "C:\\boot.ini"+ "'", var1.equals("C:\\boot.ini"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var4 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var12);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var13);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var14);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var15);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var16 + "' != '" + "This is a testing description. \u03E3\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\u073F\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD"+ "'", var16.equals("This is a testing description. \u03E3\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\u073F\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD"));

  }

  public void test355() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest1.test355");


    com.allenstudio.ir.ui.DatePickerPane var0 = new com.allenstudio.ir.ui.DatePickerPane();
    var0.transferFocus();
    com.allenstudio.ir.ui.Toolbar var2 = new com.allenstudio.ir.ui.Toolbar();
    java.awt.image.ColorModel var3 = var2.getColorModel();
    var2.setEnabled(true);
    java.awt.Component var7 = var2.getComponentAtIndex(1);
    boolean var8 = var2.isFloatable();
    var0.setContent((java.awt.Component)var2);
    java.awt.Dimension var10 = var0.size();
    com.allenstudio.ir.ui.Toolbar var11 = new com.allenstudio.ir.ui.Toolbar();
    boolean var12 = var11.isFloatable();
    var11.show();
    boolean var14 = var11.isRequestFocusEnabled();
    java.awt.Dimension var15 = var11.minimumSize();
    var0.setToolBar((javax.swing.JToolBar)var11);
    java.awt.Image var19 = var0.createImage(10, (-1));
    var0.setTitle("Date Picker");
    com.allenstudio.ir.ui.MainFrame var22 = new com.allenstudio.ir.ui.MainFrame();
    java.lang.String var23 = var22.getWarningString();
    java.awt.Rectangle var24 = var22.getMaximizedBounds();
    java.awt.MenuBar var25 = var22.getMenuBar();
    com.allenstudio.ir.ui.NoteListsTabPane var26 = new com.allenstudio.ir.ui.NoteListsTabPane();
    com.allenstudio.ir.ui.Toolbar var27 = new com.allenstudio.ir.ui.Toolbar();
    boolean var28 = var27.isFloatable();
    var27.show();
    java.awt.image.ColorModel var30 = var27.getColorModel();
    boolean var31 = var27.isFocusCycleRoot();
    com.allenstudio.ir.ui.DatePickerPane var32 = new com.allenstudio.ir.ui.DatePickerPane();
    var32.transferFocus();
    com.allenstudio.ir.ui.Toolbar var34 = new com.allenstudio.ir.ui.Toolbar();
    java.awt.image.ColorModel var35 = var34.getColorModel();
    var34.setEnabled(true);
    java.awt.Component var39 = var34.getComponentAtIndex(1);
    boolean var40 = var34.isFloatable();
    var32.setContent((java.awt.Component)var34);
    java.awt.Dimension var42 = var32.size();
    com.allenstudio.ir.ui.Toolbar var43 = new com.allenstudio.ir.ui.Toolbar();
    boolean var44 = var43.isFloatable();
    var43.show();
    boolean var46 = var43.isRequestFocusEnabled();
    java.awt.Dimension var47 = var43.minimumSize();
    var32.setToolBar((javax.swing.JToolBar)var43);
    java.awt.Image var51 = var32.createImage(10, (-1));
    var26.add((java.awt.Component)var27, (java.lang.Object)10);
    var22.widgetChanged((com.allenstudio.ir.core.InspirentoWidget)var26);
    java.awt.event.ComponentListener[] var54 = var26.getComponentListeners();
    com.allenstudio.ir.ui.calendar.MonthlyCalendar var55 = new com.allenstudio.ir.ui.calendar.MonthlyCalendar();
    java.awt.Color var56 = var55.getDateBackground();
    var55.setYearMonth(1, (-1));
    java.util.Calendar var60 = var55.getSelectedDate();
    var26.remove((java.awt.Component)var55);
    var55.setMarked(1, true);
    var0.addMouseMotionListener((java.awt.event.MouseMotionListener)var55);
    com.allenstudio.ir.ui.DatePickerPane var66 = new com.allenstudio.ir.ui.DatePickerPane();
    var66.transferFocus();
    com.allenstudio.ir.ui.Toolbar var68 = new com.allenstudio.ir.ui.Toolbar();
    java.awt.image.ColorModel var69 = var68.getColorModel();
    var68.setEnabled(true);
    java.awt.Component var73 = var68.getComponentAtIndex(1);
    boolean var74 = var68.isFloatable();
    var66.setContent((java.awt.Component)var68);
    java.awt.Color var76 = var68.getForeground();
    var55.setHeaderForeground(var76);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var3);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var7);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var8 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var10);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var12 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var14 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var15);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var19);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var23);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var24);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var25);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var28 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var30);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var31 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var35);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var39);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var40 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var42);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var44 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var46 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var47);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var51);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var54);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var56);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var60);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var69);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var73);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var74 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var76);

  }

  public void test356() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest1.test356");


    com.allenstudio.ir.util.XmlElement var0 = new com.allenstudio.ir.util.XmlElement();
    com.allenstudio.ir.util.XmlElement var2 = var0.addSubElement("hi!");
    com.allenstudio.ir.util.XmlElement var5 = var2.addSubElement("", "hi!");
    java.util.Hashtable var6 = var5.getAttributes();
    com.allenstudio.ir.ui.MainFrame var7 = new com.allenstudio.ir.ui.MainFrame();
    java.lang.String var8 = var7.getWarningString();
    java.awt.Rectangle var9 = var7.getMaximizedBounds();
    java.awt.MenuBar var10 = var7.getMenuBar();
    com.allenstudio.ir.ui.NoteListsTabPane var11 = new com.allenstudio.ir.ui.NoteListsTabPane();
    var7.widgetChanged((com.allenstudio.ir.core.InspirentoWidget)var11);
    var7.dispose();
    java.lang.Object var14 = var6.get((java.lang.Object)var7);
    com.allenstudio.ir.util.XmlElement var15 = new com.allenstudio.ir.util.XmlElement();
    com.allenstudio.ir.util.XmlElement var17 = var15.addSubElement("hi!");
    com.allenstudio.ir.util.XmlElement var20 = var17.addSubElement("", "hi!");
    java.util.Hashtable var21 = var20.getAttributes();
    com.allenstudio.ir.ui.Toolbar var22 = new com.allenstudio.ir.ui.Toolbar();
    java.awt.image.ColorModel var23 = var22.getColorModel();
    var22.setEnabled(true);
    java.awt.ComponentOrientation var26 = var22.getComponentOrientation();
    java.lang.Object var27 = var6.put((java.lang.Object)var21, (java.lang.Object)var26);
    java.util.Enumeration var28 = var21.keys();
    com.allenstudio.ir.event.NoteListDataEvent var30 = new com.allenstudio.ir.event.NoteListDataEvent((java.lang.Object)var21, 100);
    java.lang.Object var31 = var21.clone();
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var2);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var5);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var6);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var8);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var9);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var10);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var14);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var17);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var20);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var21);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var23);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var26);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var27);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var28);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var31);

  }

  public void test357() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest1.test357");


    com.allenstudio.ir.ui.NoteList var0 = new com.allenstudio.ir.ui.NoteList();
    com.allenstudio.ir.ui.MainFrame var1 = new com.allenstudio.ir.ui.MainFrame();
    java.lang.String var2 = var1.getWarningString();
    java.awt.Rectangle var3 = var1.getMaximizedBounds();
    java.awt.MenuBar var4 = var1.getMenuBar();
    com.allenstudio.ir.core.plugins.CommonNote var5 = new com.allenstudio.ir.core.plugins.CommonNote();
    var5.resize(0, 1);
    com.allenstudio.ir.ui.NoteListCell var9 = new com.allenstudio.ir.ui.NoteListCell((com.allenstudio.ir.core.plugins.AbstractNote)var5);
    com.allenstudio.ir.ui.StatusBar var10 = new com.allenstudio.ir.ui.StatusBar();
    boolean var11 = var10.isBackgroundSet();
    boolean var14 = var10.contains(10, 100);
    var10.revalidate();
    javax.swing.JToolTip var16 = var10.createToolTip();
    com.allenstudio.ir.ui.StatusBar var17 = new com.allenstudio.ir.ui.StatusBar();
    javax.swing.JRootPane var18 = var17.getRootPane();
    java.awt.Point var19 = var17.location();
    com.allenstudio.ir.ui.StatusBar var20 = new com.allenstudio.ir.ui.StatusBar();
    javax.swing.JRootPane var21 = var20.getRootPane();
    java.awt.Point var22 = var20.location();
    com.allenstudio.ir.ui.Toolbar var23 = new com.allenstudio.ir.ui.Toolbar();
    boolean var24 = var23.isFloatable();
    java.awt.Component var26 = var23.getComponentAtIndex(10);
    java.lang.Object var27 = var20.getClientProperty((java.lang.Object)10);
    java.awt.Dimension var28 = var20.getMaximumSize();
    var17.setMinimumSize(var28);
    java.awt.Rectangle var30 = var17.getBounds();
    var10.scrollRectToVisible(var30);
    var5.repaint(var30);
    var1.setMaximizedBounds(var30);
    int var36 = var0.getScrollableBlockIncrement(var30, 1, 4);
    com.allenstudio.ir.core.plugins.CommonNote var37 = new com.allenstudio.ir.core.plugins.CommonNote();
    var37.resize(0, 1);
    com.allenstudio.ir.ui.NoteListCell var41 = new com.allenstudio.ir.ui.NoteListCell((com.allenstudio.ir.core.plugins.AbstractNote)var37);
    int var42 = var41.getIndexInList();
    var0.addCell(var41);
    com.allenstudio.ir.core.plugins.CommonNote var44 = new com.allenstudio.ir.core.plugins.CommonNote();
    var44.resize(0, 1);
    com.allenstudio.ir.ui.NoteListCell var48 = new com.allenstudio.ir.ui.NoteListCell((com.allenstudio.ir.core.plugins.AbstractNote)var44);
    int var49 = var48.getIndexInList();
    java.awt.Dimension var50 = var48.getMaximumSize();
    java.awt.LayoutManager var51 = var48.getLayout();
    var0.addCell(var48);
    java.awt.Dimension var53 = var48.getMaximumSize();
    java.awt.Dimension var54 = var48.getMaximumSize();
    java.awt.Point var55 = var48.getMousePosition();
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var2);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var3);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var4);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var11 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var14 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var16);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var18);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var19);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var21);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var22);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var24 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var26);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var27);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var28);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var30);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var36 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var42 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var49 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var50);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var51);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var53);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var54);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var55);

  }

  public void test358() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest1.test358");


    com.allenstudio.ir.util.XmlElement var0 = new com.allenstudio.ir.util.XmlElement();
    com.allenstudio.ir.util.XmlElement var2 = var0.addSubElement("hi!");
    com.allenstudio.ir.util.XmlElement var3 = new com.allenstudio.ir.util.XmlElement();
    com.allenstudio.ir.util.XmlElement var5 = var3.addSubElement("hi!");
    var5.notifyObservers((java.lang.Object)(byte)1);
    var0.append(var5);
    com.allenstudio.ir.util.XmlElement var9 = new com.allenstudio.ir.util.XmlElement();
    com.allenstudio.ir.util.XmlElement var11 = var9.addSubElement("hi!");
    java.lang.String var13 = var9.getAttribute("C:\\boot.ini");
    com.allenstudio.ir.util.XmlElement var14 = var5.addSubElement(var9);
    com.allenstudio.ir.util.XmlElement var15 = var14.getParent();
    com.allenstudio.ir.util.XmlIO var16 = new com.allenstudio.ir.util.XmlIO(var14);
    var16.startPrefixMapping("{}", "TabbedPaneUI");
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var2);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var5);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var11);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var13);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var14);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var15);

  }

  public void test359() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest1.test359");


    com.allenstudio.ir.ui.MainFrame var0 = new com.allenstudio.ir.ui.MainFrame();
    java.lang.String var1 = var0.getWarningString();
    java.lang.String var2 = var0.getWarningString();
    boolean var3 = var0.isAutoRequestFocus();
    com.allenstudio.ir.ui.MainFrame var4 = new com.allenstudio.ir.ui.MainFrame();
    java.lang.String var5 = var4.getWarningString();
    boolean var6 = var4.isAlwaysOnTopSupported();
    java.awt.Color var7 = var4.getBackground();
    var0.setBackground(var7);
    com.allenstudio.ir.ui.NoteListsTabPane var9 = new com.allenstudio.ir.ui.NoteListsTabPane();
    com.allenstudio.ir.ui.Toolbar var10 = new com.allenstudio.ir.ui.Toolbar();
    boolean var11 = var10.isFloatable();
    var10.show();
    java.awt.image.ColorModel var13 = var10.getColorModel();
    boolean var14 = var10.isFocusCycleRoot();
    com.allenstudio.ir.ui.DatePickerPane var15 = new com.allenstudio.ir.ui.DatePickerPane();
    var15.transferFocus();
    com.allenstudio.ir.ui.Toolbar var17 = new com.allenstudio.ir.ui.Toolbar();
    java.awt.image.ColorModel var18 = var17.getColorModel();
    var17.setEnabled(true);
    java.awt.Component var22 = var17.getComponentAtIndex(1);
    boolean var23 = var17.isFloatable();
    var15.setContent((java.awt.Component)var17);
    java.awt.Dimension var25 = var15.size();
    com.allenstudio.ir.ui.Toolbar var26 = new com.allenstudio.ir.ui.Toolbar();
    boolean var27 = var26.isFloatable();
    var26.show();
    boolean var29 = var26.isRequestFocusEnabled();
    java.awt.Dimension var30 = var26.minimumSize();
    var15.setToolBar((javax.swing.JToolBar)var26);
    java.awt.Image var34 = var15.createImage(10, (-1));
    var9.add((java.awt.Component)var10, (java.lang.Object)10);
    com.allenstudio.ir.ui.Toolbar var36 = new com.allenstudio.ir.ui.Toolbar();
    java.awt.image.ColorModel var37 = var36.getColorModel();
    var36.setEnabled(true);
    var9.add((java.awt.Component)var36, (java.lang.Object)100L, 0);
    var0.widgetChanged((com.allenstudio.ir.core.InspirentoWidget)var9);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var1);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var2);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var3 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var5);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var6 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var7);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var11 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var13);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var14 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var18);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var22);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var23 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var25);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var27 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var29 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var30);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var34);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var37);

  }

  public void test360() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest1.test360");


    com.allenstudio.ir.ui.StatusBar var0 = new com.allenstudio.ir.ui.StatusBar();
    javax.swing.JRootPane var1 = var0.getRootPane();
    java.awt.Point var2 = var0.location();
    com.allenstudio.ir.ui.Toolbar var3 = new com.allenstudio.ir.ui.Toolbar();
    boolean var4 = var3.isFloatable();
    java.awt.Component var6 = var3.getComponentAtIndex(10);
    java.lang.Object var7 = var0.getClientProperty((java.lang.Object)10);
    var0.setFocusTraversalPolicyProvider(false);
    boolean var10 = var0.isManagingFocus();
    int var11 = var0.getHeight();
    var0.grabFocus();
    var0.enable();
    java.awt.event.FocusListener[] var14 = var0.getFocusListeners();
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var1);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var2);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var4 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var6);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var7);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var10 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var11 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var14);

  }

  public void test361() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest1.test361");


    com.allenstudio.ir.ui.Toolbar var0 = new com.allenstudio.ir.ui.Toolbar();
    java.awt.image.ColorModel var1 = var0.getColorModel();
    java.awt.im.InputContext var2 = var0.getInputContext();
    java.awt.Component var4 = var0.getComponent(0);
    java.awt.LayoutManager var5 = var0.getLayout();
    boolean var6 = var0.isRequestFocusEnabled();
    java.awt.Insets var7 = var0.getInsets();
    javax.swing.plaf.ToolBarUI var8 = var0.getUI();
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var1);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var2);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var4);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var5);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var6 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var7);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var8);

  }

  public void test362() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest1.test362");


    com.allenstudio.ir.ui.MainFrame var0 = new com.allenstudio.ir.ui.MainFrame();
    java.lang.String var1 = var0.getWarningString();
    java.lang.String var2 = var0.getWarningString();
    boolean var3 = var0.isAutoRequestFocus();
    boolean var4 = var0.isResizable();
    var0.setBounds(6, 556, 0, 5);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var1);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var2);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var3 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var4 == true);

  }

  public void test363() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest1.test363");


    com.allenstudio.ir.ui.NoteListsTabPane var0 = new com.allenstudio.ir.ui.NoteListsTabPane();
    com.allenstudio.ir.ui.Toolbar var1 = new com.allenstudio.ir.ui.Toolbar();
    boolean var2 = var1.isFloatable();
    var1.show();
    java.awt.image.ColorModel var4 = var1.getColorModel();
    boolean var5 = var1.isFocusCycleRoot();
    com.allenstudio.ir.ui.DatePickerPane var6 = new com.allenstudio.ir.ui.DatePickerPane();
    var6.transferFocus();
    com.allenstudio.ir.ui.Toolbar var8 = new com.allenstudio.ir.ui.Toolbar();
    java.awt.image.ColorModel var9 = var8.getColorModel();
    var8.setEnabled(true);
    java.awt.Component var13 = var8.getComponentAtIndex(1);
    boolean var14 = var8.isFloatable();
    var6.setContent((java.awt.Component)var8);
    java.awt.Dimension var16 = var6.size();
    com.allenstudio.ir.ui.Toolbar var17 = new com.allenstudio.ir.ui.Toolbar();
    boolean var18 = var17.isFloatable();
    var17.show();
    boolean var20 = var17.isRequestFocusEnabled();
    java.awt.Dimension var21 = var17.minimumSize();
    var6.setToolBar((javax.swing.JToolBar)var17);
    java.awt.Image var25 = var6.createImage(10, (-1));
    var0.add((java.awt.Component)var1, (java.lang.Object)10);
    var0.setSelectedIndex(1);
    javax.swing.plaf.TabbedPaneUI var29 = var0.getUI();
    int var30 = var0.getTabCount();
    javax.accessibility.AccessibleContext var31 = var0.getAccessibleContext();
    com.allenstudio.ir.ui.StatusBar var32 = new com.allenstudio.ir.ui.StatusBar();
    int var33 = var32.getY();
    boolean var34 = var32.isLightweight();
    java.awt.Dimension var35 = var32.getMaximumSize();
    java.awt.event.KeyListener[] var36 = var32.getKeyListeners();
    boolean var37 = var32.getInheritsPopupMenu();
    var32.firePropertyChange("This is a testing description. \u03E3\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\u073F\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD", 100.0d, 100.0d);
    var32.repaint(100L, 100, 1, 100, (-1));
    javax.swing.InputMap var48 = var32.getInputMap();
    java.awt.Dimension var49 = var32.getMinimumSize();
    var0.resize(var49);
    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      java.awt.Component var52 = var0.getComponentAt(100);
      fail("Expected exception of type java.lang.IndexOutOfBoundsException");
    } catch (java.lang.IndexOutOfBoundsException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var2 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var4);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var5 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var9);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var13);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var14 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var16);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var18 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var20 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var21);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var25);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var29);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var30 == 4);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var31);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var33 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var34 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var35);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var36);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var37 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var48);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var49);

  }

  public void test364() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest1.test364");


    com.allenstudio.ir.ui.NoteListsTabPane var0 = new com.allenstudio.ir.ui.NoteListsTabPane();
    com.allenstudio.ir.ui.Toolbar var1 = new com.allenstudio.ir.ui.Toolbar();
    boolean var2 = var1.isFloatable();
    var1.show();
    java.awt.image.ColorModel var4 = var1.getColorModel();
    boolean var5 = var1.isFocusCycleRoot();
    com.allenstudio.ir.ui.DatePickerPane var6 = new com.allenstudio.ir.ui.DatePickerPane();
    var6.transferFocus();
    com.allenstudio.ir.ui.Toolbar var8 = new com.allenstudio.ir.ui.Toolbar();
    java.awt.image.ColorModel var9 = var8.getColorModel();
    var8.setEnabled(true);
    java.awt.Component var13 = var8.getComponentAtIndex(1);
    boolean var14 = var8.isFloatable();
    var6.setContent((java.awt.Component)var8);
    java.awt.Dimension var16 = var6.size();
    com.allenstudio.ir.ui.Toolbar var17 = new com.allenstudio.ir.ui.Toolbar();
    boolean var18 = var17.isFloatable();
    var17.show();
    boolean var20 = var17.isRequestFocusEnabled();
    java.awt.Dimension var21 = var17.minimumSize();
    var6.setToolBar((javax.swing.JToolBar)var17);
    java.awt.Image var25 = var6.createImage(10, (-1));
    var0.add((java.awt.Component)var1, (java.lang.Object)10);
    com.allenstudio.ir.ui.DatePickerPane var27 = new com.allenstudio.ir.ui.DatePickerPane();
    java.lang.String var28 = var27.getTitle();
    java.awt.dnd.DropTarget var29 = var27.getDropTarget();
    com.allenstudio.ir.util.XmlElement var30 = new com.allenstudio.ir.util.XmlElement();
    boolean var31 = var30.hasChanged();
    var0.add((java.awt.Component)var27, (java.lang.Object)var31, (-1));
    int var34 = var0.getTabPlacement();
    com.allenstudio.ir.ui.Toolbar var35 = new com.allenstudio.ir.ui.Toolbar();
    java.awt.image.ColorModel var36 = var35.getColorModel();
    var35.setEnabled(true);
    java.awt.Component var40 = var35.getComponentAtIndex(1);
    boolean var41 = var35.isValidateRoot();
    var35.addSeparator();
    java.awt.event.FocusListener[] var43 = var35.getFocusListeners();
    javax.accessibility.AccessibleContext var44 = var35.getAccessibleContext();
    var35.setLocation((-1), 100);
    java.awt.Component var48 = var0.add((java.awt.Component)var35);
    int var49 = var0.getTabLayoutPolicy();
    var0.changed();
    var0.setTabPlacement(4);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var2 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var4);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var5 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var9);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var13);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var14 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var16);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var18 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var20 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var21);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var25);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var28 + "' != '" + "Date Picker"+ "'", var28.equals("Date Picker"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var29);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var31 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var34 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var36);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var40);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var41 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var43);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var44);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var48);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var49 == 0);

  }

  public void test365() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest1.test365");


    com.allenstudio.ir.ui.MainFrame var0 = new com.allenstudio.ir.ui.MainFrame();
    java.lang.String var1 = var0.getWarningString();
    java.awt.Rectangle var2 = var0.getMaximizedBounds();
    com.allenstudio.ir.ui.MainFrame var3 = new com.allenstudio.ir.ui.MainFrame();
    java.lang.String var4 = var3.getWarningString();
    java.lang.String var5 = var3.getWarningString();
    var3.toFront();
    java.awt.im.InputContext var7 = var3.getInputContext();
    java.awt.Graphics var8 = var3.getGraphics();
    java.awt.Dialog.ModalExclusionType var9 = var3.getModalExclusionType();
    var0.setModalExclusionType(var9);
    com.allenstudio.ir.ui.MainMenu var11 = new com.allenstudio.ir.ui.MainMenu((com.allenstudio.ir.core.InspirentoMediator)var0);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var1);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var2);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var4);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var5);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var7);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var8);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var9);

  }

  public void test366() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest1.test366");


    com.allenstudio.ir.ui.NoteListsTabPane var0 = new com.allenstudio.ir.ui.NoteListsTabPane();
    com.allenstudio.ir.ui.Toolbar var1 = new com.allenstudio.ir.ui.Toolbar();
    boolean var2 = var1.isFloatable();
    var1.show();
    java.awt.image.ColorModel var4 = var1.getColorModel();
    boolean var5 = var1.isFocusCycleRoot();
    com.allenstudio.ir.ui.DatePickerPane var6 = new com.allenstudio.ir.ui.DatePickerPane();
    var6.transferFocus();
    com.allenstudio.ir.ui.Toolbar var8 = new com.allenstudio.ir.ui.Toolbar();
    java.awt.image.ColorModel var9 = var8.getColorModel();
    var8.setEnabled(true);
    java.awt.Component var13 = var8.getComponentAtIndex(1);
    boolean var14 = var8.isFloatable();
    var6.setContent((java.awt.Component)var8);
    java.awt.Dimension var16 = var6.size();
    com.allenstudio.ir.ui.Toolbar var17 = new com.allenstudio.ir.ui.Toolbar();
    boolean var18 = var17.isFloatable();
    var17.show();
    boolean var20 = var17.isRequestFocusEnabled();
    java.awt.Dimension var21 = var17.minimumSize();
    var6.setToolBar((javax.swing.JToolBar)var17);
    java.awt.Image var25 = var6.createImage(10, (-1));
    var0.add((java.awt.Component)var1, (java.lang.Object)10);
    var0.setSelectedIndex(1);
    javax.swing.plaf.TabbedPaneUI var29 = var0.getUI();
    var0.setFocusTraversalKeysEnabled(true);
    com.allenstudio.ir.ui.MainFrame var32 = new com.allenstudio.ir.ui.MainFrame();
    java.awt.Component var33 = var32.getGlassPane();
    java.awt.Component var34 = var0.add(var33);
    java.awt.Component var36 = var0.getTabComponentAt(4);
    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      var0.setSelectedIndex(30);
      fail("Expected exception of type java.lang.IndexOutOfBoundsException");
    } catch (java.lang.IndexOutOfBoundsException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var2 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var4);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var5 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var9);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var13);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var14 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var16);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var18 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var20 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var21);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var25);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var29);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var33);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var34);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var36);

  }

  public void test367() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest1.test367");


    com.allenstudio.ir.ui.NoteListsTabPane var0 = new com.allenstudio.ir.ui.NoteListsTabPane();
    com.allenstudio.ir.ui.Toolbar var1 = new com.allenstudio.ir.ui.Toolbar();
    boolean var2 = var1.isFloatable();
    var1.show();
    java.awt.image.ColorModel var4 = var1.getColorModel();
    boolean var5 = var1.isFocusCycleRoot();
    com.allenstudio.ir.ui.DatePickerPane var6 = new com.allenstudio.ir.ui.DatePickerPane();
    var6.transferFocus();
    com.allenstudio.ir.ui.Toolbar var8 = new com.allenstudio.ir.ui.Toolbar();
    java.awt.image.ColorModel var9 = var8.getColorModel();
    var8.setEnabled(true);
    java.awt.Component var13 = var8.getComponentAtIndex(1);
    boolean var14 = var8.isFloatable();
    var6.setContent((java.awt.Component)var8);
    java.awt.Dimension var16 = var6.size();
    com.allenstudio.ir.ui.Toolbar var17 = new com.allenstudio.ir.ui.Toolbar();
    boolean var18 = var17.isFloatable();
    var17.show();
    boolean var20 = var17.isRequestFocusEnabled();
    java.awt.Dimension var21 = var17.minimumSize();
    var6.setToolBar((javax.swing.JToolBar)var17);
    java.awt.Image var25 = var6.createImage(10, (-1));
    var0.add((java.awt.Component)var1, (java.lang.Object)10);
    var0.setSelectedIndex(1);
    javax.swing.plaf.TabbedPaneUI var29 = var0.getUI();
    int var30 = var0.getTabRunCount();
    com.allenstudio.ir.ui.DatePickerPane var31 = new com.allenstudio.ir.ui.DatePickerPane();
    java.awt.Container var32 = var31.getContentPane();
    int var33 = var0.indexOfTabComponent((java.awt.Component)var31);
    javax.swing.plaf.TabbedPaneUI var34 = var0.getUI();
    javax.swing.plaf.TabbedPaneUI var35 = var0.getUI();
    com.allenstudio.ir.ui.StatusBar var36 = new com.allenstudio.ir.ui.StatusBar();
    int var37 = var36.getY();
    var36.setIgnoreRepaint(true);
    boolean var40 = var36.requestFocusInWindow();
    java.awt.Dimension var41 = var36.size();
    boolean var42 = var36.isFocusable();
    var0.remove((java.awt.Component)var36);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var2 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var4);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var5 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var9);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var13);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var14 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var16);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var18 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var20 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var21);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var25);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var29);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var30 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var32);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var33 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var34);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var35);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var37 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var40 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var41);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var42 == true);

  }

  public void test368() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest1.test368");


    com.allenstudio.ir.ui.MainFrame var0 = new com.allenstudio.ir.ui.MainFrame();
    boolean var1 = var0.isShowing();
    int var2 = var0.countComponents();
    var0.setAutoRequestFocus(false);
    javax.swing.JMenuBar var5 = var0.getJMenuBar();
    boolean var6 = var5.isBorderPainted();
    var5.menuSelectionChanged(true);
    com.allenstudio.ir.ui.MainFrame var9 = new com.allenstudio.ir.ui.MainFrame();
    boolean var10 = var9.isShowing();
    int var11 = var9.countComponents();
    var9.setAutoRequestFocus(false);
    javax.swing.JMenuBar var14 = var9.getJMenuBar();
    boolean var15 = var14.isBorderPainted();
    var14.updateUI();
    com.allenstudio.ir.ui.DatePickerPane var17 = new com.allenstudio.ir.ui.DatePickerPane();
    var17.transferFocus();
    java.awt.Dimension var19 = var17.getMinimumSize();
    java.awt.Dimension var20 = var14.getSize(var19);
    javax.swing.plaf.MenuBarUI var21 = var14.getUI();
    var5.setUI(var21);
    boolean var23 = var5.isBorderPainted();
    java.awt.Insets var24 = var5.getInsets();
    var5.removeNotify();
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var1 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var2 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var5);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var6 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var10 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var11 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var14);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var15 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var19);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var20);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var21);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var23 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var24);

  }

  public void test369() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest1.test369");


    com.allenstudio.ir.core.plugins.CommonNote var0 = new com.allenstudio.ir.core.plugins.CommonNote();
    var0.resize(0, 1);
    java.lang.String var4 = var0.getOtherInfo();
    javax.swing.border.Border var5 = var0.getBorder();
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var4);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var5);

  }

  public void test370() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest1.test370");


    com.allenstudio.ir.ui.calendar.MonthlyCalendar var0 = new com.allenstudio.ir.ui.calendar.MonthlyCalendar();
    var0.setWeekStartOnSunday(true);
    int var3 = var0.getMonth();
    com.allenstudio.ir.ui.Toolbar var4 = new com.allenstudio.ir.ui.Toolbar();
    java.awt.image.ColorModel var5 = var4.getColorModel();
    var4.setEnabled(true);
    com.allenstudio.ir.ui.StatusBar var8 = new com.allenstudio.ir.ui.StatusBar();
    javax.swing.JRootPane var9 = var8.getRootPane();
    java.awt.Point var10 = var8.location();
    com.allenstudio.ir.ui.StatusBar var11 = new com.allenstudio.ir.ui.StatusBar();
    javax.swing.JRootPane var12 = var11.getRootPane();
    java.awt.Point var13 = var11.location();
    com.allenstudio.ir.ui.Toolbar var14 = new com.allenstudio.ir.ui.Toolbar();
    boolean var15 = var14.isFloatable();
    java.awt.Component var17 = var14.getComponentAtIndex(10);
    java.lang.Object var18 = var11.getClientProperty((java.lang.Object)10);
    java.awt.Dimension var19 = var11.getMaximumSize();
    var8.setMinimumSize(var19);
    var4.addSeparator(var19);
    var0.setMinimumSize(var19);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var3 == 6);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var5);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var9);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var10);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var12);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var13);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var15 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var17);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var18);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var19);

  }

  public void test371() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest1.test371");


    com.allenstudio.ir.ui.MainFrame var0 = new com.allenstudio.ir.ui.MainFrame();
    java.lang.String var1 = var0.getWarningString();
    java.awt.Rectangle var2 = var0.getMaximizedBounds();
    java.awt.MenuBar var3 = var0.getMenuBar();
    com.allenstudio.ir.ui.NoteListsTabPane var4 = new com.allenstudio.ir.ui.NoteListsTabPane();
    var0.widgetChanged((com.allenstudio.ir.core.InspirentoWidget)var4);
    javax.swing.JLayeredPane var6 = var0.getLayeredPane();
    java.awt.event.WindowListener[] var7 = var0.getWindowListeners();
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var1);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var2);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var3);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var6);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var7);

  }

  public void test372() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest1.test372");


    com.allenstudio.ir.ui.DefaultNoteListModel var0 = new com.allenstudio.ir.ui.DefaultNoteListModel();
    com.allenstudio.ir.ui.StatusBar var1 = new com.allenstudio.ir.ui.StatusBar();
    int var2 = var1.getY();
    javax.swing.JToolTip var3 = var1.createToolTip();
    float var4 = var3.getAlignmentY();
    java.awt.Color var5 = var3.getForeground();
    java.awt.event.MouseMotionListener[] var6 = var3.getMouseMotionListeners();
    com.allenstudio.ir.core.plugins.CommonNote var7 = new com.allenstudio.ir.core.plugins.CommonNote();
    java.lang.String var8 = var7.getFeature();
    com.allenstudio.ir.ui.StatusBar var9 = new com.allenstudio.ir.ui.StatusBar();
    var9.enable();
    boolean var11 = var9.isFocusOwner();
    var9.firePropertyChange("hi!", 10L, 0L);
    var9.layout();
    var9.removeAll();
    com.allenstudio.ir.ui.StatusBar var18 = new com.allenstudio.ir.ui.StatusBar();
    javax.swing.JRootPane var19 = var18.getRootPane();
    java.awt.Point var20 = var18.location();
    java.awt.Component var21 = var9.getComponentAt(var20);
    java.awt.Point var22 = var7.getLocation(var20);
    var7.setOtherInfo("");
    var7.setFeature("Title");
    var7.removeNotify();
    com.allenstudio.ir.util.XmlElement var28 = new com.allenstudio.ir.util.XmlElement();
    com.allenstudio.ir.util.XmlElement var30 = var28.addSubElement("hi!");
    com.allenstudio.ir.util.XmlElement var31 = new com.allenstudio.ir.util.XmlElement();
    com.allenstudio.ir.util.XmlElement var33 = var31.addSubElement("hi!");
    var33.notifyObservers((java.lang.Object)(byte)1);
    var28.append(var33);
    com.allenstudio.ir.util.XmlElement var37 = new com.allenstudio.ir.util.XmlElement();
    com.allenstudio.ir.util.XmlElement var39 = var37.addSubElement("hi!");
    java.lang.String var41 = var37.getAttribute("C:\\boot.ini");
    com.allenstudio.ir.util.XmlElement var42 = var33.addSubElement(var37);
    java.lang.String var45 = var33.getAttribute("Title", "ToolBarUI");
    var3.putClientProperty((java.lang.Object)var7, (java.lang.Object)"Title");
    var7.doLayout();
    java.lang.String var48 = var7.getDescription();
    int var50 = var0.indexOf((com.allenstudio.ir.core.plugins.AbstractNote)var7, 556);
    int var51 = var0.capacity();
    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      var0.removeElementAt(556);
      fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException");
    } catch (java.lang.ArrayIndexOutOfBoundsException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var2 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var3);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var4 == 0.5f);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var5);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var6);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var8 + "' != '" + "C:\\boot.ini"+ "'", var8.equals("C:\\boot.ini"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var11 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var19);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var20);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var21);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var22);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var30);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var33);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var39);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var41);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var42);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var45 + "' != '" + "ToolBarUI"+ "'", var45.equals("ToolBarUI"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var48 + "' != '" + "This is a testing description. \u03E3\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\u073F\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD"+ "'", var48.equals("This is a testing description. \u03E3\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\u073F\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var50 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var51 == 10);

  }

  public void test373() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest1.test373");


    com.allenstudio.ir.ui.Toolbar var0 = new com.allenstudio.ir.ui.Toolbar();
    boolean var1 = var0.isFloatable();
    com.allenstudio.ir.ui.StatusBar var2 = new com.allenstudio.ir.ui.StatusBar();
    int var3 = var2.getY();
    var2.disable();
    boolean var7 = var2.inside((-1), 100);
    com.allenstudio.ir.ui.Toolbar var8 = new com.allenstudio.ir.ui.Toolbar();
    java.awt.image.ColorModel var9 = var8.getColorModel();
    java.awt.im.InputContext var10 = var8.getInputContext();
    java.awt.Component var12 = var8.getComponentAtIndex(0);
    var0.putClientProperty((java.lang.Object)(-1), (java.lang.Object)var12);
    var0.reshape(4, 5, 6, 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var1 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var3 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var7 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var9);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var10);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var12);

  }

  public void test374() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest1.test374");


    com.allenstudio.ir.util.XmlElement var2 = new com.allenstudio.ir.util.XmlElement();
    com.allenstudio.ir.util.XmlElement var4 = var2.addSubElement("hi!");
    com.allenstudio.ir.util.XmlElement var7 = var4.addSubElement("", "hi!");
    java.util.Hashtable var8 = var7.getAttributes();
    com.allenstudio.ir.ui.MainFrame var9 = new com.allenstudio.ir.ui.MainFrame();
    java.lang.String var10 = var9.getWarningString();
    java.awt.Rectangle var11 = var9.getMaximizedBounds();
    java.awt.MenuBar var12 = var9.getMenuBar();
    com.allenstudio.ir.ui.NoteListsTabPane var13 = new com.allenstudio.ir.ui.NoteListsTabPane();
    var9.widgetChanged((com.allenstudio.ir.core.InspirentoWidget)var13);
    var9.dispose();
    java.lang.Object var16 = var8.get((java.lang.Object)var9);
    java.util.Set var17 = var8.entrySet();
    com.allenstudio.ir.util.XmlElement var18 = new com.allenstudio.ir.util.XmlElement("Title", var8);
    java.util.Enumeration var19 = var8.elements();
    com.allenstudio.ir.util.XmlElement var20 = new com.allenstudio.ir.util.XmlElement("com.allenstudio.ir.ui.StatusBar[,0,0,0x0,invalid,layout=java.awt.BorderLayout,alignmentX=0.0,alignmentY=0.0,border=,flags=0,maximumSize=,minimumSize=,preferredSize=]", var8);
    java.util.Set var21 = var8.keySet();
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var4);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var7);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var8);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var10);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var11);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var12);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var16);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var17);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var19);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var21);

  }

  public void test375() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest1.test375");


    com.allenstudio.ir.util.XmlElement var0 = new com.allenstudio.ir.util.XmlElement();
    java.lang.String var2 = var0.getAttribute("TabbedPaneUI");
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var2);

  }

  public void test376() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest1.test376");


    com.allenstudio.ir.ui.StatusBar var0 = new com.allenstudio.ir.ui.StatusBar();
    var0.enable();
    boolean var2 = var0.isFocusOwner();
    var0.firePropertyChange("hi!", 10L, 0L);
    var0.layout();
    int var8 = var0.getY();
    boolean var9 = var0.isDisplayable();
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var2 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var8 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var9 == false);

  }

  public void test377() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest1.test377");


    com.allenstudio.ir.ui.StatusBar var0 = new com.allenstudio.ir.ui.StatusBar();
    boolean var1 = var0.isBackgroundSet();
    boolean var4 = var0.contains(10, 100);
    var0.revalidate();
    javax.swing.JToolTip var6 = var0.createToolTip();
    com.allenstudio.ir.ui.StatusBar var7 = new com.allenstudio.ir.ui.StatusBar();
    javax.swing.JRootPane var8 = var7.getRootPane();
    java.awt.Point var9 = var7.location();
    com.allenstudio.ir.ui.StatusBar var10 = new com.allenstudio.ir.ui.StatusBar();
    javax.swing.JRootPane var11 = var10.getRootPane();
    java.awt.Point var12 = var10.location();
    com.allenstudio.ir.ui.Toolbar var13 = new com.allenstudio.ir.ui.Toolbar();
    boolean var14 = var13.isFloatable();
    java.awt.Component var16 = var13.getComponentAtIndex(10);
    java.lang.Object var17 = var10.getClientProperty((java.lang.Object)10);
    java.awt.Dimension var18 = var10.getMaximumSize();
    var7.setMinimumSize(var18);
    java.awt.Rectangle var20 = var7.getBounds();
    var0.scrollRectToVisible(var20);
    var0.setAlignmentX((-1.0f));
    java.awt.Insets var24 = var0.getInsets();
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var1 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var4 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var6);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var8);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var9);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var11);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var12);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var14 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var16);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var17);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var18);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var20);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var24);

  }

  public void test378() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest1.test378");


    com.allenstudio.ir.ui.StatusBar var0 = new com.allenstudio.ir.ui.StatusBar();
    var0.enable();
    boolean var2 = var0.isFocusOwner();
    java.lang.String var3 = var0.getToolTipText();
    var0.layout();
    boolean var5 = var0.isFocusCycleRoot();
    var0.requestFocus();
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var2 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var3);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var5 == false);

  }

  public void test379() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest1.test379");


    com.allenstudio.ir.ui.Toolbar var0 = new com.allenstudio.ir.ui.Toolbar();
    java.awt.image.ColorModel var1 = var0.getColorModel();
    var0.setEnabled(true);
    java.awt.Component var5 = var0.getComponentAtIndex(1);
    var0.setVisible(true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var1);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var5);

  }

  public void test380() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest1.test380");


    com.allenstudio.ir.ui.NoteListsTabPane var0 = new com.allenstudio.ir.ui.NoteListsTabPane();
    com.allenstudio.ir.ui.Toolbar var1 = new com.allenstudio.ir.ui.Toolbar();
    boolean var2 = var1.isFloatable();
    var1.show();
    java.awt.image.ColorModel var4 = var1.getColorModel();
    boolean var5 = var1.isFocusCycleRoot();
    com.allenstudio.ir.ui.DatePickerPane var6 = new com.allenstudio.ir.ui.DatePickerPane();
    var6.transferFocus();
    com.allenstudio.ir.ui.Toolbar var8 = new com.allenstudio.ir.ui.Toolbar();
    java.awt.image.ColorModel var9 = var8.getColorModel();
    var8.setEnabled(true);
    java.awt.Component var13 = var8.getComponentAtIndex(1);
    boolean var14 = var8.isFloatable();
    var6.setContent((java.awt.Component)var8);
    java.awt.Dimension var16 = var6.size();
    com.allenstudio.ir.ui.Toolbar var17 = new com.allenstudio.ir.ui.Toolbar();
    boolean var18 = var17.isFloatable();
    var17.show();
    boolean var20 = var17.isRequestFocusEnabled();
    java.awt.Dimension var21 = var17.minimumSize();
    var6.setToolBar((javax.swing.JToolBar)var17);
    java.awt.Image var25 = var6.createImage(10, (-1));
    var0.add((java.awt.Component)var1, (java.lang.Object)10);
    com.allenstudio.ir.ui.Toolbar var27 = new com.allenstudio.ir.ui.Toolbar();
    boolean var28 = var27.isFloatable();
    java.awt.Component var30 = var27.getComponentAtIndex(10);
    boolean var31 = var27.isLightweight();
    java.awt.Component var32 = var0.add((java.awt.Component)var27);
    com.allenstudio.ir.ui.NoteListsTabPane var33 = new com.allenstudio.ir.ui.NoteListsTabPane();
    com.allenstudio.ir.ui.Toolbar var34 = new com.allenstudio.ir.ui.Toolbar();
    boolean var35 = var34.isFloatable();
    var34.show();
    java.awt.image.ColorModel var37 = var34.getColorModel();
    boolean var38 = var34.isFocusCycleRoot();
    com.allenstudio.ir.ui.DatePickerPane var39 = new com.allenstudio.ir.ui.DatePickerPane();
    var39.transferFocus();
    com.allenstudio.ir.ui.Toolbar var41 = new com.allenstudio.ir.ui.Toolbar();
    java.awt.image.ColorModel var42 = var41.getColorModel();
    var41.setEnabled(true);
    java.awt.Component var46 = var41.getComponentAtIndex(1);
    boolean var47 = var41.isFloatable();
    var39.setContent((java.awt.Component)var41);
    java.awt.Dimension var49 = var39.size();
    com.allenstudio.ir.ui.Toolbar var50 = new com.allenstudio.ir.ui.Toolbar();
    boolean var51 = var50.isFloatable();
    var50.show();
    boolean var53 = var50.isRequestFocusEnabled();
    java.awt.Dimension var54 = var50.minimumSize();
    var39.setToolBar((javax.swing.JToolBar)var50);
    java.awt.Image var58 = var39.createImage(10, (-1));
    var33.add((java.awt.Component)var34, (java.lang.Object)10);
    var33.setSelectedIndex(1);
    javax.swing.plaf.TabbedPaneUI var62 = var33.getUI();
    javax.swing.SingleSelectionModel var63 = var33.getModel();
    var0.setModel(var63);
    javax.swing.event.ChangeListener[] var65 = var0.getChangeListeners();
    java.awt.Component var67 = var0.getTabComponentAt(4);
    java.awt.Dimension var68 = var0.minimumSize();
    int var69 = var0.getHeight();
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var2 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var4);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var5 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var9);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var13);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var14 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var16);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var18 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var20 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var21);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var25);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var28 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var30);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var31 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var32);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var35 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var37);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var38 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var42);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var46);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var47 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var49);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var51 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var53 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var54);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var58);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var62);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var63);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var65);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var67);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var68);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var69 == 0);

  }

  public void test381() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest1.test381");


    com.allenstudio.ir.ui.DefaultNoteListModel var0 = new com.allenstudio.ir.ui.DefaultNoteListModel();
    com.allenstudio.ir.ui.StatusBar var1 = new com.allenstudio.ir.ui.StatusBar();
    int var2 = var1.getY();
    javax.swing.JToolTip var3 = var1.createToolTip();
    float var4 = var3.getAlignmentY();
    java.awt.Color var5 = var3.getForeground();
    java.awt.event.MouseMotionListener[] var6 = var3.getMouseMotionListeners();
    com.allenstudio.ir.core.plugins.CommonNote var7 = new com.allenstudio.ir.core.plugins.CommonNote();
    java.lang.String var8 = var7.getFeature();
    com.allenstudio.ir.ui.StatusBar var9 = new com.allenstudio.ir.ui.StatusBar();
    var9.enable();
    boolean var11 = var9.isFocusOwner();
    var9.firePropertyChange("hi!", 10L, 0L);
    var9.layout();
    var9.removeAll();
    com.allenstudio.ir.ui.StatusBar var18 = new com.allenstudio.ir.ui.StatusBar();
    javax.swing.JRootPane var19 = var18.getRootPane();
    java.awt.Point var20 = var18.location();
    java.awt.Component var21 = var9.getComponentAt(var20);
    java.awt.Point var22 = var7.getLocation(var20);
    var7.setOtherInfo("");
    var7.setFeature("Title");
    var7.removeNotify();
    com.allenstudio.ir.util.XmlElement var28 = new com.allenstudio.ir.util.XmlElement();
    com.allenstudio.ir.util.XmlElement var30 = var28.addSubElement("hi!");
    com.allenstudio.ir.util.XmlElement var31 = new com.allenstudio.ir.util.XmlElement();
    com.allenstudio.ir.util.XmlElement var33 = var31.addSubElement("hi!");
    var33.notifyObservers((java.lang.Object)(byte)1);
    var28.append(var33);
    com.allenstudio.ir.util.XmlElement var37 = new com.allenstudio.ir.util.XmlElement();
    com.allenstudio.ir.util.XmlElement var39 = var37.addSubElement("hi!");
    java.lang.String var41 = var37.getAttribute("C:\\boot.ini");
    com.allenstudio.ir.util.XmlElement var42 = var33.addSubElement(var37);
    java.lang.String var45 = var33.getAttribute("Title", "ToolBarUI");
    var3.putClientProperty((java.lang.Object)var7, (java.lang.Object)"Title");
    var7.doLayout();
    java.lang.String var48 = var7.getDescription();
    int var50 = var0.indexOf((com.allenstudio.ir.core.plugins.AbstractNote)var7, 556);
    com.allenstudio.ir.core.plugins.CommonNote var51 = new com.allenstudio.ir.core.plugins.CommonNote();
    var51.resize(0, 1);
    java.lang.String var55 = var51.getOtherInfo();
    javax.swing.event.AncestorListener[] var56 = var51.getAncestorListeners();
    boolean var57 = var0.removeElement((com.allenstudio.ir.core.plugins.AbstractNote)var51);
    com.allenstudio.ir.core.plugins.AbstractNote[] var58 = var0.toArray();
    com.allenstudio.ir.util.XmlElement var59 = new com.allenstudio.ir.util.XmlElement();
    com.allenstudio.ir.util.XmlElement var61 = var59.addSubElement("hi!");
    com.allenstudio.ir.util.XmlElement var64 = var61.addSubElement("", "hi!");
    java.util.Hashtable var65 = var64.getAttributes();
    com.allenstudio.ir.core.plugins.CommonNote var66 = new com.allenstudio.ir.core.plugins.CommonNote();
    var66.resize(0, 1);
    com.allenstudio.ir.ui.NoteListCell var70 = new com.allenstudio.ir.ui.NoteListCell((com.allenstudio.ir.core.plugins.AbstractNote)var66);
    java.lang.String var71 = var66.getFeature();
    boolean var72 = var64.equals((java.lang.Object)var66);
    int var73 = var0.indexOf((com.allenstudio.ir.core.plugins.AbstractNote)var66);
    com.allenstudio.ir.core.plugins.CommonNote var74 = new com.allenstudio.ir.core.plugins.CommonNote();
    java.awt.Component var75 = var74.getNextFocusableComponent();
    java.lang.String var76 = var74.getDescription();
    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      var0.insertElementAt((com.allenstudio.ir.core.plugins.AbstractNote)var74, (-1));
      fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException");
    } catch (java.lang.ArrayIndexOutOfBoundsException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var2 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var3);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var4 == 0.5f);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var5);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var6);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var8 + "' != '" + "C:\\boot.ini"+ "'", var8.equals("C:\\boot.ini"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var11 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var19);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var20);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var21);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var22);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var30);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var33);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var39);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var41);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var42);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var45 + "' != '" + "ToolBarUI"+ "'", var45.equals("ToolBarUI"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var48 + "' != '" + "This is a testing description. \u03E3\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\u073F\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD"+ "'", var48.equals("This is a testing description. \u03E3\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\u073F\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var50 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var55);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var56);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var57 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var58);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var61);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var64);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var65);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var71 + "' != '" + "C:\\boot.ini"+ "'", var71.equals("C:\\boot.ini"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var72 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var73 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var75);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var76 + "' != '" + "This is a testing description. \u03E3\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\u073F\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD"+ "'", var76.equals("This is a testing description. \u03E3\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\u073F\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD"));

  }

  public void test382() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest1.test382");


    com.allenstudio.ir.ui.MainFrame var0 = new com.allenstudio.ir.ui.MainFrame();
    java.lang.String var1 = var0.getWarningString();
    java.awt.Rectangle var2 = var0.getMaximizedBounds();
    java.awt.MenuBar var3 = var0.getMenuBar();
    var0.nextFocus();
    com.allenstudio.ir.ui.Toolbar var5 = new com.allenstudio.ir.ui.Toolbar();
    java.awt.image.ColorModel var6 = var5.getColorModel();
    var5.setEnabled(true);
    java.awt.Component var10 = var5.getComponentAtIndex(1);
    boolean var11 = var5.requestFocusInWindow();
    java.awt.FocusTraversalPolicy var12 = var5.getFocusTraversalPolicy();
    java.beans.PropertyChangeListener[] var14 = var5.getPropertyChangeListeners("Date Picker");
    boolean var15 = var5.isFontSet();
    com.allenstudio.ir.ui.calendar.MonthlyCalendar var16 = new com.allenstudio.ir.ui.calendar.MonthlyCalendar();
    var5.removeMouseListener((java.awt.event.MouseListener)var16);
    boolean var18 = var16.getWeekStartOnSunday();
    int var19 = var16.getSelectedDay();
    java.awt.Dimension var20 = var16.getCellDimension();
    java.util.Calendar var21 = var16.getSelectedDate();
    com.allenstudio.ir.ui.Toolbar var22 = new com.allenstudio.ir.ui.Toolbar();
    java.awt.image.ColorModel var23 = var22.getColorModel();
    var22.setEnabled(true);
    java.awt.Component var27 = var22.getComponentAtIndex(1);
    boolean var28 = var22.requestFocusInWindow();
    java.awt.FocusTraversalPolicy var29 = var22.getFocusTraversalPolicy();
    java.beans.PropertyChangeListener[] var31 = var22.getPropertyChangeListeners("Date Picker");
    boolean var32 = var22.isFontSet();
    com.allenstudio.ir.ui.calendar.MonthlyCalendar var33 = new com.allenstudio.ir.ui.calendar.MonthlyCalendar();
    var22.removeMouseListener((java.awt.event.MouseListener)var33);
    boolean var35 = var33.getWeekStartOnSunday();
    int var36 = var33.getSelectedDay();
    java.awt.Dimension var37 = var33.getCellDimension();
    java.util.Calendar var38 = var33.getSelectedDate();
    com.allenstudio.ir.event.DateChooserEvent var39 = new com.allenstudio.ir.event.DateChooserEvent((java.lang.Object)var0, var21, var38);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var1);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var2);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var3);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var6);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var10);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var11 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var12);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var14);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var15 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var18 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var19 == 31);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var20);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var21);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var23);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var27);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var28 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var29);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var31);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var32 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var35 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var36 == 31);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var37);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var38);

  }

  public void test383() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest1.test383");


    com.allenstudio.ir.ui.MainFrame var0 = new com.allenstudio.ir.ui.MainFrame();
    java.awt.Container var1 = var0.getContentPane();
    javax.swing.JRootPane var2 = var0.getRootPane();
    java.awt.Dimension var3 = var2.getMinimumSize();
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var1);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var2);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var3);

  }

  public void test384() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest1.test384");


    com.allenstudio.ir.ui.MainFrame var0 = new com.allenstudio.ir.ui.MainFrame();
    java.lang.String var1 = var0.getWarningString();
    java.util.Locale var2 = var0.getLocale();
    com.allenstudio.ir.ui.calendar.DateChooser var3 = new com.allenstudio.ir.ui.calendar.DateChooser();
    var3.setSize(0, (-1));
    javax.swing.event.AncestorListener[] var7 = var3.getAncestorListeners();
    var0.setLocationRelativeTo((java.awt.Component)var3);
    com.allenstudio.ir.ui.DatePickerPane var9 = new com.allenstudio.ir.ui.DatePickerPane();
    var9.transferFocus();
    com.allenstudio.ir.ui.Toolbar var11 = new com.allenstudio.ir.ui.Toolbar();
    java.awt.image.ColorModel var12 = var11.getColorModel();
    var11.setEnabled(true);
    java.awt.Component var16 = var11.getComponentAtIndex(1);
    boolean var17 = var11.isFloatable();
    var9.setContent((java.awt.Component)var11);
    java.awt.Dimension var19 = var9.size();
    var0.setSize(var19);
    var0.setBounds(556, (-1), 10, 3);
    com.allenstudio.ir.ui.StatusBar var26 = new com.allenstudio.ir.ui.StatusBar();
    int var27 = var26.getY();
    boolean var28 = var26.isLightweight();
    java.awt.Dimension var29 = var26.getMaximumSize();
    com.allenstudio.ir.ui.NoteList var30 = new com.allenstudio.ir.ui.NoteList();
    com.allenstudio.ir.ui.MainFrame var31 = new com.allenstudio.ir.ui.MainFrame();
    java.lang.String var32 = var31.getWarningString();
    java.awt.Rectangle var33 = var31.getMaximizedBounds();
    java.awt.MenuBar var34 = var31.getMenuBar();
    com.allenstudio.ir.core.plugins.CommonNote var35 = new com.allenstudio.ir.core.plugins.CommonNote();
    var35.resize(0, 1);
    com.allenstudio.ir.ui.NoteListCell var39 = new com.allenstudio.ir.ui.NoteListCell((com.allenstudio.ir.core.plugins.AbstractNote)var35);
    com.allenstudio.ir.ui.StatusBar var40 = new com.allenstudio.ir.ui.StatusBar();
    boolean var41 = var40.isBackgroundSet();
    boolean var44 = var40.contains(10, 100);
    var40.revalidate();
    javax.swing.JToolTip var46 = var40.createToolTip();
    com.allenstudio.ir.ui.StatusBar var47 = new com.allenstudio.ir.ui.StatusBar();
    javax.swing.JRootPane var48 = var47.getRootPane();
    java.awt.Point var49 = var47.location();
    com.allenstudio.ir.ui.StatusBar var50 = new com.allenstudio.ir.ui.StatusBar();
    javax.swing.JRootPane var51 = var50.getRootPane();
    java.awt.Point var52 = var50.location();
    com.allenstudio.ir.ui.Toolbar var53 = new com.allenstudio.ir.ui.Toolbar();
    boolean var54 = var53.isFloatable();
    java.awt.Component var56 = var53.getComponentAtIndex(10);
    java.lang.Object var57 = var50.getClientProperty((java.lang.Object)10);
    java.awt.Dimension var58 = var50.getMaximumSize();
    var47.setMinimumSize(var58);
    java.awt.Rectangle var60 = var47.getBounds();
    var40.scrollRectToVisible(var60);
    var35.repaint(var60);
    var31.setMaximizedBounds(var60);
    int var66 = var30.getScrollableBlockIncrement(var60, 1, 4);
    var26.setBounds(var60);
    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      var0.setShape((java.awt.Shape)var60);
      fail("Expected exception of type java.awt.IllegalComponentStateException");
    } catch (java.awt.IllegalComponentStateException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var1);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var2);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var7);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var12);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var16);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var17 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var19);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var27 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var28 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var29);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var32);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var33);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var34);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var41 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var44 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var46);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var48);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var49);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var51);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var52);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var54 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var56);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var57);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var58);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var60);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var66 == 0);

  }

  public void test385() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest1.test385");


    com.allenstudio.ir.util.XmlElement var1 = new com.allenstudio.ir.util.XmlElement("");
    com.allenstudio.ir.ui.Toolbar var2 = new com.allenstudio.ir.ui.Toolbar();
    java.awt.image.ColorModel var3 = var2.getColorModel();
    java.awt.im.InputContext var4 = var2.getInputContext();
    java.awt.Component var6 = var2.getComponent(0);
    boolean var9 = var2.contains((-1), 1);
    var1.notifyObservers((java.lang.Object)var2);
    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      com.allenstudio.ir.util.XmlElement var12 = var1.removeElement(32);
      fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException");
    } catch (java.lang.ArrayIndexOutOfBoundsException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var3);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var4);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var6);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var9 == false);

  }

  public void test386() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest1.test386");


    com.allenstudio.ir.ui.Toolbar var0 = new com.allenstudio.ir.ui.Toolbar();
    java.awt.image.ColorModel var1 = var0.getColorModel();
    var0.setEnabled(true);
    java.awt.Component var5 = var0.getComponentAtIndex(1);
    boolean var6 = var0.isFloatable();
    java.lang.String var7 = var0.toString();
    com.allenstudio.ir.ui.Toolbar var8 = new com.allenstudio.ir.ui.Toolbar();
    java.awt.event.MouseWheelListener[] var9 = var8.getMouseWheelListeners();
    java.awt.event.MouseListener[] var10 = var8.getMouseListeners();
    var8.firePropertyChange("", false, true);
    var0.add((java.awt.Component)var8, (java.lang.Object)10.0f);
    java.awt.event.HierarchyBoundsListener[] var17 = var8.getHierarchyBoundsListeners();
    java.awt.event.FocusListener[] var18 = var8.getFocusListeners();
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var1);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var5);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var6 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var9);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var10);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var17);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var18);

  }

  public void test387() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest1.test387");


    com.allenstudio.ir.ui.MainFrame var0 = new com.allenstudio.ir.ui.MainFrame();
    java.lang.String var1 = var0.getWarningString();
    java.lang.String var2 = var0.getWarningString();
    boolean var3 = var0.isAutoRequestFocus();
    boolean var4 = var0.isResizable();
    var0.pack();
    boolean var6 = var0.isFocusOwner();
    com.allenstudio.ir.ui.MainMenu var7 = new com.allenstudio.ir.ui.MainMenu((com.allenstudio.ir.core.InspirentoMediator)var0);
    var7.removeNotify();
    var7.changed();
    var7.changed();
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var1);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var2);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var3 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var4 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var6 == false);

  }

  public void test388() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest1.test388");


    com.allenstudio.ir.ui.MainFrame var0 = new com.allenstudio.ir.ui.MainFrame();
    java.lang.String var1 = var0.getWarningString();
    java.lang.String var2 = var0.getWarningString();
    java.awt.Container var3 = var0.getFocusCycleRootAncestor();
    com.allenstudio.ir.ui.StatusBar var4 = new com.allenstudio.ir.ui.StatusBar();
    boolean var5 = var4.isBackgroundSet();
    boolean var8 = var4.contains(10, 100);
    var4.revalidate();
    javax.swing.JToolTip var10 = var4.createToolTip();
    com.allenstudio.ir.ui.StatusBar var11 = new com.allenstudio.ir.ui.StatusBar();
    javax.swing.JRootPane var12 = var11.getRootPane();
    java.awt.Point var13 = var11.location();
    com.allenstudio.ir.ui.StatusBar var14 = new com.allenstudio.ir.ui.StatusBar();
    javax.swing.JRootPane var15 = var14.getRootPane();
    java.awt.Point var16 = var14.location();
    com.allenstudio.ir.ui.Toolbar var17 = new com.allenstudio.ir.ui.Toolbar();
    boolean var18 = var17.isFloatable();
    java.awt.Component var20 = var17.getComponentAtIndex(10);
    java.lang.Object var21 = var14.getClientProperty((java.lang.Object)10);
    java.awt.Dimension var22 = var14.getMaximumSize();
    var11.setMinimumSize(var22);
    java.awt.Rectangle var24 = var11.getBounds();
    var4.scrollRectToVisible(var24);
    var0.setMaximizedBounds(var24);
    float var27 = var0.getAlignmentX();
    var0.revalidate();
    int var29 = var0.getState();
    var0.setCursor(4);
    com.allenstudio.ir.ui.MainFrame var32 = new com.allenstudio.ir.ui.MainFrame();
    java.lang.String var33 = var32.getWarningString();
    boolean var34 = var32.isAlwaysOnTopSupported();
    com.allenstudio.ir.ui.StatusBar var35 = new com.allenstudio.ir.ui.StatusBar();
    javax.swing.JRootPane var36 = var35.getRootPane();
    java.awt.Point var37 = var35.location();
    com.allenstudio.ir.ui.StatusBar var38 = new com.allenstudio.ir.ui.StatusBar();
    javax.swing.JRootPane var39 = var38.getRootPane();
    java.awt.Point var40 = var38.location();
    com.allenstudio.ir.ui.Toolbar var41 = new com.allenstudio.ir.ui.Toolbar();
    boolean var42 = var41.isFloatable();
    java.awt.Component var44 = var41.getComponentAtIndex(10);
    java.lang.Object var45 = var38.getClientProperty((java.lang.Object)10);
    java.awt.Dimension var46 = var38.getMaximumSize();
    var35.setMinimumSize(var46);
    java.awt.Rectangle var48 = var35.getBounds();
    java.awt.Rectangle var49 = var32.getBounds(var48);
    var0.setBounds(var48);
    com.allenstudio.ir.ui.Toolbar var51 = new com.allenstudio.ir.ui.Toolbar();
    java.awt.image.ColorModel var52 = var51.getColorModel();
    java.awt.im.InputContext var53 = var51.getInputContext();
    java.awt.Component var55 = var51.getComponentAtIndex(0);
    boolean var56 = var51.isManagingFocus();
    var0.setGlassPane((java.awt.Component)var51);
    int var58 = var0.getExtendedState();
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var1);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var2);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var3);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var5 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var8 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var10);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var12);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var13);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var15);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var16);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var18 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var20);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var21);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var22);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var24);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var27 == 0.5f);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var29 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var33);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var34 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var36);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var37);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var39);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var40);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var42 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var44);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var45);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var46);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var48);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var49);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var52);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var53);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var55);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var56 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var58 == 0);

  }

  public void test389() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest1.test389");


    com.allenstudio.ir.ui.StatusBar var0 = new com.allenstudio.ir.ui.StatusBar();
    int var1 = var0.getY();
    boolean var2 = var0.isLightweight();
    java.awt.Dimension var3 = var0.getMaximumSize();
    java.awt.event.KeyListener[] var4 = var0.getKeyListeners();
    boolean var5 = var0.getInheritsPopupMenu();
    var0.firePropertyChange("", 100, (-1));
    var0.requestFocus();
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var1 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var2 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var3);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var4);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var5 == false);

  }

  public void test390() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest1.test390");


    com.allenstudio.ir.ui.DatePickerPane var0 = new com.allenstudio.ir.ui.DatePickerPane();
    javax.swing.KeyStroke[] var1 = var0.getRegisteredKeyStrokes();
    com.allenstudio.ir.ui.calendar.DateChooser var2 = var0.getDateChooser();
    com.allenstudio.ir.event.DateChooserListener var3 = var2.getDateChooserListener();
    boolean var5 = var2.requestFocus(false);
    java.util.Calendar var6 = var2.getCurrent();
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var1);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var2);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var3);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var5 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var6);

  }

  public void test391() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest1.test391");


    com.allenstudio.ir.ui.MainFrame var0 = new com.allenstudio.ir.ui.MainFrame();
    boolean var1 = var0.isShowing();
    int var2 = var0.countComponents();
    var0.setAutoRequestFocus(false);
    javax.swing.JMenuBar var5 = var0.getJMenuBar();
    boolean var6 = var5.isBorderPainted();
    var5.menuSelectionChanged(true);
    int var9 = var5.getMenuCount();
    var5.addNotify();
    com.allenstudio.ir.event.NoteListDataEvent var12 = new com.allenstudio.ir.event.NoteListDataEvent((java.lang.Object)var5, 31);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var1 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var2 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var5);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var6 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var9 == 4);

  }

  public void test392() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest1.test392");


    com.allenstudio.ir.ui.DatePickerPane var0 = new com.allenstudio.ir.ui.DatePickerPane();
    var0.transferFocus();
    com.allenstudio.ir.ui.Toolbar var2 = new com.allenstudio.ir.ui.Toolbar();
    java.awt.image.ColorModel var3 = var2.getColorModel();
    var2.setEnabled(true);
    java.awt.Component var7 = var2.getComponentAtIndex(1);
    boolean var8 = var2.isFloatable();
    var0.setContent((java.awt.Component)var2);
    var0.setSelected(true);
    var0.resize(0, 1);
    java.awt.Rectangle var15 = var0.getBounds();
    java.awt.Point var16 = var0.location();
    com.allenstudio.ir.ui.Toolbar var17 = new com.allenstudio.ir.ui.Toolbar();
    java.awt.image.ColorModel var18 = var17.getColorModel();
    java.awt.im.InputContext var19 = var17.getInputContext();
    java.awt.Component var21 = var17.getComponent(0);
    java.awt.Font var22 = var17.getFont();
    java.awt.FontMetrics var23 = var0.getFontMetrics(var22);
    var0.firePropertyChange("PanelUI", (byte)10, (byte)100);
    java.awt.Component var28 = var0.getContent();
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var3);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var7);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var8 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var15);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var16);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var18);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var19);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var21);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var22);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var23);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var28);

  }

  public void test393() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest1.test393");


    com.allenstudio.ir.ui.DefaultNoteListModel var0 = new com.allenstudio.ir.ui.DefaultNoteListModel();
    com.allenstudio.ir.ui.StatusBar var1 = new com.allenstudio.ir.ui.StatusBar();
    int var2 = var1.getY();
    javax.swing.JToolTip var3 = var1.createToolTip();
    float var4 = var3.getAlignmentY();
    java.awt.Color var5 = var3.getForeground();
    java.awt.event.MouseMotionListener[] var6 = var3.getMouseMotionListeners();
    com.allenstudio.ir.core.plugins.CommonNote var7 = new com.allenstudio.ir.core.plugins.CommonNote();
    java.lang.String var8 = var7.getFeature();
    com.allenstudio.ir.ui.StatusBar var9 = new com.allenstudio.ir.ui.StatusBar();
    var9.enable();
    boolean var11 = var9.isFocusOwner();
    var9.firePropertyChange("hi!", 10L, 0L);
    var9.layout();
    var9.removeAll();
    com.allenstudio.ir.ui.StatusBar var18 = new com.allenstudio.ir.ui.StatusBar();
    javax.swing.JRootPane var19 = var18.getRootPane();
    java.awt.Point var20 = var18.location();
    java.awt.Component var21 = var9.getComponentAt(var20);
    java.awt.Point var22 = var7.getLocation(var20);
    var7.setOtherInfo("");
    var7.setFeature("Title");
    var7.removeNotify();
    com.allenstudio.ir.util.XmlElement var28 = new com.allenstudio.ir.util.XmlElement();
    com.allenstudio.ir.util.XmlElement var30 = var28.addSubElement("hi!");
    com.allenstudio.ir.util.XmlElement var31 = new com.allenstudio.ir.util.XmlElement();
    com.allenstudio.ir.util.XmlElement var33 = var31.addSubElement("hi!");
    var33.notifyObservers((java.lang.Object)(byte)1);
    var28.append(var33);
    com.allenstudio.ir.util.XmlElement var37 = new com.allenstudio.ir.util.XmlElement();
    com.allenstudio.ir.util.XmlElement var39 = var37.addSubElement("hi!");
    java.lang.String var41 = var37.getAttribute("C:\\boot.ini");
    com.allenstudio.ir.util.XmlElement var42 = var33.addSubElement(var37);
    java.lang.String var45 = var33.getAttribute("Title", "ToolBarUI");
    var3.putClientProperty((java.lang.Object)var7, (java.lang.Object)"Title");
    var7.doLayout();
    java.lang.String var48 = var7.getDescription();
    int var50 = var0.indexOf((com.allenstudio.ir.core.plugins.AbstractNote)var7, 556);
    com.allenstudio.ir.core.plugins.CommonNote var51 = new com.allenstudio.ir.core.plugins.CommonNote();
    var51.resize(0, 1);
    java.lang.String var55 = var51.getOtherInfo();
    javax.swing.event.AncestorListener[] var56 = var51.getAncestorListeners();
    boolean var57 = var0.removeElement((com.allenstudio.ir.core.plugins.AbstractNote)var51);
    com.allenstudio.ir.core.plugins.AbstractNote[] var58 = var0.toArray();
    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      com.allenstudio.ir.core.plugins.AbstractNote var59 = var0.firstElement();
      fail("Expected exception of type java.util.NoSuchElementException");
    } catch (java.util.NoSuchElementException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var2 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var3);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var4 == 0.5f);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var5);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var6);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var8 + "' != '" + "C:\\boot.ini"+ "'", var8.equals("C:\\boot.ini"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var11 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var19);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var20);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var21);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var22);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var30);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var33);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var39);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var41);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var42);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var45 + "' != '" + "ToolBarUI"+ "'", var45.equals("ToolBarUI"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var48 + "' != '" + "This is a testing description. \u03E3\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\u073F\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD"+ "'", var48.equals("This is a testing description. \u03E3\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\u073F\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var50 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var55);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var56);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var57 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var58);

  }

  public void test394() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest1.test394");


    com.allenstudio.ir.ui.MainFrame var0 = new com.allenstudio.ir.ui.MainFrame();
    java.lang.String var1 = var0.getWarningString();
    java.awt.Rectangle var2 = var0.getMaximizedBounds();
    java.awt.MenuBar var3 = var0.getMenuBar();
    com.allenstudio.ir.ui.NoteListsTabPane var4 = new com.allenstudio.ir.ui.NoteListsTabPane();
    var0.widgetChanged((com.allenstudio.ir.core.InspirentoWidget)var4);
    var4.changed();
    com.allenstudio.ir.ui.DatePickerPane var8 = new com.allenstudio.ir.ui.DatePickerPane();
    var8.transferFocus();
    com.allenstudio.ir.ui.Toolbar var10 = new com.allenstudio.ir.ui.Toolbar();
    java.awt.image.ColorModel var11 = var10.getColorModel();
    var10.setEnabled(true);
    java.awt.Component var15 = var10.getComponentAtIndex(1);
    boolean var16 = var10.isFloatable();
    var8.setContent((java.awt.Component)var10);
    var8.setSelected(true);
    var8.resize(0, 1);
    java.awt.Rectangle var23 = var8.getBounds();
    java.awt.Point var24 = var8.location();
    com.allenstudio.ir.ui.Toolbar var25 = new com.allenstudio.ir.ui.Toolbar();
    java.awt.image.ColorModel var26 = var25.getColorModel();
    java.awt.im.InputContext var27 = var25.getInputContext();
    java.awt.Component var29 = var25.getComponent(0);
    java.awt.Font var30 = var25.getFont();
    java.awt.FontMetrics var31 = var8.getFontMetrics(var30);
    var4.addTab("", (java.awt.Component)var8);
    com.allenstudio.ir.ui.MainFrame var33 = new com.allenstudio.ir.ui.MainFrame();
    boolean var34 = var33.isShowing();
    java.lang.String var35 = var33.getWarningString();
    var33.setAutoRequestFocus(true);
    var33.removeAll();
    com.allenstudio.ir.ui.MainFrame var39 = new com.allenstudio.ir.ui.MainFrame();
    java.lang.String var40 = var39.getWarningString();
    java.awt.Rectangle var41 = var39.getMaximizedBounds();
    com.allenstudio.ir.ui.StatusBar var42 = new com.allenstudio.ir.ui.StatusBar();
    boolean var43 = var42.isBackgroundSet();
    boolean var46 = var42.contains(10, 100);
    var42.revalidate();
    javax.swing.JToolTip var48 = var42.createToolTip();
    com.allenstudio.ir.ui.StatusBar var49 = new com.allenstudio.ir.ui.StatusBar();
    javax.swing.JRootPane var50 = var49.getRootPane();
    java.awt.Point var51 = var49.location();
    com.allenstudio.ir.ui.StatusBar var52 = new com.allenstudio.ir.ui.StatusBar();
    javax.swing.JRootPane var53 = var52.getRootPane();
    java.awt.Point var54 = var52.location();
    com.allenstudio.ir.ui.Toolbar var55 = new com.allenstudio.ir.ui.Toolbar();
    boolean var56 = var55.isFloatable();
    java.awt.Component var58 = var55.getComponentAtIndex(10);
    java.lang.Object var59 = var52.getClientProperty((java.lang.Object)10);
    java.awt.Dimension var60 = var52.getMaximumSize();
    var49.setMinimumSize(var60);
    java.awt.Rectangle var62 = var49.getBounds();
    var42.scrollRectToVisible(var62);
    var39.setMaximizedBounds(var62);
    var33.setMaximizedBounds(var62);
    int var66 = var4.indexOfComponent((java.awt.Component)var33);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var1);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var2);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var3);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var11);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var15);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var16 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var23);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var24);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var26);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var27);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var29);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var30);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var31);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var34 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var35);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var40);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var41);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var43 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var46 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var48);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var50);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var51);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var53);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var54);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var56 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var58);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var59);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var60);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var62);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var66 == (-1));

  }

  public void test395() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest1.test395");


    com.allenstudio.ir.ui.MainFrame var0 = new com.allenstudio.ir.ui.MainFrame();
    boolean var1 = var0.isShowing();
    int var2 = var0.countComponents();
    com.allenstudio.ir.ui.StatusBar var3 = new com.allenstudio.ir.ui.StatusBar();
    var3.enable();
    com.allenstudio.ir.ui.StatusBar var5 = new com.allenstudio.ir.ui.StatusBar();
    var5.enable();
    boolean var7 = var5.isFocusOwner();
    var5.firePropertyChange("hi!", 10L, 0L);
    var5.layout();
    var5.removeAll();
    com.allenstudio.ir.ui.StatusBar var14 = new com.allenstudio.ir.ui.StatusBar();
    javax.swing.JRootPane var15 = var14.getRootPane();
    java.awt.Point var16 = var14.location();
    java.awt.Point var17 = var5.getLocation(var16);
    var3.setLocation(var17);
    var0.setLocation(var17);
    java.awt.Container var20 = var0.getContentPane();
    java.awt.event.WindowFocusListener[] var21 = var0.getWindowFocusListeners();
    java.awt.event.WindowListener[] var22 = var0.getWindowListeners();
    boolean var23 = var0.isOpaque();
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var1 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var2 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var7 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var15);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var16);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var17);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var20);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var21);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var22);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var23 == true);

  }

  public void test396() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest1.test396");


    com.allenstudio.ir.ui.DatePickerPane var0 = new com.allenstudio.ir.ui.DatePickerPane();
    java.lang.String var1 = var0.getUIClassID();
    com.allenstudio.ir.ui.StatusBar var2 = new com.allenstudio.ir.ui.StatusBar();
    int var3 = var2.getY();
    javax.swing.JToolTip var4 = var2.createToolTip();
    float var5 = var4.getAlignmentY();
    java.awt.Color var6 = var4.getForeground();
    var0.setBackground(var6);
    var0.move(10, 10);
    com.allenstudio.ir.ui.Toolbar var11 = new com.allenstudio.ir.ui.Toolbar();
    java.awt.image.ColorModel var12 = var11.getColorModel();
    java.awt.im.InputContext var13 = var11.getInputContext();
    java.awt.Component var15 = var11.getComponentAtIndex(0);
    var0.setToolBar((javax.swing.JToolBar)var11);
    java.awt.im.InputContext var17 = var0.getInputContext();
    boolean var18 = var0.isDoubleBuffered();
    boolean var19 = var0.isCursorSet();
    boolean var21 = var0.areFocusTraversalKeysSet(3);
    var0.firePropertyChange("This is a testing description. \u03E3\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\u073F\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD", 100.0f, 1.0f);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var1 + "' != '" + "PanelUI"+ "'", var1.equals("PanelUI"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var3 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var4);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var5 == 0.5f);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var6);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var12);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var13);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var15);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var17);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var18 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var19 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var21 == false);

  }

  public void test397() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest1.test397");


    com.allenstudio.ir.ui.MainFrame var0 = new com.allenstudio.ir.ui.MainFrame();
    boolean var1 = var0.isShowing();
    java.lang.String var2 = var0.getWarningString();
    var0.setAutoRequestFocus(true);
    java.awt.image.ColorModel var5 = var0.getColorModel();
    var0.setAutoRequestFocus(true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var1 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var2);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var5);

  }

  public void test398() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest1.test398");


    com.allenstudio.ir.ui.DefaultNoteListModel var0 = new com.allenstudio.ir.ui.DefaultNoteListModel();
    com.allenstudio.ir.ui.StatusBar var1 = new com.allenstudio.ir.ui.StatusBar();
    com.allenstudio.ir.core.plugins.CommonNote var2 = new com.allenstudio.ir.core.plugins.CommonNote();
    var2.setFocusTraversalPolicyProvider(false);
    var1.remove((java.awt.Component)var2);
    com.allenstudio.ir.ui.StatusBar var6 = new com.allenstudio.ir.ui.StatusBar();
    int var7 = var6.getY();
    javax.swing.JToolTip var8 = var6.createToolTip();
    java.awt.Insets var9 = var8.getInsets();
    java.awt.Insets var10 = var2.getInsets(var9);
    int var11 = var0.indexOf((com.allenstudio.ir.core.plugins.AbstractNote)var2);
    com.allenstudio.ir.core.plugins.CommonNote var12 = new com.allenstudio.ir.core.plugins.CommonNote();
    var12.resize(0, 1);
    com.allenstudio.ir.ui.NoteListCell var16 = new com.allenstudio.ir.ui.NoteListCell((com.allenstudio.ir.core.plugins.AbstractNote)var12);
    java.lang.String var17 = var12.getFeature();
    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      var0.insertElementAt((com.allenstudio.ir.core.plugins.AbstractNote)var12, 3);
      fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException");
    } catch (java.lang.ArrayIndexOutOfBoundsException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var7 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var8);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var9);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var10);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var11 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var17 + "' != '" + "C:\\boot.ini"+ "'", var17.equals("C:\\boot.ini"));

  }

  public void test399() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest1.test399");


    com.allenstudio.ir.ui.NoteListsTabPane var0 = new com.allenstudio.ir.ui.NoteListsTabPane();
    com.allenstudio.ir.ui.Toolbar var1 = new com.allenstudio.ir.ui.Toolbar();
    boolean var2 = var1.isFloatable();
    var1.show();
    java.awt.image.ColorModel var4 = var1.getColorModel();
    boolean var5 = var1.isFocusCycleRoot();
    com.allenstudio.ir.ui.DatePickerPane var6 = new com.allenstudio.ir.ui.DatePickerPane();
    var6.transferFocus();
    com.allenstudio.ir.ui.Toolbar var8 = new com.allenstudio.ir.ui.Toolbar();
    java.awt.image.ColorModel var9 = var8.getColorModel();
    var8.setEnabled(true);
    java.awt.Component var13 = var8.getComponentAtIndex(1);
    boolean var14 = var8.isFloatable();
    var6.setContent((java.awt.Component)var8);
    java.awt.Dimension var16 = var6.size();
    com.allenstudio.ir.ui.Toolbar var17 = new com.allenstudio.ir.ui.Toolbar();
    boolean var18 = var17.isFloatable();
    var17.show();
    boolean var20 = var17.isRequestFocusEnabled();
    java.awt.Dimension var21 = var17.minimumSize();
    var6.setToolBar((javax.swing.JToolBar)var17);
    java.awt.Image var25 = var6.createImage(10, (-1));
    var0.add((java.awt.Component)var1, (java.lang.Object)10);
    var0.setSelectedIndex(1);
    javax.swing.plaf.TabbedPaneUI var29 = var0.getUI();
    javax.swing.SingleSelectionModel var30 = var0.getModel();
    int var31 = var0.getTabPlacement();
    var0.setLocation(4, 0);
    var0.repaint();
    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      int var37 = var0.getDisplayedMnemonicIndexAt(6);
      fail("Expected exception of type java.lang.IndexOutOfBoundsException");
    } catch (java.lang.IndexOutOfBoundsException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var2 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var4);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var5 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var9);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var13);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var14 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var16);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var18 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var20 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var21);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var25);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var29);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var30);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var31 == 1);

  }

  public void test400() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest1.test400");


    com.allenstudio.ir.ui.Toolbar var0 = new com.allenstudio.ir.ui.Toolbar();
    java.awt.image.ColorModel var1 = var0.getColorModel();
    var0.setEnabled(true);
    java.awt.Component var5 = var0.getComponentAtIndex(1);
    boolean var6 = var0.requestFocusInWindow();
    java.awt.FocusTraversalPolicy var7 = var0.getFocusTraversalPolicy();
    java.beans.PropertyChangeListener[] var9 = var0.getPropertyChangeListeners("Date Picker");
    boolean var10 = var0.isFontSet();
    com.allenstudio.ir.ui.calendar.MonthlyCalendar var11 = new com.allenstudio.ir.ui.calendar.MonthlyCalendar();
    var0.removeMouseListener((java.awt.event.MouseListener)var11);
    boolean var13 = var11.getWeekStartOnSunday();
    int var14 = var11.getSelectedDay();
    java.awt.Dimension var15 = var11.getCellDimension();
    java.util.Calendar var16 = var11.getSelectedDate();
    var11.setMonth(5);
    java.beans.VetoableChangeListener[] var19 = var11.getVetoableChangeListeners();
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var1);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var5);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var6 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var7);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var9);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var10 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var13 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var14 == 31);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var15);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var16);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var19);

  }

  public void test401() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest1.test401");


    com.allenstudio.ir.ui.MainFrame var0 = new com.allenstudio.ir.ui.MainFrame();
    boolean var1 = var0.isShowing();
    int var2 = var0.countComponents();
    var0.setAutoRequestFocus(false);
    javax.swing.JMenuBar var5 = var0.getJMenuBar();
    boolean var6 = var5.isBorderPainted();
    var5.menuSelectionChanged(true);
    com.allenstudio.ir.ui.MainFrame var9 = new com.allenstudio.ir.ui.MainFrame();
    boolean var10 = var9.isShowing();
    int var11 = var9.countComponents();
    var9.setAutoRequestFocus(false);
    javax.swing.JMenuBar var14 = var9.getJMenuBar();
    boolean var15 = var14.isBorderPainted();
    var14.updateUI();
    com.allenstudio.ir.ui.DatePickerPane var17 = new com.allenstudio.ir.ui.DatePickerPane();
    var17.transferFocus();
    java.awt.Dimension var19 = var17.getMinimumSize();
    java.awt.Dimension var20 = var14.getSize(var19);
    javax.swing.plaf.MenuBarUI var21 = var14.getUI();
    var5.setUI(var21);
    boolean var23 = var5.isBorderPainted();
    java.awt.Insets var24 = var5.getInsets();
    com.allenstudio.ir.ui.NoteListsTabPane var25 = new com.allenstudio.ir.ui.NoteListsTabPane();
    com.allenstudio.ir.ui.Toolbar var26 = new com.allenstudio.ir.ui.Toolbar();
    boolean var27 = var26.isFloatable();
    var26.show();
    java.awt.image.ColorModel var29 = var26.getColorModel();
    boolean var30 = var26.isFocusCycleRoot();
    com.allenstudio.ir.ui.DatePickerPane var31 = new com.allenstudio.ir.ui.DatePickerPane();
    var31.transferFocus();
    com.allenstudio.ir.ui.Toolbar var33 = new com.allenstudio.ir.ui.Toolbar();
    java.awt.image.ColorModel var34 = var33.getColorModel();
    var33.setEnabled(true);
    java.awt.Component var38 = var33.getComponentAtIndex(1);
    boolean var39 = var33.isFloatable();
    var31.setContent((java.awt.Component)var33);
    java.awt.Dimension var41 = var31.size();
    com.allenstudio.ir.ui.Toolbar var42 = new com.allenstudio.ir.ui.Toolbar();
    boolean var43 = var42.isFloatable();
    var42.show();
    boolean var45 = var42.isRequestFocusEnabled();
    java.awt.Dimension var46 = var42.minimumSize();
    var31.setToolBar((javax.swing.JToolBar)var42);
    java.awt.Image var50 = var31.createImage(10, (-1));
    var25.add((java.awt.Component)var26, (java.lang.Object)10);
    var25.setSelectedIndex(1);
    javax.swing.plaf.TabbedPaneUI var54 = var25.getUI();
    java.awt.Insets var55 = var25.insets();
    var5.setMargin(var55);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var1 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var2 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var5);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var6 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var10 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var11 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var14);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var15 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var19);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var20);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var21);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var23 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var24);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var27 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var29);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var30 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var34);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var38);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var39 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var41);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var43 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var45 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var46);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var50);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var54);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var55);

  }

  public void test402() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest1.test402");


    com.allenstudio.ir.ui.calendar.MonthlyCalendar var0 = new com.allenstudio.ir.ui.calendar.MonthlyCalendar();
    var0.setWeekStartOnSunday(true);
    com.allenstudio.ir.ui.DatePickerPane var3 = new com.allenstudio.ir.ui.DatePickerPane();
    var3.transferFocus();
    com.allenstudio.ir.ui.Toolbar var5 = new com.allenstudio.ir.ui.Toolbar();
    java.awt.image.ColorModel var6 = var5.getColorModel();
    var5.setEnabled(true);
    java.awt.Component var10 = var5.getComponentAtIndex(1);
    boolean var11 = var5.isFloatable();
    var3.setContent((java.awt.Component)var5);
    java.awt.Color var13 = var5.getForeground();
    boolean var14 = var5.requestFocusInWindow();
    javax.swing.ActionMap var15 = var5.getActionMap();
    var5.repaint(1L);
    var5.validate();
    com.allenstudio.ir.core.plugins.CommonNote var19 = new com.allenstudio.ir.core.plugins.CommonNote();
    boolean var20 = var19.isPaintingTile();
    com.allenstudio.ir.ui.Toolbar var21 = new com.allenstudio.ir.ui.Toolbar();
    java.awt.image.ColorModel var22 = var21.getColorModel();
    java.awt.im.InputContext var23 = var21.getInputContext();
    java.awt.Component var25 = var21.getComponent(0);
    java.awt.Font var26 = var21.getFont();
    java.awt.FontMetrics var27 = var19.getFontMetrics(var26);
    java.awt.FontMetrics var28 = var5.getFontMetrics(var26);
    var0.setHeaderFont(var26);
    var0.setYearMonth(100, (-1));
    com.allenstudio.ir.ui.DatePickerPane var33 = new com.allenstudio.ir.ui.DatePickerPane();
    var33.transferFocus();
    com.allenstudio.ir.ui.Toolbar var35 = new com.allenstudio.ir.ui.Toolbar();
    java.awt.image.ColorModel var36 = var35.getColorModel();
    var35.setEnabled(true);
    java.awt.Component var40 = var35.getComponentAtIndex(1);
    boolean var41 = var35.isFloatable();
    var33.setContent((java.awt.Component)var35);
    var33.setSelected(true);
    boolean var45 = var33.isFocusTraversalPolicySet();
    com.allenstudio.ir.ui.StatusBar var46 = new com.allenstudio.ir.ui.StatusBar();
    boolean var47 = var46.isBackgroundSet();
    boolean var50 = var46.contains(10, 100);
    var46.revalidate();
    javax.swing.JToolTip var52 = var46.createToolTip();
    com.allenstudio.ir.ui.StatusBar var53 = new com.allenstudio.ir.ui.StatusBar();
    javax.swing.JRootPane var54 = var53.getRootPane();
    java.awt.Point var55 = var53.location();
    com.allenstudio.ir.ui.StatusBar var56 = new com.allenstudio.ir.ui.StatusBar();
    javax.swing.JRootPane var57 = var56.getRootPane();
    java.awt.Point var58 = var56.location();
    com.allenstudio.ir.ui.Toolbar var59 = new com.allenstudio.ir.ui.Toolbar();
    boolean var60 = var59.isFloatable();
    java.awt.Component var62 = var59.getComponentAtIndex(10);
    java.lang.Object var63 = var56.getClientProperty((java.lang.Object)10);
    java.awt.Dimension var64 = var56.getMaximumSize();
    var53.setMinimumSize(var64);
    java.awt.Rectangle var66 = var53.getBounds();
    var46.scrollRectToVisible(var66);
    var33.repaint(var66);
    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      java.awt.Component var70 = var0.add((java.awt.Component)var33, 2015);
      fail("Expected exception of type java.lang.IllegalArgumentException");
    } catch (java.lang.IllegalArgumentException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var6);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var10);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var11 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var13);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var14 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var15);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var20 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var22);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var23);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var25);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var26);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var27);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var28);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var36);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var40);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var41 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var45 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var47 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var50 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var52);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var54);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var55);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var57);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var58);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var60 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var62);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var63);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var64);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var66);

  }

  public void test403() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest1.test403");


    com.allenstudio.ir.ui.DatePickerPane var0 = new com.allenstudio.ir.ui.DatePickerPane();
    var0.transferFocus();
    com.allenstudio.ir.ui.Toolbar var2 = new com.allenstudio.ir.ui.Toolbar();
    java.awt.image.ColorModel var3 = var2.getColorModel();
    var2.setEnabled(true);
    java.awt.Component var7 = var2.getComponentAtIndex(1);
    boolean var8 = var2.isFloatable();
    var0.setContent((java.awt.Component)var2);
    java.awt.Color var10 = var2.getForeground();
    boolean var11 = var2.requestFocusInWindow();
    javax.swing.ActionMap var12 = var2.getActionMap();
    boolean var13 = var2.isOptimizedDrawingEnabled();
    java.awt.GraphicsConfiguration var14 = var2.getGraphicsConfiguration();
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var3);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var7);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var8 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var10);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var11 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var12);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var13 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var14);

  }

  public void test404() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest1.test404");


    com.allenstudio.ir.ui.calendar.MonthlyCalendar var0 = new com.allenstudio.ir.ui.calendar.MonthlyCalendar();
    java.awt.Color var1 = var0.getDateBackground();
    var0.setYearMonth(1, (-1));
    java.util.Calendar var5 = var0.getSelectedDate();
    com.allenstudio.ir.ui.Toolbar var6 = new com.allenstudio.ir.ui.Toolbar();
    java.awt.image.ColorModel var7 = var6.getColorModel();
    var6.setEnabled(true);
    java.awt.Component var11 = var6.getComponentAtIndex(1);
    boolean var12 = var6.requestFocusInWindow();
    java.awt.FocusTraversalPolicy var13 = var6.getFocusTraversalPolicy();
    java.beans.PropertyChangeListener[] var15 = var6.getPropertyChangeListeners("Date Picker");
    boolean var16 = var6.isFontSet();
    com.allenstudio.ir.ui.calendar.MonthlyCalendar var17 = new com.allenstudio.ir.ui.calendar.MonthlyCalendar();
    var6.removeMouseListener((java.awt.event.MouseListener)var17);
    boolean var19 = var17.getWeekStartOnSunday();
    com.allenstudio.ir.event.NoteListDataEvent var21 = new com.allenstudio.ir.event.NoteListDataEvent((java.lang.Object)var17, 6);
    java.awt.Font var22 = var17.getHeaderFont();
    var0.setHeaderFont(var22);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var1);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var5);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var7);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var11);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var12 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var13);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var15);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var16 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var19 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var22);

  }

  public void test405() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest1.test405");


    com.allenstudio.ir.ui.Toolbar var0 = new com.allenstudio.ir.ui.Toolbar();
    java.awt.event.MouseWheelListener[] var1 = var0.getMouseWheelListeners();
    java.awt.event.MouseListener[] var2 = var0.getMouseListeners();
    var0.firePropertyChange("", false, true);
    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      javax.swing.InputMap var8 = var0.getInputMap(100);
      fail("Expected exception of type java.lang.IllegalArgumentException");
    } catch (java.lang.IllegalArgumentException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var1);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var2);

  }

  public void test406() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest1.test406");


    com.allenstudio.ir.ui.DatePickerPane var0 = new com.allenstudio.ir.ui.DatePickerPane();
    var0.transferFocus();
    com.allenstudio.ir.ui.Toolbar var2 = new com.allenstudio.ir.ui.Toolbar();
    java.awt.image.ColorModel var3 = var2.getColorModel();
    var2.setEnabled(true);
    java.awt.Component var7 = var2.getComponentAtIndex(1);
    boolean var8 = var2.isFloatable();
    var0.setContent((java.awt.Component)var2);
    var0.setSelected(true);
    var0.resize(0, 1);
    java.awt.Rectangle var15 = var0.getBounds();
    java.awt.Point var16 = var0.location();
    com.allenstudio.ir.ui.NoteListsTabPane var17 = new com.allenstudio.ir.ui.NoteListsTabPane();
    com.allenstudio.ir.ui.Toolbar var18 = new com.allenstudio.ir.ui.Toolbar();
    boolean var19 = var18.isFloatable();
    var18.show();
    java.awt.image.ColorModel var21 = var18.getColorModel();
    boolean var22 = var18.isFocusCycleRoot();
    com.allenstudio.ir.ui.DatePickerPane var23 = new com.allenstudio.ir.ui.DatePickerPane();
    var23.transferFocus();
    com.allenstudio.ir.ui.Toolbar var25 = new com.allenstudio.ir.ui.Toolbar();
    java.awt.image.ColorModel var26 = var25.getColorModel();
    var25.setEnabled(true);
    java.awt.Component var30 = var25.getComponentAtIndex(1);
    boolean var31 = var25.isFloatable();
    var23.setContent((java.awt.Component)var25);
    java.awt.Dimension var33 = var23.size();
    com.allenstudio.ir.ui.Toolbar var34 = new com.allenstudio.ir.ui.Toolbar();
    boolean var35 = var34.isFloatable();
    var34.show();
    boolean var37 = var34.isRequestFocusEnabled();
    java.awt.Dimension var38 = var34.minimumSize();
    var23.setToolBar((javax.swing.JToolBar)var34);
    java.awt.Image var42 = var23.createImage(10, (-1));
    var17.add((java.awt.Component)var18, (java.lang.Object)10);
    var0.setToolBar((javax.swing.JToolBar)var18);
    int var45 = var0.getWidth();
    java.awt.Container var46 = var0.getContentPane();
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var3);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var7);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var8 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var15);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var16);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var19 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var21);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var22 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var26);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var30);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var31 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var33);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var35 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var37 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var38);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var42);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var45 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var46);

  }

  public void test407() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest1.test407");


    com.allenstudio.ir.ui.Toolbar var0 = new com.allenstudio.ir.ui.Toolbar();
    java.awt.image.ColorModel var1 = var0.getColorModel();
    var0.setEnabled(true);
    java.awt.Component var5 = var0.getComponentAtIndex(1);
    boolean var6 = var0.requestFocusInWindow();
    com.allenstudio.ir.ui.StatusBar var7 = new com.allenstudio.ir.ui.StatusBar();
    com.allenstudio.ir.core.plugins.CommonNote var8 = new com.allenstudio.ir.core.plugins.CommonNote();
    var8.setFocusTraversalPolicyProvider(false);
    var7.remove((java.awt.Component)var8);
    com.allenstudio.ir.ui.StatusBar var12 = new com.allenstudio.ir.ui.StatusBar();
    int var13 = var12.getY();
    javax.swing.JToolTip var14 = var12.createToolTip();
    java.awt.Insets var15 = var14.getInsets();
    java.awt.Insets var16 = var8.getInsets(var15);
    var0.setMargin(var15);
    java.lang.String var18 = var0.getUIClassID();
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var1);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var5);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var6 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var13 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var14);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var15);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var16);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var18 + "' != '" + "ToolBarUI"+ "'", var18.equals("ToolBarUI"));

  }

  public void test408() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest1.test408");


    com.allenstudio.ir.ui.NoteListsTabPane var0 = new com.allenstudio.ir.ui.NoteListsTabPane();
    com.allenstudio.ir.ui.Toolbar var1 = new com.allenstudio.ir.ui.Toolbar();
    boolean var2 = var1.isFloatable();
    var1.show();
    java.awt.image.ColorModel var4 = var1.getColorModel();
    boolean var5 = var1.isFocusCycleRoot();
    com.allenstudio.ir.ui.DatePickerPane var6 = new com.allenstudio.ir.ui.DatePickerPane();
    var6.transferFocus();
    com.allenstudio.ir.ui.Toolbar var8 = new com.allenstudio.ir.ui.Toolbar();
    java.awt.image.ColorModel var9 = var8.getColorModel();
    var8.setEnabled(true);
    java.awt.Component var13 = var8.getComponentAtIndex(1);
    boolean var14 = var8.isFloatable();
    var6.setContent((java.awt.Component)var8);
    java.awt.Dimension var16 = var6.size();
    com.allenstudio.ir.ui.Toolbar var17 = new com.allenstudio.ir.ui.Toolbar();
    boolean var18 = var17.isFloatable();
    var17.show();
    boolean var20 = var17.isRequestFocusEnabled();
    java.awt.Dimension var21 = var17.minimumSize();
    var6.setToolBar((javax.swing.JToolBar)var17);
    java.awt.Image var25 = var6.createImage(10, (-1));
    var0.add((java.awt.Component)var1, (java.lang.Object)10);
    com.allenstudio.ir.ui.Toolbar var27 = new com.allenstudio.ir.ui.Toolbar();
    boolean var28 = var27.isFloatable();
    java.awt.Component var30 = var27.getComponentAtIndex(10);
    boolean var31 = var27.isLightweight();
    java.awt.Component var32 = var0.add((java.awt.Component)var27);
    com.allenstudio.ir.ui.NoteListsTabPane var33 = new com.allenstudio.ir.ui.NoteListsTabPane();
    com.allenstudio.ir.ui.Toolbar var34 = new com.allenstudio.ir.ui.Toolbar();
    boolean var35 = var34.isFloatable();
    var34.show();
    java.awt.image.ColorModel var37 = var34.getColorModel();
    boolean var38 = var34.isFocusCycleRoot();
    com.allenstudio.ir.ui.DatePickerPane var39 = new com.allenstudio.ir.ui.DatePickerPane();
    var39.transferFocus();
    com.allenstudio.ir.ui.Toolbar var41 = new com.allenstudio.ir.ui.Toolbar();
    java.awt.image.ColorModel var42 = var41.getColorModel();
    var41.setEnabled(true);
    java.awt.Component var46 = var41.getComponentAtIndex(1);
    boolean var47 = var41.isFloatable();
    var39.setContent((java.awt.Component)var41);
    java.awt.Dimension var49 = var39.size();
    com.allenstudio.ir.ui.Toolbar var50 = new com.allenstudio.ir.ui.Toolbar();
    boolean var51 = var50.isFloatable();
    var50.show();
    boolean var53 = var50.isRequestFocusEnabled();
    java.awt.Dimension var54 = var50.minimumSize();
    var39.setToolBar((javax.swing.JToolBar)var50);
    java.awt.Image var58 = var39.createImage(10, (-1));
    var33.add((java.awt.Component)var34, (java.lang.Object)10);
    var33.setSelectedIndex(1);
    javax.swing.plaf.TabbedPaneUI var62 = var33.getUI();
    javax.swing.SingleSelectionModel var63 = var33.getModel();
    var0.setModel(var63);
    javax.swing.event.ChangeListener[] var65 = var0.getChangeListeners();
    java.awt.Component var67 = var0.getTabComponentAt(4);
    com.allenstudio.ir.ui.StatusBar var68 = new com.allenstudio.ir.ui.StatusBar();
    int var69 = var68.getY();
    var68.setIgnoreRepaint(true);
    boolean var72 = var68.requestFocusInWindow();
    var68.removeAll();
    int var74 = var0.indexOfTabComponent((java.awt.Component)var68);
    boolean var75 = var0.isOpaque();
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var2 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var4);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var5 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var9);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var13);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var14 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var16);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var18 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var20 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var21);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var25);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var28 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var30);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var31 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var32);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var35 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var37);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var38 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var42);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var46);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var47 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var49);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var51 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var53 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var54);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var58);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var62);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var63);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var65);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var67);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var69 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var72 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var74 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var75 == false);

  }

  public void test409() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest1.test409");


    com.allenstudio.ir.util.XmlElement var0 = new com.allenstudio.ir.util.XmlElement();
    boolean var1 = var0.hasChanged();
    boolean var2 = var0.hasChanged();
    java.util.Hashtable var3 = var0.getAttributes();
    com.allenstudio.ir.ui.NoteList var4 = new com.allenstudio.ir.ui.NoteList();
    com.allenstudio.ir.ui.NoteList var5 = new com.allenstudio.ir.ui.NoteList();
    com.allenstudio.ir.ui.MainFrame var6 = new com.allenstudio.ir.ui.MainFrame();
    java.lang.String var7 = var6.getWarningString();
    java.awt.Rectangle var8 = var6.getMaximizedBounds();
    java.awt.MenuBar var9 = var6.getMenuBar();
    com.allenstudio.ir.core.plugins.CommonNote var10 = new com.allenstudio.ir.core.plugins.CommonNote();
    var10.resize(0, 1);
    com.allenstudio.ir.ui.NoteListCell var14 = new com.allenstudio.ir.ui.NoteListCell((com.allenstudio.ir.core.plugins.AbstractNote)var10);
    com.allenstudio.ir.ui.StatusBar var15 = new com.allenstudio.ir.ui.StatusBar();
    boolean var16 = var15.isBackgroundSet();
    boolean var19 = var15.contains(10, 100);
    var15.revalidate();
    javax.swing.JToolTip var21 = var15.createToolTip();
    com.allenstudio.ir.ui.StatusBar var22 = new com.allenstudio.ir.ui.StatusBar();
    javax.swing.JRootPane var23 = var22.getRootPane();
    java.awt.Point var24 = var22.location();
    com.allenstudio.ir.ui.StatusBar var25 = new com.allenstudio.ir.ui.StatusBar();
    javax.swing.JRootPane var26 = var25.getRootPane();
    java.awt.Point var27 = var25.location();
    com.allenstudio.ir.ui.Toolbar var28 = new com.allenstudio.ir.ui.Toolbar();
    boolean var29 = var28.isFloatable();
    java.awt.Component var31 = var28.getComponentAtIndex(10);
    java.lang.Object var32 = var25.getClientProperty((java.lang.Object)10);
    java.awt.Dimension var33 = var25.getMaximumSize();
    var22.setMinimumSize(var33);
    java.awt.Rectangle var35 = var22.getBounds();
    var15.scrollRectToVisible(var35);
    var10.repaint(var35);
    var6.setMaximizedBounds(var35);
    int var41 = var5.getScrollableBlockIncrement(var35, 1, 4);
    int var44 = var4.getScrollableBlockIncrement(var35, 0, 0);
    com.allenstudio.ir.util.XmlIO var45 = new com.allenstudio.ir.util.XmlIO();
    var45.errorDialog("hi!");
    char[] var50 = new char[] { 'a', '4'};
    var45.ignorableWhitespace(var50, 100, 0);
    java.lang.Object var54 = var3.put((java.lang.Object)0, (java.lang.Object)var45);
    com.allenstudio.ir.util.XmlIO var55 = new com.allenstudio.ir.util.XmlIO();
    var55.warningDialog("C:\\boot.ini");
    var55.notationDecl("C:\\boot.ini", "Date Picker", "hi!");
    com.allenstudio.ir.util.XmlIO var62 = new com.allenstudio.ir.util.XmlIO();
    char[] var64 = new char[] { 'a'};
    var62.ignorableWhitespace(var64, 0, (-1));
    var55.ignorableWhitespace(var64, 10, 1);
    var45.ignorableWhitespace(var64, 5, 556);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var1 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var2 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var3);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var7);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var8);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var9);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var16 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var19 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var21);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var23);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var24);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var26);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var27);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var29 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var31);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var32);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var33);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var35);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var41 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var44 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var50);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var54);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var64);

  }

  public void test410() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest1.test410");


    com.allenstudio.ir.ui.MainFrame var0 = new com.allenstudio.ir.ui.MainFrame();
    boolean var1 = var0.isShowing();
    int var2 = var0.countComponents();
    com.allenstudio.ir.ui.StatusBar var3 = new com.allenstudio.ir.ui.StatusBar();
    var3.enable();
    com.allenstudio.ir.ui.StatusBar var5 = new com.allenstudio.ir.ui.StatusBar();
    var5.enable();
    boolean var7 = var5.isFocusOwner();
    var5.firePropertyChange("hi!", 10L, 0L);
    var5.layout();
    var5.removeAll();
    com.allenstudio.ir.ui.StatusBar var14 = new com.allenstudio.ir.ui.StatusBar();
    javax.swing.JRootPane var15 = var14.getRootPane();
    java.awt.Point var16 = var14.location();
    java.awt.Point var17 = var5.getLocation(var16);
    var3.setLocation(var17);
    var0.setLocation(var17);
    java.awt.Color var20 = var0.getBackground();
    boolean var21 = var0.isShowing();
    var0.firePropertyChange(" ", 100L, (-1L));
    java.awt.im.InputContext var26 = var0.getInputContext();
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var1 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var2 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var7 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var15);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var16);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var17);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var20);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var21 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var26);

  }

  public void test411() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest1.test411");


    com.allenstudio.ir.ui.calendar.MonthlyCalendar var0 = new com.allenstudio.ir.ui.calendar.MonthlyCalendar();
    java.awt.Color var1 = var0.getDateBackground();
    java.awt.Color var2 = var0.getHighlightBackground();
    var0.firePropertyChange("", (byte)1, (byte)100);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var1);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var2);

  }

  public void test412() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest1.test412");


    com.allenstudio.ir.ui.calendar.MonthlyCalendar var0 = new com.allenstudio.ir.ui.calendar.MonthlyCalendar();
    var0.setWeekStartOnSunday(true);
    java.awt.event.KeyListener[] var3 = var0.getKeyListeners();
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var3);

  }

  public void test413() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest1.test413");


    com.allenstudio.ir.ui.StatusBar var0 = new com.allenstudio.ir.ui.StatusBar();
    boolean var1 = var0.isBackgroundSet();
    var0.setName("Date Picker");
    boolean var4 = var0.getVerifyInputWhenFocusTarget();
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var1 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var4 == true);

  }

  public void test414() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest1.test414");


    com.allenstudio.ir.ui.MainFrame var0 = new com.allenstudio.ir.ui.MainFrame();
    java.lang.String var1 = var0.getWarningString();
    boolean var2 = var0.isAlwaysOnTopSupported();
    com.allenstudio.ir.ui.StatusBar var3 = new com.allenstudio.ir.ui.StatusBar();
    javax.swing.JRootPane var4 = var3.getRootPane();
    java.awt.Point var5 = var3.location();
    com.allenstudio.ir.ui.StatusBar var6 = new com.allenstudio.ir.ui.StatusBar();
    javax.swing.JRootPane var7 = var6.getRootPane();
    java.awt.Point var8 = var6.location();
    com.allenstudio.ir.ui.Toolbar var9 = new com.allenstudio.ir.ui.Toolbar();
    boolean var10 = var9.isFloatable();
    java.awt.Component var12 = var9.getComponentAtIndex(10);
    java.lang.Object var13 = var6.getClientProperty((java.lang.Object)10);
    java.awt.Dimension var14 = var6.getMaximumSize();
    var3.setMinimumSize(var14);
    java.awt.Rectangle var16 = var3.getBounds();
    java.awt.Rectangle var17 = var0.getBounds(var16);
    java.awt.Container var18 = var0.getFocusCycleRootAncestor();
    com.allenstudio.ir.ui.DatePickerPane var19 = new com.allenstudio.ir.ui.DatePickerPane();
    java.lang.String var20 = var19.getTitle();
    boolean var21 = var19.isManagingFocus();
    java.awt.LayoutManager var22 = var19.getLayout();
    var19.setDebugGraphicsOptions(1);
    java.awt.Color var25 = var19.getHeaderBackground();
    var0.setContentPane((java.awt.Container)var19);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var2 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var4);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var5);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var7);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var8);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var10 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var12);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var13);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var14);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var16);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var17);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var18);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var20 + "' != '" + "Date Picker"+ "'", var20.equals("Date Picker"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var21 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var22);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var25);

  }

  public void test415() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest1.test415");


    com.allenstudio.ir.util.XmlElement var0 = new com.allenstudio.ir.util.XmlElement();
    boolean var1 = var0.hasChanged();
    java.util.List var2 = var0.getElements();
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var1 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var2);

  }

  public void test416() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest1.test416");


    com.allenstudio.ir.ui.MainFrame var0 = new com.allenstudio.ir.ui.MainFrame();
    java.lang.String var1 = var0.getWarningString();
    java.lang.String var2 = var0.getWarningString();
    java.awt.Container var3 = var0.getFocusCycleRootAncestor();
    com.allenstudio.ir.ui.StatusBar var4 = new com.allenstudio.ir.ui.StatusBar();
    boolean var5 = var4.isBackgroundSet();
    boolean var8 = var4.contains(10, 100);
    var4.revalidate();
    javax.swing.JToolTip var10 = var4.createToolTip();
    com.allenstudio.ir.ui.StatusBar var11 = new com.allenstudio.ir.ui.StatusBar();
    javax.swing.JRootPane var12 = var11.getRootPane();
    java.awt.Point var13 = var11.location();
    com.allenstudio.ir.ui.StatusBar var14 = new com.allenstudio.ir.ui.StatusBar();
    javax.swing.JRootPane var15 = var14.getRootPane();
    java.awt.Point var16 = var14.location();
    com.allenstudio.ir.ui.Toolbar var17 = new com.allenstudio.ir.ui.Toolbar();
    boolean var18 = var17.isFloatable();
    java.awt.Component var20 = var17.getComponentAtIndex(10);
    java.lang.Object var21 = var14.getClientProperty((java.lang.Object)10);
    java.awt.Dimension var22 = var14.getMaximumSize();
    var11.setMinimumSize(var22);
    java.awt.Rectangle var24 = var11.getBounds();
    var4.scrollRectToVisible(var24);
    var0.setMaximizedBounds(var24);
    float var27 = var0.getAlignmentX();
    com.allenstudio.ir.ui.Toolbar var28 = new com.allenstudio.ir.ui.Toolbar();
    java.awt.image.ColorModel var29 = var28.getColorModel();
    var28.setEnabled(true);
    java.awt.Component var33 = var28.getComponentAtIndex(1);
    java.awt.Component var35 = var28.getComponentAtIndex(1);
    java.awt.event.InputMethodListener[] var36 = var28.getInputMethodListeners();
    com.allenstudio.ir.ui.Toolbar var37 = new com.allenstudio.ir.ui.Toolbar();
    java.awt.Dimension var38 = var37.size();
    java.awt.Dimension var39 = var28.getSize(var38);
    var0.setSize(var38);
    boolean var43 = var0.contains(761, 2015);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var1);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var2);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var3);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var5 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var8 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var10);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var12);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var13);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var15);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var16);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var18 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var20);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var21);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var22);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var24);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var27 == 0.5f);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var29);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var33);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var35);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var36);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var38);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var39);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var43 == false);

  }

  public void test417() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest1.test417");


    com.allenstudio.ir.ui.NoteListsTabPane var0 = new com.allenstudio.ir.ui.NoteListsTabPane();
    com.allenstudio.ir.ui.Toolbar var1 = new com.allenstudio.ir.ui.Toolbar();
    boolean var2 = var1.isFloatable();
    var1.show();
    java.awt.image.ColorModel var4 = var1.getColorModel();
    boolean var5 = var1.isFocusCycleRoot();
    com.allenstudio.ir.ui.DatePickerPane var6 = new com.allenstudio.ir.ui.DatePickerPane();
    var6.transferFocus();
    com.allenstudio.ir.ui.Toolbar var8 = new com.allenstudio.ir.ui.Toolbar();
    java.awt.image.ColorModel var9 = var8.getColorModel();
    var8.setEnabled(true);
    java.awt.Component var13 = var8.getComponentAtIndex(1);
    boolean var14 = var8.isFloatable();
    var6.setContent((java.awt.Component)var8);
    java.awt.Dimension var16 = var6.size();
    com.allenstudio.ir.ui.Toolbar var17 = new com.allenstudio.ir.ui.Toolbar();
    boolean var18 = var17.isFloatable();
    var17.show();
    boolean var20 = var17.isRequestFocusEnabled();
    java.awt.Dimension var21 = var17.minimumSize();
    var6.setToolBar((javax.swing.JToolBar)var17);
    java.awt.Image var25 = var6.createImage(10, (-1));
    var0.add((java.awt.Component)var1, (java.lang.Object)10);
    var0.setSelectedIndex(1);
    javax.swing.plaf.TabbedPaneUI var29 = var0.getUI();
    boolean var30 = var0.isEnabled();
    var0.updateUI();
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var2 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var4);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var5 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var9);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var13);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var14 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var16);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var18 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var20 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var21);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var25);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var29);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var30 == true);

  }

  public void test418() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest1.test418");


    com.allenstudio.ir.ui.MainFrame var0 = new com.allenstudio.ir.ui.MainFrame();
    java.lang.String var1 = var0.getWarningString();
    java.awt.Rectangle var2 = var0.getMaximizedBounds();
    java.awt.MenuBar var3 = var0.getMenuBar();
    com.allenstudio.ir.ui.NoteListsTabPane var4 = new com.allenstudio.ir.ui.NoteListsTabPane();
    var0.widgetChanged((com.allenstudio.ir.core.InspirentoWidget)var4);
    var4.changed();
    com.allenstudio.ir.ui.DatePickerPane var8 = new com.allenstudio.ir.ui.DatePickerPane();
    var8.transferFocus();
    com.allenstudio.ir.ui.Toolbar var10 = new com.allenstudio.ir.ui.Toolbar();
    java.awt.image.ColorModel var11 = var10.getColorModel();
    var10.setEnabled(true);
    java.awt.Component var15 = var10.getComponentAtIndex(1);
    boolean var16 = var10.isFloatable();
    var8.setContent((java.awt.Component)var10);
    var8.setSelected(true);
    var8.resize(0, 1);
    java.awt.Rectangle var23 = var8.getBounds();
    java.awt.Point var24 = var8.location();
    com.allenstudio.ir.ui.Toolbar var25 = new com.allenstudio.ir.ui.Toolbar();
    java.awt.image.ColorModel var26 = var25.getColorModel();
    java.awt.im.InputContext var27 = var25.getInputContext();
    java.awt.Component var29 = var25.getComponent(0);
    java.awt.Font var30 = var25.getFont();
    java.awt.FontMetrics var31 = var8.getFontMetrics(var30);
    var4.addTab("", (java.awt.Component)var8);
    boolean var33 = var4.isFocusCycleRoot();
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var1);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var2);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var3);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var11);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var15);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var16 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var23);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var24);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var26);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var27);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var29);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var30);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var31);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var33 == false);

  }

  public void test419() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest1.test419");


    com.allenstudio.ir.util.XmlElement var1 = new com.allenstudio.ir.util.XmlElement(" ");

  }

  public void test420() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest1.test420");


    com.allenstudio.ir.ui.NoteListsTabPane var0 = new com.allenstudio.ir.ui.NoteListsTabPane();
    com.allenstudio.ir.ui.Toolbar var1 = new com.allenstudio.ir.ui.Toolbar();
    boolean var2 = var1.isFloatable();
    var1.show();
    java.awt.image.ColorModel var4 = var1.getColorModel();
    boolean var5 = var1.isFocusCycleRoot();
    com.allenstudio.ir.ui.DatePickerPane var6 = new com.allenstudio.ir.ui.DatePickerPane();
    var6.transferFocus();
    com.allenstudio.ir.ui.Toolbar var8 = new com.allenstudio.ir.ui.Toolbar();
    java.awt.image.ColorModel var9 = var8.getColorModel();
    var8.setEnabled(true);
    java.awt.Component var13 = var8.getComponentAtIndex(1);
    boolean var14 = var8.isFloatable();
    var6.setContent((java.awt.Component)var8);
    java.awt.Dimension var16 = var6.size();
    com.allenstudio.ir.ui.Toolbar var17 = new com.allenstudio.ir.ui.Toolbar();
    boolean var18 = var17.isFloatable();
    var17.show();
    boolean var20 = var17.isRequestFocusEnabled();
    java.awt.Dimension var21 = var17.minimumSize();
    var6.setToolBar((javax.swing.JToolBar)var17);
    java.awt.Image var25 = var6.createImage(10, (-1));
    var0.add((java.awt.Component)var1, (java.lang.Object)10);
    var0.setSelectedIndex(1);
    javax.swing.plaf.TabbedPaneUI var29 = var0.getUI();
    int var30 = var0.getTabRunCount();
    com.allenstudio.ir.ui.StatusBar var31 = new com.allenstudio.ir.ui.StatusBar();
    var31.enable();
    boolean var33 = var31.isFocusOwner();
    var31.firePropertyChange("hi!", 10L, 0L);
    com.allenstudio.ir.ui.StatusBar var38 = new com.allenstudio.ir.ui.StatusBar();
    var38.enable();
    boolean var40 = var38.isFocusOwner();
    var38.firePropertyChange("hi!", 10L, 0L);
    var38.layout();
    var38.removeAll();
    com.allenstudio.ir.ui.StatusBar var47 = new com.allenstudio.ir.ui.StatusBar();
    javax.swing.JRootPane var48 = var47.getRootPane();
    java.awt.Point var49 = var47.location();
    java.awt.Component var50 = var38.getComponentAt(var49);
    java.awt.Component var51 = var31.getComponentAt(var49);
    java.awt.Point var52 = var0.getLocation(var49);
    java.lang.String var53 = var0.getUIClassID();
    java.awt.GraphicsConfiguration var54 = var0.getGraphicsConfiguration();
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var2 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var4);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var5 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var9);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var13);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var14 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var16);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var18 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var20 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var21);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var25);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var29);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var30 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var33 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var40 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var48);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var49);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var50);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var51);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var52);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var53 + "' != '" + "TabbedPaneUI"+ "'", var53.equals("TabbedPaneUI"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var54);

  }

  public void test421() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest1.test421");


    com.allenstudio.ir.ui.Toolbar var0 = new com.allenstudio.ir.ui.Toolbar();
    java.awt.image.ColorModel var1 = var0.getColorModel();
    var0.setEnabled(true);
    java.awt.Component var5 = var0.getComponentAtIndex(1);
    boolean var6 = var0.requestFocusInWindow();
    java.awt.FocusTraversalPolicy var7 = var0.getFocusTraversalPolicy();
    java.beans.PropertyChangeListener[] var9 = var0.getPropertyChangeListeners("Date Picker");
    boolean var10 = var0.isFontSet();
    com.allenstudio.ir.ui.calendar.MonthlyCalendar var11 = new com.allenstudio.ir.ui.calendar.MonthlyCalendar();
    var0.removeMouseListener((java.awt.event.MouseListener)var11);
    boolean var15 = var0.contains(4, 1);
    javax.swing.JToolTip var16 = var0.createToolTip();
    var16.move(30, 1);
    var16.setDebugGraphicsOptions(4);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var1);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var5);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var6 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var7);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var9);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var10 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var15 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var16);

  }

  public void test422() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest1.test422");


    com.allenstudio.ir.ui.MainFrame var0 = new com.allenstudio.ir.ui.MainFrame();
    boolean var1 = var0.isShowing();
    int var2 = var0.countComponents();
    boolean var3 = var0.isAutoRequestFocus();
    java.awt.Component var4 = var0.getGlassPane();
    var4.enableInputMethods(true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var1 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var2 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var3 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var4);

  }

  public void test423() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest1.test423");


    com.allenstudio.ir.ui.MainFrame var0 = new com.allenstudio.ir.ui.MainFrame();
    java.lang.String var1 = var0.getWarningString();
    java.awt.Rectangle var2 = var0.getMaximizedBounds();
    java.awt.MenuBar var3 = var0.getMenuBar();
    com.allenstudio.ir.ui.NoteListsTabPane var4 = new com.allenstudio.ir.ui.NoteListsTabPane();
    var0.widgetChanged((com.allenstudio.ir.core.InspirentoWidget)var4);
    var0.dispose();
    var0.setLocation(0, 0);
    boolean var10 = var0.isFocusTraversalPolicySet();
    java.awt.Graphics var11 = var0.getGraphics();
    java.awt.Component.BaselineResizeBehavior var12 = var0.getBaselineResizeBehavior();
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var1);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var2);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var3);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var10 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var11);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var12);

  }

  public void test424() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest1.test424");


    com.allenstudio.ir.ui.MainFrame var0 = new com.allenstudio.ir.ui.MainFrame();
    java.lang.String var1 = var0.getWarningString();
    java.awt.Container var2 = var0.getFocusCycleRootAncestor();
    com.allenstudio.ir.ui.DatePickerPane var3 = new com.allenstudio.ir.ui.DatePickerPane();
    var3.transferFocus();
    java.awt.Dimension var5 = var3.getMinimumSize();
    com.allenstudio.ir.ui.StatusBar var6 = new com.allenstudio.ir.ui.StatusBar();
    int var7 = var6.getY();
    javax.swing.JToolTip var8 = var6.createToolTip();
    float var9 = var8.getAlignmentY();
    java.awt.Color var10 = var8.getForeground();
    var3.setBackground(var10);
    var0.setBackground(var10);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var1);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var2);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var5);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var7 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var8);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var9 == 0.5f);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var10);

  }

  public void test425() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest1.test425");


    com.allenstudio.ir.ui.NoteListsTabPane var0 = new com.allenstudio.ir.ui.NoteListsTabPane();
    com.allenstudio.ir.ui.Toolbar var1 = new com.allenstudio.ir.ui.Toolbar();
    boolean var2 = var1.isFloatable();
    var1.show();
    java.awt.image.ColorModel var4 = var1.getColorModel();
    boolean var5 = var1.isFocusCycleRoot();
    com.allenstudio.ir.ui.DatePickerPane var6 = new com.allenstudio.ir.ui.DatePickerPane();
    var6.transferFocus();
    com.allenstudio.ir.ui.Toolbar var8 = new com.allenstudio.ir.ui.Toolbar();
    java.awt.image.ColorModel var9 = var8.getColorModel();
    var8.setEnabled(true);
    java.awt.Component var13 = var8.getComponentAtIndex(1);
    boolean var14 = var8.isFloatable();
    var6.setContent((java.awt.Component)var8);
    java.awt.Dimension var16 = var6.size();
    com.allenstudio.ir.ui.Toolbar var17 = new com.allenstudio.ir.ui.Toolbar();
    boolean var18 = var17.isFloatable();
    var17.show();
    boolean var20 = var17.isRequestFocusEnabled();
    java.awt.Dimension var21 = var17.minimumSize();
    var6.setToolBar((javax.swing.JToolBar)var17);
    java.awt.Image var25 = var6.createImage(10, (-1));
    var0.add((java.awt.Component)var1, (java.lang.Object)10);
    var0.setSelectedIndex(1);
    javax.swing.plaf.TabbedPaneUI var29 = var0.getUI();
    boolean var30 = var0.isEnabled();
    javax.accessibility.AccessibleContext var31 = var0.getAccessibleContext();
    javax.swing.JToolTip var32 = var0.createToolTip();
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var2 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var4);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var5 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var9);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var13);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var14 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var16);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var18 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var20 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var21);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var25);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var29);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var30 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var31);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var32);

  }

  public void test426() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest1.test426");


    com.allenstudio.ir.ui.Toolbar var0 = new com.allenstudio.ir.ui.Toolbar();
    java.awt.image.ColorModel var1 = var0.getColorModel();
    var0.setEnabled(true);
    java.awt.Component var5 = var0.getComponentAtIndex(1);
    boolean var6 = var0.isFloatable();
    javax.swing.InputMap var7 = var0.getInputMap();
    java.awt.im.InputMethodRequests var8 = var0.getInputMethodRequests();
    java.awt.Toolkit var9 = var0.getToolkit();
    com.allenstudio.ir.ui.StatusBar var10 = new com.allenstudio.ir.ui.StatusBar();
    int var11 = var10.getY();
    var10.setIgnoreRepaint(true);
    boolean var14 = var10.requestFocusInWindow();
    java.awt.event.HierarchyBoundsListener[] var15 = var10.getHierarchyBoundsListeners();
    java.awt.event.MouseListener[] var16 = var10.getMouseListeners();
    var10.repaint(10, 4, 10, 10);
    javax.swing.ActionMap var22 = var10.getActionMap();
    int var23 = var0.getComponentIndex((java.awt.Component)var10);
    var10.setAlignmentX(0.5f);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var1);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var5);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var6 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var7);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var8);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var9);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var11 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var14 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var15);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var16);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var22);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var23 == (-1));

  }

  public void test427() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest1.test427");


    com.allenstudio.ir.ui.DatePickerPane var0 = new com.allenstudio.ir.ui.DatePickerPane();
    javax.swing.KeyStroke[] var1 = var0.getRegisteredKeyStrokes();
    com.allenstudio.ir.ui.Toolbar var2 = new com.allenstudio.ir.ui.Toolbar();
    java.awt.image.ColorModel var3 = var2.getColorModel();
    java.awt.im.InputContext var4 = var2.getInputContext();
    java.awt.Component var6 = var2.getComponentAtIndex(0);
    var0.setToolBar((javax.swing.JToolBar)var2);
    javax.swing.border.Border var8 = var0.getContentPaneBorder();
    java.awt.event.KeyListener[] var9 = var0.getKeyListeners();
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var1);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var3);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var4);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var6);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var8);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var9);

  }

  public void test428() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest1.test428");


    com.allenstudio.ir.ui.DatePickerPane var0 = new com.allenstudio.ir.ui.DatePickerPane();
    var0.transferFocus();
    com.allenstudio.ir.ui.Toolbar var2 = new com.allenstudio.ir.ui.Toolbar();
    java.awt.image.ColorModel var3 = var2.getColorModel();
    var2.setEnabled(true);
    java.awt.Component var7 = var2.getComponentAtIndex(1);
    boolean var8 = var2.isFloatable();
    var0.setContent((java.awt.Component)var2);
    var0.setSelected(true);
    var0.resize(0, 1);
    java.awt.Rectangle var15 = var0.getBounds();
    java.awt.Point var16 = var0.location();
    boolean var19 = var0.contains(100, 1);
    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      java.awt.Point var20 = var0.getLocationOnScreen();
      fail("Expected exception of type java.awt.IllegalComponentStateException");
    } catch (java.awt.IllegalComponentStateException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var3);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var7);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var8 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var15);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var16);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var19 == false);

  }

  public void test429() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest1.test429");


    com.allenstudio.ir.core.plugins.CommonNote var0 = new com.allenstudio.ir.core.plugins.CommonNote();
    var0.resize(0, 1);
    com.allenstudio.ir.ui.NoteListCell var4 = new com.allenstudio.ir.ui.NoteListCell((com.allenstudio.ir.core.plugins.AbstractNote)var0);
    int var5 = var4.getIndexInList();
    java.awt.Dimension var6 = var4.getMaximumSize();
    java.awt.LayoutManager var7 = var4.getLayout();
    java.awt.event.ContainerListener[] var8 = var4.getContainerListeners();
    var4.transferFocusBackward();
    java.awt.Point var10 = var4.getMousePosition();
    java.awt.Dimension var11 = var4.getMaximumSize();
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var5 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var6);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var7);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var8);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var10);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var11);

  }

  public void test430() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest1.test430");


    com.allenstudio.ir.ui.MainFrame var0 = new com.allenstudio.ir.ui.MainFrame();
    boolean var1 = var0.isShowing();
    int var2 = var0.countComponents();
    var0.setAutoRequestFocus(false);
    javax.swing.JMenuBar var5 = var0.getJMenuBar();
    boolean var6 = var5.isBorderPainted();
    var5.menuSelectionChanged(true);
    com.allenstudio.ir.ui.MainFrame var9 = new com.allenstudio.ir.ui.MainFrame();
    boolean var10 = var9.isShowing();
    int var11 = var9.countComponents();
    var9.setAutoRequestFocus(false);
    javax.swing.JMenuBar var14 = var9.getJMenuBar();
    boolean var15 = var14.isBorderPainted();
    var14.updateUI();
    com.allenstudio.ir.ui.DatePickerPane var17 = new com.allenstudio.ir.ui.DatePickerPane();
    var17.transferFocus();
    java.awt.Dimension var19 = var17.getMinimumSize();
    java.awt.Dimension var20 = var14.getSize(var19);
    javax.swing.plaf.MenuBarUI var21 = var14.getUI();
    var5.setUI(var21);
    boolean var23 = var5.isBorderPainted();
    com.allenstudio.ir.ui.MainFrame var24 = new com.allenstudio.ir.ui.MainFrame();
    java.lang.String var25 = var24.getWarningString();
    java.awt.Rectangle var26 = var24.getMaximizedBounds();
    java.awt.MenuBar var27 = var24.getMenuBar();
    var24.removeNotify();
    var24.pack();
    var24.setFocusCycleRoot(false);
    var24.reshape(32, 100, 0, 0);
    com.allenstudio.ir.ui.MainFrame var37 = new com.allenstudio.ir.ui.MainFrame();
    java.lang.String var38 = var37.getWarningString();
    java.lang.String var39 = var37.getWarningString();
    boolean var40 = var37.isAutoRequestFocus();
    boolean var41 = var37.isResizable();
    javax.swing.JLayeredPane var42 = var37.getLayeredPane();
    int var43 = var42.getX();
    var24.setGlassPane((java.awt.Component)var42);
    int var45 = var5.getComponentIndex((java.awt.Component)var24);
    java.awt.Container var46 = var24.getFocusCycleRootAncestor();
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var1 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var2 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var5);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var6 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var10 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var11 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var14);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var15 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var19);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var20);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var21);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var23 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var25);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var26);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var27);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var38);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var39);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var40 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var41 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var42);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var43 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var45 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var46);

  }

  public void test431() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest1.test431");


    com.allenstudio.ir.ui.Toolbar var0 = new com.allenstudio.ir.ui.Toolbar();
    java.awt.image.ColorModel var1 = var0.getColorModel();
    var0.setEnabled(true);
    java.awt.Component var5 = var0.getComponentAtIndex(1);
    boolean var6 = var0.requestFocusInWindow();
    java.awt.FocusTraversalPolicy var7 = var0.getFocusTraversalPolicy();
    java.beans.PropertyChangeListener[] var9 = var0.getPropertyChangeListeners("Date Picker");
    boolean var10 = var0.isFontSet();
    com.allenstudio.ir.ui.calendar.MonthlyCalendar var11 = new com.allenstudio.ir.ui.calendar.MonthlyCalendar();
    var0.removeMouseListener((java.awt.event.MouseListener)var11);
    boolean var13 = var11.getWeekStartOnSunday();
    com.allenstudio.ir.event.NoteListDataEvent var15 = new com.allenstudio.ir.event.NoteListDataEvent((java.lang.Object)var11, 6);
    com.allenstudio.ir.ui.DatePickerPane var16 = new com.allenstudio.ir.ui.DatePickerPane();
    java.lang.String var17 = var16.getUIClassID();
    com.allenstudio.ir.ui.StatusBar var18 = new com.allenstudio.ir.ui.StatusBar();
    int var19 = var18.getY();
    javax.swing.JToolTip var20 = var18.createToolTip();
    float var21 = var20.getAlignmentY();
    java.awt.Color var22 = var20.getForeground();
    var16.setBackground(var22);
    var11.setDateForeground(var22);
    java.awt.Insets var25 = var11.getInsets();
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var1);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var5);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var6 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var7);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var9);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var10 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var13 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var17 + "' != '" + "PanelUI"+ "'", var17.equals("PanelUI"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var19 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var20);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var21 == 0.5f);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var22);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var25);

  }

  public void test432() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest1.test432");


    com.allenstudio.ir.ui.MainFrame var0 = new com.allenstudio.ir.ui.MainFrame();
    boolean var1 = var0.isShowing();
    int var2 = var0.countComponents();
    com.allenstudio.ir.ui.StatusBar var3 = new com.allenstudio.ir.ui.StatusBar();
    var3.enable();
    com.allenstudio.ir.ui.StatusBar var5 = new com.allenstudio.ir.ui.StatusBar();
    var5.enable();
    boolean var7 = var5.isFocusOwner();
    var5.firePropertyChange("hi!", 10L, 0L);
    var5.layout();
    var5.removeAll();
    com.allenstudio.ir.ui.StatusBar var14 = new com.allenstudio.ir.ui.StatusBar();
    javax.swing.JRootPane var15 = var14.getRootPane();
    java.awt.Point var16 = var14.location();
    java.awt.Point var17 = var5.getLocation(var16);
    var3.setLocation(var17);
    var0.setLocation(var17);
    java.awt.Container var20 = var0.getContentPane();
    java.awt.event.WindowFocusListener[] var21 = var0.getWindowFocusListeners();
    java.awt.image.ColorModel var22 = var0.getColorModel();
    var0.reshape(556, (-1), 100, 100);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var1 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var2 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var7 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var15);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var16);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var17);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var20);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var21);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var22);

  }

  public void test433() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest1.test433");


    com.allenstudio.ir.ui.MainFrame var0 = new com.allenstudio.ir.ui.MainFrame();
    java.lang.String var1 = var0.getWarningString();
    java.lang.String var2 = var0.getWarningString();
    boolean var3 = var0.isAutoRequestFocus();
    boolean var4 = var0.isResizable();
    javax.swing.JLayeredPane var5 = var0.getLayeredPane();
    com.allenstudio.ir.ui.DatePickerPane var6 = new com.allenstudio.ir.ui.DatePickerPane();
    var6.transferFocus();
    com.allenstudio.ir.ui.Toolbar var8 = new com.allenstudio.ir.ui.Toolbar();
    java.awt.image.ColorModel var9 = var8.getColorModel();
    var8.setEnabled(true);
    java.awt.Component var13 = var8.getComponentAtIndex(1);
    boolean var14 = var8.isFloatable();
    var6.setContent((java.awt.Component)var8);
    var6.setSelected(true);
    boolean var18 = var6.isFocusTraversalPolicySet();
    java.awt.Dimension var19 = var6.getPreferredSize();
    java.awt.Dimension var20 = var0.getSize(var19);
    java.awt.Color var21 = var0.getBackground();
    float var22 = var0.getAlignmentX();
    javax.swing.JRootPane var23 = var0.getRootPane();
    float var24 = var23.getAlignmentX();
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var1);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var2);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var3 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var4 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var5);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var9);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var13);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var14 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var18 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var19);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var20);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var21);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var22 == 0.5f);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var23);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var24 == 0.0f);

  }

  public void test434() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest1.test434");


    com.allenstudio.ir.ui.DatePickerPane var0 = new com.allenstudio.ir.ui.DatePickerPane();
    var0.transferFocus();
    com.allenstudio.ir.ui.Toolbar var2 = new com.allenstudio.ir.ui.Toolbar();
    java.awt.image.ColorModel var3 = var2.getColorModel();
    var2.setEnabled(true);
    java.awt.Component var7 = var2.getComponentAtIndex(1);
    boolean var8 = var2.isFloatable();
    var0.setContent((java.awt.Component)var2);
    java.awt.Dimension var10 = var0.size();
    com.allenstudio.ir.ui.Toolbar var11 = new com.allenstudio.ir.ui.Toolbar();
    boolean var12 = var11.isFloatable();
    var11.show();
    boolean var14 = var11.isRequestFocusEnabled();
    java.awt.Dimension var15 = var11.minimumSize();
    var0.setToolBar((javax.swing.JToolBar)var11);
    java.awt.Image var19 = var0.createImage(10, (-1));
    java.lang.String var20 = var0.getToolTipText();
    boolean var21 = var0.isBackgroundSet();
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var3);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var7);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var8 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var10);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var12 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var14 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var15);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var19);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var20);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var21 == true);

  }

  public void test435() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest1.test435");


    com.allenstudio.ir.util.XmlIO var0 = new com.allenstudio.ir.util.XmlIO();
    var0.unparsedEntityDecl("", "hi!", "", "");
    var0.skippedEntity("This is a testing description. \u03E3\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\u073F\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD");
    var0.notationDecl("Date Picker", "Title", "This is a testing description. \u03E3\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\u073F\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD");
    var0.endPrefixMapping("{}");

  }

  public void test436() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest1.test436");


    com.allenstudio.ir.ui.MainFrame var0 = new com.allenstudio.ir.ui.MainFrame();
    java.lang.String var1 = var0.getWarningString();
    java.lang.String var2 = var0.getWarningString();
    boolean var3 = var0.isAutoRequestFocus();
    boolean var4 = var0.isResizable();
    javax.swing.JLayeredPane var5 = var0.getLayeredPane();
    java.awt.Component var6 = var0.getFocusOwner();
    var0.setLocation(31, 0);
    boolean var10 = var0.isFocused();
    java.awt.peer.ComponentPeer var11 = var0.getPeer();
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var1);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var2);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var3 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var4 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var5);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var6);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var10 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var11);

  }

  public void test437() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest1.test437");


    com.allenstudio.ir.ui.NoteListsTabPane var0 = new com.allenstudio.ir.ui.NoteListsTabPane();
    com.allenstudio.ir.ui.Toolbar var1 = new com.allenstudio.ir.ui.Toolbar();
    boolean var2 = var1.isFloatable();
    var1.show();
    java.awt.image.ColorModel var4 = var1.getColorModel();
    boolean var5 = var1.isFocusCycleRoot();
    com.allenstudio.ir.ui.DatePickerPane var6 = new com.allenstudio.ir.ui.DatePickerPane();
    var6.transferFocus();
    com.allenstudio.ir.ui.Toolbar var8 = new com.allenstudio.ir.ui.Toolbar();
    java.awt.image.ColorModel var9 = var8.getColorModel();
    var8.setEnabled(true);
    java.awt.Component var13 = var8.getComponentAtIndex(1);
    boolean var14 = var8.isFloatable();
    var6.setContent((java.awt.Component)var8);
    java.awt.Dimension var16 = var6.size();
    com.allenstudio.ir.ui.Toolbar var17 = new com.allenstudio.ir.ui.Toolbar();
    boolean var18 = var17.isFloatable();
    var17.show();
    boolean var20 = var17.isRequestFocusEnabled();
    java.awt.Dimension var21 = var17.minimumSize();
    var6.setToolBar((javax.swing.JToolBar)var17);
    java.awt.Image var25 = var6.createImage(10, (-1));
    var0.add((java.awt.Component)var1, (java.lang.Object)10);
    com.allenstudio.ir.ui.NoteListsTabPane var27 = new com.allenstudio.ir.ui.NoteListsTabPane();
    com.allenstudio.ir.ui.Toolbar var28 = new com.allenstudio.ir.ui.Toolbar();
    boolean var29 = var28.isFloatable();
    var28.show();
    java.awt.image.ColorModel var31 = var28.getColorModel();
    boolean var32 = var28.isFocusCycleRoot();
    com.allenstudio.ir.ui.DatePickerPane var33 = new com.allenstudio.ir.ui.DatePickerPane();
    var33.transferFocus();
    com.allenstudio.ir.ui.Toolbar var35 = new com.allenstudio.ir.ui.Toolbar();
    java.awt.image.ColorModel var36 = var35.getColorModel();
    var35.setEnabled(true);
    java.awt.Component var40 = var35.getComponentAtIndex(1);
    boolean var41 = var35.isFloatable();
    var33.setContent((java.awt.Component)var35);
    java.awt.Dimension var43 = var33.size();
    com.allenstudio.ir.ui.Toolbar var44 = new com.allenstudio.ir.ui.Toolbar();
    boolean var45 = var44.isFloatable();
    var44.show();
    boolean var47 = var44.isRequestFocusEnabled();
    java.awt.Dimension var48 = var44.minimumSize();
    var33.setToolBar((javax.swing.JToolBar)var44);
    java.awt.Image var52 = var33.createImage(10, (-1));
    var27.add((java.awt.Component)var28, (java.lang.Object)10);
    com.allenstudio.ir.ui.Toolbar var54 = new com.allenstudio.ir.ui.Toolbar();
    boolean var55 = var54.isFloatable();
    java.awt.Component var57 = var54.getComponentAtIndex(10);
    boolean var58 = var54.isLightweight();
    java.awt.Component var59 = var27.add((java.awt.Component)var54);
    com.allenstudio.ir.ui.NoteListsTabPane var60 = new com.allenstudio.ir.ui.NoteListsTabPane();
    com.allenstudio.ir.ui.Toolbar var61 = new com.allenstudio.ir.ui.Toolbar();
    boolean var62 = var61.isFloatable();
    var61.show();
    java.awt.image.ColorModel var64 = var61.getColorModel();
    boolean var65 = var61.isFocusCycleRoot();
    com.allenstudio.ir.ui.DatePickerPane var66 = new com.allenstudio.ir.ui.DatePickerPane();
    var66.transferFocus();
    com.allenstudio.ir.ui.Toolbar var68 = new com.allenstudio.ir.ui.Toolbar();
    java.awt.image.ColorModel var69 = var68.getColorModel();
    var68.setEnabled(true);
    java.awt.Component var73 = var68.getComponentAtIndex(1);
    boolean var74 = var68.isFloatable();
    var66.setContent((java.awt.Component)var68);
    java.awt.Dimension var76 = var66.size();
    com.allenstudio.ir.ui.Toolbar var77 = new com.allenstudio.ir.ui.Toolbar();
    boolean var78 = var77.isFloatable();
    var77.show();
    boolean var80 = var77.isRequestFocusEnabled();
    java.awt.Dimension var81 = var77.minimumSize();
    var66.setToolBar((javax.swing.JToolBar)var77);
    java.awt.Image var85 = var66.createImage(10, (-1));
    var60.add((java.awt.Component)var61, (java.lang.Object)10);
    var60.setSelectedIndex(1);
    javax.swing.plaf.TabbedPaneUI var89 = var60.getUI();
    javax.swing.SingleSelectionModel var90 = var60.getModel();
    var27.setModel(var90);
    var0.setModel(var90);
    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      var0.setSelectedIndex(4);
      fail("Expected exception of type java.lang.IndexOutOfBoundsException");
    } catch (java.lang.IndexOutOfBoundsException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var2 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var4);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var5 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var9);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var13);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var14 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var16);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var18 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var20 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var21);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var25);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var29 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var31);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var32 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var36);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var40);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var41 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var43);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var45 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var47 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var48);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var52);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var55 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var57);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var58 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var59);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var62 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var64);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var65 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var69);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var73);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var74 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var76);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var78 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var80 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var81);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var85);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var89);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var90);

  }

  public void test438() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest1.test438");


    com.allenstudio.ir.ui.StatusBar var0 = new com.allenstudio.ir.ui.StatusBar();
    int var1 = var0.getY();
    javax.swing.JToolTip var2 = var0.createToolTip();
    float var3 = var2.getAlignmentY();
    java.awt.Color var4 = var2.getForeground();
    int var5 = var2.getDebugGraphicsOptions();
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var1 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var2);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var3 == 0.5f);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var4);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var5 == 0);

  }

  public void test439() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest1.test439");


    com.allenstudio.ir.ui.DatePickerPane var0 = new com.allenstudio.ir.ui.DatePickerPane();
    var0.transferFocus();
    com.allenstudio.ir.ui.Toolbar var2 = new com.allenstudio.ir.ui.Toolbar();
    java.awt.image.ColorModel var3 = var2.getColorModel();
    var2.setEnabled(true);
    java.awt.Component var7 = var2.getComponentAtIndex(1);
    boolean var8 = var2.isFloatable();
    var0.setContent((java.awt.Component)var2);
    var0.setSelected(true);
    boolean var12 = var0.isFocusable();
    com.allenstudio.ir.ui.StatusBar var13 = new com.allenstudio.ir.ui.StatusBar();
    com.allenstudio.ir.core.plugins.CommonNote var14 = new com.allenstudio.ir.core.plugins.CommonNote();
    var14.setFocusTraversalPolicyProvider(false);
    var13.remove((java.awt.Component)var14);
    var14.setFeature("ToolBarUI");
    javax.swing.Icon var20 = var14.getIcon();
    var0.setFrameIcon(var20);
    java.util.GregorianCalendar var22 = var0.reportSelectedDate();
    java.awt.Color var24 = var0.getTextForeground(false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var3);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var7);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var8 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var12 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var20);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var22);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var24);

  }

  public void test440() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest1.test440");


    com.allenstudio.ir.ui.NoteList var0 = new com.allenstudio.ir.ui.NoteList();
    com.allenstudio.ir.ui.MainFrame var1 = new com.allenstudio.ir.ui.MainFrame();
    java.lang.String var2 = var1.getWarningString();
    java.awt.Rectangle var3 = var1.getMaximizedBounds();
    java.awt.MenuBar var4 = var1.getMenuBar();
    com.allenstudio.ir.core.plugins.CommonNote var5 = new com.allenstudio.ir.core.plugins.CommonNote();
    var5.resize(0, 1);
    com.allenstudio.ir.ui.NoteListCell var9 = new com.allenstudio.ir.ui.NoteListCell((com.allenstudio.ir.core.plugins.AbstractNote)var5);
    com.allenstudio.ir.ui.StatusBar var10 = new com.allenstudio.ir.ui.StatusBar();
    boolean var11 = var10.isBackgroundSet();
    boolean var14 = var10.contains(10, 100);
    var10.revalidate();
    javax.swing.JToolTip var16 = var10.createToolTip();
    com.allenstudio.ir.ui.StatusBar var17 = new com.allenstudio.ir.ui.StatusBar();
    javax.swing.JRootPane var18 = var17.getRootPane();
    java.awt.Point var19 = var17.location();
    com.allenstudio.ir.ui.StatusBar var20 = new com.allenstudio.ir.ui.StatusBar();
    javax.swing.JRootPane var21 = var20.getRootPane();
    java.awt.Point var22 = var20.location();
    com.allenstudio.ir.ui.Toolbar var23 = new com.allenstudio.ir.ui.Toolbar();
    boolean var24 = var23.isFloatable();
    java.awt.Component var26 = var23.getComponentAtIndex(10);
    java.lang.Object var27 = var20.getClientProperty((java.lang.Object)10);
    java.awt.Dimension var28 = var20.getMaximumSize();
    var17.setMinimumSize(var28);
    java.awt.Rectangle var30 = var17.getBounds();
    var10.scrollRectToVisible(var30);
    var5.repaint(var30);
    var1.setMaximizedBounds(var30);
    int var36 = var0.getScrollableBlockIncrement(var30, 1, 4);
    var0.requestFocus();
    com.allenstudio.ir.core.plugins.CommonNote var38 = new com.allenstudio.ir.core.plugins.CommonNote();
    var38.resize(0, 1);
    com.allenstudio.ir.ui.NoteListCell var42 = new com.allenstudio.ir.ui.NoteListCell((com.allenstudio.ir.core.plugins.AbstractNote)var38);
    int var43 = var42.getIndexInList();
    java.awt.Dimension var44 = var42.getMaximumSize();
    java.awt.LayoutManager var45 = var42.getLayout();
    var0.addCell(var42);
    com.allenstudio.ir.core.plugins.CommonNote var47 = new com.allenstudio.ir.core.plugins.CommonNote();
    var47.resize(0, 1);
    com.allenstudio.ir.ui.NoteListCell var51 = new com.allenstudio.ir.ui.NoteListCell((com.allenstudio.ir.core.plugins.AbstractNote)var47);
    int var52 = var51.getIndexInList();
    java.awt.Dimension var53 = var51.getMaximumSize();
    int var54 = var51.getIndexInList();
    var0.addCell(var51);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var2);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var3);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var4);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var11 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var14 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var16);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var18);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var19);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var21);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var22);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var24 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var26);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var27);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var28);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var30);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var36 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var43 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var44);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var45);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var52 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var53);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var54 == (-1));

  }

  public void test441() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest1.test441");


    com.allenstudio.ir.ui.MainFrame var0 = new com.allenstudio.ir.ui.MainFrame();
    boolean var1 = var0.isShowing();
    int var2 = var0.countComponents();
    com.allenstudio.ir.ui.StatusBar var3 = new com.allenstudio.ir.ui.StatusBar();
    var3.enable();
    com.allenstudio.ir.ui.StatusBar var5 = new com.allenstudio.ir.ui.StatusBar();
    var5.enable();
    boolean var7 = var5.isFocusOwner();
    var5.firePropertyChange("hi!", 10L, 0L);
    var5.layout();
    var5.removeAll();
    com.allenstudio.ir.ui.StatusBar var14 = new com.allenstudio.ir.ui.StatusBar();
    javax.swing.JRootPane var15 = var14.getRootPane();
    java.awt.Point var16 = var14.location();
    java.awt.Point var17 = var5.getLocation(var16);
    var3.setLocation(var17);
    var0.setLocation(var17);
    java.awt.Container var20 = var0.getContentPane();
    java.awt.event.WindowFocusListener[] var21 = var0.getWindowFocusListeners();
    var0.setFocusCycleRoot(true);
    javax.swing.JMenuBar var24 = var0.getJMenuBar();
    boolean var25 = var0.isActive();
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var1 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var2 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var7 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var15);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var16);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var17);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var20);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var21);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var24);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var25 == false);

  }

  public void test442() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest1.test442");


    com.allenstudio.ir.ui.StatusBar var0 = new com.allenstudio.ir.ui.StatusBar();
    var0.enable();
    boolean var2 = var0.isFocusOwner();
    var0.firePropertyChange("hi!", 10L, 0L);
    int var7 = var0.getWidth();
    boolean var9 = var0.requestFocus(true);
    java.awt.image.VolatileImage var12 = var0.createVolatileImage(0, (-1));
    com.allenstudio.ir.ui.Toolbar var13 = new com.allenstudio.ir.ui.Toolbar();
    java.awt.image.ColorModel var14 = var13.getColorModel();
    var13.setEnabled(true);
    java.awt.Component var18 = var13.getComponentAtIndex(1);
    boolean var19 = var13.isFloatable();
    java.lang.String var20 = var13.toString();
    com.allenstudio.ir.ui.Toolbar var21 = new com.allenstudio.ir.ui.Toolbar();
    java.awt.event.MouseWheelListener[] var22 = var21.getMouseWheelListeners();
    java.awt.event.MouseListener[] var23 = var21.getMouseListeners();
    var21.firePropertyChange("", false, true);
    var13.add((java.awt.Component)var21, (java.lang.Object)10.0f);
    java.awt.event.HierarchyBoundsListener[] var30 = var21.getHierarchyBoundsListeners();
    com.allenstudio.ir.ui.Toolbar var31 = new com.allenstudio.ir.ui.Toolbar();
    boolean var32 = var31.isFloatable();
    var31.show();
    boolean var34 = var31.isRequestFocusEnabled();
    java.awt.Dimension var35 = var31.minimumSize();
    java.awt.Dimension var36 = var31.getMinimumSize();
    var21.resize(var36);
    java.awt.Dimension var38 = var0.getSize(var36);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var2 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var7 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var9 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var12);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var14);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var18);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var19 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var22);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var23);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var30);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var32 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var34 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var35);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var36);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var38);

  }

  public void test443() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest1.test443");


    com.allenstudio.ir.ui.calendar.DateChooser var0 = new com.allenstudio.ir.ui.calendar.DateChooser();
    var0.setSize(0, (-1));
    com.allenstudio.ir.event.DateChooserListener var4 = var0.getDateChooserListener();
    com.allenstudio.ir.event.DateChooserListener var5 = var0.getDateChooserListener();
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var4);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var5);

  }

  public void test444() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest1.test444");


    com.allenstudio.ir.ui.DatePickerPane var0 = new com.allenstudio.ir.ui.DatePickerPane();
    var0.transferFocus();
    com.allenstudio.ir.ui.Toolbar var2 = new com.allenstudio.ir.ui.Toolbar();
    java.awt.image.ColorModel var3 = var2.getColorModel();
    var2.setEnabled(true);
    java.awt.Component var7 = var2.getComponentAtIndex(1);
    boolean var8 = var2.isFloatable();
    var0.setContent((java.awt.Component)var2);
    java.awt.Font var10 = var0.getFont();
    java.awt.Component.BaselineResizeBehavior var11 = var0.getBaselineResizeBehavior();
    com.allenstudio.ir.ui.MainFrame var12 = new com.allenstudio.ir.ui.MainFrame();
    java.lang.String var13 = var12.getWarningString();
    java.awt.Rectangle var14 = var12.getMaximizedBounds();
    java.awt.MenuBar var15 = var12.getMenuBar();
    com.allenstudio.ir.ui.NoteListsTabPane var16 = new com.allenstudio.ir.ui.NoteListsTabPane();
    com.allenstudio.ir.ui.Toolbar var17 = new com.allenstudio.ir.ui.Toolbar();
    boolean var18 = var17.isFloatable();
    var17.show();
    java.awt.image.ColorModel var20 = var17.getColorModel();
    boolean var21 = var17.isFocusCycleRoot();
    com.allenstudio.ir.ui.DatePickerPane var22 = new com.allenstudio.ir.ui.DatePickerPane();
    var22.transferFocus();
    com.allenstudio.ir.ui.Toolbar var24 = new com.allenstudio.ir.ui.Toolbar();
    java.awt.image.ColorModel var25 = var24.getColorModel();
    var24.setEnabled(true);
    java.awt.Component var29 = var24.getComponentAtIndex(1);
    boolean var30 = var24.isFloatable();
    var22.setContent((java.awt.Component)var24);
    java.awt.Dimension var32 = var22.size();
    com.allenstudio.ir.ui.Toolbar var33 = new com.allenstudio.ir.ui.Toolbar();
    boolean var34 = var33.isFloatable();
    var33.show();
    boolean var36 = var33.isRequestFocusEnabled();
    java.awt.Dimension var37 = var33.minimumSize();
    var22.setToolBar((javax.swing.JToolBar)var33);
    java.awt.Image var41 = var22.createImage(10, (-1));
    var16.add((java.awt.Component)var17, (java.lang.Object)10);
    var12.widgetChanged((com.allenstudio.ir.core.InspirentoWidget)var16);
    java.awt.event.ComponentListener[] var44 = var16.getComponentListeners();
    com.allenstudio.ir.ui.calendar.MonthlyCalendar var45 = new com.allenstudio.ir.ui.calendar.MonthlyCalendar();
    java.awt.Color var46 = var45.getDateBackground();
    var45.setYearMonth(1, (-1));
    java.util.Calendar var50 = var45.getSelectedDate();
    var16.remove((java.awt.Component)var45);
    java.beans.VetoableChangeListener[] var52 = var45.getVetoableChangeListeners();
    boolean var53 = var45.getWeekStartOnSunday();
    var0.removeMouseMotionListener((java.awt.event.MouseMotionListener)var45);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var3);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var7);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var8 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var10);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var11);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var13);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var14);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var15);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var18 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var20);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var21 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var25);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var29);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var30 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var32);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var34 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var36 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var37);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var41);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var44);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var46);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var50);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var52);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var53 == true);

  }

  public void test445() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest1.test445");


    com.allenstudio.ir.ui.DatePickerPane var0 = new com.allenstudio.ir.ui.DatePickerPane();
    java.awt.Container var1 = var0.getContentPane();
    com.allenstudio.ir.ui.StatusBar var2 = new com.allenstudio.ir.ui.StatusBar();
    boolean var3 = var2.isBackgroundSet();
    var2.setDebugGraphicsOptions(0);
    var2.firePropertyChange("hi!", 100, 10);
    var2.firePropertyChange("ToolBarUI", false, true);
    com.allenstudio.ir.ui.DatePickerPane var14 = new com.allenstudio.ir.ui.DatePickerPane();
    javax.swing.KeyStroke[] var15 = var14.getRegisteredKeyStrokes();
    com.allenstudio.ir.ui.Toolbar var16 = new com.allenstudio.ir.ui.Toolbar();
    java.awt.image.ColorModel var17 = var16.getColorModel();
    java.awt.im.InputContext var18 = var16.getInputContext();
    java.awt.Component var20 = var16.getComponentAtIndex(0);
    var14.setToolBar((javax.swing.JToolBar)var16);
    boolean var23 = var14.areFocusTraversalKeysSet(0);
    java.awt.Rectangle var24 = var14.bounds();
    var2.scrollRectToVisible(var24);
    java.awt.Rectangle var26 = var0.getBounds(var24);
    com.allenstudio.ir.ui.MainFrame var27 = new com.allenstudio.ir.ui.MainFrame();
    boolean var28 = var27.isShowing();
    var0.remove((java.awt.Component)var27);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var3 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var15);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var17);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var18);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var20);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var23 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var24);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var26);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var28 == false);

  }

  public void test446() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest1.test446");


    com.allenstudio.ir.ui.NoteListsTabPane var0 = new com.allenstudio.ir.ui.NoteListsTabPane();
    com.allenstudio.ir.ui.Toolbar var1 = new com.allenstudio.ir.ui.Toolbar();
    boolean var2 = var1.isFloatable();
    var1.show();
    java.awt.image.ColorModel var4 = var1.getColorModel();
    boolean var5 = var1.isFocusCycleRoot();
    com.allenstudio.ir.ui.DatePickerPane var6 = new com.allenstudio.ir.ui.DatePickerPane();
    var6.transferFocus();
    com.allenstudio.ir.ui.Toolbar var8 = new com.allenstudio.ir.ui.Toolbar();
    java.awt.image.ColorModel var9 = var8.getColorModel();
    var8.setEnabled(true);
    java.awt.Component var13 = var8.getComponentAtIndex(1);
    boolean var14 = var8.isFloatable();
    var6.setContent((java.awt.Component)var8);
    java.awt.Dimension var16 = var6.size();
    com.allenstudio.ir.ui.Toolbar var17 = new com.allenstudio.ir.ui.Toolbar();
    boolean var18 = var17.isFloatable();
    var17.show();
    boolean var20 = var17.isRequestFocusEnabled();
    java.awt.Dimension var21 = var17.minimumSize();
    var6.setToolBar((javax.swing.JToolBar)var17);
    java.awt.Image var25 = var6.createImage(10, (-1));
    var0.add((java.awt.Component)var1, (java.lang.Object)10);
    com.allenstudio.ir.ui.DatePickerPane var27 = new com.allenstudio.ir.ui.DatePickerPane();
    java.lang.String var28 = var27.getTitle();
    java.awt.dnd.DropTarget var29 = var27.getDropTarget();
    com.allenstudio.ir.util.XmlElement var30 = new com.allenstudio.ir.util.XmlElement();
    boolean var31 = var30.hasChanged();
    var0.add((java.awt.Component)var27, (java.lang.Object)var31, (-1));
    int var34 = var0.getTabPlacement();
    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      var0.removeTabAt(10);
      fail("Expected exception of type java.lang.IndexOutOfBoundsException");
    } catch (java.lang.IndexOutOfBoundsException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var2 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var4);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var5 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var9);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var13);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var14 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var16);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var18 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var20 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var21);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var25);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var28 + "' != '" + "Date Picker"+ "'", var28.equals("Date Picker"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var29);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var31 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var34 == 1);

  }

  public void test447() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest1.test447");


    com.allenstudio.ir.ui.MainFrame var0 = new com.allenstudio.ir.ui.MainFrame();
    java.lang.String var1 = var0.getWarningString();
    java.awt.Rectangle var2 = var0.getMaximizedBounds();
    java.awt.MenuBar var3 = var0.getMenuBar();
    com.allenstudio.ir.ui.NoteListsTabPane var4 = new com.allenstudio.ir.ui.NoteListsTabPane();
    var0.widgetChanged((com.allenstudio.ir.core.InspirentoWidget)var4);
    var0.dispose();
    var0.setLocation(0, 0);
    boolean var10 = var0.isFocusTraversalPolicySet();
    java.awt.Graphics var11 = var0.getGraphics();
    int var12 = var0.getCursorType();
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var1);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var2);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var3);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var10 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var11);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var12 == 0);

  }

  public void test448() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest1.test448");


    com.allenstudio.ir.ui.DatePickerPane var0 = new com.allenstudio.ir.ui.DatePickerPane();
    java.lang.String var1 = var0.getUIClassID();
    com.allenstudio.ir.ui.StatusBar var2 = new com.allenstudio.ir.ui.StatusBar();
    int var3 = var2.getY();
    javax.swing.JToolTip var4 = var2.createToolTip();
    float var5 = var4.getAlignmentY();
    java.awt.Color var6 = var4.getForeground();
    var0.setBackground(var6);
    boolean var8 = var0.isPaintingTile();
    com.allenstudio.ir.ui.StatusBar var9 = new com.allenstudio.ir.ui.StatusBar();
    var9.enable();
    boolean var11 = var9.isFocusOwner();
    var9.firePropertyChange("hi!", 10L, 0L);
    int var16 = var9.getWidth();
    boolean var18 = var9.requestFocus(true);
    java.awt.image.VolatileImage var21 = var9.createVolatileImage(0, (-1));
    com.allenstudio.ir.util.XmlElement var23 = new com.allenstudio.ir.util.XmlElement("");
    com.allenstudio.ir.ui.Toolbar var24 = new com.allenstudio.ir.ui.Toolbar();
    java.awt.image.ColorModel var25 = var24.getColorModel();
    java.awt.im.InputContext var26 = var24.getInputContext();
    java.awt.Component var28 = var24.getComponent(0);
    boolean var31 = var24.contains((-1), 1);
    var23.notifyObservers((java.lang.Object)var24);
    var24.resetKeyboardActions();
    var0.putClientProperty((java.lang.Object)0, (java.lang.Object)var24);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var1 + "' != '" + "PanelUI"+ "'", var1.equals("PanelUI"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var3 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var4);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var5 == 0.5f);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var6);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var8 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var11 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var16 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var18 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var21);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var25);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var26);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var28);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var31 == false);

  }

  public void test449() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest1.test449");


    com.allenstudio.ir.ui.NoteListsTabPane var0 = new com.allenstudio.ir.ui.NoteListsTabPane();
    com.allenstudio.ir.ui.Toolbar var1 = new com.allenstudio.ir.ui.Toolbar();
    boolean var2 = var1.isFloatable();
    var1.show();
    java.awt.image.ColorModel var4 = var1.getColorModel();
    boolean var5 = var1.isFocusCycleRoot();
    com.allenstudio.ir.ui.DatePickerPane var6 = new com.allenstudio.ir.ui.DatePickerPane();
    var6.transferFocus();
    com.allenstudio.ir.ui.Toolbar var8 = new com.allenstudio.ir.ui.Toolbar();
    java.awt.image.ColorModel var9 = var8.getColorModel();
    var8.setEnabled(true);
    java.awt.Component var13 = var8.getComponentAtIndex(1);
    boolean var14 = var8.isFloatable();
    var6.setContent((java.awt.Component)var8);
    java.awt.Dimension var16 = var6.size();
    com.allenstudio.ir.ui.Toolbar var17 = new com.allenstudio.ir.ui.Toolbar();
    boolean var18 = var17.isFloatable();
    var17.show();
    boolean var20 = var17.isRequestFocusEnabled();
    java.awt.Dimension var21 = var17.minimumSize();
    var6.setToolBar((javax.swing.JToolBar)var17);
    java.awt.Image var25 = var6.createImage(10, (-1));
    var0.add((java.awt.Component)var1, (java.lang.Object)10);
    com.allenstudio.ir.ui.DatePickerPane var27 = new com.allenstudio.ir.ui.DatePickerPane();
    java.lang.String var28 = var27.getTitle();
    java.awt.dnd.DropTarget var29 = var27.getDropTarget();
    com.allenstudio.ir.util.XmlElement var30 = new com.allenstudio.ir.util.XmlElement();
    boolean var31 = var30.hasChanged();
    var0.add((java.awt.Component)var27, (java.lang.Object)var31, (-1));
    com.allenstudio.ir.ui.NoteListsTabPane var34 = new com.allenstudio.ir.ui.NoteListsTabPane();
    com.allenstudio.ir.ui.Toolbar var35 = new com.allenstudio.ir.ui.Toolbar();
    boolean var36 = var35.isFloatable();
    var35.show();
    java.awt.image.ColorModel var38 = var35.getColorModel();
    boolean var39 = var35.isFocusCycleRoot();
    com.allenstudio.ir.ui.DatePickerPane var40 = new com.allenstudio.ir.ui.DatePickerPane();
    var40.transferFocus();
    com.allenstudio.ir.ui.Toolbar var42 = new com.allenstudio.ir.ui.Toolbar();
    java.awt.image.ColorModel var43 = var42.getColorModel();
    var42.setEnabled(true);
    java.awt.Component var47 = var42.getComponentAtIndex(1);
    boolean var48 = var42.isFloatable();
    var40.setContent((java.awt.Component)var42);
    java.awt.Dimension var50 = var40.size();
    com.allenstudio.ir.ui.Toolbar var51 = new com.allenstudio.ir.ui.Toolbar();
    boolean var52 = var51.isFloatable();
    var51.show();
    boolean var54 = var51.isRequestFocusEnabled();
    java.awt.Dimension var55 = var51.minimumSize();
    var40.setToolBar((javax.swing.JToolBar)var51);
    java.awt.Image var59 = var40.createImage(10, (-1));
    var34.add((java.awt.Component)var35, (java.lang.Object)10);
    com.allenstudio.ir.ui.Toolbar var61 = new com.allenstudio.ir.ui.Toolbar();
    java.awt.image.ColorModel var62 = var61.getColorModel();
    var61.setEnabled(true);
    var34.add((java.awt.Component)var61, (java.lang.Object)100L, 0);
    java.awt.Component var69 = var0.add((java.awt.Component)var34, 1);
    java.awt.Rectangle var70 = var0.bounds();
    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      var0.setToolTipTextAt(761, " ");
      fail("Expected exception of type java.lang.IndexOutOfBoundsException");
    } catch (java.lang.IndexOutOfBoundsException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var2 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var4);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var5 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var9);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var13);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var14 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var16);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var18 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var20 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var21);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var25);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var28 + "' != '" + "Date Picker"+ "'", var28.equals("Date Picker"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var29);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var31 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var36 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var38);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var39 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var43);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var47);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var48 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var50);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var52 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var54 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var55);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var59);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var62);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var69);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var70);

  }

  public void test450() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest1.test450");


    com.allenstudio.ir.ui.DatePickerPane var0 = new com.allenstudio.ir.ui.DatePickerPane();
    java.lang.String var1 = var0.getUIClassID();
    com.allenstudio.ir.ui.StatusBar var2 = new com.allenstudio.ir.ui.StatusBar();
    int var3 = var2.getY();
    javax.swing.JToolTip var4 = var2.createToolTip();
    float var5 = var4.getAlignmentY();
    java.awt.Color var6 = var4.getForeground();
    var0.setBackground(var6);
    var0.move(10, 10);
    com.allenstudio.ir.ui.Toolbar var11 = new com.allenstudio.ir.ui.Toolbar();
    java.awt.image.ColorModel var12 = var11.getColorModel();
    java.awt.im.InputContext var13 = var11.getInputContext();
    java.awt.Component var15 = var11.getComponentAtIndex(0);
    var0.setToolBar((javax.swing.JToolBar)var11);
    com.allenstudio.ir.util.XmlElement var18 = new com.allenstudio.ir.util.XmlElement();
    com.allenstudio.ir.util.XmlElement var20 = var18.addSubElement("hi!");
    com.allenstudio.ir.util.XmlElement var23 = var20.addSubElement("", "hi!");
    java.util.Hashtable var24 = var23.getAttributes();
    com.allenstudio.ir.ui.MainFrame var25 = new com.allenstudio.ir.ui.MainFrame();
    java.lang.String var26 = var25.getWarningString();
    java.awt.Rectangle var27 = var25.getMaximizedBounds();
    java.awt.MenuBar var28 = var25.getMenuBar();
    com.allenstudio.ir.ui.NoteListsTabPane var29 = new com.allenstudio.ir.ui.NoteListsTabPane();
    var25.widgetChanged((com.allenstudio.ir.core.InspirentoWidget)var29);
    var25.dispose();
    java.lang.Object var32 = var24.get((java.lang.Object)var25);
    java.util.Set var33 = var24.entrySet();
    var0.setFocusTraversalKeys(0, var33);
    java.lang.String var35 = var0.getUIClassID();
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var1 + "' != '" + "PanelUI"+ "'", var1.equals("PanelUI"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var3 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var4);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var5 == 0.5f);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var6);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var12);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var13);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var15);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var20);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var23);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var24);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var26);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var27);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var28);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var32);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var33);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var35 + "' != '" + "PanelUI"+ "'", var35.equals("PanelUI"));

  }

  public void test451() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest1.test451");


    com.allenstudio.ir.ui.MainFrame var0 = new com.allenstudio.ir.ui.MainFrame();
    boolean var1 = var0.isShowing();
    var0.setAutoRequestFocus(false);
    var0.setTitle("PanelUI");
    var0.setVisible(true);
    java.awt.Image var8 = var0.getIconImage();
    com.allenstudio.ir.ui.StatusBar var9 = new com.allenstudio.ir.ui.StatusBar();
    int var10 = var9.getY();
    boolean var11 = var9.isLightweight();
    java.awt.Dimension var12 = var9.getMaximumSize();
    boolean var13 = var9.getAutoscrolls();
    var0.remove((java.awt.Component)var9);
    java.awt.Component var15 = var0.getMostRecentFocusOwner();
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var1 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var8);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var10 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var11 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var12);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var13 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var15);

  }

  public void test452() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest1.test452");


    com.allenstudio.ir.util.XmlElement var0 = new com.allenstudio.ir.util.XmlElement();
    com.allenstudio.ir.util.XmlElement var2 = var0.addSubElement("hi!");
    com.allenstudio.ir.util.XmlElement var3 = new com.allenstudio.ir.util.XmlElement();
    com.allenstudio.ir.util.XmlElement var5 = var3.addSubElement("hi!");
    var5.notifyObservers((java.lang.Object)(byte)1);
    var0.append(var5);
    com.allenstudio.ir.util.XmlElement var9 = new com.allenstudio.ir.util.XmlElement();
    com.allenstudio.ir.util.XmlElement var11 = var9.addSubElement("hi!");
    java.lang.String var13 = var9.getAttribute("C:\\boot.ini");
    com.allenstudio.ir.util.XmlElement var14 = var5.addSubElement(var9);
    com.allenstudio.ir.util.XmlElement var15 = var14.getParent();
    com.allenstudio.ir.util.XmlIO var16 = new com.allenstudio.ir.util.XmlIO(var14);
    var16.endDocument();
    com.allenstudio.ir.util.XmlElement var18 = var16.getRoot();
    var16.endDocument();
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var2);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var5);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var11);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var13);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var14);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var15);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var18);

  }

  public void test453() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest1.test453");


    com.allenstudio.ir.ui.MainFrame var0 = new com.allenstudio.ir.ui.MainFrame();
    java.lang.String var1 = var0.getWarningString();
    java.awt.Rectangle var2 = var0.getMaximizedBounds();
    boolean var3 = var0.isLocationByPlatform();
    javax.accessibility.AccessibleContext var4 = var0.getAccessibleContext();
    var0.setResizable(false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var1);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var2);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var3 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var4);

  }

  public void test454() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest1.test454");


    com.allenstudio.ir.ui.MainFrame var0 = new com.allenstudio.ir.ui.MainFrame();
    boolean var1 = var0.isShowing();
    int var2 = var0.countComponents();
    var0.setAutoRequestFocus(false);
    javax.swing.JMenuBar var5 = var0.getJMenuBar();
    boolean var6 = var5.isBorderPainted();
    var5.menuSelectionChanged(true);
    com.allenstudio.ir.ui.MainFrame var9 = new com.allenstudio.ir.ui.MainFrame();
    boolean var10 = var9.isShowing();
    int var11 = var9.countComponents();
    var9.setAutoRequestFocus(false);
    javax.swing.JMenuBar var14 = var9.getJMenuBar();
    boolean var15 = var14.isBorderPainted();
    var14.updateUI();
    com.allenstudio.ir.ui.DatePickerPane var17 = new com.allenstudio.ir.ui.DatePickerPane();
    var17.transferFocus();
    java.awt.Dimension var19 = var17.getMinimumSize();
    java.awt.Dimension var20 = var14.getSize(var19);
    javax.swing.plaf.MenuBarUI var21 = var14.getUI();
    var5.setUI(var21);
    boolean var23 = var5.isBorderPainted();
    var5.menuSelectionChanged(true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var1 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var2 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var5);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var6 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var10 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var11 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var14);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var15 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var19);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var20);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var21);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var23 == true);

  }

  public void test455() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest1.test455");


    com.allenstudio.ir.core.ConfigurationManager var0 = com.allenstudio.ir.core.ConfigurationManager.getInstance();
    var0.writeBack();
    var0.writeBack();
    java.util.Enumeration var3 = var0.propertyNames();
    var0.readIn();
    java.util.Enumeration var5 = var0.propertyNames();
    var0.readIn();
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var0);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var3);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var5);

  }

  public void test456() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest1.test456");


    com.allenstudio.ir.ui.MainFrame var0 = new com.allenstudio.ir.ui.MainFrame();
    java.lang.String var1 = var0.getWarningString();
    boolean var2 = var0.isAlwaysOnTopSupported();
    java.awt.Color var3 = var0.getBackground();
    com.allenstudio.ir.ui.calendar.MonthlyCalendar var4 = new com.allenstudio.ir.ui.calendar.MonthlyCalendar();
    java.awt.Color var5 = var4.getDateBackground();
    var4.setYearMonth(1, (-1));
    java.util.Calendar var9 = var4.getSelectedDate();
    com.allenstudio.ir.ui.calendar.MonthlyCalendar var10 = new com.allenstudio.ir.ui.calendar.MonthlyCalendar();
    var10.setWeekStartOnSunday(true);
    com.allenstudio.ir.ui.DatePickerPane var13 = new com.allenstudio.ir.ui.DatePickerPane();
    var13.transferFocus();
    com.allenstudio.ir.ui.Toolbar var15 = new com.allenstudio.ir.ui.Toolbar();
    java.awt.image.ColorModel var16 = var15.getColorModel();
    var15.setEnabled(true);
    java.awt.Component var20 = var15.getComponentAtIndex(1);
    boolean var21 = var15.isFloatable();
    var13.setContent((java.awt.Component)var15);
    java.awt.Color var23 = var15.getForeground();
    boolean var24 = var15.requestFocusInWindow();
    javax.swing.ActionMap var25 = var15.getActionMap();
    var15.repaint(1L);
    var15.validate();
    com.allenstudio.ir.core.plugins.CommonNote var29 = new com.allenstudio.ir.core.plugins.CommonNote();
    boolean var30 = var29.isPaintingTile();
    com.allenstudio.ir.ui.Toolbar var31 = new com.allenstudio.ir.ui.Toolbar();
    java.awt.image.ColorModel var32 = var31.getColorModel();
    java.awt.im.InputContext var33 = var31.getInputContext();
    java.awt.Component var35 = var31.getComponent(0);
    java.awt.Font var36 = var31.getFont();
    java.awt.FontMetrics var37 = var29.getFontMetrics(var36);
    java.awt.FontMetrics var38 = var15.getFontMetrics(var36);
    var10.setHeaderFont(var36);
    var10.setYearMonth(100, (-1));
    java.util.Calendar var43 = var10.getSelectedDate();
    com.allenstudio.ir.event.DateChooserEvent var44 = new com.allenstudio.ir.event.DateChooserEvent((java.lang.Object)var3, var9, var43);
    java.util.Calendar var45 = var44.getNewDate();
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var2 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var3);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var5);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var9);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var16);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var20);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var21 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var23);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var24 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var25);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var30 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var32);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var33);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var35);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var36);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var37);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var38);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var43);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var45);

  }

  public void test457() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest1.test457");


    com.allenstudio.ir.ui.NoteListsTabPane var0 = new com.allenstudio.ir.ui.NoteListsTabPane();
    com.allenstudio.ir.ui.Toolbar var1 = new com.allenstudio.ir.ui.Toolbar();
    boolean var2 = var1.isFloatable();
    var1.show();
    java.awt.image.ColorModel var4 = var1.getColorModel();
    boolean var5 = var1.isFocusCycleRoot();
    com.allenstudio.ir.ui.DatePickerPane var6 = new com.allenstudio.ir.ui.DatePickerPane();
    var6.transferFocus();
    com.allenstudio.ir.ui.Toolbar var8 = new com.allenstudio.ir.ui.Toolbar();
    java.awt.image.ColorModel var9 = var8.getColorModel();
    var8.setEnabled(true);
    java.awt.Component var13 = var8.getComponentAtIndex(1);
    boolean var14 = var8.isFloatable();
    var6.setContent((java.awt.Component)var8);
    java.awt.Dimension var16 = var6.size();
    com.allenstudio.ir.ui.Toolbar var17 = new com.allenstudio.ir.ui.Toolbar();
    boolean var18 = var17.isFloatable();
    var17.show();
    boolean var20 = var17.isRequestFocusEnabled();
    java.awt.Dimension var21 = var17.minimumSize();
    var6.setToolBar((javax.swing.JToolBar)var17);
    java.awt.Image var25 = var6.createImage(10, (-1));
    var0.add((java.awt.Component)var1, (java.lang.Object)10);
    var0.setSelectedIndex(1);
    javax.swing.plaf.TabbedPaneUI var29 = var0.getUI();
    javax.swing.SingleSelectionModel var30 = var0.getModel();
    com.allenstudio.ir.ui.calendar.MonthlyCalendar var32 = new com.allenstudio.ir.ui.calendar.MonthlyCalendar();
    java.awt.Color var33 = var32.getDateBackground();
    var0.setForegroundAt(1, var33);
    var0.setToolTipTextAt(0, "C:\\boot.ini");
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var2 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var4);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var5 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var9);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var13);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var14 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var16);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var18 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var20 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var21);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var25);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var29);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var30);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var33);

  }

  public void test458() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest1.test458");


    com.allenstudio.ir.ui.StatusBar var0 = new com.allenstudio.ir.ui.StatusBar();
    int var1 = var0.getY();
    com.allenstudio.ir.ui.StatusBar var2 = new com.allenstudio.ir.ui.StatusBar();
    int var3 = var2.getY();
    javax.swing.JToolTip var4 = var2.createToolTip();
    float var5 = var4.getAlignmentY();
    java.awt.Color var6 = var4.getForeground();
    java.awt.event.MouseMotionListener[] var7 = var4.getMouseMotionListeners();
    com.allenstudio.ir.core.plugins.CommonNote var8 = new com.allenstudio.ir.core.plugins.CommonNote();
    java.lang.String var9 = var8.getFeature();
    com.allenstudio.ir.ui.StatusBar var10 = new com.allenstudio.ir.ui.StatusBar();
    var10.enable();
    boolean var12 = var10.isFocusOwner();
    var10.firePropertyChange("hi!", 10L, 0L);
    var10.layout();
    var10.removeAll();
    com.allenstudio.ir.ui.StatusBar var19 = new com.allenstudio.ir.ui.StatusBar();
    javax.swing.JRootPane var20 = var19.getRootPane();
    java.awt.Point var21 = var19.location();
    java.awt.Component var22 = var10.getComponentAt(var21);
    java.awt.Point var23 = var8.getLocation(var21);
    var8.setOtherInfo("");
    var8.setFeature("Title");
    var8.removeNotify();
    com.allenstudio.ir.util.XmlElement var29 = new com.allenstudio.ir.util.XmlElement();
    com.allenstudio.ir.util.XmlElement var31 = var29.addSubElement("hi!");
    com.allenstudio.ir.util.XmlElement var32 = new com.allenstudio.ir.util.XmlElement();
    com.allenstudio.ir.util.XmlElement var34 = var32.addSubElement("hi!");
    var34.notifyObservers((java.lang.Object)(byte)1);
    var29.append(var34);
    com.allenstudio.ir.util.XmlElement var38 = new com.allenstudio.ir.util.XmlElement();
    com.allenstudio.ir.util.XmlElement var40 = var38.addSubElement("hi!");
    java.lang.String var42 = var38.getAttribute("C:\\boot.ini");
    com.allenstudio.ir.util.XmlElement var43 = var34.addSubElement(var38);
    java.lang.String var46 = var34.getAttribute("Title", "ToolBarUI");
    var4.putClientProperty((java.lang.Object)var8, (java.lang.Object)"Title");
    boolean var48 = var8.isFocusTraversalPolicyProvider();
    java.awt.Point var49 = var8.getLocation();
    java.awt.Component var50 = var0.findComponentAt(var49);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var1 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var3 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var4);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var5 == 0.5f);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var6);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var7);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var9 + "' != '" + "C:\\boot.ini"+ "'", var9.equals("C:\\boot.ini"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var12 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var20);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var21);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var22);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var23);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var31);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var34);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var40);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var42);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var43);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var46 + "' != '" + "ToolBarUI"+ "'", var46.equals("ToolBarUI"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var48 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var49);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var50);

  }

  public void test459() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest1.test459");


    com.allenstudio.ir.ui.StatusBar var0 = new com.allenstudio.ir.ui.StatusBar();
    boolean var1 = var0.isBackgroundSet();
    boolean var4 = var0.contains(10, 100);
    var0.revalidate();
    javax.swing.JToolTip var6 = var0.createToolTip();
    java.lang.Object var7 = var0.getTreeLock();
    com.allenstudio.ir.ui.MainFrame var8 = new com.allenstudio.ir.ui.MainFrame();
    boolean var9 = var8.isShowing();
    java.lang.String var10 = var8.getWarningString();
    var8.setAutoRequestFocus(true);
    java.awt.image.ColorModel var13 = var8.getColorModel();
    var8.setLocation(31, 100);
    com.allenstudio.ir.ui.MainFrame var17 = new com.allenstudio.ir.ui.MainFrame();
    boolean var18 = var17.isShowing();
    int var19 = var17.countComponents();
    var17.setAutoRequestFocus(false);
    javax.swing.JMenuBar var22 = var17.getJMenuBar();
    boolean var23 = var22.isBorderPainted();
    var22.menuSelectionChanged(true);
    com.allenstudio.ir.ui.MainFrame var26 = new com.allenstudio.ir.ui.MainFrame();
    boolean var27 = var26.isShowing();
    int var28 = var26.countComponents();
    var26.setAutoRequestFocus(false);
    javax.swing.JMenuBar var31 = var26.getJMenuBar();
    boolean var32 = var31.isBorderPainted();
    var31.updateUI();
    com.allenstudio.ir.ui.DatePickerPane var34 = new com.allenstudio.ir.ui.DatePickerPane();
    var34.transferFocus();
    java.awt.Dimension var36 = var34.getMinimumSize();
    java.awt.Dimension var37 = var31.getSize(var36);
    javax.swing.plaf.MenuBarUI var38 = var31.getUI();
    var22.setUI(var38);
    boolean var40 = var22.isBorderPainted();
    var22.invalidate();
    java.awt.Cursor var42 = var22.getCursor();
    var8.setCursor(var42);
    var0.setCursor(var42);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var1 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var4 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var6);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var7);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var9 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var10);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var13);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var18 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var19 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var22);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var23 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var27 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var28 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var31);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var32 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var36);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var37);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var38);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var40 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var42);

  }

  public void test460() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest1.test460");


    com.allenstudio.ir.ui.NoteListsTabPane var0 = new com.allenstudio.ir.ui.NoteListsTabPane();
    com.allenstudio.ir.ui.Toolbar var1 = new com.allenstudio.ir.ui.Toolbar();
    boolean var2 = var1.isFloatable();
    var1.show();
    java.awt.image.ColorModel var4 = var1.getColorModel();
    boolean var5 = var1.isFocusCycleRoot();
    com.allenstudio.ir.ui.DatePickerPane var6 = new com.allenstudio.ir.ui.DatePickerPane();
    var6.transferFocus();
    com.allenstudio.ir.ui.Toolbar var8 = new com.allenstudio.ir.ui.Toolbar();
    java.awt.image.ColorModel var9 = var8.getColorModel();
    var8.setEnabled(true);
    java.awt.Component var13 = var8.getComponentAtIndex(1);
    boolean var14 = var8.isFloatable();
    var6.setContent((java.awt.Component)var8);
    java.awt.Dimension var16 = var6.size();
    com.allenstudio.ir.ui.Toolbar var17 = new com.allenstudio.ir.ui.Toolbar();
    boolean var18 = var17.isFloatable();
    var17.show();
    boolean var20 = var17.isRequestFocusEnabled();
    java.awt.Dimension var21 = var17.minimumSize();
    var6.setToolBar((javax.swing.JToolBar)var17);
    java.awt.Image var25 = var6.createImage(10, (-1));
    var0.add((java.awt.Component)var1, (java.lang.Object)10);
    var0.setSelectedIndex(1);
    javax.swing.plaf.TabbedPaneUI var29 = var0.getUI();
    var0.setFocusTraversalKeysEnabled(true);
    com.allenstudio.ir.ui.MainFrame var32 = new com.allenstudio.ir.ui.MainFrame();
    java.awt.Component var33 = var32.getGlassPane();
    java.awt.Component var34 = var0.add(var33);
    java.awt.Component var36 = var0.getTabComponentAt(4);
    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      var0.setDisplayedMnemonicIndexAt(6, 6);
      fail("Expected exception of type java.lang.IndexOutOfBoundsException");
    } catch (java.lang.IndexOutOfBoundsException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var2 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var4);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var5 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var9);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var13);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var14 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var16);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var18 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var20 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var21);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var25);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var29);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var33);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var34);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var36);

  }

  public void test461() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest1.test461");


    com.allenstudio.ir.ui.MainFrame var0 = new com.allenstudio.ir.ui.MainFrame();
    java.lang.String var1 = var0.getWarningString();
    java.awt.Rectangle var2 = var0.getMaximizedBounds();
    java.awt.MenuBar var3 = var0.getMenuBar();
    com.allenstudio.ir.ui.NoteListsTabPane var4 = new com.allenstudio.ir.ui.NoteListsTabPane();
    var0.widgetChanged((com.allenstudio.ir.core.InspirentoWidget)var4);
    var0.toBack();
    java.awt.Color var7 = var0.getForeground();
    com.allenstudio.ir.ui.StatusBar var8 = new com.allenstudio.ir.ui.StatusBar();
    int var9 = var8.getY();
    var8.disable();
    boolean var13 = var8.inside((-1), 100);
    boolean var14 = var8.isMaximumSizeSet();
    boolean var15 = var8.isFontSet();
    java.awt.Dimension var16 = var8.getMinimumSize();
    var0.setMaximumSize(var16);
    java.awt.event.MouseWheelListener[] var18 = var0.getMouseWheelListeners();
    java.awt.Window[] var19 = var0.getOwnedWindows();
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var1);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var2);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var3);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var7);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var9 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var13 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var14 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var15 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var16);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var18);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var19);

  }

  public void test462() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest1.test462");


    com.allenstudio.ir.ui.MainFrame var0 = new com.allenstudio.ir.ui.MainFrame();
    java.lang.String var1 = var0.getWarningString();
    java.awt.Rectangle var2 = var0.getMaximizedBounds();
    java.awt.MenuBar var3 = var0.getMenuBar();
    var0.removeNotify();
    var0.addNotify();
    var0.setState((-1));
    com.allenstudio.ir.ui.MainFrame var8 = new com.allenstudio.ir.ui.MainFrame();
    boolean var9 = var8.isShowing();
    java.lang.String var10 = var8.getWarningString();
    var8.setAutoRequestFocus(true);
    java.awt.image.ColorModel var13 = var8.getColorModel();
    var8.setLocation(31, 100);
    com.allenstudio.ir.ui.MainFrame var17 = new com.allenstudio.ir.ui.MainFrame();
    boolean var18 = var17.isShowing();
    int var19 = var17.countComponents();
    var17.setAutoRequestFocus(false);
    javax.swing.JMenuBar var22 = var17.getJMenuBar();
    boolean var23 = var22.isBorderPainted();
    var22.menuSelectionChanged(true);
    com.allenstudio.ir.ui.MainFrame var26 = new com.allenstudio.ir.ui.MainFrame();
    boolean var27 = var26.isShowing();
    int var28 = var26.countComponents();
    var26.setAutoRequestFocus(false);
    javax.swing.JMenuBar var31 = var26.getJMenuBar();
    boolean var32 = var31.isBorderPainted();
    var31.updateUI();
    com.allenstudio.ir.ui.DatePickerPane var34 = new com.allenstudio.ir.ui.DatePickerPane();
    var34.transferFocus();
    java.awt.Dimension var36 = var34.getMinimumSize();
    java.awt.Dimension var37 = var31.getSize(var36);
    javax.swing.plaf.MenuBarUI var38 = var31.getUI();
    var22.setUI(var38);
    boolean var40 = var22.isBorderPainted();
    var22.invalidate();
    java.awt.Cursor var42 = var22.getCursor();
    var8.setCursor(var42);
    var0.setCursor(var42);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var1);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var2);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var3);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var9 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var10);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var13);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var18 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var19 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var22);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var23 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var27 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var28 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var31);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var32 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var36);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var37);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var38);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var40 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var42);

  }

  public void test463() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest1.test463");


    com.allenstudio.ir.util.XmlElement var0 = new com.allenstudio.ir.util.XmlElement();
    com.allenstudio.ir.util.XmlElement var2 = var0.addSubElement("hi!");
    com.allenstudio.ir.util.XmlElement var3 = new com.allenstudio.ir.util.XmlElement();
    com.allenstudio.ir.util.XmlElement var5 = var3.addSubElement("hi!");
    var5.notifyObservers((java.lang.Object)(byte)1);
    var0.append(var5);
    com.allenstudio.ir.util.XmlElement var9 = new com.allenstudio.ir.util.XmlElement();
    com.allenstudio.ir.util.XmlElement var11 = var9.addSubElement("hi!");
    java.lang.String var13 = var9.getAttribute("C:\\boot.ini");
    com.allenstudio.ir.util.XmlElement var14 = var5.addSubElement(var9);
    com.allenstudio.ir.util.XmlElement var15 = var14.getParent();
    com.allenstudio.ir.util.XmlElement var18 = var14.addSubElement("ToolBarUI", "C:\\boot.ini");
    java.util.Enumeration var19 = var18.getAttributeNames();
    java.lang.String var22 = var18.getAttribute("MenuBarUI", "ToolBarUI");
    com.allenstudio.ir.util.XmlElement.printNode(var18, "ToolBarUI");
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var2);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var5);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var11);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var13);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var14);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var15);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var18);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var19);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var22 + "' != '" + "ToolBarUI"+ "'", var22.equals("ToolBarUI"));

  }

  public void test464() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest1.test464");


    com.allenstudio.ir.ui.NoteListsTabPane var0 = new com.allenstudio.ir.ui.NoteListsTabPane();
    com.allenstudio.ir.ui.Toolbar var1 = new com.allenstudio.ir.ui.Toolbar();
    boolean var2 = var1.isFloatable();
    var1.show();
    java.awt.image.ColorModel var4 = var1.getColorModel();
    boolean var5 = var1.isFocusCycleRoot();
    com.allenstudio.ir.ui.DatePickerPane var6 = new com.allenstudio.ir.ui.DatePickerPane();
    var6.transferFocus();
    com.allenstudio.ir.ui.Toolbar var8 = new com.allenstudio.ir.ui.Toolbar();
    java.awt.image.ColorModel var9 = var8.getColorModel();
    var8.setEnabled(true);
    java.awt.Component var13 = var8.getComponentAtIndex(1);
    boolean var14 = var8.isFloatable();
    var6.setContent((java.awt.Component)var8);
    java.awt.Dimension var16 = var6.size();
    com.allenstudio.ir.ui.Toolbar var17 = new com.allenstudio.ir.ui.Toolbar();
    boolean var18 = var17.isFloatable();
    var17.show();
    boolean var20 = var17.isRequestFocusEnabled();
    java.awt.Dimension var21 = var17.minimumSize();
    var6.setToolBar((javax.swing.JToolBar)var17);
    java.awt.Image var25 = var6.createImage(10, (-1));
    var0.add((java.awt.Component)var1, (java.lang.Object)10);
    var0.setSelectedIndex(1);
    com.allenstudio.ir.ui.NoteListsTabPane var29 = new com.allenstudio.ir.ui.NoteListsTabPane();
    com.allenstudio.ir.ui.Toolbar var30 = new com.allenstudio.ir.ui.Toolbar();
    boolean var31 = var30.isFloatable();
    var30.show();
    java.awt.image.ColorModel var33 = var30.getColorModel();
    boolean var34 = var30.isFocusCycleRoot();
    com.allenstudio.ir.ui.DatePickerPane var35 = new com.allenstudio.ir.ui.DatePickerPane();
    var35.transferFocus();
    com.allenstudio.ir.ui.Toolbar var37 = new com.allenstudio.ir.ui.Toolbar();
    java.awt.image.ColorModel var38 = var37.getColorModel();
    var37.setEnabled(true);
    java.awt.Component var42 = var37.getComponentAtIndex(1);
    boolean var43 = var37.isFloatable();
    var35.setContent((java.awt.Component)var37);
    java.awt.Dimension var45 = var35.size();
    com.allenstudio.ir.ui.Toolbar var46 = new com.allenstudio.ir.ui.Toolbar();
    boolean var47 = var46.isFloatable();
    var46.show();
    boolean var49 = var46.isRequestFocusEnabled();
    java.awt.Dimension var50 = var46.minimumSize();
    var35.setToolBar((javax.swing.JToolBar)var46);
    java.awt.Image var54 = var35.createImage(10, (-1));
    var29.add((java.awt.Component)var30, (java.lang.Object)10);
    var29.setSelectedIndex(1);
    javax.swing.plaf.TabbedPaneUI var58 = var29.getUI();
    var0.setUI(var58);
    com.allenstudio.ir.ui.Toolbar var60 = new com.allenstudio.ir.ui.Toolbar();
    java.awt.image.ColorModel var61 = var60.getColorModel();
    var60.setEnabled(true);
    java.awt.ComponentOrientation var64 = var60.getComponentOrientation();
    boolean var65 = var60.isFloatable();
    java.lang.String var66 = var60.getUIClassID();
    var0.remove((java.awt.Component)var60);
    var60.repaint(100L, 31, 6, 10, 5);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var2 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var4);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var5 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var9);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var13);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var14 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var16);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var18 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var20 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var21);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var25);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var31 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var33);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var34 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var38);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var42);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var43 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var45);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var47 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var49 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var50);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var54);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var58);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var61);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var64);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var65 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var66 + "' != '" + "ToolBarUI"+ "'", var66.equals("ToolBarUI"));

  }

  public void test465() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest1.test465");


    com.allenstudio.ir.ui.MainFrame var0 = new com.allenstudio.ir.ui.MainFrame();
    java.lang.String var1 = var0.getWarningString();
    java.lang.String var2 = var0.getWarningString();
    boolean var3 = var0.isAutoRequestFocus();
    boolean var4 = var0.isResizable();
    javax.swing.JLayeredPane var5 = var0.getLayeredPane();
    javax.swing.TransferHandler var6 = var0.getTransferHandler();
    java.lang.String var7 = var0.getTitle();
    java.awt.event.WindowListener[] var8 = var0.getWindowListeners();
    boolean var9 = var0.isShowing();
    boolean var10 = var0.isResizable();
    java.awt.Dimension var11 = var0.minimumSize();
    java.awt.Toolkit var12 = var0.getToolkit();
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var1);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var2);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var3 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var4 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var5);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var6);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var7 + "' != '" + "Inspirento - alpha 0.86"+ "'", var7.equals("Inspirento - alpha 0.86"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var8);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var9 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var10 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var11);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var12);

  }

  public void test466() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest1.test466");


    com.allenstudio.ir.ui.StatusBar var0 = new com.allenstudio.ir.ui.StatusBar();
    int var1 = var0.getY();
    javax.swing.JToolTip var2 = var0.createToolTip();
    float var3 = var2.getAlignmentY();
    java.awt.Color var4 = var2.getForeground();
    com.allenstudio.ir.ui.StatusBar var5 = new com.allenstudio.ir.ui.StatusBar();
    var5.enable();
    boolean var7 = var5.isFocusOwner();
    var5.firePropertyChange("hi!", 10L, 0L);
    com.allenstudio.ir.ui.StatusBar var12 = new com.allenstudio.ir.ui.StatusBar();
    var12.enable();
    boolean var14 = var12.isFocusOwner();
    var12.firePropertyChange("hi!", 10L, 0L);
    var12.layout();
    var12.removeAll();
    com.allenstudio.ir.ui.StatusBar var21 = new com.allenstudio.ir.ui.StatusBar();
    javax.swing.JRootPane var22 = var21.getRootPane();
    java.awt.Point var23 = var21.location();
    java.awt.Component var24 = var12.getComponentAt(var23);
    java.awt.Component var25 = var5.getComponentAt(var23);
    var2.setLocation(var23);
    java.awt.Dimension var27 = var2.getSize();
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var1 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var2);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var3 == 0.5f);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var4);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var7 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var14 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var22);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var23);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var24);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var25);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var27);

  }

  public void test467() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest1.test467");


    com.allenstudio.ir.ui.MainFrame var0 = new com.allenstudio.ir.ui.MainFrame();
    java.lang.String var1 = var0.getWarningString();
    java.awt.Rectangle var2 = var0.getMaximizedBounds();
    java.awt.MenuBar var3 = var0.getMenuBar();
    com.allenstudio.ir.core.plugins.CommonNote var4 = new com.allenstudio.ir.core.plugins.CommonNote();
    var4.resize(0, 1);
    com.allenstudio.ir.ui.NoteListCell var8 = new com.allenstudio.ir.ui.NoteListCell((com.allenstudio.ir.core.plugins.AbstractNote)var4);
    com.allenstudio.ir.ui.StatusBar var9 = new com.allenstudio.ir.ui.StatusBar();
    boolean var10 = var9.isBackgroundSet();
    boolean var13 = var9.contains(10, 100);
    var9.revalidate();
    javax.swing.JToolTip var15 = var9.createToolTip();
    com.allenstudio.ir.ui.StatusBar var16 = new com.allenstudio.ir.ui.StatusBar();
    javax.swing.JRootPane var17 = var16.getRootPane();
    java.awt.Point var18 = var16.location();
    com.allenstudio.ir.ui.StatusBar var19 = new com.allenstudio.ir.ui.StatusBar();
    javax.swing.JRootPane var20 = var19.getRootPane();
    java.awt.Point var21 = var19.location();
    com.allenstudio.ir.ui.Toolbar var22 = new com.allenstudio.ir.ui.Toolbar();
    boolean var23 = var22.isFloatable();
    java.awt.Component var25 = var22.getComponentAtIndex(10);
    java.lang.Object var26 = var19.getClientProperty((java.lang.Object)10);
    java.awt.Dimension var27 = var19.getMaximumSize();
    var16.setMinimumSize(var27);
    java.awt.Rectangle var29 = var16.getBounds();
    var9.scrollRectToVisible(var29);
    var4.repaint(var29);
    var0.setMaximizedBounds(var29);
    var0.setTitle(" ");
    java.awt.Image var35 = var0.getIconImage();
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var1);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var2);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var3);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var10 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var13 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var15);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var17);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var18);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var20);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var21);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var23 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var25);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var26);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var27);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var29);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var35);

  }

  public void test468() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest1.test468");


    com.allenstudio.ir.ui.MainFrame var0 = new com.allenstudio.ir.ui.MainFrame();
    java.lang.String var1 = var0.getWarningString();
    java.lang.String var2 = var0.getWarningString();
    java.awt.Container var3 = var0.getFocusCycleRootAncestor();
    com.allenstudio.ir.ui.StatusBar var4 = new com.allenstudio.ir.ui.StatusBar();
    boolean var5 = var4.isBackgroundSet();
    boolean var8 = var4.contains(10, 100);
    var4.revalidate();
    javax.swing.JToolTip var10 = var4.createToolTip();
    com.allenstudio.ir.ui.StatusBar var11 = new com.allenstudio.ir.ui.StatusBar();
    javax.swing.JRootPane var12 = var11.getRootPane();
    java.awt.Point var13 = var11.location();
    com.allenstudio.ir.ui.StatusBar var14 = new com.allenstudio.ir.ui.StatusBar();
    javax.swing.JRootPane var15 = var14.getRootPane();
    java.awt.Point var16 = var14.location();
    com.allenstudio.ir.ui.Toolbar var17 = new com.allenstudio.ir.ui.Toolbar();
    boolean var18 = var17.isFloatable();
    java.awt.Component var20 = var17.getComponentAtIndex(10);
    java.lang.Object var21 = var14.getClientProperty((java.lang.Object)10);
    java.awt.Dimension var22 = var14.getMaximumSize();
    var11.setMinimumSize(var22);
    java.awt.Rectangle var24 = var11.getBounds();
    var4.scrollRectToVisible(var24);
    var0.setMaximizedBounds(var24);
    float var27 = var0.getAlignmentX();
    com.allenstudio.ir.ui.Toolbar var28 = new com.allenstudio.ir.ui.Toolbar();
    java.awt.image.ColorModel var29 = var28.getColorModel();
    var28.setEnabled(true);
    java.awt.Component var33 = var28.getComponentAtIndex(1);
    java.awt.Component var35 = var28.getComponentAtIndex(1);
    java.awt.event.InputMethodListener[] var36 = var28.getInputMethodListeners();
    com.allenstudio.ir.ui.Toolbar var37 = new com.allenstudio.ir.ui.Toolbar();
    java.awt.Dimension var38 = var37.size();
    java.awt.Dimension var39 = var28.getSize(var38);
    var0.setSize(var38);
    boolean var43 = var0.inside(556, 5);
    int var44 = var0.getCursorType();
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var1);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var2);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var3);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var5 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var8 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var10);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var12);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var13);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var15);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var16);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var18 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var20);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var21);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var22);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var24);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var27 == 0.5f);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var29);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var33);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var35);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var36);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var38);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var39);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var43 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var44 == 0);

  }

  public void test469() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest1.test469");


    com.allenstudio.ir.util.XmlElement var0 = new com.allenstudio.ir.util.XmlElement();
    com.allenstudio.ir.util.XmlElement var2 = var0.addSubElement("hi!");
    var2.deleteObservers();
    var2.removeAllElements();
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var2);

  }

  public void test470() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest1.test470");


    com.allenstudio.ir.ui.Toolbar var0 = new com.allenstudio.ir.ui.Toolbar();
    java.awt.image.ColorModel var1 = var0.getColorModel();
    var0.setEnabled(true);
    java.awt.Component var5 = var0.getComponentAtIndex(1);
    boolean var6 = var0.requestFocusInWindow();
    java.awt.FocusTraversalPolicy var7 = var0.getFocusTraversalPolicy();
    java.beans.PropertyChangeListener[] var9 = var0.getPropertyChangeListeners("Date Picker");
    boolean var10 = var0.isFontSet();
    com.allenstudio.ir.ui.calendar.MonthlyCalendar var11 = new com.allenstudio.ir.ui.calendar.MonthlyCalendar();
    var0.removeMouseListener((java.awt.event.MouseListener)var11);
    boolean var13 = var11.getWeekStartOnSunday();
    com.allenstudio.ir.event.NoteListDataEvent var15 = new com.allenstudio.ir.event.NoteListDataEvent((java.lang.Object)var11, 6);
    java.awt.Graphics var16 = var11.getGraphics();
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var1);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var5);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var6 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var7);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var9);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var10 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var13 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var16);

  }

  public void test471() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest1.test471");


    com.allenstudio.ir.ui.NoteListsTabPane var0 = new com.allenstudio.ir.ui.NoteListsTabPane();
    var0.setSelectedIndex(1);
    java.awt.Component var3 = var0.getSelectedComponent();
    javax.swing.InputMap var4 = var0.getInputMap();
    javax.accessibility.AccessibleContext var5 = var0.getAccessibleContext();
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var3);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var4);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var5);

  }

  public void test472() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest1.test472");


    com.allenstudio.ir.ui.NoteListsTabPane var0 = new com.allenstudio.ir.ui.NoteListsTabPane();
    com.allenstudio.ir.ui.Toolbar var1 = new com.allenstudio.ir.ui.Toolbar();
    boolean var2 = var1.isFloatable();
    var1.show();
    java.awt.image.ColorModel var4 = var1.getColorModel();
    boolean var5 = var1.isFocusCycleRoot();
    com.allenstudio.ir.ui.DatePickerPane var6 = new com.allenstudio.ir.ui.DatePickerPane();
    var6.transferFocus();
    com.allenstudio.ir.ui.Toolbar var8 = new com.allenstudio.ir.ui.Toolbar();
    java.awt.image.ColorModel var9 = var8.getColorModel();
    var8.setEnabled(true);
    java.awt.Component var13 = var8.getComponentAtIndex(1);
    boolean var14 = var8.isFloatable();
    var6.setContent((java.awt.Component)var8);
    java.awt.Dimension var16 = var6.size();
    com.allenstudio.ir.ui.Toolbar var17 = new com.allenstudio.ir.ui.Toolbar();
    boolean var18 = var17.isFloatable();
    var17.show();
    boolean var20 = var17.isRequestFocusEnabled();
    java.awt.Dimension var21 = var17.minimumSize();
    var6.setToolBar((javax.swing.JToolBar)var17);
    java.awt.Image var25 = var6.createImage(10, (-1));
    var0.add((java.awt.Component)var1, (java.lang.Object)10);
    var0.setSelectedIndex(1);
    javax.swing.plaf.TabbedPaneUI var29 = var0.getUI();
    com.allenstudio.ir.ui.MainFrame var30 = new com.allenstudio.ir.ui.MainFrame();
    java.lang.String var31 = var30.getWarningString();
    java.lang.String var32 = var30.getWarningString();
    boolean var33 = var30.isAutoRequestFocus();
    boolean var34 = var30.isResizable();
    javax.swing.JLayeredPane var35 = var30.getLayeredPane();
    java.awt.Component var36 = var30.getFocusOwner();
    javax.accessibility.AccessibleContext var37 = var30.getAccessibleContext();
    boolean var38 = var30.isAlwaysOnTop();
    com.allenstudio.ir.ui.DatePickerPane var39 = new com.allenstudio.ir.ui.DatePickerPane();
    java.lang.String var40 = var39.getTitle();
    boolean var41 = var39.isManagingFocus();
    java.awt.LayoutManager var42 = var39.getLayout();
    var39.setDebugGraphicsOptions(1);
    java.awt.Color var45 = var39.getHeaderBackground();
    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      var0.add((java.awt.Component)var30, (java.lang.Object)var45, 10);
      fail("Expected exception of type java.lang.IndexOutOfBoundsException");
    } catch (java.lang.IndexOutOfBoundsException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var2 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var4);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var5 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var9);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var13);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var14 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var16);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var18 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var20 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var21);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var25);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var29);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var31);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var32);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var33 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var34 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var35);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var36);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var37);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var38 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var40 + "' != '" + "Date Picker"+ "'", var40.equals("Date Picker"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var41 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var42);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var45);

  }

  public void test473() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest1.test473");


    com.allenstudio.ir.ui.DefaultNoteListModel var0 = new com.allenstudio.ir.ui.DefaultNoteListModel();
    com.allenstudio.ir.ui.StatusBar var1 = new com.allenstudio.ir.ui.StatusBar();
    com.allenstudio.ir.core.plugins.CommonNote var2 = new com.allenstudio.ir.core.plugins.CommonNote();
    var2.setFocusTraversalPolicyProvider(false);
    var1.remove((java.awt.Component)var2);
    com.allenstudio.ir.ui.StatusBar var6 = new com.allenstudio.ir.ui.StatusBar();
    int var7 = var6.getY();
    javax.swing.JToolTip var8 = var6.createToolTip();
    java.awt.Insets var9 = var8.getInsets();
    java.awt.Insets var10 = var2.getInsets(var9);
    int var11 = var0.indexOf((com.allenstudio.ir.core.plugins.AbstractNote)var2);
    com.allenstudio.ir.ui.MainFrame var13 = new com.allenstudio.ir.ui.MainFrame();
    java.lang.String var14 = var13.getWarningString();
    java.awt.Rectangle var15 = var13.getMaximizedBounds();
    java.awt.MenuBar var16 = var13.getMenuBar();
    com.allenstudio.ir.ui.NoteListsTabPane var17 = new com.allenstudio.ir.ui.NoteListsTabPane();
    var13.widgetChanged((com.allenstudio.ir.core.InspirentoWidget)var17);
    var17.changed();
    com.allenstudio.ir.core.plugins.CommonNote var21 = new com.allenstudio.ir.core.plugins.CommonNote();
    var21.resize(0, 1);
    com.allenstudio.ir.ui.NoteListCell var25 = new com.allenstudio.ir.ui.NoteListCell((com.allenstudio.ir.core.plugins.AbstractNote)var21);
    com.allenstudio.ir.ui.StatusBar var26 = new com.allenstudio.ir.ui.StatusBar();
    boolean var27 = var26.isBackgroundSet();
    boolean var30 = var26.contains(10, 100);
    var26.revalidate();
    javax.swing.JToolTip var32 = var26.createToolTip();
    com.allenstudio.ir.ui.StatusBar var33 = new com.allenstudio.ir.ui.StatusBar();
    javax.swing.JRootPane var34 = var33.getRootPane();
    java.awt.Point var35 = var33.location();
    com.allenstudio.ir.ui.StatusBar var36 = new com.allenstudio.ir.ui.StatusBar();
    javax.swing.JRootPane var37 = var36.getRootPane();
    java.awt.Point var38 = var36.location();
    com.allenstudio.ir.ui.Toolbar var39 = new com.allenstudio.ir.ui.Toolbar();
    boolean var40 = var39.isFloatable();
    java.awt.Component var42 = var39.getComponentAtIndex(10);
    java.lang.Object var43 = var36.getClientProperty((java.lang.Object)10);
    java.awt.Dimension var44 = var36.getMaximumSize();
    var33.setMinimumSize(var44);
    java.awt.Rectangle var46 = var33.getBounds();
    var26.scrollRectToVisible(var46);
    var21.repaint(var46);
    java.awt.Component var49 = var17.add("frame3", (java.awt.Component)var21);
    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      var0.add(3, (com.allenstudio.ir.core.plugins.AbstractNote)var21);
      fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException");
    } catch (java.lang.ArrayIndexOutOfBoundsException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var7 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var8);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var9);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var10);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var11 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var14);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var15);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var16);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var27 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var30 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var32);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var34);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var35);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var37);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var38);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var40 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var42);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var43);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var44);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var46);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var49);

  }

  public void test474() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest1.test474");


    com.allenstudio.ir.ui.calendar.MonthlyCalendar var0 = new com.allenstudio.ir.ui.calendar.MonthlyCalendar();
    var0.setWeekStartOnSunday(true);
    java.awt.Color var3 = var0.getDateForeground();
    java.awt.Color var4 = var0.getHeaderBackground();
    com.allenstudio.ir.ui.StatusBar var5 = new com.allenstudio.ir.ui.StatusBar();
    var5.enable();
    boolean var7 = var5.isFocusOwner();
    var5.firePropertyChange("hi!", 10L, 0L);
    var5.layout();
    var5.removeAll();
    boolean var14 = var5.isFocusTraversalPolicySet();
    var0.setHeaderComponent((javax.swing.JComponent)var5);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var3);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var4);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var7 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var14 == false);

  }

  public void test475() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest1.test475");


    com.allenstudio.ir.util.XmlElement var0 = new com.allenstudio.ir.util.XmlElement();
    com.allenstudio.ir.util.XmlElement var2 = var0.addSubElement("hi!");
    com.allenstudio.ir.util.XmlElement var5 = var2.addSubElement("", "hi!");
    java.util.Hashtable var6 = var5.getAttributes();
    com.allenstudio.ir.ui.MainFrame var7 = new com.allenstudio.ir.ui.MainFrame();
    java.lang.String var8 = var7.getWarningString();
    java.awt.Rectangle var9 = var7.getMaximizedBounds();
    java.awt.MenuBar var10 = var7.getMenuBar();
    com.allenstudio.ir.ui.NoteListsTabPane var11 = new com.allenstudio.ir.ui.NoteListsTabPane();
    var7.widgetChanged((com.allenstudio.ir.core.InspirentoWidget)var11);
    var7.dispose();
    java.lang.Object var14 = var6.get((java.lang.Object)var7);
    com.allenstudio.ir.ui.Toolbar var15 = new com.allenstudio.ir.ui.Toolbar();
    boolean var16 = var15.isFloatable();
    var15.setAutoscrolls(true);
    com.allenstudio.ir.ui.DatePickerPane var19 = new com.allenstudio.ir.ui.DatePickerPane();
    var19.transferFocus();
    com.allenstudio.ir.ui.Toolbar var21 = new com.allenstudio.ir.ui.Toolbar();
    java.awt.image.ColorModel var22 = var21.getColorModel();
    var21.setEnabled(true);
    java.awt.Component var26 = var21.getComponentAtIndex(1);
    boolean var27 = var21.isFloatable();
    var19.setContent((java.awt.Component)var21);
    java.awt.Font var29 = var19.getFont();
    java.awt.FontMetrics var30 = var15.getFontMetrics(var29);
    com.allenstudio.ir.ui.Toolbar var31 = new com.allenstudio.ir.ui.Toolbar();
    java.awt.image.ColorModel var32 = var31.getColorModel();
    var31.setEnabled(true);
    java.awt.Component var36 = var31.getComponentAtIndex(1);
    boolean var37 = var31.isValidateRoot();
    java.awt.LayoutManager var38 = var31.getLayout();
    var15.setLayout(var38);
    var7.setLayout(var38);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var2);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var5);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var6);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var8);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var9);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var10);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var14);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var16 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var22);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var26);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var27 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var29);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var30);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var32);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var36);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var37 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var38);

  }

  public void test476() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest1.test476");


    com.allenstudio.ir.ui.Toolbar var0 = new com.allenstudio.ir.ui.Toolbar();
    java.awt.image.ColorModel var1 = var0.getColorModel();
    var0.setEnabled(true);
    java.awt.Component var5 = var0.getComponentAtIndex(1);
    boolean var6 = var0.requestFocusInWindow();
    java.awt.FocusTraversalPolicy var7 = var0.getFocusTraversalPolicy();
    java.beans.PropertyChangeListener[] var9 = var0.getPropertyChangeListeners("Date Picker");
    boolean var10 = var0.isFontSet();
    com.allenstudio.ir.ui.calendar.MonthlyCalendar var11 = new com.allenstudio.ir.ui.calendar.MonthlyCalendar();
    var0.removeMouseListener((java.awt.event.MouseListener)var11);
    boolean var13 = var11.getWeekStartOnSunday();
    int var14 = var11.getSelectedDay();
    java.awt.Dimension var15 = var11.getCellDimension();
    com.allenstudio.ir.ui.Toolbar var16 = new com.allenstudio.ir.ui.Toolbar();
    java.awt.image.ColorModel var17 = var16.getColorModel();
    java.awt.im.InputContext var18 = var16.getInputContext();
    java.awt.Component var20 = var16.getComponentAtIndex(0);
    var16.revalidate();
    com.allenstudio.ir.ui.MainFrame var22 = new com.allenstudio.ir.ui.MainFrame();
    java.lang.String var23 = var22.getWarningString();
    boolean var24 = var22.isAlwaysOnTopSupported();
    java.awt.Color var25 = var22.getBackground();
    var16.setForeground(var25);
    var11.setDateForeground(var25);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var1);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var5);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var6 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var7);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var9);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var10 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var13 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var14 == 31);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var15);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var17);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var18);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var20);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var23);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var24 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var25);

  }

  public void test477() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest1.test477");


    com.allenstudio.ir.util.XmlIO var0 = new com.allenstudio.ir.util.XmlIO();
    var0.warningDialog("C:\\boot.ini");
    var0.notationDecl("C:\\boot.ini", "Date Picker", "hi!");
    com.allenstudio.ir.util.XmlIO var7 = new com.allenstudio.ir.util.XmlIO();
    char[] var9 = new char[] { 'a'};
    var7.ignorableWhitespace(var9, 0, (-1));
    var0.ignorableWhitespace(var9, 10, 1);
    org.xml.sax.InputSource var18 = var0.resolveEntity("C:\\boot.ini", "Inspirento - alpha 0.86");
    com.allenstudio.ir.util.XmlElement var19 = var0.getRoot();
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var9);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var18);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var19);

  }

  public void test478() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest1.test478");


    com.allenstudio.ir.ui.MainFrame var0 = new com.allenstudio.ir.ui.MainFrame();
    java.lang.String var1 = var0.getWarningString();
    java.lang.String var2 = var0.getWarningString();
    boolean var3 = var0.isAutoRequestFocus();
    boolean var4 = var0.isResizable();
    var0.pack();
    com.allenstudio.ir.event.NoteListDataEvent var7 = new com.allenstudio.ir.event.NoteListDataEvent((java.lang.Object)var0, 10);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var1);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var2);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var3 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var4 == true);

  }

  public void test479() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest1.test479");


    com.allenstudio.ir.ui.MainFrame var0 = new com.allenstudio.ir.ui.MainFrame();
    java.lang.String var1 = var0.getWarningString();
    boolean var2 = var0.isAlwaysOnTopSupported();
    com.allenstudio.ir.ui.StatusBar var3 = new com.allenstudio.ir.ui.StatusBar();
    javax.swing.JRootPane var4 = var3.getRootPane();
    java.awt.Point var5 = var3.location();
    com.allenstudio.ir.ui.StatusBar var6 = new com.allenstudio.ir.ui.StatusBar();
    javax.swing.JRootPane var7 = var6.getRootPane();
    java.awt.Point var8 = var6.location();
    com.allenstudio.ir.ui.Toolbar var9 = new com.allenstudio.ir.ui.Toolbar();
    boolean var10 = var9.isFloatable();
    java.awt.Component var12 = var9.getComponentAtIndex(10);
    java.lang.Object var13 = var6.getClientProperty((java.lang.Object)10);
    java.awt.Dimension var14 = var6.getMaximumSize();
    var3.setMinimumSize(var14);
    java.awt.Rectangle var16 = var3.getBounds();
    java.awt.Rectangle var17 = var0.getBounds(var16);
    java.awt.Container var18 = var0.getFocusCycleRootAncestor();
    var0.setExtendedState(1);
    boolean var21 = var0.isValidateRoot();
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var2 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var4);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var5);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var7);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var8);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var10 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var12);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var13);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var14);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var16);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var17);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var18);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var21 == true);

  }

  public void test480() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest1.test480");


    com.allenstudio.ir.ui.StatusBar var0 = new com.allenstudio.ir.ui.StatusBar();
    var0.enable();
    boolean var2 = var0.isFocusOwner();
    var0.firePropertyChange("hi!", 10L, 0L);
    int var7 = var0.getWidth();
    com.allenstudio.ir.ui.MainFrame var8 = new com.allenstudio.ir.ui.MainFrame();
    java.lang.String var9 = var8.getWarningString();
    java.awt.Rectangle var10 = var8.getMaximizedBounds();
    java.awt.MenuBar var11 = var8.getMenuBar();
    com.allenstudio.ir.ui.NoteListsTabPane var12 = new com.allenstudio.ir.ui.NoteListsTabPane();
    com.allenstudio.ir.ui.Toolbar var13 = new com.allenstudio.ir.ui.Toolbar();
    boolean var14 = var13.isFloatable();
    var13.show();
    java.awt.image.ColorModel var16 = var13.getColorModel();
    boolean var17 = var13.isFocusCycleRoot();
    com.allenstudio.ir.ui.DatePickerPane var18 = new com.allenstudio.ir.ui.DatePickerPane();
    var18.transferFocus();
    com.allenstudio.ir.ui.Toolbar var20 = new com.allenstudio.ir.ui.Toolbar();
    java.awt.image.ColorModel var21 = var20.getColorModel();
    var20.setEnabled(true);
    java.awt.Component var25 = var20.getComponentAtIndex(1);
    boolean var26 = var20.isFloatable();
    var18.setContent((java.awt.Component)var20);
    java.awt.Dimension var28 = var18.size();
    com.allenstudio.ir.ui.Toolbar var29 = new com.allenstudio.ir.ui.Toolbar();
    boolean var30 = var29.isFloatable();
    var29.show();
    boolean var32 = var29.isRequestFocusEnabled();
    java.awt.Dimension var33 = var29.minimumSize();
    var18.setToolBar((javax.swing.JToolBar)var29);
    java.awt.Image var37 = var18.createImage(10, (-1));
    var12.add((java.awt.Component)var13, (java.lang.Object)10);
    var8.widgetChanged((com.allenstudio.ir.core.InspirentoWidget)var12);
    com.allenstudio.ir.ui.Toolbar var40 = new com.allenstudio.ir.ui.Toolbar();
    java.awt.image.ColorModel var41 = var40.getColorModel();
    var40.setEnabled(true);
    java.awt.Component var45 = var40.getComponentAtIndex(1);
    boolean var46 = var40.isFloatable();
    java.lang.String var47 = var40.toString();
    com.allenstudio.ir.ui.Toolbar var48 = new com.allenstudio.ir.ui.Toolbar();
    java.awt.event.MouseWheelListener[] var49 = var48.getMouseWheelListeners();
    java.awt.event.MouseListener[] var50 = var48.getMouseListeners();
    var48.firePropertyChange("", false, true);
    var40.add((java.awt.Component)var48, (java.lang.Object)10.0f);
    java.awt.event.HierarchyBoundsListener[] var57 = var48.getHierarchyBoundsListeners();
    com.allenstudio.ir.ui.Toolbar var58 = new com.allenstudio.ir.ui.Toolbar();
    boolean var59 = var58.isFloatable();
    var58.show();
    boolean var61 = var58.isRequestFocusEnabled();
    java.awt.Dimension var62 = var58.minimumSize();
    java.awt.Dimension var63 = var58.getMinimumSize();
    var48.resize(var63);
    int var65 = var12.indexOfComponent((java.awt.Component)var48);
    javax.accessibility.AccessibleContext var66 = var48.getAccessibleContext();
    java.awt.Dimension var67 = var48.getMaximumSize();
    var0.setPreferredSize(var67);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var2 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var7 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var9);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var10);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var11);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var14 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var16);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var17 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var21);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var25);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var26 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var28);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var30 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var32 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var33);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var37);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var41);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var45);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var46 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var49);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var50);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var57);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var59 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var61 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var62);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var63);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var65 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var66);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var67);

  }

  public void test481() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest1.test481");


    com.allenstudio.ir.ui.MainFrame var0 = new com.allenstudio.ir.ui.MainFrame();
    boolean var1 = var0.isShowing();
    java.lang.String var2 = var0.getWarningString();
    var0.setAutoRequestFocus(true);
    java.awt.image.ColorModel var5 = var0.getColorModel();
    var0.setLocation(31, 100);
    com.allenstudio.ir.ui.MainFrame var9 = new com.allenstudio.ir.ui.MainFrame();
    boolean var10 = var9.isShowing();
    int var11 = var9.countComponents();
    var9.setAutoRequestFocus(false);
    javax.swing.JMenuBar var14 = var9.getJMenuBar();
    boolean var15 = var14.isBorderPainted();
    var14.menuSelectionChanged(true);
    com.allenstudio.ir.ui.MainFrame var18 = new com.allenstudio.ir.ui.MainFrame();
    boolean var19 = var18.isShowing();
    int var20 = var18.countComponents();
    var18.setAutoRequestFocus(false);
    javax.swing.JMenuBar var23 = var18.getJMenuBar();
    boolean var24 = var23.isBorderPainted();
    var23.updateUI();
    com.allenstudio.ir.ui.DatePickerPane var26 = new com.allenstudio.ir.ui.DatePickerPane();
    var26.transferFocus();
    java.awt.Dimension var28 = var26.getMinimumSize();
    java.awt.Dimension var29 = var23.getSize(var28);
    javax.swing.plaf.MenuBarUI var30 = var23.getUI();
    var14.setUI(var30);
    boolean var32 = var14.isBorderPainted();
    var14.invalidate();
    java.awt.Cursor var34 = var14.getCursor();
    var0.setCursor(var34);
    boolean var36 = var0.isMinimumSizeSet();
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var1 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var2);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var5);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var10 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var11 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var14);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var15 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var19 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var20 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var23);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var24 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var28);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var29);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var30);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var32 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var34);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var36 == false);

  }

  public void test482() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest1.test482");


    com.allenstudio.ir.ui.MainFrame var0 = new com.allenstudio.ir.ui.MainFrame();
    java.lang.String var1 = var0.getWarningString();
    java.awt.Rectangle var2 = var0.getMaximizedBounds();
    boolean var3 = var0.isLocationByPlatform();
    int var4 = var0.getY();
    java.awt.Component var5 = var0.getMostRecentFocusOwner();
    boolean var6 = var0.isUndecorated();
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var1);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var2);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var3 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var4 == 32);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var5);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var6 == false);

  }

  public void test483() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest1.test483");


    com.allenstudio.ir.ui.DatePickerPane var0 = new com.allenstudio.ir.ui.DatePickerPane();
    java.lang.String var1 = var0.getUIClassID();
    com.allenstudio.ir.ui.StatusBar var2 = new com.allenstudio.ir.ui.StatusBar();
    int var3 = var2.getY();
    javax.swing.JToolTip var4 = var2.createToolTip();
    float var5 = var4.getAlignmentY();
    java.awt.Color var6 = var4.getForeground();
    var0.setBackground(var6);
    var0.move(10, 10);
    com.allenstudio.ir.ui.Toolbar var11 = new com.allenstudio.ir.ui.Toolbar();
    java.awt.image.ColorModel var12 = var11.getColorModel();
    java.awt.im.InputContext var13 = var11.getInputContext();
    java.awt.Component var15 = var11.getComponentAtIndex(0);
    var0.setToolBar((javax.swing.JToolBar)var11);
    var11.grabFocus();
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var1 + "' != '" + "PanelUI"+ "'", var1.equals("PanelUI"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var3 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var4);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var5 == 0.5f);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var6);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var12);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var13);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var15);

  }

  public void test484() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest1.test484");


    com.allenstudio.ir.core.plugins.CommonNote var0 = new com.allenstudio.ir.core.plugins.CommonNote();
    java.lang.String var1 = var0.getDescription();
    var0.reshape(10, 1, 10, (-1));
    var0.setFeature("Title");
    com.allenstudio.ir.ui.DatePickerPane var9 = new com.allenstudio.ir.ui.DatePickerPane();
    var9.transferFocus();
    java.awt.Dimension var11 = var9.getMinimumSize();
    com.allenstudio.ir.core.plugins.CommonNote var12 = new com.allenstudio.ir.core.plugins.CommonNote();
    var12.setFocusTraversalPolicyProvider(false);
    com.allenstudio.ir.ui.StatusBar var15 = new com.allenstudio.ir.ui.StatusBar();
    int var16 = var15.getY();
    javax.swing.JToolTip var17 = var15.createToolTip();
    float var18 = var17.getAlignmentY();
    java.awt.Color var19 = var17.getForeground();
    var12.remove((java.awt.Component)var17);
    com.allenstudio.ir.ui.StatusBar var21 = new com.allenstudio.ir.ui.StatusBar();
    int var22 = var21.getY();
    boolean var23 = var21.isLightweight();
    java.awt.Dimension var24 = var21.getMaximumSize();
    java.awt.event.KeyListener[] var25 = var21.getKeyListeners();
    java.awt.ComponentOrientation var26 = var21.getComponentOrientation();
    var12.setComponentOrientation(var26);
    var9.setComponentOrientation(var26);
    var0.applyComponentOrientation(var26);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var1 + "' != '" + "This is a testing description. \u03E3\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\u073F\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD"+ "'", var1.equals("This is a testing description. \u03E3\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\u073F\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var11);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var16 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var17);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var18 == 0.5f);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var19);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var22 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var23 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var24);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var25);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var26);

  }

  public void test485() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest1.test485");


    com.allenstudio.ir.ui.MainFrame var0 = new com.allenstudio.ir.ui.MainFrame();
    java.lang.String var1 = var0.getWarningString();
    java.lang.String var2 = var0.getWarningString();
    java.awt.Container var3 = var0.getFocusCycleRootAncestor();
    java.awt.Component var4 = var0.getMostRecentFocusOwner();
    var0.enable(false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var1);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var2);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var3);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var4);

  }

  public void test486() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest1.test486");


    com.allenstudio.ir.ui.StatusBar var0 = new com.allenstudio.ir.ui.StatusBar();
    var0.enable();
    boolean var2 = var0.isFocusOwner();
    var0.firePropertyChange("hi!", 10L, 0L);
    var0.layout();
    var0.removeAll();
    boolean var9 = var0.isFocusCycleRoot();
    var0.requestFocus();
    com.allenstudio.ir.ui.StatusBar var11 = new com.allenstudio.ir.ui.StatusBar();
    var11.enable();
    boolean var13 = var11.isFocusOwner();
    var11.firePropertyChange("hi!", 10L, 0L);
    var11.layout();
    var11.removeAll();
    com.allenstudio.ir.ui.StatusBar var20 = new com.allenstudio.ir.ui.StatusBar();
    javax.swing.JRootPane var21 = var20.getRootPane();
    java.awt.Point var22 = var20.location();
    java.awt.Point var23 = var11.getLocation(var22);
    com.allenstudio.ir.util.XmlElement var24 = new com.allenstudio.ir.util.XmlElement();
    com.allenstudio.ir.util.XmlElement var26 = var24.addSubElement("hi!");
    com.allenstudio.ir.util.XmlElement var29 = var26.addSubElement("", "hi!");
    java.util.Hashtable var30 = var29.getAttributes();
    com.allenstudio.ir.ui.MainFrame var31 = new com.allenstudio.ir.ui.MainFrame();
    java.lang.String var32 = var31.getWarningString();
    java.awt.Rectangle var33 = var31.getMaximizedBounds();
    java.awt.MenuBar var34 = var31.getMenuBar();
    com.allenstudio.ir.ui.NoteListsTabPane var35 = new com.allenstudio.ir.ui.NoteListsTabPane();
    var31.widgetChanged((com.allenstudio.ir.core.InspirentoWidget)var35);
    var31.dispose();
    java.lang.Object var38 = var30.get((java.lang.Object)var31);
    com.allenstudio.ir.util.XmlElement var39 = new com.allenstudio.ir.util.XmlElement();
    com.allenstudio.ir.util.XmlElement var41 = var39.addSubElement("hi!");
    com.allenstudio.ir.util.XmlElement var44 = var41.addSubElement("", "hi!");
    java.util.Hashtable var45 = var44.getAttributes();
    com.allenstudio.ir.ui.Toolbar var46 = new com.allenstudio.ir.ui.Toolbar();
    java.awt.image.ColorModel var47 = var46.getColorModel();
    var46.setEnabled(true);
    java.awt.ComponentOrientation var50 = var46.getComponentOrientation();
    java.lang.Object var51 = var30.put((java.lang.Object)var45, (java.lang.Object)var50);
    var11.setComponentOrientation(var50);
    var0.setComponentOrientation(var50);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var2 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var9 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var13 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var21);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var22);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var23);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var26);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var29);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var30);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var32);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var33);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var34);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var38);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var41);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var44);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var45);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var47);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var50);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var51);

  }

  public void test487() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest1.test487");


    com.allenstudio.ir.ui.DatePickerPane var0 = new com.allenstudio.ir.ui.DatePickerPane();
    var0.transferFocus();
    com.allenstudio.ir.ui.Toolbar var2 = new com.allenstudio.ir.ui.Toolbar();
    java.awt.image.ColorModel var3 = var2.getColorModel();
    var2.setEnabled(true);
    java.awt.Component var7 = var2.getComponentAtIndex(1);
    boolean var8 = var2.isFloatable();
    var0.setContent((java.awt.Component)var2);
    java.awt.Color var10 = var2.getForeground();
    boolean var11 = var2.requestFocusInWindow();
    var2.setDoubleBuffered(true);
    boolean var14 = var2.isRollover();
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var3);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var7);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var8 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var10);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var11 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var14 == false);

  }

  public void test488() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest1.test488");


    com.allenstudio.ir.ui.DatePickerPane var0 = new com.allenstudio.ir.ui.DatePickerPane();
    java.lang.String var1 = var0.getUIClassID();
    com.allenstudio.ir.ui.StatusBar var2 = new com.allenstudio.ir.ui.StatusBar();
    int var3 = var2.getY();
    javax.swing.JToolTip var4 = var2.createToolTip();
    float var5 = var4.getAlignmentY();
    java.awt.Color var6 = var4.getForeground();
    var0.setBackground(var6);
    var0.move(10, 10);
    com.allenstudio.ir.ui.Toolbar var11 = new com.allenstudio.ir.ui.Toolbar();
    java.awt.image.ColorModel var12 = var11.getColorModel();
    java.awt.im.InputContext var13 = var11.getInputContext();
    java.awt.Component var15 = var11.getComponentAtIndex(0);
    var0.setToolBar((javax.swing.JToolBar)var11);
    java.awt.im.InputContext var17 = var0.getInputContext();
    boolean var18 = var0.isDoubleBuffered();
    boolean var19 = var0.isCursorSet();
    boolean var21 = var0.areFocusTraversalKeysSet(3);
    java.awt.Color var22 = var0.getHeaderBackground();
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var1 + "' != '" + "PanelUI"+ "'", var1.equals("PanelUI"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var3 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var4);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var5 == 0.5f);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var6);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var12);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var13);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var15);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var17);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var18 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var19 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var21 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var22);

  }

  public void test489() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest1.test489");


    com.allenstudio.ir.ui.MainFrame var0 = new com.allenstudio.ir.ui.MainFrame();
    java.lang.String var1 = var0.getWarningString();
    boolean var2 = var0.isAlwaysOnTopSupported();
    com.allenstudio.ir.ui.StatusBar var3 = new com.allenstudio.ir.ui.StatusBar();
    javax.swing.JRootPane var4 = var3.getRootPane();
    java.awt.Point var5 = var3.location();
    com.allenstudio.ir.ui.StatusBar var6 = new com.allenstudio.ir.ui.StatusBar();
    javax.swing.JRootPane var7 = var6.getRootPane();
    java.awt.Point var8 = var6.location();
    com.allenstudio.ir.ui.Toolbar var9 = new com.allenstudio.ir.ui.Toolbar();
    boolean var10 = var9.isFloatable();
    java.awt.Component var12 = var9.getComponentAtIndex(10);
    java.lang.Object var13 = var6.getClientProperty((java.lang.Object)10);
    java.awt.Dimension var14 = var6.getMaximumSize();
    var3.setMinimumSize(var14);
    java.awt.Rectangle var16 = var3.getBounds();
    java.awt.Rectangle var17 = var0.getBounds(var16);
    java.awt.Container var18 = var0.getFocusCycleRootAncestor();
    var0.setExtendedState(1);
    var0.setAutoRequestFocus(false);
    com.allenstudio.ir.ui.NoteListsTabPane var23 = new com.allenstudio.ir.ui.NoteListsTabPane();
    com.allenstudio.ir.ui.Toolbar var24 = new com.allenstudio.ir.ui.Toolbar();
    boolean var25 = var24.isFloatable();
    var24.show();
    java.awt.image.ColorModel var27 = var24.getColorModel();
    boolean var28 = var24.isFocusCycleRoot();
    com.allenstudio.ir.ui.DatePickerPane var29 = new com.allenstudio.ir.ui.DatePickerPane();
    var29.transferFocus();
    com.allenstudio.ir.ui.Toolbar var31 = new com.allenstudio.ir.ui.Toolbar();
    java.awt.image.ColorModel var32 = var31.getColorModel();
    var31.setEnabled(true);
    java.awt.Component var36 = var31.getComponentAtIndex(1);
    boolean var37 = var31.isFloatable();
    var29.setContent((java.awt.Component)var31);
    java.awt.Dimension var39 = var29.size();
    com.allenstudio.ir.ui.Toolbar var40 = new com.allenstudio.ir.ui.Toolbar();
    boolean var41 = var40.isFloatable();
    var40.show();
    boolean var43 = var40.isRequestFocusEnabled();
    java.awt.Dimension var44 = var40.minimumSize();
    var29.setToolBar((javax.swing.JToolBar)var40);
    java.awt.Image var48 = var29.createImage(10, (-1));
    var23.add((java.awt.Component)var24, (java.lang.Object)10);
    com.allenstudio.ir.ui.DatePickerPane var50 = new com.allenstudio.ir.ui.DatePickerPane();
    java.lang.String var51 = var50.getTitle();
    java.awt.dnd.DropTarget var52 = var50.getDropTarget();
    com.allenstudio.ir.util.XmlElement var53 = new com.allenstudio.ir.util.XmlElement();
    boolean var54 = var53.hasChanged();
    var23.add((java.awt.Component)var50, (java.lang.Object)var54, (-1));
    com.allenstudio.ir.ui.NoteListsTabPane var57 = new com.allenstudio.ir.ui.NoteListsTabPane();
    com.allenstudio.ir.ui.Toolbar var58 = new com.allenstudio.ir.ui.Toolbar();
    boolean var59 = var58.isFloatable();
    var58.show();
    java.awt.image.ColorModel var61 = var58.getColorModel();
    boolean var62 = var58.isFocusCycleRoot();
    com.allenstudio.ir.ui.DatePickerPane var63 = new com.allenstudio.ir.ui.DatePickerPane();
    var63.transferFocus();
    com.allenstudio.ir.ui.Toolbar var65 = new com.allenstudio.ir.ui.Toolbar();
    java.awt.image.ColorModel var66 = var65.getColorModel();
    var65.setEnabled(true);
    java.awt.Component var70 = var65.getComponentAtIndex(1);
    boolean var71 = var65.isFloatable();
    var63.setContent((java.awt.Component)var65);
    java.awt.Dimension var73 = var63.size();
    com.allenstudio.ir.ui.Toolbar var74 = new com.allenstudio.ir.ui.Toolbar();
    boolean var75 = var74.isFloatable();
    var74.show();
    boolean var77 = var74.isRequestFocusEnabled();
    java.awt.Dimension var78 = var74.minimumSize();
    var63.setToolBar((javax.swing.JToolBar)var74);
    java.awt.Image var82 = var63.createImage(10, (-1));
    var57.add((java.awt.Component)var58, (java.lang.Object)10);
    com.allenstudio.ir.ui.Toolbar var84 = new com.allenstudio.ir.ui.Toolbar();
    java.awt.image.ColorModel var85 = var84.getColorModel();
    var84.setEnabled(true);
    var57.add((java.awt.Component)var84, (java.lang.Object)100L, 0);
    java.awt.Component var92 = var23.add((java.awt.Component)var57, 1);
    var0.widgetChanged((com.allenstudio.ir.core.InspirentoWidget)var57);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var2 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var4);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var5);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var7);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var8);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var10 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var12);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var13);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var14);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var16);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var17);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var18);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var25 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var27);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var28 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var32);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var36);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var37 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var39);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var41 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var43 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var44);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var48);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var51 + "' != '" + "Date Picker"+ "'", var51.equals("Date Picker"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var52);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var54 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var59 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var61);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var62 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var66);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var70);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var71 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var73);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var75 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var77 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var78);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var82);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var85);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var92);

  }

  public void test490() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest1.test490");


    com.allenstudio.ir.ui.DefaultNoteListModel var0 = new com.allenstudio.ir.ui.DefaultNoteListModel();
    com.allenstudio.ir.ui.StatusBar var1 = new com.allenstudio.ir.ui.StatusBar();
    int var2 = var1.getY();
    javax.swing.JToolTip var3 = var1.createToolTip();
    float var4 = var3.getAlignmentY();
    java.awt.Color var5 = var3.getForeground();
    java.awt.event.MouseMotionListener[] var6 = var3.getMouseMotionListeners();
    com.allenstudio.ir.core.plugins.CommonNote var7 = new com.allenstudio.ir.core.plugins.CommonNote();
    java.lang.String var8 = var7.getFeature();
    com.allenstudio.ir.ui.StatusBar var9 = new com.allenstudio.ir.ui.StatusBar();
    var9.enable();
    boolean var11 = var9.isFocusOwner();
    var9.firePropertyChange("hi!", 10L, 0L);
    var9.layout();
    var9.removeAll();
    com.allenstudio.ir.ui.StatusBar var18 = new com.allenstudio.ir.ui.StatusBar();
    javax.swing.JRootPane var19 = var18.getRootPane();
    java.awt.Point var20 = var18.location();
    java.awt.Component var21 = var9.getComponentAt(var20);
    java.awt.Point var22 = var7.getLocation(var20);
    var7.setOtherInfo("");
    var7.setFeature("Title");
    var7.removeNotify();
    com.allenstudio.ir.util.XmlElement var28 = new com.allenstudio.ir.util.XmlElement();
    com.allenstudio.ir.util.XmlElement var30 = var28.addSubElement("hi!");
    com.allenstudio.ir.util.XmlElement var31 = new com.allenstudio.ir.util.XmlElement();
    com.allenstudio.ir.util.XmlElement var33 = var31.addSubElement("hi!");
    var33.notifyObservers((java.lang.Object)(byte)1);
    var28.append(var33);
    com.allenstudio.ir.util.XmlElement var37 = new com.allenstudio.ir.util.XmlElement();
    com.allenstudio.ir.util.XmlElement var39 = var37.addSubElement("hi!");
    java.lang.String var41 = var37.getAttribute("C:\\boot.ini");
    com.allenstudio.ir.util.XmlElement var42 = var33.addSubElement(var37);
    java.lang.String var45 = var33.getAttribute("Title", "ToolBarUI");
    var3.putClientProperty((java.lang.Object)var7, (java.lang.Object)"Title");
    var7.doLayout();
    java.lang.String var48 = var7.getDescription();
    int var50 = var0.indexOf((com.allenstudio.ir.core.plugins.AbstractNote)var7, 556);
    com.allenstudio.ir.core.plugins.CommonNote var51 = new com.allenstudio.ir.core.plugins.CommonNote();
    var51.resize(0, 1);
    java.lang.String var55 = var51.getOtherInfo();
    int var57 = var0.indexOf((com.allenstudio.ir.core.plugins.AbstractNote)var51, 10);
    int var58 = var0.capacity();
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var2 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var3);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var4 == 0.5f);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var5);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var6);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var8 + "' != '" + "C:\\boot.ini"+ "'", var8.equals("C:\\boot.ini"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var11 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var19);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var20);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var21);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var22);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var30);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var33);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var39);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var41);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var42);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var45 + "' != '" + "ToolBarUI"+ "'", var45.equals("ToolBarUI"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var48 + "' != '" + "This is a testing description. \u03E3\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\u073F\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD"+ "'", var48.equals("This is a testing description. \u03E3\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\u073F\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var50 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var55);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var57 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var58 == 10);

  }

  public void test491() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest1.test491");


    com.allenstudio.ir.ui.StatusBar var0 = new com.allenstudio.ir.ui.StatusBar();
    var0.enable();
    boolean var2 = var0.isFocusOwner();
    var0.repaint(100L, 32, 4, 32, 4);
    java.awt.Rectangle var9 = var0.getVisibleRect();
    var0.revalidate();
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var2 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var9);

  }

  public void test492() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest1.test492");


    com.allenstudio.ir.ui.DatePickerPane var0 = new com.allenstudio.ir.ui.DatePickerPane();
    java.awt.Container var1 = var0.getContentPane();
    javax.swing.InputMap var2 = var0.getInputMap();
    var0.setToolTipText("This is a testing description. \u03E3\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\u073F\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD");
    com.allenstudio.ir.ui.StatusBar var5 = new com.allenstudio.ir.ui.StatusBar();
    int var6 = var5.getY();
    var5.setIgnoreRepaint(true);
    boolean var9 = var5.requestFocusInWindow();
    java.awt.Dimension var10 = var5.size();
    var0.setPreferredSize(var10);
    java.awt.Color var12 = var0.getHeaderBackground();
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var1);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var2);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var6 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var9 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var10);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var12);

  }

  public void test493() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest1.test493");


    com.allenstudio.ir.ui.DefaultNoteListModel var0 = new com.allenstudio.ir.ui.DefaultNoteListModel();
    com.allenstudio.ir.ui.StatusBar var1 = new com.allenstudio.ir.ui.StatusBar();
    int var2 = var1.getY();
    javax.swing.JToolTip var3 = var1.createToolTip();
    float var4 = var3.getAlignmentY();
    java.awt.Color var5 = var3.getForeground();
    java.awt.event.MouseMotionListener[] var6 = var3.getMouseMotionListeners();
    com.allenstudio.ir.core.plugins.CommonNote var7 = new com.allenstudio.ir.core.plugins.CommonNote();
    java.lang.String var8 = var7.getFeature();
    com.allenstudio.ir.ui.StatusBar var9 = new com.allenstudio.ir.ui.StatusBar();
    var9.enable();
    boolean var11 = var9.isFocusOwner();
    var9.firePropertyChange("hi!", 10L, 0L);
    var9.layout();
    var9.removeAll();
    com.allenstudio.ir.ui.StatusBar var18 = new com.allenstudio.ir.ui.StatusBar();
    javax.swing.JRootPane var19 = var18.getRootPane();
    java.awt.Point var20 = var18.location();
    java.awt.Component var21 = var9.getComponentAt(var20);
    java.awt.Point var22 = var7.getLocation(var20);
    var7.setOtherInfo("");
    var7.setFeature("Title");
    var7.removeNotify();
    com.allenstudio.ir.util.XmlElement var28 = new com.allenstudio.ir.util.XmlElement();
    com.allenstudio.ir.util.XmlElement var30 = var28.addSubElement("hi!");
    com.allenstudio.ir.util.XmlElement var31 = new com.allenstudio.ir.util.XmlElement();
    com.allenstudio.ir.util.XmlElement var33 = var31.addSubElement("hi!");
    var33.notifyObservers((java.lang.Object)(byte)1);
    var28.append(var33);
    com.allenstudio.ir.util.XmlElement var37 = new com.allenstudio.ir.util.XmlElement();
    com.allenstudio.ir.util.XmlElement var39 = var37.addSubElement("hi!");
    java.lang.String var41 = var37.getAttribute("C:\\boot.ini");
    com.allenstudio.ir.util.XmlElement var42 = var33.addSubElement(var37);
    java.lang.String var45 = var33.getAttribute("Title", "ToolBarUI");
    var3.putClientProperty((java.lang.Object)var7, (java.lang.Object)"Title");
    var7.doLayout();
    java.lang.String var48 = var7.getDescription();
    int var50 = var0.indexOf((com.allenstudio.ir.core.plugins.AbstractNote)var7, 556);
    com.allenstudio.ir.core.plugins.CommonNote var51 = new com.allenstudio.ir.core.plugins.CommonNote();
    var51.resize(0, 1);
    java.lang.String var55 = var51.getOtherInfo();
    int var57 = var0.indexOf((com.allenstudio.ir.core.plugins.AbstractNote)var51, 10);
    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      com.allenstudio.ir.core.plugins.AbstractNote var59 = var0.remove(4);
      fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException");
    } catch (java.lang.ArrayIndexOutOfBoundsException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var2 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var3);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var4 == 0.5f);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var5);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var6);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var8 + "' != '" + "C:\\boot.ini"+ "'", var8.equals("C:\\boot.ini"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var11 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var19);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var20);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var21);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var22);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var30);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var33);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var39);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var41);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var42);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var45 + "' != '" + "ToolBarUI"+ "'", var45.equals("ToolBarUI"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var48 + "' != '" + "This is a testing description. \u03E3\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\u073F\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD"+ "'", var48.equals("This is a testing description. \u03E3\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\u073F\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var50 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var55);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var57 == (-1));

  }

  public void test494() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest1.test494");


    com.allenstudio.ir.ui.MainFrame var0 = new com.allenstudio.ir.ui.MainFrame();
    java.lang.String var1 = var0.getWarningString();
    boolean var2 = var0.isAlwaysOnTopSupported();
    var0.setTitle("ToolBarUI");
    java.awt.im.InputContext var5 = var0.getInputContext();
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var2 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var5);

  }

  public void test495() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest1.test495");


    com.allenstudio.ir.ui.NoteListsTabPane var0 = new com.allenstudio.ir.ui.NoteListsTabPane();
    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      var0.setSelectedIndex(30);
      fail("Expected exception of type java.lang.IndexOutOfBoundsException");
    } catch (java.lang.IndexOutOfBoundsException e) {
      // Expected exception.
    }

  }

  public void test496() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest1.test496");


    com.allenstudio.ir.ui.Toolbar var0 = new com.allenstudio.ir.ui.Toolbar();
    java.awt.image.ColorModel var1 = var0.getColorModel();
    var0.setEnabled(true);
    java.awt.Component var5 = var0.getComponentAtIndex(1);
    boolean var6 = var0.isFloatable();
    javax.swing.InputMap var7 = var0.getInputMap();
    java.awt.Insets var8 = var0.getInsets();
    com.allenstudio.ir.ui.NoteListsTabPane var9 = new com.allenstudio.ir.ui.NoteListsTabPane();
    var9.setSelectedIndex(1);
    java.awt.Component var12 = var9.getSelectedComponent();
    com.allenstudio.ir.ui.StatusBar var13 = new com.allenstudio.ir.ui.StatusBar();
    boolean var14 = var13.isBackgroundSet();
    boolean var17 = var13.contains(10, 100);
    var13.revalidate();
    var13.setEnabled(false);
    com.allenstudio.ir.ui.DatePickerPane var21 = new com.allenstudio.ir.ui.DatePickerPane();
    java.lang.String var22 = var21.getTitle();
    boolean var23 = var21.isManagingFocus();
    java.awt.LayoutManager var24 = var21.getLayout();
    var13.setLayout(var24);
    var9.setLayout(var24);
    var0.setLayout(var24);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var1);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var5);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var6 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var7);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var8);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var12);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var14 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var17 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var22 + "' != '" + "Date Picker"+ "'", var22.equals("Date Picker"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var23 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var24);

  }

  public void test497() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest1.test497");


    com.allenstudio.ir.core.ConfigurationManager var0 = com.allenstudio.ir.core.ConfigurationManager.getInstance();
    var0.writeBack();
    var0.writeBack();
    java.util.Enumeration var3 = var0.propertyNames();
    var0.readIn();
    java.util.Enumeration var5 = var0.propertyNames();
    java.util.Set var6 = var0.stringPropertyNames();
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var0);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var3);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var5);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var6);

  }

  public void test498() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest1.test498");


    com.allenstudio.ir.ui.DatePickerPane var0 = new com.allenstudio.ir.ui.DatePickerPane();
    var0.transferFocus();
    com.allenstudio.ir.ui.Toolbar var2 = new com.allenstudio.ir.ui.Toolbar();
    java.awt.image.ColorModel var3 = var2.getColorModel();
    var2.setEnabled(true);
    java.awt.Component var7 = var2.getComponentAtIndex(1);
    boolean var8 = var2.isFloatable();
    var0.setContent((java.awt.Component)var2);
    java.awt.Dimension var10 = var0.size();
    boolean var11 = var0.isBackgroundSet();
    javax.swing.KeyStroke[] var12 = var0.getRegisteredKeyStrokes();
    javax.swing.InputVerifier var13 = var0.getInputVerifier();
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var3);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var7);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var8 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var10);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var11 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var12);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var13);

  }

  public void test499() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest1.test499");


    com.allenstudio.ir.ui.StatusBar var0 = new com.allenstudio.ir.ui.StatusBar();
    boolean var1 = var0.isBackgroundSet();
    boolean var4 = var0.contains(10, 100);
    var0.revalidate();
    javax.swing.JToolTip var6 = var0.createToolTip();
    java.lang.Object var7 = var0.getTreeLock();
    var0.setInheritsPopupMenu(true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var1 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var4 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var6);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var7);

  }

  public void test500() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest1.test500");


    com.allenstudio.ir.ui.Toolbar var0 = new com.allenstudio.ir.ui.Toolbar();
    java.awt.image.ColorModel var1 = var0.getColorModel();
    var0.setEnabled(true);
    java.awt.Component var5 = var0.getComponentAtIndex(1);
    boolean var6 = var0.requestFocusInWindow();
    java.awt.FocusTraversalPolicy var7 = var0.getFocusTraversalPolicy();
    java.beans.PropertyChangeListener[] var9 = var0.getPropertyChangeListeners("Date Picker");
    boolean var10 = var0.isFontSet();
    com.allenstudio.ir.ui.calendar.MonthlyCalendar var11 = new com.allenstudio.ir.ui.calendar.MonthlyCalendar();
    var0.removeMouseListener((java.awt.event.MouseListener)var11);
    boolean var13 = var11.getWeekStartOnSunday();
    int var14 = var11.getSelectedDay();
    var11.resetHighlight();
    com.allenstudio.ir.ui.DatePickerPane var16 = new com.allenstudio.ir.ui.DatePickerPane();
    javax.swing.KeyStroke[] var17 = var16.getRegisteredKeyStrokes();
    com.allenstudio.ir.ui.DatePickerPane var18 = new com.allenstudio.ir.ui.DatePickerPane();
    javax.swing.plaf.PanelUI var19 = var18.getUI();
    var16.setUI(var19);
    com.allenstudio.ir.ui.calendar.DateChooser var21 = var16.getDateChooser();
    var21.removeDateChooserListener();
    var11.setHeaderComponent((javax.swing.JComponent)var21);
    com.allenstudio.ir.ui.MainFrame var24 = new com.allenstudio.ir.ui.MainFrame();
    java.lang.String var25 = var24.getWarningString();
    java.lang.String var26 = var24.getWarningString();
    boolean var27 = var24.isAutoRequestFocus();
    com.allenstudio.ir.ui.MainFrame var28 = new com.allenstudio.ir.ui.MainFrame();
    java.lang.String var29 = var28.getWarningString();
    boolean var30 = var28.isAlwaysOnTopSupported();
    java.awt.Color var31 = var28.getBackground();
    var24.setBackground(var31);
    var11.setHighlightForeground(var31);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var1);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var5);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var6 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var7);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var9);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var10 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var13 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var14 == 31);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var17);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var19);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var21);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var25);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var26);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var27 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var29);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var30 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var31);

  }

}
