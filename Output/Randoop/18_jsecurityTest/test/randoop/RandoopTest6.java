package randoop;

import junit.framework.*;

public class RandoopTest6 extends TestCase {

  public static boolean debug = false;

  public void test1() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest6.test1");


    org.jsecurity.realm.SimpleAccountRealm var1 = new org.jsecurity.realm.SimpleAccountRealm("hi!");
    java.lang.Class var2 = var1.getAuthenticationTokenClass();
    org.jsecurity.session.mgt.eis.MemorySessionDAO var3 = new org.jsecurity.session.mgt.eis.MemorySessionDAO();
    org.jsecurity.cache.Cache var4 = var3.getActiveSessionsCache();
    org.jsecurity.cache.CacheManager var5 = var3.getCacheManager();
    var1.setCacheManager(var5);
    org.jsecurity.cache.Cache var7 = var1.getAuthorizationCache();
    java.lang.String var8 = var1.getAuthorizationCacheName();
    org.jsecurity.cache.CacheManager var9 = var1.getCacheManager();
    var1.afterAuthorizationCacheSet();
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var2);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var4);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var5);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var7);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var8 + "' != '" + "org.jsecurity.realm.SimpleAccountRealm-749-authorization"+ "'", var8.equals("org.jsecurity.realm.SimpleAccountRealm-749-authorization"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var9);

  }

  public void test2() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest6.test2");


    org.jsecurity.realm.text.TextConfigurationRealm var0 = new org.jsecurity.realm.text.TextConfigurationRealm();
    java.io.InputStream var2 = org.jsecurity.util.ClassUtils.getResourceAsStream("");
    java.lang.Object[] var3 = new java.lang.Object[] { var2};
    java.util.List var4 = org.jsecurity.util.CollectionUtils.asList(var3);
    org.jsecurity.authc.pam.ModularRealmAuthenticator var5 = new org.jsecurity.authc.pam.ModularRealmAuthenticator(var4);
    org.jsecurity.subject.SimplePrincipalCollection var7 = new org.jsecurity.subject.SimplePrincipalCollection((java.util.Collection)var4, "org.jsecurity.authz.UnauthorizedException: org.jsecurity.session.ExpiredSessionException: ");
    org.jsecurity.session.UnknownSessionException var12 = new org.jsecurity.session.UnknownSessionException("dd\uFFFD", (java.io.Serializable)100.0f);
    org.jsecurity.session.SessionException var14 = new org.jsecurity.session.SessionException("dd\uFFFD", (java.lang.Throwable)var12, (java.io.Serializable)0);
    org.jsecurity.session.SessionException var15 = new org.jsecurity.session.SessionException("dd\uFFFD", (java.lang.Throwable)var12);
    var7.add((java.lang.Object)var15, "org.jsecurity.config.ConfigurationException: dd\uFFFD");
    var0.onLogout((org.jsecurity.subject.PrincipalCollection)var7);
    org.jsecurity.cache.HashtableCacheManager var19 = new org.jsecurity.cache.HashtableCacheManager();
    org.jsecurity.cache.Cache var21 = var19.getCache("\u0000\u0000");
    var0.setAuthorizationCache(var21);
    org.jsecurity.codec.CodecException var25 = new org.jsecurity.codec.CodecException("dd\uFFFD");
    org.jsecurity.authc.ConcurrentAccessException var26 = new org.jsecurity.authc.ConcurrentAccessException("org.jsecurity.authz.UnauthorizedException: org.jsecurity.session.ExpiredSessionException: ", (java.lang.Throwable)var25);
    org.jsecurity.subject.SimplePrincipalCollection var28 = new org.jsecurity.subject.SimplePrincipalCollection((java.lang.Object)var25, "");
    var0.onLogout((org.jsecurity.subject.PrincipalCollection)var28);
    var0.setRoleDefinitions("org.jsecurity.config.ConfigurationException: dd\uFFFD");
    java.lang.String var32 = var0.getName();
    var0.afterAuthorizationCacheSet();
    org.jsecurity.authc.pam.ModularRealmAuthenticator var35 = new org.jsecurity.authc.pam.ModularRealmAuthenticator();
    org.jsecurity.authz.permission.InvalidPermissionStringException var38 = new org.jsecurity.authz.permission.InvalidPermissionStringException("", "dd\uFFFD");
    org.jsecurity.JSecurityException var40 = new org.jsecurity.JSecurityException("");
    org.jsecurity.authc.SimpleAuthenticationInfo var42 = new org.jsecurity.authc.SimpleAuthenticationInfo((java.lang.Object)var38, (java.lang.Object)"", "org.jsecurity.authz.UnauthorizedException: org.jsecurity.session.ExpiredSessionException: ");
    org.jsecurity.subject.PrincipalCollection var43 = var42.getPrincipals();
    var35.onLogout(var43);
    org.jsecurity.session.SessionException var45 = new org.jsecurity.session.SessionException("\uFFFD\uFFFD#\uFFFD\uFFFD.\uFFFD+rr\uFFFD\u07CA\u0000\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\u01E9\uFFFD*'\u0000\u0000", (java.io.Serializable)var43);
    var0.onLogout(var43);
    var0.setUserDefinitions("org.jsecurity.realm.text.PropertiesRealm_2347");
    java.lang.String var49 = var0.getRoleDefinitions();
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var2);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var3);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var4);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var21);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var32 + "' != '" + "org.jsecurity.realm.text.TextConfigurationRealm_3771"+ "'", var32.equals("org.jsecurity.realm.text.TextConfigurationRealm_3771"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var43);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var49 + "' != '" + "org.jsecurity.config.ConfigurationException: dd\uFFFD"+ "'", var49.equals("org.jsecurity.config.ConfigurationException: dd\uFFFD"));

  }

  public void test3() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest6.test3");


    org.jsecurity.session.mgt.ExecutorServiceSessionValidationScheduler var0 = new org.jsecurity.session.mgt.ExecutorServiceSessionValidationScheduler();
    var0.setInterval(1L);
    var0.enableSessionValidation();

  }

  public void test4() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest6.test4");


    org.jsecurity.session.UnknownSessionException var6 = new org.jsecurity.session.UnknownSessionException("dd\uFFFD", (java.io.Serializable)100.0f);
    org.jsecurity.config.ConfigurationException var7 = new org.jsecurity.config.ConfigurationException("dd\uFFFD", (java.lang.Throwable)var6);
    org.jsecurity.session.ExpiredSessionException var9 = new org.jsecurity.session.ExpiredSessionException("", (java.lang.Throwable)var7, (java.io.Serializable)true);
    org.jsecurity.authc.pam.UnsupportedTokenException var10 = new org.jsecurity.authc.pam.UnsupportedTokenException((java.lang.Throwable)var9);
    org.jsecurity.authc.AccountException var11 = new org.jsecurity.authc.AccountException((java.lang.Throwable)var10);
    org.jsecurity.authc.DisabledAccountException var12 = new org.jsecurity.authc.DisabledAccountException((java.lang.Throwable)var10);
    org.jsecurity.session.StoppedSessionException var13 = new org.jsecurity.session.StoppedSessionException("org.jsecurity.config.ConfigurationException: dd\uFFFD", (java.io.Serializable)var10);
    org.jsecurity.session.ExpiredSessionException var14 = new org.jsecurity.session.ExpiredSessionException("\u0000\u0000", (java.lang.Throwable)var13);
    org.jsecurity.authc.ConcurrentAccessException var15 = new org.jsecurity.authc.ConcurrentAccessException((java.lang.Throwable)var14);

  }

  public void test5() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest6.test5");


    org.jsecurity.mgt.DefaultSecurityManager var0 = new org.jsecurity.mgt.DefaultSecurityManager();
    java.io.InputStream var2 = org.jsecurity.util.ClassUtils.getResourceAsStream("");
    java.lang.Object[] var3 = new java.lang.Object[] { var2};
    java.util.List var4 = org.jsecurity.util.CollectionUtils.asList(var3);
    org.jsecurity.authc.pam.ModularRealmAuthenticator var5 = new org.jsecurity.authc.pam.ModularRealmAuthenticator(var4);
    org.jsecurity.authc.pam.AllSuccessfulModularAuthenticationStrategy var6 = new org.jsecurity.authc.pam.AllSuccessfulModularAuthenticationStrategy();
    var5.setModularAuthenticationStrategy((org.jsecurity.authc.pam.ModularAuthenticationStrategy)var6);
    org.jsecurity.authz.SimpleAuthorizationInfo var8 = new org.jsecurity.authz.SimpleAuthorizationInfo();
    var8.addStringPermission("hi!");
    java.io.InputStream var12 = org.jsecurity.util.ClassUtils.getResourceAsStream("");
    java.lang.Object[] var13 = new java.lang.Object[] { var12};
    java.util.List var14 = org.jsecurity.util.CollectionUtils.asList(var13);
    var8.addRoles((java.util.Collection)var14);
    var5.setAuthenticationListeners((java.util.Collection)var14);
    var0.setSessionListeners((java.util.Collection)var14);
    org.jsecurity.authc.pam.ModularRealmAuthenticator var18 = new org.jsecurity.authc.pam.ModularRealmAuthenticator();
    org.jsecurity.authz.permission.InvalidPermissionStringException var21 = new org.jsecurity.authz.permission.InvalidPermissionStringException("", "dd\uFFFD");
    org.jsecurity.JSecurityException var23 = new org.jsecurity.JSecurityException("");
    org.jsecurity.authc.SimpleAuthenticationInfo var25 = new org.jsecurity.authc.SimpleAuthenticationInfo((java.lang.Object)var21, (java.lang.Object)"", "org.jsecurity.authz.UnauthorizedException: org.jsecurity.session.ExpiredSessionException: ");
    org.jsecurity.subject.PrincipalCollection var26 = var25.getPrincipals();
    var18.onLogout(var26);
    var0.setAuthenticator((org.jsecurity.authc.Authenticator)var18);
    org.jsecurity.codec.CodecException var31 = new org.jsecurity.codec.CodecException("dd\uFFFD");
    org.jsecurity.authc.ConcurrentAccessException var32 = new org.jsecurity.authc.ConcurrentAccessException("org.jsecurity.authz.UnauthorizedException: org.jsecurity.session.ExpiredSessionException: ", (java.lang.Throwable)var31);
    org.jsecurity.subject.SimplePrincipalCollection var34 = new org.jsecurity.subject.SimplePrincipalCollection((java.lang.Object)var31, "");
    org.jsecurity.authc.pam.FirstSuccessfulAuthenticationStrategy var35 = new org.jsecurity.authc.pam.FirstSuccessfulAuthenticationStrategy();
    org.jsecurity.authz.UnauthorizedException var37 = new org.jsecurity.authz.UnauthorizedException("org.jsecurity.config.ConfigurationException: dd\uFFFD");
    java.lang.Throwable[] var38 = var37.getSuppressed();
    java.util.List var39 = org.jsecurity.util.CollectionUtils.asList((java.lang.Object[])var38);
    org.jsecurity.authc.UsernamePasswordToken var40 = new org.jsecurity.authc.UsernamePasswordToken();
    java.lang.String var41 = var40.getUsername();
    java.net.InetAddress var42 = var40.getInetAddress();
    org.jsecurity.authc.AuthenticationInfo var43 = var35.beforeAllAttempts((java.util.Collection)var39, (org.jsecurity.authc.AuthenticationToken)var40);
    org.jsecurity.session.UnknownSessionException var48 = new org.jsecurity.session.UnknownSessionException("dd\uFFFD", (java.io.Serializable)100.0f);
    org.jsecurity.subject.SubjectException var49 = new org.jsecurity.subject.SubjectException("dd\uFFFD", (java.lang.Throwable)var48);
    org.jsecurity.io.SerializationException var50 = new org.jsecurity.io.SerializationException("", (java.lang.Throwable)var49);
    java.lang.Throwable[] var51 = var49.getSuppressed();
    java.util.Set var52 = org.jsecurity.util.CollectionUtils.asSet((java.lang.Object[])var51);
    org.jsecurity.authc.SimpleAccount var53 = new org.jsecurity.authc.SimpleAccount((org.jsecurity.subject.PrincipalCollection)var34, (java.lang.Object)var39, var52);
    java.io.InputStream var55 = org.jsecurity.util.ClassUtils.getResourceAsStream("");
    java.lang.Object[] var56 = new java.lang.Object[] { var55};
    java.util.List var57 = org.jsecurity.util.CollectionUtils.asList(var56);
    org.jsecurity.authc.pam.ModularRealmAuthenticator var58 = new org.jsecurity.authc.pam.ModularRealmAuthenticator(var57);
    org.jsecurity.subject.SimplePrincipalCollection var60 = new org.jsecurity.subject.SimplePrincipalCollection((java.util.Collection)var57, "org.jsecurity.authz.UnauthorizedException: org.jsecurity.session.ExpiredSessionException: ");
    org.jsecurity.io.ResourceException var64 = new org.jsecurity.io.ResourceException("hi!");
    org.jsecurity.authc.UnknownAccountException var65 = new org.jsecurity.authc.UnknownAccountException((java.lang.Throwable)var64);
    org.jsecurity.session.StoppedSessionException var66 = new org.jsecurity.session.StoppedSessionException("dd\uFFFD", (java.io.Serializable)var64);
    org.jsecurity.session.UnknownSessionException var67 = new org.jsecurity.session.UnknownSessionException("org.jsecurity.authz.UnauthorizedException: org.jsecurity.session.ExpiredSessionException: ", (java.lang.Throwable)var64);
    boolean var68 = var60.equals((java.lang.Object)var64);
    var34.addAll((org.jsecurity.subject.PrincipalCollection)var60);
    org.jsecurity.session.UnknownSessionException var74 = new org.jsecurity.session.UnknownSessionException("dd\uFFFD", (java.io.Serializable)100.0f);
    org.jsecurity.subject.SubjectException var75 = new org.jsecurity.subject.SubjectException("dd\uFFFD", (java.lang.Throwable)var74);
    org.jsecurity.io.SerializationException var76 = new org.jsecurity.io.SerializationException("", (java.lang.Throwable)var75);
    java.lang.Throwable[] var77 = var75.getSuppressed();
    java.util.List var78 = org.jsecurity.util.CollectionUtils.asList((java.lang.Object[])var77);
    boolean var79 = var0.isPermittedAll((org.jsecurity.subject.PrincipalCollection)var34, (java.util.Collection)var78);
    org.jsecurity.subject.DelegatingSubject var80 = new org.jsecurity.subject.DelegatingSubject((org.jsecurity.mgt.SecurityManager)var0);
    var80.logout();
    java.lang.String[] var86 = org.jsecurity.util.StringUtils.split("org.jsecurity.config.ConfigurationException: dd\uFFFD", '4', '4', '4');
    boolean[] var87 = var80.isPermitted(var86);
    java.lang.Object var88 = var80.getPrincipal();
    org.jsecurity.codec.CodecException var91 = new org.jsecurity.codec.CodecException("dd\uFFFD");
    org.jsecurity.authc.ConcurrentAccessException var92 = new org.jsecurity.authc.ConcurrentAccessException("org.jsecurity.authz.UnauthorizedException: org.jsecurity.session.ExpiredSessionException: ", (java.lang.Throwable)var91);
    org.jsecurity.subject.SimplePrincipalCollection var94 = new org.jsecurity.subject.SimplePrincipalCollection((java.lang.Object)var91, "");
    boolean var95 = var94.isEmpty();
    java.util.List var96 = var94.asList();
    boolean[] var97 = var80.isPermitted(var96);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var2);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var3);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var4);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var12);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var13);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var14);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var26);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var38);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var39);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var41);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var42);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var43);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var51);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var52);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var55);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var56);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var57);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var68 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var77);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var78);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var79 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var86);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var87);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var88);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var95 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var96);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var97);

  }

  public void test6() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest6.test6");


    org.jsecurity.authc.credential.AllowAllCredentialsMatcher var0 = new org.jsecurity.authc.credential.AllowAllCredentialsMatcher();
    char[] var3 = new char[] { };
    org.jsecurity.authc.UsernamePasswordToken var5 = new org.jsecurity.authc.UsernamePasswordToken("hi!", var3, true);
    byte[] var6 = org.jsecurity.codec.Hex.decode(var3);
    byte[] var7 = org.jsecurity.codec.Hex.decode(var3);
    org.jsecurity.authc.UsernamePasswordToken var9 = new org.jsecurity.authc.UsernamePasswordToken("ZGT/", var3, false);
    var9.setUsername("ff1bb54d-80f9-4308-a260-ff3ddf1355e9");
    org.jsecurity.authc.pam.AtLeastOneSuccessfulModularAuthenticationStrategy var12 = new org.jsecurity.authc.pam.AtLeastOneSuccessfulModularAuthenticationStrategy();
    org.jsecurity.authc.pam.AllSuccessfulModularAuthenticationStrategy var14 = new org.jsecurity.authc.pam.AllSuccessfulModularAuthenticationStrategy();
    char[] var16 = new char[] { };
    org.jsecurity.authc.UsernamePasswordToken var18 = new org.jsecurity.authc.UsernamePasswordToken("hi!", var16, true);
    org.jsecurity.authc.SimpleAccount var19 = new org.jsecurity.authc.SimpleAccount();
    var19.setCredentialsExpired(false);
    boolean var22 = var19.isLocked();
    org.jsecurity.authc.AuthenticationInfo var23 = var14.afterAllAttempts((org.jsecurity.authc.AuthenticationToken)var18, (org.jsecurity.authc.AuthenticationInfo)var19);
    char[] var26 = new char[] { };
    org.jsecurity.authc.UsernamePasswordToken var28 = new org.jsecurity.authc.UsernamePasswordToken("hi!", var26, true);
    org.jsecurity.authc.UsernamePasswordToken var29 = new org.jsecurity.authc.UsernamePasswordToken("\u0000\u0000", var26);
    var18.setPassword(var26);
    org.jsecurity.authc.UsernamePasswordToken var31 = new org.jsecurity.authc.UsernamePasswordToken("\u0000\u0000\u0000", var26);
    org.jsecurity.realm.text.TextConfigurationRealm var32 = new org.jsecurity.realm.text.TextConfigurationRealm();
    java.io.InputStream var34 = org.jsecurity.util.ClassUtils.getResourceAsStream("");
    java.lang.Object[] var35 = new java.lang.Object[] { var34};
    java.util.List var36 = org.jsecurity.util.CollectionUtils.asList(var35);
    org.jsecurity.authc.pam.ModularRealmAuthenticator var37 = new org.jsecurity.authc.pam.ModularRealmAuthenticator(var36);
    org.jsecurity.subject.SimplePrincipalCollection var39 = new org.jsecurity.subject.SimplePrincipalCollection((java.util.Collection)var36, "org.jsecurity.authz.UnauthorizedException: org.jsecurity.session.ExpiredSessionException: ");
    org.jsecurity.session.UnknownSessionException var44 = new org.jsecurity.session.UnknownSessionException("dd\uFFFD", (java.io.Serializable)100.0f);
    org.jsecurity.session.SessionException var46 = new org.jsecurity.session.SessionException("dd\uFFFD", (java.lang.Throwable)var44, (java.io.Serializable)0);
    org.jsecurity.session.SessionException var47 = new org.jsecurity.session.SessionException("dd\uFFFD", (java.lang.Throwable)var44);
    var39.add((java.lang.Object)var47, "org.jsecurity.config.ConfigurationException: dd\uFFFD");
    var32.onLogout((org.jsecurity.subject.PrincipalCollection)var39);
    org.jsecurity.authc.ExpiredCredentialsException var52 = new org.jsecurity.authc.ExpiredCredentialsException();
    org.jsecurity.session.ExpiredSessionException var53 = new org.jsecurity.session.ExpiredSessionException("", (java.lang.Throwable)var52);
    java.lang.Throwable[] var54 = var53.getSuppressed();
    org.jsecurity.io.ResourceException var55 = new org.jsecurity.io.ResourceException((java.lang.Throwable)var53);
    org.jsecurity.authc.SimpleAuthenticationInfo var56 = new org.jsecurity.authc.SimpleAuthenticationInfo((org.jsecurity.subject.PrincipalCollection)var39, (java.lang.Object)var53);
    org.jsecurity.authc.AuthenticationInfo var57 = var12.afterAllAttempts((org.jsecurity.authc.AuthenticationToken)var31, (org.jsecurity.authc.AuthenticationInfo)var56);
    boolean var58 = var0.doCredentialsMatch((org.jsecurity.authc.AuthenticationToken)var9, var57);
    java.lang.Object var59 = var9.getCredentials();
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var3);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var6);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var7);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var16);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var22 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var23);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var26);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var34);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var35);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var36);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var54);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var57);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var58 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var59);

  }

  public void test7() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest6.test7");


    org.jsecurity.authc.UsernamePasswordToken var2 = new org.jsecurity.authc.UsernamePasswordToken("a2f2e603-3eba-4bf5-80ea-e78161a2c559", "de5c08e4-2d0a-4288-beee-06511caf6487");

  }

  public void test8() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest6.test8");


    org.jsecurity.mgt.DefaultSecurityManager var0 = new org.jsecurity.mgt.DefaultSecurityManager();
    java.io.InputStream var2 = org.jsecurity.util.ClassUtils.getResourceAsStream("");
    java.lang.Object[] var3 = new java.lang.Object[] { var2};
    java.util.List var4 = org.jsecurity.util.CollectionUtils.asList(var3);
    org.jsecurity.authc.pam.ModularRealmAuthenticator var5 = new org.jsecurity.authc.pam.ModularRealmAuthenticator(var4);
    org.jsecurity.authc.pam.AllSuccessfulModularAuthenticationStrategy var6 = new org.jsecurity.authc.pam.AllSuccessfulModularAuthenticationStrategy();
    var5.setModularAuthenticationStrategy((org.jsecurity.authc.pam.ModularAuthenticationStrategy)var6);
    org.jsecurity.authz.SimpleAuthorizationInfo var8 = new org.jsecurity.authz.SimpleAuthorizationInfo();
    var8.addStringPermission("hi!");
    java.io.InputStream var12 = org.jsecurity.util.ClassUtils.getResourceAsStream("");
    java.lang.Object[] var13 = new java.lang.Object[] { var12};
    java.util.List var14 = org.jsecurity.util.CollectionUtils.asList(var13);
    var8.addRoles((java.util.Collection)var14);
    var5.setAuthenticationListeners((java.util.Collection)var14);
    var0.setSessionListeners((java.util.Collection)var14);
    org.jsecurity.authc.pam.ModularRealmAuthenticator var18 = new org.jsecurity.authc.pam.ModularRealmAuthenticator();
    org.jsecurity.authz.permission.InvalidPermissionStringException var21 = new org.jsecurity.authz.permission.InvalidPermissionStringException("", "dd\uFFFD");
    org.jsecurity.JSecurityException var23 = new org.jsecurity.JSecurityException("");
    org.jsecurity.authc.SimpleAuthenticationInfo var25 = new org.jsecurity.authc.SimpleAuthenticationInfo((java.lang.Object)var21, (java.lang.Object)"", "org.jsecurity.authz.UnauthorizedException: org.jsecurity.session.ExpiredSessionException: ");
    org.jsecurity.subject.PrincipalCollection var26 = var25.getPrincipals();
    var18.onLogout(var26);
    var0.setAuthenticator((org.jsecurity.authc.Authenticator)var18);
    org.jsecurity.codec.CodecException var31 = new org.jsecurity.codec.CodecException("dd\uFFFD");
    org.jsecurity.authc.ConcurrentAccessException var32 = new org.jsecurity.authc.ConcurrentAccessException("org.jsecurity.authz.UnauthorizedException: org.jsecurity.session.ExpiredSessionException: ", (java.lang.Throwable)var31);
    org.jsecurity.subject.SimplePrincipalCollection var34 = new org.jsecurity.subject.SimplePrincipalCollection((java.lang.Object)var31, "");
    org.jsecurity.authc.pam.FirstSuccessfulAuthenticationStrategy var35 = new org.jsecurity.authc.pam.FirstSuccessfulAuthenticationStrategy();
    org.jsecurity.authz.UnauthorizedException var37 = new org.jsecurity.authz.UnauthorizedException("org.jsecurity.config.ConfigurationException: dd\uFFFD");
    java.lang.Throwable[] var38 = var37.getSuppressed();
    java.util.List var39 = org.jsecurity.util.CollectionUtils.asList((java.lang.Object[])var38);
    org.jsecurity.authc.UsernamePasswordToken var40 = new org.jsecurity.authc.UsernamePasswordToken();
    java.lang.String var41 = var40.getUsername();
    java.net.InetAddress var42 = var40.getInetAddress();
    org.jsecurity.authc.AuthenticationInfo var43 = var35.beforeAllAttempts((java.util.Collection)var39, (org.jsecurity.authc.AuthenticationToken)var40);
    org.jsecurity.session.UnknownSessionException var48 = new org.jsecurity.session.UnknownSessionException("dd\uFFFD", (java.io.Serializable)100.0f);
    org.jsecurity.subject.SubjectException var49 = new org.jsecurity.subject.SubjectException("dd\uFFFD", (java.lang.Throwable)var48);
    org.jsecurity.io.SerializationException var50 = new org.jsecurity.io.SerializationException("", (java.lang.Throwable)var49);
    java.lang.Throwable[] var51 = var49.getSuppressed();
    java.util.Set var52 = org.jsecurity.util.CollectionUtils.asSet((java.lang.Object[])var51);
    org.jsecurity.authc.SimpleAccount var53 = new org.jsecurity.authc.SimpleAccount((org.jsecurity.subject.PrincipalCollection)var34, (java.lang.Object)var39, var52);
    java.io.InputStream var55 = org.jsecurity.util.ClassUtils.getResourceAsStream("");
    java.lang.Object[] var56 = new java.lang.Object[] { var55};
    java.util.List var57 = org.jsecurity.util.CollectionUtils.asList(var56);
    org.jsecurity.authc.pam.ModularRealmAuthenticator var58 = new org.jsecurity.authc.pam.ModularRealmAuthenticator(var57);
    org.jsecurity.subject.SimplePrincipalCollection var60 = new org.jsecurity.subject.SimplePrincipalCollection((java.util.Collection)var57, "org.jsecurity.authz.UnauthorizedException: org.jsecurity.session.ExpiredSessionException: ");
    org.jsecurity.io.ResourceException var64 = new org.jsecurity.io.ResourceException("hi!");
    org.jsecurity.authc.UnknownAccountException var65 = new org.jsecurity.authc.UnknownAccountException((java.lang.Throwable)var64);
    org.jsecurity.session.StoppedSessionException var66 = new org.jsecurity.session.StoppedSessionException("dd\uFFFD", (java.io.Serializable)var64);
    org.jsecurity.session.UnknownSessionException var67 = new org.jsecurity.session.UnknownSessionException("org.jsecurity.authz.UnauthorizedException: org.jsecurity.session.ExpiredSessionException: ", (java.lang.Throwable)var64);
    boolean var68 = var60.equals((java.lang.Object)var64);
    var34.addAll((org.jsecurity.subject.PrincipalCollection)var60);
    org.jsecurity.session.UnknownSessionException var74 = new org.jsecurity.session.UnknownSessionException("dd\uFFFD", (java.io.Serializable)100.0f);
    org.jsecurity.subject.SubjectException var75 = new org.jsecurity.subject.SubjectException("dd\uFFFD", (java.lang.Throwable)var74);
    org.jsecurity.io.SerializationException var76 = new org.jsecurity.io.SerializationException("", (java.lang.Throwable)var75);
    java.lang.Throwable[] var77 = var75.getSuppressed();
    java.util.List var78 = org.jsecurity.util.CollectionUtils.asList((java.lang.Object[])var77);
    boolean var79 = var0.isPermittedAll((org.jsecurity.subject.PrincipalCollection)var34, (java.util.Collection)var78);
    org.jsecurity.session.mgt.SessionManager var80 = var0.getSessionManager();
    org.jsecurity.subject.DelegatingSubject var81 = new org.jsecurity.subject.DelegatingSubject((org.jsecurity.mgt.SecurityManager)var0);
    var0.destroy();
    org.jsecurity.authc.IncorrectCredentialsException var84 = new org.jsecurity.authc.IncorrectCredentialsException("dd\uFFFD");
    org.jsecurity.session.UnknownSessionException var90 = new org.jsecurity.session.UnknownSessionException("dd\uFFFD", (java.io.Serializable)100.0f);
    org.jsecurity.config.ConfigurationException var91 = new org.jsecurity.config.ConfigurationException("dd\uFFFD", (java.lang.Throwable)var90);
    org.jsecurity.session.ExpiredSessionException var93 = new org.jsecurity.session.ExpiredSessionException("", (java.lang.Throwable)var91, (java.io.Serializable)true);
    org.jsecurity.authc.pam.UnsupportedTokenException var94 = new org.jsecurity.authc.pam.UnsupportedTokenException((java.lang.Throwable)var93);
    org.jsecurity.authc.AccountException var95 = new org.jsecurity.authc.AccountException((java.lang.Throwable)var94);
    org.jsecurity.authc.DisabledAccountException var96 = new org.jsecurity.authc.DisabledAccountException((java.lang.Throwable)var94);
    org.jsecurity.session.ExpiredSessionException var97 = new org.jsecurity.session.ExpiredSessionException("dd\uFFFD", (java.io.Serializable)var94);
    var84.addSuppressed((java.lang.Throwable)var94);
    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      org.jsecurity.session.Session var99 = var0.getSession((java.io.Serializable)var84);
      fail("Expected exception of type java.lang.IllegalStateException");
    } catch (java.lang.IllegalStateException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var2);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var3);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var4);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var12);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var13);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var14);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var26);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var38);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var39);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var41);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var42);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var43);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var51);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var52);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var55);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var56);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var57);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var68 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var77);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var78);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var79 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var80);

  }

  public void test9() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest6.test9");


    org.jsecurity.realm.jndi.JndiRealmFactory var0 = new org.jsecurity.realm.jndi.JndiRealmFactory();
    java.util.Collection var1 = var0.getJndiNames();
    org.jsecurity.jndi.JndiTemplate var2 = var0.getJndiTemplate();
    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      java.util.Collection var3 = var0.getRealms();
      fail("Expected exception of type java.lang.IllegalStateException");
    } catch (java.lang.IllegalStateException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var1);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var2);

  }

  public void test10() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest6.test10");


    org.jsecurity.session.StoppedSessionException var1 = new org.jsecurity.session.StoppedSessionException((java.io.Serializable)"9e3d1131-586f-4bbb-9a00-b1186bff9c0b");

  }

  public void test11() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest6.test11");


    org.jsecurity.cache.ehcache.EhCacheManager var0 = new org.jsecurity.cache.ehcache.EhCacheManager();
    var0.init();
    var0.setCacheManagerConfigFile("b6a77f71-73c4-466a-903e-72fc5968f9ac");
    net.sf.ehcache.CacheManager var4 = var0.getCacheManager();
    net.sf.ehcache.CacheManager var5 = var0.getCacheManager();
    java.lang.String var6 = var0.getCacheManagerConfigFile();
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var4);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var5);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var6 + "' != '" + "b6a77f71-73c4-466a-903e-72fc5968f9ac"+ "'", var6.equals("b6a77f71-73c4-466a-903e-72fc5968f9ac"));

  }

  public void test12() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest6.test12");


    org.jsecurity.authz.ModularRealmAuthorizer var0 = new org.jsecurity.authz.ModularRealmAuthorizer();
    java.util.Collection var1 = var0.getRealms();
    org.jsecurity.cache.HashtableCache var3 = new org.jsecurity.cache.HashtableCache("\u0000\u0000\u0000");
    org.jsecurity.session.mgt.SimpleSession var4 = new org.jsecurity.session.mgt.SimpleSession();
    var4.touch();
    org.jsecurity.authz.UnauthenticatedException var8 = new org.jsecurity.authz.UnauthenticatedException();
    org.jsecurity.config.UnresolveableReferenceException var9 = new org.jsecurity.config.UnresolveableReferenceException("", (java.lang.Throwable)var8);
    org.jsecurity.cache.CacheException var10 = new org.jsecurity.cache.CacheException("org.jsecurity.config.ConfigurationException: dd\uFFFD", (java.lang.Throwable)var8);
    java.lang.Object var11 = var4.removeAttribute((java.lang.Object)var10);
    org.jsecurity.mgt.DefaultSecurityManager var12 = new org.jsecurity.mgt.DefaultSecurityManager();
    org.jsecurity.authc.pam.AllSuccessfulModularAuthenticationStrategy var13 = new org.jsecurity.authc.pam.AllSuccessfulModularAuthenticationStrategy();
    org.jsecurity.authc.pam.AllSuccessfulModularAuthenticationStrategy var14 = new org.jsecurity.authc.pam.AllSuccessfulModularAuthenticationStrategy();
    char[] var16 = new char[] { };
    org.jsecurity.authc.UsernamePasswordToken var18 = new org.jsecurity.authc.UsernamePasswordToken("hi!", var16, true);
    org.jsecurity.authc.SimpleAccount var19 = new org.jsecurity.authc.SimpleAccount();
    var19.setCredentialsExpired(false);
    boolean var22 = var19.isLocked();
    org.jsecurity.authc.AuthenticationInfo var23 = var14.afterAllAttempts((org.jsecurity.authc.AuthenticationToken)var18, (org.jsecurity.authc.AuthenticationInfo)var19);
    char[] var27 = new char[] { '4', '#'};
    org.jsecurity.authc.UsernamePasswordToken var28 = new org.jsecurity.authc.UsernamePasswordToken("\u0000\u0000", var27);
    org.jsecurity.authc.SimpleAccount var29 = new org.jsecurity.authc.SimpleAccount();
    var29.setCredentialsExpired(false);
    var29.setCredentialsExpired(false);
    boolean var34 = var29.isCredentialsExpired();
    org.jsecurity.authc.AuthenticationInfo var35 = var14.afterAllAttempts((org.jsecurity.authc.AuthenticationToken)var28, (org.jsecurity.authc.AuthenticationInfo)var29);
    org.jsecurity.authz.UnauthenticatedException var39 = new org.jsecurity.authz.UnauthenticatedException();
    org.jsecurity.config.UnresolveableReferenceException var40 = new org.jsecurity.config.UnresolveableReferenceException("", (java.lang.Throwable)var39);
    org.jsecurity.cache.CacheException var41 = new org.jsecurity.cache.CacheException("org.jsecurity.config.ConfigurationException: dd\uFFFD", (java.lang.Throwable)var39);
    org.jsecurity.authc.SimpleAuthenticationInfo var43 = new org.jsecurity.authc.SimpleAuthenticationInfo((java.lang.Object)"org.jsecurity.config.ConfigurationException: dd\uFFFD", (java.lang.Object)var41, "a2b823b1e72eae2b727289df8a00a89df8a0bab6ad8a89c4c5c7a9b62a270000");
    org.jsecurity.subject.PrincipalCollection var44 = var43.getPrincipals();
    org.jsecurity.authc.AuthenticationInfo var45 = var13.afterAllAttempts((org.jsecurity.authc.AuthenticationToken)var28, (org.jsecurity.authc.AuthenticationInfo)var43);
    var12.setModularAuthenticationStrategy((org.jsecurity.authc.pam.ModularAuthenticationStrategy)var13);
    org.jsecurity.subject.RememberMeManager var47 = var12.getRememberMeManager();
    org.jsecurity.authc.pam.ModularRealmAuthenticator var48 = new org.jsecurity.authc.pam.ModularRealmAuthenticator();
    var12.setAuthenticator((org.jsecurity.authc.Authenticator)var48);
    var3.put((java.lang.Object)var4, (java.lang.Object)var48);
    java.util.Set var51 = var3.keys();
    var0.setRealms((java.util.Collection)var51);
    org.jsecurity.realm.text.TextConfigurationRealm var53 = new org.jsecurity.realm.text.TextConfigurationRealm();
    java.io.InputStream var55 = org.jsecurity.util.ClassUtils.getResourceAsStream("");
    java.lang.Object[] var56 = new java.lang.Object[] { var55};
    java.util.List var57 = org.jsecurity.util.CollectionUtils.asList(var56);
    org.jsecurity.authc.pam.ModularRealmAuthenticator var58 = new org.jsecurity.authc.pam.ModularRealmAuthenticator(var57);
    org.jsecurity.subject.SimplePrincipalCollection var60 = new org.jsecurity.subject.SimplePrincipalCollection((java.util.Collection)var57, "org.jsecurity.authz.UnauthorizedException: org.jsecurity.session.ExpiredSessionException: ");
    org.jsecurity.session.UnknownSessionException var65 = new org.jsecurity.session.UnknownSessionException("dd\uFFFD", (java.io.Serializable)100.0f);
    org.jsecurity.session.SessionException var67 = new org.jsecurity.session.SessionException("dd\uFFFD", (java.lang.Throwable)var65, (java.io.Serializable)0);
    org.jsecurity.session.SessionException var68 = new org.jsecurity.session.SessionException("dd\uFFFD", (java.lang.Throwable)var65);
    var60.add((java.lang.Object)var68, "org.jsecurity.config.ConfigurationException: dd\uFFFD");
    var53.onLogout((org.jsecurity.subject.PrincipalCollection)var60);
    org.jsecurity.cache.HashtableCacheManager var72 = new org.jsecurity.cache.HashtableCacheManager();
    org.jsecurity.cache.Cache var74 = var72.getCache("\u0000\u0000");
    var53.setAuthorizationCache(var74);
    org.jsecurity.codec.CodecException var78 = new org.jsecurity.codec.CodecException("dd\uFFFD");
    org.jsecurity.authc.ConcurrentAccessException var79 = new org.jsecurity.authc.ConcurrentAccessException("org.jsecurity.authz.UnauthorizedException: org.jsecurity.session.ExpiredSessionException: ", (java.lang.Throwable)var78);
    org.jsecurity.subject.SimplePrincipalCollection var81 = new org.jsecurity.subject.SimplePrincipalCollection((java.lang.Object)var78, "");
    var53.onLogout((org.jsecurity.subject.PrincipalCollection)var81);
    java.util.Iterator var83 = var81.iterator();
    org.jsecurity.authz.SimpleRole var85 = new org.jsecurity.authz.SimpleRole("9370bad8-7774-4f3f-9431-c39c9f6aa37d");
    org.jsecurity.authz.permission.WildcardPermission var88 = new org.jsecurity.authz.permission.WildcardPermission("6ef0ea81-df08-48cf-af25-ca783616684e", true);
    boolean var89 = var85.isPermitted((org.jsecurity.authz.Permission)var88);
    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      boolean var90 = var0.isPermitted((org.jsecurity.subject.PrincipalCollection)var81, (org.jsecurity.authz.Permission)var88);
      fail("Expected exception of type java.lang.ClassCastException");
    } catch (java.lang.ClassCastException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var1);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var11);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var16);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var22 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var23);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var27);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var34 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var35);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var44);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var45);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var47);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var51);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var55);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var56);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var57);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var74);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var83);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var89 == false);

  }

  public void test13() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest6.test13");


    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      byte[] var1 = org.jsecurity.codec.Hex.decode("fa569031-d16a-4eec-aa4e-d71facfe348e");
      fail("Expected exception of type java.lang.IllegalArgumentException");
    } catch (java.lang.IllegalArgumentException e) {
      // Expected exception.
    }

  }

  public void test14() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest6.test14");


    org.jsecurity.cache.HashtableCache var1 = new org.jsecurity.cache.HashtableCache("orgjsecurityauthcCredentialsException783ccd3148a842dd890fdf885a7baafAA==");
    int var2 = var1.size();
    org.jsecurity.session.UnknownSessionException var7 = new org.jsecurity.session.UnknownSessionException("dd\uFFFD", (java.io.Serializable)100.0f);
    org.jsecurity.subject.SubjectException var8 = new org.jsecurity.subject.SubjectException("dd\uFFFD", (java.lang.Throwable)var7);
    org.jsecurity.authc.AccountException var9 = new org.jsecurity.authc.AccountException("hi!", (java.lang.Throwable)var8);
    org.jsecurity.session.UnknownSessionException var10 = new org.jsecurity.session.UnknownSessionException((java.lang.Throwable)var8);
    org.jsecurity.codec.CodecException var11 = new org.jsecurity.codec.CodecException((java.lang.Throwable)var8);
    org.jsecurity.config.UnresolveableReferenceException var12 = new org.jsecurity.config.UnresolveableReferenceException((java.lang.Throwable)var8);
    char[] var16 = new char[] { ' ', ' '};
    org.jsecurity.authc.UsernamePasswordToken var17 = new org.jsecurity.authc.UsernamePasswordToken("hi!", var16);
    char[] var21 = new char[] { '4', '#'};
    org.jsecurity.authc.UsernamePasswordToken var22 = new org.jsecurity.authc.UsernamePasswordToken("\u0000\u0000", var21);
    var17.setPassword(var21);
    var1.put((java.lang.Object)var8, (java.lang.Object)var21);
    org.jsecurity.realm.activedirectory.ActiveDirectoryRealm var26 = new org.jsecurity.realm.activedirectory.ActiveDirectoryRealm();
    var26.init();
    var26.setSystemPassword("dd\uFFFD");
    org.jsecurity.authz.aop.GuestAnnotationHandler var30 = new org.jsecurity.authz.aop.GuestAnnotationHandler();
    java.lang.Class var31 = var30.getAnnotationClass();
    var26.setAuthenticationTokenClass(var31);
    org.jsecurity.mgt.DefaultSecurityManager var33 = new org.jsecurity.mgt.DefaultSecurityManager((org.jsecurity.realm.Realm)var26);
    org.jsecurity.mgt.DefaultSecurityManager var34 = new org.jsecurity.mgt.DefaultSecurityManager();
    java.io.InputStream var36 = org.jsecurity.util.ClassUtils.getResourceAsStream("");
    java.lang.Object[] var37 = new java.lang.Object[] { var36};
    java.util.List var38 = org.jsecurity.util.CollectionUtils.asList(var37);
    org.jsecurity.authc.pam.ModularRealmAuthenticator var39 = new org.jsecurity.authc.pam.ModularRealmAuthenticator(var38);
    org.jsecurity.authc.pam.AllSuccessfulModularAuthenticationStrategy var40 = new org.jsecurity.authc.pam.AllSuccessfulModularAuthenticationStrategy();
    var39.setModularAuthenticationStrategy((org.jsecurity.authc.pam.ModularAuthenticationStrategy)var40);
    org.jsecurity.authz.SimpleAuthorizationInfo var42 = new org.jsecurity.authz.SimpleAuthorizationInfo();
    var42.addStringPermission("hi!");
    java.io.InputStream var46 = org.jsecurity.util.ClassUtils.getResourceAsStream("");
    java.lang.Object[] var47 = new java.lang.Object[] { var46};
    java.util.List var48 = org.jsecurity.util.CollectionUtils.asList(var47);
    var42.addRoles((java.util.Collection)var48);
    var39.setAuthenticationListeners((java.util.Collection)var48);
    var34.setSessionListeners((java.util.Collection)var48);
    org.jsecurity.realm.text.TextConfigurationRealm var52 = new org.jsecurity.realm.text.TextConfigurationRealm();
    java.io.InputStream var54 = org.jsecurity.util.ClassUtils.getResourceAsStream("");
    java.lang.Object[] var55 = new java.lang.Object[] { var54};
    java.util.List var56 = org.jsecurity.util.CollectionUtils.asList(var55);
    org.jsecurity.authc.pam.ModularRealmAuthenticator var57 = new org.jsecurity.authc.pam.ModularRealmAuthenticator(var56);
    org.jsecurity.subject.SimplePrincipalCollection var59 = new org.jsecurity.subject.SimplePrincipalCollection((java.util.Collection)var56, "org.jsecurity.authz.UnauthorizedException: org.jsecurity.session.ExpiredSessionException: ");
    org.jsecurity.session.UnknownSessionException var64 = new org.jsecurity.session.UnknownSessionException("dd\uFFFD", (java.io.Serializable)100.0f);
    org.jsecurity.session.SessionException var66 = new org.jsecurity.session.SessionException("dd\uFFFD", (java.lang.Throwable)var64, (java.io.Serializable)0);
    org.jsecurity.session.SessionException var67 = new org.jsecurity.session.SessionException("dd\uFFFD", (java.lang.Throwable)var64);
    var59.add((java.lang.Object)var67, "org.jsecurity.config.ConfigurationException: dd\uFFFD");
    var52.onLogout((org.jsecurity.subject.PrincipalCollection)var59);
    org.jsecurity.authc.pam.FirstSuccessfulAuthenticationStrategy var71 = new org.jsecurity.authc.pam.FirstSuccessfulAuthenticationStrategy();
    org.jsecurity.authz.UnauthorizedException var73 = new org.jsecurity.authz.UnauthorizedException("org.jsecurity.config.ConfigurationException: dd\uFFFD");
    java.lang.Throwable[] var74 = var73.getSuppressed();
    java.util.List var75 = org.jsecurity.util.CollectionUtils.asList((java.lang.Object[])var74);
    org.jsecurity.authc.UsernamePasswordToken var76 = new org.jsecurity.authc.UsernamePasswordToken();
    java.lang.String var77 = var76.getUsername();
    java.net.InetAddress var78 = var76.getInetAddress();
    org.jsecurity.authc.AuthenticationInfo var79 = var71.beforeAllAttempts((java.util.Collection)var75, (org.jsecurity.authc.AuthenticationToken)var76);
    boolean[] var80 = var34.hasRoles((org.jsecurity.subject.PrincipalCollection)var59, var75);
    org.jsecurity.session.mgt.SessionManager var81 = var34.getSessionManager();
    var33.setSessionManager(var81);
    org.jsecurity.cache.CacheManager var83 = var33.getCacheManager();
    var1.put((java.lang.Object)"org.jsecurity.config.ConfigurationException: dd\uFFFD-4org.jsecurity.config.ConfigurationException: dd\uFFFD02-8085-950org.jsecurity.config.ConfigurationException: dd\uFFFDbb026org.jsecurity.config.ConfigurationException: dd\uFFFD06", (java.lang.Object)var33);
    org.jsecurity.subject.DelegatingSubject var85 = new org.jsecurity.subject.DelegatingSubject((org.jsecurity.mgt.SecurityManager)var33);
    org.jsecurity.authz.permission.WildcardPermission var87 = new org.jsecurity.authz.permission.WildcardPermission("org.jsecurity.realm.text.TextConfigurationRealm_2382");
    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      var85.checkPermission((org.jsecurity.authz.Permission)var87);
      fail("Expected exception of type org.jsecurity.authz.UnauthenticatedException");
    } catch (org.jsecurity.authz.UnauthenticatedException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var2 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var16);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var21);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var31);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var36);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var37);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var38);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var46);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var47);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var48);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var54);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var55);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var56);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var74);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var75);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var77);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var78);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var79);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var80);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var81);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var83);

  }

  public void test15() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest6.test15");


    org.jsecurity.realm.activedirectory.ActiveDirectoryRealm var0 = new org.jsecurity.realm.activedirectory.ActiveDirectoryRealm();
    org.jsecurity.authc.credential.Sha256CredentialsMatcher var1 = new org.jsecurity.authc.credential.Sha256CredentialsMatcher();
    var0.setCredentialsMatcher((org.jsecurity.authc.credential.CredentialsMatcher)var1);
    java.lang.String var3 = var0.getAuthorizationCacheName();
    var0.setPrincipalSuffix("org.jsecurity.config.ConfigurationException: dd\uFFFD");
    org.jsecurity.realm.text.TextConfigurationRealm var6 = new org.jsecurity.realm.text.TextConfigurationRealm();
    java.io.InputStream var8 = org.jsecurity.util.ClassUtils.getResourceAsStream("");
    java.lang.Object[] var9 = new java.lang.Object[] { var8};
    java.util.List var10 = org.jsecurity.util.CollectionUtils.asList(var9);
    org.jsecurity.authc.pam.ModularRealmAuthenticator var11 = new org.jsecurity.authc.pam.ModularRealmAuthenticator(var10);
    org.jsecurity.subject.SimplePrincipalCollection var13 = new org.jsecurity.subject.SimplePrincipalCollection((java.util.Collection)var10, "org.jsecurity.authz.UnauthorizedException: org.jsecurity.session.ExpiredSessionException: ");
    org.jsecurity.session.UnknownSessionException var18 = new org.jsecurity.session.UnknownSessionException("dd\uFFFD", (java.io.Serializable)100.0f);
    org.jsecurity.session.SessionException var20 = new org.jsecurity.session.SessionException("dd\uFFFD", (java.lang.Throwable)var18, (java.io.Serializable)0);
    org.jsecurity.session.SessionException var21 = new org.jsecurity.session.SessionException("dd\uFFFD", (java.lang.Throwable)var18);
    var13.add((java.lang.Object)var21, "org.jsecurity.config.ConfigurationException: dd\uFFFD");
    var6.onLogout((org.jsecurity.subject.PrincipalCollection)var13);
    var0.onLogout((org.jsecurity.subject.PrincipalCollection)var13);
    org.jsecurity.realm.SimpleAccountRealm var27 = new org.jsecurity.realm.SimpleAccountRealm("hi!");
    java.lang.Class var28 = var27.getAuthenticationTokenClass();
    java.util.Collection var29 = org.jsecurity.util.CollectionUtils.emptyCollection(var28);
    java.util.Collection var30 = var13.byType(var28);
    org.jsecurity.authz.ModularRealmAuthorizer var31 = new org.jsecurity.authz.ModularRealmAuthorizer(var30);
    org.jsecurity.mgt.DefaultSecurityManager var33 = new org.jsecurity.mgt.DefaultSecurityManager();
    java.io.InputStream var35 = org.jsecurity.util.ClassUtils.getResourceAsStream("");
    java.lang.Object[] var36 = new java.lang.Object[] { var35};
    java.util.List var37 = org.jsecurity.util.CollectionUtils.asList(var36);
    org.jsecurity.authc.pam.ModularRealmAuthenticator var38 = new org.jsecurity.authc.pam.ModularRealmAuthenticator(var37);
    org.jsecurity.authc.pam.AllSuccessfulModularAuthenticationStrategy var39 = new org.jsecurity.authc.pam.AllSuccessfulModularAuthenticationStrategy();
    var38.setModularAuthenticationStrategy((org.jsecurity.authc.pam.ModularAuthenticationStrategy)var39);
    org.jsecurity.authz.SimpleAuthorizationInfo var41 = new org.jsecurity.authz.SimpleAuthorizationInfo();
    var41.addStringPermission("hi!");
    java.io.InputStream var45 = org.jsecurity.util.ClassUtils.getResourceAsStream("");
    java.lang.Object[] var46 = new java.lang.Object[] { var45};
    java.util.List var47 = org.jsecurity.util.CollectionUtils.asList(var46);
    var41.addRoles((java.util.Collection)var47);
    var38.setAuthenticationListeners((java.util.Collection)var47);
    var33.setSessionListeners((java.util.Collection)var47);
    org.jsecurity.subject.Subject var51 = var33.getSubject();
    org.jsecurity.authz.permission.WildcardPermissionResolver var52 = new org.jsecurity.authz.permission.WildcardPermissionResolver();
    var33.setPermissionResolver((org.jsecurity.authz.permission.PermissionResolver)var52);
    java.util.Set var54 = org.jsecurity.util.PermissionUtils.resolveDelimitedPermissions("9370bad8-7774-4f3f-9431-c39c9f6aa37d", (org.jsecurity.authz.permission.PermissionResolver)var52);
    var31.setRealms((java.util.Collection)var54);
    org.jsecurity.codec.CodecException var58 = new org.jsecurity.codec.CodecException("dd\uFFFD");
    org.jsecurity.authc.ConcurrentAccessException var59 = new org.jsecurity.authc.ConcurrentAccessException("org.jsecurity.authz.UnauthorizedException: org.jsecurity.session.ExpiredSessionException: ", (java.lang.Throwable)var58);
    org.jsecurity.subject.SimplePrincipalCollection var61 = new org.jsecurity.subject.SimplePrincipalCollection((java.lang.Object)var58, "");
    java.io.InputStream var63 = org.jsecurity.util.ClassUtils.getResourceAsStream("");
    java.lang.Object[] var64 = new java.lang.Object[] { var63};
    java.util.List var65 = org.jsecurity.util.CollectionUtils.asList(var64);
    org.jsecurity.authc.pam.ModularRealmAuthenticator var66 = new org.jsecurity.authc.pam.ModularRealmAuthenticator(var65);
    var61.addAll((java.util.Collection)var65, "\u0000\u0000");
    java.io.InputStream var70 = org.jsecurity.util.ClassUtils.getResourceAsStream("");
    java.lang.Object[] var71 = new java.lang.Object[] { var70};
    java.util.List var72 = org.jsecurity.util.CollectionUtils.asList(var71);
    org.jsecurity.authc.pam.ModularRealmAuthenticator var73 = new org.jsecurity.authc.pam.ModularRealmAuthenticator(var72);
    var61.addAll((java.util.Collection)var72, "\u0000\u0000");
    org.jsecurity.io.IniResource var76 = new org.jsecurity.io.IniResource();
    var76.setCharsetName("org.jsecurity.authz.UnauthorizedException: org.jsecurity.session.ExpiredSessionException: ");
    java.util.Map var79 = var76.getSections();
    java.util.Map var80 = var76.getSections();
    var61.add((java.lang.Object)var80, "345d9036-762c-4f58-8690-c901bf299cde");
    java.lang.String[] var89 = org.jsecurity.util.StringUtils.split("d8d550ee-3a8c-48f0-8061-1d82c827f505", ' ', '#', 'a', true, false);
    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      var31.checkPermissions((org.jsecurity.subject.PrincipalCollection)var61, var89);
      fail("Expected exception of type java.lang.ClassCastException");
    } catch (java.lang.ClassCastException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var3);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var8);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var9);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var10);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var28);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var29);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var30);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var35);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var36);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var37);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var45);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var46);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var47);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var51);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var54);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var63);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var64);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var65);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var70);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var71);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var72);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var79);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var80);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var89);

  }

  public void test16() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest6.test16");


    org.jsecurity.realm.jdbc.JdbcRealm var0 = new org.jsecurity.realm.jdbc.JdbcRealm();
    var0.setPermissionsQuery("org.jsecurity.authz.UnauthorizedException: org.jsecurity.session.ExpiredSessionException: ");
    var0.setUserRolesQuery("c02079b2-68a6-47b8-b05b-0ae0ae0255bd");
    var0.setUserRolesQuery("e84eb2c8-e826-4516-a1db-23dab0adcbe8");

  }

  public void test17() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest6.test17");


    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      org.jsecurity.io.IniResource var1 = new org.jsecurity.io.IniResource("986af112-265f-4ca0-a205-3bd02cf4963c");
      fail("Expected exception of type org.jsecurity.io.ResourceException");
    } catch (org.jsecurity.io.ResourceException e) {
      // Expected exception.
    }

  }

  public void test18() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest6.test18");


    org.jsecurity.io.XmlSerializer var0 = new org.jsecurity.io.XmlSerializer();
    org.jsecurity.session.mgt.quartz.QuartzSessionValidationScheduler var1 = new org.jsecurity.session.mgt.quartz.QuartzSessionValidationScheduler();
    var1.disableSessionValidation();
    byte[] var3 = var0.serialize((java.lang.Object)var1);
    org.jsecurity.authc.ExpiredCredentialsException var6 = new org.jsecurity.authc.ExpiredCredentialsException();
    org.jsecurity.session.ExpiredSessionException var7 = new org.jsecurity.session.ExpiredSessionException("", (java.lang.Throwable)var6);
    org.jsecurity.authz.UnauthorizedException var8 = new org.jsecurity.authz.UnauthorizedException((java.lang.Throwable)var7);
    org.jsecurity.session.ExpiredSessionException var9 = new org.jsecurity.session.ExpiredSessionException("?\u0238\u0018@\uFFFD", (java.lang.Throwable)var7);
    byte[] var10 = var0.serialize((java.lang.Object)var9);
    org.jsecurity.authz.HostUnauthorizedException var13 = new org.jsecurity.authz.HostUnauthorizedException("dd\uFFFD");
    org.jsecurity.authc.UnknownAccountException var14 = new org.jsecurity.authc.UnknownAccountException("46b05a44-d2f3-4a9e-b289-ce4f2d173048", (java.lang.Throwable)var13);
    byte[] var15 = var0.serialize((java.lang.Object)"46b05a44-d2f3-4a9e-b289-ce4f2d173048");
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var3);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var10);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var15);

  }

  public void test19() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest6.test19");


    org.jsecurity.codec.CodecException var2 = new org.jsecurity.codec.CodecException("dd\uFFFD");
    org.jsecurity.authc.ConcurrentAccessException var3 = new org.jsecurity.authc.ConcurrentAccessException("org.jsecurity.authz.UnauthorizedException: org.jsecurity.session.ExpiredSessionException: ", (java.lang.Throwable)var2);
    org.jsecurity.subject.SimplePrincipalCollection var5 = new org.jsecurity.subject.SimplePrincipalCollection((java.lang.Object)var2, "");
    boolean var6 = var5.isEmpty();
    java.util.List var7 = var5.asList();
    org.jsecurity.authc.pam.ModularRealmAuthenticator var8 = new org.jsecurity.authc.pam.ModularRealmAuthenticator(var7);
    org.jsecurity.cache.HashtableCache var10 = new org.jsecurity.cache.HashtableCache("5dd0c65d-1422-49c2-becb-9e8dca619ab3");
    org.jsecurity.realm.text.TextConfigurationRealm var11 = new org.jsecurity.realm.text.TextConfigurationRealm();
    java.io.InputStream var13 = org.jsecurity.util.ClassUtils.getResourceAsStream("");
    java.lang.Object[] var14 = new java.lang.Object[] { var13};
    java.util.List var15 = org.jsecurity.util.CollectionUtils.asList(var14);
    org.jsecurity.authc.pam.ModularRealmAuthenticator var16 = new org.jsecurity.authc.pam.ModularRealmAuthenticator(var15);
    org.jsecurity.subject.SimplePrincipalCollection var18 = new org.jsecurity.subject.SimplePrincipalCollection((java.util.Collection)var15, "org.jsecurity.authz.UnauthorizedException: org.jsecurity.session.ExpiredSessionException: ");
    org.jsecurity.session.UnknownSessionException var23 = new org.jsecurity.session.UnknownSessionException("dd\uFFFD", (java.io.Serializable)100.0f);
    org.jsecurity.session.SessionException var25 = new org.jsecurity.session.SessionException("dd\uFFFD", (java.lang.Throwable)var23, (java.io.Serializable)0);
    org.jsecurity.session.SessionException var26 = new org.jsecurity.session.SessionException("dd\uFFFD", (java.lang.Throwable)var23);
    var18.add((java.lang.Object)var26, "org.jsecurity.config.ConfigurationException: dd\uFFFD");
    var11.onLogout((org.jsecurity.subject.PrincipalCollection)var18);
    org.jsecurity.cache.HashtableCacheManager var30 = new org.jsecurity.cache.HashtableCacheManager();
    org.jsecurity.cache.Cache var32 = var30.getCache("\u0000\u0000");
    var11.setAuthorizationCache(var32);
    org.jsecurity.authc.DisabledAccountException var36 = new org.jsecurity.authc.DisabledAccountException("org.jsecurity.authz.UnauthorizedException: org.jsecurity.session.ExpiredSessionException: ");
    org.jsecurity.session.UnknownSessionException var42 = new org.jsecurity.session.UnknownSessionException("dd\uFFFD", (java.io.Serializable)100.0f);
    org.jsecurity.subject.SubjectException var43 = new org.jsecurity.subject.SubjectException("dd\uFFFD", (java.lang.Throwable)var42);
    org.jsecurity.session.InvalidSessionException var44 = new org.jsecurity.session.InvalidSessionException("hi!", (java.lang.Throwable)var43);
    org.jsecurity.session.SessionException var45 = new org.jsecurity.session.SessionException("dd\uFFFD", (java.lang.Throwable)var43);
    org.jsecurity.session.SessionException var46 = new org.jsecurity.session.SessionException("hi!", (java.lang.Throwable)var36, (java.io.Serializable)var43);
    var10.put((java.lang.Object)var11, (java.lang.Object)var46);
    var8.setRealm((org.jsecurity.realm.Realm)var11);
    boolean var50 = var11.accountExists("org.jsecurity.realm.text.TextConfigurationRealm_445");
    java.io.InputStream var52 = org.jsecurity.util.ClassUtils.getResourceAsStream("");
    java.lang.Object[] var53 = new java.lang.Object[] { var52};
    java.util.List var54 = org.jsecurity.util.CollectionUtils.asList(var53);
    org.jsecurity.authc.pam.ModularRealmAuthenticator var55 = new org.jsecurity.authc.pam.ModularRealmAuthenticator(var54);
    org.jsecurity.subject.SimplePrincipalCollection var57 = new org.jsecurity.subject.SimplePrincipalCollection((java.util.Collection)var54, "org.jsecurity.authz.UnauthorizedException: org.jsecurity.session.ExpiredSessionException: ");
    org.jsecurity.session.UnknownSessionException var62 = new org.jsecurity.session.UnknownSessionException("dd\uFFFD", (java.io.Serializable)100.0f);
    org.jsecurity.session.SessionException var64 = new org.jsecurity.session.SessionException("dd\uFFFD", (java.lang.Throwable)var62, (java.io.Serializable)0);
    org.jsecurity.session.SessionException var65 = new org.jsecurity.session.SessionException("dd\uFFFD", (java.lang.Throwable)var62);
    var57.add((java.lang.Object)var65, "org.jsecurity.config.ConfigurationException: dd\uFFFD");
    java.util.Set var68 = var57.asSet();
    var11.onLogout((org.jsecurity.subject.PrincipalCollection)var57);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var6 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var7);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var13);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var14);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var15);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var32);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var50 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var52);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var53);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var54);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var68);

  }

  public void test20() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest6.test20");


    org.jsecurity.session.mgt.DefaultSessionManager var0 = new org.jsecurity.session.mgt.DefaultSessionManager();
    org.jsecurity.session.mgt.eis.MemorySessionDAO var1 = new org.jsecurity.session.mgt.eis.MemorySessionDAO();
    org.jsecurity.cache.Cache var2 = var1.getActiveSessionsCache();
    org.jsecurity.cache.CacheManager var3 = var1.getCacheManager();
    org.jsecurity.cache.HashtableCacheManager var4 = new org.jsecurity.cache.HashtableCacheManager();
    org.jsecurity.cache.Cache var6 = var4.getCache("\u0000\u0000");
    var1.setActiveSessionsCache(var6);
    java.io.InputStream var9 = org.jsecurity.util.ClassUtils.getResourceAsStream("");
    java.lang.Object[] var10 = new java.lang.Object[] { var9};
    java.util.List var11 = org.jsecurity.util.CollectionUtils.asList(var10);
    org.jsecurity.authc.pam.ModularRealmAuthenticator var12 = new org.jsecurity.authc.pam.ModularRealmAuthenticator(var11);
    org.jsecurity.authc.pam.AllSuccessfulModularAuthenticationStrategy var13 = new org.jsecurity.authc.pam.AllSuccessfulModularAuthenticationStrategy();
    var12.setModularAuthenticationStrategy((org.jsecurity.authc.pam.ModularAuthenticationStrategy)var13);
    org.jsecurity.authz.SimpleAuthorizationInfo var15 = new org.jsecurity.authz.SimpleAuthorizationInfo();
    var15.addStringPermission("hi!");
    java.io.InputStream var19 = org.jsecurity.util.ClassUtils.getResourceAsStream("");
    java.lang.Object[] var20 = new java.lang.Object[] { var19};
    java.util.List var21 = org.jsecurity.util.CollectionUtils.asList(var20);
    var15.addRoles((java.util.Collection)var21);
    var12.setAuthenticationListeners((java.util.Collection)var21);
    org.jsecurity.realm.activedirectory.ActiveDirectoryRealm var24 = new org.jsecurity.realm.activedirectory.ActiveDirectoryRealm();
    var24.setPrincipalSuffix("");
    var12.setRealm((org.jsecurity.realm.Realm)var24);
    org.jsecurity.cache.HashtableCacheManager var28 = new org.jsecurity.cache.HashtableCacheManager();
    org.jsecurity.cache.Cache var30 = var28.getCache("\u0000\u0000");
    var24.setAuthorizationCache(var30);
    var1.setActiveSessionsCache(var30);
    org.jsecurity.session.mgt.SimpleSession var33 = new org.jsecurity.session.mgt.SimpleSession();
    java.io.Serializable var34 = var1.create((org.jsecurity.session.Session)var33);
    var0.setSessionDAO((org.jsecurity.session.mgt.eis.SessionDAO)var1);
    long var36 = var0.getSessionValidationInterval();
    org.jsecurity.session.mgt.eis.MemorySessionDAO var37 = new org.jsecurity.session.mgt.eis.MemorySessionDAO();
    org.jsecurity.cache.Cache var38 = var37.getActiveSessionsCache();
    org.jsecurity.cache.CacheManager var39 = var37.getCacheManager();
    org.jsecurity.cache.HashtableCacheManager var40 = new org.jsecurity.cache.HashtableCacheManager();
    org.jsecurity.cache.Cache var42 = var40.getCache("\u0000\u0000");
    var37.setActiveSessionsCache(var42);
    java.io.InputStream var45 = org.jsecurity.util.ClassUtils.getResourceAsStream("");
    java.lang.Object[] var46 = new java.lang.Object[] { var45};
    java.util.List var47 = org.jsecurity.util.CollectionUtils.asList(var46);
    org.jsecurity.authc.pam.ModularRealmAuthenticator var48 = new org.jsecurity.authc.pam.ModularRealmAuthenticator(var47);
    org.jsecurity.authc.pam.AllSuccessfulModularAuthenticationStrategy var49 = new org.jsecurity.authc.pam.AllSuccessfulModularAuthenticationStrategy();
    var48.setModularAuthenticationStrategy((org.jsecurity.authc.pam.ModularAuthenticationStrategy)var49);
    org.jsecurity.authz.SimpleAuthorizationInfo var51 = new org.jsecurity.authz.SimpleAuthorizationInfo();
    var51.addStringPermission("hi!");
    java.io.InputStream var55 = org.jsecurity.util.ClassUtils.getResourceAsStream("");
    java.lang.Object[] var56 = new java.lang.Object[] { var55};
    java.util.List var57 = org.jsecurity.util.CollectionUtils.asList(var56);
    var51.addRoles((java.util.Collection)var57);
    var48.setAuthenticationListeners((java.util.Collection)var57);
    org.jsecurity.realm.activedirectory.ActiveDirectoryRealm var60 = new org.jsecurity.realm.activedirectory.ActiveDirectoryRealm();
    var60.setPrincipalSuffix("");
    var48.setRealm((org.jsecurity.realm.Realm)var60);
    org.jsecurity.cache.HashtableCacheManager var64 = new org.jsecurity.cache.HashtableCacheManager();
    org.jsecurity.cache.Cache var66 = var64.getCache("\u0000\u0000");
    var60.setAuthorizationCache(var66);
    var37.setActiveSessionsCache(var66);
    org.jsecurity.session.mgt.SimpleSession var69 = new org.jsecurity.session.mgt.SimpleSession();
    java.io.Serializable var70 = var37.create((org.jsecurity.session.Session)var69);
    org.jsecurity.cache.Cache var71 = var37.getActiveSessionsCache();
    var0.setSessionDAO((org.jsecurity.session.mgt.eis.SessionDAO)var37);
    org.jsecurity.session.mgt.ExecutorServiceSessionValidationScheduler var73 = new org.jsecurity.session.mgt.ExecutorServiceSessionValidationScheduler((org.jsecurity.session.mgt.ValidatingSessionManager)var0);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var2);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var3);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var6);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var9);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var10);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var11);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var19);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var20);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var21);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var30);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var34 + "' != '" + "97fe9e36-743e-4ede-8eb3-665a83a8d5e6"+ "'", var34.equals("97fe9e36-743e-4ede-8eb3-665a83a8d5e6"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var36 == 3600000L);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var38);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var39);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var42);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var45);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var46);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var47);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var55);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var56);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var57);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var66);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var70 + "' != '" + "3c0772ed-e224-45f4-af0b-4a8bf286f87b"+ "'", var70.equals("3c0772ed-e224-45f4-af0b-4a8bf286f87b"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var71);

  }

  public void test21() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest6.test21");


    org.jsecurity.subject.SubjectException var1 = new org.jsecurity.subject.SubjectException("org.jsecurity.authc.UsernamePasswordToken - hi!, rememberMe=false");

  }

  public void test22() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest6.test22");


    org.jsecurity.realm.activedirectory.ActiveDirectoryRealm var0 = new org.jsecurity.realm.activedirectory.ActiveDirectoryRealm();
    var0.setPrincipalSuffix("");
    var0.setPrincipalSuffix("org.jsecurity.authc.CredentialsException: 783ccd31-48a8-42dd-890f-df885a7baaff");
    org.jsecurity.cache.CacheManager var5 = var0.getCacheManager();
    java.lang.String var6 = var0.getName();
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var5);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var6 + "' != '" + "org.jsecurity.realm.activedirectory.ActiveDirectoryRealm_3792"+ "'", var6.equals("org.jsecurity.realm.activedirectory.ActiveDirectoryRealm_3792"));

  }

  public void test23() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest6.test23");


    org.jsecurity.realm.activedirectory.ActiveDirectoryRealm var0 = new org.jsecurity.realm.activedirectory.ActiveDirectoryRealm();
    org.jsecurity.authc.credential.Sha256CredentialsMatcher var1 = new org.jsecurity.authc.credential.Sha256CredentialsMatcher();
    var0.setCredentialsMatcher((org.jsecurity.authc.credential.CredentialsMatcher)var1);
    org.jsecurity.realm.activedirectory.ActiveDirectoryRealm var3 = new org.jsecurity.realm.activedirectory.ActiveDirectoryRealm();
    org.jsecurity.authc.credential.Sha256CredentialsMatcher var4 = new org.jsecurity.authc.credential.Sha256CredentialsMatcher();
    var3.setCredentialsMatcher((org.jsecurity.authc.credential.CredentialsMatcher)var4);
    java.lang.String var6 = var3.getAuthorizationCacheName();
    var3.setUrl("hi!");
    org.jsecurity.realm.ldap.DefaultLdapContextFactory var9 = new org.jsecurity.realm.ldap.DefaultLdapContextFactory();
    var3.setLdapContextFactory((org.jsecurity.realm.ldap.LdapContextFactory)var9);
    var9.setAuthentication("org.jsecurity.authz.UnauthorizedException: org.jsecurity.session.ExpiredSessionException: ");
    var0.setLdapContextFactory((org.jsecurity.realm.ldap.LdapContextFactory)var9);
    var0.setPrincipalSuffix("783ccd31-48a8-42dd-890f-df885a7baaff");
    org.jsecurity.realm.ldap.DefaultLdapContextFactory var16 = new org.jsecurity.realm.ldap.DefaultLdapContextFactory();
    var16.setSystemUsername("org.jsecurity.authz.UnauthorizedException: org.jsecurity.session.ExpiredSessionException: ");
    var0.setLdapContextFactory((org.jsecurity.realm.ldap.LdapContextFactory)var16);
    org.jsecurity.authc.credential.CredentialsMatcher var20 = var0.getCredentialsMatcher();
    var0.initAuthorizationCache();
    org.jsecurity.authz.aop.GuestAnnotationHandler var22 = new org.jsecurity.authz.aop.GuestAnnotationHandler();
    java.lang.Class var23 = var22.getAnnotationClass();
    var0.setAuthenticationTokenClass(var23);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var6);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var20);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var23);

  }

  public void test24() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest6.test24");


    org.jsecurity.session.mgt.SimpleSession var0 = new org.jsecurity.session.mgt.SimpleSession();
    var0.setTimeout((-1L));
    org.jsecurity.session.mgt.SimpleSession var3 = new org.jsecurity.session.mgt.SimpleSession();
    java.util.Date var4 = var3.getLastAccessTime();
    var0.setLastAccessTime(var4);
    java.util.Collection var6 = var0.getAttributeKeys();
    org.jsecurity.realm.activedirectory.ActiveDirectoryRealm var7 = new org.jsecurity.realm.activedirectory.ActiveDirectoryRealm();
    var7.init();
    var7.init();
    org.jsecurity.config.ReflectionBuilder var10 = new org.jsecurity.config.ReflectionBuilder();
    org.jsecurity.config.ReflectionBuilder var11 = new org.jsecurity.config.ReflectionBuilder();
    org.jsecurity.io.IniResource var12 = new org.jsecurity.io.IniResource();
    var12.setCharsetName("org.jsecurity.authz.UnauthorizedException: org.jsecurity.session.ExpiredSessionException: ");
    java.util.Map var15 = var12.getSections();
    java.util.Map var16 = var11.buildObjects(var15);
    org.jsecurity.config.ReflectionBuilder var17 = new org.jsecurity.config.ReflectionBuilder();
    org.jsecurity.io.IniResource var18 = new org.jsecurity.io.IniResource();
    var18.setCharsetName("org.jsecurity.authz.UnauthorizedException: org.jsecurity.session.ExpiredSessionException: ");
    java.util.Map var21 = var18.getSections();
    java.util.Map var22 = var17.buildObjects(var21);
    java.util.Map var23 = var11.buildObjects(var22);
    java.util.Map var24 = var10.buildObjects(var23);
    var7.setGroupRolesMap(var24);
    org.jsecurity.authz.permission.PermissionResolver var26 = var7.getPermissionResolver();
    java.util.Set var27 = org.jsecurity.util.PermissionUtils.resolvePermissions(var6, var26);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var4);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var6);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var15);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var16);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var21);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var22);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var23);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var24);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var26);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var27);

  }

  public void test25() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest6.test25");


    org.jsecurity.authc.UsernamePasswordToken var3 = new org.jsecurity.authc.UsernamePasswordToken("ZGT/", "org.jsecurity.config.ConfigurationException: dd\uFFFD", true);
    java.lang.String var4 = var3.getUsername();
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var4 + "' != '" + "ZGT/"+ "'", var4.equals("ZGT/"));

  }

  public void test26() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest6.test26");


    org.jsecurity.session.mgt.DefaultSessionManager var0 = new org.jsecurity.session.mgt.DefaultSessionManager();
    var0.setGlobalSessionTimeout(1);
    var0.setSessionValidationInterval(10L);
    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      var0.setTimeout((java.io.Serializable)"\uFFFD\uFFFD\uFFFDq\uFFFD\uFFFD\uFFFD\u01BC\uFFFDg]\uFFFD\uFFFD\u001Fu\uFFFD<\uFFFD\uFFFDi\uFFFD\uFFFD", 3600000L);
      fail("Expected exception of type org.jsecurity.session.UnknownSessionException");
    } catch (org.jsecurity.session.UnknownSessionException e) {
      // Expected exception.
    }

  }

  public void test27() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest6.test27");


    org.jsecurity.authz.permission.InvalidPermissionStringException var2 = new org.jsecurity.authz.permission.InvalidPermissionStringException("", "dd\uFFFD");
    org.jsecurity.JSecurityException var4 = new org.jsecurity.JSecurityException("");
    org.jsecurity.authc.SimpleAuthenticationInfo var6 = new org.jsecurity.authc.SimpleAuthenticationInfo((java.lang.Object)var2, (java.lang.Object)"", "org.jsecurity.authz.UnauthorizedException: org.jsecurity.session.ExpiredSessionException: ");
    org.jsecurity.subject.PrincipalCollection var7 = var6.getPrincipals();
    org.jsecurity.subject.PrincipalCollection var8 = var6.getPrincipals();
    org.jsecurity.authz.permission.WildcardPermissionResolver var9 = new org.jsecurity.authz.permission.WildcardPermissionResolver();
    org.jsecurity.authz.SimpleAuthorizingAccount var11 = new org.jsecurity.authz.SimpleAuthorizingAccount();
    org.jsecurity.authz.SimpleAuthorizationInfo var12 = new org.jsecurity.authz.SimpleAuthorizationInfo();
    var12.addRole("a2b823b1e72eae2b727289df8a00a89df8a0bab6ad8a89c4c5c7a9b62a270000");
    org.jsecurity.authz.SimpleAuthorizationInfo var15 = new org.jsecurity.authz.SimpleAuthorizationInfo();
    var15.addRole("a2b823b1e72eae2b727289df8a00a89df8a0bab6ad8a89c4c5c7a9b62a270000");
    org.jsecurity.session.UnknownSessionException var22 = new org.jsecurity.session.UnknownSessionException("dd\uFFFD", (java.io.Serializable)100.0f);
    org.jsecurity.subject.SubjectException var23 = new org.jsecurity.subject.SubjectException("dd\uFFFD", (java.lang.Throwable)var22);
    org.jsecurity.io.SerializationException var24 = new org.jsecurity.io.SerializationException("", (java.lang.Throwable)var23);
    java.lang.Throwable[] var25 = var23.getSuppressed();
    java.util.Set var26 = org.jsecurity.util.CollectionUtils.asSet((java.lang.Object[])var25);
    var15.addRoles((java.util.Collection)var26);
    var12.setObjectPermissions(var26);
    var11.setSimpleRoles(var26);
    java.util.Set var30 = var11.getPermissions();
    org.jsecurity.authz.SimpleAuthorizationInfo var31 = new org.jsecurity.authz.SimpleAuthorizationInfo();
    var31.addRole("a2b823b1e72eae2b727289df8a00a89df8a0bab6ad8a89c4c5c7a9b62a270000");
    org.jsecurity.authz.SimpleAuthorizationInfo var34 = new org.jsecurity.authz.SimpleAuthorizationInfo();
    var34.addRole("a2b823b1e72eae2b727289df8a00a89df8a0bab6ad8a89c4c5c7a9b62a270000");
    org.jsecurity.session.UnknownSessionException var41 = new org.jsecurity.session.UnknownSessionException("dd\uFFFD", (java.io.Serializable)100.0f);
    org.jsecurity.subject.SubjectException var42 = new org.jsecurity.subject.SubjectException("dd\uFFFD", (java.lang.Throwable)var41);
    org.jsecurity.io.SerializationException var43 = new org.jsecurity.io.SerializationException("", (java.lang.Throwable)var42);
    java.lang.Throwable[] var44 = var42.getSuppressed();
    java.util.Set var45 = org.jsecurity.util.CollectionUtils.asSet((java.lang.Object[])var44);
    var34.addRoles((java.util.Collection)var45);
    var31.setObjectPermissions(var45);
    var11.checkRoles((java.util.Collection)var45);
    org.jsecurity.session.UnknownSessionException var53 = new org.jsecurity.session.UnknownSessionException("dd\uFFFD", (java.io.Serializable)100.0f);
    org.jsecurity.subject.SubjectException var54 = new org.jsecurity.subject.SubjectException("dd\uFFFD", (java.lang.Throwable)var53);
    org.jsecurity.io.SerializationException var55 = new org.jsecurity.io.SerializationException("", (java.lang.Throwable)var54);
    java.lang.Throwable[] var56 = var54.getSuppressed();
    java.lang.Throwable[] var57 = var54.getSuppressed();
    java.util.Set var58 = org.jsecurity.util.CollectionUtils.asSet((java.lang.Object[])var57);
    org.jsecurity.authz.SimpleAuthorizingAccount var59 = new org.jsecurity.authz.SimpleAuthorizingAccount(var8, (java.lang.Object)var9, "a3e14b98-1050-4bcc-8787-431663db8814", var45, var58);
    org.jsecurity.authz.Permission var61 = var9.resolvePermission("e2dbce5a-2276-49d1-8175-015873d38faf");
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var7);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var8);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var25);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var26);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var30);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var44);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var45);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var56);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var57);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var58);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var61);

  }

  public void test28() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest6.test28");


    org.jsecurity.authz.AuthorizationException var1 = new org.jsecurity.authz.AuthorizationException("783ccd31-48a8-42dd-890f-df885a7baaff");
    org.jsecurity.codec.CodecException var2 = new org.jsecurity.codec.CodecException((java.lang.Throwable)var1);

  }

  public void test29() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest6.test29");


    org.jsecurity.mgt.DefaultSecurityManager var0 = new org.jsecurity.mgt.DefaultSecurityManager();
    org.jsecurity.authz.permission.WildcardPermissionResolver var1 = new org.jsecurity.authz.permission.WildcardPermissionResolver();
    var0.setPermissionResolver((org.jsecurity.authz.permission.PermissionResolver)var1);
    org.jsecurity.cache.CacheManager var3 = var0.getCacheManager();
    org.jsecurity.authc.Authenticator var4 = var0.getAuthenticator();
    org.jsecurity.session.mgt.DefaultSessionManager var5 = new org.jsecurity.session.mgt.DefaultSessionManager();
    org.jsecurity.session.mgt.eis.MemorySessionDAO var6 = new org.jsecurity.session.mgt.eis.MemorySessionDAO();
    org.jsecurity.cache.Cache var7 = var6.getActiveSessionsCache();
    org.jsecurity.cache.CacheManager var8 = var6.getCacheManager();
    org.jsecurity.cache.HashtableCacheManager var9 = new org.jsecurity.cache.HashtableCacheManager();
    org.jsecurity.cache.Cache var11 = var9.getCache("\u0000\u0000");
    var6.setActiveSessionsCache(var11);
    java.io.InputStream var14 = org.jsecurity.util.ClassUtils.getResourceAsStream("");
    java.lang.Object[] var15 = new java.lang.Object[] { var14};
    java.util.List var16 = org.jsecurity.util.CollectionUtils.asList(var15);
    org.jsecurity.authc.pam.ModularRealmAuthenticator var17 = new org.jsecurity.authc.pam.ModularRealmAuthenticator(var16);
    org.jsecurity.authc.pam.AllSuccessfulModularAuthenticationStrategy var18 = new org.jsecurity.authc.pam.AllSuccessfulModularAuthenticationStrategy();
    var17.setModularAuthenticationStrategy((org.jsecurity.authc.pam.ModularAuthenticationStrategy)var18);
    org.jsecurity.authz.SimpleAuthorizationInfo var20 = new org.jsecurity.authz.SimpleAuthorizationInfo();
    var20.addStringPermission("hi!");
    java.io.InputStream var24 = org.jsecurity.util.ClassUtils.getResourceAsStream("");
    java.lang.Object[] var25 = new java.lang.Object[] { var24};
    java.util.List var26 = org.jsecurity.util.CollectionUtils.asList(var25);
    var20.addRoles((java.util.Collection)var26);
    var17.setAuthenticationListeners((java.util.Collection)var26);
    org.jsecurity.realm.activedirectory.ActiveDirectoryRealm var29 = new org.jsecurity.realm.activedirectory.ActiveDirectoryRealm();
    var29.setPrincipalSuffix("");
    var17.setRealm((org.jsecurity.realm.Realm)var29);
    org.jsecurity.cache.HashtableCacheManager var33 = new org.jsecurity.cache.HashtableCacheManager();
    org.jsecurity.cache.Cache var35 = var33.getCache("\u0000\u0000");
    var29.setAuthorizationCache(var35);
    var6.setActiveSessionsCache(var35);
    org.jsecurity.session.mgt.SimpleSession var38 = new org.jsecurity.session.mgt.SimpleSession();
    java.io.Serializable var39 = var6.create((org.jsecurity.session.Session)var38);
    var5.setSessionDAO((org.jsecurity.session.mgt.eis.SessionDAO)var6);
    long var41 = var5.getSessionValidationInterval();
    long var42 = var5.getSessionValidationInterval();
    var5.setGlobalSessionTimeout(1);
    var0.setSessionManager((org.jsecurity.session.mgt.SessionManager)var5);
    byte[] var51 = new byte[] { (byte)100, (byte)100, (byte)(-1)};
    java.lang.String var52 = org.jsecurity.codec.CodecSupport.toString(var51);
    byte[] var53 = org.jsecurity.codec.Base64.encode(var51);
    char[] var54 = org.jsecurity.codec.CodecSupport.toChars(var53);
    org.jsecurity.authc.UsernamePasswordToken var56 = new org.jsecurity.authc.UsernamePasswordToken("org.jsecurity.realm.SimpleAccountRealm-55-authorization", var54, false);
    char[] var57 = var56.getPassword();
    org.jsecurity.session.mgt.SimpleSession var59 = new org.jsecurity.session.mgt.SimpleSession();
    var59.setTimeout((-1L));
    org.jsecurity.session.mgt.SimpleSession var62 = new org.jsecurity.session.mgt.SimpleSession();
    java.util.Date var63 = var62.getLastAccessTime();
    var59.setLastAccessTime(var63);
    java.net.InetAddress var65 = var59.getHostAddress();
    org.jsecurity.authc.UsernamePasswordToken var66 = new org.jsecurity.authc.UsernamePasswordToken("classpath:org/jsecurity/cache/ehcache/ehcache.xml", var57, false, var65);
    org.jsecurity.session.mgt.DelegatingSession var67 = new org.jsecurity.session.mgt.DelegatingSession((org.jsecurity.session.mgt.SessionManager)var5, (java.io.Serializable)"classpath:org/jsecurity/cache/ehcache/ehcache.xml");
    org.jsecurity.session.mgt.SimpleSession var68 = new org.jsecurity.session.mgt.SimpleSession();
    var68.setTimeout((-1L));
    org.jsecurity.session.mgt.SimpleSession var71 = new org.jsecurity.session.mgt.SimpleSession();
    java.util.Date var72 = var71.getLastAccessTime();
    var68.setLastAccessTime(var72);
    org.jsecurity.session.mgt.SimpleSession var74 = new org.jsecurity.session.mgt.SimpleSession();
    java.util.Date var75 = var74.getLastAccessTime();
    var68.setStopTimestamp(var75);
    java.net.InetAddress var77 = var68.getHostAddress();
    java.io.Serializable var78 = var5.start(var77);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var3);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var4);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var7);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var8);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var11);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var14);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var15);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var16);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var24);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var25);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var26);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var35);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var39 + "' != '" + "3404264c-53a7-4bda-8312-f6866b44ed78"+ "'", var39.equals("3404264c-53a7-4bda-8312-f6866b44ed78"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var41 == 3600000L);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var42 == 3600000L);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var51);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var52 + "' != '" + "dd\uFFFD"+ "'", var52.equals("dd\uFFFD"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var53);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var54);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var57);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var63);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var65);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var72);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var75);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var77);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var78 + "' != '" + "22607c11-e2a1-4666-b6fd-10227bdb0738"+ "'", var78.equals("22607c11-e2a1-4666-b6fd-10227bdb0738"));

  }

  public void test30() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest6.test30");


    org.jsecurity.session.ExpiredSessionException var1 = new org.jsecurity.session.ExpiredSessionException("e2100c27-e41d-4c80-964c-90268ef4a856");
    org.jsecurity.authz.HostUnauthorizedException var2 = new org.jsecurity.authz.HostUnauthorizedException((java.lang.Throwable)var1);
    org.jsecurity.session.InvalidSessionException var3 = new org.jsecurity.session.InvalidSessionException((java.lang.Throwable)var2);

  }

  public void test31() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest6.test31");


    org.jsecurity.authc.pam.AllSuccessfulModularAuthenticationStrategy var2 = new org.jsecurity.authc.pam.AllSuccessfulModularAuthenticationStrategy();
    org.jsecurity.authc.pam.AllSuccessfulModularAuthenticationStrategy var3 = new org.jsecurity.authc.pam.AllSuccessfulModularAuthenticationStrategy();
    char[] var5 = new char[] { };
    org.jsecurity.authc.UsernamePasswordToken var7 = new org.jsecurity.authc.UsernamePasswordToken("hi!", var5, true);
    org.jsecurity.authc.SimpleAccount var8 = new org.jsecurity.authc.SimpleAccount();
    var8.setCredentialsExpired(false);
    boolean var11 = var8.isLocked();
    org.jsecurity.authc.AuthenticationInfo var12 = var3.afterAllAttempts((org.jsecurity.authc.AuthenticationToken)var7, (org.jsecurity.authc.AuthenticationInfo)var8);
    char[] var16 = new char[] { '4', '#'};
    org.jsecurity.authc.UsernamePasswordToken var17 = new org.jsecurity.authc.UsernamePasswordToken("\u0000\u0000", var16);
    org.jsecurity.authc.SimpleAccount var18 = new org.jsecurity.authc.SimpleAccount();
    var18.setCredentialsExpired(false);
    var18.setCredentialsExpired(false);
    boolean var23 = var18.isCredentialsExpired();
    org.jsecurity.authc.AuthenticationInfo var24 = var3.afterAllAttempts((org.jsecurity.authc.AuthenticationToken)var17, (org.jsecurity.authc.AuthenticationInfo)var18);
    org.jsecurity.authz.UnauthenticatedException var28 = new org.jsecurity.authz.UnauthenticatedException();
    org.jsecurity.config.UnresolveableReferenceException var29 = new org.jsecurity.config.UnresolveableReferenceException("", (java.lang.Throwable)var28);
    org.jsecurity.cache.CacheException var30 = new org.jsecurity.cache.CacheException("org.jsecurity.config.ConfigurationException: dd\uFFFD", (java.lang.Throwable)var28);
    org.jsecurity.authc.SimpleAuthenticationInfo var32 = new org.jsecurity.authc.SimpleAuthenticationInfo((java.lang.Object)"org.jsecurity.config.ConfigurationException: dd\uFFFD", (java.lang.Object)var30, "a2b823b1e72eae2b727289df8a00a89df8a0bab6ad8a89c4c5c7a9b62a270000");
    org.jsecurity.subject.PrincipalCollection var33 = var32.getPrincipals();
    org.jsecurity.authc.AuthenticationInfo var34 = var2.afterAllAttempts((org.jsecurity.authc.AuthenticationToken)var17, (org.jsecurity.authc.AuthenticationInfo)var32);
    org.jsecurity.session.UnknownSessionException var38 = new org.jsecurity.session.UnknownSessionException("dd\uFFFD", (java.io.Serializable)100.0f);
    org.jsecurity.session.SessionException var40 = new org.jsecurity.session.SessionException("dd\uFFFD", (java.lang.Throwable)var38, (java.io.Serializable)0);
    var32.setCredentials((java.lang.Object)var38);
    org.jsecurity.util.UnavailableConstructorException var42 = new org.jsecurity.util.UnavailableConstructorException((java.lang.Throwable)var38);
    org.jsecurity.session.UnknownSessionException var43 = new org.jsecurity.session.UnknownSessionException("69d3a52f-a464-4f98-8253-2a105929a356", (java.lang.Throwable)var42);
    org.jsecurity.io.ResourceException var44 = new org.jsecurity.io.ResourceException((java.lang.Throwable)var43);
    org.jsecurity.realm.SimpleAccountRealm var46 = new org.jsecurity.realm.SimpleAccountRealm("hi!");
    char[] var49 = new char[] { };
    org.jsecurity.authc.UsernamePasswordToken var51 = new org.jsecurity.authc.UsernamePasswordToken("hi!", var49, true);
    org.jsecurity.authc.UsernamePasswordToken var52 = new org.jsecurity.authc.UsernamePasswordToken("\u0000\u0000", var49);
    java.lang.Object var53 = var52.getPrincipal();
    boolean var54 = var46.supports((org.jsecurity.authc.AuthenticationToken)var52);
    org.jsecurity.session.mgt.eis.MemorySessionDAO var55 = new org.jsecurity.session.mgt.eis.MemorySessionDAO();
    org.jsecurity.cache.Cache var56 = var55.getActiveSessionsCache();
    org.jsecurity.cache.CacheManager var57 = var55.getCacheManager();
    org.jsecurity.cache.HashtableCacheManager var58 = new org.jsecurity.cache.HashtableCacheManager();
    org.jsecurity.cache.Cache var60 = var58.getCache("\u0000\u0000");
    var55.setActiveSessionsCache(var60);
    java.io.InputStream var63 = org.jsecurity.util.ClassUtils.getResourceAsStream("");
    java.lang.Object[] var64 = new java.lang.Object[] { var63};
    java.util.List var65 = org.jsecurity.util.CollectionUtils.asList(var64);
    org.jsecurity.authc.pam.ModularRealmAuthenticator var66 = new org.jsecurity.authc.pam.ModularRealmAuthenticator(var65);
    org.jsecurity.authc.pam.AllSuccessfulModularAuthenticationStrategy var67 = new org.jsecurity.authc.pam.AllSuccessfulModularAuthenticationStrategy();
    var66.setModularAuthenticationStrategy((org.jsecurity.authc.pam.ModularAuthenticationStrategy)var67);
    org.jsecurity.authz.SimpleAuthorizationInfo var69 = new org.jsecurity.authz.SimpleAuthorizationInfo();
    var69.addStringPermission("hi!");
    java.io.InputStream var73 = org.jsecurity.util.ClassUtils.getResourceAsStream("");
    java.lang.Object[] var74 = new java.lang.Object[] { var73};
    java.util.List var75 = org.jsecurity.util.CollectionUtils.asList(var74);
    var69.addRoles((java.util.Collection)var75);
    var66.setAuthenticationListeners((java.util.Collection)var75);
    org.jsecurity.realm.activedirectory.ActiveDirectoryRealm var78 = new org.jsecurity.realm.activedirectory.ActiveDirectoryRealm();
    var78.setPrincipalSuffix("");
    var66.setRealm((org.jsecurity.realm.Realm)var78);
    org.jsecurity.cache.HashtableCacheManager var82 = new org.jsecurity.cache.HashtableCacheManager();
    org.jsecurity.cache.Cache var84 = var82.getCache("\u0000\u0000");
    var78.setAuthorizationCache(var84);
    var55.setActiveSessionsCache(var84);
    org.jsecurity.session.mgt.SimpleSession var87 = new org.jsecurity.session.mgt.SimpleSession();
    java.io.Serializable var88 = var55.create((org.jsecurity.session.Session)var87);
    java.io.Serializable var89 = var87.getId();
    org.jsecurity.authc.credential.Md5CredentialsMatcher var90 = new org.jsecurity.authc.credential.Md5CredentialsMatcher();
    boolean var91 = var90.isHashSalted();
    boolean var92 = var90.isHashSalted();
    int var93 = var90.getHashIterations();
    java.lang.Object var94 = var87.removeAttribute((java.lang.Object)var90);
    java.net.InetAddress var95 = var87.getHostAddress();
    var52.setInetAddress(var95);
    org.jsecurity.session.SessionException var97 = new org.jsecurity.session.SessionException("HashtableCache [\u0000\u0000\u0000]", (java.lang.Throwable)var43, (java.io.Serializable)var52);
    java.lang.String var98 = var52.getUsername();
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var5);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var11 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var12);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var16);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var23 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var24);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var33);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var34);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var49);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var53 + "' != '" + "\u0000\u0000"+ "'", var53.equals("\u0000\u0000"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var54 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var56);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var57);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var60);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var63);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var64);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var65);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var73);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var74);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var75);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var84);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var88 + "' != '" + "7b7e7064-e6e2-4d24-b7a8-75737ba67eb6"+ "'", var88.equals("7b7e7064-e6e2-4d24-b7a8-75737ba67eb6"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var89 + "' != '" + "7b7e7064-e6e2-4d24-b7a8-75737ba67eb6"+ "'", var89.equals("7b7e7064-e6e2-4d24-b7a8-75737ba67eb6"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var91 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var92 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var93 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var94);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var95);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var98 + "' != '" + "\u0000\u0000"+ "'", var98.equals("\u0000\u0000"));

  }

  public void test32() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest6.test32");


    org.jsecurity.session.UnknownSessionException var4 = new org.jsecurity.session.UnknownSessionException("dd\uFFFD", (java.io.Serializable)100.0f);
    org.jsecurity.subject.SubjectException var5 = new org.jsecurity.subject.SubjectException("dd\uFFFD", (java.lang.Throwable)var4);
    org.jsecurity.io.SerializationException var6 = new org.jsecurity.io.SerializationException("", (java.lang.Throwable)var5);
    java.lang.Throwable[] var7 = var5.getSuppressed();
    java.lang.Throwable[] var8 = var5.getSuppressed();
    org.jsecurity.authz.SimpleAuthorizationInfo var11 = new org.jsecurity.authz.SimpleAuthorizationInfo();
    var11.addRole("a2b823b1e72eae2b727289df8a00a89df8a0bab6ad8a89c4c5c7a9b62a270000");
    org.jsecurity.session.UnknownSessionException var18 = new org.jsecurity.session.UnknownSessionException("dd\uFFFD", (java.io.Serializable)100.0f);
    org.jsecurity.subject.SubjectException var19 = new org.jsecurity.subject.SubjectException("dd\uFFFD", (java.lang.Throwable)var18);
    org.jsecurity.io.SerializationException var20 = new org.jsecurity.io.SerializationException("", (java.lang.Throwable)var19);
    java.lang.Throwable[] var21 = var19.getSuppressed();
    java.util.Set var22 = org.jsecurity.util.CollectionUtils.asSet((java.lang.Object[])var21);
    var11.addRoles((java.util.Collection)var22);
    java.io.InputStream var25 = org.jsecurity.util.ClassUtils.getResourceAsStream("");
    java.lang.Object[] var26 = new java.lang.Object[] { var25};
    java.util.List var27 = org.jsecurity.util.CollectionUtils.asList(var26);
    org.jsecurity.authc.pam.ModularRealmAuthenticator var28 = new org.jsecurity.authc.pam.ModularRealmAuthenticator(var27);
    org.jsecurity.subject.SimplePrincipalCollection var30 = new org.jsecurity.subject.SimplePrincipalCollection((java.util.Collection)var27, "org.jsecurity.authz.UnauthorizedException: org.jsecurity.session.ExpiredSessionException: ");
    org.jsecurity.session.UnknownSessionException var35 = new org.jsecurity.session.UnknownSessionException("dd\uFFFD", (java.io.Serializable)100.0f);
    org.jsecurity.session.SessionException var37 = new org.jsecurity.session.SessionException("dd\uFFFD", (java.lang.Throwable)var35, (java.io.Serializable)0);
    org.jsecurity.session.SessionException var38 = new org.jsecurity.session.SessionException("dd\uFFFD", (java.lang.Throwable)var35);
    var30.add((java.lang.Object)var38, "org.jsecurity.config.ConfigurationException: dd\uFFFD");
    java.util.Set var41 = var30.asSet();
    org.jsecurity.authz.SimpleAuthorizingAccount var42 = new org.jsecurity.authz.SimpleAuthorizingAccount((java.lang.Object)var8, (java.lang.Object)"\u0000\u0000\u0000", "\u0000\u0000\u0000", var22, var41);
    var42.addRole("");
    org.jsecurity.realm.text.TextConfigurationRealm var46 = new org.jsecurity.realm.text.TextConfigurationRealm();
    java.io.InputStream var48 = org.jsecurity.util.ClassUtils.getResourceAsStream("");
    java.lang.Object[] var49 = new java.lang.Object[] { var48};
    java.util.List var50 = org.jsecurity.util.CollectionUtils.asList(var49);
    org.jsecurity.authc.pam.ModularRealmAuthenticator var51 = new org.jsecurity.authc.pam.ModularRealmAuthenticator(var50);
    org.jsecurity.subject.SimplePrincipalCollection var53 = new org.jsecurity.subject.SimplePrincipalCollection((java.util.Collection)var50, "org.jsecurity.authz.UnauthorizedException: org.jsecurity.session.ExpiredSessionException: ");
    org.jsecurity.session.UnknownSessionException var58 = new org.jsecurity.session.UnknownSessionException("dd\uFFFD", (java.io.Serializable)100.0f);
    org.jsecurity.session.SessionException var60 = new org.jsecurity.session.SessionException("dd\uFFFD", (java.lang.Throwable)var58, (java.io.Serializable)0);
    org.jsecurity.session.SessionException var61 = new org.jsecurity.session.SessionException("dd\uFFFD", (java.lang.Throwable)var58);
    var53.add((java.lang.Object)var61, "org.jsecurity.config.ConfigurationException: dd\uFFFD");
    var46.onLogout((org.jsecurity.subject.PrincipalCollection)var53);
    java.util.Set var66 = org.jsecurity.util.PermissionUtils.toPermissionStrings("org.jsecurity.config.ConfigurationException: dd\uFFFD");
    org.jsecurity.authz.SimpleAuthorizationInfo var67 = new org.jsecurity.authz.SimpleAuthorizationInfo(var66);
    org.jsecurity.authz.SimpleAuthorizingAccount var68 = new org.jsecurity.authz.SimpleAuthorizingAccount((org.jsecurity.subject.PrincipalCollection)var53, (java.lang.Object)var66);
    org.jsecurity.session.StoppedSessionException var69 = new org.jsecurity.session.StoppedSessionException("org.jsecurity.realm.SimpleAccountRealm-55-authorization", (java.io.Serializable)var53);
    org.jsecurity.realm.activedirectory.ActiveDirectoryRealm var70 = new org.jsecurity.realm.activedirectory.ActiveDirectoryRealm();
    var70.init();
    var70.setSystemPassword("dd\uFFFD");
    org.jsecurity.authz.aop.GuestAnnotationHandler var74 = new org.jsecurity.authz.aop.GuestAnnotationHandler();
    java.lang.Class var75 = var74.getAnnotationClass();
    var70.setAuthenticationTokenClass(var75);
    java.util.Collection var77 = var53.byType(var75);
    boolean var78 = var42.isPermittedAll(var77);
    boolean var80 = var42.hasRole("cff098b5-6d79-4f6d-93d3-148185d0b987");
    var42.addRole("49932616-87e3-49f2-a9ff-1e3516355d97");
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var7);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var8);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var21);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var22);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var25);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var26);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var27);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var41);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var48);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var49);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var50);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var66);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var75);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var77);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var78 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var80 == false);

  }

  public void test33() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest6.test33");


    org.jsecurity.io.ResourceException var2 = new org.jsecurity.io.ResourceException();
    org.jsecurity.authc.UnknownAccountException var3 = new org.jsecurity.authc.UnknownAccountException("org.jsecurity.authc.CredentialsException: 783ccd31-48a8-42dd-890f-df885a7baaff", (java.lang.Throwable)var2);
    org.jsecurity.io.SerializationException var4 = new org.jsecurity.io.SerializationException((java.lang.Throwable)var2);
    org.jsecurity.session.UnknownSessionException var5 = new org.jsecurity.session.UnknownSessionException("de5c08e4-2d0a-4288-beee-06511caf6487", (java.lang.Throwable)var2);

  }

  public void test34() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest6.test34");


    org.jsecurity.realm.SimpleAccountRealm var1 = new org.jsecurity.realm.SimpleAccountRealm("hi!");
    java.lang.Class var2 = var1.getAuthenticationTokenClass();
    org.jsecurity.session.mgt.eis.MemorySessionDAO var3 = new org.jsecurity.session.mgt.eis.MemorySessionDAO();
    org.jsecurity.cache.Cache var4 = var3.getActiveSessionsCache();
    org.jsecurity.cache.CacheManager var5 = var3.getCacheManager();
    var1.setCacheManager(var5);
    org.jsecurity.cache.Cache var7 = var1.getAuthorizationCache();
    boolean var9 = var1.accountExists("a2b823b1e72eae2b727289df8a00a89df8a0bab6ad8a89c4c5c7a9b62a270000");
    var1.afterAuthorizationCacheSet();
    org.jsecurity.authc.credential.CredentialsMatcher var11 = var1.getCredentialsMatcher();
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var2);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var4);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var5);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var7);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var9 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var11);

  }

  public void test35() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest6.test35");


    org.jsecurity.session.SessionException var1 = new org.jsecurity.session.SessionException();
    org.jsecurity.io.ResourceException var2 = new org.jsecurity.io.ResourceException((java.lang.Throwable)var1);
    org.jsecurity.session.ExpiredSessionException var3 = new org.jsecurity.session.ExpiredSessionException((java.io.Serializable)var1);
    org.jsecurity.session.StoppedSessionException var4 = new org.jsecurity.session.StoppedSessionException("org.jsecurity.realm.text.PropertiesRealm-263-authorization", (java.io.Serializable)var3);
    org.jsecurity.authc.CredentialsException var5 = new org.jsecurity.authc.CredentialsException((java.lang.Throwable)var3);
    org.jsecurity.io.SerializationException var6 = new org.jsecurity.io.SerializationException((java.lang.Throwable)var3);

  }

  public void test36() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest6.test36");


    org.jsecurity.session.ExpiredSessionException var1 = new org.jsecurity.session.ExpiredSessionException("020e4fd5-81c8-4cbc-9bbb-975c45ce39a3");

  }

  public void test37() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest6.test37");


    org.jsecurity.realm.activedirectory.ActiveDirectoryRealm var0 = new org.jsecurity.realm.activedirectory.ActiveDirectoryRealm();
    var0.init();
    var0.setSystemPassword("dd\uFFFD");
    org.jsecurity.authz.aop.GuestAnnotationHandler var4 = new org.jsecurity.authz.aop.GuestAnnotationHandler();
    java.lang.Class var5 = var4.getAnnotationClass();
    var0.setAuthenticationTokenClass(var5);
    org.jsecurity.mgt.DefaultSecurityManager var7 = new org.jsecurity.mgt.DefaultSecurityManager((org.jsecurity.realm.Realm)var0);
    org.jsecurity.cache.HashtableCache var9 = new org.jsecurity.cache.HashtableCache("orgjsecurityauthcCredentialsException783ccd3148a842dd890fdf885a7baafAA==");
    org.jsecurity.realm.text.TextConfigurationRealm var10 = new org.jsecurity.realm.text.TextConfigurationRealm();
    java.io.InputStream var12 = org.jsecurity.util.ClassUtils.getResourceAsStream("");
    java.lang.Object[] var13 = new java.lang.Object[] { var12};
    java.util.List var14 = org.jsecurity.util.CollectionUtils.asList(var13);
    org.jsecurity.authc.pam.ModularRealmAuthenticator var15 = new org.jsecurity.authc.pam.ModularRealmAuthenticator(var14);
    org.jsecurity.subject.SimplePrincipalCollection var17 = new org.jsecurity.subject.SimplePrincipalCollection((java.util.Collection)var14, "org.jsecurity.authz.UnauthorizedException: org.jsecurity.session.ExpiredSessionException: ");
    org.jsecurity.session.UnknownSessionException var22 = new org.jsecurity.session.UnknownSessionException("dd\uFFFD", (java.io.Serializable)100.0f);
    org.jsecurity.session.SessionException var24 = new org.jsecurity.session.SessionException("dd\uFFFD", (java.lang.Throwable)var22, (java.io.Serializable)0);
    org.jsecurity.session.SessionException var25 = new org.jsecurity.session.SessionException("dd\uFFFD", (java.lang.Throwable)var22);
    var17.add((java.lang.Object)var25, "org.jsecurity.config.ConfigurationException: dd\uFFFD");
    var10.onLogout((org.jsecurity.subject.PrincipalCollection)var17);
    var9.remove((java.lang.Object)var17);
    org.jsecurity.crypto.hash.Md2Hash var31 = org.jsecurity.crypto.hash.Md2Hash.fromBase64String("a2b823b1e72eae2b727289df8a00a89df8a0bab6ad8a89c4c5c7a9b62a270000");
    org.jsecurity.authc.credential.Md2CredentialsMatcher var32 = new org.jsecurity.authc.credential.Md2CredentialsMatcher();
    org.jsecurity.authz.SimpleAuthorizingAccount var34 = new org.jsecurity.authz.SimpleAuthorizingAccount((java.lang.Object)"a2b823b1e72eae2b727289df8a00a89df8a0bab6ad8a89c4c5c7a9b62a270000", (java.lang.Object)var32, "");
    org.jsecurity.authz.SimpleAuthorizationInfo var35 = new org.jsecurity.authz.SimpleAuthorizationInfo();
    java.util.Set var36 = var35.getStringPermissions();
    org.jsecurity.authz.SimpleAuthorizationInfo var38 = new org.jsecurity.authz.SimpleAuthorizationInfo();
    org.jsecurity.session.UnknownSessionException var43 = new org.jsecurity.session.UnknownSessionException("dd\uFFFD", (java.io.Serializable)100.0f);
    org.jsecurity.subject.SubjectException var44 = new org.jsecurity.subject.SubjectException("dd\uFFFD", (java.lang.Throwable)var43);
    org.jsecurity.io.SerializationException var45 = new org.jsecurity.io.SerializationException("", (java.lang.Throwable)var44);
    java.lang.Throwable[] var46 = var44.getSuppressed();
    java.util.Set var47 = org.jsecurity.util.CollectionUtils.asSet((java.lang.Object[])var46);
    var38.setStringPermissions(var47);
    java.util.Set var49 = var38.getRoles();
    org.jsecurity.authz.SimpleAuthorizationInfo var50 = new org.jsecurity.authz.SimpleAuthorizationInfo();
    var50.addRole("a2b823b1e72eae2b727289df8a00a89df8a0bab6ad8a89c4c5c7a9b62a270000");
    org.jsecurity.session.UnknownSessionException var57 = new org.jsecurity.session.UnknownSessionException("dd\uFFFD", (java.io.Serializable)100.0f);
    org.jsecurity.subject.SubjectException var58 = new org.jsecurity.subject.SubjectException("dd\uFFFD", (java.lang.Throwable)var57);
    org.jsecurity.io.SerializationException var59 = new org.jsecurity.io.SerializationException("", (java.lang.Throwable)var58);
    java.lang.Throwable[] var60 = var58.getSuppressed();
    java.util.Set var61 = org.jsecurity.util.CollectionUtils.asSet((java.lang.Object[])var60);
    var50.addRoles((java.util.Collection)var61);
    var38.setRoles(var61);
    org.jsecurity.authz.SimpleRole var64 = new org.jsecurity.authz.SimpleRole("org.jsecurity.authz.UnauthorizedException: org.jsecurity.session.ExpiredSessionException: ", var61);
    var35.addStringPermissions((java.util.Collection)var61);
    boolean var66 = var34.isPermittedAll((java.util.Collection)var61);
    org.jsecurity.authz.UnauthorizedException var68 = new org.jsecurity.authz.UnauthorizedException("org.jsecurity.config.ConfigurationException: dd\uFFFD");
    java.lang.Throwable[] var69 = var68.getSuppressed();
    java.util.Set var70 = org.jsecurity.util.CollectionUtils.asSet((java.lang.Object[])var69);
    boolean var71 = var34.hasAllRoles((java.util.Collection)var70);
    var7.checkRoles((org.jsecurity.subject.PrincipalCollection)var17, (java.util.Collection)var70);
    org.jsecurity.authc.Authenticator var73 = var7.getAuthenticator();
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var5);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var12);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var13);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var14);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var31);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var36);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var46);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var47);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var49);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var60);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var61);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var66 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var69);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var70);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var71 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var73);

  }

  public void test38() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest6.test38");


    org.jsecurity.realm.activedirectory.ActiveDirectoryRealm var0 = new org.jsecurity.realm.activedirectory.ActiveDirectoryRealm();
    var0.init();
    var0.setSystemPassword("dd\uFFFD");
    org.jsecurity.cache.Cache var4 = var0.getAuthorizationCache();
    org.jsecurity.mgt.DefaultSecurityManager var5 = new org.jsecurity.mgt.DefaultSecurityManager((org.jsecurity.realm.Realm)var0);
    org.jsecurity.realm.text.TextConfigurationRealm var6 = new org.jsecurity.realm.text.TextConfigurationRealm();
    org.jsecurity.realm.text.TextConfigurationRealm var7 = new org.jsecurity.realm.text.TextConfigurationRealm();
    java.io.InputStream var9 = org.jsecurity.util.ClassUtils.getResourceAsStream("");
    java.lang.Object[] var10 = new java.lang.Object[] { var9};
    java.util.List var11 = org.jsecurity.util.CollectionUtils.asList(var10);
    org.jsecurity.authc.pam.ModularRealmAuthenticator var12 = new org.jsecurity.authc.pam.ModularRealmAuthenticator(var11);
    org.jsecurity.subject.SimplePrincipalCollection var14 = new org.jsecurity.subject.SimplePrincipalCollection((java.util.Collection)var11, "org.jsecurity.authz.UnauthorizedException: org.jsecurity.session.ExpiredSessionException: ");
    org.jsecurity.session.UnknownSessionException var19 = new org.jsecurity.session.UnknownSessionException("dd\uFFFD", (java.io.Serializable)100.0f);
    org.jsecurity.session.SessionException var21 = new org.jsecurity.session.SessionException("dd\uFFFD", (java.lang.Throwable)var19, (java.io.Serializable)0);
    org.jsecurity.session.SessionException var22 = new org.jsecurity.session.SessionException("dd\uFFFD", (java.lang.Throwable)var19);
    var14.add((java.lang.Object)var22, "org.jsecurity.config.ConfigurationException: dd\uFFFD");
    var7.onLogout((org.jsecurity.subject.PrincipalCollection)var14);
    java.util.Collection var27 = var14.fromRealm("\u0000\u0000\u0000");
    var6.onLogout((org.jsecurity.subject.PrincipalCollection)var14);
    org.jsecurity.authz.aop.RoleAnnotationMethodInterceptor var29 = new org.jsecurity.authz.aop.RoleAnnotationMethodInterceptor();
    org.jsecurity.aop.AnnotationHandler var30 = var29.getHandler();
    java.lang.Class var31 = var30.getAnnotationClass();
    java.util.Collection var32 = var14.byType(var31);
    boolean var33 = var14.isEmpty();
    java.util.List var34 = var14.asList();
    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      boolean var36 = var5.hasRole((org.jsecurity.subject.PrincipalCollection)var14, "7ba0dec9-df58-43bc-b7da-f28f3e23c1e0");
      fail("Expected exception of type java.util.NoSuchElementException");
    } catch (java.util.NoSuchElementException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var4);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var9);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var10);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var11);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var27);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var30);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var31);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var32);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var33 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var34);

  }

  public void test39() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest6.test39");


    org.jsecurity.session.UnknownSessionException var5 = new org.jsecurity.session.UnknownSessionException("dd\uFFFD", (java.io.Serializable)100.0f);
    org.jsecurity.subject.SubjectException var6 = new org.jsecurity.subject.SubjectException("dd\uFFFD", (java.lang.Throwable)var5);
    org.jsecurity.authc.AccountException var7 = new org.jsecurity.authc.AccountException("hi!", (java.lang.Throwable)var6);
    org.jsecurity.session.UnknownSessionException var8 = new org.jsecurity.session.UnknownSessionException((java.lang.Throwable)var6);
    org.jsecurity.codec.CodecException var9 = new org.jsecurity.codec.CodecException((java.lang.Throwable)var6);
    org.jsecurity.authz.HostUnauthorizedException var10 = new org.jsecurity.authz.HostUnauthorizedException((java.lang.Throwable)var6);
    java.net.InetAddress var11 = var10.getHostAddress();
    org.jsecurity.session.ExpiredSessionException var12 = new org.jsecurity.session.ExpiredSessionException("b6cd6008-ae80-4bfd-ae0c-5041e0198a79", (java.lang.Throwable)var10);
    java.net.InetAddress var13 = var10.getHostAddress();
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var11);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var13);

  }

  public void test40() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest6.test40");


    org.jsecurity.realm.jndi.JndiRealmFactory var0 = new org.jsecurity.realm.jndi.JndiRealmFactory();
    org.jsecurity.authc.ExpiredCredentialsException var2 = new org.jsecurity.authc.ExpiredCredentialsException();
    org.jsecurity.session.ExpiredSessionException var3 = new org.jsecurity.session.ExpiredSessionException("", (java.lang.Throwable)var2);
    java.lang.Throwable[] var4 = var3.getSuppressed();
    java.util.List var5 = org.jsecurity.util.CollectionUtils.asList((java.lang.Object[])var4);
    var0.setJndiNames((java.util.Collection)var5);
    org.jsecurity.jndi.JndiTemplate var7 = new org.jsecurity.jndi.JndiTemplate();
    java.util.Properties var8 = var7.getEnvironment();
    var0.setJndiTemplate(var7);
    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      var7.unbind("2e460aa1-7db8-4a99-ad7a-a5b2ab41638e");
      fail("Expected exception of type javax.naming.NoInitialContextException");
    } catch (javax.naming.NoInitialContextException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var4);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var5);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var8);

  }

  public void test41() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest6.test41");


    org.jsecurity.authz.UnauthorizedException var2 = new org.jsecurity.authz.UnauthorizedException("org.jsecurity.config.ConfigurationException: dd\uFFFD");
    org.jsecurity.crypto.hash.Md2Hash var4 = org.jsecurity.crypto.hash.Md2Hash.fromBase64String("a2b823b1e72eae2b727289df8a00a89df8a0bab6ad8a89c4c5c7a9b62a270000");
    org.jsecurity.authc.credential.Md2CredentialsMatcher var5 = new org.jsecurity.authc.credential.Md2CredentialsMatcher();
    org.jsecurity.authz.SimpleAuthorizingAccount var7 = new org.jsecurity.authz.SimpleAuthorizingAccount((java.lang.Object)"a2b823b1e72eae2b727289df8a00a89df8a0bab6ad8a89c4c5c7a9b62a270000", (java.lang.Object)var5, "");
    org.jsecurity.session.UnknownSessionException var8 = new org.jsecurity.session.UnknownSessionException("org.jsecurity.config.ConfigurationException: dd\uFFFD", (java.lang.Throwable)var2, (java.io.Serializable)var7);
    java.lang.Object var9 = var7.getCredentials();
    java.util.Collection var10 = var7.getRoles();
    org.jsecurity.authz.SimpleRole var12 = var7.getRole("89cd1c4b-5697-4952-bfeb-53be5c5d23f0");
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var4);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var9);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var10);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var12);

  }

  public void test42() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest6.test42");


    org.jsecurity.session.mgt.DefaultSessionManager var0 = new org.jsecurity.session.mgt.DefaultSessionManager();
    org.jsecurity.session.mgt.eis.MemorySessionDAO var1 = new org.jsecurity.session.mgt.eis.MemorySessionDAO();
    org.jsecurity.cache.Cache var2 = var1.getActiveSessionsCache();
    org.jsecurity.cache.CacheManager var3 = var1.getCacheManager();
    org.jsecurity.cache.HashtableCacheManager var4 = new org.jsecurity.cache.HashtableCacheManager();
    org.jsecurity.cache.Cache var6 = var4.getCache("\u0000\u0000");
    var1.setActiveSessionsCache(var6);
    java.io.InputStream var9 = org.jsecurity.util.ClassUtils.getResourceAsStream("");
    java.lang.Object[] var10 = new java.lang.Object[] { var9};
    java.util.List var11 = org.jsecurity.util.CollectionUtils.asList(var10);
    org.jsecurity.authc.pam.ModularRealmAuthenticator var12 = new org.jsecurity.authc.pam.ModularRealmAuthenticator(var11);
    org.jsecurity.authc.pam.AllSuccessfulModularAuthenticationStrategy var13 = new org.jsecurity.authc.pam.AllSuccessfulModularAuthenticationStrategy();
    var12.setModularAuthenticationStrategy((org.jsecurity.authc.pam.ModularAuthenticationStrategy)var13);
    org.jsecurity.authz.SimpleAuthorizationInfo var15 = new org.jsecurity.authz.SimpleAuthorizationInfo();
    var15.addStringPermission("hi!");
    java.io.InputStream var19 = org.jsecurity.util.ClassUtils.getResourceAsStream("");
    java.lang.Object[] var20 = new java.lang.Object[] { var19};
    java.util.List var21 = org.jsecurity.util.CollectionUtils.asList(var20);
    var15.addRoles((java.util.Collection)var21);
    var12.setAuthenticationListeners((java.util.Collection)var21);
    org.jsecurity.realm.activedirectory.ActiveDirectoryRealm var24 = new org.jsecurity.realm.activedirectory.ActiveDirectoryRealm();
    var24.setPrincipalSuffix("");
    var12.setRealm((org.jsecurity.realm.Realm)var24);
    org.jsecurity.cache.HashtableCacheManager var28 = new org.jsecurity.cache.HashtableCacheManager();
    org.jsecurity.cache.Cache var30 = var28.getCache("\u0000\u0000");
    var24.setAuthorizationCache(var30);
    var1.setActiveSessionsCache(var30);
    org.jsecurity.session.mgt.SimpleSession var33 = new org.jsecurity.session.mgt.SimpleSession();
    java.io.Serializable var34 = var1.create((org.jsecurity.session.Session)var33);
    var0.setSessionDAO((org.jsecurity.session.mgt.eis.SessionDAO)var1);
    org.jsecurity.cache.ehcache.EhCacheManager var36 = new org.jsecurity.cache.ehcache.EhCacheManager();
    net.sf.ehcache.CacheManager var37 = var36.getCacheManager();
    var36.destroy();
    java.lang.String var39 = var36.getCacheManagerConfigFile();
    java.lang.String var40 = var36.getCacheManagerConfigFile();
    var0.setCacheManager((org.jsecurity.cache.CacheManager)var36);
    var0.destroy();
    var0.setSessionValidationInterval(100L);
    var0.destroy();
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var2);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var3);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var6);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var9);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var10);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var11);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var19);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var20);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var21);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var30);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var34 + "' != '" + "589c3e76-366e-422d-826d-e8d606f004ba"+ "'", var34.equals("589c3e76-366e-422d-826d-e8d606f004ba"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var37);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var39 + "' != '" + "classpath:org/jsecurity/cache/ehcache/ehcache.xml"+ "'", var39.equals("classpath:org/jsecurity/cache/ehcache/ehcache.xml"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var40 + "' != '" + "classpath:org/jsecurity/cache/ehcache/ehcache.xml"+ "'", var40.equals("classpath:org/jsecurity/cache/ehcache/ehcache.xml"));

  }

  public void test43() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest6.test43");


    org.jsecurity.session.StoppedSessionException var4 = new org.jsecurity.session.StoppedSessionException("dd\uFFFD", (java.io.Serializable)"org.jsecurity.authc.CredentialsException: 783ccd31-48a8-42dd-890f-df885a7baaff");
    org.jsecurity.authc.AccountException var5 = new org.jsecurity.authc.AccountException("HashtableCache [783ccd31-48a8-42dd-890f-df885a7baaff]", (java.lang.Throwable)var4);
    org.jsecurity.io.ResourceException var6 = new org.jsecurity.io.ResourceException("9f82ea7e-226c-4df4-946b-73d082faffd3", (java.lang.Throwable)var4);

  }

  public void test44() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest6.test44");


    org.jsecurity.mgt.DefaultSecurityManager var0 = new org.jsecurity.mgt.DefaultSecurityManager();
    java.io.InputStream var2 = org.jsecurity.util.ClassUtils.getResourceAsStream("");
    java.lang.Object[] var3 = new java.lang.Object[] { var2};
    java.util.List var4 = org.jsecurity.util.CollectionUtils.asList(var3);
    org.jsecurity.authc.pam.ModularRealmAuthenticator var5 = new org.jsecurity.authc.pam.ModularRealmAuthenticator(var4);
    org.jsecurity.authc.pam.AllSuccessfulModularAuthenticationStrategy var6 = new org.jsecurity.authc.pam.AllSuccessfulModularAuthenticationStrategy();
    var5.setModularAuthenticationStrategy((org.jsecurity.authc.pam.ModularAuthenticationStrategy)var6);
    org.jsecurity.authz.SimpleAuthorizationInfo var8 = new org.jsecurity.authz.SimpleAuthorizationInfo();
    var8.addStringPermission("hi!");
    java.io.InputStream var12 = org.jsecurity.util.ClassUtils.getResourceAsStream("");
    java.lang.Object[] var13 = new java.lang.Object[] { var12};
    java.util.List var14 = org.jsecurity.util.CollectionUtils.asList(var13);
    var8.addRoles((java.util.Collection)var14);
    var5.setAuthenticationListeners((java.util.Collection)var14);
    var0.setSessionListeners((java.util.Collection)var14);
    org.jsecurity.authc.pam.ModularRealmAuthenticator var18 = new org.jsecurity.authc.pam.ModularRealmAuthenticator();
    org.jsecurity.authz.permission.InvalidPermissionStringException var21 = new org.jsecurity.authz.permission.InvalidPermissionStringException("", "dd\uFFFD");
    org.jsecurity.JSecurityException var23 = new org.jsecurity.JSecurityException("");
    org.jsecurity.authc.SimpleAuthenticationInfo var25 = new org.jsecurity.authc.SimpleAuthenticationInfo((java.lang.Object)var21, (java.lang.Object)"", "org.jsecurity.authz.UnauthorizedException: org.jsecurity.session.ExpiredSessionException: ");
    org.jsecurity.subject.PrincipalCollection var26 = var25.getPrincipals();
    var18.onLogout(var26);
    var0.setAuthenticator((org.jsecurity.authc.Authenticator)var18);
    org.jsecurity.codec.CodecException var31 = new org.jsecurity.codec.CodecException("dd\uFFFD");
    org.jsecurity.authc.ConcurrentAccessException var32 = new org.jsecurity.authc.ConcurrentAccessException("org.jsecurity.authz.UnauthorizedException: org.jsecurity.session.ExpiredSessionException: ", (java.lang.Throwable)var31);
    org.jsecurity.subject.SimplePrincipalCollection var34 = new org.jsecurity.subject.SimplePrincipalCollection((java.lang.Object)var31, "");
    org.jsecurity.authc.pam.FirstSuccessfulAuthenticationStrategy var35 = new org.jsecurity.authc.pam.FirstSuccessfulAuthenticationStrategy();
    org.jsecurity.authz.UnauthorizedException var37 = new org.jsecurity.authz.UnauthorizedException("org.jsecurity.config.ConfigurationException: dd\uFFFD");
    java.lang.Throwable[] var38 = var37.getSuppressed();
    java.util.List var39 = org.jsecurity.util.CollectionUtils.asList((java.lang.Object[])var38);
    org.jsecurity.authc.UsernamePasswordToken var40 = new org.jsecurity.authc.UsernamePasswordToken();
    java.lang.String var41 = var40.getUsername();
    java.net.InetAddress var42 = var40.getInetAddress();
    org.jsecurity.authc.AuthenticationInfo var43 = var35.beforeAllAttempts((java.util.Collection)var39, (org.jsecurity.authc.AuthenticationToken)var40);
    org.jsecurity.session.UnknownSessionException var48 = new org.jsecurity.session.UnknownSessionException("dd\uFFFD", (java.io.Serializable)100.0f);
    org.jsecurity.subject.SubjectException var49 = new org.jsecurity.subject.SubjectException("dd\uFFFD", (java.lang.Throwable)var48);
    org.jsecurity.io.SerializationException var50 = new org.jsecurity.io.SerializationException("", (java.lang.Throwable)var49);
    java.lang.Throwable[] var51 = var49.getSuppressed();
    java.util.Set var52 = org.jsecurity.util.CollectionUtils.asSet((java.lang.Object[])var51);
    org.jsecurity.authc.SimpleAccount var53 = new org.jsecurity.authc.SimpleAccount((org.jsecurity.subject.PrincipalCollection)var34, (java.lang.Object)var39, var52);
    java.io.InputStream var55 = org.jsecurity.util.ClassUtils.getResourceAsStream("");
    java.lang.Object[] var56 = new java.lang.Object[] { var55};
    java.util.List var57 = org.jsecurity.util.CollectionUtils.asList(var56);
    org.jsecurity.authc.pam.ModularRealmAuthenticator var58 = new org.jsecurity.authc.pam.ModularRealmAuthenticator(var57);
    org.jsecurity.subject.SimplePrincipalCollection var60 = new org.jsecurity.subject.SimplePrincipalCollection((java.util.Collection)var57, "org.jsecurity.authz.UnauthorizedException: org.jsecurity.session.ExpiredSessionException: ");
    org.jsecurity.io.ResourceException var64 = new org.jsecurity.io.ResourceException("hi!");
    org.jsecurity.authc.UnknownAccountException var65 = new org.jsecurity.authc.UnknownAccountException((java.lang.Throwable)var64);
    org.jsecurity.session.StoppedSessionException var66 = new org.jsecurity.session.StoppedSessionException("dd\uFFFD", (java.io.Serializable)var64);
    org.jsecurity.session.UnknownSessionException var67 = new org.jsecurity.session.UnknownSessionException("org.jsecurity.authz.UnauthorizedException: org.jsecurity.session.ExpiredSessionException: ", (java.lang.Throwable)var64);
    boolean var68 = var60.equals((java.lang.Object)var64);
    var34.addAll((org.jsecurity.subject.PrincipalCollection)var60);
    org.jsecurity.session.UnknownSessionException var74 = new org.jsecurity.session.UnknownSessionException("dd\uFFFD", (java.io.Serializable)100.0f);
    org.jsecurity.subject.SubjectException var75 = new org.jsecurity.subject.SubjectException("dd\uFFFD", (java.lang.Throwable)var74);
    org.jsecurity.io.SerializationException var76 = new org.jsecurity.io.SerializationException("", (java.lang.Throwable)var75);
    java.lang.Throwable[] var77 = var75.getSuppressed();
    java.util.List var78 = org.jsecurity.util.CollectionUtils.asList((java.lang.Object[])var77);
    boolean var79 = var0.isPermittedAll((org.jsecurity.subject.PrincipalCollection)var34, (java.util.Collection)var78);
    org.jsecurity.subject.DelegatingSubject var80 = new org.jsecurity.subject.DelegatingSubject((org.jsecurity.mgt.SecurityManager)var0);
    boolean var82 = var80.hasRole("org.jsecurity.authc.IncorrectCredentialsException: \u0000\u0000");
    java.net.InetAddress var83 = var80.getInetAddress();
    org.jsecurity.subject.PrincipalCollection var84 = var80.getPrincipals();
    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      org.jsecurity.session.Session var85 = var80.getSession();
      fail("Expected exception of type java.lang.ClassCastException");
    } catch (java.lang.ClassCastException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var2);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var3);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var4);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var12);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var13);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var14);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var26);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var38);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var39);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var41);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var42);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var43);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var51);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var52);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var55);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var56);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var57);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var68 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var77);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var78);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var79 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var82 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var83);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var84);

  }

  public void test45() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest6.test45");


    boolean var1 = org.jsecurity.util.ClassUtils.isAvailable("bf8dc28b-ea8f-43f7-9140-93c64a15daca");
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var1 == false);

  }

  public void test46() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest6.test46");


    org.jsecurity.session.mgt.SimpleSession var0 = new org.jsecurity.session.mgt.SimpleSession();
    var0.touch();
    var0.validate();
    org.jsecurity.session.mgt.SimpleSession var3 = new org.jsecurity.session.mgt.SimpleSession();
    var3.setTimeout((-1L));
    org.jsecurity.session.mgt.SimpleSession var6 = new org.jsecurity.session.mgt.SimpleSession();
    java.util.Date var7 = var6.getLastAccessTime();
    var3.setLastAccessTime(var7);
    org.jsecurity.session.mgt.SimpleSession var9 = new org.jsecurity.session.mgt.SimpleSession();
    java.util.Date var10 = var9.getLastAccessTime();
    var3.setStopTimestamp(var10);
    var0.setLastAccessTime(var10);
    java.io.Serializable var13 = var0.getId();
    var0.stop();
    org.jsecurity.jndi.JndiLocator var15 = new org.jsecurity.jndi.JndiLocator();
    boolean var16 = var15.isResourceRef();
    java.lang.Object var17 = var0.getAttribute((java.lang.Object)var15);
    org.jsecurity.mgt.DefaultSecurityManager var18 = new org.jsecurity.mgt.DefaultSecurityManager();
    java.io.InputStream var20 = org.jsecurity.util.ClassUtils.getResourceAsStream("");
    java.lang.Object[] var21 = new java.lang.Object[] { var20};
    java.util.List var22 = org.jsecurity.util.CollectionUtils.asList(var21);
    org.jsecurity.authc.pam.ModularRealmAuthenticator var23 = new org.jsecurity.authc.pam.ModularRealmAuthenticator(var22);
    org.jsecurity.authc.pam.AllSuccessfulModularAuthenticationStrategy var24 = new org.jsecurity.authc.pam.AllSuccessfulModularAuthenticationStrategy();
    var23.setModularAuthenticationStrategy((org.jsecurity.authc.pam.ModularAuthenticationStrategy)var24);
    org.jsecurity.authz.SimpleAuthorizationInfo var26 = new org.jsecurity.authz.SimpleAuthorizationInfo();
    var26.addStringPermission("hi!");
    java.io.InputStream var30 = org.jsecurity.util.ClassUtils.getResourceAsStream("");
    java.lang.Object[] var31 = new java.lang.Object[] { var30};
    java.util.List var32 = org.jsecurity.util.CollectionUtils.asList(var31);
    var26.addRoles((java.util.Collection)var32);
    var23.setAuthenticationListeners((java.util.Collection)var32);
    var18.setSessionListeners((java.util.Collection)var32);
    java.io.InputStream var37 = org.jsecurity.util.ClassUtils.getResourceAsStream("");
    java.lang.Object[] var38 = new java.lang.Object[] { var37};
    java.util.List var39 = org.jsecurity.util.CollectionUtils.asList(var38);
    org.jsecurity.authc.pam.ModularRealmAuthenticator var40 = new org.jsecurity.authc.pam.ModularRealmAuthenticator(var39);
    org.jsecurity.authc.pam.AllSuccessfulModularAuthenticationStrategy var41 = new org.jsecurity.authc.pam.AllSuccessfulModularAuthenticationStrategy();
    var40.setModularAuthenticationStrategy((org.jsecurity.authc.pam.ModularAuthenticationStrategy)var41);
    org.jsecurity.authz.SimpleAuthorizationInfo var43 = new org.jsecurity.authz.SimpleAuthorizationInfo();
    var43.addStringPermission("hi!");
    java.io.InputStream var47 = org.jsecurity.util.ClassUtils.getResourceAsStream("");
    java.lang.Object[] var48 = new java.lang.Object[] { var47};
    java.util.List var49 = org.jsecurity.util.CollectionUtils.asList(var48);
    var43.addRoles((java.util.Collection)var49);
    var40.setAuthenticationListeners((java.util.Collection)var49);
    org.jsecurity.realm.activedirectory.ActiveDirectoryRealm var52 = new org.jsecurity.realm.activedirectory.ActiveDirectoryRealm();
    var52.setPrincipalSuffix("");
    var40.setRealm((org.jsecurity.realm.Realm)var52);
    org.jsecurity.cache.HashtableCacheManager var56 = new org.jsecurity.cache.HashtableCacheManager();
    org.jsecurity.cache.Cache var58 = var56.getCache("\u0000\u0000");
    var52.setAuthorizationCache(var58);
    var18.setRealm((org.jsecurity.realm.Realm)var52);
    org.jsecurity.config.ReflectionBuilder var61 = new org.jsecurity.config.ReflectionBuilder();
    org.jsecurity.io.IniResource var62 = new org.jsecurity.io.IniResource();
    java.util.Map var63 = var62.getSections();
    var61.setObjects(var63);
    var52.setGroupRolesMap(var63);
    var0.setAttributes(var63);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var7);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var10);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var13);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var16 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var17);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var20);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var21);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var22);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var30);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var31);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var32);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var37);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var38);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var39);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var47);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var48);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var49);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var58);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var63);

  }

  public void test47() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest6.test47");


    org.jsecurity.session.mgt.SimpleSession var0 = new org.jsecurity.session.mgt.SimpleSession();
    org.jsecurity.io.SerializationException var3 = new org.jsecurity.io.SerializationException("org.jsecurity.config.ConfigurationException: dd\uFFFD");
    org.jsecurity.authc.AccountException var4 = new org.jsecurity.authc.AccountException("a2b823b1e72eae2b727289df8a00a89df8a0bab6ad8a89c4c5c7a9b62a270000", (java.lang.Throwable)var3);
    var0.setId((java.io.Serializable)"a2b823b1e72eae2b727289df8a00a89df8a0bab6ad8a89c4c5c7a9b62a270000");
    org.jsecurity.config.ReflectionBuilder var6 = new org.jsecurity.config.ReflectionBuilder();
    org.jsecurity.config.ReflectionBuilder var7 = new org.jsecurity.config.ReflectionBuilder();
    org.jsecurity.io.IniResource var8 = new org.jsecurity.io.IniResource();
    var8.setCharsetName("org.jsecurity.authz.UnauthorizedException: org.jsecurity.session.ExpiredSessionException: ");
    java.util.Map var11 = var8.getSections();
    java.util.Map var12 = var7.buildObjects(var11);
    org.jsecurity.config.ReflectionBuilder var13 = new org.jsecurity.config.ReflectionBuilder();
    org.jsecurity.io.IniResource var14 = new org.jsecurity.io.IniResource();
    var14.setCharsetName("org.jsecurity.authz.UnauthorizedException: org.jsecurity.session.ExpiredSessionException: ");
    java.util.Map var17 = var14.getSections();
    java.util.Map var18 = var13.buildObjects(var17);
    java.util.Map var19 = var7.buildObjects(var18);
    java.util.Map var20 = var6.buildObjects(var19);
    var0.setAttributes(var20);
    org.jsecurity.io.IniResource var22 = new org.jsecurity.io.IniResource();
    java.lang.String var23 = var22.getCharsetName();
    org.jsecurity.config.ReflectionBuilder var24 = new org.jsecurity.config.ReflectionBuilder();
    org.jsecurity.io.IniResource var25 = new org.jsecurity.io.IniResource();
    var25.setCharsetName("org.jsecurity.authz.UnauthorizedException: org.jsecurity.session.ExpiredSessionException: ");
    java.util.Map var28 = var25.getSections();
    java.util.Map var29 = var24.buildObjects(var28);
    var22.setSections(var29);
    var22.setCharsetName("ZGT/");
    java.util.Map var33 = var22.getSections();
    var0.setAttributes(var33);
    org.jsecurity.session.mgt.eis.MemorySessionDAO var35 = new org.jsecurity.session.mgt.eis.MemorySessionDAO();
    org.jsecurity.cache.Cache var36 = var35.getActiveSessionsCache();
    org.jsecurity.cache.CacheManager var37 = var35.getCacheManager();
    org.jsecurity.cache.HashtableCacheManager var38 = new org.jsecurity.cache.HashtableCacheManager();
    org.jsecurity.cache.Cache var40 = var38.getCache("\u0000\u0000");
    var35.setActiveSessionsCache(var40);
    java.io.InputStream var43 = org.jsecurity.util.ClassUtils.getResourceAsStream("");
    java.lang.Object[] var44 = new java.lang.Object[] { var43};
    java.util.List var45 = org.jsecurity.util.CollectionUtils.asList(var44);
    org.jsecurity.authc.pam.ModularRealmAuthenticator var46 = new org.jsecurity.authc.pam.ModularRealmAuthenticator(var45);
    org.jsecurity.authc.pam.AllSuccessfulModularAuthenticationStrategy var47 = new org.jsecurity.authc.pam.AllSuccessfulModularAuthenticationStrategy();
    var46.setModularAuthenticationStrategy((org.jsecurity.authc.pam.ModularAuthenticationStrategy)var47);
    org.jsecurity.authz.SimpleAuthorizationInfo var49 = new org.jsecurity.authz.SimpleAuthorizationInfo();
    var49.addStringPermission("hi!");
    java.io.InputStream var53 = org.jsecurity.util.ClassUtils.getResourceAsStream("");
    java.lang.Object[] var54 = new java.lang.Object[] { var53};
    java.util.List var55 = org.jsecurity.util.CollectionUtils.asList(var54);
    var49.addRoles((java.util.Collection)var55);
    var46.setAuthenticationListeners((java.util.Collection)var55);
    org.jsecurity.realm.activedirectory.ActiveDirectoryRealm var58 = new org.jsecurity.realm.activedirectory.ActiveDirectoryRealm();
    var58.setPrincipalSuffix("");
    var46.setRealm((org.jsecurity.realm.Realm)var58);
    org.jsecurity.cache.HashtableCacheManager var62 = new org.jsecurity.cache.HashtableCacheManager();
    org.jsecurity.cache.Cache var64 = var62.getCache("\u0000\u0000");
    var58.setAuthorizationCache(var64);
    var35.setActiveSessionsCache(var64);
    org.jsecurity.session.mgt.SimpleSession var67 = new org.jsecurity.session.mgt.SimpleSession();
    java.io.Serializable var68 = var35.create((org.jsecurity.session.Session)var67);
    org.jsecurity.session.mgt.SimpleSession var69 = new org.jsecurity.session.mgt.SimpleSession();
    var69.touch();
    var69.validate();
    org.jsecurity.session.mgt.SimpleSession var72 = new org.jsecurity.session.mgt.SimpleSession();
    var72.setTimeout((-1L));
    org.jsecurity.session.mgt.SimpleSession var75 = new org.jsecurity.session.mgt.SimpleSession();
    java.util.Date var76 = var75.getLastAccessTime();
    var72.setLastAccessTime(var76);
    org.jsecurity.session.mgt.SimpleSession var78 = new org.jsecurity.session.mgt.SimpleSession();
    java.util.Date var79 = var78.getLastAccessTime();
    var72.setStopTimestamp(var79);
    var69.setLastAccessTime(var79);
    var67.setLastAccessTime(var79);
    org.jsecurity.session.mgt.ImmutableProxiedSession var83 = new org.jsecurity.session.mgt.ImmutableProxiedSession((org.jsecurity.session.Session)var67);
    org.jsecurity.session.ProxiedSession var84 = new org.jsecurity.session.ProxiedSession((org.jsecurity.session.Session)var67);
    org.jsecurity.session.ProxiedSession var85 = new org.jsecurity.session.ProxiedSession((org.jsecurity.session.Session)var84);
    java.util.Date var86 = var85.getLastAccessTime();
    var0.setLastAccessTime(var86);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var11);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var12);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var17);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var18);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var19);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var20);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var23);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var28);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var29);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var33);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var36);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var37);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var40);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var43);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var44);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var45);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var53);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var54);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var55);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var64);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var68 + "' != '" + "3d7a5d91-ee7d-4414-b96f-4f9e3da37be2"+ "'", var68.equals("3d7a5d91-ee7d-4414-b96f-4f9e3da37be2"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var76);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var79);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var86);

  }

  public void test48() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest6.test48");


    org.jsecurity.authz.permission.AllPermission var0 = new org.jsecurity.authz.permission.AllPermission();
    org.jsecurity.mgt.DefaultSecurityManager var1 = new org.jsecurity.mgt.DefaultSecurityManager();
    java.io.InputStream var3 = org.jsecurity.util.ClassUtils.getResourceAsStream("");
    java.lang.Object[] var4 = new java.lang.Object[] { var3};
    java.util.List var5 = org.jsecurity.util.CollectionUtils.asList(var4);
    org.jsecurity.authc.pam.ModularRealmAuthenticator var6 = new org.jsecurity.authc.pam.ModularRealmAuthenticator(var5);
    org.jsecurity.authc.pam.AllSuccessfulModularAuthenticationStrategy var7 = new org.jsecurity.authc.pam.AllSuccessfulModularAuthenticationStrategy();
    var6.setModularAuthenticationStrategy((org.jsecurity.authc.pam.ModularAuthenticationStrategy)var7);
    org.jsecurity.authz.SimpleAuthorizationInfo var9 = new org.jsecurity.authz.SimpleAuthorizationInfo();
    var9.addStringPermission("hi!");
    java.io.InputStream var13 = org.jsecurity.util.ClassUtils.getResourceAsStream("");
    java.lang.Object[] var14 = new java.lang.Object[] { var13};
    java.util.List var15 = org.jsecurity.util.CollectionUtils.asList(var14);
    var9.addRoles((java.util.Collection)var15);
    var6.setAuthenticationListeners((java.util.Collection)var15);
    var1.setSessionListeners((java.util.Collection)var15);
    org.jsecurity.realm.text.TextConfigurationRealm var19 = new org.jsecurity.realm.text.TextConfigurationRealm();
    java.io.InputStream var21 = org.jsecurity.util.ClassUtils.getResourceAsStream("");
    java.lang.Object[] var22 = new java.lang.Object[] { var21};
    java.util.List var23 = org.jsecurity.util.CollectionUtils.asList(var22);
    org.jsecurity.authc.pam.ModularRealmAuthenticator var24 = new org.jsecurity.authc.pam.ModularRealmAuthenticator(var23);
    org.jsecurity.subject.SimplePrincipalCollection var26 = new org.jsecurity.subject.SimplePrincipalCollection((java.util.Collection)var23, "org.jsecurity.authz.UnauthorizedException: org.jsecurity.session.ExpiredSessionException: ");
    org.jsecurity.session.UnknownSessionException var31 = new org.jsecurity.session.UnknownSessionException("dd\uFFFD", (java.io.Serializable)100.0f);
    org.jsecurity.session.SessionException var33 = new org.jsecurity.session.SessionException("dd\uFFFD", (java.lang.Throwable)var31, (java.io.Serializable)0);
    org.jsecurity.session.SessionException var34 = new org.jsecurity.session.SessionException("dd\uFFFD", (java.lang.Throwable)var31);
    var26.add((java.lang.Object)var34, "org.jsecurity.config.ConfigurationException: dd\uFFFD");
    var19.onLogout((org.jsecurity.subject.PrincipalCollection)var26);
    org.jsecurity.authc.pam.FirstSuccessfulAuthenticationStrategy var38 = new org.jsecurity.authc.pam.FirstSuccessfulAuthenticationStrategy();
    org.jsecurity.authz.UnauthorizedException var40 = new org.jsecurity.authz.UnauthorizedException("org.jsecurity.config.ConfigurationException: dd\uFFFD");
    java.lang.Throwable[] var41 = var40.getSuppressed();
    java.util.List var42 = org.jsecurity.util.CollectionUtils.asList((java.lang.Object[])var41);
    org.jsecurity.authc.UsernamePasswordToken var43 = new org.jsecurity.authc.UsernamePasswordToken();
    java.lang.String var44 = var43.getUsername();
    java.net.InetAddress var45 = var43.getInetAddress();
    org.jsecurity.authc.AuthenticationInfo var46 = var38.beforeAllAttempts((java.util.Collection)var42, (org.jsecurity.authc.AuthenticationToken)var43);
    boolean[] var47 = var1.hasRoles((org.jsecurity.subject.PrincipalCollection)var26, var42);
    org.jsecurity.authz.permission.WildcardPermissionResolver var48 = new org.jsecurity.authz.permission.WildcardPermissionResolver();
    org.jsecurity.authz.Permission var50 = var48.resolvePermission("hi!");
    org.jsecurity.authz.Permission var52 = var48.resolvePermission("hi!");
    var1.setPermissionResolver((org.jsecurity.authz.permission.PermissionResolver)var48);
    org.jsecurity.authz.Permission var55 = var48.resolvePermission("org.jsecurity.realm.SimpleAccountRealm-9-authorization");
    boolean var56 = var0.implies(var55);
    org.jsecurity.authz.permission.WildcardPermission var58 = new org.jsecurity.authz.permission.WildcardPermission("org.jsecurity.realm.text.TextConfigurationRealm_2382");
    boolean var59 = var0.implies((org.jsecurity.authz.Permission)var58);
    org.jsecurity.authz.permission.WildcardPermission var62 = new org.jsecurity.authz.permission.WildcardPermission("092c22b9-945a-4905-99a2-455b7831cf4b", true);
    boolean var63 = var0.implies((org.jsecurity.authz.Permission)var62);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var3);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var4);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var5);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var13);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var14);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var15);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var21);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var22);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var23);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var41);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var42);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var44);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var45);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var46);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var47);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var50);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var52);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var55);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var56 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var59 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var63 == true);

  }

  public void test49() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest6.test49");


    org.jsecurity.realm.activedirectory.ActiveDirectoryRealm var0 = new org.jsecurity.realm.activedirectory.ActiveDirectoryRealm();
    var0.init();
    var0.init();
    org.jsecurity.realm.activedirectory.ActiveDirectoryRealm var3 = new org.jsecurity.realm.activedirectory.ActiveDirectoryRealm();
    org.jsecurity.authc.credential.Sha256CredentialsMatcher var4 = new org.jsecurity.authc.credential.Sha256CredentialsMatcher();
    var3.setCredentialsMatcher((org.jsecurity.authc.credential.CredentialsMatcher)var4);
    java.lang.String var6 = var3.getAuthorizationCacheName();
    var3.setUrl("hi!");
    org.jsecurity.realm.ldap.DefaultLdapContextFactory var9 = new org.jsecurity.realm.ldap.DefaultLdapContextFactory();
    var3.setLdapContextFactory((org.jsecurity.realm.ldap.LdapContextFactory)var9);
    var9.setAuthentication("dd\uFFFD");
    var0.setLdapContextFactory((org.jsecurity.realm.ldap.LdapContextFactory)var9);
    var9.setSystemUsername("cbfc3e1d-dc49-47b1-a5ab-57e5cb694d7d");
    var9.setUsePooling(true);
    var9.setUrl("162a4550-2475-4cc9-b393-3917de249d8e");
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var6);

  }

  public void test50() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest6.test50");


    org.jsecurity.session.mgt.SimpleSession var0 = new org.jsecurity.session.mgt.SimpleSession();
    org.jsecurity.session.UnknownSessionException var4 = new org.jsecurity.session.UnknownSessionException("dd\uFFFD", (java.io.Serializable)100.0f);
    org.jsecurity.session.SessionException var6 = new org.jsecurity.session.SessionException("dd\uFFFD", (java.lang.Throwable)var4, (java.io.Serializable)0);
    org.jsecurity.authc.AccountException var7 = new org.jsecurity.authc.AccountException((java.lang.Throwable)var4);
    var0.setId((java.io.Serializable)var4);
    java.util.Map var9 = var0.getAttributes();
    var0.setExpired(false);
    var0.validate();
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var9);

  }

  public void test51() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest6.test51");


    org.jsecurity.authc.credential.AllowAllCredentialsMatcher var0 = new org.jsecurity.authc.credential.AllowAllCredentialsMatcher();
    char[] var3 = new char[] { };
    org.jsecurity.authc.UsernamePasswordToken var5 = new org.jsecurity.authc.UsernamePasswordToken("hi!", var3, true);
    byte[] var6 = org.jsecurity.codec.Hex.decode(var3);
    byte[] var7 = org.jsecurity.codec.Hex.decode(var3);
    org.jsecurity.authc.UsernamePasswordToken var9 = new org.jsecurity.authc.UsernamePasswordToken("ZGT/", var3, false);
    var9.setUsername("ff1bb54d-80f9-4308-a260-ff3ddf1355e9");
    org.jsecurity.authc.pam.AtLeastOneSuccessfulModularAuthenticationStrategy var12 = new org.jsecurity.authc.pam.AtLeastOneSuccessfulModularAuthenticationStrategy();
    org.jsecurity.authc.pam.AllSuccessfulModularAuthenticationStrategy var14 = new org.jsecurity.authc.pam.AllSuccessfulModularAuthenticationStrategy();
    char[] var16 = new char[] { };
    org.jsecurity.authc.UsernamePasswordToken var18 = new org.jsecurity.authc.UsernamePasswordToken("hi!", var16, true);
    org.jsecurity.authc.SimpleAccount var19 = new org.jsecurity.authc.SimpleAccount();
    var19.setCredentialsExpired(false);
    boolean var22 = var19.isLocked();
    org.jsecurity.authc.AuthenticationInfo var23 = var14.afterAllAttempts((org.jsecurity.authc.AuthenticationToken)var18, (org.jsecurity.authc.AuthenticationInfo)var19);
    char[] var26 = new char[] { };
    org.jsecurity.authc.UsernamePasswordToken var28 = new org.jsecurity.authc.UsernamePasswordToken("hi!", var26, true);
    org.jsecurity.authc.UsernamePasswordToken var29 = new org.jsecurity.authc.UsernamePasswordToken("\u0000\u0000", var26);
    var18.setPassword(var26);
    org.jsecurity.authc.UsernamePasswordToken var31 = new org.jsecurity.authc.UsernamePasswordToken("\u0000\u0000\u0000", var26);
    org.jsecurity.realm.text.TextConfigurationRealm var32 = new org.jsecurity.realm.text.TextConfigurationRealm();
    java.io.InputStream var34 = org.jsecurity.util.ClassUtils.getResourceAsStream("");
    java.lang.Object[] var35 = new java.lang.Object[] { var34};
    java.util.List var36 = org.jsecurity.util.CollectionUtils.asList(var35);
    org.jsecurity.authc.pam.ModularRealmAuthenticator var37 = new org.jsecurity.authc.pam.ModularRealmAuthenticator(var36);
    org.jsecurity.subject.SimplePrincipalCollection var39 = new org.jsecurity.subject.SimplePrincipalCollection((java.util.Collection)var36, "org.jsecurity.authz.UnauthorizedException: org.jsecurity.session.ExpiredSessionException: ");
    org.jsecurity.session.UnknownSessionException var44 = new org.jsecurity.session.UnknownSessionException("dd\uFFFD", (java.io.Serializable)100.0f);
    org.jsecurity.session.SessionException var46 = new org.jsecurity.session.SessionException("dd\uFFFD", (java.lang.Throwable)var44, (java.io.Serializable)0);
    org.jsecurity.session.SessionException var47 = new org.jsecurity.session.SessionException("dd\uFFFD", (java.lang.Throwable)var44);
    var39.add((java.lang.Object)var47, "org.jsecurity.config.ConfigurationException: dd\uFFFD");
    var32.onLogout((org.jsecurity.subject.PrincipalCollection)var39);
    org.jsecurity.authc.ExpiredCredentialsException var52 = new org.jsecurity.authc.ExpiredCredentialsException();
    org.jsecurity.session.ExpiredSessionException var53 = new org.jsecurity.session.ExpiredSessionException("", (java.lang.Throwable)var52);
    java.lang.Throwable[] var54 = var53.getSuppressed();
    org.jsecurity.io.ResourceException var55 = new org.jsecurity.io.ResourceException((java.lang.Throwable)var53);
    org.jsecurity.authc.SimpleAuthenticationInfo var56 = new org.jsecurity.authc.SimpleAuthenticationInfo((org.jsecurity.subject.PrincipalCollection)var39, (java.lang.Object)var53);
    org.jsecurity.authc.AuthenticationInfo var57 = var12.afterAllAttempts((org.jsecurity.authc.AuthenticationToken)var31, (org.jsecurity.authc.AuthenticationInfo)var56);
    boolean var58 = var0.doCredentialsMatch((org.jsecurity.authc.AuthenticationToken)var9, var57);
    java.lang.Object var59 = var9.getPrincipal();
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var3);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var6);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var7);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var16);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var22 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var23);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var26);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var34);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var35);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var36);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var54);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var57);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var58 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var59 + "' != '" + "ff1bb54d-80f9-4308-a260-ff3ddf1355e9"+ "'", var59.equals("ff1bb54d-80f9-4308-a260-ff3ddf1355e9"));

  }

  public void test52() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest6.test52");


    org.jsecurity.authz.permission.InvalidPermissionStringException var2 = new org.jsecurity.authz.permission.InvalidPermissionStringException("", "dd\uFFFD");
    org.jsecurity.authc.AccountException var3 = new org.jsecurity.authc.AccountException((java.lang.Throwable)var2);
    java.lang.String var4 = var2.getPermissionString();
    org.jsecurity.authz.HostUnauthorizedException var5 = new org.jsecurity.authz.HostUnauthorizedException((java.lang.Throwable)var2);
    java.net.InetAddress var6 = var5.getHostAddress();
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var4 + "' != '" + "dd\uFFFD"+ "'", var4.equals("dd\uFFFD"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var6);

  }

  public void test53() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest6.test53");


    org.jsecurity.session.mgt.DefaultSessionManager var0 = new org.jsecurity.session.mgt.DefaultSessionManager();
    org.jsecurity.session.mgt.eis.MemorySessionDAO var1 = new org.jsecurity.session.mgt.eis.MemorySessionDAO();
    org.jsecurity.cache.Cache var2 = var1.getActiveSessionsCache();
    org.jsecurity.cache.CacheManager var3 = var1.getCacheManager();
    org.jsecurity.cache.HashtableCacheManager var4 = new org.jsecurity.cache.HashtableCacheManager();
    org.jsecurity.cache.Cache var6 = var4.getCache("\u0000\u0000");
    var1.setActiveSessionsCache(var6);
    java.io.InputStream var9 = org.jsecurity.util.ClassUtils.getResourceAsStream("");
    java.lang.Object[] var10 = new java.lang.Object[] { var9};
    java.util.List var11 = org.jsecurity.util.CollectionUtils.asList(var10);
    org.jsecurity.authc.pam.ModularRealmAuthenticator var12 = new org.jsecurity.authc.pam.ModularRealmAuthenticator(var11);
    org.jsecurity.authc.pam.AllSuccessfulModularAuthenticationStrategy var13 = new org.jsecurity.authc.pam.AllSuccessfulModularAuthenticationStrategy();
    var12.setModularAuthenticationStrategy((org.jsecurity.authc.pam.ModularAuthenticationStrategy)var13);
    org.jsecurity.authz.SimpleAuthorizationInfo var15 = new org.jsecurity.authz.SimpleAuthorizationInfo();
    var15.addStringPermission("hi!");
    java.io.InputStream var19 = org.jsecurity.util.ClassUtils.getResourceAsStream("");
    java.lang.Object[] var20 = new java.lang.Object[] { var19};
    java.util.List var21 = org.jsecurity.util.CollectionUtils.asList(var20);
    var15.addRoles((java.util.Collection)var21);
    var12.setAuthenticationListeners((java.util.Collection)var21);
    org.jsecurity.realm.activedirectory.ActiveDirectoryRealm var24 = new org.jsecurity.realm.activedirectory.ActiveDirectoryRealm();
    var24.setPrincipalSuffix("");
    var12.setRealm((org.jsecurity.realm.Realm)var24);
    org.jsecurity.cache.HashtableCacheManager var28 = new org.jsecurity.cache.HashtableCacheManager();
    org.jsecurity.cache.Cache var30 = var28.getCache("\u0000\u0000");
    var24.setAuthorizationCache(var30);
    var1.setActiveSessionsCache(var30);
    org.jsecurity.session.mgt.SimpleSession var33 = new org.jsecurity.session.mgt.SimpleSession();
    java.io.Serializable var34 = var1.create((org.jsecurity.session.Session)var33);
    var0.setSessionDAO((org.jsecurity.session.mgt.eis.SessionDAO)var1);
    org.jsecurity.authc.pam.AllSuccessfulModularAuthenticationStrategy var36 = new org.jsecurity.authc.pam.AllSuccessfulModularAuthenticationStrategy();
    char[] var38 = new char[] { };
    org.jsecurity.authc.UsernamePasswordToken var40 = new org.jsecurity.authc.UsernamePasswordToken("hi!", var38, true);
    org.jsecurity.authc.SimpleAccount var41 = new org.jsecurity.authc.SimpleAccount();
    var41.setCredentialsExpired(false);
    boolean var44 = var41.isLocked();
    org.jsecurity.authc.AuthenticationInfo var45 = var36.afterAllAttempts((org.jsecurity.authc.AuthenticationToken)var40, (org.jsecurity.authc.AuthenticationInfo)var41);
    char[] var49 = new char[] { '4', '#'};
    org.jsecurity.authc.UsernamePasswordToken var50 = new org.jsecurity.authc.UsernamePasswordToken("\u0000\u0000", var49);
    org.jsecurity.authc.SimpleAccount var51 = new org.jsecurity.authc.SimpleAccount();
    var51.setCredentialsExpired(false);
    var51.setCredentialsExpired(false);
    boolean var56 = var51.isCredentialsExpired();
    org.jsecurity.authc.AuthenticationInfo var57 = var36.afterAllAttempts((org.jsecurity.authc.AuthenticationToken)var50, (org.jsecurity.authc.AuthenticationInfo)var51);
    org.jsecurity.realm.activedirectory.ActiveDirectoryRealm var58 = new org.jsecurity.realm.activedirectory.ActiveDirectoryRealm();
    org.jsecurity.authc.credential.Sha256CredentialsMatcher var59 = new org.jsecurity.authc.credential.Sha256CredentialsMatcher();
    var58.setCredentialsMatcher((org.jsecurity.authc.credential.CredentialsMatcher)var59);
    java.lang.String var61 = var58.getAuthorizationCacheName();
    org.jsecurity.authc.UsernamePasswordToken var62 = new org.jsecurity.authc.UsernamePasswordToken();
    java.lang.String var63 = var62.getUsername();
    java.lang.Object var64 = var62.getPrincipal();
    boolean var65 = var58.supports((org.jsecurity.authc.AuthenticationToken)var62);
    org.jsecurity.session.UnknownSessionException var69 = new org.jsecurity.session.UnknownSessionException("dd\uFFFD", (java.io.Serializable)100.0f);
    org.jsecurity.session.SessionException var71 = new org.jsecurity.session.SessionException("dd\uFFFD", (java.lang.Throwable)var69, (java.io.Serializable)0);
    org.jsecurity.authc.SimpleAuthenticationInfo var74 = new org.jsecurity.authc.SimpleAuthenticationInfo((java.lang.Object)0, (java.lang.Object)10, "hi!");
    java.lang.Object var75 = var74.getCredentials();
    java.lang.String var76 = var74.toString();
    org.jsecurity.authc.AuthenticationInfo var77 = var36.afterAllAttempts((org.jsecurity.authc.AuthenticationToken)var62, (org.jsecurity.authc.AuthenticationInfo)var74);
    org.jsecurity.session.mgt.eis.MemorySessionDAO var78 = new org.jsecurity.session.mgt.eis.MemorySessionDAO();
    org.jsecurity.cache.Cache var79 = var78.getActiveSessionsCache();
    var78.setActiveSessionsCacheName("dd\uFFFD");
    var74.setCredentials((java.lang.Object)var78);
    var0.setSessionDAO((org.jsecurity.session.mgt.eis.SessionDAO)var78);
    org.jsecurity.session.mgt.ExecutorServiceSessionValidationScheduler var84 = new org.jsecurity.session.mgt.ExecutorServiceSessionValidationScheduler((org.jsecurity.session.mgt.ValidatingSessionManager)var0);
    org.jsecurity.subject.InvalidSubjectException var88 = new org.jsecurity.subject.InvalidSubjectException("");
    org.jsecurity.authc.CredentialsException var89 = new org.jsecurity.authc.CredentialsException("org.jsecurity.authz.UnauthorizedException: org.jsecurity.session.ExpiredSessionException: ", (java.lang.Throwable)var88);
    org.jsecurity.io.ResourceException var92 = new org.jsecurity.io.ResourceException("d8d550ee-3a8c-48f0-8061-1d82c827f505");
    org.jsecurity.subject.SubjectException var93 = new org.jsecurity.subject.SubjectException("ca73d1a4-706e-42e7-980f-896d3b153de8", (java.lang.Throwable)var92);
    org.jsecurity.session.SessionException var94 = new org.jsecurity.session.SessionException("5b549fba-5a5d-44e6-9c05-771d476c2e80", (java.lang.Throwable)var88, (java.io.Serializable)var93);
    org.jsecurity.session.mgt.DelegatingSession var95 = new org.jsecurity.session.mgt.DelegatingSession((org.jsecurity.session.mgt.SessionManager)var0, (java.io.Serializable)var88);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var2);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var3);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var6);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var9);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var10);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var11);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var19);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var20);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var21);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var30);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var34 + "' != '" + "dfc28f43-8d1b-408e-8d01-d59480aa83be"+ "'", var34.equals("dfc28f43-8d1b-408e-8d01-d59480aa83be"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var38);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var44 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var45);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var49);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var56 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var57);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var61);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var63);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var64);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var65 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var75 + "' != '" + 10+ "'", var75.equals(10));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var77);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var79);

  }

  public void test54() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest6.test54");


    org.jsecurity.realm.text.PropertiesRealm var0 = new org.jsecurity.realm.text.PropertiesRealm();
    java.lang.String var1 = var0.getUserDefinitions();
    java.lang.String var2 = var0.getName();
    var0.setResourcePath("345d9036-762c-4f58-8690-c901bf299cde");
    var0.setResourcePath("a2b823b1e72eae2b727289df8a00a89df8a0bab6ad8a89c4c5c7a9b62a270000");
    var0.setResourcePath("bcd88f91-36fc-4824-97c3-1a752a1a4e71");
    var0.setRoleDefinitions("c88beeba-81c4-4196-82b6-97784ab62fef");
    var0.run();
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var2 + "' != '" + "org.jsecurity.realm.text.PropertiesRealm_3829"+ "'", var2.equals("org.jsecurity.realm.text.PropertiesRealm_3829"));

  }

  public void test55() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest6.test55");


    org.jsecurity.realm.SimpleAccountRealm var1 = new org.jsecurity.realm.SimpleAccountRealm("2b2d382d-b075-43d6-9e40-316e19c6c169");

  }

  public void test56() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest6.test56");


    org.jsecurity.session.UnknownSessionException var6 = new org.jsecurity.session.UnknownSessionException("dd\uFFFD", (java.io.Serializable)100.0f);
    org.jsecurity.config.ConfigurationException var7 = new org.jsecurity.config.ConfigurationException("dd\uFFFD", (java.lang.Throwable)var6);
    org.jsecurity.session.ExpiredSessionException var9 = new org.jsecurity.session.ExpiredSessionException("", (java.lang.Throwable)var7, (java.io.Serializable)true);
    org.jsecurity.authc.pam.UnsupportedTokenException var10 = new org.jsecurity.authc.pam.UnsupportedTokenException((java.lang.Throwable)var9);
    org.jsecurity.authc.AccountException var11 = new org.jsecurity.authc.AccountException((java.lang.Throwable)var10);
    org.jsecurity.authc.DisabledAccountException var12 = new org.jsecurity.authc.DisabledAccountException((java.lang.Throwable)var10);
    org.jsecurity.session.StoppedSessionException var13 = new org.jsecurity.session.StoppedSessionException("org.jsecurity.config.ConfigurationException: dd\uFFFD", (java.io.Serializable)var10);
    org.jsecurity.session.ExpiredSessionException var14 = new org.jsecurity.session.ExpiredSessionException("\u0000\u0000", (java.lang.Throwable)var13);
    org.jsecurity.session.UnknownSessionException var15 = new org.jsecurity.session.UnknownSessionException((java.io.Serializable)"\u0000\u0000");
    java.io.Serializable var16 = var15.getSessionId();
    org.jsecurity.codec.CodecException var19 = new org.jsecurity.codec.CodecException("dd\uFFFD");
    org.jsecurity.authc.ConcurrentAccessException var20 = new org.jsecurity.authc.ConcurrentAccessException("org.jsecurity.authz.UnauthorizedException: org.jsecurity.session.ExpiredSessionException: ", (java.lang.Throwable)var19);
    org.jsecurity.subject.SimplePrincipalCollection var22 = new org.jsecurity.subject.SimplePrincipalCollection((java.lang.Object)var19, "");
    boolean var23 = var22.isEmpty();
    java.util.List var24 = var22.asList();
    org.jsecurity.authc.pam.ModularRealmAuthenticator var25 = new org.jsecurity.authc.pam.ModularRealmAuthenticator(var24);
    org.jsecurity.authc.pam.AtLeastOneSuccessfulModularAuthenticationStrategy var26 = new org.jsecurity.authc.pam.AtLeastOneSuccessfulModularAuthenticationStrategy();
    org.jsecurity.authc.pam.AllSuccessfulModularAuthenticationStrategy var28 = new org.jsecurity.authc.pam.AllSuccessfulModularAuthenticationStrategy();
    char[] var30 = new char[] { };
    org.jsecurity.authc.UsernamePasswordToken var32 = new org.jsecurity.authc.UsernamePasswordToken("hi!", var30, true);
    org.jsecurity.authc.SimpleAccount var33 = new org.jsecurity.authc.SimpleAccount();
    var33.setCredentialsExpired(false);
    boolean var36 = var33.isLocked();
    org.jsecurity.authc.AuthenticationInfo var37 = var28.afterAllAttempts((org.jsecurity.authc.AuthenticationToken)var32, (org.jsecurity.authc.AuthenticationInfo)var33);
    char[] var40 = new char[] { };
    org.jsecurity.authc.UsernamePasswordToken var42 = new org.jsecurity.authc.UsernamePasswordToken("hi!", var40, true);
    org.jsecurity.authc.UsernamePasswordToken var43 = new org.jsecurity.authc.UsernamePasswordToken("\u0000\u0000", var40);
    var32.setPassword(var40);
    org.jsecurity.authc.UsernamePasswordToken var45 = new org.jsecurity.authc.UsernamePasswordToken("\u0000\u0000\u0000", var40);
    org.jsecurity.realm.text.TextConfigurationRealm var46 = new org.jsecurity.realm.text.TextConfigurationRealm();
    java.io.InputStream var48 = org.jsecurity.util.ClassUtils.getResourceAsStream("");
    java.lang.Object[] var49 = new java.lang.Object[] { var48};
    java.util.List var50 = org.jsecurity.util.CollectionUtils.asList(var49);
    org.jsecurity.authc.pam.ModularRealmAuthenticator var51 = new org.jsecurity.authc.pam.ModularRealmAuthenticator(var50);
    org.jsecurity.subject.SimplePrincipalCollection var53 = new org.jsecurity.subject.SimplePrincipalCollection((java.util.Collection)var50, "org.jsecurity.authz.UnauthorizedException: org.jsecurity.session.ExpiredSessionException: ");
    org.jsecurity.session.UnknownSessionException var58 = new org.jsecurity.session.UnknownSessionException("dd\uFFFD", (java.io.Serializable)100.0f);
    org.jsecurity.session.SessionException var60 = new org.jsecurity.session.SessionException("dd\uFFFD", (java.lang.Throwable)var58, (java.io.Serializable)0);
    org.jsecurity.session.SessionException var61 = new org.jsecurity.session.SessionException("dd\uFFFD", (java.lang.Throwable)var58);
    var53.add((java.lang.Object)var61, "org.jsecurity.config.ConfigurationException: dd\uFFFD");
    var46.onLogout((org.jsecurity.subject.PrincipalCollection)var53);
    org.jsecurity.authc.ExpiredCredentialsException var66 = new org.jsecurity.authc.ExpiredCredentialsException();
    org.jsecurity.session.ExpiredSessionException var67 = new org.jsecurity.session.ExpiredSessionException("", (java.lang.Throwable)var66);
    java.lang.Throwable[] var68 = var67.getSuppressed();
    org.jsecurity.io.ResourceException var69 = new org.jsecurity.io.ResourceException((java.lang.Throwable)var67);
    org.jsecurity.authc.SimpleAuthenticationInfo var70 = new org.jsecurity.authc.SimpleAuthenticationInfo((org.jsecurity.subject.PrincipalCollection)var53, (java.lang.Object)var67);
    org.jsecurity.authc.AuthenticationInfo var71 = var26.afterAllAttempts((org.jsecurity.authc.AuthenticationToken)var45, (org.jsecurity.authc.AuthenticationInfo)var70);
    org.jsecurity.authz.SimpleAuthorizingAccount var73 = new org.jsecurity.authz.SimpleAuthorizingAccount((java.util.Collection)var24, (java.lang.Object)var70, "org.jsecurity.config.ConfigurationException: dd\uFFFD-4org.jsecurity.config.ConfigurationException: dd\uFFFD02-8085-950org.jsecurity.config.ConfigurationException: dd\uFFFDbb026org.jsecurity.config.ConfigurationException: dd\uFFFD06");
    var73.addRole("162a4550-2475-4cc9-b393-3917de249d8e");
    java.util.Set var76 = var73.getSimpleRoles();
    java.util.Set var77 = var73.getSimpleRoles();
    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      org.jsecurity.crypto.hash.Md2Hash var79 = new org.jsecurity.crypto.hash.Md2Hash((java.lang.Object)var15, (java.lang.Object)var73, 1);
      fail("Expected exception of type org.jsecurity.codec.CodecException");
    } catch (org.jsecurity.codec.CodecException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var16 + "' != '" + "\u0000\u0000"+ "'", var16.equals("\u0000\u0000"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var23 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var24);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var30);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var36 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var37);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var40);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var48);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var49);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var50);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var68);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var71);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var76);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var77);

  }

  public void test57() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest6.test57");


    char[] var4 = new char[] { ' ', ' '};
    org.jsecurity.authc.UsernamePasswordToken var5 = new org.jsecurity.authc.UsernamePasswordToken("hi!", var4);
    org.jsecurity.authc.UsernamePasswordToken var7 = new org.jsecurity.authc.UsernamePasswordToken("c25a1a23-4e04-4c16-9dcf-f5ed49ed2b3c", var4, false);
    boolean var8 = var7.isRememberMe();
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var4);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var8 == false);

  }

  public void test58() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest6.test58");


    org.jsecurity.realm.text.TextConfigurationRealm var0 = new org.jsecurity.realm.text.TextConfigurationRealm();
    java.io.InputStream var2 = org.jsecurity.util.ClassUtils.getResourceAsStream("");
    java.lang.Object[] var3 = new java.lang.Object[] { var2};
    java.util.List var4 = org.jsecurity.util.CollectionUtils.asList(var3);
    org.jsecurity.authc.pam.ModularRealmAuthenticator var5 = new org.jsecurity.authc.pam.ModularRealmAuthenticator(var4);
    org.jsecurity.subject.SimplePrincipalCollection var7 = new org.jsecurity.subject.SimplePrincipalCollection((java.util.Collection)var4, "org.jsecurity.authz.UnauthorizedException: org.jsecurity.session.ExpiredSessionException: ");
    org.jsecurity.session.UnknownSessionException var12 = new org.jsecurity.session.UnknownSessionException("dd\uFFFD", (java.io.Serializable)100.0f);
    org.jsecurity.session.SessionException var14 = new org.jsecurity.session.SessionException("dd\uFFFD", (java.lang.Throwable)var12, (java.io.Serializable)0);
    org.jsecurity.session.SessionException var15 = new org.jsecurity.session.SessionException("dd\uFFFD", (java.lang.Throwable)var12);
    var7.add((java.lang.Object)var15, "org.jsecurity.config.ConfigurationException: dd\uFFFD");
    var0.onLogout((org.jsecurity.subject.PrincipalCollection)var7);
    org.jsecurity.authc.ExpiredCredentialsException var20 = new org.jsecurity.authc.ExpiredCredentialsException();
    org.jsecurity.session.ExpiredSessionException var21 = new org.jsecurity.session.ExpiredSessionException("", (java.lang.Throwable)var20);
    java.lang.Throwable[] var22 = var21.getSuppressed();
    org.jsecurity.io.ResourceException var23 = new org.jsecurity.io.ResourceException((java.lang.Throwable)var21);
    org.jsecurity.authc.SimpleAuthenticationInfo var24 = new org.jsecurity.authc.SimpleAuthenticationInfo((org.jsecurity.subject.PrincipalCollection)var7, (java.lang.Object)var21);
    org.jsecurity.codec.CodecException var27 = new org.jsecurity.codec.CodecException("dd\uFFFD");
    org.jsecurity.authc.ConcurrentAccessException var28 = new org.jsecurity.authc.ConcurrentAccessException("org.jsecurity.authz.UnauthorizedException: org.jsecurity.session.ExpiredSessionException: ", (java.lang.Throwable)var27);
    org.jsecurity.subject.SimplePrincipalCollection var30 = new org.jsecurity.subject.SimplePrincipalCollection((java.lang.Object)var27, "");
    java.io.InputStream var32 = org.jsecurity.util.ClassUtils.getResourceAsStream("");
    java.lang.Object[] var33 = new java.lang.Object[] { var32};
    java.util.List var34 = org.jsecurity.util.CollectionUtils.asList(var33);
    org.jsecurity.authc.pam.ModularRealmAuthenticator var35 = new org.jsecurity.authc.pam.ModularRealmAuthenticator(var34);
    var30.addAll((java.util.Collection)var34, "\u0000\u0000");
    org.jsecurity.authz.UnauthorizedException var39 = new org.jsecurity.authz.UnauthorizedException();
    org.jsecurity.session.SessionException var41 = new org.jsecurity.session.SessionException("", (java.lang.Throwable)var39, (java.io.Serializable)"org.jsecurity.config.ConfigurationException: dd\uFFFD");
    org.jsecurity.crypto.hash.Sha1Hash var42 = new org.jsecurity.crypto.hash.Sha1Hash((java.lang.Object)"");
    org.jsecurity.session.UnknownSessionException var47 = new org.jsecurity.session.UnknownSessionException("dd\uFFFD", (java.io.Serializable)100.0f);
    org.jsecurity.subject.SubjectException var48 = new org.jsecurity.subject.SubjectException("dd\uFFFD", (java.lang.Throwable)var47);
    org.jsecurity.io.SerializationException var49 = new org.jsecurity.io.SerializationException("", (java.lang.Throwable)var48);
    java.lang.Throwable[] var50 = var48.getSuppressed();
    java.util.Set var51 = org.jsecurity.util.CollectionUtils.asSet((java.lang.Object[])var50);
    org.jsecurity.authz.SimpleAuthorizationInfo var53 = new org.jsecurity.authz.SimpleAuthorizationInfo();
    org.jsecurity.session.UnknownSessionException var58 = new org.jsecurity.session.UnknownSessionException("dd\uFFFD", (java.io.Serializable)100.0f);
    org.jsecurity.subject.SubjectException var59 = new org.jsecurity.subject.SubjectException("dd\uFFFD", (java.lang.Throwable)var58);
    org.jsecurity.io.SerializationException var60 = new org.jsecurity.io.SerializationException("", (java.lang.Throwable)var59);
    java.lang.Throwable[] var61 = var59.getSuppressed();
    java.util.Set var62 = org.jsecurity.util.CollectionUtils.asSet((java.lang.Object[])var61);
    var53.setStringPermissions(var62);
    java.util.Set var64 = var53.getRoles();
    org.jsecurity.authz.SimpleAuthorizationInfo var65 = new org.jsecurity.authz.SimpleAuthorizationInfo();
    var65.addRole("a2b823b1e72eae2b727289df8a00a89df8a0bab6ad8a89c4c5c7a9b62a270000");
    org.jsecurity.session.UnknownSessionException var72 = new org.jsecurity.session.UnknownSessionException("dd\uFFFD", (java.io.Serializable)100.0f);
    org.jsecurity.subject.SubjectException var73 = new org.jsecurity.subject.SubjectException("dd\uFFFD", (java.lang.Throwable)var72);
    org.jsecurity.io.SerializationException var74 = new org.jsecurity.io.SerializationException("", (java.lang.Throwable)var73);
    java.lang.Throwable[] var75 = var73.getSuppressed();
    java.util.Set var76 = org.jsecurity.util.CollectionUtils.asSet((java.lang.Object[])var75);
    var65.addRoles((java.util.Collection)var76);
    var53.setRoles(var76);
    org.jsecurity.authz.SimpleRole var79 = new org.jsecurity.authz.SimpleRole("org.jsecurity.authz.UnauthorizedException: org.jsecurity.session.ExpiredSessionException: ", var76);
    org.jsecurity.authc.SimpleAccount var80 = new org.jsecurity.authc.SimpleAccount((org.jsecurity.subject.PrincipalCollection)var30, (java.lang.Object)"", var51, var76);
    var24.setPrincipals((org.jsecurity.subject.PrincipalCollection)var30);
    org.jsecurity.session.mgt.DelegatingSession var82 = new org.jsecurity.session.mgt.DelegatingSession();
    org.jsecurity.session.mgt.SessionManager var83 = var82.getSessionManager();
    java.io.Serializable var84 = var82.getId();
    var82.setId((java.io.Serializable)"e7e879cb-1172-4cea-8bca-f370fbe1f08c");
    java.io.Serializable var87 = var82.getId();
    boolean var88 = var24.equals((java.lang.Object)var87);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var2);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var3);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var4);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var22);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var32);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var33);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var34);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var50);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var51);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var61);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var62);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var64);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var75);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var76);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var83);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var84);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var87 + "' != '" + "e7e879cb-1172-4cea-8bca-f370fbe1f08c"+ "'", var87.equals("e7e879cb-1172-4cea-8bca-f370fbe1f08c"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var88 == false);

  }

  public void test59() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest6.test59");


    org.jsecurity.session.mgt.eis.MemorySessionDAO var0 = new org.jsecurity.session.mgt.eis.MemorySessionDAO();
    org.jsecurity.cache.Cache var1 = var0.getActiveSessionsCache();
    org.jsecurity.cache.CacheManager var2 = var0.getCacheManager();
    org.jsecurity.cache.HashtableCacheManager var3 = new org.jsecurity.cache.HashtableCacheManager();
    org.jsecurity.cache.Cache var5 = var3.getCache("\u0000\u0000");
    var0.setActiveSessionsCache(var5);
    java.io.InputStream var8 = org.jsecurity.util.ClassUtils.getResourceAsStream("");
    java.lang.Object[] var9 = new java.lang.Object[] { var8};
    java.util.List var10 = org.jsecurity.util.CollectionUtils.asList(var9);
    org.jsecurity.authc.pam.ModularRealmAuthenticator var11 = new org.jsecurity.authc.pam.ModularRealmAuthenticator(var10);
    org.jsecurity.authc.pam.AllSuccessfulModularAuthenticationStrategy var12 = new org.jsecurity.authc.pam.AllSuccessfulModularAuthenticationStrategy();
    var11.setModularAuthenticationStrategy((org.jsecurity.authc.pam.ModularAuthenticationStrategy)var12);
    org.jsecurity.authz.SimpleAuthorizationInfo var14 = new org.jsecurity.authz.SimpleAuthorizationInfo();
    var14.addStringPermission("hi!");
    java.io.InputStream var18 = org.jsecurity.util.ClassUtils.getResourceAsStream("");
    java.lang.Object[] var19 = new java.lang.Object[] { var18};
    java.util.List var20 = org.jsecurity.util.CollectionUtils.asList(var19);
    var14.addRoles((java.util.Collection)var20);
    var11.setAuthenticationListeners((java.util.Collection)var20);
    org.jsecurity.realm.activedirectory.ActiveDirectoryRealm var23 = new org.jsecurity.realm.activedirectory.ActiveDirectoryRealm();
    var23.setPrincipalSuffix("");
    var11.setRealm((org.jsecurity.realm.Realm)var23);
    org.jsecurity.cache.HashtableCacheManager var27 = new org.jsecurity.cache.HashtableCacheManager();
    org.jsecurity.cache.Cache var29 = var27.getCache("\u0000\u0000");
    var23.setAuthorizationCache(var29);
    var0.setActiveSessionsCache(var29);
    org.jsecurity.session.mgt.SimpleSession var32 = new org.jsecurity.session.mgt.SimpleSession();
    java.io.Serializable var33 = var0.create((org.jsecurity.session.Session)var32);
    org.jsecurity.session.mgt.SimpleSession var34 = new org.jsecurity.session.mgt.SimpleSession();
    var34.touch();
    var34.validate();
    org.jsecurity.session.mgt.SimpleSession var37 = new org.jsecurity.session.mgt.SimpleSession();
    var37.setTimeout((-1L));
    org.jsecurity.session.mgt.SimpleSession var40 = new org.jsecurity.session.mgt.SimpleSession();
    java.util.Date var41 = var40.getLastAccessTime();
    var37.setLastAccessTime(var41);
    org.jsecurity.session.mgt.SimpleSession var43 = new org.jsecurity.session.mgt.SimpleSession();
    java.util.Date var44 = var43.getLastAccessTime();
    var37.setStopTimestamp(var44);
    var34.setLastAccessTime(var44);
    var32.setLastAccessTime(var44);
    org.jsecurity.session.mgt.ImmutableProxiedSession var48 = new org.jsecurity.session.mgt.ImmutableProxiedSession((org.jsecurity.session.Session)var32);
    org.jsecurity.session.ProxiedSession var49 = new org.jsecurity.session.ProxiedSession((org.jsecurity.session.Session)var32);
    org.jsecurity.session.ProxiedSession var50 = new org.jsecurity.session.ProxiedSession((org.jsecurity.session.Session)var49);
    org.jsecurity.realm.activedirectory.ActiveDirectoryRealm var52 = new org.jsecurity.realm.activedirectory.ActiveDirectoryRealm();
    org.jsecurity.authc.credential.Sha256CredentialsMatcher var53 = new org.jsecurity.authc.credential.Sha256CredentialsMatcher();
    var52.setCredentialsMatcher((org.jsecurity.authc.credential.CredentialsMatcher)var53);
    java.lang.String var55 = var52.getAuthorizationCacheName();
    var52.setUrl("hi!");
    org.jsecurity.realm.ldap.DefaultLdapContextFactory var58 = new org.jsecurity.realm.ldap.DefaultLdapContextFactory();
    var52.setLdapContextFactory((org.jsecurity.realm.ldap.LdapContextFactory)var58);
    var49.setAttribute((java.lang.Object)"57f108f5-de1f-46bc-a431-6c2563f95e22", (java.lang.Object)var52);
    java.util.Date var61 = var49.getStartTimestamp();
    java.util.Date var62 = var49.getLastAccessTime();
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var1);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var2);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var5);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var8);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var9);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var10);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var18);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var19);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var20);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var29);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var33 + "' != '" + "8c362315-aef3-4d6d-b5b1-0d3fe425c611"+ "'", var33.equals("8c362315-aef3-4d6d-b5b1-0d3fe425c611"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var41);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var44);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var55);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var61);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var62);

  }

  public void test60() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest6.test60");


    org.jsecurity.io.ResourceException var3 = new org.jsecurity.io.ResourceException("hi!");
    org.jsecurity.codec.CodecException var4 = new org.jsecurity.codec.CodecException((java.lang.Throwable)var3);
    org.jsecurity.JSecurityException var5 = new org.jsecurity.JSecurityException("a2b823b1e72eae2b727289df8a00a89df8a0bab6ad8a89c4c5c7a9b62a270000", (java.lang.Throwable)var3);
    org.jsecurity.session.UnknownSessionException var6 = new org.jsecurity.session.UnknownSessionException((java.lang.Throwable)var5);
    org.jsecurity.authc.IncorrectCredentialsException var7 = new org.jsecurity.authc.IncorrectCredentialsException((java.lang.Throwable)var5);
    org.jsecurity.authz.AuthorizationException var8 = new org.jsecurity.authz.AuthorizationException("\u0000\u0000\u0000", (java.lang.Throwable)var5);
    org.jsecurity.authc.AccountException var9 = new org.jsecurity.authc.AccountException((java.lang.Throwable)var8);
    org.jsecurity.subject.SimplePrincipalCollection var11 = new org.jsecurity.subject.SimplePrincipalCollection((java.lang.Object)var9, "org.jsecurity.authz.UnauthorizedException: org.jsecurity.session.ExpiredSessionException: ");
    java.util.Set var12 = var11.asSet();
    org.jsecurity.session.ExpiredSessionException var13 = new org.jsecurity.session.ExpiredSessionException((java.io.Serializable)var11);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var12);

  }

  public void test61() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest6.test61");


    java.lang.String[] var6 = org.jsecurity.util.StringUtils.split("orgjsecurityauthcCredentialsException783ccd3148a842dd890fdf885a7baafAA==", ' ', 'a', ' ', true, false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var6);

  }

  public void test62() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest6.test62");


    org.jsecurity.session.mgt.eis.MemorySessionDAO var0 = new org.jsecurity.session.mgt.eis.MemorySessionDAO();
    org.jsecurity.cache.Cache var1 = var0.getActiveSessionsCache();
    org.jsecurity.cache.CacheManager var2 = var0.getCacheManager();
    org.jsecurity.cache.HashtableCacheManager var3 = new org.jsecurity.cache.HashtableCacheManager();
    org.jsecurity.cache.Cache var5 = var3.getCache("\u0000\u0000");
    var0.setActiveSessionsCache(var5);
    java.io.InputStream var8 = org.jsecurity.util.ClassUtils.getResourceAsStream("");
    java.lang.Object[] var9 = new java.lang.Object[] { var8};
    java.util.List var10 = org.jsecurity.util.CollectionUtils.asList(var9);
    org.jsecurity.authc.pam.ModularRealmAuthenticator var11 = new org.jsecurity.authc.pam.ModularRealmAuthenticator(var10);
    org.jsecurity.authc.pam.AllSuccessfulModularAuthenticationStrategy var12 = new org.jsecurity.authc.pam.AllSuccessfulModularAuthenticationStrategy();
    var11.setModularAuthenticationStrategy((org.jsecurity.authc.pam.ModularAuthenticationStrategy)var12);
    org.jsecurity.authz.SimpleAuthorizationInfo var14 = new org.jsecurity.authz.SimpleAuthorizationInfo();
    var14.addStringPermission("hi!");
    java.io.InputStream var18 = org.jsecurity.util.ClassUtils.getResourceAsStream("");
    java.lang.Object[] var19 = new java.lang.Object[] { var18};
    java.util.List var20 = org.jsecurity.util.CollectionUtils.asList(var19);
    var14.addRoles((java.util.Collection)var20);
    var11.setAuthenticationListeners((java.util.Collection)var20);
    org.jsecurity.realm.activedirectory.ActiveDirectoryRealm var23 = new org.jsecurity.realm.activedirectory.ActiveDirectoryRealm();
    var23.setPrincipalSuffix("");
    var11.setRealm((org.jsecurity.realm.Realm)var23);
    org.jsecurity.cache.HashtableCacheManager var27 = new org.jsecurity.cache.HashtableCacheManager();
    org.jsecurity.cache.Cache var29 = var27.getCache("\u0000\u0000");
    var23.setAuthorizationCache(var29);
    var0.setActiveSessionsCache(var29);
    org.jsecurity.session.mgt.SimpleSession var32 = new org.jsecurity.session.mgt.SimpleSession();
    java.io.Serializable var33 = var0.create((org.jsecurity.session.Session)var32);
    java.lang.String var34 = var0.getActiveSessionsCacheName();
    org.jsecurity.cache.ehcache.EhCacheManager var35 = new org.jsecurity.cache.ehcache.EhCacheManager();
    net.sf.ehcache.CacheManager var36 = var35.getCacheManager();
    var35.setCacheManagerConfigFile("org.jsecurity.authz.UnauthorizedException: org.jsecurity.session.ExpiredSessionException: ");
    java.lang.String var39 = var35.getCacheManagerConfigFile();
    var0.setCacheManager((org.jsecurity.cache.CacheManager)var35);
    var0.setActiveSessionsCacheName("org.jsecurity.realm.text.TextConfigurationRealm_389");
    org.jsecurity.session.mgt.DelegatingSession var43 = new org.jsecurity.session.mgt.DelegatingSession();
    org.jsecurity.session.mgt.SessionManager var44 = var43.getSessionManager();
    java.io.Serializable var45 = var43.getId();
    org.jsecurity.session.mgt.SessionManager var46 = var43.getSessionManager();
    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      java.io.Serializable var47 = var0.create((org.jsecurity.session.Session)var43);
      fail("Expected exception of type java.lang.ClassCastException");
    } catch (java.lang.ClassCastException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var1);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var2);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var5);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var8);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var9);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var10);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var18);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var19);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var20);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var29);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var33 + "' != '" + "973c4cb3-b9de-457c-abca-e755d0beda88"+ "'", var33.equals("973c4cb3-b9de-457c-abca-e755d0beda88"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var34 + "' != '" + "jsecurity-activeSessionCache"+ "'", var34.equals("jsecurity-activeSessionCache"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var36);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var39 + "' != '" + "org.jsecurity.authz.UnauthorizedException: org.jsecurity.session.ExpiredSessionException: "+ "'", var39.equals("org.jsecurity.authz.UnauthorizedException: org.jsecurity.session.ExpiredSessionException: "));
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var44);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var45);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var46);

  }

  public void test63() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest6.test63");


    org.jsecurity.realm.text.TextConfigurationRealm var0 = new org.jsecurity.realm.text.TextConfigurationRealm();
    org.jsecurity.realm.text.TextConfigurationRealm var1 = new org.jsecurity.realm.text.TextConfigurationRealm();
    java.io.InputStream var3 = org.jsecurity.util.ClassUtils.getResourceAsStream("");
    java.lang.Object[] var4 = new java.lang.Object[] { var3};
    java.util.List var5 = org.jsecurity.util.CollectionUtils.asList(var4);
    org.jsecurity.authc.pam.ModularRealmAuthenticator var6 = new org.jsecurity.authc.pam.ModularRealmAuthenticator(var5);
    org.jsecurity.subject.SimplePrincipalCollection var8 = new org.jsecurity.subject.SimplePrincipalCollection((java.util.Collection)var5, "org.jsecurity.authz.UnauthorizedException: org.jsecurity.session.ExpiredSessionException: ");
    org.jsecurity.session.UnknownSessionException var13 = new org.jsecurity.session.UnknownSessionException("dd\uFFFD", (java.io.Serializable)100.0f);
    org.jsecurity.session.SessionException var15 = new org.jsecurity.session.SessionException("dd\uFFFD", (java.lang.Throwable)var13, (java.io.Serializable)0);
    org.jsecurity.session.SessionException var16 = new org.jsecurity.session.SessionException("dd\uFFFD", (java.lang.Throwable)var13);
    var8.add((java.lang.Object)var16, "org.jsecurity.config.ConfigurationException: dd\uFFFD");
    var1.onLogout((org.jsecurity.subject.PrincipalCollection)var8);
    java.util.Collection var21 = var8.fromRealm("\u0000\u0000\u0000");
    var0.onLogout((org.jsecurity.subject.PrincipalCollection)var8);
    java.util.Set var23 = var8.asSet();
    org.jsecurity.authz.ModularRealmAuthorizer var24 = new org.jsecurity.authz.ModularRealmAuthorizer((java.util.Collection)var23);
    org.jsecurity.session.UnknownSessionException var30 = new org.jsecurity.session.UnknownSessionException("dd\uFFFD", (java.io.Serializable)100.0f);
    org.jsecurity.subject.SubjectException var31 = new org.jsecurity.subject.SubjectException("dd\uFFFD", (java.lang.Throwable)var30);
    org.jsecurity.authc.AccountException var32 = new org.jsecurity.authc.AccountException("hi!", (java.lang.Throwable)var31);
    org.jsecurity.session.StoppedSessionException var33 = new org.jsecurity.session.StoppedSessionException((java.lang.Throwable)var32);
    org.jsecurity.session.SessionException var34 = new org.jsecurity.session.SessionException("hi!", (java.lang.Throwable)var32);
    org.jsecurity.authz.SimpleAuthorizingAccount var36 = new org.jsecurity.authz.SimpleAuthorizingAccount((java.util.Collection)var23, (java.lang.Object)"hi!", "e3583cd4-368b-434b-a989-aa59c30eca02");
    java.lang.String var37 = var36.toString();
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var3);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var4);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var5);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var21);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var23);

  }

  public void test64() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest6.test64");


    org.jsecurity.realm.activedirectory.ActiveDirectoryRealm var0 = new org.jsecurity.realm.activedirectory.ActiveDirectoryRealm();
    org.jsecurity.realm.text.TextConfigurationRealm var1 = new org.jsecurity.realm.text.TextConfigurationRealm();
    java.io.InputStream var3 = org.jsecurity.util.ClassUtils.getResourceAsStream("");
    java.lang.Object[] var4 = new java.lang.Object[] { var3};
    java.util.List var5 = org.jsecurity.util.CollectionUtils.asList(var4);
    org.jsecurity.authc.pam.ModularRealmAuthenticator var6 = new org.jsecurity.authc.pam.ModularRealmAuthenticator(var5);
    org.jsecurity.subject.SimplePrincipalCollection var8 = new org.jsecurity.subject.SimplePrincipalCollection((java.util.Collection)var5, "org.jsecurity.authz.UnauthorizedException: org.jsecurity.session.ExpiredSessionException: ");
    org.jsecurity.session.UnknownSessionException var13 = new org.jsecurity.session.UnknownSessionException("dd\uFFFD", (java.io.Serializable)100.0f);
    org.jsecurity.session.SessionException var15 = new org.jsecurity.session.SessionException("dd\uFFFD", (java.lang.Throwable)var13, (java.io.Serializable)0);
    org.jsecurity.session.SessionException var16 = new org.jsecurity.session.SessionException("dd\uFFFD", (java.lang.Throwable)var13);
    var8.add((java.lang.Object)var16, "org.jsecurity.config.ConfigurationException: dd\uFFFD");
    var1.onLogout((org.jsecurity.subject.PrincipalCollection)var8);
    org.jsecurity.authc.ExpiredCredentialsException var21 = new org.jsecurity.authc.ExpiredCredentialsException();
    org.jsecurity.session.ExpiredSessionException var22 = new org.jsecurity.session.ExpiredSessionException("", (java.lang.Throwable)var21);
    java.lang.Throwable[] var23 = var22.getSuppressed();
    org.jsecurity.io.ResourceException var24 = new org.jsecurity.io.ResourceException((java.lang.Throwable)var22);
    org.jsecurity.authc.SimpleAuthenticationInfo var25 = new org.jsecurity.authc.SimpleAuthenticationInfo((org.jsecurity.subject.PrincipalCollection)var8, (java.lang.Object)var22);
    org.jsecurity.codec.CodecException var28 = new org.jsecurity.codec.CodecException("dd\uFFFD");
    org.jsecurity.authc.ConcurrentAccessException var29 = new org.jsecurity.authc.ConcurrentAccessException("org.jsecurity.authz.UnauthorizedException: org.jsecurity.session.ExpiredSessionException: ", (java.lang.Throwable)var28);
    org.jsecurity.subject.SimplePrincipalCollection var31 = new org.jsecurity.subject.SimplePrincipalCollection((java.lang.Object)var28, "");
    java.io.InputStream var33 = org.jsecurity.util.ClassUtils.getResourceAsStream("");
    java.lang.Object[] var34 = new java.lang.Object[] { var33};
    java.util.List var35 = org.jsecurity.util.CollectionUtils.asList(var34);
    org.jsecurity.authc.pam.ModularRealmAuthenticator var36 = new org.jsecurity.authc.pam.ModularRealmAuthenticator(var35);
    var31.addAll((java.util.Collection)var35, "\u0000\u0000");
    org.jsecurity.authz.UnauthorizedException var40 = new org.jsecurity.authz.UnauthorizedException();
    org.jsecurity.session.SessionException var42 = new org.jsecurity.session.SessionException("", (java.lang.Throwable)var40, (java.io.Serializable)"org.jsecurity.config.ConfigurationException: dd\uFFFD");
    org.jsecurity.crypto.hash.Sha1Hash var43 = new org.jsecurity.crypto.hash.Sha1Hash((java.lang.Object)"");
    org.jsecurity.session.UnknownSessionException var48 = new org.jsecurity.session.UnknownSessionException("dd\uFFFD", (java.io.Serializable)100.0f);
    org.jsecurity.subject.SubjectException var49 = new org.jsecurity.subject.SubjectException("dd\uFFFD", (java.lang.Throwable)var48);
    org.jsecurity.io.SerializationException var50 = new org.jsecurity.io.SerializationException("", (java.lang.Throwable)var49);
    java.lang.Throwable[] var51 = var49.getSuppressed();
    java.util.Set var52 = org.jsecurity.util.CollectionUtils.asSet((java.lang.Object[])var51);
    org.jsecurity.authz.SimpleAuthorizationInfo var54 = new org.jsecurity.authz.SimpleAuthorizationInfo();
    org.jsecurity.session.UnknownSessionException var59 = new org.jsecurity.session.UnknownSessionException("dd\uFFFD", (java.io.Serializable)100.0f);
    org.jsecurity.subject.SubjectException var60 = new org.jsecurity.subject.SubjectException("dd\uFFFD", (java.lang.Throwable)var59);
    org.jsecurity.io.SerializationException var61 = new org.jsecurity.io.SerializationException("", (java.lang.Throwable)var60);
    java.lang.Throwable[] var62 = var60.getSuppressed();
    java.util.Set var63 = org.jsecurity.util.CollectionUtils.asSet((java.lang.Object[])var62);
    var54.setStringPermissions(var63);
    java.util.Set var65 = var54.getRoles();
    org.jsecurity.authz.SimpleAuthorizationInfo var66 = new org.jsecurity.authz.SimpleAuthorizationInfo();
    var66.addRole("a2b823b1e72eae2b727289df8a00a89df8a0bab6ad8a89c4c5c7a9b62a270000");
    org.jsecurity.session.UnknownSessionException var73 = new org.jsecurity.session.UnknownSessionException("dd\uFFFD", (java.io.Serializable)100.0f);
    org.jsecurity.subject.SubjectException var74 = new org.jsecurity.subject.SubjectException("dd\uFFFD", (java.lang.Throwable)var73);
    org.jsecurity.io.SerializationException var75 = new org.jsecurity.io.SerializationException("", (java.lang.Throwable)var74);
    java.lang.Throwable[] var76 = var74.getSuppressed();
    java.util.Set var77 = org.jsecurity.util.CollectionUtils.asSet((java.lang.Object[])var76);
    var66.addRoles((java.util.Collection)var77);
    var54.setRoles(var77);
    org.jsecurity.authz.SimpleRole var80 = new org.jsecurity.authz.SimpleRole("org.jsecurity.authz.UnauthorizedException: org.jsecurity.session.ExpiredSessionException: ", var77);
    org.jsecurity.authc.SimpleAccount var81 = new org.jsecurity.authc.SimpleAccount((org.jsecurity.subject.PrincipalCollection)var31, (java.lang.Object)"", var52, var77);
    var25.setPrincipals((org.jsecurity.subject.PrincipalCollection)var31);
    var0.onLogout((org.jsecurity.subject.PrincipalCollection)var31);
    org.jsecurity.codec.CodecException var86 = new org.jsecurity.codec.CodecException("dd\uFFFD");
    org.jsecurity.authc.ConcurrentAccessException var87 = new org.jsecurity.authc.ConcurrentAccessException("org.jsecurity.authz.UnauthorizedException: org.jsecurity.session.ExpiredSessionException: ", (java.lang.Throwable)var86);
    org.jsecurity.subject.SimplePrincipalCollection var89 = new org.jsecurity.subject.SimplePrincipalCollection((java.lang.Object)var86, "");
    org.jsecurity.authz.SimpleAuthorizingAccount var90 = new org.jsecurity.authz.SimpleAuthorizingAccount((org.jsecurity.subject.PrincipalCollection)var31, (java.lang.Object)"");
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var3);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var4);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var5);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var23);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var33);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var34);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var35);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var51);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var52);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var62);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var63);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var65);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var76);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var77);

  }

  public void test65() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest6.test65");


    org.jsecurity.session.mgt.DefaultSessionManager var0 = new org.jsecurity.session.mgt.DefaultSessionManager();
    var0.setGlobalSessionTimeout(1);
    org.jsecurity.session.mgt.quartz.QuartzSessionValidationScheduler var3 = new org.jsecurity.session.mgt.quartz.QuartzSessionValidationScheduler((org.jsecurity.session.mgt.ValidatingSessionManager)var0);
    org.jsecurity.config.IniConfiguration var4 = new org.jsecurity.config.IniConfiguration();
    java.lang.String var5 = var4.getConfig();
    var4.setConfig("\uFFFD\uFFFD#\uFFFD\uFFFD.\uFFFD+rr\uFFFD\u07CA\u0000\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\u01E9\uFFFD*'\u0000\u0000");
    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      var0.stop((java.io.Serializable)"\uFFFD\uFFFD#\uFFFD\uFFFD.\uFFFD+rr\uFFFD\u07CA\u0000\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\u01E9\uFFFD*'\u0000\u0000");
      fail("Expected exception of type org.jsecurity.session.UnknownSessionException");
    } catch (org.jsecurity.session.UnknownSessionException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var5);

  }

  public void test66() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest6.test66");


    java.io.InputStream var1 = org.jsecurity.util.ClassUtils.getResourceAsStream("");
    java.lang.Object[] var2 = new java.lang.Object[] { var1};
    java.util.List var3 = org.jsecurity.util.CollectionUtils.asList(var2);
    org.jsecurity.authc.pam.ModularRealmAuthenticator var4 = new org.jsecurity.authc.pam.ModularRealmAuthenticator(var3);
    org.jsecurity.authc.pam.AllSuccessfulModularAuthenticationStrategy var5 = new org.jsecurity.authc.pam.AllSuccessfulModularAuthenticationStrategy();
    var4.setModularAuthenticationStrategy((org.jsecurity.authc.pam.ModularAuthenticationStrategy)var5);
    org.jsecurity.authz.SimpleAuthorizationInfo var7 = new org.jsecurity.authz.SimpleAuthorizationInfo();
    var7.addStringPermission("hi!");
    java.io.InputStream var11 = org.jsecurity.util.ClassUtils.getResourceAsStream("");
    java.lang.Object[] var12 = new java.lang.Object[] { var11};
    java.util.List var13 = org.jsecurity.util.CollectionUtils.asList(var12);
    var7.addRoles((java.util.Collection)var13);
    var4.setAuthenticationListeners((java.util.Collection)var13);
    org.jsecurity.realm.activedirectory.ActiveDirectoryRealm var16 = new org.jsecurity.realm.activedirectory.ActiveDirectoryRealm();
    var16.setPrincipalSuffix("");
    var4.setRealm((org.jsecurity.realm.Realm)var16);
    var16.init();
    org.jsecurity.cache.ehcache.EhCacheManager var21 = new org.jsecurity.cache.ehcache.EhCacheManager();
    var21.init();
    var16.setCacheManager((org.jsecurity.cache.CacheManager)var21);
    var16.setUrl("376536df-2509-40ac-85a1-02b4cd229f7b");
    org.jsecurity.config.ReflectionBuilder var26 = new org.jsecurity.config.ReflectionBuilder();
    org.jsecurity.io.IniResource var27 = new org.jsecurity.io.IniResource();
    var27.setCharsetName("org.jsecurity.authz.UnauthorizedException: org.jsecurity.session.ExpiredSessionException: ");
    java.util.Map var30 = var27.getSections();
    java.util.Map var31 = var26.buildObjects(var30);
    org.jsecurity.realm.activedirectory.ActiveDirectoryRealm var32 = new org.jsecurity.realm.activedirectory.ActiveDirectoryRealm();
    org.jsecurity.authc.credential.Sha256CredentialsMatcher var33 = new org.jsecurity.authc.credential.Sha256CredentialsMatcher();
    var32.setCredentialsMatcher((org.jsecurity.authc.credential.CredentialsMatcher)var33);
    java.lang.String var35 = var32.getAuthorizationCacheName();
    var32.setUrl("hi!");
    org.jsecurity.io.IniResource var38 = new org.jsecurity.io.IniResource();
    java.util.Map var39 = var38.getSections();
    java.util.Map var40 = var38.getSections();
    var32.setGroupRolesMap(var40);
    org.jsecurity.config.ReflectionBuilder var42 = new org.jsecurity.config.ReflectionBuilder(var40);
    org.jsecurity.config.ReflectionBuilder var43 = new org.jsecurity.config.ReflectionBuilder();
    org.jsecurity.io.IniResource var44 = new org.jsecurity.io.IniResource();
    var44.setCharsetName("org.jsecurity.authz.UnauthorizedException: org.jsecurity.session.ExpiredSessionException: ");
    java.util.Map var47 = var44.getSections();
    java.util.Map var48 = var43.buildObjects(var47);
    var42.setObjects(var48);
    var26.setObjects(var48);
    org.jsecurity.config.ReflectionBuilder var51 = new org.jsecurity.config.ReflectionBuilder();
    org.jsecurity.config.ReflectionBuilder var52 = new org.jsecurity.config.ReflectionBuilder();
    org.jsecurity.io.IniResource var53 = new org.jsecurity.io.IniResource();
    var53.setCharsetName("org.jsecurity.authz.UnauthorizedException: org.jsecurity.session.ExpiredSessionException: ");
    java.util.Map var56 = var53.getSections();
    java.util.Map var57 = var52.buildObjects(var56);
    org.jsecurity.config.ReflectionBuilder var58 = new org.jsecurity.config.ReflectionBuilder();
    org.jsecurity.io.IniResource var59 = new org.jsecurity.io.IniResource();
    var59.setCharsetName("org.jsecurity.authz.UnauthorizedException: org.jsecurity.session.ExpiredSessionException: ");
    java.util.Map var62 = var59.getSections();
    java.util.Map var63 = var58.buildObjects(var62);
    java.util.Map var64 = var52.buildObjects(var63);
    java.util.Map var65 = var51.buildObjects(var64);
    var26.setObjects(var64);
    var16.setGroupRolesMap(var64);
    org.jsecurity.realm.activedirectory.ActiveDirectoryRealm var68 = new org.jsecurity.realm.activedirectory.ActiveDirectoryRealm();
    org.jsecurity.authc.credential.Sha256CredentialsMatcher var69 = new org.jsecurity.authc.credential.Sha256CredentialsMatcher();
    var68.setCredentialsMatcher((org.jsecurity.authc.credential.CredentialsMatcher)var69);
    java.lang.String var71 = var68.getAuthorizationCacheName();
    var68.setUrl("hi!");
    org.jsecurity.io.IniResource var74 = new org.jsecurity.io.IniResource();
    java.util.Map var75 = var74.getSections();
    java.util.Map var76 = var74.getSections();
    var68.setGroupRolesMap(var76);
    var16.setGroupRolesMap(var76);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var1);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var2);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var3);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var11);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var12);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var13);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var30);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var31);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var35);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var39);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var40);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var47);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var48);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var56);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var57);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var62);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var63);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var64);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var65);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var71);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var75);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var76);

  }

  public void test67() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest6.test67");


    org.jsecurity.realm.jndi.JndiRealmFactory var0 = new org.jsecurity.realm.jndi.JndiRealmFactory();
    java.io.InputStream var2 = org.jsecurity.util.ClassUtils.getResourceAsStream("");
    java.lang.Object[] var3 = new java.lang.Object[] { var2};
    java.util.List var4 = org.jsecurity.util.CollectionUtils.asList(var3);
    var0.setJndiNames((java.util.Collection)var4);
    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      org.jsecurity.mgt.DefaultSecurityManager var6 = new org.jsecurity.mgt.DefaultSecurityManager((java.util.Collection)var4);
      fail("Expected exception of type java.lang.ClassCastException");
    } catch (java.lang.ClassCastException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var2);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var3);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var4);

  }

  public void test68() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest6.test68");


    java.lang.String[] var2 = org.jsecurity.util.StringUtils.tokenizeToStringArray("9d388eff-106e-47d9-8180-843fdfd13dce", "org.jsecurity.realm.text.TextConfigurationRealm_3659");
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var2);

  }

  public void test69() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest6.test69");


    org.jsecurity.crypto.hash.Md2Hash var1 = org.jsecurity.crypto.hash.Md2Hash.fromBase64String("a2b823b1e72eae2b727289df8a00a89df8a0bab6ad8a89c4c5c7a9b62a270000");
    org.jsecurity.authc.credential.Md2CredentialsMatcher var2 = new org.jsecurity.authc.credential.Md2CredentialsMatcher();
    org.jsecurity.authz.SimpleAuthorizingAccount var4 = new org.jsecurity.authz.SimpleAuthorizingAccount((java.lang.Object)"a2b823b1e72eae2b727289df8a00a89df8a0bab6ad8a89c4c5c7a9b62a270000", (java.lang.Object)var2, "");
    org.jsecurity.authz.SimpleAuthorizationInfo var5 = new org.jsecurity.authz.SimpleAuthorizationInfo();
    java.util.Set var6 = var5.getStringPermissions();
    org.jsecurity.authz.SimpleAuthorizationInfo var8 = new org.jsecurity.authz.SimpleAuthorizationInfo();
    org.jsecurity.session.UnknownSessionException var13 = new org.jsecurity.session.UnknownSessionException("dd\uFFFD", (java.io.Serializable)100.0f);
    org.jsecurity.subject.SubjectException var14 = new org.jsecurity.subject.SubjectException("dd\uFFFD", (java.lang.Throwable)var13);
    org.jsecurity.io.SerializationException var15 = new org.jsecurity.io.SerializationException("", (java.lang.Throwable)var14);
    java.lang.Throwable[] var16 = var14.getSuppressed();
    java.util.Set var17 = org.jsecurity.util.CollectionUtils.asSet((java.lang.Object[])var16);
    var8.setStringPermissions(var17);
    java.util.Set var19 = var8.getRoles();
    org.jsecurity.authz.SimpleAuthorizationInfo var20 = new org.jsecurity.authz.SimpleAuthorizationInfo();
    var20.addRole("a2b823b1e72eae2b727289df8a00a89df8a0bab6ad8a89c4c5c7a9b62a270000");
    org.jsecurity.session.UnknownSessionException var27 = new org.jsecurity.session.UnknownSessionException("dd\uFFFD", (java.io.Serializable)100.0f);
    org.jsecurity.subject.SubjectException var28 = new org.jsecurity.subject.SubjectException("dd\uFFFD", (java.lang.Throwable)var27);
    org.jsecurity.io.SerializationException var29 = new org.jsecurity.io.SerializationException("", (java.lang.Throwable)var28);
    java.lang.Throwable[] var30 = var28.getSuppressed();
    java.util.Set var31 = org.jsecurity.util.CollectionUtils.asSet((java.lang.Object[])var30);
    var20.addRoles((java.util.Collection)var31);
    var8.setRoles(var31);
    org.jsecurity.authz.SimpleRole var34 = new org.jsecurity.authz.SimpleRole("org.jsecurity.authz.UnauthorizedException: org.jsecurity.session.ExpiredSessionException: ", var31);
    var5.addStringPermissions((java.util.Collection)var31);
    boolean var36 = var4.isPermittedAll((java.util.Collection)var31);
    boolean var37 = var4.isCredentialsExpired();
    java.lang.String[] var42 = org.jsecurity.util.StringUtils.tokenizeToStringArray("783ccd31-48a8-42dd-890f-df885a7baaff", "e2100c27-e41d-4c80-964c-90268ef4a856", true, true);
    java.util.Set var43 = org.jsecurity.util.CollectionUtils.asSet((java.lang.Object[])var42);
    var4.addStringPermissions((java.util.Collection)var43);
    var4.setCredentialsExpired(false);
    org.jsecurity.authz.permission.WildcardPermission var49 = new org.jsecurity.authz.permission.WildcardPermission("1a1fe717-b2f7-4a28-9cfa-6f3955b8b913", false);
    boolean var50 = var4.isPermitted((org.jsecurity.authz.Permission)var49);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var1);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var6);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var16);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var17);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var19);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var30);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var31);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var36 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var37 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var42);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var43);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var50 == false);

  }

  public void test70() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest6.test70");


    org.jsecurity.authz.SimpleAuthorizationInfo var0 = new org.jsecurity.authz.SimpleAuthorizationInfo();
    java.util.Set var1 = var0.getStringPermissions();
    java.util.Set var2 = var0.getRoles();
    var0.addRole("3d40fa30-fa08-4705-a0dc-1dd5464d0a01");
    org.jsecurity.crypto.hash.Md2Hash var6 = org.jsecurity.crypto.hash.Md2Hash.fromBase64String("a2b823b1e72eae2b727289df8a00a89df8a0bab6ad8a89c4c5c7a9b62a270000");
    org.jsecurity.authc.credential.Md2CredentialsMatcher var7 = new org.jsecurity.authc.credential.Md2CredentialsMatcher();
    org.jsecurity.authz.SimpleAuthorizingAccount var9 = new org.jsecurity.authz.SimpleAuthorizingAccount((java.lang.Object)"a2b823b1e72eae2b727289df8a00a89df8a0bab6ad8a89c4c5c7a9b62a270000", (java.lang.Object)var7, "");
    var9.addStringPermission("hi!");
    org.jsecurity.authz.SimpleAuthorizationInfo var12 = new org.jsecurity.authz.SimpleAuthorizationInfo();
    var12.addRole("a2b823b1e72eae2b727289df8a00a89df8a0bab6ad8a89c4c5c7a9b62a270000");
    org.jsecurity.session.UnknownSessionException var19 = new org.jsecurity.session.UnknownSessionException("dd\uFFFD", (java.io.Serializable)100.0f);
    org.jsecurity.subject.SubjectException var20 = new org.jsecurity.subject.SubjectException("dd\uFFFD", (java.lang.Throwable)var19);
    org.jsecurity.io.SerializationException var21 = new org.jsecurity.io.SerializationException("", (java.lang.Throwable)var20);
    java.lang.Throwable[] var22 = var20.getSuppressed();
    java.util.Set var23 = org.jsecurity.util.CollectionUtils.asSet((java.lang.Object[])var22);
    var12.addRoles((java.util.Collection)var23);
    boolean var25 = var9.isPermittedAll((java.util.Collection)var23);
    var0.setObjectPermissions(var23);
    org.jsecurity.authc.LockedAccountException var28 = new org.jsecurity.authc.LockedAccountException("\uFFFD\uFFFD#\uFFFD\uFFFD.\uFFFD+r\uFFFD\u6959(\uFFFD\uFFFDW\uFFFDq\uFFFD.\uFFFD\uFFFD^jY\uFFFDj\uFFFDa\uFFFD\uFFFD\uFFFDj\u0628");
    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      org.jsecurity.crypto.hash.Sha1Hash var29 = new org.jsecurity.crypto.hash.Sha1Hash((java.lang.Object)var0, (java.lang.Object)var28);
      fail("Expected exception of type org.jsecurity.codec.CodecException");
    } catch (org.jsecurity.codec.CodecException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var1);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var2);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var6);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var22);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var23);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var25 == true);

  }

  public void test71() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest6.test71");


    org.jsecurity.realm.activedirectory.ActiveDirectoryRealm var0 = new org.jsecurity.realm.activedirectory.ActiveDirectoryRealm();
    org.jsecurity.authc.credential.Sha256CredentialsMatcher var1 = new org.jsecurity.authc.credential.Sha256CredentialsMatcher();
    var0.setCredentialsMatcher((org.jsecurity.authc.credential.CredentialsMatcher)var1);
    var0.initAuthorizationCache();
    var0.setSystemUsername("0a4dfd98-4ec1-476c-a8b7-0ade4d007ab7");
    org.jsecurity.realm.activedirectory.ActiveDirectoryRealm var6 = new org.jsecurity.realm.activedirectory.ActiveDirectoryRealm();
    org.jsecurity.authc.credential.Sha256CredentialsMatcher var7 = new org.jsecurity.authc.credential.Sha256CredentialsMatcher();
    var6.setCredentialsMatcher((org.jsecurity.authc.credential.CredentialsMatcher)var7);
    java.lang.String var9 = var6.getAuthorizationCacheName();
    var6.setPrincipalSuffix("org.jsecurity.config.ConfigurationException: dd\uFFFD");
    org.jsecurity.realm.text.TextConfigurationRealm var12 = new org.jsecurity.realm.text.TextConfigurationRealm();
    java.io.InputStream var14 = org.jsecurity.util.ClassUtils.getResourceAsStream("");
    java.lang.Object[] var15 = new java.lang.Object[] { var14};
    java.util.List var16 = org.jsecurity.util.CollectionUtils.asList(var15);
    org.jsecurity.authc.pam.ModularRealmAuthenticator var17 = new org.jsecurity.authc.pam.ModularRealmAuthenticator(var16);
    org.jsecurity.subject.SimplePrincipalCollection var19 = new org.jsecurity.subject.SimplePrincipalCollection((java.util.Collection)var16, "org.jsecurity.authz.UnauthorizedException: org.jsecurity.session.ExpiredSessionException: ");
    org.jsecurity.session.UnknownSessionException var24 = new org.jsecurity.session.UnknownSessionException("dd\uFFFD", (java.io.Serializable)100.0f);
    org.jsecurity.session.SessionException var26 = new org.jsecurity.session.SessionException("dd\uFFFD", (java.lang.Throwable)var24, (java.io.Serializable)0);
    org.jsecurity.session.SessionException var27 = new org.jsecurity.session.SessionException("dd\uFFFD", (java.lang.Throwable)var24);
    var19.add((java.lang.Object)var27, "org.jsecurity.config.ConfigurationException: dd\uFFFD");
    var12.onLogout((org.jsecurity.subject.PrincipalCollection)var19);
    var6.onLogout((org.jsecurity.subject.PrincipalCollection)var19);
    org.jsecurity.realm.SimpleAccountRealm var33 = new org.jsecurity.realm.SimpleAccountRealm("hi!");
    java.lang.Class var34 = var33.getAuthenticationTokenClass();
    java.util.Collection var35 = org.jsecurity.util.CollectionUtils.emptyCollection(var34);
    java.util.Collection var36 = var19.byType(var34);
    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      boolean var38 = var0.isPermitted((org.jsecurity.subject.PrincipalCollection)var19, "647c23b9-e927-453d-b32e-9778913244f6");
      fail("Expected exception of type java.util.NoSuchElementException");
    } catch (java.util.NoSuchElementException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var9);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var14);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var15);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var16);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var34);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var35);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var36);

  }

  public void test72() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest6.test72");


    org.jsecurity.JSecurityException var1 = new org.jsecurity.JSecurityException();
    org.jsecurity.session.UnknownSessionException var6 = new org.jsecurity.session.UnknownSessionException("dd\uFFFD", (java.io.Serializable)100.0f);
    org.jsecurity.subject.SubjectException var7 = new org.jsecurity.subject.SubjectException("dd\uFFFD", (java.lang.Throwable)var6);
    org.jsecurity.authc.AccountException var8 = new org.jsecurity.authc.AccountException("hi!", (java.lang.Throwable)var7);
    org.jsecurity.session.StoppedSessionException var9 = new org.jsecurity.session.StoppedSessionException((java.lang.Throwable)var8);
    org.jsecurity.session.SessionException var10 = new org.jsecurity.session.SessionException("a2b823b1e72eae2b727289df8a00a89df8a0bab6ad8a89c4c5c7a9b62a270000", (java.lang.Throwable)var1, (java.io.Serializable)var8);
    org.jsecurity.authc.UnknownAccountException var11 = new org.jsecurity.authc.UnknownAccountException((java.lang.Throwable)var1);

  }

  public void test73() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest6.test73");


    org.jsecurity.realm.jndi.JndiRealmFactory var0 = new org.jsecurity.realm.jndi.JndiRealmFactory();
    java.io.InputStream var2 = org.jsecurity.util.ClassUtils.getResourceAsStream("");
    java.lang.Object[] var3 = new java.lang.Object[] { var2};
    java.util.List var4 = org.jsecurity.util.CollectionUtils.asList(var3);
    var0.setJndiNames((java.util.Collection)var4);
    org.jsecurity.authz.SimpleRole var6 = new org.jsecurity.authz.SimpleRole();
    org.jsecurity.authz.SimpleAuthorizationInfo var7 = new org.jsecurity.authz.SimpleAuthorizationInfo();
    var7.addRole("a2b823b1e72eae2b727289df8a00a89df8a0bab6ad8a89c4c5c7a9b62a270000");
    org.jsecurity.session.UnknownSessionException var14 = new org.jsecurity.session.UnknownSessionException("dd\uFFFD", (java.io.Serializable)100.0f);
    org.jsecurity.subject.SubjectException var15 = new org.jsecurity.subject.SubjectException("dd\uFFFD", (java.lang.Throwable)var14);
    org.jsecurity.io.SerializationException var16 = new org.jsecurity.io.SerializationException("", (java.lang.Throwable)var15);
    java.lang.Throwable[] var17 = var15.getSuppressed();
    java.util.Set var18 = org.jsecurity.util.CollectionUtils.asSet((java.lang.Object[])var17);
    var7.addRoles((java.util.Collection)var18);
    var6.addAll((java.util.Collection)var18);
    var0.setJndiNames((java.util.Collection)var18);
    java.util.Collection var22 = var0.getJndiNames();
    var0.setResourceRef(false);
    java.util.Properties var25 = var0.getJndiEnvironment();
    java.util.Collection var26 = var0.getJndiNames();
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var2);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var3);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var4);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var17);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var18);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var22);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var25);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var26);

  }

  public void test74() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest6.test74");


    org.jsecurity.realm.activedirectory.ActiveDirectoryRealm var0 = new org.jsecurity.realm.activedirectory.ActiveDirectoryRealm();
    var0.init();
    var0.init();
    org.jsecurity.config.ReflectionBuilder var3 = new org.jsecurity.config.ReflectionBuilder();
    org.jsecurity.config.ReflectionBuilder var4 = new org.jsecurity.config.ReflectionBuilder();
    org.jsecurity.io.IniResource var5 = new org.jsecurity.io.IniResource();
    var5.setCharsetName("org.jsecurity.authz.UnauthorizedException: org.jsecurity.session.ExpiredSessionException: ");
    java.util.Map var8 = var5.getSections();
    java.util.Map var9 = var4.buildObjects(var8);
    org.jsecurity.config.ReflectionBuilder var10 = new org.jsecurity.config.ReflectionBuilder();
    org.jsecurity.io.IniResource var11 = new org.jsecurity.io.IniResource();
    var11.setCharsetName("org.jsecurity.authz.UnauthorizedException: org.jsecurity.session.ExpiredSessionException: ");
    java.util.Map var14 = var11.getSections();
    java.util.Map var15 = var10.buildObjects(var14);
    java.util.Map var16 = var4.buildObjects(var15);
    java.util.Map var17 = var3.buildObjects(var16);
    var0.setGroupRolesMap(var17);
    org.jsecurity.mgt.DefaultSecurityManager var19 = new org.jsecurity.mgt.DefaultSecurityManager((org.jsecurity.realm.Realm)var0);
    org.jsecurity.realm.activedirectory.ActiveDirectoryRealm var20 = new org.jsecurity.realm.activedirectory.ActiveDirectoryRealm();
    org.jsecurity.authc.credential.Sha256CredentialsMatcher var21 = new org.jsecurity.authc.credential.Sha256CredentialsMatcher();
    var20.setCredentialsMatcher((org.jsecurity.authc.credential.CredentialsMatcher)var21);
    java.lang.String var23 = var20.getAuthorizationCacheName();
    var20.setPrincipalSuffix("org.jsecurity.config.ConfigurationException: dd\uFFFD");
    org.jsecurity.realm.text.TextConfigurationRealm var26 = new org.jsecurity.realm.text.TextConfigurationRealm();
    java.io.InputStream var28 = org.jsecurity.util.ClassUtils.getResourceAsStream("");
    java.lang.Object[] var29 = new java.lang.Object[] { var28};
    java.util.List var30 = org.jsecurity.util.CollectionUtils.asList(var29);
    org.jsecurity.authc.pam.ModularRealmAuthenticator var31 = new org.jsecurity.authc.pam.ModularRealmAuthenticator(var30);
    org.jsecurity.subject.SimplePrincipalCollection var33 = new org.jsecurity.subject.SimplePrincipalCollection((java.util.Collection)var30, "org.jsecurity.authz.UnauthorizedException: org.jsecurity.session.ExpiredSessionException: ");
    org.jsecurity.session.UnknownSessionException var38 = new org.jsecurity.session.UnknownSessionException("dd\uFFFD", (java.io.Serializable)100.0f);
    org.jsecurity.session.SessionException var40 = new org.jsecurity.session.SessionException("dd\uFFFD", (java.lang.Throwable)var38, (java.io.Serializable)0);
    org.jsecurity.session.SessionException var41 = new org.jsecurity.session.SessionException("dd\uFFFD", (java.lang.Throwable)var38);
    var33.add((java.lang.Object)var41, "org.jsecurity.config.ConfigurationException: dd\uFFFD");
    var26.onLogout((org.jsecurity.subject.PrincipalCollection)var33);
    var20.onLogout((org.jsecurity.subject.PrincipalCollection)var33);
    java.util.Iterator var46 = var33.iterator();
    org.jsecurity.codec.CodecException var49 = new org.jsecurity.codec.CodecException("dd\uFFFD");
    org.jsecurity.authc.ConcurrentAccessException var50 = new org.jsecurity.authc.ConcurrentAccessException("org.jsecurity.authz.UnauthorizedException: org.jsecurity.session.ExpiredSessionException: ", (java.lang.Throwable)var49);
    org.jsecurity.subject.SimplePrincipalCollection var52 = new org.jsecurity.subject.SimplePrincipalCollection((java.lang.Object)var49, "");
    java.io.InputStream var54 = org.jsecurity.util.ClassUtils.getResourceAsStream("");
    java.lang.Object[] var55 = new java.lang.Object[] { var54};
    java.util.List var56 = org.jsecurity.util.CollectionUtils.asList(var55);
    org.jsecurity.authc.pam.ModularRealmAuthenticator var57 = new org.jsecurity.authc.pam.ModularRealmAuthenticator(var56);
    org.jsecurity.authc.pam.AllSuccessfulModularAuthenticationStrategy var58 = new org.jsecurity.authc.pam.AllSuccessfulModularAuthenticationStrategy();
    var57.setModularAuthenticationStrategy((org.jsecurity.authc.pam.ModularAuthenticationStrategy)var58);
    org.jsecurity.authz.SimpleAuthorizationInfo var60 = new org.jsecurity.authz.SimpleAuthorizationInfo();
    var60.addStringPermission("hi!");
    java.io.InputStream var64 = org.jsecurity.util.ClassUtils.getResourceAsStream("");
    java.lang.Object[] var65 = new java.lang.Object[] { var64};
    java.util.List var66 = org.jsecurity.util.CollectionUtils.asList(var65);
    var60.addRoles((java.util.Collection)var66);
    var57.setAuthenticationListeners((java.util.Collection)var66);
    org.jsecurity.realm.activedirectory.ActiveDirectoryRealm var69 = new org.jsecurity.realm.activedirectory.ActiveDirectoryRealm();
    var69.setPrincipalSuffix("");
    var57.setRealm((org.jsecurity.realm.Realm)var69);
    org.jsecurity.authc.pam.FirstSuccessfulAuthenticationStrategy var73 = new org.jsecurity.authc.pam.FirstSuccessfulAuthenticationStrategy();
    org.jsecurity.authz.UnauthorizedException var75 = new org.jsecurity.authz.UnauthorizedException("org.jsecurity.config.ConfigurationException: dd\uFFFD");
    java.lang.Throwable[] var76 = var75.getSuppressed();
    java.util.List var77 = org.jsecurity.util.CollectionUtils.asList((java.lang.Object[])var76);
    org.jsecurity.authc.UsernamePasswordToken var78 = new org.jsecurity.authc.UsernamePasswordToken();
    java.lang.String var79 = var78.getUsername();
    java.net.InetAddress var80 = var78.getInetAddress();
    org.jsecurity.authc.AuthenticationInfo var81 = var73.beforeAllAttempts((java.util.Collection)var77, (org.jsecurity.authc.AuthenticationToken)var78);
    var57.setModularAuthenticationStrategy((org.jsecurity.authc.pam.ModularAuthenticationStrategy)var73);
    org.jsecurity.authc.SimpleAccount var83 = new org.jsecurity.authc.SimpleAccount((org.jsecurity.subject.PrincipalCollection)var52, (java.lang.Object)var57);
    var52.clear();
    java.util.Set var85 = var52.asSet();
    java.util.List var86 = var52.asList();
    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      boolean[] var87 = var0.isPermitted((org.jsecurity.subject.PrincipalCollection)var33, var86);
      fail("Expected exception of type java.util.NoSuchElementException");
    } catch (java.util.NoSuchElementException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var8);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var9);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var14);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var15);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var16);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var17);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var23);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var28);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var29);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var30);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var46);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var54);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var55);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var56);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var64);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var65);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var66);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var76);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var77);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var79);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var80);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var81);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var85);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var86);

  }

  public void test75() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest6.test75");


    java.io.InputStream var1 = org.jsecurity.util.ClassUtils.getResourceAsStream("");
    java.lang.Object[] var2 = new java.lang.Object[] { var1};
    java.util.List var3 = org.jsecurity.util.CollectionUtils.asList(var2);
    org.jsecurity.authc.pam.ModularRealmAuthenticator var4 = new org.jsecurity.authc.pam.ModularRealmAuthenticator(var3);
    org.jsecurity.authc.pam.AllSuccessfulModularAuthenticationStrategy var5 = new org.jsecurity.authc.pam.AllSuccessfulModularAuthenticationStrategy();
    var4.setModularAuthenticationStrategy((org.jsecurity.authc.pam.ModularAuthenticationStrategy)var5);
    org.jsecurity.authz.SimpleAuthorizationInfo var7 = new org.jsecurity.authz.SimpleAuthorizationInfo();
    var7.addStringPermission("hi!");
    java.io.InputStream var11 = org.jsecurity.util.ClassUtils.getResourceAsStream("");
    java.lang.Object[] var12 = new java.lang.Object[] { var11};
    java.util.List var13 = org.jsecurity.util.CollectionUtils.asList(var12);
    var7.addRoles((java.util.Collection)var13);
    var4.setAuthenticationListeners((java.util.Collection)var13);
    org.jsecurity.realm.activedirectory.ActiveDirectoryRealm var16 = new org.jsecurity.realm.activedirectory.ActiveDirectoryRealm();
    var16.setPrincipalSuffix("");
    var4.setRealm((org.jsecurity.realm.Realm)var16);
    org.jsecurity.authc.pam.FirstSuccessfulAuthenticationStrategy var20 = new org.jsecurity.authc.pam.FirstSuccessfulAuthenticationStrategy();
    org.jsecurity.authz.UnauthorizedException var22 = new org.jsecurity.authz.UnauthorizedException("org.jsecurity.config.ConfigurationException: dd\uFFFD");
    java.lang.Throwable[] var23 = var22.getSuppressed();
    java.util.List var24 = org.jsecurity.util.CollectionUtils.asList((java.lang.Object[])var23);
    org.jsecurity.authc.UsernamePasswordToken var25 = new org.jsecurity.authc.UsernamePasswordToken();
    java.lang.String var26 = var25.getUsername();
    java.net.InetAddress var27 = var25.getInetAddress();
    org.jsecurity.authc.AuthenticationInfo var28 = var20.beforeAllAttempts((java.util.Collection)var24, (org.jsecurity.authc.AuthenticationToken)var25);
    var4.setModularAuthenticationStrategy((org.jsecurity.authc.pam.ModularAuthenticationStrategy)var20);
    org.jsecurity.realm.activedirectory.ActiveDirectoryRealm var30 = new org.jsecurity.realm.activedirectory.ActiveDirectoryRealm();
    var30.init();
    var30.setSystemPassword("dd\uFFFD");
    var4.setRealm((org.jsecurity.realm.Realm)var30);
    org.jsecurity.authz.SimpleAuthorizationInfo var35 = new org.jsecurity.authz.SimpleAuthorizationInfo();
    var35.addRole("a2b823b1e72eae2b727289df8a00a89df8a0bab6ad8a89c4c5c7a9b62a270000");
    org.jsecurity.session.UnknownSessionException var42 = new org.jsecurity.session.UnknownSessionException("dd\uFFFD", (java.io.Serializable)100.0f);
    org.jsecurity.subject.SubjectException var43 = new org.jsecurity.subject.SubjectException("dd\uFFFD", (java.lang.Throwable)var42);
    org.jsecurity.io.SerializationException var44 = new org.jsecurity.io.SerializationException("", (java.lang.Throwable)var43);
    java.lang.Throwable[] var45 = var43.getSuppressed();
    java.util.Set var46 = org.jsecurity.util.CollectionUtils.asSet((java.lang.Object[])var45);
    var35.addRoles((java.util.Collection)var46);
    var4.setRealms((java.util.Collection)var46);
    org.jsecurity.authz.SimpleAuthorizationInfo var49 = new org.jsecurity.authz.SimpleAuthorizationInfo();
    org.jsecurity.session.UnknownSessionException var54 = new org.jsecurity.session.UnknownSessionException("dd\uFFFD", (java.io.Serializable)100.0f);
    org.jsecurity.subject.SubjectException var55 = new org.jsecurity.subject.SubjectException("dd\uFFFD", (java.lang.Throwable)var54);
    org.jsecurity.io.SerializationException var56 = new org.jsecurity.io.SerializationException("", (java.lang.Throwable)var55);
    java.lang.Throwable[] var57 = var55.getSuppressed();
    java.util.Set var58 = org.jsecurity.util.CollectionUtils.asSet((java.lang.Object[])var57);
    var49.setStringPermissions(var58);
    java.util.Set var60 = var49.getRoles();
    org.jsecurity.authz.SimpleAuthorizingAccount var61 = new org.jsecurity.authz.SimpleAuthorizingAccount();
    java.util.Set var62 = var61.getSimpleRoles();
    org.jsecurity.authz.SimpleRole var63 = new org.jsecurity.authz.SimpleRole();
    org.jsecurity.authz.SimpleAuthorizationInfo var64 = new org.jsecurity.authz.SimpleAuthorizationInfo();
    var64.addRole("a2b823b1e72eae2b727289df8a00a89df8a0bab6ad8a89c4c5c7a9b62a270000");
    org.jsecurity.session.UnknownSessionException var71 = new org.jsecurity.session.UnknownSessionException("dd\uFFFD", (java.io.Serializable)100.0f);
    org.jsecurity.subject.SubjectException var72 = new org.jsecurity.subject.SubjectException("dd\uFFFD", (java.lang.Throwable)var71);
    org.jsecurity.io.SerializationException var73 = new org.jsecurity.io.SerializationException("", (java.lang.Throwable)var72);
    java.lang.Throwable[] var74 = var72.getSuppressed();
    java.util.Set var75 = org.jsecurity.util.CollectionUtils.asSet((java.lang.Object[])var74);
    var64.addRoles((java.util.Collection)var75);
    var63.addAll((java.util.Collection)var75);
    org.jsecurity.authz.SimpleRole var79 = new org.jsecurity.authz.SimpleRole();
    org.jsecurity.authz.permission.WildcardPermission var82 = new org.jsecurity.authz.permission.WildcardPermission("hi!", false);
    boolean var83 = var79.isPermitted((org.jsecurity.authz.Permission)var82);
    org.jsecurity.session.InvalidSessionException var84 = new org.jsecurity.session.InvalidSessionException("org.jsecurity.config.ConfigurationException: dd\uFFFD", (java.io.Serializable)var82);
    org.jsecurity.authz.SimpleRole var85 = new org.jsecurity.authz.SimpleRole();
    org.jsecurity.authz.permission.WildcardPermission var88 = new org.jsecurity.authz.permission.WildcardPermission("hi!", false);
    boolean var89 = var85.isPermitted((org.jsecurity.authz.Permission)var88);
    boolean var90 = var82.implies((org.jsecurity.authz.Permission)var88);
    boolean var91 = var63.isPermitted((org.jsecurity.authz.Permission)var88);
    boolean var92 = var61.isPermitted((org.jsecurity.authz.Permission)var88);
    var49.addObjectPermission((org.jsecurity.authz.Permission)var88);
    org.jsecurity.authz.aop.GuestAnnotationHandler var94 = new org.jsecurity.authz.aop.GuestAnnotationHandler();
    java.lang.Class var95 = var94.getAnnotationClass();
    java.util.Collection var96 = org.jsecurity.util.CollectionUtils.emptyCollection(var95);
    var49.addRoles(var96);
    var4.setRealms(var96);
    org.jsecurity.authc.pam.ModularAuthenticationStrategy var99 = var4.getModularAuthenticationStrategy();
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var1);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var2);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var3);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var11);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var12);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var13);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var23);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var24);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var26);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var27);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var28);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var45);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var46);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var57);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var58);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var60);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var62);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var74);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var75);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var83 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var89 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var90 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var91 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var92 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var95);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var96);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var99);

  }

  public void test76() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest6.test76");


    org.jsecurity.config.UnresolveableReferenceException var1 = new org.jsecurity.config.UnresolveableReferenceException("org.jsecurity.authc.CredentialsException: 783ccd31-48a8-42dd-890f-df885a7baaff");
    org.jsecurity.util.UnavailableConstructorException var2 = new org.jsecurity.util.UnavailableConstructorException((java.lang.Throwable)var1);
    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      org.jsecurity.crypto.hash.Sha512Hash var3 = new org.jsecurity.crypto.hash.Sha512Hash((java.lang.Object)var2);
      fail("Expected exception of type org.jsecurity.codec.CodecException");
    } catch (org.jsecurity.codec.CodecException e) {
      // Expected exception.
    }

  }

  public void test77() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest6.test77");


    org.jsecurity.codec.CodecException var4 = new org.jsecurity.codec.CodecException("eb8eb80000");
    org.jsecurity.config.ConfigurationException var5 = new org.jsecurity.config.ConfigurationException("?\u0238\u0018@\uFFFD", (java.lang.Throwable)var4);
    org.jsecurity.session.ExpiredSessionException var6 = new org.jsecurity.session.ExpiredSessionException("1191c204-d095-4efc-82da-b9e9f4b83353", (java.lang.Throwable)var4);
    org.jsecurity.authc.LockedAccountException var7 = new org.jsecurity.authc.LockedAccountException("6da7d2f4-0515-4a20-87d9-cb23772ba002", (java.lang.Throwable)var4);

  }

  public void test78() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest6.test78");


    org.jsecurity.authc.UnknownAccountException var1 = new org.jsecurity.authc.UnknownAccountException();
    org.jsecurity.session.SessionException var2 = new org.jsecurity.session.SessionException("081ca560-8b71-4ff9-b584-09f7189a681c", (java.lang.Throwable)var1);

  }

  public void test79() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest6.test79");


    org.jsecurity.authz.permission.WildcardPermission var1 = new org.jsecurity.authz.permission.WildcardPermission("97fe9e36-743e-4ede-8eb3-665a83a8d5e6");

  }

  public void test80() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest6.test80");


    org.jsecurity.mgt.DefaultSecurityManager var0 = new org.jsecurity.mgt.DefaultSecurityManager();
    java.io.InputStream var2 = org.jsecurity.util.ClassUtils.getResourceAsStream("");
    java.lang.Object[] var3 = new java.lang.Object[] { var2};
    java.util.List var4 = org.jsecurity.util.CollectionUtils.asList(var3);
    org.jsecurity.authc.pam.ModularRealmAuthenticator var5 = new org.jsecurity.authc.pam.ModularRealmAuthenticator(var4);
    org.jsecurity.authc.pam.AllSuccessfulModularAuthenticationStrategy var6 = new org.jsecurity.authc.pam.AllSuccessfulModularAuthenticationStrategy();
    var5.setModularAuthenticationStrategy((org.jsecurity.authc.pam.ModularAuthenticationStrategy)var6);
    org.jsecurity.authz.SimpleAuthorizationInfo var8 = new org.jsecurity.authz.SimpleAuthorizationInfo();
    var8.addStringPermission("hi!");
    java.io.InputStream var12 = org.jsecurity.util.ClassUtils.getResourceAsStream("");
    java.lang.Object[] var13 = new java.lang.Object[] { var12};
    java.util.List var14 = org.jsecurity.util.CollectionUtils.asList(var13);
    var8.addRoles((java.util.Collection)var14);
    var5.setAuthenticationListeners((java.util.Collection)var14);
    var0.setSessionListeners((java.util.Collection)var14);
    org.jsecurity.realm.text.TextConfigurationRealm var18 = new org.jsecurity.realm.text.TextConfigurationRealm();
    java.io.InputStream var20 = org.jsecurity.util.ClassUtils.getResourceAsStream("");
    java.lang.Object[] var21 = new java.lang.Object[] { var20};
    java.util.List var22 = org.jsecurity.util.CollectionUtils.asList(var21);
    org.jsecurity.authc.pam.ModularRealmAuthenticator var23 = new org.jsecurity.authc.pam.ModularRealmAuthenticator(var22);
    org.jsecurity.subject.SimplePrincipalCollection var25 = new org.jsecurity.subject.SimplePrincipalCollection((java.util.Collection)var22, "org.jsecurity.authz.UnauthorizedException: org.jsecurity.session.ExpiredSessionException: ");
    org.jsecurity.session.UnknownSessionException var30 = new org.jsecurity.session.UnknownSessionException("dd\uFFFD", (java.io.Serializable)100.0f);
    org.jsecurity.session.SessionException var32 = new org.jsecurity.session.SessionException("dd\uFFFD", (java.lang.Throwable)var30, (java.io.Serializable)0);
    org.jsecurity.session.SessionException var33 = new org.jsecurity.session.SessionException("dd\uFFFD", (java.lang.Throwable)var30);
    var25.add((java.lang.Object)var33, "org.jsecurity.config.ConfigurationException: dd\uFFFD");
    var18.onLogout((org.jsecurity.subject.PrincipalCollection)var25);
    org.jsecurity.authc.pam.FirstSuccessfulAuthenticationStrategy var37 = new org.jsecurity.authc.pam.FirstSuccessfulAuthenticationStrategy();
    org.jsecurity.authz.UnauthorizedException var39 = new org.jsecurity.authz.UnauthorizedException("org.jsecurity.config.ConfigurationException: dd\uFFFD");
    java.lang.Throwable[] var40 = var39.getSuppressed();
    java.util.List var41 = org.jsecurity.util.CollectionUtils.asList((java.lang.Object[])var40);
    org.jsecurity.authc.UsernamePasswordToken var42 = new org.jsecurity.authc.UsernamePasswordToken();
    java.lang.String var43 = var42.getUsername();
    java.net.InetAddress var44 = var42.getInetAddress();
    org.jsecurity.authc.AuthenticationInfo var45 = var37.beforeAllAttempts((java.util.Collection)var41, (org.jsecurity.authc.AuthenticationToken)var42);
    boolean[] var46 = var0.hasRoles((org.jsecurity.subject.PrincipalCollection)var25, var41);
    org.jsecurity.codec.CodecException var49 = new org.jsecurity.codec.CodecException("dd\uFFFD");
    org.jsecurity.authc.ConcurrentAccessException var50 = new org.jsecurity.authc.ConcurrentAccessException("org.jsecurity.authz.UnauthorizedException: org.jsecurity.session.ExpiredSessionException: ", (java.lang.Throwable)var49);
    org.jsecurity.subject.SimplePrincipalCollection var52 = new org.jsecurity.subject.SimplePrincipalCollection((java.lang.Object)var49, "");
    java.io.InputStream var54 = org.jsecurity.util.ClassUtils.getResourceAsStream("");
    java.lang.Object[] var55 = new java.lang.Object[] { var54};
    java.util.List var56 = org.jsecurity.util.CollectionUtils.asList(var55);
    org.jsecurity.authc.pam.ModularRealmAuthenticator var57 = new org.jsecurity.authc.pam.ModularRealmAuthenticator(var56);
    var52.addAll((java.util.Collection)var56, "\u0000\u0000");
    var0.setSessionListeners((java.util.Collection)var56);
    org.jsecurity.session.mgt.DefaultSessionManager var61 = new org.jsecurity.session.mgt.DefaultSessionManager();
    org.jsecurity.mgt.DefaultSecurityManager var62 = new org.jsecurity.mgt.DefaultSecurityManager();
    org.jsecurity.authz.permission.WildcardPermissionResolver var63 = new org.jsecurity.authz.permission.WildcardPermissionResolver();
    var62.setPermissionResolver((org.jsecurity.authz.permission.PermissionResolver)var63);
    org.jsecurity.cache.CacheManager var65 = var62.getCacheManager();
    var61.setCacheManager(var65);
    org.jsecurity.session.mgt.SessionValidationScheduler var67 = var61.getSessionValidationScheduler();
    var0.setSessionManager((org.jsecurity.session.mgt.SessionManager)var61);
    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      var0.setRememberMeDecryptionCipherKeyHex("29c07e0a-d8fa-4305-a944-e1e754c73175");
      fail("Expected exception of type java.lang.IllegalStateException");
    } catch (java.lang.IllegalStateException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var2);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var3);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var4);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var12);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var13);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var14);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var20);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var21);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var22);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var40);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var41);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var43);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var44);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var45);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var46);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var54);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var55);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var56);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var65);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var67);

  }

  public void test81() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest6.test81");


    org.jsecurity.session.StoppedSessionException var1 = new org.jsecurity.session.StoppedSessionException("15ea2260-d13f-4c24-8bf3-52d78d087924");

  }

  public void test82() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest6.test82");


    org.jsecurity.codec.CodecException var2 = new org.jsecurity.codec.CodecException("dd\uFFFD");
    org.jsecurity.authc.ConcurrentAccessException var3 = new org.jsecurity.authc.ConcurrentAccessException("org.jsecurity.authz.UnauthorizedException: org.jsecurity.session.ExpiredSessionException: ", (java.lang.Throwable)var2);
    org.jsecurity.subject.SimplePrincipalCollection var5 = new org.jsecurity.subject.SimplePrincipalCollection((java.lang.Object)var2, "");
    org.jsecurity.authc.pam.FirstSuccessfulAuthenticationStrategy var6 = new org.jsecurity.authc.pam.FirstSuccessfulAuthenticationStrategy();
    org.jsecurity.authz.UnauthorizedException var8 = new org.jsecurity.authz.UnauthorizedException("org.jsecurity.config.ConfigurationException: dd\uFFFD");
    java.lang.Throwable[] var9 = var8.getSuppressed();
    java.util.List var10 = org.jsecurity.util.CollectionUtils.asList((java.lang.Object[])var9);
    org.jsecurity.authc.UsernamePasswordToken var11 = new org.jsecurity.authc.UsernamePasswordToken();
    java.lang.String var12 = var11.getUsername();
    java.net.InetAddress var13 = var11.getInetAddress();
    org.jsecurity.authc.AuthenticationInfo var14 = var6.beforeAllAttempts((java.util.Collection)var10, (org.jsecurity.authc.AuthenticationToken)var11);
    org.jsecurity.session.UnknownSessionException var19 = new org.jsecurity.session.UnknownSessionException("dd\uFFFD", (java.io.Serializable)100.0f);
    org.jsecurity.subject.SubjectException var20 = new org.jsecurity.subject.SubjectException("dd\uFFFD", (java.lang.Throwable)var19);
    org.jsecurity.io.SerializationException var21 = new org.jsecurity.io.SerializationException("", (java.lang.Throwable)var20);
    java.lang.Throwable[] var22 = var20.getSuppressed();
    java.util.Set var23 = org.jsecurity.util.CollectionUtils.asSet((java.lang.Object[])var22);
    org.jsecurity.authc.SimpleAccount var24 = new org.jsecurity.authc.SimpleAccount((org.jsecurity.subject.PrincipalCollection)var5, (java.lang.Object)var10, var23);
    var24.setCredentialsExpired(true);
    org.jsecurity.realm.activedirectory.ActiveDirectoryRealm var27 = new org.jsecurity.realm.activedirectory.ActiveDirectoryRealm();
    var27.init();
    var27.init();
    org.jsecurity.realm.activedirectory.ActiveDirectoryRealm var30 = new org.jsecurity.realm.activedirectory.ActiveDirectoryRealm();
    org.jsecurity.authc.credential.Sha256CredentialsMatcher var31 = new org.jsecurity.authc.credential.Sha256CredentialsMatcher();
    var30.setCredentialsMatcher((org.jsecurity.authc.credential.CredentialsMatcher)var31);
    java.lang.String var33 = var30.getAuthorizationCacheName();
    var30.setUrl("hi!");
    org.jsecurity.realm.ldap.DefaultLdapContextFactory var36 = new org.jsecurity.realm.ldap.DefaultLdapContextFactory();
    var30.setLdapContextFactory((org.jsecurity.realm.ldap.LdapContextFactory)var36);
    var36.setAuthentication("dd\uFFFD");
    var27.setLdapContextFactory((org.jsecurity.realm.ldap.LdapContextFactory)var36);
    var36.setSearchBase("");
    var36.setUrl("dd\uFFFD");
    boolean var45 = var24.equals((java.lang.Object)var36);
    java.lang.String var46 = var24.toString();
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var9);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var10);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var12);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var13);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var14);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var22);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var23);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var33);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var45 == false);

  }

  public void test83() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest6.test83");


    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      org.jsecurity.crypto.hash.Sha512Hash var1 = org.jsecurity.crypto.hash.Sha512Hash.fromHexString("b6a77f71-73c4-466a-903e-72fc5968f9ac");
      fail("Expected exception of type java.lang.IllegalArgumentException");
    } catch (java.lang.IllegalArgumentException e) {
      // Expected exception.
    }

  }

  public void test84() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest6.test84");


    org.jsecurity.authz.SimpleAuthorizingAccount var0 = new org.jsecurity.authz.SimpleAuthorizingAccount();
    org.jsecurity.authz.SimpleRole var2 = new org.jsecurity.authz.SimpleRole();
    org.jsecurity.authz.permission.WildcardPermission var5 = new org.jsecurity.authz.permission.WildcardPermission("hi!", false);
    boolean var6 = var2.isPermitted((org.jsecurity.authz.Permission)var5);
    org.jsecurity.session.InvalidSessionException var7 = new org.jsecurity.session.InvalidSessionException("org.jsecurity.config.ConfigurationException: dd\uFFFD", (java.io.Serializable)var5);
    org.jsecurity.codec.CodecException var10 = new org.jsecurity.codec.CodecException("dd\uFFFD");
    org.jsecurity.authc.ConcurrentAccessException var11 = new org.jsecurity.authc.ConcurrentAccessException("org.jsecurity.authz.UnauthorizedException: org.jsecurity.session.ExpiredSessionException: ", (java.lang.Throwable)var10);
    org.jsecurity.subject.SimplePrincipalCollection var13 = new org.jsecurity.subject.SimplePrincipalCollection((java.lang.Object)var10, "");
    org.jsecurity.authc.pam.FirstSuccessfulAuthenticationStrategy var14 = new org.jsecurity.authc.pam.FirstSuccessfulAuthenticationStrategy();
    org.jsecurity.authz.UnauthorizedException var16 = new org.jsecurity.authz.UnauthorizedException("org.jsecurity.config.ConfigurationException: dd\uFFFD");
    java.lang.Throwable[] var17 = var16.getSuppressed();
    java.util.List var18 = org.jsecurity.util.CollectionUtils.asList((java.lang.Object[])var17);
    org.jsecurity.authc.UsernamePasswordToken var19 = new org.jsecurity.authc.UsernamePasswordToken();
    java.lang.String var20 = var19.getUsername();
    java.net.InetAddress var21 = var19.getInetAddress();
    org.jsecurity.authc.AuthenticationInfo var22 = var14.beforeAllAttempts((java.util.Collection)var18, (org.jsecurity.authc.AuthenticationToken)var19);
    org.jsecurity.session.UnknownSessionException var27 = new org.jsecurity.session.UnknownSessionException("dd\uFFFD", (java.io.Serializable)100.0f);
    org.jsecurity.subject.SubjectException var28 = new org.jsecurity.subject.SubjectException("dd\uFFFD", (java.lang.Throwable)var27);
    org.jsecurity.io.SerializationException var29 = new org.jsecurity.io.SerializationException("", (java.lang.Throwable)var28);
    java.lang.Throwable[] var30 = var28.getSuppressed();
    java.util.Set var31 = org.jsecurity.util.CollectionUtils.asSet((java.lang.Object[])var30);
    org.jsecurity.authc.SimpleAccount var32 = new org.jsecurity.authc.SimpleAccount((org.jsecurity.subject.PrincipalCollection)var13, (java.lang.Object)var18, var31);
    var32.addStringPermission("org.jsecurity.config.ConfigurationException: dd\uFFFD");
    org.jsecurity.authz.SimpleRole var35 = new org.jsecurity.authz.SimpleRole();
    org.jsecurity.authz.permission.WildcardPermission var38 = new org.jsecurity.authz.permission.WildcardPermission("hi!", false);
    boolean var39 = var35.isPermitted((org.jsecurity.authz.Permission)var38);
    var32.addObjectPermission((org.jsecurity.authz.Permission)var38);
    boolean var41 = var5.implies((org.jsecurity.authz.Permission)var38);
    boolean var42 = var0.isPermitted((org.jsecurity.authz.Permission)var38);
    boolean var44 = var0.hasRole("jsecurity-activeSessionCache");
    org.jsecurity.authz.permission.WildcardPermission var47 = new org.jsecurity.authz.permission.WildcardPermission("1a1fe717-b2f7-4a28-9cfa-6f3955b8b913", false);
    boolean var48 = var0.isPermitted((org.jsecurity.authz.Permission)var47);
    boolean var49 = var0.isLocked();
    var0.setCredentialsExpired(false);
    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      var0.checkRole("ca73d1a4-706e-42e7-980f-896d3b153de8");
      fail("Expected exception of type org.jsecurity.authz.UnauthorizedException");
    } catch (org.jsecurity.authz.UnauthorizedException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var6 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var17);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var18);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var20);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var21);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var22);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var30);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var31);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var39 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var41 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var42 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var44 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var48 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var49 == false);

  }

  public void test85() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest6.test85");


    org.jsecurity.authz.UnauthorizedException var2 = new org.jsecurity.authz.UnauthorizedException("org.jsecurity.config.ConfigurationException: dd\uFFFD");
    org.jsecurity.crypto.hash.Md2Hash var4 = org.jsecurity.crypto.hash.Md2Hash.fromBase64String("a2b823b1e72eae2b727289df8a00a89df8a0bab6ad8a89c4c5c7a9b62a270000");
    org.jsecurity.authc.credential.Md2CredentialsMatcher var5 = new org.jsecurity.authc.credential.Md2CredentialsMatcher();
    org.jsecurity.authz.SimpleAuthorizingAccount var7 = new org.jsecurity.authz.SimpleAuthorizingAccount((java.lang.Object)"a2b823b1e72eae2b727289df8a00a89df8a0bab6ad8a89c4c5c7a9b62a270000", (java.lang.Object)var5, "");
    org.jsecurity.session.UnknownSessionException var8 = new org.jsecurity.session.UnknownSessionException("org.jsecurity.config.ConfigurationException: dd\uFFFD", (java.lang.Throwable)var2, (java.io.Serializable)var7);
    java.io.InputStream var10 = org.jsecurity.util.ClassUtils.getResourceAsStream("");
    java.lang.Object[] var11 = new java.lang.Object[] { var10};
    java.util.List var12 = org.jsecurity.util.CollectionUtils.asList(var11);
    org.jsecurity.authc.pam.ModularRealmAuthenticator var13 = new org.jsecurity.authc.pam.ModularRealmAuthenticator(var12);
    org.jsecurity.authc.pam.AllSuccessfulModularAuthenticationStrategy var14 = new org.jsecurity.authc.pam.AllSuccessfulModularAuthenticationStrategy();
    var13.setModularAuthenticationStrategy((org.jsecurity.authc.pam.ModularAuthenticationStrategy)var14);
    org.jsecurity.authz.SimpleAuthorizationInfo var16 = new org.jsecurity.authz.SimpleAuthorizationInfo();
    var16.addStringPermission("hi!");
    java.io.InputStream var20 = org.jsecurity.util.ClassUtils.getResourceAsStream("");
    java.lang.Object[] var21 = new java.lang.Object[] { var20};
    java.util.List var22 = org.jsecurity.util.CollectionUtils.asList(var21);
    var16.addRoles((java.util.Collection)var22);
    var13.setAuthenticationListeners((java.util.Collection)var22);
    org.jsecurity.realm.activedirectory.ActiveDirectoryRealm var25 = new org.jsecurity.realm.activedirectory.ActiveDirectoryRealm();
    var25.setPrincipalSuffix("");
    var13.setRealm((org.jsecurity.realm.Realm)var25);
    org.jsecurity.authc.pam.FirstSuccessfulAuthenticationStrategy var29 = new org.jsecurity.authc.pam.FirstSuccessfulAuthenticationStrategy();
    org.jsecurity.authz.UnauthorizedException var31 = new org.jsecurity.authz.UnauthorizedException("org.jsecurity.config.ConfigurationException: dd\uFFFD");
    java.lang.Throwable[] var32 = var31.getSuppressed();
    java.util.List var33 = org.jsecurity.util.CollectionUtils.asList((java.lang.Object[])var32);
    org.jsecurity.authc.UsernamePasswordToken var34 = new org.jsecurity.authc.UsernamePasswordToken();
    java.lang.String var35 = var34.getUsername();
    java.net.InetAddress var36 = var34.getInetAddress();
    org.jsecurity.authc.AuthenticationInfo var37 = var29.beforeAllAttempts((java.util.Collection)var33, (org.jsecurity.authc.AuthenticationToken)var34);
    var13.setModularAuthenticationStrategy((org.jsecurity.authc.pam.ModularAuthenticationStrategy)var29);
    org.jsecurity.codec.CodecException var41 = new org.jsecurity.codec.CodecException("dd\uFFFD");
    org.jsecurity.authc.ConcurrentAccessException var42 = new org.jsecurity.authc.ConcurrentAccessException("org.jsecurity.authz.UnauthorizedException: org.jsecurity.session.ExpiredSessionException: ", (java.lang.Throwable)var41);
    org.jsecurity.subject.SimplePrincipalCollection var44 = new org.jsecurity.subject.SimplePrincipalCollection((java.lang.Object)var41, "");
    org.jsecurity.authc.pam.FirstSuccessfulAuthenticationStrategy var45 = new org.jsecurity.authc.pam.FirstSuccessfulAuthenticationStrategy();
    org.jsecurity.authz.UnauthorizedException var47 = new org.jsecurity.authz.UnauthorizedException("org.jsecurity.config.ConfigurationException: dd\uFFFD");
    java.lang.Throwable[] var48 = var47.getSuppressed();
    java.util.List var49 = org.jsecurity.util.CollectionUtils.asList((java.lang.Object[])var48);
    org.jsecurity.authc.UsernamePasswordToken var50 = new org.jsecurity.authc.UsernamePasswordToken();
    java.lang.String var51 = var50.getUsername();
    java.net.InetAddress var52 = var50.getInetAddress();
    org.jsecurity.authc.AuthenticationInfo var53 = var45.beforeAllAttempts((java.util.Collection)var49, (org.jsecurity.authc.AuthenticationToken)var50);
    org.jsecurity.session.UnknownSessionException var58 = new org.jsecurity.session.UnknownSessionException("dd\uFFFD", (java.io.Serializable)100.0f);
    org.jsecurity.subject.SubjectException var59 = new org.jsecurity.subject.SubjectException("dd\uFFFD", (java.lang.Throwable)var58);
    org.jsecurity.io.SerializationException var60 = new org.jsecurity.io.SerializationException("", (java.lang.Throwable)var59);
    java.lang.Throwable[] var61 = var59.getSuppressed();
    java.util.Set var62 = org.jsecurity.util.CollectionUtils.asSet((java.lang.Object[])var61);
    org.jsecurity.authc.SimpleAccount var63 = new org.jsecurity.authc.SimpleAccount((org.jsecurity.subject.PrincipalCollection)var44, (java.lang.Object)var49, var62);
    org.jsecurity.authc.pam.AllSuccessfulModularAuthenticationStrategy var64 = new org.jsecurity.authc.pam.AllSuccessfulModularAuthenticationStrategy();
    char[] var66 = new char[] { };
    org.jsecurity.authc.UsernamePasswordToken var68 = new org.jsecurity.authc.UsernamePasswordToken("hi!", var66, true);
    org.jsecurity.authc.SimpleAccount var69 = new org.jsecurity.authc.SimpleAccount();
    var69.setCredentialsExpired(false);
    boolean var72 = var69.isLocked();
    org.jsecurity.authc.AuthenticationInfo var73 = var64.afterAllAttempts((org.jsecurity.authc.AuthenticationToken)var68, (org.jsecurity.authc.AuthenticationInfo)var69);
    char[] var76 = new char[] { };
    org.jsecurity.authc.UsernamePasswordToken var78 = new org.jsecurity.authc.UsernamePasswordToken("hi!", var76, true);
    org.jsecurity.authc.UsernamePasswordToken var79 = new org.jsecurity.authc.UsernamePasswordToken("\u0000\u0000", var76);
    var68.setPassword(var76);
    org.jsecurity.authc.AuthenticationInfo var81 = var29.beforeAllAttempts((java.util.Collection)var49, (org.jsecurity.authc.AuthenticationToken)var68);
    org.jsecurity.authz.permission.WildcardPermissionResolver var82 = new org.jsecurity.authz.permission.WildcardPermissionResolver();
    org.jsecurity.authz.Permission var84 = var82.resolvePermission("hi!");
    org.jsecurity.authz.Permission var86 = var82.resolvePermission("hi!");
    java.util.Set var87 = org.jsecurity.util.PermissionUtils.resolvePermissions((java.util.Collection)var49, (org.jsecurity.authz.permission.PermissionResolver)var82);
    boolean[] var88 = var7.hasRoles(var49);
    java.util.Set var89 = var7.getSimpleRoles();
    org.jsecurity.codec.CodecException var92 = new org.jsecurity.codec.CodecException("dd\uFFFD");
    org.jsecurity.authc.ConcurrentAccessException var93 = new org.jsecurity.authc.ConcurrentAccessException("org.jsecurity.authz.UnauthorizedException: org.jsecurity.session.ExpiredSessionException: ", (java.lang.Throwable)var92);
    org.jsecurity.subject.SimplePrincipalCollection var95 = new org.jsecurity.subject.SimplePrincipalCollection((java.lang.Object)var92, "");
    boolean var96 = var95.isEmpty();
    java.util.List var97 = var95.asList();
    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      boolean[] var98 = var7.hasRoles(var97);
      fail("Expected exception of type java.lang.ClassCastException");
    } catch (java.lang.ClassCastException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var4);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var10);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var11);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var12);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var20);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var21);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var22);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var32);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var33);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var35);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var36);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var37);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var48);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var49);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var51);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var52);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var53);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var61);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var62);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var66);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var72 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var73);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var76);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var81);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var84);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var86);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var87);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var88);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var89);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var96 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var97);

  }

  public void test86() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest6.test86");


    java.lang.String var1 = org.jsecurity.codec.Base64.decodeToString("1b931d4a-91b7-4c28-83ea-77211bfb7ddc");
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var1 + "' != '" + "\u057Fw\uFFFD\uFFFD\u001A\uFFFDV\uFFFD\uFFFD\u037C\uFFFDw\uFFFD\uFF75\u0577\uFFFD\uFFFD\uFFFD\\"+ "'", var1.equals("\u057Fw\uFFFD\uFFFD\u001A\uFFFDV\uFFFD\uFFFD\u037C\uFFFDw\uFFFD\uFF75\u0577\uFFFD\uFFFD\uFFFD\\"));

  }

  public void test87() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest6.test87");


    org.jsecurity.session.UnknownSessionException var1 = new org.jsecurity.session.UnknownSessionException("\uFFFD\uFFFD\u0000");

  }

  public void test88() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest6.test88");


    org.jsecurity.session.mgt.eis.MemorySessionDAO var0 = new org.jsecurity.session.mgt.eis.MemorySessionDAO();
    org.jsecurity.cache.Cache var1 = var0.getActiveSessionsCache();
    org.jsecurity.cache.CacheManager var2 = var0.getCacheManager();
    org.jsecurity.cache.HashtableCacheManager var3 = new org.jsecurity.cache.HashtableCacheManager();
    org.jsecurity.cache.Cache var5 = var3.getCache("\u0000\u0000");
    var0.setActiveSessionsCache(var5);
    java.io.InputStream var8 = org.jsecurity.util.ClassUtils.getResourceAsStream("");
    java.lang.Object[] var9 = new java.lang.Object[] { var8};
    java.util.List var10 = org.jsecurity.util.CollectionUtils.asList(var9);
    org.jsecurity.authc.pam.ModularRealmAuthenticator var11 = new org.jsecurity.authc.pam.ModularRealmAuthenticator(var10);
    org.jsecurity.authc.pam.AllSuccessfulModularAuthenticationStrategy var12 = new org.jsecurity.authc.pam.AllSuccessfulModularAuthenticationStrategy();
    var11.setModularAuthenticationStrategy((org.jsecurity.authc.pam.ModularAuthenticationStrategy)var12);
    org.jsecurity.authz.SimpleAuthorizationInfo var14 = new org.jsecurity.authz.SimpleAuthorizationInfo();
    var14.addStringPermission("hi!");
    java.io.InputStream var18 = org.jsecurity.util.ClassUtils.getResourceAsStream("");
    java.lang.Object[] var19 = new java.lang.Object[] { var18};
    java.util.List var20 = org.jsecurity.util.CollectionUtils.asList(var19);
    var14.addRoles((java.util.Collection)var20);
    var11.setAuthenticationListeners((java.util.Collection)var20);
    org.jsecurity.realm.activedirectory.ActiveDirectoryRealm var23 = new org.jsecurity.realm.activedirectory.ActiveDirectoryRealm();
    var23.setPrincipalSuffix("");
    var11.setRealm((org.jsecurity.realm.Realm)var23);
    org.jsecurity.cache.HashtableCacheManager var27 = new org.jsecurity.cache.HashtableCacheManager();
    org.jsecurity.cache.Cache var29 = var27.getCache("\u0000\u0000");
    var23.setAuthorizationCache(var29);
    var0.setActiveSessionsCache(var29);
    org.jsecurity.session.mgt.DefaultSessionManager var32 = new org.jsecurity.session.mgt.DefaultSessionManager();
    org.jsecurity.session.mgt.eis.MemorySessionDAO var33 = new org.jsecurity.session.mgt.eis.MemorySessionDAO();
    org.jsecurity.cache.Cache var34 = var33.getActiveSessionsCache();
    org.jsecurity.cache.CacheManager var35 = var33.getCacheManager();
    org.jsecurity.cache.HashtableCacheManager var36 = new org.jsecurity.cache.HashtableCacheManager();
    org.jsecurity.cache.Cache var38 = var36.getCache("\u0000\u0000");
    var33.setActiveSessionsCache(var38);
    java.io.InputStream var41 = org.jsecurity.util.ClassUtils.getResourceAsStream("");
    java.lang.Object[] var42 = new java.lang.Object[] { var41};
    java.util.List var43 = org.jsecurity.util.CollectionUtils.asList(var42);
    org.jsecurity.authc.pam.ModularRealmAuthenticator var44 = new org.jsecurity.authc.pam.ModularRealmAuthenticator(var43);
    org.jsecurity.authc.pam.AllSuccessfulModularAuthenticationStrategy var45 = new org.jsecurity.authc.pam.AllSuccessfulModularAuthenticationStrategy();
    var44.setModularAuthenticationStrategy((org.jsecurity.authc.pam.ModularAuthenticationStrategy)var45);
    org.jsecurity.authz.SimpleAuthorizationInfo var47 = new org.jsecurity.authz.SimpleAuthorizationInfo();
    var47.addStringPermission("hi!");
    java.io.InputStream var51 = org.jsecurity.util.ClassUtils.getResourceAsStream("");
    java.lang.Object[] var52 = new java.lang.Object[] { var51};
    java.util.List var53 = org.jsecurity.util.CollectionUtils.asList(var52);
    var47.addRoles((java.util.Collection)var53);
    var44.setAuthenticationListeners((java.util.Collection)var53);
    org.jsecurity.realm.activedirectory.ActiveDirectoryRealm var56 = new org.jsecurity.realm.activedirectory.ActiveDirectoryRealm();
    var56.setPrincipalSuffix("");
    var44.setRealm((org.jsecurity.realm.Realm)var56);
    org.jsecurity.cache.HashtableCacheManager var60 = new org.jsecurity.cache.HashtableCacheManager();
    org.jsecurity.cache.Cache var62 = var60.getCache("\u0000\u0000");
    var56.setAuthorizationCache(var62);
    var33.setActiveSessionsCache(var62);
    org.jsecurity.session.mgt.SimpleSession var65 = new org.jsecurity.session.mgt.SimpleSession();
    java.io.Serializable var66 = var33.create((org.jsecurity.session.Session)var65);
    var32.setSessionDAO((org.jsecurity.session.mgt.eis.SessionDAO)var33);
    org.jsecurity.cache.ehcache.EhCacheManager var68 = new org.jsecurity.cache.ehcache.EhCacheManager();
    net.sf.ehcache.CacheManager var69 = var68.getCacheManager();
    var68.destroy();
    java.lang.String var71 = var68.getCacheManagerConfigFile();
    java.lang.String var72 = var68.getCacheManagerConfigFile();
    var32.setCacheManager((org.jsecurity.cache.CacheManager)var68);
    var0.setCacheManager((org.jsecurity.cache.CacheManager)var68);
    java.lang.String var75 = var68.getCacheManagerConfigFile();
    java.lang.String var76 = var68.getCacheManagerConfigFile();
    net.sf.ehcache.CacheManager var77 = var68.getCacheManager();
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var1);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var2);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var5);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var8);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var9);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var10);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var18);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var19);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var20);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var29);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var34);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var35);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var38);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var41);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var42);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var43);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var51);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var52);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var53);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var62);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var66 + "' != '" + "3c54d8df-f8de-42fb-a894-fb7ce674d819"+ "'", var66.equals("3c54d8df-f8de-42fb-a894-fb7ce674d819"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var69);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var71 + "' != '" + "classpath:org/jsecurity/cache/ehcache/ehcache.xml"+ "'", var71.equals("classpath:org/jsecurity/cache/ehcache/ehcache.xml"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var72 + "' != '" + "classpath:org/jsecurity/cache/ehcache/ehcache.xml"+ "'", var72.equals("classpath:org/jsecurity/cache/ehcache/ehcache.xml"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var75 + "' != '" + "classpath:org/jsecurity/cache/ehcache/ehcache.xml"+ "'", var75.equals("classpath:org/jsecurity/cache/ehcache/ehcache.xml"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var76 + "' != '" + "classpath:org/jsecurity/cache/ehcache/ehcache.xml"+ "'", var76.equals("classpath:org/jsecurity/cache/ehcache/ehcache.xml"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var77);

  }

  public void test89() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest6.test89");


    org.jsecurity.authc.UsernamePasswordToken var0 = new org.jsecurity.authc.UsernamePasswordToken();
    byte[] var5 = new byte[] { (byte)100, (byte)100, (byte)(-1)};
    java.lang.String var6 = org.jsecurity.codec.CodecSupport.toString(var5);
    char[] var7 = org.jsecurity.codec.CodecSupport.toChars(var5);
    boolean var8 = org.jsecurity.codec.Base64.isBase64(var5);
    boolean var9 = org.jsecurity.codec.Base64.isBase64(var5);
    boolean var10 = org.jsecurity.codec.Base64.isBase64(var5);
    char[] var11 = org.jsecurity.codec.CodecSupport.toChars(var5);
    org.jsecurity.session.mgt.SimpleSession var12 = new org.jsecurity.session.mgt.SimpleSession();
    var12.setTimeout((-1L));
    org.jsecurity.session.mgt.SimpleSession var15 = new org.jsecurity.session.mgt.SimpleSession();
    java.util.Date var16 = var15.getLastAccessTime();
    var12.setLastAccessTime(var16);
    java.net.InetAddress var18 = var12.getHostAddress();
    org.jsecurity.authz.HostUnauthorizedException var19 = new org.jsecurity.authz.HostUnauthorizedException(var18);
    org.jsecurity.authc.UsernamePasswordToken var20 = new org.jsecurity.authc.UsernamePasswordToken("b725e8cc-690c-495e-ac27-b1b425834793", var11, var18);
    var0.setInetAddress(var18);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var5);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var6 + "' != '" + "dd\uFFFD"+ "'", var6.equals("dd\uFFFD"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var7);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var8 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var9 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var10 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var11);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var16);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var18);

  }

  public void test90() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest6.test90");


    org.jsecurity.session.mgt.eis.MemorySessionDAO var2 = new org.jsecurity.session.mgt.eis.MemorySessionDAO();
    org.jsecurity.cache.Cache var3 = var2.getActiveSessionsCache();
    org.jsecurity.cache.CacheManager var4 = var2.getCacheManager();
    org.jsecurity.cache.HashtableCacheManager var5 = new org.jsecurity.cache.HashtableCacheManager();
    org.jsecurity.cache.Cache var7 = var5.getCache("\u0000\u0000");
    var2.setActiveSessionsCache(var7);
    java.io.InputStream var10 = org.jsecurity.util.ClassUtils.getResourceAsStream("");
    java.lang.Object[] var11 = new java.lang.Object[] { var10};
    java.util.List var12 = org.jsecurity.util.CollectionUtils.asList(var11);
    org.jsecurity.authc.pam.ModularRealmAuthenticator var13 = new org.jsecurity.authc.pam.ModularRealmAuthenticator(var12);
    org.jsecurity.authc.pam.AllSuccessfulModularAuthenticationStrategy var14 = new org.jsecurity.authc.pam.AllSuccessfulModularAuthenticationStrategy();
    var13.setModularAuthenticationStrategy((org.jsecurity.authc.pam.ModularAuthenticationStrategy)var14);
    org.jsecurity.authz.SimpleAuthorizationInfo var16 = new org.jsecurity.authz.SimpleAuthorizationInfo();
    var16.addStringPermission("hi!");
    java.io.InputStream var20 = org.jsecurity.util.ClassUtils.getResourceAsStream("");
    java.lang.Object[] var21 = new java.lang.Object[] { var20};
    java.util.List var22 = org.jsecurity.util.CollectionUtils.asList(var21);
    var16.addRoles((java.util.Collection)var22);
    var13.setAuthenticationListeners((java.util.Collection)var22);
    org.jsecurity.realm.activedirectory.ActiveDirectoryRealm var25 = new org.jsecurity.realm.activedirectory.ActiveDirectoryRealm();
    var25.setPrincipalSuffix("");
    var13.setRealm((org.jsecurity.realm.Realm)var25);
    org.jsecurity.cache.HashtableCacheManager var29 = new org.jsecurity.cache.HashtableCacheManager();
    org.jsecurity.cache.Cache var31 = var29.getCache("\u0000\u0000");
    var25.setAuthorizationCache(var31);
    var2.setActiveSessionsCache(var31);
    org.jsecurity.session.mgt.SimpleSession var34 = new org.jsecurity.session.mgt.SimpleSession();
    java.io.Serializable var35 = var2.create((org.jsecurity.session.Session)var34);
    java.io.Serializable var36 = var34.getId();
    org.jsecurity.authc.credential.Md5CredentialsMatcher var37 = new org.jsecurity.authc.credential.Md5CredentialsMatcher();
    boolean var38 = var37.isHashSalted();
    boolean var39 = var37.isHashSalted();
    int var40 = var37.getHashIterations();
    java.lang.Object var41 = var34.removeAttribute((java.lang.Object)var37);
    boolean var42 = var34.isExpired();
    java.util.Date var43 = var34.getStartTimestamp();
    org.jsecurity.session.SessionException var44 = new org.jsecurity.session.SessionException((java.io.Serializable)var34);
    org.jsecurity.authc.UnknownAccountException var45 = new org.jsecurity.authc.UnknownAccountException("f3cec280-b0d4-4d1e-9ce8-a8b745fa003b", (java.lang.Throwable)var44);
    org.jsecurity.authz.AuthorizationException var46 = new org.jsecurity.authz.AuthorizationException((java.lang.Throwable)var45);
    org.jsecurity.authz.AuthorizationException var47 = new org.jsecurity.authz.AuthorizationException("fa569031-d16a-4eec-aa4e-d71facfe348e", (java.lang.Throwable)var46);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var3);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var4);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var7);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var10);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var11);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var12);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var20);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var21);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var22);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var31);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var35 + "' != '" + "b3852d11-cd30-4171-91c6-4c2a108ce407"+ "'", var35.equals("b3852d11-cd30-4171-91c6-4c2a108ce407"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var36 + "' != '" + "b3852d11-cd30-4171-91c6-4c2a108ce407"+ "'", var36.equals("b3852d11-cd30-4171-91c6-4c2a108ce407"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var38 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var39 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var40 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var41);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var42 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var43);

  }

  public void test91() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest6.test91");


    org.jsecurity.session.UnknownSessionException var2 = new org.jsecurity.session.UnknownSessionException("dd\uFFFD", (java.io.Serializable)100.0f);
    org.jsecurity.config.ConfigurationException var3 = new org.jsecurity.config.ConfigurationException((java.lang.Throwable)var2);
    org.jsecurity.authc.LockedAccountException var4 = new org.jsecurity.authc.LockedAccountException((java.lang.Throwable)var3);

  }

  public void test92() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest6.test92");


    org.jsecurity.crypto.hash.Md5Hash var1 = org.jsecurity.crypto.hash.Md5Hash.fromBase64String("org.jsecurity.authc.IncorrectCredentialsException: \u0000\u0000");
    byte[] var3 = org.jsecurity.codec.CodecSupport.toBytes("dd\uFFFD");
    var1.setBytes(var3);
    char[] var5 = org.jsecurity.codec.Hex.encode(var3);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var1);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var3);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var5);

  }

  public void test93() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest6.test93");


    org.jsecurity.authc.pam.AllSuccessfulModularAuthenticationStrategy var0 = new org.jsecurity.authc.pam.AllSuccessfulModularAuthenticationStrategy();
    char[] var2 = new char[] { };
    org.jsecurity.authc.UsernamePasswordToken var4 = new org.jsecurity.authc.UsernamePasswordToken("hi!", var2, true);
    org.jsecurity.authc.SimpleAccount var5 = new org.jsecurity.authc.SimpleAccount();
    var5.setCredentialsExpired(false);
    boolean var8 = var5.isLocked();
    org.jsecurity.authc.AuthenticationInfo var9 = var0.afterAllAttempts((org.jsecurity.authc.AuthenticationToken)var4, (org.jsecurity.authc.AuthenticationInfo)var5);
    char[] var13 = new char[] { '4', '#'};
    org.jsecurity.authc.UsernamePasswordToken var14 = new org.jsecurity.authc.UsernamePasswordToken("\u0000\u0000", var13);
    org.jsecurity.authc.SimpleAccount var15 = new org.jsecurity.authc.SimpleAccount();
    var15.setCredentialsExpired(false);
    var15.setCredentialsExpired(false);
    boolean var20 = var15.isCredentialsExpired();
    org.jsecurity.authc.AuthenticationInfo var21 = var0.afterAllAttempts((org.jsecurity.authc.AuthenticationToken)var14, (org.jsecurity.authc.AuthenticationInfo)var15);
    org.jsecurity.realm.activedirectory.ActiveDirectoryRealm var22 = new org.jsecurity.realm.activedirectory.ActiveDirectoryRealm();
    org.jsecurity.authc.credential.Sha256CredentialsMatcher var23 = new org.jsecurity.authc.credential.Sha256CredentialsMatcher();
    var22.setCredentialsMatcher((org.jsecurity.authc.credential.CredentialsMatcher)var23);
    java.lang.String var25 = var22.getAuthorizationCacheName();
    org.jsecurity.authc.UsernamePasswordToken var26 = new org.jsecurity.authc.UsernamePasswordToken();
    java.lang.String var27 = var26.getUsername();
    java.lang.Object var28 = var26.getPrincipal();
    boolean var29 = var22.supports((org.jsecurity.authc.AuthenticationToken)var26);
    org.jsecurity.session.UnknownSessionException var33 = new org.jsecurity.session.UnknownSessionException("dd\uFFFD", (java.io.Serializable)100.0f);
    org.jsecurity.session.SessionException var35 = new org.jsecurity.session.SessionException("dd\uFFFD", (java.lang.Throwable)var33, (java.io.Serializable)0);
    org.jsecurity.authc.SimpleAuthenticationInfo var38 = new org.jsecurity.authc.SimpleAuthenticationInfo((java.lang.Object)0, (java.lang.Object)10, "hi!");
    java.lang.Object var39 = var38.getCredentials();
    java.lang.String var40 = var38.toString();
    org.jsecurity.authc.AuthenticationInfo var41 = var0.afterAllAttempts((org.jsecurity.authc.AuthenticationToken)var26, (org.jsecurity.authc.AuthenticationInfo)var38);
    char[] var45 = new char[] { ' ', ' '};
    org.jsecurity.authc.UsernamePasswordToken var46 = new org.jsecurity.authc.UsernamePasswordToken("hi!", var45);
    char[] var50 = new char[] { '4', '#'};
    org.jsecurity.authc.UsernamePasswordToken var51 = new org.jsecurity.authc.UsernamePasswordToken("\u0000\u0000", var50);
    var46.setPassword(var50);
    org.jsecurity.session.mgt.SimpleSession var53 = new org.jsecurity.session.mgt.SimpleSession();
    var53.setTimeout((-1L));
    org.jsecurity.session.mgt.SimpleSession var56 = new org.jsecurity.session.mgt.SimpleSession();
    java.util.Date var57 = var56.getLastAccessTime();
    var53.setLastAccessTime(var57);
    java.net.InetAddress var59 = var53.getHostAddress();
    var46.setInetAddress(var59);
    var26.setInetAddress(var59);
    java.lang.String var62 = var26.getUsername();
    java.lang.String var63 = var26.toString();
    org.jsecurity.authc.SimpleAuthenticationInfo var66 = new org.jsecurity.authc.SimpleAuthenticationInfo((java.lang.Object)var26, (java.lang.Object)"ae927f26-0f5d-42f6-b874-a7bf82cb71a2", "215ab769-9cb8-4898-aeea-426529d1962a");
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var2);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var8 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var9);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var13);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var20 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var21);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var25);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var27);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var28);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var29 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var39 + "' != '" + 10+ "'", var39.equals(10));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var41);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var45);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var50);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var57);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var59);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var62);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var63 + "' != '" + "org.jsecurity.authc.UsernamePasswordToken - null, rememberMe=false (Jeshs-iMac.local/192.168.2.1)"+ "'", var63.equals("org.jsecurity.authc.UsernamePasswordToken - null, rememberMe=false (Jeshs-iMac.local/192.168.2.1)"));

  }

  public void test94() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest6.test94");


    org.jsecurity.mgt.DefaultSecurityManager var0 = new org.jsecurity.mgt.DefaultSecurityManager();
    java.io.InputStream var2 = org.jsecurity.util.ClassUtils.getResourceAsStream("");
    java.lang.Object[] var3 = new java.lang.Object[] { var2};
    java.util.List var4 = org.jsecurity.util.CollectionUtils.asList(var3);
    org.jsecurity.authc.pam.ModularRealmAuthenticator var5 = new org.jsecurity.authc.pam.ModularRealmAuthenticator(var4);
    org.jsecurity.authc.pam.AllSuccessfulModularAuthenticationStrategy var6 = new org.jsecurity.authc.pam.AllSuccessfulModularAuthenticationStrategy();
    var5.setModularAuthenticationStrategy((org.jsecurity.authc.pam.ModularAuthenticationStrategy)var6);
    org.jsecurity.authz.SimpleAuthorizationInfo var8 = new org.jsecurity.authz.SimpleAuthorizationInfo();
    var8.addStringPermission("hi!");
    java.io.InputStream var12 = org.jsecurity.util.ClassUtils.getResourceAsStream("");
    java.lang.Object[] var13 = new java.lang.Object[] { var12};
    java.util.List var14 = org.jsecurity.util.CollectionUtils.asList(var13);
    var8.addRoles((java.util.Collection)var14);
    var5.setAuthenticationListeners((java.util.Collection)var14);
    var0.setSessionListeners((java.util.Collection)var14);
    org.jsecurity.authc.pam.ModularRealmAuthenticator var18 = new org.jsecurity.authc.pam.ModularRealmAuthenticator();
    org.jsecurity.authz.permission.InvalidPermissionStringException var21 = new org.jsecurity.authz.permission.InvalidPermissionStringException("", "dd\uFFFD");
    org.jsecurity.JSecurityException var23 = new org.jsecurity.JSecurityException("");
    org.jsecurity.authc.SimpleAuthenticationInfo var25 = new org.jsecurity.authc.SimpleAuthenticationInfo((java.lang.Object)var21, (java.lang.Object)"", "org.jsecurity.authz.UnauthorizedException: org.jsecurity.session.ExpiredSessionException: ");
    org.jsecurity.subject.PrincipalCollection var26 = var25.getPrincipals();
    var18.onLogout(var26);
    var0.setAuthenticator((org.jsecurity.authc.Authenticator)var18);
    org.jsecurity.codec.CodecException var31 = new org.jsecurity.codec.CodecException("dd\uFFFD");
    org.jsecurity.authc.ConcurrentAccessException var32 = new org.jsecurity.authc.ConcurrentAccessException("org.jsecurity.authz.UnauthorizedException: org.jsecurity.session.ExpiredSessionException: ", (java.lang.Throwable)var31);
    org.jsecurity.subject.SimplePrincipalCollection var34 = new org.jsecurity.subject.SimplePrincipalCollection((java.lang.Object)var31, "");
    org.jsecurity.authc.pam.FirstSuccessfulAuthenticationStrategy var35 = new org.jsecurity.authc.pam.FirstSuccessfulAuthenticationStrategy();
    org.jsecurity.authz.UnauthorizedException var37 = new org.jsecurity.authz.UnauthorizedException("org.jsecurity.config.ConfigurationException: dd\uFFFD");
    java.lang.Throwable[] var38 = var37.getSuppressed();
    java.util.List var39 = org.jsecurity.util.CollectionUtils.asList((java.lang.Object[])var38);
    org.jsecurity.authc.UsernamePasswordToken var40 = new org.jsecurity.authc.UsernamePasswordToken();
    java.lang.String var41 = var40.getUsername();
    java.net.InetAddress var42 = var40.getInetAddress();
    org.jsecurity.authc.AuthenticationInfo var43 = var35.beforeAllAttempts((java.util.Collection)var39, (org.jsecurity.authc.AuthenticationToken)var40);
    org.jsecurity.session.UnknownSessionException var48 = new org.jsecurity.session.UnknownSessionException("dd\uFFFD", (java.io.Serializable)100.0f);
    org.jsecurity.subject.SubjectException var49 = new org.jsecurity.subject.SubjectException("dd\uFFFD", (java.lang.Throwable)var48);
    org.jsecurity.io.SerializationException var50 = new org.jsecurity.io.SerializationException("", (java.lang.Throwable)var49);
    java.lang.Throwable[] var51 = var49.getSuppressed();
    java.util.Set var52 = org.jsecurity.util.CollectionUtils.asSet((java.lang.Object[])var51);
    org.jsecurity.authc.SimpleAccount var53 = new org.jsecurity.authc.SimpleAccount((org.jsecurity.subject.PrincipalCollection)var34, (java.lang.Object)var39, var52);
    java.io.InputStream var55 = org.jsecurity.util.ClassUtils.getResourceAsStream("");
    java.lang.Object[] var56 = new java.lang.Object[] { var55};
    java.util.List var57 = org.jsecurity.util.CollectionUtils.asList(var56);
    org.jsecurity.authc.pam.ModularRealmAuthenticator var58 = new org.jsecurity.authc.pam.ModularRealmAuthenticator(var57);
    org.jsecurity.subject.SimplePrincipalCollection var60 = new org.jsecurity.subject.SimplePrincipalCollection((java.util.Collection)var57, "org.jsecurity.authz.UnauthorizedException: org.jsecurity.session.ExpiredSessionException: ");
    org.jsecurity.io.ResourceException var64 = new org.jsecurity.io.ResourceException("hi!");
    org.jsecurity.authc.UnknownAccountException var65 = new org.jsecurity.authc.UnknownAccountException((java.lang.Throwable)var64);
    org.jsecurity.session.StoppedSessionException var66 = new org.jsecurity.session.StoppedSessionException("dd\uFFFD", (java.io.Serializable)var64);
    org.jsecurity.session.UnknownSessionException var67 = new org.jsecurity.session.UnknownSessionException("org.jsecurity.authz.UnauthorizedException: org.jsecurity.session.ExpiredSessionException: ", (java.lang.Throwable)var64);
    boolean var68 = var60.equals((java.lang.Object)var64);
    var34.addAll((org.jsecurity.subject.PrincipalCollection)var60);
    org.jsecurity.session.UnknownSessionException var74 = new org.jsecurity.session.UnknownSessionException("dd\uFFFD", (java.io.Serializable)100.0f);
    org.jsecurity.subject.SubjectException var75 = new org.jsecurity.subject.SubjectException("dd\uFFFD", (java.lang.Throwable)var74);
    org.jsecurity.io.SerializationException var76 = new org.jsecurity.io.SerializationException("", (java.lang.Throwable)var75);
    java.lang.Throwable[] var77 = var75.getSuppressed();
    java.util.List var78 = org.jsecurity.util.CollectionUtils.asList((java.lang.Object[])var77);
    boolean var79 = var0.isPermittedAll((org.jsecurity.subject.PrincipalCollection)var34, (java.util.Collection)var78);
    org.jsecurity.realm.text.PropertiesRealm var80 = new org.jsecurity.realm.text.PropertiesRealm();
    var0.setRealm((org.jsecurity.realm.Realm)var80);
    org.jsecurity.realm.text.PropertiesRealm var82 = new org.jsecurity.realm.text.PropertiesRealm();
    java.lang.String var83 = var82.getUserDefinitions();
    java.lang.String var84 = var82.getName();
    var82.setResourcePath("345d9036-762c-4f58-8690-c901bf299cde");
    var82.setResourcePath("a2b823b1e72eae2b727289df8a00a89df8a0bab6ad8a89c4c5c7a9b62a270000");
    var82.setResourcePath("bcd88f91-36fc-4824-97c3-1a752a1a4e71");
    var0.setAuthorizer((org.jsecurity.authz.Authorizer)var82);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var2);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var3);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var4);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var12);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var13);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var14);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var26);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var38);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var39);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var41);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var42);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var43);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var51);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var52);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var55);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var56);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var57);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var68 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var77);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var78);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var79 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var83);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var84 + "' != '" + "org.jsecurity.realm.text.PropertiesRealm_3875"+ "'", var84.equals("org.jsecurity.realm.text.PropertiesRealm_3875"));

  }

  public void test95() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest6.test95");


    org.jsecurity.io.IniResource var0 = new org.jsecurity.io.IniResource();
    org.jsecurity.config.ReflectionBuilder var1 = new org.jsecurity.config.ReflectionBuilder();
    org.jsecurity.io.IniResource var2 = new org.jsecurity.io.IniResource();
    var2.setCharsetName("org.jsecurity.authz.UnauthorizedException: org.jsecurity.session.ExpiredSessionException: ");
    java.util.Map var5 = var2.getSections();
    java.util.Map var6 = var1.buildObjects(var5);
    java.util.Map var7 = var1.getObjects();
    java.util.Map var8 = var1.getObjects();
    org.jsecurity.config.ReflectionBuilder var9 = new org.jsecurity.config.ReflectionBuilder();
    org.jsecurity.io.IniResource var10 = new org.jsecurity.io.IniResource();
    var10.setCharsetName("org.jsecurity.authz.UnauthorizedException: org.jsecurity.session.ExpiredSessionException: ");
    java.util.Map var13 = var10.getSections();
    java.util.Map var14 = var9.buildObjects(var13);
    java.util.Map var15 = var9.getObjects();
    java.util.Map var16 = var1.buildObjects(var15);
    var0.setSections(var16);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var5);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var6);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var7);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var8);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var13);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var14);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var15);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var16);

  }

  public void test96() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest6.test96");


    org.jsecurity.authz.SimpleRole var1 = new org.jsecurity.authz.SimpleRole("77ddc2f7-9066-46c8-b5f2-b99b8caec0fa");

  }

  public void test97() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest6.test97");


    org.jsecurity.codec.CodecException var2 = new org.jsecurity.codec.CodecException("dd\uFFFD");
    org.jsecurity.authc.ConcurrentAccessException var3 = new org.jsecurity.authc.ConcurrentAccessException("org.jsecurity.authz.UnauthorizedException: org.jsecurity.session.ExpiredSessionException: ", (java.lang.Throwable)var2);
    org.jsecurity.subject.SimplePrincipalCollection var5 = new org.jsecurity.subject.SimplePrincipalCollection((java.lang.Object)var2, "");
    char[] var9 = new char[] { };
    org.jsecurity.authc.UsernamePasswordToken var11 = new org.jsecurity.authc.UsernamePasswordToken("hi!", var9, true);
    org.jsecurity.authc.UsernamePasswordToken var12 = new org.jsecurity.authc.UsernamePasswordToken("\u0000\u0000", var9);
    org.jsecurity.session.mgt.SimpleSession var13 = new org.jsecurity.session.mgt.SimpleSession();
    var13.setTimeout((-1L));
    org.jsecurity.session.mgt.SimpleSession var16 = new org.jsecurity.session.mgt.SimpleSession();
    java.util.Date var17 = var16.getLastAccessTime();
    var13.setLastAccessTime(var17);
    java.net.InetAddress var19 = var13.getHostAddress();
    var12.setInetAddress(var19);
    org.jsecurity.session.mgt.SimpleSession var21 = new org.jsecurity.session.mgt.SimpleSession();
    var21.setTimeout((-1L));
    org.jsecurity.session.mgt.SimpleSession var24 = new org.jsecurity.session.mgt.SimpleSession();
    java.util.Date var25 = var24.getLastAccessTime();
    var21.setLastAccessTime(var25);
    org.jsecurity.session.mgt.SimpleSession var27 = new org.jsecurity.session.mgt.SimpleSession();
    java.util.Date var28 = var27.getLastAccessTime();
    var21.setStopTimestamp(var28);
    org.jsecurity.mgt.DefaultSecurityManager var30 = new org.jsecurity.mgt.DefaultSecurityManager();
    org.jsecurity.authc.pam.AllSuccessfulModularAuthenticationStrategy var31 = new org.jsecurity.authc.pam.AllSuccessfulModularAuthenticationStrategy();
    org.jsecurity.authc.pam.AllSuccessfulModularAuthenticationStrategy var32 = new org.jsecurity.authc.pam.AllSuccessfulModularAuthenticationStrategy();
    char[] var34 = new char[] { };
    org.jsecurity.authc.UsernamePasswordToken var36 = new org.jsecurity.authc.UsernamePasswordToken("hi!", var34, true);
    org.jsecurity.authc.SimpleAccount var37 = new org.jsecurity.authc.SimpleAccount();
    var37.setCredentialsExpired(false);
    boolean var40 = var37.isLocked();
    org.jsecurity.authc.AuthenticationInfo var41 = var32.afterAllAttempts((org.jsecurity.authc.AuthenticationToken)var36, (org.jsecurity.authc.AuthenticationInfo)var37);
    char[] var45 = new char[] { '4', '#'};
    org.jsecurity.authc.UsernamePasswordToken var46 = new org.jsecurity.authc.UsernamePasswordToken("\u0000\u0000", var45);
    org.jsecurity.authc.SimpleAccount var47 = new org.jsecurity.authc.SimpleAccount();
    var47.setCredentialsExpired(false);
    var47.setCredentialsExpired(false);
    boolean var52 = var47.isCredentialsExpired();
    org.jsecurity.authc.AuthenticationInfo var53 = var32.afterAllAttempts((org.jsecurity.authc.AuthenticationToken)var46, (org.jsecurity.authc.AuthenticationInfo)var47);
    org.jsecurity.authz.UnauthenticatedException var57 = new org.jsecurity.authz.UnauthenticatedException();
    org.jsecurity.config.UnresolveableReferenceException var58 = new org.jsecurity.config.UnresolveableReferenceException("", (java.lang.Throwable)var57);
    org.jsecurity.cache.CacheException var59 = new org.jsecurity.cache.CacheException("org.jsecurity.config.ConfigurationException: dd\uFFFD", (java.lang.Throwable)var57);
    org.jsecurity.authc.SimpleAuthenticationInfo var61 = new org.jsecurity.authc.SimpleAuthenticationInfo((java.lang.Object)"org.jsecurity.config.ConfigurationException: dd\uFFFD", (java.lang.Object)var59, "a2b823b1e72eae2b727289df8a00a89df8a0bab6ad8a89c4c5c7a9b62a270000");
    org.jsecurity.subject.PrincipalCollection var62 = var61.getPrincipals();
    org.jsecurity.authc.AuthenticationInfo var63 = var31.afterAllAttempts((org.jsecurity.authc.AuthenticationToken)var46, (org.jsecurity.authc.AuthenticationInfo)var61);
    var30.setModularAuthenticationStrategy((org.jsecurity.authc.pam.ModularAuthenticationStrategy)var31);
    org.jsecurity.subject.RememberMeManager var65 = var30.getRememberMeManager();
    org.jsecurity.authc.pam.ModularRealmAuthenticator var66 = new org.jsecurity.authc.pam.ModularRealmAuthenticator();
    var30.setAuthenticator((org.jsecurity.authc.Authenticator)var66);
    org.jsecurity.codec.CodecException var70 = new org.jsecurity.codec.CodecException("dd\uFFFD");
    org.jsecurity.authc.ConcurrentAccessException var71 = new org.jsecurity.authc.ConcurrentAccessException("org.jsecurity.authz.UnauthorizedException: org.jsecurity.session.ExpiredSessionException: ", (java.lang.Throwable)var70);
    org.jsecurity.subject.SimplePrincipalCollection var73 = new org.jsecurity.subject.SimplePrincipalCollection((java.lang.Object)var70, "");
    java.io.InputStream var75 = org.jsecurity.util.ClassUtils.getResourceAsStream("");
    java.lang.Object[] var76 = new java.lang.Object[] { var75};
    java.util.List var77 = org.jsecurity.util.CollectionUtils.asList(var76);
    org.jsecurity.authc.pam.ModularRealmAuthenticator var78 = new org.jsecurity.authc.pam.ModularRealmAuthenticator(var77);
    var73.addAll((java.util.Collection)var77, "\u0000\u0000");
    org.jsecurity.authc.pam.FirstSuccessfulAuthenticationStrategy var81 = new org.jsecurity.authc.pam.FirstSuccessfulAuthenticationStrategy();
    org.jsecurity.authz.UnauthorizedException var83 = new org.jsecurity.authz.UnauthorizedException("org.jsecurity.config.ConfigurationException: dd\uFFFD");
    java.lang.Throwable[] var84 = var83.getSuppressed();
    java.util.List var85 = org.jsecurity.util.CollectionUtils.asList((java.lang.Object[])var84);
    org.jsecurity.authc.UsernamePasswordToken var86 = new org.jsecurity.authc.UsernamePasswordToken();
    java.lang.String var87 = var86.getUsername();
    java.net.InetAddress var88 = var86.getInetAddress();
    org.jsecurity.authc.AuthenticationInfo var89 = var81.beforeAllAttempts((java.util.Collection)var85, (org.jsecurity.authc.AuthenticationToken)var86);
    var30.checkPermissions((org.jsecurity.subject.PrincipalCollection)var73, (java.util.Collection)var85);
    org.jsecurity.subject.DelegatingSubject var91 = new org.jsecurity.subject.DelegatingSubject((org.jsecurity.subject.PrincipalCollection)var5, false, var19, (org.jsecurity.session.Session)var21, (org.jsecurity.mgt.SecurityManager)var30);
    org.jsecurity.subject.Subject var92 = var30.getSubject();
    org.jsecurity.session.mgt.SessionManager var93 = var30.getSessionManager();
    org.jsecurity.authc.Authenticator var94 = var30.getAuthenticator();
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var9);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var17);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var19);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var25);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var28);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var34);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var40 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var41);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var45);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var52 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var53);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var62);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var63);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var65);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var75);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var76);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var77);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var84);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var85);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var87);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var88);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var89);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var92);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var93);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var94);

  }

  public void test98() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest6.test98");


    org.jsecurity.crypto.hash.Sha384Hash var1 = org.jsecurity.crypto.hash.Sha384Hash.fromBase64String("a201b21e-bf4d-4350-ad5c-67d111a0e38c");
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var1);

  }

  public void test99() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest6.test99");


    org.jsecurity.config.IniConfiguration var0 = new org.jsecurity.config.IniConfiguration();
    java.lang.String var1 = var0.getConfig();
    var0.setConfigUrl("cff098b5-6d79-4f6d-93d3-148185d0b987");
    var0.setConfigUrl("\u0000\u0000");
    var0.setConfigUrl("org.jsecurity.realm.text.PropertiesRealm-480-authorization");
    org.jsecurity.mgt.SecurityManager var8 = var0.getSecurityManager();
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var1);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var8);

  }

  public void test100() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest6.test100");


    org.jsecurity.realm.jndi.JndiRealmFactory var0 = new org.jsecurity.realm.jndi.JndiRealmFactory();
    java.io.InputStream var2 = org.jsecurity.util.ClassUtils.getResourceAsStream("");
    java.lang.Object[] var3 = new java.lang.Object[] { var2};
    java.util.List var4 = org.jsecurity.util.CollectionUtils.asList(var3);
    org.jsecurity.authc.pam.ModularRealmAuthenticator var5 = new org.jsecurity.authc.pam.ModularRealmAuthenticator(var4);
    org.jsecurity.authc.pam.AllSuccessfulModularAuthenticationStrategy var6 = new org.jsecurity.authc.pam.AllSuccessfulModularAuthenticationStrategy();
    var5.setModularAuthenticationStrategy((org.jsecurity.authc.pam.ModularAuthenticationStrategy)var6);
    org.jsecurity.authz.SimpleAuthorizationInfo var8 = new org.jsecurity.authz.SimpleAuthorizationInfo();
    var8.addStringPermission("hi!");
    java.io.InputStream var12 = org.jsecurity.util.ClassUtils.getResourceAsStream("");
    java.lang.Object[] var13 = new java.lang.Object[] { var12};
    java.util.List var14 = org.jsecurity.util.CollectionUtils.asList(var13);
    var8.addRoles((java.util.Collection)var14);
    var5.setAuthenticationListeners((java.util.Collection)var14);
    org.jsecurity.realm.activedirectory.ActiveDirectoryRealm var17 = new org.jsecurity.realm.activedirectory.ActiveDirectoryRealm();
    var17.setPrincipalSuffix("");
    var5.setRealm((org.jsecurity.realm.Realm)var17);
    org.jsecurity.authc.pam.FirstSuccessfulAuthenticationStrategy var21 = new org.jsecurity.authc.pam.FirstSuccessfulAuthenticationStrategy();
    org.jsecurity.authz.UnauthorizedException var23 = new org.jsecurity.authz.UnauthorizedException("org.jsecurity.config.ConfigurationException: dd\uFFFD");
    java.lang.Throwable[] var24 = var23.getSuppressed();
    java.util.List var25 = org.jsecurity.util.CollectionUtils.asList((java.lang.Object[])var24);
    org.jsecurity.authc.UsernamePasswordToken var26 = new org.jsecurity.authc.UsernamePasswordToken();
    java.lang.String var27 = var26.getUsername();
    java.net.InetAddress var28 = var26.getInetAddress();
    org.jsecurity.authc.AuthenticationInfo var29 = var21.beforeAllAttempts((java.util.Collection)var25, (org.jsecurity.authc.AuthenticationToken)var26);
    var5.setModularAuthenticationStrategy((org.jsecurity.authc.pam.ModularAuthenticationStrategy)var21);
    org.jsecurity.codec.CodecException var33 = new org.jsecurity.codec.CodecException("dd\uFFFD");
    org.jsecurity.authc.ConcurrentAccessException var34 = new org.jsecurity.authc.ConcurrentAccessException("org.jsecurity.authz.UnauthorizedException: org.jsecurity.session.ExpiredSessionException: ", (java.lang.Throwable)var33);
    org.jsecurity.subject.SimplePrincipalCollection var36 = new org.jsecurity.subject.SimplePrincipalCollection((java.lang.Object)var33, "");
    org.jsecurity.authc.pam.FirstSuccessfulAuthenticationStrategy var37 = new org.jsecurity.authc.pam.FirstSuccessfulAuthenticationStrategy();
    org.jsecurity.authz.UnauthorizedException var39 = new org.jsecurity.authz.UnauthorizedException("org.jsecurity.config.ConfigurationException: dd\uFFFD");
    java.lang.Throwable[] var40 = var39.getSuppressed();
    java.util.List var41 = org.jsecurity.util.CollectionUtils.asList((java.lang.Object[])var40);
    org.jsecurity.authc.UsernamePasswordToken var42 = new org.jsecurity.authc.UsernamePasswordToken();
    java.lang.String var43 = var42.getUsername();
    java.net.InetAddress var44 = var42.getInetAddress();
    org.jsecurity.authc.AuthenticationInfo var45 = var37.beforeAllAttempts((java.util.Collection)var41, (org.jsecurity.authc.AuthenticationToken)var42);
    org.jsecurity.session.UnknownSessionException var50 = new org.jsecurity.session.UnknownSessionException("dd\uFFFD", (java.io.Serializable)100.0f);
    org.jsecurity.subject.SubjectException var51 = new org.jsecurity.subject.SubjectException("dd\uFFFD", (java.lang.Throwable)var50);
    org.jsecurity.io.SerializationException var52 = new org.jsecurity.io.SerializationException("", (java.lang.Throwable)var51);
    java.lang.Throwable[] var53 = var51.getSuppressed();
    java.util.Set var54 = org.jsecurity.util.CollectionUtils.asSet((java.lang.Object[])var53);
    org.jsecurity.authc.SimpleAccount var55 = new org.jsecurity.authc.SimpleAccount((org.jsecurity.subject.PrincipalCollection)var36, (java.lang.Object)var41, var54);
    org.jsecurity.authc.pam.AllSuccessfulModularAuthenticationStrategy var56 = new org.jsecurity.authc.pam.AllSuccessfulModularAuthenticationStrategy();
    char[] var58 = new char[] { };
    org.jsecurity.authc.UsernamePasswordToken var60 = new org.jsecurity.authc.UsernamePasswordToken("hi!", var58, true);
    org.jsecurity.authc.SimpleAccount var61 = new org.jsecurity.authc.SimpleAccount();
    var61.setCredentialsExpired(false);
    boolean var64 = var61.isLocked();
    org.jsecurity.authc.AuthenticationInfo var65 = var56.afterAllAttempts((org.jsecurity.authc.AuthenticationToken)var60, (org.jsecurity.authc.AuthenticationInfo)var61);
    char[] var68 = new char[] { };
    org.jsecurity.authc.UsernamePasswordToken var70 = new org.jsecurity.authc.UsernamePasswordToken("hi!", var68, true);
    org.jsecurity.authc.UsernamePasswordToken var71 = new org.jsecurity.authc.UsernamePasswordToken("\u0000\u0000", var68);
    var60.setPassword(var68);
    org.jsecurity.authc.AuthenticationInfo var73 = var21.beforeAllAttempts((java.util.Collection)var41, (org.jsecurity.authc.AuthenticationToken)var60);
    org.jsecurity.authz.permission.WildcardPermissionResolver var74 = new org.jsecurity.authz.permission.WildcardPermissionResolver();
    org.jsecurity.authz.Permission var76 = var74.resolvePermission("hi!");
    org.jsecurity.authz.Permission var78 = var74.resolvePermission("hi!");
    java.util.Set var79 = org.jsecurity.util.PermissionUtils.resolvePermissions((java.util.Collection)var41, (org.jsecurity.authz.permission.PermissionResolver)var74);
    var0.setJndiNames((java.util.Collection)var79);
    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      java.util.Collection var81 = var0.getRealms();
      fail("Expected exception of type java.lang.IllegalStateException");
    } catch (java.lang.IllegalStateException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var2);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var3);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var4);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var12);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var13);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var14);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var24);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var25);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var27);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var28);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var29);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var40);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var41);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var43);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var44);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var45);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var53);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var54);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var58);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var64 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var65);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var68);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var73);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var76);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var78);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var79);

  }

  public void test101() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest6.test101");


    org.jsecurity.realm.jndi.JndiRealmFactory var0 = new org.jsecurity.realm.jndi.JndiRealmFactory();
    java.io.InputStream var2 = org.jsecurity.util.ClassUtils.getResourceAsStream("");
    java.lang.Object[] var3 = new java.lang.Object[] { var2};
    java.util.List var4 = org.jsecurity.util.CollectionUtils.asList(var3);
    var0.setJndiNames((java.util.Collection)var4);
    var0.setJndiNames("e23a02c5-2287-4daa-91c4-8efed2be0f73");
    java.util.Collection var8 = var0.getJndiNames();
    org.jsecurity.authz.SimpleAuthorizationInfo var9 = new org.jsecurity.authz.SimpleAuthorizationInfo();
    org.jsecurity.session.UnknownSessionException var14 = new org.jsecurity.session.UnknownSessionException("dd\uFFFD", (java.io.Serializable)100.0f);
    org.jsecurity.subject.SubjectException var15 = new org.jsecurity.subject.SubjectException("dd\uFFFD", (java.lang.Throwable)var14);
    org.jsecurity.io.SerializationException var16 = new org.jsecurity.io.SerializationException("", (java.lang.Throwable)var15);
    java.lang.Throwable[] var17 = var15.getSuppressed();
    java.util.Set var18 = org.jsecurity.util.CollectionUtils.asSet((java.lang.Object[])var17);
    var9.setStringPermissions(var18);
    var0.setJndiNames((java.util.Collection)var18);
    java.util.Collection var21 = var0.getJndiNames();
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var2);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var3);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var4);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var8);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var17);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var18);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var21);

  }

  public void test102() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest6.test102");


    org.jsecurity.session.mgt.DefaultSessionManager var0 = new org.jsecurity.session.mgt.DefaultSessionManager();
    org.jsecurity.mgt.DefaultSecurityManager var1 = new org.jsecurity.mgt.DefaultSecurityManager();
    org.jsecurity.authz.permission.WildcardPermissionResolver var2 = new org.jsecurity.authz.permission.WildcardPermissionResolver();
    var1.setPermissionResolver((org.jsecurity.authz.permission.PermissionResolver)var2);
    org.jsecurity.cache.CacheManager var4 = var1.getCacheManager();
    var0.setCacheManager(var4);
    long var6 = var0.getSessionValidationInterval();
    boolean var7 = var0.isSessionValidationSchedulerEnabled();
    var0.destroy();
    org.jsecurity.session.mgt.SimpleSession var9 = new org.jsecurity.session.mgt.SimpleSession();
    org.jsecurity.io.SerializationException var12 = new org.jsecurity.io.SerializationException("org.jsecurity.config.ConfigurationException: dd\uFFFD");
    org.jsecurity.authc.AccountException var13 = new org.jsecurity.authc.AccountException("a2b823b1e72eae2b727289df8a00a89df8a0bab6ad8a89c4c5c7a9b62a270000", (java.lang.Throwable)var12);
    var9.setId((java.io.Serializable)"a2b823b1e72eae2b727289df8a00a89df8a0bab6ad8a89c4c5c7a9b62a270000");
    org.jsecurity.config.ReflectionBuilder var15 = new org.jsecurity.config.ReflectionBuilder();
    org.jsecurity.config.ReflectionBuilder var16 = new org.jsecurity.config.ReflectionBuilder();
    org.jsecurity.io.IniResource var17 = new org.jsecurity.io.IniResource();
    var17.setCharsetName("org.jsecurity.authz.UnauthorizedException: org.jsecurity.session.ExpiredSessionException: ");
    java.util.Map var20 = var17.getSections();
    java.util.Map var21 = var16.buildObjects(var20);
    org.jsecurity.config.ReflectionBuilder var22 = new org.jsecurity.config.ReflectionBuilder();
    org.jsecurity.io.IniResource var23 = new org.jsecurity.io.IniResource();
    var23.setCharsetName("org.jsecurity.authz.UnauthorizedException: org.jsecurity.session.ExpiredSessionException: ");
    java.util.Map var26 = var23.getSections();
    java.util.Map var27 = var22.buildObjects(var26);
    java.util.Map var28 = var16.buildObjects(var27);
    java.util.Map var29 = var15.buildObjects(var28);
    var9.setAttributes(var29);
    java.net.InetAddress var31 = var9.getHostAddress();
    java.io.Serializable var32 = var0.start(var31);
    org.jsecurity.authz.HostUnauthorizedException var33 = new org.jsecurity.authz.HostUnauthorizedException(var31);
    org.jsecurity.session.mgt.eis.MemorySessionDAO var34 = new org.jsecurity.session.mgt.eis.MemorySessionDAO();
    org.jsecurity.cache.Cache var35 = var34.getActiveSessionsCache();
    var34.setActiveSessionsCacheName("dd\uFFFD");
    java.util.Collection var38 = var34.getActiveSessions();
    java.lang.String var39 = var34.getActiveSessionsCacheName();
    java.lang.String var40 = var34.getActiveSessionsCacheName();
    org.jsecurity.authz.SimpleAuthorizingAccount var42 = new org.jsecurity.authz.SimpleAuthorizingAccount((java.lang.Object)var31, (java.lang.Object)var40, "4854eb67-64de-45f3-aade-e631f39fbc7f");
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var4);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var6 == 3600000L);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var7 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var20);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var21);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var26);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var27);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var28);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var29);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var31);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var32 + "' != '" + "0fce7c4c-5715-4164-81a9-0b012a70a86b"+ "'", var32.equals("0fce7c4c-5715-4164-81a9-0b012a70a86b"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var35);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var38);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var39 + "' != '" + "dd\uFFFD"+ "'", var39.equals("dd\uFFFD"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var40 + "' != '" + "dd\uFFFD"+ "'", var40.equals("dd\uFFFD"));

  }

  public void test103() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest6.test103");


    org.jsecurity.authc.pam.AllSuccessfulModularAuthenticationStrategy var3 = new org.jsecurity.authc.pam.AllSuccessfulModularAuthenticationStrategy();
    char[] var5 = new char[] { };
    org.jsecurity.authc.UsernamePasswordToken var7 = new org.jsecurity.authc.UsernamePasswordToken("hi!", var5, true);
    org.jsecurity.authc.SimpleAccount var8 = new org.jsecurity.authc.SimpleAccount();
    var8.setCredentialsExpired(false);
    boolean var11 = var8.isLocked();
    org.jsecurity.authc.AuthenticationInfo var12 = var3.afterAllAttempts((org.jsecurity.authc.AuthenticationToken)var7, (org.jsecurity.authc.AuthenticationInfo)var8);
    char[] var16 = new char[] { '4', '#'};
    org.jsecurity.authc.UsernamePasswordToken var17 = new org.jsecurity.authc.UsernamePasswordToken("\u0000\u0000", var16);
    org.jsecurity.authc.SimpleAccount var18 = new org.jsecurity.authc.SimpleAccount();
    var18.setCredentialsExpired(false);
    var18.setCredentialsExpired(false);
    boolean var23 = var18.isCredentialsExpired();
    org.jsecurity.authc.AuthenticationInfo var24 = var3.afterAllAttempts((org.jsecurity.authc.AuthenticationToken)var17, (org.jsecurity.authc.AuthenticationInfo)var18);
    org.jsecurity.session.InvalidSessionException var25 = new org.jsecurity.session.InvalidSessionException("ZGT/", (java.io.Serializable)var17);
    org.jsecurity.authc.ExpiredCredentialsException var26 = new org.jsecurity.authc.ExpiredCredentialsException("7dd9d095-6c41-447c-a2f6-e2c6c8807c11", (java.lang.Throwable)var25);
    java.io.Serializable var27 = var25.getSessionId();
    org.jsecurity.io.ResourceException var28 = new org.jsecurity.io.ResourceException("534d81de-ee39-466d-b839-49671dee6c25", (java.lang.Throwable)var25);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var5);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var11 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var12);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var16);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var23 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var24);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var27);

  }

  public void test104() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest6.test104");


    boolean var1 = org.jsecurity.util.ClassUtils.isAvailable("\uFFFD\uFFFD\u0000");
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var1 == false);

  }

  public void test105() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest6.test105");


    java.lang.String[] var3 = org.jsecurity.util.StringUtils.split("dade3937-164f-46fa-a082-f5f54b3b44e1", ' ');
    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      java.lang.Object var4 = org.jsecurity.util.ClassUtils.newInstance("9ccad268-5b62-484e-bba2-311f114777dd", (java.lang.Object[])var3);
      fail("Expected exception of type org.jsecurity.util.UnknownClassException");
    } catch (org.jsecurity.util.UnknownClassException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var3);

  }

  public void test106() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest6.test106");


    org.jsecurity.realm.activedirectory.ActiveDirectoryRealm var0 = new org.jsecurity.realm.activedirectory.ActiveDirectoryRealm();
    org.jsecurity.authc.credential.Sha256CredentialsMatcher var1 = new org.jsecurity.authc.credential.Sha256CredentialsMatcher();
    var0.setCredentialsMatcher((org.jsecurity.authc.credential.CredentialsMatcher)var1);
    java.lang.String var3 = var0.getAuthorizationCacheName();
    var0.setUrl("hi!");
    org.jsecurity.realm.ldap.DefaultLdapContextFactory var6 = new org.jsecurity.realm.ldap.DefaultLdapContextFactory();
    var0.setLdapContextFactory((org.jsecurity.realm.ldap.LdapContextFactory)var6);
    org.jsecurity.config.ReflectionBuilder var8 = new org.jsecurity.config.ReflectionBuilder();
    org.jsecurity.io.IniResource var9 = new org.jsecurity.io.IniResource();
    var9.setCharsetName("org.jsecurity.authz.UnauthorizedException: org.jsecurity.session.ExpiredSessionException: ");
    java.util.Map var12 = var9.getSections();
    java.util.Map var13 = var8.buildObjects(var12);
    org.jsecurity.config.ReflectionBuilder var14 = new org.jsecurity.config.ReflectionBuilder();
    org.jsecurity.io.IniResource var15 = new org.jsecurity.io.IniResource();
    var15.setCharsetName("org.jsecurity.authz.UnauthorizedException: org.jsecurity.session.ExpiredSessionException: ");
    java.util.Map var18 = var15.getSections();
    java.util.Map var19 = var14.buildObjects(var18);
    java.util.Map var20 = var8.buildObjects(var19);
    java.util.Map var21 = var8.getObjects();
    var6.setAdditionalEnvironment(var21);
    var6.setReferral("NfxhYN7ItBfRAmDBmprtU73ghfEEPpcDJrHPkZ06wiY=");
    var6.setSearchBase("ff68c978-9c6a-4e92-8f51-9959805afd36");
    var6.setSystemPassword("QzXpDZSfjjJUpGJc6nnkGQp4loZSAnOxZJSu5IzgpmrfcDFf8bzV/5XmrcPMyQXV");
    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      javax.naming.ldap.LdapContext var29 = var6.getSystemLdapContext();
      fail("Expected exception of type java.lang.IllegalStateException");
    } catch (java.lang.IllegalStateException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var3);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var12);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var13);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var18);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var19);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var20);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var21);

  }

  public void test107() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest6.test107");


    org.jsecurity.session.mgt.eis.MemorySessionDAO var0 = new org.jsecurity.session.mgt.eis.MemorySessionDAO();
    org.jsecurity.cache.Cache var1 = var0.getActiveSessionsCache();
    org.jsecurity.cache.CacheManager var2 = var0.getCacheManager();
    org.jsecurity.cache.HashtableCacheManager var3 = new org.jsecurity.cache.HashtableCacheManager();
    org.jsecurity.cache.Cache var5 = var3.getCache("\u0000\u0000");
    var0.setActiveSessionsCache(var5);
    java.io.InputStream var8 = org.jsecurity.util.ClassUtils.getResourceAsStream("");
    java.lang.Object[] var9 = new java.lang.Object[] { var8};
    java.util.List var10 = org.jsecurity.util.CollectionUtils.asList(var9);
    org.jsecurity.authc.pam.ModularRealmAuthenticator var11 = new org.jsecurity.authc.pam.ModularRealmAuthenticator(var10);
    org.jsecurity.authc.pam.AllSuccessfulModularAuthenticationStrategy var12 = new org.jsecurity.authc.pam.AllSuccessfulModularAuthenticationStrategy();
    var11.setModularAuthenticationStrategy((org.jsecurity.authc.pam.ModularAuthenticationStrategy)var12);
    org.jsecurity.authz.SimpleAuthorizationInfo var14 = new org.jsecurity.authz.SimpleAuthorizationInfo();
    var14.addStringPermission("hi!");
    java.io.InputStream var18 = org.jsecurity.util.ClassUtils.getResourceAsStream("");
    java.lang.Object[] var19 = new java.lang.Object[] { var18};
    java.util.List var20 = org.jsecurity.util.CollectionUtils.asList(var19);
    var14.addRoles((java.util.Collection)var20);
    var11.setAuthenticationListeners((java.util.Collection)var20);
    org.jsecurity.realm.activedirectory.ActiveDirectoryRealm var23 = new org.jsecurity.realm.activedirectory.ActiveDirectoryRealm();
    var23.setPrincipalSuffix("");
    var11.setRealm((org.jsecurity.realm.Realm)var23);
    org.jsecurity.cache.HashtableCacheManager var27 = new org.jsecurity.cache.HashtableCacheManager();
    org.jsecurity.cache.Cache var29 = var27.getCache("\u0000\u0000");
    var23.setAuthorizationCache(var29);
    var0.setActiveSessionsCache(var29);
    org.jsecurity.session.mgt.SimpleSession var32 = new org.jsecurity.session.mgt.SimpleSession();
    java.io.Serializable var33 = var0.create((org.jsecurity.session.Session)var32);
    org.jsecurity.cache.Cache var34 = var0.getActiveSessionsCache();
    org.jsecurity.cache.CacheManager var35 = var0.getCacheManager();
    org.jsecurity.session.UnknownSessionException var42 = new org.jsecurity.session.UnknownSessionException("dd\uFFFD", (java.io.Serializable)100.0f);
    org.jsecurity.session.SessionException var44 = new org.jsecurity.session.SessionException("dd\uFFFD", (java.lang.Throwable)var42, (java.io.Serializable)0);
    org.jsecurity.session.SessionException var45 = new org.jsecurity.session.SessionException("dd\uFFFD", (java.lang.Throwable)var42);
    java.io.Serializable var46 = var45.getSessionId();
    org.jsecurity.io.ResourceException var47 = new org.jsecurity.io.ResourceException("org.jsecurity.realm.SimpleAccountRealm-55-authorization", (java.lang.Throwable)var45);
    org.jsecurity.JSecurityException var48 = new org.jsecurity.JSecurityException("org.jsecurity.realm.text.TextConfigurationRealm_445", (java.lang.Throwable)var45);
    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      org.jsecurity.session.Session var49 = var0.readSession((java.io.Serializable)"org.jsecurity.realm.text.TextConfigurationRealm_445");
      fail("Expected exception of type org.jsecurity.session.UnknownSessionException");
    } catch (org.jsecurity.session.UnknownSessionException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var1);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var2);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var5);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var8);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var9);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var10);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var18);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var19);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var20);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var29);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var33 + "' != '" + "1042edd4-d6bf-4949-aade-5fccc7ecea46"+ "'", var33.equals("1042edd4-d6bf-4949-aade-5fccc7ecea46"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var34);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var35);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var46);

  }

  public void test108() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest6.test108");


    org.jsecurity.realm.jndi.JndiRealmFactory var0 = new org.jsecurity.realm.jndi.JndiRealmFactory();
    java.util.Collection var1 = var0.getJndiNames();
    var0.setJndiNames("e8e5d499-33c0-418e-93f9-76a51372c414");
    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      java.util.Collection var4 = var0.getRealms();
      fail("Expected exception of type java.lang.IllegalStateException");
    } catch (java.lang.IllegalStateException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var1);

  }

  public void test109() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest6.test109");


    org.jsecurity.authc.pam.UnsupportedTokenException var1 = new org.jsecurity.authc.pam.UnsupportedTokenException("1b39de25-f16c-4a9d-b9fb-4d288c458953");

  }

  public void test110() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest6.test110");


    org.jsecurity.session.mgt.eis.MemorySessionDAO var0 = new org.jsecurity.session.mgt.eis.MemorySessionDAO();
    org.jsecurity.cache.Cache var1 = var0.getActiveSessionsCache();
    org.jsecurity.cache.CacheManager var2 = var0.getCacheManager();
    org.jsecurity.cache.HashtableCacheManager var3 = new org.jsecurity.cache.HashtableCacheManager();
    org.jsecurity.cache.Cache var5 = var3.getCache("\u0000\u0000");
    var0.setActiveSessionsCache(var5);
    java.io.InputStream var8 = org.jsecurity.util.ClassUtils.getResourceAsStream("");
    java.lang.Object[] var9 = new java.lang.Object[] { var8};
    java.util.List var10 = org.jsecurity.util.CollectionUtils.asList(var9);
    org.jsecurity.authc.pam.ModularRealmAuthenticator var11 = new org.jsecurity.authc.pam.ModularRealmAuthenticator(var10);
    org.jsecurity.authc.pam.AllSuccessfulModularAuthenticationStrategy var12 = new org.jsecurity.authc.pam.AllSuccessfulModularAuthenticationStrategy();
    var11.setModularAuthenticationStrategy((org.jsecurity.authc.pam.ModularAuthenticationStrategy)var12);
    org.jsecurity.authz.SimpleAuthorizationInfo var14 = new org.jsecurity.authz.SimpleAuthorizationInfo();
    var14.addStringPermission("hi!");
    java.io.InputStream var18 = org.jsecurity.util.ClassUtils.getResourceAsStream("");
    java.lang.Object[] var19 = new java.lang.Object[] { var18};
    java.util.List var20 = org.jsecurity.util.CollectionUtils.asList(var19);
    var14.addRoles((java.util.Collection)var20);
    var11.setAuthenticationListeners((java.util.Collection)var20);
    org.jsecurity.realm.activedirectory.ActiveDirectoryRealm var23 = new org.jsecurity.realm.activedirectory.ActiveDirectoryRealm();
    var23.setPrincipalSuffix("");
    var11.setRealm((org.jsecurity.realm.Realm)var23);
    org.jsecurity.cache.HashtableCacheManager var27 = new org.jsecurity.cache.HashtableCacheManager();
    org.jsecurity.cache.Cache var29 = var27.getCache("\u0000\u0000");
    var23.setAuthorizationCache(var29);
    var0.setActiveSessionsCache(var29);
    org.jsecurity.session.mgt.SimpleSession var32 = new org.jsecurity.session.mgt.SimpleSession();
    java.io.Serializable var33 = var0.create((org.jsecurity.session.Session)var32);
    org.jsecurity.session.mgt.SimpleSession var34 = new org.jsecurity.session.mgt.SimpleSession();
    var34.touch();
    var34.validate();
    org.jsecurity.session.mgt.SimpleSession var37 = new org.jsecurity.session.mgt.SimpleSession();
    var37.setTimeout((-1L));
    org.jsecurity.session.mgt.SimpleSession var40 = new org.jsecurity.session.mgt.SimpleSession();
    java.util.Date var41 = var40.getLastAccessTime();
    var37.setLastAccessTime(var41);
    org.jsecurity.session.mgt.SimpleSession var43 = new org.jsecurity.session.mgt.SimpleSession();
    java.util.Date var44 = var43.getLastAccessTime();
    var37.setStopTimestamp(var44);
    var34.setLastAccessTime(var44);
    var32.setLastAccessTime(var44);
    org.jsecurity.session.mgt.ImmutableProxiedSession var48 = new org.jsecurity.session.mgt.ImmutableProxiedSession((org.jsecurity.session.Session)var32);
    java.util.Date var49 = var48.getStartTimestamp();
    java.util.Date var50 = var48.getStartTimestamp();
    java.util.Date var51 = var48.getLastAccessTime();
    long var52 = var48.getTimeout();
    java.util.Date var53 = var48.getStartTimestamp();
    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      var48.touch();
      fail("Expected exception of type org.jsecurity.session.InvalidSessionException");
    } catch (org.jsecurity.session.InvalidSessionException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var1);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var2);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var5);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var8);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var9);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var10);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var18);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var19);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var20);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var29);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var33 + "' != '" + "d6c278bf-9952-4bf0-b5e9-7ac0d4c8ee08"+ "'", var33.equals("d6c278bf-9952-4bf0-b5e9-7ac0d4c8ee08"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var41);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var44);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var49);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var50);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var51);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var52 == 1800000L);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var53);

  }

  public void test111() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest6.test111");


    org.jsecurity.codec.CodecException var2 = new org.jsecurity.codec.CodecException("dd\uFFFD");
    org.jsecurity.authc.ConcurrentAccessException var3 = new org.jsecurity.authc.ConcurrentAccessException("org.jsecurity.authz.UnauthorizedException: org.jsecurity.session.ExpiredSessionException: ", (java.lang.Throwable)var2);
    org.jsecurity.subject.SimplePrincipalCollection var5 = new org.jsecurity.subject.SimplePrincipalCollection((java.lang.Object)var2, "");
    char[] var9 = new char[] { };
    org.jsecurity.authc.UsernamePasswordToken var11 = new org.jsecurity.authc.UsernamePasswordToken("hi!", var9, true);
    org.jsecurity.authc.UsernamePasswordToken var12 = new org.jsecurity.authc.UsernamePasswordToken("\u0000\u0000", var9);
    org.jsecurity.session.mgt.SimpleSession var13 = new org.jsecurity.session.mgt.SimpleSession();
    var13.setTimeout((-1L));
    org.jsecurity.session.mgt.SimpleSession var16 = new org.jsecurity.session.mgt.SimpleSession();
    java.util.Date var17 = var16.getLastAccessTime();
    var13.setLastAccessTime(var17);
    java.net.InetAddress var19 = var13.getHostAddress();
    var12.setInetAddress(var19);
    org.jsecurity.session.mgt.SimpleSession var21 = new org.jsecurity.session.mgt.SimpleSession();
    var21.setTimeout((-1L));
    org.jsecurity.session.mgt.SimpleSession var24 = new org.jsecurity.session.mgt.SimpleSession();
    java.util.Date var25 = var24.getLastAccessTime();
    var21.setLastAccessTime(var25);
    org.jsecurity.session.mgt.SimpleSession var27 = new org.jsecurity.session.mgt.SimpleSession();
    java.util.Date var28 = var27.getLastAccessTime();
    var21.setStopTimestamp(var28);
    org.jsecurity.mgt.DefaultSecurityManager var30 = new org.jsecurity.mgt.DefaultSecurityManager();
    org.jsecurity.authc.pam.AllSuccessfulModularAuthenticationStrategy var31 = new org.jsecurity.authc.pam.AllSuccessfulModularAuthenticationStrategy();
    org.jsecurity.authc.pam.AllSuccessfulModularAuthenticationStrategy var32 = new org.jsecurity.authc.pam.AllSuccessfulModularAuthenticationStrategy();
    char[] var34 = new char[] { };
    org.jsecurity.authc.UsernamePasswordToken var36 = new org.jsecurity.authc.UsernamePasswordToken("hi!", var34, true);
    org.jsecurity.authc.SimpleAccount var37 = new org.jsecurity.authc.SimpleAccount();
    var37.setCredentialsExpired(false);
    boolean var40 = var37.isLocked();
    org.jsecurity.authc.AuthenticationInfo var41 = var32.afterAllAttempts((org.jsecurity.authc.AuthenticationToken)var36, (org.jsecurity.authc.AuthenticationInfo)var37);
    char[] var45 = new char[] { '4', '#'};
    org.jsecurity.authc.UsernamePasswordToken var46 = new org.jsecurity.authc.UsernamePasswordToken("\u0000\u0000", var45);
    org.jsecurity.authc.SimpleAccount var47 = new org.jsecurity.authc.SimpleAccount();
    var47.setCredentialsExpired(false);
    var47.setCredentialsExpired(false);
    boolean var52 = var47.isCredentialsExpired();
    org.jsecurity.authc.AuthenticationInfo var53 = var32.afterAllAttempts((org.jsecurity.authc.AuthenticationToken)var46, (org.jsecurity.authc.AuthenticationInfo)var47);
    org.jsecurity.authz.UnauthenticatedException var57 = new org.jsecurity.authz.UnauthenticatedException();
    org.jsecurity.config.UnresolveableReferenceException var58 = new org.jsecurity.config.UnresolveableReferenceException("", (java.lang.Throwable)var57);
    org.jsecurity.cache.CacheException var59 = new org.jsecurity.cache.CacheException("org.jsecurity.config.ConfigurationException: dd\uFFFD", (java.lang.Throwable)var57);
    org.jsecurity.authc.SimpleAuthenticationInfo var61 = new org.jsecurity.authc.SimpleAuthenticationInfo((java.lang.Object)"org.jsecurity.config.ConfigurationException: dd\uFFFD", (java.lang.Object)var59, "a2b823b1e72eae2b727289df8a00a89df8a0bab6ad8a89c4c5c7a9b62a270000");
    org.jsecurity.subject.PrincipalCollection var62 = var61.getPrincipals();
    org.jsecurity.authc.AuthenticationInfo var63 = var31.afterAllAttempts((org.jsecurity.authc.AuthenticationToken)var46, (org.jsecurity.authc.AuthenticationInfo)var61);
    var30.setModularAuthenticationStrategy((org.jsecurity.authc.pam.ModularAuthenticationStrategy)var31);
    org.jsecurity.subject.RememberMeManager var65 = var30.getRememberMeManager();
    org.jsecurity.authc.pam.ModularRealmAuthenticator var66 = new org.jsecurity.authc.pam.ModularRealmAuthenticator();
    var30.setAuthenticator((org.jsecurity.authc.Authenticator)var66);
    org.jsecurity.codec.CodecException var70 = new org.jsecurity.codec.CodecException("dd\uFFFD");
    org.jsecurity.authc.ConcurrentAccessException var71 = new org.jsecurity.authc.ConcurrentAccessException("org.jsecurity.authz.UnauthorizedException: org.jsecurity.session.ExpiredSessionException: ", (java.lang.Throwable)var70);
    org.jsecurity.subject.SimplePrincipalCollection var73 = new org.jsecurity.subject.SimplePrincipalCollection((java.lang.Object)var70, "");
    java.io.InputStream var75 = org.jsecurity.util.ClassUtils.getResourceAsStream("");
    java.lang.Object[] var76 = new java.lang.Object[] { var75};
    java.util.List var77 = org.jsecurity.util.CollectionUtils.asList(var76);
    org.jsecurity.authc.pam.ModularRealmAuthenticator var78 = new org.jsecurity.authc.pam.ModularRealmAuthenticator(var77);
    var73.addAll((java.util.Collection)var77, "\u0000\u0000");
    org.jsecurity.authc.pam.FirstSuccessfulAuthenticationStrategy var81 = new org.jsecurity.authc.pam.FirstSuccessfulAuthenticationStrategy();
    org.jsecurity.authz.UnauthorizedException var83 = new org.jsecurity.authz.UnauthorizedException("org.jsecurity.config.ConfigurationException: dd\uFFFD");
    java.lang.Throwable[] var84 = var83.getSuppressed();
    java.util.List var85 = org.jsecurity.util.CollectionUtils.asList((java.lang.Object[])var84);
    org.jsecurity.authc.UsernamePasswordToken var86 = new org.jsecurity.authc.UsernamePasswordToken();
    java.lang.String var87 = var86.getUsername();
    java.net.InetAddress var88 = var86.getInetAddress();
    org.jsecurity.authc.AuthenticationInfo var89 = var81.beforeAllAttempts((java.util.Collection)var85, (org.jsecurity.authc.AuthenticationToken)var86);
    var30.checkPermissions((org.jsecurity.subject.PrincipalCollection)var73, (java.util.Collection)var85);
    org.jsecurity.subject.DelegatingSubject var91 = new org.jsecurity.subject.DelegatingSubject((org.jsecurity.subject.PrincipalCollection)var5, false, var19, (org.jsecurity.session.Session)var21, (org.jsecurity.mgt.SecurityManager)var30);
    var91.logout();
    boolean var94 = var91.isPermitted("c88beeba-81c4-4196-82b6-97784ab62fef");
    boolean var95 = var91.isAuthenticated();
    org.jsecurity.session.Session var97 = var91.getSession(false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var9);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var17);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var19);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var25);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var28);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var34);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var40 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var41);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var45);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var52 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var53);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var62);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var63);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var65);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var75);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var76);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var77);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var84);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var85);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var87);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var88);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var89);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var94 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var95 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var97);

  }

  public void test112() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest6.test112");


    org.jsecurity.session.mgt.eis.MemorySessionDAO var0 = new org.jsecurity.session.mgt.eis.MemorySessionDAO();
    org.jsecurity.cache.Cache var1 = var0.getActiveSessionsCache();
    org.jsecurity.cache.CacheManager var2 = var0.getCacheManager();
    org.jsecurity.cache.HashtableCacheManager var3 = new org.jsecurity.cache.HashtableCacheManager();
    org.jsecurity.cache.Cache var5 = var3.getCache("\u0000\u0000");
    var0.setActiveSessionsCache(var5);
    java.io.InputStream var8 = org.jsecurity.util.ClassUtils.getResourceAsStream("");
    java.lang.Object[] var9 = new java.lang.Object[] { var8};
    java.util.List var10 = org.jsecurity.util.CollectionUtils.asList(var9);
    org.jsecurity.authc.pam.ModularRealmAuthenticator var11 = new org.jsecurity.authc.pam.ModularRealmAuthenticator(var10);
    org.jsecurity.authc.pam.AllSuccessfulModularAuthenticationStrategy var12 = new org.jsecurity.authc.pam.AllSuccessfulModularAuthenticationStrategy();
    var11.setModularAuthenticationStrategy((org.jsecurity.authc.pam.ModularAuthenticationStrategy)var12);
    org.jsecurity.authz.SimpleAuthorizationInfo var14 = new org.jsecurity.authz.SimpleAuthorizationInfo();
    var14.addStringPermission("hi!");
    java.io.InputStream var18 = org.jsecurity.util.ClassUtils.getResourceAsStream("");
    java.lang.Object[] var19 = new java.lang.Object[] { var18};
    java.util.List var20 = org.jsecurity.util.CollectionUtils.asList(var19);
    var14.addRoles((java.util.Collection)var20);
    var11.setAuthenticationListeners((java.util.Collection)var20);
    org.jsecurity.realm.activedirectory.ActiveDirectoryRealm var23 = new org.jsecurity.realm.activedirectory.ActiveDirectoryRealm();
    var23.setPrincipalSuffix("");
    var11.setRealm((org.jsecurity.realm.Realm)var23);
    org.jsecurity.cache.HashtableCacheManager var27 = new org.jsecurity.cache.HashtableCacheManager();
    org.jsecurity.cache.Cache var29 = var27.getCache("\u0000\u0000");
    var23.setAuthorizationCache(var29);
    var0.setActiveSessionsCache(var29);
    org.jsecurity.session.mgt.SimpleSession var32 = new org.jsecurity.session.mgt.SimpleSession();
    java.io.Serializable var33 = var0.create((org.jsecurity.session.Session)var32);
    org.jsecurity.session.mgt.SimpleSession var34 = new org.jsecurity.session.mgt.SimpleSession();
    var34.touch();
    var34.validate();
    org.jsecurity.session.mgt.SimpleSession var37 = new org.jsecurity.session.mgt.SimpleSession();
    var37.setTimeout((-1L));
    org.jsecurity.session.mgt.SimpleSession var40 = new org.jsecurity.session.mgt.SimpleSession();
    java.util.Date var41 = var40.getLastAccessTime();
    var37.setLastAccessTime(var41);
    org.jsecurity.session.mgt.SimpleSession var43 = new org.jsecurity.session.mgt.SimpleSession();
    java.util.Date var44 = var43.getLastAccessTime();
    var37.setStopTimestamp(var44);
    var34.setLastAccessTime(var44);
    var32.setLastAccessTime(var44);
    org.jsecurity.session.mgt.ImmutableProxiedSession var48 = new org.jsecurity.session.mgt.ImmutableProxiedSession((org.jsecurity.session.Session)var32);
    org.jsecurity.session.ProxiedSession var49 = new org.jsecurity.session.ProxiedSession((org.jsecurity.session.Session)var32);
    org.jsecurity.crypto.hash.Md2Hash var52 = org.jsecurity.crypto.hash.Md2Hash.fromBase64String("a2b823b1e72eae2b727289df8a00a89df8a0bab6ad8a89c4c5c7a9b62a270000");
    org.jsecurity.authc.credential.Md2CredentialsMatcher var53 = new org.jsecurity.authc.credential.Md2CredentialsMatcher();
    org.jsecurity.authz.SimpleAuthorizingAccount var55 = new org.jsecurity.authz.SimpleAuthorizingAccount((java.lang.Object)"a2b823b1e72eae2b727289df8a00a89df8a0bab6ad8a89c4c5c7a9b62a270000", (java.lang.Object)var53, "");
    org.jsecurity.session.SessionException var56 = new org.jsecurity.session.SessionException("org.jsecurity.realm.SimpleAccountRealm-9-authorization", (java.io.Serializable)var55);
    org.jsecurity.session.mgt.ExecutorServiceSessionValidationScheduler var57 = new org.jsecurity.session.mgt.ExecutorServiceSessionValidationScheduler();
    var49.setAttribute((java.lang.Object)var56, (java.lang.Object)var57);
    java.util.Date var59 = var49.getLastAccessTime();
    java.util.Date var60 = var49.getStartTimestamp();
    org.jsecurity.authz.SimpleRole var62 = new org.jsecurity.authz.SimpleRole();
    org.jsecurity.authz.permission.WildcardPermission var65 = new org.jsecurity.authz.permission.WildcardPermission("hi!", false);
    boolean var66 = var62.isPermitted((org.jsecurity.authz.Permission)var65);
    org.jsecurity.session.InvalidSessionException var67 = new org.jsecurity.session.InvalidSessionException("org.jsecurity.config.ConfigurationException: dd\uFFFD", (java.io.Serializable)var65);
    org.jsecurity.authz.SimpleRole var68 = new org.jsecurity.authz.SimpleRole();
    org.jsecurity.authz.permission.WildcardPermission var71 = new org.jsecurity.authz.permission.WildcardPermission("hi!", false);
    boolean var72 = var68.isPermitted((org.jsecurity.authz.Permission)var71);
    boolean var73 = var65.implies((org.jsecurity.authz.Permission)var71);
    org.jsecurity.session.InvalidSessionException var76 = new org.jsecurity.session.InvalidSessionException("dd\uFFFD");
    org.jsecurity.io.SerializationException var77 = new org.jsecurity.io.SerializationException("71af6ede-8cd3-4a28-b912-ba356a7ec0b6", (java.lang.Throwable)var76);
    org.jsecurity.util.UnknownClassException var78 = new org.jsecurity.util.UnknownClassException((java.lang.Throwable)var77);
    var49.setAttribute((java.lang.Object)var71, (java.lang.Object)var77);
    java.io.Serializable var80 = var49.getId();
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var1);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var2);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var5);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var8);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var9);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var10);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var18);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var19);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var20);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var29);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var33 + "' != '" + "820589d2-5441-4e12-86af-31f7e4fa8970"+ "'", var33.equals("820589d2-5441-4e12-86af-31f7e4fa8970"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var41);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var44);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var52);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var59);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var60);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var66 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var72 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var73 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var80 + "' != '" + "820589d2-5441-4e12-86af-31f7e4fa8970"+ "'", var80.equals("820589d2-5441-4e12-86af-31f7e4fa8970"));

  }

  public void test113() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest6.test113");


    org.jsecurity.realm.text.PropertiesRealm var0 = new org.jsecurity.realm.text.PropertiesRealm();
    var0.setRoleDefinitions("5dd0c65d-1422-49c2-becb-9e8dca619ab3");
    java.lang.String var3 = var0.getUserDefinitions();
    var0.setName("e23a02c5-2287-4daa-91c4-8efed2be0f73");
    var0.setResourcePath("69d3a52f-a464-4f98-8253-2a105929a356");
    org.jsecurity.realm.text.TextConfigurationRealm var9 = new org.jsecurity.realm.text.TextConfigurationRealm();
    java.io.InputStream var11 = org.jsecurity.util.ClassUtils.getResourceAsStream("");
    java.lang.Object[] var12 = new java.lang.Object[] { var11};
    java.util.List var13 = org.jsecurity.util.CollectionUtils.asList(var12);
    org.jsecurity.authc.pam.ModularRealmAuthenticator var14 = new org.jsecurity.authc.pam.ModularRealmAuthenticator(var13);
    org.jsecurity.subject.SimplePrincipalCollection var16 = new org.jsecurity.subject.SimplePrincipalCollection((java.util.Collection)var13, "org.jsecurity.authz.UnauthorizedException: org.jsecurity.session.ExpiredSessionException: ");
    org.jsecurity.session.UnknownSessionException var21 = new org.jsecurity.session.UnknownSessionException("dd\uFFFD", (java.io.Serializable)100.0f);
    org.jsecurity.session.SessionException var23 = new org.jsecurity.session.SessionException("dd\uFFFD", (java.lang.Throwable)var21, (java.io.Serializable)0);
    org.jsecurity.session.SessionException var24 = new org.jsecurity.session.SessionException("dd\uFFFD", (java.lang.Throwable)var21);
    var16.add((java.lang.Object)var24, "org.jsecurity.config.ConfigurationException: dd\uFFFD");
    var9.onLogout((org.jsecurity.subject.PrincipalCollection)var16);
    java.util.Set var29 = org.jsecurity.util.PermissionUtils.toPermissionStrings("org.jsecurity.config.ConfigurationException: dd\uFFFD");
    org.jsecurity.authz.SimpleAuthorizationInfo var30 = new org.jsecurity.authz.SimpleAuthorizationInfo(var29);
    org.jsecurity.authz.SimpleAuthorizingAccount var31 = new org.jsecurity.authz.SimpleAuthorizingAccount((org.jsecurity.subject.PrincipalCollection)var16, (java.lang.Object)var29);
    org.jsecurity.session.StoppedSessionException var32 = new org.jsecurity.session.StoppedSessionException("org.jsecurity.realm.SimpleAccountRealm-55-authorization", (java.io.Serializable)var16);
    org.jsecurity.realm.activedirectory.ActiveDirectoryRealm var33 = new org.jsecurity.realm.activedirectory.ActiveDirectoryRealm();
    var33.init();
    var33.setSystemPassword("dd\uFFFD");
    org.jsecurity.authz.aop.GuestAnnotationHandler var37 = new org.jsecurity.authz.aop.GuestAnnotationHandler();
    java.lang.Class var38 = var37.getAnnotationClass();
    var33.setAuthenticationTokenClass(var38);
    java.util.Collection var40 = var16.byType(var38);
    java.util.Set var41 = var16.asSet();
    var0.onLogout((org.jsecurity.subject.PrincipalCollection)var16);
    org.jsecurity.session.mgt.SimpleSession var43 = new org.jsecurity.session.mgt.SimpleSession();
    var43.setTimeout((-1L));
    org.jsecurity.session.mgt.SimpleSession var46 = new org.jsecurity.session.mgt.SimpleSession();
    java.util.Date var47 = var46.getLastAccessTime();
    var43.setLastAccessTime(var47);
    org.jsecurity.session.mgt.SimpleSession var49 = new org.jsecurity.session.mgt.SimpleSession();
    java.util.Date var50 = var49.getLastAccessTime();
    var43.setStopTimestamp(var50);
    var43.touch();
    org.jsecurity.authc.SimpleAuthenticationInfo var53 = new org.jsecurity.authc.SimpleAuthenticationInfo((org.jsecurity.subject.PrincipalCollection)var16, (java.lang.Object)var43);
    org.jsecurity.session.ProxiedSession var54 = new org.jsecurity.session.ProxiedSession((org.jsecurity.session.Session)var43);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var3);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var11);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var12);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var13);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var29);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var38);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var40);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var41);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var47);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var50);

  }

  public void test114() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest6.test114");


    org.jsecurity.mgt.DefaultSecurityManager var0 = new org.jsecurity.mgt.DefaultSecurityManager();
    java.io.InputStream var2 = org.jsecurity.util.ClassUtils.getResourceAsStream("");
    java.lang.Object[] var3 = new java.lang.Object[] { var2};
    java.util.List var4 = org.jsecurity.util.CollectionUtils.asList(var3);
    org.jsecurity.authc.pam.ModularRealmAuthenticator var5 = new org.jsecurity.authc.pam.ModularRealmAuthenticator(var4);
    org.jsecurity.authc.pam.AllSuccessfulModularAuthenticationStrategy var6 = new org.jsecurity.authc.pam.AllSuccessfulModularAuthenticationStrategy();
    var5.setModularAuthenticationStrategy((org.jsecurity.authc.pam.ModularAuthenticationStrategy)var6);
    org.jsecurity.authz.SimpleAuthorizationInfo var8 = new org.jsecurity.authz.SimpleAuthorizationInfo();
    var8.addStringPermission("hi!");
    java.io.InputStream var12 = org.jsecurity.util.ClassUtils.getResourceAsStream("");
    java.lang.Object[] var13 = new java.lang.Object[] { var12};
    java.util.List var14 = org.jsecurity.util.CollectionUtils.asList(var13);
    var8.addRoles((java.util.Collection)var14);
    var5.setAuthenticationListeners((java.util.Collection)var14);
    var0.setSessionListeners((java.util.Collection)var14);
    org.jsecurity.authc.pam.ModularRealmAuthenticator var18 = new org.jsecurity.authc.pam.ModularRealmAuthenticator();
    org.jsecurity.authz.permission.InvalidPermissionStringException var21 = new org.jsecurity.authz.permission.InvalidPermissionStringException("", "dd\uFFFD");
    org.jsecurity.JSecurityException var23 = new org.jsecurity.JSecurityException("");
    org.jsecurity.authc.SimpleAuthenticationInfo var25 = new org.jsecurity.authc.SimpleAuthenticationInfo((java.lang.Object)var21, (java.lang.Object)"", "org.jsecurity.authz.UnauthorizedException: org.jsecurity.session.ExpiredSessionException: ");
    org.jsecurity.subject.PrincipalCollection var26 = var25.getPrincipals();
    var18.onLogout(var26);
    var0.setAuthenticator((org.jsecurity.authc.Authenticator)var18);
    org.jsecurity.codec.CodecException var31 = new org.jsecurity.codec.CodecException("dd\uFFFD");
    org.jsecurity.authc.ConcurrentAccessException var32 = new org.jsecurity.authc.ConcurrentAccessException("org.jsecurity.authz.UnauthorizedException: org.jsecurity.session.ExpiredSessionException: ", (java.lang.Throwable)var31);
    org.jsecurity.subject.SimplePrincipalCollection var34 = new org.jsecurity.subject.SimplePrincipalCollection((java.lang.Object)var31, "");
    org.jsecurity.authc.pam.FirstSuccessfulAuthenticationStrategy var35 = new org.jsecurity.authc.pam.FirstSuccessfulAuthenticationStrategy();
    org.jsecurity.authz.UnauthorizedException var37 = new org.jsecurity.authz.UnauthorizedException("org.jsecurity.config.ConfigurationException: dd\uFFFD");
    java.lang.Throwable[] var38 = var37.getSuppressed();
    java.util.List var39 = org.jsecurity.util.CollectionUtils.asList((java.lang.Object[])var38);
    org.jsecurity.authc.UsernamePasswordToken var40 = new org.jsecurity.authc.UsernamePasswordToken();
    java.lang.String var41 = var40.getUsername();
    java.net.InetAddress var42 = var40.getInetAddress();
    org.jsecurity.authc.AuthenticationInfo var43 = var35.beforeAllAttempts((java.util.Collection)var39, (org.jsecurity.authc.AuthenticationToken)var40);
    org.jsecurity.session.UnknownSessionException var48 = new org.jsecurity.session.UnknownSessionException("dd\uFFFD", (java.io.Serializable)100.0f);
    org.jsecurity.subject.SubjectException var49 = new org.jsecurity.subject.SubjectException("dd\uFFFD", (java.lang.Throwable)var48);
    org.jsecurity.io.SerializationException var50 = new org.jsecurity.io.SerializationException("", (java.lang.Throwable)var49);
    java.lang.Throwable[] var51 = var49.getSuppressed();
    java.util.Set var52 = org.jsecurity.util.CollectionUtils.asSet((java.lang.Object[])var51);
    org.jsecurity.authc.SimpleAccount var53 = new org.jsecurity.authc.SimpleAccount((org.jsecurity.subject.PrincipalCollection)var34, (java.lang.Object)var39, var52);
    java.io.InputStream var55 = org.jsecurity.util.ClassUtils.getResourceAsStream("");
    java.lang.Object[] var56 = new java.lang.Object[] { var55};
    java.util.List var57 = org.jsecurity.util.CollectionUtils.asList(var56);
    org.jsecurity.authc.pam.ModularRealmAuthenticator var58 = new org.jsecurity.authc.pam.ModularRealmAuthenticator(var57);
    org.jsecurity.subject.SimplePrincipalCollection var60 = new org.jsecurity.subject.SimplePrincipalCollection((java.util.Collection)var57, "org.jsecurity.authz.UnauthorizedException: org.jsecurity.session.ExpiredSessionException: ");
    org.jsecurity.io.ResourceException var64 = new org.jsecurity.io.ResourceException("hi!");
    org.jsecurity.authc.UnknownAccountException var65 = new org.jsecurity.authc.UnknownAccountException((java.lang.Throwable)var64);
    org.jsecurity.session.StoppedSessionException var66 = new org.jsecurity.session.StoppedSessionException("dd\uFFFD", (java.io.Serializable)var64);
    org.jsecurity.session.UnknownSessionException var67 = new org.jsecurity.session.UnknownSessionException("org.jsecurity.authz.UnauthorizedException: org.jsecurity.session.ExpiredSessionException: ", (java.lang.Throwable)var64);
    boolean var68 = var60.equals((java.lang.Object)var64);
    var34.addAll((org.jsecurity.subject.PrincipalCollection)var60);
    org.jsecurity.session.UnknownSessionException var74 = new org.jsecurity.session.UnknownSessionException("dd\uFFFD", (java.io.Serializable)100.0f);
    org.jsecurity.subject.SubjectException var75 = new org.jsecurity.subject.SubjectException("dd\uFFFD", (java.lang.Throwable)var74);
    org.jsecurity.io.SerializationException var76 = new org.jsecurity.io.SerializationException("", (java.lang.Throwable)var75);
    java.lang.Throwable[] var77 = var75.getSuppressed();
    java.util.List var78 = org.jsecurity.util.CollectionUtils.asList((java.lang.Object[])var77);
    boolean var79 = var0.isPermittedAll((org.jsecurity.subject.PrincipalCollection)var34, (java.util.Collection)var78);
    org.jsecurity.subject.DelegatingSubject var80 = new org.jsecurity.subject.DelegatingSubject((org.jsecurity.mgt.SecurityManager)var0);
    java.lang.String[] var83 = org.jsecurity.util.StringUtils.tokenizeToStringArray("hi!", "");
    boolean[] var84 = var80.isPermitted(var83);
    java.lang.Object var85 = var80.getPrincipal();
    org.jsecurity.authz.permission.WildcardPermission var88 = new org.jsecurity.authz.permission.WildcardPermission("hi!", false);
    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      var80.checkPermission((org.jsecurity.authz.Permission)var88);
      fail("Expected exception of type org.jsecurity.authz.UnauthenticatedException");
    } catch (org.jsecurity.authz.UnauthenticatedException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var2);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var3);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var4);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var12);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var13);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var14);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var26);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var38);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var39);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var41);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var42);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var43);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var51);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var52);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var55);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var56);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var57);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var68 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var77);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var78);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var79 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var83);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var84);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var85);

  }

  public void test115() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest6.test115");


    org.jsecurity.codec.CodecException var1 = new org.jsecurity.codec.CodecException("1cc439f0-3929-483e-a7bf-4884884fe998");

  }

  public void test116() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest6.test116");


    org.jsecurity.authz.HostUnauthorizedException var1 = new org.jsecurity.authz.HostUnauthorizedException("org.jsecurity.realm.SimpleAccountRealm-284-authorization");

  }

  public void test117() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest6.test117");


    org.jsecurity.realm.activedirectory.ActiveDirectoryRealm var0 = new org.jsecurity.realm.activedirectory.ActiveDirectoryRealm();
    org.jsecurity.authc.credential.Sha256CredentialsMatcher var1 = new org.jsecurity.authc.credential.Sha256CredentialsMatcher();
    var0.setCredentialsMatcher((org.jsecurity.authc.credential.CredentialsMatcher)var1);
    java.lang.String var3 = var0.getAuthorizationCacheName();
    var0.setPrincipalSuffix("org.jsecurity.config.ConfigurationException: dd\uFFFD");
    org.jsecurity.realm.text.TextConfigurationRealm var6 = new org.jsecurity.realm.text.TextConfigurationRealm();
    java.io.InputStream var8 = org.jsecurity.util.ClassUtils.getResourceAsStream("");
    java.lang.Object[] var9 = new java.lang.Object[] { var8};
    java.util.List var10 = org.jsecurity.util.CollectionUtils.asList(var9);
    org.jsecurity.authc.pam.ModularRealmAuthenticator var11 = new org.jsecurity.authc.pam.ModularRealmAuthenticator(var10);
    org.jsecurity.subject.SimplePrincipalCollection var13 = new org.jsecurity.subject.SimplePrincipalCollection((java.util.Collection)var10, "org.jsecurity.authz.UnauthorizedException: org.jsecurity.session.ExpiredSessionException: ");
    org.jsecurity.session.UnknownSessionException var18 = new org.jsecurity.session.UnknownSessionException("dd\uFFFD", (java.io.Serializable)100.0f);
    org.jsecurity.session.SessionException var20 = new org.jsecurity.session.SessionException("dd\uFFFD", (java.lang.Throwable)var18, (java.io.Serializable)0);
    org.jsecurity.session.SessionException var21 = new org.jsecurity.session.SessionException("dd\uFFFD", (java.lang.Throwable)var18);
    var13.add((java.lang.Object)var21, "org.jsecurity.config.ConfigurationException: dd\uFFFD");
    var6.onLogout((org.jsecurity.subject.PrincipalCollection)var13);
    var0.onLogout((org.jsecurity.subject.PrincipalCollection)var13);
    org.jsecurity.realm.SimpleAccountRealm var27 = new org.jsecurity.realm.SimpleAccountRealm("hi!");
    java.lang.Class var28 = var27.getAuthenticationTokenClass();
    java.util.Collection var29 = org.jsecurity.util.CollectionUtils.emptyCollection(var28);
    java.util.Collection var30 = var13.byType(var28);
    org.jsecurity.authz.ModularRealmAuthorizer var31 = new org.jsecurity.authz.ModularRealmAuthorizer(var30);
    org.jsecurity.cache.HashtableCache var33 = new org.jsecurity.cache.HashtableCache("orgjsecurityauthcCredentialsException783ccd3148a842dd890fdf885a7baafAA==");
    org.jsecurity.realm.text.TextConfigurationRealm var34 = new org.jsecurity.realm.text.TextConfigurationRealm();
    java.io.InputStream var36 = org.jsecurity.util.ClassUtils.getResourceAsStream("");
    java.lang.Object[] var37 = new java.lang.Object[] { var36};
    java.util.List var38 = org.jsecurity.util.CollectionUtils.asList(var37);
    org.jsecurity.authc.pam.ModularRealmAuthenticator var39 = new org.jsecurity.authc.pam.ModularRealmAuthenticator(var38);
    org.jsecurity.subject.SimplePrincipalCollection var41 = new org.jsecurity.subject.SimplePrincipalCollection((java.util.Collection)var38, "org.jsecurity.authz.UnauthorizedException: org.jsecurity.session.ExpiredSessionException: ");
    org.jsecurity.session.UnknownSessionException var46 = new org.jsecurity.session.UnknownSessionException("dd\uFFFD", (java.io.Serializable)100.0f);
    org.jsecurity.session.SessionException var48 = new org.jsecurity.session.SessionException("dd\uFFFD", (java.lang.Throwable)var46, (java.io.Serializable)0);
    org.jsecurity.session.SessionException var49 = new org.jsecurity.session.SessionException("dd\uFFFD", (java.lang.Throwable)var46);
    var41.add((java.lang.Object)var49, "org.jsecurity.config.ConfigurationException: dd\uFFFD");
    var34.onLogout((org.jsecurity.subject.PrincipalCollection)var41);
    var33.remove((java.lang.Object)var41);
    org.jsecurity.subject.SimplePrincipalCollection var54 = new org.jsecurity.subject.SimplePrincipalCollection((org.jsecurity.subject.PrincipalCollection)var41);
    org.jsecurity.session.UnknownSessionException var60 = new org.jsecurity.session.UnknownSessionException("dd\uFFFD", (java.io.Serializable)100.0f);
    org.jsecurity.subject.SubjectException var61 = new org.jsecurity.subject.SubjectException("dd\uFFFD", (java.lang.Throwable)var60);
    org.jsecurity.authc.AccountException var62 = new org.jsecurity.authc.AccountException("hi!", (java.lang.Throwable)var61);
    org.jsecurity.session.UnknownSessionException var63 = new org.jsecurity.session.UnknownSessionException((java.lang.Throwable)var61);
    org.jsecurity.session.UnknownSessionException var64 = new org.jsecurity.session.UnknownSessionException((java.lang.Throwable)var61);
    org.jsecurity.authz.SimpleRole var65 = new org.jsecurity.authz.SimpleRole();
    org.jsecurity.authz.permission.WildcardPermission var68 = new org.jsecurity.authz.permission.WildcardPermission("hi!", false);
    boolean var69 = var65.isPermitted((org.jsecurity.authz.Permission)var68);
    org.jsecurity.session.UnknownSessionException var70 = new org.jsecurity.session.UnknownSessionException("3bf7038a-5bf9-4f69-b89b-6ea74272a097", (java.lang.Throwable)var61, (java.io.Serializable)var68);
    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      var31.checkPermission((org.jsecurity.subject.PrincipalCollection)var41, (org.jsecurity.authz.Permission)var68);
      fail("Expected exception of type java.lang.IllegalStateException");
    } catch (java.lang.IllegalStateException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var3);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var8);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var9);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var10);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var28);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var29);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var30);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var36);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var37);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var38);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var69 == false);

  }

  public void test118() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest6.test118");


    org.jsecurity.crypto.BlowfishCipher var0 = new org.jsecurity.crypto.BlowfishCipher();
    byte[] var4 = new byte[] { (byte)100, (byte)100, (byte)(-1)};
    java.lang.String var5 = org.jsecurity.codec.CodecSupport.toString(var4);
    byte[] var7 = org.jsecurity.codec.Base64.decode("hi!");
    byte[] var8 = var0.encrypt(var4, var7);
    java.lang.String var9 = org.jsecurity.codec.Base64.decodeToString(var4);
    byte[] var10 = org.jsecurity.codec.Base64.encode(var4);
    byte[] var11 = org.jsecurity.codec.Base64.encodeChunked(var4);
    char[] var12 = org.jsecurity.codec.CodecSupport.toChars(var11);
    char[] var13 = org.jsecurity.codec.CodecSupport.toChars(var11);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var4);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var5 + "' != '" + "dd\uFFFD"+ "'", var5.equals("dd\uFFFD"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var7);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var8);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var9 + "' != '" + "\u0000\u0000"+ "'", var9.equals("\u0000\u0000"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var10);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var11);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var12);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var13);

  }

  public void test119() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest6.test119");


    org.jsecurity.session.mgt.eis.MemorySessionDAO var0 = new org.jsecurity.session.mgt.eis.MemorySessionDAO();
    org.jsecurity.cache.Cache var1 = var0.getActiveSessionsCache();
    var0.setActiveSessionsCacheName("dd\uFFFD");
    var0.setActiveSessionsCacheName("\u0000\u0000\u0000");
    org.jsecurity.session.mgt.SimpleSession var6 = new org.jsecurity.session.mgt.SimpleSession();
    var6.setTimeout((-1L));
    org.jsecurity.session.mgt.SimpleSession var9 = new org.jsecurity.session.mgt.SimpleSession();
    java.util.Date var10 = var9.getLastAccessTime();
    var6.setLastAccessTime(var10);
    java.net.InetAddress var12 = var6.getHostAddress();
    org.jsecurity.authz.HostUnauthorizedException var13 = new org.jsecurity.authz.HostUnauthorizedException(var12);
    org.jsecurity.authz.HostUnauthorizedException var14 = new org.jsecurity.authz.HostUnauthorizedException(var12);
    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      org.jsecurity.session.Session var15 = var0.readSession((java.io.Serializable)var12);
      fail("Expected exception of type org.jsecurity.session.UnknownSessionException");
    } catch (org.jsecurity.session.UnknownSessionException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var1);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var10);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var12);

  }

  public void test120() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest6.test120");


    org.jsecurity.realm.text.PropertiesRealm var0 = new org.jsecurity.realm.text.PropertiesRealm();
    org.jsecurity.realm.activedirectory.ActiveDirectoryRealm var1 = new org.jsecurity.realm.activedirectory.ActiveDirectoryRealm();
    org.jsecurity.authc.credential.Sha256CredentialsMatcher var2 = new org.jsecurity.authc.credential.Sha256CredentialsMatcher();
    var1.setCredentialsMatcher((org.jsecurity.authc.credential.CredentialsMatcher)var2);
    java.lang.String var4 = var1.getAuthorizationCacheName();
    var1.setPrincipalSuffix("org.jsecurity.config.ConfigurationException: dd\uFFFD");
    org.jsecurity.authz.permission.PermissionResolver var7 = var1.getPermissionResolver();
    var0.setPermissionResolver(var7);
    var0.setUseXmlFormat(false);
    var0.setUseXmlFormat(false);
    org.jsecurity.authc.credential.CredentialsMatcher var13 = var0.getCredentialsMatcher();
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var4);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var7);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var13);

  }

  public void test121() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest6.test121");


    org.jsecurity.authc.IncorrectCredentialsException var1 = new org.jsecurity.authc.IncorrectCredentialsException("dd\uFFFD");
    org.jsecurity.authc.ExpiredCredentialsException var2 = new org.jsecurity.authc.ExpiredCredentialsException((java.lang.Throwable)var1);

  }

  public void test122() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest6.test122");


    org.jsecurity.realm.activedirectory.ActiveDirectoryRealm var0 = new org.jsecurity.realm.activedirectory.ActiveDirectoryRealm();
    org.jsecurity.authc.credential.Sha256CredentialsMatcher var1 = new org.jsecurity.authc.credential.Sha256CredentialsMatcher();
    var0.setCredentialsMatcher((org.jsecurity.authc.credential.CredentialsMatcher)var1);
    var0.initAuthorizationCache();
    var0.setSystemUsername("0a4dfd98-4ec1-476c-a8b7-0ade4d007ab7");
    org.jsecurity.session.UnknownSessionException var9 = new org.jsecurity.session.UnknownSessionException("dd\uFFFD", (java.io.Serializable)100.0f);
    org.jsecurity.session.SessionException var11 = new org.jsecurity.session.SessionException("dd\uFFFD", (java.lang.Throwable)var9, (java.io.Serializable)0);
    org.jsecurity.authc.SimpleAuthenticationInfo var14 = new org.jsecurity.authc.SimpleAuthenticationInfo((java.lang.Object)0, (java.lang.Object)10, "hi!");
    java.lang.Object var15 = var14.getCredentials();
    java.lang.String var16 = var14.toString();
    org.jsecurity.realm.text.TextConfigurationRealm var17 = new org.jsecurity.realm.text.TextConfigurationRealm();
    java.io.InputStream var19 = org.jsecurity.util.ClassUtils.getResourceAsStream("");
    java.lang.Object[] var20 = new java.lang.Object[] { var19};
    java.util.List var21 = org.jsecurity.util.CollectionUtils.asList(var20);
    org.jsecurity.authc.pam.ModularRealmAuthenticator var22 = new org.jsecurity.authc.pam.ModularRealmAuthenticator(var21);
    org.jsecurity.subject.SimplePrincipalCollection var24 = new org.jsecurity.subject.SimplePrincipalCollection((java.util.Collection)var21, "org.jsecurity.authz.UnauthorizedException: org.jsecurity.session.ExpiredSessionException: ");
    org.jsecurity.session.UnknownSessionException var29 = new org.jsecurity.session.UnknownSessionException("dd\uFFFD", (java.io.Serializable)100.0f);
    org.jsecurity.session.SessionException var31 = new org.jsecurity.session.SessionException("dd\uFFFD", (java.lang.Throwable)var29, (java.io.Serializable)0);
    org.jsecurity.session.SessionException var32 = new org.jsecurity.session.SessionException("dd\uFFFD", (java.lang.Throwable)var29);
    var24.add((java.lang.Object)var32, "org.jsecurity.config.ConfigurationException: dd\uFFFD");
    var17.onLogout((org.jsecurity.subject.PrincipalCollection)var24);
    org.jsecurity.cache.HashtableCacheManager var36 = new org.jsecurity.cache.HashtableCacheManager();
    org.jsecurity.cache.Cache var38 = var36.getCache("\u0000\u0000");
    var17.setAuthorizationCache(var38);
    org.jsecurity.codec.CodecException var42 = new org.jsecurity.codec.CodecException("dd\uFFFD");
    org.jsecurity.authc.ConcurrentAccessException var43 = new org.jsecurity.authc.ConcurrentAccessException("org.jsecurity.authz.UnauthorizedException: org.jsecurity.session.ExpiredSessionException: ", (java.lang.Throwable)var42);
    org.jsecurity.subject.SimplePrincipalCollection var45 = new org.jsecurity.subject.SimplePrincipalCollection((java.lang.Object)var42, "");
    var17.onLogout((org.jsecurity.subject.PrincipalCollection)var45);
    var14.setPrincipals((org.jsecurity.subject.PrincipalCollection)var45);
    java.lang.String[] var54 = org.jsecurity.util.StringUtils.split("9d388eff-106e-47d9-8180-843fdfd13dce", '4', ' ', '#', false, false);
    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      boolean var55 = var0.isPermittedAll((org.jsecurity.subject.PrincipalCollection)var45, var54);
      fail("Expected exception of type java.util.NoSuchElementException");
    } catch (java.util.NoSuchElementException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var15 + "' != '" + 10+ "'", var15.equals(10));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var19);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var20);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var21);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var38);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var54);

  }

  public void test123() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest6.test123");


    org.jsecurity.realm.activedirectory.ActiveDirectoryRealm var0 = new org.jsecurity.realm.activedirectory.ActiveDirectoryRealm();
    org.jsecurity.authc.credential.Sha256CredentialsMatcher var1 = new org.jsecurity.authc.credential.Sha256CredentialsMatcher();
    var0.setCredentialsMatcher((org.jsecurity.authc.credential.CredentialsMatcher)var1);
    org.jsecurity.realm.activedirectory.ActiveDirectoryRealm var3 = new org.jsecurity.realm.activedirectory.ActiveDirectoryRealm();
    org.jsecurity.authc.credential.Sha256CredentialsMatcher var4 = new org.jsecurity.authc.credential.Sha256CredentialsMatcher();
    var3.setCredentialsMatcher((org.jsecurity.authc.credential.CredentialsMatcher)var4);
    java.lang.String var6 = var3.getAuthorizationCacheName();
    var3.setUrl("hi!");
    org.jsecurity.realm.ldap.DefaultLdapContextFactory var9 = new org.jsecurity.realm.ldap.DefaultLdapContextFactory();
    var3.setLdapContextFactory((org.jsecurity.realm.ldap.LdapContextFactory)var9);
    var9.setAuthentication("org.jsecurity.authz.UnauthorizedException: org.jsecurity.session.ExpiredSessionException: ");
    var0.setLdapContextFactory((org.jsecurity.realm.ldap.LdapContextFactory)var9);
    var0.setPrincipalSuffix("783ccd31-48a8-42dd-890f-df885a7baaff");
    org.jsecurity.realm.activedirectory.ActiveDirectoryRealm var16 = new org.jsecurity.realm.activedirectory.ActiveDirectoryRealm();
    org.jsecurity.authc.credential.Sha256CredentialsMatcher var17 = new org.jsecurity.authc.credential.Sha256CredentialsMatcher();
    var16.setCredentialsMatcher((org.jsecurity.authc.credential.CredentialsMatcher)var17);
    java.lang.String var19 = var16.getAuthorizationCacheName();
    var16.setUrl("hi!");
    org.jsecurity.realm.ldap.DefaultLdapContextFactory var22 = new org.jsecurity.realm.ldap.DefaultLdapContextFactory();
    var16.setLdapContextFactory((org.jsecurity.realm.ldap.LdapContextFactory)var22);
    org.jsecurity.config.ReflectionBuilder var24 = new org.jsecurity.config.ReflectionBuilder();
    org.jsecurity.io.IniResource var25 = new org.jsecurity.io.IniResource();
    var25.setCharsetName("org.jsecurity.authz.UnauthorizedException: org.jsecurity.session.ExpiredSessionException: ");
    java.util.Map var28 = var25.getSections();
    java.util.Map var29 = var24.buildObjects(var28);
    org.jsecurity.config.ReflectionBuilder var30 = new org.jsecurity.config.ReflectionBuilder();
    org.jsecurity.io.IniResource var31 = new org.jsecurity.io.IniResource();
    var31.setCharsetName("org.jsecurity.authz.UnauthorizedException: org.jsecurity.session.ExpiredSessionException: ");
    java.util.Map var34 = var31.getSections();
    java.util.Map var35 = var30.buildObjects(var34);
    java.util.Map var36 = var24.buildObjects(var35);
    java.util.Map var37 = var24.getObjects();
    var22.setAdditionalEnvironment(var37);
    var0.setLdapContextFactory((org.jsecurity.realm.ldap.LdapContextFactory)var22);
    org.jsecurity.mgt.DefaultSecurityManager var40 = new org.jsecurity.mgt.DefaultSecurityManager((org.jsecurity.realm.Realm)var0);
    java.io.InputStream var42 = org.jsecurity.util.ClassUtils.getResourceAsStream("");
    java.lang.Object[] var43 = new java.lang.Object[] { var42};
    java.util.List var44 = org.jsecurity.util.CollectionUtils.asList(var43);
    org.jsecurity.authc.pam.ModularRealmAuthenticator var45 = new org.jsecurity.authc.pam.ModularRealmAuthenticator(var44);
    org.jsecurity.subject.SimplePrincipalCollection var47 = new org.jsecurity.subject.SimplePrincipalCollection((java.util.Collection)var44, "org.jsecurity.authz.UnauthorizedException: org.jsecurity.session.ExpiredSessionException: ");
    org.jsecurity.session.UnknownSessionException var52 = new org.jsecurity.session.UnknownSessionException("dd\uFFFD", (java.io.Serializable)100.0f);
    org.jsecurity.session.SessionException var54 = new org.jsecurity.session.SessionException("dd\uFFFD", (java.lang.Throwable)var52, (java.io.Serializable)0);
    org.jsecurity.session.SessionException var55 = new org.jsecurity.session.SessionException("dd\uFFFD", (java.lang.Throwable)var52);
    var47.add((java.lang.Object)var55, "org.jsecurity.config.ConfigurationException: dd\uFFFD");
    var40.logout((org.jsecurity.subject.PrincipalCollection)var47);
    org.jsecurity.io.ResourceException var62 = new org.jsecurity.io.ResourceException("hi!");
    org.jsecurity.codec.CodecException var63 = new org.jsecurity.codec.CodecException((java.lang.Throwable)var62);
    org.jsecurity.JSecurityException var64 = new org.jsecurity.JSecurityException("a2b823b1e72eae2b727289df8a00a89df8a0bab6ad8a89c4c5c7a9b62a270000", (java.lang.Throwable)var62);
    org.jsecurity.session.UnknownSessionException var65 = new org.jsecurity.session.UnknownSessionException((java.lang.Throwable)var64);
    org.jsecurity.authc.IncorrectCredentialsException var66 = new org.jsecurity.authc.IncorrectCredentialsException((java.lang.Throwable)var64);
    org.jsecurity.authz.AuthorizationException var67 = new org.jsecurity.authz.AuthorizationException("\u0000\u0000\u0000", (java.lang.Throwable)var64);
    org.jsecurity.authc.AccountException var68 = new org.jsecurity.authc.AccountException((java.lang.Throwable)var67);
    org.jsecurity.authc.DisabledAccountException var69 = new org.jsecurity.authc.DisabledAccountException((java.lang.Throwable)var67);
    org.jsecurity.authc.SimpleAuthenticationInfo var70 = new org.jsecurity.authc.SimpleAuthenticationInfo((org.jsecurity.subject.PrincipalCollection)var47, (java.lang.Object)var67);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var6);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var19);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var28);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var29);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var34);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var35);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var36);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var37);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var42);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var43);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var44);

  }

  public void test124() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest6.test124");


    org.jsecurity.session.UnknownSessionException var6 = new org.jsecurity.session.UnknownSessionException("dd\uFFFD", (java.io.Serializable)100.0f);
    org.jsecurity.config.ConfigurationException var7 = new org.jsecurity.config.ConfigurationException("dd\uFFFD", (java.lang.Throwable)var6);
    org.jsecurity.session.SessionException var8 = new org.jsecurity.session.SessionException((java.lang.Throwable)var7);
    org.jsecurity.subject.SubjectException var9 = new org.jsecurity.subject.SubjectException("org.jsecurity.realm.text.PropertiesRealm_1748", (java.lang.Throwable)var8);
    org.jsecurity.authc.pam.UnsupportedTokenException var10 = new org.jsecurity.authc.pam.UnsupportedTokenException("58508efd-e109-429a-ba1a-9f24939f0d5f", (java.lang.Throwable)var9);
    org.jsecurity.authz.HostUnauthorizedException var11 = new org.jsecurity.authz.HostUnauthorizedException("11ec0f48-38d4-4429-ba1d-6a4035d60891", (java.lang.Throwable)var9);

  }

  public void test125() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest6.test125");


    org.jsecurity.session.UnknownSessionException var7 = new org.jsecurity.session.UnknownSessionException("dd\uFFFD", (java.io.Serializable)100.0f);
    org.jsecurity.config.ConfigurationException var8 = new org.jsecurity.config.ConfigurationException("dd\uFFFD", (java.lang.Throwable)var7);
    org.jsecurity.session.ExpiredSessionException var10 = new org.jsecurity.session.ExpiredSessionException("", (java.lang.Throwable)var8, (java.io.Serializable)true);
    org.jsecurity.authc.LockedAccountException var11 = new org.jsecurity.authc.LockedAccountException("", (java.lang.Throwable)var10);
    org.jsecurity.authc.IncorrectCredentialsException var12 = new org.jsecurity.authc.IncorrectCredentialsException();
    org.jsecurity.session.SessionException var13 = new org.jsecurity.session.SessionException("\uFFFD\uFFFD#\uFFFD\uFFFD.\uFFFD+rr\uFFFD\u07CA\u0000\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\u01E9\uFFFD*'\u0000\u0000", (java.lang.Throwable)var11, (java.io.Serializable)var12);
    org.jsecurity.util.UnknownClassException var14 = new org.jsecurity.util.UnknownClassException("5c3cc6ba-00c8-4890-85cf-e7058c10f878", (java.lang.Throwable)var11);
    org.jsecurity.session.mgt.eis.MemorySessionDAO var17 = new org.jsecurity.session.mgt.eis.MemorySessionDAO();
    org.jsecurity.cache.Cache var18 = var17.getActiveSessionsCache();
    org.jsecurity.cache.CacheManager var19 = var17.getCacheManager();
    org.jsecurity.cache.HashtableCacheManager var20 = new org.jsecurity.cache.HashtableCacheManager();
    org.jsecurity.cache.Cache var22 = var20.getCache("\u0000\u0000");
    var17.setActiveSessionsCache(var22);
    java.io.InputStream var25 = org.jsecurity.util.ClassUtils.getResourceAsStream("");
    java.lang.Object[] var26 = new java.lang.Object[] { var25};
    java.util.List var27 = org.jsecurity.util.CollectionUtils.asList(var26);
    org.jsecurity.authc.pam.ModularRealmAuthenticator var28 = new org.jsecurity.authc.pam.ModularRealmAuthenticator(var27);
    org.jsecurity.authc.pam.AllSuccessfulModularAuthenticationStrategy var29 = new org.jsecurity.authc.pam.AllSuccessfulModularAuthenticationStrategy();
    var28.setModularAuthenticationStrategy((org.jsecurity.authc.pam.ModularAuthenticationStrategy)var29);
    org.jsecurity.authz.SimpleAuthorizationInfo var31 = new org.jsecurity.authz.SimpleAuthorizationInfo();
    var31.addStringPermission("hi!");
    java.io.InputStream var35 = org.jsecurity.util.ClassUtils.getResourceAsStream("");
    java.lang.Object[] var36 = new java.lang.Object[] { var35};
    java.util.List var37 = org.jsecurity.util.CollectionUtils.asList(var36);
    var31.addRoles((java.util.Collection)var37);
    var28.setAuthenticationListeners((java.util.Collection)var37);
    org.jsecurity.realm.activedirectory.ActiveDirectoryRealm var40 = new org.jsecurity.realm.activedirectory.ActiveDirectoryRealm();
    var40.setPrincipalSuffix("");
    var28.setRealm((org.jsecurity.realm.Realm)var40);
    org.jsecurity.cache.HashtableCacheManager var44 = new org.jsecurity.cache.HashtableCacheManager();
    org.jsecurity.cache.Cache var46 = var44.getCache("\u0000\u0000");
    var40.setAuthorizationCache(var46);
    var17.setActiveSessionsCache(var46);
    org.jsecurity.session.mgt.SimpleSession var49 = new org.jsecurity.session.mgt.SimpleSession();
    java.io.Serializable var50 = var17.create((org.jsecurity.session.Session)var49);
    org.jsecurity.session.mgt.SimpleSession var51 = new org.jsecurity.session.mgt.SimpleSession();
    var51.touch();
    var51.validate();
    org.jsecurity.session.mgt.SimpleSession var54 = new org.jsecurity.session.mgt.SimpleSession();
    var54.setTimeout((-1L));
    org.jsecurity.session.mgt.SimpleSession var57 = new org.jsecurity.session.mgt.SimpleSession();
    java.util.Date var58 = var57.getLastAccessTime();
    var54.setLastAccessTime(var58);
    org.jsecurity.session.mgt.SimpleSession var60 = new org.jsecurity.session.mgt.SimpleSession();
    java.util.Date var61 = var60.getLastAccessTime();
    var54.setStopTimestamp(var61);
    var51.setLastAccessTime(var61);
    var49.setLastAccessTime(var61);
    org.jsecurity.session.mgt.ImmutableProxiedSession var65 = new org.jsecurity.session.mgt.ImmutableProxiedSession((org.jsecurity.session.Session)var49);
    java.util.Date var66 = var65.getLastAccessTime();
    java.net.InetAddress var67 = var65.getHostAddress();
    org.jsecurity.authz.HostUnauthorizedException var68 = new org.jsecurity.authz.HostUnauthorizedException(var67);
    org.jsecurity.util.InstantiationException var69 = new org.jsecurity.util.InstantiationException("org.jsecurity.authc.UsernamePasswordToken - \u0000\u0000, rememberMe=false", (java.lang.Throwable)var68);
    org.jsecurity.session.InvalidSessionException var70 = new org.jsecurity.session.InvalidSessionException("376536df-2509-40ac-85a1-02b4cd229f7b", (java.lang.Throwable)var69);
    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      org.jsecurity.crypto.hash.Md2Hash var71 = new org.jsecurity.crypto.hash.Md2Hash((java.lang.Object)var14, (java.lang.Object)"376536df-2509-40ac-85a1-02b4cd229f7b");
      fail("Expected exception of type org.jsecurity.codec.CodecException");
    } catch (org.jsecurity.codec.CodecException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var18);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var19);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var22);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var25);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var26);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var27);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var35);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var36);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var37);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var46);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var50 + "' != '" + "8e5edfcf-666a-4909-b422-16cf5719b2d9"+ "'", var50.equals("8e5edfcf-666a-4909-b422-16cf5719b2d9"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var58);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var61);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var66);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var67);

  }

  public void test126() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest6.test126");


    java.lang.String[] var3 = org.jsecurity.util.StringUtils.split("22ab7faf-fab8-4d8b-9c43-096f2af17960", 'a', '#');
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var3);

  }

  public void test127() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest6.test127");


    org.jsecurity.util.AntPathMatcher var0 = new org.jsecurity.util.AntPathMatcher();
    boolean var3 = var0.matchStart("\uFFFD\uFFFD#\uFFFD\uFFFD.\uFFFD+rr\uFFFD\u07CA\u0000\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\u01E9\uFFFD*'\u0000\u0000", "ZGT/");
    var0.setPathSeparator("dade3937-164f-46fa-a082-f5f54b3b44e1");
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var3 == false);

  }

  public void test128() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest6.test128");


    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      java.lang.Class var1 = org.jsecurity.util.ClassUtils.forName("org.jsecurity.realm.text.PropertiesRealm_2851");
      fail("Expected exception of type org.jsecurity.util.UnknownClassException");
    } catch (org.jsecurity.util.UnknownClassException e) {
      // Expected exception.
    }

  }

  public void test129() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest6.test129");


    org.jsecurity.session.mgt.SimpleSession var0 = new org.jsecurity.session.mgt.SimpleSession();
    org.jsecurity.session.UnknownSessionException var4 = new org.jsecurity.session.UnknownSessionException("dd\uFFFD", (java.io.Serializable)100.0f);
    org.jsecurity.session.SessionException var6 = new org.jsecurity.session.SessionException("dd\uFFFD", (java.lang.Throwable)var4, (java.io.Serializable)0);
    org.jsecurity.authc.AccountException var7 = new org.jsecurity.authc.AccountException((java.lang.Throwable)var4);
    var0.setId((java.io.Serializable)var4);
    var0.setTimeout((-1L));
    org.jsecurity.session.mgt.SimpleSession var11 = new org.jsecurity.session.mgt.SimpleSession();
    var11.setTimeout((-1L));
    org.jsecurity.session.mgt.SimpleSession var14 = new org.jsecurity.session.mgt.SimpleSession();
    var14.setTimeout((-1L));
    org.jsecurity.session.mgt.SimpleSession var17 = new org.jsecurity.session.mgt.SimpleSession();
    java.util.Date var18 = var17.getLastAccessTime();
    var14.setLastAccessTime(var18);
    org.jsecurity.session.mgt.SimpleSession var20 = new org.jsecurity.session.mgt.SimpleSession();
    java.util.Date var21 = var20.getLastAccessTime();
    var14.setStopTimestamp(var21);
    var11.setStartTimestamp(var21);
    var0.setLastAccessTime(var21);
    var0.stop();
    byte[] var29 = new byte[] { (byte)100, (byte)100, (byte)(-1)};
    java.lang.String var30 = org.jsecurity.codec.CodecSupport.toString(var29);
    char[] var31 = org.jsecurity.codec.CodecSupport.toChars(var29);
    java.lang.String var32 = org.jsecurity.codec.Hex.encodeToString(var29);
    java.lang.Object var33 = var0.removeAttribute((java.lang.Object)var29);
    java.lang.String var34 = org.jsecurity.codec.CodecSupport.toString(var29);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var18);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var21);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var29);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var30 + "' != '" + "dd\uFFFD"+ "'", var30.equals("dd\uFFFD"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var31);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var32 + "' != '" + "6464ff"+ "'", var32.equals("6464ff"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var33);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var34 + "' != '" + "dd\uFFFD"+ "'", var34.equals("dd\uFFFD"));

  }

  public void test130() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest6.test130");


    org.jsecurity.authz.SimpleAuthorizationInfo var0 = new org.jsecurity.authz.SimpleAuthorizationInfo();
    var0.addStringPermission("hi!");
    org.jsecurity.authz.SimpleAuthorizationInfo var4 = new org.jsecurity.authz.SimpleAuthorizationInfo();
    org.jsecurity.session.UnknownSessionException var9 = new org.jsecurity.session.UnknownSessionException("dd\uFFFD", (java.io.Serializable)100.0f);
    org.jsecurity.subject.SubjectException var10 = new org.jsecurity.subject.SubjectException("dd\uFFFD", (java.lang.Throwable)var9);
    org.jsecurity.io.SerializationException var11 = new org.jsecurity.io.SerializationException("", (java.lang.Throwable)var10);
    java.lang.Throwable[] var12 = var10.getSuppressed();
    java.util.Set var13 = org.jsecurity.util.CollectionUtils.asSet((java.lang.Object[])var12);
    var4.setStringPermissions(var13);
    org.jsecurity.authz.SimpleRole var15 = new org.jsecurity.authz.SimpleRole("\u0000\u0000", var13);
    var0.setRoles(var13);
    org.jsecurity.mgt.DefaultSecurityManager var17 = new org.jsecurity.mgt.DefaultSecurityManager();
    java.io.InputStream var19 = org.jsecurity.util.ClassUtils.getResourceAsStream("");
    java.lang.Object[] var20 = new java.lang.Object[] { var19};
    java.util.List var21 = org.jsecurity.util.CollectionUtils.asList(var20);
    org.jsecurity.authc.pam.ModularRealmAuthenticator var22 = new org.jsecurity.authc.pam.ModularRealmAuthenticator(var21);
    org.jsecurity.authc.pam.AllSuccessfulModularAuthenticationStrategy var23 = new org.jsecurity.authc.pam.AllSuccessfulModularAuthenticationStrategy();
    var22.setModularAuthenticationStrategy((org.jsecurity.authc.pam.ModularAuthenticationStrategy)var23);
    org.jsecurity.authz.SimpleAuthorizationInfo var25 = new org.jsecurity.authz.SimpleAuthorizationInfo();
    var25.addStringPermission("hi!");
    java.io.InputStream var29 = org.jsecurity.util.ClassUtils.getResourceAsStream("");
    java.lang.Object[] var30 = new java.lang.Object[] { var29};
    java.util.List var31 = org.jsecurity.util.CollectionUtils.asList(var30);
    var25.addRoles((java.util.Collection)var31);
    var22.setAuthenticationListeners((java.util.Collection)var31);
    var17.setSessionListeners((java.util.Collection)var31);
    org.jsecurity.realm.text.TextConfigurationRealm var35 = new org.jsecurity.realm.text.TextConfigurationRealm();
    java.io.InputStream var37 = org.jsecurity.util.ClassUtils.getResourceAsStream("");
    java.lang.Object[] var38 = new java.lang.Object[] { var37};
    java.util.List var39 = org.jsecurity.util.CollectionUtils.asList(var38);
    org.jsecurity.authc.pam.ModularRealmAuthenticator var40 = new org.jsecurity.authc.pam.ModularRealmAuthenticator(var39);
    org.jsecurity.subject.SimplePrincipalCollection var42 = new org.jsecurity.subject.SimplePrincipalCollection((java.util.Collection)var39, "org.jsecurity.authz.UnauthorizedException: org.jsecurity.session.ExpiredSessionException: ");
    org.jsecurity.session.UnknownSessionException var47 = new org.jsecurity.session.UnknownSessionException("dd\uFFFD", (java.io.Serializable)100.0f);
    org.jsecurity.session.SessionException var49 = new org.jsecurity.session.SessionException("dd\uFFFD", (java.lang.Throwable)var47, (java.io.Serializable)0);
    org.jsecurity.session.SessionException var50 = new org.jsecurity.session.SessionException("dd\uFFFD", (java.lang.Throwable)var47);
    var42.add((java.lang.Object)var50, "org.jsecurity.config.ConfigurationException: dd\uFFFD");
    var35.onLogout((org.jsecurity.subject.PrincipalCollection)var42);
    org.jsecurity.authc.pam.FirstSuccessfulAuthenticationStrategy var54 = new org.jsecurity.authc.pam.FirstSuccessfulAuthenticationStrategy();
    org.jsecurity.authz.UnauthorizedException var56 = new org.jsecurity.authz.UnauthorizedException("org.jsecurity.config.ConfigurationException: dd\uFFFD");
    java.lang.Throwable[] var57 = var56.getSuppressed();
    java.util.List var58 = org.jsecurity.util.CollectionUtils.asList((java.lang.Object[])var57);
    org.jsecurity.authc.UsernamePasswordToken var59 = new org.jsecurity.authc.UsernamePasswordToken();
    java.lang.String var60 = var59.getUsername();
    java.net.InetAddress var61 = var59.getInetAddress();
    org.jsecurity.authc.AuthenticationInfo var62 = var54.beforeAllAttempts((java.util.Collection)var58, (org.jsecurity.authc.AuthenticationToken)var59);
    boolean[] var63 = var17.hasRoles((org.jsecurity.subject.PrincipalCollection)var42, var58);
    org.jsecurity.codec.CodecException var66 = new org.jsecurity.codec.CodecException("dd\uFFFD");
    org.jsecurity.authc.ConcurrentAccessException var67 = new org.jsecurity.authc.ConcurrentAccessException("org.jsecurity.authz.UnauthorizedException: org.jsecurity.session.ExpiredSessionException: ", (java.lang.Throwable)var66);
    org.jsecurity.subject.SimplePrincipalCollection var69 = new org.jsecurity.subject.SimplePrincipalCollection((java.lang.Object)var66, "");
    java.io.InputStream var71 = org.jsecurity.util.ClassUtils.getResourceAsStream("");
    java.lang.Object[] var72 = new java.lang.Object[] { var71};
    java.util.List var73 = org.jsecurity.util.CollectionUtils.asList(var72);
    org.jsecurity.authc.pam.ModularRealmAuthenticator var74 = new org.jsecurity.authc.pam.ModularRealmAuthenticator(var73);
    var69.addAll((java.util.Collection)var73, "\u0000\u0000");
    var17.setSessionListeners((java.util.Collection)var73);
    var0.addObjectPermissions((java.util.Collection)var73);
    var0.addStringPermission("c6e73a83-386b-4769-96e7-095a2fc90c7f");
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var12);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var13);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var19);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var20);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var21);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var29);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var30);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var31);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var37);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var38);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var39);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var57);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var58);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var60);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var61);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var62);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var63);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var71);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var72);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var73);

  }

  public void test131() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest6.test131");


    org.jsecurity.mgt.DefaultSecurityManager var0 = new org.jsecurity.mgt.DefaultSecurityManager();
    java.io.InputStream var2 = org.jsecurity.util.ClassUtils.getResourceAsStream("");
    java.lang.Object[] var3 = new java.lang.Object[] { var2};
    java.util.List var4 = org.jsecurity.util.CollectionUtils.asList(var3);
    org.jsecurity.authc.pam.ModularRealmAuthenticator var5 = new org.jsecurity.authc.pam.ModularRealmAuthenticator(var4);
    org.jsecurity.authc.pam.AllSuccessfulModularAuthenticationStrategy var6 = new org.jsecurity.authc.pam.AllSuccessfulModularAuthenticationStrategy();
    var5.setModularAuthenticationStrategy((org.jsecurity.authc.pam.ModularAuthenticationStrategy)var6);
    org.jsecurity.authz.SimpleAuthorizationInfo var8 = new org.jsecurity.authz.SimpleAuthorizationInfo();
    var8.addStringPermission("hi!");
    java.io.InputStream var12 = org.jsecurity.util.ClassUtils.getResourceAsStream("");
    java.lang.Object[] var13 = new java.lang.Object[] { var12};
    java.util.List var14 = org.jsecurity.util.CollectionUtils.asList(var13);
    var8.addRoles((java.util.Collection)var14);
    var5.setAuthenticationListeners((java.util.Collection)var14);
    var0.setSessionListeners((java.util.Collection)var14);
    org.jsecurity.realm.text.TextConfigurationRealm var18 = new org.jsecurity.realm.text.TextConfigurationRealm();
    java.io.InputStream var20 = org.jsecurity.util.ClassUtils.getResourceAsStream("");
    java.lang.Object[] var21 = new java.lang.Object[] { var20};
    java.util.List var22 = org.jsecurity.util.CollectionUtils.asList(var21);
    org.jsecurity.authc.pam.ModularRealmAuthenticator var23 = new org.jsecurity.authc.pam.ModularRealmAuthenticator(var22);
    org.jsecurity.subject.SimplePrincipalCollection var25 = new org.jsecurity.subject.SimplePrincipalCollection((java.util.Collection)var22, "org.jsecurity.authz.UnauthorizedException: org.jsecurity.session.ExpiredSessionException: ");
    org.jsecurity.session.UnknownSessionException var30 = new org.jsecurity.session.UnknownSessionException("dd\uFFFD", (java.io.Serializable)100.0f);
    org.jsecurity.session.SessionException var32 = new org.jsecurity.session.SessionException("dd\uFFFD", (java.lang.Throwable)var30, (java.io.Serializable)0);
    org.jsecurity.session.SessionException var33 = new org.jsecurity.session.SessionException("dd\uFFFD", (java.lang.Throwable)var30);
    var25.add((java.lang.Object)var33, "org.jsecurity.config.ConfigurationException: dd\uFFFD");
    var18.onLogout((org.jsecurity.subject.PrincipalCollection)var25);
    org.jsecurity.authc.pam.FirstSuccessfulAuthenticationStrategy var37 = new org.jsecurity.authc.pam.FirstSuccessfulAuthenticationStrategy();
    org.jsecurity.authz.UnauthorizedException var39 = new org.jsecurity.authz.UnauthorizedException("org.jsecurity.config.ConfigurationException: dd\uFFFD");
    java.lang.Throwable[] var40 = var39.getSuppressed();
    java.util.List var41 = org.jsecurity.util.CollectionUtils.asList((java.lang.Object[])var40);
    org.jsecurity.authc.UsernamePasswordToken var42 = new org.jsecurity.authc.UsernamePasswordToken();
    java.lang.String var43 = var42.getUsername();
    java.net.InetAddress var44 = var42.getInetAddress();
    org.jsecurity.authc.AuthenticationInfo var45 = var37.beforeAllAttempts((java.util.Collection)var41, (org.jsecurity.authc.AuthenticationToken)var42);
    boolean[] var46 = var0.hasRoles((org.jsecurity.subject.PrincipalCollection)var25, var41);
    org.jsecurity.codec.CodecException var49 = new org.jsecurity.codec.CodecException("dd\uFFFD");
    org.jsecurity.authc.ConcurrentAccessException var50 = new org.jsecurity.authc.ConcurrentAccessException("org.jsecurity.authz.UnauthorizedException: org.jsecurity.session.ExpiredSessionException: ", (java.lang.Throwable)var49);
    org.jsecurity.subject.SimplePrincipalCollection var52 = new org.jsecurity.subject.SimplePrincipalCollection((java.lang.Object)var49, "");
    java.io.InputStream var54 = org.jsecurity.util.ClassUtils.getResourceAsStream("");
    java.lang.Object[] var55 = new java.lang.Object[] { var54};
    java.util.List var56 = org.jsecurity.util.CollectionUtils.asList(var55);
    org.jsecurity.authc.pam.ModularRealmAuthenticator var57 = new org.jsecurity.authc.pam.ModularRealmAuthenticator(var56);
    var52.addAll((java.util.Collection)var56, "\u0000\u0000");
    var0.setSessionListeners((java.util.Collection)var56);
    org.jsecurity.session.mgt.DefaultSessionManager var61 = new org.jsecurity.session.mgt.DefaultSessionManager();
    org.jsecurity.mgt.DefaultSecurityManager var62 = new org.jsecurity.mgt.DefaultSecurityManager();
    org.jsecurity.authz.permission.WildcardPermissionResolver var63 = new org.jsecurity.authz.permission.WildcardPermissionResolver();
    var62.setPermissionResolver((org.jsecurity.authz.permission.PermissionResolver)var63);
    org.jsecurity.cache.CacheManager var65 = var62.getCacheManager();
    var61.setCacheManager(var65);
    org.jsecurity.session.mgt.SessionValidationScheduler var67 = var61.getSessionValidationScheduler();
    var0.setSessionManager((org.jsecurity.session.mgt.SessionManager)var61);
    var61.destroy();
    var61.setSessionValidationSchedulerEnabled(true);
    org.jsecurity.authz.UnauthenticatedException var73 = new org.jsecurity.authz.UnauthenticatedException();
    org.jsecurity.config.UnresolveableReferenceException var74 = new org.jsecurity.config.UnresolveableReferenceException("", (java.lang.Throwable)var73);
    org.jsecurity.session.InvalidSessionException var75 = new org.jsecurity.session.InvalidSessionException((java.io.Serializable)var73);
    org.jsecurity.authc.DisabledAccountException var76 = new org.jsecurity.authc.DisabledAccountException((java.lang.Throwable)var75);
    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      java.util.Collection var77 = var61.getAttributeKeys((java.io.Serializable)var75);
      fail("Expected exception of type org.jsecurity.session.UnknownSessionException");
    } catch (org.jsecurity.session.UnknownSessionException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var2);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var3);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var4);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var12);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var13);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var14);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var20);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var21);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var22);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var40);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var41);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var43);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var44);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var45);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var46);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var54);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var55);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var56);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var65);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var67);

  }

  public void test132() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest6.test132");


    org.jsecurity.realm.jndi.JndiRealmFactory var0 = new org.jsecurity.realm.jndi.JndiRealmFactory();
    java.io.InputStream var2 = org.jsecurity.util.ClassUtils.getResourceAsStream("");
    java.lang.Object[] var3 = new java.lang.Object[] { var2};
    java.util.List var4 = org.jsecurity.util.CollectionUtils.asList(var3);
    var0.setJndiNames((java.util.Collection)var4);
    boolean var6 = var0.isResourceRef();
    java.util.Collection var7 = var0.getJndiNames();
    var0.setJndiNames("{\uFFFD\uFFFD\uFFFD\uFFFD\u001B\uFFFD^\uFFFD\uFFFD\u01DA\uFFFD\u001A~\uFFFD}\uFFFD\uFFFDO\u001C");
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var2);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var3);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var4);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var6 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var7);

  }

  public void test133() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest6.test133");


    org.jsecurity.config.ReflectionBuilder var0 = new org.jsecurity.config.ReflectionBuilder();
    org.jsecurity.io.IniResource var1 = new org.jsecurity.io.IniResource();
    var1.setCharsetName("org.jsecurity.authz.UnauthorizedException: org.jsecurity.session.ExpiredSessionException: ");
    java.util.Map var4 = var1.getSections();
    java.util.Map var5 = var0.buildObjects(var4);
    org.jsecurity.config.ReflectionBuilder var6 = new org.jsecurity.config.ReflectionBuilder(var5);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var4);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var5);

  }

  public void test134() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest6.test134");


    org.jsecurity.authz.SimpleAuthorizationInfo var0 = new org.jsecurity.authz.SimpleAuthorizationInfo();
    org.jsecurity.session.UnknownSessionException var5 = new org.jsecurity.session.UnknownSessionException("dd\uFFFD", (java.io.Serializable)100.0f);
    org.jsecurity.subject.SubjectException var6 = new org.jsecurity.subject.SubjectException("dd\uFFFD", (java.lang.Throwable)var5);
    org.jsecurity.io.SerializationException var7 = new org.jsecurity.io.SerializationException("", (java.lang.Throwable)var6);
    java.lang.Throwable[] var8 = var6.getSuppressed();
    java.util.Set var9 = org.jsecurity.util.CollectionUtils.asSet((java.lang.Object[])var8);
    var0.setStringPermissions(var9);
    java.util.Set var11 = var0.getRoles();
    org.jsecurity.authz.SimpleAuthorizationInfo var12 = new org.jsecurity.authz.SimpleAuthorizationInfo();
    var12.addRole("a2b823b1e72eae2b727289df8a00a89df8a0bab6ad8a89c4c5c7a9b62a270000");
    org.jsecurity.session.UnknownSessionException var19 = new org.jsecurity.session.UnknownSessionException("dd\uFFFD", (java.io.Serializable)100.0f);
    org.jsecurity.subject.SubjectException var20 = new org.jsecurity.subject.SubjectException("dd\uFFFD", (java.lang.Throwable)var19);
    org.jsecurity.io.SerializationException var21 = new org.jsecurity.io.SerializationException("", (java.lang.Throwable)var20);
    java.lang.Throwable[] var22 = var20.getSuppressed();
    java.util.Set var23 = org.jsecurity.util.CollectionUtils.asSet((java.lang.Object[])var22);
    var12.addRoles((java.util.Collection)var23);
    var0.setRoles(var23);
    org.jsecurity.authz.SimpleAuthorizationInfo var26 = new org.jsecurity.authz.SimpleAuthorizationInfo();
    org.jsecurity.session.UnknownSessionException var31 = new org.jsecurity.session.UnknownSessionException("dd\uFFFD", (java.io.Serializable)100.0f);
    org.jsecurity.subject.SubjectException var32 = new org.jsecurity.subject.SubjectException("dd\uFFFD", (java.lang.Throwable)var31);
    org.jsecurity.io.SerializationException var33 = new org.jsecurity.io.SerializationException("", (java.lang.Throwable)var32);
    java.lang.Throwable[] var34 = var32.getSuppressed();
    java.util.Set var35 = org.jsecurity.util.CollectionUtils.asSet((java.lang.Object[])var34);
    var26.setStringPermissions(var35);
    java.util.Set var37 = var26.getRoles();
    org.jsecurity.authz.SimpleAuthorizationInfo var38 = new org.jsecurity.authz.SimpleAuthorizationInfo();
    var38.addRole("a2b823b1e72eae2b727289df8a00a89df8a0bab6ad8a89c4c5c7a9b62a270000");
    org.jsecurity.session.UnknownSessionException var45 = new org.jsecurity.session.UnknownSessionException("dd\uFFFD", (java.io.Serializable)100.0f);
    org.jsecurity.subject.SubjectException var46 = new org.jsecurity.subject.SubjectException("dd\uFFFD", (java.lang.Throwable)var45);
    org.jsecurity.io.SerializationException var47 = new org.jsecurity.io.SerializationException("", (java.lang.Throwable)var46);
    java.lang.Throwable[] var48 = var46.getSuppressed();
    java.util.Set var49 = org.jsecurity.util.CollectionUtils.asSet((java.lang.Object[])var48);
    var38.addRoles((java.util.Collection)var49);
    var26.setRoles(var49);
    var0.setRoles(var49);
    java.util.Set var53 = var0.getObjectPermissions();
    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      var0.addStringPermission("0fce7c4c-5715-4164-81a9-0b012a70a86b");
      fail("Expected exception of type java.lang.UnsupportedOperationException");
    } catch (java.lang.UnsupportedOperationException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var8);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var9);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var11);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var22);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var23);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var34);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var35);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var37);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var48);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var49);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var53);

  }

  public void test135() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest6.test135");


    java.io.InputStream var1 = org.jsecurity.util.ClassUtils.getResourceAsStream("");
    java.lang.Object[] var2 = new java.lang.Object[] { var1};
    java.util.List var3 = org.jsecurity.util.CollectionUtils.asList(var2);
    org.jsecurity.authc.pam.ModularRealmAuthenticator var4 = new org.jsecurity.authc.pam.ModularRealmAuthenticator(var3);
    org.jsecurity.authc.pam.AllSuccessfulModularAuthenticationStrategy var5 = new org.jsecurity.authc.pam.AllSuccessfulModularAuthenticationStrategy();
    var4.setModularAuthenticationStrategy((org.jsecurity.authc.pam.ModularAuthenticationStrategy)var5);
    org.jsecurity.authz.SimpleAuthorizationInfo var7 = new org.jsecurity.authz.SimpleAuthorizationInfo();
    var7.addStringPermission("hi!");
    java.io.InputStream var11 = org.jsecurity.util.ClassUtils.getResourceAsStream("");
    java.lang.Object[] var12 = new java.lang.Object[] { var11};
    java.util.List var13 = org.jsecurity.util.CollectionUtils.asList(var12);
    var7.addRoles((java.util.Collection)var13);
    var4.setAuthenticationListeners((java.util.Collection)var13);
    org.jsecurity.realm.activedirectory.ActiveDirectoryRealm var16 = new org.jsecurity.realm.activedirectory.ActiveDirectoryRealm();
    var16.setPrincipalSuffix("");
    var4.setRealm((org.jsecurity.realm.Realm)var16);
    org.jsecurity.authc.pam.FirstSuccessfulAuthenticationStrategy var20 = new org.jsecurity.authc.pam.FirstSuccessfulAuthenticationStrategy();
    org.jsecurity.authz.UnauthorizedException var22 = new org.jsecurity.authz.UnauthorizedException("org.jsecurity.config.ConfigurationException: dd\uFFFD");
    java.lang.Throwable[] var23 = var22.getSuppressed();
    java.util.List var24 = org.jsecurity.util.CollectionUtils.asList((java.lang.Object[])var23);
    org.jsecurity.authc.UsernamePasswordToken var25 = new org.jsecurity.authc.UsernamePasswordToken();
    java.lang.String var26 = var25.getUsername();
    java.net.InetAddress var27 = var25.getInetAddress();
    org.jsecurity.authc.AuthenticationInfo var28 = var20.beforeAllAttempts((java.util.Collection)var24, (org.jsecurity.authc.AuthenticationToken)var25);
    var4.setModularAuthenticationStrategy((org.jsecurity.authc.pam.ModularAuthenticationStrategy)var20);
    org.jsecurity.realm.activedirectory.ActiveDirectoryRealm var30 = new org.jsecurity.realm.activedirectory.ActiveDirectoryRealm();
    var30.init();
    var30.setSystemPassword("dd\uFFFD");
    var4.setRealm((org.jsecurity.realm.Realm)var30);
    var30.setSystemUsername("7f459141-420b-4ce9-8486-8c578b9f7c7e");
    org.jsecurity.authz.SimpleAuthorizationInfo var37 = new org.jsecurity.authz.SimpleAuthorizationInfo();
    java.util.Set var38 = var37.getStringPermissions();
    java.util.Set var39 = var37.getRoles();
    var37.addStringPermission("hi!");
    org.jsecurity.subject.SimplePrincipalCollection var43 = new org.jsecurity.subject.SimplePrincipalCollection((java.lang.Object)"hi!", "5dd0c65d-1422-49c2-becb-9e8dca619ab3");
    org.jsecurity.authz.SimpleAuthorizationInfo var44 = new org.jsecurity.authz.SimpleAuthorizationInfo();
    var44.addStringPermission("hi!");
    org.jsecurity.authz.SimpleAuthorizationInfo var48 = new org.jsecurity.authz.SimpleAuthorizationInfo();
    org.jsecurity.session.UnknownSessionException var53 = new org.jsecurity.session.UnknownSessionException("dd\uFFFD", (java.io.Serializable)100.0f);
    org.jsecurity.subject.SubjectException var54 = new org.jsecurity.subject.SubjectException("dd\uFFFD", (java.lang.Throwable)var53);
    org.jsecurity.io.SerializationException var55 = new org.jsecurity.io.SerializationException("", (java.lang.Throwable)var54);
    java.lang.Throwable[] var56 = var54.getSuppressed();
    java.util.Set var57 = org.jsecurity.util.CollectionUtils.asSet((java.lang.Object[])var56);
    var48.setStringPermissions(var57);
    org.jsecurity.authz.SimpleRole var59 = new org.jsecurity.authz.SimpleRole("\u0000\u0000", var57);
    var44.setRoles(var57);
    java.util.Set var61 = var44.getStringPermissions();
    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      boolean var62 = var30.isPermittedAll((org.jsecurity.subject.PrincipalCollection)var43, (java.util.Collection)var61);
      fail("Expected exception of type java.util.NoSuchElementException");
    } catch (java.util.NoSuchElementException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var1);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var2);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var3);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var11);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var12);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var13);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var23);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var24);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var26);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var27);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var28);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var38);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var39);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var56);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var57);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var61);

  }

  public void test136() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest6.test136");


    org.jsecurity.realm.activedirectory.ActiveDirectoryRealm var0 = new org.jsecurity.realm.activedirectory.ActiveDirectoryRealm();
    org.jsecurity.authc.credential.Sha256CredentialsMatcher var1 = new org.jsecurity.authc.credential.Sha256CredentialsMatcher();
    var0.setCredentialsMatcher((org.jsecurity.authc.credential.CredentialsMatcher)var1);
    org.jsecurity.realm.activedirectory.ActiveDirectoryRealm var3 = new org.jsecurity.realm.activedirectory.ActiveDirectoryRealm();
    org.jsecurity.authc.credential.Sha256CredentialsMatcher var4 = new org.jsecurity.authc.credential.Sha256CredentialsMatcher();
    var3.setCredentialsMatcher((org.jsecurity.authc.credential.CredentialsMatcher)var4);
    java.lang.String var6 = var3.getAuthorizationCacheName();
    var3.setUrl("hi!");
    org.jsecurity.realm.ldap.DefaultLdapContextFactory var9 = new org.jsecurity.realm.ldap.DefaultLdapContextFactory();
    var3.setLdapContextFactory((org.jsecurity.realm.ldap.LdapContextFactory)var9);
    var9.setAuthentication("org.jsecurity.authz.UnauthorizedException: org.jsecurity.session.ExpiredSessionException: ");
    var0.setLdapContextFactory((org.jsecurity.realm.ldap.LdapContextFactory)var9);
    var9.setUsePooling(true);
    var9.setReferral("953e234d-cb85-4bb2-8041-e376f6ba7f9c");
    var9.setSearchBase("94d5b5e2-eac7-494e-a020-f1314fa1538c");
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var6);

  }

  public void test137() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest6.test137");


    org.jsecurity.cache.HashtableCache var1 = new org.jsecurity.cache.HashtableCache("b017e95a-a08d-4f3a-bab8-cc9b39ef5331");
    var1.clear();

  }

  public void test138() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest6.test138");


    org.jsecurity.config.IniConfiguration var0 = new org.jsecurity.config.IniConfiguration();
    java.lang.String var1 = var0.getConfig();
    var0.setConfig("\uFFFD\uFFFD#\uFFFD\uFFFD.\uFFFD+rr\uFFFD\u07CA\u0000\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\u01E9\uFFFD*'\u0000\u0000");
    var0.setConfig("ff1bb54d-80f9-4308-a260-ff3ddf1355e9");
    java.lang.String var6 = var0.getConfig();
    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      var0.load("877d40d3-7504-4fde-9f4c-e0fcd7e4321f");
      fail("Expected exception of type org.jsecurity.config.ConfigurationException");
    } catch (org.jsecurity.config.ConfigurationException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var6 + "' != '" + "ff1bb54d-80f9-4308-a260-ff3ddf1355e9"+ "'", var6.equals("ff1bb54d-80f9-4308-a260-ff3ddf1355e9"));

  }

  public void test139() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest6.test139");


    org.jsecurity.crypto.hash.Sha256Hash var1 = org.jsecurity.crypto.hash.Sha256Hash.fromBase64String("01746f46-2aaf-4497-8c57-bd54976ae8b1");
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var1);

  }

  public void test140() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest6.test140");


    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      org.jsecurity.io.IniResource var1 = new org.jsecurity.io.IniResource("54796a53-cb9a-42d1-a889-ef2a5a9adae9");
      fail("Expected exception of type org.jsecurity.io.ResourceException");
    } catch (org.jsecurity.io.ResourceException e) {
      // Expected exception.
    }

  }

  public void test141() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest6.test141");


    org.jsecurity.authc.UnknownAccountException var1 = new org.jsecurity.authc.UnknownAccountException("968d70ce-0cbd-400e-aa86-1da8248f7360");

  }

  public void test142() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest6.test142");


    org.jsecurity.mgt.DefaultSecurityManager var0 = new org.jsecurity.mgt.DefaultSecurityManager();
    java.io.InputStream var2 = org.jsecurity.util.ClassUtils.getResourceAsStream("");
    java.lang.Object[] var3 = new java.lang.Object[] { var2};
    java.util.List var4 = org.jsecurity.util.CollectionUtils.asList(var3);
    org.jsecurity.authc.pam.ModularRealmAuthenticator var5 = new org.jsecurity.authc.pam.ModularRealmAuthenticator(var4);
    org.jsecurity.authc.pam.AllSuccessfulModularAuthenticationStrategy var6 = new org.jsecurity.authc.pam.AllSuccessfulModularAuthenticationStrategy();
    var5.setModularAuthenticationStrategy((org.jsecurity.authc.pam.ModularAuthenticationStrategy)var6);
    org.jsecurity.authz.SimpleAuthorizationInfo var8 = new org.jsecurity.authz.SimpleAuthorizationInfo();
    var8.addStringPermission("hi!");
    java.io.InputStream var12 = org.jsecurity.util.ClassUtils.getResourceAsStream("");
    java.lang.Object[] var13 = new java.lang.Object[] { var12};
    java.util.List var14 = org.jsecurity.util.CollectionUtils.asList(var13);
    var8.addRoles((java.util.Collection)var14);
    var5.setAuthenticationListeners((java.util.Collection)var14);
    var0.setSessionListeners((java.util.Collection)var14);
    org.jsecurity.subject.Subject var18 = var0.getSubject();
    org.jsecurity.authz.permission.WildcardPermissionResolver var19 = new org.jsecurity.authz.permission.WildcardPermissionResolver();
    var0.setPermissionResolver((org.jsecurity.authz.permission.PermissionResolver)var19);
    org.jsecurity.authz.Permission var22 = var19.resolvePermission("i\uFFFD\uFFFD\uFFFD\uFFFD:u\uFFFD\u001C\uFFFD\uFFFD\uFFFD\u001E\uFFFDv\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD");
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var2);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var3);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var4);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var12);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var13);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var14);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var18);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var22);

  }

  public void test143() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest6.test143");


    org.jsecurity.session.SessionException var2 = new org.jsecurity.session.SessionException("34985011-eed9-42f9-8098-612a7542effd", (java.io.Serializable)"d8d550ee-3a8c-48f0-8061-1d82c827f505");

  }

  public void test144() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest6.test144");


    org.jsecurity.session.UnknownSessionException var3 = new org.jsecurity.session.UnknownSessionException("dd\uFFFD", (java.io.Serializable)100.0f);
    org.jsecurity.session.SessionException var5 = new org.jsecurity.session.SessionException("dd\uFFFD", (java.lang.Throwable)var3, (java.io.Serializable)0);
    org.jsecurity.authc.SimpleAuthenticationInfo var8 = new org.jsecurity.authc.SimpleAuthenticationInfo((java.lang.Object)0, (java.lang.Object)10, "hi!");
    java.lang.Object var9 = var8.getCredentials();
    java.lang.String var10 = var8.toString();
    org.jsecurity.subject.PrincipalCollection var11 = var8.getPrincipals();
    org.jsecurity.realm.activedirectory.ActiveDirectoryRealm var12 = new org.jsecurity.realm.activedirectory.ActiveDirectoryRealm();
    org.jsecurity.authc.credential.Sha256CredentialsMatcher var13 = new org.jsecurity.authc.credential.Sha256CredentialsMatcher();
    var12.setCredentialsMatcher((org.jsecurity.authc.credential.CredentialsMatcher)var13);
    java.lang.String var15 = var12.getAuthorizationCacheName();
    var12.setPrincipalSuffix("org.jsecurity.config.ConfigurationException: dd\uFFFD");
    org.jsecurity.realm.text.TextConfigurationRealm var18 = new org.jsecurity.realm.text.TextConfigurationRealm();
    java.io.InputStream var20 = org.jsecurity.util.ClassUtils.getResourceAsStream("");
    java.lang.Object[] var21 = new java.lang.Object[] { var20};
    java.util.List var22 = org.jsecurity.util.CollectionUtils.asList(var21);
    org.jsecurity.authc.pam.ModularRealmAuthenticator var23 = new org.jsecurity.authc.pam.ModularRealmAuthenticator(var22);
    org.jsecurity.subject.SimplePrincipalCollection var25 = new org.jsecurity.subject.SimplePrincipalCollection((java.util.Collection)var22, "org.jsecurity.authz.UnauthorizedException: org.jsecurity.session.ExpiredSessionException: ");
    org.jsecurity.session.UnknownSessionException var30 = new org.jsecurity.session.UnknownSessionException("dd\uFFFD", (java.io.Serializable)100.0f);
    org.jsecurity.session.SessionException var32 = new org.jsecurity.session.SessionException("dd\uFFFD", (java.lang.Throwable)var30, (java.io.Serializable)0);
    org.jsecurity.session.SessionException var33 = new org.jsecurity.session.SessionException("dd\uFFFD", (java.lang.Throwable)var30);
    var25.add((java.lang.Object)var33, "org.jsecurity.config.ConfigurationException: dd\uFFFD");
    var18.onLogout((org.jsecurity.subject.PrincipalCollection)var25);
    var12.onLogout((org.jsecurity.subject.PrincipalCollection)var25);
    org.jsecurity.codec.CodecException var40 = new org.jsecurity.codec.CodecException("dd\uFFFD");
    org.jsecurity.authc.ConcurrentAccessException var41 = new org.jsecurity.authc.ConcurrentAccessException("org.jsecurity.authz.UnauthorizedException: org.jsecurity.session.ExpiredSessionException: ", (java.lang.Throwable)var40);
    org.jsecurity.subject.SimplePrincipalCollection var43 = new org.jsecurity.subject.SimplePrincipalCollection((java.lang.Object)var40, "");
    org.jsecurity.authc.pam.FirstSuccessfulAuthenticationStrategy var44 = new org.jsecurity.authc.pam.FirstSuccessfulAuthenticationStrategy();
    org.jsecurity.authz.UnauthorizedException var46 = new org.jsecurity.authz.UnauthorizedException("org.jsecurity.config.ConfigurationException: dd\uFFFD");
    java.lang.Throwable[] var47 = var46.getSuppressed();
    java.util.List var48 = org.jsecurity.util.CollectionUtils.asList((java.lang.Object[])var47);
    org.jsecurity.authc.UsernamePasswordToken var49 = new org.jsecurity.authc.UsernamePasswordToken();
    java.lang.String var50 = var49.getUsername();
    java.net.InetAddress var51 = var49.getInetAddress();
    org.jsecurity.authc.AuthenticationInfo var52 = var44.beforeAllAttempts((java.util.Collection)var48, (org.jsecurity.authc.AuthenticationToken)var49);
    org.jsecurity.session.UnknownSessionException var57 = new org.jsecurity.session.UnknownSessionException("dd\uFFFD", (java.io.Serializable)100.0f);
    org.jsecurity.subject.SubjectException var58 = new org.jsecurity.subject.SubjectException("dd\uFFFD", (java.lang.Throwable)var57);
    org.jsecurity.io.SerializationException var59 = new org.jsecurity.io.SerializationException("", (java.lang.Throwable)var58);
    java.lang.Throwable[] var60 = var58.getSuppressed();
    java.util.Set var61 = org.jsecurity.util.CollectionUtils.asSet((java.lang.Object[])var60);
    org.jsecurity.authc.SimpleAccount var62 = new org.jsecurity.authc.SimpleAccount((org.jsecurity.subject.PrincipalCollection)var43, (java.lang.Object)var48, var61);
    org.jsecurity.authz.SimpleAuthorizingAccount var63 = new org.jsecurity.authz.SimpleAuthorizingAccount((org.jsecurity.subject.PrincipalCollection)var25, (java.lang.Object)var62);
    var8.setCredentials((java.lang.Object)var63);
    var63.setLocked(false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var9 + "' != '" + 10+ "'", var9.equals(10));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var11);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var15);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var20);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var21);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var22);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var47);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var48);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var50);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var51);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var52);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var60);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var61);

  }

  public void test145() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest6.test145");


    java.io.InputStream var1 = org.jsecurity.util.ClassUtils.getResourceAsStream("");
    java.lang.Object[] var2 = new java.lang.Object[] { var1};
    java.util.List var3 = org.jsecurity.util.CollectionUtils.asList(var2);
    org.jsecurity.authc.pam.ModularRealmAuthenticator var4 = new org.jsecurity.authc.pam.ModularRealmAuthenticator(var3);
    org.jsecurity.authc.pam.AllSuccessfulModularAuthenticationStrategy var5 = new org.jsecurity.authc.pam.AllSuccessfulModularAuthenticationStrategy();
    var4.setModularAuthenticationStrategy((org.jsecurity.authc.pam.ModularAuthenticationStrategy)var5);
    org.jsecurity.authz.SimpleAuthorizationInfo var7 = new org.jsecurity.authz.SimpleAuthorizationInfo();
    var7.addStringPermission("hi!");
    java.io.InputStream var11 = org.jsecurity.util.ClassUtils.getResourceAsStream("");
    java.lang.Object[] var12 = new java.lang.Object[] { var11};
    java.util.List var13 = org.jsecurity.util.CollectionUtils.asList(var12);
    var7.addRoles((java.util.Collection)var13);
    var4.setAuthenticationListeners((java.util.Collection)var13);
    org.jsecurity.realm.activedirectory.ActiveDirectoryRealm var16 = new org.jsecurity.realm.activedirectory.ActiveDirectoryRealm();
    var16.setPrincipalSuffix("");
    var4.setRealm((org.jsecurity.realm.Realm)var16);
    org.jsecurity.authc.pam.FirstSuccessfulAuthenticationStrategy var20 = new org.jsecurity.authc.pam.FirstSuccessfulAuthenticationStrategy();
    org.jsecurity.authz.UnauthorizedException var22 = new org.jsecurity.authz.UnauthorizedException("org.jsecurity.config.ConfigurationException: dd\uFFFD");
    java.lang.Throwable[] var23 = var22.getSuppressed();
    java.util.List var24 = org.jsecurity.util.CollectionUtils.asList((java.lang.Object[])var23);
    org.jsecurity.authc.UsernamePasswordToken var25 = new org.jsecurity.authc.UsernamePasswordToken();
    java.lang.String var26 = var25.getUsername();
    java.net.InetAddress var27 = var25.getInetAddress();
    org.jsecurity.authc.AuthenticationInfo var28 = var20.beforeAllAttempts((java.util.Collection)var24, (org.jsecurity.authc.AuthenticationToken)var25);
    var4.setModularAuthenticationStrategy((org.jsecurity.authc.pam.ModularAuthenticationStrategy)var20);
    org.jsecurity.realm.activedirectory.ActiveDirectoryRealm var30 = new org.jsecurity.realm.activedirectory.ActiveDirectoryRealm();
    var30.init();
    var30.setSystemPassword("dd\uFFFD");
    var4.setRealm((org.jsecurity.realm.Realm)var30);
    var30.setSystemUsername("7f459141-420b-4ce9-8486-8c578b9f7c7e");
    var30.initAuthorizationCache();
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var1);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var2);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var3);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var11);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var12);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var13);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var23);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var24);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var26);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var27);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var28);

  }

  public void test146() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest6.test146");


    org.jsecurity.authc.UsernamePasswordToken var3 = new org.jsecurity.authc.UsernamePasswordToken("", "b017e95a-a08d-4f3a-bab8-cc9b39ef5331", false);
    org.jsecurity.cache.HashtableCache var5 = new org.jsecurity.cache.HashtableCache("orgjsecurityauthcCredentialsException783ccd3148a842dd890fdf885a7baafAA==");
    int var6 = var5.size();
    org.jsecurity.session.UnknownSessionException var11 = new org.jsecurity.session.UnknownSessionException("dd\uFFFD", (java.io.Serializable)100.0f);
    org.jsecurity.subject.SubjectException var12 = new org.jsecurity.subject.SubjectException("dd\uFFFD", (java.lang.Throwable)var11);
    org.jsecurity.authc.AccountException var13 = new org.jsecurity.authc.AccountException("hi!", (java.lang.Throwable)var12);
    org.jsecurity.session.UnknownSessionException var14 = new org.jsecurity.session.UnknownSessionException((java.lang.Throwable)var12);
    org.jsecurity.codec.CodecException var15 = new org.jsecurity.codec.CodecException((java.lang.Throwable)var12);
    org.jsecurity.config.UnresolveableReferenceException var16 = new org.jsecurity.config.UnresolveableReferenceException((java.lang.Throwable)var12);
    char[] var20 = new char[] { ' ', ' '};
    org.jsecurity.authc.UsernamePasswordToken var21 = new org.jsecurity.authc.UsernamePasswordToken("hi!", var20);
    char[] var25 = new char[] { '4', '#'};
    org.jsecurity.authc.UsernamePasswordToken var26 = new org.jsecurity.authc.UsernamePasswordToken("\u0000\u0000", var25);
    var21.setPassword(var25);
    var5.put((java.lang.Object)var12, (java.lang.Object)var25);
    var3.setPassword(var25);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var6 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var20);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var25);

  }

  public void test147() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest6.test147");


    org.jsecurity.authc.UsernamePasswordToken var3 = new org.jsecurity.authc.UsernamePasswordToken("orgjsecurityauthcCredentialsException783ccd3148a842dd890fdf885a7baafAA==-orgjsecurityauthcCredentialsException783ccd3148a842dd890fdf885a7baafAA==6", "\uFFFD\uFFFD\uFFFDow4\u06FE|\uFFFD\uFFFD\u001Ek\uFFFD\uFFFDo\uFFFD\uFFFDs\uFFFDwo\uFFFD\uFFFD", true);

  }

  public void test148() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest6.test148");


    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      org.jsecurity.io.IniResource var2 = new org.jsecurity.io.IniResource("\uFFFD\uFFFD#\uFFFD\uFFFD.\uFFFD+r\uFFFD\u6959(\uFFFD\uFFFDW\uFFFDq\uFFFD.\uFFFD\uFFFD^jY\uFFFDj\uFFFDa\uFFFD\uFFFD\uFFFDj\u0628", "org.jsecurity.authc.UsernamePasswordToken - org.jsecurity.config.ConfigurationException: dd\uFFFD, rememberMe=false");
      fail("Expected exception of type org.jsecurity.io.ResourceException");
    } catch (org.jsecurity.io.ResourceException e) {
      // Expected exception.
    }

  }

  public void test149() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest6.test149");


    org.jsecurity.JSecurityException var2 = new org.jsecurity.JSecurityException();
    org.jsecurity.authc.LockedAccountException var3 = new org.jsecurity.authc.LockedAccountException("org.jsecurity.config.ConfigurationException: dd\uFFFD", (java.lang.Throwable)var2);
    org.jsecurity.subject.InvalidSubjectException var4 = new org.jsecurity.subject.InvalidSubjectException((java.lang.Throwable)var3);
    org.jsecurity.codec.CodecException var5 = new org.jsecurity.codec.CodecException("org.jsecurity.realm.SimpleAccountRealm-9-authorization", (java.lang.Throwable)var3);

  }

  public void test150() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest6.test150");


    org.jsecurity.codec.CodecException var2 = new org.jsecurity.codec.CodecException("dd\uFFFD");
    org.jsecurity.authc.ConcurrentAccessException var3 = new org.jsecurity.authc.ConcurrentAccessException("org.jsecurity.authz.UnauthorizedException: org.jsecurity.session.ExpiredSessionException: ", (java.lang.Throwable)var2);
    org.jsecurity.subject.SimplePrincipalCollection var5 = new org.jsecurity.subject.SimplePrincipalCollection((java.lang.Object)var2, "");
    org.jsecurity.authc.pam.FirstSuccessfulAuthenticationStrategy var6 = new org.jsecurity.authc.pam.FirstSuccessfulAuthenticationStrategy();
    org.jsecurity.authz.UnauthorizedException var8 = new org.jsecurity.authz.UnauthorizedException("org.jsecurity.config.ConfigurationException: dd\uFFFD");
    java.lang.Throwable[] var9 = var8.getSuppressed();
    java.util.List var10 = org.jsecurity.util.CollectionUtils.asList((java.lang.Object[])var9);
    org.jsecurity.authc.UsernamePasswordToken var11 = new org.jsecurity.authc.UsernamePasswordToken();
    java.lang.String var12 = var11.getUsername();
    java.net.InetAddress var13 = var11.getInetAddress();
    org.jsecurity.authc.AuthenticationInfo var14 = var6.beforeAllAttempts((java.util.Collection)var10, (org.jsecurity.authc.AuthenticationToken)var11);
    org.jsecurity.session.UnknownSessionException var19 = new org.jsecurity.session.UnknownSessionException("dd\uFFFD", (java.io.Serializable)100.0f);
    org.jsecurity.subject.SubjectException var20 = new org.jsecurity.subject.SubjectException("dd\uFFFD", (java.lang.Throwable)var19);
    org.jsecurity.io.SerializationException var21 = new org.jsecurity.io.SerializationException("", (java.lang.Throwable)var20);
    java.lang.Throwable[] var22 = var20.getSuppressed();
    java.util.Set var23 = org.jsecurity.util.CollectionUtils.asSet((java.lang.Object[])var22);
    org.jsecurity.authc.SimpleAccount var24 = new org.jsecurity.authc.SimpleAccount((org.jsecurity.subject.PrincipalCollection)var5, (java.lang.Object)var10, var23);
    java.io.InputStream var26 = org.jsecurity.util.ClassUtils.getResourceAsStream("");
    java.lang.Object[] var27 = new java.lang.Object[] { var26};
    java.util.List var28 = org.jsecurity.util.CollectionUtils.asList(var27);
    org.jsecurity.authc.pam.ModularRealmAuthenticator var29 = new org.jsecurity.authc.pam.ModularRealmAuthenticator(var28);
    org.jsecurity.subject.SimplePrincipalCollection var31 = new org.jsecurity.subject.SimplePrincipalCollection((java.util.Collection)var28, "org.jsecurity.authz.UnauthorizedException: org.jsecurity.session.ExpiredSessionException: ");
    org.jsecurity.io.ResourceException var35 = new org.jsecurity.io.ResourceException("hi!");
    org.jsecurity.authc.UnknownAccountException var36 = new org.jsecurity.authc.UnknownAccountException((java.lang.Throwable)var35);
    org.jsecurity.session.StoppedSessionException var37 = new org.jsecurity.session.StoppedSessionException("dd\uFFFD", (java.io.Serializable)var35);
    org.jsecurity.session.UnknownSessionException var38 = new org.jsecurity.session.UnknownSessionException("org.jsecurity.authz.UnauthorizedException: org.jsecurity.session.ExpiredSessionException: ", (java.lang.Throwable)var35);
    boolean var39 = var31.equals((java.lang.Object)var35);
    var5.addAll((org.jsecurity.subject.PrincipalCollection)var31);
    java.util.List var41 = var31.asList();
    org.jsecurity.authz.ModularRealmAuthorizer var42 = new org.jsecurity.authz.ModularRealmAuthorizer((java.util.Collection)var41);
    java.io.InputStream var44 = org.jsecurity.util.ClassUtils.getResourceAsStream("");
    java.lang.Object[] var45 = new java.lang.Object[] { var44};
    java.util.List var46 = org.jsecurity.util.CollectionUtils.asList(var45);
    org.jsecurity.authc.pam.ModularRealmAuthenticator var47 = new org.jsecurity.authc.pam.ModularRealmAuthenticator(var46);
    org.jsecurity.subject.SimplePrincipalCollection var49 = new org.jsecurity.subject.SimplePrincipalCollection((java.util.Collection)var46, "org.jsecurity.authz.UnauthorizedException: org.jsecurity.session.ExpiredSessionException: ");
    java.util.List var50 = var49.asList();
    org.jsecurity.codec.CodecException var53 = new org.jsecurity.codec.CodecException("dd\uFFFD");
    org.jsecurity.authc.ConcurrentAccessException var54 = new org.jsecurity.authc.ConcurrentAccessException("org.jsecurity.authz.UnauthorizedException: org.jsecurity.session.ExpiredSessionException: ", (java.lang.Throwable)var53);
    org.jsecurity.subject.SimplePrincipalCollection var56 = new org.jsecurity.subject.SimplePrincipalCollection((java.lang.Object)var53, "");
    org.jsecurity.authc.pam.FirstSuccessfulAuthenticationStrategy var57 = new org.jsecurity.authc.pam.FirstSuccessfulAuthenticationStrategy();
    org.jsecurity.authz.UnauthorizedException var59 = new org.jsecurity.authz.UnauthorizedException("org.jsecurity.config.ConfigurationException: dd\uFFFD");
    java.lang.Throwable[] var60 = var59.getSuppressed();
    java.util.List var61 = org.jsecurity.util.CollectionUtils.asList((java.lang.Object[])var60);
    org.jsecurity.authc.UsernamePasswordToken var62 = new org.jsecurity.authc.UsernamePasswordToken();
    java.lang.String var63 = var62.getUsername();
    java.net.InetAddress var64 = var62.getInetAddress();
    org.jsecurity.authc.AuthenticationInfo var65 = var57.beforeAllAttempts((java.util.Collection)var61, (org.jsecurity.authc.AuthenticationToken)var62);
    org.jsecurity.session.UnknownSessionException var70 = new org.jsecurity.session.UnknownSessionException("dd\uFFFD", (java.io.Serializable)100.0f);
    org.jsecurity.subject.SubjectException var71 = new org.jsecurity.subject.SubjectException("dd\uFFFD", (java.lang.Throwable)var70);
    org.jsecurity.io.SerializationException var72 = new org.jsecurity.io.SerializationException("", (java.lang.Throwable)var71);
    java.lang.Throwable[] var73 = var71.getSuppressed();
    java.util.Set var74 = org.jsecurity.util.CollectionUtils.asSet((java.lang.Object[])var73);
    org.jsecurity.authc.SimpleAccount var75 = new org.jsecurity.authc.SimpleAccount((org.jsecurity.subject.PrincipalCollection)var56, (java.lang.Object)var61, var74);
    boolean[] var76 = var42.hasRoles((org.jsecurity.subject.PrincipalCollection)var49, var61);
    java.util.Collection var77 = var42.getRealms();
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var9);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var10);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var12);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var13);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var14);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var22);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var23);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var26);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var27);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var28);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var39 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var41);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var44);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var45);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var46);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var50);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var60);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var61);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var63);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var64);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var65);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var73);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var74);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var76);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var77);

  }

  public void test151() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest6.test151");


    org.jsecurity.cache.CacheException var1 = new org.jsecurity.cache.CacheException("fe331fde-1069-4ec3-841b-ec3dd57c829b");

  }

  public void test152() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest6.test152");


    org.jsecurity.realm.activedirectory.ActiveDirectoryRealm var0 = new org.jsecurity.realm.activedirectory.ActiveDirectoryRealm();
    org.jsecurity.authc.credential.Sha256CredentialsMatcher var1 = new org.jsecurity.authc.credential.Sha256CredentialsMatcher();
    var0.setCredentialsMatcher((org.jsecurity.authc.credential.CredentialsMatcher)var1);
    var0.initAuthorizationCache();
    org.jsecurity.authc.credential.Sha512CredentialsMatcher var4 = new org.jsecurity.authc.credential.Sha512CredentialsMatcher();
    var4.setHashIterations(1);
    var0.setCredentialsMatcher((org.jsecurity.authc.credential.CredentialsMatcher)var4);
    var0.setSearchBase("d90d1304-1255-46dc-afba-b0683de3c88c");

  }

  public void test153() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest6.test153");


    org.jsecurity.io.SerializationException var1 = new org.jsecurity.io.SerializationException("{\uFFFD\uFFFD\uFFFD\uFFFD\u001B\uFFFD^\uFFFD\uFFFD\u01DA\uFFFD\u001A~\uFFFD}\uFFFD\uFFFDO\u001C");

  }

  public void test154() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest6.test154");


    org.jsecurity.session.mgt.DefaultSessionManager var0 = new org.jsecurity.session.mgt.DefaultSessionManager();
    org.jsecurity.mgt.DefaultSecurityManager var1 = new org.jsecurity.mgt.DefaultSecurityManager();
    org.jsecurity.authz.permission.WildcardPermissionResolver var2 = new org.jsecurity.authz.permission.WildcardPermissionResolver();
    var1.setPermissionResolver((org.jsecurity.authz.permission.PermissionResolver)var2);
    org.jsecurity.cache.CacheManager var4 = var1.getCacheManager();
    var0.setCacheManager(var4);
    long var6 = var0.getSessionValidationInterval();
    java.util.Set var8 = org.jsecurity.util.PermissionUtils.toPermissionStrings("e00f87fa-0543-46d5-b69b-14e41add033e");
    var0.setSessionListeners((java.util.Collection)var8);
    org.jsecurity.session.InvalidSessionException var12 = new org.jsecurity.session.InvalidSessionException("dd\uFFFD");
    org.jsecurity.io.SerializationException var13 = new org.jsecurity.io.SerializationException("71af6ede-8cd3-4a28-b912-ba356a7ec0b6", (java.lang.Throwable)var12);
    org.jsecurity.util.UnknownClassException var14 = new org.jsecurity.util.UnknownClassException((java.lang.Throwable)var13);
    org.jsecurity.realm.activedirectory.ActiveDirectoryRealm var16 = new org.jsecurity.realm.activedirectory.ActiveDirectoryRealm();
    org.jsecurity.authc.credential.Sha256CredentialsMatcher var17 = new org.jsecurity.authc.credential.Sha256CredentialsMatcher();
    var16.setCredentialsMatcher((org.jsecurity.authc.credential.CredentialsMatcher)var17);
    org.jsecurity.realm.activedirectory.ActiveDirectoryRealm var19 = new org.jsecurity.realm.activedirectory.ActiveDirectoryRealm();
    org.jsecurity.authc.credential.Sha256CredentialsMatcher var20 = new org.jsecurity.authc.credential.Sha256CredentialsMatcher();
    var19.setCredentialsMatcher((org.jsecurity.authc.credential.CredentialsMatcher)var20);
    java.lang.String var22 = var19.getAuthorizationCacheName();
    var19.setUrl("hi!");
    org.jsecurity.realm.ldap.DefaultLdapContextFactory var25 = new org.jsecurity.realm.ldap.DefaultLdapContextFactory();
    var19.setLdapContextFactory((org.jsecurity.realm.ldap.LdapContextFactory)var25);
    var25.setAuthentication("org.jsecurity.authz.UnauthorizedException: org.jsecurity.session.ExpiredSessionException: ");
    var16.setLdapContextFactory((org.jsecurity.realm.ldap.LdapContextFactory)var25);
    var16.setPrincipalSuffix("783ccd31-48a8-42dd-890f-df885a7baaff");
    org.jsecurity.realm.activedirectory.ActiveDirectoryRealm var32 = new org.jsecurity.realm.activedirectory.ActiveDirectoryRealm();
    org.jsecurity.authc.credential.Sha256CredentialsMatcher var33 = new org.jsecurity.authc.credential.Sha256CredentialsMatcher();
    var32.setCredentialsMatcher((org.jsecurity.authc.credential.CredentialsMatcher)var33);
    java.lang.String var35 = var32.getAuthorizationCacheName();
    var32.setUrl("hi!");
    org.jsecurity.realm.ldap.DefaultLdapContextFactory var38 = new org.jsecurity.realm.ldap.DefaultLdapContextFactory();
    var32.setLdapContextFactory((org.jsecurity.realm.ldap.LdapContextFactory)var38);
    org.jsecurity.config.ReflectionBuilder var40 = new org.jsecurity.config.ReflectionBuilder();
    org.jsecurity.io.IniResource var41 = new org.jsecurity.io.IniResource();
    var41.setCharsetName("org.jsecurity.authz.UnauthorizedException: org.jsecurity.session.ExpiredSessionException: ");
    java.util.Map var44 = var41.getSections();
    java.util.Map var45 = var40.buildObjects(var44);
    org.jsecurity.config.ReflectionBuilder var46 = new org.jsecurity.config.ReflectionBuilder();
    org.jsecurity.io.IniResource var47 = new org.jsecurity.io.IniResource();
    var47.setCharsetName("org.jsecurity.authz.UnauthorizedException: org.jsecurity.session.ExpiredSessionException: ");
    java.util.Map var50 = var47.getSections();
    java.util.Map var51 = var46.buildObjects(var50);
    java.util.Map var52 = var40.buildObjects(var51);
    java.util.Map var53 = var40.getObjects();
    var38.setAdditionalEnvironment(var53);
    var16.setLdapContextFactory((org.jsecurity.realm.ldap.LdapContextFactory)var38);
    org.jsecurity.authc.SimpleAuthenticationInfo var57 = new org.jsecurity.authc.SimpleAuthenticationInfo((java.lang.Object)"{\uFFFD\uFFFD\uFFFD\uFFFD\u001B\uFFFD^\uFFFD\uFFFD\u01DA\uFFFD\u001A~\uFFFD}\uFFFD\uFFFDO\u001C", (java.lang.Object)var16, "orgjsecurityauthcCredentialsException783ccd3148a842dd890fdf885a7baafAA==-orgjsecurityauthcCredentialsException783ccd3148a842dd890fdf885a7baafAA==6");
    var16.setUrl("ff1bb54d-80f9-4308-a260-ff3ddf1355e9");
    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      java.lang.Object var60 = var0.getAttribute((java.io.Serializable)var14, (java.lang.Object)var16);
      fail("Expected exception of type org.jsecurity.session.UnknownSessionException");
    } catch (org.jsecurity.session.UnknownSessionException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var4);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var6 == 3600000L);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var8);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var22);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var35);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var44);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var45);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var50);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var51);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var52);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var53);

  }

  public void test155() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest6.test155");


    org.jsecurity.config.ReflectionBuilder var0 = new org.jsecurity.config.ReflectionBuilder();
    org.jsecurity.io.IniResource var1 = new org.jsecurity.io.IniResource();
    java.util.Map var2 = var1.getSections();
    var0.setObjects(var2);
    java.util.Map var4 = var0.getObjects();
    org.jsecurity.realm.activedirectory.ActiveDirectoryRealm var5 = new org.jsecurity.realm.activedirectory.ActiveDirectoryRealm();
    org.jsecurity.authc.credential.Sha256CredentialsMatcher var6 = new org.jsecurity.authc.credential.Sha256CredentialsMatcher();
    var5.setCredentialsMatcher((org.jsecurity.authc.credential.CredentialsMatcher)var6);
    org.jsecurity.realm.activedirectory.ActiveDirectoryRealm var8 = new org.jsecurity.realm.activedirectory.ActiveDirectoryRealm();
    org.jsecurity.authc.credential.Sha256CredentialsMatcher var9 = new org.jsecurity.authc.credential.Sha256CredentialsMatcher();
    var8.setCredentialsMatcher((org.jsecurity.authc.credential.CredentialsMatcher)var9);
    java.lang.String var11 = var8.getAuthorizationCacheName();
    var8.setUrl("hi!");
    org.jsecurity.realm.ldap.DefaultLdapContextFactory var14 = new org.jsecurity.realm.ldap.DefaultLdapContextFactory();
    var8.setLdapContextFactory((org.jsecurity.realm.ldap.LdapContextFactory)var14);
    var14.setAuthentication("org.jsecurity.authz.UnauthorizedException: org.jsecurity.session.ExpiredSessionException: ");
    var5.setLdapContextFactory((org.jsecurity.realm.ldap.LdapContextFactory)var14);
    org.jsecurity.io.IniResource var19 = new org.jsecurity.io.IniResource();
    java.lang.String var20 = var19.getCharsetName();
    org.jsecurity.config.ReflectionBuilder var21 = new org.jsecurity.config.ReflectionBuilder();
    org.jsecurity.io.IniResource var22 = new org.jsecurity.io.IniResource();
    var22.setCharsetName("org.jsecurity.authz.UnauthorizedException: org.jsecurity.session.ExpiredSessionException: ");
    java.util.Map var25 = var22.getSections();
    java.util.Map var26 = var21.buildObjects(var25);
    var19.setSections(var26);
    var14.setAdditionalEnvironment(var26);
    java.util.Map var29 = var0.buildObjects(var26);
    java.util.Map var30 = var0.getObjects();
    org.jsecurity.session.mgt.eis.MemorySessionDAO var31 = new org.jsecurity.session.mgt.eis.MemorySessionDAO();
    org.jsecurity.cache.Cache var32 = var31.getActiveSessionsCache();
    org.jsecurity.cache.CacheManager var33 = var31.getCacheManager();
    org.jsecurity.cache.HashtableCacheManager var34 = new org.jsecurity.cache.HashtableCacheManager();
    org.jsecurity.cache.Cache var36 = var34.getCache("\u0000\u0000");
    var31.setActiveSessionsCache(var36);
    java.io.InputStream var39 = org.jsecurity.util.ClassUtils.getResourceAsStream("");
    java.lang.Object[] var40 = new java.lang.Object[] { var39};
    java.util.List var41 = org.jsecurity.util.CollectionUtils.asList(var40);
    org.jsecurity.authc.pam.ModularRealmAuthenticator var42 = new org.jsecurity.authc.pam.ModularRealmAuthenticator(var41);
    org.jsecurity.authc.pam.AllSuccessfulModularAuthenticationStrategy var43 = new org.jsecurity.authc.pam.AllSuccessfulModularAuthenticationStrategy();
    var42.setModularAuthenticationStrategy((org.jsecurity.authc.pam.ModularAuthenticationStrategy)var43);
    org.jsecurity.authz.SimpleAuthorizationInfo var45 = new org.jsecurity.authz.SimpleAuthorizationInfo();
    var45.addStringPermission("hi!");
    java.io.InputStream var49 = org.jsecurity.util.ClassUtils.getResourceAsStream("");
    java.lang.Object[] var50 = new java.lang.Object[] { var49};
    java.util.List var51 = org.jsecurity.util.CollectionUtils.asList(var50);
    var45.addRoles((java.util.Collection)var51);
    var42.setAuthenticationListeners((java.util.Collection)var51);
    org.jsecurity.realm.activedirectory.ActiveDirectoryRealm var54 = new org.jsecurity.realm.activedirectory.ActiveDirectoryRealm();
    var54.setPrincipalSuffix("");
    var42.setRealm((org.jsecurity.realm.Realm)var54);
    org.jsecurity.cache.HashtableCacheManager var58 = new org.jsecurity.cache.HashtableCacheManager();
    org.jsecurity.cache.Cache var60 = var58.getCache("\u0000\u0000");
    var54.setAuthorizationCache(var60);
    var31.setActiveSessionsCache(var60);
    org.jsecurity.session.mgt.SimpleSession var63 = new org.jsecurity.session.mgt.SimpleSession();
    java.io.Serializable var64 = var31.create((org.jsecurity.session.Session)var63);
    org.jsecurity.session.mgt.SimpleSession var65 = new org.jsecurity.session.mgt.SimpleSession();
    var65.touch();
    var65.validate();
    org.jsecurity.session.mgt.SimpleSession var68 = new org.jsecurity.session.mgt.SimpleSession();
    var68.setTimeout((-1L));
    org.jsecurity.session.mgt.SimpleSession var71 = new org.jsecurity.session.mgt.SimpleSession();
    java.util.Date var72 = var71.getLastAccessTime();
    var68.setLastAccessTime(var72);
    org.jsecurity.session.mgt.SimpleSession var74 = new org.jsecurity.session.mgt.SimpleSession();
    java.util.Date var75 = var74.getLastAccessTime();
    var68.setStopTimestamp(var75);
    var65.setLastAccessTime(var75);
    var63.setLastAccessTime(var75);
    java.util.Date var79 = var63.getLastAccessTime();
    var63.setExpired(false);
    var63.validate();
    java.util.Collection var83 = var63.getAttributeKeys();
    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      org.jsecurity.crypto.hash.Sha512Hash var84 = new org.jsecurity.crypto.hash.Sha512Hash((java.lang.Object)var0, (java.lang.Object)var83);
      fail("Expected exception of type org.jsecurity.codec.CodecException");
    } catch (org.jsecurity.codec.CodecException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var2);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var4);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var11);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var20);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var25);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var26);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var29);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var30);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var32);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var33);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var36);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var39);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var40);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var41);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var49);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var50);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var51);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var60);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var64 + "' != '" + "e7ecb81f-c975-4dbc-835a-d7e774d74388"+ "'", var64.equals("e7ecb81f-c975-4dbc-835a-d7e774d74388"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var72);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var75);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var79);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var83);

  }

  public void test156() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest6.test156");


    java.io.InputStream var1 = org.jsecurity.util.ClassUtils.getResourceAsStream("");
    java.lang.Object[] var2 = new java.lang.Object[] { var1};
    java.util.List var3 = org.jsecurity.util.CollectionUtils.asList(var2);
    org.jsecurity.authc.pam.ModularRealmAuthenticator var4 = new org.jsecurity.authc.pam.ModularRealmAuthenticator(var3);
    org.jsecurity.subject.SimplePrincipalCollection var6 = new org.jsecurity.subject.SimplePrincipalCollection((java.util.Collection)var3, "org.jsecurity.authz.UnauthorizedException: org.jsecurity.session.ExpiredSessionException: ");
    java.util.Set var7 = var6.asSet();
    org.jsecurity.authc.pam.AllSuccessfulModularAuthenticationStrategy var9 = new org.jsecurity.authc.pam.AllSuccessfulModularAuthenticationStrategy();
    char[] var11 = new char[] { };
    org.jsecurity.authc.UsernamePasswordToken var13 = new org.jsecurity.authc.UsernamePasswordToken("hi!", var11, true);
    org.jsecurity.authc.SimpleAccount var14 = new org.jsecurity.authc.SimpleAccount();
    var14.setCredentialsExpired(false);
    boolean var17 = var14.isLocked();
    org.jsecurity.authc.AuthenticationInfo var18 = var9.afterAllAttempts((org.jsecurity.authc.AuthenticationToken)var13, (org.jsecurity.authc.AuthenticationInfo)var14);
    char[] var21 = new char[] { };
    org.jsecurity.authc.UsernamePasswordToken var23 = new org.jsecurity.authc.UsernamePasswordToken("hi!", var21, true);
    org.jsecurity.authc.UsernamePasswordToken var24 = new org.jsecurity.authc.UsernamePasswordToken("\u0000\u0000", var21);
    var13.setPassword(var21);
    org.jsecurity.authc.UsernamePasswordToken var26 = new org.jsecurity.authc.UsernamePasswordToken("\u0000\u0000\u0000", var21);
    byte[] var27 = org.jsecurity.codec.Hex.decode(var21);
    org.jsecurity.authz.SimpleAuthorizingAccount var28 = new org.jsecurity.authz.SimpleAuthorizingAccount((org.jsecurity.subject.PrincipalCollection)var6, (java.lang.Object)var27);
    org.jsecurity.realm.jndi.JndiRealmFactory var29 = new org.jsecurity.realm.jndi.JndiRealmFactory();
    java.io.InputStream var31 = org.jsecurity.util.ClassUtils.getResourceAsStream("");
    java.lang.Object[] var32 = new java.lang.Object[] { var31};
    java.util.List var33 = org.jsecurity.util.CollectionUtils.asList(var32);
    var29.setJndiNames((java.util.Collection)var33);
    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      boolean[] var35 = var28.isPermitted(var33);
      fail("Expected exception of type java.lang.ClassCastException");
    } catch (java.lang.ClassCastException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var1);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var2);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var3);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var7);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var11);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var17 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var18);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var21);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var27);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var31);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var32);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var33);

  }

  public void test157() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest6.test157");


    org.jsecurity.realm.text.TextConfigurationRealm var0 = new org.jsecurity.realm.text.TextConfigurationRealm();
    org.jsecurity.realm.text.TextConfigurationRealm var1 = new org.jsecurity.realm.text.TextConfigurationRealm();
    java.io.InputStream var3 = org.jsecurity.util.ClassUtils.getResourceAsStream("");
    java.lang.Object[] var4 = new java.lang.Object[] { var3};
    java.util.List var5 = org.jsecurity.util.CollectionUtils.asList(var4);
    org.jsecurity.authc.pam.ModularRealmAuthenticator var6 = new org.jsecurity.authc.pam.ModularRealmAuthenticator(var5);
    org.jsecurity.subject.SimplePrincipalCollection var8 = new org.jsecurity.subject.SimplePrincipalCollection((java.util.Collection)var5, "org.jsecurity.authz.UnauthorizedException: org.jsecurity.session.ExpiredSessionException: ");
    org.jsecurity.session.UnknownSessionException var13 = new org.jsecurity.session.UnknownSessionException("dd\uFFFD", (java.io.Serializable)100.0f);
    org.jsecurity.session.SessionException var15 = new org.jsecurity.session.SessionException("dd\uFFFD", (java.lang.Throwable)var13, (java.io.Serializable)0);
    org.jsecurity.session.SessionException var16 = new org.jsecurity.session.SessionException("dd\uFFFD", (java.lang.Throwable)var13);
    var8.add((java.lang.Object)var16, "org.jsecurity.config.ConfigurationException: dd\uFFFD");
    var1.onLogout((org.jsecurity.subject.PrincipalCollection)var8);
    java.util.Collection var21 = var8.fromRealm("\u0000\u0000\u0000");
    var0.onLogout((org.jsecurity.subject.PrincipalCollection)var8);
    java.util.Set var23 = var8.asSet();
    org.jsecurity.authz.ModularRealmAuthorizer var24 = new org.jsecurity.authz.ModularRealmAuthorizer((java.util.Collection)var23);
    org.jsecurity.authc.pam.ModularRealmAuthenticator var26 = new org.jsecurity.authc.pam.ModularRealmAuthenticator();
    org.jsecurity.authz.permission.InvalidPermissionStringException var29 = new org.jsecurity.authz.permission.InvalidPermissionStringException("", "dd\uFFFD");
    org.jsecurity.JSecurityException var31 = new org.jsecurity.JSecurityException("");
    org.jsecurity.authc.SimpleAuthenticationInfo var33 = new org.jsecurity.authc.SimpleAuthenticationInfo((java.lang.Object)var29, (java.lang.Object)"", "org.jsecurity.authz.UnauthorizedException: org.jsecurity.session.ExpiredSessionException: ");
    org.jsecurity.subject.PrincipalCollection var34 = var33.getPrincipals();
    var26.onLogout(var34);
    org.jsecurity.session.SessionException var36 = new org.jsecurity.session.SessionException("\uFFFD\uFFFD#\uFFFD\uFFFD.\uFFFD+rr\uFFFD\u07CA\u0000\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\u01E9\uFFFD*'\u0000\u0000", (java.io.Serializable)var34);
    org.jsecurity.session.UnknownSessionException var41 = new org.jsecurity.session.UnknownSessionException("dd\uFFFD", (java.io.Serializable)100.0f);
    org.jsecurity.subject.SubjectException var42 = new org.jsecurity.subject.SubjectException("dd\uFFFD", (java.lang.Throwable)var41);
    org.jsecurity.io.SerializationException var43 = new org.jsecurity.io.SerializationException("", (java.lang.Throwable)var42);
    java.lang.Throwable[] var44 = var42.getSuppressed();
    java.util.List var45 = org.jsecurity.util.CollectionUtils.asList((java.lang.Object[])var44);
    var24.checkPermissions(var34, (java.util.Collection)var45);
    org.jsecurity.authc.pam.ModularRealmAuthenticator var48 = new org.jsecurity.authc.pam.ModularRealmAuthenticator();
    org.jsecurity.authz.permission.InvalidPermissionStringException var51 = new org.jsecurity.authz.permission.InvalidPermissionStringException("", "dd\uFFFD");
    org.jsecurity.JSecurityException var53 = new org.jsecurity.JSecurityException("");
    org.jsecurity.authc.SimpleAuthenticationInfo var55 = new org.jsecurity.authc.SimpleAuthenticationInfo((java.lang.Object)var51, (java.lang.Object)"", "org.jsecurity.authz.UnauthorizedException: org.jsecurity.session.ExpiredSessionException: ");
    org.jsecurity.subject.PrincipalCollection var56 = var55.getPrincipals();
    var48.onLogout(var56);
    org.jsecurity.session.SessionException var58 = new org.jsecurity.session.SessionException("\uFFFD\uFFFD#\uFFFD\uFFFD.\uFFFD+rr\uFFFD\u07CA\u0000\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\u01E9\uFFFD*'\u0000\u0000", (java.io.Serializable)var56);
    java.lang.String[] var61 = org.jsecurity.util.StringUtils.tokenizeToStringArray("c100a0dc-e80a-4d5c-baea-453d05633754", "75c873c8-19df-476a-b82e-72a1eddf7e4b");
    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      boolean var62 = var24.isPermittedAll(var56, var61);
      fail("Expected exception of type java.lang.ClassCastException");
    } catch (java.lang.ClassCastException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var3);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var4);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var5);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var21);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var23);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var34);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var44);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var45);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var56);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var61);

  }

  public void test158() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest6.test158");


    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      org.jsecurity.crypto.hash.Sha1Hash var1 = org.jsecurity.crypto.hash.Sha1Hash.fromHexString("9ea9f35c-33e5-4066-bf1f-b5519107993c");
      fail("Expected exception of type java.lang.IllegalArgumentException");
    } catch (java.lang.IllegalArgumentException e) {
      // Expected exception.
    }

  }

  public void test159() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest6.test159");


    org.jsecurity.realm.text.TextConfigurationRealm var0 = new org.jsecurity.realm.text.TextConfigurationRealm();
    java.io.InputStream var2 = org.jsecurity.util.ClassUtils.getResourceAsStream("");
    java.lang.Object[] var3 = new java.lang.Object[] { var2};
    java.util.List var4 = org.jsecurity.util.CollectionUtils.asList(var3);
    org.jsecurity.authc.pam.ModularRealmAuthenticator var5 = new org.jsecurity.authc.pam.ModularRealmAuthenticator(var4);
    org.jsecurity.subject.SimplePrincipalCollection var7 = new org.jsecurity.subject.SimplePrincipalCollection((java.util.Collection)var4, "org.jsecurity.authz.UnauthorizedException: org.jsecurity.session.ExpiredSessionException: ");
    org.jsecurity.session.UnknownSessionException var12 = new org.jsecurity.session.UnknownSessionException("dd\uFFFD", (java.io.Serializable)100.0f);
    org.jsecurity.session.SessionException var14 = new org.jsecurity.session.SessionException("dd\uFFFD", (java.lang.Throwable)var12, (java.io.Serializable)0);
    org.jsecurity.session.SessionException var15 = new org.jsecurity.session.SessionException("dd\uFFFD", (java.lang.Throwable)var12);
    var7.add((java.lang.Object)var15, "org.jsecurity.config.ConfigurationException: dd\uFFFD");
    var0.onLogout((org.jsecurity.subject.PrincipalCollection)var7);
    org.jsecurity.cache.HashtableCacheManager var19 = new org.jsecurity.cache.HashtableCacheManager();
    org.jsecurity.cache.Cache var21 = var19.getCache("\u0000\u0000");
    var0.setAuthorizationCache(var21);
    org.jsecurity.codec.CodecException var25 = new org.jsecurity.codec.CodecException("dd\uFFFD");
    org.jsecurity.authc.ConcurrentAccessException var26 = new org.jsecurity.authc.ConcurrentAccessException("org.jsecurity.authz.UnauthorizedException: org.jsecurity.session.ExpiredSessionException: ", (java.lang.Throwable)var25);
    org.jsecurity.subject.SimplePrincipalCollection var28 = new org.jsecurity.subject.SimplePrincipalCollection((java.lang.Object)var25, "");
    var0.onLogout((org.jsecurity.subject.PrincipalCollection)var28);
    var0.setRoleDefinitions("org.jsecurity.config.ConfigurationException: dd\uFFFD");
    java.lang.String var32 = var0.getName();
    var0.afterAuthorizationCacheSet();
    org.jsecurity.authc.pam.ModularRealmAuthenticator var35 = new org.jsecurity.authc.pam.ModularRealmAuthenticator();
    org.jsecurity.authz.permission.InvalidPermissionStringException var38 = new org.jsecurity.authz.permission.InvalidPermissionStringException("", "dd\uFFFD");
    org.jsecurity.JSecurityException var40 = new org.jsecurity.JSecurityException("");
    org.jsecurity.authc.SimpleAuthenticationInfo var42 = new org.jsecurity.authc.SimpleAuthenticationInfo((java.lang.Object)var38, (java.lang.Object)"", "org.jsecurity.authz.UnauthorizedException: org.jsecurity.session.ExpiredSessionException: ");
    org.jsecurity.subject.PrincipalCollection var43 = var42.getPrincipals();
    var35.onLogout(var43);
    org.jsecurity.session.SessionException var45 = new org.jsecurity.session.SessionException("\uFFFD\uFFFD#\uFFFD\uFFFD.\uFFFD+rr\uFFFD\u07CA\u0000\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\u01E9\uFFFD*'\u0000\u0000", (java.io.Serializable)var43);
    var0.onLogout(var43);
    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      org.jsecurity.crypto.hash.Md5Hash var47 = new org.jsecurity.crypto.hash.Md5Hash((java.lang.Object)var0);
      fail("Expected exception of type org.jsecurity.codec.CodecException");
    } catch (org.jsecurity.codec.CodecException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var2);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var3);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var4);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var21);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var32 + "' != '" + "org.jsecurity.realm.text.TextConfigurationRealm_3932"+ "'", var32.equals("org.jsecurity.realm.text.TextConfigurationRealm_3932"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var43);

  }

  public void test160() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest6.test160");


    org.jsecurity.session.SessionException var1 = new org.jsecurity.session.SessionException();
    org.jsecurity.io.ResourceException var2 = new org.jsecurity.io.ResourceException((java.lang.Throwable)var1);
    org.jsecurity.authz.HostUnauthorizedException var3 = new org.jsecurity.authz.HostUnauthorizedException((java.lang.Throwable)var2);
    org.jsecurity.session.ExpiredSessionException var4 = new org.jsecurity.session.ExpiredSessionException((java.lang.Throwable)var3);
    org.jsecurity.util.InstantiationException var5 = new org.jsecurity.util.InstantiationException("d351cc4f-abdd-49f4-90f1-171dc4f19644", (java.lang.Throwable)var3);
    org.jsecurity.authc.LockedAccountException var6 = new org.jsecurity.authc.LockedAccountException((java.lang.Throwable)var5);

  }

  public void test161() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest6.test161");


    org.jsecurity.realm.activedirectory.ActiveDirectoryRealm var0 = new org.jsecurity.realm.activedirectory.ActiveDirectoryRealm();
    org.jsecurity.authc.credential.Sha256CredentialsMatcher var1 = new org.jsecurity.authc.credential.Sha256CredentialsMatcher();
    var0.setCredentialsMatcher((org.jsecurity.authc.credential.CredentialsMatcher)var1);
    java.lang.String var3 = var0.getAuthorizationCacheName();
    org.jsecurity.authc.UsernamePasswordToken var4 = new org.jsecurity.authc.UsernamePasswordToken();
    java.lang.String var5 = var4.getUsername();
    java.lang.Object var6 = var4.getPrincipal();
    boolean var7 = var0.supports((org.jsecurity.authc.AuthenticationToken)var4);
    org.jsecurity.cache.HashtableCache var9 = new org.jsecurity.cache.HashtableCache("783ccd31-48a8-42dd-890f-df885a7baaff");
    java.lang.String var10 = var9.toString();
    var0.setAuthorizationCache((org.jsecurity.cache.Cache)var9);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var3);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var5);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var6);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var7 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var10 + "' != '" + "HashtableCache [783ccd31-48a8-42dd-890f-df885a7baaff]"+ "'", var10.equals("HashtableCache [783ccd31-48a8-42dd-890f-df885a7baaff]"));

  }

  public void test162() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest6.test162");


    org.jsecurity.realm.activedirectory.ActiveDirectoryRealm var0 = new org.jsecurity.realm.activedirectory.ActiveDirectoryRealm();
    var0.initAuthorizationCache();
    var0.setSearchBase("dd\uFFFD");
    org.jsecurity.realm.ldap.DefaultLdapContextFactory var4 = new org.jsecurity.realm.ldap.DefaultLdapContextFactory();
    var0.setLdapContextFactory((org.jsecurity.realm.ldap.LdapContextFactory)var4);
    var4.setSearchBase("a9c33bae-b1c2-4de9-a3ef-b0c72c5fe07a");

  }

  public void test163() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest6.test163");


    org.jsecurity.realm.text.PropertiesRealm var0 = new org.jsecurity.realm.text.PropertiesRealm();
    java.lang.String var1 = var0.getUserDefinitions();
    org.jsecurity.authc.credential.CredentialsMatcher var2 = var0.getCredentialsMatcher();
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var1);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var2);

  }

  public void test164() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest6.test164");


    org.jsecurity.authz.UnauthenticatedException var1 = new org.jsecurity.authz.UnauthenticatedException();
    org.jsecurity.config.UnresolveableReferenceException var2 = new org.jsecurity.config.UnresolveableReferenceException("", (java.lang.Throwable)var1);
    org.jsecurity.session.InvalidSessionException var3 = new org.jsecurity.session.InvalidSessionException((java.io.Serializable)var1);
    org.jsecurity.io.ResourceException var4 = new org.jsecurity.io.ResourceException((java.lang.Throwable)var1);

  }

  public void test165() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest6.test165");


    org.jsecurity.jndi.JndiTemplate var0 = new org.jsecurity.jndi.JndiTemplate();
    java.util.Properties var1 = var0.getEnvironment();
    java.util.Properties var2 = var0.getEnvironment();
    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      java.lang.Object var4 = var0.lookup("PD94bWwgdmVyc2lvbj0iMS4wIiBlbmNvZGluZz0iVVRGLTgiPz4KPGphdmEgdmVyc2lvbj0iMS43LjBfNzkiIGNsYXNzPSJqYXZhLmJlYW5zLlhNTERlY29kZXIiPgogPG9iamVjdCBjbGFzcz0ib3JnLmpzZWN1cml0eS5pby5SZXNvdXJjZUV4Y2VwdGlvbiI+CiAgPHZvaWQgcHJvcGVydHk9InN0YWNrVHJhY2UiPgogICA8YXJyYXkgY2xhc3M9ImphdmEubGFuZy5TdGFja1RyYWNlRWxlbWVudCIgbGVuZ3RoPSI3Ii8+CiAgPC92b2lkPgogPC9vYmplY3Q+CjwvamF2YT4K");
      fail("Expected exception of type javax.naming.NoInitialContextException");
    } catch (javax.naming.NoInitialContextException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var1);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var2);

  }

  public void test166() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest6.test166");


    org.jsecurity.io.DefaultSerializer var0 = new org.jsecurity.io.DefaultSerializer();
    byte[] var4 = new byte[] { (byte)100, (byte)100, (byte)(-1)};
    java.lang.String var5 = org.jsecurity.codec.CodecSupport.toString(var4);
    char[] var6 = org.jsecurity.codec.CodecSupport.toChars(var4);
    boolean var7 = org.jsecurity.codec.Base64.isBase64(var4);
    boolean var8 = org.jsecurity.codec.Base64.isBase64(var4);
    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      java.lang.Object var9 = var0.deserialize(var4);
      fail("Expected exception of type org.jsecurity.io.SerializationException");
    } catch (org.jsecurity.io.SerializationException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var4);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var5 + "' != '" + "dd\uFFFD"+ "'", var5.equals("dd\uFFFD"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var6);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var7 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var8 == false);

  }

  public void test167() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest6.test167");


    org.jsecurity.authc.AccountException var1 = new org.jsecurity.authc.AccountException("org.jsecurity.config.ConfigurationException: dd\uFFFD-4org.jsecurity.config.ConfigurationException: dd\uFFFD02-8085-950org.jsecurity.config.ConfigurationException: dd\uFFFDbb026org.jsecurity.config.ConfigurationException: dd\uFFFD06");
    org.jsecurity.io.ResourceException var2 = new org.jsecurity.io.ResourceException((java.lang.Throwable)var1);
    org.jsecurity.session.InvalidSessionException var3 = new org.jsecurity.session.InvalidSessionException((java.io.Serializable)var2);

  }

  public void test168() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest6.test168");


    org.jsecurity.realm.text.TextConfigurationRealm var1 = new org.jsecurity.realm.text.TextConfigurationRealm();
    java.io.InputStream var3 = org.jsecurity.util.ClassUtils.getResourceAsStream("");
    java.lang.Object[] var4 = new java.lang.Object[] { var3};
    java.util.List var5 = org.jsecurity.util.CollectionUtils.asList(var4);
    org.jsecurity.authc.pam.ModularRealmAuthenticator var6 = new org.jsecurity.authc.pam.ModularRealmAuthenticator(var5);
    org.jsecurity.subject.SimplePrincipalCollection var8 = new org.jsecurity.subject.SimplePrincipalCollection((java.util.Collection)var5, "org.jsecurity.authz.UnauthorizedException: org.jsecurity.session.ExpiredSessionException: ");
    org.jsecurity.session.UnknownSessionException var13 = new org.jsecurity.session.UnknownSessionException("dd\uFFFD", (java.io.Serializable)100.0f);
    org.jsecurity.session.SessionException var15 = new org.jsecurity.session.SessionException("dd\uFFFD", (java.lang.Throwable)var13, (java.io.Serializable)0);
    org.jsecurity.session.SessionException var16 = new org.jsecurity.session.SessionException("dd\uFFFD", (java.lang.Throwable)var13);
    var8.add((java.lang.Object)var16, "org.jsecurity.config.ConfigurationException: dd\uFFFD");
    var1.onLogout((org.jsecurity.subject.PrincipalCollection)var8);
    java.util.Set var21 = org.jsecurity.util.PermissionUtils.toPermissionStrings("org.jsecurity.config.ConfigurationException: dd\uFFFD");
    org.jsecurity.authz.SimpleAuthorizationInfo var22 = new org.jsecurity.authz.SimpleAuthorizationInfo(var21);
    org.jsecurity.authz.SimpleAuthorizingAccount var23 = new org.jsecurity.authz.SimpleAuthorizingAccount((org.jsecurity.subject.PrincipalCollection)var8, (java.lang.Object)var21);
    org.jsecurity.session.StoppedSessionException var24 = new org.jsecurity.session.StoppedSessionException("org.jsecurity.realm.SimpleAccountRealm-55-authorization", (java.io.Serializable)var8);
    org.jsecurity.realm.activedirectory.ActiveDirectoryRealm var25 = new org.jsecurity.realm.activedirectory.ActiveDirectoryRealm();
    var25.init();
    var25.setSystemPassword("dd\uFFFD");
    org.jsecurity.authz.aop.GuestAnnotationHandler var29 = new org.jsecurity.authz.aop.GuestAnnotationHandler();
    java.lang.Class var30 = var29.getAnnotationClass();
    var25.setAuthenticationTokenClass(var30);
    java.util.Collection var32 = var8.byType(var30);
    org.jsecurity.session.UnknownSessionException var39 = new org.jsecurity.session.UnknownSessionException("dd\uFFFD", (java.io.Serializable)100.0f);
    org.jsecurity.subject.SubjectException var40 = new org.jsecurity.subject.SubjectException("dd\uFFFD", (java.lang.Throwable)var39);
    org.jsecurity.session.InvalidSessionException var41 = new org.jsecurity.session.InvalidSessionException("hi!", (java.lang.Throwable)var40);
    org.jsecurity.session.SessionException var42 = new org.jsecurity.session.SessionException("dd\uFFFD", (java.lang.Throwable)var40);
    org.jsecurity.authc.CredentialsException var43 = new org.jsecurity.authc.CredentialsException("783ccd31-48a8-42dd-890f-df885a7baaff", (java.lang.Throwable)var42);
    java.lang.String var44 = var43.toString();
    org.jsecurity.subject.SimplePrincipalCollection var46 = new org.jsecurity.subject.SimplePrincipalCollection((java.lang.Object)var43, "9d388eff-106e-47d9-8180-843fdfd13dce");
    org.jsecurity.realm.text.TextConfigurationRealm var47 = new org.jsecurity.realm.text.TextConfigurationRealm();
    java.io.InputStream var49 = org.jsecurity.util.ClassUtils.getResourceAsStream("");
    java.lang.Object[] var50 = new java.lang.Object[] { var49};
    java.util.List var51 = org.jsecurity.util.CollectionUtils.asList(var50);
    org.jsecurity.authc.pam.ModularRealmAuthenticator var52 = new org.jsecurity.authc.pam.ModularRealmAuthenticator(var51);
    org.jsecurity.subject.SimplePrincipalCollection var54 = new org.jsecurity.subject.SimplePrincipalCollection((java.util.Collection)var51, "org.jsecurity.authz.UnauthorizedException: org.jsecurity.session.ExpiredSessionException: ");
    org.jsecurity.session.UnknownSessionException var59 = new org.jsecurity.session.UnknownSessionException("dd\uFFFD", (java.io.Serializable)100.0f);
    org.jsecurity.session.SessionException var61 = new org.jsecurity.session.SessionException("dd\uFFFD", (java.lang.Throwable)var59, (java.io.Serializable)0);
    org.jsecurity.session.SessionException var62 = new org.jsecurity.session.SessionException("dd\uFFFD", (java.lang.Throwable)var59);
    var54.add((java.lang.Object)var62, "org.jsecurity.config.ConfigurationException: dd\uFFFD");
    var47.onLogout((org.jsecurity.subject.PrincipalCollection)var54);
    org.jsecurity.cache.HashtableCacheManager var66 = new org.jsecurity.cache.HashtableCacheManager();
    org.jsecurity.cache.Cache var68 = var66.getCache("\u0000\u0000");
    var47.setAuthorizationCache(var68);
    org.jsecurity.codec.CodecException var72 = new org.jsecurity.codec.CodecException("dd\uFFFD");
    org.jsecurity.authc.ConcurrentAccessException var73 = new org.jsecurity.authc.ConcurrentAccessException("org.jsecurity.authz.UnauthorizedException: org.jsecurity.session.ExpiredSessionException: ", (java.lang.Throwable)var72);
    org.jsecurity.subject.SimplePrincipalCollection var75 = new org.jsecurity.subject.SimplePrincipalCollection((java.lang.Object)var72, "");
    var47.onLogout((org.jsecurity.subject.PrincipalCollection)var75);
    var47.setRoleDefinitions("org.jsecurity.config.ConfigurationException: dd\uFFFD");
    java.lang.String var79 = var47.getUserDefinitions();
    java.lang.Class var80 = var47.getAuthenticationTokenClass();
    java.util.Collection var81 = var46.byType(var80);
    java.lang.Class[] var82 = new java.lang.Class[] { var80};
    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      java.lang.reflect.Constructor var83 = org.jsecurity.util.ClassUtils.getConstructor(var30, var82);
      fail("Expected exception of type java.lang.IllegalStateException");
    } catch (java.lang.IllegalStateException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var3);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var4);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var5);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var21);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var30);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var32);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var44 + "' != '" + "org.jsecurity.authc.CredentialsException: 783ccd31-48a8-42dd-890f-df885a7baaff"+ "'", var44.equals("org.jsecurity.authc.CredentialsException: 783ccd31-48a8-42dd-890f-df885a7baaff"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var49);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var50);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var51);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var68);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var79);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var80);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var81);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var82);

  }

  public void test169() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest6.test169");


    org.jsecurity.session.mgt.SimpleSession var0 = new org.jsecurity.session.mgt.SimpleSession();
    var0.touch();
    org.jsecurity.authz.UnauthenticatedException var4 = new org.jsecurity.authz.UnauthenticatedException();
    org.jsecurity.config.UnresolveableReferenceException var5 = new org.jsecurity.config.UnresolveableReferenceException("", (java.lang.Throwable)var4);
    org.jsecurity.cache.CacheException var6 = new org.jsecurity.cache.CacheException("org.jsecurity.config.ConfigurationException: dd\uFFFD", (java.lang.Throwable)var4);
    java.lang.Object var7 = var0.removeAttribute((java.lang.Object)var6);
    org.jsecurity.session.mgt.eis.MemorySessionDAO var8 = new org.jsecurity.session.mgt.eis.MemorySessionDAO();
    org.jsecurity.cache.Cache var9 = var8.getActiveSessionsCache();
    org.jsecurity.cache.CacheManager var10 = var8.getCacheManager();
    org.jsecurity.cache.HashtableCacheManager var11 = new org.jsecurity.cache.HashtableCacheManager();
    org.jsecurity.cache.Cache var13 = var11.getCache("\u0000\u0000");
    var8.setActiveSessionsCache(var13);
    java.io.InputStream var16 = org.jsecurity.util.ClassUtils.getResourceAsStream("");
    java.lang.Object[] var17 = new java.lang.Object[] { var16};
    java.util.List var18 = org.jsecurity.util.CollectionUtils.asList(var17);
    org.jsecurity.authc.pam.ModularRealmAuthenticator var19 = new org.jsecurity.authc.pam.ModularRealmAuthenticator(var18);
    org.jsecurity.authc.pam.AllSuccessfulModularAuthenticationStrategy var20 = new org.jsecurity.authc.pam.AllSuccessfulModularAuthenticationStrategy();
    var19.setModularAuthenticationStrategy((org.jsecurity.authc.pam.ModularAuthenticationStrategy)var20);
    org.jsecurity.authz.SimpleAuthorizationInfo var22 = new org.jsecurity.authz.SimpleAuthorizationInfo();
    var22.addStringPermission("hi!");
    java.io.InputStream var26 = org.jsecurity.util.ClassUtils.getResourceAsStream("");
    java.lang.Object[] var27 = new java.lang.Object[] { var26};
    java.util.List var28 = org.jsecurity.util.CollectionUtils.asList(var27);
    var22.addRoles((java.util.Collection)var28);
    var19.setAuthenticationListeners((java.util.Collection)var28);
    org.jsecurity.realm.activedirectory.ActiveDirectoryRealm var31 = new org.jsecurity.realm.activedirectory.ActiveDirectoryRealm();
    var31.setPrincipalSuffix("");
    var19.setRealm((org.jsecurity.realm.Realm)var31);
    org.jsecurity.cache.HashtableCacheManager var35 = new org.jsecurity.cache.HashtableCacheManager();
    org.jsecurity.cache.Cache var37 = var35.getCache("\u0000\u0000");
    var31.setAuthorizationCache(var37);
    var8.setActiveSessionsCache(var37);
    org.jsecurity.session.mgt.SimpleSession var40 = new org.jsecurity.session.mgt.SimpleSession();
    java.io.Serializable var41 = var8.create((org.jsecurity.session.Session)var40);
    java.io.Serializable var42 = var40.getId();
    org.jsecurity.session.mgt.SimpleSession var43 = new org.jsecurity.session.mgt.SimpleSession();
    var43.touch();
    var43.validate();
    org.jsecurity.session.mgt.SimpleSession var46 = new org.jsecurity.session.mgt.SimpleSession();
    var46.setTimeout((-1L));
    org.jsecurity.session.mgt.SimpleSession var49 = new org.jsecurity.session.mgt.SimpleSession();
    java.util.Date var50 = var49.getLastAccessTime();
    var46.setLastAccessTime(var50);
    org.jsecurity.session.mgt.SimpleSession var52 = new org.jsecurity.session.mgt.SimpleSession();
    java.util.Date var53 = var52.getLastAccessTime();
    var46.setStopTimestamp(var53);
    var43.setLastAccessTime(var53);
    var40.setStartTimestamp(var53);
    var0.setStartTimestamp(var53);
    var0.validate();
    boolean var59 = var0.isExpired();
    java.net.InetAddress var60 = var0.getHostAddress();
    org.jsecurity.authz.HostUnauthorizedException var61 = new org.jsecurity.authz.HostUnauthorizedException(var60);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var7);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var9);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var10);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var13);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var16);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var17);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var18);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var26);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var27);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var28);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var37);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var41 + "' != '" + "e195946b-89ce-46a8-884d-13ee2946b90c"+ "'", var41.equals("e195946b-89ce-46a8-884d-13ee2946b90c"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var42 + "' != '" + "e195946b-89ce-46a8-884d-13ee2946b90c"+ "'", var42.equals("e195946b-89ce-46a8-884d-13ee2946b90c"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var50);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var53);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var59 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var60);

  }

  public void test170() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest6.test170");


    org.jsecurity.authz.SimpleAuthorizationInfo var0 = new org.jsecurity.authz.SimpleAuthorizationInfo();
    java.util.Set var1 = var0.getStringPermissions();
    java.util.Set var2 = var0.getRoles();
    var0.addStringPermission("hi!");
    org.jsecurity.subject.SimplePrincipalCollection var6 = new org.jsecurity.subject.SimplePrincipalCollection((java.lang.Object)"hi!", "5dd0c65d-1422-49c2-becb-9e8dca619ab3");
    org.jsecurity.authz.aop.GuestAnnotationHandler var7 = new org.jsecurity.authz.aop.GuestAnnotationHandler();
    java.lang.Class var8 = var7.getAnnotationClass();
    java.lang.Object var9 = var6.oneByType(var8);
    java.lang.String[] var12 = org.jsecurity.util.StringUtils.tokenizeToStringArray("e23a02c5-2287-4daa-91c4-8efed2be0f73", "49932616-87e3-49f2-a9ff-1e3516355d97");
    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      java.lang.Object var13 = org.jsecurity.util.ClassUtils.newInstance(var8, (java.lang.Object[])var12);
      fail("Expected exception of type java.lang.IllegalStateException");
    } catch (java.lang.IllegalStateException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var1);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var2);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var8);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var9);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var12);

  }

  public void test171() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest6.test171");


    org.jsecurity.session.mgt.eis.MemorySessionDAO var0 = new org.jsecurity.session.mgt.eis.MemorySessionDAO();
    org.jsecurity.cache.Cache var1 = var0.getActiveSessionsCache();
    org.jsecurity.cache.CacheManager var2 = var0.getCacheManager();
    org.jsecurity.cache.HashtableCacheManager var3 = new org.jsecurity.cache.HashtableCacheManager();
    org.jsecurity.cache.Cache var5 = var3.getCache("\u0000\u0000");
    var0.setActiveSessionsCache(var5);
    java.io.InputStream var8 = org.jsecurity.util.ClassUtils.getResourceAsStream("");
    java.lang.Object[] var9 = new java.lang.Object[] { var8};
    java.util.List var10 = org.jsecurity.util.CollectionUtils.asList(var9);
    org.jsecurity.authc.pam.ModularRealmAuthenticator var11 = new org.jsecurity.authc.pam.ModularRealmAuthenticator(var10);
    org.jsecurity.authc.pam.AllSuccessfulModularAuthenticationStrategy var12 = new org.jsecurity.authc.pam.AllSuccessfulModularAuthenticationStrategy();
    var11.setModularAuthenticationStrategy((org.jsecurity.authc.pam.ModularAuthenticationStrategy)var12);
    org.jsecurity.authz.SimpleAuthorizationInfo var14 = new org.jsecurity.authz.SimpleAuthorizationInfo();
    var14.addStringPermission("hi!");
    java.io.InputStream var18 = org.jsecurity.util.ClassUtils.getResourceAsStream("");
    java.lang.Object[] var19 = new java.lang.Object[] { var18};
    java.util.List var20 = org.jsecurity.util.CollectionUtils.asList(var19);
    var14.addRoles((java.util.Collection)var20);
    var11.setAuthenticationListeners((java.util.Collection)var20);
    org.jsecurity.realm.activedirectory.ActiveDirectoryRealm var23 = new org.jsecurity.realm.activedirectory.ActiveDirectoryRealm();
    var23.setPrincipalSuffix("");
    var11.setRealm((org.jsecurity.realm.Realm)var23);
    org.jsecurity.cache.HashtableCacheManager var27 = new org.jsecurity.cache.HashtableCacheManager();
    org.jsecurity.cache.Cache var29 = var27.getCache("\u0000\u0000");
    var23.setAuthorizationCache(var29);
    var0.setActiveSessionsCache(var29);
    org.jsecurity.session.mgt.SimpleSession var32 = new org.jsecurity.session.mgt.SimpleSession();
    java.io.Serializable var33 = var0.create((org.jsecurity.session.Session)var32);
    java.io.Serializable var34 = var32.getId();
    org.jsecurity.authc.credential.Md5CredentialsMatcher var35 = new org.jsecurity.authc.credential.Md5CredentialsMatcher();
    boolean var36 = var35.isHashSalted();
    boolean var37 = var35.isHashSalted();
    int var38 = var35.getHashIterations();
    java.lang.Object var39 = var32.removeAttribute((java.lang.Object)var35);
    java.net.InetAddress var40 = var32.getHostAddress();
    org.jsecurity.session.mgt.SimpleSession var41 = new org.jsecurity.session.mgt.SimpleSession(var40);
    org.jsecurity.session.mgt.SimpleSession var42 = new org.jsecurity.session.mgt.SimpleSession();
    var42.setTimeout((-1L));
    org.jsecurity.session.mgt.SimpleSession var45 = new org.jsecurity.session.mgt.SimpleSession();
    java.util.Date var46 = var45.getLastAccessTime();
    var42.setLastAccessTime(var46);
    java.util.Date var48 = var42.getStartTimestamp();
    var41.setStopTimestamp(var48);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var1);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var2);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var5);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var8);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var9);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var10);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var18);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var19);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var20);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var29);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var33 + "' != '" + "df61545a-fd79-4b8f-8551-4c1a2362f6a4"+ "'", var33.equals("df61545a-fd79-4b8f-8551-4c1a2362f6a4"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var34 + "' != '" + "df61545a-fd79-4b8f-8551-4c1a2362f6a4"+ "'", var34.equals("df61545a-fd79-4b8f-8551-4c1a2362f6a4"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var36 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var37 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var38 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var39);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var40);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var46);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var48);

  }

  public void test172() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest6.test172");


    org.jsecurity.session.mgt.eis.MemorySessionDAO var0 = new org.jsecurity.session.mgt.eis.MemorySessionDAO();
    org.jsecurity.cache.Cache var1 = var0.getActiveSessionsCache();
    org.jsecurity.cache.CacheManager var2 = var0.getCacheManager();
    org.jsecurity.cache.HashtableCacheManager var3 = new org.jsecurity.cache.HashtableCacheManager();
    org.jsecurity.cache.Cache var5 = var3.getCache("\u0000\u0000");
    var0.setActiveSessionsCache(var5);
    java.io.InputStream var8 = org.jsecurity.util.ClassUtils.getResourceAsStream("");
    java.lang.Object[] var9 = new java.lang.Object[] { var8};
    java.util.List var10 = org.jsecurity.util.CollectionUtils.asList(var9);
    org.jsecurity.authc.pam.ModularRealmAuthenticator var11 = new org.jsecurity.authc.pam.ModularRealmAuthenticator(var10);
    org.jsecurity.authc.pam.AllSuccessfulModularAuthenticationStrategy var12 = new org.jsecurity.authc.pam.AllSuccessfulModularAuthenticationStrategy();
    var11.setModularAuthenticationStrategy((org.jsecurity.authc.pam.ModularAuthenticationStrategy)var12);
    org.jsecurity.authz.SimpleAuthorizationInfo var14 = new org.jsecurity.authz.SimpleAuthorizationInfo();
    var14.addStringPermission("hi!");
    java.io.InputStream var18 = org.jsecurity.util.ClassUtils.getResourceAsStream("");
    java.lang.Object[] var19 = new java.lang.Object[] { var18};
    java.util.List var20 = org.jsecurity.util.CollectionUtils.asList(var19);
    var14.addRoles((java.util.Collection)var20);
    var11.setAuthenticationListeners((java.util.Collection)var20);
    org.jsecurity.realm.activedirectory.ActiveDirectoryRealm var23 = new org.jsecurity.realm.activedirectory.ActiveDirectoryRealm();
    var23.setPrincipalSuffix("");
    var11.setRealm((org.jsecurity.realm.Realm)var23);
    org.jsecurity.cache.HashtableCacheManager var27 = new org.jsecurity.cache.HashtableCacheManager();
    org.jsecurity.cache.Cache var29 = var27.getCache("\u0000\u0000");
    var23.setAuthorizationCache(var29);
    var0.setActiveSessionsCache(var29);
    org.jsecurity.session.mgt.SimpleSession var32 = new org.jsecurity.session.mgt.SimpleSession();
    java.io.Serializable var33 = var0.create((org.jsecurity.session.Session)var32);
    org.jsecurity.session.mgt.SimpleSession var34 = new org.jsecurity.session.mgt.SimpleSession();
    var34.touch();
    var34.validate();
    org.jsecurity.session.mgt.SimpleSession var37 = new org.jsecurity.session.mgt.SimpleSession();
    var37.setTimeout((-1L));
    org.jsecurity.session.mgt.SimpleSession var40 = new org.jsecurity.session.mgt.SimpleSession();
    java.util.Date var41 = var40.getLastAccessTime();
    var37.setLastAccessTime(var41);
    org.jsecurity.session.mgt.SimpleSession var43 = new org.jsecurity.session.mgt.SimpleSession();
    java.util.Date var44 = var43.getLastAccessTime();
    var37.setStopTimestamp(var44);
    var34.setLastAccessTime(var44);
    var32.setLastAccessTime(var44);
    org.jsecurity.session.mgt.ImmutableProxiedSession var48 = new org.jsecurity.session.mgt.ImmutableProxiedSession((org.jsecurity.session.Session)var32);
    org.jsecurity.session.ProxiedSession var49 = new org.jsecurity.session.ProxiedSession((org.jsecurity.session.Session)var32);
    java.util.Date var50 = var49.getStartTimestamp();
    org.jsecurity.authc.IncorrectCredentialsException var53 = new org.jsecurity.authc.IncorrectCredentialsException("\u0000\u0000");
    org.jsecurity.codec.CodecException var56 = new org.jsecurity.codec.CodecException("dd\uFFFD");
    org.jsecurity.authc.ConcurrentAccessException var57 = new org.jsecurity.authc.ConcurrentAccessException("org.jsecurity.authz.UnauthorizedException: org.jsecurity.session.ExpiredSessionException: ", (java.lang.Throwable)var56);
    org.jsecurity.subject.SimplePrincipalCollection var59 = new org.jsecurity.subject.SimplePrincipalCollection((java.lang.Object)var56, "");
    java.io.InputStream var61 = org.jsecurity.util.ClassUtils.getResourceAsStream("");
    java.lang.Object[] var62 = new java.lang.Object[] { var61};
    java.util.List var63 = org.jsecurity.util.CollectionUtils.asList(var62);
    org.jsecurity.authc.pam.ModularRealmAuthenticator var64 = new org.jsecurity.authc.pam.ModularRealmAuthenticator(var63);
    org.jsecurity.authc.pam.AllSuccessfulModularAuthenticationStrategy var65 = new org.jsecurity.authc.pam.AllSuccessfulModularAuthenticationStrategy();
    var64.setModularAuthenticationStrategy((org.jsecurity.authc.pam.ModularAuthenticationStrategy)var65);
    org.jsecurity.authz.SimpleAuthorizationInfo var67 = new org.jsecurity.authz.SimpleAuthorizationInfo();
    var67.addStringPermission("hi!");
    java.io.InputStream var71 = org.jsecurity.util.ClassUtils.getResourceAsStream("");
    java.lang.Object[] var72 = new java.lang.Object[] { var71};
    java.util.List var73 = org.jsecurity.util.CollectionUtils.asList(var72);
    var67.addRoles((java.util.Collection)var73);
    var64.setAuthenticationListeners((java.util.Collection)var73);
    org.jsecurity.realm.activedirectory.ActiveDirectoryRealm var76 = new org.jsecurity.realm.activedirectory.ActiveDirectoryRealm();
    var76.setPrincipalSuffix("");
    var64.setRealm((org.jsecurity.realm.Realm)var76);
    org.jsecurity.authc.pam.FirstSuccessfulAuthenticationStrategy var80 = new org.jsecurity.authc.pam.FirstSuccessfulAuthenticationStrategy();
    org.jsecurity.authz.UnauthorizedException var82 = new org.jsecurity.authz.UnauthorizedException("org.jsecurity.config.ConfigurationException: dd\uFFFD");
    java.lang.Throwable[] var83 = var82.getSuppressed();
    java.util.List var84 = org.jsecurity.util.CollectionUtils.asList((java.lang.Object[])var83);
    org.jsecurity.authc.UsernamePasswordToken var85 = new org.jsecurity.authc.UsernamePasswordToken();
    java.lang.String var86 = var85.getUsername();
    java.net.InetAddress var87 = var85.getInetAddress();
    org.jsecurity.authc.AuthenticationInfo var88 = var80.beforeAllAttempts((java.util.Collection)var84, (org.jsecurity.authc.AuthenticationToken)var85);
    var64.setModularAuthenticationStrategy((org.jsecurity.authc.pam.ModularAuthenticationStrategy)var80);
    org.jsecurity.authc.SimpleAccount var90 = new org.jsecurity.authc.SimpleAccount((org.jsecurity.subject.PrincipalCollection)var59, (java.lang.Object)var64);
    org.jsecurity.session.StoppedSessionException var91 = new org.jsecurity.session.StoppedSessionException("org.jsecurity.authz.UnauthorizedException: org.jsecurity.session.ExpiredSessionException: ", (java.lang.Throwable)var53, (java.io.Serializable)var90);
    org.jsecurity.subject.InvalidSubjectException var92 = new org.jsecurity.subject.InvalidSubjectException((java.lang.Throwable)var53);
    org.jsecurity.config.UnresolveableReferenceException var93 = new org.jsecurity.config.UnresolveableReferenceException();
    var49.setAttribute((java.lang.Object)var92, (java.lang.Object)var93);
    var49.stop();
    java.util.Date var96 = var49.getStartTimestamp();
    var49.touch();
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var1);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var2);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var5);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var8);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var9);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var10);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var18);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var19);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var20);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var29);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var33 + "' != '" + "61cd3121-6351-4261-bc0c-ec1f2870885e"+ "'", var33.equals("61cd3121-6351-4261-bc0c-ec1f2870885e"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var41);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var44);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var50);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var61);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var62);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var63);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var71);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var72);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var73);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var83);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var84);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var86);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var87);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var88);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var96);

  }

  public void test173() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest6.test173");


    java.lang.String[] var2 = org.jsecurity.util.StringUtils.tokenizeToStringArray("eb8eb80000", "38cbf1b3-9b1c-440c-96c7-d3ef7f28cfaa");
    java.util.List var3 = org.jsecurity.util.CollectionUtils.asList((java.lang.Object[])var2);
    java.util.Set var4 = org.jsecurity.util.CollectionUtils.asSet((java.lang.Object[])var2);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var2);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var3);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var4);

  }

  public void test174() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest6.test174");


    org.jsecurity.session.UnknownSessionException var6 = new org.jsecurity.session.UnknownSessionException("dd\uFFFD", (java.io.Serializable)100.0f);
    org.jsecurity.subject.SubjectException var7 = new org.jsecurity.subject.SubjectException("dd\uFFFD", (java.lang.Throwable)var6);
    org.jsecurity.authc.AccountException var8 = new org.jsecurity.authc.AccountException("hi!", (java.lang.Throwable)var7);
    org.jsecurity.session.StoppedSessionException var9 = new org.jsecurity.session.StoppedSessionException((java.lang.Throwable)var8);
    org.jsecurity.session.SessionException var10 = new org.jsecurity.session.SessionException("hi!", (java.lang.Throwable)var8);
    org.jsecurity.authz.UnauthorizedException var13 = new org.jsecurity.authz.UnauthorizedException();
    org.jsecurity.session.SessionException var15 = new org.jsecurity.session.SessionException("", (java.lang.Throwable)var13, (java.io.Serializable)"org.jsecurity.config.ConfigurationException: dd\uFFFD");
    org.jsecurity.session.ExpiredSessionException var16 = new org.jsecurity.session.ExpiredSessionException("", (java.io.Serializable)"");
    org.jsecurity.authz.UnauthorizedException var17 = new org.jsecurity.authz.UnauthorizedException((java.lang.Throwable)var16);
    org.jsecurity.authz.AuthorizationException var18 = new org.jsecurity.authz.AuthorizationException((java.lang.Throwable)var16);
    org.jsecurity.authc.ConcurrentAccessException var19 = new org.jsecurity.authc.ConcurrentAccessException((java.lang.Throwable)var18);
    org.jsecurity.subject.InvalidSubjectException var20 = new org.jsecurity.subject.InvalidSubjectException((java.lang.Throwable)var19);
    org.jsecurity.session.ExpiredSessionException var21 = new org.jsecurity.session.ExpiredSessionException("1769b53e-2a9a-45b8-a0f2-f63d8fb24858", (java.lang.Throwable)var10, (java.io.Serializable)var20);

  }

  public void test175() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest6.test175");


    org.jsecurity.authc.SimpleAuthenticationInfo var0 = new org.jsecurity.authc.SimpleAuthenticationInfo();
    org.jsecurity.authc.pam.AtLeastOneSuccessfulModularAuthenticationStrategy var1 = new org.jsecurity.authc.pam.AtLeastOneSuccessfulModularAuthenticationStrategy();
    org.jsecurity.authc.pam.AllSuccessfulModularAuthenticationStrategy var3 = new org.jsecurity.authc.pam.AllSuccessfulModularAuthenticationStrategy();
    char[] var5 = new char[] { };
    org.jsecurity.authc.UsernamePasswordToken var7 = new org.jsecurity.authc.UsernamePasswordToken("hi!", var5, true);
    org.jsecurity.authc.SimpleAccount var8 = new org.jsecurity.authc.SimpleAccount();
    var8.setCredentialsExpired(false);
    boolean var11 = var8.isLocked();
    org.jsecurity.authc.AuthenticationInfo var12 = var3.afterAllAttempts((org.jsecurity.authc.AuthenticationToken)var7, (org.jsecurity.authc.AuthenticationInfo)var8);
    char[] var15 = new char[] { };
    org.jsecurity.authc.UsernamePasswordToken var17 = new org.jsecurity.authc.UsernamePasswordToken("hi!", var15, true);
    org.jsecurity.authc.UsernamePasswordToken var18 = new org.jsecurity.authc.UsernamePasswordToken("\u0000\u0000", var15);
    var7.setPassword(var15);
    org.jsecurity.authc.UsernamePasswordToken var20 = new org.jsecurity.authc.UsernamePasswordToken("\u0000\u0000\u0000", var15);
    org.jsecurity.realm.text.TextConfigurationRealm var21 = new org.jsecurity.realm.text.TextConfigurationRealm();
    java.io.InputStream var23 = org.jsecurity.util.ClassUtils.getResourceAsStream("");
    java.lang.Object[] var24 = new java.lang.Object[] { var23};
    java.util.List var25 = org.jsecurity.util.CollectionUtils.asList(var24);
    org.jsecurity.authc.pam.ModularRealmAuthenticator var26 = new org.jsecurity.authc.pam.ModularRealmAuthenticator(var25);
    org.jsecurity.subject.SimplePrincipalCollection var28 = new org.jsecurity.subject.SimplePrincipalCollection((java.util.Collection)var25, "org.jsecurity.authz.UnauthorizedException: org.jsecurity.session.ExpiredSessionException: ");
    org.jsecurity.session.UnknownSessionException var33 = new org.jsecurity.session.UnknownSessionException("dd\uFFFD", (java.io.Serializable)100.0f);
    org.jsecurity.session.SessionException var35 = new org.jsecurity.session.SessionException("dd\uFFFD", (java.lang.Throwable)var33, (java.io.Serializable)0);
    org.jsecurity.session.SessionException var36 = new org.jsecurity.session.SessionException("dd\uFFFD", (java.lang.Throwable)var33);
    var28.add((java.lang.Object)var36, "org.jsecurity.config.ConfigurationException: dd\uFFFD");
    var21.onLogout((org.jsecurity.subject.PrincipalCollection)var28);
    org.jsecurity.authc.ExpiredCredentialsException var41 = new org.jsecurity.authc.ExpiredCredentialsException();
    org.jsecurity.session.ExpiredSessionException var42 = new org.jsecurity.session.ExpiredSessionException("", (java.lang.Throwable)var41);
    java.lang.Throwable[] var43 = var42.getSuppressed();
    org.jsecurity.io.ResourceException var44 = new org.jsecurity.io.ResourceException((java.lang.Throwable)var42);
    org.jsecurity.authc.SimpleAuthenticationInfo var45 = new org.jsecurity.authc.SimpleAuthenticationInfo((org.jsecurity.subject.PrincipalCollection)var28, (java.lang.Object)var42);
    org.jsecurity.authc.AuthenticationInfo var46 = var1.afterAllAttempts((org.jsecurity.authc.AuthenticationToken)var20, (org.jsecurity.authc.AuthenticationInfo)var45);
    java.lang.Object var47 = var45.getCredentials();
    java.lang.Object var48 = var45.getCredentials();
    var0.merge((org.jsecurity.authc.AuthenticationInfo)var45);
    org.jsecurity.subject.PrincipalCollection var50 = var45.getPrincipals();
    java.lang.Object var51 = var45.getCredentials();
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var5);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var11 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var12);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var15);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var23);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var24);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var25);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var43);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var46);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var47);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var48);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var50);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var51);

  }

  public void test176() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest6.test176");


    org.jsecurity.JSecurityException var2 = new org.jsecurity.JSecurityException("");
    org.jsecurity.authc.pam.UnsupportedTokenException var3 = new org.jsecurity.authc.pam.UnsupportedTokenException((java.lang.Throwable)var2);
    org.jsecurity.authz.HostUnauthorizedException var4 = new org.jsecurity.authz.HostUnauthorizedException("54796a53-cb9a-42d1-a889-ef2a5a9adae9", (java.lang.Throwable)var3);
    org.jsecurity.session.UnknownSessionException var5 = new org.jsecurity.session.UnknownSessionException((java.lang.Throwable)var3);

  }

  public void test177() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest6.test177");


    org.jsecurity.realm.text.PropertiesRealm var0 = new org.jsecurity.realm.text.PropertiesRealm();
    java.lang.String var1 = var0.getUserDefinitions();
    java.lang.String var2 = var0.getName();
    var0.setUseXmlFormat(false);
    org.jsecurity.realm.activedirectory.ActiveDirectoryRealm var5 = new org.jsecurity.realm.activedirectory.ActiveDirectoryRealm();
    org.jsecurity.authc.credential.Sha256CredentialsMatcher var6 = new org.jsecurity.authc.credential.Sha256CredentialsMatcher();
    var5.setCredentialsMatcher((org.jsecurity.authc.credential.CredentialsMatcher)var6);
    java.lang.String var8 = var5.getAuthorizationCacheName();
    var5.setPrincipalSuffix("org.jsecurity.config.ConfigurationException: dd\uFFFD");
    org.jsecurity.realm.text.TextConfigurationRealm var11 = new org.jsecurity.realm.text.TextConfigurationRealm();
    java.io.InputStream var13 = org.jsecurity.util.ClassUtils.getResourceAsStream("");
    java.lang.Object[] var14 = new java.lang.Object[] { var13};
    java.util.List var15 = org.jsecurity.util.CollectionUtils.asList(var14);
    org.jsecurity.authc.pam.ModularRealmAuthenticator var16 = new org.jsecurity.authc.pam.ModularRealmAuthenticator(var15);
    org.jsecurity.subject.SimplePrincipalCollection var18 = new org.jsecurity.subject.SimplePrincipalCollection((java.util.Collection)var15, "org.jsecurity.authz.UnauthorizedException: org.jsecurity.session.ExpiredSessionException: ");
    org.jsecurity.session.UnknownSessionException var23 = new org.jsecurity.session.UnknownSessionException("dd\uFFFD", (java.io.Serializable)100.0f);
    org.jsecurity.session.SessionException var25 = new org.jsecurity.session.SessionException("dd\uFFFD", (java.lang.Throwable)var23, (java.io.Serializable)0);
    org.jsecurity.session.SessionException var26 = new org.jsecurity.session.SessionException("dd\uFFFD", (java.lang.Throwable)var23);
    var18.add((java.lang.Object)var26, "org.jsecurity.config.ConfigurationException: dd\uFFFD");
    var11.onLogout((org.jsecurity.subject.PrincipalCollection)var18);
    var5.onLogout((org.jsecurity.subject.PrincipalCollection)var18);
    org.jsecurity.codec.CodecException var33 = new org.jsecurity.codec.CodecException("dd\uFFFD");
    org.jsecurity.authc.ConcurrentAccessException var34 = new org.jsecurity.authc.ConcurrentAccessException("org.jsecurity.authz.UnauthorizedException: org.jsecurity.session.ExpiredSessionException: ", (java.lang.Throwable)var33);
    org.jsecurity.subject.SimplePrincipalCollection var36 = new org.jsecurity.subject.SimplePrincipalCollection((java.lang.Object)var33, "");
    org.jsecurity.authc.pam.FirstSuccessfulAuthenticationStrategy var37 = new org.jsecurity.authc.pam.FirstSuccessfulAuthenticationStrategy();
    org.jsecurity.authz.UnauthorizedException var39 = new org.jsecurity.authz.UnauthorizedException("org.jsecurity.config.ConfigurationException: dd\uFFFD");
    java.lang.Throwable[] var40 = var39.getSuppressed();
    java.util.List var41 = org.jsecurity.util.CollectionUtils.asList((java.lang.Object[])var40);
    org.jsecurity.authc.UsernamePasswordToken var42 = new org.jsecurity.authc.UsernamePasswordToken();
    java.lang.String var43 = var42.getUsername();
    java.net.InetAddress var44 = var42.getInetAddress();
    org.jsecurity.authc.AuthenticationInfo var45 = var37.beforeAllAttempts((java.util.Collection)var41, (org.jsecurity.authc.AuthenticationToken)var42);
    org.jsecurity.session.UnknownSessionException var50 = new org.jsecurity.session.UnknownSessionException("dd\uFFFD", (java.io.Serializable)100.0f);
    org.jsecurity.subject.SubjectException var51 = new org.jsecurity.subject.SubjectException("dd\uFFFD", (java.lang.Throwable)var50);
    org.jsecurity.io.SerializationException var52 = new org.jsecurity.io.SerializationException("", (java.lang.Throwable)var51);
    java.lang.Throwable[] var53 = var51.getSuppressed();
    java.util.Set var54 = org.jsecurity.util.CollectionUtils.asSet((java.lang.Object[])var53);
    org.jsecurity.authc.SimpleAccount var55 = new org.jsecurity.authc.SimpleAccount((org.jsecurity.subject.PrincipalCollection)var36, (java.lang.Object)var41, var54);
    org.jsecurity.authz.SimpleAuthorizingAccount var56 = new org.jsecurity.authz.SimpleAuthorizingAccount((org.jsecurity.subject.PrincipalCollection)var18, (java.lang.Object)var55);
    var18.clear();
    org.jsecurity.authz.SimpleRole var58 = new org.jsecurity.authz.SimpleRole();
    org.jsecurity.authz.SimpleAuthorizationInfo var59 = new org.jsecurity.authz.SimpleAuthorizationInfo();
    var59.addRole("a2b823b1e72eae2b727289df8a00a89df8a0bab6ad8a89c4c5c7a9b62a270000");
    org.jsecurity.session.UnknownSessionException var66 = new org.jsecurity.session.UnknownSessionException("dd\uFFFD", (java.io.Serializable)100.0f);
    org.jsecurity.subject.SubjectException var67 = new org.jsecurity.subject.SubjectException("dd\uFFFD", (java.lang.Throwable)var66);
    org.jsecurity.io.SerializationException var68 = new org.jsecurity.io.SerializationException("", (java.lang.Throwable)var67);
    java.lang.Throwable[] var69 = var67.getSuppressed();
    java.util.Set var70 = org.jsecurity.util.CollectionUtils.asSet((java.lang.Object[])var69);
    var59.addRoles((java.util.Collection)var70);
    var58.addAll((java.util.Collection)var70);
    java.lang.String var73 = var58.getName();
    var58.setName("");
    org.jsecurity.codec.CodecException var78 = new org.jsecurity.codec.CodecException("dd\uFFFD");
    org.jsecurity.authc.ConcurrentAccessException var79 = new org.jsecurity.authc.ConcurrentAccessException("org.jsecurity.authz.UnauthorizedException: org.jsecurity.session.ExpiredSessionException: ", (java.lang.Throwable)var78);
    org.jsecurity.subject.SimplePrincipalCollection var81 = new org.jsecurity.subject.SimplePrincipalCollection((java.lang.Object)var78, "");
    java.io.InputStream var83 = org.jsecurity.util.ClassUtils.getResourceAsStream("");
    java.lang.Object[] var84 = new java.lang.Object[] { var83};
    java.util.List var85 = org.jsecurity.util.CollectionUtils.asList(var84);
    org.jsecurity.authc.pam.ModularRealmAuthenticator var86 = new org.jsecurity.authc.pam.ModularRealmAuthenticator(var85);
    var81.addAll((java.util.Collection)var85, "\u0000\u0000");
    java.io.InputStream var90 = org.jsecurity.util.ClassUtils.getResourceAsStream("");
    java.lang.Object[] var91 = new java.lang.Object[] { var90};
    java.util.List var92 = org.jsecurity.util.CollectionUtils.asList(var91);
    org.jsecurity.authc.pam.ModularRealmAuthenticator var93 = new org.jsecurity.authc.pam.ModularRealmAuthenticator(var92);
    var81.addAll((java.util.Collection)var92, "\u0000\u0000");
    var58.addAll((java.util.Collection)var92);
    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      boolean[] var97 = var0.isPermitted((org.jsecurity.subject.PrincipalCollection)var18, var92);
      fail("Expected exception of type java.util.NoSuchElementException");
    } catch (java.util.NoSuchElementException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var2 + "' != '" + "org.jsecurity.realm.text.PropertiesRealm_3946"+ "'", var2.equals("org.jsecurity.realm.text.PropertiesRealm_3946"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var8);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var13);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var14);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var15);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var40);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var41);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var43);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var44);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var45);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var53);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var54);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var69);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var70);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var73);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var83);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var84);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var85);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var90);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var91);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var92);

  }

  public void test178() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest6.test178");


    org.jsecurity.session.mgt.eis.MemorySessionDAO var0 = new org.jsecurity.session.mgt.eis.MemorySessionDAO();
    org.jsecurity.cache.Cache var1 = var0.getActiveSessionsCache();
    var0.setActiveSessionsCacheName("dd\uFFFD");
    var0.setActiveSessionsCacheName("\u0000\u0000\u0000");
    org.jsecurity.cache.ehcache.EhCacheManager var6 = new org.jsecurity.cache.ehcache.EhCacheManager();
    net.sf.ehcache.CacheManager var7 = var6.getCacheManager();
    var6.destroy();
    net.sf.ehcache.CacheManager var9 = var6.getCacheManager();
    net.sf.ehcache.CacheManager var10 = var6.getCacheManager();
    var6.init();
    java.lang.String var12 = var6.getCacheManagerConfigFile();
    var0.setCacheManager((org.jsecurity.cache.CacheManager)var6);
    org.jsecurity.cache.Cache var14 = var0.getActiveSessionsCache();
    java.lang.String var15 = var0.getActiveSessionsCacheName();
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var1);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var7);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var9);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var10);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var12 + "' != '" + "classpath:org/jsecurity/cache/ehcache/ehcache.xml"+ "'", var12.equals("classpath:org/jsecurity/cache/ehcache/ehcache.xml"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var14);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var15 + "' != '" + "\u0000\u0000\u0000"+ "'", var15.equals("\u0000\u0000\u0000"));

  }

  public void test179() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest6.test179");


    org.jsecurity.session.mgt.eis.MemorySessionDAO var0 = new org.jsecurity.session.mgt.eis.MemorySessionDAO();
    org.jsecurity.cache.Cache var1 = var0.getActiveSessionsCache();
    var0.setActiveSessionsCacheName("dd\uFFFD");
    var0.setActiveSessionsCacheName("\u0000\u0000\u0000");
    org.jsecurity.cache.ehcache.EhCacheManager var6 = new org.jsecurity.cache.ehcache.EhCacheManager();
    net.sf.ehcache.CacheManager var7 = var6.getCacheManager();
    var6.destroy();
    net.sf.ehcache.CacheManager var9 = var6.getCacheManager();
    net.sf.ehcache.CacheManager var10 = var6.getCacheManager();
    var6.init();
    java.lang.String var12 = var6.getCacheManagerConfigFile();
    var0.setCacheManager((org.jsecurity.cache.CacheManager)var6);
    java.lang.String var14 = var0.getActiveSessionsCacheName();
    org.jsecurity.realm.SimpleAccountRealm var15 = new org.jsecurity.realm.SimpleAccountRealm();
    org.jsecurity.cache.HashtableCache var17 = new org.jsecurity.cache.HashtableCache("\u0000\u0000\u0000");
    var15.setAuthorizationCache((org.jsecurity.cache.Cache)var17);
    int var19 = var17.size();
    var0.setActiveSessionsCache((org.jsecurity.cache.Cache)var17);
    java.util.Collection var21 = var0.getActiveSessions();
    org.jsecurity.authz.UnauthorizedException var24 = new org.jsecurity.authz.UnauthorizedException();
    org.jsecurity.session.SessionException var26 = new org.jsecurity.session.SessionException("", (java.lang.Throwable)var24, (java.io.Serializable)"org.jsecurity.config.ConfigurationException: dd\uFFFD");
    org.jsecurity.authz.UnauthorizedException var27 = new org.jsecurity.authz.UnauthorizedException((java.lang.Throwable)var26);
    org.jsecurity.session.InvalidSessionException var28 = new org.jsecurity.session.InvalidSessionException((java.io.Serializable)var27);
    org.jsecurity.io.ResourceException var29 = new org.jsecurity.io.ResourceException("1b39de25-f16c-4a9d-b9fb-4d288c458953", (java.lang.Throwable)var27);
    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      org.jsecurity.authc.SimpleAccount var31 = new org.jsecurity.authc.SimpleAccount(var21, (java.lang.Object)var27, "\n\uFFFD\uFFFD");
      fail("Expected exception of type java.lang.IllegalArgumentException");
    } catch (java.lang.IllegalArgumentException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var1);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var7);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var9);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var10);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var12 + "' != '" + "classpath:org/jsecurity/cache/ehcache/ehcache.xml"+ "'", var12.equals("classpath:org/jsecurity/cache/ehcache/ehcache.xml"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var14 + "' != '" + "\u0000\u0000\u0000"+ "'", var14.equals("\u0000\u0000\u0000"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var19 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var21);

  }

  public void test180() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest6.test180");


    org.jsecurity.realm.text.TextConfigurationRealm var0 = new org.jsecurity.realm.text.TextConfigurationRealm();
    java.io.InputStream var2 = org.jsecurity.util.ClassUtils.getResourceAsStream("");
    java.lang.Object[] var3 = new java.lang.Object[] { var2};
    java.util.List var4 = org.jsecurity.util.CollectionUtils.asList(var3);
    org.jsecurity.authc.pam.ModularRealmAuthenticator var5 = new org.jsecurity.authc.pam.ModularRealmAuthenticator(var4);
    org.jsecurity.subject.SimplePrincipalCollection var7 = new org.jsecurity.subject.SimplePrincipalCollection((java.util.Collection)var4, "org.jsecurity.authz.UnauthorizedException: org.jsecurity.session.ExpiredSessionException: ");
    org.jsecurity.session.UnknownSessionException var12 = new org.jsecurity.session.UnknownSessionException("dd\uFFFD", (java.io.Serializable)100.0f);
    org.jsecurity.session.SessionException var14 = new org.jsecurity.session.SessionException("dd\uFFFD", (java.lang.Throwable)var12, (java.io.Serializable)0);
    org.jsecurity.session.SessionException var15 = new org.jsecurity.session.SessionException("dd\uFFFD", (java.lang.Throwable)var12);
    var7.add((java.lang.Object)var15, "org.jsecurity.config.ConfigurationException: dd\uFFFD");
    var0.onLogout((org.jsecurity.subject.PrincipalCollection)var7);
    org.jsecurity.cache.HashtableCacheManager var19 = new org.jsecurity.cache.HashtableCacheManager();
    org.jsecurity.cache.Cache var21 = var19.getCache("\u0000\u0000");
    var0.setAuthorizationCache(var21);
    org.jsecurity.codec.CodecException var25 = new org.jsecurity.codec.CodecException("dd\uFFFD");
    org.jsecurity.authc.ConcurrentAccessException var26 = new org.jsecurity.authc.ConcurrentAccessException("org.jsecurity.authz.UnauthorizedException: org.jsecurity.session.ExpiredSessionException: ", (java.lang.Throwable)var25);
    org.jsecurity.subject.SimplePrincipalCollection var28 = new org.jsecurity.subject.SimplePrincipalCollection((java.lang.Object)var25, "");
    var0.onLogout((org.jsecurity.subject.PrincipalCollection)var28);
    java.util.Iterator var30 = var28.iterator();
    java.util.Collection var32 = var28.fromRealm("1ff0759d-a078-42db-aa3c-e9d1594c2032");
    org.jsecurity.util.AntPathMatcher var33 = new org.jsecurity.util.AntPathMatcher();
    var28.add((java.lang.Object)var33, "org.jsecurity.authc.UsernamePasswordToken - \u0000\u0000, rememberMe=false (Jeshs-iMac.local/192.168.2.1)");
    java.lang.String var38 = var33.extractPathWithinPattern("org.jsecurity.realm.text.TextConfigurationRealm_3252", "5b549fba-5a5d-44e6-9c05-771d476c2e80");
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var2);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var3);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var4);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var21);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var30);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var32);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var38 + "' != '" + ""+ "'", var38.equals(""));

  }

  public void test181() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest6.test181");


    org.jsecurity.realm.SimpleAccountRealm var1 = new org.jsecurity.realm.SimpleAccountRealm("hi!");
    java.lang.Class var2 = var1.getAuthenticationTokenClass();
    java.lang.Object var3 = org.jsecurity.util.ClassUtils.newInstance(var2);
    org.jsecurity.authz.aop.UserAnnotationMethodInterceptor var4 = new org.jsecurity.authz.aop.UserAnnotationMethodInterceptor();
    org.jsecurity.aop.AnnotationHandler var5 = var4.getHandler();
    java.lang.Class var6 = var5.getAnnotationClass();
    java.lang.Class var7 = var5.getAnnotationClass();
    java.lang.Class[] var8 = new java.lang.Class[] { var7};
    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      java.lang.reflect.Constructor var9 = org.jsecurity.util.ClassUtils.getConstructor(var2, var8);
      fail("Expected exception of type java.lang.IllegalStateException");
    } catch (java.lang.IllegalStateException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var2);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var3);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var5);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var6);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var7);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var8);

  }

  public void test182() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest6.test182");


    org.jsecurity.authc.pam.AllSuccessfulModularAuthenticationStrategy var0 = new org.jsecurity.authc.pam.AllSuccessfulModularAuthenticationStrategy();
    char[] var2 = new char[] { };
    org.jsecurity.authc.UsernamePasswordToken var4 = new org.jsecurity.authc.UsernamePasswordToken("hi!", var2, true);
    org.jsecurity.authc.SimpleAccount var5 = new org.jsecurity.authc.SimpleAccount();
    var5.setCredentialsExpired(false);
    boolean var8 = var5.isLocked();
    org.jsecurity.authc.AuthenticationInfo var9 = var0.afterAllAttempts((org.jsecurity.authc.AuthenticationToken)var4, (org.jsecurity.authc.AuthenticationInfo)var5);
    char[] var13 = new char[] { '4', '#'};
    org.jsecurity.authc.UsernamePasswordToken var14 = new org.jsecurity.authc.UsernamePasswordToken("\u0000\u0000", var13);
    org.jsecurity.authc.SimpleAccount var15 = new org.jsecurity.authc.SimpleAccount();
    var15.setCredentialsExpired(false);
    var15.setCredentialsExpired(false);
    boolean var20 = var15.isCredentialsExpired();
    org.jsecurity.authc.AuthenticationInfo var21 = var0.afterAllAttempts((org.jsecurity.authc.AuthenticationToken)var14, (org.jsecurity.authc.AuthenticationInfo)var15);
    org.jsecurity.realm.activedirectory.ActiveDirectoryRealm var22 = new org.jsecurity.realm.activedirectory.ActiveDirectoryRealm();
    var22.init();
    var22.init();
    org.jsecurity.realm.activedirectory.ActiveDirectoryRealm var25 = new org.jsecurity.realm.activedirectory.ActiveDirectoryRealm();
    org.jsecurity.authc.credential.Sha256CredentialsMatcher var26 = new org.jsecurity.authc.credential.Sha256CredentialsMatcher();
    var25.setCredentialsMatcher((org.jsecurity.authc.credential.CredentialsMatcher)var26);
    java.lang.String var28 = var25.getAuthorizationCacheName();
    var25.setUrl("hi!");
    org.jsecurity.realm.ldap.DefaultLdapContextFactory var31 = new org.jsecurity.realm.ldap.DefaultLdapContextFactory();
    var25.setLdapContextFactory((org.jsecurity.realm.ldap.LdapContextFactory)var31);
    var31.setAuthentication("dd\uFFFD");
    var22.setLdapContextFactory((org.jsecurity.realm.ldap.LdapContextFactory)var31);
    char[] var39 = new char[] { };
    org.jsecurity.authc.UsernamePasswordToken var41 = new org.jsecurity.authc.UsernamePasswordToken("hi!", var39, true);
    byte[] var42 = org.jsecurity.codec.Hex.decode(var39);
    byte[] var43 = org.jsecurity.codec.Hex.decode(var39);
    org.jsecurity.authc.UsernamePasswordToken var45 = new org.jsecurity.authc.UsernamePasswordToken("ZGT/", var39, false);
    org.jsecurity.authc.UsernamePasswordToken var46 = new org.jsecurity.authc.UsernamePasswordToken("49932616-87e3-49f2-a9ff-1e3516355d97", var39);
    java.net.InetAddress var47 = var46.getInetAddress();
    org.jsecurity.authc.SimpleAccount var48 = new org.jsecurity.authc.SimpleAccount();
    byte[] var52 = new byte[] { (byte)100, (byte)100, (byte)(-1)};
    java.lang.String var53 = org.jsecurity.codec.CodecSupport.toString(var52);
    char[] var54 = org.jsecurity.codec.CodecSupport.toChars(var52);
    boolean var55 = org.jsecurity.codec.Base64.isBase64(var52);
    boolean var56 = org.jsecurity.codec.Base64.isBase64(var52);
    boolean var57 = org.jsecurity.codec.Base64.isBase64(var52);
    char[] var58 = org.jsecurity.codec.CodecSupport.toChars(var52);
    boolean var59 = var48.equals((java.lang.Object)var52);
    org.jsecurity.authc.AuthenticationInfo var60 = var0.beforeAttempt((org.jsecurity.realm.Realm)var22, (org.jsecurity.authc.AuthenticationToken)var46, (org.jsecurity.authc.AuthenticationInfo)var48);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var2);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var8 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var9);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var13);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var20 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var21);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var28);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var39);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var42);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var43);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var47);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var52);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var53 + "' != '" + "dd\uFFFD"+ "'", var53.equals("dd\uFFFD"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var54);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var55 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var56 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var57 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var58);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var59 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var60);

  }

  public void test183() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest6.test183");


    org.jsecurity.realm.text.TextConfigurationRealm var1 = new org.jsecurity.realm.text.TextConfigurationRealm();
    java.io.InputStream var3 = org.jsecurity.util.ClassUtils.getResourceAsStream("");
    java.lang.Object[] var4 = new java.lang.Object[] { var3};
    java.util.List var5 = org.jsecurity.util.CollectionUtils.asList(var4);
    org.jsecurity.authc.pam.ModularRealmAuthenticator var6 = new org.jsecurity.authc.pam.ModularRealmAuthenticator(var5);
    org.jsecurity.subject.SimplePrincipalCollection var8 = new org.jsecurity.subject.SimplePrincipalCollection((java.util.Collection)var5, "org.jsecurity.authz.UnauthorizedException: org.jsecurity.session.ExpiredSessionException: ");
    org.jsecurity.session.UnknownSessionException var13 = new org.jsecurity.session.UnknownSessionException("dd\uFFFD", (java.io.Serializable)100.0f);
    org.jsecurity.session.SessionException var15 = new org.jsecurity.session.SessionException("dd\uFFFD", (java.lang.Throwable)var13, (java.io.Serializable)0);
    org.jsecurity.session.SessionException var16 = new org.jsecurity.session.SessionException("dd\uFFFD", (java.lang.Throwable)var13);
    var8.add((java.lang.Object)var16, "org.jsecurity.config.ConfigurationException: dd\uFFFD");
    var1.onLogout((org.jsecurity.subject.PrincipalCollection)var8);
    org.jsecurity.realm.activedirectory.ActiveDirectoryRealm var20 = new org.jsecurity.realm.activedirectory.ActiveDirectoryRealm();
    org.jsecurity.authc.credential.Sha256CredentialsMatcher var21 = new org.jsecurity.authc.credential.Sha256CredentialsMatcher();
    var20.setCredentialsMatcher((org.jsecurity.authc.credential.CredentialsMatcher)var21);
    java.lang.String var23 = var20.getAuthorizationCacheName();
    var20.setPrincipalSuffix("org.jsecurity.config.ConfigurationException: dd\uFFFD");
    org.jsecurity.authz.permission.PermissionResolver var26 = var20.getPermissionResolver();
    var1.setPermissionResolver(var26);
    java.util.Set var28 = org.jsecurity.util.PermissionUtils.resolveDelimitedPermissions("a201b21e-bf4d-4350-ad5c-67d111a0e38c", var26);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var3);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var4);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var5);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var23);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var26);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var28);

  }

  public void test184() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest6.test184");


    java.io.InputStream var1 = org.jsecurity.util.ClassUtils.getResourceAsStream("");
    java.lang.Object[] var2 = new java.lang.Object[] { var1};
    java.util.List var3 = org.jsecurity.util.CollectionUtils.asList(var2);
    org.jsecurity.authc.pam.ModularRealmAuthenticator var4 = new org.jsecurity.authc.pam.ModularRealmAuthenticator(var3);
    org.jsecurity.authc.pam.AllSuccessfulModularAuthenticationStrategy var5 = new org.jsecurity.authc.pam.AllSuccessfulModularAuthenticationStrategy();
    var4.setModularAuthenticationStrategy((org.jsecurity.authc.pam.ModularAuthenticationStrategy)var5);
    org.jsecurity.realm.text.PropertiesRealm var7 = new org.jsecurity.realm.text.PropertiesRealm();
    var7.setReloadIntervalSeconds(10);
    char[] var13 = new char[] { ' ', ' '};
    org.jsecurity.authc.UsernamePasswordToken var14 = new org.jsecurity.authc.UsernamePasswordToken("hi!", var13);
    org.jsecurity.authz.SimpleAuthorizingAccount var15 = new org.jsecurity.authz.SimpleAuthorizingAccount();
    org.jsecurity.authz.SimpleAuthorizationInfo var16 = new org.jsecurity.authz.SimpleAuthorizationInfo();
    var16.addRole("a2b823b1e72eae2b727289df8a00a89df8a0bab6ad8a89c4c5c7a9b62a270000");
    org.jsecurity.authz.SimpleAuthorizationInfo var19 = new org.jsecurity.authz.SimpleAuthorizationInfo();
    var19.addRole("a2b823b1e72eae2b727289df8a00a89df8a0bab6ad8a89c4c5c7a9b62a270000");
    org.jsecurity.session.UnknownSessionException var26 = new org.jsecurity.session.UnknownSessionException("dd\uFFFD", (java.io.Serializable)100.0f);
    org.jsecurity.subject.SubjectException var27 = new org.jsecurity.subject.SubjectException("dd\uFFFD", (java.lang.Throwable)var26);
    org.jsecurity.io.SerializationException var28 = new org.jsecurity.io.SerializationException("", (java.lang.Throwable)var27);
    java.lang.Throwable[] var29 = var27.getSuppressed();
    java.util.Set var30 = org.jsecurity.util.CollectionUtils.asSet((java.lang.Object[])var29);
    var19.addRoles((java.util.Collection)var30);
    var16.setObjectPermissions(var30);
    var15.setSimpleRoles(var30);
    boolean var34 = var15.isCredentialsExpired();
    org.jsecurity.authc.AuthenticationInfo var35 = var5.beforeAttempt((org.jsecurity.realm.Realm)var7, (org.jsecurity.authc.AuthenticationToken)var14, (org.jsecurity.authc.AuthenticationInfo)var15);
    var14.setUsername("8c362315-aef3-4d6d-b5b1-0d3fe425c611");
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var1);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var2);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var3);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var13);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var29);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var30);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var34 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var35);

  }

  public void test185() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest6.test185");


    org.jsecurity.util.UnknownClassException var1 = new org.jsecurity.util.UnknownClassException("org.jsecurity.realm.SimpleAccountRealm-370-authorization");

  }

  public void test186() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest6.test186");


    org.jsecurity.session.mgt.eis.MemorySessionDAO var0 = new org.jsecurity.session.mgt.eis.MemorySessionDAO();
    org.jsecurity.cache.Cache var1 = var0.getActiveSessionsCache();
    var0.setActiveSessionsCacheName("dd\uFFFD");
    java.util.Collection var4 = var0.getActiveSessions();
    org.jsecurity.cache.HashtableCache var6 = new org.jsecurity.cache.HashtableCache("5dd0c65d-1422-49c2-becb-9e8dca619ab3");
    var0.setActiveSessionsCache((org.jsecurity.cache.Cache)var6);
    org.jsecurity.cache.Cache var8 = var0.getActiveSessionsCache();
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var1);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var4);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var8);

  }

  public void test187() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest6.test187");


    org.jsecurity.session.mgt.DefaultSessionManager var0 = new org.jsecurity.session.mgt.DefaultSessionManager();
    org.jsecurity.session.mgt.quartz.QuartzSessionValidationScheduler var1 = new org.jsecurity.session.mgt.quartz.QuartzSessionValidationScheduler();
    boolean var2 = var1.isEnabled();
    var1.enableSessionValidation();
    var0.setSessionValidationScheduler((org.jsecurity.session.mgt.SessionValidationScheduler)var1);
    var1.disableSessionValidation();
    org.jsecurity.session.mgt.DefaultSessionManager var6 = new org.jsecurity.session.mgt.DefaultSessionManager();
    org.jsecurity.session.mgt.eis.MemorySessionDAO var7 = new org.jsecurity.session.mgt.eis.MemorySessionDAO();
    org.jsecurity.cache.Cache var8 = var7.getActiveSessionsCache();
    org.jsecurity.cache.CacheManager var9 = var7.getCacheManager();
    org.jsecurity.cache.HashtableCacheManager var10 = new org.jsecurity.cache.HashtableCacheManager();
    org.jsecurity.cache.Cache var12 = var10.getCache("\u0000\u0000");
    var7.setActiveSessionsCache(var12);
    java.io.InputStream var15 = org.jsecurity.util.ClassUtils.getResourceAsStream("");
    java.lang.Object[] var16 = new java.lang.Object[] { var15};
    java.util.List var17 = org.jsecurity.util.CollectionUtils.asList(var16);
    org.jsecurity.authc.pam.ModularRealmAuthenticator var18 = new org.jsecurity.authc.pam.ModularRealmAuthenticator(var17);
    org.jsecurity.authc.pam.AllSuccessfulModularAuthenticationStrategy var19 = new org.jsecurity.authc.pam.AllSuccessfulModularAuthenticationStrategy();
    var18.setModularAuthenticationStrategy((org.jsecurity.authc.pam.ModularAuthenticationStrategy)var19);
    org.jsecurity.authz.SimpleAuthorizationInfo var21 = new org.jsecurity.authz.SimpleAuthorizationInfo();
    var21.addStringPermission("hi!");
    java.io.InputStream var25 = org.jsecurity.util.ClassUtils.getResourceAsStream("");
    java.lang.Object[] var26 = new java.lang.Object[] { var25};
    java.util.List var27 = org.jsecurity.util.CollectionUtils.asList(var26);
    var21.addRoles((java.util.Collection)var27);
    var18.setAuthenticationListeners((java.util.Collection)var27);
    org.jsecurity.realm.activedirectory.ActiveDirectoryRealm var30 = new org.jsecurity.realm.activedirectory.ActiveDirectoryRealm();
    var30.setPrincipalSuffix("");
    var18.setRealm((org.jsecurity.realm.Realm)var30);
    org.jsecurity.cache.HashtableCacheManager var34 = new org.jsecurity.cache.HashtableCacheManager();
    org.jsecurity.cache.Cache var36 = var34.getCache("\u0000\u0000");
    var30.setAuthorizationCache(var36);
    var7.setActiveSessionsCache(var36);
    org.jsecurity.session.mgt.SimpleSession var39 = new org.jsecurity.session.mgt.SimpleSession();
    java.io.Serializable var40 = var7.create((org.jsecurity.session.Session)var39);
    var6.setSessionDAO((org.jsecurity.session.mgt.eis.SessionDAO)var7);
    org.jsecurity.authc.pam.AllSuccessfulModularAuthenticationStrategy var42 = new org.jsecurity.authc.pam.AllSuccessfulModularAuthenticationStrategy();
    char[] var44 = new char[] { };
    org.jsecurity.authc.UsernamePasswordToken var46 = new org.jsecurity.authc.UsernamePasswordToken("hi!", var44, true);
    org.jsecurity.authc.SimpleAccount var47 = new org.jsecurity.authc.SimpleAccount();
    var47.setCredentialsExpired(false);
    boolean var50 = var47.isLocked();
    org.jsecurity.authc.AuthenticationInfo var51 = var42.afterAllAttempts((org.jsecurity.authc.AuthenticationToken)var46, (org.jsecurity.authc.AuthenticationInfo)var47);
    char[] var55 = new char[] { '4', '#'};
    org.jsecurity.authc.UsernamePasswordToken var56 = new org.jsecurity.authc.UsernamePasswordToken("\u0000\u0000", var55);
    org.jsecurity.authc.SimpleAccount var57 = new org.jsecurity.authc.SimpleAccount();
    var57.setCredentialsExpired(false);
    var57.setCredentialsExpired(false);
    boolean var62 = var57.isCredentialsExpired();
    org.jsecurity.authc.AuthenticationInfo var63 = var42.afterAllAttempts((org.jsecurity.authc.AuthenticationToken)var56, (org.jsecurity.authc.AuthenticationInfo)var57);
    org.jsecurity.realm.activedirectory.ActiveDirectoryRealm var64 = new org.jsecurity.realm.activedirectory.ActiveDirectoryRealm();
    org.jsecurity.authc.credential.Sha256CredentialsMatcher var65 = new org.jsecurity.authc.credential.Sha256CredentialsMatcher();
    var64.setCredentialsMatcher((org.jsecurity.authc.credential.CredentialsMatcher)var65);
    java.lang.String var67 = var64.getAuthorizationCacheName();
    org.jsecurity.authc.UsernamePasswordToken var68 = new org.jsecurity.authc.UsernamePasswordToken();
    java.lang.String var69 = var68.getUsername();
    java.lang.Object var70 = var68.getPrincipal();
    boolean var71 = var64.supports((org.jsecurity.authc.AuthenticationToken)var68);
    org.jsecurity.session.UnknownSessionException var75 = new org.jsecurity.session.UnknownSessionException("dd\uFFFD", (java.io.Serializable)100.0f);
    org.jsecurity.session.SessionException var77 = new org.jsecurity.session.SessionException("dd\uFFFD", (java.lang.Throwable)var75, (java.io.Serializable)0);
    org.jsecurity.authc.SimpleAuthenticationInfo var80 = new org.jsecurity.authc.SimpleAuthenticationInfo((java.lang.Object)0, (java.lang.Object)10, "hi!");
    java.lang.Object var81 = var80.getCredentials();
    java.lang.String var82 = var80.toString();
    org.jsecurity.authc.AuthenticationInfo var83 = var42.afterAllAttempts((org.jsecurity.authc.AuthenticationToken)var68, (org.jsecurity.authc.AuthenticationInfo)var80);
    org.jsecurity.session.mgt.eis.MemorySessionDAO var84 = new org.jsecurity.session.mgt.eis.MemorySessionDAO();
    org.jsecurity.cache.Cache var85 = var84.getActiveSessionsCache();
    var84.setActiveSessionsCacheName("dd\uFFFD");
    var80.setCredentials((java.lang.Object)var84);
    var6.setSessionDAO((org.jsecurity.session.mgt.eis.SessionDAO)var84);
    var1.setSessionManager((org.jsecurity.session.mgt.ValidatingSessionManager)var6);
    org.jsecurity.cache.ehcache.EhCacheManager var91 = new org.jsecurity.cache.ehcache.EhCacheManager();
    var91.init();
    var6.setCacheManager((org.jsecurity.cache.CacheManager)var91);
    var6.validateSessions();
    long var95 = var6.getSessionValidationInterval();
    org.jsecurity.session.mgt.ExecutorServiceSessionValidationScheduler var96 = new org.jsecurity.session.mgt.ExecutorServiceSessionValidationScheduler((org.jsecurity.session.mgt.ValidatingSessionManager)var6);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var2 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var8);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var9);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var12);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var15);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var16);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var17);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var25);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var26);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var27);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var36);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var40 + "' != '" + "a7923239-c3f0-4f69-8575-cc6a2af16731"+ "'", var40.equals("a7923239-c3f0-4f69-8575-cc6a2af16731"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var44);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var50 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var51);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var55);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var62 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var63);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var67);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var69);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var70);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var71 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var81 + "' != '" + 10+ "'", var81.equals(10));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var83);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var85);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var95 == 3600000L);

  }

  public void test188() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest6.test188");


    char[] var1 = new char[] { };
    org.jsecurity.authc.UsernamePasswordToken var3 = new org.jsecurity.authc.UsernamePasswordToken("hi!", var1, true);
    byte[] var4 = org.jsecurity.codec.Hex.decode(var1);
    byte[] var5 = org.jsecurity.codec.Hex.decode(var1);
    byte[] var7 = org.jsecurity.codec.Base64.encode(var5, true);
    byte[] var9 = org.jsecurity.codec.Base64.encode(var7, false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var1);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var4);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var5);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var7);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var9);

  }

  public void test189() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest6.test189");


    org.jsecurity.mgt.DefaultSecurityManager var0 = new org.jsecurity.mgt.DefaultSecurityManager();
    org.jsecurity.authc.pam.AllSuccessfulModularAuthenticationStrategy var1 = new org.jsecurity.authc.pam.AllSuccessfulModularAuthenticationStrategy();
    org.jsecurity.authc.pam.AllSuccessfulModularAuthenticationStrategy var2 = new org.jsecurity.authc.pam.AllSuccessfulModularAuthenticationStrategy();
    char[] var4 = new char[] { };
    org.jsecurity.authc.UsernamePasswordToken var6 = new org.jsecurity.authc.UsernamePasswordToken("hi!", var4, true);
    org.jsecurity.authc.SimpleAccount var7 = new org.jsecurity.authc.SimpleAccount();
    var7.setCredentialsExpired(false);
    boolean var10 = var7.isLocked();
    org.jsecurity.authc.AuthenticationInfo var11 = var2.afterAllAttempts((org.jsecurity.authc.AuthenticationToken)var6, (org.jsecurity.authc.AuthenticationInfo)var7);
    char[] var15 = new char[] { '4', '#'};
    org.jsecurity.authc.UsernamePasswordToken var16 = new org.jsecurity.authc.UsernamePasswordToken("\u0000\u0000", var15);
    org.jsecurity.authc.SimpleAccount var17 = new org.jsecurity.authc.SimpleAccount();
    var17.setCredentialsExpired(false);
    var17.setCredentialsExpired(false);
    boolean var22 = var17.isCredentialsExpired();
    org.jsecurity.authc.AuthenticationInfo var23 = var2.afterAllAttempts((org.jsecurity.authc.AuthenticationToken)var16, (org.jsecurity.authc.AuthenticationInfo)var17);
    org.jsecurity.authz.UnauthenticatedException var27 = new org.jsecurity.authz.UnauthenticatedException();
    org.jsecurity.config.UnresolveableReferenceException var28 = new org.jsecurity.config.UnresolveableReferenceException("", (java.lang.Throwable)var27);
    org.jsecurity.cache.CacheException var29 = new org.jsecurity.cache.CacheException("org.jsecurity.config.ConfigurationException: dd\uFFFD", (java.lang.Throwable)var27);
    org.jsecurity.authc.SimpleAuthenticationInfo var31 = new org.jsecurity.authc.SimpleAuthenticationInfo((java.lang.Object)"org.jsecurity.config.ConfigurationException: dd\uFFFD", (java.lang.Object)var29, "a2b823b1e72eae2b727289df8a00a89df8a0bab6ad8a89c4c5c7a9b62a270000");
    org.jsecurity.subject.PrincipalCollection var32 = var31.getPrincipals();
    org.jsecurity.authc.AuthenticationInfo var33 = var1.afterAllAttempts((org.jsecurity.authc.AuthenticationToken)var16, (org.jsecurity.authc.AuthenticationInfo)var31);
    var0.setModularAuthenticationStrategy((org.jsecurity.authc.pam.ModularAuthenticationStrategy)var1);
    org.jsecurity.session.mgt.SessionManager var35 = var0.getSessionManager();
    org.jsecurity.realm.text.TextConfigurationRealm var36 = new org.jsecurity.realm.text.TextConfigurationRealm();
    java.io.InputStream var38 = org.jsecurity.util.ClassUtils.getResourceAsStream("");
    java.lang.Object[] var39 = new java.lang.Object[] { var38};
    java.util.List var40 = org.jsecurity.util.CollectionUtils.asList(var39);
    org.jsecurity.authc.pam.ModularRealmAuthenticator var41 = new org.jsecurity.authc.pam.ModularRealmAuthenticator(var40);
    org.jsecurity.subject.SimplePrincipalCollection var43 = new org.jsecurity.subject.SimplePrincipalCollection((java.util.Collection)var40, "org.jsecurity.authz.UnauthorizedException: org.jsecurity.session.ExpiredSessionException: ");
    org.jsecurity.session.UnknownSessionException var48 = new org.jsecurity.session.UnknownSessionException("dd\uFFFD", (java.io.Serializable)100.0f);
    org.jsecurity.session.SessionException var50 = new org.jsecurity.session.SessionException("dd\uFFFD", (java.lang.Throwable)var48, (java.io.Serializable)0);
    org.jsecurity.session.SessionException var51 = new org.jsecurity.session.SessionException("dd\uFFFD", (java.lang.Throwable)var48);
    var43.add((java.lang.Object)var51, "org.jsecurity.config.ConfigurationException: dd\uFFFD");
    var36.onLogout((org.jsecurity.subject.PrincipalCollection)var43);
    org.jsecurity.cache.HashtableCacheManager var55 = new org.jsecurity.cache.HashtableCacheManager();
    org.jsecurity.cache.Cache var57 = var55.getCache("\u0000\u0000");
    var36.setAuthorizationCache(var57);
    org.jsecurity.codec.CodecException var61 = new org.jsecurity.codec.CodecException("dd\uFFFD");
    org.jsecurity.authc.ConcurrentAccessException var62 = new org.jsecurity.authc.ConcurrentAccessException("org.jsecurity.authz.UnauthorizedException: org.jsecurity.session.ExpiredSessionException: ", (java.lang.Throwable)var61);
    org.jsecurity.subject.SimplePrincipalCollection var64 = new org.jsecurity.subject.SimplePrincipalCollection((java.lang.Object)var61, "");
    var36.onLogout((org.jsecurity.subject.PrincipalCollection)var64);
    var36.setRoleDefinitions("hi!");
    org.jsecurity.authc.pam.ModularRealmAuthenticator var68 = new org.jsecurity.authc.pam.ModularRealmAuthenticator((org.jsecurity.realm.Realm)var36);
    var0.setAuthenticator((org.jsecurity.authc.Authenticator)var68);
    org.jsecurity.cache.CacheManager var70 = var0.getCacheManager();
    org.jsecurity.subject.RememberMeManager var71 = var0.getRememberMeManager();
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var4);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var10 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var11);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var15);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var22 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var23);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var32);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var33);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var35);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var38);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var39);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var40);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var57);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var70);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var71);

  }

  public void test190() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest6.test190");


    org.jsecurity.session.UnknownSessionException var3 = new org.jsecurity.session.UnknownSessionException("dd\uFFFD", (java.io.Serializable)100.0f);
    org.jsecurity.session.SessionException var5 = new org.jsecurity.session.SessionException("dd\uFFFD", (java.lang.Throwable)var3, (java.io.Serializable)0);
    org.jsecurity.authc.SimpleAuthenticationInfo var8 = new org.jsecurity.authc.SimpleAuthenticationInfo((java.lang.Object)0, (java.lang.Object)10, "hi!");
    java.lang.Object var9 = var8.getCredentials();
    org.jsecurity.realm.text.TextConfigurationRealm var11 = new org.jsecurity.realm.text.TextConfigurationRealm();
    java.io.InputStream var13 = org.jsecurity.util.ClassUtils.getResourceAsStream("");
    java.lang.Object[] var14 = new java.lang.Object[] { var13};
    java.util.List var15 = org.jsecurity.util.CollectionUtils.asList(var14);
    org.jsecurity.authc.pam.ModularRealmAuthenticator var16 = new org.jsecurity.authc.pam.ModularRealmAuthenticator(var15);
    org.jsecurity.subject.SimplePrincipalCollection var18 = new org.jsecurity.subject.SimplePrincipalCollection((java.util.Collection)var15, "org.jsecurity.authz.UnauthorizedException: org.jsecurity.session.ExpiredSessionException: ");
    org.jsecurity.session.UnknownSessionException var23 = new org.jsecurity.session.UnknownSessionException("dd\uFFFD", (java.io.Serializable)100.0f);
    org.jsecurity.session.SessionException var25 = new org.jsecurity.session.SessionException("dd\uFFFD", (java.lang.Throwable)var23, (java.io.Serializable)0);
    org.jsecurity.session.SessionException var26 = new org.jsecurity.session.SessionException("dd\uFFFD", (java.lang.Throwable)var23);
    var18.add((java.lang.Object)var26, "org.jsecurity.config.ConfigurationException: dd\uFFFD");
    var11.onLogout((org.jsecurity.subject.PrincipalCollection)var18);
    java.util.Set var31 = org.jsecurity.util.PermissionUtils.toPermissionStrings("org.jsecurity.config.ConfigurationException: dd\uFFFD");
    org.jsecurity.authz.SimpleAuthorizationInfo var32 = new org.jsecurity.authz.SimpleAuthorizationInfo(var31);
    org.jsecurity.authz.SimpleAuthorizingAccount var33 = new org.jsecurity.authz.SimpleAuthorizingAccount((org.jsecurity.subject.PrincipalCollection)var18, (java.lang.Object)var31);
    org.jsecurity.session.StoppedSessionException var34 = new org.jsecurity.session.StoppedSessionException("org.jsecurity.realm.SimpleAccountRealm-55-authorization", (java.io.Serializable)var18);
    byte[] var40 = new byte[] { (byte)100, (byte)100, (byte)(-1)};
    java.lang.String var41 = org.jsecurity.codec.CodecSupport.toString(var40);
    byte[] var42 = org.jsecurity.codec.Base64.encode(var40);
    char[] var43 = org.jsecurity.codec.CodecSupport.toChars(var42);
    org.jsecurity.authc.UsernamePasswordToken var45 = new org.jsecurity.authc.UsernamePasswordToken("org.jsecurity.realm.SimpleAccountRealm-55-authorization", var43, false);
    char[] var46 = var45.getPassword();
    org.jsecurity.session.mgt.SimpleSession var48 = new org.jsecurity.session.mgt.SimpleSession();
    var48.setTimeout((-1L));
    org.jsecurity.session.mgt.SimpleSession var51 = new org.jsecurity.session.mgt.SimpleSession();
    java.util.Date var52 = var51.getLastAccessTime();
    var48.setLastAccessTime(var52);
    java.net.InetAddress var54 = var48.getHostAddress();
    org.jsecurity.authc.UsernamePasswordToken var55 = new org.jsecurity.authc.UsernamePasswordToken("classpath:org/jsecurity/cache/ehcache/ehcache.xml", var46, false, var54);
    boolean var56 = var18.equals((java.lang.Object)var54);
    org.jsecurity.subject.SimplePrincipalCollection var57 = new org.jsecurity.subject.SimplePrincipalCollection((org.jsecurity.subject.PrincipalCollection)var18);
    boolean var58 = var18.isEmpty();
    var8.setPrincipals((org.jsecurity.subject.PrincipalCollection)var18);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var9 + "' != '" + 10+ "'", var9.equals(10));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var13);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var14);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var15);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var31);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var40);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var41 + "' != '" + "dd\uFFFD"+ "'", var41.equals("dd\uFFFD"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var42);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var43);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var46);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var52);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var54);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var56 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var58 == false);

  }

  public void test191() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest6.test191");


    org.jsecurity.codec.CodecException var2 = new org.jsecurity.codec.CodecException("dd\uFFFD");
    org.jsecurity.authc.ConcurrentAccessException var3 = new org.jsecurity.authc.ConcurrentAccessException("org.jsecurity.authz.UnauthorizedException: org.jsecurity.session.ExpiredSessionException: ", (java.lang.Throwable)var2);
    org.jsecurity.subject.SimplePrincipalCollection var5 = new org.jsecurity.subject.SimplePrincipalCollection((java.lang.Object)var2, "");
    org.jsecurity.authc.pam.FirstSuccessfulAuthenticationStrategy var6 = new org.jsecurity.authc.pam.FirstSuccessfulAuthenticationStrategy();
    org.jsecurity.authz.UnauthorizedException var8 = new org.jsecurity.authz.UnauthorizedException("org.jsecurity.config.ConfigurationException: dd\uFFFD");
    java.lang.Throwable[] var9 = var8.getSuppressed();
    java.util.List var10 = org.jsecurity.util.CollectionUtils.asList((java.lang.Object[])var9);
    org.jsecurity.authc.UsernamePasswordToken var11 = new org.jsecurity.authc.UsernamePasswordToken();
    java.lang.String var12 = var11.getUsername();
    java.net.InetAddress var13 = var11.getInetAddress();
    org.jsecurity.authc.AuthenticationInfo var14 = var6.beforeAllAttempts((java.util.Collection)var10, (org.jsecurity.authc.AuthenticationToken)var11);
    org.jsecurity.session.UnknownSessionException var19 = new org.jsecurity.session.UnknownSessionException("dd\uFFFD", (java.io.Serializable)100.0f);
    org.jsecurity.subject.SubjectException var20 = new org.jsecurity.subject.SubjectException("dd\uFFFD", (java.lang.Throwable)var19);
    org.jsecurity.io.SerializationException var21 = new org.jsecurity.io.SerializationException("", (java.lang.Throwable)var20);
    java.lang.Throwable[] var22 = var20.getSuppressed();
    java.util.Set var23 = org.jsecurity.util.CollectionUtils.asSet((java.lang.Object[])var22);
    org.jsecurity.authc.SimpleAccount var24 = new org.jsecurity.authc.SimpleAccount((org.jsecurity.subject.PrincipalCollection)var5, (java.lang.Object)var10, var23);
    java.util.Collection var25 = var24.getStringPermissions();
    java.io.InputStream var27 = org.jsecurity.util.ClassUtils.getResourceAsStream("");
    java.lang.Object[] var28 = new java.lang.Object[] { var27};
    java.util.List var29 = org.jsecurity.util.CollectionUtils.asList(var28);
    org.jsecurity.authc.pam.ModularRealmAuthenticator var30 = new org.jsecurity.authc.pam.ModularRealmAuthenticator(var29);
    org.jsecurity.subject.SimplePrincipalCollection var32 = new org.jsecurity.subject.SimplePrincipalCollection((java.util.Collection)var29, "org.jsecurity.authz.UnauthorizedException: org.jsecurity.session.ExpiredSessionException: ");
    org.jsecurity.session.UnknownSessionException var37 = new org.jsecurity.session.UnknownSessionException("dd\uFFFD", (java.io.Serializable)100.0f);
    org.jsecurity.session.SessionException var39 = new org.jsecurity.session.SessionException("dd\uFFFD", (java.lang.Throwable)var37, (java.io.Serializable)0);
    org.jsecurity.session.SessionException var40 = new org.jsecurity.session.SessionException("dd\uFFFD", (java.lang.Throwable)var37);
    var32.add((java.lang.Object)var40, "org.jsecurity.config.ConfigurationException: dd\uFFFD");
    java.util.Set var43 = var32.asSet();
    org.jsecurity.authz.SimpleAuthorizationInfo var44 = new org.jsecurity.authz.SimpleAuthorizationInfo(var43);
    var24.setStringPermissions(var43);
    org.jsecurity.subject.PrincipalCollection var46 = var24.getPrincipals();
    java.util.Collection var47 = var24.getStringPermissions();
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var9);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var10);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var12);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var13);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var14);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var22);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var23);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var25);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var27);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var28);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var29);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var43);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var46);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var47);

  }

  public void test192() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest6.test192");


    org.jsecurity.crypto.BlowfishCipher var0 = new org.jsecurity.crypto.BlowfishCipher();
    byte[] var4 = new byte[] { (byte)100, (byte)100, (byte)(-1)};
    java.lang.String var5 = org.jsecurity.codec.CodecSupport.toString(var4);
    byte[] var7 = org.jsecurity.codec.Base64.decode("hi!");
    byte[] var8 = var0.encrypt(var4, var7);
    boolean var9 = org.jsecurity.codec.Base64.isBase64(var8);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var4);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var5 + "' != '" + "dd\uFFFD"+ "'", var5.equals("dd\uFFFD"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var7);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var8);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var9 == false);

  }

  public void test193() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest6.test193");


    org.jsecurity.crypto.BlowfishCipher var0 = new org.jsecurity.crypto.BlowfishCipher();
    java.security.Key var1 = org.jsecurity.crypto.BlowfishCipher.generateNewKey();
    var0.setKey(var1);
    java.security.Key var3 = org.jsecurity.crypto.BlowfishCipher.generateNewKey();
    var0.setKey(var3);
    byte[] var8 = new byte[] { (byte)100, (byte)100, (byte)(-1)};
    java.lang.String var9 = org.jsecurity.codec.CodecSupport.toString(var8);
    char[] var10 = org.jsecurity.codec.CodecSupport.toChars(var8);
    boolean var11 = org.jsecurity.codec.Base64.isBase64(var8);
    boolean var12 = org.jsecurity.codec.Base64.isBase64(var8);
    boolean var13 = org.jsecurity.codec.Base64.isBase64(var8);
    java.lang.String var14 = org.jsecurity.codec.Hex.encodeToString(var8);
    byte[] var18 = new byte[] { (byte)100, (byte)100, (byte)(-1)};
    java.lang.String var19 = org.jsecurity.codec.CodecSupport.toString(var18);
    char[] var20 = org.jsecurity.codec.CodecSupport.toChars(var18);
    boolean var21 = org.jsecurity.codec.Base64.isBase64(var18);
    boolean var22 = org.jsecurity.codec.Base64.isBase64(var18);
    boolean var23 = org.jsecurity.codec.Base64.isBase64(var18);
    java.lang.String var24 = org.jsecurity.codec.Base64.encodeToString(var18);
    byte[] var25 = var0.encrypt(var8, var18);
    org.jsecurity.io.DefaultSerializer var26 = new org.jsecurity.io.DefaultSerializer();
    org.jsecurity.authz.SimpleRole var27 = new org.jsecurity.authz.SimpleRole();
    byte[] var28 = var26.serialize((java.lang.Object)var27);
    byte[] var32 = new byte[] { (byte)100, (byte)100, (byte)(-1)};
    java.lang.String var33 = org.jsecurity.codec.CodecSupport.toString(var32);
    char[] var34 = org.jsecurity.codec.CodecSupport.toChars(var32);
    boolean var35 = org.jsecurity.codec.Base64.isBase64(var32);
    boolean var36 = org.jsecurity.codec.Base64.isBase64(var32);
    boolean var37 = org.jsecurity.codec.Base64.isBase64(var32);
    byte[] var38 = var0.encrypt(var28, var32);
    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      java.lang.String var40 = org.jsecurity.codec.CodecSupport.toString(var38, "ae927f26-0f5d-42f6-b874-a7bf82cb71a2");
      fail("Expected exception of type org.jsecurity.codec.CodecException");
    } catch (org.jsecurity.codec.CodecException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var1);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var3);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var8);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var9 + "' != '" + "dd\uFFFD"+ "'", var9.equals("dd\uFFFD"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var10);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var11 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var12 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var13 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var14 + "' != '" + "6464ff"+ "'", var14.equals("6464ff"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var18);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var19 + "' != '" + "dd\uFFFD"+ "'", var19.equals("dd\uFFFD"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var20);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var21 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var22 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var23 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var24 + "' != '" + "ZGT/"+ "'", var24.equals("ZGT/"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var25);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var28);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var32);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var33 + "' != '" + "dd\uFFFD"+ "'", var33.equals("dd\uFFFD"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var34);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var35 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var36 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var37 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var38);

  }

  public void test194() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest6.test194");


    org.jsecurity.io.IniResource var1 = new org.jsecurity.io.IniResource();
    var1.setCharsetName("org.jsecurity.authz.UnauthorizedException: org.jsecurity.session.ExpiredSessionException: ");
    java.util.Map var4 = var1.getSections();
    java.util.Map var5 = var1.getSections();
    org.jsecurity.session.UnknownSessionException var6 = new org.jsecurity.session.UnknownSessionException("f9548f9e-497e-41ec-97ca-89ede08e20b0", (java.io.Serializable)var1);
    java.lang.String var7 = var1.getCharsetName();
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var4);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var5);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var7 + "' != '" + "org.jsecurity.authz.UnauthorizedException: org.jsecurity.session.ExpiredSessionException: "+ "'", var7.equals("org.jsecurity.authz.UnauthorizedException: org.jsecurity.session.ExpiredSessionException: "));

  }

  public void test195() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest6.test195");


    org.jsecurity.realm.jdbc.JdbcRealm var0 = new org.jsecurity.realm.jdbc.JdbcRealm();
    var0.setPermissionsQuery("org.jsecurity.authz.UnauthorizedException: org.jsecurity.session.ExpiredSessionException: ");
    var0.setPermissionsLookupEnabled(false);
    var0.setPermissionsQuery("0220fc2d-2559-421b-822b-6ed559f96c25");

  }

  public void test196() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest6.test196");


    org.jsecurity.mgt.DefaultSecurityManager var0 = new org.jsecurity.mgt.DefaultSecurityManager();
    java.io.InputStream var2 = org.jsecurity.util.ClassUtils.getResourceAsStream("");
    java.lang.Object[] var3 = new java.lang.Object[] { var2};
    java.util.List var4 = org.jsecurity.util.CollectionUtils.asList(var3);
    org.jsecurity.authc.pam.ModularRealmAuthenticator var5 = new org.jsecurity.authc.pam.ModularRealmAuthenticator(var4);
    org.jsecurity.authc.pam.AllSuccessfulModularAuthenticationStrategy var6 = new org.jsecurity.authc.pam.AllSuccessfulModularAuthenticationStrategy();
    var5.setModularAuthenticationStrategy((org.jsecurity.authc.pam.ModularAuthenticationStrategy)var6);
    org.jsecurity.authz.SimpleAuthorizationInfo var8 = new org.jsecurity.authz.SimpleAuthorizationInfo();
    var8.addStringPermission("hi!");
    java.io.InputStream var12 = org.jsecurity.util.ClassUtils.getResourceAsStream("");
    java.lang.Object[] var13 = new java.lang.Object[] { var12};
    java.util.List var14 = org.jsecurity.util.CollectionUtils.asList(var13);
    var8.addRoles((java.util.Collection)var14);
    var5.setAuthenticationListeners((java.util.Collection)var14);
    var0.setSessionListeners((java.util.Collection)var14);
    org.jsecurity.realm.text.TextConfigurationRealm var19 = new org.jsecurity.realm.text.TextConfigurationRealm();
    java.io.InputStream var21 = org.jsecurity.util.ClassUtils.getResourceAsStream("");
    java.lang.Object[] var22 = new java.lang.Object[] { var21};
    java.util.List var23 = org.jsecurity.util.CollectionUtils.asList(var22);
    org.jsecurity.authc.pam.ModularRealmAuthenticator var24 = new org.jsecurity.authc.pam.ModularRealmAuthenticator(var23);
    org.jsecurity.subject.SimplePrincipalCollection var26 = new org.jsecurity.subject.SimplePrincipalCollection((java.util.Collection)var23, "org.jsecurity.authz.UnauthorizedException: org.jsecurity.session.ExpiredSessionException: ");
    org.jsecurity.session.UnknownSessionException var31 = new org.jsecurity.session.UnknownSessionException("dd\uFFFD", (java.io.Serializable)100.0f);
    org.jsecurity.session.SessionException var33 = new org.jsecurity.session.SessionException("dd\uFFFD", (java.lang.Throwable)var31, (java.io.Serializable)0);
    org.jsecurity.session.SessionException var34 = new org.jsecurity.session.SessionException("dd\uFFFD", (java.lang.Throwable)var31);
    var26.add((java.lang.Object)var34, "org.jsecurity.config.ConfigurationException: dd\uFFFD");
    var19.onLogout((org.jsecurity.subject.PrincipalCollection)var26);
    java.util.Set var39 = org.jsecurity.util.PermissionUtils.toPermissionStrings("org.jsecurity.config.ConfigurationException: dd\uFFFD");
    org.jsecurity.authz.SimpleAuthorizationInfo var40 = new org.jsecurity.authz.SimpleAuthorizationInfo(var39);
    org.jsecurity.authz.SimpleAuthorizingAccount var41 = new org.jsecurity.authz.SimpleAuthorizingAccount((org.jsecurity.subject.PrincipalCollection)var26, (java.lang.Object)var39);
    org.jsecurity.session.StoppedSessionException var42 = new org.jsecurity.session.StoppedSessionException("org.jsecurity.realm.SimpleAccountRealm-55-authorization", (java.io.Serializable)var26);
    org.jsecurity.realm.activedirectory.ActiveDirectoryRealm var43 = new org.jsecurity.realm.activedirectory.ActiveDirectoryRealm();
    var43.init();
    var43.setSystemPassword("dd\uFFFD");
    org.jsecurity.authz.aop.GuestAnnotationHandler var47 = new org.jsecurity.authz.aop.GuestAnnotationHandler();
    java.lang.Class var48 = var47.getAnnotationClass();
    var43.setAuthenticationTokenClass(var48);
    java.util.Collection var50 = var26.byType(var48);
    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      var0.checkRole((org.jsecurity.subject.PrincipalCollection)var26, "6c9a3d8a-dfcf-4bc4-9aad-6adc8cd8bee3");
      fail("Expected exception of type java.util.NoSuchElementException");
    } catch (java.util.NoSuchElementException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var2);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var3);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var4);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var12);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var13);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var14);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var21);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var22);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var23);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var39);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var48);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var50);

  }

  public void test197() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest6.test197");


    org.jsecurity.session.UnknownSessionException var4 = new org.jsecurity.session.UnknownSessionException("dd\uFFFD", (java.io.Serializable)100.0f);
    org.jsecurity.subject.SubjectException var5 = new org.jsecurity.subject.SubjectException("dd\uFFFD", (java.lang.Throwable)var4);
    org.jsecurity.io.SerializationException var6 = new org.jsecurity.io.SerializationException("", (java.lang.Throwable)var5);
    java.lang.Throwable[] var7 = var5.getSuppressed();
    java.lang.Throwable[] var8 = var5.getSuppressed();
    org.jsecurity.authz.SimpleAuthorizationInfo var11 = new org.jsecurity.authz.SimpleAuthorizationInfo();
    var11.addRole("a2b823b1e72eae2b727289df8a00a89df8a0bab6ad8a89c4c5c7a9b62a270000");
    org.jsecurity.session.UnknownSessionException var18 = new org.jsecurity.session.UnknownSessionException("dd\uFFFD", (java.io.Serializable)100.0f);
    org.jsecurity.subject.SubjectException var19 = new org.jsecurity.subject.SubjectException("dd\uFFFD", (java.lang.Throwable)var18);
    org.jsecurity.io.SerializationException var20 = new org.jsecurity.io.SerializationException("", (java.lang.Throwable)var19);
    java.lang.Throwable[] var21 = var19.getSuppressed();
    java.util.Set var22 = org.jsecurity.util.CollectionUtils.asSet((java.lang.Object[])var21);
    var11.addRoles((java.util.Collection)var22);
    java.io.InputStream var25 = org.jsecurity.util.ClassUtils.getResourceAsStream("");
    java.lang.Object[] var26 = new java.lang.Object[] { var25};
    java.util.List var27 = org.jsecurity.util.CollectionUtils.asList(var26);
    org.jsecurity.authc.pam.ModularRealmAuthenticator var28 = new org.jsecurity.authc.pam.ModularRealmAuthenticator(var27);
    org.jsecurity.subject.SimplePrincipalCollection var30 = new org.jsecurity.subject.SimplePrincipalCollection((java.util.Collection)var27, "org.jsecurity.authz.UnauthorizedException: org.jsecurity.session.ExpiredSessionException: ");
    org.jsecurity.session.UnknownSessionException var35 = new org.jsecurity.session.UnknownSessionException("dd\uFFFD", (java.io.Serializable)100.0f);
    org.jsecurity.session.SessionException var37 = new org.jsecurity.session.SessionException("dd\uFFFD", (java.lang.Throwable)var35, (java.io.Serializable)0);
    org.jsecurity.session.SessionException var38 = new org.jsecurity.session.SessionException("dd\uFFFD", (java.lang.Throwable)var35);
    var30.add((java.lang.Object)var38, "org.jsecurity.config.ConfigurationException: dd\uFFFD");
    java.util.Set var41 = var30.asSet();
    org.jsecurity.authz.SimpleAuthorizingAccount var42 = new org.jsecurity.authz.SimpleAuthorizingAccount((java.lang.Object)var8, (java.lang.Object)"\u0000\u0000\u0000", "\u0000\u0000\u0000", var22, var41);
    org.jsecurity.authz.SimpleRole var44 = var42.getRole("\u0000\u0000\u0000");
    java.util.Set var45 = var42.getPermissions();
    boolean var46 = var42.isLocked();
    java.io.InputStream var48 = org.jsecurity.util.ClassUtils.getResourceAsStream("");
    java.lang.Object[] var49 = new java.lang.Object[] { var48};
    java.util.List var50 = org.jsecurity.util.CollectionUtils.asList(var49);
    org.jsecurity.authc.pam.ModularRealmAuthenticator var51 = new org.jsecurity.authc.pam.ModularRealmAuthenticator(var50);
    org.jsecurity.subject.SimplePrincipalCollection var53 = new org.jsecurity.subject.SimplePrincipalCollection((java.util.Collection)var50, "org.jsecurity.authz.UnauthorizedException: org.jsecurity.session.ExpiredSessionException: ");
    java.util.Set var54 = var53.getRealmNames();
    var42.addStringPermissions((java.util.Collection)var54);
    org.jsecurity.subject.PrincipalCollection var56 = var42.getPrincipals();
    org.jsecurity.realm.text.TextConfigurationRealm var57 = new org.jsecurity.realm.text.TextConfigurationRealm();
    org.jsecurity.realm.text.TextConfigurationRealm var58 = new org.jsecurity.realm.text.TextConfigurationRealm();
    java.io.InputStream var60 = org.jsecurity.util.ClassUtils.getResourceAsStream("");
    java.lang.Object[] var61 = new java.lang.Object[] { var60};
    java.util.List var62 = org.jsecurity.util.CollectionUtils.asList(var61);
    org.jsecurity.authc.pam.ModularRealmAuthenticator var63 = new org.jsecurity.authc.pam.ModularRealmAuthenticator(var62);
    org.jsecurity.subject.SimplePrincipalCollection var65 = new org.jsecurity.subject.SimplePrincipalCollection((java.util.Collection)var62, "org.jsecurity.authz.UnauthorizedException: org.jsecurity.session.ExpiredSessionException: ");
    org.jsecurity.session.UnknownSessionException var70 = new org.jsecurity.session.UnknownSessionException("dd\uFFFD", (java.io.Serializable)100.0f);
    org.jsecurity.session.SessionException var72 = new org.jsecurity.session.SessionException("dd\uFFFD", (java.lang.Throwable)var70, (java.io.Serializable)0);
    org.jsecurity.session.SessionException var73 = new org.jsecurity.session.SessionException("dd\uFFFD", (java.lang.Throwable)var70);
    var65.add((java.lang.Object)var73, "org.jsecurity.config.ConfigurationException: dd\uFFFD");
    var58.onLogout((org.jsecurity.subject.PrincipalCollection)var65);
    java.util.Collection var78 = var65.fromRealm("\u0000\u0000\u0000");
    var57.onLogout((org.jsecurity.subject.PrincipalCollection)var65);
    java.util.Set var80 = var65.asSet();
    var42.setSimpleRoles(var80);
    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      java.util.Set var82 = var42.getPermissions();
      fail("Expected exception of type java.lang.ClassCastException");
    } catch (java.lang.ClassCastException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var7);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var8);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var21);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var22);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var25);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var26);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var27);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var41);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var44);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var45);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var46 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var48);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var49);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var50);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var54);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var56);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var60);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var61);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var62);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var78);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var80);

  }

  public void test198() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest6.test198");


    org.jsecurity.authc.AuthenticationException var1 = new org.jsecurity.authc.AuthenticationException("org.jsecurity.realm.SimpleAccountRealm-749-authorization");

  }

  public void test199() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest6.test199");


    org.jsecurity.io.DefaultSerializer var0 = new org.jsecurity.io.DefaultSerializer();
    org.jsecurity.io.IniResource var1 = new org.jsecurity.io.IniResource();
    java.util.Map var2 = var1.getSections();
    java.lang.String var3 = var1.getCharsetName();
    org.jsecurity.config.ReflectionBuilder var4 = new org.jsecurity.config.ReflectionBuilder();
    org.jsecurity.io.IniResource var5 = new org.jsecurity.io.IniResource();
    java.util.Map var6 = var5.getSections();
    var4.setObjects(var6);
    org.jsecurity.io.IniResource var8 = new org.jsecurity.io.IniResource();
    java.util.Map var9 = var8.getSections();
    java.util.Map var10 = var4.buildObjects(var9);
    var1.setSections(var10);
    org.jsecurity.realm.activedirectory.ActiveDirectoryRealm var12 = new org.jsecurity.realm.activedirectory.ActiveDirectoryRealm();
    org.jsecurity.authc.credential.Sha256CredentialsMatcher var13 = new org.jsecurity.authc.credential.Sha256CredentialsMatcher();
    var12.setCredentialsMatcher((org.jsecurity.authc.credential.CredentialsMatcher)var13);
    java.lang.String var15 = var12.getAuthorizationCacheName();
    var12.setUrl("hi!");
    org.jsecurity.realm.ldap.DefaultLdapContextFactory var18 = new org.jsecurity.realm.ldap.DefaultLdapContextFactory();
    var12.setLdapContextFactory((org.jsecurity.realm.ldap.LdapContextFactory)var18);
    org.jsecurity.config.ReflectionBuilder var20 = new org.jsecurity.config.ReflectionBuilder();
    org.jsecurity.io.IniResource var21 = new org.jsecurity.io.IniResource();
    var21.setCharsetName("org.jsecurity.authz.UnauthorizedException: org.jsecurity.session.ExpiredSessionException: ");
    java.util.Map var24 = var21.getSections();
    java.util.Map var25 = var20.buildObjects(var24);
    org.jsecurity.config.ReflectionBuilder var26 = new org.jsecurity.config.ReflectionBuilder();
    org.jsecurity.io.IniResource var27 = new org.jsecurity.io.IniResource();
    var27.setCharsetName("org.jsecurity.authz.UnauthorizedException: org.jsecurity.session.ExpiredSessionException: ");
    java.util.Map var30 = var27.getSections();
    java.util.Map var31 = var26.buildObjects(var30);
    java.util.Map var32 = var20.buildObjects(var31);
    java.util.Map var33 = var20.getObjects();
    var18.setAdditionalEnvironment(var33);
    org.jsecurity.config.ReflectionBuilder var35 = new org.jsecurity.config.ReflectionBuilder();
    org.jsecurity.io.IniResource var36 = new org.jsecurity.io.IniResource();
    java.util.Map var37 = var36.getSections();
    var35.setObjects(var37);
    org.jsecurity.realm.activedirectory.ActiveDirectoryRealm var39 = new org.jsecurity.realm.activedirectory.ActiveDirectoryRealm();
    var39.init();
    var39.init();
    org.jsecurity.config.ReflectionBuilder var42 = new org.jsecurity.config.ReflectionBuilder();
    org.jsecurity.config.ReflectionBuilder var43 = new org.jsecurity.config.ReflectionBuilder();
    org.jsecurity.io.IniResource var44 = new org.jsecurity.io.IniResource();
    var44.setCharsetName("org.jsecurity.authz.UnauthorizedException: org.jsecurity.session.ExpiredSessionException: ");
    java.util.Map var47 = var44.getSections();
    java.util.Map var48 = var43.buildObjects(var47);
    org.jsecurity.config.ReflectionBuilder var49 = new org.jsecurity.config.ReflectionBuilder();
    org.jsecurity.io.IniResource var50 = new org.jsecurity.io.IniResource();
    var50.setCharsetName("org.jsecurity.authz.UnauthorizedException: org.jsecurity.session.ExpiredSessionException: ");
    java.util.Map var53 = var50.getSections();
    java.util.Map var54 = var49.buildObjects(var53);
    java.util.Map var55 = var43.buildObjects(var54);
    java.util.Map var56 = var42.buildObjects(var55);
    var39.setGroupRolesMap(var56);
    var35.setObjects(var56);
    org.jsecurity.config.ReflectionBuilder var59 = new org.jsecurity.config.ReflectionBuilder(var56);
    var18.setAdditionalEnvironment(var56);
    var1.setSections(var56);
    byte[] var62 = var0.serialize((java.lang.Object)var1);
    org.jsecurity.crypto.hash.Sha512Hash var64 = org.jsecurity.crypto.hash.Sha512Hash.fromBase64String("org.jsecurity.config.ConfigurationException: dd\uFFFD");
    byte[] var65 = var64.getBytes();
    java.lang.String var66 = org.jsecurity.codec.Base64.decodeToString(var65);
    byte[] var67 = org.jsecurity.codec.Base64.encodeChunked(var65);
    boolean var68 = org.jsecurity.codec.Base64.isBase64(var67);
    byte[] var69 = org.jsecurity.codec.Base64.decode(var67);
    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      java.lang.Object var70 = var0.deserialize(var67);
      fail("Expected exception of type org.jsecurity.io.SerializationException");
    } catch (org.jsecurity.io.SerializationException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var2);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var3);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var6);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var9);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var10);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var15);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var24);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var25);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var30);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var31);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var32);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var33);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var37);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var47);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var48);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var53);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var54);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var55);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var56);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var62);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var64);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var65);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var66 + "' != '" + "\u0000\u0000\u0000"+ "'", var66.equals("\u0000\u0000\u0000"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var67);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var68 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var69);

  }

  public void test200() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest6.test200");


    org.jsecurity.mgt.DefaultSecurityManager var0 = new org.jsecurity.mgt.DefaultSecurityManager();
    java.io.InputStream var2 = org.jsecurity.util.ClassUtils.getResourceAsStream("");
    java.lang.Object[] var3 = new java.lang.Object[] { var2};
    java.util.List var4 = org.jsecurity.util.CollectionUtils.asList(var3);
    org.jsecurity.authc.pam.ModularRealmAuthenticator var5 = new org.jsecurity.authc.pam.ModularRealmAuthenticator(var4);
    org.jsecurity.authc.pam.AllSuccessfulModularAuthenticationStrategy var6 = new org.jsecurity.authc.pam.AllSuccessfulModularAuthenticationStrategy();
    var5.setModularAuthenticationStrategy((org.jsecurity.authc.pam.ModularAuthenticationStrategy)var6);
    org.jsecurity.authz.SimpleAuthorizationInfo var8 = new org.jsecurity.authz.SimpleAuthorizationInfo();
    var8.addStringPermission("hi!");
    java.io.InputStream var12 = org.jsecurity.util.ClassUtils.getResourceAsStream("");
    java.lang.Object[] var13 = new java.lang.Object[] { var12};
    java.util.List var14 = org.jsecurity.util.CollectionUtils.asList(var13);
    var8.addRoles((java.util.Collection)var14);
    var5.setAuthenticationListeners((java.util.Collection)var14);
    var0.setSessionListeners((java.util.Collection)var14);
    java.util.Collection var18 = var0.getRealms();
    org.jsecurity.authc.pam.AllSuccessfulModularAuthenticationStrategy var21 = new org.jsecurity.authc.pam.AllSuccessfulModularAuthenticationStrategy();
    char[] var23 = new char[] { };
    org.jsecurity.authc.UsernamePasswordToken var25 = new org.jsecurity.authc.UsernamePasswordToken("hi!", var23, true);
    org.jsecurity.authc.SimpleAccount var26 = new org.jsecurity.authc.SimpleAccount();
    var26.setCredentialsExpired(false);
    boolean var29 = var26.isLocked();
    org.jsecurity.authc.AuthenticationInfo var30 = var21.afterAllAttempts((org.jsecurity.authc.AuthenticationToken)var25, (org.jsecurity.authc.AuthenticationInfo)var26);
    char[] var34 = new char[] { '4', '#'};
    org.jsecurity.authc.UsernamePasswordToken var35 = new org.jsecurity.authc.UsernamePasswordToken("\u0000\u0000", var34);
    org.jsecurity.authc.SimpleAccount var36 = new org.jsecurity.authc.SimpleAccount();
    var36.setCredentialsExpired(false);
    var36.setCredentialsExpired(false);
    boolean var41 = var36.isCredentialsExpired();
    org.jsecurity.authc.AuthenticationInfo var42 = var21.afterAllAttempts((org.jsecurity.authc.AuthenticationToken)var35, (org.jsecurity.authc.AuthenticationInfo)var36);
    org.jsecurity.realm.activedirectory.ActiveDirectoryRealm var43 = new org.jsecurity.realm.activedirectory.ActiveDirectoryRealm();
    org.jsecurity.authc.credential.Sha256CredentialsMatcher var44 = new org.jsecurity.authc.credential.Sha256CredentialsMatcher();
    var43.setCredentialsMatcher((org.jsecurity.authc.credential.CredentialsMatcher)var44);
    java.lang.String var46 = var43.getAuthorizationCacheName();
    org.jsecurity.authc.UsernamePasswordToken var47 = new org.jsecurity.authc.UsernamePasswordToken();
    java.lang.String var48 = var47.getUsername();
    java.lang.Object var49 = var47.getPrincipal();
    boolean var50 = var43.supports((org.jsecurity.authc.AuthenticationToken)var47);
    org.jsecurity.session.UnknownSessionException var54 = new org.jsecurity.session.UnknownSessionException("dd\uFFFD", (java.io.Serializable)100.0f);
    org.jsecurity.session.SessionException var56 = new org.jsecurity.session.SessionException("dd\uFFFD", (java.lang.Throwable)var54, (java.io.Serializable)0);
    org.jsecurity.authc.SimpleAuthenticationInfo var59 = new org.jsecurity.authc.SimpleAuthenticationInfo((java.lang.Object)0, (java.lang.Object)10, "hi!");
    java.lang.Object var60 = var59.getCredentials();
    java.lang.String var61 = var59.toString();
    org.jsecurity.authc.AuthenticationInfo var62 = var21.afterAllAttempts((org.jsecurity.authc.AuthenticationToken)var47, (org.jsecurity.authc.AuthenticationInfo)var59);
    char[] var66 = new char[] { ' ', ' '};
    org.jsecurity.authc.UsernamePasswordToken var67 = new org.jsecurity.authc.UsernamePasswordToken("hi!", var66);
    char[] var71 = new char[] { '4', '#'};
    org.jsecurity.authc.UsernamePasswordToken var72 = new org.jsecurity.authc.UsernamePasswordToken("\u0000\u0000", var71);
    var67.setPassword(var71);
    org.jsecurity.session.mgt.SimpleSession var74 = new org.jsecurity.session.mgt.SimpleSession();
    var74.setTimeout((-1L));
    org.jsecurity.session.mgt.SimpleSession var77 = new org.jsecurity.session.mgt.SimpleSession();
    java.util.Date var78 = var77.getLastAccessTime();
    var74.setLastAccessTime(var78);
    java.net.InetAddress var80 = var74.getHostAddress();
    var67.setInetAddress(var80);
    var47.setInetAddress(var80);
    org.jsecurity.authc.UsernamePasswordToken var83 = new org.jsecurity.authc.UsernamePasswordToken("HashtableCache [\u0000\u0000\u0000]", "020e4fd5-81c8-4cbc-9bbb-975c45ce39a3", var80);
    char[] var84 = var83.getPassword();
    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      org.jsecurity.authc.AuthenticationInfo var85 = var0.authenticate((org.jsecurity.authc.AuthenticationToken)var83);
      fail("Expected exception of type org.jsecurity.authc.AuthenticationException");
    } catch (org.jsecurity.authc.AuthenticationException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var2);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var3);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var4);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var12);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var13);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var14);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var18);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var23);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var29 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var30);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var34);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var41 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var42);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var46);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var48);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var49);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var50 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var60 + "' != '" + 10+ "'", var60.equals(10));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var62);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var66);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var71);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var78);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var80);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var84);

  }

  public void test201() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest6.test201");


    org.jsecurity.mgt.DefaultSecurityManager var0 = new org.jsecurity.mgt.DefaultSecurityManager();
    java.io.InputStream var2 = org.jsecurity.util.ClassUtils.getResourceAsStream("");
    java.lang.Object[] var3 = new java.lang.Object[] { var2};
    java.util.List var4 = org.jsecurity.util.CollectionUtils.asList(var3);
    org.jsecurity.authc.pam.ModularRealmAuthenticator var5 = new org.jsecurity.authc.pam.ModularRealmAuthenticator(var4);
    org.jsecurity.authc.pam.AllSuccessfulModularAuthenticationStrategy var6 = new org.jsecurity.authc.pam.AllSuccessfulModularAuthenticationStrategy();
    var5.setModularAuthenticationStrategy((org.jsecurity.authc.pam.ModularAuthenticationStrategy)var6);
    org.jsecurity.authz.SimpleAuthorizationInfo var8 = new org.jsecurity.authz.SimpleAuthorizationInfo();
    var8.addStringPermission("hi!");
    java.io.InputStream var12 = org.jsecurity.util.ClassUtils.getResourceAsStream("");
    java.lang.Object[] var13 = new java.lang.Object[] { var12};
    java.util.List var14 = org.jsecurity.util.CollectionUtils.asList(var13);
    var8.addRoles((java.util.Collection)var14);
    var5.setAuthenticationListeners((java.util.Collection)var14);
    var0.setSessionListeners((java.util.Collection)var14);
    org.jsecurity.realm.text.TextConfigurationRealm var18 = new org.jsecurity.realm.text.TextConfigurationRealm();
    java.io.InputStream var20 = org.jsecurity.util.ClassUtils.getResourceAsStream("");
    java.lang.Object[] var21 = new java.lang.Object[] { var20};
    java.util.List var22 = org.jsecurity.util.CollectionUtils.asList(var21);
    org.jsecurity.authc.pam.ModularRealmAuthenticator var23 = new org.jsecurity.authc.pam.ModularRealmAuthenticator(var22);
    org.jsecurity.subject.SimplePrincipalCollection var25 = new org.jsecurity.subject.SimplePrincipalCollection((java.util.Collection)var22, "org.jsecurity.authz.UnauthorizedException: org.jsecurity.session.ExpiredSessionException: ");
    org.jsecurity.session.UnknownSessionException var30 = new org.jsecurity.session.UnknownSessionException("dd\uFFFD", (java.io.Serializable)100.0f);
    org.jsecurity.session.SessionException var32 = new org.jsecurity.session.SessionException("dd\uFFFD", (java.lang.Throwable)var30, (java.io.Serializable)0);
    org.jsecurity.session.SessionException var33 = new org.jsecurity.session.SessionException("dd\uFFFD", (java.lang.Throwable)var30);
    var25.add((java.lang.Object)var33, "org.jsecurity.config.ConfigurationException: dd\uFFFD");
    var18.onLogout((org.jsecurity.subject.PrincipalCollection)var25);
    org.jsecurity.authc.pam.FirstSuccessfulAuthenticationStrategy var37 = new org.jsecurity.authc.pam.FirstSuccessfulAuthenticationStrategy();
    org.jsecurity.authz.UnauthorizedException var39 = new org.jsecurity.authz.UnauthorizedException("org.jsecurity.config.ConfigurationException: dd\uFFFD");
    java.lang.Throwable[] var40 = var39.getSuppressed();
    java.util.List var41 = org.jsecurity.util.CollectionUtils.asList((java.lang.Object[])var40);
    org.jsecurity.authc.UsernamePasswordToken var42 = new org.jsecurity.authc.UsernamePasswordToken();
    java.lang.String var43 = var42.getUsername();
    java.net.InetAddress var44 = var42.getInetAddress();
    org.jsecurity.authc.AuthenticationInfo var45 = var37.beforeAllAttempts((java.util.Collection)var41, (org.jsecurity.authc.AuthenticationToken)var42);
    boolean[] var46 = var0.hasRoles((org.jsecurity.subject.PrincipalCollection)var25, var41);
    org.jsecurity.authz.permission.WildcardPermissionResolver var47 = new org.jsecurity.authz.permission.WildcardPermissionResolver();
    org.jsecurity.authz.Permission var49 = var47.resolvePermission("hi!");
    org.jsecurity.authz.Permission var51 = var47.resolvePermission("hi!");
    var0.setPermissionResolver((org.jsecurity.authz.permission.PermissionResolver)var47);
    org.jsecurity.session.mgt.DefaultSessionManager var53 = new org.jsecurity.session.mgt.DefaultSessionManager();
    org.jsecurity.mgt.DefaultSecurityManager var54 = new org.jsecurity.mgt.DefaultSecurityManager();
    org.jsecurity.authz.permission.WildcardPermissionResolver var55 = new org.jsecurity.authz.permission.WildcardPermissionResolver();
    var54.setPermissionResolver((org.jsecurity.authz.permission.PermissionResolver)var55);
    org.jsecurity.cache.CacheManager var57 = var54.getCacheManager();
    var53.setCacheManager(var57);
    long var59 = var53.getSessionValidationInterval();
    boolean var60 = var53.isSessionValidationSchedulerEnabled();
    var0.setSessionManager((org.jsecurity.session.mgt.SessionManager)var53);
    org.jsecurity.session.mgt.DelegatingSession var63 = new org.jsecurity.session.mgt.DelegatingSession((org.jsecurity.session.mgt.SessionManager)var53, (java.io.Serializable)"classpath:org/jsecurity/cache/ehcache/ehcache.xml");
    org.jsecurity.session.mgt.ExecutorServiceSessionValidationScheduler var64 = new org.jsecurity.session.mgt.ExecutorServiceSessionValidationScheduler((org.jsecurity.session.mgt.ValidatingSessionManager)var53);
    long var65 = var64.getInterval();
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var2);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var3);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var4);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var12);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var13);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var14);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var20);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var21);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var22);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var40);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var41);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var43);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var44);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var45);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var46);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var49);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var51);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var57);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var59 == 3600000L);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var60 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var65 == 3600000L);

  }

  public void test202() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest6.test202");


    org.jsecurity.session.mgt.SimpleSession var0 = new org.jsecurity.session.mgt.SimpleSession();
    java.util.Date var1 = var0.getLastAccessTime();
    boolean var2 = var0.isValid();
    org.jsecurity.mgt.DefaultSecurityManager var3 = new org.jsecurity.mgt.DefaultSecurityManager();
    java.io.InputStream var5 = org.jsecurity.util.ClassUtils.getResourceAsStream("");
    java.lang.Object[] var6 = new java.lang.Object[] { var5};
    java.util.List var7 = org.jsecurity.util.CollectionUtils.asList(var6);
    org.jsecurity.authc.pam.ModularRealmAuthenticator var8 = new org.jsecurity.authc.pam.ModularRealmAuthenticator(var7);
    org.jsecurity.authc.pam.AllSuccessfulModularAuthenticationStrategy var9 = new org.jsecurity.authc.pam.AllSuccessfulModularAuthenticationStrategy();
    var8.setModularAuthenticationStrategy((org.jsecurity.authc.pam.ModularAuthenticationStrategy)var9);
    org.jsecurity.authz.SimpleAuthorizationInfo var11 = new org.jsecurity.authz.SimpleAuthorizationInfo();
    var11.addStringPermission("hi!");
    java.io.InputStream var15 = org.jsecurity.util.ClassUtils.getResourceAsStream("");
    java.lang.Object[] var16 = new java.lang.Object[] { var15};
    java.util.List var17 = org.jsecurity.util.CollectionUtils.asList(var16);
    var11.addRoles((java.util.Collection)var17);
    var8.setAuthenticationListeners((java.util.Collection)var17);
    var3.setSessionListeners((java.util.Collection)var17);
    org.jsecurity.realm.text.TextConfigurationRealm var21 = new org.jsecurity.realm.text.TextConfigurationRealm();
    java.io.InputStream var23 = org.jsecurity.util.ClassUtils.getResourceAsStream("");
    java.lang.Object[] var24 = new java.lang.Object[] { var23};
    java.util.List var25 = org.jsecurity.util.CollectionUtils.asList(var24);
    org.jsecurity.authc.pam.ModularRealmAuthenticator var26 = new org.jsecurity.authc.pam.ModularRealmAuthenticator(var25);
    org.jsecurity.subject.SimplePrincipalCollection var28 = new org.jsecurity.subject.SimplePrincipalCollection((java.util.Collection)var25, "org.jsecurity.authz.UnauthorizedException: org.jsecurity.session.ExpiredSessionException: ");
    org.jsecurity.session.UnknownSessionException var33 = new org.jsecurity.session.UnknownSessionException("dd\uFFFD", (java.io.Serializable)100.0f);
    org.jsecurity.session.SessionException var35 = new org.jsecurity.session.SessionException("dd\uFFFD", (java.lang.Throwable)var33, (java.io.Serializable)0);
    org.jsecurity.session.SessionException var36 = new org.jsecurity.session.SessionException("dd\uFFFD", (java.lang.Throwable)var33);
    var28.add((java.lang.Object)var36, "org.jsecurity.config.ConfigurationException: dd\uFFFD");
    var21.onLogout((org.jsecurity.subject.PrincipalCollection)var28);
    org.jsecurity.authc.pam.FirstSuccessfulAuthenticationStrategy var40 = new org.jsecurity.authc.pam.FirstSuccessfulAuthenticationStrategy();
    org.jsecurity.authz.UnauthorizedException var42 = new org.jsecurity.authz.UnauthorizedException("org.jsecurity.config.ConfigurationException: dd\uFFFD");
    java.lang.Throwable[] var43 = var42.getSuppressed();
    java.util.List var44 = org.jsecurity.util.CollectionUtils.asList((java.lang.Object[])var43);
    org.jsecurity.authc.UsernamePasswordToken var45 = new org.jsecurity.authc.UsernamePasswordToken();
    java.lang.String var46 = var45.getUsername();
    java.net.InetAddress var47 = var45.getInetAddress();
    org.jsecurity.authc.AuthenticationInfo var48 = var40.beforeAllAttempts((java.util.Collection)var44, (org.jsecurity.authc.AuthenticationToken)var45);
    boolean[] var49 = var3.hasRoles((org.jsecurity.subject.PrincipalCollection)var28, var44);
    var0.setId((java.io.Serializable)var28);
    java.net.InetAddress var51 = var0.getHostAddress();
    java.lang.Object var53 = var0.getAttribute((java.lang.Object)"3008602b-f37d-459d-973e-0453ee1d8c4b");
    boolean var54 = var0.isExpired();
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var2 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var5);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var6);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var7);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var15);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var16);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var17);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var23);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var24);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var25);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var43);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var44);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var46);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var47);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var48);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var49);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var51);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var53);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var54 == false);

  }

  public void test203() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest6.test203");


    byte[] var1 = org.jsecurity.codec.CodecSupport.toBytes("5dd0c65d-1422-49c2-becb-9e8dca619ab3");
    char[] var2 = org.jsecurity.codec.Hex.encode(var1);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var1);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var2);

  }

  public void test204() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest6.test204");


    org.jsecurity.cache.HashtableCache var1 = new org.jsecurity.cache.HashtableCache("5dd0c65d-1422-49c2-becb-9e8dca619ab3");
    org.jsecurity.realm.text.TextConfigurationRealm var2 = new org.jsecurity.realm.text.TextConfigurationRealm();
    java.io.InputStream var4 = org.jsecurity.util.ClassUtils.getResourceAsStream("");
    java.lang.Object[] var5 = new java.lang.Object[] { var4};
    java.util.List var6 = org.jsecurity.util.CollectionUtils.asList(var5);
    org.jsecurity.authc.pam.ModularRealmAuthenticator var7 = new org.jsecurity.authc.pam.ModularRealmAuthenticator(var6);
    org.jsecurity.subject.SimplePrincipalCollection var9 = new org.jsecurity.subject.SimplePrincipalCollection((java.util.Collection)var6, "org.jsecurity.authz.UnauthorizedException: org.jsecurity.session.ExpiredSessionException: ");
    org.jsecurity.session.UnknownSessionException var14 = new org.jsecurity.session.UnknownSessionException("dd\uFFFD", (java.io.Serializable)100.0f);
    org.jsecurity.session.SessionException var16 = new org.jsecurity.session.SessionException("dd\uFFFD", (java.lang.Throwable)var14, (java.io.Serializable)0);
    org.jsecurity.session.SessionException var17 = new org.jsecurity.session.SessionException("dd\uFFFD", (java.lang.Throwable)var14);
    var9.add((java.lang.Object)var17, "org.jsecurity.config.ConfigurationException: dd\uFFFD");
    var2.onLogout((org.jsecurity.subject.PrincipalCollection)var9);
    org.jsecurity.cache.HashtableCacheManager var21 = new org.jsecurity.cache.HashtableCacheManager();
    org.jsecurity.cache.Cache var23 = var21.getCache("\u0000\u0000");
    var2.setAuthorizationCache(var23);
    org.jsecurity.authc.DisabledAccountException var27 = new org.jsecurity.authc.DisabledAccountException("org.jsecurity.authz.UnauthorizedException: org.jsecurity.session.ExpiredSessionException: ");
    org.jsecurity.session.UnknownSessionException var33 = new org.jsecurity.session.UnknownSessionException("dd\uFFFD", (java.io.Serializable)100.0f);
    org.jsecurity.subject.SubjectException var34 = new org.jsecurity.subject.SubjectException("dd\uFFFD", (java.lang.Throwable)var33);
    org.jsecurity.session.InvalidSessionException var35 = new org.jsecurity.session.InvalidSessionException("hi!", (java.lang.Throwable)var34);
    org.jsecurity.session.SessionException var36 = new org.jsecurity.session.SessionException("dd\uFFFD", (java.lang.Throwable)var34);
    org.jsecurity.session.SessionException var37 = new org.jsecurity.session.SessionException("hi!", (java.lang.Throwable)var27, (java.io.Serializable)var34);
    var1.put((java.lang.Object)var2, (java.lang.Object)var37);
    org.jsecurity.subject.InvalidSubjectException var39 = new org.jsecurity.subject.InvalidSubjectException((java.lang.Throwable)var37);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var4);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var5);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var6);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var23);

  }

  public void test205() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest6.test205");


    org.jsecurity.io.SerializationException var1 = new org.jsecurity.io.SerializationException("3162ca5e-c516-4ad8-9ca6-6ff0939bd5a6");
    org.jsecurity.config.ConfigurationException var2 = new org.jsecurity.config.ConfigurationException((java.lang.Throwable)var1);

  }

  public void test206() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest6.test206");


    org.jsecurity.realm.activedirectory.ActiveDirectoryRealm var1 = new org.jsecurity.realm.activedirectory.ActiveDirectoryRealm();
    var1.init();
    var1.setSystemPassword("dd\uFFFD");
    org.jsecurity.authz.aop.GuestAnnotationHandler var5 = new org.jsecurity.authz.aop.GuestAnnotationHandler();
    java.lang.Class var6 = var5.getAnnotationClass();
    var1.setAuthenticationTokenClass(var6);
    org.jsecurity.authz.permission.WildcardPermissionResolver var8 = new org.jsecurity.authz.permission.WildcardPermissionResolver();
    org.jsecurity.authz.Permission var10 = var8.resolvePermission("hi!");
    var1.setPermissionResolver((org.jsecurity.authz.permission.PermissionResolver)var8);
    java.util.Set var12 = org.jsecurity.util.PermissionUtils.resolveDelimitedPermissions("ZGT/", (org.jsecurity.authz.permission.PermissionResolver)var8);
    org.jsecurity.authz.Permission var14 = var8.resolvePermission("1f71e992-36d8-4d02-9b75-21b9056839ca");
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var6);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var10);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var12);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var14);

  }

  public void test207() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest6.test207");


    org.jsecurity.mgt.DefaultSecurityManager var0 = new org.jsecurity.mgt.DefaultSecurityManager();
    java.io.InputStream var2 = org.jsecurity.util.ClassUtils.getResourceAsStream("");
    java.lang.Object[] var3 = new java.lang.Object[] { var2};
    java.util.List var4 = org.jsecurity.util.CollectionUtils.asList(var3);
    org.jsecurity.authc.pam.ModularRealmAuthenticator var5 = new org.jsecurity.authc.pam.ModularRealmAuthenticator(var4);
    org.jsecurity.authc.pam.AllSuccessfulModularAuthenticationStrategy var6 = new org.jsecurity.authc.pam.AllSuccessfulModularAuthenticationStrategy();
    var5.setModularAuthenticationStrategy((org.jsecurity.authc.pam.ModularAuthenticationStrategy)var6);
    org.jsecurity.authz.SimpleAuthorizationInfo var8 = new org.jsecurity.authz.SimpleAuthorizationInfo();
    var8.addStringPermission("hi!");
    java.io.InputStream var12 = org.jsecurity.util.ClassUtils.getResourceAsStream("");
    java.lang.Object[] var13 = new java.lang.Object[] { var12};
    java.util.List var14 = org.jsecurity.util.CollectionUtils.asList(var13);
    var8.addRoles((java.util.Collection)var14);
    var5.setAuthenticationListeners((java.util.Collection)var14);
    var0.setSessionListeners((java.util.Collection)var14);
    java.io.InputStream var19 = org.jsecurity.util.ClassUtils.getResourceAsStream("");
    java.lang.Object[] var20 = new java.lang.Object[] { var19};
    java.util.List var21 = org.jsecurity.util.CollectionUtils.asList(var20);
    org.jsecurity.authc.pam.ModularRealmAuthenticator var22 = new org.jsecurity.authc.pam.ModularRealmAuthenticator(var21);
    org.jsecurity.authc.pam.AllSuccessfulModularAuthenticationStrategy var23 = new org.jsecurity.authc.pam.AllSuccessfulModularAuthenticationStrategy();
    var22.setModularAuthenticationStrategy((org.jsecurity.authc.pam.ModularAuthenticationStrategy)var23);
    org.jsecurity.authz.SimpleAuthorizationInfo var25 = new org.jsecurity.authz.SimpleAuthorizationInfo();
    var25.addStringPermission("hi!");
    java.io.InputStream var29 = org.jsecurity.util.ClassUtils.getResourceAsStream("");
    java.lang.Object[] var30 = new java.lang.Object[] { var29};
    java.util.List var31 = org.jsecurity.util.CollectionUtils.asList(var30);
    var25.addRoles((java.util.Collection)var31);
    var22.setAuthenticationListeners((java.util.Collection)var31);
    org.jsecurity.realm.activedirectory.ActiveDirectoryRealm var34 = new org.jsecurity.realm.activedirectory.ActiveDirectoryRealm();
    var34.setPrincipalSuffix("");
    var22.setRealm((org.jsecurity.realm.Realm)var34);
    org.jsecurity.cache.HashtableCacheManager var38 = new org.jsecurity.cache.HashtableCacheManager();
    org.jsecurity.cache.Cache var40 = var38.getCache("\u0000\u0000");
    var34.setAuthorizationCache(var40);
    var0.setRealm((org.jsecurity.realm.Realm)var34);
    org.jsecurity.subject.RememberMeManager var43 = var0.getRememberMeManager();
    org.jsecurity.codec.CodecException var46 = new org.jsecurity.codec.CodecException("dd\uFFFD");
    org.jsecurity.authc.ConcurrentAccessException var47 = new org.jsecurity.authc.ConcurrentAccessException("org.jsecurity.authz.UnauthorizedException: org.jsecurity.session.ExpiredSessionException: ", (java.lang.Throwable)var46);
    org.jsecurity.subject.SimplePrincipalCollection var49 = new org.jsecurity.subject.SimplePrincipalCollection((java.lang.Object)var46, "");
    boolean var50 = var49.isEmpty();
    java.util.List var51 = var49.asList();
    org.jsecurity.authc.pam.ModularRealmAuthenticator var52 = new org.jsecurity.authc.pam.ModularRealmAuthenticator(var51);
    var0.setAuthenticationListeners((java.util.Collection)var51);
    org.jsecurity.authz.permission.WildcardPermissionResolver var55 = new org.jsecurity.authz.permission.WildcardPermissionResolver();
    java.util.Set var56 = org.jsecurity.util.PermissionUtils.resolveDelimitedPermissions("7edc3e5f-37f7-4a22-9779-4609545bccd8", (org.jsecurity.authz.permission.PermissionResolver)var55);
    org.jsecurity.subject.SimplePrincipalCollection var58 = new org.jsecurity.subject.SimplePrincipalCollection((java.lang.Object)"7edc3e5f-37f7-4a22-9779-4609545bccd8", "c237631f-f5b6-4602-ad39-91738c85cc84");
    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      var0.checkPermission((org.jsecurity.subject.PrincipalCollection)var58, "ece0d7de-3501-4311-83c5-d3174fe414d8");
      fail("Expected exception of type java.util.NoSuchElementException");
    } catch (java.util.NoSuchElementException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var2);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var3);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var4);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var12);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var13);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var14);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var19);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var20);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var21);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var29);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var30);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var31);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var40);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var43);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var50 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var51);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var56);

  }

  public void test208() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest6.test208");


    org.jsecurity.authz.HostUnauthorizedException var1 = new org.jsecurity.authz.HostUnauthorizedException("c36fbb1d-948b-4bdd-9210-dfbf9b58f8a6");

  }

  public void test209() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest6.test209");


    org.jsecurity.authz.UnauthenticatedException var3 = new org.jsecurity.authz.UnauthenticatedException();
    org.jsecurity.config.UnresolveableReferenceException var4 = new org.jsecurity.config.UnresolveableReferenceException("", (java.lang.Throwable)var3);
    org.jsecurity.cache.CacheException var5 = new org.jsecurity.cache.CacheException("org.jsecurity.config.ConfigurationException: dd\uFFFD", (java.lang.Throwable)var3);
    org.jsecurity.authc.SimpleAuthenticationInfo var7 = new org.jsecurity.authc.SimpleAuthenticationInfo((java.lang.Object)"org.jsecurity.config.ConfigurationException: dd\uFFFD", (java.lang.Object)var5, "a2b823b1e72eae2b727289df8a00a89df8a0bab6ad8a89c4c5c7a9b62a270000");
    org.jsecurity.realm.text.TextConfigurationRealm var8 = new org.jsecurity.realm.text.TextConfigurationRealm();
    java.io.InputStream var10 = org.jsecurity.util.ClassUtils.getResourceAsStream("");
    java.lang.Object[] var11 = new java.lang.Object[] { var10};
    java.util.List var12 = org.jsecurity.util.CollectionUtils.asList(var11);
    org.jsecurity.authc.pam.ModularRealmAuthenticator var13 = new org.jsecurity.authc.pam.ModularRealmAuthenticator(var12);
    org.jsecurity.subject.SimplePrincipalCollection var15 = new org.jsecurity.subject.SimplePrincipalCollection((java.util.Collection)var12, "org.jsecurity.authz.UnauthorizedException: org.jsecurity.session.ExpiredSessionException: ");
    org.jsecurity.session.UnknownSessionException var20 = new org.jsecurity.session.UnknownSessionException("dd\uFFFD", (java.io.Serializable)100.0f);
    org.jsecurity.session.SessionException var22 = new org.jsecurity.session.SessionException("dd\uFFFD", (java.lang.Throwable)var20, (java.io.Serializable)0);
    org.jsecurity.session.SessionException var23 = new org.jsecurity.session.SessionException("dd\uFFFD", (java.lang.Throwable)var20);
    var15.add((java.lang.Object)var23, "org.jsecurity.config.ConfigurationException: dd\uFFFD");
    var8.onLogout((org.jsecurity.subject.PrincipalCollection)var15);
    org.jsecurity.authc.ExpiredCredentialsException var28 = new org.jsecurity.authc.ExpiredCredentialsException();
    org.jsecurity.session.ExpiredSessionException var29 = new org.jsecurity.session.ExpiredSessionException("", (java.lang.Throwable)var28);
    java.lang.Throwable[] var30 = var29.getSuppressed();
    org.jsecurity.io.ResourceException var31 = new org.jsecurity.io.ResourceException((java.lang.Throwable)var29);
    org.jsecurity.authc.SimpleAuthenticationInfo var32 = new org.jsecurity.authc.SimpleAuthenticationInfo((org.jsecurity.subject.PrincipalCollection)var15, (java.lang.Object)var29);
    var7.merge((org.jsecurity.authc.AuthenticationInfo)var32);
    java.lang.String var34 = var32.toString();
    org.jsecurity.subject.PrincipalCollection var35 = var32.getPrincipals();
    java.lang.String var36 = var32.toString();
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var10);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var11);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var12);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var30);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var35);

  }

  public void test210() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest6.test210");


    org.jsecurity.session.mgt.eis.MemorySessionDAO var0 = new org.jsecurity.session.mgt.eis.MemorySessionDAO();
    org.jsecurity.cache.Cache var1 = var0.getActiveSessionsCache();
    org.jsecurity.cache.CacheManager var2 = var0.getCacheManager();
    org.jsecurity.cache.HashtableCacheManager var3 = new org.jsecurity.cache.HashtableCacheManager();
    org.jsecurity.cache.Cache var5 = var3.getCache("\u0000\u0000");
    var0.setActiveSessionsCache(var5);
    java.io.InputStream var8 = org.jsecurity.util.ClassUtils.getResourceAsStream("");
    java.lang.Object[] var9 = new java.lang.Object[] { var8};
    java.util.List var10 = org.jsecurity.util.CollectionUtils.asList(var9);
    org.jsecurity.authc.pam.ModularRealmAuthenticator var11 = new org.jsecurity.authc.pam.ModularRealmAuthenticator(var10);
    org.jsecurity.authc.pam.AllSuccessfulModularAuthenticationStrategy var12 = new org.jsecurity.authc.pam.AllSuccessfulModularAuthenticationStrategy();
    var11.setModularAuthenticationStrategy((org.jsecurity.authc.pam.ModularAuthenticationStrategy)var12);
    org.jsecurity.authz.SimpleAuthorizationInfo var14 = new org.jsecurity.authz.SimpleAuthorizationInfo();
    var14.addStringPermission("hi!");
    java.io.InputStream var18 = org.jsecurity.util.ClassUtils.getResourceAsStream("");
    java.lang.Object[] var19 = new java.lang.Object[] { var18};
    java.util.List var20 = org.jsecurity.util.CollectionUtils.asList(var19);
    var14.addRoles((java.util.Collection)var20);
    var11.setAuthenticationListeners((java.util.Collection)var20);
    org.jsecurity.realm.activedirectory.ActiveDirectoryRealm var23 = new org.jsecurity.realm.activedirectory.ActiveDirectoryRealm();
    var23.setPrincipalSuffix("");
    var11.setRealm((org.jsecurity.realm.Realm)var23);
    org.jsecurity.cache.HashtableCacheManager var27 = new org.jsecurity.cache.HashtableCacheManager();
    org.jsecurity.cache.Cache var29 = var27.getCache("\u0000\u0000");
    var23.setAuthorizationCache(var29);
    var0.setActiveSessionsCache(var29);
    org.jsecurity.session.mgt.SimpleSession var32 = new org.jsecurity.session.mgt.SimpleSession();
    java.io.Serializable var33 = var0.create((org.jsecurity.session.Session)var32);
    org.jsecurity.session.mgt.SimpleSession var34 = new org.jsecurity.session.mgt.SimpleSession();
    var34.touch();
    var34.validate();
    org.jsecurity.session.mgt.SimpleSession var37 = new org.jsecurity.session.mgt.SimpleSession();
    var37.setTimeout((-1L));
    org.jsecurity.session.mgt.SimpleSession var40 = new org.jsecurity.session.mgt.SimpleSession();
    java.util.Date var41 = var40.getLastAccessTime();
    var37.setLastAccessTime(var41);
    org.jsecurity.session.mgt.SimpleSession var43 = new org.jsecurity.session.mgt.SimpleSession();
    java.util.Date var44 = var43.getLastAccessTime();
    var37.setStopTimestamp(var44);
    var34.setLastAccessTime(var44);
    var32.setLastAccessTime(var44);
    org.jsecurity.session.mgt.ImmutableProxiedSession var48 = new org.jsecurity.session.mgt.ImmutableProxiedSession((org.jsecurity.session.Session)var32);
    org.jsecurity.session.ProxiedSession var49 = new org.jsecurity.session.ProxiedSession((org.jsecurity.session.Session)var32);
    org.jsecurity.realm.jdbc.JdbcRealm var50 = new org.jsecurity.realm.jdbc.JdbcRealm();
    var50.setPermissionsQuery("org.jsecurity.realm.text.TextConfigurationRealm_445");
    var50.setUserRolesQuery("6464ff");
    org.jsecurity.crypto.BlowfishCipher var55 = new org.jsecurity.crypto.BlowfishCipher();
    java.security.Key var56 = org.jsecurity.crypto.BlowfishCipher.generateNewKey();
    var55.setKey(var56);
    java.security.Key var58 = org.jsecurity.crypto.BlowfishCipher.generateNewKey();
    var55.setKey(var58);
    byte[] var63 = new byte[] { (byte)100, (byte)100, (byte)(-1)};
    java.lang.String var64 = org.jsecurity.codec.CodecSupport.toString(var63);
    char[] var65 = org.jsecurity.codec.CodecSupport.toChars(var63);
    boolean var66 = org.jsecurity.codec.Base64.isBase64(var63);
    boolean var67 = org.jsecurity.codec.Base64.isBase64(var63);
    boolean var68 = org.jsecurity.codec.Base64.isBase64(var63);
    java.lang.String var69 = org.jsecurity.codec.Hex.encodeToString(var63);
    byte[] var73 = new byte[] { (byte)100, (byte)100, (byte)(-1)};
    java.lang.String var74 = org.jsecurity.codec.CodecSupport.toString(var73);
    char[] var75 = org.jsecurity.codec.CodecSupport.toChars(var73);
    boolean var76 = org.jsecurity.codec.Base64.isBase64(var73);
    boolean var77 = org.jsecurity.codec.Base64.isBase64(var73);
    boolean var78 = org.jsecurity.codec.Base64.isBase64(var73);
    java.lang.String var79 = org.jsecurity.codec.Base64.encodeToString(var73);
    byte[] var80 = var55.encrypt(var63, var73);
    var49.setAttribute((java.lang.Object)"6464ff", (java.lang.Object)var73);
    var49.setTimeout(100L);
    java.lang.Object var85 = var49.removeAttribute((java.lang.Object)"52a4a421-03d6-4e18-abbd-dd3112c2d7b3");
    java.util.Date var86 = var49.getStartTimestamp();
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var1);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var2);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var5);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var8);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var9);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var10);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var18);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var19);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var20);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var29);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var33 + "' != '" + "feadc566-ae14-43f5-8d0a-c52f36a11b37"+ "'", var33.equals("feadc566-ae14-43f5-8d0a-c52f36a11b37"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var41);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var44);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var56);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var58);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var63);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var64 + "' != '" + "dd\uFFFD"+ "'", var64.equals("dd\uFFFD"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var65);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var66 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var67 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var68 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var69 + "' != '" + "6464ff"+ "'", var69.equals("6464ff"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var73);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var74 + "' != '" + "dd\uFFFD"+ "'", var74.equals("dd\uFFFD"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var75);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var76 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var77 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var78 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var79 + "' != '" + "ZGT/"+ "'", var79.equals("ZGT/"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var80);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var85);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var86);

  }

  public void test211() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest6.test211");


    org.jsecurity.realm.text.TextConfigurationRealm var0 = new org.jsecurity.realm.text.TextConfigurationRealm();
    java.io.InputStream var2 = org.jsecurity.util.ClassUtils.getResourceAsStream("");
    java.lang.Object[] var3 = new java.lang.Object[] { var2};
    java.util.List var4 = org.jsecurity.util.CollectionUtils.asList(var3);
    org.jsecurity.authc.pam.ModularRealmAuthenticator var5 = new org.jsecurity.authc.pam.ModularRealmAuthenticator(var4);
    org.jsecurity.subject.SimplePrincipalCollection var7 = new org.jsecurity.subject.SimplePrincipalCollection((java.util.Collection)var4, "org.jsecurity.authz.UnauthorizedException: org.jsecurity.session.ExpiredSessionException: ");
    org.jsecurity.session.UnknownSessionException var12 = new org.jsecurity.session.UnknownSessionException("dd\uFFFD", (java.io.Serializable)100.0f);
    org.jsecurity.session.SessionException var14 = new org.jsecurity.session.SessionException("dd\uFFFD", (java.lang.Throwable)var12, (java.io.Serializable)0);
    org.jsecurity.session.SessionException var15 = new org.jsecurity.session.SessionException("dd\uFFFD", (java.lang.Throwable)var12);
    var7.add((java.lang.Object)var15, "org.jsecurity.config.ConfigurationException: dd\uFFFD");
    var0.onLogout((org.jsecurity.subject.PrincipalCollection)var7);
    byte[] var21 = org.jsecurity.codec.Base64.decode("hi!");
    org.jsecurity.authc.CredentialsException var23 = new org.jsecurity.authc.CredentialsException("org.jsecurity.authz.UnauthorizedException: org.jsecurity.session.ExpiredSessionException: ");
    org.jsecurity.authc.SimpleAuthenticationInfo var25 = new org.jsecurity.authc.SimpleAuthenticationInfo((java.lang.Object)"hi!", (java.lang.Object)var23, "org.jsecurity.config.ConfigurationException: dd\uFFFD");
    org.jsecurity.session.SessionException var26 = new org.jsecurity.session.SessionException("a2b823b1e72eae2b727289df8a00a89df8a0bab6ad8a89c4c5c7a9b62a270000", (java.io.Serializable)"org.jsecurity.config.ConfigurationException: dd\uFFFD");
    org.jsecurity.authc.SimpleAccount var28 = new org.jsecurity.authc.SimpleAccount((java.lang.Object)var0, (java.lang.Object)"a2b823b1e72eae2b727289df8a00a89df8a0bab6ad8a89c4c5c7a9b62a270000", "7edc3e5f-37f7-4a22-9779-4609545bccd8");
    var0.setAuthorizationCacheName("b598ff3d-5685-4491-8ee6-585d37adb1db");
    org.jsecurity.authc.pam.ModularRealmAuthenticator var31 = new org.jsecurity.authc.pam.ModularRealmAuthenticator((org.jsecurity.realm.Realm)var0);
    var0.setName("org.jsecurity.realm.text.TextConfigurationRealm_2807");
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var2);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var3);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var4);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var21);

  }

  public void test212() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest6.test212");


    org.jsecurity.io.IniResource var0 = new org.jsecurity.io.IniResource();
    java.util.Map var1 = var0.getSections();
    java.lang.String var2 = var0.getCharsetName();
    org.jsecurity.config.ReflectionBuilder var3 = new org.jsecurity.config.ReflectionBuilder();
    org.jsecurity.io.IniResource var4 = new org.jsecurity.io.IniResource();
    java.util.Map var5 = var4.getSections();
    var3.setObjects(var5);
    org.jsecurity.io.IniResource var7 = new org.jsecurity.io.IniResource();
    java.util.Map var8 = var7.getSections();
    java.util.Map var9 = var3.buildObjects(var8);
    var0.setSections(var9);
    org.jsecurity.realm.activedirectory.ActiveDirectoryRealm var11 = new org.jsecurity.realm.activedirectory.ActiveDirectoryRealm();
    org.jsecurity.authc.credential.Sha256CredentialsMatcher var12 = new org.jsecurity.authc.credential.Sha256CredentialsMatcher();
    var11.setCredentialsMatcher((org.jsecurity.authc.credential.CredentialsMatcher)var12);
    java.lang.String var14 = var11.getAuthorizationCacheName();
    var11.setUrl("hi!");
    org.jsecurity.realm.ldap.DefaultLdapContextFactory var17 = new org.jsecurity.realm.ldap.DefaultLdapContextFactory();
    var11.setLdapContextFactory((org.jsecurity.realm.ldap.LdapContextFactory)var17);
    org.jsecurity.config.ReflectionBuilder var19 = new org.jsecurity.config.ReflectionBuilder();
    org.jsecurity.io.IniResource var20 = new org.jsecurity.io.IniResource();
    var20.setCharsetName("org.jsecurity.authz.UnauthorizedException: org.jsecurity.session.ExpiredSessionException: ");
    java.util.Map var23 = var20.getSections();
    java.util.Map var24 = var19.buildObjects(var23);
    org.jsecurity.config.ReflectionBuilder var25 = new org.jsecurity.config.ReflectionBuilder();
    org.jsecurity.io.IniResource var26 = new org.jsecurity.io.IniResource();
    var26.setCharsetName("org.jsecurity.authz.UnauthorizedException: org.jsecurity.session.ExpiredSessionException: ");
    java.util.Map var29 = var26.getSections();
    java.util.Map var30 = var25.buildObjects(var29);
    java.util.Map var31 = var19.buildObjects(var30);
    java.util.Map var32 = var19.getObjects();
    var17.setAdditionalEnvironment(var32);
    org.jsecurity.config.ReflectionBuilder var34 = new org.jsecurity.config.ReflectionBuilder();
    org.jsecurity.io.IniResource var35 = new org.jsecurity.io.IniResource();
    java.util.Map var36 = var35.getSections();
    var34.setObjects(var36);
    org.jsecurity.realm.activedirectory.ActiveDirectoryRealm var38 = new org.jsecurity.realm.activedirectory.ActiveDirectoryRealm();
    var38.init();
    var38.init();
    org.jsecurity.config.ReflectionBuilder var41 = new org.jsecurity.config.ReflectionBuilder();
    org.jsecurity.config.ReflectionBuilder var42 = new org.jsecurity.config.ReflectionBuilder();
    org.jsecurity.io.IniResource var43 = new org.jsecurity.io.IniResource();
    var43.setCharsetName("org.jsecurity.authz.UnauthorizedException: org.jsecurity.session.ExpiredSessionException: ");
    java.util.Map var46 = var43.getSections();
    java.util.Map var47 = var42.buildObjects(var46);
    org.jsecurity.config.ReflectionBuilder var48 = new org.jsecurity.config.ReflectionBuilder();
    org.jsecurity.io.IniResource var49 = new org.jsecurity.io.IniResource();
    var49.setCharsetName("org.jsecurity.authz.UnauthorizedException: org.jsecurity.session.ExpiredSessionException: ");
    java.util.Map var52 = var49.getSections();
    java.util.Map var53 = var48.buildObjects(var52);
    java.util.Map var54 = var42.buildObjects(var53);
    java.util.Map var55 = var41.buildObjects(var54);
    var38.setGroupRolesMap(var55);
    var34.setObjects(var55);
    org.jsecurity.config.ReflectionBuilder var58 = new org.jsecurity.config.ReflectionBuilder(var55);
    var17.setAdditionalEnvironment(var55);
    var0.setSections(var55);
    java.lang.String var61 = var0.getCharsetName();
    org.jsecurity.realm.activedirectory.ActiveDirectoryRealm var62 = new org.jsecurity.realm.activedirectory.ActiveDirectoryRealm();
    org.jsecurity.authc.credential.Sha256CredentialsMatcher var63 = new org.jsecurity.authc.credential.Sha256CredentialsMatcher();
    var62.setCredentialsMatcher((org.jsecurity.authc.credential.CredentialsMatcher)var63);
    java.lang.String var65 = var62.getAuthorizationCacheName();
    org.jsecurity.authc.UsernamePasswordToken var66 = new org.jsecurity.authc.UsernamePasswordToken();
    java.lang.String var67 = var66.getUsername();
    java.lang.Object var68 = var66.getPrincipal();
    boolean var69 = var62.supports((org.jsecurity.authc.AuthenticationToken)var66);
    org.jsecurity.config.ReflectionBuilder var70 = new org.jsecurity.config.ReflectionBuilder();
    org.jsecurity.io.IniResource var71 = new org.jsecurity.io.IniResource();
    var71.setCharsetName("org.jsecurity.authz.UnauthorizedException: org.jsecurity.session.ExpiredSessionException: ");
    java.util.Map var74 = var71.getSections();
    java.util.Map var75 = var70.buildObjects(var74);
    org.jsecurity.realm.activedirectory.ActiveDirectoryRealm var76 = new org.jsecurity.realm.activedirectory.ActiveDirectoryRealm();
    org.jsecurity.authc.credential.Sha256CredentialsMatcher var77 = new org.jsecurity.authc.credential.Sha256CredentialsMatcher();
    var76.setCredentialsMatcher((org.jsecurity.authc.credential.CredentialsMatcher)var77);
    java.lang.String var79 = var76.getAuthorizationCacheName();
    var76.setUrl("hi!");
    org.jsecurity.io.IniResource var82 = new org.jsecurity.io.IniResource();
    java.util.Map var83 = var82.getSections();
    java.util.Map var84 = var82.getSections();
    var76.setGroupRolesMap(var84);
    org.jsecurity.config.ReflectionBuilder var86 = new org.jsecurity.config.ReflectionBuilder(var84);
    org.jsecurity.config.ReflectionBuilder var87 = new org.jsecurity.config.ReflectionBuilder();
    org.jsecurity.io.IniResource var88 = new org.jsecurity.io.IniResource();
    var88.setCharsetName("org.jsecurity.authz.UnauthorizedException: org.jsecurity.session.ExpiredSessionException: ");
    java.util.Map var91 = var88.getSections();
    java.util.Map var92 = var87.buildObjects(var91);
    var86.setObjects(var92);
    var70.setObjects(var92);
    var62.setGroupRolesMap(var92);
    org.jsecurity.config.ReflectionBuilder var96 = new org.jsecurity.config.ReflectionBuilder(var92);
    var0.setSections(var92);
    java.util.Map var98 = var0.getSections();
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var1);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var2);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var5);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var8);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var9);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var14);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var23);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var24);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var29);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var30);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var31);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var32);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var36);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var46);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var47);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var52);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var53);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var54);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var55);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var61);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var65);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var67);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var68);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var69 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var74);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var75);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var79);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var83);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var84);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var91);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var92);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var98);

  }

  public void test213() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest6.test213");


    org.jsecurity.crypto.hash.Sha1Hash var1 = org.jsecurity.crypto.hash.Sha1Hash.fromBase64String("NfxhYN7ItBfRAmDBmprtU73ghfEEPpcDJrHPkZ06wiY=");
    java.lang.String var2 = var1.toBase64();
    java.lang.String var3 = var1.toBase64();
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var2 + "' != '" + "NfxhYN7ItBfRAmDBmprtU73ghfEEPpcDJrHPkZ06wiY="+ "'", var2.equals("NfxhYN7ItBfRAmDBmprtU73ghfEEPpcDJrHPkZ06wiY="));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var3 + "' != '" + "NfxhYN7ItBfRAmDBmprtU73ghfEEPpcDJrHPkZ06wiY="+ "'", var3.equals("NfxhYN7ItBfRAmDBmprtU73ghfEEPpcDJrHPkZ06wiY="));

  }

  public void test214() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest6.test214");


    org.jsecurity.authc.ExcessiveAttemptsException var1 = new org.jsecurity.authc.ExcessiveAttemptsException("");
    java.lang.String var2 = var1.toString();
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var2 + "' != '" + "org.jsecurity.authc.ExcessiveAttemptsException: "+ "'", var2.equals("org.jsecurity.authc.ExcessiveAttemptsException: "));

  }

  public void test215() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest6.test215");


    org.jsecurity.realm.activedirectory.ActiveDirectoryRealm var0 = new org.jsecurity.realm.activedirectory.ActiveDirectoryRealm();
    var0.init();
    var0.setSystemPassword("dd\uFFFD");
    org.jsecurity.authz.aop.GuestAnnotationHandler var4 = new org.jsecurity.authz.aop.GuestAnnotationHandler();
    java.lang.Class var5 = var4.getAnnotationClass();
    var0.setAuthenticationTokenClass(var5);
    org.jsecurity.mgt.DefaultSecurityManager var7 = new org.jsecurity.mgt.DefaultSecurityManager((org.jsecurity.realm.Realm)var0);
    org.jsecurity.cache.CacheManager var8 = var0.getCacheManager();
    org.jsecurity.realm.text.PropertiesRealm var9 = new org.jsecurity.realm.text.PropertiesRealm(var8);
    var9.setResourcePath("?\u0238\u0018@\uFFFD");
    java.lang.String var12 = var9.getAuthorizationCacheName();
    var9.addRole("HashtableCache [783ccd31-48a8-42dd-890f-df885a7baaff]");
    java.lang.String var15 = var9.getAuthorizationCacheName();
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var5);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var8);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var12 + "' != '" + "org.jsecurity.realm.text.PropertiesRealm-785-authorization"+ "'", var12.equals("org.jsecurity.realm.text.PropertiesRealm-785-authorization"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var15 + "' != '" + "org.jsecurity.realm.text.PropertiesRealm-785-authorization"+ "'", var15.equals("org.jsecurity.realm.text.PropertiesRealm-785-authorization"));

  }

  public void test216() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest6.test216");


    org.jsecurity.util.AntPathMatcher var0 = new org.jsecurity.util.AntPathMatcher();
    boolean var3 = var0.matchStart("\uFFFD\uFFFD#\uFFFD\uFFFD.\uFFFD+rr\uFFFD\u07CA\u0000\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\u01E9\uFFFD*'\u0000\u0000", "ZGT/");
    boolean var6 = var0.matches("6464ff", "orgjsecurityauthcCredentialsException783ccd3148a842dd890fdf885a7baafAA==");
    java.lang.String var9 = var0.extractPathWithinPattern("b6cd6008-ae80-4bfd-ae0c-5041e0198a79", "org.jsecurity.config.ConfigurationException: dd\uFFFD-4org.jsecurity.config.ConfigurationException: dd\uFFFD02-8085-950org.jsecurity.config.ConfigurationException: dd\uFFFDbb026org.jsecurity.config.ConfigurationException: dd\uFFFD06");
    boolean var11 = var0.isPattern("75c873c8-19df-476a-b82e-72a1eddf7e4b");
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var3 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var6 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var9 + "' != '" + ""+ "'", var9.equals(""));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var11 == false);

  }

  public void test217() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest6.test217");


    org.jsecurity.session.mgt.DelegatingSession var0 = new org.jsecurity.session.mgt.DelegatingSession();
    java.io.Serializable var1 = var0.getId();
    org.jsecurity.session.mgt.SessionManager var2 = var0.getSessionManager();
    org.jsecurity.session.mgt.SimpleSession var3 = new org.jsecurity.session.mgt.SimpleSession();
    org.jsecurity.session.UnknownSessionException var7 = new org.jsecurity.session.UnknownSessionException("dd\uFFFD", (java.io.Serializable)100.0f);
    org.jsecurity.session.SessionException var9 = new org.jsecurity.session.SessionException("dd\uFFFD", (java.lang.Throwable)var7, (java.io.Serializable)0);
    org.jsecurity.authc.AccountException var10 = new org.jsecurity.authc.AccountException((java.lang.Throwable)var7);
    var3.setId((java.io.Serializable)var7);
    var3.setTimeout((-1L));
    org.jsecurity.session.mgt.SimpleSession var14 = new org.jsecurity.session.mgt.SimpleSession();
    var14.setTimeout((-1L));
    org.jsecurity.session.mgt.SimpleSession var17 = new org.jsecurity.session.mgt.SimpleSession();
    var17.setTimeout((-1L));
    org.jsecurity.session.mgt.SimpleSession var20 = new org.jsecurity.session.mgt.SimpleSession();
    java.util.Date var21 = var20.getLastAccessTime();
    var17.setLastAccessTime(var21);
    org.jsecurity.session.mgt.SimpleSession var23 = new org.jsecurity.session.mgt.SimpleSession();
    java.util.Date var24 = var23.getLastAccessTime();
    var17.setStopTimestamp(var24);
    var14.setStartTimestamp(var24);
    var3.setLastAccessTime(var24);
    var0.setId((java.io.Serializable)var24);
    java.io.Serializable var29 = var0.getId();
    org.jsecurity.session.mgt.DefaultSessionManager var30 = new org.jsecurity.session.mgt.DefaultSessionManager();
    org.jsecurity.session.mgt.quartz.QuartzSessionValidationScheduler var31 = new org.jsecurity.session.mgt.quartz.QuartzSessionValidationScheduler();
    boolean var32 = var31.isEnabled();
    var31.enableSessionValidation();
    var30.setSessionValidationScheduler((org.jsecurity.session.mgt.SessionValidationScheduler)var31);
    var0.setSessionManager((org.jsecurity.session.mgt.SessionManager)var30);
    org.jsecurity.authz.UnauthenticatedException var37 = new org.jsecurity.authz.UnauthenticatedException();
    org.jsecurity.authc.AccountException var38 = new org.jsecurity.authc.AccountException("hi!", (java.lang.Throwable)var37);
    org.jsecurity.session.mgt.DelegatingSession var39 = new org.jsecurity.session.mgt.DelegatingSession((org.jsecurity.session.mgt.SessionManager)var30, (java.io.Serializable)var38);
    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      long var40 = var39.getTimeout();
      fail("Expected exception of type org.jsecurity.session.UnknownSessionException");
    } catch (org.jsecurity.session.UnknownSessionException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var1);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var2);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var21);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var24);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var29);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var32 == false);

  }

  public void test218() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest6.test218");


    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      java.io.InputStream var1 = org.jsecurity.io.ResourceUtils.getInputStreamForPath("c51cac08-8f26-424d-9043-59ccfd88d8d7");
      fail("Expected exception of type java.io.FileNotFoundException");
    } catch (java.io.FileNotFoundException e) {
      // Expected exception.
    }

  }

  public void test219() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest6.test219");


    org.jsecurity.session.SessionException var1 = new org.jsecurity.session.SessionException("a2b823b1e72eae2b727289df8a00a89df8a0bab6ad8a89c4c5c7a9b62a270000");
    org.jsecurity.session.ExpiredSessionException var3 = new org.jsecurity.session.ExpiredSessionException((java.io.Serializable)(-1));
    org.jsecurity.authc.DisabledAccountException var4 = new org.jsecurity.authc.DisabledAccountException((java.lang.Throwable)var3);
    var1.addSuppressed((java.lang.Throwable)var4);
    org.jsecurity.authz.UnauthorizedException var6 = new org.jsecurity.authz.UnauthorizedException((java.lang.Throwable)var4);

  }

  public void test220() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest6.test220");


    org.jsecurity.util.AntPathMatcher var0 = new org.jsecurity.util.AntPathMatcher();
    boolean var2 = var0.isPattern("\u0000\u0000\u0000");
    boolean var5 = var0.match("6464ff", "\uFFFD\uFFFD#\uFFFD\uFFFD.\uFFFD+rr\uFFFD\u07CA\u0000\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\u01E9\uFFFD*'\u0000\u0000");
    java.lang.String var8 = var0.extractPathWithinPattern("orgjsecurityauthcCredentialsException783ccd3148a842dd890fdf885a7baafAA==", "a3e14b98-1050-4bcc-8787-431663db8814");
    boolean var11 = var0.match("org.jsecurity.authc.UsernamePasswordToken - null, rememberMe=false", "org.jsecurity.realm.text.TextConfigurationRealm_2382");
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var2 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var5 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var8 + "' != '" + ""+ "'", var8.equals(""));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var11 == false);

  }

  public void test221() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest6.test221");


    org.jsecurity.config.IniConfiguration var0 = new org.jsecurity.config.IniConfiguration();
    var0.init();
    var0.setConfigUrl("947c1ad9-ebd5-4704-882a-a14f51bda9a4");
    org.jsecurity.mgt.SecurityManager var4 = var0.getSecurityManager();
    java.io.InputStream var6 = org.jsecurity.util.ClassUtils.getResourceAsStream("");
    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      var0.load(var6);
      fail("Expected exception of type org.jsecurity.config.ConfigurationException");
    } catch (org.jsecurity.config.ConfigurationException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var4);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var6);

  }

  public void test222() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest6.test222");


    org.jsecurity.realm.activedirectory.ActiveDirectoryRealm var0 = new org.jsecurity.realm.activedirectory.ActiveDirectoryRealm();
    var0.setPrincipalSuffix("");
    org.jsecurity.cache.CacheManager var3 = var0.getCacheManager();
    org.jsecurity.authc.credential.CredentialsMatcher var4 = var0.getCredentialsMatcher();
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var3);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var4);

  }

  public void test223() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest6.test223");


    org.jsecurity.authz.UnauthorizedException var2 = new org.jsecurity.authz.UnauthorizedException();
    org.jsecurity.session.SessionException var4 = new org.jsecurity.session.SessionException("", (java.lang.Throwable)var2, (java.io.Serializable)"org.jsecurity.config.ConfigurationException: dd\uFFFD");
    org.jsecurity.session.ExpiredSessionException var5 = new org.jsecurity.session.ExpiredSessionException("", (java.io.Serializable)"");
    org.jsecurity.authz.UnauthorizedException var6 = new org.jsecurity.authz.UnauthorizedException((java.lang.Throwable)var5);
    org.jsecurity.authz.AuthorizationException var7 = new org.jsecurity.authz.AuthorizationException((java.lang.Throwable)var5);
    org.jsecurity.authc.ConcurrentAccessException var8 = new org.jsecurity.authc.ConcurrentAccessException((java.lang.Throwable)var7);
    org.jsecurity.subject.InvalidSubjectException var9 = new org.jsecurity.subject.InvalidSubjectException((java.lang.Throwable)var8);
    org.jsecurity.authz.HostUnauthorizedException var10 = new org.jsecurity.authz.HostUnauthorizedException((java.lang.Throwable)var8);

  }

  public void test224() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest6.test224");


    org.jsecurity.mgt.DefaultSecurityManager var0 = new org.jsecurity.mgt.DefaultSecurityManager();
    java.io.InputStream var2 = org.jsecurity.util.ClassUtils.getResourceAsStream("");
    java.lang.Object[] var3 = new java.lang.Object[] { var2};
    java.util.List var4 = org.jsecurity.util.CollectionUtils.asList(var3);
    org.jsecurity.authc.pam.ModularRealmAuthenticator var5 = new org.jsecurity.authc.pam.ModularRealmAuthenticator(var4);
    org.jsecurity.authc.pam.AllSuccessfulModularAuthenticationStrategy var6 = new org.jsecurity.authc.pam.AllSuccessfulModularAuthenticationStrategy();
    var5.setModularAuthenticationStrategy((org.jsecurity.authc.pam.ModularAuthenticationStrategy)var6);
    org.jsecurity.authz.SimpleAuthorizationInfo var8 = new org.jsecurity.authz.SimpleAuthorizationInfo();
    var8.addStringPermission("hi!");
    java.io.InputStream var12 = org.jsecurity.util.ClassUtils.getResourceAsStream("");
    java.lang.Object[] var13 = new java.lang.Object[] { var12};
    java.util.List var14 = org.jsecurity.util.CollectionUtils.asList(var13);
    var8.addRoles((java.util.Collection)var14);
    var5.setAuthenticationListeners((java.util.Collection)var14);
    var0.setSessionListeners((java.util.Collection)var14);
    org.jsecurity.authc.pam.ModularRealmAuthenticator var18 = new org.jsecurity.authc.pam.ModularRealmAuthenticator();
    org.jsecurity.authz.permission.InvalidPermissionStringException var21 = new org.jsecurity.authz.permission.InvalidPermissionStringException("", "dd\uFFFD");
    org.jsecurity.JSecurityException var23 = new org.jsecurity.JSecurityException("");
    org.jsecurity.authc.SimpleAuthenticationInfo var25 = new org.jsecurity.authc.SimpleAuthenticationInfo((java.lang.Object)var21, (java.lang.Object)"", "org.jsecurity.authz.UnauthorizedException: org.jsecurity.session.ExpiredSessionException: ");
    org.jsecurity.subject.PrincipalCollection var26 = var25.getPrincipals();
    var18.onLogout(var26);
    var0.setAuthenticator((org.jsecurity.authc.Authenticator)var18);
    org.jsecurity.codec.CodecException var31 = new org.jsecurity.codec.CodecException("dd\uFFFD");
    org.jsecurity.authc.ConcurrentAccessException var32 = new org.jsecurity.authc.ConcurrentAccessException("org.jsecurity.authz.UnauthorizedException: org.jsecurity.session.ExpiredSessionException: ", (java.lang.Throwable)var31);
    org.jsecurity.subject.SimplePrincipalCollection var34 = new org.jsecurity.subject.SimplePrincipalCollection((java.lang.Object)var31, "");
    org.jsecurity.authc.pam.FirstSuccessfulAuthenticationStrategy var35 = new org.jsecurity.authc.pam.FirstSuccessfulAuthenticationStrategy();
    org.jsecurity.authz.UnauthorizedException var37 = new org.jsecurity.authz.UnauthorizedException("org.jsecurity.config.ConfigurationException: dd\uFFFD");
    java.lang.Throwable[] var38 = var37.getSuppressed();
    java.util.List var39 = org.jsecurity.util.CollectionUtils.asList((java.lang.Object[])var38);
    org.jsecurity.authc.UsernamePasswordToken var40 = new org.jsecurity.authc.UsernamePasswordToken();
    java.lang.String var41 = var40.getUsername();
    java.net.InetAddress var42 = var40.getInetAddress();
    org.jsecurity.authc.AuthenticationInfo var43 = var35.beforeAllAttempts((java.util.Collection)var39, (org.jsecurity.authc.AuthenticationToken)var40);
    org.jsecurity.session.UnknownSessionException var48 = new org.jsecurity.session.UnknownSessionException("dd\uFFFD", (java.io.Serializable)100.0f);
    org.jsecurity.subject.SubjectException var49 = new org.jsecurity.subject.SubjectException("dd\uFFFD", (java.lang.Throwable)var48);
    org.jsecurity.io.SerializationException var50 = new org.jsecurity.io.SerializationException("", (java.lang.Throwable)var49);
    java.lang.Throwable[] var51 = var49.getSuppressed();
    java.util.Set var52 = org.jsecurity.util.CollectionUtils.asSet((java.lang.Object[])var51);
    org.jsecurity.authc.SimpleAccount var53 = new org.jsecurity.authc.SimpleAccount((org.jsecurity.subject.PrincipalCollection)var34, (java.lang.Object)var39, var52);
    java.io.InputStream var55 = org.jsecurity.util.ClassUtils.getResourceAsStream("");
    java.lang.Object[] var56 = new java.lang.Object[] { var55};
    java.util.List var57 = org.jsecurity.util.CollectionUtils.asList(var56);
    org.jsecurity.authc.pam.ModularRealmAuthenticator var58 = new org.jsecurity.authc.pam.ModularRealmAuthenticator(var57);
    org.jsecurity.subject.SimplePrincipalCollection var60 = new org.jsecurity.subject.SimplePrincipalCollection((java.util.Collection)var57, "org.jsecurity.authz.UnauthorizedException: org.jsecurity.session.ExpiredSessionException: ");
    org.jsecurity.io.ResourceException var64 = new org.jsecurity.io.ResourceException("hi!");
    org.jsecurity.authc.UnknownAccountException var65 = new org.jsecurity.authc.UnknownAccountException((java.lang.Throwable)var64);
    org.jsecurity.session.StoppedSessionException var66 = new org.jsecurity.session.StoppedSessionException("dd\uFFFD", (java.io.Serializable)var64);
    org.jsecurity.session.UnknownSessionException var67 = new org.jsecurity.session.UnknownSessionException("org.jsecurity.authz.UnauthorizedException: org.jsecurity.session.ExpiredSessionException: ", (java.lang.Throwable)var64);
    boolean var68 = var60.equals((java.lang.Object)var64);
    var34.addAll((org.jsecurity.subject.PrincipalCollection)var60);
    org.jsecurity.session.UnknownSessionException var74 = new org.jsecurity.session.UnknownSessionException("dd\uFFFD", (java.io.Serializable)100.0f);
    org.jsecurity.subject.SubjectException var75 = new org.jsecurity.subject.SubjectException("dd\uFFFD", (java.lang.Throwable)var74);
    org.jsecurity.io.SerializationException var76 = new org.jsecurity.io.SerializationException("", (java.lang.Throwable)var75);
    java.lang.Throwable[] var77 = var75.getSuppressed();
    java.util.List var78 = org.jsecurity.util.CollectionUtils.asList((java.lang.Object[])var77);
    boolean var79 = var0.isPermittedAll((org.jsecurity.subject.PrincipalCollection)var34, (java.util.Collection)var78);
    org.jsecurity.subject.DelegatingSubject var80 = new org.jsecurity.subject.DelegatingSubject((org.jsecurity.mgt.SecurityManager)var0);
    java.lang.String[] var83 = org.jsecurity.util.StringUtils.tokenizeToStringArray("hi!", "");
    boolean[] var84 = var80.isPermitted(var83);
    org.jsecurity.authz.SimpleRole var86 = new org.jsecurity.authz.SimpleRole();
    org.jsecurity.authz.permission.WildcardPermission var89 = new org.jsecurity.authz.permission.WildcardPermission("hi!", false);
    boolean var90 = var86.isPermitted((org.jsecurity.authz.Permission)var89);
    org.jsecurity.session.InvalidSessionException var91 = new org.jsecurity.session.InvalidSessionException("org.jsecurity.config.ConfigurationException: dd\uFFFD", (java.io.Serializable)var89);
    boolean var92 = var80.isPermitted((org.jsecurity.authz.Permission)var89);
    org.jsecurity.subject.PrincipalCollection var93 = var80.getPrincipals();
    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      var80.checkRole("org.jsecurity.realm.text.TextConfigurationRealm_3208");
      fail("Expected exception of type org.jsecurity.authz.UnauthenticatedException");
    } catch (org.jsecurity.authz.UnauthenticatedException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var2);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var3);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var4);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var12);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var13);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var14);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var26);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var38);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var39);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var41);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var42);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var43);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var51);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var52);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var55);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var56);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var57);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var68 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var77);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var78);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var79 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var83);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var84);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var90 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var92 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var93);

  }

  public void test225() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest6.test225");


    org.jsecurity.session.InvalidSessionException var3 = new org.jsecurity.session.InvalidSessionException("dd\uFFFD");
    org.jsecurity.io.SerializationException var4 = new org.jsecurity.io.SerializationException("71af6ede-8cd3-4a28-b912-ba356a7ec0b6", (java.lang.Throwable)var3);
    org.jsecurity.authc.ExcessiveAttemptsException var5 = new org.jsecurity.authc.ExcessiveAttemptsException("ab8fbf0b-d098-4d6c-b2c3-f29cba54d65b", (java.lang.Throwable)var4);

  }

  public void test226() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest6.test226");


    org.jsecurity.realm.jndi.JndiRealmFactory var0 = new org.jsecurity.realm.jndi.JndiRealmFactory();
    java.io.InputStream var2 = org.jsecurity.util.ClassUtils.getResourceAsStream("");
    java.lang.Object[] var3 = new java.lang.Object[] { var2};
    java.util.List var4 = org.jsecurity.util.CollectionUtils.asList(var3);
    var0.setJndiNames((java.util.Collection)var4);
    var0.setResourceRef(true);
    org.jsecurity.jndi.JndiTemplate var8 = var0.getJndiTemplate();
    boolean var9 = var0.isResourceRef();
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var2);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var3);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var4);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var8);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var9 == true);

  }

  public void test227() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest6.test227");


    org.jsecurity.authz.permission.WildcardPermission var1 = new org.jsecurity.authz.permission.WildcardPermission("5e292aeb-e4e5-4d34-8883-2c062f2b4d90");

  }

  public void test228() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest6.test228");


    org.jsecurity.session.UnknownSessionException var3 = new org.jsecurity.session.UnknownSessionException("dd\uFFFD", (java.io.Serializable)100.0f);
    org.jsecurity.session.SessionException var5 = new org.jsecurity.session.SessionException("dd\uFFFD", (java.lang.Throwable)var3, (java.io.Serializable)0);
    org.jsecurity.authc.SimpleAuthenticationInfo var8 = new org.jsecurity.authc.SimpleAuthenticationInfo((java.lang.Object)0, (java.lang.Object)10, "hi!");
    org.jsecurity.session.UnknownSessionException var14 = new org.jsecurity.session.UnknownSessionException("dd\uFFFD", (java.io.Serializable)100.0f);
    org.jsecurity.subject.SubjectException var15 = new org.jsecurity.subject.SubjectException("dd\uFFFD", (java.lang.Throwable)var14);
    org.jsecurity.authc.AccountException var16 = new org.jsecurity.authc.AccountException("hi!", (java.lang.Throwable)var15);
    org.jsecurity.session.ExpiredSessionException var17 = new org.jsecurity.session.ExpiredSessionException("dd\uFFFD", (java.io.Serializable)var16);
    java.io.Serializable var18 = var17.getSessionId();
    boolean var19 = var8.equals((java.lang.Object)var17);
    byte[] var21 = org.jsecurity.codec.Base64.decode("hi!");
    org.jsecurity.authc.CredentialsException var23 = new org.jsecurity.authc.CredentialsException("org.jsecurity.authz.UnauthorizedException: org.jsecurity.session.ExpiredSessionException: ");
    org.jsecurity.authc.SimpleAuthenticationInfo var25 = new org.jsecurity.authc.SimpleAuthenticationInfo((java.lang.Object)"hi!", (java.lang.Object)var23, "org.jsecurity.config.ConfigurationException: dd\uFFFD");
    var8.merge((org.jsecurity.authc.AuthenticationInfo)var25);
    org.jsecurity.session.UnknownSessionException var31 = new org.jsecurity.session.UnknownSessionException("dd\uFFFD", (java.io.Serializable)100.0f);
    org.jsecurity.session.SessionException var33 = new org.jsecurity.session.SessionException("dd\uFFFD", (java.lang.Throwable)var31, (java.io.Serializable)0);
    org.jsecurity.session.SessionException var34 = new org.jsecurity.session.SessionException("dd\uFFFD", (java.lang.Throwable)var31);
    java.io.Serializable var35 = var34.getSessionId();
    org.jsecurity.subject.InvalidSubjectException var36 = new org.jsecurity.subject.InvalidSubjectException((java.lang.Throwable)var34);
    boolean var37 = var8.equals((java.lang.Object)var36);
    java.lang.Object var38 = var8.getCredentials();
    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      org.jsecurity.crypto.hash.Sha512Hash var39 = new org.jsecurity.crypto.hash.Sha512Hash((java.lang.Object)var8);
      fail("Expected exception of type org.jsecurity.codec.CodecException");
    } catch (org.jsecurity.codec.CodecException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var18);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var19 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var21);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var35);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var37 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var38);

  }

  public void test229() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest6.test229");


    org.jsecurity.session.mgt.DefaultSessionManager var0 = new org.jsecurity.session.mgt.DefaultSessionManager();
    org.jsecurity.session.mgt.eis.MemorySessionDAO var1 = new org.jsecurity.session.mgt.eis.MemorySessionDAO();
    org.jsecurity.cache.Cache var2 = var1.getActiveSessionsCache();
    org.jsecurity.cache.CacheManager var3 = var1.getCacheManager();
    org.jsecurity.cache.HashtableCacheManager var4 = new org.jsecurity.cache.HashtableCacheManager();
    org.jsecurity.cache.Cache var6 = var4.getCache("\u0000\u0000");
    var1.setActiveSessionsCache(var6);
    java.io.InputStream var9 = org.jsecurity.util.ClassUtils.getResourceAsStream("");
    java.lang.Object[] var10 = new java.lang.Object[] { var9};
    java.util.List var11 = org.jsecurity.util.CollectionUtils.asList(var10);
    org.jsecurity.authc.pam.ModularRealmAuthenticator var12 = new org.jsecurity.authc.pam.ModularRealmAuthenticator(var11);
    org.jsecurity.authc.pam.AllSuccessfulModularAuthenticationStrategy var13 = new org.jsecurity.authc.pam.AllSuccessfulModularAuthenticationStrategy();
    var12.setModularAuthenticationStrategy((org.jsecurity.authc.pam.ModularAuthenticationStrategy)var13);
    org.jsecurity.authz.SimpleAuthorizationInfo var15 = new org.jsecurity.authz.SimpleAuthorizationInfo();
    var15.addStringPermission("hi!");
    java.io.InputStream var19 = org.jsecurity.util.ClassUtils.getResourceAsStream("");
    java.lang.Object[] var20 = new java.lang.Object[] { var19};
    java.util.List var21 = org.jsecurity.util.CollectionUtils.asList(var20);
    var15.addRoles((java.util.Collection)var21);
    var12.setAuthenticationListeners((java.util.Collection)var21);
    org.jsecurity.realm.activedirectory.ActiveDirectoryRealm var24 = new org.jsecurity.realm.activedirectory.ActiveDirectoryRealm();
    var24.setPrincipalSuffix("");
    var12.setRealm((org.jsecurity.realm.Realm)var24);
    org.jsecurity.cache.HashtableCacheManager var28 = new org.jsecurity.cache.HashtableCacheManager();
    org.jsecurity.cache.Cache var30 = var28.getCache("\u0000\u0000");
    var24.setAuthorizationCache(var30);
    var1.setActiveSessionsCache(var30);
    org.jsecurity.session.mgt.SimpleSession var33 = new org.jsecurity.session.mgt.SimpleSession();
    java.io.Serializable var34 = var1.create((org.jsecurity.session.Session)var33);
    var0.setSessionDAO((org.jsecurity.session.mgt.eis.SessionDAO)var1);
    org.jsecurity.authc.pam.AllSuccessfulModularAuthenticationStrategy var36 = new org.jsecurity.authc.pam.AllSuccessfulModularAuthenticationStrategy();
    char[] var38 = new char[] { };
    org.jsecurity.authc.UsernamePasswordToken var40 = new org.jsecurity.authc.UsernamePasswordToken("hi!", var38, true);
    org.jsecurity.authc.SimpleAccount var41 = new org.jsecurity.authc.SimpleAccount();
    var41.setCredentialsExpired(false);
    boolean var44 = var41.isLocked();
    org.jsecurity.authc.AuthenticationInfo var45 = var36.afterAllAttempts((org.jsecurity.authc.AuthenticationToken)var40, (org.jsecurity.authc.AuthenticationInfo)var41);
    char[] var49 = new char[] { '4', '#'};
    org.jsecurity.authc.UsernamePasswordToken var50 = new org.jsecurity.authc.UsernamePasswordToken("\u0000\u0000", var49);
    org.jsecurity.authc.SimpleAccount var51 = new org.jsecurity.authc.SimpleAccount();
    var51.setCredentialsExpired(false);
    var51.setCredentialsExpired(false);
    boolean var56 = var51.isCredentialsExpired();
    org.jsecurity.authc.AuthenticationInfo var57 = var36.afterAllAttempts((org.jsecurity.authc.AuthenticationToken)var50, (org.jsecurity.authc.AuthenticationInfo)var51);
    org.jsecurity.realm.activedirectory.ActiveDirectoryRealm var58 = new org.jsecurity.realm.activedirectory.ActiveDirectoryRealm();
    org.jsecurity.authc.credential.Sha256CredentialsMatcher var59 = new org.jsecurity.authc.credential.Sha256CredentialsMatcher();
    var58.setCredentialsMatcher((org.jsecurity.authc.credential.CredentialsMatcher)var59);
    java.lang.String var61 = var58.getAuthorizationCacheName();
    org.jsecurity.authc.UsernamePasswordToken var62 = new org.jsecurity.authc.UsernamePasswordToken();
    java.lang.String var63 = var62.getUsername();
    java.lang.Object var64 = var62.getPrincipal();
    boolean var65 = var58.supports((org.jsecurity.authc.AuthenticationToken)var62);
    org.jsecurity.session.UnknownSessionException var69 = new org.jsecurity.session.UnknownSessionException("dd\uFFFD", (java.io.Serializable)100.0f);
    org.jsecurity.session.SessionException var71 = new org.jsecurity.session.SessionException("dd\uFFFD", (java.lang.Throwable)var69, (java.io.Serializable)0);
    org.jsecurity.authc.SimpleAuthenticationInfo var74 = new org.jsecurity.authc.SimpleAuthenticationInfo((java.lang.Object)0, (java.lang.Object)10, "hi!");
    java.lang.Object var75 = var74.getCredentials();
    java.lang.String var76 = var74.toString();
    org.jsecurity.authc.AuthenticationInfo var77 = var36.afterAllAttempts((org.jsecurity.authc.AuthenticationToken)var62, (org.jsecurity.authc.AuthenticationInfo)var74);
    org.jsecurity.session.mgt.eis.MemorySessionDAO var78 = new org.jsecurity.session.mgt.eis.MemorySessionDAO();
    org.jsecurity.cache.Cache var79 = var78.getActiveSessionsCache();
    var78.setActiveSessionsCacheName("dd\uFFFD");
    var74.setCredentials((java.lang.Object)var78);
    var0.setSessionDAO((org.jsecurity.session.mgt.eis.SessionDAO)var78);
    org.jsecurity.session.mgt.ExecutorServiceSessionValidationScheduler var84 = new org.jsecurity.session.mgt.ExecutorServiceSessionValidationScheduler((org.jsecurity.session.mgt.ValidatingSessionManager)var0);
    boolean var85 = var84.isEnabled();
    org.jsecurity.session.mgt.ValidatingSessionManager var86 = var84.getSessionManager();
    var84.setInterval(3600000L);
    org.jsecurity.session.mgt.ValidatingSessionManager var89 = var84.getSessionManager();
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var2);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var3);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var6);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var9);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var10);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var11);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var19);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var20);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var21);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var30);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var34 + "' != '" + "0b128fd4-ef6a-4375-b646-5f7d7b4bb97b"+ "'", var34.equals("0b128fd4-ef6a-4375-b646-5f7d7b4bb97b"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var38);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var44 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var45);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var49);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var56 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var57);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var61);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var63);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var64);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var65 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var75 + "' != '" + 10+ "'", var75.equals(10));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var77);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var79);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var85 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var86);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var89);

  }

  public void test230() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest6.test230");


    org.jsecurity.session.mgt.quartz.QuartzSessionValidationScheduler var0 = new org.jsecurity.session.mgt.quartz.QuartzSessionValidationScheduler();
    var0.disableSessionValidation();
    var0.enableSessionValidation();
    var0.enableSessionValidation();
    var0.setSessionValidationInterval((-1L));
    var0.setSessionValidationInterval(10L);
    boolean var8 = var0.isEnabled();
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var8 == true);

  }

  public void test231() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest6.test231");


    org.jsecurity.realm.jndi.JndiRealmFactory var0 = new org.jsecurity.realm.jndi.JndiRealmFactory();
    var0.setResourceRef(false);
    java.util.Collection var3 = var0.getJndiNames();
    org.jsecurity.jndi.JndiTemplate var4 = var0.getJndiTemplate();
    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      var4.unbind("ca970aaa-b602-4caf-93a3-14b681dd0835");
      fail("Expected exception of type javax.naming.NoInitialContextException");
    } catch (javax.naming.NoInitialContextException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var3);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var4);

  }

  public void test232() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest6.test232");


    org.jsecurity.session.UnknownSessionException var3 = new org.jsecurity.session.UnknownSessionException("dd\uFFFD", (java.io.Serializable)100.0f);
    org.jsecurity.session.SessionException var5 = new org.jsecurity.session.SessionException("dd\uFFFD", (java.lang.Throwable)var3, (java.io.Serializable)0);
    org.jsecurity.authc.SimpleAuthenticationInfo var8 = new org.jsecurity.authc.SimpleAuthenticationInfo((java.lang.Object)0, (java.lang.Object)10, "hi!");
    java.lang.Object var9 = var8.getCredentials();
    java.lang.String var10 = var8.toString();
    org.jsecurity.realm.text.TextConfigurationRealm var11 = new org.jsecurity.realm.text.TextConfigurationRealm();
    java.io.InputStream var13 = org.jsecurity.util.ClassUtils.getResourceAsStream("");
    java.lang.Object[] var14 = new java.lang.Object[] { var13};
    java.util.List var15 = org.jsecurity.util.CollectionUtils.asList(var14);
    org.jsecurity.authc.pam.ModularRealmAuthenticator var16 = new org.jsecurity.authc.pam.ModularRealmAuthenticator(var15);
    org.jsecurity.subject.SimplePrincipalCollection var18 = new org.jsecurity.subject.SimplePrincipalCollection((java.util.Collection)var15, "org.jsecurity.authz.UnauthorizedException: org.jsecurity.session.ExpiredSessionException: ");
    org.jsecurity.session.UnknownSessionException var23 = new org.jsecurity.session.UnknownSessionException("dd\uFFFD", (java.io.Serializable)100.0f);
    org.jsecurity.session.SessionException var25 = new org.jsecurity.session.SessionException("dd\uFFFD", (java.lang.Throwable)var23, (java.io.Serializable)0);
    org.jsecurity.session.SessionException var26 = new org.jsecurity.session.SessionException("dd\uFFFD", (java.lang.Throwable)var23);
    var18.add((java.lang.Object)var26, "org.jsecurity.config.ConfigurationException: dd\uFFFD");
    var11.onLogout((org.jsecurity.subject.PrincipalCollection)var18);
    org.jsecurity.cache.HashtableCacheManager var30 = new org.jsecurity.cache.HashtableCacheManager();
    org.jsecurity.cache.Cache var32 = var30.getCache("\u0000\u0000");
    var11.setAuthorizationCache(var32);
    org.jsecurity.codec.CodecException var36 = new org.jsecurity.codec.CodecException("dd\uFFFD");
    org.jsecurity.authc.ConcurrentAccessException var37 = new org.jsecurity.authc.ConcurrentAccessException("org.jsecurity.authz.UnauthorizedException: org.jsecurity.session.ExpiredSessionException: ", (java.lang.Throwable)var36);
    org.jsecurity.subject.SimplePrincipalCollection var39 = new org.jsecurity.subject.SimplePrincipalCollection((java.lang.Object)var36, "");
    var11.onLogout((org.jsecurity.subject.PrincipalCollection)var39);
    var8.setPrincipals((org.jsecurity.subject.PrincipalCollection)var39);
    org.jsecurity.realm.activedirectory.ActiveDirectoryRealm var42 = new org.jsecurity.realm.activedirectory.ActiveDirectoryRealm();
    org.jsecurity.authc.credential.Sha256CredentialsMatcher var43 = new org.jsecurity.authc.credential.Sha256CredentialsMatcher();
    var42.setCredentialsMatcher((org.jsecurity.authc.credential.CredentialsMatcher)var43);
    org.jsecurity.realm.activedirectory.ActiveDirectoryRealm var45 = new org.jsecurity.realm.activedirectory.ActiveDirectoryRealm();
    org.jsecurity.authc.credential.Sha256CredentialsMatcher var46 = new org.jsecurity.authc.credential.Sha256CredentialsMatcher();
    var45.setCredentialsMatcher((org.jsecurity.authc.credential.CredentialsMatcher)var46);
    java.lang.String var48 = var45.getAuthorizationCacheName();
    var45.setUrl("hi!");
    org.jsecurity.realm.ldap.DefaultLdapContextFactory var51 = new org.jsecurity.realm.ldap.DefaultLdapContextFactory();
    var45.setLdapContextFactory((org.jsecurity.realm.ldap.LdapContextFactory)var51);
    var51.setAuthentication("org.jsecurity.authz.UnauthorizedException: org.jsecurity.session.ExpiredSessionException: ");
    var42.setLdapContextFactory((org.jsecurity.realm.ldap.LdapContextFactory)var51);
    var51.setReferral("a2b823b1e72eae2b727289df8a00a89df8a0bab6ad8a89c4c5c7a9b62a270000");
    var51.setUrl("\u0000\u0000");
    java.util.Set var62 = org.jsecurity.util.PermissionUtils.toPermissionStrings("org.jsecurity.config.ConfigurationException: dd\uFFFD");
    org.jsecurity.authz.SimpleAuthorizationInfo var63 = new org.jsecurity.authz.SimpleAuthorizationInfo(var62);
    org.jsecurity.authz.SimpleRole var64 = new org.jsecurity.authz.SimpleRole();
    java.lang.String var65 = var64.getName();
    org.jsecurity.session.UnknownSessionException var70 = new org.jsecurity.session.UnknownSessionException("dd\uFFFD", (java.io.Serializable)100.0f);
    org.jsecurity.subject.SubjectException var71 = new org.jsecurity.subject.SubjectException("dd\uFFFD", (java.lang.Throwable)var70);
    org.jsecurity.io.SerializationException var72 = new org.jsecurity.io.SerializationException("", (java.lang.Throwable)var71);
    java.lang.Throwable[] var73 = var71.getSuppressed();
    java.util.Set var74 = org.jsecurity.util.CollectionUtils.asSet((java.lang.Object[])var73);
    var64.setPermissions(var74);
    org.jsecurity.authz.SimpleAuthorizingAccount var76 = new org.jsecurity.authz.SimpleAuthorizingAccount((org.jsecurity.subject.PrincipalCollection)var39, (java.lang.Object)"\u0000\u0000", "org.jsecurity.authc.AccountException: hi!", var62, var74);
    var76.setLocked(false);
    org.jsecurity.jndi.JndiTemplate var79 = new org.jsecurity.jndi.JndiTemplate();
    boolean var80 = var76.equals((java.lang.Object)var79);
    java.util.Set var81 = var76.getRolenames();
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var9 + "' != '" + 10+ "'", var9.equals(10));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var13);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var14);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var15);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var32);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var48);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var62);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var65);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var73);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var74);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var80 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var81);

  }

  public void test233() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest6.test233");


    org.jsecurity.mgt.DefaultSecurityManager var0 = new org.jsecurity.mgt.DefaultSecurityManager();
    org.jsecurity.authc.pam.AllSuccessfulModularAuthenticationStrategy var1 = new org.jsecurity.authc.pam.AllSuccessfulModularAuthenticationStrategy();
    org.jsecurity.authc.pam.AllSuccessfulModularAuthenticationStrategy var2 = new org.jsecurity.authc.pam.AllSuccessfulModularAuthenticationStrategy();
    char[] var4 = new char[] { };
    org.jsecurity.authc.UsernamePasswordToken var6 = new org.jsecurity.authc.UsernamePasswordToken("hi!", var4, true);
    org.jsecurity.authc.SimpleAccount var7 = new org.jsecurity.authc.SimpleAccount();
    var7.setCredentialsExpired(false);
    boolean var10 = var7.isLocked();
    org.jsecurity.authc.AuthenticationInfo var11 = var2.afterAllAttempts((org.jsecurity.authc.AuthenticationToken)var6, (org.jsecurity.authc.AuthenticationInfo)var7);
    char[] var15 = new char[] { '4', '#'};
    org.jsecurity.authc.UsernamePasswordToken var16 = new org.jsecurity.authc.UsernamePasswordToken("\u0000\u0000", var15);
    org.jsecurity.authc.SimpleAccount var17 = new org.jsecurity.authc.SimpleAccount();
    var17.setCredentialsExpired(false);
    var17.setCredentialsExpired(false);
    boolean var22 = var17.isCredentialsExpired();
    org.jsecurity.authc.AuthenticationInfo var23 = var2.afterAllAttempts((org.jsecurity.authc.AuthenticationToken)var16, (org.jsecurity.authc.AuthenticationInfo)var17);
    org.jsecurity.authz.UnauthenticatedException var27 = new org.jsecurity.authz.UnauthenticatedException();
    org.jsecurity.config.UnresolveableReferenceException var28 = new org.jsecurity.config.UnresolveableReferenceException("", (java.lang.Throwable)var27);
    org.jsecurity.cache.CacheException var29 = new org.jsecurity.cache.CacheException("org.jsecurity.config.ConfigurationException: dd\uFFFD", (java.lang.Throwable)var27);
    org.jsecurity.authc.SimpleAuthenticationInfo var31 = new org.jsecurity.authc.SimpleAuthenticationInfo((java.lang.Object)"org.jsecurity.config.ConfigurationException: dd\uFFFD", (java.lang.Object)var29, "a2b823b1e72eae2b727289df8a00a89df8a0bab6ad8a89c4c5c7a9b62a270000");
    org.jsecurity.subject.PrincipalCollection var32 = var31.getPrincipals();
    org.jsecurity.authc.AuthenticationInfo var33 = var1.afterAllAttempts((org.jsecurity.authc.AuthenticationToken)var16, (org.jsecurity.authc.AuthenticationInfo)var31);
    var0.setModularAuthenticationStrategy((org.jsecurity.authc.pam.ModularAuthenticationStrategy)var1);
    org.jsecurity.subject.RememberMeManager var35 = var0.getRememberMeManager();
    java.io.InputStream var37 = org.jsecurity.util.ClassUtils.getResourceAsStream("");
    java.lang.Object[] var38 = new java.lang.Object[] { var37};
    java.util.List var39 = org.jsecurity.util.CollectionUtils.asList(var38);
    org.jsecurity.authc.pam.ModularRealmAuthenticator var40 = new org.jsecurity.authc.pam.ModularRealmAuthenticator(var39);
    org.jsecurity.subject.SimplePrincipalCollection var42 = new org.jsecurity.subject.SimplePrincipalCollection((java.util.Collection)var39, "org.jsecurity.authz.UnauthorizedException: org.jsecurity.session.ExpiredSessionException: ");
    java.util.List var43 = var42.asList();
    org.jsecurity.authz.SimpleAuthorizationInfo var44 = new org.jsecurity.authz.SimpleAuthorizationInfo();
    var44.addRole("a2b823b1e72eae2b727289df8a00a89df8a0bab6ad8a89c4c5c7a9b62a270000");
    org.jsecurity.session.UnknownSessionException var51 = new org.jsecurity.session.UnknownSessionException("dd\uFFFD", (java.io.Serializable)100.0f);
    org.jsecurity.subject.SubjectException var52 = new org.jsecurity.subject.SubjectException("dd\uFFFD", (java.lang.Throwable)var51);
    org.jsecurity.io.SerializationException var53 = new org.jsecurity.io.SerializationException("", (java.lang.Throwable)var52);
    java.lang.Throwable[] var54 = var52.getSuppressed();
    java.util.Set var55 = org.jsecurity.util.CollectionUtils.asSet((java.lang.Object[])var54);
    var44.addRoles((java.util.Collection)var55);
    var0.checkRoles((org.jsecurity.subject.PrincipalCollection)var42, (java.util.Collection)var55);
    var0.destroy();
    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      var0.setRememberMeCipherKeyBase64("4f3cc87b-b5e6-4046-98fb-24e207dce9ff");
      fail("Expected exception of type java.lang.IllegalStateException");
    } catch (java.lang.IllegalStateException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var4);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var10 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var11);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var15);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var22 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var23);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var32);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var33);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var35);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var37);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var38);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var39);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var43);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var54);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var55);

  }

  public void test234() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest6.test234");


    org.jsecurity.util.UnknownClassException var1 = new org.jsecurity.util.UnknownClassException("5dd0c65d-1422-49c2-becb-9e8dca619ab3");
    org.jsecurity.authc.CredentialsException var2 = new org.jsecurity.authc.CredentialsException((java.lang.Throwable)var1);

  }

  public void test235() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest6.test235");


    org.jsecurity.cache.HashtableCache var1 = new org.jsecurity.cache.HashtableCache("5dd0c65d-1422-49c2-becb-9e8dca619ab3");
    var1.clear();
    org.jsecurity.mgt.DefaultSecurityManager var3 = new org.jsecurity.mgt.DefaultSecurityManager();
    java.io.InputStream var5 = org.jsecurity.util.ClassUtils.getResourceAsStream("");
    java.lang.Object[] var6 = new java.lang.Object[] { var5};
    java.util.List var7 = org.jsecurity.util.CollectionUtils.asList(var6);
    org.jsecurity.authc.pam.ModularRealmAuthenticator var8 = new org.jsecurity.authc.pam.ModularRealmAuthenticator(var7);
    org.jsecurity.authc.pam.AllSuccessfulModularAuthenticationStrategy var9 = new org.jsecurity.authc.pam.AllSuccessfulModularAuthenticationStrategy();
    var8.setModularAuthenticationStrategy((org.jsecurity.authc.pam.ModularAuthenticationStrategy)var9);
    org.jsecurity.authz.SimpleAuthorizationInfo var11 = new org.jsecurity.authz.SimpleAuthorizationInfo();
    var11.addStringPermission("hi!");
    java.io.InputStream var15 = org.jsecurity.util.ClassUtils.getResourceAsStream("");
    java.lang.Object[] var16 = new java.lang.Object[] { var15};
    java.util.List var17 = org.jsecurity.util.CollectionUtils.asList(var16);
    var11.addRoles((java.util.Collection)var17);
    var8.setAuthenticationListeners((java.util.Collection)var17);
    var3.setSessionListeners((java.util.Collection)var17);
    org.jsecurity.realm.text.TextConfigurationRealm var21 = new org.jsecurity.realm.text.TextConfigurationRealm();
    java.io.InputStream var23 = org.jsecurity.util.ClassUtils.getResourceAsStream("");
    java.lang.Object[] var24 = new java.lang.Object[] { var23};
    java.util.List var25 = org.jsecurity.util.CollectionUtils.asList(var24);
    org.jsecurity.authc.pam.ModularRealmAuthenticator var26 = new org.jsecurity.authc.pam.ModularRealmAuthenticator(var25);
    org.jsecurity.subject.SimplePrincipalCollection var28 = new org.jsecurity.subject.SimplePrincipalCollection((java.util.Collection)var25, "org.jsecurity.authz.UnauthorizedException: org.jsecurity.session.ExpiredSessionException: ");
    org.jsecurity.session.UnknownSessionException var33 = new org.jsecurity.session.UnknownSessionException("dd\uFFFD", (java.io.Serializable)100.0f);
    org.jsecurity.session.SessionException var35 = new org.jsecurity.session.SessionException("dd\uFFFD", (java.lang.Throwable)var33, (java.io.Serializable)0);
    org.jsecurity.session.SessionException var36 = new org.jsecurity.session.SessionException("dd\uFFFD", (java.lang.Throwable)var33);
    var28.add((java.lang.Object)var36, "org.jsecurity.config.ConfigurationException: dd\uFFFD");
    var21.onLogout((org.jsecurity.subject.PrincipalCollection)var28);
    org.jsecurity.authc.pam.FirstSuccessfulAuthenticationStrategy var40 = new org.jsecurity.authc.pam.FirstSuccessfulAuthenticationStrategy();
    org.jsecurity.authz.UnauthorizedException var42 = new org.jsecurity.authz.UnauthorizedException("org.jsecurity.config.ConfigurationException: dd\uFFFD");
    java.lang.Throwable[] var43 = var42.getSuppressed();
    java.util.List var44 = org.jsecurity.util.CollectionUtils.asList((java.lang.Object[])var43);
    org.jsecurity.authc.UsernamePasswordToken var45 = new org.jsecurity.authc.UsernamePasswordToken();
    java.lang.String var46 = var45.getUsername();
    java.net.InetAddress var47 = var45.getInetAddress();
    org.jsecurity.authc.AuthenticationInfo var48 = var40.beforeAllAttempts((java.util.Collection)var44, (org.jsecurity.authc.AuthenticationToken)var45);
    boolean[] var49 = var3.hasRoles((org.jsecurity.subject.PrincipalCollection)var28, var44);
    org.jsecurity.session.mgt.SessionManager var50 = var3.getSessionManager();
    var1.remove((java.lang.Object)var3);
    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      var3.setRememberMeDecryptionCipherKeyBase64("803207de-db4a-44ce-b9a4-60936c92a820");
      fail("Expected exception of type java.lang.IllegalStateException");
    } catch (java.lang.IllegalStateException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var5);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var6);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var7);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var15);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var16);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var17);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var23);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var24);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var25);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var43);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var44);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var46);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var47);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var48);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var49);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var50);

  }

  public void test236() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest6.test236");


    org.jsecurity.config.ReflectionBuilder var0 = new org.jsecurity.config.ReflectionBuilder();
    org.jsecurity.io.IniResource var1 = new org.jsecurity.io.IniResource();
    var1.setCharsetName("org.jsecurity.authz.UnauthorizedException: org.jsecurity.session.ExpiredSessionException: ");
    java.util.Map var4 = var1.getSections();
    java.util.Map var5 = var0.buildObjects(var4);
    org.jsecurity.config.ReflectionBuilder var6 = new org.jsecurity.config.ReflectionBuilder();
    org.jsecurity.io.IniResource var7 = new org.jsecurity.io.IniResource();
    var7.setCharsetName("org.jsecurity.authz.UnauthorizedException: org.jsecurity.session.ExpiredSessionException: ");
    java.util.Map var10 = var7.getSections();
    java.util.Map var11 = var6.buildObjects(var10);
    java.util.Map var12 = var0.buildObjects(var11);
    java.util.Map var13 = var0.getObjects();
    org.jsecurity.config.ReflectionBuilder var14 = new org.jsecurity.config.ReflectionBuilder(var13);
    org.jsecurity.realm.activedirectory.ActiveDirectoryRealm var15 = new org.jsecurity.realm.activedirectory.ActiveDirectoryRealm();
    org.jsecurity.authc.credential.Sha256CredentialsMatcher var16 = new org.jsecurity.authc.credential.Sha256CredentialsMatcher();
    var15.setCredentialsMatcher((org.jsecurity.authc.credential.CredentialsMatcher)var16);
    java.lang.String var18 = var15.getAuthorizationCacheName();
    var15.setPrincipalSuffix("org.jsecurity.config.ConfigurationException: dd\uFFFD");
    org.jsecurity.config.ReflectionBuilder var21 = new org.jsecurity.config.ReflectionBuilder();
    org.jsecurity.io.IniResource var22 = new org.jsecurity.io.IniResource();
    java.util.Map var23 = var22.getSections();
    var21.setObjects(var23);
    org.jsecurity.io.IniResource var25 = new org.jsecurity.io.IniResource();
    java.util.Map var26 = var25.getSections();
    java.util.Map var27 = var21.buildObjects(var26);
    org.jsecurity.realm.ldap.DefaultLdapContextFactory var28 = new org.jsecurity.realm.ldap.DefaultLdapContextFactory();
    org.jsecurity.io.IniResource var29 = new org.jsecurity.io.IniResource();
    var29.setCharsetName("org.jsecurity.authz.UnauthorizedException: org.jsecurity.session.ExpiredSessionException: ");
    java.util.Map var32 = var29.getSections();
    var28.setAdditionalEnvironment(var32);
    org.jsecurity.config.ReflectionBuilder var34 = new org.jsecurity.config.ReflectionBuilder(var32);
    var21.setObjects(var32);
    java.util.Map var36 = var21.getObjects();
    var15.setGroupRolesMap(var36);
    var14.setObjects(var36);
    org.jsecurity.mgt.DefaultSecurityManager var39 = new org.jsecurity.mgt.DefaultSecurityManager();
    java.io.InputStream var41 = org.jsecurity.util.ClassUtils.getResourceAsStream("");
    java.lang.Object[] var42 = new java.lang.Object[] { var41};
    java.util.List var43 = org.jsecurity.util.CollectionUtils.asList(var42);
    org.jsecurity.authc.pam.ModularRealmAuthenticator var44 = new org.jsecurity.authc.pam.ModularRealmAuthenticator(var43);
    org.jsecurity.authc.pam.AllSuccessfulModularAuthenticationStrategy var45 = new org.jsecurity.authc.pam.AllSuccessfulModularAuthenticationStrategy();
    var44.setModularAuthenticationStrategy((org.jsecurity.authc.pam.ModularAuthenticationStrategy)var45);
    org.jsecurity.authz.SimpleAuthorizationInfo var47 = new org.jsecurity.authz.SimpleAuthorizationInfo();
    var47.addStringPermission("hi!");
    java.io.InputStream var51 = org.jsecurity.util.ClassUtils.getResourceAsStream("");
    java.lang.Object[] var52 = new java.lang.Object[] { var51};
    java.util.List var53 = org.jsecurity.util.CollectionUtils.asList(var52);
    var47.addRoles((java.util.Collection)var53);
    var44.setAuthenticationListeners((java.util.Collection)var53);
    var39.setSessionListeners((java.util.Collection)var53);
    java.io.InputStream var58 = org.jsecurity.util.ClassUtils.getResourceAsStream("");
    java.lang.Object[] var59 = new java.lang.Object[] { var58};
    java.util.List var60 = org.jsecurity.util.CollectionUtils.asList(var59);
    org.jsecurity.authc.pam.ModularRealmAuthenticator var61 = new org.jsecurity.authc.pam.ModularRealmAuthenticator(var60);
    org.jsecurity.authc.pam.AllSuccessfulModularAuthenticationStrategy var62 = new org.jsecurity.authc.pam.AllSuccessfulModularAuthenticationStrategy();
    var61.setModularAuthenticationStrategy((org.jsecurity.authc.pam.ModularAuthenticationStrategy)var62);
    org.jsecurity.authz.SimpleAuthorizationInfo var64 = new org.jsecurity.authz.SimpleAuthorizationInfo();
    var64.addStringPermission("hi!");
    java.io.InputStream var68 = org.jsecurity.util.ClassUtils.getResourceAsStream("");
    java.lang.Object[] var69 = new java.lang.Object[] { var68};
    java.util.List var70 = org.jsecurity.util.CollectionUtils.asList(var69);
    var64.addRoles((java.util.Collection)var70);
    var61.setAuthenticationListeners((java.util.Collection)var70);
    org.jsecurity.realm.activedirectory.ActiveDirectoryRealm var73 = new org.jsecurity.realm.activedirectory.ActiveDirectoryRealm();
    var73.setPrincipalSuffix("");
    var61.setRealm((org.jsecurity.realm.Realm)var73);
    org.jsecurity.cache.HashtableCacheManager var77 = new org.jsecurity.cache.HashtableCacheManager();
    org.jsecurity.cache.Cache var79 = var77.getCache("\u0000\u0000");
    var73.setAuthorizationCache(var79);
    var39.setRealm((org.jsecurity.realm.Realm)var73);
    org.jsecurity.config.ReflectionBuilder var82 = new org.jsecurity.config.ReflectionBuilder();
    org.jsecurity.io.IniResource var83 = new org.jsecurity.io.IniResource();
    java.util.Map var84 = var83.getSections();
    var82.setObjects(var84);
    var73.setGroupRolesMap(var84);
    java.util.Map var87 = var14.buildObjects(var84);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var4);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var5);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var10);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var11);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var12);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var13);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var18);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var23);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var26);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var27);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var32);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var36);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var41);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var42);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var43);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var51);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var52);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var53);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var58);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var59);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var60);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var68);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var69);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var70);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var79);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var84);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var87);

  }

  public void test237() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest6.test237");


    org.jsecurity.authz.SimpleRole var0 = new org.jsecurity.authz.SimpleRole();
    org.jsecurity.authz.SimpleAuthorizationInfo var1 = new org.jsecurity.authz.SimpleAuthorizationInfo();
    var1.addRole("a2b823b1e72eae2b727289df8a00a89df8a0bab6ad8a89c4c5c7a9b62a270000");
    org.jsecurity.session.UnknownSessionException var8 = new org.jsecurity.session.UnknownSessionException("dd\uFFFD", (java.io.Serializable)100.0f);
    org.jsecurity.subject.SubjectException var9 = new org.jsecurity.subject.SubjectException("dd\uFFFD", (java.lang.Throwable)var8);
    org.jsecurity.io.SerializationException var10 = new org.jsecurity.io.SerializationException("", (java.lang.Throwable)var9);
    java.lang.Throwable[] var11 = var9.getSuppressed();
    java.util.Set var12 = org.jsecurity.util.CollectionUtils.asSet((java.lang.Object[])var11);
    var1.addRoles((java.util.Collection)var12);
    var0.addAll((java.util.Collection)var12);
    java.lang.String var15 = var0.toString();
    org.jsecurity.authz.SimpleRole var16 = new org.jsecurity.authz.SimpleRole();
    org.jsecurity.authz.SimpleAuthorizationInfo var17 = new org.jsecurity.authz.SimpleAuthorizationInfo();
    var17.addRole("a2b823b1e72eae2b727289df8a00a89df8a0bab6ad8a89c4c5c7a9b62a270000");
    org.jsecurity.session.UnknownSessionException var24 = new org.jsecurity.session.UnknownSessionException("dd\uFFFD", (java.io.Serializable)100.0f);
    org.jsecurity.subject.SubjectException var25 = new org.jsecurity.subject.SubjectException("dd\uFFFD", (java.lang.Throwable)var24);
    org.jsecurity.io.SerializationException var26 = new org.jsecurity.io.SerializationException("", (java.lang.Throwable)var25);
    java.lang.Throwable[] var27 = var25.getSuppressed();
    java.util.Set var28 = org.jsecurity.util.CollectionUtils.asSet((java.lang.Object[])var27);
    var17.addRoles((java.util.Collection)var28);
    var16.addAll((java.util.Collection)var28);
    org.jsecurity.authz.SimpleRole var32 = new org.jsecurity.authz.SimpleRole();
    org.jsecurity.authz.permission.WildcardPermission var35 = new org.jsecurity.authz.permission.WildcardPermission("hi!", false);
    boolean var36 = var32.isPermitted((org.jsecurity.authz.Permission)var35);
    org.jsecurity.session.InvalidSessionException var37 = new org.jsecurity.session.InvalidSessionException("org.jsecurity.config.ConfigurationException: dd\uFFFD", (java.io.Serializable)var35);
    org.jsecurity.authz.SimpleRole var38 = new org.jsecurity.authz.SimpleRole();
    org.jsecurity.authz.permission.WildcardPermission var41 = new org.jsecurity.authz.permission.WildcardPermission("hi!", false);
    boolean var42 = var38.isPermitted((org.jsecurity.authz.Permission)var41);
    boolean var43 = var35.implies((org.jsecurity.authz.Permission)var41);
    boolean var44 = var16.isPermitted((org.jsecurity.authz.Permission)var41);
    boolean var45 = var0.isPermitted((org.jsecurity.authz.Permission)var41);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var11);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var12);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var15);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var27);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var28);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var36 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var42 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var43 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var44 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var45 == false);

  }

  public void test238() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest6.test238");


    org.jsecurity.authc.pam.ModularRealmAuthenticator var0 = new org.jsecurity.authc.pam.ModularRealmAuthenticator();
    org.jsecurity.authz.permission.InvalidPermissionStringException var3 = new org.jsecurity.authz.permission.InvalidPermissionStringException("", "dd\uFFFD");
    org.jsecurity.JSecurityException var5 = new org.jsecurity.JSecurityException("");
    org.jsecurity.authc.SimpleAuthenticationInfo var7 = new org.jsecurity.authc.SimpleAuthenticationInfo((java.lang.Object)var3, (java.lang.Object)"", "org.jsecurity.authz.UnauthorizedException: org.jsecurity.session.ExpiredSessionException: ");
    org.jsecurity.subject.PrincipalCollection var8 = var7.getPrincipals();
    var0.onLogout(var8);
    org.jsecurity.authc.pam.ModularAuthenticationStrategy var10 = var0.getModularAuthenticationStrategy();
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var8);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var10);

  }

  public void test239() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest6.test239");


    org.jsecurity.authz.permission.InvalidPermissionStringException var2 = new org.jsecurity.authz.permission.InvalidPermissionStringException("", "dd\uFFFD");
    org.jsecurity.JSecurityException var4 = new org.jsecurity.JSecurityException("");
    org.jsecurity.authc.SimpleAuthenticationInfo var6 = new org.jsecurity.authc.SimpleAuthenticationInfo((java.lang.Object)var2, (java.lang.Object)"", "org.jsecurity.authz.UnauthorizedException: org.jsecurity.session.ExpiredSessionException: ");
    org.jsecurity.subject.PrincipalCollection var7 = var6.getPrincipals();
    org.jsecurity.subject.PrincipalCollection var8 = var6.getPrincipals();
    org.jsecurity.authz.permission.WildcardPermissionResolver var9 = new org.jsecurity.authz.permission.WildcardPermissionResolver();
    org.jsecurity.authz.SimpleAuthorizingAccount var11 = new org.jsecurity.authz.SimpleAuthorizingAccount();
    org.jsecurity.authz.SimpleAuthorizationInfo var12 = new org.jsecurity.authz.SimpleAuthorizationInfo();
    var12.addRole("a2b823b1e72eae2b727289df8a00a89df8a0bab6ad8a89c4c5c7a9b62a270000");
    org.jsecurity.authz.SimpleAuthorizationInfo var15 = new org.jsecurity.authz.SimpleAuthorizationInfo();
    var15.addRole("a2b823b1e72eae2b727289df8a00a89df8a0bab6ad8a89c4c5c7a9b62a270000");
    org.jsecurity.session.UnknownSessionException var22 = new org.jsecurity.session.UnknownSessionException("dd\uFFFD", (java.io.Serializable)100.0f);
    org.jsecurity.subject.SubjectException var23 = new org.jsecurity.subject.SubjectException("dd\uFFFD", (java.lang.Throwable)var22);
    org.jsecurity.io.SerializationException var24 = new org.jsecurity.io.SerializationException("", (java.lang.Throwable)var23);
    java.lang.Throwable[] var25 = var23.getSuppressed();
    java.util.Set var26 = org.jsecurity.util.CollectionUtils.asSet((java.lang.Object[])var25);
    var15.addRoles((java.util.Collection)var26);
    var12.setObjectPermissions(var26);
    var11.setSimpleRoles(var26);
    java.util.Set var30 = var11.getPermissions();
    org.jsecurity.authz.SimpleAuthorizationInfo var31 = new org.jsecurity.authz.SimpleAuthorizationInfo();
    var31.addRole("a2b823b1e72eae2b727289df8a00a89df8a0bab6ad8a89c4c5c7a9b62a270000");
    org.jsecurity.authz.SimpleAuthorizationInfo var34 = new org.jsecurity.authz.SimpleAuthorizationInfo();
    var34.addRole("a2b823b1e72eae2b727289df8a00a89df8a0bab6ad8a89c4c5c7a9b62a270000");
    org.jsecurity.session.UnknownSessionException var41 = new org.jsecurity.session.UnknownSessionException("dd\uFFFD", (java.io.Serializable)100.0f);
    org.jsecurity.subject.SubjectException var42 = new org.jsecurity.subject.SubjectException("dd\uFFFD", (java.lang.Throwable)var41);
    org.jsecurity.io.SerializationException var43 = new org.jsecurity.io.SerializationException("", (java.lang.Throwable)var42);
    java.lang.Throwable[] var44 = var42.getSuppressed();
    java.util.Set var45 = org.jsecurity.util.CollectionUtils.asSet((java.lang.Object[])var44);
    var34.addRoles((java.util.Collection)var45);
    var31.setObjectPermissions(var45);
    var11.checkRoles((java.util.Collection)var45);
    org.jsecurity.session.UnknownSessionException var53 = new org.jsecurity.session.UnknownSessionException("dd\uFFFD", (java.io.Serializable)100.0f);
    org.jsecurity.subject.SubjectException var54 = new org.jsecurity.subject.SubjectException("dd\uFFFD", (java.lang.Throwable)var53);
    org.jsecurity.io.SerializationException var55 = new org.jsecurity.io.SerializationException("", (java.lang.Throwable)var54);
    java.lang.Throwable[] var56 = var54.getSuppressed();
    java.lang.Throwable[] var57 = var54.getSuppressed();
    java.util.Set var58 = org.jsecurity.util.CollectionUtils.asSet((java.lang.Object[])var57);
    org.jsecurity.authz.SimpleAuthorizingAccount var59 = new org.jsecurity.authz.SimpleAuthorizingAccount(var8, (java.lang.Object)var9, "a3e14b98-1050-4bcc-8787-431663db8814", var45, var58);
    boolean var60 = var59.isLocked();
    java.util.Collection var61 = var59.getStringPermissions();
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var7);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var8);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var25);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var26);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var30);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var44);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var45);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var56);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var57);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var58);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var60 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var61);

  }

  public void test240() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest6.test240");


    java.lang.String[] var3 = org.jsecurity.util.StringUtils.split("03904751-3529-40be-9f5e-52ce7a5e48bb", 'a', '4');
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var3);

  }

  public void test241() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest6.test241");


    org.jsecurity.session.mgt.eis.MemorySessionDAO var0 = new org.jsecurity.session.mgt.eis.MemorySessionDAO();
    org.jsecurity.cache.Cache var1 = var0.getActiveSessionsCache();
    org.jsecurity.session.mgt.SimpleSession var2 = new org.jsecurity.session.mgt.SimpleSession();
    var2.setTimeout((-1L));
    org.jsecurity.session.mgt.SimpleSession var5 = new org.jsecurity.session.mgt.SimpleSession();
    java.util.Date var6 = var5.getLastAccessTime();
    var2.setLastAccessTime(var6);
    var0.update((org.jsecurity.session.Session)var2);
    var0.setActiveSessionsCacheName("hi!");
    var0.setActiveSessionsCacheName("d0ddeefd-5576-4906-99f8-93b892e0c773");
    var0.setActiveSessionsCacheName("b74f4674-5868-4e94-a7d5-832b6ef0fcdburity.rb74f4674-5868-4e94-a7d5-832b6ef0fcdblm.tb74f4674-5868-4e94-a7d5-832b6ef0fcdbxt.Propb74f4674-5868-4e94-a7d5-832b6ef0fcdbrtib74f4674-5868-4e94-a7d5-832b6ef0fcdbsRb74f4674-5868-4e94-a7d5-832b6ef0fcdblmb74f4674-5868-4e94-a7d5-832b6ef0fcdbuthorizb74f4674-5868-4e94-a7d5-832b6ef0fcdbtion");
    org.jsecurity.session.mgt.eis.MemorySessionDAO var15 = new org.jsecurity.session.mgt.eis.MemorySessionDAO();
    org.jsecurity.cache.Cache var16 = var15.getActiveSessionsCache();
    org.jsecurity.cache.CacheManager var17 = var15.getCacheManager();
    org.jsecurity.cache.HashtableCacheManager var18 = new org.jsecurity.cache.HashtableCacheManager();
    org.jsecurity.cache.Cache var20 = var18.getCache("\u0000\u0000");
    var15.setActiveSessionsCache(var20);
    java.io.InputStream var23 = org.jsecurity.util.ClassUtils.getResourceAsStream("");
    java.lang.Object[] var24 = new java.lang.Object[] { var23};
    java.util.List var25 = org.jsecurity.util.CollectionUtils.asList(var24);
    org.jsecurity.authc.pam.ModularRealmAuthenticator var26 = new org.jsecurity.authc.pam.ModularRealmAuthenticator(var25);
    org.jsecurity.authc.pam.AllSuccessfulModularAuthenticationStrategy var27 = new org.jsecurity.authc.pam.AllSuccessfulModularAuthenticationStrategy();
    var26.setModularAuthenticationStrategy((org.jsecurity.authc.pam.ModularAuthenticationStrategy)var27);
    org.jsecurity.authz.SimpleAuthorizationInfo var29 = new org.jsecurity.authz.SimpleAuthorizationInfo();
    var29.addStringPermission("hi!");
    java.io.InputStream var33 = org.jsecurity.util.ClassUtils.getResourceAsStream("");
    java.lang.Object[] var34 = new java.lang.Object[] { var33};
    java.util.List var35 = org.jsecurity.util.CollectionUtils.asList(var34);
    var29.addRoles((java.util.Collection)var35);
    var26.setAuthenticationListeners((java.util.Collection)var35);
    org.jsecurity.realm.activedirectory.ActiveDirectoryRealm var38 = new org.jsecurity.realm.activedirectory.ActiveDirectoryRealm();
    var38.setPrincipalSuffix("");
    var26.setRealm((org.jsecurity.realm.Realm)var38);
    org.jsecurity.cache.HashtableCacheManager var42 = new org.jsecurity.cache.HashtableCacheManager();
    org.jsecurity.cache.Cache var44 = var42.getCache("\u0000\u0000");
    var38.setAuthorizationCache(var44);
    var15.setActiveSessionsCache(var44);
    org.jsecurity.session.mgt.SimpleSession var47 = new org.jsecurity.session.mgt.SimpleSession();
    java.io.Serializable var48 = var15.create((org.jsecurity.session.Session)var47);
    org.jsecurity.session.mgt.SimpleSession var49 = new org.jsecurity.session.mgt.SimpleSession();
    var49.touch();
    var49.validate();
    org.jsecurity.session.mgt.SimpleSession var52 = new org.jsecurity.session.mgt.SimpleSession();
    var52.setTimeout((-1L));
    org.jsecurity.session.mgt.SimpleSession var55 = new org.jsecurity.session.mgt.SimpleSession();
    java.util.Date var56 = var55.getLastAccessTime();
    var52.setLastAccessTime(var56);
    org.jsecurity.session.mgt.SimpleSession var58 = new org.jsecurity.session.mgt.SimpleSession();
    java.util.Date var59 = var58.getLastAccessTime();
    var52.setStopTimestamp(var59);
    var49.setLastAccessTime(var59);
    var47.setLastAccessTime(var59);
    org.jsecurity.session.mgt.ImmutableProxiedSession var63 = new org.jsecurity.session.mgt.ImmutableProxiedSession((org.jsecurity.session.Session)var47);
    java.util.Date var64 = var63.getLastAccessTime();
    long var65 = var63.getTimeout();
    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      java.io.Serializable var66 = var0.create((org.jsecurity.session.Session)var63);
      fail("Expected exception of type java.lang.ClassCastException");
    } catch (java.lang.ClassCastException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var1);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var6);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var16);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var17);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var20);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var23);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var24);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var25);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var33);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var34);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var35);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var44);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var48 + "' != '" + "a7416802-a96d-4ab3-8027-b53008ab2e82"+ "'", var48.equals("a7416802-a96d-4ab3-8027-b53008ab2e82"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var56);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var59);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var64);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var65 == 1800000L);

  }

  public void test242() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest6.test242");


    char[] var2 = new char[] { };
    org.jsecurity.authc.UsernamePasswordToken var4 = new org.jsecurity.authc.UsernamePasswordToken("hi!", var2, true);
    org.jsecurity.authc.UsernamePasswordToken var5 = new org.jsecurity.authc.UsernamePasswordToken("\u0000\u0000", var2);
    org.jsecurity.session.mgt.SimpleSession var6 = new org.jsecurity.session.mgt.SimpleSession();
    var6.setTimeout((-1L));
    org.jsecurity.session.mgt.SimpleSession var9 = new org.jsecurity.session.mgt.SimpleSession();
    java.util.Date var10 = var9.getLastAccessTime();
    var6.setLastAccessTime(var10);
    java.net.InetAddress var12 = var6.getHostAddress();
    var5.setInetAddress(var12);
    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      org.jsecurity.crypto.hash.Sha512Hash var16 = new org.jsecurity.crypto.hash.Sha512Hash((java.lang.Object)var5, (java.lang.Object)"70bf5f29-b0cb-4666-b31a-f1e98e2371a0", (-1));
      fail("Expected exception of type org.jsecurity.codec.CodecException");
    } catch (org.jsecurity.codec.CodecException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var2);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var10);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var12);

  }

  public void test243() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest6.test243");


    org.jsecurity.session.ExpiredSessionException var2 = new org.jsecurity.session.ExpiredSessionException((java.io.Serializable)0.0f);
    org.jsecurity.session.UnknownSessionException var3 = new org.jsecurity.session.UnknownSessionException("NfxhYN7ItBfRAmDBmprtU73ghfEEPpcDJrHPkZ06wiY=", (java.io.Serializable)var2);
    java.io.Serializable var4 = var3.getSessionId();
    org.jsecurity.util.InstantiationException var5 = new org.jsecurity.util.InstantiationException((java.lang.Throwable)var3);
    org.jsecurity.io.SerializationException var6 = new org.jsecurity.io.SerializationException((java.lang.Throwable)var5);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var4);

  }

  public void test244() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest6.test244");


    org.jsecurity.session.mgt.DefaultSessionManager var0 = new org.jsecurity.session.mgt.DefaultSessionManager();
    org.jsecurity.session.mgt.quartz.QuartzSessionValidationScheduler var1 = new org.jsecurity.session.mgt.quartz.QuartzSessionValidationScheduler();
    boolean var2 = var1.isEnabled();
    var1.enableSessionValidation();
    var0.setSessionValidationScheduler((org.jsecurity.session.mgt.SessionValidationScheduler)var1);
    var1.disableSessionValidation();
    org.jsecurity.session.mgt.DefaultSessionManager var6 = new org.jsecurity.session.mgt.DefaultSessionManager();
    org.jsecurity.session.mgt.eis.MemorySessionDAO var7 = new org.jsecurity.session.mgt.eis.MemorySessionDAO();
    org.jsecurity.cache.Cache var8 = var7.getActiveSessionsCache();
    org.jsecurity.cache.CacheManager var9 = var7.getCacheManager();
    org.jsecurity.cache.HashtableCacheManager var10 = new org.jsecurity.cache.HashtableCacheManager();
    org.jsecurity.cache.Cache var12 = var10.getCache("\u0000\u0000");
    var7.setActiveSessionsCache(var12);
    java.io.InputStream var15 = org.jsecurity.util.ClassUtils.getResourceAsStream("");
    java.lang.Object[] var16 = new java.lang.Object[] { var15};
    java.util.List var17 = org.jsecurity.util.CollectionUtils.asList(var16);
    org.jsecurity.authc.pam.ModularRealmAuthenticator var18 = new org.jsecurity.authc.pam.ModularRealmAuthenticator(var17);
    org.jsecurity.authc.pam.AllSuccessfulModularAuthenticationStrategy var19 = new org.jsecurity.authc.pam.AllSuccessfulModularAuthenticationStrategy();
    var18.setModularAuthenticationStrategy((org.jsecurity.authc.pam.ModularAuthenticationStrategy)var19);
    org.jsecurity.authz.SimpleAuthorizationInfo var21 = new org.jsecurity.authz.SimpleAuthorizationInfo();
    var21.addStringPermission("hi!");
    java.io.InputStream var25 = org.jsecurity.util.ClassUtils.getResourceAsStream("");
    java.lang.Object[] var26 = new java.lang.Object[] { var25};
    java.util.List var27 = org.jsecurity.util.CollectionUtils.asList(var26);
    var21.addRoles((java.util.Collection)var27);
    var18.setAuthenticationListeners((java.util.Collection)var27);
    org.jsecurity.realm.activedirectory.ActiveDirectoryRealm var30 = new org.jsecurity.realm.activedirectory.ActiveDirectoryRealm();
    var30.setPrincipalSuffix("");
    var18.setRealm((org.jsecurity.realm.Realm)var30);
    org.jsecurity.cache.HashtableCacheManager var34 = new org.jsecurity.cache.HashtableCacheManager();
    org.jsecurity.cache.Cache var36 = var34.getCache("\u0000\u0000");
    var30.setAuthorizationCache(var36);
    var7.setActiveSessionsCache(var36);
    org.jsecurity.session.mgt.SimpleSession var39 = new org.jsecurity.session.mgt.SimpleSession();
    java.io.Serializable var40 = var7.create((org.jsecurity.session.Session)var39);
    var6.setSessionDAO((org.jsecurity.session.mgt.eis.SessionDAO)var7);
    org.jsecurity.authc.pam.AllSuccessfulModularAuthenticationStrategy var42 = new org.jsecurity.authc.pam.AllSuccessfulModularAuthenticationStrategy();
    char[] var44 = new char[] { };
    org.jsecurity.authc.UsernamePasswordToken var46 = new org.jsecurity.authc.UsernamePasswordToken("hi!", var44, true);
    org.jsecurity.authc.SimpleAccount var47 = new org.jsecurity.authc.SimpleAccount();
    var47.setCredentialsExpired(false);
    boolean var50 = var47.isLocked();
    org.jsecurity.authc.AuthenticationInfo var51 = var42.afterAllAttempts((org.jsecurity.authc.AuthenticationToken)var46, (org.jsecurity.authc.AuthenticationInfo)var47);
    char[] var55 = new char[] { '4', '#'};
    org.jsecurity.authc.UsernamePasswordToken var56 = new org.jsecurity.authc.UsernamePasswordToken("\u0000\u0000", var55);
    org.jsecurity.authc.SimpleAccount var57 = new org.jsecurity.authc.SimpleAccount();
    var57.setCredentialsExpired(false);
    var57.setCredentialsExpired(false);
    boolean var62 = var57.isCredentialsExpired();
    org.jsecurity.authc.AuthenticationInfo var63 = var42.afterAllAttempts((org.jsecurity.authc.AuthenticationToken)var56, (org.jsecurity.authc.AuthenticationInfo)var57);
    org.jsecurity.realm.activedirectory.ActiveDirectoryRealm var64 = new org.jsecurity.realm.activedirectory.ActiveDirectoryRealm();
    org.jsecurity.authc.credential.Sha256CredentialsMatcher var65 = new org.jsecurity.authc.credential.Sha256CredentialsMatcher();
    var64.setCredentialsMatcher((org.jsecurity.authc.credential.CredentialsMatcher)var65);
    java.lang.String var67 = var64.getAuthorizationCacheName();
    org.jsecurity.authc.UsernamePasswordToken var68 = new org.jsecurity.authc.UsernamePasswordToken();
    java.lang.String var69 = var68.getUsername();
    java.lang.Object var70 = var68.getPrincipal();
    boolean var71 = var64.supports((org.jsecurity.authc.AuthenticationToken)var68);
    org.jsecurity.session.UnknownSessionException var75 = new org.jsecurity.session.UnknownSessionException("dd\uFFFD", (java.io.Serializable)100.0f);
    org.jsecurity.session.SessionException var77 = new org.jsecurity.session.SessionException("dd\uFFFD", (java.lang.Throwable)var75, (java.io.Serializable)0);
    org.jsecurity.authc.SimpleAuthenticationInfo var80 = new org.jsecurity.authc.SimpleAuthenticationInfo((java.lang.Object)0, (java.lang.Object)10, "hi!");
    java.lang.Object var81 = var80.getCredentials();
    java.lang.String var82 = var80.toString();
    org.jsecurity.authc.AuthenticationInfo var83 = var42.afterAllAttempts((org.jsecurity.authc.AuthenticationToken)var68, (org.jsecurity.authc.AuthenticationInfo)var80);
    org.jsecurity.session.mgt.eis.MemorySessionDAO var84 = new org.jsecurity.session.mgt.eis.MemorySessionDAO();
    org.jsecurity.cache.Cache var85 = var84.getActiveSessionsCache();
    var84.setActiveSessionsCacheName("dd\uFFFD");
    var80.setCredentials((java.lang.Object)var84);
    var6.setSessionDAO((org.jsecurity.session.mgt.eis.SessionDAO)var84);
    var1.setSessionManager((org.jsecurity.session.mgt.ValidatingSessionManager)var6);
    var6.validateSessions();
    org.jsecurity.session.mgt.ExecutorServiceSessionValidationScheduler var92 = new org.jsecurity.session.mgt.ExecutorServiceSessionValidationScheduler((org.jsecurity.session.mgt.ValidatingSessionManager)var6);
    var92.setInterval(3600000L);
    long var95 = var92.getInterval();
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var2 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var8);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var9);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var12);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var15);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var16);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var17);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var25);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var26);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var27);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var36);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var40 + "' != '" + "657517d3-e5d1-4eea-960d-e9a17b8ecb21"+ "'", var40.equals("657517d3-e5d1-4eea-960d-e9a17b8ecb21"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var44);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var50 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var51);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var55);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var62 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var63);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var67);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var69);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var70);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var71 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var81 + "' != '" + 10+ "'", var81.equals(10));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var83);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var85);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var95 == 3600000L);

  }

  public void test245() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest6.test245");


    org.jsecurity.session.InvalidSessionException var1 = new org.jsecurity.session.InvalidSessionException("178b930b-ed37-4623-9159-8cfc730a9944");

  }

  public void test246() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest6.test246");


    org.jsecurity.util.AntPathMatcher var0 = new org.jsecurity.util.AntPathMatcher();
    boolean var3 = var0.matchStart("org.jsecurity.authc.IncorrectCredentialsException: \u0000\u0000", "ZGT/");
    boolean var6 = var0.match("783ccd31-48a8-42dd-890f-df885a7baaff", "\uFFFD\uFFFD\u0000");
    boolean var9 = var0.matches("HashtableCache [orgjsecurityauthcCredentialsException783ccd3148a842dd890fdf885a7baafAA==]", "\u0000\u0000\u0000");
    boolean var12 = var0.matchStart("78149b74-b1fa-47f0-8334-6ae03c9c8095", "8c362315-aef3-4d6d-b5b1-0d3fe425c611");
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var3 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var6 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var9 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var12 == false);

  }

  public void test247() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest6.test247");


    org.jsecurity.realm.jndi.JndiRealmFactory var0 = new org.jsecurity.realm.jndi.JndiRealmFactory();
    java.io.InputStream var2 = org.jsecurity.util.ClassUtils.getResourceAsStream("");
    java.lang.Object[] var3 = new java.lang.Object[] { var2};
    java.util.List var4 = org.jsecurity.util.CollectionUtils.asList(var3);
    var0.setJndiNames((java.util.Collection)var4);
    boolean var6 = var0.isResourceRef();
    java.util.Properties var7 = var0.getJndiEnvironment();
    java.util.Properties var8 = var0.getJndiEnvironment();
    boolean var9 = var0.isResourceRef();
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var2);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var3);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var4);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var6 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var7);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var8);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var9 == false);

  }

  public void test248() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest6.test248");


    org.jsecurity.crypto.BlowfishCipher var0 = new org.jsecurity.crypto.BlowfishCipher();
    byte[] var4 = new byte[] { (byte)100, (byte)100, (byte)(-1)};
    java.lang.String var5 = org.jsecurity.codec.CodecSupport.toString(var4);
    byte[] var7 = org.jsecurity.codec.Base64.decode("hi!");
    byte[] var8 = var0.encrypt(var4, var7);
    org.jsecurity.crypto.BlowfishCipher var9 = new org.jsecurity.crypto.BlowfishCipher();
    byte[] var13 = new byte[] { (byte)100, (byte)100, (byte)(-1)};
    java.lang.String var14 = org.jsecurity.codec.CodecSupport.toString(var13);
    byte[] var16 = org.jsecurity.codec.Base64.decode("hi!");
    byte[] var17 = var9.encrypt(var13, var16);
    org.jsecurity.crypto.BlowfishCipher var18 = new org.jsecurity.crypto.BlowfishCipher();
    java.security.Key var19 = var18.getKey();
    java.security.Key var20 = var18.getKey();
    var9.setKey(var20);
    var0.setKey(var20);
    org.jsecurity.crypto.BlowfishCipher var23 = new org.jsecurity.crypto.BlowfishCipher();
    byte[] var27 = new byte[] { (byte)100, (byte)100, (byte)(-1)};
    java.lang.String var28 = org.jsecurity.codec.CodecSupport.toString(var27);
    byte[] var30 = org.jsecurity.codec.Base64.decode("hi!");
    byte[] var31 = var23.encrypt(var27, var30);
    java.lang.String var32 = org.jsecurity.codec.Base64.decodeToString(var27);
    byte[] var33 = org.jsecurity.codec.Base64.encode(var27);
    byte[] var34 = org.jsecurity.codec.Base64.encodeChunked(var27);
    char[] var35 = org.jsecurity.codec.CodecSupport.toChars(var34);
    byte[] var36 = org.jsecurity.codec.Base64.encodeChunked(var34);
    byte[] var40 = new byte[] { (byte)100, (byte)100, (byte)(-1)};
    java.lang.String var41 = org.jsecurity.codec.CodecSupport.toString(var40);
    char[] var42 = org.jsecurity.codec.CodecSupport.toChars(var40);
    boolean var43 = org.jsecurity.codec.Base64.isBase64(var40);
    char[] var44 = org.jsecurity.codec.CodecSupport.toChars(var40);
    byte[] var45 = var0.encrypt(var36, var40);
    byte[] var50 = new byte[] { (byte)100, (byte)100, (byte)(-1)};
    java.lang.String var51 = org.jsecurity.codec.CodecSupport.toString(var50);
    byte[] var52 = org.jsecurity.codec.Base64.encode(var50);
    char[] var53 = org.jsecurity.codec.CodecSupport.toChars(var52);
    org.jsecurity.authc.UsernamePasswordToken var55 = new org.jsecurity.authc.UsernamePasswordToken("org.jsecurity.realm.SimpleAccountRealm-55-authorization", var53, false);
    byte[] var56 = org.jsecurity.codec.CodecSupport.toBytes(var53);
    org.jsecurity.crypto.hash.Sha512Hash var58 = org.jsecurity.crypto.hash.Sha512Hash.fromBase64String("org.jsecurity.config.ConfigurationException: dd\uFFFD");
    byte[] var59 = var58.getBytes();
    java.lang.String var60 = org.jsecurity.codec.Base64.decodeToString(var59);
    byte[] var61 = org.jsecurity.codec.Base64.encodeChunked(var59);
    java.lang.String var62 = org.jsecurity.codec.Hex.encodeToString(var59);
    byte[] var64 = org.jsecurity.codec.Base64.encode(var59, true);
    java.lang.String var65 = org.jsecurity.codec.Base64.decodeToString(var64);
    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      byte[] var66 = var0.encrypt(var56, var64);
      fail("Expected exception of type java.lang.IllegalStateException");
    } catch (java.lang.IllegalStateException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var4);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var5 + "' != '" + "dd\uFFFD"+ "'", var5.equals("dd\uFFFD"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var7);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var8);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var13);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var14 + "' != '" + "dd\uFFFD"+ "'", var14.equals("dd\uFFFD"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var16);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var17);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var19);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var20);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var27);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var28 + "' != '" + "dd\uFFFD"+ "'", var28.equals("dd\uFFFD"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var30);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var31);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var32 + "' != '" + "\u0000\u0000"+ "'", var32.equals("\u0000\u0000"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var33);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var34);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var35);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var36);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var40);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var41 + "' != '" + "dd\uFFFD"+ "'", var41.equals("dd\uFFFD"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var42);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var43 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var44);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var45);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var50);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var51 + "' != '" + "dd\uFFFD"+ "'", var51.equals("dd\uFFFD"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var52);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var53);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var56);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var58);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var59);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var60 + "' != '" + "\u0000\u0000\u0000"+ "'", var60.equals("\u0000\u0000\u0000"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var61);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var62 + "' != '" + "a2b823b1e72eae2b727289df8a00a89df8a0bab6ad8a89c4c5c7a9b62a270000"+ "'", var62.equals("a2b823b1e72eae2b727289df8a00a89df8a0bab6ad8a89c4c5c7a9b62a270000"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var64);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var65 + "' != '" + "\uFFFD\uFFFD#\uFFFD\uFFFD.\uFFFD+rr\uFFFD\u07CA\u0000\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\u01E9\uFFFD*'\u0000\u0000"+ "'", var65.equals("\uFFFD\uFFFD#\uFFFD\uFFFD.\uFFFD+rr\uFFFD\u07CA\u0000\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\u01E9\uFFFD*'\u0000\u0000"));

  }

  public void test249() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest6.test249");


    org.jsecurity.realm.SimpleAccountRealm var1 = new org.jsecurity.realm.SimpleAccountRealm("\n\uFFFD\uFFFD");

  }

  public void test250() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest6.test250");


    org.jsecurity.mgt.DefaultSecurityManager var0 = new org.jsecurity.mgt.DefaultSecurityManager();
    java.io.InputStream var2 = org.jsecurity.util.ClassUtils.getResourceAsStream("");
    java.lang.Object[] var3 = new java.lang.Object[] { var2};
    java.util.List var4 = org.jsecurity.util.CollectionUtils.asList(var3);
    org.jsecurity.authc.pam.ModularRealmAuthenticator var5 = new org.jsecurity.authc.pam.ModularRealmAuthenticator(var4);
    org.jsecurity.authc.pam.AllSuccessfulModularAuthenticationStrategy var6 = new org.jsecurity.authc.pam.AllSuccessfulModularAuthenticationStrategy();
    var5.setModularAuthenticationStrategy((org.jsecurity.authc.pam.ModularAuthenticationStrategy)var6);
    org.jsecurity.authz.SimpleAuthorizationInfo var8 = new org.jsecurity.authz.SimpleAuthorizationInfo();
    var8.addStringPermission("hi!");
    java.io.InputStream var12 = org.jsecurity.util.ClassUtils.getResourceAsStream("");
    java.lang.Object[] var13 = new java.lang.Object[] { var12};
    java.util.List var14 = org.jsecurity.util.CollectionUtils.asList(var13);
    var8.addRoles((java.util.Collection)var14);
    var5.setAuthenticationListeners((java.util.Collection)var14);
    var0.setSessionListeners((java.util.Collection)var14);
    org.jsecurity.authc.Authenticator var18 = var0.getAuthenticator();
    org.jsecurity.codec.CodecException var21 = new org.jsecurity.codec.CodecException("dd\uFFFD");
    org.jsecurity.authc.ConcurrentAccessException var22 = new org.jsecurity.authc.ConcurrentAccessException("org.jsecurity.authz.UnauthorizedException: org.jsecurity.session.ExpiredSessionException: ", (java.lang.Throwable)var21);
    org.jsecurity.subject.SimplePrincipalCollection var24 = new org.jsecurity.subject.SimplePrincipalCollection((java.lang.Object)var21, "");
    java.io.InputStream var26 = org.jsecurity.util.ClassUtils.getResourceAsStream("");
    java.lang.Object[] var27 = new java.lang.Object[] { var26};
    java.util.List var28 = org.jsecurity.util.CollectionUtils.asList(var27);
    org.jsecurity.authc.pam.ModularRealmAuthenticator var29 = new org.jsecurity.authc.pam.ModularRealmAuthenticator(var28);
    var24.addAll((java.util.Collection)var28, "\u0000\u0000");
    java.io.InputStream var33 = org.jsecurity.util.ClassUtils.getResourceAsStream("");
    java.lang.Object[] var34 = new java.lang.Object[] { var33};
    java.util.List var35 = org.jsecurity.util.CollectionUtils.asList(var34);
    org.jsecurity.authc.pam.ModularRealmAuthenticator var36 = new org.jsecurity.authc.pam.ModularRealmAuthenticator(var35);
    var24.addAll((java.util.Collection)var35, "\u0000\u0000");
    org.jsecurity.io.IniResource var39 = new org.jsecurity.io.IniResource();
    var39.setCharsetName("org.jsecurity.authz.UnauthorizedException: org.jsecurity.session.ExpiredSessionException: ");
    java.util.Map var42 = var39.getSections();
    java.util.Map var43 = var39.getSections();
    var24.add((java.lang.Object)var43, "345d9036-762c-4f58-8690-c901bf299cde");
    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      boolean var47 = var0.isPermitted((org.jsecurity.subject.PrincipalCollection)var24, "b8e654ef-0c0e-42ef-bab3-3620dabe0d0c");
      fail("Expected exception of type java.util.NoSuchElementException");
    } catch (java.util.NoSuchElementException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var2);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var3);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var4);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var12);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var13);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var14);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var18);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var26);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var27);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var28);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var33);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var34);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var35);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var42);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var43);

  }

  public void test251() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest6.test251");


    org.jsecurity.realm.activedirectory.ActiveDirectoryRealm var0 = new org.jsecurity.realm.activedirectory.ActiveDirectoryRealm();
    var0.init();
    var0.setSystemPassword("dd\uFFFD");
    org.jsecurity.authz.aop.GuestAnnotationHandler var4 = new org.jsecurity.authz.aop.GuestAnnotationHandler();
    java.lang.Class var5 = var4.getAnnotationClass();
    var0.setAuthenticationTokenClass(var5);
    org.jsecurity.mgt.DefaultSecurityManager var7 = new org.jsecurity.mgt.DefaultSecurityManager((org.jsecurity.realm.Realm)var0);
    org.jsecurity.cache.CacheManager var8 = var0.getCacheManager();
    org.jsecurity.realm.text.PropertiesRealm var9 = new org.jsecurity.realm.text.PropertiesRealm(var8);
    var9.setResourcePath("?\u0238\u0018@\uFFFD");
    java.lang.String var12 = var9.getAuthorizationCacheName();
    var9.destroy();
    var9.setUseXmlFormat(true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var5);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var8);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var12 + "' != '" + "org.jsecurity.realm.text.PropertiesRealm-793-authorization"+ "'", var12.equals("org.jsecurity.realm.text.PropertiesRealm-793-authorization"));

  }

  public void test252() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest6.test252");


    org.jsecurity.realm.text.TextConfigurationRealm var0 = new org.jsecurity.realm.text.TextConfigurationRealm();
    org.jsecurity.realm.text.TextConfigurationRealm var1 = new org.jsecurity.realm.text.TextConfigurationRealm();
    java.io.InputStream var3 = org.jsecurity.util.ClassUtils.getResourceAsStream("");
    java.lang.Object[] var4 = new java.lang.Object[] { var3};
    java.util.List var5 = org.jsecurity.util.CollectionUtils.asList(var4);
    org.jsecurity.authc.pam.ModularRealmAuthenticator var6 = new org.jsecurity.authc.pam.ModularRealmAuthenticator(var5);
    org.jsecurity.subject.SimplePrincipalCollection var8 = new org.jsecurity.subject.SimplePrincipalCollection((java.util.Collection)var5, "org.jsecurity.authz.UnauthorizedException: org.jsecurity.session.ExpiredSessionException: ");
    org.jsecurity.session.UnknownSessionException var13 = new org.jsecurity.session.UnknownSessionException("dd\uFFFD", (java.io.Serializable)100.0f);
    org.jsecurity.session.SessionException var15 = new org.jsecurity.session.SessionException("dd\uFFFD", (java.lang.Throwable)var13, (java.io.Serializable)0);
    org.jsecurity.session.SessionException var16 = new org.jsecurity.session.SessionException("dd\uFFFD", (java.lang.Throwable)var13);
    var8.add((java.lang.Object)var16, "org.jsecurity.config.ConfigurationException: dd\uFFFD");
    var1.onLogout((org.jsecurity.subject.PrincipalCollection)var8);
    java.util.Collection var21 = var8.fromRealm("\u0000\u0000\u0000");
    var0.onLogout((org.jsecurity.subject.PrincipalCollection)var8);
    var0.setUserDefinitions("");
    java.lang.String var25 = var0.getName();
    org.jsecurity.authc.pam.ModularRealmAuthenticator var26 = new org.jsecurity.authc.pam.ModularRealmAuthenticator((org.jsecurity.realm.Realm)var0);
    org.jsecurity.realm.text.TextConfigurationRealm var27 = new org.jsecurity.realm.text.TextConfigurationRealm();
    org.jsecurity.realm.text.TextConfigurationRealm var28 = new org.jsecurity.realm.text.TextConfigurationRealm();
    org.jsecurity.realm.text.TextConfigurationRealm var29 = new org.jsecurity.realm.text.TextConfigurationRealm();
    java.io.InputStream var31 = org.jsecurity.util.ClassUtils.getResourceAsStream("");
    java.lang.Object[] var32 = new java.lang.Object[] { var31};
    java.util.List var33 = org.jsecurity.util.CollectionUtils.asList(var32);
    org.jsecurity.authc.pam.ModularRealmAuthenticator var34 = new org.jsecurity.authc.pam.ModularRealmAuthenticator(var33);
    org.jsecurity.subject.SimplePrincipalCollection var36 = new org.jsecurity.subject.SimplePrincipalCollection((java.util.Collection)var33, "org.jsecurity.authz.UnauthorizedException: org.jsecurity.session.ExpiredSessionException: ");
    org.jsecurity.session.UnknownSessionException var41 = new org.jsecurity.session.UnknownSessionException("dd\uFFFD", (java.io.Serializable)100.0f);
    org.jsecurity.session.SessionException var43 = new org.jsecurity.session.SessionException("dd\uFFFD", (java.lang.Throwable)var41, (java.io.Serializable)0);
    org.jsecurity.session.SessionException var44 = new org.jsecurity.session.SessionException("dd\uFFFD", (java.lang.Throwable)var41);
    var36.add((java.lang.Object)var44, "org.jsecurity.config.ConfigurationException: dd\uFFFD");
    var29.onLogout((org.jsecurity.subject.PrincipalCollection)var36);
    java.util.Collection var49 = var36.fromRealm("\u0000\u0000\u0000");
    var28.onLogout((org.jsecurity.subject.PrincipalCollection)var36);
    java.util.Set var51 = var36.asSet();
    var27.onLogout((org.jsecurity.subject.PrincipalCollection)var36);
    var26.onLogout((org.jsecurity.subject.PrincipalCollection)var36);
    org.jsecurity.authc.pam.ModularAuthenticationStrategy var54 = var26.getModularAuthenticationStrategy();
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var3);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var4);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var5);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var21);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var25 + "' != '" + "org.jsecurity.realm.text.TextConfigurationRealm_4041"+ "'", var25.equals("org.jsecurity.realm.text.TextConfigurationRealm_4041"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var31);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var32);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var33);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var49);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var51);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var54);

  }

  public void test253() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest6.test253");


    org.jsecurity.mgt.DefaultSecurityManager var0 = new org.jsecurity.mgt.DefaultSecurityManager();
    java.io.InputStream var2 = org.jsecurity.util.ClassUtils.getResourceAsStream("");
    java.lang.Object[] var3 = new java.lang.Object[] { var2};
    java.util.List var4 = org.jsecurity.util.CollectionUtils.asList(var3);
    org.jsecurity.authc.pam.ModularRealmAuthenticator var5 = new org.jsecurity.authc.pam.ModularRealmAuthenticator(var4);
    org.jsecurity.authc.pam.AllSuccessfulModularAuthenticationStrategy var6 = new org.jsecurity.authc.pam.AllSuccessfulModularAuthenticationStrategy();
    var5.setModularAuthenticationStrategy((org.jsecurity.authc.pam.ModularAuthenticationStrategy)var6);
    org.jsecurity.authz.SimpleAuthorizationInfo var8 = new org.jsecurity.authz.SimpleAuthorizationInfo();
    var8.addStringPermission("hi!");
    java.io.InputStream var12 = org.jsecurity.util.ClassUtils.getResourceAsStream("");
    java.lang.Object[] var13 = new java.lang.Object[] { var12};
    java.util.List var14 = org.jsecurity.util.CollectionUtils.asList(var13);
    var8.addRoles((java.util.Collection)var14);
    var5.setAuthenticationListeners((java.util.Collection)var14);
    var0.setSessionListeners((java.util.Collection)var14);
    org.jsecurity.realm.text.TextConfigurationRealm var18 = new org.jsecurity.realm.text.TextConfigurationRealm();
    java.io.InputStream var20 = org.jsecurity.util.ClassUtils.getResourceAsStream("");
    java.lang.Object[] var21 = new java.lang.Object[] { var20};
    java.util.List var22 = org.jsecurity.util.CollectionUtils.asList(var21);
    org.jsecurity.authc.pam.ModularRealmAuthenticator var23 = new org.jsecurity.authc.pam.ModularRealmAuthenticator(var22);
    org.jsecurity.subject.SimplePrincipalCollection var25 = new org.jsecurity.subject.SimplePrincipalCollection((java.util.Collection)var22, "org.jsecurity.authz.UnauthorizedException: org.jsecurity.session.ExpiredSessionException: ");
    org.jsecurity.session.UnknownSessionException var30 = new org.jsecurity.session.UnknownSessionException("dd\uFFFD", (java.io.Serializable)100.0f);
    org.jsecurity.session.SessionException var32 = new org.jsecurity.session.SessionException("dd\uFFFD", (java.lang.Throwable)var30, (java.io.Serializable)0);
    org.jsecurity.session.SessionException var33 = new org.jsecurity.session.SessionException("dd\uFFFD", (java.lang.Throwable)var30);
    var25.add((java.lang.Object)var33, "org.jsecurity.config.ConfigurationException: dd\uFFFD");
    var18.onLogout((org.jsecurity.subject.PrincipalCollection)var25);
    org.jsecurity.authc.pam.FirstSuccessfulAuthenticationStrategy var37 = new org.jsecurity.authc.pam.FirstSuccessfulAuthenticationStrategy();
    org.jsecurity.authz.UnauthorizedException var39 = new org.jsecurity.authz.UnauthorizedException("org.jsecurity.config.ConfigurationException: dd\uFFFD");
    java.lang.Throwable[] var40 = var39.getSuppressed();
    java.util.List var41 = org.jsecurity.util.CollectionUtils.asList((java.lang.Object[])var40);
    org.jsecurity.authc.UsernamePasswordToken var42 = new org.jsecurity.authc.UsernamePasswordToken();
    java.lang.String var43 = var42.getUsername();
    java.net.InetAddress var44 = var42.getInetAddress();
    org.jsecurity.authc.AuthenticationInfo var45 = var37.beforeAllAttempts((java.util.Collection)var41, (org.jsecurity.authc.AuthenticationToken)var42);
    boolean[] var46 = var0.hasRoles((org.jsecurity.subject.PrincipalCollection)var25, var41);
    org.jsecurity.codec.CodecException var49 = new org.jsecurity.codec.CodecException("dd\uFFFD");
    org.jsecurity.authc.ConcurrentAccessException var50 = new org.jsecurity.authc.ConcurrentAccessException("org.jsecurity.authz.UnauthorizedException: org.jsecurity.session.ExpiredSessionException: ", (java.lang.Throwable)var49);
    org.jsecurity.subject.SimplePrincipalCollection var52 = new org.jsecurity.subject.SimplePrincipalCollection((java.lang.Object)var49, "");
    java.io.InputStream var54 = org.jsecurity.util.ClassUtils.getResourceAsStream("");
    java.lang.Object[] var55 = new java.lang.Object[] { var54};
    java.util.List var56 = org.jsecurity.util.CollectionUtils.asList(var55);
    org.jsecurity.authc.pam.ModularRealmAuthenticator var57 = new org.jsecurity.authc.pam.ModularRealmAuthenticator(var56);
    var52.addAll((java.util.Collection)var56, "\u0000\u0000");
    var0.setSessionListeners((java.util.Collection)var56);
    org.jsecurity.subject.Subject var61 = var0.getSubject();
    byte[] var65 = new byte[] { (byte)100, (byte)100, (byte)(-1)};
    java.lang.String var66 = org.jsecurity.codec.CodecSupport.toString(var65);
    byte[] var68 = org.jsecurity.codec.Base64.encode(var65, false);
    java.lang.String var69 = org.jsecurity.codec.CodecSupport.toString(var68);
    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      var0.setRememberMeDecryptionCipherKey(var68);
      fail("Expected exception of type java.lang.IllegalStateException");
    } catch (java.lang.IllegalStateException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var2);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var3);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var4);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var12);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var13);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var14);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var20);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var21);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var22);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var40);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var41);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var43);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var44);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var45);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var46);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var54);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var55);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var56);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var61);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var65);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var66 + "' != '" + "dd\uFFFD"+ "'", var66.equals("dd\uFFFD"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var68);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var69 + "' != '" + "ZGT/"+ "'", var69.equals("ZGT/"));

  }

  public void test254() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest6.test254");


    org.jsecurity.session.mgt.eis.MemorySessionDAO var0 = new org.jsecurity.session.mgt.eis.MemorySessionDAO();
    org.jsecurity.cache.Cache var1 = var0.getActiveSessionsCache();
    org.jsecurity.cache.CacheManager var2 = var0.getCacheManager();
    org.jsecurity.cache.HashtableCacheManager var3 = new org.jsecurity.cache.HashtableCacheManager();
    org.jsecurity.cache.Cache var5 = var3.getCache("\u0000\u0000");
    var0.setActiveSessionsCache(var5);
    java.io.InputStream var8 = org.jsecurity.util.ClassUtils.getResourceAsStream("");
    java.lang.Object[] var9 = new java.lang.Object[] { var8};
    java.util.List var10 = org.jsecurity.util.CollectionUtils.asList(var9);
    org.jsecurity.authc.pam.ModularRealmAuthenticator var11 = new org.jsecurity.authc.pam.ModularRealmAuthenticator(var10);
    org.jsecurity.authc.pam.AllSuccessfulModularAuthenticationStrategy var12 = new org.jsecurity.authc.pam.AllSuccessfulModularAuthenticationStrategy();
    var11.setModularAuthenticationStrategy((org.jsecurity.authc.pam.ModularAuthenticationStrategy)var12);
    org.jsecurity.authz.SimpleAuthorizationInfo var14 = new org.jsecurity.authz.SimpleAuthorizationInfo();
    var14.addStringPermission("hi!");
    java.io.InputStream var18 = org.jsecurity.util.ClassUtils.getResourceAsStream("");
    java.lang.Object[] var19 = new java.lang.Object[] { var18};
    java.util.List var20 = org.jsecurity.util.CollectionUtils.asList(var19);
    var14.addRoles((java.util.Collection)var20);
    var11.setAuthenticationListeners((java.util.Collection)var20);
    org.jsecurity.realm.activedirectory.ActiveDirectoryRealm var23 = new org.jsecurity.realm.activedirectory.ActiveDirectoryRealm();
    var23.setPrincipalSuffix("");
    var11.setRealm((org.jsecurity.realm.Realm)var23);
    org.jsecurity.cache.HashtableCacheManager var27 = new org.jsecurity.cache.HashtableCacheManager();
    org.jsecurity.cache.Cache var29 = var27.getCache("\u0000\u0000");
    var23.setAuthorizationCache(var29);
    var0.setActiveSessionsCache(var29);
    org.jsecurity.session.mgt.SimpleSession var32 = new org.jsecurity.session.mgt.SimpleSession();
    java.io.Serializable var33 = var0.create((org.jsecurity.session.Session)var32);
    org.jsecurity.session.mgt.SimpleSession var34 = new org.jsecurity.session.mgt.SimpleSession();
    var34.touch();
    var34.validate();
    org.jsecurity.session.mgt.SimpleSession var37 = new org.jsecurity.session.mgt.SimpleSession();
    var37.setTimeout((-1L));
    org.jsecurity.session.mgt.SimpleSession var40 = new org.jsecurity.session.mgt.SimpleSession();
    java.util.Date var41 = var40.getLastAccessTime();
    var37.setLastAccessTime(var41);
    org.jsecurity.session.mgt.SimpleSession var43 = new org.jsecurity.session.mgt.SimpleSession();
    java.util.Date var44 = var43.getLastAccessTime();
    var37.setStopTimestamp(var44);
    var34.setLastAccessTime(var44);
    var32.setLastAccessTime(var44);
    org.jsecurity.session.mgt.ImmutableProxiedSession var48 = new org.jsecurity.session.mgt.ImmutableProxiedSession((org.jsecurity.session.Session)var32);
    java.util.Date var49 = var48.getStartTimestamp();
    java.io.Serializable var50 = var48.getId();
    java.util.Date var51 = var48.getStartTimestamp();
    java.util.Date var52 = var48.getLastAccessTime();
    org.jsecurity.authc.pam.UnsupportedTokenException var54 = new org.jsecurity.authc.pam.UnsupportedTokenException();
    org.jsecurity.authc.UnknownAccountException var55 = new org.jsecurity.authc.UnknownAccountException((java.lang.Throwable)var54);
    org.jsecurity.authc.AccountException var56 = new org.jsecurity.authc.AccountException((java.lang.Throwable)var55);
    org.jsecurity.util.InstantiationException var57 = new org.jsecurity.util.InstantiationException("5dd0c65d-1422-49c2-becb-9e8dca619ab3", (java.lang.Throwable)var55);
    java.lang.Object var58 = var48.getAttribute((java.lang.Object)"5dd0c65d-1422-49c2-becb-9e8dca619ab3");
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var1);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var2);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var5);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var8);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var9);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var10);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var18);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var19);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var20);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var29);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var33 + "' != '" + "cb0d569e-c444-470a-8c00-4e51082c6153"+ "'", var33.equals("cb0d569e-c444-470a-8c00-4e51082c6153"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var41);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var44);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var49);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var50 + "' != '" + "cb0d569e-c444-470a-8c00-4e51082c6153"+ "'", var50.equals("cb0d569e-c444-470a-8c00-4e51082c6153"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var51);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var52);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var58);

  }

  public void test255() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest6.test255");


    org.jsecurity.session.mgt.DefaultSessionManager var0 = new org.jsecurity.session.mgt.DefaultSessionManager();
    org.jsecurity.session.mgt.eis.MemorySessionDAO var1 = new org.jsecurity.session.mgt.eis.MemorySessionDAO();
    org.jsecurity.cache.Cache var2 = var1.getActiveSessionsCache();
    org.jsecurity.cache.CacheManager var3 = var1.getCacheManager();
    org.jsecurity.cache.HashtableCacheManager var4 = new org.jsecurity.cache.HashtableCacheManager();
    org.jsecurity.cache.Cache var6 = var4.getCache("\u0000\u0000");
    var1.setActiveSessionsCache(var6);
    java.io.InputStream var9 = org.jsecurity.util.ClassUtils.getResourceAsStream("");
    java.lang.Object[] var10 = new java.lang.Object[] { var9};
    java.util.List var11 = org.jsecurity.util.CollectionUtils.asList(var10);
    org.jsecurity.authc.pam.ModularRealmAuthenticator var12 = new org.jsecurity.authc.pam.ModularRealmAuthenticator(var11);
    org.jsecurity.authc.pam.AllSuccessfulModularAuthenticationStrategy var13 = new org.jsecurity.authc.pam.AllSuccessfulModularAuthenticationStrategy();
    var12.setModularAuthenticationStrategy((org.jsecurity.authc.pam.ModularAuthenticationStrategy)var13);
    org.jsecurity.authz.SimpleAuthorizationInfo var15 = new org.jsecurity.authz.SimpleAuthorizationInfo();
    var15.addStringPermission("hi!");
    java.io.InputStream var19 = org.jsecurity.util.ClassUtils.getResourceAsStream("");
    java.lang.Object[] var20 = new java.lang.Object[] { var19};
    java.util.List var21 = org.jsecurity.util.CollectionUtils.asList(var20);
    var15.addRoles((java.util.Collection)var21);
    var12.setAuthenticationListeners((java.util.Collection)var21);
    org.jsecurity.realm.activedirectory.ActiveDirectoryRealm var24 = new org.jsecurity.realm.activedirectory.ActiveDirectoryRealm();
    var24.setPrincipalSuffix("");
    var12.setRealm((org.jsecurity.realm.Realm)var24);
    org.jsecurity.cache.HashtableCacheManager var28 = new org.jsecurity.cache.HashtableCacheManager();
    org.jsecurity.cache.Cache var30 = var28.getCache("\u0000\u0000");
    var24.setAuthorizationCache(var30);
    var1.setActiveSessionsCache(var30);
    org.jsecurity.session.mgt.SimpleSession var33 = new org.jsecurity.session.mgt.SimpleSession();
    java.io.Serializable var34 = var1.create((org.jsecurity.session.Session)var33);
    var0.setSessionDAO((org.jsecurity.session.mgt.eis.SessionDAO)var1);
    org.jsecurity.cache.ehcache.EhCacheManager var36 = new org.jsecurity.cache.ehcache.EhCacheManager();
    net.sf.ehcache.CacheManager var37 = var36.getCacheManager();
    var36.destroy();
    java.lang.String var39 = var36.getCacheManagerConfigFile();
    java.lang.String var40 = var36.getCacheManagerConfigFile();
    var0.setCacheManager((org.jsecurity.cache.CacheManager)var36);
    java.lang.String var42 = var36.getCacheManagerConfigFile();
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var2);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var3);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var6);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var9);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var10);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var11);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var19);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var20);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var21);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var30);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var34 + "' != '" + "d2adc83b-48e8-49e7-9553-99a9babc3846"+ "'", var34.equals("d2adc83b-48e8-49e7-9553-99a9babc3846"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var37);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var39 + "' != '" + "classpath:org/jsecurity/cache/ehcache/ehcache.xml"+ "'", var39.equals("classpath:org/jsecurity/cache/ehcache/ehcache.xml"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var40 + "' != '" + "classpath:org/jsecurity/cache/ehcache/ehcache.xml"+ "'", var40.equals("classpath:org/jsecurity/cache/ehcache/ehcache.xml"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var42 + "' != '" + "classpath:org/jsecurity/cache/ehcache/ehcache.xml"+ "'", var42.equals("classpath:org/jsecurity/cache/ehcache/ehcache.xml"));

  }

  public void test256() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest6.test256");


    org.jsecurity.mgt.DefaultSecurityManager var0 = new org.jsecurity.mgt.DefaultSecurityManager();
    java.io.InputStream var2 = org.jsecurity.util.ClassUtils.getResourceAsStream("");
    java.lang.Object[] var3 = new java.lang.Object[] { var2};
    java.util.List var4 = org.jsecurity.util.CollectionUtils.asList(var3);
    org.jsecurity.authc.pam.ModularRealmAuthenticator var5 = new org.jsecurity.authc.pam.ModularRealmAuthenticator(var4);
    org.jsecurity.authc.pam.AllSuccessfulModularAuthenticationStrategy var6 = new org.jsecurity.authc.pam.AllSuccessfulModularAuthenticationStrategy();
    var5.setModularAuthenticationStrategy((org.jsecurity.authc.pam.ModularAuthenticationStrategy)var6);
    org.jsecurity.authz.SimpleAuthorizationInfo var8 = new org.jsecurity.authz.SimpleAuthorizationInfo();
    var8.addStringPermission("hi!");
    java.io.InputStream var12 = org.jsecurity.util.ClassUtils.getResourceAsStream("");
    java.lang.Object[] var13 = new java.lang.Object[] { var12};
    java.util.List var14 = org.jsecurity.util.CollectionUtils.asList(var13);
    var8.addRoles((java.util.Collection)var14);
    var5.setAuthenticationListeners((java.util.Collection)var14);
    var0.setSessionListeners((java.util.Collection)var14);
    org.jsecurity.authc.pam.ModularRealmAuthenticator var18 = new org.jsecurity.authc.pam.ModularRealmAuthenticator();
    org.jsecurity.authz.permission.InvalidPermissionStringException var21 = new org.jsecurity.authz.permission.InvalidPermissionStringException("", "dd\uFFFD");
    org.jsecurity.JSecurityException var23 = new org.jsecurity.JSecurityException("");
    org.jsecurity.authc.SimpleAuthenticationInfo var25 = new org.jsecurity.authc.SimpleAuthenticationInfo((java.lang.Object)var21, (java.lang.Object)"", "org.jsecurity.authz.UnauthorizedException: org.jsecurity.session.ExpiredSessionException: ");
    org.jsecurity.subject.PrincipalCollection var26 = var25.getPrincipals();
    var18.onLogout(var26);
    var0.setAuthenticator((org.jsecurity.authc.Authenticator)var18);
    org.jsecurity.realm.activedirectory.ActiveDirectoryRealm var29 = new org.jsecurity.realm.activedirectory.ActiveDirectoryRealm();
    var29.init();
    var29.setSystemPassword("dd\uFFFD");
    org.jsecurity.authz.aop.GuestAnnotationHandler var33 = new org.jsecurity.authz.aop.GuestAnnotationHandler();
    java.lang.Class var34 = var33.getAnnotationClass();
    var29.setAuthenticationTokenClass(var34);
    org.jsecurity.mgt.DefaultSecurityManager var36 = new org.jsecurity.mgt.DefaultSecurityManager((org.jsecurity.realm.Realm)var29);
    org.jsecurity.cache.CacheManager var37 = var29.getCacheManager();
    org.jsecurity.realm.text.PropertiesRealm var38 = new org.jsecurity.realm.text.PropertiesRealm(var37);
    var0.setRealm((org.jsecurity.realm.Realm)var38);
    org.jsecurity.authc.credential.Sha384CredentialsMatcher var40 = new org.jsecurity.authc.credential.Sha384CredentialsMatcher();
    var38.setCredentialsMatcher((org.jsecurity.authc.credential.CredentialsMatcher)var40);
    java.lang.String var42 = var38.getRoleDefinitions();
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var2);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var3);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var4);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var12);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var13);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var14);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var26);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var34);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var37);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var42 + "' != '" + "goodguy = winnebago:drive:eagle5\nroot = *\nschwartz = lightsaber:*\n"+ "'", var42.equals("goodguy = winnebago:drive:eagle5\nroot = *\nschwartz = lightsaber:*\n"));

  }

  public void test257() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest6.test257");


    byte[] var4 = new byte[] { (byte)100, (byte)100, (byte)(-1)};
    java.lang.String var5 = org.jsecurity.codec.CodecSupport.toString(var4);
    char[] var6 = org.jsecurity.codec.CodecSupport.toChars(var4);
    boolean var7 = org.jsecurity.codec.Base64.isBase64(var4);
    boolean var8 = org.jsecurity.codec.Base64.isBase64(var4);
    boolean var9 = org.jsecurity.codec.Base64.isBase64(var4);
    char[] var10 = org.jsecurity.codec.CodecSupport.toChars(var4);
    org.jsecurity.session.mgt.SimpleSession var11 = new org.jsecurity.session.mgt.SimpleSession();
    var11.setTimeout((-1L));
    org.jsecurity.session.mgt.SimpleSession var14 = new org.jsecurity.session.mgt.SimpleSession();
    java.util.Date var15 = var14.getLastAccessTime();
    var11.setLastAccessTime(var15);
    java.net.InetAddress var17 = var11.getHostAddress();
    org.jsecurity.authz.HostUnauthorizedException var18 = new org.jsecurity.authz.HostUnauthorizedException(var17);
    org.jsecurity.authc.UsernamePasswordToken var19 = new org.jsecurity.authc.UsernamePasswordToken("b725e8cc-690c-495e-ac27-b1b425834793", var10, var17);
    var19.setRememberMe(true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var4);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var5 + "' != '" + "dd\uFFFD"+ "'", var5.equals("dd\uFFFD"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var6);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var7 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var8 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var9 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var10);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var15);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var17);

  }

  public void test258() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest6.test258");


    org.jsecurity.session.mgt.DefaultSessionManager var0 = new org.jsecurity.session.mgt.DefaultSessionManager();
    org.jsecurity.session.mgt.quartz.QuartzSessionValidationScheduler var1 = new org.jsecurity.session.mgt.quartz.QuartzSessionValidationScheduler();
    boolean var2 = var1.isEnabled();
    var1.enableSessionValidation();
    var0.setSessionValidationScheduler((org.jsecurity.session.mgt.SessionValidationScheduler)var1);
    var1.disableSessionValidation();
    org.jsecurity.session.mgt.DefaultSessionManager var6 = new org.jsecurity.session.mgt.DefaultSessionManager();
    org.jsecurity.session.mgt.eis.MemorySessionDAO var7 = new org.jsecurity.session.mgt.eis.MemorySessionDAO();
    org.jsecurity.cache.Cache var8 = var7.getActiveSessionsCache();
    org.jsecurity.cache.CacheManager var9 = var7.getCacheManager();
    org.jsecurity.cache.HashtableCacheManager var10 = new org.jsecurity.cache.HashtableCacheManager();
    org.jsecurity.cache.Cache var12 = var10.getCache("\u0000\u0000");
    var7.setActiveSessionsCache(var12);
    java.io.InputStream var15 = org.jsecurity.util.ClassUtils.getResourceAsStream("");
    java.lang.Object[] var16 = new java.lang.Object[] { var15};
    java.util.List var17 = org.jsecurity.util.CollectionUtils.asList(var16);
    org.jsecurity.authc.pam.ModularRealmAuthenticator var18 = new org.jsecurity.authc.pam.ModularRealmAuthenticator(var17);
    org.jsecurity.authc.pam.AllSuccessfulModularAuthenticationStrategy var19 = new org.jsecurity.authc.pam.AllSuccessfulModularAuthenticationStrategy();
    var18.setModularAuthenticationStrategy((org.jsecurity.authc.pam.ModularAuthenticationStrategy)var19);
    org.jsecurity.authz.SimpleAuthorizationInfo var21 = new org.jsecurity.authz.SimpleAuthorizationInfo();
    var21.addStringPermission("hi!");
    java.io.InputStream var25 = org.jsecurity.util.ClassUtils.getResourceAsStream("");
    java.lang.Object[] var26 = new java.lang.Object[] { var25};
    java.util.List var27 = org.jsecurity.util.CollectionUtils.asList(var26);
    var21.addRoles((java.util.Collection)var27);
    var18.setAuthenticationListeners((java.util.Collection)var27);
    org.jsecurity.realm.activedirectory.ActiveDirectoryRealm var30 = new org.jsecurity.realm.activedirectory.ActiveDirectoryRealm();
    var30.setPrincipalSuffix("");
    var18.setRealm((org.jsecurity.realm.Realm)var30);
    org.jsecurity.cache.HashtableCacheManager var34 = new org.jsecurity.cache.HashtableCacheManager();
    org.jsecurity.cache.Cache var36 = var34.getCache("\u0000\u0000");
    var30.setAuthorizationCache(var36);
    var7.setActiveSessionsCache(var36);
    org.jsecurity.session.mgt.SimpleSession var39 = new org.jsecurity.session.mgt.SimpleSession();
    java.io.Serializable var40 = var7.create((org.jsecurity.session.Session)var39);
    var6.setSessionDAO((org.jsecurity.session.mgt.eis.SessionDAO)var7);
    org.jsecurity.authc.pam.AllSuccessfulModularAuthenticationStrategy var42 = new org.jsecurity.authc.pam.AllSuccessfulModularAuthenticationStrategy();
    char[] var44 = new char[] { };
    org.jsecurity.authc.UsernamePasswordToken var46 = new org.jsecurity.authc.UsernamePasswordToken("hi!", var44, true);
    org.jsecurity.authc.SimpleAccount var47 = new org.jsecurity.authc.SimpleAccount();
    var47.setCredentialsExpired(false);
    boolean var50 = var47.isLocked();
    org.jsecurity.authc.AuthenticationInfo var51 = var42.afterAllAttempts((org.jsecurity.authc.AuthenticationToken)var46, (org.jsecurity.authc.AuthenticationInfo)var47);
    char[] var55 = new char[] { '4', '#'};
    org.jsecurity.authc.UsernamePasswordToken var56 = new org.jsecurity.authc.UsernamePasswordToken("\u0000\u0000", var55);
    org.jsecurity.authc.SimpleAccount var57 = new org.jsecurity.authc.SimpleAccount();
    var57.setCredentialsExpired(false);
    var57.setCredentialsExpired(false);
    boolean var62 = var57.isCredentialsExpired();
    org.jsecurity.authc.AuthenticationInfo var63 = var42.afterAllAttempts((org.jsecurity.authc.AuthenticationToken)var56, (org.jsecurity.authc.AuthenticationInfo)var57);
    org.jsecurity.realm.activedirectory.ActiveDirectoryRealm var64 = new org.jsecurity.realm.activedirectory.ActiveDirectoryRealm();
    org.jsecurity.authc.credential.Sha256CredentialsMatcher var65 = new org.jsecurity.authc.credential.Sha256CredentialsMatcher();
    var64.setCredentialsMatcher((org.jsecurity.authc.credential.CredentialsMatcher)var65);
    java.lang.String var67 = var64.getAuthorizationCacheName();
    org.jsecurity.authc.UsernamePasswordToken var68 = new org.jsecurity.authc.UsernamePasswordToken();
    java.lang.String var69 = var68.getUsername();
    java.lang.Object var70 = var68.getPrincipal();
    boolean var71 = var64.supports((org.jsecurity.authc.AuthenticationToken)var68);
    org.jsecurity.session.UnknownSessionException var75 = new org.jsecurity.session.UnknownSessionException("dd\uFFFD", (java.io.Serializable)100.0f);
    org.jsecurity.session.SessionException var77 = new org.jsecurity.session.SessionException("dd\uFFFD", (java.lang.Throwable)var75, (java.io.Serializable)0);
    org.jsecurity.authc.SimpleAuthenticationInfo var80 = new org.jsecurity.authc.SimpleAuthenticationInfo((java.lang.Object)0, (java.lang.Object)10, "hi!");
    java.lang.Object var81 = var80.getCredentials();
    java.lang.String var82 = var80.toString();
    org.jsecurity.authc.AuthenticationInfo var83 = var42.afterAllAttempts((org.jsecurity.authc.AuthenticationToken)var68, (org.jsecurity.authc.AuthenticationInfo)var80);
    org.jsecurity.session.mgt.eis.MemorySessionDAO var84 = new org.jsecurity.session.mgt.eis.MemorySessionDAO();
    org.jsecurity.cache.Cache var85 = var84.getActiveSessionsCache();
    var84.setActiveSessionsCacheName("dd\uFFFD");
    var80.setCredentials((java.lang.Object)var84);
    var6.setSessionDAO((org.jsecurity.session.mgt.eis.SessionDAO)var84);
    var1.setSessionManager((org.jsecurity.session.mgt.ValidatingSessionManager)var6);
    var6.validateSessions();
    org.jsecurity.session.mgt.ExecutorServiceSessionValidationScheduler var92 = new org.jsecurity.session.mgt.ExecutorServiceSessionValidationScheduler((org.jsecurity.session.mgt.ValidatingSessionManager)var6);
    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      long var94 = var6.getTimeout((java.io.Serializable)"e00f87fa-0543-46d5-b69b-14e41add033e");
      fail("Expected exception of type org.jsecurity.session.UnknownSessionException");
    } catch (org.jsecurity.session.UnknownSessionException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var2 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var8);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var9);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var12);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var15);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var16);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var17);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var25);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var26);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var27);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var36);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var40 + "' != '" + "fd1455f4-5b20-4b41-b307-cff13c863b1b"+ "'", var40.equals("fd1455f4-5b20-4b41-b307-cff13c863b1b"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var44);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var50 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var51);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var55);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var62 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var63);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var67);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var69);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var70);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var71 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var81 + "' != '" + 10+ "'", var81.equals(10));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var83);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var85);

  }

  public void test259() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest6.test259");


    org.jsecurity.realm.text.TextConfigurationRealm var0 = new org.jsecurity.realm.text.TextConfigurationRealm();
    org.jsecurity.realm.activedirectory.ActiveDirectoryRealm var2 = new org.jsecurity.realm.activedirectory.ActiveDirectoryRealm();
    var2.init();
    var2.setSystemPassword("dd\uFFFD");
    org.jsecurity.authz.aop.GuestAnnotationHandler var6 = new org.jsecurity.authz.aop.GuestAnnotationHandler();
    java.lang.Class var7 = var6.getAnnotationClass();
    var2.setAuthenticationTokenClass(var7);
    org.jsecurity.authz.permission.WildcardPermissionResolver var9 = new org.jsecurity.authz.permission.WildcardPermissionResolver();
    org.jsecurity.authz.Permission var11 = var9.resolvePermission("hi!");
    var2.setPermissionResolver((org.jsecurity.authz.permission.PermissionResolver)var9);
    java.util.Set var13 = org.jsecurity.util.PermissionUtils.resolveDelimitedPermissions("ZGT/", (org.jsecurity.authz.permission.PermissionResolver)var9);
    var0.setPermissionResolver((org.jsecurity.authz.permission.PermissionResolver)var9);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var7);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var11);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var13);

  }

  public void test260() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest6.test260");


    org.jsecurity.session.mgt.DefaultSessionManager var0 = new org.jsecurity.session.mgt.DefaultSessionManager();
    org.jsecurity.session.mgt.eis.MemorySessionDAO var1 = new org.jsecurity.session.mgt.eis.MemorySessionDAO();
    org.jsecurity.cache.Cache var2 = var1.getActiveSessionsCache();
    org.jsecurity.cache.CacheManager var3 = var1.getCacheManager();
    org.jsecurity.cache.HashtableCacheManager var4 = new org.jsecurity.cache.HashtableCacheManager();
    org.jsecurity.cache.Cache var6 = var4.getCache("\u0000\u0000");
    var1.setActiveSessionsCache(var6);
    java.io.InputStream var9 = org.jsecurity.util.ClassUtils.getResourceAsStream("");
    java.lang.Object[] var10 = new java.lang.Object[] { var9};
    java.util.List var11 = org.jsecurity.util.CollectionUtils.asList(var10);
    org.jsecurity.authc.pam.ModularRealmAuthenticator var12 = new org.jsecurity.authc.pam.ModularRealmAuthenticator(var11);
    org.jsecurity.authc.pam.AllSuccessfulModularAuthenticationStrategy var13 = new org.jsecurity.authc.pam.AllSuccessfulModularAuthenticationStrategy();
    var12.setModularAuthenticationStrategy((org.jsecurity.authc.pam.ModularAuthenticationStrategy)var13);
    org.jsecurity.authz.SimpleAuthorizationInfo var15 = new org.jsecurity.authz.SimpleAuthorizationInfo();
    var15.addStringPermission("hi!");
    java.io.InputStream var19 = org.jsecurity.util.ClassUtils.getResourceAsStream("");
    java.lang.Object[] var20 = new java.lang.Object[] { var19};
    java.util.List var21 = org.jsecurity.util.CollectionUtils.asList(var20);
    var15.addRoles((java.util.Collection)var21);
    var12.setAuthenticationListeners((java.util.Collection)var21);
    org.jsecurity.realm.activedirectory.ActiveDirectoryRealm var24 = new org.jsecurity.realm.activedirectory.ActiveDirectoryRealm();
    var24.setPrincipalSuffix("");
    var12.setRealm((org.jsecurity.realm.Realm)var24);
    org.jsecurity.cache.HashtableCacheManager var28 = new org.jsecurity.cache.HashtableCacheManager();
    org.jsecurity.cache.Cache var30 = var28.getCache("\u0000\u0000");
    var24.setAuthorizationCache(var30);
    var1.setActiveSessionsCache(var30);
    org.jsecurity.session.mgt.SimpleSession var33 = new org.jsecurity.session.mgt.SimpleSession();
    java.io.Serializable var34 = var1.create((org.jsecurity.session.Session)var33);
    var0.setSessionDAO((org.jsecurity.session.mgt.eis.SessionDAO)var1);
    long var36 = var0.getSessionValidationInterval();
    org.jsecurity.session.mgt.eis.MemorySessionDAO var37 = new org.jsecurity.session.mgt.eis.MemorySessionDAO();
    org.jsecurity.cache.Cache var38 = var37.getActiveSessionsCache();
    org.jsecurity.cache.CacheManager var39 = var37.getCacheManager();
    org.jsecurity.cache.HashtableCacheManager var40 = new org.jsecurity.cache.HashtableCacheManager();
    org.jsecurity.cache.Cache var42 = var40.getCache("\u0000\u0000");
    var37.setActiveSessionsCache(var42);
    java.io.InputStream var45 = org.jsecurity.util.ClassUtils.getResourceAsStream("");
    java.lang.Object[] var46 = new java.lang.Object[] { var45};
    java.util.List var47 = org.jsecurity.util.CollectionUtils.asList(var46);
    org.jsecurity.authc.pam.ModularRealmAuthenticator var48 = new org.jsecurity.authc.pam.ModularRealmAuthenticator(var47);
    org.jsecurity.authc.pam.AllSuccessfulModularAuthenticationStrategy var49 = new org.jsecurity.authc.pam.AllSuccessfulModularAuthenticationStrategy();
    var48.setModularAuthenticationStrategy((org.jsecurity.authc.pam.ModularAuthenticationStrategy)var49);
    org.jsecurity.authz.SimpleAuthorizationInfo var51 = new org.jsecurity.authz.SimpleAuthorizationInfo();
    var51.addStringPermission("hi!");
    java.io.InputStream var55 = org.jsecurity.util.ClassUtils.getResourceAsStream("");
    java.lang.Object[] var56 = new java.lang.Object[] { var55};
    java.util.List var57 = org.jsecurity.util.CollectionUtils.asList(var56);
    var51.addRoles((java.util.Collection)var57);
    var48.setAuthenticationListeners((java.util.Collection)var57);
    org.jsecurity.realm.activedirectory.ActiveDirectoryRealm var60 = new org.jsecurity.realm.activedirectory.ActiveDirectoryRealm();
    var60.setPrincipalSuffix("");
    var48.setRealm((org.jsecurity.realm.Realm)var60);
    org.jsecurity.cache.HashtableCacheManager var64 = new org.jsecurity.cache.HashtableCacheManager();
    org.jsecurity.cache.Cache var66 = var64.getCache("\u0000\u0000");
    var60.setAuthorizationCache(var66);
    var37.setActiveSessionsCache(var66);
    org.jsecurity.session.mgt.SimpleSession var69 = new org.jsecurity.session.mgt.SimpleSession();
    java.io.Serializable var70 = var37.create((org.jsecurity.session.Session)var69);
    org.jsecurity.cache.Cache var71 = var37.getActiveSessionsCache();
    var0.setSessionDAO((org.jsecurity.session.mgt.eis.SessionDAO)var37);
    var0.destroy();
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var2);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var3);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var6);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var9);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var10);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var11);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var19);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var20);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var21);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var30);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var34 + "' != '" + "6a5b7ded-2d92-483a-a150-15fb6ef90177"+ "'", var34.equals("6a5b7ded-2d92-483a-a150-15fb6ef90177"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var36 == 3600000L);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var38);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var39);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var42);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var45);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var46);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var47);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var55);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var56);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var57);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var66);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var70 + "' != '" + "17b62930-fccd-44f5-984d-0f43ffef60cb"+ "'", var70.equals("17b62930-fccd-44f5-984d-0f43ffef60cb"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var71);

  }

  public void test261() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest6.test261");


    org.jsecurity.session.UnknownSessionException var1 = new org.jsecurity.session.UnknownSessionException("bafce95d-9056-4d74-9fad-cfc428d6b8e2");

  }

  public void test262() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest6.test262");


    org.jsecurity.crypto.hash.Sha1Hash var1 = org.jsecurity.crypto.hash.Sha1Hash.fromBase64String("9c4e57bf-3572-411a-8564-0797a7b8f16a");
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var1);

  }

  public void test263() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest6.test263");


    org.jsecurity.realm.activedirectory.ActiveDirectoryRealm var0 = new org.jsecurity.realm.activedirectory.ActiveDirectoryRealm();
    org.jsecurity.authc.credential.Sha256CredentialsMatcher var1 = new org.jsecurity.authc.credential.Sha256CredentialsMatcher();
    var0.setCredentialsMatcher((org.jsecurity.authc.credential.CredentialsMatcher)var1);
    java.lang.String var3 = var0.getAuthorizationCacheName();
    var0.setPrincipalSuffix("org.jsecurity.config.ConfigurationException: dd\uFFFD");
    org.jsecurity.realm.text.TextConfigurationRealm var6 = new org.jsecurity.realm.text.TextConfigurationRealm();
    java.io.InputStream var8 = org.jsecurity.util.ClassUtils.getResourceAsStream("");
    java.lang.Object[] var9 = new java.lang.Object[] { var8};
    java.util.List var10 = org.jsecurity.util.CollectionUtils.asList(var9);
    org.jsecurity.authc.pam.ModularRealmAuthenticator var11 = new org.jsecurity.authc.pam.ModularRealmAuthenticator(var10);
    org.jsecurity.subject.SimplePrincipalCollection var13 = new org.jsecurity.subject.SimplePrincipalCollection((java.util.Collection)var10, "org.jsecurity.authz.UnauthorizedException: org.jsecurity.session.ExpiredSessionException: ");
    org.jsecurity.session.UnknownSessionException var18 = new org.jsecurity.session.UnknownSessionException("dd\uFFFD", (java.io.Serializable)100.0f);
    org.jsecurity.session.SessionException var20 = new org.jsecurity.session.SessionException("dd\uFFFD", (java.lang.Throwable)var18, (java.io.Serializable)0);
    org.jsecurity.session.SessionException var21 = new org.jsecurity.session.SessionException("dd\uFFFD", (java.lang.Throwable)var18);
    var13.add((java.lang.Object)var21, "org.jsecurity.config.ConfigurationException: dd\uFFFD");
    var6.onLogout((org.jsecurity.subject.PrincipalCollection)var13);
    var0.onLogout((org.jsecurity.subject.PrincipalCollection)var13);
    org.jsecurity.codec.CodecException var28 = new org.jsecurity.codec.CodecException("dd\uFFFD");
    org.jsecurity.authc.ConcurrentAccessException var29 = new org.jsecurity.authc.ConcurrentAccessException("org.jsecurity.authz.UnauthorizedException: org.jsecurity.session.ExpiredSessionException: ", (java.lang.Throwable)var28);
    org.jsecurity.subject.SimplePrincipalCollection var31 = new org.jsecurity.subject.SimplePrincipalCollection((java.lang.Object)var28, "");
    org.jsecurity.authc.pam.FirstSuccessfulAuthenticationStrategy var32 = new org.jsecurity.authc.pam.FirstSuccessfulAuthenticationStrategy();
    org.jsecurity.authz.UnauthorizedException var34 = new org.jsecurity.authz.UnauthorizedException("org.jsecurity.config.ConfigurationException: dd\uFFFD");
    java.lang.Throwable[] var35 = var34.getSuppressed();
    java.util.List var36 = org.jsecurity.util.CollectionUtils.asList((java.lang.Object[])var35);
    org.jsecurity.authc.UsernamePasswordToken var37 = new org.jsecurity.authc.UsernamePasswordToken();
    java.lang.String var38 = var37.getUsername();
    java.net.InetAddress var39 = var37.getInetAddress();
    org.jsecurity.authc.AuthenticationInfo var40 = var32.beforeAllAttempts((java.util.Collection)var36, (org.jsecurity.authc.AuthenticationToken)var37);
    org.jsecurity.session.UnknownSessionException var45 = new org.jsecurity.session.UnknownSessionException("dd\uFFFD", (java.io.Serializable)100.0f);
    org.jsecurity.subject.SubjectException var46 = new org.jsecurity.subject.SubjectException("dd\uFFFD", (java.lang.Throwable)var45);
    org.jsecurity.io.SerializationException var47 = new org.jsecurity.io.SerializationException("", (java.lang.Throwable)var46);
    java.lang.Throwable[] var48 = var46.getSuppressed();
    java.util.Set var49 = org.jsecurity.util.CollectionUtils.asSet((java.lang.Object[])var48);
    org.jsecurity.authc.SimpleAccount var50 = new org.jsecurity.authc.SimpleAccount((org.jsecurity.subject.PrincipalCollection)var31, (java.lang.Object)var36, var49);
    org.jsecurity.authz.SimpleAuthorizingAccount var51 = new org.jsecurity.authz.SimpleAuthorizingAccount((org.jsecurity.subject.PrincipalCollection)var13, (java.lang.Object)var50);
    org.jsecurity.mgt.DefaultSecurityManager var53 = new org.jsecurity.mgt.DefaultSecurityManager();
    java.io.InputStream var55 = org.jsecurity.util.ClassUtils.getResourceAsStream("");
    java.lang.Object[] var56 = new java.lang.Object[] { var55};
    java.util.List var57 = org.jsecurity.util.CollectionUtils.asList(var56);
    org.jsecurity.authc.pam.ModularRealmAuthenticator var58 = new org.jsecurity.authc.pam.ModularRealmAuthenticator(var57);
    org.jsecurity.authc.pam.AllSuccessfulModularAuthenticationStrategy var59 = new org.jsecurity.authc.pam.AllSuccessfulModularAuthenticationStrategy();
    var58.setModularAuthenticationStrategy((org.jsecurity.authc.pam.ModularAuthenticationStrategy)var59);
    org.jsecurity.authz.SimpleAuthorizationInfo var61 = new org.jsecurity.authz.SimpleAuthorizationInfo();
    var61.addStringPermission("hi!");
    java.io.InputStream var65 = org.jsecurity.util.ClassUtils.getResourceAsStream("");
    java.lang.Object[] var66 = new java.lang.Object[] { var65};
    java.util.List var67 = org.jsecurity.util.CollectionUtils.asList(var66);
    var61.addRoles((java.util.Collection)var67);
    var58.setAuthenticationListeners((java.util.Collection)var67);
    var53.setSessionListeners((java.util.Collection)var67);
    org.jsecurity.subject.Subject var71 = var53.getSubject();
    org.jsecurity.authz.permission.WildcardPermissionResolver var72 = new org.jsecurity.authz.permission.WildcardPermissionResolver();
    var53.setPermissionResolver((org.jsecurity.authz.permission.PermissionResolver)var72);
    java.util.Set var74 = org.jsecurity.util.PermissionUtils.resolveDelimitedPermissions("9370bad8-7774-4f3f-9431-c39c9f6aa37d", (org.jsecurity.authz.permission.PermissionResolver)var72);
    var51.setStringPermissions(var74);
    java.util.Collection var76 = var51.getObjectPermissions();
    org.jsecurity.codec.CodecException var80 = new org.jsecurity.codec.CodecException("dd\uFFFD");
    org.jsecurity.authc.ConcurrentAccessException var81 = new org.jsecurity.authc.ConcurrentAccessException("org.jsecurity.authz.UnauthorizedException: org.jsecurity.session.ExpiredSessionException: ", (java.lang.Throwable)var80);
    org.jsecurity.authc.ConcurrentAccessException var82 = new org.jsecurity.authc.ConcurrentAccessException("020e4fd5-81c8-4cbc-9bbb-975c45ce39a3", (java.lang.Throwable)var80);
    boolean var83 = var51.equals((java.lang.Object)"020e4fd5-81c8-4cbc-9bbb-975c45ce39a3");
    java.util.Collection var84 = var51.getRoles();
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var3);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var8);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var9);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var10);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var35);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var36);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var38);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var39);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var40);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var48);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var49);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var55);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var56);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var57);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var65);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var66);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var67);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var71);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var74);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var76);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var83 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var84);

  }

  public void test264() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest6.test264");


    org.jsecurity.session.mgt.eis.MemorySessionDAO var0 = new org.jsecurity.session.mgt.eis.MemorySessionDAO();
    org.jsecurity.cache.Cache var1 = var0.getActiveSessionsCache();
    org.jsecurity.cache.CacheManager var2 = var0.getCacheManager();
    org.jsecurity.cache.HashtableCacheManager var3 = new org.jsecurity.cache.HashtableCacheManager();
    org.jsecurity.cache.Cache var5 = var3.getCache("\u0000\u0000");
    var0.setActiveSessionsCache(var5);
    java.io.InputStream var8 = org.jsecurity.util.ClassUtils.getResourceAsStream("");
    java.lang.Object[] var9 = new java.lang.Object[] { var8};
    java.util.List var10 = org.jsecurity.util.CollectionUtils.asList(var9);
    org.jsecurity.authc.pam.ModularRealmAuthenticator var11 = new org.jsecurity.authc.pam.ModularRealmAuthenticator(var10);
    org.jsecurity.authc.pam.AllSuccessfulModularAuthenticationStrategy var12 = new org.jsecurity.authc.pam.AllSuccessfulModularAuthenticationStrategy();
    var11.setModularAuthenticationStrategy((org.jsecurity.authc.pam.ModularAuthenticationStrategy)var12);
    org.jsecurity.authz.SimpleAuthorizationInfo var14 = new org.jsecurity.authz.SimpleAuthorizationInfo();
    var14.addStringPermission("hi!");
    java.io.InputStream var18 = org.jsecurity.util.ClassUtils.getResourceAsStream("");
    java.lang.Object[] var19 = new java.lang.Object[] { var18};
    java.util.List var20 = org.jsecurity.util.CollectionUtils.asList(var19);
    var14.addRoles((java.util.Collection)var20);
    var11.setAuthenticationListeners((java.util.Collection)var20);
    org.jsecurity.realm.activedirectory.ActiveDirectoryRealm var23 = new org.jsecurity.realm.activedirectory.ActiveDirectoryRealm();
    var23.setPrincipalSuffix("");
    var11.setRealm((org.jsecurity.realm.Realm)var23);
    org.jsecurity.cache.HashtableCacheManager var27 = new org.jsecurity.cache.HashtableCacheManager();
    org.jsecurity.cache.Cache var29 = var27.getCache("\u0000\u0000");
    var23.setAuthorizationCache(var29);
    var0.setActiveSessionsCache(var29);
    org.jsecurity.session.mgt.SimpleSession var32 = new org.jsecurity.session.mgt.SimpleSession();
    java.io.Serializable var33 = var0.create((org.jsecurity.session.Session)var32);
    org.jsecurity.session.mgt.SimpleSession var34 = new org.jsecurity.session.mgt.SimpleSession();
    var34.touch();
    var34.validate();
    org.jsecurity.session.mgt.SimpleSession var37 = new org.jsecurity.session.mgt.SimpleSession();
    var37.setTimeout((-1L));
    org.jsecurity.session.mgt.SimpleSession var40 = new org.jsecurity.session.mgt.SimpleSession();
    java.util.Date var41 = var40.getLastAccessTime();
    var37.setLastAccessTime(var41);
    org.jsecurity.session.mgt.SimpleSession var43 = new org.jsecurity.session.mgt.SimpleSession();
    java.util.Date var44 = var43.getLastAccessTime();
    var37.setStopTimestamp(var44);
    var34.setLastAccessTime(var44);
    var32.setLastAccessTime(var44);
    org.jsecurity.session.mgt.ImmutableProxiedSession var48 = new org.jsecurity.session.mgt.ImmutableProxiedSession((org.jsecurity.session.Session)var32);
    org.jsecurity.session.ProxiedSession var49 = new org.jsecurity.session.ProxiedSession((org.jsecurity.session.Session)var32);
    org.jsecurity.realm.jdbc.JdbcRealm var50 = new org.jsecurity.realm.jdbc.JdbcRealm();
    var50.setPermissionsQuery("org.jsecurity.realm.text.TextConfigurationRealm_445");
    var50.setUserRolesQuery("6464ff");
    org.jsecurity.crypto.BlowfishCipher var55 = new org.jsecurity.crypto.BlowfishCipher();
    java.security.Key var56 = org.jsecurity.crypto.BlowfishCipher.generateNewKey();
    var55.setKey(var56);
    java.security.Key var58 = org.jsecurity.crypto.BlowfishCipher.generateNewKey();
    var55.setKey(var58);
    byte[] var63 = new byte[] { (byte)100, (byte)100, (byte)(-1)};
    java.lang.String var64 = org.jsecurity.codec.CodecSupport.toString(var63);
    char[] var65 = org.jsecurity.codec.CodecSupport.toChars(var63);
    boolean var66 = org.jsecurity.codec.Base64.isBase64(var63);
    boolean var67 = org.jsecurity.codec.Base64.isBase64(var63);
    boolean var68 = org.jsecurity.codec.Base64.isBase64(var63);
    java.lang.String var69 = org.jsecurity.codec.Hex.encodeToString(var63);
    byte[] var73 = new byte[] { (byte)100, (byte)100, (byte)(-1)};
    java.lang.String var74 = org.jsecurity.codec.CodecSupport.toString(var73);
    char[] var75 = org.jsecurity.codec.CodecSupport.toChars(var73);
    boolean var76 = org.jsecurity.codec.Base64.isBase64(var73);
    boolean var77 = org.jsecurity.codec.Base64.isBase64(var73);
    boolean var78 = org.jsecurity.codec.Base64.isBase64(var73);
    java.lang.String var79 = org.jsecurity.codec.Base64.encodeToString(var73);
    byte[] var80 = var55.encrypt(var63, var73);
    var49.setAttribute((java.lang.Object)"6464ff", (java.lang.Object)var73);
    java.lang.String var82 = org.jsecurity.codec.Base64.encodeToString(var73);
    java.lang.String var83 = org.jsecurity.codec.CodecSupport.toString(var73);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var1);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var2);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var5);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var8);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var9);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var10);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var18);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var19);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var20);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var29);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var33 + "' != '" + "6f44d21a-b7eb-4124-a828-f9123469c6e4"+ "'", var33.equals("6f44d21a-b7eb-4124-a828-f9123469c6e4"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var41);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var44);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var56);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var58);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var63);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var64 + "' != '" + "dd\uFFFD"+ "'", var64.equals("dd\uFFFD"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var65);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var66 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var67 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var68 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var69 + "' != '" + "6464ff"+ "'", var69.equals("6464ff"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var73);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var74 + "' != '" + "dd\uFFFD"+ "'", var74.equals("dd\uFFFD"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var75);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var76 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var77 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var78 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var79 + "' != '" + "ZGT/"+ "'", var79.equals("ZGT/"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var80);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var82 + "' != '" + "ZGT/"+ "'", var82.equals("ZGT/"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var83 + "' != '" + "dd\uFFFD"+ "'", var83.equals("dd\uFFFD"));

  }

  public void test265() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest6.test265");


    org.jsecurity.realm.jndi.JndiRealmFactory var0 = new org.jsecurity.realm.jndi.JndiRealmFactory();
    java.io.InputStream var2 = org.jsecurity.util.ClassUtils.getResourceAsStream("");
    java.lang.Object[] var3 = new java.lang.Object[] { var2};
    java.util.List var4 = org.jsecurity.util.CollectionUtils.asList(var3);
    org.jsecurity.authc.pam.ModularRealmAuthenticator var5 = new org.jsecurity.authc.pam.ModularRealmAuthenticator(var4);
    org.jsecurity.authc.pam.AllSuccessfulModularAuthenticationStrategy var6 = new org.jsecurity.authc.pam.AllSuccessfulModularAuthenticationStrategy();
    var5.setModularAuthenticationStrategy((org.jsecurity.authc.pam.ModularAuthenticationStrategy)var6);
    org.jsecurity.authz.SimpleAuthorizationInfo var8 = new org.jsecurity.authz.SimpleAuthorizationInfo();
    var8.addStringPermission("hi!");
    java.io.InputStream var12 = org.jsecurity.util.ClassUtils.getResourceAsStream("");
    java.lang.Object[] var13 = new java.lang.Object[] { var12};
    java.util.List var14 = org.jsecurity.util.CollectionUtils.asList(var13);
    var8.addRoles((java.util.Collection)var14);
    var5.setAuthenticationListeners((java.util.Collection)var14);
    org.jsecurity.realm.activedirectory.ActiveDirectoryRealm var17 = new org.jsecurity.realm.activedirectory.ActiveDirectoryRealm();
    var17.setPrincipalSuffix("");
    var5.setRealm((org.jsecurity.realm.Realm)var17);
    org.jsecurity.authc.pam.FirstSuccessfulAuthenticationStrategy var21 = new org.jsecurity.authc.pam.FirstSuccessfulAuthenticationStrategy();
    org.jsecurity.authz.UnauthorizedException var23 = new org.jsecurity.authz.UnauthorizedException("org.jsecurity.config.ConfigurationException: dd\uFFFD");
    java.lang.Throwable[] var24 = var23.getSuppressed();
    java.util.List var25 = org.jsecurity.util.CollectionUtils.asList((java.lang.Object[])var24);
    org.jsecurity.authc.UsernamePasswordToken var26 = new org.jsecurity.authc.UsernamePasswordToken();
    java.lang.String var27 = var26.getUsername();
    java.net.InetAddress var28 = var26.getInetAddress();
    org.jsecurity.authc.AuthenticationInfo var29 = var21.beforeAllAttempts((java.util.Collection)var25, (org.jsecurity.authc.AuthenticationToken)var26);
    var5.setModularAuthenticationStrategy((org.jsecurity.authc.pam.ModularAuthenticationStrategy)var21);
    org.jsecurity.codec.CodecException var33 = new org.jsecurity.codec.CodecException("dd\uFFFD");
    org.jsecurity.authc.ConcurrentAccessException var34 = new org.jsecurity.authc.ConcurrentAccessException("org.jsecurity.authz.UnauthorizedException: org.jsecurity.session.ExpiredSessionException: ", (java.lang.Throwable)var33);
    org.jsecurity.subject.SimplePrincipalCollection var36 = new org.jsecurity.subject.SimplePrincipalCollection((java.lang.Object)var33, "");
    org.jsecurity.authc.pam.FirstSuccessfulAuthenticationStrategy var37 = new org.jsecurity.authc.pam.FirstSuccessfulAuthenticationStrategy();
    org.jsecurity.authz.UnauthorizedException var39 = new org.jsecurity.authz.UnauthorizedException("org.jsecurity.config.ConfigurationException: dd\uFFFD");
    java.lang.Throwable[] var40 = var39.getSuppressed();
    java.util.List var41 = org.jsecurity.util.CollectionUtils.asList((java.lang.Object[])var40);
    org.jsecurity.authc.UsernamePasswordToken var42 = new org.jsecurity.authc.UsernamePasswordToken();
    java.lang.String var43 = var42.getUsername();
    java.net.InetAddress var44 = var42.getInetAddress();
    org.jsecurity.authc.AuthenticationInfo var45 = var37.beforeAllAttempts((java.util.Collection)var41, (org.jsecurity.authc.AuthenticationToken)var42);
    org.jsecurity.session.UnknownSessionException var50 = new org.jsecurity.session.UnknownSessionException("dd\uFFFD", (java.io.Serializable)100.0f);
    org.jsecurity.subject.SubjectException var51 = new org.jsecurity.subject.SubjectException("dd\uFFFD", (java.lang.Throwable)var50);
    org.jsecurity.io.SerializationException var52 = new org.jsecurity.io.SerializationException("", (java.lang.Throwable)var51);
    java.lang.Throwable[] var53 = var51.getSuppressed();
    java.util.Set var54 = org.jsecurity.util.CollectionUtils.asSet((java.lang.Object[])var53);
    org.jsecurity.authc.SimpleAccount var55 = new org.jsecurity.authc.SimpleAccount((org.jsecurity.subject.PrincipalCollection)var36, (java.lang.Object)var41, var54);
    org.jsecurity.authc.pam.AllSuccessfulModularAuthenticationStrategy var56 = new org.jsecurity.authc.pam.AllSuccessfulModularAuthenticationStrategy();
    char[] var58 = new char[] { };
    org.jsecurity.authc.UsernamePasswordToken var60 = new org.jsecurity.authc.UsernamePasswordToken("hi!", var58, true);
    org.jsecurity.authc.SimpleAccount var61 = new org.jsecurity.authc.SimpleAccount();
    var61.setCredentialsExpired(false);
    boolean var64 = var61.isLocked();
    org.jsecurity.authc.AuthenticationInfo var65 = var56.afterAllAttempts((org.jsecurity.authc.AuthenticationToken)var60, (org.jsecurity.authc.AuthenticationInfo)var61);
    char[] var68 = new char[] { };
    org.jsecurity.authc.UsernamePasswordToken var70 = new org.jsecurity.authc.UsernamePasswordToken("hi!", var68, true);
    org.jsecurity.authc.UsernamePasswordToken var71 = new org.jsecurity.authc.UsernamePasswordToken("\u0000\u0000", var68);
    var60.setPassword(var68);
    org.jsecurity.authc.AuthenticationInfo var73 = var21.beforeAllAttempts((java.util.Collection)var41, (org.jsecurity.authc.AuthenticationToken)var60);
    org.jsecurity.authz.permission.WildcardPermissionResolver var74 = new org.jsecurity.authz.permission.WildcardPermissionResolver();
    org.jsecurity.authz.Permission var76 = var74.resolvePermission("hi!");
    org.jsecurity.authz.Permission var78 = var74.resolvePermission("hi!");
    java.util.Set var79 = org.jsecurity.util.PermissionUtils.resolvePermissions((java.util.Collection)var41, (org.jsecurity.authz.permission.PermissionResolver)var74);
    var0.setJndiNames((java.util.Collection)var79);
    java.util.Properties var81 = var0.getJndiEnvironment();
    org.jsecurity.jndi.JndiTemplate var82 = new org.jsecurity.jndi.JndiTemplate();
    java.util.Properties var83 = var82.getEnvironment();
    var0.setJndiTemplate(var82);
    var0.setJndiNames("f038fdb8-a003-42b2-ae02-712288013087");
    var0.setResourceRef(false);
    java.util.Collection var89 = var0.getJndiNames();
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var2);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var3);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var4);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var12);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var13);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var14);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var24);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var25);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var27);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var28);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var29);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var40);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var41);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var43);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var44);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var45);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var53);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var54);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var58);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var64 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var65);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var68);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var73);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var76);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var78);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var79);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var81);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var83);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var89);

  }

  public void test266() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest6.test266");


    org.jsecurity.config.IniConfiguration var0 = new org.jsecurity.config.IniConfiguration();
    var0.init();
    var0.setConfigUrl("947c1ad9-ebd5-4704-882a-a14f51bda9a4");
    org.jsecurity.authc.LockedAccountException var5 = new org.jsecurity.authc.LockedAccountException("cff098b5-6d79-4f6d-93d3-148185d0b987");
    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      org.jsecurity.crypto.hash.Md5Hash var6 = new org.jsecurity.crypto.hash.Md5Hash((java.lang.Object)var0, (java.lang.Object)"cff098b5-6d79-4f6d-93d3-148185d0b987");
      fail("Expected exception of type org.jsecurity.codec.CodecException");
    } catch (org.jsecurity.codec.CodecException e) {
      // Expected exception.
    }

  }

  public void test267() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest6.test267");


    java.io.InputStream var1 = org.jsecurity.util.ClassUtils.getResourceAsStream("");
    java.lang.Object[] var2 = new java.lang.Object[] { var1};
    java.util.List var3 = org.jsecurity.util.CollectionUtils.asList(var2);
    org.jsecurity.authc.pam.ModularRealmAuthenticator var4 = new org.jsecurity.authc.pam.ModularRealmAuthenticator(var3);
    org.jsecurity.authc.pam.AllSuccessfulModularAuthenticationStrategy var5 = new org.jsecurity.authc.pam.AllSuccessfulModularAuthenticationStrategy();
    var4.setModularAuthenticationStrategy((org.jsecurity.authc.pam.ModularAuthenticationStrategy)var5);
    org.jsecurity.authz.SimpleAuthorizationInfo var7 = new org.jsecurity.authz.SimpleAuthorizationInfo();
    var7.addStringPermission("hi!");
    java.io.InputStream var11 = org.jsecurity.util.ClassUtils.getResourceAsStream("");
    java.lang.Object[] var12 = new java.lang.Object[] { var11};
    java.util.List var13 = org.jsecurity.util.CollectionUtils.asList(var12);
    var7.addRoles((java.util.Collection)var13);
    var4.setAuthenticationListeners((java.util.Collection)var13);
    org.jsecurity.realm.activedirectory.ActiveDirectoryRealm var16 = new org.jsecurity.realm.activedirectory.ActiveDirectoryRealm();
    var16.setPrincipalSuffix("");
    var4.setRealm((org.jsecurity.realm.Realm)var16);
    org.jsecurity.authc.pam.ModularAuthenticationStrategy var20 = var4.getModularAuthenticationStrategy();
    org.jsecurity.realm.text.TextConfigurationRealm var21 = new org.jsecurity.realm.text.TextConfigurationRealm();
    java.io.InputStream var23 = org.jsecurity.util.ClassUtils.getResourceAsStream("");
    java.lang.Object[] var24 = new java.lang.Object[] { var23};
    java.util.List var25 = org.jsecurity.util.CollectionUtils.asList(var24);
    org.jsecurity.authc.pam.ModularRealmAuthenticator var26 = new org.jsecurity.authc.pam.ModularRealmAuthenticator(var25);
    org.jsecurity.subject.SimplePrincipalCollection var28 = new org.jsecurity.subject.SimplePrincipalCollection((java.util.Collection)var25, "org.jsecurity.authz.UnauthorizedException: org.jsecurity.session.ExpiredSessionException: ");
    org.jsecurity.session.UnknownSessionException var33 = new org.jsecurity.session.UnknownSessionException("dd\uFFFD", (java.io.Serializable)100.0f);
    org.jsecurity.session.SessionException var35 = new org.jsecurity.session.SessionException("dd\uFFFD", (java.lang.Throwable)var33, (java.io.Serializable)0);
    org.jsecurity.session.SessionException var36 = new org.jsecurity.session.SessionException("dd\uFFFD", (java.lang.Throwable)var33);
    var28.add((java.lang.Object)var36, "org.jsecurity.config.ConfigurationException: dd\uFFFD");
    var21.onLogout((org.jsecurity.subject.PrincipalCollection)var28);
    org.jsecurity.cache.HashtableCacheManager var40 = new org.jsecurity.cache.HashtableCacheManager();
    org.jsecurity.cache.Cache var42 = var40.getCache("\u0000\u0000");
    var21.setAuthorizationCache(var42);
    java.lang.String var44 = var21.getUserDefinitions();
    var4.setRealm((org.jsecurity.realm.Realm)var21);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var1);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var2);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var3);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var11);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var12);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var13);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var20);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var23);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var24);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var25);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var42);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var44);

  }

  public void test268() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest6.test268");


    org.jsecurity.config.IniConfiguration var0 = new org.jsecurity.config.IniConfiguration();
    var0.setConfigUrl("hi!");
    var0.setConfig("org.jsecurity.realm.SimpleAccountRealm-52-authorization");
    org.jsecurity.mgt.SecurityManager var5 = var0.getSecurityManager();
    var0.setConfigUrl("44126908-8346-4f1c-92de-726997ba95f5");
    java.io.InputStream var9 = org.jsecurity.util.ClassUtils.getResourceAsStream("");
    org.jsecurity.io.ResourceUtils.close(var9);
    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      var0.load(var9);
      fail("Expected exception of type org.jsecurity.config.ConfigurationException");
    } catch (org.jsecurity.config.ConfigurationException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var5);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var9);

  }

  public void test269() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest6.test269");


    org.jsecurity.mgt.DefaultSecurityManager var0 = new org.jsecurity.mgt.DefaultSecurityManager();
    java.io.InputStream var2 = org.jsecurity.util.ClassUtils.getResourceAsStream("");
    java.lang.Object[] var3 = new java.lang.Object[] { var2};
    java.util.List var4 = org.jsecurity.util.CollectionUtils.asList(var3);
    org.jsecurity.authc.pam.ModularRealmAuthenticator var5 = new org.jsecurity.authc.pam.ModularRealmAuthenticator(var4);
    org.jsecurity.authc.pam.AllSuccessfulModularAuthenticationStrategy var6 = new org.jsecurity.authc.pam.AllSuccessfulModularAuthenticationStrategy();
    var5.setModularAuthenticationStrategy((org.jsecurity.authc.pam.ModularAuthenticationStrategy)var6);
    org.jsecurity.authz.SimpleAuthorizationInfo var8 = new org.jsecurity.authz.SimpleAuthorizationInfo();
    var8.addStringPermission("hi!");
    java.io.InputStream var12 = org.jsecurity.util.ClassUtils.getResourceAsStream("");
    java.lang.Object[] var13 = new java.lang.Object[] { var12};
    java.util.List var14 = org.jsecurity.util.CollectionUtils.asList(var13);
    var8.addRoles((java.util.Collection)var14);
    var5.setAuthenticationListeners((java.util.Collection)var14);
    var0.setSessionListeners((java.util.Collection)var14);
    org.jsecurity.authc.pam.ModularRealmAuthenticator var18 = new org.jsecurity.authc.pam.ModularRealmAuthenticator();
    org.jsecurity.authz.permission.InvalidPermissionStringException var21 = new org.jsecurity.authz.permission.InvalidPermissionStringException("", "dd\uFFFD");
    org.jsecurity.JSecurityException var23 = new org.jsecurity.JSecurityException("");
    org.jsecurity.authc.SimpleAuthenticationInfo var25 = new org.jsecurity.authc.SimpleAuthenticationInfo((java.lang.Object)var21, (java.lang.Object)"", "org.jsecurity.authz.UnauthorizedException: org.jsecurity.session.ExpiredSessionException: ");
    org.jsecurity.subject.PrincipalCollection var26 = var25.getPrincipals();
    var18.onLogout(var26);
    var0.setAuthenticator((org.jsecurity.authc.Authenticator)var18);
    org.jsecurity.codec.CodecException var31 = new org.jsecurity.codec.CodecException("dd\uFFFD");
    org.jsecurity.authc.ConcurrentAccessException var32 = new org.jsecurity.authc.ConcurrentAccessException("org.jsecurity.authz.UnauthorizedException: org.jsecurity.session.ExpiredSessionException: ", (java.lang.Throwable)var31);
    org.jsecurity.subject.SimplePrincipalCollection var34 = new org.jsecurity.subject.SimplePrincipalCollection((java.lang.Object)var31, "");
    org.jsecurity.authc.pam.FirstSuccessfulAuthenticationStrategy var35 = new org.jsecurity.authc.pam.FirstSuccessfulAuthenticationStrategy();
    org.jsecurity.authz.UnauthorizedException var37 = new org.jsecurity.authz.UnauthorizedException("org.jsecurity.config.ConfigurationException: dd\uFFFD");
    java.lang.Throwable[] var38 = var37.getSuppressed();
    java.util.List var39 = org.jsecurity.util.CollectionUtils.asList((java.lang.Object[])var38);
    org.jsecurity.authc.UsernamePasswordToken var40 = new org.jsecurity.authc.UsernamePasswordToken();
    java.lang.String var41 = var40.getUsername();
    java.net.InetAddress var42 = var40.getInetAddress();
    org.jsecurity.authc.AuthenticationInfo var43 = var35.beforeAllAttempts((java.util.Collection)var39, (org.jsecurity.authc.AuthenticationToken)var40);
    org.jsecurity.session.UnknownSessionException var48 = new org.jsecurity.session.UnknownSessionException("dd\uFFFD", (java.io.Serializable)100.0f);
    org.jsecurity.subject.SubjectException var49 = new org.jsecurity.subject.SubjectException("dd\uFFFD", (java.lang.Throwable)var48);
    org.jsecurity.io.SerializationException var50 = new org.jsecurity.io.SerializationException("", (java.lang.Throwable)var49);
    java.lang.Throwable[] var51 = var49.getSuppressed();
    java.util.Set var52 = org.jsecurity.util.CollectionUtils.asSet((java.lang.Object[])var51);
    org.jsecurity.authc.SimpleAccount var53 = new org.jsecurity.authc.SimpleAccount((org.jsecurity.subject.PrincipalCollection)var34, (java.lang.Object)var39, var52);
    java.io.InputStream var55 = org.jsecurity.util.ClassUtils.getResourceAsStream("");
    java.lang.Object[] var56 = new java.lang.Object[] { var55};
    java.util.List var57 = org.jsecurity.util.CollectionUtils.asList(var56);
    org.jsecurity.authc.pam.ModularRealmAuthenticator var58 = new org.jsecurity.authc.pam.ModularRealmAuthenticator(var57);
    org.jsecurity.subject.SimplePrincipalCollection var60 = new org.jsecurity.subject.SimplePrincipalCollection((java.util.Collection)var57, "org.jsecurity.authz.UnauthorizedException: org.jsecurity.session.ExpiredSessionException: ");
    org.jsecurity.io.ResourceException var64 = new org.jsecurity.io.ResourceException("hi!");
    org.jsecurity.authc.UnknownAccountException var65 = new org.jsecurity.authc.UnknownAccountException((java.lang.Throwable)var64);
    org.jsecurity.session.StoppedSessionException var66 = new org.jsecurity.session.StoppedSessionException("dd\uFFFD", (java.io.Serializable)var64);
    org.jsecurity.session.UnknownSessionException var67 = new org.jsecurity.session.UnknownSessionException("org.jsecurity.authz.UnauthorizedException: org.jsecurity.session.ExpiredSessionException: ", (java.lang.Throwable)var64);
    boolean var68 = var60.equals((java.lang.Object)var64);
    var34.addAll((org.jsecurity.subject.PrincipalCollection)var60);
    org.jsecurity.session.UnknownSessionException var74 = new org.jsecurity.session.UnknownSessionException("dd\uFFFD", (java.io.Serializable)100.0f);
    org.jsecurity.subject.SubjectException var75 = new org.jsecurity.subject.SubjectException("dd\uFFFD", (java.lang.Throwable)var74);
    org.jsecurity.io.SerializationException var76 = new org.jsecurity.io.SerializationException("", (java.lang.Throwable)var75);
    java.lang.Throwable[] var77 = var75.getSuppressed();
    java.util.List var78 = org.jsecurity.util.CollectionUtils.asList((java.lang.Object[])var77);
    boolean var79 = var0.isPermittedAll((org.jsecurity.subject.PrincipalCollection)var34, (java.util.Collection)var78);
    org.jsecurity.session.mgt.SessionManager var80 = var0.getSessionManager();
    org.jsecurity.subject.DelegatingSubject var81 = new org.jsecurity.subject.DelegatingSubject((org.jsecurity.mgt.SecurityManager)var0);
    var81.logout();
    java.lang.Object var83 = var81.getPrincipal();
    org.jsecurity.session.UnknownSessionException var88 = new org.jsecurity.session.UnknownSessionException("dd\uFFFD", (java.io.Serializable)100.0f);
    org.jsecurity.subject.SubjectException var89 = new org.jsecurity.subject.SubjectException("dd\uFFFD", (java.lang.Throwable)var88);
    org.jsecurity.io.SerializationException var90 = new org.jsecurity.io.SerializationException("", (java.lang.Throwable)var89);
    java.lang.Throwable[] var91 = var89.getSuppressed();
    java.util.List var92 = org.jsecurity.util.CollectionUtils.asList((java.lang.Object[])var91);
    org.jsecurity.authc.pam.ModularRealmAuthenticator var93 = new org.jsecurity.authc.pam.ModularRealmAuthenticator(var92);
    boolean var94 = var81.isPermittedAll((java.util.Collection)var92);
    org.jsecurity.subject.PrincipalCollection var95 = var81.getPrincipals();
    org.jsecurity.mgt.SecurityManager var96 = var81.getSecurityManager();
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var2);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var3);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var4);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var12);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var13);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var14);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var26);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var38);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var39);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var41);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var42);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var43);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var51);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var52);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var55);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var56);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var57);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var68 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var77);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var78);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var79 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var80);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var83);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var91);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var92);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var94 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var95);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var96);

  }

  public void test270() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest6.test270");


    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      org.jsecurity.crypto.hash.Md2Hash var1 = org.jsecurity.crypto.hash.Md2Hash.fromHexString("7b7e7064-e6e2-4d24-b7a8-75737ba67eb6");
      fail("Expected exception of type java.lang.IllegalArgumentException");
    } catch (java.lang.IllegalArgumentException e) {
      // Expected exception.
    }

  }

  public void test271() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest6.test271");


    org.jsecurity.authc.AccountException var4 = new org.jsecurity.authc.AccountException("hi!");
    org.jsecurity.authc.IncorrectCredentialsException var5 = new org.jsecurity.authc.IncorrectCredentialsException((java.lang.Throwable)var4);
    org.jsecurity.session.ExpiredSessionException var6 = new org.jsecurity.session.ExpiredSessionException("org.jsecurity.authz.UnauthorizedException: org.jsecurity.session.ExpiredSessionException: ", (java.io.Serializable)var4);
    org.jsecurity.session.InvalidSessionException var7 = new org.jsecurity.session.InvalidSessionException("a2b823b1e72eae2b727289df8a00a89df8a0bab6ad8a89c4c5c7a9b62a270000", (java.lang.Throwable)var4);
    org.jsecurity.session.StoppedSessionException var8 = new org.jsecurity.session.StoppedSessionException("ccb16549-499f-4a61-86b4-d3deaf687243", (java.lang.Throwable)var4);

  }

  public void test272() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest6.test272");


    org.jsecurity.session.mgt.SimpleSession var0 = new org.jsecurity.session.mgt.SimpleSession();
    java.util.Date var1 = var0.getLastAccessTime();
    boolean var2 = var0.isValid();
    org.jsecurity.session.ProxiedSession var3 = new org.jsecurity.session.ProxiedSession((org.jsecurity.session.Session)var0);
    var0.touch();
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var2 == true);

  }

  public void test273() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest6.test273");


    org.jsecurity.authc.pam.AllSuccessfulModularAuthenticationStrategy var0 = new org.jsecurity.authc.pam.AllSuccessfulModularAuthenticationStrategy();
    char[] var2 = new char[] { };
    org.jsecurity.authc.UsernamePasswordToken var4 = new org.jsecurity.authc.UsernamePasswordToken("hi!", var2, true);
    org.jsecurity.authc.SimpleAccount var5 = new org.jsecurity.authc.SimpleAccount();
    var5.setCredentialsExpired(false);
    boolean var8 = var5.isLocked();
    org.jsecurity.authc.AuthenticationInfo var9 = var0.afterAllAttempts((org.jsecurity.authc.AuthenticationToken)var4, (org.jsecurity.authc.AuthenticationInfo)var5);
    org.jsecurity.realm.activedirectory.ActiveDirectoryRealm var10 = new org.jsecurity.realm.activedirectory.ActiveDirectoryRealm();
    org.jsecurity.authc.credential.Sha256CredentialsMatcher var11 = new org.jsecurity.authc.credential.Sha256CredentialsMatcher();
    var10.setCredentialsMatcher((org.jsecurity.authc.credential.CredentialsMatcher)var11);
    java.lang.String var13 = var10.getAuthorizationCacheName();
    var10.setUrl("hi!");
    org.jsecurity.io.IniResource var16 = new org.jsecurity.io.IniResource();
    java.util.Map var17 = var16.getSections();
    java.util.Map var18 = var16.getSections();
    var10.setGroupRolesMap(var18);
    org.jsecurity.authc.UsernamePasswordToken var23 = new org.jsecurity.authc.UsernamePasswordToken("ZGT/", "org.jsecurity.config.ConfigurationException: dd\uFFFD", true);
    org.jsecurity.session.UnknownSessionException var28 = new org.jsecurity.session.UnknownSessionException("dd\uFFFD", (java.io.Serializable)100.0f);
    org.jsecurity.subject.SubjectException var29 = new org.jsecurity.subject.SubjectException("dd\uFFFD", (java.lang.Throwable)var28);
    org.jsecurity.io.SerializationException var30 = new org.jsecurity.io.SerializationException("", (java.lang.Throwable)var29);
    java.lang.Throwable[] var31 = var29.getSuppressed();
    java.lang.Throwable[] var32 = var29.getSuppressed();
    org.jsecurity.authz.SimpleAuthorizationInfo var35 = new org.jsecurity.authz.SimpleAuthorizationInfo();
    var35.addRole("a2b823b1e72eae2b727289df8a00a89df8a0bab6ad8a89c4c5c7a9b62a270000");
    org.jsecurity.session.UnknownSessionException var42 = new org.jsecurity.session.UnknownSessionException("dd\uFFFD", (java.io.Serializable)100.0f);
    org.jsecurity.subject.SubjectException var43 = new org.jsecurity.subject.SubjectException("dd\uFFFD", (java.lang.Throwable)var42);
    org.jsecurity.io.SerializationException var44 = new org.jsecurity.io.SerializationException("", (java.lang.Throwable)var43);
    java.lang.Throwable[] var45 = var43.getSuppressed();
    java.util.Set var46 = org.jsecurity.util.CollectionUtils.asSet((java.lang.Object[])var45);
    var35.addRoles((java.util.Collection)var46);
    java.io.InputStream var49 = org.jsecurity.util.ClassUtils.getResourceAsStream("");
    java.lang.Object[] var50 = new java.lang.Object[] { var49};
    java.util.List var51 = org.jsecurity.util.CollectionUtils.asList(var50);
    org.jsecurity.authc.pam.ModularRealmAuthenticator var52 = new org.jsecurity.authc.pam.ModularRealmAuthenticator(var51);
    org.jsecurity.subject.SimplePrincipalCollection var54 = new org.jsecurity.subject.SimplePrincipalCollection((java.util.Collection)var51, "org.jsecurity.authz.UnauthorizedException: org.jsecurity.session.ExpiredSessionException: ");
    org.jsecurity.session.UnknownSessionException var59 = new org.jsecurity.session.UnknownSessionException("dd\uFFFD", (java.io.Serializable)100.0f);
    org.jsecurity.session.SessionException var61 = new org.jsecurity.session.SessionException("dd\uFFFD", (java.lang.Throwable)var59, (java.io.Serializable)0);
    org.jsecurity.session.SessionException var62 = new org.jsecurity.session.SessionException("dd\uFFFD", (java.lang.Throwable)var59);
    var54.add((java.lang.Object)var62, "org.jsecurity.config.ConfigurationException: dd\uFFFD");
    java.util.Set var65 = var54.asSet();
    org.jsecurity.authz.SimpleAuthorizingAccount var66 = new org.jsecurity.authz.SimpleAuthorizingAccount((java.lang.Object)var32, (java.lang.Object)"\u0000\u0000\u0000", "\u0000\u0000\u0000", var46, var65);
    org.jsecurity.authz.SimpleRole var68 = var66.getRole("\u0000\u0000\u0000");
    java.io.InputStream var70 = org.jsecurity.util.ClassUtils.getResourceAsStream("");
    java.lang.Object[] var71 = new java.lang.Object[] { var70};
    java.util.List var72 = org.jsecurity.util.CollectionUtils.asList(var71);
    org.jsecurity.authc.pam.ModularRealmAuthenticator var73 = new org.jsecurity.authc.pam.ModularRealmAuthenticator(var72);
    org.jsecurity.subject.SimplePrincipalCollection var75 = new org.jsecurity.subject.SimplePrincipalCollection((java.util.Collection)var72, "org.jsecurity.authz.UnauthorizedException: org.jsecurity.session.ExpiredSessionException: ");
    org.jsecurity.session.UnknownSessionException var80 = new org.jsecurity.session.UnknownSessionException("dd\uFFFD", (java.io.Serializable)100.0f);
    org.jsecurity.session.SessionException var82 = new org.jsecurity.session.SessionException("dd\uFFFD", (java.lang.Throwable)var80, (java.io.Serializable)0);
    org.jsecurity.session.SessionException var83 = new org.jsecurity.session.SessionException("dd\uFFFD", (java.lang.Throwable)var80);
    var75.add((java.lang.Object)var83, "org.jsecurity.config.ConfigurationException: dd\uFFFD");
    java.util.Set var86 = var75.asSet();
    var66.setStringPermissions(var86);
    org.jsecurity.authc.AuthenticationInfo var88 = var0.beforeAttempt((org.jsecurity.realm.Realm)var10, (org.jsecurity.authc.AuthenticationToken)var23, (org.jsecurity.authc.AuthenticationInfo)var66);
    org.jsecurity.mgt.DefaultSecurityManager var89 = new org.jsecurity.mgt.DefaultSecurityManager((org.jsecurity.realm.Realm)var10);
    org.jsecurity.subject.Subject var90 = var89.getSubject();
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var2);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var8 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var9);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var13);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var17);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var18);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var31);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var32);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var45);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var46);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var49);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var50);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var51);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var65);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var68);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var70);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var71);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var72);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var86);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var88);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var90);

  }

  public void test274() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest6.test274");


    org.jsecurity.cache.HashtableCache var1 = new org.jsecurity.cache.HashtableCache("\u0000\u0000\u0000");
    org.jsecurity.session.mgt.SimpleSession var2 = new org.jsecurity.session.mgt.SimpleSession();
    var2.touch();
    org.jsecurity.authz.UnauthenticatedException var6 = new org.jsecurity.authz.UnauthenticatedException();
    org.jsecurity.config.UnresolveableReferenceException var7 = new org.jsecurity.config.UnresolveableReferenceException("", (java.lang.Throwable)var6);
    org.jsecurity.cache.CacheException var8 = new org.jsecurity.cache.CacheException("org.jsecurity.config.ConfigurationException: dd\uFFFD", (java.lang.Throwable)var6);
    java.lang.Object var9 = var2.removeAttribute((java.lang.Object)var8);
    org.jsecurity.mgt.DefaultSecurityManager var10 = new org.jsecurity.mgt.DefaultSecurityManager();
    org.jsecurity.authc.pam.AllSuccessfulModularAuthenticationStrategy var11 = new org.jsecurity.authc.pam.AllSuccessfulModularAuthenticationStrategy();
    org.jsecurity.authc.pam.AllSuccessfulModularAuthenticationStrategy var12 = new org.jsecurity.authc.pam.AllSuccessfulModularAuthenticationStrategy();
    char[] var14 = new char[] { };
    org.jsecurity.authc.UsernamePasswordToken var16 = new org.jsecurity.authc.UsernamePasswordToken("hi!", var14, true);
    org.jsecurity.authc.SimpleAccount var17 = new org.jsecurity.authc.SimpleAccount();
    var17.setCredentialsExpired(false);
    boolean var20 = var17.isLocked();
    org.jsecurity.authc.AuthenticationInfo var21 = var12.afterAllAttempts((org.jsecurity.authc.AuthenticationToken)var16, (org.jsecurity.authc.AuthenticationInfo)var17);
    char[] var25 = new char[] { '4', '#'};
    org.jsecurity.authc.UsernamePasswordToken var26 = new org.jsecurity.authc.UsernamePasswordToken("\u0000\u0000", var25);
    org.jsecurity.authc.SimpleAccount var27 = new org.jsecurity.authc.SimpleAccount();
    var27.setCredentialsExpired(false);
    var27.setCredentialsExpired(false);
    boolean var32 = var27.isCredentialsExpired();
    org.jsecurity.authc.AuthenticationInfo var33 = var12.afterAllAttempts((org.jsecurity.authc.AuthenticationToken)var26, (org.jsecurity.authc.AuthenticationInfo)var27);
    org.jsecurity.authz.UnauthenticatedException var37 = new org.jsecurity.authz.UnauthenticatedException();
    org.jsecurity.config.UnresolveableReferenceException var38 = new org.jsecurity.config.UnresolveableReferenceException("", (java.lang.Throwable)var37);
    org.jsecurity.cache.CacheException var39 = new org.jsecurity.cache.CacheException("org.jsecurity.config.ConfigurationException: dd\uFFFD", (java.lang.Throwable)var37);
    org.jsecurity.authc.SimpleAuthenticationInfo var41 = new org.jsecurity.authc.SimpleAuthenticationInfo((java.lang.Object)"org.jsecurity.config.ConfigurationException: dd\uFFFD", (java.lang.Object)var39, "a2b823b1e72eae2b727289df8a00a89df8a0bab6ad8a89c4c5c7a9b62a270000");
    org.jsecurity.subject.PrincipalCollection var42 = var41.getPrincipals();
    org.jsecurity.authc.AuthenticationInfo var43 = var11.afterAllAttempts((org.jsecurity.authc.AuthenticationToken)var26, (org.jsecurity.authc.AuthenticationInfo)var41);
    var10.setModularAuthenticationStrategy((org.jsecurity.authc.pam.ModularAuthenticationStrategy)var11);
    org.jsecurity.subject.RememberMeManager var45 = var10.getRememberMeManager();
    org.jsecurity.authc.pam.ModularRealmAuthenticator var46 = new org.jsecurity.authc.pam.ModularRealmAuthenticator();
    var10.setAuthenticator((org.jsecurity.authc.Authenticator)var46);
    var1.put((java.lang.Object)var2, (java.lang.Object)var46);
    java.lang.String var49 = var1.toString();
    org.jsecurity.mgt.DefaultSecurityManager var50 = new org.jsecurity.mgt.DefaultSecurityManager();
    org.jsecurity.authz.permission.WildcardPermissionResolver var51 = new org.jsecurity.authz.permission.WildcardPermissionResolver();
    var50.setPermissionResolver((org.jsecurity.authz.permission.PermissionResolver)var51);
    org.jsecurity.cache.CacheManager var53 = var50.getCacheManager();
    org.jsecurity.authc.Authenticator var54 = var50.getAuthenticator();
    var1.remove((java.lang.Object)var50);
    org.jsecurity.cache.CacheManager var56 = var50.getCacheManager();
    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      var50.setRememberMeCipherKeyBase64("b6cd6008-ae80-4bfd-ae0c-5041e0198a79");
      fail("Expected exception of type java.lang.IllegalStateException");
    } catch (java.lang.IllegalStateException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var9);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var14);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var20 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var21);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var25);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var32 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var33);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var42);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var43);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var45);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var49 + "' != '" + "HashtableCache [\u0000\u0000\u0000]"+ "'", var49.equals("HashtableCache [\u0000\u0000\u0000]"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var53);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var54);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var56);

  }

  public void test275() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest6.test275");


    org.jsecurity.authz.permission.WildcardPermission var3 = new org.jsecurity.authz.permission.WildcardPermission("a3e14b98-1050-4bcc-8787-431663db8814", false);
    org.jsecurity.config.IniConfiguration var4 = new org.jsecurity.config.IniConfiguration();
    var4.setConfigUrl("hi!");
    var4.setConfig("org.jsecurity.realm.SimpleAccountRealm-52-authorization");
    org.jsecurity.mgt.SecurityManager var9 = var4.getSecurityManager();
    org.jsecurity.realm.text.TextConfigurationRealm var11 = new org.jsecurity.realm.text.TextConfigurationRealm();
    java.io.InputStream var13 = org.jsecurity.util.ClassUtils.getResourceAsStream("");
    java.lang.Object[] var14 = new java.lang.Object[] { var13};
    java.util.List var15 = org.jsecurity.util.CollectionUtils.asList(var14);
    org.jsecurity.authc.pam.ModularRealmAuthenticator var16 = new org.jsecurity.authc.pam.ModularRealmAuthenticator(var15);
    org.jsecurity.subject.SimplePrincipalCollection var18 = new org.jsecurity.subject.SimplePrincipalCollection((java.util.Collection)var15, "org.jsecurity.authz.UnauthorizedException: org.jsecurity.session.ExpiredSessionException: ");
    org.jsecurity.session.UnknownSessionException var23 = new org.jsecurity.session.UnknownSessionException("dd\uFFFD", (java.io.Serializable)100.0f);
    org.jsecurity.session.SessionException var25 = new org.jsecurity.session.SessionException("dd\uFFFD", (java.lang.Throwable)var23, (java.io.Serializable)0);
    org.jsecurity.session.SessionException var26 = new org.jsecurity.session.SessionException("dd\uFFFD", (java.lang.Throwable)var23);
    var18.add((java.lang.Object)var26, "org.jsecurity.config.ConfigurationException: dd\uFFFD");
    var11.onLogout((org.jsecurity.subject.PrincipalCollection)var18);
    org.jsecurity.authc.ExpiredCredentialsException var31 = new org.jsecurity.authc.ExpiredCredentialsException();
    org.jsecurity.session.ExpiredSessionException var32 = new org.jsecurity.session.ExpiredSessionException("", (java.lang.Throwable)var31);
    java.lang.Throwable[] var33 = var32.getSuppressed();
    org.jsecurity.io.ResourceException var34 = new org.jsecurity.io.ResourceException((java.lang.Throwable)var32);
    org.jsecurity.authc.SimpleAuthenticationInfo var35 = new org.jsecurity.authc.SimpleAuthenticationInfo((org.jsecurity.subject.PrincipalCollection)var18, (java.lang.Object)var32);
    java.util.Set var36 = var18.getRealmNames();
    org.jsecurity.authc.pam.ModularRealmAuthenticator var37 = new org.jsecurity.authc.pam.ModularRealmAuthenticator();
    org.jsecurity.authz.permission.InvalidPermissionStringException var40 = new org.jsecurity.authz.permission.InvalidPermissionStringException("", "dd\uFFFD");
    org.jsecurity.JSecurityException var42 = new org.jsecurity.JSecurityException("");
    org.jsecurity.authc.SimpleAuthenticationInfo var44 = new org.jsecurity.authc.SimpleAuthenticationInfo((java.lang.Object)var40, (java.lang.Object)"", "org.jsecurity.authz.UnauthorizedException: org.jsecurity.session.ExpiredSessionException: ");
    org.jsecurity.subject.PrincipalCollection var45 = var44.getPrincipals();
    var37.onLogout(var45);
    org.jsecurity.session.UnknownSessionException var51 = new org.jsecurity.session.UnknownSessionException("dd\uFFFD", (java.io.Serializable)100.0f);
    org.jsecurity.subject.SubjectException var52 = new org.jsecurity.subject.SubjectException("dd\uFFFD", (java.lang.Throwable)var51);
    org.jsecurity.io.SerializationException var53 = new org.jsecurity.io.SerializationException("", (java.lang.Throwable)var52);
    java.lang.Throwable[] var54 = var52.getSuppressed();
    java.lang.Throwable[] var55 = var52.getSuppressed();
    org.jsecurity.authz.SimpleAuthorizationInfo var58 = new org.jsecurity.authz.SimpleAuthorizationInfo();
    var58.addRole("a2b823b1e72eae2b727289df8a00a89df8a0bab6ad8a89c4c5c7a9b62a270000");
    org.jsecurity.session.UnknownSessionException var65 = new org.jsecurity.session.UnknownSessionException("dd\uFFFD", (java.io.Serializable)100.0f);
    org.jsecurity.subject.SubjectException var66 = new org.jsecurity.subject.SubjectException("dd\uFFFD", (java.lang.Throwable)var65);
    org.jsecurity.io.SerializationException var67 = new org.jsecurity.io.SerializationException("", (java.lang.Throwable)var66);
    java.lang.Throwable[] var68 = var66.getSuppressed();
    java.util.Set var69 = org.jsecurity.util.CollectionUtils.asSet((java.lang.Object[])var68);
    var58.addRoles((java.util.Collection)var69);
    java.io.InputStream var72 = org.jsecurity.util.ClassUtils.getResourceAsStream("");
    java.lang.Object[] var73 = new java.lang.Object[] { var72};
    java.util.List var74 = org.jsecurity.util.CollectionUtils.asList(var73);
    org.jsecurity.authc.pam.ModularRealmAuthenticator var75 = new org.jsecurity.authc.pam.ModularRealmAuthenticator(var74);
    org.jsecurity.subject.SimplePrincipalCollection var77 = new org.jsecurity.subject.SimplePrincipalCollection((java.util.Collection)var74, "org.jsecurity.authz.UnauthorizedException: org.jsecurity.session.ExpiredSessionException: ");
    org.jsecurity.session.UnknownSessionException var82 = new org.jsecurity.session.UnknownSessionException("dd\uFFFD", (java.io.Serializable)100.0f);
    org.jsecurity.session.SessionException var84 = new org.jsecurity.session.SessionException("dd\uFFFD", (java.lang.Throwable)var82, (java.io.Serializable)0);
    org.jsecurity.session.SessionException var85 = new org.jsecurity.session.SessionException("dd\uFFFD", (java.lang.Throwable)var82);
    var77.add((java.lang.Object)var85, "org.jsecurity.config.ConfigurationException: dd\uFFFD");
    java.util.Set var88 = var77.asSet();
    org.jsecurity.authz.SimpleAuthorizingAccount var89 = new org.jsecurity.authz.SimpleAuthorizingAccount((java.lang.Object)var55, (java.lang.Object)"\u0000\u0000\u0000", "\u0000\u0000\u0000", var69, var88);
    var37.setRealms((java.util.Collection)var88);
    org.jsecurity.authc.SimpleAccount var91 = new org.jsecurity.authc.SimpleAccount((java.lang.Object)var3, (java.lang.Object)var4, "\uFFFD\uFFFD#\uFFFD\uFFFD.\uFFFD+r\uFFFD\u6959(\uFFFD\uFFFDW\uFFFDq\uFFFD.\uFFFD\uFFFD^jY\uFFFDj\uFFFDa\uFFFD\uFFFD\uFFFDj\u0628\u0000", var36, var88);
    org.jsecurity.authz.SimpleRole var92 = new org.jsecurity.authz.SimpleRole("a2b823b1e72eae2b727289df8a00a89df8a0bab6ad8a89c4c5c7a9b62a270000", var36);
    java.lang.String var93 = var92.getName();
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var9);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var13);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var14);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var15);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var33);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var36);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var45);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var54);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var55);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var68);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var69);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var72);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var73);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var74);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var88);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var93 + "' != '" + "a2b823b1e72eae2b727289df8a00a89df8a0bab6ad8a89c4c5c7a9b62a270000"+ "'", var93.equals("a2b823b1e72eae2b727289df8a00a89df8a0bab6ad8a89c4c5c7a9b62a270000"));

  }

  public void test276() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest6.test276");


    org.jsecurity.cache.CacheException var1 = new org.jsecurity.cache.CacheException("f9548f9e-497e-41ec-97ca-89ede08e20b0");

  }

  public void test277() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest6.test277");


    org.jsecurity.authc.IncorrectCredentialsException var1 = new org.jsecurity.authc.IncorrectCredentialsException("\u0000\u0000\u0000");
    org.jsecurity.subject.SubjectException var2 = new org.jsecurity.subject.SubjectException((java.lang.Throwable)var1);

  }

  public void test278() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest6.test278");


    org.jsecurity.authz.SimpleRole var0 = new org.jsecurity.authz.SimpleRole();
    org.jsecurity.authz.SimpleAuthorizationInfo var1 = new org.jsecurity.authz.SimpleAuthorizationInfo();
    var1.addRole("a2b823b1e72eae2b727289df8a00a89df8a0bab6ad8a89c4c5c7a9b62a270000");
    org.jsecurity.session.UnknownSessionException var8 = new org.jsecurity.session.UnknownSessionException("dd\uFFFD", (java.io.Serializable)100.0f);
    org.jsecurity.subject.SubjectException var9 = new org.jsecurity.subject.SubjectException("dd\uFFFD", (java.lang.Throwable)var8);
    org.jsecurity.io.SerializationException var10 = new org.jsecurity.io.SerializationException("", (java.lang.Throwable)var9);
    java.lang.Throwable[] var11 = var9.getSuppressed();
    java.util.Set var12 = org.jsecurity.util.CollectionUtils.asSet((java.lang.Object[])var11);
    var1.addRoles((java.util.Collection)var12);
    var0.addAll((java.util.Collection)var12);
    java.lang.String var15 = var0.toString();
    org.jsecurity.authz.permission.AllPermission var16 = new org.jsecurity.authz.permission.AllPermission();
    org.jsecurity.authz.SimpleRole var18 = new org.jsecurity.authz.SimpleRole();
    org.jsecurity.authz.permission.WildcardPermission var21 = new org.jsecurity.authz.permission.WildcardPermission("hi!", false);
    boolean var22 = var18.isPermitted((org.jsecurity.authz.Permission)var21);
    org.jsecurity.session.InvalidSessionException var23 = new org.jsecurity.session.InvalidSessionException("org.jsecurity.config.ConfigurationException: dd\uFFFD", (java.io.Serializable)var21);
    org.jsecurity.authz.SimpleRole var24 = new org.jsecurity.authz.SimpleRole();
    org.jsecurity.authz.permission.WildcardPermission var27 = new org.jsecurity.authz.permission.WildcardPermission("hi!", false);
    boolean var28 = var24.isPermitted((org.jsecurity.authz.Permission)var27);
    boolean var29 = var21.implies((org.jsecurity.authz.Permission)var27);
    boolean var30 = var16.implies((org.jsecurity.authz.Permission)var27);
    org.jsecurity.authz.SimpleRole var32 = new org.jsecurity.authz.SimpleRole();
    org.jsecurity.authz.permission.WildcardPermission var35 = new org.jsecurity.authz.permission.WildcardPermission("hi!", false);
    boolean var36 = var32.isPermitted((org.jsecurity.authz.Permission)var35);
    org.jsecurity.session.InvalidSessionException var37 = new org.jsecurity.session.InvalidSessionException("org.jsecurity.config.ConfigurationException: dd\uFFFD", (java.io.Serializable)var35);
    org.jsecurity.authz.SimpleRole var38 = new org.jsecurity.authz.SimpleRole();
    org.jsecurity.authz.permission.WildcardPermission var41 = new org.jsecurity.authz.permission.WildcardPermission("hi!", false);
    boolean var42 = var38.isPermitted((org.jsecurity.authz.Permission)var41);
    boolean var43 = var35.implies((org.jsecurity.authz.Permission)var41);
    boolean var44 = var16.implies((org.jsecurity.authz.Permission)var35);
    org.jsecurity.authz.permission.WildcardPermission var47 = new org.jsecurity.authz.permission.WildcardPermission("6464ff", false);
    boolean var48 = var16.implies((org.jsecurity.authz.Permission)var47);
    boolean var49 = var0.isPermitted((org.jsecurity.authz.Permission)var47);
    java.lang.String var50 = var0.getName();
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var11);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var12);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var15);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var22 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var28 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var29 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var30 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var36 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var42 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var43 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var44 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var48 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var49 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var50);

  }

  public void test279() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest6.test279");


    boolean var2 = org.jsecurity.util.StringUtils.startsWithIgnoreCase("647c23b9-e927-453d-b32e-9778913244f6", "o\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFDw8\u3B9A\uFFFDM\uFFFD\uFFFDg\uFFFD\uFFFD\u07BC\u059C");
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var2 == false);

  }

  public void test280() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest6.test280");


    org.jsecurity.authc.UsernamePasswordToken var3 = new org.jsecurity.authc.UsernamePasswordToken("5ebafa0a-d29c-47fa-beb2-9f9ab78ef270", "49932616-87e3-49f2-a9ff-1e3516355d97", true);

  }

  public void test281() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest6.test281");


    org.jsecurity.session.mgt.DefaultSessionManager var0 = new org.jsecurity.session.mgt.DefaultSessionManager();
    org.jsecurity.session.mgt.eis.MemorySessionDAO var1 = new org.jsecurity.session.mgt.eis.MemorySessionDAO();
    org.jsecurity.cache.Cache var2 = var1.getActiveSessionsCache();
    org.jsecurity.cache.CacheManager var3 = var1.getCacheManager();
    org.jsecurity.cache.HashtableCacheManager var4 = new org.jsecurity.cache.HashtableCacheManager();
    org.jsecurity.cache.Cache var6 = var4.getCache("\u0000\u0000");
    var1.setActiveSessionsCache(var6);
    java.io.InputStream var9 = org.jsecurity.util.ClassUtils.getResourceAsStream("");
    java.lang.Object[] var10 = new java.lang.Object[] { var9};
    java.util.List var11 = org.jsecurity.util.CollectionUtils.asList(var10);
    org.jsecurity.authc.pam.ModularRealmAuthenticator var12 = new org.jsecurity.authc.pam.ModularRealmAuthenticator(var11);
    org.jsecurity.authc.pam.AllSuccessfulModularAuthenticationStrategy var13 = new org.jsecurity.authc.pam.AllSuccessfulModularAuthenticationStrategy();
    var12.setModularAuthenticationStrategy((org.jsecurity.authc.pam.ModularAuthenticationStrategy)var13);
    org.jsecurity.authz.SimpleAuthorizationInfo var15 = new org.jsecurity.authz.SimpleAuthorizationInfo();
    var15.addStringPermission("hi!");
    java.io.InputStream var19 = org.jsecurity.util.ClassUtils.getResourceAsStream("");
    java.lang.Object[] var20 = new java.lang.Object[] { var19};
    java.util.List var21 = org.jsecurity.util.CollectionUtils.asList(var20);
    var15.addRoles((java.util.Collection)var21);
    var12.setAuthenticationListeners((java.util.Collection)var21);
    org.jsecurity.realm.activedirectory.ActiveDirectoryRealm var24 = new org.jsecurity.realm.activedirectory.ActiveDirectoryRealm();
    var24.setPrincipalSuffix("");
    var12.setRealm((org.jsecurity.realm.Realm)var24);
    org.jsecurity.cache.HashtableCacheManager var28 = new org.jsecurity.cache.HashtableCacheManager();
    org.jsecurity.cache.Cache var30 = var28.getCache("\u0000\u0000");
    var24.setAuthorizationCache(var30);
    var1.setActiveSessionsCache(var30);
    org.jsecurity.session.mgt.SimpleSession var33 = new org.jsecurity.session.mgt.SimpleSession();
    java.io.Serializable var34 = var1.create((org.jsecurity.session.Session)var33);
    var0.setSessionDAO((org.jsecurity.session.mgt.eis.SessionDAO)var1);
    long var36 = var0.getSessionValidationInterval();
    long var37 = var0.getSessionValidationInterval();
    long var38 = var0.getGlobalSessionTimeout();
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var2);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var3);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var6);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var9);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var10);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var11);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var19);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var20);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var21);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var30);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var34 + "' != '" + "88edc3f1-a5ed-482b-96eb-842ec617c1a8"+ "'", var34.equals("88edc3f1-a5ed-482b-96eb-842ec617c1a8"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var36 == 3600000L);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var37 == 3600000L);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var38 == 1800000L);

  }

  public void test282() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest6.test282");


    org.jsecurity.session.mgt.eis.MemorySessionDAO var0 = new org.jsecurity.session.mgt.eis.MemorySessionDAO();
    org.jsecurity.cache.Cache var1 = var0.getActiveSessionsCache();
    org.jsecurity.cache.CacheManager var2 = var0.getCacheManager();
    org.jsecurity.cache.HashtableCacheManager var3 = new org.jsecurity.cache.HashtableCacheManager();
    org.jsecurity.cache.Cache var5 = var3.getCache("\u0000\u0000");
    var0.setActiveSessionsCache(var5);
    java.io.InputStream var8 = org.jsecurity.util.ClassUtils.getResourceAsStream("");
    java.lang.Object[] var9 = new java.lang.Object[] { var8};
    java.util.List var10 = org.jsecurity.util.CollectionUtils.asList(var9);
    org.jsecurity.authc.pam.ModularRealmAuthenticator var11 = new org.jsecurity.authc.pam.ModularRealmAuthenticator(var10);
    org.jsecurity.authc.pam.AllSuccessfulModularAuthenticationStrategy var12 = new org.jsecurity.authc.pam.AllSuccessfulModularAuthenticationStrategy();
    var11.setModularAuthenticationStrategy((org.jsecurity.authc.pam.ModularAuthenticationStrategy)var12);
    org.jsecurity.authz.SimpleAuthorizationInfo var14 = new org.jsecurity.authz.SimpleAuthorizationInfo();
    var14.addStringPermission("hi!");
    java.io.InputStream var18 = org.jsecurity.util.ClassUtils.getResourceAsStream("");
    java.lang.Object[] var19 = new java.lang.Object[] { var18};
    java.util.List var20 = org.jsecurity.util.CollectionUtils.asList(var19);
    var14.addRoles((java.util.Collection)var20);
    var11.setAuthenticationListeners((java.util.Collection)var20);
    org.jsecurity.realm.activedirectory.ActiveDirectoryRealm var23 = new org.jsecurity.realm.activedirectory.ActiveDirectoryRealm();
    var23.setPrincipalSuffix("");
    var11.setRealm((org.jsecurity.realm.Realm)var23);
    org.jsecurity.cache.HashtableCacheManager var27 = new org.jsecurity.cache.HashtableCacheManager();
    org.jsecurity.cache.Cache var29 = var27.getCache("\u0000\u0000");
    var23.setAuthorizationCache(var29);
    var0.setActiveSessionsCache(var29);
    org.jsecurity.session.mgt.SimpleSession var32 = new org.jsecurity.session.mgt.SimpleSession();
    java.io.Serializable var33 = var0.create((org.jsecurity.session.Session)var32);
    java.io.Serializable var34 = var32.getId();
    org.jsecurity.authc.credential.Md5CredentialsMatcher var35 = new org.jsecurity.authc.credential.Md5CredentialsMatcher();
    boolean var36 = var35.isHashSalted();
    boolean var37 = var35.isHashSalted();
    int var38 = var35.getHashIterations();
    java.lang.Object var39 = var32.removeAttribute((java.lang.Object)var35);
    org.jsecurity.session.mgt.SimpleSession var40 = new org.jsecurity.session.mgt.SimpleSession();
    java.util.Date var41 = var40.getLastAccessTime();
    var32.setStartTimestamp(var41);
    org.jsecurity.session.mgt.eis.MemorySessionDAO var43 = new org.jsecurity.session.mgt.eis.MemorySessionDAO();
    org.jsecurity.cache.Cache var44 = var43.getActiveSessionsCache();
    org.jsecurity.cache.CacheManager var45 = var43.getCacheManager();
    org.jsecurity.cache.HashtableCacheManager var46 = new org.jsecurity.cache.HashtableCacheManager();
    org.jsecurity.cache.Cache var48 = var46.getCache("\u0000\u0000");
    var43.setActiveSessionsCache(var48);
    java.io.InputStream var51 = org.jsecurity.util.ClassUtils.getResourceAsStream("");
    java.lang.Object[] var52 = new java.lang.Object[] { var51};
    java.util.List var53 = org.jsecurity.util.CollectionUtils.asList(var52);
    org.jsecurity.authc.pam.ModularRealmAuthenticator var54 = new org.jsecurity.authc.pam.ModularRealmAuthenticator(var53);
    org.jsecurity.authc.pam.AllSuccessfulModularAuthenticationStrategy var55 = new org.jsecurity.authc.pam.AllSuccessfulModularAuthenticationStrategy();
    var54.setModularAuthenticationStrategy((org.jsecurity.authc.pam.ModularAuthenticationStrategy)var55);
    org.jsecurity.authz.SimpleAuthorizationInfo var57 = new org.jsecurity.authz.SimpleAuthorizationInfo();
    var57.addStringPermission("hi!");
    java.io.InputStream var61 = org.jsecurity.util.ClassUtils.getResourceAsStream("");
    java.lang.Object[] var62 = new java.lang.Object[] { var61};
    java.util.List var63 = org.jsecurity.util.CollectionUtils.asList(var62);
    var57.addRoles((java.util.Collection)var63);
    var54.setAuthenticationListeners((java.util.Collection)var63);
    org.jsecurity.realm.activedirectory.ActiveDirectoryRealm var66 = new org.jsecurity.realm.activedirectory.ActiveDirectoryRealm();
    var66.setPrincipalSuffix("");
    var54.setRealm((org.jsecurity.realm.Realm)var66);
    org.jsecurity.cache.HashtableCacheManager var70 = new org.jsecurity.cache.HashtableCacheManager();
    org.jsecurity.cache.Cache var72 = var70.getCache("\u0000\u0000");
    var66.setAuthorizationCache(var72);
    var43.setActiveSessionsCache(var72);
    org.jsecurity.session.mgt.SimpleSession var75 = new org.jsecurity.session.mgt.SimpleSession();
    java.io.Serializable var76 = var43.create((org.jsecurity.session.Session)var75);
    org.jsecurity.session.mgt.SimpleSession var77 = new org.jsecurity.session.mgt.SimpleSession();
    var77.touch();
    var77.validate();
    org.jsecurity.session.mgt.SimpleSession var80 = new org.jsecurity.session.mgt.SimpleSession();
    var80.setTimeout((-1L));
    org.jsecurity.session.mgt.SimpleSession var83 = new org.jsecurity.session.mgt.SimpleSession();
    java.util.Date var84 = var83.getLastAccessTime();
    var80.setLastAccessTime(var84);
    org.jsecurity.session.mgt.SimpleSession var86 = new org.jsecurity.session.mgt.SimpleSession();
    java.util.Date var87 = var86.getLastAccessTime();
    var80.setStopTimestamp(var87);
    var77.setLastAccessTime(var87);
    var75.setLastAccessTime(var87);
    var32.setStartTimestamp(var87);
    org.jsecurity.authc.AccountException var93 = new org.jsecurity.authc.AccountException("ca73d1a4-706e-42e7-980f-896d3b153de8");
    java.lang.Object var94 = var32.removeAttribute((java.lang.Object)"ca73d1a4-706e-42e7-980f-896d3b153de8");
    boolean var95 = var32.isValid();
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var1);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var2);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var5);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var8);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var9);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var10);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var18);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var19);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var20);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var29);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var33 + "' != '" + "e7dc45da-4c70-42d0-985e-1e42a121028b"+ "'", var33.equals("e7dc45da-4c70-42d0-985e-1e42a121028b"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var34 + "' != '" + "e7dc45da-4c70-42d0-985e-1e42a121028b"+ "'", var34.equals("e7dc45da-4c70-42d0-985e-1e42a121028b"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var36 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var37 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var38 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var39);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var41);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var44);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var45);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var48);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var51);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var52);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var53);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var61);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var62);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var63);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var72);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var76 + "' != '" + "05ae36e8-96f2-4042-aeb6-dbacd70cb358"+ "'", var76.equals("05ae36e8-96f2-4042-aeb6-dbacd70cb358"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var84);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var87);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var94);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var95 == true);

  }

  public void test283() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest6.test283");


    byte[] var2 = new byte[] { (byte)(-1), (byte)10};
    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      char[] var4 = org.jsecurity.codec.CodecSupport.toChars(var2, "fb26d57a-4da8-4c2f-905b-b7c4bc888a13");
      fail("Expected exception of type org.jsecurity.codec.CodecException");
    } catch (org.jsecurity.codec.CodecException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var2);

  }

  public void test284() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest6.test284");


    org.jsecurity.authz.SimpleAuthorizationInfo var0 = new org.jsecurity.authz.SimpleAuthorizationInfo();
    java.util.Set var1 = var0.getStringPermissions();
    java.util.Set var2 = var0.getRoles();
    org.jsecurity.realm.text.TextConfigurationRealm var3 = new org.jsecurity.realm.text.TextConfigurationRealm();
    java.io.InputStream var5 = org.jsecurity.util.ClassUtils.getResourceAsStream("");
    java.lang.Object[] var6 = new java.lang.Object[] { var5};
    java.util.List var7 = org.jsecurity.util.CollectionUtils.asList(var6);
    org.jsecurity.authc.pam.ModularRealmAuthenticator var8 = new org.jsecurity.authc.pam.ModularRealmAuthenticator(var7);
    org.jsecurity.subject.SimplePrincipalCollection var10 = new org.jsecurity.subject.SimplePrincipalCollection((java.util.Collection)var7, "org.jsecurity.authz.UnauthorizedException: org.jsecurity.session.ExpiredSessionException: ");
    org.jsecurity.session.UnknownSessionException var15 = new org.jsecurity.session.UnknownSessionException("dd\uFFFD", (java.io.Serializable)100.0f);
    org.jsecurity.session.SessionException var17 = new org.jsecurity.session.SessionException("dd\uFFFD", (java.lang.Throwable)var15, (java.io.Serializable)0);
    org.jsecurity.session.SessionException var18 = new org.jsecurity.session.SessionException("dd\uFFFD", (java.lang.Throwable)var15);
    var10.add((java.lang.Object)var18, "org.jsecurity.config.ConfigurationException: dd\uFFFD");
    var3.onLogout((org.jsecurity.subject.PrincipalCollection)var10);
    java.util.Set var23 = org.jsecurity.util.PermissionUtils.toPermissionStrings("org.jsecurity.config.ConfigurationException: dd\uFFFD");
    org.jsecurity.authz.SimpleAuthorizationInfo var24 = new org.jsecurity.authz.SimpleAuthorizationInfo(var23);
    org.jsecurity.authz.SimpleAuthorizingAccount var25 = new org.jsecurity.authz.SimpleAuthorizingAccount((org.jsecurity.subject.PrincipalCollection)var10, (java.lang.Object)var23);
    org.jsecurity.authz.SimpleAuthorizationInfo var26 = new org.jsecurity.authz.SimpleAuthorizationInfo();
    var26.addRole("a2b823b1e72eae2b727289df8a00a89df8a0bab6ad8a89c4c5c7a9b62a270000");
    org.jsecurity.session.UnknownSessionException var33 = new org.jsecurity.session.UnknownSessionException("dd\uFFFD", (java.io.Serializable)100.0f);
    org.jsecurity.subject.SubjectException var34 = new org.jsecurity.subject.SubjectException("dd\uFFFD", (java.lang.Throwable)var33);
    org.jsecurity.io.SerializationException var35 = new org.jsecurity.io.SerializationException("", (java.lang.Throwable)var34);
    java.lang.Throwable[] var36 = var34.getSuppressed();
    java.util.Set var37 = org.jsecurity.util.CollectionUtils.asSet((java.lang.Object[])var36);
    var26.addRoles((java.util.Collection)var37);
    var25.checkPermissions((java.util.Collection)var37);
    var0.addObjectPermissions((java.util.Collection)var37);
    java.util.Set var41 = var0.getObjectPermissions();
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var1);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var2);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var5);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var6);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var7);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var23);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var36);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var37);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var41);

  }

  public void test285() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest6.test285");


    org.jsecurity.mgt.DefaultSecurityManager var0 = new org.jsecurity.mgt.DefaultSecurityManager();
    java.io.InputStream var2 = org.jsecurity.util.ClassUtils.getResourceAsStream("");
    java.lang.Object[] var3 = new java.lang.Object[] { var2};
    java.util.List var4 = org.jsecurity.util.CollectionUtils.asList(var3);
    org.jsecurity.authc.pam.ModularRealmAuthenticator var5 = new org.jsecurity.authc.pam.ModularRealmAuthenticator(var4);
    org.jsecurity.authc.pam.AllSuccessfulModularAuthenticationStrategy var6 = new org.jsecurity.authc.pam.AllSuccessfulModularAuthenticationStrategy();
    var5.setModularAuthenticationStrategy((org.jsecurity.authc.pam.ModularAuthenticationStrategy)var6);
    org.jsecurity.authz.SimpleAuthorizationInfo var8 = new org.jsecurity.authz.SimpleAuthorizationInfo();
    var8.addStringPermission("hi!");
    java.io.InputStream var12 = org.jsecurity.util.ClassUtils.getResourceAsStream("");
    java.lang.Object[] var13 = new java.lang.Object[] { var12};
    java.util.List var14 = org.jsecurity.util.CollectionUtils.asList(var13);
    var8.addRoles((java.util.Collection)var14);
    var5.setAuthenticationListeners((java.util.Collection)var14);
    var0.setSessionListeners((java.util.Collection)var14);
    org.jsecurity.authc.pam.ModularRealmAuthenticator var18 = new org.jsecurity.authc.pam.ModularRealmAuthenticator();
    org.jsecurity.authz.permission.InvalidPermissionStringException var21 = new org.jsecurity.authz.permission.InvalidPermissionStringException("", "dd\uFFFD");
    org.jsecurity.JSecurityException var23 = new org.jsecurity.JSecurityException("");
    org.jsecurity.authc.SimpleAuthenticationInfo var25 = new org.jsecurity.authc.SimpleAuthenticationInfo((java.lang.Object)var21, (java.lang.Object)"", "org.jsecurity.authz.UnauthorizedException: org.jsecurity.session.ExpiredSessionException: ");
    org.jsecurity.subject.PrincipalCollection var26 = var25.getPrincipals();
    var18.onLogout(var26);
    var0.setAuthenticator((org.jsecurity.authc.Authenticator)var18);
    org.jsecurity.codec.CodecException var31 = new org.jsecurity.codec.CodecException("dd\uFFFD");
    org.jsecurity.authc.ConcurrentAccessException var32 = new org.jsecurity.authc.ConcurrentAccessException("org.jsecurity.authz.UnauthorizedException: org.jsecurity.session.ExpiredSessionException: ", (java.lang.Throwable)var31);
    org.jsecurity.subject.SimplePrincipalCollection var34 = new org.jsecurity.subject.SimplePrincipalCollection((java.lang.Object)var31, "");
    org.jsecurity.authc.pam.FirstSuccessfulAuthenticationStrategy var35 = new org.jsecurity.authc.pam.FirstSuccessfulAuthenticationStrategy();
    org.jsecurity.authz.UnauthorizedException var37 = new org.jsecurity.authz.UnauthorizedException("org.jsecurity.config.ConfigurationException: dd\uFFFD");
    java.lang.Throwable[] var38 = var37.getSuppressed();
    java.util.List var39 = org.jsecurity.util.CollectionUtils.asList((java.lang.Object[])var38);
    org.jsecurity.authc.UsernamePasswordToken var40 = new org.jsecurity.authc.UsernamePasswordToken();
    java.lang.String var41 = var40.getUsername();
    java.net.InetAddress var42 = var40.getInetAddress();
    org.jsecurity.authc.AuthenticationInfo var43 = var35.beforeAllAttempts((java.util.Collection)var39, (org.jsecurity.authc.AuthenticationToken)var40);
    org.jsecurity.session.UnknownSessionException var48 = new org.jsecurity.session.UnknownSessionException("dd\uFFFD", (java.io.Serializable)100.0f);
    org.jsecurity.subject.SubjectException var49 = new org.jsecurity.subject.SubjectException("dd\uFFFD", (java.lang.Throwable)var48);
    org.jsecurity.io.SerializationException var50 = new org.jsecurity.io.SerializationException("", (java.lang.Throwable)var49);
    java.lang.Throwable[] var51 = var49.getSuppressed();
    java.util.Set var52 = org.jsecurity.util.CollectionUtils.asSet((java.lang.Object[])var51);
    org.jsecurity.authc.SimpleAccount var53 = new org.jsecurity.authc.SimpleAccount((org.jsecurity.subject.PrincipalCollection)var34, (java.lang.Object)var39, var52);
    java.io.InputStream var55 = org.jsecurity.util.ClassUtils.getResourceAsStream("");
    java.lang.Object[] var56 = new java.lang.Object[] { var55};
    java.util.List var57 = org.jsecurity.util.CollectionUtils.asList(var56);
    org.jsecurity.authc.pam.ModularRealmAuthenticator var58 = new org.jsecurity.authc.pam.ModularRealmAuthenticator(var57);
    org.jsecurity.subject.SimplePrincipalCollection var60 = new org.jsecurity.subject.SimplePrincipalCollection((java.util.Collection)var57, "org.jsecurity.authz.UnauthorizedException: org.jsecurity.session.ExpiredSessionException: ");
    org.jsecurity.io.ResourceException var64 = new org.jsecurity.io.ResourceException("hi!");
    org.jsecurity.authc.UnknownAccountException var65 = new org.jsecurity.authc.UnknownAccountException((java.lang.Throwable)var64);
    org.jsecurity.session.StoppedSessionException var66 = new org.jsecurity.session.StoppedSessionException("dd\uFFFD", (java.io.Serializable)var64);
    org.jsecurity.session.UnknownSessionException var67 = new org.jsecurity.session.UnknownSessionException("org.jsecurity.authz.UnauthorizedException: org.jsecurity.session.ExpiredSessionException: ", (java.lang.Throwable)var64);
    boolean var68 = var60.equals((java.lang.Object)var64);
    var34.addAll((org.jsecurity.subject.PrincipalCollection)var60);
    org.jsecurity.session.UnknownSessionException var74 = new org.jsecurity.session.UnknownSessionException("dd\uFFFD", (java.io.Serializable)100.0f);
    org.jsecurity.subject.SubjectException var75 = new org.jsecurity.subject.SubjectException("dd\uFFFD", (java.lang.Throwable)var74);
    org.jsecurity.io.SerializationException var76 = new org.jsecurity.io.SerializationException("", (java.lang.Throwable)var75);
    java.lang.Throwable[] var77 = var75.getSuppressed();
    java.util.List var78 = org.jsecurity.util.CollectionUtils.asList((java.lang.Object[])var77);
    boolean var79 = var0.isPermittedAll((org.jsecurity.subject.PrincipalCollection)var34, (java.util.Collection)var78);
    org.jsecurity.session.mgt.SessionManager var80 = var0.getSessionManager();
    org.jsecurity.subject.DelegatingSubject var81 = new org.jsecurity.subject.DelegatingSubject((org.jsecurity.mgt.SecurityManager)var0);
    java.net.InetAddress var82 = var81.getInetAddress();
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var2);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var3);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var4);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var12);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var13);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var14);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var26);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var38);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var39);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var41);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var42);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var43);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var51);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var52);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var55);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var56);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var57);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var68 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var77);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var78);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var79 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var80);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var82);

  }

  public void test286() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest6.test286");


    org.jsecurity.session.mgt.eis.MemorySessionDAO var0 = new org.jsecurity.session.mgt.eis.MemorySessionDAO();
    org.jsecurity.cache.Cache var1 = var0.getActiveSessionsCache();
    org.jsecurity.cache.CacheManager var2 = var0.getCacheManager();
    org.jsecurity.cache.HashtableCacheManager var3 = new org.jsecurity.cache.HashtableCacheManager();
    org.jsecurity.cache.Cache var5 = var3.getCache("\u0000\u0000");
    var0.setActiveSessionsCache(var5);
    java.io.InputStream var8 = org.jsecurity.util.ClassUtils.getResourceAsStream("");
    java.lang.Object[] var9 = new java.lang.Object[] { var8};
    java.util.List var10 = org.jsecurity.util.CollectionUtils.asList(var9);
    org.jsecurity.authc.pam.ModularRealmAuthenticator var11 = new org.jsecurity.authc.pam.ModularRealmAuthenticator(var10);
    org.jsecurity.authc.pam.AllSuccessfulModularAuthenticationStrategy var12 = new org.jsecurity.authc.pam.AllSuccessfulModularAuthenticationStrategy();
    var11.setModularAuthenticationStrategy((org.jsecurity.authc.pam.ModularAuthenticationStrategy)var12);
    org.jsecurity.authz.SimpleAuthorizationInfo var14 = new org.jsecurity.authz.SimpleAuthorizationInfo();
    var14.addStringPermission("hi!");
    java.io.InputStream var18 = org.jsecurity.util.ClassUtils.getResourceAsStream("");
    java.lang.Object[] var19 = new java.lang.Object[] { var18};
    java.util.List var20 = org.jsecurity.util.CollectionUtils.asList(var19);
    var14.addRoles((java.util.Collection)var20);
    var11.setAuthenticationListeners((java.util.Collection)var20);
    org.jsecurity.realm.activedirectory.ActiveDirectoryRealm var23 = new org.jsecurity.realm.activedirectory.ActiveDirectoryRealm();
    var23.setPrincipalSuffix("");
    var11.setRealm((org.jsecurity.realm.Realm)var23);
    org.jsecurity.cache.HashtableCacheManager var27 = new org.jsecurity.cache.HashtableCacheManager();
    org.jsecurity.cache.Cache var29 = var27.getCache("\u0000\u0000");
    var23.setAuthorizationCache(var29);
    var0.setActiveSessionsCache(var29);
    org.jsecurity.session.mgt.SimpleSession var32 = new org.jsecurity.session.mgt.SimpleSession();
    java.io.Serializable var33 = var0.create((org.jsecurity.session.Session)var32);
    org.jsecurity.session.mgt.SimpleSession var34 = new org.jsecurity.session.mgt.SimpleSession();
    var34.touch();
    org.jsecurity.authz.UnauthenticatedException var38 = new org.jsecurity.authz.UnauthenticatedException();
    org.jsecurity.config.UnresolveableReferenceException var39 = new org.jsecurity.config.UnresolveableReferenceException("", (java.lang.Throwable)var38);
    org.jsecurity.cache.CacheException var40 = new org.jsecurity.cache.CacheException("org.jsecurity.config.ConfigurationException: dd\uFFFD", (java.lang.Throwable)var38);
    java.lang.Object var41 = var34.removeAttribute((java.lang.Object)var40);
    org.jsecurity.session.mgt.eis.MemorySessionDAO var42 = new org.jsecurity.session.mgt.eis.MemorySessionDAO();
    org.jsecurity.cache.Cache var43 = var42.getActiveSessionsCache();
    org.jsecurity.cache.CacheManager var44 = var42.getCacheManager();
    org.jsecurity.cache.HashtableCacheManager var45 = new org.jsecurity.cache.HashtableCacheManager();
    org.jsecurity.cache.Cache var47 = var45.getCache("\u0000\u0000");
    var42.setActiveSessionsCache(var47);
    java.io.InputStream var50 = org.jsecurity.util.ClassUtils.getResourceAsStream("");
    java.lang.Object[] var51 = new java.lang.Object[] { var50};
    java.util.List var52 = org.jsecurity.util.CollectionUtils.asList(var51);
    org.jsecurity.authc.pam.ModularRealmAuthenticator var53 = new org.jsecurity.authc.pam.ModularRealmAuthenticator(var52);
    org.jsecurity.authc.pam.AllSuccessfulModularAuthenticationStrategy var54 = new org.jsecurity.authc.pam.AllSuccessfulModularAuthenticationStrategy();
    var53.setModularAuthenticationStrategy((org.jsecurity.authc.pam.ModularAuthenticationStrategy)var54);
    org.jsecurity.authz.SimpleAuthorizationInfo var56 = new org.jsecurity.authz.SimpleAuthorizationInfo();
    var56.addStringPermission("hi!");
    java.io.InputStream var60 = org.jsecurity.util.ClassUtils.getResourceAsStream("");
    java.lang.Object[] var61 = new java.lang.Object[] { var60};
    java.util.List var62 = org.jsecurity.util.CollectionUtils.asList(var61);
    var56.addRoles((java.util.Collection)var62);
    var53.setAuthenticationListeners((java.util.Collection)var62);
    org.jsecurity.realm.activedirectory.ActiveDirectoryRealm var65 = new org.jsecurity.realm.activedirectory.ActiveDirectoryRealm();
    var65.setPrincipalSuffix("");
    var53.setRealm((org.jsecurity.realm.Realm)var65);
    org.jsecurity.cache.HashtableCacheManager var69 = new org.jsecurity.cache.HashtableCacheManager();
    org.jsecurity.cache.Cache var71 = var69.getCache("\u0000\u0000");
    var65.setAuthorizationCache(var71);
    var42.setActiveSessionsCache(var71);
    org.jsecurity.session.mgt.SimpleSession var74 = new org.jsecurity.session.mgt.SimpleSession();
    java.io.Serializable var75 = var42.create((org.jsecurity.session.Session)var74);
    java.io.Serializable var76 = var74.getId();
    org.jsecurity.session.mgt.SimpleSession var77 = new org.jsecurity.session.mgt.SimpleSession();
    var77.touch();
    var77.validate();
    org.jsecurity.session.mgt.SimpleSession var80 = new org.jsecurity.session.mgt.SimpleSession();
    var80.setTimeout((-1L));
    org.jsecurity.session.mgt.SimpleSession var83 = new org.jsecurity.session.mgt.SimpleSession();
    java.util.Date var84 = var83.getLastAccessTime();
    var80.setLastAccessTime(var84);
    org.jsecurity.session.mgt.SimpleSession var86 = new org.jsecurity.session.mgt.SimpleSession();
    java.util.Date var87 = var86.getLastAccessTime();
    var80.setStopTimestamp(var87);
    var77.setLastAccessTime(var87);
    var74.setStartTimestamp(var87);
    var34.setStartTimestamp(var87);
    var34.validate();
    var34.setTimeout((-1L));
    var0.delete((org.jsecurity.session.Session)var34);
    java.util.Date var96 = var34.getStopTimestamp();
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var1);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var2);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var5);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var8);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var9);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var10);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var18);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var19);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var20);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var29);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var33 + "' != '" + "81fbc636-2120-4efe-835e-8115a44f2878"+ "'", var33.equals("81fbc636-2120-4efe-835e-8115a44f2878"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var41);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var43);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var44);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var47);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var50);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var51);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var52);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var60);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var61);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var62);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var71);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var75 + "' != '" + "a8820308-6191-428b-882d-c5f71f41e4c2"+ "'", var75.equals("a8820308-6191-428b-882d-c5f71f41e4c2"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var76 + "' != '" + "a8820308-6191-428b-882d-c5f71f41e4c2"+ "'", var76.equals("a8820308-6191-428b-882d-c5f71f41e4c2"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var84);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var87);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var96);

  }

  public void test287() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest6.test287");


    org.jsecurity.authc.ConcurrentAccessException var1 = new org.jsecurity.authc.ConcurrentAccessException("org.jsecurity.realm.SimpleAccountRealm-9-authorization");

  }

  public void test288() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest6.test288");


    org.jsecurity.realm.text.TextConfigurationRealm var0 = new org.jsecurity.realm.text.TextConfigurationRealm();
    org.jsecurity.realm.text.TextConfigurationRealm var1 = new org.jsecurity.realm.text.TextConfigurationRealm();
    java.io.InputStream var3 = org.jsecurity.util.ClassUtils.getResourceAsStream("");
    java.lang.Object[] var4 = new java.lang.Object[] { var3};
    java.util.List var5 = org.jsecurity.util.CollectionUtils.asList(var4);
    org.jsecurity.authc.pam.ModularRealmAuthenticator var6 = new org.jsecurity.authc.pam.ModularRealmAuthenticator(var5);
    org.jsecurity.subject.SimplePrincipalCollection var8 = new org.jsecurity.subject.SimplePrincipalCollection((java.util.Collection)var5, "org.jsecurity.authz.UnauthorizedException: org.jsecurity.session.ExpiredSessionException: ");
    org.jsecurity.session.UnknownSessionException var13 = new org.jsecurity.session.UnknownSessionException("dd\uFFFD", (java.io.Serializable)100.0f);
    org.jsecurity.session.SessionException var15 = new org.jsecurity.session.SessionException("dd\uFFFD", (java.lang.Throwable)var13, (java.io.Serializable)0);
    org.jsecurity.session.SessionException var16 = new org.jsecurity.session.SessionException("dd\uFFFD", (java.lang.Throwable)var13);
    var8.add((java.lang.Object)var16, "org.jsecurity.config.ConfigurationException: dd\uFFFD");
    var1.onLogout((org.jsecurity.subject.PrincipalCollection)var8);
    java.util.Collection var21 = var8.fromRealm("\u0000\u0000\u0000");
    var0.onLogout((org.jsecurity.subject.PrincipalCollection)var8);
    var0.setUserDefinitions("");
    java.lang.String var25 = var0.getName();
    org.jsecurity.authc.pam.ModularRealmAuthenticator var26 = new org.jsecurity.authc.pam.ModularRealmAuthenticator((org.jsecurity.realm.Realm)var0);
    java.io.InputStream var28 = org.jsecurity.util.ClassUtils.getResourceAsStream("");
    java.lang.Object[] var29 = new java.lang.Object[] { var28};
    java.util.List var30 = org.jsecurity.util.CollectionUtils.asList(var29);
    org.jsecurity.authc.pam.ModularRealmAuthenticator var31 = new org.jsecurity.authc.pam.ModularRealmAuthenticator(var30);
    org.jsecurity.subject.SimplePrincipalCollection var33 = new org.jsecurity.subject.SimplePrincipalCollection((java.util.Collection)var30, "org.jsecurity.authz.UnauthorizedException: org.jsecurity.session.ExpiredSessionException: ");
    java.util.List var34 = var33.asList();
    org.jsecurity.realm.activedirectory.ActiveDirectoryRealm var36 = new org.jsecurity.realm.activedirectory.ActiveDirectoryRealm();
    org.jsecurity.authc.credential.Sha256CredentialsMatcher var37 = new org.jsecurity.authc.credential.Sha256CredentialsMatcher();
    var36.setCredentialsMatcher((org.jsecurity.authc.credential.CredentialsMatcher)var37);
    java.lang.String var39 = var36.getAuthorizationCacheName();
    var36.setPrincipalSuffix("org.jsecurity.config.ConfigurationException: dd\uFFFD");
    org.jsecurity.authz.permission.PermissionResolver var42 = var36.getPermissionResolver();
    java.util.Set var43 = org.jsecurity.util.PermissionUtils.resolveDelimitedPermissions("NfxhYN7ItBfRAmDBmprtU73ghfEEPpcDJrHPkZ06wiY=", var42);
    var33.addAll((java.util.Collection)var43, "cff098b5-6d79-4f6d-93d3-148185d0b987");
    org.jsecurity.authz.aop.GuestAnnotationHandler var46 = new org.jsecurity.authz.aop.GuestAnnotationHandler();
    java.lang.Class var47 = var46.getAnnotationClass();
    java.lang.Object var48 = var33.oneByType(var47);
    var0.setAuthenticationTokenClass(var47);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var3);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var4);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var5);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var21);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var25 + "' != '" + "org.jsecurity.realm.text.TextConfigurationRealm_4077"+ "'", var25.equals("org.jsecurity.realm.text.TextConfigurationRealm_4077"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var28);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var29);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var30);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var34);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var39);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var42);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var43);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var47);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var48);

  }

  public void test289() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest6.test289");


    org.jsecurity.authz.UnauthorizedException var1 = new org.jsecurity.authz.UnauthorizedException("b18f10c6-edfc-4d71-956f-238dd07f8bd6");

  }

  public void test290() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest6.test290");


    org.jsecurity.authz.SimpleAuthorizationInfo var0 = new org.jsecurity.authz.SimpleAuthorizationInfo();
    var0.addRole("a2b823b1e72eae2b727289df8a00a89df8a0bab6ad8a89c4c5c7a9b62a270000");
    org.jsecurity.authz.SimpleAuthorizationInfo var3 = new org.jsecurity.authz.SimpleAuthorizationInfo();
    var3.addRole("a2b823b1e72eae2b727289df8a00a89df8a0bab6ad8a89c4c5c7a9b62a270000");
    org.jsecurity.session.UnknownSessionException var10 = new org.jsecurity.session.UnknownSessionException("dd\uFFFD", (java.io.Serializable)100.0f);
    org.jsecurity.subject.SubjectException var11 = new org.jsecurity.subject.SubjectException("dd\uFFFD", (java.lang.Throwable)var10);
    org.jsecurity.io.SerializationException var12 = new org.jsecurity.io.SerializationException("", (java.lang.Throwable)var11);
    java.lang.Throwable[] var13 = var11.getSuppressed();
    java.util.Set var14 = org.jsecurity.util.CollectionUtils.asSet((java.lang.Object[])var13);
    var3.addRoles((java.util.Collection)var14);
    var0.setObjectPermissions(var14);
    java.io.InputStream var18 = org.jsecurity.util.ClassUtils.getResourceAsStream("");
    java.lang.Object[] var19 = new java.lang.Object[] { var18};
    java.util.List var20 = org.jsecurity.util.CollectionUtils.asList(var19);
    org.jsecurity.authc.pam.ModularRealmAuthenticator var21 = new org.jsecurity.authc.pam.ModularRealmAuthenticator(var20);
    org.jsecurity.subject.SimplePrincipalCollection var23 = new org.jsecurity.subject.SimplePrincipalCollection((java.util.Collection)var20, "org.jsecurity.authz.UnauthorizedException: org.jsecurity.session.ExpiredSessionException: ");
    java.util.Set var24 = var23.getRealmNames();
    java.io.InputStream var26 = org.jsecurity.util.ClassUtils.getResourceAsStream("");
    java.lang.Object[] var27 = new java.lang.Object[] { var26};
    java.util.List var28 = org.jsecurity.util.CollectionUtils.asList(var27);
    org.jsecurity.authc.pam.ModularRealmAuthenticator var29 = new org.jsecurity.authc.pam.ModularRealmAuthenticator(var28);
    org.jsecurity.subject.SimplePrincipalCollection var31 = new org.jsecurity.subject.SimplePrincipalCollection((java.util.Collection)var28, "org.jsecurity.authz.UnauthorizedException: org.jsecurity.session.ExpiredSessionException: ");
    org.jsecurity.session.UnknownSessionException var36 = new org.jsecurity.session.UnknownSessionException("dd\uFFFD", (java.io.Serializable)100.0f);
    org.jsecurity.session.SessionException var38 = new org.jsecurity.session.SessionException("dd\uFFFD", (java.lang.Throwable)var36, (java.io.Serializable)0);
    org.jsecurity.session.SessionException var39 = new org.jsecurity.session.SessionException("dd\uFFFD", (java.lang.Throwable)var36);
    var31.add((java.lang.Object)var39, "org.jsecurity.config.ConfigurationException: dd\uFFFD");
    java.util.Set var42 = var31.asSet();
    var23.addAll((java.util.Collection)var42, "6464ff");
    var0.setStringPermissions(var42);
    org.jsecurity.subject.SimplePrincipalCollection var47 = new org.jsecurity.subject.SimplePrincipalCollection((java.util.Collection)var42, "\u0000\u0000");
    org.jsecurity.subject.SimplePrincipalCollection var48 = new org.jsecurity.subject.SimplePrincipalCollection((org.jsecurity.subject.PrincipalCollection)var47);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var13);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var14);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var18);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var19);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var20);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var24);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var26);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var27);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var28);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var42);

  }

  public void test291() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest6.test291");


    org.jsecurity.authz.SimpleAuthorizingAccount var0 = new org.jsecurity.authz.SimpleAuthorizingAccount();
    java.util.Set var1 = var0.getSimpleRoles();
    org.jsecurity.authz.SimpleRole var2 = new org.jsecurity.authz.SimpleRole();
    org.jsecurity.authz.SimpleAuthorizationInfo var3 = new org.jsecurity.authz.SimpleAuthorizationInfo();
    var3.addRole("a2b823b1e72eae2b727289df8a00a89df8a0bab6ad8a89c4c5c7a9b62a270000");
    org.jsecurity.session.UnknownSessionException var10 = new org.jsecurity.session.UnknownSessionException("dd\uFFFD", (java.io.Serializable)100.0f);
    org.jsecurity.subject.SubjectException var11 = new org.jsecurity.subject.SubjectException("dd\uFFFD", (java.lang.Throwable)var10);
    org.jsecurity.io.SerializationException var12 = new org.jsecurity.io.SerializationException("", (java.lang.Throwable)var11);
    java.lang.Throwable[] var13 = var11.getSuppressed();
    java.util.Set var14 = org.jsecurity.util.CollectionUtils.asSet((java.lang.Object[])var13);
    var3.addRoles((java.util.Collection)var14);
    var2.addAll((java.util.Collection)var14);
    org.jsecurity.authz.SimpleRole var18 = new org.jsecurity.authz.SimpleRole();
    org.jsecurity.authz.permission.WildcardPermission var21 = new org.jsecurity.authz.permission.WildcardPermission("hi!", false);
    boolean var22 = var18.isPermitted((org.jsecurity.authz.Permission)var21);
    org.jsecurity.session.InvalidSessionException var23 = new org.jsecurity.session.InvalidSessionException("org.jsecurity.config.ConfigurationException: dd\uFFFD", (java.io.Serializable)var21);
    org.jsecurity.authz.SimpleRole var24 = new org.jsecurity.authz.SimpleRole();
    org.jsecurity.authz.permission.WildcardPermission var27 = new org.jsecurity.authz.permission.WildcardPermission("hi!", false);
    boolean var28 = var24.isPermitted((org.jsecurity.authz.Permission)var27);
    boolean var29 = var21.implies((org.jsecurity.authz.Permission)var27);
    boolean var30 = var2.isPermitted((org.jsecurity.authz.Permission)var27);
    boolean var31 = var0.isPermitted((org.jsecurity.authz.Permission)var27);
    var0.addRole("org.jsecurity.authc.IncorrectCredentialsException: \u0000\u0000");
    org.jsecurity.codec.CodecException var36 = new org.jsecurity.codec.CodecException("dd\uFFFD");
    org.jsecurity.authc.ConcurrentAccessException var37 = new org.jsecurity.authc.ConcurrentAccessException("org.jsecurity.authz.UnauthorizedException: org.jsecurity.session.ExpiredSessionException: ", (java.lang.Throwable)var36);
    org.jsecurity.subject.SimplePrincipalCollection var39 = new org.jsecurity.subject.SimplePrincipalCollection((java.lang.Object)var36, "");
    java.io.InputStream var41 = org.jsecurity.util.ClassUtils.getResourceAsStream("");
    java.lang.Object[] var42 = new java.lang.Object[] { var41};
    java.util.List var43 = org.jsecurity.util.CollectionUtils.asList(var42);
    org.jsecurity.authc.pam.ModularRealmAuthenticator var44 = new org.jsecurity.authc.pam.ModularRealmAuthenticator(var43);
    var39.addAll((java.util.Collection)var43, "\u0000\u0000");
    org.jsecurity.authz.UnauthorizedException var48 = new org.jsecurity.authz.UnauthorizedException();
    org.jsecurity.session.SessionException var50 = new org.jsecurity.session.SessionException("", (java.lang.Throwable)var48, (java.io.Serializable)"org.jsecurity.config.ConfigurationException: dd\uFFFD");
    org.jsecurity.crypto.hash.Sha1Hash var51 = new org.jsecurity.crypto.hash.Sha1Hash((java.lang.Object)"");
    org.jsecurity.session.UnknownSessionException var56 = new org.jsecurity.session.UnknownSessionException("dd\uFFFD", (java.io.Serializable)100.0f);
    org.jsecurity.subject.SubjectException var57 = new org.jsecurity.subject.SubjectException("dd\uFFFD", (java.lang.Throwable)var56);
    org.jsecurity.io.SerializationException var58 = new org.jsecurity.io.SerializationException("", (java.lang.Throwable)var57);
    java.lang.Throwable[] var59 = var57.getSuppressed();
    java.util.Set var60 = org.jsecurity.util.CollectionUtils.asSet((java.lang.Object[])var59);
    org.jsecurity.authz.SimpleAuthorizationInfo var62 = new org.jsecurity.authz.SimpleAuthorizationInfo();
    org.jsecurity.session.UnknownSessionException var67 = new org.jsecurity.session.UnknownSessionException("dd\uFFFD", (java.io.Serializable)100.0f);
    org.jsecurity.subject.SubjectException var68 = new org.jsecurity.subject.SubjectException("dd\uFFFD", (java.lang.Throwable)var67);
    org.jsecurity.io.SerializationException var69 = new org.jsecurity.io.SerializationException("", (java.lang.Throwable)var68);
    java.lang.Throwable[] var70 = var68.getSuppressed();
    java.util.Set var71 = org.jsecurity.util.CollectionUtils.asSet((java.lang.Object[])var70);
    var62.setStringPermissions(var71);
    java.util.Set var73 = var62.getRoles();
    org.jsecurity.authz.SimpleAuthorizationInfo var74 = new org.jsecurity.authz.SimpleAuthorizationInfo();
    var74.addRole("a2b823b1e72eae2b727289df8a00a89df8a0bab6ad8a89c4c5c7a9b62a270000");
    org.jsecurity.session.UnknownSessionException var81 = new org.jsecurity.session.UnknownSessionException("dd\uFFFD", (java.io.Serializable)100.0f);
    org.jsecurity.subject.SubjectException var82 = new org.jsecurity.subject.SubjectException("dd\uFFFD", (java.lang.Throwable)var81);
    org.jsecurity.io.SerializationException var83 = new org.jsecurity.io.SerializationException("", (java.lang.Throwable)var82);
    java.lang.Throwable[] var84 = var82.getSuppressed();
    java.util.Set var85 = org.jsecurity.util.CollectionUtils.asSet((java.lang.Object[])var84);
    var74.addRoles((java.util.Collection)var85);
    var62.setRoles(var85);
    org.jsecurity.authz.SimpleRole var88 = new org.jsecurity.authz.SimpleRole("org.jsecurity.authz.UnauthorizedException: org.jsecurity.session.ExpiredSessionException: ", var85);
    org.jsecurity.authc.SimpleAccount var89 = new org.jsecurity.authc.SimpleAccount((org.jsecurity.subject.PrincipalCollection)var39, (java.lang.Object)"", var60, var85);
    var0.setSimpleRoles(var85);
    org.jsecurity.io.IniResource var91 = new org.jsecurity.io.IniResource();
    java.util.Map var92 = var91.getSections();
    java.lang.String var93 = var91.getCharsetName();
    boolean var94 = var0.equals((java.lang.Object)var91);
    java.util.Set var95 = var0.getSimpleRoles();
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var1);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var13);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var14);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var22 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var28 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var29 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var30 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var31 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var41);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var42);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var43);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var59);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var60);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var70);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var71);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var73);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var84);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var85);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var92);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var93);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var94 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var95);

  }

  public void test292() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest6.test292");


    org.jsecurity.session.UnknownSessionException var5 = new org.jsecurity.session.UnknownSessionException("dd\uFFFD", (java.io.Serializable)100.0f);
    org.jsecurity.subject.SubjectException var6 = new org.jsecurity.subject.SubjectException("dd\uFFFD", (java.lang.Throwable)var5);
    org.jsecurity.authc.pam.UnsupportedTokenException var7 = new org.jsecurity.authc.pam.UnsupportedTokenException("dd\uFFFD", (java.lang.Throwable)var5);
    org.jsecurity.session.StoppedSessionException var8 = new org.jsecurity.session.StoppedSessionException("org.jsecurity.config.ConfigurationException: dd\uFFFD", (java.lang.Throwable)var7);
    org.jsecurity.io.SerializationException var9 = new org.jsecurity.io.SerializationException((java.lang.Throwable)var7);
    org.jsecurity.util.UnknownClassException var10 = new org.jsecurity.util.UnknownClassException((java.lang.Throwable)var7);

  }

  public void test293() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest6.test293");


    org.jsecurity.session.mgt.eis.MemorySessionDAO var0 = new org.jsecurity.session.mgt.eis.MemorySessionDAO();
    org.jsecurity.cache.Cache var1 = var0.getActiveSessionsCache();
    var0.setActiveSessionsCacheName("dd\uFFFD");
    java.util.Collection var4 = var0.getActiveSessions();
    java.lang.String var5 = var0.getActiveSessionsCacheName();
    org.jsecurity.session.mgt.SimpleSession var6 = new org.jsecurity.session.mgt.SimpleSession();
    var6.touch();
    var6.validate();
    java.io.Serializable var9 = var0.create((org.jsecurity.session.Session)var6);
    org.jsecurity.session.mgt.SimpleSession var12 = new org.jsecurity.session.mgt.SimpleSession();
    var12.setTimeout((-1L));
    org.jsecurity.session.mgt.SimpleSession var15 = new org.jsecurity.session.mgt.SimpleSession();
    java.util.Date var16 = var15.getLastAccessTime();
    var12.setLastAccessTime(var16);
    java.net.InetAddress var18 = var12.getHostAddress();
    org.jsecurity.authc.UsernamePasswordToken var19 = new org.jsecurity.authc.UsernamePasswordToken("10f5b491-38ac-4c02-8085-950abb026a06", "NfxhYN7ItBfRAmDBmprtU73ghfEEPpcDJrHPkZ06wiY=", var18);
    var6.setHostAddress(var18);
    java.util.Map var21 = var6.getAttributes();
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var1);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var4);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var5 + "' != '" + "dd\uFFFD"+ "'", var5.equals("dd\uFFFD"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var9 + "' != '" + "a0b8eff3-5e1b-4ac0-bfaa-7aed148a5447"+ "'", var9.equals("a0b8eff3-5e1b-4ac0-bfaa-7aed148a5447"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var16);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var18);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var21);

  }

  public void test294() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest6.test294");


    org.jsecurity.crypto.hash.Sha512Hash var1 = org.jsecurity.crypto.hash.Sha512Hash.fromBase64String("org.jsecurity.config.ConfigurationException: dd\uFFFD");
    byte[] var2 = var1.getBytes();
    java.lang.String var3 = org.jsecurity.codec.Base64.decodeToString(var2);
    byte[] var4 = org.jsecurity.codec.Base64.encodeChunked(var2);
    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      byte[] var5 = org.jsecurity.codec.Hex.decode(var4);
      fail("Expected exception of type java.lang.IllegalArgumentException");
    } catch (java.lang.IllegalArgumentException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var1);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var2);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var3 + "' != '" + "\u0000\u0000\u0000"+ "'", var3.equals("\u0000\u0000\u0000"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var4);

  }

  public void test295() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest6.test295");


    org.jsecurity.JSecurityException var2 = new org.jsecurity.JSecurityException();
    org.jsecurity.session.UnknownSessionException var7 = new org.jsecurity.session.UnknownSessionException("dd\uFFFD", (java.io.Serializable)100.0f);
    org.jsecurity.subject.SubjectException var8 = new org.jsecurity.subject.SubjectException("dd\uFFFD", (java.lang.Throwable)var7);
    org.jsecurity.authc.AccountException var9 = new org.jsecurity.authc.AccountException("hi!", (java.lang.Throwable)var8);
    org.jsecurity.session.StoppedSessionException var10 = new org.jsecurity.session.StoppedSessionException((java.lang.Throwable)var9);
    org.jsecurity.session.SessionException var11 = new org.jsecurity.session.SessionException("a2b823b1e72eae2b727289df8a00a89df8a0bab6ad8a89c4c5c7a9b62a270000", (java.lang.Throwable)var2, (java.io.Serializable)var9);
    org.jsecurity.subject.SubjectException var12 = new org.jsecurity.subject.SubjectException((java.lang.Throwable)var9);
    org.jsecurity.config.UnresolveableReferenceException var13 = new org.jsecurity.config.UnresolveableReferenceException("?\u0238\u0018@\uFFFD", (java.lang.Throwable)var9);

  }

  public void test296() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest6.test296");


    org.jsecurity.session.ExpiredSessionException var1 = new org.jsecurity.session.ExpiredSessionException("1afdbe33-7f88-41a7-81da-4454ab8b0297");

  }

  public void test297() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest6.test297");


    org.jsecurity.realm.text.TextConfigurationRealm var0 = new org.jsecurity.realm.text.TextConfigurationRealm();
    java.io.InputStream var2 = org.jsecurity.util.ClassUtils.getResourceAsStream("");
    java.lang.Object[] var3 = new java.lang.Object[] { var2};
    java.util.List var4 = org.jsecurity.util.CollectionUtils.asList(var3);
    org.jsecurity.authc.pam.ModularRealmAuthenticator var5 = new org.jsecurity.authc.pam.ModularRealmAuthenticator(var4);
    org.jsecurity.subject.SimplePrincipalCollection var7 = new org.jsecurity.subject.SimplePrincipalCollection((java.util.Collection)var4, "org.jsecurity.authz.UnauthorizedException: org.jsecurity.session.ExpiredSessionException: ");
    org.jsecurity.session.UnknownSessionException var12 = new org.jsecurity.session.UnknownSessionException("dd\uFFFD", (java.io.Serializable)100.0f);
    org.jsecurity.session.SessionException var14 = new org.jsecurity.session.SessionException("dd\uFFFD", (java.lang.Throwable)var12, (java.io.Serializable)0);
    org.jsecurity.session.SessionException var15 = new org.jsecurity.session.SessionException("dd\uFFFD", (java.lang.Throwable)var12);
    var7.add((java.lang.Object)var15, "org.jsecurity.config.ConfigurationException: dd\uFFFD");
    var0.onLogout((org.jsecurity.subject.PrincipalCollection)var7);
    org.jsecurity.cache.HashtableCacheManager var19 = new org.jsecurity.cache.HashtableCacheManager();
    org.jsecurity.cache.Cache var21 = var19.getCache("\u0000\u0000");
    var0.setAuthorizationCache(var21);
    org.jsecurity.codec.CodecException var25 = new org.jsecurity.codec.CodecException("dd\uFFFD");
    org.jsecurity.authc.ConcurrentAccessException var26 = new org.jsecurity.authc.ConcurrentAccessException("org.jsecurity.authz.UnauthorizedException: org.jsecurity.session.ExpiredSessionException: ", (java.lang.Throwable)var25);
    org.jsecurity.subject.SimplePrincipalCollection var28 = new org.jsecurity.subject.SimplePrincipalCollection((java.lang.Object)var25, "");
    var0.onLogout((org.jsecurity.subject.PrincipalCollection)var28);
    var0.setRoleDefinitions("org.jsecurity.config.ConfigurationException: dd\uFFFD");
    java.lang.Class var32 = var0.getAuthenticationTokenClass();
    java.lang.String[] var36 = org.jsecurity.util.StringUtils.split("org.jsecurity.realm.text.PropertiesRealm_983", ' ', ' ');
    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      java.lang.Object var37 = org.jsecurity.util.ClassUtils.newInstance(var32, (java.lang.Object[])var36);
      fail("Expected exception of type java.lang.IllegalStateException");
    } catch (java.lang.IllegalStateException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var2);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var3);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var4);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var21);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var32);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var36);

  }

  public void test298() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest6.test298");


    org.jsecurity.realm.activedirectory.ActiveDirectoryRealm var0 = new org.jsecurity.realm.activedirectory.ActiveDirectoryRealm();
    org.jsecurity.authc.credential.Sha256CredentialsMatcher var1 = new org.jsecurity.authc.credential.Sha256CredentialsMatcher();
    var0.setCredentialsMatcher((org.jsecurity.authc.credential.CredentialsMatcher)var1);
    java.lang.String var3 = var0.getAuthorizationCacheName();
    var0.setSystemUsername("a2b823b1e72eae2b727289df8a00a89df8a0bab6ad8a89c4c5c7a9b62a270000");
    var0.init();
    org.jsecurity.realm.activedirectory.ActiveDirectoryRealm var7 = new org.jsecurity.realm.activedirectory.ActiveDirectoryRealm();
    var7.init();
    var7.init();
    org.jsecurity.realm.activedirectory.ActiveDirectoryRealm var10 = new org.jsecurity.realm.activedirectory.ActiveDirectoryRealm();
    org.jsecurity.authc.credential.Sha256CredentialsMatcher var11 = new org.jsecurity.authc.credential.Sha256CredentialsMatcher();
    var10.setCredentialsMatcher((org.jsecurity.authc.credential.CredentialsMatcher)var11);
    java.lang.String var13 = var10.getAuthorizationCacheName();
    var10.setUrl("hi!");
    org.jsecurity.realm.ldap.DefaultLdapContextFactory var16 = new org.jsecurity.realm.ldap.DefaultLdapContextFactory();
    var10.setLdapContextFactory((org.jsecurity.realm.ldap.LdapContextFactory)var16);
    var16.setAuthentication("dd\uFFFD");
    var7.setLdapContextFactory((org.jsecurity.realm.ldap.LdapContextFactory)var16);
    var16.setReferral("dd\uFFFD");
    var0.setLdapContextFactory((org.jsecurity.realm.ldap.LdapContextFactory)var16);
    var16.setUsePooling(true);
    var16.setPrincipalSuffix("345d9036-762c-4f58-8690-c901bf299cde");
    org.jsecurity.config.ReflectionBuilder var28 = new org.jsecurity.config.ReflectionBuilder();
    org.jsecurity.io.IniResource var29 = new org.jsecurity.io.IniResource();
    var29.setCharsetName("org.jsecurity.authz.UnauthorizedException: org.jsecurity.session.ExpiredSessionException: ");
    java.util.Map var32 = var29.getSections();
    java.util.Map var33 = var28.buildObjects(var32);
    org.jsecurity.config.ReflectionBuilder var34 = new org.jsecurity.config.ReflectionBuilder();
    org.jsecurity.io.IniResource var35 = new org.jsecurity.io.IniResource();
    var35.setCharsetName("org.jsecurity.authz.UnauthorizedException: org.jsecurity.session.ExpiredSessionException: ");
    java.util.Map var38 = var35.getSections();
    java.util.Map var39 = var34.buildObjects(var38);
    java.util.Map var40 = var28.buildObjects(var39);
    java.util.Map var41 = var28.getObjects();
    org.jsecurity.config.ReflectionBuilder var42 = new org.jsecurity.config.ReflectionBuilder(var41);
    java.util.Map var43 = var42.getObjects();
    var16.setAdditionalEnvironment(var43);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var3);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var13);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var32);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var33);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var38);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var39);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var40);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var41);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var43);

  }

  public void test299() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest6.test299");


    org.jsecurity.crypto.hash.Sha1Hash var1 = org.jsecurity.crypto.hash.Sha1Hash.fromBase64String("");
    java.lang.String var2 = var1.toString();
    java.lang.String var3 = var1.toHex();
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var2 + "' != '" + ""+ "'", var2.equals(""));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var3 + "' != '" + ""+ "'", var3.equals(""));

  }

  public void test300() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest6.test300");


    org.jsecurity.realm.SimpleAccountRealm var1 = new org.jsecurity.realm.SimpleAccountRealm("hi!");
    java.lang.Class var2 = var1.getAuthenticationTokenClass();
    org.jsecurity.session.mgt.eis.MemorySessionDAO var3 = new org.jsecurity.session.mgt.eis.MemorySessionDAO();
    org.jsecurity.cache.Cache var4 = var3.getActiveSessionsCache();
    org.jsecurity.cache.CacheManager var5 = var3.getCacheManager();
    var1.setCacheManager(var5);
    var1.addAccount("a2b823b1e72eae2b727289df8a00a89df8a0bab6ad8a89c4c5c7a9b62a270000", "org.jsecurity.config.ConfigurationException: dd\uFFFD");
    var1.addRole("org.jsecurity.realm.text.TextConfigurationRealm_445");
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var2);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var4);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var5);

  }

  public void test301() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest6.test301");


    org.jsecurity.mgt.DefaultSecurityManager var0 = new org.jsecurity.mgt.DefaultSecurityManager();
    java.io.InputStream var2 = org.jsecurity.util.ClassUtils.getResourceAsStream("");
    java.lang.Object[] var3 = new java.lang.Object[] { var2};
    java.util.List var4 = org.jsecurity.util.CollectionUtils.asList(var3);
    org.jsecurity.authc.pam.ModularRealmAuthenticator var5 = new org.jsecurity.authc.pam.ModularRealmAuthenticator(var4);
    org.jsecurity.authc.pam.AllSuccessfulModularAuthenticationStrategy var6 = new org.jsecurity.authc.pam.AllSuccessfulModularAuthenticationStrategy();
    var5.setModularAuthenticationStrategy((org.jsecurity.authc.pam.ModularAuthenticationStrategy)var6);
    org.jsecurity.authz.SimpleAuthorizationInfo var8 = new org.jsecurity.authz.SimpleAuthorizationInfo();
    var8.addStringPermission("hi!");
    java.io.InputStream var12 = org.jsecurity.util.ClassUtils.getResourceAsStream("");
    java.lang.Object[] var13 = new java.lang.Object[] { var12};
    java.util.List var14 = org.jsecurity.util.CollectionUtils.asList(var13);
    var8.addRoles((java.util.Collection)var14);
    var5.setAuthenticationListeners((java.util.Collection)var14);
    var0.setSessionListeners((java.util.Collection)var14);
    org.jsecurity.authc.pam.ModularRealmAuthenticator var18 = new org.jsecurity.authc.pam.ModularRealmAuthenticator();
    org.jsecurity.authz.permission.InvalidPermissionStringException var21 = new org.jsecurity.authz.permission.InvalidPermissionStringException("", "dd\uFFFD");
    org.jsecurity.JSecurityException var23 = new org.jsecurity.JSecurityException("");
    org.jsecurity.authc.SimpleAuthenticationInfo var25 = new org.jsecurity.authc.SimpleAuthenticationInfo((java.lang.Object)var21, (java.lang.Object)"", "org.jsecurity.authz.UnauthorizedException: org.jsecurity.session.ExpiredSessionException: ");
    org.jsecurity.subject.PrincipalCollection var26 = var25.getPrincipals();
    var18.onLogout(var26);
    var0.setAuthenticator((org.jsecurity.authc.Authenticator)var18);
    org.jsecurity.codec.CodecException var31 = new org.jsecurity.codec.CodecException("dd\uFFFD");
    org.jsecurity.authc.ConcurrentAccessException var32 = new org.jsecurity.authc.ConcurrentAccessException("org.jsecurity.authz.UnauthorizedException: org.jsecurity.session.ExpiredSessionException: ", (java.lang.Throwable)var31);
    org.jsecurity.subject.SimplePrincipalCollection var34 = new org.jsecurity.subject.SimplePrincipalCollection((java.lang.Object)var31, "");
    org.jsecurity.authc.pam.FirstSuccessfulAuthenticationStrategy var35 = new org.jsecurity.authc.pam.FirstSuccessfulAuthenticationStrategy();
    org.jsecurity.authz.UnauthorizedException var37 = new org.jsecurity.authz.UnauthorizedException("org.jsecurity.config.ConfigurationException: dd\uFFFD");
    java.lang.Throwable[] var38 = var37.getSuppressed();
    java.util.List var39 = org.jsecurity.util.CollectionUtils.asList((java.lang.Object[])var38);
    org.jsecurity.authc.UsernamePasswordToken var40 = new org.jsecurity.authc.UsernamePasswordToken();
    java.lang.String var41 = var40.getUsername();
    java.net.InetAddress var42 = var40.getInetAddress();
    org.jsecurity.authc.AuthenticationInfo var43 = var35.beforeAllAttempts((java.util.Collection)var39, (org.jsecurity.authc.AuthenticationToken)var40);
    org.jsecurity.session.UnknownSessionException var48 = new org.jsecurity.session.UnknownSessionException("dd\uFFFD", (java.io.Serializable)100.0f);
    org.jsecurity.subject.SubjectException var49 = new org.jsecurity.subject.SubjectException("dd\uFFFD", (java.lang.Throwable)var48);
    org.jsecurity.io.SerializationException var50 = new org.jsecurity.io.SerializationException("", (java.lang.Throwable)var49);
    java.lang.Throwable[] var51 = var49.getSuppressed();
    java.util.Set var52 = org.jsecurity.util.CollectionUtils.asSet((java.lang.Object[])var51);
    org.jsecurity.authc.SimpleAccount var53 = new org.jsecurity.authc.SimpleAccount((org.jsecurity.subject.PrincipalCollection)var34, (java.lang.Object)var39, var52);
    java.io.InputStream var55 = org.jsecurity.util.ClassUtils.getResourceAsStream("");
    java.lang.Object[] var56 = new java.lang.Object[] { var55};
    java.util.List var57 = org.jsecurity.util.CollectionUtils.asList(var56);
    org.jsecurity.authc.pam.ModularRealmAuthenticator var58 = new org.jsecurity.authc.pam.ModularRealmAuthenticator(var57);
    org.jsecurity.subject.SimplePrincipalCollection var60 = new org.jsecurity.subject.SimplePrincipalCollection((java.util.Collection)var57, "org.jsecurity.authz.UnauthorizedException: org.jsecurity.session.ExpiredSessionException: ");
    org.jsecurity.io.ResourceException var64 = new org.jsecurity.io.ResourceException("hi!");
    org.jsecurity.authc.UnknownAccountException var65 = new org.jsecurity.authc.UnknownAccountException((java.lang.Throwable)var64);
    org.jsecurity.session.StoppedSessionException var66 = new org.jsecurity.session.StoppedSessionException("dd\uFFFD", (java.io.Serializable)var64);
    org.jsecurity.session.UnknownSessionException var67 = new org.jsecurity.session.UnknownSessionException("org.jsecurity.authz.UnauthorizedException: org.jsecurity.session.ExpiredSessionException: ", (java.lang.Throwable)var64);
    boolean var68 = var60.equals((java.lang.Object)var64);
    var34.addAll((org.jsecurity.subject.PrincipalCollection)var60);
    org.jsecurity.session.UnknownSessionException var74 = new org.jsecurity.session.UnknownSessionException("dd\uFFFD", (java.io.Serializable)100.0f);
    org.jsecurity.subject.SubjectException var75 = new org.jsecurity.subject.SubjectException("dd\uFFFD", (java.lang.Throwable)var74);
    org.jsecurity.io.SerializationException var76 = new org.jsecurity.io.SerializationException("", (java.lang.Throwable)var75);
    java.lang.Throwable[] var77 = var75.getSuppressed();
    java.util.List var78 = org.jsecurity.util.CollectionUtils.asList((java.lang.Object[])var77);
    boolean var79 = var0.isPermittedAll((org.jsecurity.subject.PrincipalCollection)var34, (java.util.Collection)var78);
    org.jsecurity.subject.DelegatingSubject var80 = new org.jsecurity.subject.DelegatingSubject((org.jsecurity.mgt.SecurityManager)var0);
    boolean var82 = var80.hasRole("org.jsecurity.authc.IncorrectCredentialsException: \u0000\u0000");
    java.net.InetAddress var83 = var80.getInetAddress();
    java.lang.String[] var86 = org.jsecurity.util.StringUtils.split("dade3937-164f-46fa-a082-f5f54b3b44e1", ' ');
    java.util.List var87 = org.jsecurity.util.CollectionUtils.asList((java.lang.Object[])var86);
    boolean[] var88 = var80.isPermitted(var86);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var2);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var3);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var4);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var12);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var13);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var14);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var26);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var38);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var39);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var41);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var42);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var43);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var51);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var52);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var55);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var56);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var57);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var68 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var77);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var78);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var79 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var82 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var83);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var86);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var87);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var88);

  }

  public void test302() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest6.test302");


    org.jsecurity.authz.SimpleAuthorizingAccount var0 = new org.jsecurity.authz.SimpleAuthorizingAccount();
    org.jsecurity.authz.SimpleAuthorizationInfo var1 = new org.jsecurity.authz.SimpleAuthorizationInfo();
    var1.addRole("a2b823b1e72eae2b727289df8a00a89df8a0bab6ad8a89c4c5c7a9b62a270000");
    org.jsecurity.authz.SimpleAuthorizationInfo var4 = new org.jsecurity.authz.SimpleAuthorizationInfo();
    var4.addRole("a2b823b1e72eae2b727289df8a00a89df8a0bab6ad8a89c4c5c7a9b62a270000");
    org.jsecurity.session.UnknownSessionException var11 = new org.jsecurity.session.UnknownSessionException("dd\uFFFD", (java.io.Serializable)100.0f);
    org.jsecurity.subject.SubjectException var12 = new org.jsecurity.subject.SubjectException("dd\uFFFD", (java.lang.Throwable)var11);
    org.jsecurity.io.SerializationException var13 = new org.jsecurity.io.SerializationException("", (java.lang.Throwable)var12);
    java.lang.Throwable[] var14 = var12.getSuppressed();
    java.util.Set var15 = org.jsecurity.util.CollectionUtils.asSet((java.lang.Object[])var14);
    var4.addRoles((java.util.Collection)var15);
    var1.setObjectPermissions(var15);
    var0.setSimpleRoles(var15);
    boolean var19 = var0.isCredentialsExpired();
    var0.setLocked(true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var14);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var15);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var19 == false);

  }

  public void test303() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest6.test303");


    org.jsecurity.mgt.DefaultSecurityManager var0 = new org.jsecurity.mgt.DefaultSecurityManager();
    java.io.InputStream var2 = org.jsecurity.util.ClassUtils.getResourceAsStream("");
    java.lang.Object[] var3 = new java.lang.Object[] { var2};
    java.util.List var4 = org.jsecurity.util.CollectionUtils.asList(var3);
    org.jsecurity.authc.pam.ModularRealmAuthenticator var5 = new org.jsecurity.authc.pam.ModularRealmAuthenticator(var4);
    org.jsecurity.authc.pam.AllSuccessfulModularAuthenticationStrategy var6 = new org.jsecurity.authc.pam.AllSuccessfulModularAuthenticationStrategy();
    var5.setModularAuthenticationStrategy((org.jsecurity.authc.pam.ModularAuthenticationStrategy)var6);
    org.jsecurity.authz.SimpleAuthorizationInfo var8 = new org.jsecurity.authz.SimpleAuthorizationInfo();
    var8.addStringPermission("hi!");
    java.io.InputStream var12 = org.jsecurity.util.ClassUtils.getResourceAsStream("");
    java.lang.Object[] var13 = new java.lang.Object[] { var12};
    java.util.List var14 = org.jsecurity.util.CollectionUtils.asList(var13);
    var8.addRoles((java.util.Collection)var14);
    var5.setAuthenticationListeners((java.util.Collection)var14);
    var0.setSessionListeners((java.util.Collection)var14);
    org.jsecurity.authc.pam.ModularRealmAuthenticator var18 = new org.jsecurity.authc.pam.ModularRealmAuthenticator();
    org.jsecurity.authz.permission.InvalidPermissionStringException var21 = new org.jsecurity.authz.permission.InvalidPermissionStringException("", "dd\uFFFD");
    org.jsecurity.JSecurityException var23 = new org.jsecurity.JSecurityException("");
    org.jsecurity.authc.SimpleAuthenticationInfo var25 = new org.jsecurity.authc.SimpleAuthenticationInfo((java.lang.Object)var21, (java.lang.Object)"", "org.jsecurity.authz.UnauthorizedException: org.jsecurity.session.ExpiredSessionException: ");
    org.jsecurity.subject.PrincipalCollection var26 = var25.getPrincipals();
    var18.onLogout(var26);
    var0.setAuthenticator((org.jsecurity.authc.Authenticator)var18);
    org.jsecurity.realm.activedirectory.ActiveDirectoryRealm var29 = new org.jsecurity.realm.activedirectory.ActiveDirectoryRealm();
    var29.init();
    var29.setSystemPassword("dd\uFFFD");
    org.jsecurity.authz.aop.GuestAnnotationHandler var33 = new org.jsecurity.authz.aop.GuestAnnotationHandler();
    java.lang.Class var34 = var33.getAnnotationClass();
    var29.setAuthenticationTokenClass(var34);
    org.jsecurity.mgt.DefaultSecurityManager var36 = new org.jsecurity.mgt.DefaultSecurityManager((org.jsecurity.realm.Realm)var29);
    org.jsecurity.cache.CacheManager var37 = var29.getCacheManager();
    org.jsecurity.realm.text.PropertiesRealm var38 = new org.jsecurity.realm.text.PropertiesRealm(var37);
    var0.setRealm((org.jsecurity.realm.Realm)var38);
    java.lang.String var40 = var38.getAuthorizationCacheName();
    var38.run();
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var2);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var3);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var4);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var12);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var13);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var14);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var26);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var34);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var37);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var40 + "' != '" + "org.jsecurity.realm.text.PropertiesRealm-803-authorization"+ "'", var40.equals("org.jsecurity.realm.text.PropertiesRealm-803-authorization"));

  }

  public void test304() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest6.test304");


    char[] var2 = new char[] { };
    org.jsecurity.authc.UsernamePasswordToken var4 = new org.jsecurity.authc.UsernamePasswordToken("hi!", var2, true);
    org.jsecurity.authc.UsernamePasswordToken var5 = new org.jsecurity.authc.UsernamePasswordToken("\u0000\u0000", var2);
    org.jsecurity.session.mgt.SimpleSession var6 = new org.jsecurity.session.mgt.SimpleSession();
    var6.setTimeout((-1L));
    org.jsecurity.session.mgt.SimpleSession var9 = new org.jsecurity.session.mgt.SimpleSession();
    java.util.Date var10 = var9.getLastAccessTime();
    var6.setLastAccessTime(var10);
    java.net.InetAddress var12 = var6.getHostAddress();
    var5.setInetAddress(var12);
    org.jsecurity.session.mgt.SimpleSession var14 = new org.jsecurity.session.mgt.SimpleSession(var12);
    org.jsecurity.session.mgt.SimpleSession var15 = new org.jsecurity.session.mgt.SimpleSession(var12);
    org.jsecurity.session.mgt.eis.MemorySessionDAO var16 = new org.jsecurity.session.mgt.eis.MemorySessionDAO();
    org.jsecurity.cache.Cache var17 = var16.getActiveSessionsCache();
    org.jsecurity.cache.CacheManager var18 = var16.getCacheManager();
    org.jsecurity.cache.HashtableCacheManager var19 = new org.jsecurity.cache.HashtableCacheManager();
    org.jsecurity.cache.Cache var21 = var19.getCache("\u0000\u0000");
    var16.setActiveSessionsCache(var21);
    java.io.InputStream var24 = org.jsecurity.util.ClassUtils.getResourceAsStream("");
    java.lang.Object[] var25 = new java.lang.Object[] { var24};
    java.util.List var26 = org.jsecurity.util.CollectionUtils.asList(var25);
    org.jsecurity.authc.pam.ModularRealmAuthenticator var27 = new org.jsecurity.authc.pam.ModularRealmAuthenticator(var26);
    org.jsecurity.authc.pam.AllSuccessfulModularAuthenticationStrategy var28 = new org.jsecurity.authc.pam.AllSuccessfulModularAuthenticationStrategy();
    var27.setModularAuthenticationStrategy((org.jsecurity.authc.pam.ModularAuthenticationStrategy)var28);
    org.jsecurity.authz.SimpleAuthorizationInfo var30 = new org.jsecurity.authz.SimpleAuthorizationInfo();
    var30.addStringPermission("hi!");
    java.io.InputStream var34 = org.jsecurity.util.ClassUtils.getResourceAsStream("");
    java.lang.Object[] var35 = new java.lang.Object[] { var34};
    java.util.List var36 = org.jsecurity.util.CollectionUtils.asList(var35);
    var30.addRoles((java.util.Collection)var36);
    var27.setAuthenticationListeners((java.util.Collection)var36);
    org.jsecurity.realm.activedirectory.ActiveDirectoryRealm var39 = new org.jsecurity.realm.activedirectory.ActiveDirectoryRealm();
    var39.setPrincipalSuffix("");
    var27.setRealm((org.jsecurity.realm.Realm)var39);
    org.jsecurity.cache.HashtableCacheManager var43 = new org.jsecurity.cache.HashtableCacheManager();
    org.jsecurity.cache.Cache var45 = var43.getCache("\u0000\u0000");
    var39.setAuthorizationCache(var45);
    var16.setActiveSessionsCache(var45);
    org.jsecurity.session.mgt.SimpleSession var48 = new org.jsecurity.session.mgt.SimpleSession();
    java.io.Serializable var49 = var16.create((org.jsecurity.session.Session)var48);
    org.jsecurity.session.mgt.SimpleSession var50 = new org.jsecurity.session.mgt.SimpleSession();
    var50.touch();
    var50.validate();
    org.jsecurity.session.mgt.SimpleSession var53 = new org.jsecurity.session.mgt.SimpleSession();
    var53.setTimeout((-1L));
    org.jsecurity.session.mgt.SimpleSession var56 = new org.jsecurity.session.mgt.SimpleSession();
    java.util.Date var57 = var56.getLastAccessTime();
    var53.setLastAccessTime(var57);
    org.jsecurity.session.mgt.SimpleSession var59 = new org.jsecurity.session.mgt.SimpleSession();
    java.util.Date var60 = var59.getLastAccessTime();
    var53.setStopTimestamp(var60);
    var50.setLastAccessTime(var60);
    var48.setLastAccessTime(var60);
    org.jsecurity.session.mgt.ImmutableProxiedSession var64 = new org.jsecurity.session.mgt.ImmutableProxiedSession((org.jsecurity.session.Session)var48);
    org.jsecurity.session.ProxiedSession var65 = new org.jsecurity.session.ProxiedSession((org.jsecurity.session.Session)var48);
    java.util.Date var66 = var65.getStartTimestamp();
    var15.setLastAccessTime(var66);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var2);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var10);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var12);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var17);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var18);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var21);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var24);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var25);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var26);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var34);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var35);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var36);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var45);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var49 + "' != '" + "1bc98496-1c7f-40ce-9d94-299b4c9bebf3"+ "'", var49.equals("1bc98496-1c7f-40ce-9d94-299b4c9bebf3"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var57);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var60);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var66);

  }

  public void test305() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest6.test305");


    org.jsecurity.realm.jdbc.JdbcRealm var0 = new org.jsecurity.realm.jdbc.JdbcRealm();
    var0.setPermissionsQuery("org.jsecurity.realm.text.TextConfigurationRealm_445");
    var0.setUserRolesQuery("6464ff");
    org.jsecurity.authc.pam.AllSuccessfulModularAuthenticationStrategy var5 = new org.jsecurity.authc.pam.AllSuccessfulModularAuthenticationStrategy();
    char[] var7 = new char[] { };
    org.jsecurity.authc.UsernamePasswordToken var9 = new org.jsecurity.authc.UsernamePasswordToken("hi!", var7, true);
    org.jsecurity.authc.SimpleAccount var10 = new org.jsecurity.authc.SimpleAccount();
    var10.setCredentialsExpired(false);
    boolean var13 = var10.isLocked();
    org.jsecurity.authc.AuthenticationInfo var14 = var5.afterAllAttempts((org.jsecurity.authc.AuthenticationToken)var9, (org.jsecurity.authc.AuthenticationInfo)var10);
    char[] var16 = new char[] { };
    org.jsecurity.authc.UsernamePasswordToken var18 = new org.jsecurity.authc.UsernamePasswordToken("hi!", var16, true);
    byte[] var19 = org.jsecurity.codec.Hex.decode(var16);
    byte[] var20 = org.jsecurity.codec.Hex.decode(var16);
    var9.setPassword(var16);
    boolean var22 = var0.supports((org.jsecurity.authc.AuthenticationToken)var9);
    org.jsecurity.authc.pam.FirstSuccessfulAuthenticationStrategy var23 = new org.jsecurity.authc.pam.FirstSuccessfulAuthenticationStrategy();
    org.jsecurity.authz.UnauthorizedException var25 = new org.jsecurity.authz.UnauthorizedException("org.jsecurity.config.ConfigurationException: dd\uFFFD");
    java.lang.Throwable[] var26 = var25.getSuppressed();
    java.util.List var27 = org.jsecurity.util.CollectionUtils.asList((java.lang.Object[])var26);
    org.jsecurity.authc.UsernamePasswordToken var28 = new org.jsecurity.authc.UsernamePasswordToken();
    java.lang.String var29 = var28.getUsername();
    java.net.InetAddress var30 = var28.getInetAddress();
    org.jsecurity.authc.AuthenticationInfo var31 = var23.beforeAllAttempts((java.util.Collection)var27, (org.jsecurity.authc.AuthenticationToken)var28);
    org.jsecurity.realm.SimpleAccountRealm var33 = new org.jsecurity.realm.SimpleAccountRealm("hi!");
    java.lang.Class var34 = var33.getAuthenticationTokenClass();
    java.util.Collection var35 = org.jsecurity.util.CollectionUtils.emptyCollection(var34);
    org.jsecurity.authc.pam.AllSuccessfulModularAuthenticationStrategy var36 = new org.jsecurity.authc.pam.AllSuccessfulModularAuthenticationStrategy();
    char[] var38 = new char[] { };
    org.jsecurity.authc.UsernamePasswordToken var40 = new org.jsecurity.authc.UsernamePasswordToken("hi!", var38, true);
    org.jsecurity.authc.SimpleAccount var41 = new org.jsecurity.authc.SimpleAccount();
    var41.setCredentialsExpired(false);
    boolean var44 = var41.isLocked();
    org.jsecurity.authc.AuthenticationInfo var45 = var36.afterAllAttempts((org.jsecurity.authc.AuthenticationToken)var40, (org.jsecurity.authc.AuthenticationInfo)var41);
    org.jsecurity.authc.AuthenticationInfo var46 = var23.beforeAllAttempts(var35, (org.jsecurity.authc.AuthenticationToken)var40);
    org.jsecurity.session.mgt.eis.MemorySessionDAO var47 = new org.jsecurity.session.mgt.eis.MemorySessionDAO();
    org.jsecurity.cache.Cache var48 = var47.getActiveSessionsCache();
    org.jsecurity.session.mgt.SimpleSession var49 = new org.jsecurity.session.mgt.SimpleSession();
    var49.setTimeout((-1L));
    org.jsecurity.session.mgt.SimpleSession var52 = new org.jsecurity.session.mgt.SimpleSession();
    java.util.Date var53 = var52.getLastAccessTime();
    var49.setLastAccessTime(var53);
    var47.update((org.jsecurity.session.Session)var49);
    byte[] var61 = new byte[] { (byte)100, (byte)100, (byte)(-1)};
    java.lang.String var62 = org.jsecurity.codec.CodecSupport.toString(var61);
    byte[] var63 = org.jsecurity.codec.Base64.encode(var61);
    char[] var64 = org.jsecurity.codec.CodecSupport.toChars(var63);
    org.jsecurity.authc.UsernamePasswordToken var66 = new org.jsecurity.authc.UsernamePasswordToken("org.jsecurity.realm.SimpleAccountRealm-55-authorization", var64, false);
    char[] var67 = var66.getPassword();
    org.jsecurity.session.mgt.SimpleSession var69 = new org.jsecurity.session.mgt.SimpleSession();
    var69.setTimeout((-1L));
    org.jsecurity.session.mgt.SimpleSession var72 = new org.jsecurity.session.mgt.SimpleSession();
    java.util.Date var73 = var72.getLastAccessTime();
    var69.setLastAccessTime(var73);
    java.net.InetAddress var75 = var69.getHostAddress();
    org.jsecurity.authc.UsernamePasswordToken var76 = new org.jsecurity.authc.UsernamePasswordToken("classpath:org/jsecurity/cache/ehcache/ehcache.xml", var67, false, var75);
    org.jsecurity.session.mgt.SimpleSession var77 = new org.jsecurity.session.mgt.SimpleSession(var75);
    var49.setHostAddress(var75);
    var40.setInetAddress(var75);
    char[] var80 = var40.getPassword();
    var9.setPassword(var80);
    java.lang.Object var82 = var9.getPrincipal();
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var7);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var13 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var14);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var16);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var19);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var20);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var22 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var26);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var27);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var29);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var30);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var31);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var34);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var35);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var38);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var44 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var45);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var46);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var48);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var53);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var61);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var62 + "' != '" + "dd\uFFFD"+ "'", var62.equals("dd\uFFFD"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var63);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var64);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var67);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var73);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var75);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var80);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var82 + "' != '" + "hi!"+ "'", var82.equals("hi!"));

  }

  public void test306() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest6.test306");


    java.lang.String var1 = org.jsecurity.codec.Base64.decodeToString("f038fdb8-a003-42b2-ae02-712288013087");
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var1 + "' != '" + "M\uFFFD}\uFFFD\uFFFDkM7\uFFFDf\uFFFDi\uFFFD6\uFFFD]\uFFFD\uFFFD\uFFFD5\uFFFDO;"+ "'", var1.equals("M\uFFFD}\uFFFD\uFFFDkM7\uFFFDf\uFFFDi\uFFFD6\uFFFD]\uFFFD\uFFFD\uFFFD5\uFFFDO;"));

  }

  public void test307() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest6.test307");


    java.lang.String var1 = org.jsecurity.util.StringUtils.clean("196dbf27-eeac-4cf2-b742-fbe14a5ecb60");
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var1 + "' != '" + "196dbf27-eeac-4cf2-b742-fbe14a5ecb60"+ "'", var1.equals("196dbf27-eeac-4cf2-b742-fbe14a5ecb60"));

  }

  public void test308() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest6.test308");


    org.jsecurity.session.mgt.SimpleSession var0 = new org.jsecurity.session.mgt.SimpleSession();
    org.jsecurity.io.SerializationException var3 = new org.jsecurity.io.SerializationException("org.jsecurity.config.ConfigurationException: dd\uFFFD");
    org.jsecurity.authc.AccountException var4 = new org.jsecurity.authc.AccountException("a2b823b1e72eae2b727289df8a00a89df8a0bab6ad8a89c4c5c7a9b62a270000", (java.lang.Throwable)var3);
    var0.setId((java.io.Serializable)"a2b823b1e72eae2b727289df8a00a89df8a0bab6ad8a89c4c5c7a9b62a270000");
    org.jsecurity.session.mgt.eis.MemorySessionDAO var6 = new org.jsecurity.session.mgt.eis.MemorySessionDAO();
    org.jsecurity.cache.Cache var7 = var6.getActiveSessionsCache();
    org.jsecurity.cache.CacheManager var8 = var6.getCacheManager();
    org.jsecurity.cache.HashtableCacheManager var9 = new org.jsecurity.cache.HashtableCacheManager();
    org.jsecurity.cache.Cache var11 = var9.getCache("\u0000\u0000");
    var6.setActiveSessionsCache(var11);
    java.io.InputStream var14 = org.jsecurity.util.ClassUtils.getResourceAsStream("");
    java.lang.Object[] var15 = new java.lang.Object[] { var14};
    java.util.List var16 = org.jsecurity.util.CollectionUtils.asList(var15);
    org.jsecurity.authc.pam.ModularRealmAuthenticator var17 = new org.jsecurity.authc.pam.ModularRealmAuthenticator(var16);
    org.jsecurity.authc.pam.AllSuccessfulModularAuthenticationStrategy var18 = new org.jsecurity.authc.pam.AllSuccessfulModularAuthenticationStrategy();
    var17.setModularAuthenticationStrategy((org.jsecurity.authc.pam.ModularAuthenticationStrategy)var18);
    org.jsecurity.authz.SimpleAuthorizationInfo var20 = new org.jsecurity.authz.SimpleAuthorizationInfo();
    var20.addStringPermission("hi!");
    java.io.InputStream var24 = org.jsecurity.util.ClassUtils.getResourceAsStream("");
    java.lang.Object[] var25 = new java.lang.Object[] { var24};
    java.util.List var26 = org.jsecurity.util.CollectionUtils.asList(var25);
    var20.addRoles((java.util.Collection)var26);
    var17.setAuthenticationListeners((java.util.Collection)var26);
    org.jsecurity.realm.activedirectory.ActiveDirectoryRealm var29 = new org.jsecurity.realm.activedirectory.ActiveDirectoryRealm();
    var29.setPrincipalSuffix("");
    var17.setRealm((org.jsecurity.realm.Realm)var29);
    org.jsecurity.cache.HashtableCacheManager var33 = new org.jsecurity.cache.HashtableCacheManager();
    org.jsecurity.cache.Cache var35 = var33.getCache("\u0000\u0000");
    var29.setAuthorizationCache(var35);
    var6.setActiveSessionsCache(var35);
    org.jsecurity.session.mgt.SimpleSession var38 = new org.jsecurity.session.mgt.SimpleSession();
    java.io.Serializable var39 = var6.create((org.jsecurity.session.Session)var38);
    java.io.Serializable var40 = var38.getId();
    java.util.Map var41 = var38.getAttributes();
    org.jsecurity.session.mgt.SimpleSession var42 = new org.jsecurity.session.mgt.SimpleSession();
    var42.setTimeout((-1L));
    org.jsecurity.session.mgt.SimpleSession var45 = new org.jsecurity.session.mgt.SimpleSession();
    java.util.Date var46 = var45.getLastAccessTime();
    var42.setLastAccessTime(var46);
    org.jsecurity.session.mgt.SimpleSession var48 = new org.jsecurity.session.mgt.SimpleSession();
    java.util.Date var49 = var48.getLastAccessTime();
    var42.setStopTimestamp(var49);
    var38.setLastAccessTime(var49);
    var0.setStartTimestamp(var49);
    org.jsecurity.session.ProxiedSession var53 = new org.jsecurity.session.ProxiedSession((org.jsecurity.session.Session)var0);
    org.jsecurity.session.ProxiedSession var54 = new org.jsecurity.session.ProxiedSession((org.jsecurity.session.Session)var0);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var7);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var8);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var11);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var14);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var15);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var16);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var24);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var25);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var26);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var35);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var39 + "' != '" + "4be7b23f-0418-45a6-a6eb-186766ba2369"+ "'", var39.equals("4be7b23f-0418-45a6-a6eb-186766ba2369"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var40 + "' != '" + "4be7b23f-0418-45a6-a6eb-186766ba2369"+ "'", var40.equals("4be7b23f-0418-45a6-a6eb-186766ba2369"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var41);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var46);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var49);

  }

  public void test309() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest6.test309");


    org.jsecurity.session.SessionException var1 = new org.jsecurity.session.SessionException("org.jsecurity.realm.text.TextConfigurationRealm_1105");
    org.jsecurity.authc.ExpiredCredentialsException var2 = new org.jsecurity.authc.ExpiredCredentialsException((java.lang.Throwable)var1);
    org.jsecurity.session.StoppedSessionException var3 = new org.jsecurity.session.StoppedSessionException((java.io.Serializable)var1);
    org.jsecurity.subject.InvalidSubjectException var4 = new org.jsecurity.subject.InvalidSubjectException((java.lang.Throwable)var3);

  }

  public void test310() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest6.test310");


    org.jsecurity.session.ExpiredSessionException var1 = new org.jsecurity.session.ExpiredSessionException("e2100c27-e41d-4c80-964c-90268ef4a856");
    org.jsecurity.subject.SimplePrincipalCollection var3 = new org.jsecurity.subject.SimplePrincipalCollection((java.lang.Object)var1, "2de55d54-e620-45f7-8afd-a30a33a48e47");

  }

  public void test311() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest6.test311");


    org.jsecurity.session.UnknownSessionException var2 = new org.jsecurity.session.UnknownSessionException("org.jsecurity.realm.text.TextConfigurationRealm_2587");
    org.jsecurity.authz.UnauthenticatedException var3 = new org.jsecurity.authz.UnauthenticatedException("34c4ddf9-2eae-40f0-acfd-24998b57e8d9", (java.lang.Throwable)var2);

  }

  public void test312() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest6.test312");


    org.jsecurity.session.mgt.ExecutorServiceSessionValidationScheduler var0 = new org.jsecurity.session.mgt.ExecutorServiceSessionValidationScheduler();
    var0.enableSessionValidation();
    long var2 = var0.getInterval();
    org.jsecurity.session.mgt.ValidatingSessionManager var3 = var0.getSessionManager();
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var2 == 3600000L);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var3);

  }

  public void test313() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest6.test313");


    java.lang.String[] var4 = org.jsecurity.util.StringUtils.tokenizeToStringArray("4a0e5e90-249b-4eb3-a134-0b53851d6caf", "7272eb19-d391-4061-a8d0-d58cec860677", false, true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var4);

  }

  public void test314() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest6.test314");


    org.jsecurity.authz.permission.WildcardPermission var1 = new org.jsecurity.authz.permission.WildcardPermission("a485effa-cd38-4fdc-94c9-df09d3b46d47");

  }

  public void test315() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest6.test315");


    org.jsecurity.realm.activedirectory.ActiveDirectoryRealm var0 = new org.jsecurity.realm.activedirectory.ActiveDirectoryRealm();
    org.jsecurity.authc.credential.Sha256CredentialsMatcher var1 = new org.jsecurity.authc.credential.Sha256CredentialsMatcher();
    var0.setCredentialsMatcher((org.jsecurity.authc.credential.CredentialsMatcher)var1);
    java.lang.String var3 = var0.getAuthorizationCacheName();
    var0.setSystemUsername("a2b823b1e72eae2b727289df8a00a89df8a0bab6ad8a89c4c5c7a9b62a270000");
    var0.init();
    org.jsecurity.realm.activedirectory.ActiveDirectoryRealm var7 = new org.jsecurity.realm.activedirectory.ActiveDirectoryRealm();
    var7.init();
    var7.init();
    org.jsecurity.realm.activedirectory.ActiveDirectoryRealm var10 = new org.jsecurity.realm.activedirectory.ActiveDirectoryRealm();
    org.jsecurity.authc.credential.Sha256CredentialsMatcher var11 = new org.jsecurity.authc.credential.Sha256CredentialsMatcher();
    var10.setCredentialsMatcher((org.jsecurity.authc.credential.CredentialsMatcher)var11);
    java.lang.String var13 = var10.getAuthorizationCacheName();
    var10.setUrl("hi!");
    org.jsecurity.realm.ldap.DefaultLdapContextFactory var16 = new org.jsecurity.realm.ldap.DefaultLdapContextFactory();
    var10.setLdapContextFactory((org.jsecurity.realm.ldap.LdapContextFactory)var16);
    var16.setAuthentication("dd\uFFFD");
    var7.setLdapContextFactory((org.jsecurity.realm.ldap.LdapContextFactory)var16);
    var16.setReferral("dd\uFFFD");
    var0.setLdapContextFactory((org.jsecurity.realm.ldap.LdapContextFactory)var16);
    org.jsecurity.realm.activedirectory.ActiveDirectoryRealm var24 = new org.jsecurity.realm.activedirectory.ActiveDirectoryRealm();
    org.jsecurity.authc.credential.Sha256CredentialsMatcher var25 = new org.jsecurity.authc.credential.Sha256CredentialsMatcher();
    var24.setCredentialsMatcher((org.jsecurity.authc.credential.CredentialsMatcher)var25);
    java.lang.String var27 = var24.getAuthorizationCacheName();
    var24.setSearchBase("org.jsecurity.realm.text.PropertiesRealm_983");
    org.jsecurity.io.IniResource var30 = new org.jsecurity.io.IniResource();
    java.lang.String var31 = var30.getCharsetName();
    org.jsecurity.config.ReflectionBuilder var32 = new org.jsecurity.config.ReflectionBuilder();
    org.jsecurity.io.IniResource var33 = new org.jsecurity.io.IniResource();
    var33.setCharsetName("org.jsecurity.authz.UnauthorizedException: org.jsecurity.session.ExpiredSessionException: ");
    java.util.Map var36 = var33.getSections();
    java.util.Map var37 = var32.buildObjects(var36);
    var30.setSections(var37);
    var24.setGroupRolesMap(var37);
    org.jsecurity.config.ReflectionBuilder var40 = new org.jsecurity.config.ReflectionBuilder(var37);
    var16.setAdditionalEnvironment(var37);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var3);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var13);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var27);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var31);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var36);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var37);

  }

  public void test316() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest6.test316");


    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      org.jsecurity.crypto.hash.Md2Hash var1 = org.jsecurity.crypto.hash.Md2Hash.fromHexString("e8e5d499-33c0-418e-93f9-76a51372c414");
      fail("Expected exception of type java.lang.IllegalArgumentException");
    } catch (java.lang.IllegalArgumentException e) {
      // Expected exception.
    }

  }

  public void test317() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest6.test317");


    org.jsecurity.cache.HashtableCacheManager var0 = new org.jsecurity.cache.HashtableCacheManager();
    org.jsecurity.cache.Cache var2 = var0.getCache("\u0000\u0000");
    org.jsecurity.realm.text.PropertiesRealm var3 = new org.jsecurity.realm.text.PropertiesRealm((org.jsecurity.cache.CacheManager)var0);
    org.jsecurity.codec.CodecException var6 = new org.jsecurity.codec.CodecException("dd\uFFFD");
    org.jsecurity.authc.ConcurrentAccessException var7 = new org.jsecurity.authc.ConcurrentAccessException("org.jsecurity.authz.UnauthorizedException: org.jsecurity.session.ExpiredSessionException: ", (java.lang.Throwable)var6);
    org.jsecurity.subject.SimplePrincipalCollection var9 = new org.jsecurity.subject.SimplePrincipalCollection((java.lang.Object)var6, "");
    org.jsecurity.authc.pam.FirstSuccessfulAuthenticationStrategy var10 = new org.jsecurity.authc.pam.FirstSuccessfulAuthenticationStrategy();
    org.jsecurity.authz.UnauthorizedException var12 = new org.jsecurity.authz.UnauthorizedException("org.jsecurity.config.ConfigurationException: dd\uFFFD");
    java.lang.Throwable[] var13 = var12.getSuppressed();
    java.util.List var14 = org.jsecurity.util.CollectionUtils.asList((java.lang.Object[])var13);
    org.jsecurity.authc.UsernamePasswordToken var15 = new org.jsecurity.authc.UsernamePasswordToken();
    java.lang.String var16 = var15.getUsername();
    java.net.InetAddress var17 = var15.getInetAddress();
    org.jsecurity.authc.AuthenticationInfo var18 = var10.beforeAllAttempts((java.util.Collection)var14, (org.jsecurity.authc.AuthenticationToken)var15);
    org.jsecurity.session.UnknownSessionException var23 = new org.jsecurity.session.UnknownSessionException("dd\uFFFD", (java.io.Serializable)100.0f);
    org.jsecurity.subject.SubjectException var24 = new org.jsecurity.subject.SubjectException("dd\uFFFD", (java.lang.Throwable)var23);
    org.jsecurity.io.SerializationException var25 = new org.jsecurity.io.SerializationException("", (java.lang.Throwable)var24);
    java.lang.Throwable[] var26 = var24.getSuppressed();
    java.util.Set var27 = org.jsecurity.util.CollectionUtils.asSet((java.lang.Object[])var26);
    org.jsecurity.authc.SimpleAccount var28 = new org.jsecurity.authc.SimpleAccount((org.jsecurity.subject.PrincipalCollection)var9, (java.lang.Object)var14, var27);
    var3.onLogout((org.jsecurity.subject.PrincipalCollection)var9);
    java.lang.String var30 = var3.getRoleDefinitions();
    org.jsecurity.authc.credential.CredentialsMatcher var31 = var3.getCredentialsMatcher();
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var2);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var13);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var14);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var16);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var17);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var18);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var26);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var27);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var30 + "' != '" + "goodguy = winnebago:drive:eagle5\nroot = *\nschwartz = lightsaber:*\n"+ "'", var30.equals("goodguy = winnebago:drive:eagle5\nroot = *\nschwartz = lightsaber:*\n"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var31);

  }

  public void test318() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest6.test318");


    org.jsecurity.io.XmlSerializer var0 = new org.jsecurity.io.XmlSerializer();
    org.jsecurity.session.mgt.quartz.QuartzSessionValidationScheduler var1 = new org.jsecurity.session.mgt.quartz.QuartzSessionValidationScheduler();
    var1.disableSessionValidation();
    byte[] var3 = var0.serialize((java.lang.Object)var1);
    byte[] var5 = var0.serialize((java.lang.Object)1);
    org.jsecurity.authz.aop.UserAnnotationMethodInterceptor var6 = new org.jsecurity.authz.aop.UserAnnotationMethodInterceptor();
    org.jsecurity.aop.AnnotationHandler var7 = var6.getHandler();
    java.lang.Class var8 = var7.getAnnotationClass();
    byte[] var9 = var0.serialize((java.lang.Object)var7);
    org.jsecurity.session.mgt.SimpleSession var10 = new org.jsecurity.session.mgt.SimpleSession();
    var10.setTimeout((-1L));
    org.jsecurity.session.mgt.SimpleSession var13 = new org.jsecurity.session.mgt.SimpleSession();
    var13.setTimeout((-1L));
    org.jsecurity.session.mgt.SimpleSession var16 = new org.jsecurity.session.mgt.SimpleSession();
    java.util.Date var17 = var16.getLastAccessTime();
    var13.setLastAccessTime(var17);
    org.jsecurity.session.mgt.SimpleSession var19 = new org.jsecurity.session.mgt.SimpleSession();
    java.util.Date var20 = var19.getLastAccessTime();
    var13.setStopTimestamp(var20);
    var10.setStartTimestamp(var20);
    byte[] var23 = var0.serialize((java.lang.Object)var20);
    org.jsecurity.session.SessionException var24 = new org.jsecurity.session.SessionException((java.io.Serializable)var20);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var3);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var5);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var7);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var8);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var9);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var17);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var20);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var23);

  }

  public void test319() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest6.test319");


    org.jsecurity.authz.aop.RoleAnnotationMethodInterceptor var0 = new org.jsecurity.authz.aop.RoleAnnotationMethodInterceptor();
    org.jsecurity.authz.aop.UserAnnotationMethodInterceptor var1 = new org.jsecurity.authz.aop.UserAnnotationMethodInterceptor();
    org.jsecurity.aop.AnnotationHandler var2 = var1.getHandler();
    var0.setHandler(var2);
    org.jsecurity.aop.AnnotationHandler var4 = var0.getHandler();
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var2);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var4);

  }

  public void test320() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest6.test320");


    org.jsecurity.realm.activedirectory.ActiveDirectoryRealm var0 = new org.jsecurity.realm.activedirectory.ActiveDirectoryRealm();
    var0.init();
    var0.setSystemPassword("dd\uFFFD");
    org.jsecurity.cache.Cache var4 = var0.getAuthorizationCache();
    org.jsecurity.mgt.DefaultSecurityManager var5 = new org.jsecurity.mgt.DefaultSecurityManager((org.jsecurity.realm.Realm)var0);
    java.io.InputStream var7 = org.jsecurity.util.ClassUtils.getResourceAsStream("");
    java.lang.Object[] var8 = new java.lang.Object[] { var7};
    java.util.List var9 = org.jsecurity.util.CollectionUtils.asList(var8);
    org.jsecurity.authc.pam.ModularRealmAuthenticator var10 = new org.jsecurity.authc.pam.ModularRealmAuthenticator(var9);
    org.jsecurity.subject.SimplePrincipalCollection var12 = new org.jsecurity.subject.SimplePrincipalCollection((java.util.Collection)var9, "org.jsecurity.authz.UnauthorizedException: org.jsecurity.session.ExpiredSessionException: ");
    org.jsecurity.io.ResourceException var16 = new org.jsecurity.io.ResourceException("hi!");
    org.jsecurity.authc.UnknownAccountException var17 = new org.jsecurity.authc.UnknownAccountException((java.lang.Throwable)var16);
    org.jsecurity.session.StoppedSessionException var18 = new org.jsecurity.session.StoppedSessionException("dd\uFFFD", (java.io.Serializable)var16);
    org.jsecurity.session.UnknownSessionException var19 = new org.jsecurity.session.UnknownSessionException("org.jsecurity.authz.UnauthorizedException: org.jsecurity.session.ExpiredSessionException: ", (java.lang.Throwable)var16);
    boolean var20 = var12.equals((java.lang.Object)var16);
    org.jsecurity.authz.SimpleAuthorizationInfo var21 = new org.jsecurity.authz.SimpleAuthorizationInfo();
    var21.addRole("a2b823b1e72eae2b727289df8a00a89df8a0bab6ad8a89c4c5c7a9b62a270000");
    org.jsecurity.authz.SimpleAuthorizationInfo var24 = new org.jsecurity.authz.SimpleAuthorizationInfo();
    var24.addRole("a2b823b1e72eae2b727289df8a00a89df8a0bab6ad8a89c4c5c7a9b62a270000");
    org.jsecurity.session.UnknownSessionException var31 = new org.jsecurity.session.UnknownSessionException("dd\uFFFD", (java.io.Serializable)100.0f);
    org.jsecurity.subject.SubjectException var32 = new org.jsecurity.subject.SubjectException("dd\uFFFD", (java.lang.Throwable)var31);
    org.jsecurity.io.SerializationException var33 = new org.jsecurity.io.SerializationException("", (java.lang.Throwable)var32);
    java.lang.Throwable[] var34 = var32.getSuppressed();
    java.util.Set var35 = org.jsecurity.util.CollectionUtils.asSet((java.lang.Object[])var34);
    var24.addRoles((java.util.Collection)var35);
    var21.setObjectPermissions(var35);
    java.io.InputStream var39 = org.jsecurity.util.ClassUtils.getResourceAsStream("");
    java.lang.Object[] var40 = new java.lang.Object[] { var39};
    java.util.List var41 = org.jsecurity.util.CollectionUtils.asList(var40);
    org.jsecurity.authc.pam.ModularRealmAuthenticator var42 = new org.jsecurity.authc.pam.ModularRealmAuthenticator(var41);
    org.jsecurity.subject.SimplePrincipalCollection var44 = new org.jsecurity.subject.SimplePrincipalCollection((java.util.Collection)var41, "org.jsecurity.authz.UnauthorizedException: org.jsecurity.session.ExpiredSessionException: ");
    java.util.Set var45 = var44.getRealmNames();
    java.io.InputStream var47 = org.jsecurity.util.ClassUtils.getResourceAsStream("");
    java.lang.Object[] var48 = new java.lang.Object[] { var47};
    java.util.List var49 = org.jsecurity.util.CollectionUtils.asList(var48);
    org.jsecurity.authc.pam.ModularRealmAuthenticator var50 = new org.jsecurity.authc.pam.ModularRealmAuthenticator(var49);
    org.jsecurity.subject.SimplePrincipalCollection var52 = new org.jsecurity.subject.SimplePrincipalCollection((java.util.Collection)var49, "org.jsecurity.authz.UnauthorizedException: org.jsecurity.session.ExpiredSessionException: ");
    org.jsecurity.session.UnknownSessionException var57 = new org.jsecurity.session.UnknownSessionException("dd\uFFFD", (java.io.Serializable)100.0f);
    org.jsecurity.session.SessionException var59 = new org.jsecurity.session.SessionException("dd\uFFFD", (java.lang.Throwable)var57, (java.io.Serializable)0);
    org.jsecurity.session.SessionException var60 = new org.jsecurity.session.SessionException("dd\uFFFD", (java.lang.Throwable)var57);
    var52.add((java.lang.Object)var60, "org.jsecurity.config.ConfigurationException: dd\uFFFD");
    java.util.Set var63 = var52.asSet();
    var44.addAll((java.util.Collection)var63, "6464ff");
    var21.setStringPermissions(var63);
    var12.addAll((java.util.Collection)var63, "\uFFFD\uFFFD#\uFFFD\uFFFD.\uFFFD+r\uFFFD\u6959(\uFFFD\uFFFDW\uFFFDq\uFFFD.\uFFFD\uFFFD^jY\uFFFDj\uFFFDa\uFFFD\uFFFD\uFFFDj\u0628\u0000");
    var5.setSessionListeners((java.util.Collection)var63);
    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      var5.setRememberMeDecryptionCipherKeyBase64("org.jsecurity.realm.text.PropertiesRealm_2075");
      fail("Expected exception of type java.lang.IllegalStateException");
    } catch (java.lang.IllegalStateException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var4);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var7);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var8);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var9);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var20 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var34);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var35);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var39);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var40);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var41);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var45);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var47);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var48);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var49);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var63);

  }

  public void test321() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest6.test321");


    org.jsecurity.io.SerializationException var1 = new org.jsecurity.io.SerializationException("7856269b-c3fb-4264-9649-c8194198e7eb");

  }

  public void test322() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest6.test322");


    org.jsecurity.session.mgt.quartz.QuartzSessionValidationScheduler var0 = new org.jsecurity.session.mgt.quartz.QuartzSessionValidationScheduler();
    boolean var1 = var0.isEnabled();
    var0.enableSessionValidation();
    boolean var3 = var0.isEnabled();
    boolean var4 = var0.isEnabled();
    var0.setSessionValidationInterval(1L);
    var0.enableSessionValidation();
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var1 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var3 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var4 == true);

  }

  public void test323() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest6.test323");


    org.jsecurity.mgt.DefaultSecurityManager var0 = new org.jsecurity.mgt.DefaultSecurityManager();
    org.jsecurity.authc.pam.AllSuccessfulModularAuthenticationStrategy var1 = new org.jsecurity.authc.pam.AllSuccessfulModularAuthenticationStrategy();
    org.jsecurity.authc.pam.AllSuccessfulModularAuthenticationStrategy var2 = new org.jsecurity.authc.pam.AllSuccessfulModularAuthenticationStrategy();
    char[] var4 = new char[] { };
    org.jsecurity.authc.UsernamePasswordToken var6 = new org.jsecurity.authc.UsernamePasswordToken("hi!", var4, true);
    org.jsecurity.authc.SimpleAccount var7 = new org.jsecurity.authc.SimpleAccount();
    var7.setCredentialsExpired(false);
    boolean var10 = var7.isLocked();
    org.jsecurity.authc.AuthenticationInfo var11 = var2.afterAllAttempts((org.jsecurity.authc.AuthenticationToken)var6, (org.jsecurity.authc.AuthenticationInfo)var7);
    char[] var15 = new char[] { '4', '#'};
    org.jsecurity.authc.UsernamePasswordToken var16 = new org.jsecurity.authc.UsernamePasswordToken("\u0000\u0000", var15);
    org.jsecurity.authc.SimpleAccount var17 = new org.jsecurity.authc.SimpleAccount();
    var17.setCredentialsExpired(false);
    var17.setCredentialsExpired(false);
    boolean var22 = var17.isCredentialsExpired();
    org.jsecurity.authc.AuthenticationInfo var23 = var2.afterAllAttempts((org.jsecurity.authc.AuthenticationToken)var16, (org.jsecurity.authc.AuthenticationInfo)var17);
    org.jsecurity.authz.UnauthenticatedException var27 = new org.jsecurity.authz.UnauthenticatedException();
    org.jsecurity.config.UnresolveableReferenceException var28 = new org.jsecurity.config.UnresolveableReferenceException("", (java.lang.Throwable)var27);
    org.jsecurity.cache.CacheException var29 = new org.jsecurity.cache.CacheException("org.jsecurity.config.ConfigurationException: dd\uFFFD", (java.lang.Throwable)var27);
    org.jsecurity.authc.SimpleAuthenticationInfo var31 = new org.jsecurity.authc.SimpleAuthenticationInfo((java.lang.Object)"org.jsecurity.config.ConfigurationException: dd\uFFFD", (java.lang.Object)var29, "a2b823b1e72eae2b727289df8a00a89df8a0bab6ad8a89c4c5c7a9b62a270000");
    org.jsecurity.subject.PrincipalCollection var32 = var31.getPrincipals();
    org.jsecurity.authc.AuthenticationInfo var33 = var1.afterAllAttempts((org.jsecurity.authc.AuthenticationToken)var16, (org.jsecurity.authc.AuthenticationInfo)var31);
    var0.setModularAuthenticationStrategy((org.jsecurity.authc.pam.ModularAuthenticationStrategy)var1);
    org.jsecurity.subject.RememberMeManager var35 = var0.getRememberMeManager();
    org.jsecurity.subject.RememberMeManager var36 = var0.getRememberMeManager();
    org.jsecurity.session.mgt.SessionManager var37 = var0.getSessionManager();
    org.jsecurity.cache.CacheManager var38 = var0.getCacheManager();
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var4);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var10 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var11);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var15);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var22 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var23);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var32);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var33);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var35);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var36);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var37);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var38);

  }

  public void test324() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest6.test324");


    org.jsecurity.realm.activedirectory.ActiveDirectoryRealm var0 = new org.jsecurity.realm.activedirectory.ActiveDirectoryRealm();
    var0.init();
    var0.setSystemPassword("dd\uFFFD");
    org.jsecurity.cache.Cache var4 = var0.getAuthorizationCache();
    org.jsecurity.mgt.DefaultSecurityManager var5 = new org.jsecurity.mgt.DefaultSecurityManager((org.jsecurity.realm.Realm)var0);
    java.io.InputStream var7 = org.jsecurity.util.ClassUtils.getResourceAsStream("");
    java.lang.Object[] var8 = new java.lang.Object[] { var7};
    java.util.List var9 = org.jsecurity.util.CollectionUtils.asList(var8);
    org.jsecurity.authc.pam.ModularRealmAuthenticator var10 = new org.jsecurity.authc.pam.ModularRealmAuthenticator(var9);
    org.jsecurity.subject.SimplePrincipalCollection var12 = new org.jsecurity.subject.SimplePrincipalCollection((java.util.Collection)var9, "org.jsecurity.authz.UnauthorizedException: org.jsecurity.session.ExpiredSessionException: ");
    org.jsecurity.io.ResourceException var16 = new org.jsecurity.io.ResourceException("hi!");
    org.jsecurity.authc.UnknownAccountException var17 = new org.jsecurity.authc.UnknownAccountException((java.lang.Throwable)var16);
    org.jsecurity.session.StoppedSessionException var18 = new org.jsecurity.session.StoppedSessionException("dd\uFFFD", (java.io.Serializable)var16);
    org.jsecurity.session.UnknownSessionException var19 = new org.jsecurity.session.UnknownSessionException("org.jsecurity.authz.UnauthorizedException: org.jsecurity.session.ExpiredSessionException: ", (java.lang.Throwable)var16);
    boolean var20 = var12.equals((java.lang.Object)var16);
    org.jsecurity.authz.SimpleAuthorizationInfo var21 = new org.jsecurity.authz.SimpleAuthorizationInfo();
    var21.addRole("a2b823b1e72eae2b727289df8a00a89df8a0bab6ad8a89c4c5c7a9b62a270000");
    org.jsecurity.authz.SimpleAuthorizationInfo var24 = new org.jsecurity.authz.SimpleAuthorizationInfo();
    var24.addRole("a2b823b1e72eae2b727289df8a00a89df8a0bab6ad8a89c4c5c7a9b62a270000");
    org.jsecurity.session.UnknownSessionException var31 = new org.jsecurity.session.UnknownSessionException("dd\uFFFD", (java.io.Serializable)100.0f);
    org.jsecurity.subject.SubjectException var32 = new org.jsecurity.subject.SubjectException("dd\uFFFD", (java.lang.Throwable)var31);
    org.jsecurity.io.SerializationException var33 = new org.jsecurity.io.SerializationException("", (java.lang.Throwable)var32);
    java.lang.Throwable[] var34 = var32.getSuppressed();
    java.util.Set var35 = org.jsecurity.util.CollectionUtils.asSet((java.lang.Object[])var34);
    var24.addRoles((java.util.Collection)var35);
    var21.setObjectPermissions(var35);
    java.io.InputStream var39 = org.jsecurity.util.ClassUtils.getResourceAsStream("");
    java.lang.Object[] var40 = new java.lang.Object[] { var39};
    java.util.List var41 = org.jsecurity.util.CollectionUtils.asList(var40);
    org.jsecurity.authc.pam.ModularRealmAuthenticator var42 = new org.jsecurity.authc.pam.ModularRealmAuthenticator(var41);
    org.jsecurity.subject.SimplePrincipalCollection var44 = new org.jsecurity.subject.SimplePrincipalCollection((java.util.Collection)var41, "org.jsecurity.authz.UnauthorizedException: org.jsecurity.session.ExpiredSessionException: ");
    java.util.Set var45 = var44.getRealmNames();
    java.io.InputStream var47 = org.jsecurity.util.ClassUtils.getResourceAsStream("");
    java.lang.Object[] var48 = new java.lang.Object[] { var47};
    java.util.List var49 = org.jsecurity.util.CollectionUtils.asList(var48);
    org.jsecurity.authc.pam.ModularRealmAuthenticator var50 = new org.jsecurity.authc.pam.ModularRealmAuthenticator(var49);
    org.jsecurity.subject.SimplePrincipalCollection var52 = new org.jsecurity.subject.SimplePrincipalCollection((java.util.Collection)var49, "org.jsecurity.authz.UnauthorizedException: org.jsecurity.session.ExpiredSessionException: ");
    org.jsecurity.session.UnknownSessionException var57 = new org.jsecurity.session.UnknownSessionException("dd\uFFFD", (java.io.Serializable)100.0f);
    org.jsecurity.session.SessionException var59 = new org.jsecurity.session.SessionException("dd\uFFFD", (java.lang.Throwable)var57, (java.io.Serializable)0);
    org.jsecurity.session.SessionException var60 = new org.jsecurity.session.SessionException("dd\uFFFD", (java.lang.Throwable)var57);
    var52.add((java.lang.Object)var60, "org.jsecurity.config.ConfigurationException: dd\uFFFD");
    java.util.Set var63 = var52.asSet();
    var44.addAll((java.util.Collection)var63, "6464ff");
    var21.setStringPermissions(var63);
    var12.addAll((java.util.Collection)var63, "\uFFFD\uFFFD#\uFFFD\uFFFD.\uFFFD+r\uFFFD\u6959(\uFFFD\uFFFDW\uFFFDq\uFFFD.\uFFFD\uFFFD^jY\uFFFDj\uFFFDa\uFFFD\uFFFD\uFFFDj\u0628\u0000");
    var5.setSessionListeners((java.util.Collection)var63);
    org.jsecurity.realm.activedirectory.ActiveDirectoryRealm var70 = new org.jsecurity.realm.activedirectory.ActiveDirectoryRealm();
    var70.init();
    var70.init();
    org.jsecurity.config.ReflectionBuilder var73 = new org.jsecurity.config.ReflectionBuilder();
    org.jsecurity.config.ReflectionBuilder var74 = new org.jsecurity.config.ReflectionBuilder();
    org.jsecurity.io.IniResource var75 = new org.jsecurity.io.IniResource();
    var75.setCharsetName("org.jsecurity.authz.UnauthorizedException: org.jsecurity.session.ExpiredSessionException: ");
    java.util.Map var78 = var75.getSections();
    java.util.Map var79 = var74.buildObjects(var78);
    org.jsecurity.config.ReflectionBuilder var80 = new org.jsecurity.config.ReflectionBuilder();
    org.jsecurity.io.IniResource var81 = new org.jsecurity.io.IniResource();
    var81.setCharsetName("org.jsecurity.authz.UnauthorizedException: org.jsecurity.session.ExpiredSessionException: ");
    java.util.Map var84 = var81.getSections();
    java.util.Map var85 = var80.buildObjects(var84);
    java.util.Map var86 = var74.buildObjects(var85);
    java.util.Map var87 = var73.buildObjects(var86);
    var70.setGroupRolesMap(var87);
    var70.setSystemUsername("org.jsecurity.authc.IncorrectCredentialsException: \u0000\u0000");
    var5.setRealm((org.jsecurity.realm.Realm)var70);
    org.jsecurity.subject.DelegatingSubject var92 = new org.jsecurity.subject.DelegatingSubject((org.jsecurity.mgt.SecurityManager)var5);
    boolean var93 = var92.isAuthenticated();
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var4);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var7);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var8);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var9);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var20 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var34);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var35);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var39);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var40);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var41);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var45);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var47);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var48);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var49);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var63);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var78);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var79);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var84);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var85);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var86);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var87);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var93 == false);

  }

  public void test325() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest6.test325");


    org.jsecurity.realm.text.PropertiesRealm var0 = new org.jsecurity.realm.text.PropertiesRealm();
    var0.setRoleDefinitions("5dd0c65d-1422-49c2-becb-9e8dca619ab3");
    var0.setUseXmlFormat(true);
    var0.setResourcePath("b6a77f71-73c4-466a-903e-72fc5968f9ac");
    org.jsecurity.mgt.DefaultSecurityManager var7 = new org.jsecurity.mgt.DefaultSecurityManager();
    java.io.InputStream var9 = org.jsecurity.util.ClassUtils.getResourceAsStream("");
    java.lang.Object[] var10 = new java.lang.Object[] { var9};
    java.util.List var11 = org.jsecurity.util.CollectionUtils.asList(var10);
    org.jsecurity.authc.pam.ModularRealmAuthenticator var12 = new org.jsecurity.authc.pam.ModularRealmAuthenticator(var11);
    org.jsecurity.authc.pam.AllSuccessfulModularAuthenticationStrategy var13 = new org.jsecurity.authc.pam.AllSuccessfulModularAuthenticationStrategy();
    var12.setModularAuthenticationStrategy((org.jsecurity.authc.pam.ModularAuthenticationStrategy)var13);
    org.jsecurity.authz.SimpleAuthorizationInfo var15 = new org.jsecurity.authz.SimpleAuthorizationInfo();
    var15.addStringPermission("hi!");
    java.io.InputStream var19 = org.jsecurity.util.ClassUtils.getResourceAsStream("");
    java.lang.Object[] var20 = new java.lang.Object[] { var19};
    java.util.List var21 = org.jsecurity.util.CollectionUtils.asList(var20);
    var15.addRoles((java.util.Collection)var21);
    var12.setAuthenticationListeners((java.util.Collection)var21);
    var7.setSessionListeners((java.util.Collection)var21);
    org.jsecurity.realm.text.TextConfigurationRealm var25 = new org.jsecurity.realm.text.TextConfigurationRealm();
    java.io.InputStream var27 = org.jsecurity.util.ClassUtils.getResourceAsStream("");
    java.lang.Object[] var28 = new java.lang.Object[] { var27};
    java.util.List var29 = org.jsecurity.util.CollectionUtils.asList(var28);
    org.jsecurity.authc.pam.ModularRealmAuthenticator var30 = new org.jsecurity.authc.pam.ModularRealmAuthenticator(var29);
    org.jsecurity.subject.SimplePrincipalCollection var32 = new org.jsecurity.subject.SimplePrincipalCollection((java.util.Collection)var29, "org.jsecurity.authz.UnauthorizedException: org.jsecurity.session.ExpiredSessionException: ");
    org.jsecurity.session.UnknownSessionException var37 = new org.jsecurity.session.UnknownSessionException("dd\uFFFD", (java.io.Serializable)100.0f);
    org.jsecurity.session.SessionException var39 = new org.jsecurity.session.SessionException("dd\uFFFD", (java.lang.Throwable)var37, (java.io.Serializable)0);
    org.jsecurity.session.SessionException var40 = new org.jsecurity.session.SessionException("dd\uFFFD", (java.lang.Throwable)var37);
    var32.add((java.lang.Object)var40, "org.jsecurity.config.ConfigurationException: dd\uFFFD");
    var25.onLogout((org.jsecurity.subject.PrincipalCollection)var32);
    org.jsecurity.authc.pam.FirstSuccessfulAuthenticationStrategy var44 = new org.jsecurity.authc.pam.FirstSuccessfulAuthenticationStrategy();
    org.jsecurity.authz.UnauthorizedException var46 = new org.jsecurity.authz.UnauthorizedException("org.jsecurity.config.ConfigurationException: dd\uFFFD");
    java.lang.Throwable[] var47 = var46.getSuppressed();
    java.util.List var48 = org.jsecurity.util.CollectionUtils.asList((java.lang.Object[])var47);
    org.jsecurity.authc.UsernamePasswordToken var49 = new org.jsecurity.authc.UsernamePasswordToken();
    java.lang.String var50 = var49.getUsername();
    java.net.InetAddress var51 = var49.getInetAddress();
    org.jsecurity.authc.AuthenticationInfo var52 = var44.beforeAllAttempts((java.util.Collection)var48, (org.jsecurity.authc.AuthenticationToken)var49);
    boolean[] var53 = var7.hasRoles((org.jsecurity.subject.PrincipalCollection)var32, var48);
    org.jsecurity.authz.permission.WildcardPermissionResolver var54 = new org.jsecurity.authz.permission.WildcardPermissionResolver();
    org.jsecurity.authz.Permission var56 = var54.resolvePermission("hi!");
    org.jsecurity.authz.Permission var58 = var54.resolvePermission("hi!");
    var7.setPermissionResolver((org.jsecurity.authz.permission.PermissionResolver)var54);
    var0.setPermissionResolver((org.jsecurity.authz.permission.PermissionResolver)var54);
    org.jsecurity.authz.Permission var62 = var54.resolvePermission("e7e879cb-1172-4cea-8bca-f370fbe1f08c");
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var9);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var10);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var11);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var19);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var20);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var21);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var27);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var28);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var29);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var47);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var48);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var50);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var51);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var52);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var53);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var56);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var58);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var62);

  }

  public void test326() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest6.test326");


    boolean var1 = org.jsecurity.util.StringUtils.hasText("d");
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var1 == true);

  }

  public void test327() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest6.test327");


    org.jsecurity.authc.DisabledAccountException var1 = new org.jsecurity.authc.DisabledAccountException("e2bf819a-7887-4645-8a19-b90c55f9c7b2");

  }

  public void test328() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest6.test328");


    org.jsecurity.authc.ConcurrentAccessException var1 = new org.jsecurity.authc.ConcurrentAccessException("6da7d2f4-0515-4a20-87d9-cb23772ba002");

  }

  public void test329() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest6.test329");


    org.jsecurity.mgt.DefaultSecurityManager var0 = new org.jsecurity.mgt.DefaultSecurityManager();
    java.io.InputStream var2 = org.jsecurity.util.ClassUtils.getResourceAsStream("");
    java.lang.Object[] var3 = new java.lang.Object[] { var2};
    java.util.List var4 = org.jsecurity.util.CollectionUtils.asList(var3);
    org.jsecurity.authc.pam.ModularRealmAuthenticator var5 = new org.jsecurity.authc.pam.ModularRealmAuthenticator(var4);
    org.jsecurity.authc.pam.AllSuccessfulModularAuthenticationStrategy var6 = new org.jsecurity.authc.pam.AllSuccessfulModularAuthenticationStrategy();
    var5.setModularAuthenticationStrategy((org.jsecurity.authc.pam.ModularAuthenticationStrategy)var6);
    org.jsecurity.authz.SimpleAuthorizationInfo var8 = new org.jsecurity.authz.SimpleAuthorizationInfo();
    var8.addStringPermission("hi!");
    java.io.InputStream var12 = org.jsecurity.util.ClassUtils.getResourceAsStream("");
    java.lang.Object[] var13 = new java.lang.Object[] { var12};
    java.util.List var14 = org.jsecurity.util.CollectionUtils.asList(var13);
    var8.addRoles((java.util.Collection)var14);
    var5.setAuthenticationListeners((java.util.Collection)var14);
    var0.setSessionListeners((java.util.Collection)var14);
    org.jsecurity.authc.pam.ModularRealmAuthenticator var18 = new org.jsecurity.authc.pam.ModularRealmAuthenticator();
    org.jsecurity.authz.permission.InvalidPermissionStringException var21 = new org.jsecurity.authz.permission.InvalidPermissionStringException("", "dd\uFFFD");
    org.jsecurity.JSecurityException var23 = new org.jsecurity.JSecurityException("");
    org.jsecurity.authc.SimpleAuthenticationInfo var25 = new org.jsecurity.authc.SimpleAuthenticationInfo((java.lang.Object)var21, (java.lang.Object)"", "org.jsecurity.authz.UnauthorizedException: org.jsecurity.session.ExpiredSessionException: ");
    org.jsecurity.subject.PrincipalCollection var26 = var25.getPrincipals();
    var18.onLogout(var26);
    var0.setAuthenticator((org.jsecurity.authc.Authenticator)var18);
    org.jsecurity.codec.CodecException var31 = new org.jsecurity.codec.CodecException("dd\uFFFD");
    org.jsecurity.authc.ConcurrentAccessException var32 = new org.jsecurity.authc.ConcurrentAccessException("org.jsecurity.authz.UnauthorizedException: org.jsecurity.session.ExpiredSessionException: ", (java.lang.Throwable)var31);
    org.jsecurity.subject.SimplePrincipalCollection var34 = new org.jsecurity.subject.SimplePrincipalCollection((java.lang.Object)var31, "");
    org.jsecurity.authc.pam.FirstSuccessfulAuthenticationStrategy var35 = new org.jsecurity.authc.pam.FirstSuccessfulAuthenticationStrategy();
    org.jsecurity.authz.UnauthorizedException var37 = new org.jsecurity.authz.UnauthorizedException("org.jsecurity.config.ConfigurationException: dd\uFFFD");
    java.lang.Throwable[] var38 = var37.getSuppressed();
    java.util.List var39 = org.jsecurity.util.CollectionUtils.asList((java.lang.Object[])var38);
    org.jsecurity.authc.UsernamePasswordToken var40 = new org.jsecurity.authc.UsernamePasswordToken();
    java.lang.String var41 = var40.getUsername();
    java.net.InetAddress var42 = var40.getInetAddress();
    org.jsecurity.authc.AuthenticationInfo var43 = var35.beforeAllAttempts((java.util.Collection)var39, (org.jsecurity.authc.AuthenticationToken)var40);
    org.jsecurity.session.UnknownSessionException var48 = new org.jsecurity.session.UnknownSessionException("dd\uFFFD", (java.io.Serializable)100.0f);
    org.jsecurity.subject.SubjectException var49 = new org.jsecurity.subject.SubjectException("dd\uFFFD", (java.lang.Throwable)var48);
    org.jsecurity.io.SerializationException var50 = new org.jsecurity.io.SerializationException("", (java.lang.Throwable)var49);
    java.lang.Throwable[] var51 = var49.getSuppressed();
    java.util.Set var52 = org.jsecurity.util.CollectionUtils.asSet((java.lang.Object[])var51);
    org.jsecurity.authc.SimpleAccount var53 = new org.jsecurity.authc.SimpleAccount((org.jsecurity.subject.PrincipalCollection)var34, (java.lang.Object)var39, var52);
    java.io.InputStream var55 = org.jsecurity.util.ClassUtils.getResourceAsStream("");
    java.lang.Object[] var56 = new java.lang.Object[] { var55};
    java.util.List var57 = org.jsecurity.util.CollectionUtils.asList(var56);
    org.jsecurity.authc.pam.ModularRealmAuthenticator var58 = new org.jsecurity.authc.pam.ModularRealmAuthenticator(var57);
    org.jsecurity.subject.SimplePrincipalCollection var60 = new org.jsecurity.subject.SimplePrincipalCollection((java.util.Collection)var57, "org.jsecurity.authz.UnauthorizedException: org.jsecurity.session.ExpiredSessionException: ");
    org.jsecurity.io.ResourceException var64 = new org.jsecurity.io.ResourceException("hi!");
    org.jsecurity.authc.UnknownAccountException var65 = new org.jsecurity.authc.UnknownAccountException((java.lang.Throwable)var64);
    org.jsecurity.session.StoppedSessionException var66 = new org.jsecurity.session.StoppedSessionException("dd\uFFFD", (java.io.Serializable)var64);
    org.jsecurity.session.UnknownSessionException var67 = new org.jsecurity.session.UnknownSessionException("org.jsecurity.authz.UnauthorizedException: org.jsecurity.session.ExpiredSessionException: ", (java.lang.Throwable)var64);
    boolean var68 = var60.equals((java.lang.Object)var64);
    var34.addAll((org.jsecurity.subject.PrincipalCollection)var60);
    org.jsecurity.session.UnknownSessionException var74 = new org.jsecurity.session.UnknownSessionException("dd\uFFFD", (java.io.Serializable)100.0f);
    org.jsecurity.subject.SubjectException var75 = new org.jsecurity.subject.SubjectException("dd\uFFFD", (java.lang.Throwable)var74);
    org.jsecurity.io.SerializationException var76 = new org.jsecurity.io.SerializationException("", (java.lang.Throwable)var75);
    java.lang.Throwable[] var77 = var75.getSuppressed();
    java.util.List var78 = org.jsecurity.util.CollectionUtils.asList((java.lang.Object[])var77);
    boolean var79 = var0.isPermittedAll((org.jsecurity.subject.PrincipalCollection)var34, (java.util.Collection)var78);
    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      var0.setRememberMeDecryptionCipherKeyBase64("org.jsecurity.realm.text.TextConfigurationRealm_3659");
      fail("Expected exception of type java.lang.IllegalStateException");
    } catch (java.lang.IllegalStateException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var2);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var3);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var4);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var12);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var13);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var14);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var26);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var38);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var39);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var41);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var42);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var43);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var51);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var52);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var55);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var56);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var57);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var68 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var77);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var78);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var79 == true);

  }

  public void test330() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest6.test330");


    java.util.Set var1 = org.jsecurity.util.PermissionUtils.toPermissionStrings("org.jsecurity.config.ConfigurationException: dd\uFFFD");
    org.jsecurity.realm.text.TextConfigurationRealm var2 = new org.jsecurity.realm.text.TextConfigurationRealm();
    org.jsecurity.realm.text.TextConfigurationRealm var3 = new org.jsecurity.realm.text.TextConfigurationRealm();
    java.io.InputStream var5 = org.jsecurity.util.ClassUtils.getResourceAsStream("");
    java.lang.Object[] var6 = new java.lang.Object[] { var5};
    java.util.List var7 = org.jsecurity.util.CollectionUtils.asList(var6);
    org.jsecurity.authc.pam.ModularRealmAuthenticator var8 = new org.jsecurity.authc.pam.ModularRealmAuthenticator(var7);
    org.jsecurity.subject.SimplePrincipalCollection var10 = new org.jsecurity.subject.SimplePrincipalCollection((java.util.Collection)var7, "org.jsecurity.authz.UnauthorizedException: org.jsecurity.session.ExpiredSessionException: ");
    org.jsecurity.session.UnknownSessionException var15 = new org.jsecurity.session.UnknownSessionException("dd\uFFFD", (java.io.Serializable)100.0f);
    org.jsecurity.session.SessionException var17 = new org.jsecurity.session.SessionException("dd\uFFFD", (java.lang.Throwable)var15, (java.io.Serializable)0);
    org.jsecurity.session.SessionException var18 = new org.jsecurity.session.SessionException("dd\uFFFD", (java.lang.Throwable)var15);
    var10.add((java.lang.Object)var18, "org.jsecurity.config.ConfigurationException: dd\uFFFD");
    var3.onLogout((org.jsecurity.subject.PrincipalCollection)var10);
    java.util.Collection var23 = var10.fromRealm("\u0000\u0000\u0000");
    var2.onLogout((org.jsecurity.subject.PrincipalCollection)var10);
    var2.setUserDefinitions("");
    java.lang.String var27 = var2.getName();
    org.jsecurity.authc.pam.ModularRealmAuthenticator var28 = new org.jsecurity.authc.pam.ModularRealmAuthenticator((org.jsecurity.realm.Realm)var2);
    org.jsecurity.realm.text.PropertiesRealm var29 = new org.jsecurity.realm.text.PropertiesRealm();
    var29.setRoleDefinitions("5dd0c65d-1422-49c2-becb-9e8dca619ab3");
    java.lang.String var32 = var29.getUserDefinitions();
    var29.setName("e23a02c5-2287-4daa-91c4-8efed2be0f73");
    var29.setResourcePath("69d3a52f-a464-4f98-8253-2a105929a356");
    org.jsecurity.realm.text.TextConfigurationRealm var38 = new org.jsecurity.realm.text.TextConfigurationRealm();
    java.io.InputStream var40 = org.jsecurity.util.ClassUtils.getResourceAsStream("");
    java.lang.Object[] var41 = new java.lang.Object[] { var40};
    java.util.List var42 = org.jsecurity.util.CollectionUtils.asList(var41);
    org.jsecurity.authc.pam.ModularRealmAuthenticator var43 = new org.jsecurity.authc.pam.ModularRealmAuthenticator(var42);
    org.jsecurity.subject.SimplePrincipalCollection var45 = new org.jsecurity.subject.SimplePrincipalCollection((java.util.Collection)var42, "org.jsecurity.authz.UnauthorizedException: org.jsecurity.session.ExpiredSessionException: ");
    org.jsecurity.session.UnknownSessionException var50 = new org.jsecurity.session.UnknownSessionException("dd\uFFFD", (java.io.Serializable)100.0f);
    org.jsecurity.session.SessionException var52 = new org.jsecurity.session.SessionException("dd\uFFFD", (java.lang.Throwable)var50, (java.io.Serializable)0);
    org.jsecurity.session.SessionException var53 = new org.jsecurity.session.SessionException("dd\uFFFD", (java.lang.Throwable)var50);
    var45.add((java.lang.Object)var53, "org.jsecurity.config.ConfigurationException: dd\uFFFD");
    var38.onLogout((org.jsecurity.subject.PrincipalCollection)var45);
    java.util.Set var58 = org.jsecurity.util.PermissionUtils.toPermissionStrings("org.jsecurity.config.ConfigurationException: dd\uFFFD");
    org.jsecurity.authz.SimpleAuthorizationInfo var59 = new org.jsecurity.authz.SimpleAuthorizationInfo(var58);
    org.jsecurity.authz.SimpleAuthorizingAccount var60 = new org.jsecurity.authz.SimpleAuthorizingAccount((org.jsecurity.subject.PrincipalCollection)var45, (java.lang.Object)var58);
    org.jsecurity.session.StoppedSessionException var61 = new org.jsecurity.session.StoppedSessionException("org.jsecurity.realm.SimpleAccountRealm-55-authorization", (java.io.Serializable)var45);
    org.jsecurity.realm.activedirectory.ActiveDirectoryRealm var62 = new org.jsecurity.realm.activedirectory.ActiveDirectoryRealm();
    var62.init();
    var62.setSystemPassword("dd\uFFFD");
    org.jsecurity.authz.aop.GuestAnnotationHandler var66 = new org.jsecurity.authz.aop.GuestAnnotationHandler();
    java.lang.Class var67 = var66.getAnnotationClass();
    var62.setAuthenticationTokenClass(var67);
    java.util.Collection var69 = var45.byType(var67);
    java.util.Set var70 = var45.asSet();
    var29.onLogout((org.jsecurity.subject.PrincipalCollection)var45);
    org.jsecurity.session.mgt.SimpleSession var72 = new org.jsecurity.session.mgt.SimpleSession();
    var72.setTimeout((-1L));
    org.jsecurity.session.mgt.SimpleSession var75 = new org.jsecurity.session.mgt.SimpleSession();
    java.util.Date var76 = var75.getLastAccessTime();
    var72.setLastAccessTime(var76);
    org.jsecurity.session.mgt.SimpleSession var78 = new org.jsecurity.session.mgt.SimpleSession();
    java.util.Date var79 = var78.getLastAccessTime();
    var72.setStopTimestamp(var79);
    var72.touch();
    org.jsecurity.authc.SimpleAuthenticationInfo var82 = new org.jsecurity.authc.SimpleAuthenticationInfo((org.jsecurity.subject.PrincipalCollection)var45, (java.lang.Object)var72);
    var2.onLogout((org.jsecurity.subject.PrincipalCollection)var45);
    org.jsecurity.authc.SimpleAccount var85 = new org.jsecurity.authc.SimpleAccount((java.util.Collection)var1, (java.lang.Object)var45, "345d9036-762c-4f58-8690-c901bf299cde");
    java.lang.String var86 = var85.toString();
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var1);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var5);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var6);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var7);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var23);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var27 + "' != '" + "org.jsecurity.realm.text.TextConfigurationRealm_4109"+ "'", var27.equals("org.jsecurity.realm.text.TextConfigurationRealm_4109"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var32);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var40);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var41);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var42);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var58);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var67);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var69);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var70);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var76);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var79);

  }

  public void test331() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest6.test331");


    org.jsecurity.authc.UsernamePasswordToken var2 = new org.jsecurity.authc.UsernamePasswordToken("012605ea-9dda-481d-a436-b8a58422e8d3", "e1f737f7969ef7773ae3d73d6dc69e77cdfaf3ce1be776bd");
    char[] var3 = var2.getPassword();
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var3);

  }

  public void test332() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest6.test332");


    org.jsecurity.io.DefaultSerializer var0 = new org.jsecurity.io.DefaultSerializer();
    org.jsecurity.authz.SimpleRole var1 = new org.jsecurity.authz.SimpleRole();
    byte[] var2 = var0.serialize((java.lang.Object)var1);
    byte[] var4 = org.jsecurity.codec.CodecSupport.toBytes("ca73d1a4-706e-42e7-980f-896d3b153de8");
    java.lang.String var5 = org.jsecurity.codec.Base64.encodeToString(var4);
    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      java.lang.Object var6 = var0.deserialize(var4);
      fail("Expected exception of type org.jsecurity.io.SerializationException");
    } catch (org.jsecurity.io.SerializationException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var2);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var4);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var5 + "' != '" + "Y2E3M2QxYTQtNzA2ZS00MmU3LTk4MGYtODk2ZDNiMTUzZGU4"+ "'", var5.equals("Y2E3M2QxYTQtNzA2ZS00MmU3LTk4MGYtODk2ZDNiMTUzZGU4"));

  }

  public void test333() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest6.test333");


    org.jsecurity.util.UnavailableConstructorException var1 = new org.jsecurity.util.UnavailableConstructorException();
    org.jsecurity.authc.pam.AllSuccessfulModularAuthenticationStrategy var4 = new org.jsecurity.authc.pam.AllSuccessfulModularAuthenticationStrategy();
    char[] var6 = new char[] { };
    org.jsecurity.authc.UsernamePasswordToken var8 = new org.jsecurity.authc.UsernamePasswordToken("hi!", var6, true);
    org.jsecurity.authc.SimpleAccount var9 = new org.jsecurity.authc.SimpleAccount();
    var9.setCredentialsExpired(false);
    boolean var12 = var9.isLocked();
    org.jsecurity.authc.AuthenticationInfo var13 = var4.afterAllAttempts((org.jsecurity.authc.AuthenticationToken)var8, (org.jsecurity.authc.AuthenticationInfo)var9);
    char[] var17 = new char[] { '4', '#'};
    org.jsecurity.authc.UsernamePasswordToken var18 = new org.jsecurity.authc.UsernamePasswordToken("\u0000\u0000", var17);
    org.jsecurity.authc.SimpleAccount var19 = new org.jsecurity.authc.SimpleAccount();
    var19.setCredentialsExpired(false);
    var19.setCredentialsExpired(false);
    boolean var24 = var19.isCredentialsExpired();
    org.jsecurity.authc.AuthenticationInfo var25 = var4.afterAllAttempts((org.jsecurity.authc.AuthenticationToken)var18, (org.jsecurity.authc.AuthenticationInfo)var19);
    org.jsecurity.session.InvalidSessionException var26 = new org.jsecurity.session.InvalidSessionException("ZGT/", (java.io.Serializable)var18);
    org.jsecurity.authz.UnauthenticatedException var27 = new org.jsecurity.authz.UnauthenticatedException((java.lang.Throwable)var26);
    org.jsecurity.session.StoppedSessionException var29 = new org.jsecurity.session.StoppedSessionException("22ab7faf-fab8-4d8b-9c43-096f2af17960", (java.lang.Throwable)var26, (java.io.Serializable)"b6a77f71-73c4-466a-903e-72fc5968f9ac");
    org.jsecurity.session.UnknownSessionException var30 = new org.jsecurity.session.UnknownSessionException("PD94bWwgdmVyc2lvbj0iMS4wIiBlbmNvZGluZz0iVVRGLTgiPz4KPGphdmEgdmVyc2lvbj0iMS43LjBfNzkiIGNsYXNzPSJqYXZhLmJlYW5zLlhNTERlY29kZXIiPgogPG9iamVjdCBjbGFzcz0ib3JnLmpzZWN1cml0eS5pby5SZXNvdXJjZUV4Y2VwdGlvbiI+CiAgPHZvaWQgcHJvcGVydHk9InN0YWNrVHJhY2UiPgogICA8YXJyYXkgY2xhc3M9ImphdmEubGFuZy5TdGFja1RyYWNlRWxlbWVudCIgbGVuZ3RoPSI3Ii8+CiAgPC92b2lkPgogPC9vYmplY3Q+CjwvamF2YT4K", (java.lang.Throwable)var1, (java.io.Serializable)"22ab7faf-fab8-4d8b-9c43-096f2af17960");
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var6);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var12 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var13);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var17);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var24 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var25);

  }

  public void test334() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest6.test334");


    org.jsecurity.session.mgt.DefaultSessionManager var0 = new org.jsecurity.session.mgt.DefaultSessionManager();
    org.jsecurity.session.mgt.quartz.QuartzSessionValidationScheduler var1 = new org.jsecurity.session.mgt.quartz.QuartzSessionValidationScheduler();
    boolean var2 = var1.isEnabled();
    var1.enableSessionValidation();
    var0.setSessionValidationScheduler((org.jsecurity.session.mgt.SessionValidationScheduler)var1);
    byte[] var6 = org.jsecurity.codec.Base64.decode("hi!");
    org.jsecurity.authc.CredentialsException var8 = new org.jsecurity.authc.CredentialsException("org.jsecurity.authz.UnauthorizedException: org.jsecurity.session.ExpiredSessionException: ");
    org.jsecurity.authc.SimpleAuthenticationInfo var10 = new org.jsecurity.authc.SimpleAuthenticationInfo((java.lang.Object)"hi!", (java.lang.Object)var8, "org.jsecurity.config.ConfigurationException: dd\uFFFD");
    org.jsecurity.realm.text.TextConfigurationRealm var11 = new org.jsecurity.realm.text.TextConfigurationRealm();
    java.io.InputStream var13 = org.jsecurity.util.ClassUtils.getResourceAsStream("");
    java.lang.Object[] var14 = new java.lang.Object[] { var13};
    java.util.List var15 = org.jsecurity.util.CollectionUtils.asList(var14);
    org.jsecurity.authc.pam.ModularRealmAuthenticator var16 = new org.jsecurity.authc.pam.ModularRealmAuthenticator(var15);
    org.jsecurity.subject.SimplePrincipalCollection var18 = new org.jsecurity.subject.SimplePrincipalCollection((java.util.Collection)var15, "org.jsecurity.authz.UnauthorizedException: org.jsecurity.session.ExpiredSessionException: ");
    org.jsecurity.session.UnknownSessionException var23 = new org.jsecurity.session.UnknownSessionException("dd\uFFFD", (java.io.Serializable)100.0f);
    org.jsecurity.session.SessionException var25 = new org.jsecurity.session.SessionException("dd\uFFFD", (java.lang.Throwable)var23, (java.io.Serializable)0);
    org.jsecurity.session.SessionException var26 = new org.jsecurity.session.SessionException("dd\uFFFD", (java.lang.Throwable)var23);
    var18.add((java.lang.Object)var26, "org.jsecurity.config.ConfigurationException: dd\uFFFD");
    var11.onLogout((org.jsecurity.subject.PrincipalCollection)var18);
    org.jsecurity.authc.ExpiredCredentialsException var31 = new org.jsecurity.authc.ExpiredCredentialsException();
    org.jsecurity.session.ExpiredSessionException var32 = new org.jsecurity.session.ExpiredSessionException("", (java.lang.Throwable)var31);
    java.lang.Throwable[] var33 = var32.getSuppressed();
    org.jsecurity.io.ResourceException var34 = new org.jsecurity.io.ResourceException((java.lang.Throwable)var32);
    org.jsecurity.authc.SimpleAuthenticationInfo var35 = new org.jsecurity.authc.SimpleAuthenticationInfo((org.jsecurity.subject.PrincipalCollection)var18, (java.lang.Object)var32);
    java.util.Set var36 = var18.getRealmNames();
    var10.setPrincipals((org.jsecurity.subject.PrincipalCollection)var18);
    org.jsecurity.subject.PrincipalCollection var38 = var10.getPrincipals();
    java.io.InputStream var40 = org.jsecurity.util.ClassUtils.getResourceAsStream("");
    java.lang.Object[] var41 = new java.lang.Object[] { var40};
    java.util.List var42 = org.jsecurity.util.CollectionUtils.asList(var41);
    org.jsecurity.authc.pam.ModularRealmAuthenticator var43 = new org.jsecurity.authc.pam.ModularRealmAuthenticator(var42);
    org.jsecurity.authc.pam.FirstSuccessfulAuthenticationStrategy var44 = new org.jsecurity.authc.pam.FirstSuccessfulAuthenticationStrategy();
    org.jsecurity.authz.UnauthorizedException var46 = new org.jsecurity.authz.UnauthorizedException("org.jsecurity.config.ConfigurationException: dd\uFFFD");
    java.lang.Throwable[] var47 = var46.getSuppressed();
    java.util.List var48 = org.jsecurity.util.CollectionUtils.asList((java.lang.Object[])var47);
    org.jsecurity.authc.UsernamePasswordToken var49 = new org.jsecurity.authc.UsernamePasswordToken();
    java.lang.String var50 = var49.getUsername();
    java.net.InetAddress var51 = var49.getInetAddress();
    org.jsecurity.authc.AuthenticationInfo var52 = var44.beforeAllAttempts((java.util.Collection)var48, (org.jsecurity.authc.AuthenticationToken)var49);
    org.jsecurity.realm.SimpleAccountRealm var54 = new org.jsecurity.realm.SimpleAccountRealm("hi!");
    java.lang.Class var55 = var54.getAuthenticationTokenClass();
    java.util.Collection var56 = org.jsecurity.util.CollectionUtils.emptyCollection(var55);
    org.jsecurity.authc.pam.AllSuccessfulModularAuthenticationStrategy var57 = new org.jsecurity.authc.pam.AllSuccessfulModularAuthenticationStrategy();
    char[] var59 = new char[] { };
    org.jsecurity.authc.UsernamePasswordToken var61 = new org.jsecurity.authc.UsernamePasswordToken("hi!", var59, true);
    org.jsecurity.authc.SimpleAccount var62 = new org.jsecurity.authc.SimpleAccount();
    var62.setCredentialsExpired(false);
    boolean var65 = var62.isLocked();
    org.jsecurity.authc.AuthenticationInfo var66 = var57.afterAllAttempts((org.jsecurity.authc.AuthenticationToken)var61, (org.jsecurity.authc.AuthenticationInfo)var62);
    org.jsecurity.authc.AuthenticationInfo var67 = var44.beforeAllAttempts(var56, (org.jsecurity.authc.AuthenticationToken)var61);
    var43.setModularAuthenticationStrategy((org.jsecurity.authc.pam.ModularAuthenticationStrategy)var44);
    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      java.lang.Object var69 = var0.removeAttribute((java.io.Serializable)var38, (java.lang.Object)var44);
      fail("Expected exception of type org.jsecurity.session.UnknownSessionException");
    } catch (org.jsecurity.session.UnknownSessionException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var2 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var6);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var13);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var14);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var15);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var33);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var36);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var38);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var40);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var41);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var42);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var47);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var48);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var50);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var51);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var52);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var55);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var56);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var59);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var65 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var66);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var67);

  }

  public void test335() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest6.test335");


    org.jsecurity.authc.AccountException var3 = new org.jsecurity.authc.AccountException("hi!");
    org.jsecurity.authc.IncorrectCredentialsException var4 = new org.jsecurity.authc.IncorrectCredentialsException((java.lang.Throwable)var3);
    org.jsecurity.session.UnknownSessionException var5 = new org.jsecurity.session.UnknownSessionException((java.io.Serializable)var4);
    org.jsecurity.session.SessionException var8 = new org.jsecurity.session.SessionException("a2b823b1e72eae2b727289df8a00a89df8a0bab6ad8a89c4c5c7a9b62a270000");
    org.jsecurity.session.ExpiredSessionException var10 = new org.jsecurity.session.ExpiredSessionException((java.io.Serializable)(-1));
    org.jsecurity.authc.DisabledAccountException var11 = new org.jsecurity.authc.DisabledAccountException((java.lang.Throwable)var10);
    var8.addSuppressed((java.lang.Throwable)var11);
    org.jsecurity.authc.UnknownAccountException var13 = new org.jsecurity.authc.UnknownAccountException("\u0000\u0000\u0000", (java.lang.Throwable)var11);
    org.jsecurity.session.InvalidSessionException var14 = new org.jsecurity.session.InvalidSessionException("01ce9c0e-cfba-431c-868c-f213e4a4ad24", (java.lang.Throwable)var4, (java.io.Serializable)var13);
    org.jsecurity.authc.AuthenticationException var15 = new org.jsecurity.authc.AuthenticationException("6da7d2f4-0515-4a20-87d9-cb23772ba002", (java.lang.Throwable)var14);

  }

  public void test336() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest6.test336");


    org.jsecurity.session.mgt.quartz.QuartzSessionValidationScheduler var0 = new org.jsecurity.session.mgt.quartz.QuartzSessionValidationScheduler();
    boolean var1 = var0.isEnabled();
    var0.enableSessionValidation();
    boolean var3 = var0.isEnabled();
    boolean var4 = var0.isEnabled();
    org.jsecurity.session.mgt.DefaultSessionManager var5 = new org.jsecurity.session.mgt.DefaultSessionManager();
    org.jsecurity.session.mgt.quartz.QuartzSessionValidationScheduler var6 = new org.jsecurity.session.mgt.quartz.QuartzSessionValidationScheduler();
    boolean var7 = var6.isEnabled();
    var6.enableSessionValidation();
    var5.setSessionValidationScheduler((org.jsecurity.session.mgt.SessionValidationScheduler)var6);
    var0.setSessionManager((org.jsecurity.session.mgt.ValidatingSessionManager)var5);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var1 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var3 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var4 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var7 == false);

  }

  public void test337() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest6.test337");


    org.jsecurity.authc.IncorrectCredentialsException var3 = new org.jsecurity.authc.IncorrectCredentialsException("dd\uFFFD");
    org.jsecurity.authc.UnknownAccountException var4 = new org.jsecurity.authc.UnknownAccountException("", (java.lang.Throwable)var3);
    org.jsecurity.config.ConfigurationException var5 = new org.jsecurity.config.ConfigurationException("org.jsecurity.realm.SimpleAccountRealm-9-authorization", (java.lang.Throwable)var4);

  }

  public void test338() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest6.test338");


    org.jsecurity.mgt.DefaultSecurityManager var0 = new org.jsecurity.mgt.DefaultSecurityManager();
    java.io.InputStream var2 = org.jsecurity.util.ClassUtils.getResourceAsStream("");
    java.lang.Object[] var3 = new java.lang.Object[] { var2};
    java.util.List var4 = org.jsecurity.util.CollectionUtils.asList(var3);
    org.jsecurity.authc.pam.ModularRealmAuthenticator var5 = new org.jsecurity.authc.pam.ModularRealmAuthenticator(var4);
    org.jsecurity.authc.pam.AllSuccessfulModularAuthenticationStrategy var6 = new org.jsecurity.authc.pam.AllSuccessfulModularAuthenticationStrategy();
    var5.setModularAuthenticationStrategy((org.jsecurity.authc.pam.ModularAuthenticationStrategy)var6);
    org.jsecurity.authz.SimpleAuthorizationInfo var8 = new org.jsecurity.authz.SimpleAuthorizationInfo();
    var8.addStringPermission("hi!");
    java.io.InputStream var12 = org.jsecurity.util.ClassUtils.getResourceAsStream("");
    java.lang.Object[] var13 = new java.lang.Object[] { var12};
    java.util.List var14 = org.jsecurity.util.CollectionUtils.asList(var13);
    var8.addRoles((java.util.Collection)var14);
    var5.setAuthenticationListeners((java.util.Collection)var14);
    var0.setSessionListeners((java.util.Collection)var14);
    org.jsecurity.authc.pam.ModularRealmAuthenticator var18 = new org.jsecurity.authc.pam.ModularRealmAuthenticator();
    org.jsecurity.authz.permission.InvalidPermissionStringException var21 = new org.jsecurity.authz.permission.InvalidPermissionStringException("", "dd\uFFFD");
    org.jsecurity.JSecurityException var23 = new org.jsecurity.JSecurityException("");
    org.jsecurity.authc.SimpleAuthenticationInfo var25 = new org.jsecurity.authc.SimpleAuthenticationInfo((java.lang.Object)var21, (java.lang.Object)"", "org.jsecurity.authz.UnauthorizedException: org.jsecurity.session.ExpiredSessionException: ");
    org.jsecurity.subject.PrincipalCollection var26 = var25.getPrincipals();
    var18.onLogout(var26);
    var0.setAuthenticator((org.jsecurity.authc.Authenticator)var18);
    org.jsecurity.codec.CodecException var31 = new org.jsecurity.codec.CodecException("dd\uFFFD");
    org.jsecurity.authc.ConcurrentAccessException var32 = new org.jsecurity.authc.ConcurrentAccessException("org.jsecurity.authz.UnauthorizedException: org.jsecurity.session.ExpiredSessionException: ", (java.lang.Throwable)var31);
    org.jsecurity.subject.SimplePrincipalCollection var34 = new org.jsecurity.subject.SimplePrincipalCollection((java.lang.Object)var31, "");
    org.jsecurity.authc.pam.FirstSuccessfulAuthenticationStrategy var35 = new org.jsecurity.authc.pam.FirstSuccessfulAuthenticationStrategy();
    org.jsecurity.authz.UnauthorizedException var37 = new org.jsecurity.authz.UnauthorizedException("org.jsecurity.config.ConfigurationException: dd\uFFFD");
    java.lang.Throwable[] var38 = var37.getSuppressed();
    java.util.List var39 = org.jsecurity.util.CollectionUtils.asList((java.lang.Object[])var38);
    org.jsecurity.authc.UsernamePasswordToken var40 = new org.jsecurity.authc.UsernamePasswordToken();
    java.lang.String var41 = var40.getUsername();
    java.net.InetAddress var42 = var40.getInetAddress();
    org.jsecurity.authc.AuthenticationInfo var43 = var35.beforeAllAttempts((java.util.Collection)var39, (org.jsecurity.authc.AuthenticationToken)var40);
    org.jsecurity.session.UnknownSessionException var48 = new org.jsecurity.session.UnknownSessionException("dd\uFFFD", (java.io.Serializable)100.0f);
    org.jsecurity.subject.SubjectException var49 = new org.jsecurity.subject.SubjectException("dd\uFFFD", (java.lang.Throwable)var48);
    org.jsecurity.io.SerializationException var50 = new org.jsecurity.io.SerializationException("", (java.lang.Throwable)var49);
    java.lang.Throwable[] var51 = var49.getSuppressed();
    java.util.Set var52 = org.jsecurity.util.CollectionUtils.asSet((java.lang.Object[])var51);
    org.jsecurity.authc.SimpleAccount var53 = new org.jsecurity.authc.SimpleAccount((org.jsecurity.subject.PrincipalCollection)var34, (java.lang.Object)var39, var52);
    java.io.InputStream var55 = org.jsecurity.util.ClassUtils.getResourceAsStream("");
    java.lang.Object[] var56 = new java.lang.Object[] { var55};
    java.util.List var57 = org.jsecurity.util.CollectionUtils.asList(var56);
    org.jsecurity.authc.pam.ModularRealmAuthenticator var58 = new org.jsecurity.authc.pam.ModularRealmAuthenticator(var57);
    org.jsecurity.subject.SimplePrincipalCollection var60 = new org.jsecurity.subject.SimplePrincipalCollection((java.util.Collection)var57, "org.jsecurity.authz.UnauthorizedException: org.jsecurity.session.ExpiredSessionException: ");
    org.jsecurity.io.ResourceException var64 = new org.jsecurity.io.ResourceException("hi!");
    org.jsecurity.authc.UnknownAccountException var65 = new org.jsecurity.authc.UnknownAccountException((java.lang.Throwable)var64);
    org.jsecurity.session.StoppedSessionException var66 = new org.jsecurity.session.StoppedSessionException("dd\uFFFD", (java.io.Serializable)var64);
    org.jsecurity.session.UnknownSessionException var67 = new org.jsecurity.session.UnknownSessionException("org.jsecurity.authz.UnauthorizedException: org.jsecurity.session.ExpiredSessionException: ", (java.lang.Throwable)var64);
    boolean var68 = var60.equals((java.lang.Object)var64);
    var34.addAll((org.jsecurity.subject.PrincipalCollection)var60);
    org.jsecurity.session.UnknownSessionException var74 = new org.jsecurity.session.UnknownSessionException("dd\uFFFD", (java.io.Serializable)100.0f);
    org.jsecurity.subject.SubjectException var75 = new org.jsecurity.subject.SubjectException("dd\uFFFD", (java.lang.Throwable)var74);
    org.jsecurity.io.SerializationException var76 = new org.jsecurity.io.SerializationException("", (java.lang.Throwable)var75);
    java.lang.Throwable[] var77 = var75.getSuppressed();
    java.util.List var78 = org.jsecurity.util.CollectionUtils.asList((java.lang.Object[])var77);
    boolean var79 = var0.isPermittedAll((org.jsecurity.subject.PrincipalCollection)var34, (java.util.Collection)var78);
    org.jsecurity.subject.DelegatingSubject var80 = new org.jsecurity.subject.DelegatingSubject((org.jsecurity.mgt.SecurityManager)var0);
    boolean var82 = var80.hasRole("org.jsecurity.authc.IncorrectCredentialsException: \u0000\u0000");
    java.net.InetAddress var83 = var80.getInetAddress();
    var80.logout();
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var2);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var3);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var4);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var12);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var13);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var14);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var26);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var38);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var39);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var41);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var42);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var43);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var51);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var52);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var55);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var56);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var57);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var68 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var77);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var78);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var79 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var82 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var83);

  }

  public void test339() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest6.test339");


    org.jsecurity.session.mgt.eis.MemorySessionDAO var0 = new org.jsecurity.session.mgt.eis.MemorySessionDAO();
    org.jsecurity.cache.Cache var1 = var0.getActiveSessionsCache();
    org.jsecurity.cache.CacheManager var2 = var0.getCacheManager();
    org.jsecurity.cache.HashtableCacheManager var3 = new org.jsecurity.cache.HashtableCacheManager();
    org.jsecurity.cache.Cache var5 = var3.getCache("\u0000\u0000");
    var0.setActiveSessionsCache(var5);
    java.io.InputStream var8 = org.jsecurity.util.ClassUtils.getResourceAsStream("");
    java.lang.Object[] var9 = new java.lang.Object[] { var8};
    java.util.List var10 = org.jsecurity.util.CollectionUtils.asList(var9);
    org.jsecurity.authc.pam.ModularRealmAuthenticator var11 = new org.jsecurity.authc.pam.ModularRealmAuthenticator(var10);
    org.jsecurity.authc.pam.AllSuccessfulModularAuthenticationStrategy var12 = new org.jsecurity.authc.pam.AllSuccessfulModularAuthenticationStrategy();
    var11.setModularAuthenticationStrategy((org.jsecurity.authc.pam.ModularAuthenticationStrategy)var12);
    org.jsecurity.authz.SimpleAuthorizationInfo var14 = new org.jsecurity.authz.SimpleAuthorizationInfo();
    var14.addStringPermission("hi!");
    java.io.InputStream var18 = org.jsecurity.util.ClassUtils.getResourceAsStream("");
    java.lang.Object[] var19 = new java.lang.Object[] { var18};
    java.util.List var20 = org.jsecurity.util.CollectionUtils.asList(var19);
    var14.addRoles((java.util.Collection)var20);
    var11.setAuthenticationListeners((java.util.Collection)var20);
    org.jsecurity.realm.activedirectory.ActiveDirectoryRealm var23 = new org.jsecurity.realm.activedirectory.ActiveDirectoryRealm();
    var23.setPrincipalSuffix("");
    var11.setRealm((org.jsecurity.realm.Realm)var23);
    org.jsecurity.cache.HashtableCacheManager var27 = new org.jsecurity.cache.HashtableCacheManager();
    org.jsecurity.cache.Cache var29 = var27.getCache("\u0000\u0000");
    var23.setAuthorizationCache(var29);
    var0.setActiveSessionsCache(var29);
    org.jsecurity.session.mgt.SimpleSession var32 = new org.jsecurity.session.mgt.SimpleSession();
    java.io.Serializable var33 = var0.create((org.jsecurity.session.Session)var32);
    org.jsecurity.session.mgt.SimpleSession var34 = new org.jsecurity.session.mgt.SimpleSession();
    var34.touch();
    var34.validate();
    org.jsecurity.session.mgt.SimpleSession var37 = new org.jsecurity.session.mgt.SimpleSession();
    var37.setTimeout((-1L));
    org.jsecurity.session.mgt.SimpleSession var40 = new org.jsecurity.session.mgt.SimpleSession();
    java.util.Date var41 = var40.getLastAccessTime();
    var37.setLastAccessTime(var41);
    org.jsecurity.session.mgt.SimpleSession var43 = new org.jsecurity.session.mgt.SimpleSession();
    java.util.Date var44 = var43.getLastAccessTime();
    var37.setStopTimestamp(var44);
    var34.setLastAccessTime(var44);
    var32.setLastAccessTime(var44);
    org.jsecurity.session.mgt.ImmutableProxiedSession var48 = new org.jsecurity.session.mgt.ImmutableProxiedSession((org.jsecurity.session.Session)var32);
    org.jsecurity.session.ProxiedSession var49 = new org.jsecurity.session.ProxiedSession((org.jsecurity.session.Session)var32);
    java.util.Date var50 = var49.getStartTimestamp();
    org.jsecurity.authc.IncorrectCredentialsException var53 = new org.jsecurity.authc.IncorrectCredentialsException("\u0000\u0000");
    org.jsecurity.codec.CodecException var56 = new org.jsecurity.codec.CodecException("dd\uFFFD");
    org.jsecurity.authc.ConcurrentAccessException var57 = new org.jsecurity.authc.ConcurrentAccessException("org.jsecurity.authz.UnauthorizedException: org.jsecurity.session.ExpiredSessionException: ", (java.lang.Throwable)var56);
    org.jsecurity.subject.SimplePrincipalCollection var59 = new org.jsecurity.subject.SimplePrincipalCollection((java.lang.Object)var56, "");
    java.io.InputStream var61 = org.jsecurity.util.ClassUtils.getResourceAsStream("");
    java.lang.Object[] var62 = new java.lang.Object[] { var61};
    java.util.List var63 = org.jsecurity.util.CollectionUtils.asList(var62);
    org.jsecurity.authc.pam.ModularRealmAuthenticator var64 = new org.jsecurity.authc.pam.ModularRealmAuthenticator(var63);
    org.jsecurity.authc.pam.AllSuccessfulModularAuthenticationStrategy var65 = new org.jsecurity.authc.pam.AllSuccessfulModularAuthenticationStrategy();
    var64.setModularAuthenticationStrategy((org.jsecurity.authc.pam.ModularAuthenticationStrategy)var65);
    org.jsecurity.authz.SimpleAuthorizationInfo var67 = new org.jsecurity.authz.SimpleAuthorizationInfo();
    var67.addStringPermission("hi!");
    java.io.InputStream var71 = org.jsecurity.util.ClassUtils.getResourceAsStream("");
    java.lang.Object[] var72 = new java.lang.Object[] { var71};
    java.util.List var73 = org.jsecurity.util.CollectionUtils.asList(var72);
    var67.addRoles((java.util.Collection)var73);
    var64.setAuthenticationListeners((java.util.Collection)var73);
    org.jsecurity.realm.activedirectory.ActiveDirectoryRealm var76 = new org.jsecurity.realm.activedirectory.ActiveDirectoryRealm();
    var76.setPrincipalSuffix("");
    var64.setRealm((org.jsecurity.realm.Realm)var76);
    org.jsecurity.authc.pam.FirstSuccessfulAuthenticationStrategy var80 = new org.jsecurity.authc.pam.FirstSuccessfulAuthenticationStrategy();
    org.jsecurity.authz.UnauthorizedException var82 = new org.jsecurity.authz.UnauthorizedException("org.jsecurity.config.ConfigurationException: dd\uFFFD");
    java.lang.Throwable[] var83 = var82.getSuppressed();
    java.util.List var84 = org.jsecurity.util.CollectionUtils.asList((java.lang.Object[])var83);
    org.jsecurity.authc.UsernamePasswordToken var85 = new org.jsecurity.authc.UsernamePasswordToken();
    java.lang.String var86 = var85.getUsername();
    java.net.InetAddress var87 = var85.getInetAddress();
    org.jsecurity.authc.AuthenticationInfo var88 = var80.beforeAllAttempts((java.util.Collection)var84, (org.jsecurity.authc.AuthenticationToken)var85);
    var64.setModularAuthenticationStrategy((org.jsecurity.authc.pam.ModularAuthenticationStrategy)var80);
    org.jsecurity.authc.SimpleAccount var90 = new org.jsecurity.authc.SimpleAccount((org.jsecurity.subject.PrincipalCollection)var59, (java.lang.Object)var64);
    org.jsecurity.session.StoppedSessionException var91 = new org.jsecurity.session.StoppedSessionException("org.jsecurity.authz.UnauthorizedException: org.jsecurity.session.ExpiredSessionException: ", (java.lang.Throwable)var53, (java.io.Serializable)var90);
    org.jsecurity.subject.InvalidSubjectException var92 = new org.jsecurity.subject.InvalidSubjectException((java.lang.Throwable)var53);
    org.jsecurity.config.UnresolveableReferenceException var93 = new org.jsecurity.config.UnresolveableReferenceException();
    var49.setAttribute((java.lang.Object)var92, (java.lang.Object)var93);
    java.util.Collection var95 = var49.getAttributeKeys();
    long var96 = var49.getTimeout();
    long var97 = var49.getTimeout();
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var1);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var2);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var5);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var8);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var9);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var10);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var18);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var19);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var20);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var29);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var33 + "' != '" + "f9e169ed-34b2-42df-869f-15f68c026ceb"+ "'", var33.equals("f9e169ed-34b2-42df-869f-15f68c026ceb"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var41);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var44);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var50);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var61);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var62);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var63);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var71);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var72);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var73);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var83);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var84);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var86);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var87);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var88);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var95);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var96 == 1800000L);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var97 == 1800000L);

  }

  public void test340() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest6.test340");


    org.jsecurity.mgt.DefaultSecurityManager var0 = new org.jsecurity.mgt.DefaultSecurityManager();
    java.io.InputStream var2 = org.jsecurity.util.ClassUtils.getResourceAsStream("");
    java.lang.Object[] var3 = new java.lang.Object[] { var2};
    java.util.List var4 = org.jsecurity.util.CollectionUtils.asList(var3);
    org.jsecurity.authc.pam.ModularRealmAuthenticator var5 = new org.jsecurity.authc.pam.ModularRealmAuthenticator(var4);
    org.jsecurity.authc.pam.AllSuccessfulModularAuthenticationStrategy var6 = new org.jsecurity.authc.pam.AllSuccessfulModularAuthenticationStrategy();
    var5.setModularAuthenticationStrategy((org.jsecurity.authc.pam.ModularAuthenticationStrategy)var6);
    org.jsecurity.authz.SimpleAuthorizationInfo var8 = new org.jsecurity.authz.SimpleAuthorizationInfo();
    var8.addStringPermission("hi!");
    java.io.InputStream var12 = org.jsecurity.util.ClassUtils.getResourceAsStream("");
    java.lang.Object[] var13 = new java.lang.Object[] { var12};
    java.util.List var14 = org.jsecurity.util.CollectionUtils.asList(var13);
    var8.addRoles((java.util.Collection)var14);
    var5.setAuthenticationListeners((java.util.Collection)var14);
    var0.setSessionListeners((java.util.Collection)var14);
    java.util.Collection var18 = var0.getRealms();
    org.jsecurity.codec.CodecException var21 = new org.jsecurity.codec.CodecException("dd\uFFFD");
    org.jsecurity.authc.ConcurrentAccessException var22 = new org.jsecurity.authc.ConcurrentAccessException("org.jsecurity.authz.UnauthorizedException: org.jsecurity.session.ExpiredSessionException: ", (java.lang.Throwable)var21);
    org.jsecurity.subject.SimplePrincipalCollection var24 = new org.jsecurity.subject.SimplePrincipalCollection((java.lang.Object)var21, "");
    java.io.InputStream var26 = org.jsecurity.util.ClassUtils.getResourceAsStream("");
    java.lang.Object[] var27 = new java.lang.Object[] { var26};
    java.util.List var28 = org.jsecurity.util.CollectionUtils.asList(var27);
    org.jsecurity.authc.pam.ModularRealmAuthenticator var29 = new org.jsecurity.authc.pam.ModularRealmAuthenticator(var28);
    var24.addAll((java.util.Collection)var28, "\u0000\u0000");
    org.jsecurity.authz.UnauthorizedException var33 = new org.jsecurity.authz.UnauthorizedException();
    org.jsecurity.session.SessionException var35 = new org.jsecurity.session.SessionException("", (java.lang.Throwable)var33, (java.io.Serializable)"org.jsecurity.config.ConfigurationException: dd\uFFFD");
    org.jsecurity.crypto.hash.Sha1Hash var36 = new org.jsecurity.crypto.hash.Sha1Hash((java.lang.Object)"");
    org.jsecurity.session.UnknownSessionException var41 = new org.jsecurity.session.UnknownSessionException("dd\uFFFD", (java.io.Serializable)100.0f);
    org.jsecurity.subject.SubjectException var42 = new org.jsecurity.subject.SubjectException("dd\uFFFD", (java.lang.Throwable)var41);
    org.jsecurity.io.SerializationException var43 = new org.jsecurity.io.SerializationException("", (java.lang.Throwable)var42);
    java.lang.Throwable[] var44 = var42.getSuppressed();
    java.util.Set var45 = org.jsecurity.util.CollectionUtils.asSet((java.lang.Object[])var44);
    org.jsecurity.authz.SimpleAuthorizationInfo var47 = new org.jsecurity.authz.SimpleAuthorizationInfo();
    org.jsecurity.session.UnknownSessionException var52 = new org.jsecurity.session.UnknownSessionException("dd\uFFFD", (java.io.Serializable)100.0f);
    org.jsecurity.subject.SubjectException var53 = new org.jsecurity.subject.SubjectException("dd\uFFFD", (java.lang.Throwable)var52);
    org.jsecurity.io.SerializationException var54 = new org.jsecurity.io.SerializationException("", (java.lang.Throwable)var53);
    java.lang.Throwable[] var55 = var53.getSuppressed();
    java.util.Set var56 = org.jsecurity.util.CollectionUtils.asSet((java.lang.Object[])var55);
    var47.setStringPermissions(var56);
    java.util.Set var58 = var47.getRoles();
    org.jsecurity.authz.SimpleAuthorizationInfo var59 = new org.jsecurity.authz.SimpleAuthorizationInfo();
    var59.addRole("a2b823b1e72eae2b727289df8a00a89df8a0bab6ad8a89c4c5c7a9b62a270000");
    org.jsecurity.session.UnknownSessionException var66 = new org.jsecurity.session.UnknownSessionException("dd\uFFFD", (java.io.Serializable)100.0f);
    org.jsecurity.subject.SubjectException var67 = new org.jsecurity.subject.SubjectException("dd\uFFFD", (java.lang.Throwable)var66);
    org.jsecurity.io.SerializationException var68 = new org.jsecurity.io.SerializationException("", (java.lang.Throwable)var67);
    java.lang.Throwable[] var69 = var67.getSuppressed();
    java.util.Set var70 = org.jsecurity.util.CollectionUtils.asSet((java.lang.Object[])var69);
    var59.addRoles((java.util.Collection)var70);
    var47.setRoles(var70);
    org.jsecurity.authz.SimpleRole var73 = new org.jsecurity.authz.SimpleRole("org.jsecurity.authz.UnauthorizedException: org.jsecurity.session.ExpiredSessionException: ", var70);
    org.jsecurity.authc.SimpleAccount var74 = new org.jsecurity.authc.SimpleAccount((org.jsecurity.subject.PrincipalCollection)var24, (java.lang.Object)"", var45, var70);
    org.jsecurity.authz.SimpleAuthorizationInfo var75 = new org.jsecurity.authz.SimpleAuthorizationInfo();
    var75.addStringPermission("hi!");
    org.jsecurity.authz.SimpleAuthorizationInfo var79 = new org.jsecurity.authz.SimpleAuthorizationInfo();
    org.jsecurity.session.UnknownSessionException var84 = new org.jsecurity.session.UnknownSessionException("dd\uFFFD", (java.io.Serializable)100.0f);
    org.jsecurity.subject.SubjectException var85 = new org.jsecurity.subject.SubjectException("dd\uFFFD", (java.lang.Throwable)var84);
    org.jsecurity.io.SerializationException var86 = new org.jsecurity.io.SerializationException("", (java.lang.Throwable)var85);
    java.lang.Throwable[] var87 = var85.getSuppressed();
    java.util.Set var88 = org.jsecurity.util.CollectionUtils.asSet((java.lang.Object[])var87);
    var79.setStringPermissions(var88);
    org.jsecurity.authz.SimpleRole var90 = new org.jsecurity.authz.SimpleRole("\u0000\u0000", var88);
    var75.setRoles(var88);
    boolean var92 = var0.isPermittedAll((org.jsecurity.subject.PrincipalCollection)var24, (java.util.Collection)var88);
    org.jsecurity.authz.aop.GuestAnnotationMethodInterceptor var93 = new org.jsecurity.authz.aop.GuestAnnotationMethodInterceptor();
    org.jsecurity.aop.AnnotationHandler var94 = var93.getHandler();
    var24.add((java.lang.Object)var94, "3d3a8192-1e92-477d-8aa6-fc837cbc6148");
    boolean var97 = var24.isEmpty();
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var2);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var3);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var4);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var12);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var13);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var14);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var18);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var26);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var27);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var28);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var44);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var45);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var55);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var56);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var58);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var69);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var70);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var87);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var88);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var92 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var94);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var97 == false);

  }

  public void test341() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest6.test341");


    org.jsecurity.session.StoppedSessionException var1 = new org.jsecurity.session.StoppedSessionException("89cdaca6-d2c0-42a2-81eb-a9d65c3413e1");

  }

  public void test342() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest6.test342");


    org.jsecurity.session.mgt.eis.MemorySessionDAO var0 = new org.jsecurity.session.mgt.eis.MemorySessionDAO();
    org.jsecurity.cache.Cache var1 = var0.getActiveSessionsCache();
    org.jsecurity.cache.CacheManager var2 = var0.getCacheManager();
    org.jsecurity.cache.HashtableCacheManager var3 = new org.jsecurity.cache.HashtableCacheManager();
    org.jsecurity.cache.Cache var5 = var3.getCache("\u0000\u0000");
    var0.setActiveSessionsCache(var5);
    java.io.InputStream var8 = org.jsecurity.util.ClassUtils.getResourceAsStream("");
    java.lang.Object[] var9 = new java.lang.Object[] { var8};
    java.util.List var10 = org.jsecurity.util.CollectionUtils.asList(var9);
    org.jsecurity.authc.pam.ModularRealmAuthenticator var11 = new org.jsecurity.authc.pam.ModularRealmAuthenticator(var10);
    org.jsecurity.authc.pam.AllSuccessfulModularAuthenticationStrategy var12 = new org.jsecurity.authc.pam.AllSuccessfulModularAuthenticationStrategy();
    var11.setModularAuthenticationStrategy((org.jsecurity.authc.pam.ModularAuthenticationStrategy)var12);
    org.jsecurity.authz.SimpleAuthorizationInfo var14 = new org.jsecurity.authz.SimpleAuthorizationInfo();
    var14.addStringPermission("hi!");
    java.io.InputStream var18 = org.jsecurity.util.ClassUtils.getResourceAsStream("");
    java.lang.Object[] var19 = new java.lang.Object[] { var18};
    java.util.List var20 = org.jsecurity.util.CollectionUtils.asList(var19);
    var14.addRoles((java.util.Collection)var20);
    var11.setAuthenticationListeners((java.util.Collection)var20);
    org.jsecurity.realm.activedirectory.ActiveDirectoryRealm var23 = new org.jsecurity.realm.activedirectory.ActiveDirectoryRealm();
    var23.setPrincipalSuffix("");
    var11.setRealm((org.jsecurity.realm.Realm)var23);
    org.jsecurity.cache.HashtableCacheManager var27 = new org.jsecurity.cache.HashtableCacheManager();
    org.jsecurity.cache.Cache var29 = var27.getCache("\u0000\u0000");
    var23.setAuthorizationCache(var29);
    var0.setActiveSessionsCache(var29);
    org.jsecurity.session.mgt.SimpleSession var32 = new org.jsecurity.session.mgt.SimpleSession();
    java.io.Serializable var33 = var0.create((org.jsecurity.session.Session)var32);
    org.jsecurity.session.mgt.SimpleSession var34 = new org.jsecurity.session.mgt.SimpleSession();
    var34.touch();
    var34.validate();
    org.jsecurity.session.mgt.SimpleSession var37 = new org.jsecurity.session.mgt.SimpleSession();
    var37.setTimeout((-1L));
    org.jsecurity.session.mgt.SimpleSession var40 = new org.jsecurity.session.mgt.SimpleSession();
    java.util.Date var41 = var40.getLastAccessTime();
    var37.setLastAccessTime(var41);
    org.jsecurity.session.mgt.SimpleSession var43 = new org.jsecurity.session.mgt.SimpleSession();
    java.util.Date var44 = var43.getLastAccessTime();
    var37.setStopTimestamp(var44);
    var34.setLastAccessTime(var44);
    var32.setLastAccessTime(var44);
    org.jsecurity.session.mgt.ImmutableProxiedSession var48 = new org.jsecurity.session.mgt.ImmutableProxiedSession((org.jsecurity.session.Session)var32);
    java.util.Date var49 = var48.getLastAccessTime();
    long var50 = var48.getTimeout();
    java.util.Date var51 = var48.getLastAccessTime();
    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      var48.setTimeout(1800000L);
      fail("Expected exception of type org.jsecurity.session.InvalidSessionException");
    } catch (org.jsecurity.session.InvalidSessionException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var1);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var2);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var5);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var8);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var9);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var10);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var18);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var19);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var20);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var29);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var33 + "' != '" + "62d86f95-9bdb-410f-aabd-6811d29c1e09"+ "'", var33.equals("62d86f95-9bdb-410f-aabd-6811d29c1e09"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var41);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var44);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var49);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var50 == 1800000L);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var51);

  }

  public void test343() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest6.test343");


    org.jsecurity.mgt.DefaultSecurityManager var0 = new org.jsecurity.mgt.DefaultSecurityManager();
    java.io.InputStream var2 = org.jsecurity.util.ClassUtils.getResourceAsStream("");
    java.lang.Object[] var3 = new java.lang.Object[] { var2};
    java.util.List var4 = org.jsecurity.util.CollectionUtils.asList(var3);
    org.jsecurity.authc.pam.ModularRealmAuthenticator var5 = new org.jsecurity.authc.pam.ModularRealmAuthenticator(var4);
    org.jsecurity.authc.pam.AllSuccessfulModularAuthenticationStrategy var6 = new org.jsecurity.authc.pam.AllSuccessfulModularAuthenticationStrategy();
    var5.setModularAuthenticationStrategy((org.jsecurity.authc.pam.ModularAuthenticationStrategy)var6);
    org.jsecurity.authz.SimpleAuthorizationInfo var8 = new org.jsecurity.authz.SimpleAuthorizationInfo();
    var8.addStringPermission("hi!");
    java.io.InputStream var12 = org.jsecurity.util.ClassUtils.getResourceAsStream("");
    java.lang.Object[] var13 = new java.lang.Object[] { var12};
    java.util.List var14 = org.jsecurity.util.CollectionUtils.asList(var13);
    var8.addRoles((java.util.Collection)var14);
    var5.setAuthenticationListeners((java.util.Collection)var14);
    var0.setSessionListeners((java.util.Collection)var14);
    org.jsecurity.authc.pam.ModularRealmAuthenticator var18 = new org.jsecurity.authc.pam.ModularRealmAuthenticator();
    org.jsecurity.authz.permission.InvalidPermissionStringException var21 = new org.jsecurity.authz.permission.InvalidPermissionStringException("", "dd\uFFFD");
    org.jsecurity.JSecurityException var23 = new org.jsecurity.JSecurityException("");
    org.jsecurity.authc.SimpleAuthenticationInfo var25 = new org.jsecurity.authc.SimpleAuthenticationInfo((java.lang.Object)var21, (java.lang.Object)"", "org.jsecurity.authz.UnauthorizedException: org.jsecurity.session.ExpiredSessionException: ");
    org.jsecurity.subject.PrincipalCollection var26 = var25.getPrincipals();
    var18.onLogout(var26);
    var0.setAuthenticator((org.jsecurity.authc.Authenticator)var18);
    org.jsecurity.codec.CodecException var31 = new org.jsecurity.codec.CodecException("dd\uFFFD");
    org.jsecurity.authc.ConcurrentAccessException var32 = new org.jsecurity.authc.ConcurrentAccessException("org.jsecurity.authz.UnauthorizedException: org.jsecurity.session.ExpiredSessionException: ", (java.lang.Throwable)var31);
    org.jsecurity.subject.SimplePrincipalCollection var34 = new org.jsecurity.subject.SimplePrincipalCollection((java.lang.Object)var31, "");
    org.jsecurity.authc.pam.FirstSuccessfulAuthenticationStrategy var35 = new org.jsecurity.authc.pam.FirstSuccessfulAuthenticationStrategy();
    org.jsecurity.authz.UnauthorizedException var37 = new org.jsecurity.authz.UnauthorizedException("org.jsecurity.config.ConfigurationException: dd\uFFFD");
    java.lang.Throwable[] var38 = var37.getSuppressed();
    java.util.List var39 = org.jsecurity.util.CollectionUtils.asList((java.lang.Object[])var38);
    org.jsecurity.authc.UsernamePasswordToken var40 = new org.jsecurity.authc.UsernamePasswordToken();
    java.lang.String var41 = var40.getUsername();
    java.net.InetAddress var42 = var40.getInetAddress();
    org.jsecurity.authc.AuthenticationInfo var43 = var35.beforeAllAttempts((java.util.Collection)var39, (org.jsecurity.authc.AuthenticationToken)var40);
    org.jsecurity.session.UnknownSessionException var48 = new org.jsecurity.session.UnknownSessionException("dd\uFFFD", (java.io.Serializable)100.0f);
    org.jsecurity.subject.SubjectException var49 = new org.jsecurity.subject.SubjectException("dd\uFFFD", (java.lang.Throwable)var48);
    org.jsecurity.io.SerializationException var50 = new org.jsecurity.io.SerializationException("", (java.lang.Throwable)var49);
    java.lang.Throwable[] var51 = var49.getSuppressed();
    java.util.Set var52 = org.jsecurity.util.CollectionUtils.asSet((java.lang.Object[])var51);
    org.jsecurity.authc.SimpleAccount var53 = new org.jsecurity.authc.SimpleAccount((org.jsecurity.subject.PrincipalCollection)var34, (java.lang.Object)var39, var52);
    java.io.InputStream var55 = org.jsecurity.util.ClassUtils.getResourceAsStream("");
    java.lang.Object[] var56 = new java.lang.Object[] { var55};
    java.util.List var57 = org.jsecurity.util.CollectionUtils.asList(var56);
    org.jsecurity.authc.pam.ModularRealmAuthenticator var58 = new org.jsecurity.authc.pam.ModularRealmAuthenticator(var57);
    org.jsecurity.subject.SimplePrincipalCollection var60 = new org.jsecurity.subject.SimplePrincipalCollection((java.util.Collection)var57, "org.jsecurity.authz.UnauthorizedException: org.jsecurity.session.ExpiredSessionException: ");
    org.jsecurity.io.ResourceException var64 = new org.jsecurity.io.ResourceException("hi!");
    org.jsecurity.authc.UnknownAccountException var65 = new org.jsecurity.authc.UnknownAccountException((java.lang.Throwable)var64);
    org.jsecurity.session.StoppedSessionException var66 = new org.jsecurity.session.StoppedSessionException("dd\uFFFD", (java.io.Serializable)var64);
    org.jsecurity.session.UnknownSessionException var67 = new org.jsecurity.session.UnknownSessionException("org.jsecurity.authz.UnauthorizedException: org.jsecurity.session.ExpiredSessionException: ", (java.lang.Throwable)var64);
    boolean var68 = var60.equals((java.lang.Object)var64);
    var34.addAll((org.jsecurity.subject.PrincipalCollection)var60);
    org.jsecurity.session.UnknownSessionException var74 = new org.jsecurity.session.UnknownSessionException("dd\uFFFD", (java.io.Serializable)100.0f);
    org.jsecurity.subject.SubjectException var75 = new org.jsecurity.subject.SubjectException("dd\uFFFD", (java.lang.Throwable)var74);
    org.jsecurity.io.SerializationException var76 = new org.jsecurity.io.SerializationException("", (java.lang.Throwable)var75);
    java.lang.Throwable[] var77 = var75.getSuppressed();
    java.util.List var78 = org.jsecurity.util.CollectionUtils.asList((java.lang.Object[])var77);
    boolean var79 = var0.isPermittedAll((org.jsecurity.subject.PrincipalCollection)var34, (java.util.Collection)var78);
    org.jsecurity.subject.DelegatingSubject var80 = new org.jsecurity.subject.DelegatingSubject((org.jsecurity.mgt.SecurityManager)var0);
    boolean var82 = var80.hasRole("org.jsecurity.authc.IncorrectCredentialsException: \u0000\u0000");
    boolean var83 = var80.isAuthenticated();
    boolean var85 = var80.hasRole("d8d550ee-3a8c-48f0-8061-1d82c827f505");
    java.lang.String[] var88 = org.jsecurity.util.StringUtils.tokenizeToStringArray("8c2217ad-c6d4-4aa9-b1d5-b939ed7334c8", "orgjsecurityauthcCredentialsException783ccd3148a842dd890fdf885a7baafAA==");
    boolean var89 = var80.isPermittedAll(var88);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var2);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var3);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var4);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var12);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var13);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var14);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var26);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var38);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var39);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var41);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var42);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var43);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var51);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var52);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var55);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var56);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var57);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var68 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var77);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var78);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var79 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var82 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var83 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var85 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var88);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var89 == false);

  }

  public void test344() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest6.test344");


    org.jsecurity.cache.HashtableCache var1 = new org.jsecurity.cache.HashtableCache("\u0000\u0000\u0000");
    org.jsecurity.realm.text.TextConfigurationRealm var2 = new org.jsecurity.realm.text.TextConfigurationRealm();
    java.io.InputStream var4 = org.jsecurity.util.ClassUtils.getResourceAsStream("");
    java.lang.Object[] var5 = new java.lang.Object[] { var4};
    java.util.List var6 = org.jsecurity.util.CollectionUtils.asList(var5);
    org.jsecurity.authc.pam.ModularRealmAuthenticator var7 = new org.jsecurity.authc.pam.ModularRealmAuthenticator(var6);
    org.jsecurity.subject.SimplePrincipalCollection var9 = new org.jsecurity.subject.SimplePrincipalCollection((java.util.Collection)var6, "org.jsecurity.authz.UnauthorizedException: org.jsecurity.session.ExpiredSessionException: ");
    org.jsecurity.session.UnknownSessionException var14 = new org.jsecurity.session.UnknownSessionException("dd\uFFFD", (java.io.Serializable)100.0f);
    org.jsecurity.session.SessionException var16 = new org.jsecurity.session.SessionException("dd\uFFFD", (java.lang.Throwable)var14, (java.io.Serializable)0);
    org.jsecurity.session.SessionException var17 = new org.jsecurity.session.SessionException("dd\uFFFD", (java.lang.Throwable)var14);
    var9.add((java.lang.Object)var17, "org.jsecurity.config.ConfigurationException: dd\uFFFD");
    var2.onLogout((org.jsecurity.subject.PrincipalCollection)var9);
    org.jsecurity.authc.ExpiredCredentialsException var22 = new org.jsecurity.authc.ExpiredCredentialsException();
    org.jsecurity.session.ExpiredSessionException var23 = new org.jsecurity.session.ExpiredSessionException("", (java.lang.Throwable)var22);
    java.lang.Throwable[] var24 = var23.getSuppressed();
    org.jsecurity.io.ResourceException var25 = new org.jsecurity.io.ResourceException((java.lang.Throwable)var23);
    org.jsecurity.authc.SimpleAuthenticationInfo var26 = new org.jsecurity.authc.SimpleAuthenticationInfo((org.jsecurity.subject.PrincipalCollection)var9, (java.lang.Object)var23);
    org.jsecurity.codec.CodecException var29 = new org.jsecurity.codec.CodecException("dd\uFFFD");
    org.jsecurity.authc.ConcurrentAccessException var30 = new org.jsecurity.authc.ConcurrentAccessException("org.jsecurity.authz.UnauthorizedException: org.jsecurity.session.ExpiredSessionException: ", (java.lang.Throwable)var29);
    org.jsecurity.subject.SimplePrincipalCollection var32 = new org.jsecurity.subject.SimplePrincipalCollection((java.lang.Object)var29, "");
    java.io.InputStream var34 = org.jsecurity.util.ClassUtils.getResourceAsStream("");
    java.lang.Object[] var35 = new java.lang.Object[] { var34};
    java.util.List var36 = org.jsecurity.util.CollectionUtils.asList(var35);
    org.jsecurity.authc.pam.ModularRealmAuthenticator var37 = new org.jsecurity.authc.pam.ModularRealmAuthenticator(var36);
    var32.addAll((java.util.Collection)var36, "\u0000\u0000");
    org.jsecurity.authz.UnauthorizedException var41 = new org.jsecurity.authz.UnauthorizedException();
    org.jsecurity.session.SessionException var43 = new org.jsecurity.session.SessionException("", (java.lang.Throwable)var41, (java.io.Serializable)"org.jsecurity.config.ConfigurationException: dd\uFFFD");
    org.jsecurity.crypto.hash.Sha1Hash var44 = new org.jsecurity.crypto.hash.Sha1Hash((java.lang.Object)"");
    org.jsecurity.session.UnknownSessionException var49 = new org.jsecurity.session.UnknownSessionException("dd\uFFFD", (java.io.Serializable)100.0f);
    org.jsecurity.subject.SubjectException var50 = new org.jsecurity.subject.SubjectException("dd\uFFFD", (java.lang.Throwable)var49);
    org.jsecurity.io.SerializationException var51 = new org.jsecurity.io.SerializationException("", (java.lang.Throwable)var50);
    java.lang.Throwable[] var52 = var50.getSuppressed();
    java.util.Set var53 = org.jsecurity.util.CollectionUtils.asSet((java.lang.Object[])var52);
    org.jsecurity.authz.SimpleAuthorizationInfo var55 = new org.jsecurity.authz.SimpleAuthorizationInfo();
    org.jsecurity.session.UnknownSessionException var60 = new org.jsecurity.session.UnknownSessionException("dd\uFFFD", (java.io.Serializable)100.0f);
    org.jsecurity.subject.SubjectException var61 = new org.jsecurity.subject.SubjectException("dd\uFFFD", (java.lang.Throwable)var60);
    org.jsecurity.io.SerializationException var62 = new org.jsecurity.io.SerializationException("", (java.lang.Throwable)var61);
    java.lang.Throwable[] var63 = var61.getSuppressed();
    java.util.Set var64 = org.jsecurity.util.CollectionUtils.asSet((java.lang.Object[])var63);
    var55.setStringPermissions(var64);
    java.util.Set var66 = var55.getRoles();
    org.jsecurity.authz.SimpleAuthorizationInfo var67 = new org.jsecurity.authz.SimpleAuthorizationInfo();
    var67.addRole("a2b823b1e72eae2b727289df8a00a89df8a0bab6ad8a89c4c5c7a9b62a270000");
    org.jsecurity.session.UnknownSessionException var74 = new org.jsecurity.session.UnknownSessionException("dd\uFFFD", (java.io.Serializable)100.0f);
    org.jsecurity.subject.SubjectException var75 = new org.jsecurity.subject.SubjectException("dd\uFFFD", (java.lang.Throwable)var74);
    org.jsecurity.io.SerializationException var76 = new org.jsecurity.io.SerializationException("", (java.lang.Throwable)var75);
    java.lang.Throwable[] var77 = var75.getSuppressed();
    java.util.Set var78 = org.jsecurity.util.CollectionUtils.asSet((java.lang.Object[])var77);
    var67.addRoles((java.util.Collection)var78);
    var55.setRoles(var78);
    org.jsecurity.authz.SimpleRole var81 = new org.jsecurity.authz.SimpleRole("org.jsecurity.authz.UnauthorizedException: org.jsecurity.session.ExpiredSessionException: ", var78);
    org.jsecurity.authc.SimpleAccount var82 = new org.jsecurity.authc.SimpleAccount((org.jsecurity.subject.PrincipalCollection)var32, (java.lang.Object)"", var53, var78);
    var26.setPrincipals((org.jsecurity.subject.PrincipalCollection)var32);
    java.lang.String[] var87 = org.jsecurity.util.StringUtils.split("dd\uFFFD", '4', 'a');
    var1.put((java.lang.Object)var32, (java.lang.Object)'a');
    org.jsecurity.util.UnavailableConstructorException var90 = new org.jsecurity.util.UnavailableConstructorException("org.jsecurity.authc.CredentialsException: 783ccd31-48a8-42dd-890f-df885a7baaff");
    org.jsecurity.authc.IncorrectCredentialsException var91 = new org.jsecurity.authc.IncorrectCredentialsException((java.lang.Throwable)var90);
    java.lang.Object var92 = var1.get((java.lang.Object)var90);
    java.lang.String var93 = var1.toString();
    java.util.Set var94 = var1.keys();
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var4);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var5);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var6);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var24);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var34);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var35);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var36);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var52);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var53);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var63);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var64);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var66);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var77);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var78);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var87);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var92);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var93 + "' != '" + "HashtableCache [\u0000\u0000\u0000]"+ "'", var93.equals("HashtableCache [\u0000\u0000\u0000]"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var94);

  }

  public void test345() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest6.test345");


    org.jsecurity.mgt.DefaultSecurityManager var0 = new org.jsecurity.mgt.DefaultSecurityManager();
    java.io.InputStream var2 = org.jsecurity.util.ClassUtils.getResourceAsStream("");
    java.lang.Object[] var3 = new java.lang.Object[] { var2};
    java.util.List var4 = org.jsecurity.util.CollectionUtils.asList(var3);
    org.jsecurity.authc.pam.ModularRealmAuthenticator var5 = new org.jsecurity.authc.pam.ModularRealmAuthenticator(var4);
    org.jsecurity.authc.pam.AllSuccessfulModularAuthenticationStrategy var6 = new org.jsecurity.authc.pam.AllSuccessfulModularAuthenticationStrategy();
    var5.setModularAuthenticationStrategy((org.jsecurity.authc.pam.ModularAuthenticationStrategy)var6);
    org.jsecurity.authz.SimpleAuthorizationInfo var8 = new org.jsecurity.authz.SimpleAuthorizationInfo();
    var8.addStringPermission("hi!");
    java.io.InputStream var12 = org.jsecurity.util.ClassUtils.getResourceAsStream("");
    java.lang.Object[] var13 = new java.lang.Object[] { var12};
    java.util.List var14 = org.jsecurity.util.CollectionUtils.asList(var13);
    var8.addRoles((java.util.Collection)var14);
    var5.setAuthenticationListeners((java.util.Collection)var14);
    var0.setSessionListeners((java.util.Collection)var14);
    org.jsecurity.realm.text.TextConfigurationRealm var18 = new org.jsecurity.realm.text.TextConfigurationRealm();
    java.io.InputStream var20 = org.jsecurity.util.ClassUtils.getResourceAsStream("");
    java.lang.Object[] var21 = new java.lang.Object[] { var20};
    java.util.List var22 = org.jsecurity.util.CollectionUtils.asList(var21);
    org.jsecurity.authc.pam.ModularRealmAuthenticator var23 = new org.jsecurity.authc.pam.ModularRealmAuthenticator(var22);
    org.jsecurity.subject.SimplePrincipalCollection var25 = new org.jsecurity.subject.SimplePrincipalCollection((java.util.Collection)var22, "org.jsecurity.authz.UnauthorizedException: org.jsecurity.session.ExpiredSessionException: ");
    org.jsecurity.session.UnknownSessionException var30 = new org.jsecurity.session.UnknownSessionException("dd\uFFFD", (java.io.Serializable)100.0f);
    org.jsecurity.session.SessionException var32 = new org.jsecurity.session.SessionException("dd\uFFFD", (java.lang.Throwable)var30, (java.io.Serializable)0);
    org.jsecurity.session.SessionException var33 = new org.jsecurity.session.SessionException("dd\uFFFD", (java.lang.Throwable)var30);
    var25.add((java.lang.Object)var33, "org.jsecurity.config.ConfigurationException: dd\uFFFD");
    var18.onLogout((org.jsecurity.subject.PrincipalCollection)var25);
    org.jsecurity.authc.pam.FirstSuccessfulAuthenticationStrategy var37 = new org.jsecurity.authc.pam.FirstSuccessfulAuthenticationStrategy();
    org.jsecurity.authz.UnauthorizedException var39 = new org.jsecurity.authz.UnauthorizedException("org.jsecurity.config.ConfigurationException: dd\uFFFD");
    java.lang.Throwable[] var40 = var39.getSuppressed();
    java.util.List var41 = org.jsecurity.util.CollectionUtils.asList((java.lang.Object[])var40);
    org.jsecurity.authc.UsernamePasswordToken var42 = new org.jsecurity.authc.UsernamePasswordToken();
    java.lang.String var43 = var42.getUsername();
    java.net.InetAddress var44 = var42.getInetAddress();
    org.jsecurity.authc.AuthenticationInfo var45 = var37.beforeAllAttempts((java.util.Collection)var41, (org.jsecurity.authc.AuthenticationToken)var42);
    boolean[] var46 = var0.hasRoles((org.jsecurity.subject.PrincipalCollection)var25, var41);
    org.jsecurity.subject.Subject var47 = var0.getSubject();
    org.jsecurity.subject.RememberMeManager var48 = var0.getRememberMeManager();
    org.jsecurity.realm.text.TextConfigurationRealm var49 = new org.jsecurity.realm.text.TextConfigurationRealm();
    java.io.InputStream var51 = org.jsecurity.util.ClassUtils.getResourceAsStream("");
    java.lang.Object[] var52 = new java.lang.Object[] { var51};
    java.util.List var53 = org.jsecurity.util.CollectionUtils.asList(var52);
    org.jsecurity.authc.pam.ModularRealmAuthenticator var54 = new org.jsecurity.authc.pam.ModularRealmAuthenticator(var53);
    org.jsecurity.subject.SimplePrincipalCollection var56 = new org.jsecurity.subject.SimplePrincipalCollection((java.util.Collection)var53, "org.jsecurity.authz.UnauthorizedException: org.jsecurity.session.ExpiredSessionException: ");
    org.jsecurity.session.UnknownSessionException var61 = new org.jsecurity.session.UnknownSessionException("dd\uFFFD", (java.io.Serializable)100.0f);
    org.jsecurity.session.SessionException var63 = new org.jsecurity.session.SessionException("dd\uFFFD", (java.lang.Throwable)var61, (java.io.Serializable)0);
    org.jsecurity.session.SessionException var64 = new org.jsecurity.session.SessionException("dd\uFFFD", (java.lang.Throwable)var61);
    var56.add((java.lang.Object)var64, "org.jsecurity.config.ConfigurationException: dd\uFFFD");
    var49.onLogout((org.jsecurity.subject.PrincipalCollection)var56);
    org.jsecurity.authc.ExpiredCredentialsException var69 = new org.jsecurity.authc.ExpiredCredentialsException();
    org.jsecurity.session.ExpiredSessionException var70 = new org.jsecurity.session.ExpiredSessionException("", (java.lang.Throwable)var69);
    java.lang.Throwable[] var71 = var70.getSuppressed();
    org.jsecurity.io.ResourceException var72 = new org.jsecurity.io.ResourceException((java.lang.Throwable)var70);
    org.jsecurity.authc.SimpleAuthenticationInfo var73 = new org.jsecurity.authc.SimpleAuthenticationInfo((org.jsecurity.subject.PrincipalCollection)var56, (java.lang.Object)var70);
    java.util.Collection var75 = var56.fromRealm("a8df74b8-0f68-49c4-b77d-09857e171e23");
    java.util.List var76 = var56.asList();
    org.jsecurity.authc.LockedAccountException var78 = new org.jsecurity.authc.LockedAccountException("6464ff");
    org.jsecurity.io.SerializationException var79 = new org.jsecurity.io.SerializationException((java.lang.Throwable)var78);
    org.jsecurity.authz.SimpleAuthorizingAccount var80 = new org.jsecurity.authz.SimpleAuthorizingAccount((org.jsecurity.subject.PrincipalCollection)var56, (java.lang.Object)var78);
    java.lang.String[] var83 = org.jsecurity.util.StringUtils.split("dade3937-164f-46fa-a082-f5f54b3b44e1", ' ');
    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      boolean[] var84 = var0.isPermitted((org.jsecurity.subject.PrincipalCollection)var56, var83);
      fail("Expected exception of type java.util.NoSuchElementException");
    } catch (java.util.NoSuchElementException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var2);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var3);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var4);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var12);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var13);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var14);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var20);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var21);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var22);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var40);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var41);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var43);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var44);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var45);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var46);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var47);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var48);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var51);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var52);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var53);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var71);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var75);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var76);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var83);

  }

  public void test346() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest6.test346");


    org.jsecurity.realm.jdbc.JdbcRealm var0 = new org.jsecurity.realm.jdbc.JdbcRealm();
    var0.setPermissionsQuery("org.jsecurity.authz.UnauthorizedException: org.jsecurity.session.ExpiredSessionException: ");
    var0.setAuthenticationQuery("");
    var0.setPermissionsQuery("ca73d1a4-706e-42e7-980f-896d3b153de8");
    var0.setUserRolesQuery("3c0f8cd0-07d8-4de6-8030-3e8afad05e07");
    org.jsecurity.mgt.DefaultSecurityManager var9 = new org.jsecurity.mgt.DefaultSecurityManager();
    org.jsecurity.authc.pam.AllSuccessfulModularAuthenticationStrategy var10 = new org.jsecurity.authc.pam.AllSuccessfulModularAuthenticationStrategy();
    org.jsecurity.authc.pam.AllSuccessfulModularAuthenticationStrategy var11 = new org.jsecurity.authc.pam.AllSuccessfulModularAuthenticationStrategy();
    char[] var13 = new char[] { };
    org.jsecurity.authc.UsernamePasswordToken var15 = new org.jsecurity.authc.UsernamePasswordToken("hi!", var13, true);
    org.jsecurity.authc.SimpleAccount var16 = new org.jsecurity.authc.SimpleAccount();
    var16.setCredentialsExpired(false);
    boolean var19 = var16.isLocked();
    org.jsecurity.authc.AuthenticationInfo var20 = var11.afterAllAttempts((org.jsecurity.authc.AuthenticationToken)var15, (org.jsecurity.authc.AuthenticationInfo)var16);
    char[] var24 = new char[] { '4', '#'};
    org.jsecurity.authc.UsernamePasswordToken var25 = new org.jsecurity.authc.UsernamePasswordToken("\u0000\u0000", var24);
    org.jsecurity.authc.SimpleAccount var26 = new org.jsecurity.authc.SimpleAccount();
    var26.setCredentialsExpired(false);
    var26.setCredentialsExpired(false);
    boolean var31 = var26.isCredentialsExpired();
    org.jsecurity.authc.AuthenticationInfo var32 = var11.afterAllAttempts((org.jsecurity.authc.AuthenticationToken)var25, (org.jsecurity.authc.AuthenticationInfo)var26);
    org.jsecurity.authz.UnauthenticatedException var36 = new org.jsecurity.authz.UnauthenticatedException();
    org.jsecurity.config.UnresolveableReferenceException var37 = new org.jsecurity.config.UnresolveableReferenceException("", (java.lang.Throwable)var36);
    org.jsecurity.cache.CacheException var38 = new org.jsecurity.cache.CacheException("org.jsecurity.config.ConfigurationException: dd\uFFFD", (java.lang.Throwable)var36);
    org.jsecurity.authc.SimpleAuthenticationInfo var40 = new org.jsecurity.authc.SimpleAuthenticationInfo((java.lang.Object)"org.jsecurity.config.ConfigurationException: dd\uFFFD", (java.lang.Object)var38, "a2b823b1e72eae2b727289df8a00a89df8a0bab6ad8a89c4c5c7a9b62a270000");
    org.jsecurity.subject.PrincipalCollection var41 = var40.getPrincipals();
    org.jsecurity.authc.AuthenticationInfo var42 = var10.afterAllAttempts((org.jsecurity.authc.AuthenticationToken)var25, (org.jsecurity.authc.AuthenticationInfo)var40);
    var9.setModularAuthenticationStrategy((org.jsecurity.authc.pam.ModularAuthenticationStrategy)var10);
    org.jsecurity.subject.RememberMeManager var44 = var9.getRememberMeManager();
    org.jsecurity.authc.pam.ModularRealmAuthenticator var45 = new org.jsecurity.authc.pam.ModularRealmAuthenticator();
    var9.setAuthenticator((org.jsecurity.authc.Authenticator)var45);
    org.jsecurity.codec.CodecException var49 = new org.jsecurity.codec.CodecException("dd\uFFFD");
    org.jsecurity.authc.ConcurrentAccessException var50 = new org.jsecurity.authc.ConcurrentAccessException("org.jsecurity.authz.UnauthorizedException: org.jsecurity.session.ExpiredSessionException: ", (java.lang.Throwable)var49);
    org.jsecurity.subject.SimplePrincipalCollection var52 = new org.jsecurity.subject.SimplePrincipalCollection((java.lang.Object)var49, "");
    java.io.InputStream var54 = org.jsecurity.util.ClassUtils.getResourceAsStream("");
    java.lang.Object[] var55 = new java.lang.Object[] { var54};
    java.util.List var56 = org.jsecurity.util.CollectionUtils.asList(var55);
    org.jsecurity.authc.pam.ModularRealmAuthenticator var57 = new org.jsecurity.authc.pam.ModularRealmAuthenticator(var56);
    var52.addAll((java.util.Collection)var56, "\u0000\u0000");
    org.jsecurity.authc.pam.FirstSuccessfulAuthenticationStrategy var60 = new org.jsecurity.authc.pam.FirstSuccessfulAuthenticationStrategy();
    org.jsecurity.authz.UnauthorizedException var62 = new org.jsecurity.authz.UnauthorizedException("org.jsecurity.config.ConfigurationException: dd\uFFFD");
    java.lang.Throwable[] var63 = var62.getSuppressed();
    java.util.List var64 = org.jsecurity.util.CollectionUtils.asList((java.lang.Object[])var63);
    org.jsecurity.authc.UsernamePasswordToken var65 = new org.jsecurity.authc.UsernamePasswordToken();
    java.lang.String var66 = var65.getUsername();
    java.net.InetAddress var67 = var65.getInetAddress();
    org.jsecurity.authc.AuthenticationInfo var68 = var60.beforeAllAttempts((java.util.Collection)var64, (org.jsecurity.authc.AuthenticationToken)var65);
    var9.checkPermissions((org.jsecurity.subject.PrincipalCollection)var52, (java.util.Collection)var64);
    org.jsecurity.authz.aop.RoleAnnotationMethodInterceptor var70 = new org.jsecurity.authz.aop.RoleAnnotationMethodInterceptor();
    org.jsecurity.aop.AnnotationHandler var71 = var70.getHandler();
    java.lang.Class var72 = var71.getAnnotationClass();
    java.lang.Object var73 = var52.oneByType(var72);
    var0.setAuthenticationTokenClass(var72);
    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      java.lang.Object var75 = org.jsecurity.util.ClassUtils.newInstance(var72);
      fail("Expected exception of type org.jsecurity.util.InstantiationException");
    } catch (org.jsecurity.util.InstantiationException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var13);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var19 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var20);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var24);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var31 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var32);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var41);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var42);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var44);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var54);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var55);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var56);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var63);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var64);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var66);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var67);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var68);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var71);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var72);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var73);

  }

  public void test347() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest6.test347");


    org.jsecurity.session.mgt.eis.MemorySessionDAO var0 = new org.jsecurity.session.mgt.eis.MemorySessionDAO();
    org.jsecurity.cache.Cache var1 = var0.getActiveSessionsCache();
    var0.setActiveSessionsCacheName("dd\uFFFD");
    java.util.Collection var4 = var0.getActiveSessions();
    org.jsecurity.cache.HashtableCache var6 = new org.jsecurity.cache.HashtableCache("5dd0c65d-1422-49c2-becb-9e8dca619ab3");
    var0.setActiveSessionsCache((org.jsecurity.cache.Cache)var6);
    org.jsecurity.session.mgt.SimpleSession var8 = new org.jsecurity.session.mgt.SimpleSession();
    org.jsecurity.io.SerializationException var11 = new org.jsecurity.io.SerializationException("org.jsecurity.config.ConfigurationException: dd\uFFFD");
    org.jsecurity.authc.AccountException var12 = new org.jsecurity.authc.AccountException("a2b823b1e72eae2b727289df8a00a89df8a0bab6ad8a89c4c5c7a9b62a270000", (java.lang.Throwable)var11);
    var8.setId((java.io.Serializable)"a2b823b1e72eae2b727289df8a00a89df8a0bab6ad8a89c4c5c7a9b62a270000");
    org.jsecurity.session.mgt.eis.MemorySessionDAO var14 = new org.jsecurity.session.mgt.eis.MemorySessionDAO();
    org.jsecurity.cache.Cache var15 = var14.getActiveSessionsCache();
    org.jsecurity.cache.CacheManager var16 = var14.getCacheManager();
    org.jsecurity.cache.HashtableCacheManager var17 = new org.jsecurity.cache.HashtableCacheManager();
    org.jsecurity.cache.Cache var19 = var17.getCache("\u0000\u0000");
    var14.setActiveSessionsCache(var19);
    java.io.InputStream var22 = org.jsecurity.util.ClassUtils.getResourceAsStream("");
    java.lang.Object[] var23 = new java.lang.Object[] { var22};
    java.util.List var24 = org.jsecurity.util.CollectionUtils.asList(var23);
    org.jsecurity.authc.pam.ModularRealmAuthenticator var25 = new org.jsecurity.authc.pam.ModularRealmAuthenticator(var24);
    org.jsecurity.authc.pam.AllSuccessfulModularAuthenticationStrategy var26 = new org.jsecurity.authc.pam.AllSuccessfulModularAuthenticationStrategy();
    var25.setModularAuthenticationStrategy((org.jsecurity.authc.pam.ModularAuthenticationStrategy)var26);
    org.jsecurity.authz.SimpleAuthorizationInfo var28 = new org.jsecurity.authz.SimpleAuthorizationInfo();
    var28.addStringPermission("hi!");
    java.io.InputStream var32 = org.jsecurity.util.ClassUtils.getResourceAsStream("");
    java.lang.Object[] var33 = new java.lang.Object[] { var32};
    java.util.List var34 = org.jsecurity.util.CollectionUtils.asList(var33);
    var28.addRoles((java.util.Collection)var34);
    var25.setAuthenticationListeners((java.util.Collection)var34);
    org.jsecurity.realm.activedirectory.ActiveDirectoryRealm var37 = new org.jsecurity.realm.activedirectory.ActiveDirectoryRealm();
    var37.setPrincipalSuffix("");
    var25.setRealm((org.jsecurity.realm.Realm)var37);
    org.jsecurity.cache.HashtableCacheManager var41 = new org.jsecurity.cache.HashtableCacheManager();
    org.jsecurity.cache.Cache var43 = var41.getCache("\u0000\u0000");
    var37.setAuthorizationCache(var43);
    var14.setActiveSessionsCache(var43);
    org.jsecurity.session.mgt.SimpleSession var46 = new org.jsecurity.session.mgt.SimpleSession();
    java.io.Serializable var47 = var14.create((org.jsecurity.session.Session)var46);
    java.io.Serializable var48 = var46.getId();
    java.util.Map var49 = var46.getAttributes();
    org.jsecurity.session.mgt.SimpleSession var50 = new org.jsecurity.session.mgt.SimpleSession();
    var50.setTimeout((-1L));
    org.jsecurity.session.mgt.SimpleSession var53 = new org.jsecurity.session.mgt.SimpleSession();
    java.util.Date var54 = var53.getLastAccessTime();
    var50.setLastAccessTime(var54);
    org.jsecurity.session.mgt.SimpleSession var56 = new org.jsecurity.session.mgt.SimpleSession();
    java.util.Date var57 = var56.getLastAccessTime();
    var50.setStopTimestamp(var57);
    var46.setLastAccessTime(var57);
    var8.setStartTimestamp(var57);
    var0.delete((org.jsecurity.session.Session)var8);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var1);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var4);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var15);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var16);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var19);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var22);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var23);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var24);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var32);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var33);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var34);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var43);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var47 + "' != '" + "54ec062e-7bac-498a-a112-f66421c3e288"+ "'", var47.equals("54ec062e-7bac-498a-a112-f66421c3e288"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var48 + "' != '" + "54ec062e-7bac-498a-a112-f66421c3e288"+ "'", var48.equals("54ec062e-7bac-498a-a112-f66421c3e288"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var49);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var54);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var57);

  }

  public void test348() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest6.test348");


    org.jsecurity.io.ResourceException var3 = new org.jsecurity.io.ResourceException("hi!");
    org.jsecurity.codec.CodecException var4 = new org.jsecurity.codec.CodecException((java.lang.Throwable)var3);
    org.jsecurity.JSecurityException var5 = new org.jsecurity.JSecurityException("a2b823b1e72eae2b727289df8a00a89df8a0bab6ad8a89c4c5c7a9b62a270000", (java.lang.Throwable)var3);
    org.jsecurity.session.UnknownSessionException var6 = new org.jsecurity.session.UnknownSessionException((java.lang.Throwable)var5);
    org.jsecurity.authc.IncorrectCredentialsException var7 = new org.jsecurity.authc.IncorrectCredentialsException((java.lang.Throwable)var5);
    org.jsecurity.authz.AuthorizationException var8 = new org.jsecurity.authz.AuthorizationException("\u0000\u0000\u0000", (java.lang.Throwable)var5);
    org.jsecurity.authc.AccountException var9 = new org.jsecurity.authc.AccountException((java.lang.Throwable)var8);
    org.jsecurity.subject.SimplePrincipalCollection var11 = new org.jsecurity.subject.SimplePrincipalCollection((java.lang.Object)var9, "org.jsecurity.authz.UnauthorizedException: org.jsecurity.session.ExpiredSessionException: ");
    org.jsecurity.mgt.DefaultSecurityManager var12 = new org.jsecurity.mgt.DefaultSecurityManager();
    java.io.InputStream var14 = org.jsecurity.util.ClassUtils.getResourceAsStream("");
    java.lang.Object[] var15 = new java.lang.Object[] { var14};
    java.util.List var16 = org.jsecurity.util.CollectionUtils.asList(var15);
    org.jsecurity.authc.pam.ModularRealmAuthenticator var17 = new org.jsecurity.authc.pam.ModularRealmAuthenticator(var16);
    org.jsecurity.authc.pam.AllSuccessfulModularAuthenticationStrategy var18 = new org.jsecurity.authc.pam.AllSuccessfulModularAuthenticationStrategy();
    var17.setModularAuthenticationStrategy((org.jsecurity.authc.pam.ModularAuthenticationStrategy)var18);
    org.jsecurity.authz.SimpleAuthorizationInfo var20 = new org.jsecurity.authz.SimpleAuthorizationInfo();
    var20.addStringPermission("hi!");
    java.io.InputStream var24 = org.jsecurity.util.ClassUtils.getResourceAsStream("");
    java.lang.Object[] var25 = new java.lang.Object[] { var24};
    java.util.List var26 = org.jsecurity.util.CollectionUtils.asList(var25);
    var20.addRoles((java.util.Collection)var26);
    var17.setAuthenticationListeners((java.util.Collection)var26);
    var12.setSessionListeners((java.util.Collection)var26);
    org.jsecurity.subject.Subject var30 = var12.getSubject();
    org.jsecurity.authz.permission.WildcardPermissionResolver var31 = new org.jsecurity.authz.permission.WildcardPermissionResolver();
    var12.setPermissionResolver((org.jsecurity.authz.permission.PermissionResolver)var31);
    boolean var33 = var11.equals((java.lang.Object)var12);
    org.jsecurity.authz.permission.WildcardPermissionResolver var34 = new org.jsecurity.authz.permission.WildcardPermissionResolver();
    org.jsecurity.authz.Permission var36 = var34.resolvePermission("hi!");
    var12.setPermissionResolver((org.jsecurity.authz.permission.PermissionResolver)var34);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var14);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var15);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var16);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var24);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var25);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var26);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var30);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var33 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var36);

  }

  public void test349() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest6.test349");


    org.jsecurity.crypto.BlowfishCipher var0 = new org.jsecurity.crypto.BlowfishCipher();
    java.security.Key var1 = org.jsecurity.crypto.BlowfishCipher.generateNewKey();
    var0.setKey(var1);
    java.security.Key var3 = org.jsecurity.crypto.BlowfishCipher.generateNewKey();
    var0.setKey(var3);
    java.security.Key var5 = var0.getKey();
    org.jsecurity.session.mgt.SimpleSession var6 = new org.jsecurity.session.mgt.SimpleSession();
    java.util.Date var7 = var6.getLastAccessTime();
    boolean var8 = var6.isValid();
    org.jsecurity.mgt.DefaultSecurityManager var9 = new org.jsecurity.mgt.DefaultSecurityManager();
    java.io.InputStream var11 = org.jsecurity.util.ClassUtils.getResourceAsStream("");
    java.lang.Object[] var12 = new java.lang.Object[] { var11};
    java.util.List var13 = org.jsecurity.util.CollectionUtils.asList(var12);
    org.jsecurity.authc.pam.ModularRealmAuthenticator var14 = new org.jsecurity.authc.pam.ModularRealmAuthenticator(var13);
    org.jsecurity.authc.pam.AllSuccessfulModularAuthenticationStrategy var15 = new org.jsecurity.authc.pam.AllSuccessfulModularAuthenticationStrategy();
    var14.setModularAuthenticationStrategy((org.jsecurity.authc.pam.ModularAuthenticationStrategy)var15);
    org.jsecurity.authz.SimpleAuthorizationInfo var17 = new org.jsecurity.authz.SimpleAuthorizationInfo();
    var17.addStringPermission("hi!");
    java.io.InputStream var21 = org.jsecurity.util.ClassUtils.getResourceAsStream("");
    java.lang.Object[] var22 = new java.lang.Object[] { var21};
    java.util.List var23 = org.jsecurity.util.CollectionUtils.asList(var22);
    var17.addRoles((java.util.Collection)var23);
    var14.setAuthenticationListeners((java.util.Collection)var23);
    var9.setSessionListeners((java.util.Collection)var23);
    org.jsecurity.realm.text.TextConfigurationRealm var27 = new org.jsecurity.realm.text.TextConfigurationRealm();
    java.io.InputStream var29 = org.jsecurity.util.ClassUtils.getResourceAsStream("");
    java.lang.Object[] var30 = new java.lang.Object[] { var29};
    java.util.List var31 = org.jsecurity.util.CollectionUtils.asList(var30);
    org.jsecurity.authc.pam.ModularRealmAuthenticator var32 = new org.jsecurity.authc.pam.ModularRealmAuthenticator(var31);
    org.jsecurity.subject.SimplePrincipalCollection var34 = new org.jsecurity.subject.SimplePrincipalCollection((java.util.Collection)var31, "org.jsecurity.authz.UnauthorizedException: org.jsecurity.session.ExpiredSessionException: ");
    org.jsecurity.session.UnknownSessionException var39 = new org.jsecurity.session.UnknownSessionException("dd\uFFFD", (java.io.Serializable)100.0f);
    org.jsecurity.session.SessionException var41 = new org.jsecurity.session.SessionException("dd\uFFFD", (java.lang.Throwable)var39, (java.io.Serializable)0);
    org.jsecurity.session.SessionException var42 = new org.jsecurity.session.SessionException("dd\uFFFD", (java.lang.Throwable)var39);
    var34.add((java.lang.Object)var42, "org.jsecurity.config.ConfigurationException: dd\uFFFD");
    var27.onLogout((org.jsecurity.subject.PrincipalCollection)var34);
    org.jsecurity.authc.pam.FirstSuccessfulAuthenticationStrategy var46 = new org.jsecurity.authc.pam.FirstSuccessfulAuthenticationStrategy();
    org.jsecurity.authz.UnauthorizedException var48 = new org.jsecurity.authz.UnauthorizedException("org.jsecurity.config.ConfigurationException: dd\uFFFD");
    java.lang.Throwable[] var49 = var48.getSuppressed();
    java.util.List var50 = org.jsecurity.util.CollectionUtils.asList((java.lang.Object[])var49);
    org.jsecurity.authc.UsernamePasswordToken var51 = new org.jsecurity.authc.UsernamePasswordToken();
    java.lang.String var52 = var51.getUsername();
    java.net.InetAddress var53 = var51.getInetAddress();
    org.jsecurity.authc.AuthenticationInfo var54 = var46.beforeAllAttempts((java.util.Collection)var50, (org.jsecurity.authc.AuthenticationToken)var51);
    boolean[] var55 = var9.hasRoles((org.jsecurity.subject.PrincipalCollection)var34, var50);
    var6.setId((java.io.Serializable)var34);
    boolean var57 = var34.isEmpty();
    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      org.jsecurity.crypto.hash.Md5Hash var59 = new org.jsecurity.crypto.hash.Md5Hash((java.lang.Object)var5, (java.lang.Object)var34, 0);
      fail("Expected exception of type org.jsecurity.codec.CodecException");
    } catch (org.jsecurity.codec.CodecException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var1);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var3);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var5);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var7);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var8 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var11);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var12);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var13);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var21);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var22);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var23);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var29);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var30);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var31);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var49);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var50);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var52);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var53);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var54);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var55);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var57 == false);

  }

  public void test350() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest6.test350");


    org.jsecurity.session.mgt.DefaultSessionManager var0 = new org.jsecurity.session.mgt.DefaultSessionManager();
    org.jsecurity.session.mgt.SessionValidationScheduler var1 = var0.getSessionValidationScheduler();
    org.jsecurity.subject.InvalidSubjectException var3 = new org.jsecurity.subject.InvalidSubjectException("NfxhYN7ItBfRAmDBmprtU73ghfEEPpcDJrHPkZ06wiY=");
    boolean var4 = var0.isValid((java.io.Serializable)var3);
    org.jsecurity.cache.ehcache.EhCacheManager var5 = new org.jsecurity.cache.ehcache.EhCacheManager();
    net.sf.ehcache.CacheManager var6 = var5.getCacheManager();
    var5.destroy();
    net.sf.ehcache.CacheManager var8 = var5.getCacheManager();
    net.sf.ehcache.CacheManager var9 = var5.getCacheManager();
    var5.init();
    var0.setCacheManager((org.jsecurity.cache.CacheManager)var5);
    var5.destroy();
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var4 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var6);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var8);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var9);

  }

  public void test351() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest6.test351");


    org.jsecurity.realm.activedirectory.ActiveDirectoryRealm var0 = new org.jsecurity.realm.activedirectory.ActiveDirectoryRealm();
    var0.init();
    var0.setSystemPassword("dd\uFFFD");
    org.jsecurity.authz.aop.GuestAnnotationHandler var4 = new org.jsecurity.authz.aop.GuestAnnotationHandler();
    java.lang.Class var5 = var4.getAnnotationClass();
    var0.setAuthenticationTokenClass(var5);
    org.jsecurity.mgt.DefaultSecurityManager var7 = new org.jsecurity.mgt.DefaultSecurityManager((org.jsecurity.realm.Realm)var0);
    org.jsecurity.cache.CacheManager var8 = var0.getCacheManager();
    org.jsecurity.realm.text.PropertiesRealm var9 = new org.jsecurity.realm.text.PropertiesRealm(var8);
    var9.setReloadIntervalSeconds(0);
    var9.setRoleDefinitions("org.jsecurity.realm.text.TextConfigurationRealm_445");
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var5);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var8);

  }

  public void test352() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest6.test352");


    org.jsecurity.realm.activedirectory.ActiveDirectoryRealm var0 = new org.jsecurity.realm.activedirectory.ActiveDirectoryRealm();
    org.jsecurity.authc.credential.Sha256CredentialsMatcher var1 = new org.jsecurity.authc.credential.Sha256CredentialsMatcher();
    var0.setCredentialsMatcher((org.jsecurity.authc.credential.CredentialsMatcher)var1);
    org.jsecurity.realm.activedirectory.ActiveDirectoryRealm var3 = new org.jsecurity.realm.activedirectory.ActiveDirectoryRealm();
    org.jsecurity.authc.credential.Sha256CredentialsMatcher var4 = new org.jsecurity.authc.credential.Sha256CredentialsMatcher();
    var3.setCredentialsMatcher((org.jsecurity.authc.credential.CredentialsMatcher)var4);
    java.lang.String var6 = var3.getAuthorizationCacheName();
    var3.setUrl("hi!");
    org.jsecurity.realm.ldap.DefaultLdapContextFactory var9 = new org.jsecurity.realm.ldap.DefaultLdapContextFactory();
    var3.setLdapContextFactory((org.jsecurity.realm.ldap.LdapContextFactory)var9);
    var9.setAuthentication("org.jsecurity.authz.UnauthorizedException: org.jsecurity.session.ExpiredSessionException: ");
    var0.setLdapContextFactory((org.jsecurity.realm.ldap.LdapContextFactory)var9);
    var9.setPrincipalSuffix("dd\uFFFD");
    var9.setReferral("org.jsecurity.authc.UsernamePasswordToken - \u0000\u0000, rememberMe=false");
    var9.setUrl("43ccc2be-4ea7-44c1-b0f0-752247e96393");
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var6);

  }

  public void test353() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest6.test353");


    org.jsecurity.realm.jdbc.JdbcRealm var0 = new org.jsecurity.realm.jdbc.JdbcRealm();
    var0.setPermissionsQuery("org.jsecurity.realm.text.TextConfigurationRealm_445");
    var0.setUserRolesQuery("6464ff");
    var0.setUserRolesQuery("NfxhYN7ItBfRAmDBmprtU73ghfEEPpcDJrHPkZ06wiY=");
    var0.setUserRolesQuery("\u0000\u0000");
    var0.setPermissionsQuery("f9548f9e-497e-41ec-97ca-89ede08e20b0");
    var0.setPermissionsLookupEnabled(false);
    var0.setPermissionsQuery("c25a1a23-4e04-4c16-9dcf-f5ed49ed2b3c");

  }

  public void test354() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest6.test354");


    org.jsecurity.authc.DisabledAccountException var1 = new org.jsecurity.authc.DisabledAccountException();
    org.jsecurity.authc.ConcurrentAccessException var2 = new org.jsecurity.authc.ConcurrentAccessException("UDhpNEdFRHd6eWs9", (java.lang.Throwable)var1);
    org.jsecurity.authc.pam.UnsupportedTokenException var3 = new org.jsecurity.authc.pam.UnsupportedTokenException((java.lang.Throwable)var2);

  }

  public void test355() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest6.test355");


    org.jsecurity.cache.HashtableCache var1 = new org.jsecurity.cache.HashtableCache("\u0000\u0000\u0000");
    org.jsecurity.session.mgt.SimpleSession var2 = new org.jsecurity.session.mgt.SimpleSession();
    var2.touch();
    org.jsecurity.authz.UnauthenticatedException var6 = new org.jsecurity.authz.UnauthenticatedException();
    org.jsecurity.config.UnresolveableReferenceException var7 = new org.jsecurity.config.UnresolveableReferenceException("", (java.lang.Throwable)var6);
    org.jsecurity.cache.CacheException var8 = new org.jsecurity.cache.CacheException("org.jsecurity.config.ConfigurationException: dd\uFFFD", (java.lang.Throwable)var6);
    java.lang.Object var9 = var2.removeAttribute((java.lang.Object)var8);
    org.jsecurity.mgt.DefaultSecurityManager var10 = new org.jsecurity.mgt.DefaultSecurityManager();
    org.jsecurity.authc.pam.AllSuccessfulModularAuthenticationStrategy var11 = new org.jsecurity.authc.pam.AllSuccessfulModularAuthenticationStrategy();
    org.jsecurity.authc.pam.AllSuccessfulModularAuthenticationStrategy var12 = new org.jsecurity.authc.pam.AllSuccessfulModularAuthenticationStrategy();
    char[] var14 = new char[] { };
    org.jsecurity.authc.UsernamePasswordToken var16 = new org.jsecurity.authc.UsernamePasswordToken("hi!", var14, true);
    org.jsecurity.authc.SimpleAccount var17 = new org.jsecurity.authc.SimpleAccount();
    var17.setCredentialsExpired(false);
    boolean var20 = var17.isLocked();
    org.jsecurity.authc.AuthenticationInfo var21 = var12.afterAllAttempts((org.jsecurity.authc.AuthenticationToken)var16, (org.jsecurity.authc.AuthenticationInfo)var17);
    char[] var25 = new char[] { '4', '#'};
    org.jsecurity.authc.UsernamePasswordToken var26 = new org.jsecurity.authc.UsernamePasswordToken("\u0000\u0000", var25);
    org.jsecurity.authc.SimpleAccount var27 = new org.jsecurity.authc.SimpleAccount();
    var27.setCredentialsExpired(false);
    var27.setCredentialsExpired(false);
    boolean var32 = var27.isCredentialsExpired();
    org.jsecurity.authc.AuthenticationInfo var33 = var12.afterAllAttempts((org.jsecurity.authc.AuthenticationToken)var26, (org.jsecurity.authc.AuthenticationInfo)var27);
    org.jsecurity.authz.UnauthenticatedException var37 = new org.jsecurity.authz.UnauthenticatedException();
    org.jsecurity.config.UnresolveableReferenceException var38 = new org.jsecurity.config.UnresolveableReferenceException("", (java.lang.Throwable)var37);
    org.jsecurity.cache.CacheException var39 = new org.jsecurity.cache.CacheException("org.jsecurity.config.ConfigurationException: dd\uFFFD", (java.lang.Throwable)var37);
    org.jsecurity.authc.SimpleAuthenticationInfo var41 = new org.jsecurity.authc.SimpleAuthenticationInfo((java.lang.Object)"org.jsecurity.config.ConfigurationException: dd\uFFFD", (java.lang.Object)var39, "a2b823b1e72eae2b727289df8a00a89df8a0bab6ad8a89c4c5c7a9b62a270000");
    org.jsecurity.subject.PrincipalCollection var42 = var41.getPrincipals();
    org.jsecurity.authc.AuthenticationInfo var43 = var11.afterAllAttempts((org.jsecurity.authc.AuthenticationToken)var26, (org.jsecurity.authc.AuthenticationInfo)var41);
    var10.setModularAuthenticationStrategy((org.jsecurity.authc.pam.ModularAuthenticationStrategy)var11);
    org.jsecurity.subject.RememberMeManager var45 = var10.getRememberMeManager();
    org.jsecurity.authc.pam.ModularRealmAuthenticator var46 = new org.jsecurity.authc.pam.ModularRealmAuthenticator();
    var10.setAuthenticator((org.jsecurity.authc.Authenticator)var46);
    var1.put((java.lang.Object)var2, (java.lang.Object)var46);
    org.jsecurity.session.mgt.ImmutableProxiedSession var49 = new org.jsecurity.session.mgt.ImmutableProxiedSession((org.jsecurity.session.Session)var2);
    var2.stop();
    java.util.Date var51 = var2.getStopTimestamp();
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var9);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var14);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var20 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var21);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var25);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var32 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var33);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var42);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var43);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var45);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var51);

  }

  public void test356() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest6.test356");


    org.jsecurity.session.UnknownSessionException var2 = new org.jsecurity.session.UnknownSessionException("org.jsecurity.config.ConfigurationException: dd\uFFFD");
    org.jsecurity.authz.SimpleAuthorizingAccount var3 = new org.jsecurity.authz.SimpleAuthorizingAccount();
    org.jsecurity.authz.SimpleAuthorizationInfo var4 = new org.jsecurity.authz.SimpleAuthorizationInfo();
    var4.addRole("a2b823b1e72eae2b727289df8a00a89df8a0bab6ad8a89c4c5c7a9b62a270000");
    org.jsecurity.authz.SimpleAuthorizationInfo var7 = new org.jsecurity.authz.SimpleAuthorizationInfo();
    var7.addRole("a2b823b1e72eae2b727289df8a00a89df8a0bab6ad8a89c4c5c7a9b62a270000");
    org.jsecurity.session.UnknownSessionException var14 = new org.jsecurity.session.UnknownSessionException("dd\uFFFD", (java.io.Serializable)100.0f);
    org.jsecurity.subject.SubjectException var15 = new org.jsecurity.subject.SubjectException("dd\uFFFD", (java.lang.Throwable)var14);
    org.jsecurity.io.SerializationException var16 = new org.jsecurity.io.SerializationException("", (java.lang.Throwable)var15);
    java.lang.Throwable[] var17 = var15.getSuppressed();
    java.util.Set var18 = org.jsecurity.util.CollectionUtils.asSet((java.lang.Object[])var17);
    var7.addRoles((java.util.Collection)var18);
    var4.setObjectPermissions(var18);
    var3.setSimpleRoles(var18);
    boolean var22 = var3.isCredentialsExpired();
    org.jsecurity.session.UnknownSessionException var23 = new org.jsecurity.session.UnknownSessionException("5dd0c65d-1422-49c2-becb-9e8dca619ab3", (java.lang.Throwable)var2, (java.io.Serializable)var3);
    org.jsecurity.authc.ExpiredCredentialsException var24 = new org.jsecurity.authc.ExpiredCredentialsException((java.lang.Throwable)var2);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var17);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var18);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var22 == false);

  }

  public void test357() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest6.test357");


    org.jsecurity.authc.ConcurrentAccessException var2 = new org.jsecurity.authc.ConcurrentAccessException("");
    org.jsecurity.authc.pam.UnsupportedTokenException var3 = new org.jsecurity.authc.pam.UnsupportedTokenException();
    var2.addSuppressed((java.lang.Throwable)var3);
    org.jsecurity.authc.DisabledAccountException var5 = new org.jsecurity.authc.DisabledAccountException("75c873c8-19df-476a-b82e-72a1eddf7e4b", (java.lang.Throwable)var3);

  }

  public void test358() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest6.test358");


    org.jsecurity.realm.jndi.JndiRealmFactory var0 = new org.jsecurity.realm.jndi.JndiRealmFactory();
    java.io.InputStream var2 = org.jsecurity.util.ClassUtils.getResourceAsStream("");
    java.lang.Object[] var3 = new java.lang.Object[] { var2};
    java.util.List var4 = org.jsecurity.util.CollectionUtils.asList(var3);
    var0.setJndiNames((java.util.Collection)var4);
    boolean var6 = var0.isResourceRef();
    java.util.Properties var7 = var0.getJndiEnvironment();
    var0.setJndiNames("org.jsecurity.realm.text.TextConfigurationRealm_3155");
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var2);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var3);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var4);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var6 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var7);

  }

  public void test359() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest6.test359");


    java.lang.String[] var4 = org.jsecurity.util.StringUtils.split("de74753d-5858-4bf4-895a-379abad30b6d", '4', ' ', '4');
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var4);

  }

  public void test360() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest6.test360");


    org.jsecurity.realm.text.TextConfigurationRealm var0 = new org.jsecurity.realm.text.TextConfigurationRealm();
    java.io.InputStream var2 = org.jsecurity.util.ClassUtils.getResourceAsStream("");
    java.lang.Object[] var3 = new java.lang.Object[] { var2};
    java.util.List var4 = org.jsecurity.util.CollectionUtils.asList(var3);
    org.jsecurity.authc.pam.ModularRealmAuthenticator var5 = new org.jsecurity.authc.pam.ModularRealmAuthenticator(var4);
    org.jsecurity.subject.SimplePrincipalCollection var7 = new org.jsecurity.subject.SimplePrincipalCollection((java.util.Collection)var4, "org.jsecurity.authz.UnauthorizedException: org.jsecurity.session.ExpiredSessionException: ");
    org.jsecurity.session.UnknownSessionException var12 = new org.jsecurity.session.UnknownSessionException("dd\uFFFD", (java.io.Serializable)100.0f);
    org.jsecurity.session.SessionException var14 = new org.jsecurity.session.SessionException("dd\uFFFD", (java.lang.Throwable)var12, (java.io.Serializable)0);
    org.jsecurity.session.SessionException var15 = new org.jsecurity.session.SessionException("dd\uFFFD", (java.lang.Throwable)var12);
    var7.add((java.lang.Object)var15, "org.jsecurity.config.ConfigurationException: dd\uFFFD");
    var0.onLogout((org.jsecurity.subject.PrincipalCollection)var7);
    java.util.Set var20 = org.jsecurity.util.PermissionUtils.toPermissionStrings("org.jsecurity.config.ConfigurationException: dd\uFFFD");
    org.jsecurity.authz.SimpleAuthorizationInfo var21 = new org.jsecurity.authz.SimpleAuthorizationInfo(var20);
    org.jsecurity.authz.SimpleAuthorizingAccount var22 = new org.jsecurity.authz.SimpleAuthorizingAccount((org.jsecurity.subject.PrincipalCollection)var7, (java.lang.Object)var20);
    org.jsecurity.authz.SimpleRole var24 = var22.getRole("org.jsecurity.subject.SubjectException: dd\uFFFD");
    org.jsecurity.codec.CodecException var27 = new org.jsecurity.codec.CodecException("dd\uFFFD");
    org.jsecurity.authc.ConcurrentAccessException var28 = new org.jsecurity.authc.ConcurrentAccessException("org.jsecurity.authz.UnauthorizedException: org.jsecurity.session.ExpiredSessionException: ", (java.lang.Throwable)var27);
    org.jsecurity.subject.SimplePrincipalCollection var30 = new org.jsecurity.subject.SimplePrincipalCollection((java.lang.Object)var27, "");
    java.io.InputStream var32 = org.jsecurity.util.ClassUtils.getResourceAsStream("");
    java.lang.Object[] var33 = new java.lang.Object[] { var32};
    java.util.List var34 = org.jsecurity.util.CollectionUtils.asList(var33);
    org.jsecurity.authc.pam.ModularRealmAuthenticator var35 = new org.jsecurity.authc.pam.ModularRealmAuthenticator(var34);
    org.jsecurity.authc.pam.AllSuccessfulModularAuthenticationStrategy var36 = new org.jsecurity.authc.pam.AllSuccessfulModularAuthenticationStrategy();
    var35.setModularAuthenticationStrategy((org.jsecurity.authc.pam.ModularAuthenticationStrategy)var36);
    org.jsecurity.authz.SimpleAuthorizationInfo var38 = new org.jsecurity.authz.SimpleAuthorizationInfo();
    var38.addStringPermission("hi!");
    java.io.InputStream var42 = org.jsecurity.util.ClassUtils.getResourceAsStream("");
    java.lang.Object[] var43 = new java.lang.Object[] { var42};
    java.util.List var44 = org.jsecurity.util.CollectionUtils.asList(var43);
    var38.addRoles((java.util.Collection)var44);
    var35.setAuthenticationListeners((java.util.Collection)var44);
    org.jsecurity.realm.activedirectory.ActiveDirectoryRealm var47 = new org.jsecurity.realm.activedirectory.ActiveDirectoryRealm();
    var47.setPrincipalSuffix("");
    var35.setRealm((org.jsecurity.realm.Realm)var47);
    org.jsecurity.authc.pam.FirstSuccessfulAuthenticationStrategy var51 = new org.jsecurity.authc.pam.FirstSuccessfulAuthenticationStrategy();
    org.jsecurity.authz.UnauthorizedException var53 = new org.jsecurity.authz.UnauthorizedException("org.jsecurity.config.ConfigurationException: dd\uFFFD");
    java.lang.Throwable[] var54 = var53.getSuppressed();
    java.util.List var55 = org.jsecurity.util.CollectionUtils.asList((java.lang.Object[])var54);
    org.jsecurity.authc.UsernamePasswordToken var56 = new org.jsecurity.authc.UsernamePasswordToken();
    java.lang.String var57 = var56.getUsername();
    java.net.InetAddress var58 = var56.getInetAddress();
    org.jsecurity.authc.AuthenticationInfo var59 = var51.beforeAllAttempts((java.util.Collection)var55, (org.jsecurity.authc.AuthenticationToken)var56);
    var35.setModularAuthenticationStrategy((org.jsecurity.authc.pam.ModularAuthenticationStrategy)var51);
    org.jsecurity.authc.SimpleAccount var61 = new org.jsecurity.authc.SimpleAccount((org.jsecurity.subject.PrincipalCollection)var30, (java.lang.Object)var35);
    java.util.Collection var62 = var61.getObjectPermissions();
    java.util.Collection var63 = var61.getObjectPermissions();
    var22.merge((org.jsecurity.authc.AuthenticationInfo)var61);
    org.jsecurity.subject.PrincipalCollection var65 = var61.getPrincipals();
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var2);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var3);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var4);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var20);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var24);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var32);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var33);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var34);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var42);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var43);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var44);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var54);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var55);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var57);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var58);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var59);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var62);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var63);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var65);

  }

  public void test361() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest6.test361");


    org.jsecurity.session.mgt.quartz.QuartzSessionValidationScheduler var0 = new org.jsecurity.session.mgt.quartz.QuartzSessionValidationScheduler();
    var0.disableSessionValidation();
    var0.enableSessionValidation();
    var0.enableSessionValidation();
    var0.disableSessionValidation();
    org.jsecurity.session.mgt.DefaultSessionManager var5 = new org.jsecurity.session.mgt.DefaultSessionManager();
    org.jsecurity.session.mgt.SessionValidationScheduler var6 = var5.getSessionValidationScheduler();
    long var7 = var5.getGlobalSessionTimeout();
    org.jsecurity.authz.SimpleAuthorizingAccount var8 = new org.jsecurity.authz.SimpleAuthorizingAccount();
    org.jsecurity.authz.SimpleAuthorizationInfo var9 = new org.jsecurity.authz.SimpleAuthorizationInfo();
    var9.addRole("a2b823b1e72eae2b727289df8a00a89df8a0bab6ad8a89c4c5c7a9b62a270000");
    org.jsecurity.authz.SimpleAuthorizationInfo var12 = new org.jsecurity.authz.SimpleAuthorizationInfo();
    var12.addRole("a2b823b1e72eae2b727289df8a00a89df8a0bab6ad8a89c4c5c7a9b62a270000");
    org.jsecurity.session.UnknownSessionException var19 = new org.jsecurity.session.UnknownSessionException("dd\uFFFD", (java.io.Serializable)100.0f);
    org.jsecurity.subject.SubjectException var20 = new org.jsecurity.subject.SubjectException("dd\uFFFD", (java.lang.Throwable)var19);
    org.jsecurity.io.SerializationException var21 = new org.jsecurity.io.SerializationException("", (java.lang.Throwable)var20);
    java.lang.Throwable[] var22 = var20.getSuppressed();
    java.util.Set var23 = org.jsecurity.util.CollectionUtils.asSet((java.lang.Object[])var22);
    var12.addRoles((java.util.Collection)var23);
    var9.setObjectPermissions(var23);
    var8.setSimpleRoles(var23);
    java.util.Set var27 = var8.getPermissions();
    org.jsecurity.authz.SimpleAuthorizationInfo var28 = new org.jsecurity.authz.SimpleAuthorizationInfo();
    var28.addRole("a2b823b1e72eae2b727289df8a00a89df8a0bab6ad8a89c4c5c7a9b62a270000");
    org.jsecurity.authz.SimpleAuthorizationInfo var31 = new org.jsecurity.authz.SimpleAuthorizationInfo();
    var31.addRole("a2b823b1e72eae2b727289df8a00a89df8a0bab6ad8a89c4c5c7a9b62a270000");
    org.jsecurity.session.UnknownSessionException var38 = new org.jsecurity.session.UnknownSessionException("dd\uFFFD", (java.io.Serializable)100.0f);
    org.jsecurity.subject.SubjectException var39 = new org.jsecurity.subject.SubjectException("dd\uFFFD", (java.lang.Throwable)var38);
    org.jsecurity.io.SerializationException var40 = new org.jsecurity.io.SerializationException("", (java.lang.Throwable)var39);
    java.lang.Throwable[] var41 = var39.getSuppressed();
    java.util.Set var42 = org.jsecurity.util.CollectionUtils.asSet((java.lang.Object[])var41);
    var31.addRoles((java.util.Collection)var42);
    var28.setObjectPermissions(var42);
    var8.checkRoles((java.util.Collection)var42);
    org.jsecurity.realm.text.PropertiesRealm var46 = new org.jsecurity.realm.text.PropertiesRealm();
    org.jsecurity.realm.activedirectory.ActiveDirectoryRealm var47 = new org.jsecurity.realm.activedirectory.ActiveDirectoryRealm();
    org.jsecurity.authc.credential.Sha256CredentialsMatcher var48 = new org.jsecurity.authc.credential.Sha256CredentialsMatcher();
    var47.setCredentialsMatcher((org.jsecurity.authc.credential.CredentialsMatcher)var48);
    java.lang.String var50 = var47.getAuthorizationCacheName();
    var47.setPrincipalSuffix("org.jsecurity.config.ConfigurationException: dd\uFFFD");
    org.jsecurity.authz.permission.PermissionResolver var53 = var47.getPermissionResolver();
    var46.setPermissionResolver(var53);
    java.util.Set var55 = org.jsecurity.util.PermissionUtils.resolvePermissions((java.util.Collection)var42, var53);
    var5.setSessionListeners((java.util.Collection)var42);
    org.jsecurity.session.mgt.eis.MemorySessionDAO var57 = new org.jsecurity.session.mgt.eis.MemorySessionDAO();
    org.jsecurity.cache.Cache var58 = var57.getActiveSessionsCache();
    var57.setActiveSessionsCacheName("dd\uFFFD");
    java.util.Collection var61 = var57.getActiveSessions();
    java.lang.String var62 = var57.getActiveSessionsCacheName();
    org.jsecurity.session.mgt.SimpleSession var63 = new org.jsecurity.session.mgt.SimpleSession();
    var63.touch();
    var63.validate();
    java.io.Serializable var66 = var57.create((org.jsecurity.session.Session)var63);
    var5.setSessionDAO((org.jsecurity.session.mgt.eis.SessionDAO)var57);
    var0.setSessionManager((org.jsecurity.session.mgt.ValidatingSessionManager)var5);
    long var69 = var5.getGlobalSessionTimeout();
    var5.setSessionValidationInterval(0L);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var6);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var7 == 1800000L);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var22);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var23);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var27);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var41);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var42);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var50);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var53);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var55);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var58);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var61);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var62 + "' != '" + "dd\uFFFD"+ "'", var62.equals("dd\uFFFD"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var66 + "' != '" + "1ec49e18-2cd4-4b9c-95b5-74e607267cfb"+ "'", var66.equals("1ec49e18-2cd4-4b9c-95b5-74e607267cfb"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var69 == 1800000L);

  }

  public void test362() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest6.test362");


    org.jsecurity.session.UnknownSessionException var2 = new org.jsecurity.session.UnknownSessionException("org.jsecurity.config.ConfigurationException: dd\uFFFD");
    org.jsecurity.authc.IncorrectCredentialsException var3 = new org.jsecurity.authc.IncorrectCredentialsException("10f5b491-38ac-4c02-8085-950abb026a06", (java.lang.Throwable)var2);

  }

  public void test363() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest6.test363");


    org.jsecurity.authc.credential.Sha384CredentialsMatcher var0 = new org.jsecurity.authc.credential.Sha384CredentialsMatcher();
    var0.setStoredCredentialsHexEncoded(true);
    var0.setStoredCredentialsHexEncoded(false);

  }

  public void test364() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest6.test364");


    org.jsecurity.session.mgt.eis.MemorySessionDAO var0 = new org.jsecurity.session.mgt.eis.MemorySessionDAO();
    org.jsecurity.cache.Cache var1 = var0.getActiveSessionsCache();
    var0.setActiveSessionsCacheName("dd\uFFFD");
    java.util.Collection var4 = var0.getActiveSessions();
    java.lang.String var5 = var0.getActiveSessionsCacheName();
    org.jsecurity.session.mgt.SimpleSession var6 = new org.jsecurity.session.mgt.SimpleSession();
    var6.touch();
    var6.validate();
    java.io.Serializable var9 = var0.create((org.jsecurity.session.Session)var6);
    java.lang.String var10 = var0.getActiveSessionsCacheName();
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var1);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var4);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var5 + "' != '" + "dd\uFFFD"+ "'", var5.equals("dd\uFFFD"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var9 + "' != '" + "6a1caa1f-f693-4c0d-889f-9840799fb4b0"+ "'", var9.equals("6a1caa1f-f693-4c0d-889f-9840799fb4b0"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var10 + "' != '" + "dd\uFFFD"+ "'", var10.equals("dd\uFFFD"));

  }

  public void test365() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest6.test365");


    org.jsecurity.mgt.DefaultSecurityManager var0 = new org.jsecurity.mgt.DefaultSecurityManager();
    java.io.InputStream var2 = org.jsecurity.util.ClassUtils.getResourceAsStream("");
    java.lang.Object[] var3 = new java.lang.Object[] { var2};
    java.util.List var4 = org.jsecurity.util.CollectionUtils.asList(var3);
    org.jsecurity.authc.pam.ModularRealmAuthenticator var5 = new org.jsecurity.authc.pam.ModularRealmAuthenticator(var4);
    org.jsecurity.authc.pam.AllSuccessfulModularAuthenticationStrategy var6 = new org.jsecurity.authc.pam.AllSuccessfulModularAuthenticationStrategy();
    var5.setModularAuthenticationStrategy((org.jsecurity.authc.pam.ModularAuthenticationStrategy)var6);
    org.jsecurity.authz.SimpleAuthorizationInfo var8 = new org.jsecurity.authz.SimpleAuthorizationInfo();
    var8.addStringPermission("hi!");
    java.io.InputStream var12 = org.jsecurity.util.ClassUtils.getResourceAsStream("");
    java.lang.Object[] var13 = new java.lang.Object[] { var12};
    java.util.List var14 = org.jsecurity.util.CollectionUtils.asList(var13);
    var8.addRoles((java.util.Collection)var14);
    var5.setAuthenticationListeners((java.util.Collection)var14);
    var0.setSessionListeners((java.util.Collection)var14);
    java.util.Collection var18 = var0.getRealms();
    org.jsecurity.codec.CodecException var21 = new org.jsecurity.codec.CodecException("dd\uFFFD");
    org.jsecurity.authc.ConcurrentAccessException var22 = new org.jsecurity.authc.ConcurrentAccessException("org.jsecurity.authz.UnauthorizedException: org.jsecurity.session.ExpiredSessionException: ", (java.lang.Throwable)var21);
    org.jsecurity.subject.SimplePrincipalCollection var24 = new org.jsecurity.subject.SimplePrincipalCollection((java.lang.Object)var21, "");
    java.io.InputStream var26 = org.jsecurity.util.ClassUtils.getResourceAsStream("");
    java.lang.Object[] var27 = new java.lang.Object[] { var26};
    java.util.List var28 = org.jsecurity.util.CollectionUtils.asList(var27);
    org.jsecurity.authc.pam.ModularRealmAuthenticator var29 = new org.jsecurity.authc.pam.ModularRealmAuthenticator(var28);
    var24.addAll((java.util.Collection)var28, "\u0000\u0000");
    org.jsecurity.authz.UnauthorizedException var33 = new org.jsecurity.authz.UnauthorizedException();
    org.jsecurity.session.SessionException var35 = new org.jsecurity.session.SessionException("", (java.lang.Throwable)var33, (java.io.Serializable)"org.jsecurity.config.ConfigurationException: dd\uFFFD");
    org.jsecurity.crypto.hash.Sha1Hash var36 = new org.jsecurity.crypto.hash.Sha1Hash((java.lang.Object)"");
    org.jsecurity.session.UnknownSessionException var41 = new org.jsecurity.session.UnknownSessionException("dd\uFFFD", (java.io.Serializable)100.0f);
    org.jsecurity.subject.SubjectException var42 = new org.jsecurity.subject.SubjectException("dd\uFFFD", (java.lang.Throwable)var41);
    org.jsecurity.io.SerializationException var43 = new org.jsecurity.io.SerializationException("", (java.lang.Throwable)var42);
    java.lang.Throwable[] var44 = var42.getSuppressed();
    java.util.Set var45 = org.jsecurity.util.CollectionUtils.asSet((java.lang.Object[])var44);
    org.jsecurity.authz.SimpleAuthorizationInfo var47 = new org.jsecurity.authz.SimpleAuthorizationInfo();
    org.jsecurity.session.UnknownSessionException var52 = new org.jsecurity.session.UnknownSessionException("dd\uFFFD", (java.io.Serializable)100.0f);
    org.jsecurity.subject.SubjectException var53 = new org.jsecurity.subject.SubjectException("dd\uFFFD", (java.lang.Throwable)var52);
    org.jsecurity.io.SerializationException var54 = new org.jsecurity.io.SerializationException("", (java.lang.Throwable)var53);
    java.lang.Throwable[] var55 = var53.getSuppressed();
    java.util.Set var56 = org.jsecurity.util.CollectionUtils.asSet((java.lang.Object[])var55);
    var47.setStringPermissions(var56);
    java.util.Set var58 = var47.getRoles();
    org.jsecurity.authz.SimpleAuthorizationInfo var59 = new org.jsecurity.authz.SimpleAuthorizationInfo();
    var59.addRole("a2b823b1e72eae2b727289df8a00a89df8a0bab6ad8a89c4c5c7a9b62a270000");
    org.jsecurity.session.UnknownSessionException var66 = new org.jsecurity.session.UnknownSessionException("dd\uFFFD", (java.io.Serializable)100.0f);
    org.jsecurity.subject.SubjectException var67 = new org.jsecurity.subject.SubjectException("dd\uFFFD", (java.lang.Throwable)var66);
    org.jsecurity.io.SerializationException var68 = new org.jsecurity.io.SerializationException("", (java.lang.Throwable)var67);
    java.lang.Throwable[] var69 = var67.getSuppressed();
    java.util.Set var70 = org.jsecurity.util.CollectionUtils.asSet((java.lang.Object[])var69);
    var59.addRoles((java.util.Collection)var70);
    var47.setRoles(var70);
    org.jsecurity.authz.SimpleRole var73 = new org.jsecurity.authz.SimpleRole("org.jsecurity.authz.UnauthorizedException: org.jsecurity.session.ExpiredSessionException: ", var70);
    org.jsecurity.authc.SimpleAccount var74 = new org.jsecurity.authc.SimpleAccount((org.jsecurity.subject.PrincipalCollection)var24, (java.lang.Object)"", var45, var70);
    org.jsecurity.authz.SimpleAuthorizationInfo var75 = new org.jsecurity.authz.SimpleAuthorizationInfo();
    var75.addStringPermission("hi!");
    org.jsecurity.authz.SimpleAuthorizationInfo var79 = new org.jsecurity.authz.SimpleAuthorizationInfo();
    org.jsecurity.session.UnknownSessionException var84 = new org.jsecurity.session.UnknownSessionException("dd\uFFFD", (java.io.Serializable)100.0f);
    org.jsecurity.subject.SubjectException var85 = new org.jsecurity.subject.SubjectException("dd\uFFFD", (java.lang.Throwable)var84);
    org.jsecurity.io.SerializationException var86 = new org.jsecurity.io.SerializationException("", (java.lang.Throwable)var85);
    java.lang.Throwable[] var87 = var85.getSuppressed();
    java.util.Set var88 = org.jsecurity.util.CollectionUtils.asSet((java.lang.Object[])var87);
    var79.setStringPermissions(var88);
    org.jsecurity.authz.SimpleRole var90 = new org.jsecurity.authz.SimpleRole("\u0000\u0000", var88);
    var75.setRoles(var88);
    boolean var92 = var0.isPermittedAll((org.jsecurity.subject.PrincipalCollection)var24, (java.util.Collection)var88);
    org.jsecurity.authz.aop.GuestAnnotationMethodInterceptor var93 = new org.jsecurity.authz.aop.GuestAnnotationMethodInterceptor();
    org.jsecurity.aop.AnnotationHandler var94 = var93.getHandler();
    var24.add((java.lang.Object)var94, "3d3a8192-1e92-477d-8aa6-fc837cbc6148");
    java.lang.Class var97 = var94.getAnnotationClass();
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var2);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var3);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var4);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var12);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var13);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var14);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var18);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var26);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var27);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var28);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var44);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var45);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var55);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var56);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var58);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var69);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var70);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var87);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var88);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var92 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var94);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var97);

  }

  public void test366() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest6.test366");


    org.jsecurity.session.mgt.DefaultSessionManager var0 = new org.jsecurity.session.mgt.DefaultSessionManager();
    org.jsecurity.session.mgt.eis.MemorySessionDAO var1 = new org.jsecurity.session.mgt.eis.MemorySessionDAO();
    org.jsecurity.cache.Cache var2 = var1.getActiveSessionsCache();
    org.jsecurity.cache.CacheManager var3 = var1.getCacheManager();
    org.jsecurity.cache.HashtableCacheManager var4 = new org.jsecurity.cache.HashtableCacheManager();
    org.jsecurity.cache.Cache var6 = var4.getCache("\u0000\u0000");
    var1.setActiveSessionsCache(var6);
    java.io.InputStream var9 = org.jsecurity.util.ClassUtils.getResourceAsStream("");
    java.lang.Object[] var10 = new java.lang.Object[] { var9};
    java.util.List var11 = org.jsecurity.util.CollectionUtils.asList(var10);
    org.jsecurity.authc.pam.ModularRealmAuthenticator var12 = new org.jsecurity.authc.pam.ModularRealmAuthenticator(var11);
    org.jsecurity.authc.pam.AllSuccessfulModularAuthenticationStrategy var13 = new org.jsecurity.authc.pam.AllSuccessfulModularAuthenticationStrategy();
    var12.setModularAuthenticationStrategy((org.jsecurity.authc.pam.ModularAuthenticationStrategy)var13);
    org.jsecurity.authz.SimpleAuthorizationInfo var15 = new org.jsecurity.authz.SimpleAuthorizationInfo();
    var15.addStringPermission("hi!");
    java.io.InputStream var19 = org.jsecurity.util.ClassUtils.getResourceAsStream("");
    java.lang.Object[] var20 = new java.lang.Object[] { var19};
    java.util.List var21 = org.jsecurity.util.CollectionUtils.asList(var20);
    var15.addRoles((java.util.Collection)var21);
    var12.setAuthenticationListeners((java.util.Collection)var21);
    org.jsecurity.realm.activedirectory.ActiveDirectoryRealm var24 = new org.jsecurity.realm.activedirectory.ActiveDirectoryRealm();
    var24.setPrincipalSuffix("");
    var12.setRealm((org.jsecurity.realm.Realm)var24);
    org.jsecurity.cache.HashtableCacheManager var28 = new org.jsecurity.cache.HashtableCacheManager();
    org.jsecurity.cache.Cache var30 = var28.getCache("\u0000\u0000");
    var24.setAuthorizationCache(var30);
    var1.setActiveSessionsCache(var30);
    org.jsecurity.session.mgt.SimpleSession var33 = new org.jsecurity.session.mgt.SimpleSession();
    java.io.Serializable var34 = var1.create((org.jsecurity.session.Session)var33);
    var0.setSessionDAO((org.jsecurity.session.mgt.eis.SessionDAO)var1);
    var0.setSessionValidationInterval(100L);
    var0.destroy();
    var0.setGlobalSessionTimeout(0);
    org.jsecurity.codec.CodecException var43 = new org.jsecurity.codec.CodecException("dd\uFFFD");
    org.jsecurity.authc.ConcurrentAccessException var44 = new org.jsecurity.authc.ConcurrentAccessException("org.jsecurity.authz.UnauthorizedException: org.jsecurity.session.ExpiredSessionException: ", (java.lang.Throwable)var43);
    org.jsecurity.subject.SimplePrincipalCollection var46 = new org.jsecurity.subject.SimplePrincipalCollection((java.lang.Object)var43, "");
    java.io.InputStream var48 = org.jsecurity.util.ClassUtils.getResourceAsStream("");
    java.lang.Object[] var49 = new java.lang.Object[] { var48};
    java.util.List var50 = org.jsecurity.util.CollectionUtils.asList(var49);
    org.jsecurity.authc.pam.ModularRealmAuthenticator var51 = new org.jsecurity.authc.pam.ModularRealmAuthenticator(var50);
    var46.addAll((java.util.Collection)var50, "\u0000\u0000");
    java.io.InputStream var55 = org.jsecurity.util.ClassUtils.getResourceAsStream("");
    java.lang.Object[] var56 = new java.lang.Object[] { var55};
    java.util.List var57 = org.jsecurity.util.CollectionUtils.asList(var56);
    org.jsecurity.authc.pam.ModularRealmAuthenticator var58 = new org.jsecurity.authc.pam.ModularRealmAuthenticator(var57);
    var46.addAll((java.util.Collection)var57, "\u0000\u0000");
    org.jsecurity.authz.aop.GuestAnnotationHandler var61 = new org.jsecurity.authz.aop.GuestAnnotationHandler();
    java.lang.Class var62 = var61.getAnnotationClass();
    java.util.Collection var63 = org.jsecurity.util.CollectionUtils.emptyCollection(var62);
    java.lang.Object var64 = var46.oneByType(var62);
    org.jsecurity.session.UnknownSessionException var71 = new org.jsecurity.session.UnknownSessionException("dd\uFFFD", (java.io.Serializable)100.0f);
    org.jsecurity.config.ConfigurationException var72 = new org.jsecurity.config.ConfigurationException("dd\uFFFD", (java.lang.Throwable)var71);
    org.jsecurity.session.ExpiredSessionException var74 = new org.jsecurity.session.ExpiredSessionException("", (java.lang.Throwable)var72, (java.io.Serializable)true);
    org.jsecurity.authc.pam.UnsupportedTokenException var75 = new org.jsecurity.authc.pam.UnsupportedTokenException((java.lang.Throwable)var74);
    org.jsecurity.authc.AccountException var76 = new org.jsecurity.authc.AccountException((java.lang.Throwable)var75);
    org.jsecurity.authz.UnauthorizedException var77 = new org.jsecurity.authz.UnauthorizedException("a2b823b1e72eae2b727289df8a00a89df8a0bab6ad8a89c4c5c7a9b62a270000", (java.lang.Throwable)var76);
    org.jsecurity.session.InvalidSessionException var78 = new org.jsecurity.session.InvalidSessionException((java.lang.Throwable)var76);
    org.jsecurity.config.ConfigurationException var79 = new org.jsecurity.config.ConfigurationException("\u0000\u0000", (java.lang.Throwable)var76);
    org.jsecurity.authc.LockedAccountException var80 = new org.jsecurity.authc.LockedAccountException((java.lang.Throwable)var76);
    org.jsecurity.io.ResourceException var83 = new org.jsecurity.io.ResourceException("d8d550ee-3a8c-48f0-8061-1d82c827f505");
    org.jsecurity.subject.SubjectException var84 = new org.jsecurity.subject.SubjectException("ca73d1a4-706e-42e7-980f-896d3b153de8", (java.lang.Throwable)var83);
    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      var0.setAttribute((java.io.Serializable)var46, (java.lang.Object)var80, (java.lang.Object)"ca73d1a4-706e-42e7-980f-896d3b153de8");
      fail("Expected exception of type org.jsecurity.session.UnknownSessionException");
    } catch (org.jsecurity.session.UnknownSessionException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var2);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var3);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var6);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var9);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var10);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var11);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var19);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var20);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var21);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var30);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var34 + "' != '" + "ea08914c-1f69-4c3d-85cc-96f462a47044"+ "'", var34.equals("ea08914c-1f69-4c3d-85cc-96f462a47044"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var48);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var49);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var50);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var55);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var56);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var57);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var62);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var63);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var64);

  }

  public void test367() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest6.test367");


    org.jsecurity.crypto.hash.Sha384Hash var1 = org.jsecurity.crypto.hash.Sha384Hash.fromBase64String("64f92a6a-b899-4b53-a1ff-969d49769088");
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var1);

  }

  public void test368() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest6.test368");


    org.jsecurity.codec.CodecException var2 = new org.jsecurity.codec.CodecException("dd\uFFFD");
    org.jsecurity.authc.ConcurrentAccessException var3 = new org.jsecurity.authc.ConcurrentAccessException("org.jsecurity.authz.UnauthorizedException: org.jsecurity.session.ExpiredSessionException: ", (java.lang.Throwable)var2);
    org.jsecurity.subject.SimplePrincipalCollection var5 = new org.jsecurity.subject.SimplePrincipalCollection((java.lang.Object)var2, "");
    boolean var6 = var5.isEmpty();
    java.util.List var7 = var5.asList();
    org.jsecurity.authc.pam.ModularRealmAuthenticator var8 = new org.jsecurity.authc.pam.ModularRealmAuthenticator(var7);
    org.jsecurity.cache.HashtableCache var10 = new org.jsecurity.cache.HashtableCache("5dd0c65d-1422-49c2-becb-9e8dca619ab3");
    org.jsecurity.realm.text.TextConfigurationRealm var11 = new org.jsecurity.realm.text.TextConfigurationRealm();
    java.io.InputStream var13 = org.jsecurity.util.ClassUtils.getResourceAsStream("");
    java.lang.Object[] var14 = new java.lang.Object[] { var13};
    java.util.List var15 = org.jsecurity.util.CollectionUtils.asList(var14);
    org.jsecurity.authc.pam.ModularRealmAuthenticator var16 = new org.jsecurity.authc.pam.ModularRealmAuthenticator(var15);
    org.jsecurity.subject.SimplePrincipalCollection var18 = new org.jsecurity.subject.SimplePrincipalCollection((java.util.Collection)var15, "org.jsecurity.authz.UnauthorizedException: org.jsecurity.session.ExpiredSessionException: ");
    org.jsecurity.session.UnknownSessionException var23 = new org.jsecurity.session.UnknownSessionException("dd\uFFFD", (java.io.Serializable)100.0f);
    org.jsecurity.session.SessionException var25 = new org.jsecurity.session.SessionException("dd\uFFFD", (java.lang.Throwable)var23, (java.io.Serializable)0);
    org.jsecurity.session.SessionException var26 = new org.jsecurity.session.SessionException("dd\uFFFD", (java.lang.Throwable)var23);
    var18.add((java.lang.Object)var26, "org.jsecurity.config.ConfigurationException: dd\uFFFD");
    var11.onLogout((org.jsecurity.subject.PrincipalCollection)var18);
    org.jsecurity.cache.HashtableCacheManager var30 = new org.jsecurity.cache.HashtableCacheManager();
    org.jsecurity.cache.Cache var32 = var30.getCache("\u0000\u0000");
    var11.setAuthorizationCache(var32);
    org.jsecurity.authc.DisabledAccountException var36 = new org.jsecurity.authc.DisabledAccountException("org.jsecurity.authz.UnauthorizedException: org.jsecurity.session.ExpiredSessionException: ");
    org.jsecurity.session.UnknownSessionException var42 = new org.jsecurity.session.UnknownSessionException("dd\uFFFD", (java.io.Serializable)100.0f);
    org.jsecurity.subject.SubjectException var43 = new org.jsecurity.subject.SubjectException("dd\uFFFD", (java.lang.Throwable)var42);
    org.jsecurity.session.InvalidSessionException var44 = new org.jsecurity.session.InvalidSessionException("hi!", (java.lang.Throwable)var43);
    org.jsecurity.session.SessionException var45 = new org.jsecurity.session.SessionException("dd\uFFFD", (java.lang.Throwable)var43);
    org.jsecurity.session.SessionException var46 = new org.jsecurity.session.SessionException("hi!", (java.lang.Throwable)var36, (java.io.Serializable)var43);
    var10.put((java.lang.Object)var11, (java.lang.Object)var46);
    var8.setRealm((org.jsecurity.realm.Realm)var11);
    java.lang.String var49 = var11.getUserDefinitions();
    var11.addRole("e1f737f7969ef7773ae3d73d6dc69e77cdfaf3ce1be776bd");
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var6 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var7);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var13);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var14);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var15);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var32);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var49);

  }

  public void test369() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest6.test369");


    org.jsecurity.session.mgt.quartz.QuartzSessionValidationScheduler var0 = new org.jsecurity.session.mgt.quartz.QuartzSessionValidationScheduler();
    var0.disableSessionValidation();
    var0.enableSessionValidation();
    var0.enableSessionValidation();
    var0.setSessionValidationInterval((-1L));
    var0.disableSessionValidation();

  }

  public void test370() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest6.test370");


    org.jsecurity.subject.SubjectException var1 = new org.jsecurity.subject.SubjectException("896800bf-f105-4b17-b247-b6d3863d2ce8");

  }

  public void test371() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest6.test371");


    org.jsecurity.crypto.hash.Md2Hash var1 = org.jsecurity.crypto.hash.Md2Hash.fromBase64String("8f54ce0b-37d0-41a8-8bc2-023c3ee3f52a");
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var1);

  }

  public void test372() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest6.test372");


    org.jsecurity.util.UnknownClassException var1 = new org.jsecurity.util.UnknownClassException("fa31ead2-4645-4adc-9e08-d6f9bde3b707");

  }

  public void test373() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest6.test373");


    org.jsecurity.realm.activedirectory.ActiveDirectoryRealm var0 = new org.jsecurity.realm.activedirectory.ActiveDirectoryRealm();
    var0.init();
    var0.setSystemPassword("dd\uFFFD");
    org.jsecurity.authz.aop.GuestAnnotationHandler var4 = new org.jsecurity.authz.aop.GuestAnnotationHandler();
    java.lang.Class var5 = var4.getAnnotationClass();
    var0.setAuthenticationTokenClass(var5);
    org.jsecurity.mgt.DefaultSecurityManager var7 = new org.jsecurity.mgt.DefaultSecurityManager((org.jsecurity.realm.Realm)var0);
    org.jsecurity.cache.CacheManager var8 = var0.getCacheManager();
    org.jsecurity.realm.text.PropertiesRealm var9 = new org.jsecurity.realm.text.PropertiesRealm(var8);
    var9.setResourcePath("?\u0238\u0018@\uFFFD");
    java.lang.String var12 = var9.getAuthorizationCacheName();
    var9.addRole("HashtableCache [783ccd31-48a8-42dd-890f-df885a7baaff]");
    org.jsecurity.cache.Cache var15 = var9.getAuthorizationCache();
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var5);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var8);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var12 + "' != '" + "org.jsecurity.realm.text.PropertiesRealm-821-authorization"+ "'", var12.equals("org.jsecurity.realm.text.PropertiesRealm-821-authorization"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var15);

  }

  public void test374() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest6.test374");


    org.jsecurity.realm.activedirectory.ActiveDirectoryRealm var0 = new org.jsecurity.realm.activedirectory.ActiveDirectoryRealm();
    org.jsecurity.authc.credential.Sha384CredentialsMatcher var1 = new org.jsecurity.authc.credential.Sha384CredentialsMatcher();
    var0.setCredentialsMatcher((org.jsecurity.authc.credential.CredentialsMatcher)var1);
    var0.initAuthorizationCache();
    org.jsecurity.session.UnknownSessionException var8 = new org.jsecurity.session.UnknownSessionException("dd\uFFFD", (java.io.Serializable)100.0f);
    org.jsecurity.subject.SubjectException var9 = new org.jsecurity.subject.SubjectException("dd\uFFFD", (java.lang.Throwable)var8);
    org.jsecurity.io.SerializationException var10 = new org.jsecurity.io.SerializationException("", (java.lang.Throwable)var9);
    java.lang.Throwable[] var11 = var9.getSuppressed();
    java.lang.Throwable[] var12 = var9.getSuppressed();
    org.jsecurity.authz.SimpleAuthorizationInfo var15 = new org.jsecurity.authz.SimpleAuthorizationInfo();
    var15.addRole("a2b823b1e72eae2b727289df8a00a89df8a0bab6ad8a89c4c5c7a9b62a270000");
    org.jsecurity.session.UnknownSessionException var22 = new org.jsecurity.session.UnknownSessionException("dd\uFFFD", (java.io.Serializable)100.0f);
    org.jsecurity.subject.SubjectException var23 = new org.jsecurity.subject.SubjectException("dd\uFFFD", (java.lang.Throwable)var22);
    org.jsecurity.io.SerializationException var24 = new org.jsecurity.io.SerializationException("", (java.lang.Throwable)var23);
    java.lang.Throwable[] var25 = var23.getSuppressed();
    java.util.Set var26 = org.jsecurity.util.CollectionUtils.asSet((java.lang.Object[])var25);
    var15.addRoles((java.util.Collection)var26);
    java.io.InputStream var29 = org.jsecurity.util.ClassUtils.getResourceAsStream("");
    java.lang.Object[] var30 = new java.lang.Object[] { var29};
    java.util.List var31 = org.jsecurity.util.CollectionUtils.asList(var30);
    org.jsecurity.authc.pam.ModularRealmAuthenticator var32 = new org.jsecurity.authc.pam.ModularRealmAuthenticator(var31);
    org.jsecurity.subject.SimplePrincipalCollection var34 = new org.jsecurity.subject.SimplePrincipalCollection((java.util.Collection)var31, "org.jsecurity.authz.UnauthorizedException: org.jsecurity.session.ExpiredSessionException: ");
    org.jsecurity.session.UnknownSessionException var39 = new org.jsecurity.session.UnknownSessionException("dd\uFFFD", (java.io.Serializable)100.0f);
    org.jsecurity.session.SessionException var41 = new org.jsecurity.session.SessionException("dd\uFFFD", (java.lang.Throwable)var39, (java.io.Serializable)0);
    org.jsecurity.session.SessionException var42 = new org.jsecurity.session.SessionException("dd\uFFFD", (java.lang.Throwable)var39);
    var34.add((java.lang.Object)var42, "org.jsecurity.config.ConfigurationException: dd\uFFFD");
    java.util.Set var45 = var34.asSet();
    org.jsecurity.authz.SimpleAuthorizingAccount var46 = new org.jsecurity.authz.SimpleAuthorizingAccount((java.lang.Object)var12, (java.lang.Object)"\u0000\u0000\u0000", "\u0000\u0000\u0000", var26, var45);
    org.jsecurity.authz.SimpleRole var48 = var46.getRole("\u0000\u0000\u0000");
    java.util.Set var49 = var46.getPermissions();
    boolean var50 = var46.isLocked();
    java.io.InputStream var52 = org.jsecurity.util.ClassUtils.getResourceAsStream("");
    java.lang.Object[] var53 = new java.lang.Object[] { var52};
    java.util.List var54 = org.jsecurity.util.CollectionUtils.asList(var53);
    org.jsecurity.authc.pam.ModularRealmAuthenticator var55 = new org.jsecurity.authc.pam.ModularRealmAuthenticator(var54);
    org.jsecurity.subject.SimplePrincipalCollection var57 = new org.jsecurity.subject.SimplePrincipalCollection((java.util.Collection)var54, "org.jsecurity.authz.UnauthorizedException: org.jsecurity.session.ExpiredSessionException: ");
    java.util.Set var58 = var57.getRealmNames();
    var46.addStringPermissions((java.util.Collection)var58);
    org.jsecurity.subject.PrincipalCollection var60 = var46.getPrincipals();
    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      boolean var62 = var0.isPermitted(var60, "0310766d-27fe-4aa3-9ad6-3a25c0be6154");
      fail("Expected exception of type java.util.NoSuchElementException");
    } catch (java.util.NoSuchElementException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var11);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var12);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var25);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var26);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var29);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var30);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var31);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var45);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var48);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var49);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var50 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var52);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var53);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var54);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var58);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var60);

  }

  public void test375() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest6.test375");


    org.jsecurity.cache.ehcache.EhCacheManager var0 = new org.jsecurity.cache.ehcache.EhCacheManager();
    var0.init();
    var0.destroy();
    java.lang.String var3 = var0.getCacheManagerConfigFile();
    var0.destroy();
    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      org.jsecurity.cache.Cache var6 = var0.getCache("8f54ce0b-37d0-41a8-8bc2-023c3ee3f52a");
      fail("Expected exception of type java.lang.IllegalStateException");
    } catch (java.lang.IllegalStateException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var3 + "' != '" + "classpath:org/jsecurity/cache/ehcache/ehcache.xml"+ "'", var3.equals("classpath:org/jsecurity/cache/ehcache/ehcache.xml"));

  }

  public void test376() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest6.test376");


    org.jsecurity.authz.UnauthorizedException var2 = new org.jsecurity.authz.UnauthorizedException("org.jsecurity.config.ConfigurationException: dd\uFFFD");
    org.jsecurity.crypto.hash.Md2Hash var4 = org.jsecurity.crypto.hash.Md2Hash.fromBase64String("a2b823b1e72eae2b727289df8a00a89df8a0bab6ad8a89c4c5c7a9b62a270000");
    org.jsecurity.authc.credential.Md2CredentialsMatcher var5 = new org.jsecurity.authc.credential.Md2CredentialsMatcher();
    org.jsecurity.authz.SimpleAuthorizingAccount var7 = new org.jsecurity.authz.SimpleAuthorizingAccount((java.lang.Object)"a2b823b1e72eae2b727289df8a00a89df8a0bab6ad8a89c4c5c7a9b62a270000", (java.lang.Object)var5, "");
    org.jsecurity.session.UnknownSessionException var8 = new org.jsecurity.session.UnknownSessionException("org.jsecurity.config.ConfigurationException: dd\uFFFD", (java.lang.Throwable)var2, (java.io.Serializable)var7);
    org.jsecurity.session.ExpiredSessionException var9 = new org.jsecurity.session.ExpiredSessionException((java.io.Serializable)var7);
    java.util.Collection var10 = var7.getRoles();
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var4);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var10);

  }

  public void test377() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest6.test377");


    org.jsecurity.session.mgt.eis.MemorySessionDAO var0 = new org.jsecurity.session.mgt.eis.MemorySessionDAO();
    org.jsecurity.cache.Cache var1 = var0.getActiveSessionsCache();
    org.jsecurity.cache.CacheManager var2 = var0.getCacheManager();
    org.jsecurity.cache.HashtableCacheManager var3 = new org.jsecurity.cache.HashtableCacheManager();
    org.jsecurity.cache.Cache var5 = var3.getCache("\u0000\u0000");
    var0.setActiveSessionsCache(var5);
    java.io.InputStream var8 = org.jsecurity.util.ClassUtils.getResourceAsStream("");
    java.lang.Object[] var9 = new java.lang.Object[] { var8};
    java.util.List var10 = org.jsecurity.util.CollectionUtils.asList(var9);
    org.jsecurity.authc.pam.ModularRealmAuthenticator var11 = new org.jsecurity.authc.pam.ModularRealmAuthenticator(var10);
    org.jsecurity.authc.pam.AllSuccessfulModularAuthenticationStrategy var12 = new org.jsecurity.authc.pam.AllSuccessfulModularAuthenticationStrategy();
    var11.setModularAuthenticationStrategy((org.jsecurity.authc.pam.ModularAuthenticationStrategy)var12);
    org.jsecurity.authz.SimpleAuthorizationInfo var14 = new org.jsecurity.authz.SimpleAuthorizationInfo();
    var14.addStringPermission("hi!");
    java.io.InputStream var18 = org.jsecurity.util.ClassUtils.getResourceAsStream("");
    java.lang.Object[] var19 = new java.lang.Object[] { var18};
    java.util.List var20 = org.jsecurity.util.CollectionUtils.asList(var19);
    var14.addRoles((java.util.Collection)var20);
    var11.setAuthenticationListeners((java.util.Collection)var20);
    org.jsecurity.realm.activedirectory.ActiveDirectoryRealm var23 = new org.jsecurity.realm.activedirectory.ActiveDirectoryRealm();
    var23.setPrincipalSuffix("");
    var11.setRealm((org.jsecurity.realm.Realm)var23);
    org.jsecurity.cache.HashtableCacheManager var27 = new org.jsecurity.cache.HashtableCacheManager();
    org.jsecurity.cache.Cache var29 = var27.getCache("\u0000\u0000");
    var23.setAuthorizationCache(var29);
    var0.setActiveSessionsCache(var29);
    org.jsecurity.session.mgt.SimpleSession var32 = new org.jsecurity.session.mgt.SimpleSession();
    java.io.Serializable var33 = var0.create((org.jsecurity.session.Session)var32);
    java.io.Serializable var34 = var32.getId();
    java.util.Map var35 = var32.getAttributes();
    org.jsecurity.session.mgt.SimpleSession var36 = new org.jsecurity.session.mgt.SimpleSession();
    var36.setTimeout((-1L));
    org.jsecurity.session.mgt.SimpleSession var39 = new org.jsecurity.session.mgt.SimpleSession();
    java.util.Date var40 = var39.getLastAccessTime();
    var36.setLastAccessTime(var40);
    org.jsecurity.session.mgt.SimpleSession var42 = new org.jsecurity.session.mgt.SimpleSession();
    java.util.Date var43 = var42.getLastAccessTime();
    var36.setStopTimestamp(var43);
    var32.setLastAccessTime(var43);
    org.jsecurity.session.mgt.SimpleSession var46 = new org.jsecurity.session.mgt.SimpleSession();
    var46.setTimeout((-1L));
    org.jsecurity.session.mgt.SimpleSession var49 = new org.jsecurity.session.mgt.SimpleSession();
    java.util.Date var50 = var49.getLastAccessTime();
    var46.setLastAccessTime(var50);
    org.jsecurity.session.UnknownSessionException var56 = new org.jsecurity.session.UnknownSessionException("dd\uFFFD", (java.io.Serializable)100.0f);
    org.jsecurity.subject.SubjectException var57 = new org.jsecurity.subject.SubjectException("dd\uFFFD", (java.lang.Throwable)var56);
    org.jsecurity.io.SerializationException var58 = new org.jsecurity.io.SerializationException("", (java.lang.Throwable)var57);
    java.lang.Throwable[] var59 = var57.getSuppressed();
    java.lang.Throwable[] var60 = var57.getSuppressed();
    org.jsecurity.authz.SimpleAuthorizationInfo var63 = new org.jsecurity.authz.SimpleAuthorizationInfo();
    var63.addRole("a2b823b1e72eae2b727289df8a00a89df8a0bab6ad8a89c4c5c7a9b62a270000");
    org.jsecurity.session.UnknownSessionException var70 = new org.jsecurity.session.UnknownSessionException("dd\uFFFD", (java.io.Serializable)100.0f);
    org.jsecurity.subject.SubjectException var71 = new org.jsecurity.subject.SubjectException("dd\uFFFD", (java.lang.Throwable)var70);
    org.jsecurity.io.SerializationException var72 = new org.jsecurity.io.SerializationException("", (java.lang.Throwable)var71);
    java.lang.Throwable[] var73 = var71.getSuppressed();
    java.util.Set var74 = org.jsecurity.util.CollectionUtils.asSet((java.lang.Object[])var73);
    var63.addRoles((java.util.Collection)var74);
    java.io.InputStream var77 = org.jsecurity.util.ClassUtils.getResourceAsStream("");
    java.lang.Object[] var78 = new java.lang.Object[] { var77};
    java.util.List var79 = org.jsecurity.util.CollectionUtils.asList(var78);
    org.jsecurity.authc.pam.ModularRealmAuthenticator var80 = new org.jsecurity.authc.pam.ModularRealmAuthenticator(var79);
    org.jsecurity.subject.SimplePrincipalCollection var82 = new org.jsecurity.subject.SimplePrincipalCollection((java.util.Collection)var79, "org.jsecurity.authz.UnauthorizedException: org.jsecurity.session.ExpiredSessionException: ");
    org.jsecurity.session.UnknownSessionException var87 = new org.jsecurity.session.UnknownSessionException("dd\uFFFD", (java.io.Serializable)100.0f);
    org.jsecurity.session.SessionException var89 = new org.jsecurity.session.SessionException("dd\uFFFD", (java.lang.Throwable)var87, (java.io.Serializable)0);
    org.jsecurity.session.SessionException var90 = new org.jsecurity.session.SessionException("dd\uFFFD", (java.lang.Throwable)var87);
    var82.add((java.lang.Object)var90, "org.jsecurity.config.ConfigurationException: dd\uFFFD");
    java.util.Set var93 = var82.asSet();
    org.jsecurity.authz.SimpleAuthorizingAccount var94 = new org.jsecurity.authz.SimpleAuthorizingAccount((java.lang.Object)var60, (java.lang.Object)"\u0000\u0000\u0000", "\u0000\u0000\u0000", var74, var93);
    java.lang.Object var95 = var46.removeAttribute((java.lang.Object)var74);
    var46.validate();
    java.util.Date var97 = var46.getLastAccessTime();
    var32.setId((java.io.Serializable)var46);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var1);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var2);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var5);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var8);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var9);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var10);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var18);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var19);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var20);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var29);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var33 + "' != '" + "c64f564b-28c2-4615-b74b-389173342864"+ "'", var33.equals("c64f564b-28c2-4615-b74b-389173342864"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var34 + "' != '" + "c64f564b-28c2-4615-b74b-389173342864"+ "'", var34.equals("c64f564b-28c2-4615-b74b-389173342864"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var35);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var40);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var43);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var50);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var59);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var60);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var73);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var74);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var77);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var78);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var79);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var93);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var95);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var97);

  }

  public void test378() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest6.test378");


    char[] var1 = new char[] { };
    org.jsecurity.authc.UsernamePasswordToken var3 = new org.jsecurity.authc.UsernamePasswordToken("hi!", var1, true);
    byte[] var4 = org.jsecurity.codec.Hex.decode(var1);
    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      byte[] var6 = org.jsecurity.codec.CodecSupport.toBytes(var1, "7aaa0eff-7052-4953-955a-cd6cddd8c21c");
      fail("Expected exception of type org.jsecurity.codec.CodecException");
    } catch (org.jsecurity.codec.CodecException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var1);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var4);

  }

  public void test379() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest6.test379");


    org.jsecurity.realm.text.TextConfigurationRealm var0 = new org.jsecurity.realm.text.TextConfigurationRealm();
    java.io.InputStream var2 = org.jsecurity.util.ClassUtils.getResourceAsStream("");
    java.lang.Object[] var3 = new java.lang.Object[] { var2};
    java.util.List var4 = org.jsecurity.util.CollectionUtils.asList(var3);
    org.jsecurity.authc.pam.ModularRealmAuthenticator var5 = new org.jsecurity.authc.pam.ModularRealmAuthenticator(var4);
    org.jsecurity.subject.SimplePrincipalCollection var7 = new org.jsecurity.subject.SimplePrincipalCollection((java.util.Collection)var4, "org.jsecurity.authz.UnauthorizedException: org.jsecurity.session.ExpiredSessionException: ");
    org.jsecurity.session.UnknownSessionException var12 = new org.jsecurity.session.UnknownSessionException("dd\uFFFD", (java.io.Serializable)100.0f);
    org.jsecurity.session.SessionException var14 = new org.jsecurity.session.SessionException("dd\uFFFD", (java.lang.Throwable)var12, (java.io.Serializable)0);
    org.jsecurity.session.SessionException var15 = new org.jsecurity.session.SessionException("dd\uFFFD", (java.lang.Throwable)var12);
    var7.add((java.lang.Object)var15, "org.jsecurity.config.ConfigurationException: dd\uFFFD");
    var0.onLogout((org.jsecurity.subject.PrincipalCollection)var7);
    org.jsecurity.cache.HashtableCacheManager var19 = new org.jsecurity.cache.HashtableCacheManager();
    org.jsecurity.cache.Cache var21 = var19.getCache("\u0000\u0000");
    var0.setAuthorizationCache(var21);
    org.jsecurity.codec.CodecException var25 = new org.jsecurity.codec.CodecException("dd\uFFFD");
    org.jsecurity.authc.ConcurrentAccessException var26 = new org.jsecurity.authc.ConcurrentAccessException("org.jsecurity.authz.UnauthorizedException: org.jsecurity.session.ExpiredSessionException: ", (java.lang.Throwable)var25);
    org.jsecurity.subject.SimplePrincipalCollection var28 = new org.jsecurity.subject.SimplePrincipalCollection((java.lang.Object)var25, "");
    var0.onLogout((org.jsecurity.subject.PrincipalCollection)var28);
    var0.setRoleDefinitions("org.jsecurity.config.ConfigurationException: dd\uFFFD");
    java.lang.String var32 = var0.getName();
    java.io.InputStream var34 = org.jsecurity.util.ClassUtils.getResourceAsStream("");
    java.lang.Object[] var35 = new java.lang.Object[] { var34};
    java.util.List var36 = org.jsecurity.util.CollectionUtils.asList(var35);
    org.jsecurity.authc.pam.ModularRealmAuthenticator var37 = new org.jsecurity.authc.pam.ModularRealmAuthenticator(var36);
    org.jsecurity.subject.SimplePrincipalCollection var39 = new org.jsecurity.subject.SimplePrincipalCollection((java.util.Collection)var36, "org.jsecurity.authz.UnauthorizedException: org.jsecurity.session.ExpiredSessionException: ");
    org.jsecurity.session.UnknownSessionException var44 = new org.jsecurity.session.UnknownSessionException("dd\uFFFD", (java.io.Serializable)100.0f);
    org.jsecurity.session.SessionException var46 = new org.jsecurity.session.SessionException("dd\uFFFD", (java.lang.Throwable)var44, (java.io.Serializable)0);
    org.jsecurity.session.SessionException var47 = new org.jsecurity.session.SessionException("dd\uFFFD", (java.lang.Throwable)var44);
    var39.add((java.lang.Object)var47, "org.jsecurity.config.ConfigurationException: dd\uFFFD");
    java.util.Set var50 = var39.asSet();
    boolean var51 = var39.isEmpty();
    boolean var52 = var39.isEmpty();
    java.util.Set var54 = org.jsecurity.util.PermissionUtils.toPermissionStrings("a2b823b1e72eae2b727289df8a00a89df8a0bab6ad8a89c4c5c7a9b62a270000");
    org.jsecurity.authz.ModularRealmAuthorizer var55 = new org.jsecurity.authz.ModularRealmAuthorizer((java.util.Collection)var54);
    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      var0.checkRoles((org.jsecurity.subject.PrincipalCollection)var39, (java.util.Collection)var54);
      fail("Expected exception of type java.util.NoSuchElementException");
    } catch (java.util.NoSuchElementException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var2);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var3);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var4);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var21);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var32 + "' != '" + "org.jsecurity.realm.text.TextConfigurationRealm_4150"+ "'", var32.equals("org.jsecurity.realm.text.TextConfigurationRealm_4150"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var34);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var35);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var36);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var50);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var51 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var52 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var54);

  }

  public void test380() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest6.test380");


    org.jsecurity.session.mgt.SimpleSession var0 = new org.jsecurity.session.mgt.SimpleSession();
    var0.setTimeout((-1L));
    org.jsecurity.session.mgt.SimpleSession var3 = new org.jsecurity.session.mgt.SimpleSession();
    java.util.Date var4 = var3.getLastAccessTime();
    var0.setLastAccessTime(var4);
    org.jsecurity.session.mgt.SimpleSession var6 = new org.jsecurity.session.mgt.SimpleSession();
    java.util.Date var7 = var6.getLastAccessTime();
    var0.setStopTimestamp(var7);
    java.net.InetAddress var9 = var0.getHostAddress();
    var0.setTimeout(100L);
    org.jsecurity.session.mgt.SimpleSession var12 = new org.jsecurity.session.mgt.SimpleSession();
    var12.setTimeout((-1L));
    org.jsecurity.session.mgt.SimpleSession var15 = new org.jsecurity.session.mgt.SimpleSession();
    java.util.Date var16 = var15.getLastAccessTime();
    var12.setLastAccessTime(var16);
    org.jsecurity.session.UnknownSessionException var22 = new org.jsecurity.session.UnknownSessionException("dd\uFFFD", (java.io.Serializable)100.0f);
    org.jsecurity.subject.SubjectException var23 = new org.jsecurity.subject.SubjectException("dd\uFFFD", (java.lang.Throwable)var22);
    org.jsecurity.io.SerializationException var24 = new org.jsecurity.io.SerializationException("", (java.lang.Throwable)var23);
    java.lang.Throwable[] var25 = var23.getSuppressed();
    java.lang.Throwable[] var26 = var23.getSuppressed();
    org.jsecurity.authz.SimpleAuthorizationInfo var29 = new org.jsecurity.authz.SimpleAuthorizationInfo();
    var29.addRole("a2b823b1e72eae2b727289df8a00a89df8a0bab6ad8a89c4c5c7a9b62a270000");
    org.jsecurity.session.UnknownSessionException var36 = new org.jsecurity.session.UnknownSessionException("dd\uFFFD", (java.io.Serializable)100.0f);
    org.jsecurity.subject.SubjectException var37 = new org.jsecurity.subject.SubjectException("dd\uFFFD", (java.lang.Throwable)var36);
    org.jsecurity.io.SerializationException var38 = new org.jsecurity.io.SerializationException("", (java.lang.Throwable)var37);
    java.lang.Throwable[] var39 = var37.getSuppressed();
    java.util.Set var40 = org.jsecurity.util.CollectionUtils.asSet((java.lang.Object[])var39);
    var29.addRoles((java.util.Collection)var40);
    java.io.InputStream var43 = org.jsecurity.util.ClassUtils.getResourceAsStream("");
    java.lang.Object[] var44 = new java.lang.Object[] { var43};
    java.util.List var45 = org.jsecurity.util.CollectionUtils.asList(var44);
    org.jsecurity.authc.pam.ModularRealmAuthenticator var46 = new org.jsecurity.authc.pam.ModularRealmAuthenticator(var45);
    org.jsecurity.subject.SimplePrincipalCollection var48 = new org.jsecurity.subject.SimplePrincipalCollection((java.util.Collection)var45, "org.jsecurity.authz.UnauthorizedException: org.jsecurity.session.ExpiredSessionException: ");
    org.jsecurity.session.UnknownSessionException var53 = new org.jsecurity.session.UnknownSessionException("dd\uFFFD", (java.io.Serializable)100.0f);
    org.jsecurity.session.SessionException var55 = new org.jsecurity.session.SessionException("dd\uFFFD", (java.lang.Throwable)var53, (java.io.Serializable)0);
    org.jsecurity.session.SessionException var56 = new org.jsecurity.session.SessionException("dd\uFFFD", (java.lang.Throwable)var53);
    var48.add((java.lang.Object)var56, "org.jsecurity.config.ConfigurationException: dd\uFFFD");
    java.util.Set var59 = var48.asSet();
    org.jsecurity.authz.SimpleAuthorizingAccount var60 = new org.jsecurity.authz.SimpleAuthorizingAccount((java.lang.Object)var26, (java.lang.Object)"\u0000\u0000\u0000", "\u0000\u0000\u0000", var40, var59);
    java.lang.Object var61 = var12.removeAttribute((java.lang.Object)var40);
    var12.validate();
    java.util.Date var63 = var12.getLastAccessTime();
    var0.setStopTimestamp(var63);
    org.jsecurity.session.mgt.SimpleSession var66 = new org.jsecurity.session.mgt.SimpleSession();
    var66.setTimeout((-1L));
    org.jsecurity.session.mgt.SimpleSession var69 = new org.jsecurity.session.mgt.SimpleSession();
    java.util.Date var70 = var69.getLastAccessTime();
    var66.setLastAccessTime(var70);
    org.jsecurity.session.mgt.SimpleSession var72 = new org.jsecurity.session.mgt.SimpleSession();
    java.util.Date var73 = var72.getLastAccessTime();
    var66.setStopTimestamp(var73);
    java.net.InetAddress var75 = var66.getHostAddress();
    org.jsecurity.session.InvalidSessionException var76 = new org.jsecurity.session.InvalidSessionException("\u0000\u0000\u0000", (java.io.Serializable)var66);
    java.util.Collection var77 = var66.getAttributeKeys();
    org.jsecurity.authc.credential.Md5CredentialsMatcher var78 = new org.jsecurity.authc.credential.Md5CredentialsMatcher();
    boolean var79 = var78.isHashSalted();
    boolean var80 = var78.isHashSalted();
    int var81 = var78.getHashIterations();
    var0.setAttribute((java.lang.Object)var66, (java.lang.Object)var78);
    java.util.Date var83 = var0.getLastAccessTime();
    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      org.jsecurity.crypto.hash.Sha384Hash var84 = new org.jsecurity.crypto.hash.Sha384Hash((java.lang.Object)var83);
      fail("Expected exception of type org.jsecurity.codec.CodecException");
    } catch (org.jsecurity.codec.CodecException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var4);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var7);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var9);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var16);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var25);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var26);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var39);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var40);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var43);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var44);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var45);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var59);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var61);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var63);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var70);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var73);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var75);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var77);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var79 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var80 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var81 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var83);

  }

  public void test381() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest6.test381");


    org.jsecurity.authc.UsernamePasswordToken var2 = new org.jsecurity.authc.UsernamePasswordToken("classpath:org/jsecurity/cache/ehcache/ehcache.xml", "org.jsecurity.authc.UsernamePasswordToken - hi!, rememberMe=false");
    java.lang.String var3 = var2.getUsername();
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var3 + "' != '" + "classpath:org/jsecurity/cache/ehcache/ehcache.xml"+ "'", var3.equals("classpath:org/jsecurity/cache/ehcache/ehcache.xml"));

  }

  public void test382() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest6.test382");


    org.jsecurity.util.AntPathMatcher var0 = new org.jsecurity.util.AntPathMatcher();
    boolean var3 = var0.matchStart("\uFFFD\uFFFD#\uFFFD\uFFFD.\uFFFD+rr\uFFFD\u07CA\u0000\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\u01E9\uFFFD*'\u0000\u0000", "ZGT/");
    boolean var6 = var0.matches("6464ff", "orgjsecurityauthcCredentialsException783ccd3148a842dd890fdf885a7baafAA==");
    java.lang.String var9 = var0.extractPathWithinPattern("b6cd6008-ae80-4bfd-ae0c-5041e0198a79", "org.jsecurity.config.ConfigurationException: dd\uFFFD-4org.jsecurity.config.ConfigurationException: dd\uFFFD02-8085-950org.jsecurity.config.ConfigurationException: dd\uFFFDbb026org.jsecurity.config.ConfigurationException: dd\uFFFD06");
    boolean var12 = var0.matchStart("5dce63b0-a255-4de6-ac68-7cd6a6c96f86", "c3e3a4ec-562a-4afb-8e51-7ec417f22d53");
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var3 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var6 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var9 + "' != '" + ""+ "'", var9.equals(""));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var12 == false);

  }

  public void test383() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest6.test383");


    org.jsecurity.session.mgt.eis.MemorySessionDAO var0 = new org.jsecurity.session.mgt.eis.MemorySessionDAO();
    org.jsecurity.cache.Cache var1 = var0.getActiveSessionsCache();
    org.jsecurity.cache.CacheManager var2 = var0.getCacheManager();
    org.jsecurity.cache.HashtableCacheManager var3 = new org.jsecurity.cache.HashtableCacheManager();
    org.jsecurity.cache.Cache var5 = var3.getCache("\u0000\u0000");
    var0.setActiveSessionsCache(var5);
    java.io.InputStream var8 = org.jsecurity.util.ClassUtils.getResourceAsStream("");
    java.lang.Object[] var9 = new java.lang.Object[] { var8};
    java.util.List var10 = org.jsecurity.util.CollectionUtils.asList(var9);
    org.jsecurity.authc.pam.ModularRealmAuthenticator var11 = new org.jsecurity.authc.pam.ModularRealmAuthenticator(var10);
    org.jsecurity.authc.pam.AllSuccessfulModularAuthenticationStrategy var12 = new org.jsecurity.authc.pam.AllSuccessfulModularAuthenticationStrategy();
    var11.setModularAuthenticationStrategy((org.jsecurity.authc.pam.ModularAuthenticationStrategy)var12);
    org.jsecurity.authz.SimpleAuthorizationInfo var14 = new org.jsecurity.authz.SimpleAuthorizationInfo();
    var14.addStringPermission("hi!");
    java.io.InputStream var18 = org.jsecurity.util.ClassUtils.getResourceAsStream("");
    java.lang.Object[] var19 = new java.lang.Object[] { var18};
    java.util.List var20 = org.jsecurity.util.CollectionUtils.asList(var19);
    var14.addRoles((java.util.Collection)var20);
    var11.setAuthenticationListeners((java.util.Collection)var20);
    org.jsecurity.realm.activedirectory.ActiveDirectoryRealm var23 = new org.jsecurity.realm.activedirectory.ActiveDirectoryRealm();
    var23.setPrincipalSuffix("");
    var11.setRealm((org.jsecurity.realm.Realm)var23);
    org.jsecurity.cache.HashtableCacheManager var27 = new org.jsecurity.cache.HashtableCacheManager();
    org.jsecurity.cache.Cache var29 = var27.getCache("\u0000\u0000");
    var23.setAuthorizationCache(var29);
    var0.setActiveSessionsCache(var29);
    org.jsecurity.session.mgt.SimpleSession var32 = new org.jsecurity.session.mgt.SimpleSession();
    java.io.Serializable var33 = var0.create((org.jsecurity.session.Session)var32);
    java.io.Serializable var34 = var32.getId();
    java.util.Map var35 = var32.getAttributes();
    byte[] var41 = new byte[] { (byte)100, (byte)100, (byte)(-1)};
    java.lang.String var42 = org.jsecurity.codec.CodecSupport.toString(var41);
    byte[] var43 = org.jsecurity.codec.Base64.encode(var41);
    char[] var44 = org.jsecurity.codec.CodecSupport.toChars(var43);
    org.jsecurity.authc.UsernamePasswordToken var46 = new org.jsecurity.authc.UsernamePasswordToken("org.jsecurity.realm.SimpleAccountRealm-55-authorization", var44, false);
    char[] var47 = var46.getPassword();
    org.jsecurity.session.mgt.SimpleSession var49 = new org.jsecurity.session.mgt.SimpleSession();
    var49.setTimeout((-1L));
    org.jsecurity.session.mgt.SimpleSession var52 = new org.jsecurity.session.mgt.SimpleSession();
    java.util.Date var53 = var52.getLastAccessTime();
    var49.setLastAccessTime(var53);
    java.net.InetAddress var55 = var49.getHostAddress();
    org.jsecurity.authc.UsernamePasswordToken var56 = new org.jsecurity.authc.UsernamePasswordToken("classpath:org/jsecurity/cache/ehcache/ehcache.xml", var47, false, var55);
    var32.setHostAddress(var55);
    java.io.Serializable var58 = var32.getId();
    java.util.Date var59 = var32.getStopTimestamp();
    var32.touch();
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var1);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var2);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var5);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var8);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var9);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var10);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var18);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var19);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var20);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var29);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var33 + "' != '" + "c575f34a-19ed-428e-b0a6-bf2789170440"+ "'", var33.equals("c575f34a-19ed-428e-b0a6-bf2789170440"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var34 + "' != '" + "c575f34a-19ed-428e-b0a6-bf2789170440"+ "'", var34.equals("c575f34a-19ed-428e-b0a6-bf2789170440"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var35);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var41);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var42 + "' != '" + "dd\uFFFD"+ "'", var42.equals("dd\uFFFD"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var43);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var44);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var47);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var53);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var55);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var58 + "' != '" + "c575f34a-19ed-428e-b0a6-bf2789170440"+ "'", var58.equals("c575f34a-19ed-428e-b0a6-bf2789170440"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var59);

  }

  public void test384() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest6.test384");


    org.jsecurity.session.mgt.quartz.QuartzSessionValidationScheduler var0 = new org.jsecurity.session.mgt.quartz.QuartzSessionValidationScheduler();
    org.jsecurity.session.mgt.DefaultSessionManager var1 = new org.jsecurity.session.mgt.DefaultSessionManager();
    org.jsecurity.mgt.DefaultSecurityManager var2 = new org.jsecurity.mgt.DefaultSecurityManager();
    org.jsecurity.authz.permission.WildcardPermissionResolver var3 = new org.jsecurity.authz.permission.WildcardPermissionResolver();
    var2.setPermissionResolver((org.jsecurity.authz.permission.PermissionResolver)var3);
    org.jsecurity.cache.CacheManager var5 = var2.getCacheManager();
    var1.setCacheManager(var5);
    var0.setSessionManager((org.jsecurity.session.mgt.ValidatingSessionManager)var1);
    var0.setSessionValidationInterval(3600000L);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var5);

  }

  public void test385() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest6.test385");


    org.jsecurity.realm.activedirectory.ActiveDirectoryRealm var0 = new org.jsecurity.realm.activedirectory.ActiveDirectoryRealm();
    org.jsecurity.realm.activedirectory.ActiveDirectoryRealm var1 = new org.jsecurity.realm.activedirectory.ActiveDirectoryRealm();
    var1.initAuthorizationCache();
    org.jsecurity.mgt.DefaultSecurityManager var3 = new org.jsecurity.mgt.DefaultSecurityManager();
    java.io.InputStream var5 = org.jsecurity.util.ClassUtils.getResourceAsStream("");
    java.lang.Object[] var6 = new java.lang.Object[] { var5};
    java.util.List var7 = org.jsecurity.util.CollectionUtils.asList(var6);
    org.jsecurity.authc.pam.ModularRealmAuthenticator var8 = new org.jsecurity.authc.pam.ModularRealmAuthenticator(var7);
    org.jsecurity.authc.pam.AllSuccessfulModularAuthenticationStrategy var9 = new org.jsecurity.authc.pam.AllSuccessfulModularAuthenticationStrategy();
    var8.setModularAuthenticationStrategy((org.jsecurity.authc.pam.ModularAuthenticationStrategy)var9);
    org.jsecurity.authz.SimpleAuthorizationInfo var11 = new org.jsecurity.authz.SimpleAuthorizationInfo();
    var11.addStringPermission("hi!");
    java.io.InputStream var15 = org.jsecurity.util.ClassUtils.getResourceAsStream("");
    java.lang.Object[] var16 = new java.lang.Object[] { var15};
    java.util.List var17 = org.jsecurity.util.CollectionUtils.asList(var16);
    var11.addRoles((java.util.Collection)var17);
    var8.setAuthenticationListeners((java.util.Collection)var17);
    var3.setSessionListeners((java.util.Collection)var17);
    java.io.InputStream var22 = org.jsecurity.util.ClassUtils.getResourceAsStream("");
    java.lang.Object[] var23 = new java.lang.Object[] { var22};
    java.util.List var24 = org.jsecurity.util.CollectionUtils.asList(var23);
    org.jsecurity.authc.pam.ModularRealmAuthenticator var25 = new org.jsecurity.authc.pam.ModularRealmAuthenticator(var24);
    org.jsecurity.authc.pam.AllSuccessfulModularAuthenticationStrategy var26 = new org.jsecurity.authc.pam.AllSuccessfulModularAuthenticationStrategy();
    var25.setModularAuthenticationStrategy((org.jsecurity.authc.pam.ModularAuthenticationStrategy)var26);
    org.jsecurity.authz.SimpleAuthorizationInfo var28 = new org.jsecurity.authz.SimpleAuthorizationInfo();
    var28.addStringPermission("hi!");
    java.io.InputStream var32 = org.jsecurity.util.ClassUtils.getResourceAsStream("");
    java.lang.Object[] var33 = new java.lang.Object[] { var32};
    java.util.List var34 = org.jsecurity.util.CollectionUtils.asList(var33);
    var28.addRoles((java.util.Collection)var34);
    var25.setAuthenticationListeners((java.util.Collection)var34);
    org.jsecurity.realm.activedirectory.ActiveDirectoryRealm var37 = new org.jsecurity.realm.activedirectory.ActiveDirectoryRealm();
    var37.setPrincipalSuffix("");
    var25.setRealm((org.jsecurity.realm.Realm)var37);
    org.jsecurity.cache.HashtableCacheManager var41 = new org.jsecurity.cache.HashtableCacheManager();
    org.jsecurity.cache.Cache var43 = var41.getCache("\u0000\u0000");
    var37.setAuthorizationCache(var43);
    var3.setRealm((org.jsecurity.realm.Realm)var37);
    org.jsecurity.config.ReflectionBuilder var46 = new org.jsecurity.config.ReflectionBuilder();
    org.jsecurity.io.IniResource var47 = new org.jsecurity.io.IniResource();
    java.util.Map var48 = var47.getSections();
    var46.setObjects(var48);
    var37.setGroupRolesMap(var48);
    var1.setGroupRolesMap(var48);
    var0.setGroupRolesMap(var48);
    var0.setName("QzXpDZSfjjJUpGJc6nnkGQp4loZSAnOxZJSu5IzgpmrfcDFf8bzV/5XmrcPMyQXV");
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var5);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var6);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var7);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var15);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var16);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var17);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var22);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var23);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var24);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var32);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var33);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var34);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var43);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var48);

  }

  public void test386() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest6.test386");


    org.jsecurity.realm.activedirectory.ActiveDirectoryRealm var0 = new org.jsecurity.realm.activedirectory.ActiveDirectoryRealm();
    var0.init();
    var0.setSystemPassword("dd\uFFFD");
    org.jsecurity.authz.aop.GuestAnnotationHandler var4 = new org.jsecurity.authz.aop.GuestAnnotationHandler();
    java.lang.Class var5 = var4.getAnnotationClass();
    var0.setAuthenticationTokenClass(var5);
    org.jsecurity.mgt.DefaultSecurityManager var7 = new org.jsecurity.mgt.DefaultSecurityManager((org.jsecurity.realm.Realm)var0);
    org.jsecurity.crypto.BlowfishCipher var8 = new org.jsecurity.crypto.BlowfishCipher();
    byte[] var12 = new byte[] { (byte)100, (byte)100, (byte)(-1)};
    java.lang.String var13 = org.jsecurity.codec.CodecSupport.toString(var12);
    byte[] var15 = org.jsecurity.codec.Base64.decode("hi!");
    byte[] var16 = var8.encrypt(var12, var15);
    org.jsecurity.crypto.BlowfishCipher var17 = new org.jsecurity.crypto.BlowfishCipher();
    byte[] var21 = new byte[] { (byte)100, (byte)100, (byte)(-1)};
    java.lang.String var22 = org.jsecurity.codec.CodecSupport.toString(var21);
    byte[] var24 = org.jsecurity.codec.Base64.decode("hi!");
    byte[] var25 = var17.encrypt(var21, var24);
    org.jsecurity.crypto.BlowfishCipher var26 = new org.jsecurity.crypto.BlowfishCipher();
    java.security.Key var27 = var26.getKey();
    java.security.Key var28 = var26.getKey();
    var17.setKey(var28);
    var8.setKey(var28);
    org.jsecurity.crypto.BlowfishCipher var31 = new org.jsecurity.crypto.BlowfishCipher();
    byte[] var35 = new byte[] { (byte)100, (byte)100, (byte)(-1)};
    java.lang.String var36 = org.jsecurity.codec.CodecSupport.toString(var35);
    byte[] var38 = org.jsecurity.codec.Base64.decode("hi!");
    byte[] var39 = var31.encrypt(var35, var38);
    java.lang.String var40 = org.jsecurity.codec.Base64.decodeToString(var35);
    byte[] var41 = org.jsecurity.codec.Base64.encode(var35);
    byte[] var42 = org.jsecurity.codec.Base64.encodeChunked(var35);
    char[] var43 = org.jsecurity.codec.CodecSupport.toChars(var42);
    byte[] var44 = org.jsecurity.codec.Base64.encodeChunked(var42);
    byte[] var48 = new byte[] { (byte)100, (byte)100, (byte)(-1)};
    java.lang.String var49 = org.jsecurity.codec.CodecSupport.toString(var48);
    char[] var50 = org.jsecurity.codec.CodecSupport.toChars(var48);
    boolean var51 = org.jsecurity.codec.Base64.isBase64(var48);
    char[] var52 = org.jsecurity.codec.CodecSupport.toChars(var48);
    byte[] var53 = var8.encrypt(var44, var48);
    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      var7.setRememberMeDecryptionCipherKey(var53);
      fail("Expected exception of type java.lang.IllegalStateException");
    } catch (java.lang.IllegalStateException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var5);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var12);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var13 + "' != '" + "dd\uFFFD"+ "'", var13.equals("dd\uFFFD"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var15);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var16);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var21);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var22 + "' != '" + "dd\uFFFD"+ "'", var22.equals("dd\uFFFD"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var24);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var25);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var27);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var28);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var35);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var36 + "' != '" + "dd\uFFFD"+ "'", var36.equals("dd\uFFFD"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var38);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var39);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var40 + "' != '" + "\u0000\u0000"+ "'", var40.equals("\u0000\u0000"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var41);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var42);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var43);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var44);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var48);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var49 + "' != '" + "dd\uFFFD"+ "'", var49.equals("dd\uFFFD"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var50);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var51 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var52);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var53);

  }

  public void test387() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest6.test387");


    org.jsecurity.session.mgt.DelegatingSession var0 = new org.jsecurity.session.mgt.DelegatingSession();
    java.io.Serializable var1 = var0.getId();
    org.jsecurity.session.mgt.SessionManager var2 = var0.getSessionManager();
    org.jsecurity.session.mgt.SimpleSession var3 = new org.jsecurity.session.mgt.SimpleSession();
    org.jsecurity.session.UnknownSessionException var7 = new org.jsecurity.session.UnknownSessionException("dd\uFFFD", (java.io.Serializable)100.0f);
    org.jsecurity.session.SessionException var9 = new org.jsecurity.session.SessionException("dd\uFFFD", (java.lang.Throwable)var7, (java.io.Serializable)0);
    org.jsecurity.authc.AccountException var10 = new org.jsecurity.authc.AccountException((java.lang.Throwable)var7);
    var3.setId((java.io.Serializable)var7);
    var3.setTimeout((-1L));
    org.jsecurity.session.mgt.SimpleSession var14 = new org.jsecurity.session.mgt.SimpleSession();
    var14.setTimeout((-1L));
    org.jsecurity.session.mgt.SimpleSession var17 = new org.jsecurity.session.mgt.SimpleSession();
    var17.setTimeout((-1L));
    org.jsecurity.session.mgt.SimpleSession var20 = new org.jsecurity.session.mgt.SimpleSession();
    java.util.Date var21 = var20.getLastAccessTime();
    var17.setLastAccessTime(var21);
    org.jsecurity.session.mgt.SimpleSession var23 = new org.jsecurity.session.mgt.SimpleSession();
    java.util.Date var24 = var23.getLastAccessTime();
    var17.setStopTimestamp(var24);
    var14.setStartTimestamp(var24);
    var3.setLastAccessTime(var24);
    var0.setId((java.io.Serializable)var24);
    java.io.Serializable var29 = var0.getId();
    org.jsecurity.session.mgt.DefaultSessionManager var30 = new org.jsecurity.session.mgt.DefaultSessionManager();
    org.jsecurity.session.mgt.quartz.QuartzSessionValidationScheduler var31 = new org.jsecurity.session.mgt.quartz.QuartzSessionValidationScheduler();
    boolean var32 = var31.isEnabled();
    var31.enableSessionValidation();
    var30.setSessionValidationScheduler((org.jsecurity.session.mgt.SessionValidationScheduler)var31);
    var0.setSessionManager((org.jsecurity.session.mgt.SessionManager)var30);
    org.jsecurity.JSecurityException var39 = new org.jsecurity.JSecurityException();
    org.jsecurity.authc.LockedAccountException var40 = new org.jsecurity.authc.LockedAccountException("org.jsecurity.config.ConfigurationException: dd\uFFFD", (java.lang.Throwable)var39);
    org.jsecurity.session.StoppedSessionException var41 = new org.jsecurity.session.StoppedSessionException("783ccd31-48a8-42dd-890f-df885a7baaff", (java.lang.Throwable)var40);
    org.jsecurity.io.ResourceException var46 = new org.jsecurity.io.ResourceException("hi!");
    org.jsecurity.codec.CodecException var47 = new org.jsecurity.codec.CodecException((java.lang.Throwable)var46);
    org.jsecurity.JSecurityException var48 = new org.jsecurity.JSecurityException("a2b823b1e72eae2b727289df8a00a89df8a0bab6ad8a89c4c5c7a9b62a270000", (java.lang.Throwable)var46);
    org.jsecurity.authc.ExcessiveAttemptsException var49 = new org.jsecurity.authc.ExcessiveAttemptsException((java.lang.Throwable)var48);
    org.jsecurity.session.StoppedSessionException var50 = new org.jsecurity.session.StoppedSessionException((java.lang.Throwable)var48);
    org.jsecurity.authc.AccountException var51 = new org.jsecurity.authc.AccountException("org.jsecurity.authz.UnauthorizedException: org.jsecurity.session.ExpiredSessionException: ", (java.lang.Throwable)var50);
    org.jsecurity.authc.ExcessiveAttemptsException var52 = new org.jsecurity.authc.ExcessiveAttemptsException("a3e14b98-1050-4bcc-8787-431663db8814", (java.lang.Throwable)var51);
    org.jsecurity.session.UnknownSessionException var53 = new org.jsecurity.session.UnknownSessionException("3d40fa30-fa08-4705-a0dc-1dd5464d0a01", (java.lang.Throwable)var40, (java.io.Serializable)var51);
    var0.setId((java.io.Serializable)var40);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var1);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var2);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var21);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var24);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var29);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var32 == false);

  }

  public void test388() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest6.test388");


    org.jsecurity.crypto.BlowfishCipher var0 = new org.jsecurity.crypto.BlowfishCipher();
    byte[] var4 = new byte[] { (byte)100, (byte)100, (byte)(-1)};
    java.lang.String var5 = org.jsecurity.codec.CodecSupport.toString(var4);
    byte[] var7 = org.jsecurity.codec.Base64.decode("hi!");
    byte[] var8 = var0.encrypt(var4, var7);
    org.jsecurity.crypto.BlowfishCipher var9 = new org.jsecurity.crypto.BlowfishCipher();
    java.security.Key var10 = var9.getKey();
    java.security.Key var11 = var9.getKey();
    var0.setKey(var11);
    org.jsecurity.crypto.BlowfishCipher var13 = new org.jsecurity.crypto.BlowfishCipher();
    byte[] var17 = new byte[] { (byte)100, (byte)100, (byte)(-1)};
    java.lang.String var18 = org.jsecurity.codec.CodecSupport.toString(var17);
    byte[] var20 = org.jsecurity.codec.Base64.decode("hi!");
    byte[] var21 = var13.encrypt(var17, var20);
    org.jsecurity.crypto.BlowfishCipher var22 = new org.jsecurity.crypto.BlowfishCipher();
    byte[] var26 = new byte[] { (byte)100, (byte)100, (byte)(-1)};
    java.lang.String var27 = org.jsecurity.codec.CodecSupport.toString(var26);
    byte[] var29 = org.jsecurity.codec.Base64.decode("hi!");
    byte[] var30 = var22.encrypt(var26, var29);
    org.jsecurity.crypto.BlowfishCipher var31 = new org.jsecurity.crypto.BlowfishCipher();
    java.security.Key var32 = var31.getKey();
    java.security.Key var33 = var31.getKey();
    var22.setKey(var33);
    var13.setKey(var33);
    var0.setKey(var33);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var4);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var5 + "' != '" + "dd\uFFFD"+ "'", var5.equals("dd\uFFFD"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var7);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var8);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var10);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var11);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var17);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var18 + "' != '" + "dd\uFFFD"+ "'", var18.equals("dd\uFFFD"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var20);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var21);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var26);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var27 + "' != '" + "dd\uFFFD"+ "'", var27.equals("dd\uFFFD"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var29);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var30);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var32);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var33);

  }

  public void test389() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest6.test389");


    org.jsecurity.session.mgt.SimpleSession var1 = new org.jsecurity.session.mgt.SimpleSession();
    org.jsecurity.session.UnknownSessionException var5 = new org.jsecurity.session.UnknownSessionException("dd\uFFFD", (java.io.Serializable)100.0f);
    org.jsecurity.session.SessionException var7 = new org.jsecurity.session.SessionException("dd\uFFFD", (java.lang.Throwable)var5, (java.io.Serializable)0);
    org.jsecurity.authc.AccountException var8 = new org.jsecurity.authc.AccountException((java.lang.Throwable)var5);
    var1.setId((java.io.Serializable)var5);
    org.jsecurity.session.StoppedSessionException var10 = new org.jsecurity.session.StoppedSessionException("org.jsecurity.authc.UsernamePasswordToken - \u0000\u0000, rememberMe=false", (java.lang.Throwable)var5);
    org.jsecurity.authc.AuthenticationException var11 = new org.jsecurity.authc.AuthenticationException((java.lang.Throwable)var10);
    org.jsecurity.authz.AuthorizationException var12 = new org.jsecurity.authz.AuthorizationException((java.lang.Throwable)var10);

  }

  public void test390() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest6.test390");


    org.jsecurity.realm.activedirectory.ActiveDirectoryRealm var0 = new org.jsecurity.realm.activedirectory.ActiveDirectoryRealm();
    org.jsecurity.authc.credential.Sha256CredentialsMatcher var1 = new org.jsecurity.authc.credential.Sha256CredentialsMatcher();
    var0.setCredentialsMatcher((org.jsecurity.authc.credential.CredentialsMatcher)var1);
    java.lang.String var3 = var0.getAuthorizationCacheName();
    var0.setUrl("hi!");
    org.jsecurity.realm.ldap.DefaultLdapContextFactory var6 = new org.jsecurity.realm.ldap.DefaultLdapContextFactory();
    var0.setLdapContextFactory((org.jsecurity.realm.ldap.LdapContextFactory)var6);
    org.jsecurity.config.ReflectionBuilder var8 = new org.jsecurity.config.ReflectionBuilder();
    org.jsecurity.io.IniResource var9 = new org.jsecurity.io.IniResource();
    var9.setCharsetName("org.jsecurity.authz.UnauthorizedException: org.jsecurity.session.ExpiredSessionException: ");
    java.util.Map var12 = var9.getSections();
    java.util.Map var13 = var8.buildObjects(var12);
    org.jsecurity.config.ReflectionBuilder var14 = new org.jsecurity.config.ReflectionBuilder();
    org.jsecurity.io.IniResource var15 = new org.jsecurity.io.IniResource();
    var15.setCharsetName("org.jsecurity.authz.UnauthorizedException: org.jsecurity.session.ExpiredSessionException: ");
    java.util.Map var18 = var15.getSections();
    java.util.Map var19 = var14.buildObjects(var18);
    java.util.Map var20 = var8.buildObjects(var19);
    java.util.Map var21 = var8.getObjects();
    var6.setAdditionalEnvironment(var21);
    org.jsecurity.config.ReflectionBuilder var23 = new org.jsecurity.config.ReflectionBuilder();
    org.jsecurity.io.IniResource var24 = new org.jsecurity.io.IniResource();
    java.util.Map var25 = var24.getSections();
    var23.setObjects(var25);
    org.jsecurity.realm.activedirectory.ActiveDirectoryRealm var27 = new org.jsecurity.realm.activedirectory.ActiveDirectoryRealm();
    var27.init();
    var27.init();
    org.jsecurity.config.ReflectionBuilder var30 = new org.jsecurity.config.ReflectionBuilder();
    org.jsecurity.config.ReflectionBuilder var31 = new org.jsecurity.config.ReflectionBuilder();
    org.jsecurity.io.IniResource var32 = new org.jsecurity.io.IniResource();
    var32.setCharsetName("org.jsecurity.authz.UnauthorizedException: org.jsecurity.session.ExpiredSessionException: ");
    java.util.Map var35 = var32.getSections();
    java.util.Map var36 = var31.buildObjects(var35);
    org.jsecurity.config.ReflectionBuilder var37 = new org.jsecurity.config.ReflectionBuilder();
    org.jsecurity.io.IniResource var38 = new org.jsecurity.io.IniResource();
    var38.setCharsetName("org.jsecurity.authz.UnauthorizedException: org.jsecurity.session.ExpiredSessionException: ");
    java.util.Map var41 = var38.getSections();
    java.util.Map var42 = var37.buildObjects(var41);
    java.util.Map var43 = var31.buildObjects(var42);
    java.util.Map var44 = var30.buildObjects(var43);
    var27.setGroupRolesMap(var44);
    var23.setObjects(var44);
    org.jsecurity.config.ReflectionBuilder var47 = new org.jsecurity.config.ReflectionBuilder(var44);
    var6.setAdditionalEnvironment(var44);
    var6.setUsePooling(true);
    var6.setUrl("daaeccb7-c50f-4f66-b0ec-d53a7c469ede");
    var6.setUrl("ab8fbf0b-d098-4d6c-b2c3-f29cba54d65b");
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var3);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var12);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var13);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var18);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var19);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var20);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var21);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var25);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var35);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var36);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var41);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var42);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var43);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var44);

  }

  public void test391() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest6.test391");


    org.jsecurity.crypto.BlowfishCipher var0 = new org.jsecurity.crypto.BlowfishCipher();
    java.security.Key var1 = org.jsecurity.crypto.BlowfishCipher.generateNewKey();
    var0.setKey(var1);
    org.jsecurity.crypto.BlowfishCipher var3 = new org.jsecurity.crypto.BlowfishCipher();
    byte[] var7 = new byte[] { (byte)100, (byte)100, (byte)(-1)};
    java.lang.String var8 = org.jsecurity.codec.CodecSupport.toString(var7);
    byte[] var10 = org.jsecurity.codec.Base64.decode("hi!");
    byte[] var11 = var3.encrypt(var7, var10);
    org.jsecurity.crypto.BlowfishCipher var12 = new org.jsecurity.crypto.BlowfishCipher();
    java.security.Key var13 = var12.getKey();
    java.security.Key var14 = var12.getKey();
    var3.setKey(var14);
    java.security.Key var16 = var3.getKey();
    byte[] var18 = org.jsecurity.codec.CodecSupport.toBytes("5dd0c65d-1422-49c2-becb-9e8dca619ab3");
    byte[] var20 = org.jsecurity.codec.Base64.encode(var18, false);
    byte[] var24 = new byte[] { (byte)100, (byte)100, (byte)(-1)};
    java.lang.String var25 = org.jsecurity.codec.CodecSupport.toString(var24);
    byte[] var27 = org.jsecurity.codec.Base64.encode(var24, false);
    byte[] var28 = org.jsecurity.codec.Base64.decode(var24);
    byte[] var29 = var3.encrypt(var18, var24);
    byte[] var33 = new byte[] { (byte)100, (byte)100, (byte)(-1)};
    java.lang.String var34 = org.jsecurity.codec.CodecSupport.toString(var33);
    char[] var35 = org.jsecurity.codec.CodecSupport.toChars(var33);
    java.lang.String var36 = org.jsecurity.codec.Hex.encodeToString(var33);
    byte[] var37 = var0.decrypt(var29, var33);
    byte[] var39 = org.jsecurity.codec.CodecSupport.toBytes("org.jsecurity.realm.text.PropertiesRealm_2463");
    boolean var40 = org.jsecurity.codec.Base64.isBase64(var39);
    org.jsecurity.crypto.BlowfishCipher var41 = new org.jsecurity.crypto.BlowfishCipher();
    byte[] var45 = new byte[] { (byte)100, (byte)100, (byte)(-1)};
    java.lang.String var46 = org.jsecurity.codec.CodecSupport.toString(var45);
    byte[] var48 = org.jsecurity.codec.Base64.decode("hi!");
    byte[] var49 = var41.encrypt(var45, var48);
    byte[] var51 = org.jsecurity.codec.Base64.encode(var48, false);
    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      byte[] var52 = var0.decrypt(var39, var48);
      fail("Expected exception of type java.lang.IllegalStateException");
    } catch (java.lang.IllegalStateException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var1);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var7);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var8 + "' != '" + "dd\uFFFD"+ "'", var8.equals("dd\uFFFD"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var10);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var11);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var13);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var14);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var16);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var18);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var20);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var24);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var25 + "' != '" + "dd\uFFFD"+ "'", var25.equals("dd\uFFFD"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var27);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var28);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var29);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var33);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var34 + "' != '" + "dd\uFFFD"+ "'", var34.equals("dd\uFFFD"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var35);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var36 + "' != '" + "6464ff"+ "'", var36.equals("6464ff"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var37);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var39);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var40 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var45);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var46 + "' != '" + "dd\uFFFD"+ "'", var46.equals("dd\uFFFD"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var48);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var49);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var51);

  }

  public void test392() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest6.test392");


    org.jsecurity.realm.jndi.JndiRealmFactory var0 = new org.jsecurity.realm.jndi.JndiRealmFactory();
    org.jsecurity.authc.ExpiredCredentialsException var2 = new org.jsecurity.authc.ExpiredCredentialsException();
    org.jsecurity.session.ExpiredSessionException var3 = new org.jsecurity.session.ExpiredSessionException("", (java.lang.Throwable)var2);
    java.lang.Throwable[] var4 = var3.getSuppressed();
    java.util.List var5 = org.jsecurity.util.CollectionUtils.asList((java.lang.Object[])var4);
    var0.setJndiNames((java.util.Collection)var5);
    java.util.Properties var7 = var0.getJndiEnvironment();
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var4);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var5);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var7);

  }

  public void test393() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest6.test393");


    org.jsecurity.session.UnknownSessionException var1 = new org.jsecurity.session.UnknownSessionException("8d307df1-6623-4ef3-84b2-f75411643f59");

  }

  public void test394() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest6.test394");


    java.lang.String var1 = org.jsecurity.codec.Base64.decodeToString("org.jsecurity.realm.text.PropertiesRealm_3199");
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var1 + "' != '" + "\uFFFD\uFFFD#\uFFFD\uFFFD.\uFFFD+r\uFFFD\u695A\u05F1\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\u0011y\uFFFDf\uFFFD_}"+ "'", var1.equals("\uFFFD\uFFFD#\uFFFD\uFFFD.\uFFFD+r\uFFFD\u695A\u05F1\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\u0011y\uFFFDf\uFFFD_}"));

  }

  public void test395() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest6.test395");


    java.io.InputStream var1 = org.jsecurity.util.ClassUtils.getResourceAsStream("");
    java.lang.Object[] var2 = new java.lang.Object[] { var1};
    java.util.List var3 = org.jsecurity.util.CollectionUtils.asList(var2);
    org.jsecurity.authc.pam.ModularRealmAuthenticator var4 = new org.jsecurity.authc.pam.ModularRealmAuthenticator(var3);
    org.jsecurity.subject.SimplePrincipalCollection var6 = new org.jsecurity.subject.SimplePrincipalCollection((java.util.Collection)var3, "org.jsecurity.authz.UnauthorizedException: org.jsecurity.session.ExpiredSessionException: ");
    org.jsecurity.io.ResourceException var10 = new org.jsecurity.io.ResourceException("hi!");
    org.jsecurity.authc.UnknownAccountException var11 = new org.jsecurity.authc.UnknownAccountException((java.lang.Throwable)var10);
    org.jsecurity.session.StoppedSessionException var12 = new org.jsecurity.session.StoppedSessionException("dd\uFFFD", (java.io.Serializable)var10);
    org.jsecurity.session.UnknownSessionException var13 = new org.jsecurity.session.UnknownSessionException("org.jsecurity.authz.UnauthorizedException: org.jsecurity.session.ExpiredSessionException: ", (java.lang.Throwable)var10);
    boolean var14 = var6.equals((java.lang.Object)var10);
    org.jsecurity.authz.SimpleAuthorizationInfo var15 = new org.jsecurity.authz.SimpleAuthorizationInfo();
    var15.addRole("a2b823b1e72eae2b727289df8a00a89df8a0bab6ad8a89c4c5c7a9b62a270000");
    org.jsecurity.authz.SimpleAuthorizationInfo var18 = new org.jsecurity.authz.SimpleAuthorizationInfo();
    var18.addRole("a2b823b1e72eae2b727289df8a00a89df8a0bab6ad8a89c4c5c7a9b62a270000");
    org.jsecurity.session.UnknownSessionException var25 = new org.jsecurity.session.UnknownSessionException("dd\uFFFD", (java.io.Serializable)100.0f);
    org.jsecurity.subject.SubjectException var26 = new org.jsecurity.subject.SubjectException("dd\uFFFD", (java.lang.Throwable)var25);
    org.jsecurity.io.SerializationException var27 = new org.jsecurity.io.SerializationException("", (java.lang.Throwable)var26);
    java.lang.Throwable[] var28 = var26.getSuppressed();
    java.util.Set var29 = org.jsecurity.util.CollectionUtils.asSet((java.lang.Object[])var28);
    var18.addRoles((java.util.Collection)var29);
    var15.setObjectPermissions(var29);
    java.io.InputStream var33 = org.jsecurity.util.ClassUtils.getResourceAsStream("");
    java.lang.Object[] var34 = new java.lang.Object[] { var33};
    java.util.List var35 = org.jsecurity.util.CollectionUtils.asList(var34);
    org.jsecurity.authc.pam.ModularRealmAuthenticator var36 = new org.jsecurity.authc.pam.ModularRealmAuthenticator(var35);
    org.jsecurity.subject.SimplePrincipalCollection var38 = new org.jsecurity.subject.SimplePrincipalCollection((java.util.Collection)var35, "org.jsecurity.authz.UnauthorizedException: org.jsecurity.session.ExpiredSessionException: ");
    java.util.Set var39 = var38.getRealmNames();
    java.io.InputStream var41 = org.jsecurity.util.ClassUtils.getResourceAsStream("");
    java.lang.Object[] var42 = new java.lang.Object[] { var41};
    java.util.List var43 = org.jsecurity.util.CollectionUtils.asList(var42);
    org.jsecurity.authc.pam.ModularRealmAuthenticator var44 = new org.jsecurity.authc.pam.ModularRealmAuthenticator(var43);
    org.jsecurity.subject.SimplePrincipalCollection var46 = new org.jsecurity.subject.SimplePrincipalCollection((java.util.Collection)var43, "org.jsecurity.authz.UnauthorizedException: org.jsecurity.session.ExpiredSessionException: ");
    org.jsecurity.session.UnknownSessionException var51 = new org.jsecurity.session.UnknownSessionException("dd\uFFFD", (java.io.Serializable)100.0f);
    org.jsecurity.session.SessionException var53 = new org.jsecurity.session.SessionException("dd\uFFFD", (java.lang.Throwable)var51, (java.io.Serializable)0);
    org.jsecurity.session.SessionException var54 = new org.jsecurity.session.SessionException("dd\uFFFD", (java.lang.Throwable)var51);
    var46.add((java.lang.Object)var54, "org.jsecurity.config.ConfigurationException: dd\uFFFD");
    java.util.Set var57 = var46.asSet();
    var38.addAll((java.util.Collection)var57, "6464ff");
    var15.setStringPermissions(var57);
    var6.addAll((java.util.Collection)var57, "\uFFFD\uFFFD#\uFFFD\uFFFD.\uFFFD+r\uFFFD\u6959(\uFFFD\uFFFDW\uFFFDq\uFFFD.\uFFFD\uFFFD^jY\uFFFDj\uFFFDa\uFFFD\uFFFD\uFFFDj\u0628\u0000");
    org.jsecurity.authz.UnauthenticatedException var66 = new org.jsecurity.authz.UnauthenticatedException();
    org.jsecurity.config.UnresolveableReferenceException var67 = new org.jsecurity.config.UnresolveableReferenceException("", (java.lang.Throwable)var66);
    org.jsecurity.cache.CacheException var68 = new org.jsecurity.cache.CacheException("org.jsecurity.config.ConfigurationException: dd\uFFFD", (java.lang.Throwable)var66);
    org.jsecurity.authc.SimpleAuthenticationInfo var70 = new org.jsecurity.authc.SimpleAuthenticationInfo((java.lang.Object)"org.jsecurity.config.ConfigurationException: dd\uFFFD", (java.lang.Object)var68, "a2b823b1e72eae2b727289df8a00a89df8a0bab6ad8a89c4c5c7a9b62a270000");
    org.jsecurity.realm.text.TextConfigurationRealm var71 = new org.jsecurity.realm.text.TextConfigurationRealm();
    java.io.InputStream var73 = org.jsecurity.util.ClassUtils.getResourceAsStream("");
    java.lang.Object[] var74 = new java.lang.Object[] { var73};
    java.util.List var75 = org.jsecurity.util.CollectionUtils.asList(var74);
    org.jsecurity.authc.pam.ModularRealmAuthenticator var76 = new org.jsecurity.authc.pam.ModularRealmAuthenticator(var75);
    org.jsecurity.subject.SimplePrincipalCollection var78 = new org.jsecurity.subject.SimplePrincipalCollection((java.util.Collection)var75, "org.jsecurity.authz.UnauthorizedException: org.jsecurity.session.ExpiredSessionException: ");
    org.jsecurity.session.UnknownSessionException var83 = new org.jsecurity.session.UnknownSessionException("dd\uFFFD", (java.io.Serializable)100.0f);
    org.jsecurity.session.SessionException var85 = new org.jsecurity.session.SessionException("dd\uFFFD", (java.lang.Throwable)var83, (java.io.Serializable)0);
    org.jsecurity.session.SessionException var86 = new org.jsecurity.session.SessionException("dd\uFFFD", (java.lang.Throwable)var83);
    var78.add((java.lang.Object)var86, "org.jsecurity.config.ConfigurationException: dd\uFFFD");
    var71.onLogout((org.jsecurity.subject.PrincipalCollection)var78);
    org.jsecurity.authc.ExpiredCredentialsException var91 = new org.jsecurity.authc.ExpiredCredentialsException();
    org.jsecurity.session.ExpiredSessionException var92 = new org.jsecurity.session.ExpiredSessionException("", (java.lang.Throwable)var91);
    java.lang.Throwable[] var93 = var92.getSuppressed();
    org.jsecurity.io.ResourceException var94 = new org.jsecurity.io.ResourceException((java.lang.Throwable)var92);
    org.jsecurity.authc.SimpleAuthenticationInfo var95 = new org.jsecurity.authc.SimpleAuthenticationInfo((org.jsecurity.subject.PrincipalCollection)var78, (java.lang.Object)var92);
    var70.merge((org.jsecurity.authc.AuthenticationInfo)var95);
    java.lang.String var97 = var95.toString();
    org.jsecurity.subject.PrincipalCollection var98 = var95.getPrincipals();
    var6.addAll(var98);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var1);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var2);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var3);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var14 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var28);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var29);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var33);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var34);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var35);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var39);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var41);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var42);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var43);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var57);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var73);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var74);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var75);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var93);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var98);

  }

  public void test396() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest6.test396");


    org.jsecurity.authz.UnauthorizedException var2 = new org.jsecurity.authz.UnauthorizedException();
    org.jsecurity.session.SessionException var4 = new org.jsecurity.session.SessionException("", (java.lang.Throwable)var2, (java.io.Serializable)"org.jsecurity.config.ConfigurationException: dd\uFFFD");
    org.jsecurity.session.ExpiredSessionException var5 = new org.jsecurity.session.ExpiredSessionException("", (java.io.Serializable)"");
    org.jsecurity.authz.UnauthorizedException var6 = new org.jsecurity.authz.UnauthorizedException((java.lang.Throwable)var5);
    org.jsecurity.authz.AuthorizationException var7 = new org.jsecurity.authz.AuthorizationException((java.lang.Throwable)var5);
    org.jsecurity.authc.ConcurrentAccessException var8 = new org.jsecurity.authc.ConcurrentAccessException((java.lang.Throwable)var7);
    org.jsecurity.authc.ExcessiveAttemptsException var9 = new org.jsecurity.authc.ExcessiveAttemptsException((java.lang.Throwable)var8);

  }

  public void test397() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest6.test397");


    org.jsecurity.authc.pam.UnsupportedTokenException var0 = new org.jsecurity.authc.pam.UnsupportedTokenException();
    org.jsecurity.authc.UnknownAccountException var1 = new org.jsecurity.authc.UnknownAccountException((java.lang.Throwable)var0);
    org.jsecurity.authc.AccountException var2 = new org.jsecurity.authc.AccountException((java.lang.Throwable)var1);
    org.jsecurity.mgt.DefaultSecurityManager var3 = new org.jsecurity.mgt.DefaultSecurityManager();
    java.io.InputStream var5 = org.jsecurity.util.ClassUtils.getResourceAsStream("");
    java.lang.Object[] var6 = new java.lang.Object[] { var5};
    java.util.List var7 = org.jsecurity.util.CollectionUtils.asList(var6);
    org.jsecurity.authc.pam.ModularRealmAuthenticator var8 = new org.jsecurity.authc.pam.ModularRealmAuthenticator(var7);
    org.jsecurity.authc.pam.AllSuccessfulModularAuthenticationStrategy var9 = new org.jsecurity.authc.pam.AllSuccessfulModularAuthenticationStrategy();
    var8.setModularAuthenticationStrategy((org.jsecurity.authc.pam.ModularAuthenticationStrategy)var9);
    org.jsecurity.authz.SimpleAuthorizationInfo var11 = new org.jsecurity.authz.SimpleAuthorizationInfo();
    var11.addStringPermission("hi!");
    java.io.InputStream var15 = org.jsecurity.util.ClassUtils.getResourceAsStream("");
    java.lang.Object[] var16 = new java.lang.Object[] { var15};
    java.util.List var17 = org.jsecurity.util.CollectionUtils.asList(var16);
    var11.addRoles((java.util.Collection)var17);
    var8.setAuthenticationListeners((java.util.Collection)var17);
    var3.setSessionListeners((java.util.Collection)var17);
    org.jsecurity.realm.text.TextConfigurationRealm var21 = new org.jsecurity.realm.text.TextConfigurationRealm();
    java.io.InputStream var23 = org.jsecurity.util.ClassUtils.getResourceAsStream("");
    java.lang.Object[] var24 = new java.lang.Object[] { var23};
    java.util.List var25 = org.jsecurity.util.CollectionUtils.asList(var24);
    org.jsecurity.authc.pam.ModularRealmAuthenticator var26 = new org.jsecurity.authc.pam.ModularRealmAuthenticator(var25);
    org.jsecurity.subject.SimplePrincipalCollection var28 = new org.jsecurity.subject.SimplePrincipalCollection((java.util.Collection)var25, "org.jsecurity.authz.UnauthorizedException: org.jsecurity.session.ExpiredSessionException: ");
    org.jsecurity.session.UnknownSessionException var33 = new org.jsecurity.session.UnknownSessionException("dd\uFFFD", (java.io.Serializable)100.0f);
    org.jsecurity.session.SessionException var35 = new org.jsecurity.session.SessionException("dd\uFFFD", (java.lang.Throwable)var33, (java.io.Serializable)0);
    org.jsecurity.session.SessionException var36 = new org.jsecurity.session.SessionException("dd\uFFFD", (java.lang.Throwable)var33);
    var28.add((java.lang.Object)var36, "org.jsecurity.config.ConfigurationException: dd\uFFFD");
    var21.onLogout((org.jsecurity.subject.PrincipalCollection)var28);
    org.jsecurity.authc.pam.FirstSuccessfulAuthenticationStrategy var40 = new org.jsecurity.authc.pam.FirstSuccessfulAuthenticationStrategy();
    org.jsecurity.authz.UnauthorizedException var42 = new org.jsecurity.authz.UnauthorizedException("org.jsecurity.config.ConfigurationException: dd\uFFFD");
    java.lang.Throwable[] var43 = var42.getSuppressed();
    java.util.List var44 = org.jsecurity.util.CollectionUtils.asList((java.lang.Object[])var43);
    org.jsecurity.authc.UsernamePasswordToken var45 = new org.jsecurity.authc.UsernamePasswordToken();
    java.lang.String var46 = var45.getUsername();
    java.net.InetAddress var47 = var45.getInetAddress();
    org.jsecurity.authc.AuthenticationInfo var48 = var40.beforeAllAttempts((java.util.Collection)var44, (org.jsecurity.authc.AuthenticationToken)var45);
    boolean[] var49 = var3.hasRoles((org.jsecurity.subject.PrincipalCollection)var28, var44);
    org.jsecurity.codec.CodecException var52 = new org.jsecurity.codec.CodecException("dd\uFFFD");
    org.jsecurity.authc.ConcurrentAccessException var53 = new org.jsecurity.authc.ConcurrentAccessException("org.jsecurity.authz.UnauthorizedException: org.jsecurity.session.ExpiredSessionException: ", (java.lang.Throwable)var52);
    org.jsecurity.subject.SimplePrincipalCollection var55 = new org.jsecurity.subject.SimplePrincipalCollection((java.lang.Object)var52, "");
    java.io.InputStream var57 = org.jsecurity.util.ClassUtils.getResourceAsStream("");
    java.lang.Object[] var58 = new java.lang.Object[] { var57};
    java.util.List var59 = org.jsecurity.util.CollectionUtils.asList(var58);
    org.jsecurity.authc.pam.ModularRealmAuthenticator var60 = new org.jsecurity.authc.pam.ModularRealmAuthenticator(var59);
    var55.addAll((java.util.Collection)var59, "\u0000\u0000");
    var3.setSessionListeners((java.util.Collection)var59);
    org.jsecurity.authc.SimpleAccount var65 = new org.jsecurity.authc.SimpleAccount((java.lang.Object)var2, (java.lang.Object)var3, "ZGT/");
    org.jsecurity.subject.DelegatingSubject var66 = new org.jsecurity.subject.DelegatingSubject((org.jsecurity.mgt.SecurityManager)var3);
    java.io.InputStream var68 = org.jsecurity.util.ClassUtils.getResourceAsStream("");
    java.lang.Object[] var69 = new java.lang.Object[] { var68};
    java.util.List var70 = org.jsecurity.util.CollectionUtils.asList(var69);
    org.jsecurity.authc.pam.ModularRealmAuthenticator var71 = new org.jsecurity.authc.pam.ModularRealmAuthenticator(var70);
    org.jsecurity.subject.SimplePrincipalCollection var73 = new org.jsecurity.subject.SimplePrincipalCollection((java.util.Collection)var70, "org.jsecurity.authz.UnauthorizedException: org.jsecurity.session.ExpiredSessionException: ");
    org.jsecurity.session.UnknownSessionException var78 = new org.jsecurity.session.UnknownSessionException("dd\uFFFD", (java.io.Serializable)100.0f);
    org.jsecurity.session.SessionException var80 = new org.jsecurity.session.SessionException("dd\uFFFD", (java.lang.Throwable)var78, (java.io.Serializable)0);
    org.jsecurity.session.SessionException var81 = new org.jsecurity.session.SessionException("dd\uFFFD", (java.lang.Throwable)var78);
    var73.add((java.lang.Object)var81, "org.jsecurity.config.ConfigurationException: dd\uFFFD");
    java.util.Set var84 = var73.asSet();
    org.jsecurity.session.UnknownSessionException var89 = new org.jsecurity.session.UnknownSessionException("dd\uFFFD", (java.io.Serializable)100.0f);
    org.jsecurity.subject.SubjectException var90 = new org.jsecurity.subject.SubjectException("dd\uFFFD", (java.lang.Throwable)var89);
    org.jsecurity.io.SerializationException var91 = new org.jsecurity.io.SerializationException("", (java.lang.Throwable)var90);
    java.lang.Throwable[] var92 = var90.getSuppressed();
    java.lang.Throwable[] var93 = var90.getSuppressed();
    java.util.Set var94 = org.jsecurity.util.CollectionUtils.asSet((java.lang.Object[])var93);
    boolean var95 = var3.hasAllRoles((org.jsecurity.subject.PrincipalCollection)var73, (java.util.Collection)var94);
    boolean var96 = var73.isEmpty();
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var5);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var6);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var7);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var15);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var16);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var17);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var23);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var24);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var25);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var43);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var44);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var46);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var47);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var48);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var49);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var57);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var58);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var59);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var68);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var69);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var70);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var84);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var92);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var93);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var94);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var95 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var96 == false);

  }

  public void test398() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest6.test398");


    org.jsecurity.realm.activedirectory.ActiveDirectoryRealm var0 = new org.jsecurity.realm.activedirectory.ActiveDirectoryRealm();
    org.jsecurity.authc.credential.Sha256CredentialsMatcher var1 = new org.jsecurity.authc.credential.Sha256CredentialsMatcher();
    var0.setCredentialsMatcher((org.jsecurity.authc.credential.CredentialsMatcher)var1);
    var1.setHashIterations(2);

  }

  public void test399() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest6.test399");


    org.jsecurity.session.ExpiredSessionException var2 = new org.jsecurity.session.ExpiredSessionException((java.io.Serializable)0.0f);
    org.jsecurity.subject.SubjectException var3 = new org.jsecurity.subject.SubjectException("10f5b491-38ac-4c02-8085-950abb026a06", (java.lang.Throwable)var2);
    org.jsecurity.authc.ExpiredCredentialsException var4 = new org.jsecurity.authc.ExpiredCredentialsException((java.lang.Throwable)var2);

  }

  public void test400() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest6.test400");


    char[] var2 = new char[] { };
    org.jsecurity.authc.UsernamePasswordToken var4 = new org.jsecurity.authc.UsernamePasswordToken("hi!", var2, true);
    org.jsecurity.authc.UsernamePasswordToken var5 = new org.jsecurity.authc.UsernamePasswordToken("\u0000\u0000", var2);
    org.jsecurity.session.mgt.SimpleSession var6 = new org.jsecurity.session.mgt.SimpleSession();
    var6.setTimeout((-1L));
    org.jsecurity.session.mgt.SimpleSession var9 = new org.jsecurity.session.mgt.SimpleSession();
    java.util.Date var10 = var9.getLastAccessTime();
    var6.setLastAccessTime(var10);
    java.net.InetAddress var12 = var6.getHostAddress();
    var5.setInetAddress(var12);
    org.jsecurity.session.mgt.SimpleSession var14 = new org.jsecurity.session.mgt.SimpleSession(var12);
    org.jsecurity.session.mgt.SimpleSession var15 = new org.jsecurity.session.mgt.SimpleSession(var12);
    var15.setTimeout(10L);
    java.util.Date var18 = var15.getStartTimestamp();
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var2);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var10);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var12);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var18);

  }

  public void test401() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest6.test401");


    org.jsecurity.session.UnknownSessionException var2 = new org.jsecurity.session.UnknownSessionException("9370bad8-7774-4f3f-9431-c39c9f6aa37d");
    org.jsecurity.config.ConfigurationException var3 = new org.jsecurity.config.ConfigurationException((java.lang.Throwable)var2);
    org.jsecurity.config.UnresolveableReferenceException var4 = new org.jsecurity.config.UnresolveableReferenceException("e3583cd4-368b-434b-a989-aa59c30eca02", (java.lang.Throwable)var2);

  }

  public void test402() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest6.test402");


    org.jsecurity.authz.aop.UserAnnotationMethodInterceptor var0 = new org.jsecurity.authz.aop.UserAnnotationMethodInterceptor();
    org.jsecurity.aop.AnnotationHandler var1 = var0.getHandler();
    org.jsecurity.aop.AnnotationHandler var2 = var0.getHandler();
    java.lang.Class var3 = var2.getAnnotationClass();
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var1);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var2);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var3);

  }

  public void test403() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest6.test403");


    org.jsecurity.realm.text.TextConfigurationRealm var0 = new org.jsecurity.realm.text.TextConfigurationRealm();
    java.io.InputStream var2 = org.jsecurity.util.ClassUtils.getResourceAsStream("");
    java.lang.Object[] var3 = new java.lang.Object[] { var2};
    java.util.List var4 = org.jsecurity.util.CollectionUtils.asList(var3);
    org.jsecurity.authc.pam.ModularRealmAuthenticator var5 = new org.jsecurity.authc.pam.ModularRealmAuthenticator(var4);
    org.jsecurity.subject.SimplePrincipalCollection var7 = new org.jsecurity.subject.SimplePrincipalCollection((java.util.Collection)var4, "org.jsecurity.authz.UnauthorizedException: org.jsecurity.session.ExpiredSessionException: ");
    org.jsecurity.session.UnknownSessionException var12 = new org.jsecurity.session.UnknownSessionException("dd\uFFFD", (java.io.Serializable)100.0f);
    org.jsecurity.session.SessionException var14 = new org.jsecurity.session.SessionException("dd\uFFFD", (java.lang.Throwable)var12, (java.io.Serializable)0);
    org.jsecurity.session.SessionException var15 = new org.jsecurity.session.SessionException("dd\uFFFD", (java.lang.Throwable)var12);
    var7.add((java.lang.Object)var15, "org.jsecurity.config.ConfigurationException: dd\uFFFD");
    var0.onLogout((org.jsecurity.subject.PrincipalCollection)var7);
    org.jsecurity.cache.HashtableCacheManager var19 = new org.jsecurity.cache.HashtableCacheManager();
    org.jsecurity.cache.Cache var21 = var19.getCache("\u0000\u0000");
    var0.setAuthorizationCache(var21);
    org.jsecurity.codec.CodecException var25 = new org.jsecurity.codec.CodecException("dd\uFFFD");
    org.jsecurity.authc.ConcurrentAccessException var26 = new org.jsecurity.authc.ConcurrentAccessException("org.jsecurity.authz.UnauthorizedException: org.jsecurity.session.ExpiredSessionException: ", (java.lang.Throwable)var25);
    org.jsecurity.subject.SimplePrincipalCollection var28 = new org.jsecurity.subject.SimplePrincipalCollection((java.lang.Object)var25, "");
    var0.onLogout((org.jsecurity.subject.PrincipalCollection)var28);
    boolean var31 = var0.accountExists("4ef713cf-5dcd-4003-b930-c7cb38661a43");
    org.jsecurity.authz.ModularRealmAuthorizer var32 = new org.jsecurity.authz.ModularRealmAuthorizer();
    java.io.InputStream var34 = org.jsecurity.util.ClassUtils.getResourceAsStream("");
    java.lang.Object[] var35 = new java.lang.Object[] { var34};
    java.util.List var36 = org.jsecurity.util.CollectionUtils.asList(var35);
    org.jsecurity.authc.pam.ModularRealmAuthenticator var37 = new org.jsecurity.authc.pam.ModularRealmAuthenticator(var36);
    org.jsecurity.subject.SimplePrincipalCollection var39 = new org.jsecurity.subject.SimplePrincipalCollection((java.util.Collection)var36, "org.jsecurity.authz.UnauthorizedException: org.jsecurity.session.ExpiredSessionException: ");
    org.jsecurity.session.UnknownSessionException var44 = new org.jsecurity.session.UnknownSessionException("dd\uFFFD", (java.io.Serializable)100.0f);
    org.jsecurity.session.SessionException var46 = new org.jsecurity.session.SessionException("dd\uFFFD", (java.lang.Throwable)var44, (java.io.Serializable)0);
    org.jsecurity.session.SessionException var47 = new org.jsecurity.session.SessionException("dd\uFFFD", (java.lang.Throwable)var44);
    var39.add((java.lang.Object)var47, "org.jsecurity.config.ConfigurationException: dd\uFFFD");
    java.util.Set var50 = var39.asSet();
    var32.setRealms((java.util.Collection)var50);
    org.jsecurity.authz.UnauthorizedException var53 = new org.jsecurity.authz.UnauthorizedException("org.jsecurity.config.ConfigurationException: dd\uFFFD");
    java.lang.Throwable[] var54 = var53.getSuppressed();
    java.util.Set var55 = org.jsecurity.util.CollectionUtils.asSet((java.lang.Object[])var54);
    var32.setRealms((java.util.Collection)var55);
    org.jsecurity.realm.text.TextConfigurationRealm var57 = new org.jsecurity.realm.text.TextConfigurationRealm();
    org.jsecurity.realm.text.TextConfigurationRealm var58 = new org.jsecurity.realm.text.TextConfigurationRealm();
    java.io.InputStream var60 = org.jsecurity.util.ClassUtils.getResourceAsStream("");
    java.lang.Object[] var61 = new java.lang.Object[] { var60};
    java.util.List var62 = org.jsecurity.util.CollectionUtils.asList(var61);
    org.jsecurity.authc.pam.ModularRealmAuthenticator var63 = new org.jsecurity.authc.pam.ModularRealmAuthenticator(var62);
    org.jsecurity.subject.SimplePrincipalCollection var65 = new org.jsecurity.subject.SimplePrincipalCollection((java.util.Collection)var62, "org.jsecurity.authz.UnauthorizedException: org.jsecurity.session.ExpiredSessionException: ");
    org.jsecurity.session.UnknownSessionException var70 = new org.jsecurity.session.UnknownSessionException("dd\uFFFD", (java.io.Serializable)100.0f);
    org.jsecurity.session.SessionException var72 = new org.jsecurity.session.SessionException("dd\uFFFD", (java.lang.Throwable)var70, (java.io.Serializable)0);
    org.jsecurity.session.SessionException var73 = new org.jsecurity.session.SessionException("dd\uFFFD", (java.lang.Throwable)var70);
    var65.add((java.lang.Object)var73, "org.jsecurity.config.ConfigurationException: dd\uFFFD");
    var58.onLogout((org.jsecurity.subject.PrincipalCollection)var65);
    java.util.Collection var78 = var65.fromRealm("\u0000\u0000\u0000");
    var57.onLogout((org.jsecurity.subject.PrincipalCollection)var65);
    org.jsecurity.authz.aop.RoleAnnotationMethodInterceptor var80 = new org.jsecurity.authz.aop.RoleAnnotationMethodInterceptor();
    org.jsecurity.aop.AnnotationHandler var81 = var80.getHandler();
    java.lang.Class var82 = var81.getAnnotationClass();
    java.util.Collection var83 = var65.byType(var82);
    org.jsecurity.realm.jndi.JndiRealmFactory var84 = new org.jsecurity.realm.jndi.JndiRealmFactory();
    org.jsecurity.authc.ExpiredCredentialsException var86 = new org.jsecurity.authc.ExpiredCredentialsException();
    org.jsecurity.session.ExpiredSessionException var87 = new org.jsecurity.session.ExpiredSessionException("", (java.lang.Throwable)var86);
    java.lang.Throwable[] var88 = var87.getSuppressed();
    java.util.List var89 = org.jsecurity.util.CollectionUtils.asList((java.lang.Object[])var88);
    var84.setJndiNames((java.util.Collection)var89);
    var32.checkPermissions((org.jsecurity.subject.PrincipalCollection)var65, (java.util.Collection)var89);
    var0.onLogout((org.jsecurity.subject.PrincipalCollection)var65);
    boolean var94 = var0.accountExists("61cd3121-6351-4261-bc0c-ec1f2870885e");
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var2);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var3);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var4);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var21);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var31 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var34);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var35);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var36);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var50);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var54);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var55);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var60);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var61);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var62);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var78);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var81);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var82);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var83);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var88);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var89);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var94 == false);

  }

  public void test404() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest6.test404");


    org.jsecurity.realm.SimpleAccountRealm var0 = new org.jsecurity.realm.SimpleAccountRealm();
    org.jsecurity.realm.text.PropertiesRealm var1 = new org.jsecurity.realm.text.PropertiesRealm();
    java.lang.String var2 = var1.getUserDefinitions();
    org.jsecurity.codec.CodecException var5 = new org.jsecurity.codec.CodecException("dd\uFFFD");
    org.jsecurity.authc.ConcurrentAccessException var6 = new org.jsecurity.authc.ConcurrentAccessException("org.jsecurity.authz.UnauthorizedException: org.jsecurity.session.ExpiredSessionException: ", (java.lang.Throwable)var5);
    org.jsecurity.subject.SimplePrincipalCollection var8 = new org.jsecurity.subject.SimplePrincipalCollection((java.lang.Object)var5, "");
    java.io.InputStream var10 = org.jsecurity.util.ClassUtils.getResourceAsStream("");
    java.lang.Object[] var11 = new java.lang.Object[] { var10};
    java.util.List var12 = org.jsecurity.util.CollectionUtils.asList(var11);
    org.jsecurity.authc.pam.ModularRealmAuthenticator var13 = new org.jsecurity.authc.pam.ModularRealmAuthenticator(var12);
    var8.addAll((java.util.Collection)var12, "\u0000\u0000");
    java.io.InputStream var17 = org.jsecurity.util.ClassUtils.getResourceAsStream("");
    java.lang.Object[] var18 = new java.lang.Object[] { var17};
    java.util.List var19 = org.jsecurity.util.CollectionUtils.asList(var18);
    org.jsecurity.authc.pam.ModularRealmAuthenticator var20 = new org.jsecurity.authc.pam.ModularRealmAuthenticator(var19);
    var8.addAll((java.util.Collection)var19, "\u0000\u0000");
    var1.onLogout((org.jsecurity.subject.PrincipalCollection)var8);
    java.util.Set var24 = var8.getRealmNames();
    var8.clear();
    org.jsecurity.realm.jndi.JndiRealmFactory var26 = new org.jsecurity.realm.jndi.JndiRealmFactory();
    org.jsecurity.authc.ExpiredCredentialsException var28 = new org.jsecurity.authc.ExpiredCredentialsException();
    org.jsecurity.session.ExpiredSessionException var29 = new org.jsecurity.session.ExpiredSessionException("", (java.lang.Throwable)var28);
    java.lang.Throwable[] var30 = var29.getSuppressed();
    java.util.List var31 = org.jsecurity.util.CollectionUtils.asList((java.lang.Object[])var30);
    var26.setJndiNames((java.util.Collection)var31);
    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      boolean var33 = var0.isPermittedAll((org.jsecurity.subject.PrincipalCollection)var8, (java.util.Collection)var31);
      fail("Expected exception of type java.util.NoSuchElementException");
    } catch (java.util.NoSuchElementException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var2);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var10);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var11);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var12);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var17);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var18);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var19);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var24);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var30);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var31);

  }

  public void test405() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest6.test405");


    org.jsecurity.crypto.hash.Sha512Hash var1 = org.jsecurity.crypto.hash.Sha512Hash.fromBase64String("org.jsecurity.config.ConfigurationException: dd\uFFFD");
    byte[] var2 = var1.getBytes();
    java.lang.String var3 = var1.toString();
    byte[] var4 = var1.getBytes();
    char[] var5 = org.jsecurity.codec.CodecSupport.toChars(var4);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var1);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var2);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var3 + "' != '" + "a2b823b1e72eae2b727289df8a00a89df8a0bab6ad8a89c4c5c7a9b62a270000"+ "'", var3.equals("a2b823b1e72eae2b727289df8a00a89df8a0bab6ad8a89c4c5c7a9b62a270000"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var4);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var5);

  }

  public void test406() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest6.test406");


    org.jsecurity.authc.pam.FirstSuccessfulAuthenticationStrategy var0 = new org.jsecurity.authc.pam.FirstSuccessfulAuthenticationStrategy();
    org.jsecurity.authz.UnauthorizedException var2 = new org.jsecurity.authz.UnauthorizedException("org.jsecurity.config.ConfigurationException: dd\uFFFD");
    java.lang.Throwable[] var3 = var2.getSuppressed();
    java.util.List var4 = org.jsecurity.util.CollectionUtils.asList((java.lang.Object[])var3);
    org.jsecurity.authc.UsernamePasswordToken var5 = new org.jsecurity.authc.UsernamePasswordToken();
    java.lang.String var6 = var5.getUsername();
    java.net.InetAddress var7 = var5.getInetAddress();
    org.jsecurity.authc.AuthenticationInfo var8 = var0.beforeAllAttempts((java.util.Collection)var4, (org.jsecurity.authc.AuthenticationToken)var5);
    org.jsecurity.realm.SimpleAccountRealm var10 = new org.jsecurity.realm.SimpleAccountRealm("hi!");
    java.lang.Class var11 = var10.getAuthenticationTokenClass();
    java.util.Collection var12 = org.jsecurity.util.CollectionUtils.emptyCollection(var11);
    org.jsecurity.authc.pam.AllSuccessfulModularAuthenticationStrategy var13 = new org.jsecurity.authc.pam.AllSuccessfulModularAuthenticationStrategy();
    char[] var15 = new char[] { };
    org.jsecurity.authc.UsernamePasswordToken var17 = new org.jsecurity.authc.UsernamePasswordToken("hi!", var15, true);
    org.jsecurity.authc.SimpleAccount var18 = new org.jsecurity.authc.SimpleAccount();
    var18.setCredentialsExpired(false);
    boolean var21 = var18.isLocked();
    org.jsecurity.authc.AuthenticationInfo var22 = var13.afterAllAttempts((org.jsecurity.authc.AuthenticationToken)var17, (org.jsecurity.authc.AuthenticationInfo)var18);
    org.jsecurity.authc.AuthenticationInfo var23 = var0.beforeAllAttempts(var12, (org.jsecurity.authc.AuthenticationToken)var17);
    org.jsecurity.session.mgt.eis.MemorySessionDAO var24 = new org.jsecurity.session.mgt.eis.MemorySessionDAO();
    org.jsecurity.cache.Cache var25 = var24.getActiveSessionsCache();
    org.jsecurity.session.mgt.SimpleSession var26 = new org.jsecurity.session.mgt.SimpleSession();
    var26.setTimeout((-1L));
    org.jsecurity.session.mgt.SimpleSession var29 = new org.jsecurity.session.mgt.SimpleSession();
    java.util.Date var30 = var29.getLastAccessTime();
    var26.setLastAccessTime(var30);
    var24.update((org.jsecurity.session.Session)var26);
    byte[] var38 = new byte[] { (byte)100, (byte)100, (byte)(-1)};
    java.lang.String var39 = org.jsecurity.codec.CodecSupport.toString(var38);
    byte[] var40 = org.jsecurity.codec.Base64.encode(var38);
    char[] var41 = org.jsecurity.codec.CodecSupport.toChars(var40);
    org.jsecurity.authc.UsernamePasswordToken var43 = new org.jsecurity.authc.UsernamePasswordToken("org.jsecurity.realm.SimpleAccountRealm-55-authorization", var41, false);
    char[] var44 = var43.getPassword();
    org.jsecurity.session.mgt.SimpleSession var46 = new org.jsecurity.session.mgt.SimpleSession();
    var46.setTimeout((-1L));
    org.jsecurity.session.mgt.SimpleSession var49 = new org.jsecurity.session.mgt.SimpleSession();
    java.util.Date var50 = var49.getLastAccessTime();
    var46.setLastAccessTime(var50);
    java.net.InetAddress var52 = var46.getHostAddress();
    org.jsecurity.authc.UsernamePasswordToken var53 = new org.jsecurity.authc.UsernamePasswordToken("classpath:org/jsecurity/cache/ehcache/ehcache.xml", var44, false, var52);
    org.jsecurity.session.mgt.SimpleSession var54 = new org.jsecurity.session.mgt.SimpleSession(var52);
    var26.setHostAddress(var52);
    var17.setInetAddress(var52);
    char[] var57 = var17.getPassword();
    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      byte[] var59 = org.jsecurity.codec.CodecSupport.toBytes(var57, "org.jsecurity.realm.SimpleAccountRealm-173-authorization");
      fail("Expected exception of type org.jsecurity.codec.CodecException");
    } catch (org.jsecurity.codec.CodecException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var3);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var4);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var6);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var7);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var8);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var11);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var12);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var15);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var21 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var22);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var23);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var25);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var30);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var38);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var39 + "' != '" + "dd\uFFFD"+ "'", var39.equals("dd\uFFFD"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var40);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var41);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var44);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var50);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var52);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var57);

  }

  public void test407() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest6.test407");


    org.jsecurity.crypto.BlowfishCipher var0 = new org.jsecurity.crypto.BlowfishCipher();
    byte[] var4 = new byte[] { (byte)100, (byte)100, (byte)(-1)};
    java.lang.String var5 = org.jsecurity.codec.CodecSupport.toString(var4);
    byte[] var7 = org.jsecurity.codec.Base64.decode("hi!");
    byte[] var8 = var0.encrypt(var4, var7);
    java.lang.String var9 = org.jsecurity.codec.Base64.decodeToString(var4);
    byte[] var10 = org.jsecurity.codec.Base64.encode(var4);
    byte[] var11 = org.jsecurity.codec.Base64.encodeChunked(var4);
    java.lang.String var12 = org.jsecurity.codec.Hex.encodeToString(var11);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var4);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var5 + "' != '" + "dd\uFFFD"+ "'", var5.equals("dd\uFFFD"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var7);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var8);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var9 + "' != '" + "\u0000\u0000"+ "'", var9.equals("\u0000\u0000"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var10);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var11);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var12 + "' != '" + "5a47542f0d0a"+ "'", var12.equals("5a47542f0d0a"));

  }

  public void test408() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest6.test408");


    org.jsecurity.session.mgt.DelegatingSession var0 = new org.jsecurity.session.mgt.DelegatingSession();
    java.io.Serializable var1 = var0.getId();
    org.jsecurity.session.mgt.SessionManager var2 = var0.getSessionManager();
    org.jsecurity.session.mgt.SimpleSession var3 = new org.jsecurity.session.mgt.SimpleSession();
    org.jsecurity.session.UnknownSessionException var7 = new org.jsecurity.session.UnknownSessionException("dd\uFFFD", (java.io.Serializable)100.0f);
    org.jsecurity.session.SessionException var9 = new org.jsecurity.session.SessionException("dd\uFFFD", (java.lang.Throwable)var7, (java.io.Serializable)0);
    org.jsecurity.authc.AccountException var10 = new org.jsecurity.authc.AccountException((java.lang.Throwable)var7);
    var3.setId((java.io.Serializable)var7);
    var3.setTimeout((-1L));
    org.jsecurity.session.mgt.SimpleSession var14 = new org.jsecurity.session.mgt.SimpleSession();
    var14.setTimeout((-1L));
    org.jsecurity.session.mgt.SimpleSession var17 = new org.jsecurity.session.mgt.SimpleSession();
    var17.setTimeout((-1L));
    org.jsecurity.session.mgt.SimpleSession var20 = new org.jsecurity.session.mgt.SimpleSession();
    java.util.Date var21 = var20.getLastAccessTime();
    var17.setLastAccessTime(var21);
    org.jsecurity.session.mgt.SimpleSession var23 = new org.jsecurity.session.mgt.SimpleSession();
    java.util.Date var24 = var23.getLastAccessTime();
    var17.setStopTimestamp(var24);
    var14.setStartTimestamp(var24);
    var3.setLastAccessTime(var24);
    var0.setId((java.io.Serializable)var24);
    org.jsecurity.session.mgt.SessionManager var29 = var0.getSessionManager();
    java.io.Serializable var30 = var0.getId();
    var0.setId((java.io.Serializable)"947c1ad9-ebd5-4704-882a-a14f51bda9a4");
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var1);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var2);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var21);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var24);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var29);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var30);

  }

  public void test409() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest6.test409");


    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      java.lang.Class var1 = org.jsecurity.util.ClassUtils.forName("org.jsecurity.authc.LockedAccountException: org.jsecurity.session.ExpiredSessionException: ");
      fail("Expected exception of type org.jsecurity.util.UnknownClassException");
    } catch (org.jsecurity.util.UnknownClassException e) {
      // Expected exception.
    }

  }

  public void test410() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest6.test410");


    org.jsecurity.session.UnknownSessionException var6 = new org.jsecurity.session.UnknownSessionException("dd\uFFFD", (java.io.Serializable)100.0f);
    org.jsecurity.subject.SubjectException var7 = new org.jsecurity.subject.SubjectException("dd\uFFFD", (java.lang.Throwable)var6);
    org.jsecurity.session.InvalidSessionException var8 = new org.jsecurity.session.InvalidSessionException("hi!", (java.lang.Throwable)var7);
    org.jsecurity.session.SessionException var9 = new org.jsecurity.session.SessionException("dd\uFFFD", (java.lang.Throwable)var7);
    org.jsecurity.authc.ConcurrentAccessException var10 = new org.jsecurity.authc.ConcurrentAccessException((java.lang.Throwable)var7);
    org.jsecurity.session.StoppedSessionException var11 = new org.jsecurity.session.StoppedSessionException("\u0000\u0000", (java.lang.Throwable)var10);
    java.io.Serializable var12 = var11.getSessionId();
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var12);

  }

  public void test411() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest6.test411");


    org.jsecurity.cache.ehcache.EhCacheManager var0 = new org.jsecurity.cache.ehcache.EhCacheManager();
    var0.init();
    java.lang.String var2 = var0.getCacheManagerConfigFile();
    org.jsecurity.cache.Cache var4 = var0.getCache("7ac52728-a594-485e-8fa4-b9d179454b9f");
    org.jsecurity.cache.Cache var6 = var0.getCache("ea22ff1e-72cd-4683-8e5e-82a2db5ff10c");
    var0.init();
    org.jsecurity.session.mgt.eis.MemorySessionDAO var8 = new org.jsecurity.session.mgt.eis.MemorySessionDAO();
    org.jsecurity.cache.Cache var9 = var8.getActiveSessionsCache();
    org.jsecurity.cache.CacheManager var10 = var8.getCacheManager();
    org.jsecurity.cache.HashtableCacheManager var11 = new org.jsecurity.cache.HashtableCacheManager();
    org.jsecurity.cache.Cache var13 = var11.getCache("\u0000\u0000");
    var8.setActiveSessionsCache(var13);
    java.io.InputStream var16 = org.jsecurity.util.ClassUtils.getResourceAsStream("");
    java.lang.Object[] var17 = new java.lang.Object[] { var16};
    java.util.List var18 = org.jsecurity.util.CollectionUtils.asList(var17);
    org.jsecurity.authc.pam.ModularRealmAuthenticator var19 = new org.jsecurity.authc.pam.ModularRealmAuthenticator(var18);
    org.jsecurity.authc.pam.AllSuccessfulModularAuthenticationStrategy var20 = new org.jsecurity.authc.pam.AllSuccessfulModularAuthenticationStrategy();
    var19.setModularAuthenticationStrategy((org.jsecurity.authc.pam.ModularAuthenticationStrategy)var20);
    org.jsecurity.authz.SimpleAuthorizationInfo var22 = new org.jsecurity.authz.SimpleAuthorizationInfo();
    var22.addStringPermission("hi!");
    java.io.InputStream var26 = org.jsecurity.util.ClassUtils.getResourceAsStream("");
    java.lang.Object[] var27 = new java.lang.Object[] { var26};
    java.util.List var28 = org.jsecurity.util.CollectionUtils.asList(var27);
    var22.addRoles((java.util.Collection)var28);
    var19.setAuthenticationListeners((java.util.Collection)var28);
    org.jsecurity.realm.activedirectory.ActiveDirectoryRealm var31 = new org.jsecurity.realm.activedirectory.ActiveDirectoryRealm();
    var31.setPrincipalSuffix("");
    var19.setRealm((org.jsecurity.realm.Realm)var31);
    org.jsecurity.cache.HashtableCacheManager var35 = new org.jsecurity.cache.HashtableCacheManager();
    org.jsecurity.cache.Cache var37 = var35.getCache("\u0000\u0000");
    var31.setAuthorizationCache(var37);
    var8.setActiveSessionsCache(var37);
    org.jsecurity.session.mgt.DefaultSessionManager var40 = new org.jsecurity.session.mgt.DefaultSessionManager();
    org.jsecurity.session.mgt.eis.MemorySessionDAO var41 = new org.jsecurity.session.mgt.eis.MemorySessionDAO();
    org.jsecurity.cache.Cache var42 = var41.getActiveSessionsCache();
    org.jsecurity.cache.CacheManager var43 = var41.getCacheManager();
    org.jsecurity.cache.HashtableCacheManager var44 = new org.jsecurity.cache.HashtableCacheManager();
    org.jsecurity.cache.Cache var46 = var44.getCache("\u0000\u0000");
    var41.setActiveSessionsCache(var46);
    java.io.InputStream var49 = org.jsecurity.util.ClassUtils.getResourceAsStream("");
    java.lang.Object[] var50 = new java.lang.Object[] { var49};
    java.util.List var51 = org.jsecurity.util.CollectionUtils.asList(var50);
    org.jsecurity.authc.pam.ModularRealmAuthenticator var52 = new org.jsecurity.authc.pam.ModularRealmAuthenticator(var51);
    org.jsecurity.authc.pam.AllSuccessfulModularAuthenticationStrategy var53 = new org.jsecurity.authc.pam.AllSuccessfulModularAuthenticationStrategy();
    var52.setModularAuthenticationStrategy((org.jsecurity.authc.pam.ModularAuthenticationStrategy)var53);
    org.jsecurity.authz.SimpleAuthorizationInfo var55 = new org.jsecurity.authz.SimpleAuthorizationInfo();
    var55.addStringPermission("hi!");
    java.io.InputStream var59 = org.jsecurity.util.ClassUtils.getResourceAsStream("");
    java.lang.Object[] var60 = new java.lang.Object[] { var59};
    java.util.List var61 = org.jsecurity.util.CollectionUtils.asList(var60);
    var55.addRoles((java.util.Collection)var61);
    var52.setAuthenticationListeners((java.util.Collection)var61);
    org.jsecurity.realm.activedirectory.ActiveDirectoryRealm var64 = new org.jsecurity.realm.activedirectory.ActiveDirectoryRealm();
    var64.setPrincipalSuffix("");
    var52.setRealm((org.jsecurity.realm.Realm)var64);
    org.jsecurity.cache.HashtableCacheManager var68 = new org.jsecurity.cache.HashtableCacheManager();
    org.jsecurity.cache.Cache var70 = var68.getCache("\u0000\u0000");
    var64.setAuthorizationCache(var70);
    var41.setActiveSessionsCache(var70);
    org.jsecurity.session.mgt.SimpleSession var73 = new org.jsecurity.session.mgt.SimpleSession();
    java.io.Serializable var74 = var41.create((org.jsecurity.session.Session)var73);
    var40.setSessionDAO((org.jsecurity.session.mgt.eis.SessionDAO)var41);
    org.jsecurity.cache.ehcache.EhCacheManager var76 = new org.jsecurity.cache.ehcache.EhCacheManager();
    net.sf.ehcache.CacheManager var77 = var76.getCacheManager();
    var76.destroy();
    java.lang.String var79 = var76.getCacheManagerConfigFile();
    java.lang.String var80 = var76.getCacheManagerConfigFile();
    var40.setCacheManager((org.jsecurity.cache.CacheManager)var76);
    var8.setCacheManager((org.jsecurity.cache.CacheManager)var76);
    var76.setCacheManagerConfigFile("9d388eff-106e-47d9-8180-843fdfd13dce");
    java.lang.String var85 = var76.getCacheManagerConfigFile();
    org.jsecurity.cache.ehcache.EhCacheManager var86 = new org.jsecurity.cache.ehcache.EhCacheManager();
    var86.init();
    var86.setCacheManagerConfigFile("b6a77f71-73c4-466a-903e-72fc5968f9ac");
    net.sf.ehcache.CacheManager var90 = var86.getCacheManager();
    var76.setCacheManager(var90);
    var0.setCacheManager(var90);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var2 + "' != '" + "classpath:org/jsecurity/cache/ehcache/ehcache.xml"+ "'", var2.equals("classpath:org/jsecurity/cache/ehcache/ehcache.xml"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var4);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var6);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var9);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var10);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var13);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var16);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var17);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var18);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var26);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var27);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var28);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var37);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var42);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var43);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var46);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var49);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var50);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var51);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var59);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var60);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var61);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var70);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var74 + "' != '" + "97a45c60-8248-4ecc-bfd4-2f5bd91f04d5"+ "'", var74.equals("97a45c60-8248-4ecc-bfd4-2f5bd91f04d5"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var77);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var79 + "' != '" + "classpath:org/jsecurity/cache/ehcache/ehcache.xml"+ "'", var79.equals("classpath:org/jsecurity/cache/ehcache/ehcache.xml"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var80 + "' != '" + "classpath:org/jsecurity/cache/ehcache/ehcache.xml"+ "'", var80.equals("classpath:org/jsecurity/cache/ehcache/ehcache.xml"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var85 + "' != '" + "9d388eff-106e-47d9-8180-843fdfd13dce"+ "'", var85.equals("9d388eff-106e-47d9-8180-843fdfd13dce"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var90);

  }

  public void test412() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest6.test412");


    org.jsecurity.cache.HashtableCache var1 = new org.jsecurity.cache.HashtableCache("783ccd31-48a8-42dd-890f-df885a7baaff");
    java.lang.String var2 = var1.toString();
    java.util.Set var3 = var1.values();
    java.util.Set var4 = var1.values();
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var2 + "' != '" + "HashtableCache [783ccd31-48a8-42dd-890f-df885a7baaff]"+ "'", var2.equals("HashtableCache [783ccd31-48a8-42dd-890f-df885a7baaff]"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var3);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var4);

  }

  public void test413() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest6.test413");


    org.jsecurity.io.ResourceException var6 = new org.jsecurity.io.ResourceException("hi!");
    org.jsecurity.codec.CodecException var7 = new org.jsecurity.codec.CodecException((java.lang.Throwable)var6);
    org.jsecurity.JSecurityException var8 = new org.jsecurity.JSecurityException("a2b823b1e72eae2b727289df8a00a89df8a0bab6ad8a89c4c5c7a9b62a270000", (java.lang.Throwable)var6);
    org.jsecurity.authc.LockedAccountException var9 = new org.jsecurity.authc.LockedAccountException("a2b823b1e72eae2b727289df8a00a89df8a0bab6ad8a89c4c5c7a9b62a270000", (java.lang.Throwable)var8);
    org.jsecurity.session.InvalidSessionException var10 = new org.jsecurity.session.InvalidSessionException("org.jsecurity.authz.UnauthorizedException: org.jsecurity.session.ExpiredSessionException: ", (java.lang.Throwable)var9);
    org.jsecurity.authc.AccountException var11 = new org.jsecurity.authc.AccountException("org.jsecurity.realm.text.PropertiesRealm_2075", (java.lang.Throwable)var9);
    org.jsecurity.session.SessionException var12 = new org.jsecurity.session.SessionException("885fda6e-9dba-4444-95b1-0ecdf18b4020", (java.lang.Throwable)var9);

  }

  public void test414() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest6.test414");


    java.io.InputStream var1 = org.jsecurity.util.ClassUtils.getResourceAsStream("");
    java.lang.Object[] var2 = new java.lang.Object[] { var1};
    java.util.List var3 = org.jsecurity.util.CollectionUtils.asList(var2);
    org.jsecurity.authc.pam.ModularRealmAuthenticator var4 = new org.jsecurity.authc.pam.ModularRealmAuthenticator(var3);
    org.jsecurity.authc.pam.AllSuccessfulModularAuthenticationStrategy var5 = new org.jsecurity.authc.pam.AllSuccessfulModularAuthenticationStrategy();
    var4.setModularAuthenticationStrategy((org.jsecurity.authc.pam.ModularAuthenticationStrategy)var5);
    org.jsecurity.authz.SimpleAuthorizationInfo var7 = new org.jsecurity.authz.SimpleAuthorizationInfo();
    var7.addStringPermission("hi!");
    java.io.InputStream var11 = org.jsecurity.util.ClassUtils.getResourceAsStream("");
    java.lang.Object[] var12 = new java.lang.Object[] { var11};
    java.util.List var13 = org.jsecurity.util.CollectionUtils.asList(var12);
    var7.addRoles((java.util.Collection)var13);
    var4.setAuthenticationListeners((java.util.Collection)var13);
    org.jsecurity.realm.activedirectory.ActiveDirectoryRealm var16 = new org.jsecurity.realm.activedirectory.ActiveDirectoryRealm();
    var16.setPrincipalSuffix("");
    var4.setRealm((org.jsecurity.realm.Realm)var16);
    org.jsecurity.authc.pam.FirstSuccessfulAuthenticationStrategy var20 = new org.jsecurity.authc.pam.FirstSuccessfulAuthenticationStrategy();
    org.jsecurity.authz.UnauthorizedException var22 = new org.jsecurity.authz.UnauthorizedException("org.jsecurity.config.ConfigurationException: dd\uFFFD");
    java.lang.Throwable[] var23 = var22.getSuppressed();
    java.util.List var24 = org.jsecurity.util.CollectionUtils.asList((java.lang.Object[])var23);
    org.jsecurity.authc.UsernamePasswordToken var25 = new org.jsecurity.authc.UsernamePasswordToken();
    java.lang.String var26 = var25.getUsername();
    java.net.InetAddress var27 = var25.getInetAddress();
    org.jsecurity.authc.AuthenticationInfo var28 = var20.beforeAllAttempts((java.util.Collection)var24, (org.jsecurity.authc.AuthenticationToken)var25);
    var4.setModularAuthenticationStrategy((org.jsecurity.authc.pam.ModularAuthenticationStrategy)var20);
    org.jsecurity.realm.activedirectory.ActiveDirectoryRealm var30 = new org.jsecurity.realm.activedirectory.ActiveDirectoryRealm();
    var30.init();
    var30.setSystemPassword("dd\uFFFD");
    var4.setRealm((org.jsecurity.realm.Realm)var30);
    var30.setPrincipalSuffix("6464ff");
    java.io.InputStream var38 = org.jsecurity.util.ClassUtils.getResourceAsStream("");
    java.lang.Object[] var39 = new java.lang.Object[] { var38};
    java.util.List var40 = org.jsecurity.util.CollectionUtils.asList(var39);
    org.jsecurity.authc.pam.ModularRealmAuthenticator var41 = new org.jsecurity.authc.pam.ModularRealmAuthenticator(var40);
    org.jsecurity.subject.SimplePrincipalCollection var43 = new org.jsecurity.subject.SimplePrincipalCollection((java.util.Collection)var40, "org.jsecurity.authz.UnauthorizedException: org.jsecurity.session.ExpiredSessionException: ");
    java.util.List var44 = var43.asList();
    org.jsecurity.realm.activedirectory.ActiveDirectoryRealm var46 = new org.jsecurity.realm.activedirectory.ActiveDirectoryRealm();
    org.jsecurity.authc.credential.Sha256CredentialsMatcher var47 = new org.jsecurity.authc.credential.Sha256CredentialsMatcher();
    var46.setCredentialsMatcher((org.jsecurity.authc.credential.CredentialsMatcher)var47);
    java.lang.String var49 = var46.getAuthorizationCacheName();
    var46.setPrincipalSuffix("org.jsecurity.config.ConfigurationException: dd\uFFFD");
    org.jsecurity.authz.permission.PermissionResolver var52 = var46.getPermissionResolver();
    java.util.Set var53 = org.jsecurity.util.PermissionUtils.resolveDelimitedPermissions("NfxhYN7ItBfRAmDBmprtU73ghfEEPpcDJrHPkZ06wiY=", var52);
    var43.addAll((java.util.Collection)var53, "cff098b5-6d79-4f6d-93d3-148185d0b987");
    org.jsecurity.authz.aop.GuestAnnotationHandler var56 = new org.jsecurity.authz.aop.GuestAnnotationHandler();
    java.lang.Class var57 = var56.getAnnotationClass();
    java.lang.Object var58 = var43.oneByType(var57);
    var30.setAuthenticationTokenClass(var57);
    org.jsecurity.realm.activedirectory.ActiveDirectoryRealm var60 = new org.jsecurity.realm.activedirectory.ActiveDirectoryRealm();
    org.jsecurity.authc.credential.Sha256CredentialsMatcher var61 = new org.jsecurity.authc.credential.Sha256CredentialsMatcher();
    var60.setCredentialsMatcher((org.jsecurity.authc.credential.CredentialsMatcher)var61);
    org.jsecurity.realm.activedirectory.ActiveDirectoryRealm var63 = new org.jsecurity.realm.activedirectory.ActiveDirectoryRealm();
    org.jsecurity.authc.credential.Sha256CredentialsMatcher var64 = new org.jsecurity.authc.credential.Sha256CredentialsMatcher();
    var63.setCredentialsMatcher((org.jsecurity.authc.credential.CredentialsMatcher)var64);
    java.lang.String var66 = var63.getAuthorizationCacheName();
    var63.setUrl("hi!");
    org.jsecurity.realm.ldap.DefaultLdapContextFactory var69 = new org.jsecurity.realm.ldap.DefaultLdapContextFactory();
    var63.setLdapContextFactory((org.jsecurity.realm.ldap.LdapContextFactory)var69);
    var69.setAuthentication("org.jsecurity.authz.UnauthorizedException: org.jsecurity.session.ExpiredSessionException: ");
    var60.setLdapContextFactory((org.jsecurity.realm.ldap.LdapContextFactory)var69);
    org.jsecurity.io.IniResource var74 = new org.jsecurity.io.IniResource();
    java.lang.String var75 = var74.getCharsetName();
    org.jsecurity.config.ReflectionBuilder var76 = new org.jsecurity.config.ReflectionBuilder();
    org.jsecurity.io.IniResource var77 = new org.jsecurity.io.IniResource();
    var77.setCharsetName("org.jsecurity.authz.UnauthorizedException: org.jsecurity.session.ExpiredSessionException: ");
    java.util.Map var80 = var77.getSections();
    java.util.Map var81 = var76.buildObjects(var80);
    var74.setSections(var81);
    var69.setAdditionalEnvironment(var81);
    var30.setLdapContextFactory((org.jsecurity.realm.ldap.LdapContextFactory)var69);
    org.jsecurity.authz.permission.PermissionResolver var85 = var30.getPermissionResolver();
    org.jsecurity.realm.SimpleAccountRealm var87 = new org.jsecurity.realm.SimpleAccountRealm("hi!");
    java.lang.Class var88 = var87.getAuthenticationTokenClass();
    java.util.Collection var89 = org.jsecurity.util.CollectionUtils.emptyCollection(var88);
    java.util.Collection var90 = org.jsecurity.util.CollectionUtils.emptyCollection(var88);
    java.util.Collection var91 = org.jsecurity.util.CollectionUtils.emptyCollection(var88);
    var30.setAuthenticationTokenClass(var88);
    java.lang.String[] var95 = org.jsecurity.util.StringUtils.split("dade3937-164f-46fa-a082-f5f54b3b44e1", ' ');
    java.util.List var96 = org.jsecurity.util.CollectionUtils.asList((java.lang.Object[])var95);
    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      java.lang.Object var97 = org.jsecurity.util.ClassUtils.newInstance(var88, (java.lang.Object[])var95);
      fail("Expected exception of type java.lang.IllegalStateException");
    } catch (java.lang.IllegalStateException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var1);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var2);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var3);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var11);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var12);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var13);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var23);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var24);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var26);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var27);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var28);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var38);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var39);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var40);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var44);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var49);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var52);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var53);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var57);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var58);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var66);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var75);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var80);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var81);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var85);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var88);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var89);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var90);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var91);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var95);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var96);

  }

  public void test415() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest6.test415");


    org.jsecurity.authc.LockedAccountException var1 = new org.jsecurity.authc.LockedAccountException("2b2d382d-b075-43d6-9e40-316e19c6c169");

  }

  public void test416() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest6.test416");


    org.jsecurity.session.UnknownSessionException var2 = new org.jsecurity.session.UnknownSessionException("\u0000\u0000\u0000");
    org.jsecurity.authc.AccountException var3 = new org.jsecurity.authc.AccountException("o\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFDw8\u3B9A\uFFFDM\uFFFD\uFFFDg\uFFFD\uFFFD\u07BC\u059C", (java.lang.Throwable)var2);
    org.jsecurity.authc.ExpiredCredentialsException var4 = new org.jsecurity.authc.ExpiredCredentialsException((java.lang.Throwable)var3);

  }

  public void test417() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest6.test417");


    org.jsecurity.cache.ehcache.EhCacheManager var0 = new org.jsecurity.cache.ehcache.EhCacheManager();
    net.sf.ehcache.CacheManager var1 = var0.getCacheManager();
    var0.destroy();
    net.sf.ehcache.CacheManager var3 = var0.getCacheManager();
    net.sf.ehcache.CacheManager var4 = var0.getCacheManager();
    net.sf.ehcache.CacheManager var5 = var0.getCacheManager();
    java.lang.String var6 = var0.getCacheManagerConfigFile();
    java.lang.String var7 = var0.getCacheManagerConfigFile();
    var0.destroy();
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var1);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var3);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var4);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var5);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var6 + "' != '" + "classpath:org/jsecurity/cache/ehcache/ehcache.xml"+ "'", var6.equals("classpath:org/jsecurity/cache/ehcache/ehcache.xml"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var7 + "' != '" + "classpath:org/jsecurity/cache/ehcache/ehcache.xml"+ "'", var7.equals("classpath:org/jsecurity/cache/ehcache/ehcache.xml"));

  }

  public void test418() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest6.test418");


    org.jsecurity.realm.SimpleAccountRealm var1 = new org.jsecurity.realm.SimpleAccountRealm("hi!");
    java.lang.Class var2 = var1.getAuthenticationTokenClass();
    org.jsecurity.session.mgt.eis.MemorySessionDAO var3 = new org.jsecurity.session.mgt.eis.MemorySessionDAO();
    org.jsecurity.cache.Cache var4 = var3.getActiveSessionsCache();
    org.jsecurity.cache.CacheManager var5 = var3.getCacheManager();
    var1.setCacheManager(var5);
    org.jsecurity.cache.Cache var7 = var1.getAuthorizationCache();
    boolean var9 = var1.accountExists("a2b823b1e72eae2b727289df8a00a89df8a0bab6ad8a89c4c5c7a9b62a270000");
    org.jsecurity.mgt.DefaultSecurityManager var10 = new org.jsecurity.mgt.DefaultSecurityManager((org.jsecurity.realm.Realm)var1);
    org.jsecurity.authc.credential.Md2CredentialsMatcher var11 = new org.jsecurity.authc.credential.Md2CredentialsMatcher();
    var1.setCredentialsMatcher((org.jsecurity.authc.credential.CredentialsMatcher)var11);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var2);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var4);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var5);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var7);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var9 == false);

  }

  public void test419() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest6.test419");


    org.jsecurity.authc.IncorrectCredentialsException var1 = new org.jsecurity.authc.IncorrectCredentialsException();
    org.jsecurity.session.UnknownSessionException var2 = new org.jsecurity.session.UnknownSessionException((java.lang.Throwable)var1);
    org.jsecurity.config.UnresolveableReferenceException var3 = new org.jsecurity.config.UnresolveableReferenceException("dd\uFFFD", (java.lang.Throwable)var2);
    org.jsecurity.io.ResourceException var4 = new org.jsecurity.io.ResourceException((java.lang.Throwable)var2);
    org.jsecurity.cache.CacheException var5 = new org.jsecurity.cache.CacheException((java.lang.Throwable)var4);

  }

  public void test420() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest6.test420");


    org.jsecurity.session.mgt.eis.MemorySessionDAO var0 = new org.jsecurity.session.mgt.eis.MemorySessionDAO();
    org.jsecurity.cache.Cache var1 = var0.getActiveSessionsCache();
    org.jsecurity.cache.CacheManager var2 = var0.getCacheManager();
    org.jsecurity.cache.HashtableCacheManager var3 = new org.jsecurity.cache.HashtableCacheManager();
    org.jsecurity.cache.Cache var5 = var3.getCache("\u0000\u0000");
    var0.setActiveSessionsCache(var5);
    java.io.InputStream var8 = org.jsecurity.util.ClassUtils.getResourceAsStream("");
    java.lang.Object[] var9 = new java.lang.Object[] { var8};
    java.util.List var10 = org.jsecurity.util.CollectionUtils.asList(var9);
    org.jsecurity.authc.pam.ModularRealmAuthenticator var11 = new org.jsecurity.authc.pam.ModularRealmAuthenticator(var10);
    org.jsecurity.authc.pam.AllSuccessfulModularAuthenticationStrategy var12 = new org.jsecurity.authc.pam.AllSuccessfulModularAuthenticationStrategy();
    var11.setModularAuthenticationStrategy((org.jsecurity.authc.pam.ModularAuthenticationStrategy)var12);
    org.jsecurity.authz.SimpleAuthorizationInfo var14 = new org.jsecurity.authz.SimpleAuthorizationInfo();
    var14.addStringPermission("hi!");
    java.io.InputStream var18 = org.jsecurity.util.ClassUtils.getResourceAsStream("");
    java.lang.Object[] var19 = new java.lang.Object[] { var18};
    java.util.List var20 = org.jsecurity.util.CollectionUtils.asList(var19);
    var14.addRoles((java.util.Collection)var20);
    var11.setAuthenticationListeners((java.util.Collection)var20);
    org.jsecurity.realm.activedirectory.ActiveDirectoryRealm var23 = new org.jsecurity.realm.activedirectory.ActiveDirectoryRealm();
    var23.setPrincipalSuffix("");
    var11.setRealm((org.jsecurity.realm.Realm)var23);
    org.jsecurity.cache.HashtableCacheManager var27 = new org.jsecurity.cache.HashtableCacheManager();
    org.jsecurity.cache.Cache var29 = var27.getCache("\u0000\u0000");
    var23.setAuthorizationCache(var29);
    var0.setActiveSessionsCache(var29);
    var0.setActiveSessionsCacheName("69d3a52f-a464-4f98-8253-2a105929a356");
    org.jsecurity.session.mgt.eis.MemorySessionDAO var34 = new org.jsecurity.session.mgt.eis.MemorySessionDAO();
    org.jsecurity.cache.HashtableCache var36 = new org.jsecurity.cache.HashtableCache("orgjsecurityauthcCredentialsException783ccd3148a842dd890fdf885a7baafAA==");
    org.jsecurity.realm.text.TextConfigurationRealm var37 = new org.jsecurity.realm.text.TextConfigurationRealm();
    java.io.InputStream var39 = org.jsecurity.util.ClassUtils.getResourceAsStream("");
    java.lang.Object[] var40 = new java.lang.Object[] { var39};
    java.util.List var41 = org.jsecurity.util.CollectionUtils.asList(var40);
    org.jsecurity.authc.pam.ModularRealmAuthenticator var42 = new org.jsecurity.authc.pam.ModularRealmAuthenticator(var41);
    org.jsecurity.subject.SimplePrincipalCollection var44 = new org.jsecurity.subject.SimplePrincipalCollection((java.util.Collection)var41, "org.jsecurity.authz.UnauthorizedException: org.jsecurity.session.ExpiredSessionException: ");
    org.jsecurity.session.UnknownSessionException var49 = new org.jsecurity.session.UnknownSessionException("dd\uFFFD", (java.io.Serializable)100.0f);
    org.jsecurity.session.SessionException var51 = new org.jsecurity.session.SessionException("dd\uFFFD", (java.lang.Throwable)var49, (java.io.Serializable)0);
    org.jsecurity.session.SessionException var52 = new org.jsecurity.session.SessionException("dd\uFFFD", (java.lang.Throwable)var49);
    var44.add((java.lang.Object)var52, "org.jsecurity.config.ConfigurationException: dd\uFFFD");
    var37.onLogout((org.jsecurity.subject.PrincipalCollection)var44);
    var36.remove((java.lang.Object)var44);
    java.util.Set var57 = var36.values();
    var34.setActiveSessionsCache((org.jsecurity.cache.Cache)var36);
    var0.setActiveSessionsCache((org.jsecurity.cache.Cache)var36);
    org.jsecurity.realm.activedirectory.ActiveDirectoryRealm var60 = new org.jsecurity.realm.activedirectory.ActiveDirectoryRealm();
    var60.initAuthorizationCache();
    var60.setSearchBase("dd\uFFFD");
    var60.setUrl("guest = guest,guest\npresidentskroob = 12345,president\ndarkhelmet = ludicrousspeed,darklord,schwartz\nroot = secret,root\nlonestarr = vespa,goodguy,schwartz\n");
    org.jsecurity.cache.HashtableCache var67 = new org.jsecurity.cache.HashtableCache("b017e95a-a08d-4f3a-bab8-cc9b39ef5331");
    var60.setAuthorizationCache((org.jsecurity.cache.Cache)var67);
    java.util.Set var69 = var67.values();
    org.jsecurity.authc.AuthenticationException var71 = new org.jsecurity.authc.AuthenticationException("\n\uFFFD\uFFFD");
    var36.put((java.lang.Object)var67, (java.lang.Object)"\n\uFFFD\uFFFD");
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var1);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var2);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var5);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var8);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var9);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var10);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var18);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var19);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var20);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var29);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var39);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var40);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var41);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var57);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var69);

  }

  public void test421() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest6.test421");


    org.jsecurity.session.mgt.SimpleSession var0 = new org.jsecurity.session.mgt.SimpleSession();
    var0.touch();
    org.jsecurity.authz.UnauthenticatedException var4 = new org.jsecurity.authz.UnauthenticatedException();
    org.jsecurity.config.UnresolveableReferenceException var5 = new org.jsecurity.config.UnresolveableReferenceException("", (java.lang.Throwable)var4);
    org.jsecurity.cache.CacheException var6 = new org.jsecurity.cache.CacheException("org.jsecurity.config.ConfigurationException: dd\uFFFD", (java.lang.Throwable)var4);
    java.lang.Object var7 = var0.removeAttribute((java.lang.Object)var6);
    org.jsecurity.session.mgt.eis.MemorySessionDAO var8 = new org.jsecurity.session.mgt.eis.MemorySessionDAO();
    org.jsecurity.cache.Cache var9 = var8.getActiveSessionsCache();
    org.jsecurity.cache.CacheManager var10 = var8.getCacheManager();
    org.jsecurity.cache.HashtableCacheManager var11 = new org.jsecurity.cache.HashtableCacheManager();
    org.jsecurity.cache.Cache var13 = var11.getCache("\u0000\u0000");
    var8.setActiveSessionsCache(var13);
    java.io.InputStream var16 = org.jsecurity.util.ClassUtils.getResourceAsStream("");
    java.lang.Object[] var17 = new java.lang.Object[] { var16};
    java.util.List var18 = org.jsecurity.util.CollectionUtils.asList(var17);
    org.jsecurity.authc.pam.ModularRealmAuthenticator var19 = new org.jsecurity.authc.pam.ModularRealmAuthenticator(var18);
    org.jsecurity.authc.pam.AllSuccessfulModularAuthenticationStrategy var20 = new org.jsecurity.authc.pam.AllSuccessfulModularAuthenticationStrategy();
    var19.setModularAuthenticationStrategy((org.jsecurity.authc.pam.ModularAuthenticationStrategy)var20);
    org.jsecurity.authz.SimpleAuthorizationInfo var22 = new org.jsecurity.authz.SimpleAuthorizationInfo();
    var22.addStringPermission("hi!");
    java.io.InputStream var26 = org.jsecurity.util.ClassUtils.getResourceAsStream("");
    java.lang.Object[] var27 = new java.lang.Object[] { var26};
    java.util.List var28 = org.jsecurity.util.CollectionUtils.asList(var27);
    var22.addRoles((java.util.Collection)var28);
    var19.setAuthenticationListeners((java.util.Collection)var28);
    org.jsecurity.realm.activedirectory.ActiveDirectoryRealm var31 = new org.jsecurity.realm.activedirectory.ActiveDirectoryRealm();
    var31.setPrincipalSuffix("");
    var19.setRealm((org.jsecurity.realm.Realm)var31);
    org.jsecurity.cache.HashtableCacheManager var35 = new org.jsecurity.cache.HashtableCacheManager();
    org.jsecurity.cache.Cache var37 = var35.getCache("\u0000\u0000");
    var31.setAuthorizationCache(var37);
    var8.setActiveSessionsCache(var37);
    org.jsecurity.session.mgt.SimpleSession var40 = new org.jsecurity.session.mgt.SimpleSession();
    java.io.Serializable var41 = var8.create((org.jsecurity.session.Session)var40);
    java.io.Serializable var42 = var40.getId();
    org.jsecurity.session.mgt.SimpleSession var43 = new org.jsecurity.session.mgt.SimpleSession();
    var43.touch();
    var43.validate();
    org.jsecurity.session.mgt.SimpleSession var46 = new org.jsecurity.session.mgt.SimpleSession();
    var46.setTimeout((-1L));
    org.jsecurity.session.mgt.SimpleSession var49 = new org.jsecurity.session.mgt.SimpleSession();
    java.util.Date var50 = var49.getLastAccessTime();
    var46.setLastAccessTime(var50);
    org.jsecurity.session.mgt.SimpleSession var52 = new org.jsecurity.session.mgt.SimpleSession();
    java.util.Date var53 = var52.getLastAccessTime();
    var46.setStopTimestamp(var53);
    var43.setLastAccessTime(var53);
    var40.setStartTimestamp(var53);
    var0.setStartTimestamp(var53);
    var0.validate();
    boolean var59 = var0.isExpired();
    java.net.InetAddress var60 = var0.getHostAddress();
    boolean var61 = var0.isValid();
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var7);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var9);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var10);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var13);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var16);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var17);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var18);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var26);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var27);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var28);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var37);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var41 + "' != '" + "3774ed7a-5f6c-47b5-8c36-dbb4ae96c054"+ "'", var41.equals("3774ed7a-5f6c-47b5-8c36-dbb4ae96c054"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var42 + "' != '" + "3774ed7a-5f6c-47b5-8c36-dbb4ae96c054"+ "'", var42.equals("3774ed7a-5f6c-47b5-8c36-dbb4ae96c054"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var50);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var53);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var59 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var60);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var61 == true);

  }

  public void test422() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest6.test422");


    org.jsecurity.codec.CodecException var2 = new org.jsecurity.codec.CodecException("dd\uFFFD");
    org.jsecurity.authc.ConcurrentAccessException var3 = new org.jsecurity.authc.ConcurrentAccessException("org.jsecurity.authz.UnauthorizedException: org.jsecurity.session.ExpiredSessionException: ", (java.lang.Throwable)var2);
    org.jsecurity.subject.SimplePrincipalCollection var5 = new org.jsecurity.subject.SimplePrincipalCollection((java.lang.Object)var2, "");
    boolean var6 = var5.isEmpty();
    java.util.List var7 = var5.asList();
    org.jsecurity.authc.pam.ModularRealmAuthenticator var8 = new org.jsecurity.authc.pam.ModularRealmAuthenticator(var7);
    org.jsecurity.authc.pam.AtLeastOneSuccessfulModularAuthenticationStrategy var9 = new org.jsecurity.authc.pam.AtLeastOneSuccessfulModularAuthenticationStrategy();
    org.jsecurity.authc.pam.AllSuccessfulModularAuthenticationStrategy var11 = new org.jsecurity.authc.pam.AllSuccessfulModularAuthenticationStrategy();
    char[] var13 = new char[] { };
    org.jsecurity.authc.UsernamePasswordToken var15 = new org.jsecurity.authc.UsernamePasswordToken("hi!", var13, true);
    org.jsecurity.authc.SimpleAccount var16 = new org.jsecurity.authc.SimpleAccount();
    var16.setCredentialsExpired(false);
    boolean var19 = var16.isLocked();
    org.jsecurity.authc.AuthenticationInfo var20 = var11.afterAllAttempts((org.jsecurity.authc.AuthenticationToken)var15, (org.jsecurity.authc.AuthenticationInfo)var16);
    char[] var23 = new char[] { };
    org.jsecurity.authc.UsernamePasswordToken var25 = new org.jsecurity.authc.UsernamePasswordToken("hi!", var23, true);
    org.jsecurity.authc.UsernamePasswordToken var26 = new org.jsecurity.authc.UsernamePasswordToken("\u0000\u0000", var23);
    var15.setPassword(var23);
    org.jsecurity.authc.UsernamePasswordToken var28 = new org.jsecurity.authc.UsernamePasswordToken("\u0000\u0000\u0000", var23);
    org.jsecurity.realm.text.TextConfigurationRealm var29 = new org.jsecurity.realm.text.TextConfigurationRealm();
    java.io.InputStream var31 = org.jsecurity.util.ClassUtils.getResourceAsStream("");
    java.lang.Object[] var32 = new java.lang.Object[] { var31};
    java.util.List var33 = org.jsecurity.util.CollectionUtils.asList(var32);
    org.jsecurity.authc.pam.ModularRealmAuthenticator var34 = new org.jsecurity.authc.pam.ModularRealmAuthenticator(var33);
    org.jsecurity.subject.SimplePrincipalCollection var36 = new org.jsecurity.subject.SimplePrincipalCollection((java.util.Collection)var33, "org.jsecurity.authz.UnauthorizedException: org.jsecurity.session.ExpiredSessionException: ");
    org.jsecurity.session.UnknownSessionException var41 = new org.jsecurity.session.UnknownSessionException("dd\uFFFD", (java.io.Serializable)100.0f);
    org.jsecurity.session.SessionException var43 = new org.jsecurity.session.SessionException("dd\uFFFD", (java.lang.Throwable)var41, (java.io.Serializable)0);
    org.jsecurity.session.SessionException var44 = new org.jsecurity.session.SessionException("dd\uFFFD", (java.lang.Throwable)var41);
    var36.add((java.lang.Object)var44, "org.jsecurity.config.ConfigurationException: dd\uFFFD");
    var29.onLogout((org.jsecurity.subject.PrincipalCollection)var36);
    org.jsecurity.authc.ExpiredCredentialsException var49 = new org.jsecurity.authc.ExpiredCredentialsException();
    org.jsecurity.session.ExpiredSessionException var50 = new org.jsecurity.session.ExpiredSessionException("", (java.lang.Throwable)var49);
    java.lang.Throwable[] var51 = var50.getSuppressed();
    org.jsecurity.io.ResourceException var52 = new org.jsecurity.io.ResourceException((java.lang.Throwable)var50);
    org.jsecurity.authc.SimpleAuthenticationInfo var53 = new org.jsecurity.authc.SimpleAuthenticationInfo((org.jsecurity.subject.PrincipalCollection)var36, (java.lang.Object)var50);
    org.jsecurity.authc.AuthenticationInfo var54 = var9.afterAllAttempts((org.jsecurity.authc.AuthenticationToken)var28, (org.jsecurity.authc.AuthenticationInfo)var53);
    org.jsecurity.authz.SimpleAuthorizingAccount var56 = new org.jsecurity.authz.SimpleAuthorizingAccount((java.util.Collection)var7, (java.lang.Object)var53, "org.jsecurity.config.ConfigurationException: dd\uFFFD-4org.jsecurity.config.ConfigurationException: dd\uFFFD02-8085-950org.jsecurity.config.ConfigurationException: dd\uFFFDbb026org.jsecurity.config.ConfigurationException: dd\uFFFD06");
    org.jsecurity.crypto.hash.Md2Hash var58 = org.jsecurity.crypto.hash.Md2Hash.fromBase64String("org.jsecurity.config.ConfigurationException: dd\uFFFD");
    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      org.jsecurity.crypto.hash.Sha512Hash var60 = new org.jsecurity.crypto.hash.Sha512Hash((java.lang.Object)var53, (java.lang.Object)"org.jsecurity.config.ConfigurationException: dd\uFFFD", 0);
      fail("Expected exception of type org.jsecurity.codec.CodecException");
    } catch (org.jsecurity.codec.CodecException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var6 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var7);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var13);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var19 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var20);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var23);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var31);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var32);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var33);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var51);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var54);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var58);

  }

  public void test423() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest6.test423");


    org.jsecurity.crypto.BlowfishCipher var0 = new org.jsecurity.crypto.BlowfishCipher();
    org.jsecurity.crypto.BlowfishCipher var1 = new org.jsecurity.crypto.BlowfishCipher();
    byte[] var5 = new byte[] { (byte)100, (byte)100, (byte)(-1)};
    java.lang.String var6 = org.jsecurity.codec.CodecSupport.toString(var5);
    byte[] var8 = org.jsecurity.codec.Base64.decode("hi!");
    byte[] var9 = var1.encrypt(var5, var8);
    org.jsecurity.crypto.BlowfishCipher var10 = new org.jsecurity.crypto.BlowfishCipher();
    java.security.Key var11 = var10.getKey();
    java.security.Key var12 = var10.getKey();
    var1.setKey(var12);
    org.jsecurity.crypto.BlowfishCipher var14 = new org.jsecurity.crypto.BlowfishCipher();
    java.security.Key var15 = var14.getKey();
    java.security.Key var16 = var14.getKey();
    java.security.Key var17 = var14.getKey();
    java.security.Key var18 = var14.getKey();
    java.security.Key var19 = var14.getKey();
    var1.setKey(var19);
    var0.setKey(var19);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var5);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var6 + "' != '" + "dd\uFFFD"+ "'", var6.equals("dd\uFFFD"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var8);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var9);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var11);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var12);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var15);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var16);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var17);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var18);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var19);

  }

  public void test424() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest6.test424");


    java.io.InputStream var1 = org.jsecurity.util.ClassUtils.getResourceAsStream("");
    java.lang.Object[] var2 = new java.lang.Object[] { var1};
    java.util.List var3 = org.jsecurity.util.CollectionUtils.asList(var2);
    org.jsecurity.authc.pam.ModularRealmAuthenticator var4 = new org.jsecurity.authc.pam.ModularRealmAuthenticator(var3);
    org.jsecurity.subject.SimplePrincipalCollection var6 = new org.jsecurity.subject.SimplePrincipalCollection((java.util.Collection)var3, "org.jsecurity.authz.UnauthorizedException: org.jsecurity.session.ExpiredSessionException: ");
    java.util.Set var7 = var6.asSet();
    org.jsecurity.mgt.DefaultSecurityManager var8 = new org.jsecurity.mgt.DefaultSecurityManager();
    java.io.InputStream var10 = org.jsecurity.util.ClassUtils.getResourceAsStream("");
    java.lang.Object[] var11 = new java.lang.Object[] { var10};
    java.util.List var12 = org.jsecurity.util.CollectionUtils.asList(var11);
    org.jsecurity.authc.pam.ModularRealmAuthenticator var13 = new org.jsecurity.authc.pam.ModularRealmAuthenticator(var12);
    org.jsecurity.authc.pam.AllSuccessfulModularAuthenticationStrategy var14 = new org.jsecurity.authc.pam.AllSuccessfulModularAuthenticationStrategy();
    var13.setModularAuthenticationStrategy((org.jsecurity.authc.pam.ModularAuthenticationStrategy)var14);
    org.jsecurity.authz.SimpleAuthorizationInfo var16 = new org.jsecurity.authz.SimpleAuthorizationInfo();
    var16.addStringPermission("hi!");
    java.io.InputStream var20 = org.jsecurity.util.ClassUtils.getResourceAsStream("");
    java.lang.Object[] var21 = new java.lang.Object[] { var20};
    java.util.List var22 = org.jsecurity.util.CollectionUtils.asList(var21);
    var16.addRoles((java.util.Collection)var22);
    var13.setAuthenticationListeners((java.util.Collection)var22);
    var8.setSessionListeners((java.util.Collection)var22);
    org.jsecurity.realm.text.TextConfigurationRealm var26 = new org.jsecurity.realm.text.TextConfigurationRealm();
    java.io.InputStream var28 = org.jsecurity.util.ClassUtils.getResourceAsStream("");
    java.lang.Object[] var29 = new java.lang.Object[] { var28};
    java.util.List var30 = org.jsecurity.util.CollectionUtils.asList(var29);
    org.jsecurity.authc.pam.ModularRealmAuthenticator var31 = new org.jsecurity.authc.pam.ModularRealmAuthenticator(var30);
    org.jsecurity.subject.SimplePrincipalCollection var33 = new org.jsecurity.subject.SimplePrincipalCollection((java.util.Collection)var30, "org.jsecurity.authz.UnauthorizedException: org.jsecurity.session.ExpiredSessionException: ");
    org.jsecurity.session.UnknownSessionException var38 = new org.jsecurity.session.UnknownSessionException("dd\uFFFD", (java.io.Serializable)100.0f);
    org.jsecurity.session.SessionException var40 = new org.jsecurity.session.SessionException("dd\uFFFD", (java.lang.Throwable)var38, (java.io.Serializable)0);
    org.jsecurity.session.SessionException var41 = new org.jsecurity.session.SessionException("dd\uFFFD", (java.lang.Throwable)var38);
    var33.add((java.lang.Object)var41, "org.jsecurity.config.ConfigurationException: dd\uFFFD");
    var26.onLogout((org.jsecurity.subject.PrincipalCollection)var33);
    org.jsecurity.authc.pam.FirstSuccessfulAuthenticationStrategy var45 = new org.jsecurity.authc.pam.FirstSuccessfulAuthenticationStrategy();
    org.jsecurity.authz.UnauthorizedException var47 = new org.jsecurity.authz.UnauthorizedException("org.jsecurity.config.ConfigurationException: dd\uFFFD");
    java.lang.Throwable[] var48 = var47.getSuppressed();
    java.util.List var49 = org.jsecurity.util.CollectionUtils.asList((java.lang.Object[])var48);
    org.jsecurity.authc.UsernamePasswordToken var50 = new org.jsecurity.authc.UsernamePasswordToken();
    java.lang.String var51 = var50.getUsername();
    java.net.InetAddress var52 = var50.getInetAddress();
    org.jsecurity.authc.AuthenticationInfo var53 = var45.beforeAllAttempts((java.util.Collection)var49, (org.jsecurity.authc.AuthenticationToken)var50);
    boolean[] var54 = var8.hasRoles((org.jsecurity.subject.PrincipalCollection)var33, var49);
    org.jsecurity.codec.CodecException var57 = new org.jsecurity.codec.CodecException("dd\uFFFD");
    org.jsecurity.authc.ConcurrentAccessException var58 = new org.jsecurity.authc.ConcurrentAccessException("org.jsecurity.authz.UnauthorizedException: org.jsecurity.session.ExpiredSessionException: ", (java.lang.Throwable)var57);
    org.jsecurity.subject.SimplePrincipalCollection var60 = new org.jsecurity.subject.SimplePrincipalCollection((java.lang.Object)var57, "");
    java.io.InputStream var62 = org.jsecurity.util.ClassUtils.getResourceAsStream("");
    java.lang.Object[] var63 = new java.lang.Object[] { var62};
    java.util.List var64 = org.jsecurity.util.CollectionUtils.asList(var63);
    org.jsecurity.authc.pam.ModularRealmAuthenticator var65 = new org.jsecurity.authc.pam.ModularRealmAuthenticator(var64);
    var60.addAll((java.util.Collection)var64, "\u0000\u0000");
    var8.setSessionListeners((java.util.Collection)var64);
    org.jsecurity.session.mgt.DefaultSessionManager var69 = new org.jsecurity.session.mgt.DefaultSessionManager();
    org.jsecurity.mgt.DefaultSecurityManager var70 = new org.jsecurity.mgt.DefaultSecurityManager();
    org.jsecurity.authz.permission.WildcardPermissionResolver var71 = new org.jsecurity.authz.permission.WildcardPermissionResolver();
    var70.setPermissionResolver((org.jsecurity.authz.permission.PermissionResolver)var71);
    org.jsecurity.cache.CacheManager var73 = var70.getCacheManager();
    var69.setCacheManager(var73);
    org.jsecurity.session.mgt.SessionValidationScheduler var75 = var69.getSessionValidationScheduler();
    var8.setSessionManager((org.jsecurity.session.mgt.SessionManager)var69);
    var69.destroy();
    var69.setSessionValidationSchedulerEnabled(true);
    org.jsecurity.session.mgt.quartz.QuartzSessionValidationScheduler var80 = new org.jsecurity.session.mgt.quartz.QuartzSessionValidationScheduler((org.jsecurity.session.mgt.ValidatingSessionManager)var69);
    var80.enableSessionValidation();
    org.jsecurity.authc.SimpleAccount var82 = new org.jsecurity.authc.SimpleAccount((org.jsecurity.subject.PrincipalCollection)var6, (java.lang.Object)var80);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var1);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var2);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var3);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var7);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var10);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var11);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var12);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var20);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var21);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var22);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var28);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var29);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var30);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var48);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var49);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var51);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var52);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var53);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var54);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var62);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var63);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var64);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var73);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var75);

  }

  public void test425() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest6.test425");


    org.jsecurity.session.mgt.eis.MemorySessionDAO var0 = new org.jsecurity.session.mgt.eis.MemorySessionDAO();
    org.jsecurity.cache.Cache var1 = var0.getActiveSessionsCache();
    org.jsecurity.cache.CacheManager var2 = var0.getCacheManager();
    org.jsecurity.cache.HashtableCacheManager var3 = new org.jsecurity.cache.HashtableCacheManager();
    org.jsecurity.cache.Cache var5 = var3.getCache("\u0000\u0000");
    var0.setActiveSessionsCache(var5);
    java.io.InputStream var8 = org.jsecurity.util.ClassUtils.getResourceAsStream("");
    java.lang.Object[] var9 = new java.lang.Object[] { var8};
    java.util.List var10 = org.jsecurity.util.CollectionUtils.asList(var9);
    org.jsecurity.authc.pam.ModularRealmAuthenticator var11 = new org.jsecurity.authc.pam.ModularRealmAuthenticator(var10);
    org.jsecurity.authc.pam.AllSuccessfulModularAuthenticationStrategy var12 = new org.jsecurity.authc.pam.AllSuccessfulModularAuthenticationStrategy();
    var11.setModularAuthenticationStrategy((org.jsecurity.authc.pam.ModularAuthenticationStrategy)var12);
    org.jsecurity.authz.SimpleAuthorizationInfo var14 = new org.jsecurity.authz.SimpleAuthorizationInfo();
    var14.addStringPermission("hi!");
    java.io.InputStream var18 = org.jsecurity.util.ClassUtils.getResourceAsStream("");
    java.lang.Object[] var19 = new java.lang.Object[] { var18};
    java.util.List var20 = org.jsecurity.util.CollectionUtils.asList(var19);
    var14.addRoles((java.util.Collection)var20);
    var11.setAuthenticationListeners((java.util.Collection)var20);
    org.jsecurity.realm.activedirectory.ActiveDirectoryRealm var23 = new org.jsecurity.realm.activedirectory.ActiveDirectoryRealm();
    var23.setPrincipalSuffix("");
    var11.setRealm((org.jsecurity.realm.Realm)var23);
    org.jsecurity.cache.HashtableCacheManager var27 = new org.jsecurity.cache.HashtableCacheManager();
    org.jsecurity.cache.Cache var29 = var27.getCache("\u0000\u0000");
    var23.setAuthorizationCache(var29);
    var0.setActiveSessionsCache(var29);
    org.jsecurity.session.mgt.SimpleSession var32 = new org.jsecurity.session.mgt.SimpleSession();
    java.io.Serializable var33 = var0.create((org.jsecurity.session.Session)var32);
    org.jsecurity.session.mgt.SimpleSession var34 = new org.jsecurity.session.mgt.SimpleSession();
    var34.touch();
    var34.validate();
    org.jsecurity.session.mgt.SimpleSession var37 = new org.jsecurity.session.mgt.SimpleSession();
    var37.setTimeout((-1L));
    org.jsecurity.session.mgt.SimpleSession var40 = new org.jsecurity.session.mgt.SimpleSession();
    java.util.Date var41 = var40.getLastAccessTime();
    var37.setLastAccessTime(var41);
    org.jsecurity.session.mgt.SimpleSession var43 = new org.jsecurity.session.mgt.SimpleSession();
    java.util.Date var44 = var43.getLastAccessTime();
    var37.setStopTimestamp(var44);
    var34.setLastAccessTime(var44);
    var32.setLastAccessTime(var44);
    org.jsecurity.session.mgt.ImmutableProxiedSession var48 = new org.jsecurity.session.mgt.ImmutableProxiedSession((org.jsecurity.session.Session)var32);
    org.jsecurity.session.ProxiedSession var49 = new org.jsecurity.session.ProxiedSession((org.jsecurity.session.Session)var32);
    java.util.Date var50 = var49.getStartTimestamp();
    org.jsecurity.authc.IncorrectCredentialsException var53 = new org.jsecurity.authc.IncorrectCredentialsException("\u0000\u0000");
    org.jsecurity.codec.CodecException var56 = new org.jsecurity.codec.CodecException("dd\uFFFD");
    org.jsecurity.authc.ConcurrentAccessException var57 = new org.jsecurity.authc.ConcurrentAccessException("org.jsecurity.authz.UnauthorizedException: org.jsecurity.session.ExpiredSessionException: ", (java.lang.Throwable)var56);
    org.jsecurity.subject.SimplePrincipalCollection var59 = new org.jsecurity.subject.SimplePrincipalCollection((java.lang.Object)var56, "");
    java.io.InputStream var61 = org.jsecurity.util.ClassUtils.getResourceAsStream("");
    java.lang.Object[] var62 = new java.lang.Object[] { var61};
    java.util.List var63 = org.jsecurity.util.CollectionUtils.asList(var62);
    org.jsecurity.authc.pam.ModularRealmAuthenticator var64 = new org.jsecurity.authc.pam.ModularRealmAuthenticator(var63);
    org.jsecurity.authc.pam.AllSuccessfulModularAuthenticationStrategy var65 = new org.jsecurity.authc.pam.AllSuccessfulModularAuthenticationStrategy();
    var64.setModularAuthenticationStrategy((org.jsecurity.authc.pam.ModularAuthenticationStrategy)var65);
    org.jsecurity.authz.SimpleAuthorizationInfo var67 = new org.jsecurity.authz.SimpleAuthorizationInfo();
    var67.addStringPermission("hi!");
    java.io.InputStream var71 = org.jsecurity.util.ClassUtils.getResourceAsStream("");
    java.lang.Object[] var72 = new java.lang.Object[] { var71};
    java.util.List var73 = org.jsecurity.util.CollectionUtils.asList(var72);
    var67.addRoles((java.util.Collection)var73);
    var64.setAuthenticationListeners((java.util.Collection)var73);
    org.jsecurity.realm.activedirectory.ActiveDirectoryRealm var76 = new org.jsecurity.realm.activedirectory.ActiveDirectoryRealm();
    var76.setPrincipalSuffix("");
    var64.setRealm((org.jsecurity.realm.Realm)var76);
    org.jsecurity.authc.pam.FirstSuccessfulAuthenticationStrategy var80 = new org.jsecurity.authc.pam.FirstSuccessfulAuthenticationStrategy();
    org.jsecurity.authz.UnauthorizedException var82 = new org.jsecurity.authz.UnauthorizedException("org.jsecurity.config.ConfigurationException: dd\uFFFD");
    java.lang.Throwable[] var83 = var82.getSuppressed();
    java.util.List var84 = org.jsecurity.util.CollectionUtils.asList((java.lang.Object[])var83);
    org.jsecurity.authc.UsernamePasswordToken var85 = new org.jsecurity.authc.UsernamePasswordToken();
    java.lang.String var86 = var85.getUsername();
    java.net.InetAddress var87 = var85.getInetAddress();
    org.jsecurity.authc.AuthenticationInfo var88 = var80.beforeAllAttempts((java.util.Collection)var84, (org.jsecurity.authc.AuthenticationToken)var85);
    var64.setModularAuthenticationStrategy((org.jsecurity.authc.pam.ModularAuthenticationStrategy)var80);
    org.jsecurity.authc.SimpleAccount var90 = new org.jsecurity.authc.SimpleAccount((org.jsecurity.subject.PrincipalCollection)var59, (java.lang.Object)var64);
    org.jsecurity.session.StoppedSessionException var91 = new org.jsecurity.session.StoppedSessionException("org.jsecurity.authz.UnauthorizedException: org.jsecurity.session.ExpiredSessionException: ", (java.lang.Throwable)var53, (java.io.Serializable)var90);
    org.jsecurity.subject.InvalidSubjectException var92 = new org.jsecurity.subject.InvalidSubjectException((java.lang.Throwable)var53);
    org.jsecurity.config.UnresolveableReferenceException var93 = new org.jsecurity.config.UnresolveableReferenceException();
    var49.setAttribute((java.lang.Object)var92, (java.lang.Object)var93);
    org.jsecurity.session.SessionException var95 = new org.jsecurity.session.SessionException((java.lang.Throwable)var93);
    org.jsecurity.cache.CacheException var96 = new org.jsecurity.cache.CacheException((java.lang.Throwable)var95);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var1);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var2);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var5);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var8);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var9);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var10);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var18);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var19);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var20);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var29);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var33 + "' != '" + "8dbc03d2-8de8-40a8-80c6-6d76215938b8"+ "'", var33.equals("8dbc03d2-8de8-40a8-80c6-6d76215938b8"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var41);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var44);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var50);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var61);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var62);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var63);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var71);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var72);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var73);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var83);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var84);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var86);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var87);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var88);

  }

  public void test426() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest6.test426");


    org.jsecurity.authz.UnauthenticatedException var3 = new org.jsecurity.authz.UnauthenticatedException();
    org.jsecurity.config.UnresolveableReferenceException var4 = new org.jsecurity.config.UnresolveableReferenceException("", (java.lang.Throwable)var3);
    org.jsecurity.cache.CacheException var5 = new org.jsecurity.cache.CacheException("org.jsecurity.config.ConfigurationException: dd\uFFFD", (java.lang.Throwable)var3);
    org.jsecurity.authc.SimpleAuthenticationInfo var7 = new org.jsecurity.authc.SimpleAuthenticationInfo((java.lang.Object)"org.jsecurity.config.ConfigurationException: dd\uFFFD", (java.lang.Object)var5, "a2b823b1e72eae2b727289df8a00a89df8a0bab6ad8a89c4c5c7a9b62a270000");
    org.jsecurity.realm.text.TextConfigurationRealm var8 = new org.jsecurity.realm.text.TextConfigurationRealm();
    java.io.InputStream var10 = org.jsecurity.util.ClassUtils.getResourceAsStream("");
    java.lang.Object[] var11 = new java.lang.Object[] { var10};
    java.util.List var12 = org.jsecurity.util.CollectionUtils.asList(var11);
    org.jsecurity.authc.pam.ModularRealmAuthenticator var13 = new org.jsecurity.authc.pam.ModularRealmAuthenticator(var12);
    org.jsecurity.subject.SimplePrincipalCollection var15 = new org.jsecurity.subject.SimplePrincipalCollection((java.util.Collection)var12, "org.jsecurity.authz.UnauthorizedException: org.jsecurity.session.ExpiredSessionException: ");
    org.jsecurity.session.UnknownSessionException var20 = new org.jsecurity.session.UnknownSessionException("dd\uFFFD", (java.io.Serializable)100.0f);
    org.jsecurity.session.SessionException var22 = new org.jsecurity.session.SessionException("dd\uFFFD", (java.lang.Throwable)var20, (java.io.Serializable)0);
    org.jsecurity.session.SessionException var23 = new org.jsecurity.session.SessionException("dd\uFFFD", (java.lang.Throwable)var20);
    var15.add((java.lang.Object)var23, "org.jsecurity.config.ConfigurationException: dd\uFFFD");
    var8.onLogout((org.jsecurity.subject.PrincipalCollection)var15);
    org.jsecurity.authc.ExpiredCredentialsException var28 = new org.jsecurity.authc.ExpiredCredentialsException();
    org.jsecurity.session.ExpiredSessionException var29 = new org.jsecurity.session.ExpiredSessionException("", (java.lang.Throwable)var28);
    java.lang.Throwable[] var30 = var29.getSuppressed();
    org.jsecurity.io.ResourceException var31 = new org.jsecurity.io.ResourceException((java.lang.Throwable)var29);
    org.jsecurity.authc.SimpleAuthenticationInfo var32 = new org.jsecurity.authc.SimpleAuthenticationInfo((org.jsecurity.subject.PrincipalCollection)var15, (java.lang.Object)var29);
    var7.merge((org.jsecurity.authc.AuthenticationInfo)var32);
    org.jsecurity.subject.PrincipalCollection var34 = var32.getPrincipals();
    org.jsecurity.session.UnknownSessionException var41 = new org.jsecurity.session.UnknownSessionException("dd\uFFFD", (java.io.Serializable)100.0f);
    org.jsecurity.config.ConfigurationException var42 = new org.jsecurity.config.ConfigurationException("dd\uFFFD", (java.lang.Throwable)var41);
    org.jsecurity.session.ExpiredSessionException var44 = new org.jsecurity.session.ExpiredSessionException("", (java.lang.Throwable)var42, (java.io.Serializable)true);
    org.jsecurity.authc.pam.UnsupportedTokenException var45 = new org.jsecurity.authc.pam.UnsupportedTokenException((java.lang.Throwable)var44);
    org.jsecurity.authc.AccountException var46 = new org.jsecurity.authc.AccountException((java.lang.Throwable)var45);
    org.jsecurity.authz.UnauthorizedException var47 = new org.jsecurity.authz.UnauthorizedException("a2b823b1e72eae2b727289df8a00a89df8a0bab6ad8a89c4c5c7a9b62a270000", (java.lang.Throwable)var46);
    org.jsecurity.session.InvalidSessionException var48 = new org.jsecurity.session.InvalidSessionException((java.lang.Throwable)var46);
    org.jsecurity.config.ConfigurationException var49 = new org.jsecurity.config.ConfigurationException("\u0000\u0000", (java.lang.Throwable)var46);
    org.jsecurity.authc.LockedAccountException var50 = new org.jsecurity.authc.LockedAccountException((java.lang.Throwable)var46);
    boolean var51 = var32.equals((java.lang.Object)var50);
    org.jsecurity.realm.text.TextConfigurationRealm var52 = new org.jsecurity.realm.text.TextConfigurationRealm();
    java.io.InputStream var54 = org.jsecurity.util.ClassUtils.getResourceAsStream("");
    java.lang.Object[] var55 = new java.lang.Object[] { var54};
    java.util.List var56 = org.jsecurity.util.CollectionUtils.asList(var55);
    org.jsecurity.authc.pam.ModularRealmAuthenticator var57 = new org.jsecurity.authc.pam.ModularRealmAuthenticator(var56);
    org.jsecurity.subject.SimplePrincipalCollection var59 = new org.jsecurity.subject.SimplePrincipalCollection((java.util.Collection)var56, "org.jsecurity.authz.UnauthorizedException: org.jsecurity.session.ExpiredSessionException: ");
    org.jsecurity.session.UnknownSessionException var64 = new org.jsecurity.session.UnknownSessionException("dd\uFFFD", (java.io.Serializable)100.0f);
    org.jsecurity.session.SessionException var66 = new org.jsecurity.session.SessionException("dd\uFFFD", (java.lang.Throwable)var64, (java.io.Serializable)0);
    org.jsecurity.session.SessionException var67 = new org.jsecurity.session.SessionException("dd\uFFFD", (java.lang.Throwable)var64);
    var59.add((java.lang.Object)var67, "org.jsecurity.config.ConfigurationException: dd\uFFFD");
    var52.onLogout((org.jsecurity.subject.PrincipalCollection)var59);
    org.jsecurity.cache.HashtableCacheManager var71 = new org.jsecurity.cache.HashtableCacheManager();
    org.jsecurity.cache.Cache var73 = var71.getCache("\u0000\u0000");
    var52.setAuthorizationCache(var73);
    org.jsecurity.codec.CodecException var77 = new org.jsecurity.codec.CodecException("dd\uFFFD");
    org.jsecurity.authc.ConcurrentAccessException var78 = new org.jsecurity.authc.ConcurrentAccessException("org.jsecurity.authz.UnauthorizedException: org.jsecurity.session.ExpiredSessionException: ", (java.lang.Throwable)var77);
    org.jsecurity.subject.SimplePrincipalCollection var80 = new org.jsecurity.subject.SimplePrincipalCollection((java.lang.Object)var77, "");
    var52.onLogout((org.jsecurity.subject.PrincipalCollection)var80);
    boolean var82 = var80.isEmpty();
    var32.setPrincipals((org.jsecurity.subject.PrincipalCollection)var80);
    java.lang.Object var84 = var32.getCredentials();
    boolean var86 = var32.equals((java.lang.Object)"820589d2-5441-4e12-86af-31f7e4fa8970");
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var10);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var11);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var12);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var30);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var34);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var51 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var54);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var55);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var56);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var73);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var82 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var84);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var86 == false);

  }

  public void test427() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest6.test427");


    org.jsecurity.crypto.hash.Sha512Hash var1 = org.jsecurity.crypto.hash.Sha512Hash.fromBase64String("c57c3347-cd3b-402f-b5c3-2d2f0edd50fc");
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var1);

  }

  public void test428() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest6.test428");


    org.jsecurity.session.UnknownSessionException var3 = new org.jsecurity.session.UnknownSessionException("dd\uFFFD", (java.io.Serializable)100.0f);
    org.jsecurity.session.SessionException var5 = new org.jsecurity.session.SessionException("dd\uFFFD", (java.lang.Throwable)var3, (java.io.Serializable)0);
    org.jsecurity.authc.SimpleAuthenticationInfo var8 = new org.jsecurity.authc.SimpleAuthenticationInfo((java.lang.Object)0, (java.lang.Object)10, "hi!");
    org.jsecurity.codec.CodecException var11 = new org.jsecurity.codec.CodecException("dd\uFFFD");
    org.jsecurity.authc.ConcurrentAccessException var12 = new org.jsecurity.authc.ConcurrentAccessException("org.jsecurity.authz.UnauthorizedException: org.jsecurity.session.ExpiredSessionException: ", (java.lang.Throwable)var11);
    org.jsecurity.subject.SimplePrincipalCollection var14 = new org.jsecurity.subject.SimplePrincipalCollection((java.lang.Object)var11, "");
    org.jsecurity.authc.pam.FirstSuccessfulAuthenticationStrategy var15 = new org.jsecurity.authc.pam.FirstSuccessfulAuthenticationStrategy();
    org.jsecurity.authz.UnauthorizedException var17 = new org.jsecurity.authz.UnauthorizedException("org.jsecurity.config.ConfigurationException: dd\uFFFD");
    java.lang.Throwable[] var18 = var17.getSuppressed();
    java.util.List var19 = org.jsecurity.util.CollectionUtils.asList((java.lang.Object[])var18);
    org.jsecurity.authc.UsernamePasswordToken var20 = new org.jsecurity.authc.UsernamePasswordToken();
    java.lang.String var21 = var20.getUsername();
    java.net.InetAddress var22 = var20.getInetAddress();
    org.jsecurity.authc.AuthenticationInfo var23 = var15.beforeAllAttempts((java.util.Collection)var19, (org.jsecurity.authc.AuthenticationToken)var20);
    org.jsecurity.session.UnknownSessionException var28 = new org.jsecurity.session.UnknownSessionException("dd\uFFFD", (java.io.Serializable)100.0f);
    org.jsecurity.subject.SubjectException var29 = new org.jsecurity.subject.SubjectException("dd\uFFFD", (java.lang.Throwable)var28);
    org.jsecurity.io.SerializationException var30 = new org.jsecurity.io.SerializationException("", (java.lang.Throwable)var29);
    java.lang.Throwable[] var31 = var29.getSuppressed();
    java.util.Set var32 = org.jsecurity.util.CollectionUtils.asSet((java.lang.Object[])var31);
    org.jsecurity.authc.SimpleAccount var33 = new org.jsecurity.authc.SimpleAccount((org.jsecurity.subject.PrincipalCollection)var14, (java.lang.Object)var19, var32);
    var8.setPrincipals((org.jsecurity.subject.PrincipalCollection)var14);
    java.util.Collection var36 = var14.fromRealm("org.jsecurity.subject.SubjectException: dd\uFFFD");
    java.util.Collection var38 = var14.fromRealm("org.jsecurity.realm.text.PropertiesRealm_983");
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var18);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var19);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var21);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var22);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var23);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var31);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var32);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var36);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var38);

  }

  public void test429() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest6.test429");


    java.lang.String[] var4 = org.jsecurity.util.StringUtils.tokenizeToStringArray("c0a5a000-2a2c-48a5-8b3f-1db6b2cf66a4", "org.jsecurity.realm.text.PropertiesRealm_3090", true, true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var4);

  }

  public void test430() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest6.test430");


    org.jsecurity.config.UnresolveableReferenceException var1 = new org.jsecurity.config.UnresolveableReferenceException("org.jsecurity.authc.CredentialsException: 783ccd31-48a8-42dd-890f-df885a7baaff");
    org.jsecurity.util.UnavailableConstructorException var2 = new org.jsecurity.util.UnavailableConstructorException((java.lang.Throwable)var1);
    org.jsecurity.authc.UnknownAccountException var3 = new org.jsecurity.authc.UnknownAccountException((java.lang.Throwable)var2);

  }

  public void test431() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest6.test431");


    java.io.InputStream var1 = org.jsecurity.util.ClassUtils.getResourceAsStream("");
    java.lang.Object[] var2 = new java.lang.Object[] { var1};
    java.util.List var3 = org.jsecurity.util.CollectionUtils.asList(var2);
    org.jsecurity.authc.pam.ModularRealmAuthenticator var4 = new org.jsecurity.authc.pam.ModularRealmAuthenticator(var3);
    org.jsecurity.subject.SimplePrincipalCollection var6 = new org.jsecurity.subject.SimplePrincipalCollection((java.util.Collection)var3, "org.jsecurity.authz.UnauthorizedException: org.jsecurity.session.ExpiredSessionException: ");
    org.jsecurity.session.UnknownSessionException var11 = new org.jsecurity.session.UnknownSessionException("dd\uFFFD", (java.io.Serializable)100.0f);
    org.jsecurity.session.SessionException var13 = new org.jsecurity.session.SessionException("dd\uFFFD", (java.lang.Throwable)var11, (java.io.Serializable)0);
    org.jsecurity.session.SessionException var14 = new org.jsecurity.session.SessionException("dd\uFFFD", (java.lang.Throwable)var11);
    var6.add((java.lang.Object)var14, "org.jsecurity.config.ConfigurationException: dd\uFFFD");
    java.util.Set var17 = var6.asSet();
    java.util.List var18 = var6.asList();
    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      org.jsecurity.mgt.DefaultSecurityManager var19 = new org.jsecurity.mgt.DefaultSecurityManager((java.util.Collection)var18);
      fail("Expected exception of type java.lang.ClassCastException");
    } catch (java.lang.ClassCastException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var1);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var2);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var3);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var17);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var18);

  }

  public void test432() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest6.test432");


    org.jsecurity.cache.HashtableCacheManager var0 = new org.jsecurity.cache.HashtableCacheManager();
    org.jsecurity.cache.Cache var2 = var0.getCache("\u0000\u0000");
    org.jsecurity.realm.text.PropertiesRealm var3 = new org.jsecurity.realm.text.PropertiesRealm((org.jsecurity.cache.CacheManager)var0);
    org.jsecurity.codec.CodecException var6 = new org.jsecurity.codec.CodecException("dd\uFFFD");
    org.jsecurity.authc.ConcurrentAccessException var7 = new org.jsecurity.authc.ConcurrentAccessException("org.jsecurity.authz.UnauthorizedException: org.jsecurity.session.ExpiredSessionException: ", (java.lang.Throwable)var6);
    org.jsecurity.subject.SimplePrincipalCollection var9 = new org.jsecurity.subject.SimplePrincipalCollection((java.lang.Object)var6, "");
    org.jsecurity.authc.pam.FirstSuccessfulAuthenticationStrategy var10 = new org.jsecurity.authc.pam.FirstSuccessfulAuthenticationStrategy();
    org.jsecurity.authz.UnauthorizedException var12 = new org.jsecurity.authz.UnauthorizedException("org.jsecurity.config.ConfigurationException: dd\uFFFD");
    java.lang.Throwable[] var13 = var12.getSuppressed();
    java.util.List var14 = org.jsecurity.util.CollectionUtils.asList((java.lang.Object[])var13);
    org.jsecurity.authc.UsernamePasswordToken var15 = new org.jsecurity.authc.UsernamePasswordToken();
    java.lang.String var16 = var15.getUsername();
    java.net.InetAddress var17 = var15.getInetAddress();
    org.jsecurity.authc.AuthenticationInfo var18 = var10.beforeAllAttempts((java.util.Collection)var14, (org.jsecurity.authc.AuthenticationToken)var15);
    org.jsecurity.session.UnknownSessionException var23 = new org.jsecurity.session.UnknownSessionException("dd\uFFFD", (java.io.Serializable)100.0f);
    org.jsecurity.subject.SubjectException var24 = new org.jsecurity.subject.SubjectException("dd\uFFFD", (java.lang.Throwable)var23);
    org.jsecurity.io.SerializationException var25 = new org.jsecurity.io.SerializationException("", (java.lang.Throwable)var24);
    java.lang.Throwable[] var26 = var24.getSuppressed();
    java.util.Set var27 = org.jsecurity.util.CollectionUtils.asSet((java.lang.Object[])var26);
    org.jsecurity.authc.SimpleAccount var28 = new org.jsecurity.authc.SimpleAccount((org.jsecurity.subject.PrincipalCollection)var9, (java.lang.Object)var14, var27);
    var3.onLogout((org.jsecurity.subject.PrincipalCollection)var9);
    org.jsecurity.config.ReflectionBuilder var30 = new org.jsecurity.config.ReflectionBuilder();
    org.jsecurity.io.IniResource var31 = new org.jsecurity.io.IniResource();
    var31.setCharsetName("org.jsecurity.authz.UnauthorizedException: org.jsecurity.session.ExpiredSessionException: ");
    java.util.Map var34 = var31.getSections();
    java.util.Map var35 = var30.buildObjects(var34);
    org.jsecurity.config.ReflectionBuilder var36 = new org.jsecurity.config.ReflectionBuilder();
    org.jsecurity.io.IniResource var37 = new org.jsecurity.io.IniResource();
    var37.setCharsetName("org.jsecurity.authz.UnauthorizedException: org.jsecurity.session.ExpiredSessionException: ");
    java.util.Map var40 = var37.getSections();
    java.util.Map var41 = var36.buildObjects(var40);
    java.util.Map var42 = var30.buildObjects(var41);
    java.util.Map var43 = var30.getObjects();
    org.jsecurity.io.IniResource var44 = new org.jsecurity.io.IniResource();
    java.util.Map var45 = var44.getSections();
    java.util.Map var46 = var44.getSections();
    var30.setObjects(var46);
    org.jsecurity.authc.SimpleAccount var48 = new org.jsecurity.authc.SimpleAccount((org.jsecurity.subject.PrincipalCollection)var9, (java.lang.Object)var46);
    var48.setCredentialsExpired(false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var2);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var13);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var14);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var16);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var17);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var18);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var26);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var27);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var34);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var35);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var40);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var41);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var42);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var43);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var45);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var46);

  }

  public void test433() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest6.test433");


    org.jsecurity.realm.text.PropertiesRealm var0 = new org.jsecurity.realm.text.PropertiesRealm();
    var0.setUserDefinitions("9cb90f60-d35b-4e44-b2d5-6cceb1fef454");
    var0.setResourcePath("0efd2a5d-db7f-4119-871f-6c218f55416f");

  }

  public void test434() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest6.test434");


    org.jsecurity.util.AntPathMatcher var0 = new org.jsecurity.util.AntPathMatcher();
    var0.setPathSeparator("orgjsecurityauthcCredentialsException783ccd3148a842dd890fdf885a7baafAA==");
    org.jsecurity.authc.UsernamePasswordToken var6 = new org.jsecurity.authc.UsernamePasswordToken("e7d4bd33-56db-406b-a889-11d0765a3be3", "d0ddeefd-5576-4906-99f8-93b892e0c773", true);
    org.jsecurity.crypto.hash.Sha1Hash var8 = new org.jsecurity.crypto.hash.Sha1Hash((java.lang.Object)"orgjsecurityauthcCredentialsException783ccd3148a842dd890fdf885a7baafAA==", (java.lang.Object)"e7d4bd33-56db-406b-a889-11d0765a3be3", 100);

  }

  public void test435() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest6.test435");


    org.jsecurity.config.IniConfiguration var0 = new org.jsecurity.config.IniConfiguration();
    var0.setConfigUrl("hi!");
    var0.setConfig("org.jsecurity.realm.SimpleAccountRealm-52-authorization");
    org.jsecurity.mgt.SecurityManager var5 = var0.getSecurityManager();
    org.jsecurity.mgt.SecurityManager var6 = var0.getSecurityManager();
    var0.setConfigUrl("7dd9d095-6c41-447c-a2f6-e2c6c8807c11");
    var0.setConfig("834572e1-b0b5-404d-a95e-1e05e4e0fecf");
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var5);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var6);

  }

  public void test436() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest6.test436");


    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      byte[] var1 = org.jsecurity.codec.Hex.decode("6ef0ea81-df08-48cf-af25-ca783616684e");
      fail("Expected exception of type java.lang.IllegalArgumentException");
    } catch (java.lang.IllegalArgumentException e) {
      // Expected exception.
    }

  }

  public void test437() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest6.test437");


    org.jsecurity.session.mgt.eis.MemorySessionDAO var0 = new org.jsecurity.session.mgt.eis.MemorySessionDAO();
    org.jsecurity.cache.Cache var1 = var0.getActiveSessionsCache();
    org.jsecurity.cache.CacheManager var2 = var0.getCacheManager();
    org.jsecurity.cache.HashtableCacheManager var3 = new org.jsecurity.cache.HashtableCacheManager();
    org.jsecurity.cache.Cache var5 = var3.getCache("\u0000\u0000");
    var0.setActiveSessionsCache(var5);
    java.io.InputStream var8 = org.jsecurity.util.ClassUtils.getResourceAsStream("");
    java.lang.Object[] var9 = new java.lang.Object[] { var8};
    java.util.List var10 = org.jsecurity.util.CollectionUtils.asList(var9);
    org.jsecurity.authc.pam.ModularRealmAuthenticator var11 = new org.jsecurity.authc.pam.ModularRealmAuthenticator(var10);
    org.jsecurity.authc.pam.AllSuccessfulModularAuthenticationStrategy var12 = new org.jsecurity.authc.pam.AllSuccessfulModularAuthenticationStrategy();
    var11.setModularAuthenticationStrategy((org.jsecurity.authc.pam.ModularAuthenticationStrategy)var12);
    org.jsecurity.authz.SimpleAuthorizationInfo var14 = new org.jsecurity.authz.SimpleAuthorizationInfo();
    var14.addStringPermission("hi!");
    java.io.InputStream var18 = org.jsecurity.util.ClassUtils.getResourceAsStream("");
    java.lang.Object[] var19 = new java.lang.Object[] { var18};
    java.util.List var20 = org.jsecurity.util.CollectionUtils.asList(var19);
    var14.addRoles((java.util.Collection)var20);
    var11.setAuthenticationListeners((java.util.Collection)var20);
    org.jsecurity.realm.activedirectory.ActiveDirectoryRealm var23 = new org.jsecurity.realm.activedirectory.ActiveDirectoryRealm();
    var23.setPrincipalSuffix("");
    var11.setRealm((org.jsecurity.realm.Realm)var23);
    org.jsecurity.cache.HashtableCacheManager var27 = new org.jsecurity.cache.HashtableCacheManager();
    org.jsecurity.cache.Cache var29 = var27.getCache("\u0000\u0000");
    var23.setAuthorizationCache(var29);
    var0.setActiveSessionsCache(var29);
    org.jsecurity.session.mgt.SimpleSession var32 = new org.jsecurity.session.mgt.SimpleSession();
    java.io.Serializable var33 = var0.create((org.jsecurity.session.Session)var32);
    org.jsecurity.session.mgt.SimpleSession var34 = new org.jsecurity.session.mgt.SimpleSession();
    var34.touch();
    var34.validate();
    org.jsecurity.session.mgt.SimpleSession var37 = new org.jsecurity.session.mgt.SimpleSession();
    var37.setTimeout((-1L));
    org.jsecurity.session.mgt.SimpleSession var40 = new org.jsecurity.session.mgt.SimpleSession();
    java.util.Date var41 = var40.getLastAccessTime();
    var37.setLastAccessTime(var41);
    org.jsecurity.session.mgt.SimpleSession var43 = new org.jsecurity.session.mgt.SimpleSession();
    java.util.Date var44 = var43.getLastAccessTime();
    var37.setStopTimestamp(var44);
    var34.setLastAccessTime(var44);
    var32.setLastAccessTime(var44);
    var32.setTimeout(0L);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var1);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var2);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var5);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var8);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var9);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var10);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var18);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var19);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var20);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var29);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var33 + "' != '" + "84def7d7-144d-4ba6-8e8b-b2bb5ffe89db"+ "'", var33.equals("84def7d7-144d-4ba6-8e8b-b2bb5ffe89db"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var41);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var44);

  }

  public void test438() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest6.test438");


    java.lang.String[] var1 = org.jsecurity.util.StringUtils.split("4f79d01b-a90a-4319-b7ab-e8e15489bc6e");
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var1);

  }

  public void test439() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest6.test439");


    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      java.lang.String[] var1 = org.jsecurity.util.StringUtils.splitKeyValue("05ae36e8-96f2-4042-aeb6-dbacd70cb358");
      fail("Expected exception of type java.text.ParseException");
    } catch (java.text.ParseException e) {
      // Expected exception.
    }

  }

  public void test440() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest6.test440");


    org.jsecurity.realm.activedirectory.ActiveDirectoryRealm var0 = new org.jsecurity.realm.activedirectory.ActiveDirectoryRealm();
    var0.init();
    var0.setSystemPassword("dd\uFFFD");
    org.jsecurity.authz.aop.GuestAnnotationHandler var4 = new org.jsecurity.authz.aop.GuestAnnotationHandler();
    java.lang.Class var5 = var4.getAnnotationClass();
    var0.setAuthenticationTokenClass(var5);
    org.jsecurity.mgt.DefaultSecurityManager var7 = new org.jsecurity.mgt.DefaultSecurityManager((org.jsecurity.realm.Realm)var0);
    org.jsecurity.cache.CacheManager var8 = var0.getCacheManager();
    var0.setUrl("3aaa5efd-5a5b-4a04-b3d7-42cd5249d0e9");
    org.jsecurity.cache.CacheManager var11 = var0.getCacheManager();
    var0.setSystemUsername("092c22b9-945a-4905-99a2-455b7831cf4b");
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var5);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var8);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var11);

  }

  public void test441() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest6.test441");


    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      java.io.InputStream var1 = org.jsecurity.io.ResourceUtils.getInputStreamForPath("M\uFFFD}\uFFFD\uFFFDkM7\uFFFDf\uFFFDi\uFFFD6\uFFFD]\uFFFD\uFFFD\uFFFD5\uFFFDO;");
      fail("Expected exception of type java.io.FileNotFoundException");
    } catch (java.io.FileNotFoundException e) {
      // Expected exception.
    }

  }

  public void test442() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest6.test442");


    org.jsecurity.cache.CacheException var1 = new org.jsecurity.cache.CacheException("org.jsecurity.realm.text.PropertiesRealm-595-authorization");

  }

  public void test443() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest6.test443");


    org.jsecurity.util.InstantiationException var2 = new org.jsecurity.util.InstantiationException("org.jsecurity.authc.UsernamePasswordToken - org.jsecurity.config.ConfigurationException: dd\uFFFD, rememberMe=false");
    org.jsecurity.codec.CodecException var3 = new org.jsecurity.codec.CodecException("de74753d-5858-4bf4-895a-379abad30b6d", (java.lang.Throwable)var2);

  }

  public void test444() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest6.test444");


    org.jsecurity.authc.pam.UnsupportedTokenException var0 = new org.jsecurity.authc.pam.UnsupportedTokenException();
    org.jsecurity.authc.UnknownAccountException var1 = new org.jsecurity.authc.UnknownAccountException((java.lang.Throwable)var0);
    org.jsecurity.authc.AccountException var2 = new org.jsecurity.authc.AccountException((java.lang.Throwable)var1);
    org.jsecurity.mgt.DefaultSecurityManager var3 = new org.jsecurity.mgt.DefaultSecurityManager();
    java.io.InputStream var5 = org.jsecurity.util.ClassUtils.getResourceAsStream("");
    java.lang.Object[] var6 = new java.lang.Object[] { var5};
    java.util.List var7 = org.jsecurity.util.CollectionUtils.asList(var6);
    org.jsecurity.authc.pam.ModularRealmAuthenticator var8 = new org.jsecurity.authc.pam.ModularRealmAuthenticator(var7);
    org.jsecurity.authc.pam.AllSuccessfulModularAuthenticationStrategy var9 = new org.jsecurity.authc.pam.AllSuccessfulModularAuthenticationStrategy();
    var8.setModularAuthenticationStrategy((org.jsecurity.authc.pam.ModularAuthenticationStrategy)var9);
    org.jsecurity.authz.SimpleAuthorizationInfo var11 = new org.jsecurity.authz.SimpleAuthorizationInfo();
    var11.addStringPermission("hi!");
    java.io.InputStream var15 = org.jsecurity.util.ClassUtils.getResourceAsStream("");
    java.lang.Object[] var16 = new java.lang.Object[] { var15};
    java.util.List var17 = org.jsecurity.util.CollectionUtils.asList(var16);
    var11.addRoles((java.util.Collection)var17);
    var8.setAuthenticationListeners((java.util.Collection)var17);
    var3.setSessionListeners((java.util.Collection)var17);
    org.jsecurity.realm.text.TextConfigurationRealm var21 = new org.jsecurity.realm.text.TextConfigurationRealm();
    java.io.InputStream var23 = org.jsecurity.util.ClassUtils.getResourceAsStream("");
    java.lang.Object[] var24 = new java.lang.Object[] { var23};
    java.util.List var25 = org.jsecurity.util.CollectionUtils.asList(var24);
    org.jsecurity.authc.pam.ModularRealmAuthenticator var26 = new org.jsecurity.authc.pam.ModularRealmAuthenticator(var25);
    org.jsecurity.subject.SimplePrincipalCollection var28 = new org.jsecurity.subject.SimplePrincipalCollection((java.util.Collection)var25, "org.jsecurity.authz.UnauthorizedException: org.jsecurity.session.ExpiredSessionException: ");
    org.jsecurity.session.UnknownSessionException var33 = new org.jsecurity.session.UnknownSessionException("dd\uFFFD", (java.io.Serializable)100.0f);
    org.jsecurity.session.SessionException var35 = new org.jsecurity.session.SessionException("dd\uFFFD", (java.lang.Throwable)var33, (java.io.Serializable)0);
    org.jsecurity.session.SessionException var36 = new org.jsecurity.session.SessionException("dd\uFFFD", (java.lang.Throwable)var33);
    var28.add((java.lang.Object)var36, "org.jsecurity.config.ConfigurationException: dd\uFFFD");
    var21.onLogout((org.jsecurity.subject.PrincipalCollection)var28);
    org.jsecurity.authc.pam.FirstSuccessfulAuthenticationStrategy var40 = new org.jsecurity.authc.pam.FirstSuccessfulAuthenticationStrategy();
    org.jsecurity.authz.UnauthorizedException var42 = new org.jsecurity.authz.UnauthorizedException("org.jsecurity.config.ConfigurationException: dd\uFFFD");
    java.lang.Throwable[] var43 = var42.getSuppressed();
    java.util.List var44 = org.jsecurity.util.CollectionUtils.asList((java.lang.Object[])var43);
    org.jsecurity.authc.UsernamePasswordToken var45 = new org.jsecurity.authc.UsernamePasswordToken();
    java.lang.String var46 = var45.getUsername();
    java.net.InetAddress var47 = var45.getInetAddress();
    org.jsecurity.authc.AuthenticationInfo var48 = var40.beforeAllAttempts((java.util.Collection)var44, (org.jsecurity.authc.AuthenticationToken)var45);
    boolean[] var49 = var3.hasRoles((org.jsecurity.subject.PrincipalCollection)var28, var44);
    org.jsecurity.codec.CodecException var52 = new org.jsecurity.codec.CodecException("dd\uFFFD");
    org.jsecurity.authc.ConcurrentAccessException var53 = new org.jsecurity.authc.ConcurrentAccessException("org.jsecurity.authz.UnauthorizedException: org.jsecurity.session.ExpiredSessionException: ", (java.lang.Throwable)var52);
    org.jsecurity.subject.SimplePrincipalCollection var55 = new org.jsecurity.subject.SimplePrincipalCollection((java.lang.Object)var52, "");
    java.io.InputStream var57 = org.jsecurity.util.ClassUtils.getResourceAsStream("");
    java.lang.Object[] var58 = new java.lang.Object[] { var57};
    java.util.List var59 = org.jsecurity.util.CollectionUtils.asList(var58);
    org.jsecurity.authc.pam.ModularRealmAuthenticator var60 = new org.jsecurity.authc.pam.ModularRealmAuthenticator(var59);
    var55.addAll((java.util.Collection)var59, "\u0000\u0000");
    var3.setSessionListeners((java.util.Collection)var59);
    org.jsecurity.authc.SimpleAccount var65 = new org.jsecurity.authc.SimpleAccount((java.lang.Object)var2, (java.lang.Object)var3, "ZGT/");
    org.jsecurity.subject.DelegatingSubject var66 = new org.jsecurity.subject.DelegatingSubject((org.jsecurity.mgt.SecurityManager)var3);
    org.jsecurity.authz.permission.WildcardPermission var68 = new org.jsecurity.authz.permission.WildcardPermission("a2b823b1e72eae2b727289df8a00a89df8a0bab6ad8a89c4c5c7a9b62a270000");
    org.jsecurity.authz.SimpleRole var70 = new org.jsecurity.authz.SimpleRole();
    org.jsecurity.authz.permission.WildcardPermission var73 = new org.jsecurity.authz.permission.WildcardPermission("hi!", false);
    boolean var74 = var70.isPermitted((org.jsecurity.authz.Permission)var73);
    org.jsecurity.session.InvalidSessionException var75 = new org.jsecurity.session.InvalidSessionException("org.jsecurity.config.ConfigurationException: dd\uFFFD", (java.io.Serializable)var73);
    org.jsecurity.authz.SimpleRole var76 = new org.jsecurity.authz.SimpleRole();
    org.jsecurity.authz.permission.WildcardPermission var79 = new org.jsecurity.authz.permission.WildcardPermission("hi!", false);
    boolean var80 = var76.isPermitted((org.jsecurity.authz.Permission)var79);
    boolean var81 = var73.implies((org.jsecurity.authz.Permission)var79);
    boolean var82 = var68.implies((org.jsecurity.authz.Permission)var79);
    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      var66.checkPermission((org.jsecurity.authz.Permission)var79);
      fail("Expected exception of type org.jsecurity.authz.UnauthenticatedException");
    } catch (org.jsecurity.authz.UnauthenticatedException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var5);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var6);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var7);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var15);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var16);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var17);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var23);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var24);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var25);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var43);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var44);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var46);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var47);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var48);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var49);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var57);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var58);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var59);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var74 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var80 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var81 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var82 == false);

  }

  public void test445() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest6.test445");


    java.io.InputStream var1 = org.jsecurity.util.ClassUtils.getResourceAsStream("");
    java.lang.Object[] var2 = new java.lang.Object[] { var1};
    java.util.List var3 = org.jsecurity.util.CollectionUtils.asList(var2);
    org.jsecurity.authc.pam.ModularRealmAuthenticator var4 = new org.jsecurity.authc.pam.ModularRealmAuthenticator(var3);
    org.jsecurity.subject.SimplePrincipalCollection var6 = new org.jsecurity.subject.SimplePrincipalCollection((java.util.Collection)var3, "org.jsecurity.authz.UnauthorizedException: org.jsecurity.session.ExpiredSessionException: ");
    org.jsecurity.io.ResourceException var10 = new org.jsecurity.io.ResourceException("hi!");
    org.jsecurity.authc.UnknownAccountException var11 = new org.jsecurity.authc.UnknownAccountException((java.lang.Throwable)var10);
    org.jsecurity.session.StoppedSessionException var12 = new org.jsecurity.session.StoppedSessionException("dd\uFFFD", (java.io.Serializable)var10);
    org.jsecurity.session.UnknownSessionException var13 = new org.jsecurity.session.UnknownSessionException("org.jsecurity.authz.UnauthorizedException: org.jsecurity.session.ExpiredSessionException: ", (java.lang.Throwable)var10);
    boolean var14 = var6.equals((java.lang.Object)var10);
    org.jsecurity.authz.SimpleAuthorizationInfo var15 = new org.jsecurity.authz.SimpleAuthorizationInfo();
    var15.addRole("a2b823b1e72eae2b727289df8a00a89df8a0bab6ad8a89c4c5c7a9b62a270000");
    org.jsecurity.authz.SimpleAuthorizationInfo var18 = new org.jsecurity.authz.SimpleAuthorizationInfo();
    var18.addRole("a2b823b1e72eae2b727289df8a00a89df8a0bab6ad8a89c4c5c7a9b62a270000");
    org.jsecurity.session.UnknownSessionException var25 = new org.jsecurity.session.UnknownSessionException("dd\uFFFD", (java.io.Serializable)100.0f);
    org.jsecurity.subject.SubjectException var26 = new org.jsecurity.subject.SubjectException("dd\uFFFD", (java.lang.Throwable)var25);
    org.jsecurity.io.SerializationException var27 = new org.jsecurity.io.SerializationException("", (java.lang.Throwable)var26);
    java.lang.Throwable[] var28 = var26.getSuppressed();
    java.util.Set var29 = org.jsecurity.util.CollectionUtils.asSet((java.lang.Object[])var28);
    var18.addRoles((java.util.Collection)var29);
    var15.setObjectPermissions(var29);
    java.io.InputStream var33 = org.jsecurity.util.ClassUtils.getResourceAsStream("");
    java.lang.Object[] var34 = new java.lang.Object[] { var33};
    java.util.List var35 = org.jsecurity.util.CollectionUtils.asList(var34);
    org.jsecurity.authc.pam.ModularRealmAuthenticator var36 = new org.jsecurity.authc.pam.ModularRealmAuthenticator(var35);
    org.jsecurity.subject.SimplePrincipalCollection var38 = new org.jsecurity.subject.SimplePrincipalCollection((java.util.Collection)var35, "org.jsecurity.authz.UnauthorizedException: org.jsecurity.session.ExpiredSessionException: ");
    java.util.Set var39 = var38.getRealmNames();
    java.io.InputStream var41 = org.jsecurity.util.ClassUtils.getResourceAsStream("");
    java.lang.Object[] var42 = new java.lang.Object[] { var41};
    java.util.List var43 = org.jsecurity.util.CollectionUtils.asList(var42);
    org.jsecurity.authc.pam.ModularRealmAuthenticator var44 = new org.jsecurity.authc.pam.ModularRealmAuthenticator(var43);
    org.jsecurity.subject.SimplePrincipalCollection var46 = new org.jsecurity.subject.SimplePrincipalCollection((java.util.Collection)var43, "org.jsecurity.authz.UnauthorizedException: org.jsecurity.session.ExpiredSessionException: ");
    org.jsecurity.session.UnknownSessionException var51 = new org.jsecurity.session.UnknownSessionException("dd\uFFFD", (java.io.Serializable)100.0f);
    org.jsecurity.session.SessionException var53 = new org.jsecurity.session.SessionException("dd\uFFFD", (java.lang.Throwable)var51, (java.io.Serializable)0);
    org.jsecurity.session.SessionException var54 = new org.jsecurity.session.SessionException("dd\uFFFD", (java.lang.Throwable)var51);
    var46.add((java.lang.Object)var54, "org.jsecurity.config.ConfigurationException: dd\uFFFD");
    java.util.Set var57 = var46.asSet();
    var38.addAll((java.util.Collection)var57, "6464ff");
    var15.setStringPermissions(var57);
    var6.addAll((java.util.Collection)var57, "\uFFFD\uFFFD#\uFFFD\uFFFD.\uFFFD+r\uFFFD\u6959(\uFFFD\uFFFDW\uFFFDq\uFFFD.\uFFFD\uFFFD^jY\uFFFDj\uFFFDa\uFFFD\uFFFD\uFFFDj\u0628\u0000");
    org.jsecurity.authz.UnauthenticatedException var66 = new org.jsecurity.authz.UnauthenticatedException();
    org.jsecurity.session.SessionException var67 = new org.jsecurity.session.SessionException();
    org.jsecurity.io.ResourceException var68 = new org.jsecurity.io.ResourceException((java.lang.Throwable)var67);
    org.jsecurity.session.InvalidSessionException var69 = new org.jsecurity.session.InvalidSessionException("54796a53-cb9a-42d1-a889-ef2a5a9adae9", (java.lang.Throwable)var66, (java.io.Serializable)var68);
    org.jsecurity.config.UnresolveableReferenceException var70 = new org.jsecurity.config.UnresolveableReferenceException("hi!", (java.lang.Throwable)var68);
    org.jsecurity.config.ConfigurationException var71 = new org.jsecurity.config.ConfigurationException((java.lang.Throwable)var68);
    org.jsecurity.authc.pam.UnsupportedTokenException var72 = new org.jsecurity.authc.pam.UnsupportedTokenException("2a262161-164d-40f5-af62-a938c7388b48", (java.lang.Throwable)var68);
    org.jsecurity.authc.SimpleAccount var74 = new org.jsecurity.authc.SimpleAccount((java.util.Collection)var57, (java.lang.Object)"2a262161-164d-40f5-af62-a938c7388b48", "f0f45d47-9622-4e2b-af0d-f28e1d3b51e6");
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var1);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var2);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var3);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var14 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var28);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var29);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var33);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var34);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var35);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var39);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var41);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var42);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var43);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var57);

  }

  public void test446() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest6.test446");


    org.jsecurity.authc.CredentialsException var1 = new org.jsecurity.authc.CredentialsException("orgjsecurityconfigConfigurationExceptionAAA=");
    org.jsecurity.authc.pam.UnsupportedTokenException var2 = new org.jsecurity.authc.pam.UnsupportedTokenException((java.lang.Throwable)var1);

  }

  public void test447() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest6.test447");


    org.jsecurity.crypto.BlowfishCipher var0 = new org.jsecurity.crypto.BlowfishCipher();
    byte[] var4 = new byte[] { (byte)100, (byte)100, (byte)(-1)};
    java.lang.String var5 = org.jsecurity.codec.CodecSupport.toString(var4);
    byte[] var6 = org.jsecurity.codec.Base64.encode(var4);
    char[] var7 = org.jsecurity.codec.CodecSupport.toChars(var6);
    byte[] var11 = new byte[] { (byte)100, (byte)100, (byte)(-1)};
    java.lang.String var12 = org.jsecurity.codec.CodecSupport.toString(var11);
    byte[] var14 = org.jsecurity.codec.Base64.encode(var11, false);
    byte[] var15 = var0.encrypt(var6, var11);
    byte[] var16 = org.jsecurity.codec.Base64.encode(var15);
    boolean var17 = org.jsecurity.codec.Base64.isBase64(var16);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var4);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var5 + "' != '" + "dd\uFFFD"+ "'", var5.equals("dd\uFFFD"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var6);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var7);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var11);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var12 + "' != '" + "dd\uFFFD"+ "'", var12.equals("dd\uFFFD"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var14);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var15);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var16);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var17 == true);

  }

  public void test448() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest6.test448");


    org.jsecurity.session.mgt.DefaultSessionManager var0 = new org.jsecurity.session.mgt.DefaultSessionManager();
    org.jsecurity.session.mgt.eis.MemorySessionDAO var1 = new org.jsecurity.session.mgt.eis.MemorySessionDAO();
    org.jsecurity.cache.Cache var2 = var1.getActiveSessionsCache();
    org.jsecurity.cache.CacheManager var3 = var1.getCacheManager();
    org.jsecurity.cache.HashtableCacheManager var4 = new org.jsecurity.cache.HashtableCacheManager();
    org.jsecurity.cache.Cache var6 = var4.getCache("\u0000\u0000");
    var1.setActiveSessionsCache(var6);
    java.io.InputStream var9 = org.jsecurity.util.ClassUtils.getResourceAsStream("");
    java.lang.Object[] var10 = new java.lang.Object[] { var9};
    java.util.List var11 = org.jsecurity.util.CollectionUtils.asList(var10);
    org.jsecurity.authc.pam.ModularRealmAuthenticator var12 = new org.jsecurity.authc.pam.ModularRealmAuthenticator(var11);
    org.jsecurity.authc.pam.AllSuccessfulModularAuthenticationStrategy var13 = new org.jsecurity.authc.pam.AllSuccessfulModularAuthenticationStrategy();
    var12.setModularAuthenticationStrategy((org.jsecurity.authc.pam.ModularAuthenticationStrategy)var13);
    org.jsecurity.authz.SimpleAuthorizationInfo var15 = new org.jsecurity.authz.SimpleAuthorizationInfo();
    var15.addStringPermission("hi!");
    java.io.InputStream var19 = org.jsecurity.util.ClassUtils.getResourceAsStream("");
    java.lang.Object[] var20 = new java.lang.Object[] { var19};
    java.util.List var21 = org.jsecurity.util.CollectionUtils.asList(var20);
    var15.addRoles((java.util.Collection)var21);
    var12.setAuthenticationListeners((java.util.Collection)var21);
    org.jsecurity.realm.activedirectory.ActiveDirectoryRealm var24 = new org.jsecurity.realm.activedirectory.ActiveDirectoryRealm();
    var24.setPrincipalSuffix("");
    var12.setRealm((org.jsecurity.realm.Realm)var24);
    org.jsecurity.cache.HashtableCacheManager var28 = new org.jsecurity.cache.HashtableCacheManager();
    org.jsecurity.cache.Cache var30 = var28.getCache("\u0000\u0000");
    var24.setAuthorizationCache(var30);
    var1.setActiveSessionsCache(var30);
    org.jsecurity.session.mgt.SimpleSession var33 = new org.jsecurity.session.mgt.SimpleSession();
    java.io.Serializable var34 = var1.create((org.jsecurity.session.Session)var33);
    var0.setSessionDAO((org.jsecurity.session.mgt.eis.SessionDAO)var1);
    org.jsecurity.authc.pam.AllSuccessfulModularAuthenticationStrategy var36 = new org.jsecurity.authc.pam.AllSuccessfulModularAuthenticationStrategy();
    char[] var38 = new char[] { };
    org.jsecurity.authc.UsernamePasswordToken var40 = new org.jsecurity.authc.UsernamePasswordToken("hi!", var38, true);
    org.jsecurity.authc.SimpleAccount var41 = new org.jsecurity.authc.SimpleAccount();
    var41.setCredentialsExpired(false);
    boolean var44 = var41.isLocked();
    org.jsecurity.authc.AuthenticationInfo var45 = var36.afterAllAttempts((org.jsecurity.authc.AuthenticationToken)var40, (org.jsecurity.authc.AuthenticationInfo)var41);
    char[] var49 = new char[] { '4', '#'};
    org.jsecurity.authc.UsernamePasswordToken var50 = new org.jsecurity.authc.UsernamePasswordToken("\u0000\u0000", var49);
    org.jsecurity.authc.SimpleAccount var51 = new org.jsecurity.authc.SimpleAccount();
    var51.setCredentialsExpired(false);
    var51.setCredentialsExpired(false);
    boolean var56 = var51.isCredentialsExpired();
    org.jsecurity.authc.AuthenticationInfo var57 = var36.afterAllAttempts((org.jsecurity.authc.AuthenticationToken)var50, (org.jsecurity.authc.AuthenticationInfo)var51);
    org.jsecurity.realm.activedirectory.ActiveDirectoryRealm var58 = new org.jsecurity.realm.activedirectory.ActiveDirectoryRealm();
    org.jsecurity.authc.credential.Sha256CredentialsMatcher var59 = new org.jsecurity.authc.credential.Sha256CredentialsMatcher();
    var58.setCredentialsMatcher((org.jsecurity.authc.credential.CredentialsMatcher)var59);
    java.lang.String var61 = var58.getAuthorizationCacheName();
    org.jsecurity.authc.UsernamePasswordToken var62 = new org.jsecurity.authc.UsernamePasswordToken();
    java.lang.String var63 = var62.getUsername();
    java.lang.Object var64 = var62.getPrincipal();
    boolean var65 = var58.supports((org.jsecurity.authc.AuthenticationToken)var62);
    org.jsecurity.session.UnknownSessionException var69 = new org.jsecurity.session.UnknownSessionException("dd\uFFFD", (java.io.Serializable)100.0f);
    org.jsecurity.session.SessionException var71 = new org.jsecurity.session.SessionException("dd\uFFFD", (java.lang.Throwable)var69, (java.io.Serializable)0);
    org.jsecurity.authc.SimpleAuthenticationInfo var74 = new org.jsecurity.authc.SimpleAuthenticationInfo((java.lang.Object)0, (java.lang.Object)10, "hi!");
    java.lang.Object var75 = var74.getCredentials();
    java.lang.String var76 = var74.toString();
    org.jsecurity.authc.AuthenticationInfo var77 = var36.afterAllAttempts((org.jsecurity.authc.AuthenticationToken)var62, (org.jsecurity.authc.AuthenticationInfo)var74);
    org.jsecurity.session.mgt.eis.MemorySessionDAO var78 = new org.jsecurity.session.mgt.eis.MemorySessionDAO();
    org.jsecurity.cache.Cache var79 = var78.getActiveSessionsCache();
    var78.setActiveSessionsCacheName("dd\uFFFD");
    var74.setCredentials((java.lang.Object)var78);
    var0.setSessionDAO((org.jsecurity.session.mgt.eis.SessionDAO)var78);
    org.jsecurity.session.mgt.quartz.QuartzSessionValidationScheduler var84 = new org.jsecurity.session.mgt.quartz.QuartzSessionValidationScheduler();
    var0.setSessionValidationScheduler((org.jsecurity.session.mgt.SessionValidationScheduler)var84);
    org.jsecurity.subject.InvalidSubjectException var87 = new org.jsecurity.subject.InvalidSubjectException("org.jsecurity.realm.text.TextConfigurationRealm_1021");
    org.jsecurity.authc.CredentialsException var89 = new org.jsecurity.authc.CredentialsException("org.jsecurity.authz.UnauthorizedException: org.jsecurity.session.ExpiredSessionException: ");
    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      java.lang.Object var90 = var0.removeAttribute((java.io.Serializable)"org.jsecurity.realm.text.TextConfigurationRealm_1021", (java.lang.Object)var89);
      fail("Expected exception of type org.jsecurity.session.UnknownSessionException");
    } catch (org.jsecurity.session.UnknownSessionException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var2);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var3);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var6);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var9);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var10);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var11);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var19);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var20);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var21);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var30);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var34 + "' != '" + "ff7cbeab-bfbe-4962-8b26-e552838722bb"+ "'", var34.equals("ff7cbeab-bfbe-4962-8b26-e552838722bb"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var38);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var44 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var45);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var49);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var56 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var57);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var61);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var63);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var64);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var65 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var75 + "' != '" + 10+ "'", var75.equals(10));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var77);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var79);

  }

  public void test449() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest6.test449");


    org.jsecurity.session.mgt.DefaultSessionManager var0 = new org.jsecurity.session.mgt.DefaultSessionManager();
    org.jsecurity.session.mgt.SessionValidationScheduler var1 = var0.getSessionValidationScheduler();
    org.jsecurity.subject.InvalidSubjectException var3 = new org.jsecurity.subject.InvalidSubjectException("NfxhYN7ItBfRAmDBmprtU73ghfEEPpcDJrHPkZ06wiY=");
    boolean var4 = var0.isValid((java.io.Serializable)var3);
    org.jsecurity.cache.ehcache.EhCacheManager var5 = new org.jsecurity.cache.ehcache.EhCacheManager();
    net.sf.ehcache.CacheManager var6 = var5.getCacheManager();
    var5.destroy();
    net.sf.ehcache.CacheManager var8 = var5.getCacheManager();
    net.sf.ehcache.CacheManager var9 = var5.getCacheManager();
    var5.init();
    var0.setCacheManager((org.jsecurity.cache.CacheManager)var5);
    var0.validateSessions();
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var4 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var6);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var8);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var9);

  }

  public void test450() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest6.test450");


    org.jsecurity.session.StoppedSessionException var2 = new org.jsecurity.session.StoppedSessionException("58f38fc6-de62-43eb-8a3f-7686b38ede45", (java.io.Serializable)"8ec85ffa-ab28-4808-9fcc-2d60518e27db");

  }

  public void test451() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest6.test451");


    org.jsecurity.realm.activedirectory.ActiveDirectoryRealm var0 = new org.jsecurity.realm.activedirectory.ActiveDirectoryRealm();
    org.jsecurity.authc.credential.Sha256CredentialsMatcher var1 = new org.jsecurity.authc.credential.Sha256CredentialsMatcher();
    var0.setCredentialsMatcher((org.jsecurity.authc.credential.CredentialsMatcher)var1);
    org.jsecurity.realm.activedirectory.ActiveDirectoryRealm var3 = new org.jsecurity.realm.activedirectory.ActiveDirectoryRealm();
    org.jsecurity.authc.credential.Sha256CredentialsMatcher var4 = new org.jsecurity.authc.credential.Sha256CredentialsMatcher();
    var3.setCredentialsMatcher((org.jsecurity.authc.credential.CredentialsMatcher)var4);
    java.lang.String var6 = var3.getAuthorizationCacheName();
    var3.setUrl("hi!");
    org.jsecurity.realm.ldap.DefaultLdapContextFactory var9 = new org.jsecurity.realm.ldap.DefaultLdapContextFactory();
    var3.setLdapContextFactory((org.jsecurity.realm.ldap.LdapContextFactory)var9);
    var9.setAuthentication("org.jsecurity.authz.UnauthorizedException: org.jsecurity.session.ExpiredSessionException: ");
    var0.setLdapContextFactory((org.jsecurity.realm.ldap.LdapContextFactory)var9);
    var9.setSearchBase("7ac52728-a594-485e-8fa4-b9d179454b9f");
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var6);

  }

  public void test452() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest6.test452");


    org.jsecurity.authz.SimpleAuthorizationInfo var0 = new org.jsecurity.authz.SimpleAuthorizationInfo();
    java.util.Set var1 = var0.getStringPermissions();
    java.util.Set var2 = var0.getRoles();
    var0.addRole("3d40fa30-fa08-4705-a0dc-1dd5464d0a01");
    org.jsecurity.crypto.hash.Md2Hash var6 = org.jsecurity.crypto.hash.Md2Hash.fromBase64String("a2b823b1e72eae2b727289df8a00a89df8a0bab6ad8a89c4c5c7a9b62a270000");
    org.jsecurity.authc.credential.Md2CredentialsMatcher var7 = new org.jsecurity.authc.credential.Md2CredentialsMatcher();
    org.jsecurity.authz.SimpleAuthorizingAccount var9 = new org.jsecurity.authz.SimpleAuthorizingAccount((java.lang.Object)"a2b823b1e72eae2b727289df8a00a89df8a0bab6ad8a89c4c5c7a9b62a270000", (java.lang.Object)var7, "");
    var9.addStringPermission("hi!");
    org.jsecurity.authz.SimpleAuthorizationInfo var12 = new org.jsecurity.authz.SimpleAuthorizationInfo();
    var12.addRole("a2b823b1e72eae2b727289df8a00a89df8a0bab6ad8a89c4c5c7a9b62a270000");
    org.jsecurity.session.UnknownSessionException var19 = new org.jsecurity.session.UnknownSessionException("dd\uFFFD", (java.io.Serializable)100.0f);
    org.jsecurity.subject.SubjectException var20 = new org.jsecurity.subject.SubjectException("dd\uFFFD", (java.lang.Throwable)var19);
    org.jsecurity.io.SerializationException var21 = new org.jsecurity.io.SerializationException("", (java.lang.Throwable)var20);
    java.lang.Throwable[] var22 = var20.getSuppressed();
    java.util.Set var23 = org.jsecurity.util.CollectionUtils.asSet((java.lang.Object[])var22);
    var12.addRoles((java.util.Collection)var23);
    boolean var25 = var9.isPermittedAll((java.util.Collection)var23);
    var0.setObjectPermissions(var23);
    org.jsecurity.authz.SimpleAuthorizationInfo var27 = new org.jsecurity.authz.SimpleAuthorizationInfo(var23);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var1);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var2);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var6);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var22);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var23);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var25 == true);

  }

  public void test453() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest6.test453");


    org.jsecurity.session.mgt.DefaultSessionManager var0 = new org.jsecurity.session.mgt.DefaultSessionManager();
    org.jsecurity.session.mgt.SessionValidationScheduler var1 = var0.getSessionValidationScheduler();
    org.jsecurity.authc.IncorrectCredentialsException var4 = new org.jsecurity.authc.IncorrectCredentialsException("9d388eff-106e-47d9-8180-843fdfd13dce");
    org.jsecurity.session.InvalidSessionException var5 = new org.jsecurity.session.InvalidSessionException("org.jsecurity.realm.text.TextConfigurationRealm_389", (java.lang.Throwable)var4);
    org.jsecurity.session.StoppedSessionException var6 = new org.jsecurity.session.StoppedSessionException((java.lang.Throwable)var4);
    org.jsecurity.authc.AccountException var7 = new org.jsecurity.authc.AccountException((java.lang.Throwable)var4);
    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      java.net.InetAddress var8 = var0.getHostAddress((java.io.Serializable)var7);
      fail("Expected exception of type org.jsecurity.session.UnknownSessionException");
    } catch (org.jsecurity.session.UnknownSessionException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var1);

  }

  public void test454() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest6.test454");


    org.jsecurity.config.ConfigurationException var1 = new org.jsecurity.config.ConfigurationException();
    org.jsecurity.util.UnknownClassException var2 = new org.jsecurity.util.UnknownClassException((java.lang.Throwable)var1);
    org.jsecurity.util.InstantiationException var3 = new org.jsecurity.util.InstantiationException((java.lang.Throwable)var2);
    org.jsecurity.session.UnknownSessionException var4 = new org.jsecurity.session.UnknownSessionException("9d388eff-106e-47d9-8180-843fdfd13dce", (java.lang.Throwable)var3);
    org.jsecurity.session.InvalidSessionException var5 = new org.jsecurity.session.InvalidSessionException((java.lang.Throwable)var3);

  }

  public void test455() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest6.test455");


    org.jsecurity.session.mgt.SimpleSession var0 = new org.jsecurity.session.mgt.SimpleSession();
    org.jsecurity.session.UnknownSessionException var4 = new org.jsecurity.session.UnknownSessionException("dd\uFFFD", (java.io.Serializable)100.0f);
    org.jsecurity.session.SessionException var6 = new org.jsecurity.session.SessionException("dd\uFFFD", (java.lang.Throwable)var4, (java.io.Serializable)0);
    org.jsecurity.authc.AccountException var7 = new org.jsecurity.authc.AccountException((java.lang.Throwable)var4);
    var0.setId((java.io.Serializable)var4);
    java.util.Map var9 = var0.getAttributes();
    var0.setExpired(false);
    java.util.Date var12 = var0.getLastAccessTime();
    boolean var13 = var0.isValid();
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var9);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var12);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var13 == true);

  }

  public void test456() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest6.test456");


    org.jsecurity.realm.activedirectory.ActiveDirectoryRealm var0 = new org.jsecurity.realm.activedirectory.ActiveDirectoryRealm();
    org.jsecurity.authc.credential.Sha256CredentialsMatcher var1 = new org.jsecurity.authc.credential.Sha256CredentialsMatcher();
    var0.setCredentialsMatcher((org.jsecurity.authc.credential.CredentialsMatcher)var1);
    org.jsecurity.realm.activedirectory.ActiveDirectoryRealm var3 = new org.jsecurity.realm.activedirectory.ActiveDirectoryRealm();
    org.jsecurity.authc.credential.Sha256CredentialsMatcher var4 = new org.jsecurity.authc.credential.Sha256CredentialsMatcher();
    var3.setCredentialsMatcher((org.jsecurity.authc.credential.CredentialsMatcher)var4);
    java.lang.String var6 = var3.getAuthorizationCacheName();
    var3.setUrl("hi!");
    org.jsecurity.realm.ldap.DefaultLdapContextFactory var9 = new org.jsecurity.realm.ldap.DefaultLdapContextFactory();
    var3.setLdapContextFactory((org.jsecurity.realm.ldap.LdapContextFactory)var9);
    var9.setAuthentication("org.jsecurity.authz.UnauthorizedException: org.jsecurity.session.ExpiredSessionException: ");
    var0.setLdapContextFactory((org.jsecurity.realm.ldap.LdapContextFactory)var9);
    org.jsecurity.io.IniResource var14 = new org.jsecurity.io.IniResource();
    java.lang.String var15 = var14.getCharsetName();
    org.jsecurity.config.ReflectionBuilder var16 = new org.jsecurity.config.ReflectionBuilder();
    org.jsecurity.io.IniResource var17 = new org.jsecurity.io.IniResource();
    var17.setCharsetName("org.jsecurity.authz.UnauthorizedException: org.jsecurity.session.ExpiredSessionException: ");
    java.util.Map var20 = var17.getSections();
    java.util.Map var21 = var16.buildObjects(var20);
    var14.setSections(var21);
    var9.setAdditionalEnvironment(var21);
    var9.setSystemUsername("orgjsecurityconfigConfigurationExceptionAAA=\r\n");
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var6);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var15);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var20);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var21);

  }

  public void test457() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest6.test457");


    org.jsecurity.authz.SimpleAuthorizationInfo var0 = new org.jsecurity.authz.SimpleAuthorizationInfo();
    java.util.Set var1 = var0.getStringPermissions();
    java.util.Set var2 = var0.getRoles();
    java.util.Set var3 = var0.getRoles();
    java.util.Set var4 = var0.getRoles();
    var0.addStringPermission("072be27b-6bd8-4897-92c3-67cf42b4a94f");
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var1);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var2);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var3);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var4);

  }

  public void test458() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest6.test458");


    org.jsecurity.codec.CodecException var2 = new org.jsecurity.codec.CodecException("dd\uFFFD");
    org.jsecurity.authc.ConcurrentAccessException var3 = new org.jsecurity.authc.ConcurrentAccessException("org.jsecurity.authz.UnauthorizedException: org.jsecurity.session.ExpiredSessionException: ", (java.lang.Throwable)var2);
    org.jsecurity.subject.SimplePrincipalCollection var5 = new org.jsecurity.subject.SimplePrincipalCollection((java.lang.Object)var2, "");
    java.io.InputStream var7 = org.jsecurity.util.ClassUtils.getResourceAsStream("");
    java.lang.Object[] var8 = new java.lang.Object[] { var7};
    java.util.List var9 = org.jsecurity.util.CollectionUtils.asList(var8);
    org.jsecurity.authc.pam.ModularRealmAuthenticator var10 = new org.jsecurity.authc.pam.ModularRealmAuthenticator(var9);
    org.jsecurity.authc.pam.AllSuccessfulModularAuthenticationStrategy var11 = new org.jsecurity.authc.pam.AllSuccessfulModularAuthenticationStrategy();
    var10.setModularAuthenticationStrategy((org.jsecurity.authc.pam.ModularAuthenticationStrategy)var11);
    org.jsecurity.authz.SimpleAuthorizationInfo var13 = new org.jsecurity.authz.SimpleAuthorizationInfo();
    var13.addStringPermission("hi!");
    java.io.InputStream var17 = org.jsecurity.util.ClassUtils.getResourceAsStream("");
    java.lang.Object[] var18 = new java.lang.Object[] { var17};
    java.util.List var19 = org.jsecurity.util.CollectionUtils.asList(var18);
    var13.addRoles((java.util.Collection)var19);
    var10.setAuthenticationListeners((java.util.Collection)var19);
    org.jsecurity.realm.activedirectory.ActiveDirectoryRealm var22 = new org.jsecurity.realm.activedirectory.ActiveDirectoryRealm();
    var22.setPrincipalSuffix("");
    var10.setRealm((org.jsecurity.realm.Realm)var22);
    org.jsecurity.authc.pam.FirstSuccessfulAuthenticationStrategy var26 = new org.jsecurity.authc.pam.FirstSuccessfulAuthenticationStrategy();
    org.jsecurity.authz.UnauthorizedException var28 = new org.jsecurity.authz.UnauthorizedException("org.jsecurity.config.ConfigurationException: dd\uFFFD");
    java.lang.Throwable[] var29 = var28.getSuppressed();
    java.util.List var30 = org.jsecurity.util.CollectionUtils.asList((java.lang.Object[])var29);
    org.jsecurity.authc.UsernamePasswordToken var31 = new org.jsecurity.authc.UsernamePasswordToken();
    java.lang.String var32 = var31.getUsername();
    java.net.InetAddress var33 = var31.getInetAddress();
    org.jsecurity.authc.AuthenticationInfo var34 = var26.beforeAllAttempts((java.util.Collection)var30, (org.jsecurity.authc.AuthenticationToken)var31);
    var10.setModularAuthenticationStrategy((org.jsecurity.authc.pam.ModularAuthenticationStrategy)var26);
    org.jsecurity.authc.SimpleAccount var36 = new org.jsecurity.authc.SimpleAccount((org.jsecurity.subject.PrincipalCollection)var5, (java.lang.Object)var10);
    org.jsecurity.authc.pam.ModularRealmAuthenticator var37 = new org.jsecurity.authc.pam.ModularRealmAuthenticator();
    org.jsecurity.authc.pam.AtLeastOneSuccessfulModularAuthenticationStrategy var38 = new org.jsecurity.authc.pam.AtLeastOneSuccessfulModularAuthenticationStrategy();
    var37.setModularAuthenticationStrategy((org.jsecurity.authc.pam.ModularAuthenticationStrategy)var38);
    var10.setModularAuthenticationStrategy((org.jsecurity.authc.pam.ModularAuthenticationStrategy)var38);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var7);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var8);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var9);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var17);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var18);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var19);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var29);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var30);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var32);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var33);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var34);

  }

  public void test459() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest6.test459");


    org.jsecurity.authz.permission.InvalidPermissionStringException var2 = new org.jsecurity.authz.permission.InvalidPermissionStringException("", "dd\uFFFD");
    org.jsecurity.JSecurityException var4 = new org.jsecurity.JSecurityException("");
    org.jsecurity.authc.SimpleAuthenticationInfo var6 = new org.jsecurity.authc.SimpleAuthenticationInfo((java.lang.Object)var2, (java.lang.Object)"", "org.jsecurity.authz.UnauthorizedException: org.jsecurity.session.ExpiredSessionException: ");
    org.jsecurity.subject.PrincipalCollection var7 = var6.getPrincipals();
    org.jsecurity.subject.PrincipalCollection var8 = var6.getPrincipals();
    org.jsecurity.authz.permission.WildcardPermissionResolver var9 = new org.jsecurity.authz.permission.WildcardPermissionResolver();
    org.jsecurity.authz.SimpleAuthorizingAccount var11 = new org.jsecurity.authz.SimpleAuthorizingAccount();
    org.jsecurity.authz.SimpleAuthorizationInfo var12 = new org.jsecurity.authz.SimpleAuthorizationInfo();
    var12.addRole("a2b823b1e72eae2b727289df8a00a89df8a0bab6ad8a89c4c5c7a9b62a270000");
    org.jsecurity.authz.SimpleAuthorizationInfo var15 = new org.jsecurity.authz.SimpleAuthorizationInfo();
    var15.addRole("a2b823b1e72eae2b727289df8a00a89df8a0bab6ad8a89c4c5c7a9b62a270000");
    org.jsecurity.session.UnknownSessionException var22 = new org.jsecurity.session.UnknownSessionException("dd\uFFFD", (java.io.Serializable)100.0f);
    org.jsecurity.subject.SubjectException var23 = new org.jsecurity.subject.SubjectException("dd\uFFFD", (java.lang.Throwable)var22);
    org.jsecurity.io.SerializationException var24 = new org.jsecurity.io.SerializationException("", (java.lang.Throwable)var23);
    java.lang.Throwable[] var25 = var23.getSuppressed();
    java.util.Set var26 = org.jsecurity.util.CollectionUtils.asSet((java.lang.Object[])var25);
    var15.addRoles((java.util.Collection)var26);
    var12.setObjectPermissions(var26);
    var11.setSimpleRoles(var26);
    java.util.Set var30 = var11.getPermissions();
    org.jsecurity.authz.SimpleAuthorizationInfo var31 = new org.jsecurity.authz.SimpleAuthorizationInfo();
    var31.addRole("a2b823b1e72eae2b727289df8a00a89df8a0bab6ad8a89c4c5c7a9b62a270000");
    org.jsecurity.authz.SimpleAuthorizationInfo var34 = new org.jsecurity.authz.SimpleAuthorizationInfo();
    var34.addRole("a2b823b1e72eae2b727289df8a00a89df8a0bab6ad8a89c4c5c7a9b62a270000");
    org.jsecurity.session.UnknownSessionException var41 = new org.jsecurity.session.UnknownSessionException("dd\uFFFD", (java.io.Serializable)100.0f);
    org.jsecurity.subject.SubjectException var42 = new org.jsecurity.subject.SubjectException("dd\uFFFD", (java.lang.Throwable)var41);
    org.jsecurity.io.SerializationException var43 = new org.jsecurity.io.SerializationException("", (java.lang.Throwable)var42);
    java.lang.Throwable[] var44 = var42.getSuppressed();
    java.util.Set var45 = org.jsecurity.util.CollectionUtils.asSet((java.lang.Object[])var44);
    var34.addRoles((java.util.Collection)var45);
    var31.setObjectPermissions(var45);
    var11.checkRoles((java.util.Collection)var45);
    org.jsecurity.session.UnknownSessionException var53 = new org.jsecurity.session.UnknownSessionException("dd\uFFFD", (java.io.Serializable)100.0f);
    org.jsecurity.subject.SubjectException var54 = new org.jsecurity.subject.SubjectException("dd\uFFFD", (java.lang.Throwable)var53);
    org.jsecurity.io.SerializationException var55 = new org.jsecurity.io.SerializationException("", (java.lang.Throwable)var54);
    java.lang.Throwable[] var56 = var54.getSuppressed();
    java.lang.Throwable[] var57 = var54.getSuppressed();
    java.util.Set var58 = org.jsecurity.util.CollectionUtils.asSet((java.lang.Object[])var57);
    org.jsecurity.authz.SimpleAuthorizingAccount var59 = new org.jsecurity.authz.SimpleAuthorizingAccount(var8, (java.lang.Object)var9, "a3e14b98-1050-4bcc-8787-431663db8814", var45, var58);
    org.jsecurity.authz.permission.InvalidPermissionStringException var62 = new org.jsecurity.authz.permission.InvalidPermissionStringException("", "dd\uFFFD");
    org.jsecurity.JSecurityException var64 = new org.jsecurity.JSecurityException("");
    org.jsecurity.authc.SimpleAuthenticationInfo var66 = new org.jsecurity.authc.SimpleAuthenticationInfo((java.lang.Object)var62, (java.lang.Object)"", "org.jsecurity.authz.UnauthorizedException: org.jsecurity.session.ExpiredSessionException: ");
    org.jsecurity.subject.PrincipalCollection var67 = var66.getPrincipals();
    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      org.jsecurity.crypto.hash.Sha256Hash var68 = new org.jsecurity.crypto.hash.Sha256Hash((java.lang.Object)var58, (java.lang.Object)var67);
      fail("Expected exception of type org.jsecurity.codec.CodecException");
    } catch (org.jsecurity.codec.CodecException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var7);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var8);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var25);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var26);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var30);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var44);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var45);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var56);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var57);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var58);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var67);

  }

  public void test460() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest6.test460");


    org.jsecurity.authz.permission.WildcardPermission var1 = new org.jsecurity.authz.permission.WildcardPermission("1b931d4a-91b7-4c28-83ea-77211bfb7ddc");

  }

  public void test461() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest6.test461");


    java.lang.String[] var4 = org.jsecurity.util.StringUtils.tokenizeToStringArray("4f3cc87b-b5e6-4046-98fb-24e207dce9ff", "de3a1f49-d9da-41db-85df-eb40480da4f6", false, false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var4);

  }

  public void test462() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest6.test462");


    org.jsecurity.session.ExpiredSessionException var1 = new org.jsecurity.session.ExpiredSessionException((java.io.Serializable)1L);

  }

  public void test463() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest6.test463");


    org.jsecurity.realm.activedirectory.ActiveDirectoryRealm var0 = new org.jsecurity.realm.activedirectory.ActiveDirectoryRealm();
    org.jsecurity.authc.credential.Sha256CredentialsMatcher var1 = new org.jsecurity.authc.credential.Sha256CredentialsMatcher();
    var0.setCredentialsMatcher((org.jsecurity.authc.credential.CredentialsMatcher)var1);
    java.lang.String var3 = var0.getAuthorizationCacheName();
    var0.setUrl("hi!");
    var0.setAuthorizationCacheName("e2497199-95f2-4373-8934-d742f09a6cb1");
    org.jsecurity.realm.activedirectory.ActiveDirectoryRealm var8 = new org.jsecurity.realm.activedirectory.ActiveDirectoryRealm();
    org.jsecurity.authc.credential.Sha256CredentialsMatcher var9 = new org.jsecurity.authc.credential.Sha256CredentialsMatcher();
    var8.setCredentialsMatcher((org.jsecurity.authc.credential.CredentialsMatcher)var9);
    java.lang.String var11 = var8.getAuthorizationCacheName();
    var8.setUrl("hi!");
    org.jsecurity.realm.ldap.DefaultLdapContextFactory var14 = new org.jsecurity.realm.ldap.DefaultLdapContextFactory();
    var8.setLdapContextFactory((org.jsecurity.realm.ldap.LdapContextFactory)var14);
    org.jsecurity.config.ReflectionBuilder var16 = new org.jsecurity.config.ReflectionBuilder();
    org.jsecurity.io.IniResource var17 = new org.jsecurity.io.IniResource();
    var17.setCharsetName("org.jsecurity.authz.UnauthorizedException: org.jsecurity.session.ExpiredSessionException: ");
    java.util.Map var20 = var17.getSections();
    java.util.Map var21 = var16.buildObjects(var20);
    org.jsecurity.config.ReflectionBuilder var22 = new org.jsecurity.config.ReflectionBuilder();
    org.jsecurity.io.IniResource var23 = new org.jsecurity.io.IniResource();
    var23.setCharsetName("org.jsecurity.authz.UnauthorizedException: org.jsecurity.session.ExpiredSessionException: ");
    java.util.Map var26 = var23.getSections();
    java.util.Map var27 = var22.buildObjects(var26);
    java.util.Map var28 = var16.buildObjects(var27);
    java.util.Map var29 = var16.getObjects();
    var14.setAdditionalEnvironment(var29);
    var0.setLdapContextFactory((org.jsecurity.realm.ldap.LdapContextFactory)var14);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var3);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var11);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var20);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var21);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var26);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var27);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var28);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var29);

  }

  public void test464() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest6.test464");


    org.jsecurity.realm.activedirectory.ActiveDirectoryRealm var0 = new org.jsecurity.realm.activedirectory.ActiveDirectoryRealm();
    org.jsecurity.authc.credential.Sha256CredentialsMatcher var1 = new org.jsecurity.authc.credential.Sha256CredentialsMatcher();
    var0.setCredentialsMatcher((org.jsecurity.authc.credential.CredentialsMatcher)var1);
    org.jsecurity.realm.activedirectory.ActiveDirectoryRealm var3 = new org.jsecurity.realm.activedirectory.ActiveDirectoryRealm();
    org.jsecurity.authc.credential.Sha256CredentialsMatcher var4 = new org.jsecurity.authc.credential.Sha256CredentialsMatcher();
    var3.setCredentialsMatcher((org.jsecurity.authc.credential.CredentialsMatcher)var4);
    java.lang.String var6 = var3.getAuthorizationCacheName();
    var3.setUrl("hi!");
    org.jsecurity.realm.ldap.DefaultLdapContextFactory var9 = new org.jsecurity.realm.ldap.DefaultLdapContextFactory();
    var3.setLdapContextFactory((org.jsecurity.realm.ldap.LdapContextFactory)var9);
    var9.setAuthentication("org.jsecurity.authz.UnauthorizedException: org.jsecurity.session.ExpiredSessionException: ");
    var0.setLdapContextFactory((org.jsecurity.realm.ldap.LdapContextFactory)var9);
    var0.setPrincipalSuffix("783ccd31-48a8-42dd-890f-df885a7baaff");
    org.jsecurity.realm.ldap.DefaultLdapContextFactory var16 = new org.jsecurity.realm.ldap.DefaultLdapContextFactory();
    var16.setSystemUsername("org.jsecurity.authz.UnauthorizedException: org.jsecurity.session.ExpiredSessionException: ");
    var0.setLdapContextFactory((org.jsecurity.realm.ldap.LdapContextFactory)var16);
    org.jsecurity.realm.activedirectory.ActiveDirectoryRealm var20 = new org.jsecurity.realm.activedirectory.ActiveDirectoryRealm();
    var20.initAuthorizationCache();
    var20.setSearchBase("dd\uFFFD");
    org.jsecurity.realm.ldap.DefaultLdapContextFactory var24 = new org.jsecurity.realm.ldap.DefaultLdapContextFactory();
    var20.setLdapContextFactory((org.jsecurity.realm.ldap.LdapContextFactory)var24);
    var0.setLdapContextFactory((org.jsecurity.realm.ldap.LdapContextFactory)var24);
    var24.setContextFactoryClassName("hi!");
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var6);

  }

  public void test465() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest6.test465");


    org.jsecurity.authz.SimpleAuthorizationInfo var0 = new org.jsecurity.authz.SimpleAuthorizationInfo();
    var0.addRole("a2b823b1e72eae2b727289df8a00a89df8a0bab6ad8a89c4c5c7a9b62a270000");
    org.jsecurity.session.UnknownSessionException var7 = new org.jsecurity.session.UnknownSessionException("dd\uFFFD", (java.io.Serializable)100.0f);
    org.jsecurity.subject.SubjectException var8 = new org.jsecurity.subject.SubjectException("dd\uFFFD", (java.lang.Throwable)var7);
    org.jsecurity.io.SerializationException var9 = new org.jsecurity.io.SerializationException("", (java.lang.Throwable)var8);
    java.lang.Throwable[] var10 = var8.getSuppressed();
    java.util.Set var11 = org.jsecurity.util.CollectionUtils.asSet((java.lang.Object[])var10);
    var0.addRoles((java.util.Collection)var11);
    org.jsecurity.realm.activedirectory.ActiveDirectoryRealm var13 = new org.jsecurity.realm.activedirectory.ActiveDirectoryRealm();
    var13.init();
    var13.setSystemPassword("dd\uFFFD");
    org.jsecurity.authz.aop.GuestAnnotationHandler var17 = new org.jsecurity.authz.aop.GuestAnnotationHandler();
    java.lang.Class var18 = var17.getAnnotationClass();
    var13.setAuthenticationTokenClass(var18);
    java.util.Collection var20 = org.jsecurity.util.CollectionUtils.emptyCollection(var18);
    var0.addStringPermissions(var20);
    org.jsecurity.session.mgt.DefaultSessionManager var22 = new org.jsecurity.session.mgt.DefaultSessionManager();
    var22.setGlobalSessionTimeout(1);
    org.jsecurity.session.mgt.quartz.QuartzSessionValidationScheduler var25 = new org.jsecurity.session.mgt.quartz.QuartzSessionValidationScheduler((org.jsecurity.session.mgt.ValidatingSessionManager)var22);
    var22.destroy();
    var22.setSessionValidationSchedulerEnabled(false);
    long var29 = var22.getSessionValidationInterval();
    org.jsecurity.authc.SimpleAuthenticationInfo var31 = new org.jsecurity.authc.SimpleAuthenticationInfo((java.lang.Object)var0, (java.lang.Object)var29, "14b48d08-1ed5-43cf-80f1-5709f31b1666");
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var10);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var11);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var18);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var20);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var29 == 3600000L);

  }

  public void test466() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest6.test466");


    org.jsecurity.session.mgt.SimpleSession var1 = new org.jsecurity.session.mgt.SimpleSession();
    var1.setTimeout((-1L));
    org.jsecurity.session.mgt.SimpleSession var4 = new org.jsecurity.session.mgt.SimpleSession();
    java.util.Date var5 = var4.getLastAccessTime();
    var1.setLastAccessTime(var5);
    org.jsecurity.session.mgt.SimpleSession var7 = new org.jsecurity.session.mgt.SimpleSession();
    java.util.Date var8 = var7.getLastAccessTime();
    var1.setStopTimestamp(var8);
    org.jsecurity.session.UnknownSessionException var10 = new org.jsecurity.session.UnknownSessionException("c90601ac-cfac-4c24-b18f-498fb061e4c8", (java.io.Serializable)var1);
    java.lang.Object var12 = var1.getAttribute((java.lang.Object)"6f44d21a-b7eb-4124-a828-f9123469c6e4");
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var5);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var8);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var12);

  }

  public void test467() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest6.test467");


    org.jsecurity.mgt.DefaultSecurityManager var0 = new org.jsecurity.mgt.DefaultSecurityManager();
    org.jsecurity.authz.permission.WildcardPermissionResolver var1 = new org.jsecurity.authz.permission.WildcardPermissionResolver();
    var0.setPermissionResolver((org.jsecurity.authz.permission.PermissionResolver)var1);
    org.jsecurity.cache.CacheManager var3 = var0.getCacheManager();
    org.jsecurity.authc.Authenticator var4 = var0.getAuthenticator();
    org.jsecurity.session.mgt.DefaultSessionManager var5 = new org.jsecurity.session.mgt.DefaultSessionManager();
    org.jsecurity.session.mgt.eis.MemorySessionDAO var6 = new org.jsecurity.session.mgt.eis.MemorySessionDAO();
    org.jsecurity.cache.Cache var7 = var6.getActiveSessionsCache();
    org.jsecurity.cache.CacheManager var8 = var6.getCacheManager();
    org.jsecurity.cache.HashtableCacheManager var9 = new org.jsecurity.cache.HashtableCacheManager();
    org.jsecurity.cache.Cache var11 = var9.getCache("\u0000\u0000");
    var6.setActiveSessionsCache(var11);
    java.io.InputStream var14 = org.jsecurity.util.ClassUtils.getResourceAsStream("");
    java.lang.Object[] var15 = new java.lang.Object[] { var14};
    java.util.List var16 = org.jsecurity.util.CollectionUtils.asList(var15);
    org.jsecurity.authc.pam.ModularRealmAuthenticator var17 = new org.jsecurity.authc.pam.ModularRealmAuthenticator(var16);
    org.jsecurity.authc.pam.AllSuccessfulModularAuthenticationStrategy var18 = new org.jsecurity.authc.pam.AllSuccessfulModularAuthenticationStrategy();
    var17.setModularAuthenticationStrategy((org.jsecurity.authc.pam.ModularAuthenticationStrategy)var18);
    org.jsecurity.authz.SimpleAuthorizationInfo var20 = new org.jsecurity.authz.SimpleAuthorizationInfo();
    var20.addStringPermission("hi!");
    java.io.InputStream var24 = org.jsecurity.util.ClassUtils.getResourceAsStream("");
    java.lang.Object[] var25 = new java.lang.Object[] { var24};
    java.util.List var26 = org.jsecurity.util.CollectionUtils.asList(var25);
    var20.addRoles((java.util.Collection)var26);
    var17.setAuthenticationListeners((java.util.Collection)var26);
    org.jsecurity.realm.activedirectory.ActiveDirectoryRealm var29 = new org.jsecurity.realm.activedirectory.ActiveDirectoryRealm();
    var29.setPrincipalSuffix("");
    var17.setRealm((org.jsecurity.realm.Realm)var29);
    org.jsecurity.cache.HashtableCacheManager var33 = new org.jsecurity.cache.HashtableCacheManager();
    org.jsecurity.cache.Cache var35 = var33.getCache("\u0000\u0000");
    var29.setAuthorizationCache(var35);
    var6.setActiveSessionsCache(var35);
    org.jsecurity.session.mgt.SimpleSession var38 = new org.jsecurity.session.mgt.SimpleSession();
    java.io.Serializable var39 = var6.create((org.jsecurity.session.Session)var38);
    var5.setSessionDAO((org.jsecurity.session.mgt.eis.SessionDAO)var6);
    long var41 = var5.getSessionValidationInterval();
    long var42 = var5.getSessionValidationInterval();
    var5.setGlobalSessionTimeout(1);
    var0.setSessionManager((org.jsecurity.session.mgt.SessionManager)var5);
    org.jsecurity.crypto.hash.Md2Hash var47 = org.jsecurity.crypto.hash.Md2Hash.fromHexString("6464ff");
    java.lang.String var48 = var47.toString();
    byte[] var49 = var47.getBytes();
    byte[] var50 = var47.getBytes();
    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      var0.setRememberMeCipherKey(var50);
      fail("Expected exception of type java.lang.IllegalStateException");
    } catch (java.lang.IllegalStateException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var3);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var4);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var7);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var8);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var11);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var14);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var15);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var16);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var24);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var25);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var26);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var35);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var39 + "' != '" + "414de09f-151b-4dc0-b4f4-1c625182d25b"+ "'", var39.equals("414de09f-151b-4dc0-b4f4-1c625182d25b"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var41 == 3600000L);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var42 == 3600000L);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var47);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var48 + "' != '" + "6464ff"+ "'", var48.equals("6464ff"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var49);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var50);

  }

  public void test468() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest6.test468");


    java.io.InputStream var1 = org.jsecurity.util.ClassUtils.getResourceAsStream("1dba8f28-d35a-45ce-a478-d97233dbf5a9");
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var1);

  }

  public void test469() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest6.test469");


    org.jsecurity.realm.text.PropertiesRealm var0 = new org.jsecurity.realm.text.PropertiesRealm();
    var0.setRoleDefinitions("5dd0c65d-1422-49c2-becb-9e8dca619ab3");
    java.lang.String var3 = var0.getUserDefinitions();
    var0.setName("e23a02c5-2287-4daa-91c4-8efed2be0f73");
    var0.setResourcePath("69d3a52f-a464-4f98-8253-2a105929a356");
    org.jsecurity.realm.text.TextConfigurationRealm var9 = new org.jsecurity.realm.text.TextConfigurationRealm();
    java.io.InputStream var11 = org.jsecurity.util.ClassUtils.getResourceAsStream("");
    java.lang.Object[] var12 = new java.lang.Object[] { var11};
    java.util.List var13 = org.jsecurity.util.CollectionUtils.asList(var12);
    org.jsecurity.authc.pam.ModularRealmAuthenticator var14 = new org.jsecurity.authc.pam.ModularRealmAuthenticator(var13);
    org.jsecurity.subject.SimplePrincipalCollection var16 = new org.jsecurity.subject.SimplePrincipalCollection((java.util.Collection)var13, "org.jsecurity.authz.UnauthorizedException: org.jsecurity.session.ExpiredSessionException: ");
    org.jsecurity.session.UnknownSessionException var21 = new org.jsecurity.session.UnknownSessionException("dd\uFFFD", (java.io.Serializable)100.0f);
    org.jsecurity.session.SessionException var23 = new org.jsecurity.session.SessionException("dd\uFFFD", (java.lang.Throwable)var21, (java.io.Serializable)0);
    org.jsecurity.session.SessionException var24 = new org.jsecurity.session.SessionException("dd\uFFFD", (java.lang.Throwable)var21);
    var16.add((java.lang.Object)var24, "org.jsecurity.config.ConfigurationException: dd\uFFFD");
    var9.onLogout((org.jsecurity.subject.PrincipalCollection)var16);
    java.util.Set var29 = org.jsecurity.util.PermissionUtils.toPermissionStrings("org.jsecurity.config.ConfigurationException: dd\uFFFD");
    org.jsecurity.authz.SimpleAuthorizationInfo var30 = new org.jsecurity.authz.SimpleAuthorizationInfo(var29);
    org.jsecurity.authz.SimpleAuthorizingAccount var31 = new org.jsecurity.authz.SimpleAuthorizingAccount((org.jsecurity.subject.PrincipalCollection)var16, (java.lang.Object)var29);
    org.jsecurity.session.StoppedSessionException var32 = new org.jsecurity.session.StoppedSessionException("org.jsecurity.realm.SimpleAccountRealm-55-authorization", (java.io.Serializable)var16);
    org.jsecurity.realm.activedirectory.ActiveDirectoryRealm var33 = new org.jsecurity.realm.activedirectory.ActiveDirectoryRealm();
    var33.init();
    var33.setSystemPassword("dd\uFFFD");
    org.jsecurity.authz.aop.GuestAnnotationHandler var37 = new org.jsecurity.authz.aop.GuestAnnotationHandler();
    java.lang.Class var38 = var37.getAnnotationClass();
    var33.setAuthenticationTokenClass(var38);
    java.util.Collection var40 = var16.byType(var38);
    java.util.Set var41 = var16.asSet();
    var0.onLogout((org.jsecurity.subject.PrincipalCollection)var16);
    org.jsecurity.session.mgt.SimpleSession var43 = new org.jsecurity.session.mgt.SimpleSession();
    var43.setTimeout((-1L));
    org.jsecurity.session.mgt.SimpleSession var46 = new org.jsecurity.session.mgt.SimpleSession();
    java.util.Date var47 = var46.getLastAccessTime();
    var43.setLastAccessTime(var47);
    org.jsecurity.session.mgt.SimpleSession var49 = new org.jsecurity.session.mgt.SimpleSession();
    java.util.Date var50 = var49.getLastAccessTime();
    var43.setStopTimestamp(var50);
    var43.touch();
    org.jsecurity.authc.SimpleAuthenticationInfo var53 = new org.jsecurity.authc.SimpleAuthenticationInfo((org.jsecurity.subject.PrincipalCollection)var16, (java.lang.Object)var43);
    org.jsecurity.io.IniResource var54 = new org.jsecurity.io.IniResource();
    java.util.Map var55 = var54.getSections();
    java.lang.String var56 = var54.getCharsetName();
    java.lang.String var57 = var54.getCharsetName();
    var43.setId((java.io.Serializable)var54);
    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      var54.load("org.jsecurity.realm.text.PropertiesRealm_2075");
      fail("Expected exception of type org.jsecurity.io.ResourceException");
    } catch (org.jsecurity.io.ResourceException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var3);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var11);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var12);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var13);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var29);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var38);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var40);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var41);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var47);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var50);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var55);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var56);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var57);

  }

  public void test470() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest6.test470");


    org.jsecurity.session.UnknownSessionException var2 = new org.jsecurity.session.UnknownSessionException("org.jsecurity.config.ConfigurationException: dd\uFFFD");
    org.jsecurity.session.ExpiredSessionException var3 = new org.jsecurity.session.ExpiredSessionException("\u0000\u0000\u0000", (java.lang.Throwable)var2);
    org.jsecurity.session.UnknownSessionException var4 = new org.jsecurity.session.UnknownSessionException((java.io.Serializable)"\u0000\u0000\u0000");

  }

  public void test471() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest6.test471");


    org.jsecurity.authc.pam.AllSuccessfulModularAuthenticationStrategy var0 = new org.jsecurity.authc.pam.AllSuccessfulModularAuthenticationStrategy();
    org.jsecurity.authc.pam.AllSuccessfulModularAuthenticationStrategy var1 = new org.jsecurity.authc.pam.AllSuccessfulModularAuthenticationStrategy();
    char[] var3 = new char[] { };
    org.jsecurity.authc.UsernamePasswordToken var5 = new org.jsecurity.authc.UsernamePasswordToken("hi!", var3, true);
    org.jsecurity.authc.SimpleAccount var6 = new org.jsecurity.authc.SimpleAccount();
    var6.setCredentialsExpired(false);
    boolean var9 = var6.isLocked();
    org.jsecurity.authc.AuthenticationInfo var10 = var1.afterAllAttempts((org.jsecurity.authc.AuthenticationToken)var5, (org.jsecurity.authc.AuthenticationInfo)var6);
    char[] var14 = new char[] { '4', '#'};
    org.jsecurity.authc.UsernamePasswordToken var15 = new org.jsecurity.authc.UsernamePasswordToken("\u0000\u0000", var14);
    org.jsecurity.authc.SimpleAccount var16 = new org.jsecurity.authc.SimpleAccount();
    var16.setCredentialsExpired(false);
    var16.setCredentialsExpired(false);
    boolean var21 = var16.isCredentialsExpired();
    org.jsecurity.authc.AuthenticationInfo var22 = var1.afterAllAttempts((org.jsecurity.authc.AuthenticationToken)var15, (org.jsecurity.authc.AuthenticationInfo)var16);
    org.jsecurity.authz.UnauthenticatedException var26 = new org.jsecurity.authz.UnauthenticatedException();
    org.jsecurity.config.UnresolveableReferenceException var27 = new org.jsecurity.config.UnresolveableReferenceException("", (java.lang.Throwable)var26);
    org.jsecurity.cache.CacheException var28 = new org.jsecurity.cache.CacheException("org.jsecurity.config.ConfigurationException: dd\uFFFD", (java.lang.Throwable)var26);
    org.jsecurity.authc.SimpleAuthenticationInfo var30 = new org.jsecurity.authc.SimpleAuthenticationInfo((java.lang.Object)"org.jsecurity.config.ConfigurationException: dd\uFFFD", (java.lang.Object)var28, "a2b823b1e72eae2b727289df8a00a89df8a0bab6ad8a89c4c5c7a9b62a270000");
    org.jsecurity.subject.PrincipalCollection var31 = var30.getPrincipals();
    org.jsecurity.authc.AuthenticationInfo var32 = var0.afterAllAttempts((org.jsecurity.authc.AuthenticationToken)var15, (org.jsecurity.authc.AuthenticationInfo)var30);
    org.jsecurity.session.UnknownSessionException var36 = new org.jsecurity.session.UnknownSessionException("dd\uFFFD", (java.io.Serializable)100.0f);
    org.jsecurity.session.SessionException var38 = new org.jsecurity.session.SessionException("dd\uFFFD", (java.lang.Throwable)var36, (java.io.Serializable)0);
    var30.setCredentials((java.lang.Object)var36);
    org.jsecurity.util.UnavailableConstructorException var40 = new org.jsecurity.util.UnavailableConstructorException((java.lang.Throwable)var36);
    org.jsecurity.authc.AccountException var41 = new org.jsecurity.authc.AccountException((java.lang.Throwable)var40);
    org.jsecurity.authc.UnknownAccountException var42 = new org.jsecurity.authc.UnknownAccountException((java.lang.Throwable)var41);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var3);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var9 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var10);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var14);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var21 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var22);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var31);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var32);

  }

  public void test472() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest6.test472");


    org.jsecurity.session.mgt.DelegatingSession var0 = new org.jsecurity.session.mgt.DelegatingSession();
    var0.setId((java.io.Serializable)"org.jsecurity.realm.SimpleAccountRealm-52-authorization");
    org.jsecurity.session.mgt.SessionManager var3 = var0.getSessionManager();
    org.jsecurity.session.mgt.SessionManager var4 = var0.getSessionManager();
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var3);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var4);

  }

  public void test473() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest6.test473");


    org.jsecurity.session.mgt.quartz.QuartzSessionValidationScheduler var0 = new org.jsecurity.session.mgt.quartz.QuartzSessionValidationScheduler();
    var0.disableSessionValidation();
    var0.enableSessionValidation();
    var0.enableSessionValidation();
    var0.disableSessionValidation();
    org.jsecurity.session.mgt.DefaultSessionManager var5 = new org.jsecurity.session.mgt.DefaultSessionManager();
    org.jsecurity.session.mgt.eis.MemorySessionDAO var6 = new org.jsecurity.session.mgt.eis.MemorySessionDAO();
    org.jsecurity.cache.Cache var7 = var6.getActiveSessionsCache();
    org.jsecurity.cache.CacheManager var8 = var6.getCacheManager();
    org.jsecurity.cache.HashtableCacheManager var9 = new org.jsecurity.cache.HashtableCacheManager();
    org.jsecurity.cache.Cache var11 = var9.getCache("\u0000\u0000");
    var6.setActiveSessionsCache(var11);
    java.io.InputStream var14 = org.jsecurity.util.ClassUtils.getResourceAsStream("");
    java.lang.Object[] var15 = new java.lang.Object[] { var14};
    java.util.List var16 = org.jsecurity.util.CollectionUtils.asList(var15);
    org.jsecurity.authc.pam.ModularRealmAuthenticator var17 = new org.jsecurity.authc.pam.ModularRealmAuthenticator(var16);
    org.jsecurity.authc.pam.AllSuccessfulModularAuthenticationStrategy var18 = new org.jsecurity.authc.pam.AllSuccessfulModularAuthenticationStrategy();
    var17.setModularAuthenticationStrategy((org.jsecurity.authc.pam.ModularAuthenticationStrategy)var18);
    org.jsecurity.authz.SimpleAuthorizationInfo var20 = new org.jsecurity.authz.SimpleAuthorizationInfo();
    var20.addStringPermission("hi!");
    java.io.InputStream var24 = org.jsecurity.util.ClassUtils.getResourceAsStream("");
    java.lang.Object[] var25 = new java.lang.Object[] { var24};
    java.util.List var26 = org.jsecurity.util.CollectionUtils.asList(var25);
    var20.addRoles((java.util.Collection)var26);
    var17.setAuthenticationListeners((java.util.Collection)var26);
    org.jsecurity.realm.activedirectory.ActiveDirectoryRealm var29 = new org.jsecurity.realm.activedirectory.ActiveDirectoryRealm();
    var29.setPrincipalSuffix("");
    var17.setRealm((org.jsecurity.realm.Realm)var29);
    org.jsecurity.cache.HashtableCacheManager var33 = new org.jsecurity.cache.HashtableCacheManager();
    org.jsecurity.cache.Cache var35 = var33.getCache("\u0000\u0000");
    var29.setAuthorizationCache(var35);
    var6.setActiveSessionsCache(var35);
    org.jsecurity.session.mgt.SimpleSession var38 = new org.jsecurity.session.mgt.SimpleSession();
    java.io.Serializable var39 = var6.create((org.jsecurity.session.Session)var38);
    var5.setSessionDAO((org.jsecurity.session.mgt.eis.SessionDAO)var6);
    var5.setSessionValidationInterval(100L);
    org.jsecurity.util.UnavailableConstructorException var44 = new org.jsecurity.util.UnavailableConstructorException("org.jsecurity.authz.UnauthorizedException: org.jsecurity.session.ExpiredSessionException: ");
    boolean var45 = var5.isValid((java.io.Serializable)"org.jsecurity.authz.UnauthorizedException: org.jsecurity.session.ExpiredSessionException: ");
    var0.setSessionManager((org.jsecurity.session.mgt.ValidatingSessionManager)var5);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var7);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var8);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var11);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var14);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var15);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var16);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var24);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var25);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var26);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var35);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var39 + "' != '" + "79ac4e9d-1c80-4692-bade-9cd06965d1de"+ "'", var39.equals("79ac4e9d-1c80-4692-bade-9cd06965d1de"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var45 == false);

  }

  public void test474() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest6.test474");


    org.jsecurity.session.UnknownSessionException var4 = new org.jsecurity.session.UnknownSessionException("dd\uFFFD", (java.io.Serializable)100.0f);
    org.jsecurity.subject.SubjectException var5 = new org.jsecurity.subject.SubjectException("dd\uFFFD", (java.lang.Throwable)var4);
    org.jsecurity.io.SerializationException var6 = new org.jsecurity.io.SerializationException("", (java.lang.Throwable)var5);
    java.lang.Throwable[] var7 = var5.getSuppressed();
    java.util.List var8 = org.jsecurity.util.CollectionUtils.asList((java.lang.Object[])var7);
    java.util.List var9 = org.jsecurity.util.CollectionUtils.asList((java.lang.Object[])var7);
    org.jsecurity.io.ResourceException var14 = new org.jsecurity.io.ResourceException("hi!");
    org.jsecurity.authc.UnknownAccountException var15 = new org.jsecurity.authc.UnknownAccountException((java.lang.Throwable)var14);
    org.jsecurity.session.StoppedSessionException var16 = new org.jsecurity.session.StoppedSessionException("dd\uFFFD", (java.io.Serializable)var14);
    org.jsecurity.authc.pam.UnsupportedTokenException var18 = new org.jsecurity.authc.pam.UnsupportedTokenException("a2b823b1e72eae2b727289df8a00a89df8a0bab6ad8a89c4c5c7a9b62a270000");
    org.jsecurity.session.ExpiredSessionException var19 = new org.jsecurity.session.ExpiredSessionException("org.jsecurity.authz.UnauthorizedException: org.jsecurity.session.ExpiredSessionException: ", (java.lang.Throwable)var16, (java.io.Serializable)"a2b823b1e72eae2b727289df8a00a89df8a0bab6ad8a89c4c5c7a9b62a270000");
    org.jsecurity.session.InvalidSessionException var20 = new org.jsecurity.session.InvalidSessionException((java.lang.Throwable)var19);
    org.jsecurity.JSecurityException var21 = new org.jsecurity.JSecurityException("92ec7657-39a0-4fe8-843e-f3915140dc01", (java.lang.Throwable)var19);
    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      org.jsecurity.authc.SimpleAccount var23 = new org.jsecurity.authc.SimpleAccount((java.util.Collection)var9, (java.lang.Object)var21, "org.jsecurity.realm.text.TextConfigurationRealm_389");
      fail("Expected exception of type java.lang.IllegalArgumentException");
    } catch (java.lang.IllegalArgumentException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var7);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var8);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var9);

  }

  public void test475() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest6.test475");


    org.jsecurity.mgt.DefaultSecurityManager var0 = new org.jsecurity.mgt.DefaultSecurityManager();
    java.io.InputStream var2 = org.jsecurity.util.ClassUtils.getResourceAsStream("");
    java.lang.Object[] var3 = new java.lang.Object[] { var2};
    java.util.List var4 = org.jsecurity.util.CollectionUtils.asList(var3);
    org.jsecurity.authc.pam.ModularRealmAuthenticator var5 = new org.jsecurity.authc.pam.ModularRealmAuthenticator(var4);
    org.jsecurity.authc.pam.AllSuccessfulModularAuthenticationStrategy var6 = new org.jsecurity.authc.pam.AllSuccessfulModularAuthenticationStrategy();
    var5.setModularAuthenticationStrategy((org.jsecurity.authc.pam.ModularAuthenticationStrategy)var6);
    org.jsecurity.authz.SimpleAuthorizationInfo var8 = new org.jsecurity.authz.SimpleAuthorizationInfo();
    var8.addStringPermission("hi!");
    java.io.InputStream var12 = org.jsecurity.util.ClassUtils.getResourceAsStream("");
    java.lang.Object[] var13 = new java.lang.Object[] { var12};
    java.util.List var14 = org.jsecurity.util.CollectionUtils.asList(var13);
    var8.addRoles((java.util.Collection)var14);
    var5.setAuthenticationListeners((java.util.Collection)var14);
    var0.setSessionListeners((java.util.Collection)var14);
    org.jsecurity.authz.UnauthenticatedException var21 = new org.jsecurity.authz.UnauthenticatedException();
    org.jsecurity.config.UnresolveableReferenceException var22 = new org.jsecurity.config.UnresolveableReferenceException("", (java.lang.Throwable)var21);
    org.jsecurity.cache.CacheException var23 = new org.jsecurity.cache.CacheException("org.jsecurity.config.ConfigurationException: dd\uFFFD", (java.lang.Throwable)var21);
    org.jsecurity.authc.SimpleAuthenticationInfo var25 = new org.jsecurity.authc.SimpleAuthenticationInfo((java.lang.Object)"org.jsecurity.config.ConfigurationException: dd\uFFFD", (java.lang.Object)var23, "a2b823b1e72eae2b727289df8a00a89df8a0bab6ad8a89c4c5c7a9b62a270000");
    org.jsecurity.realm.text.TextConfigurationRealm var26 = new org.jsecurity.realm.text.TextConfigurationRealm();
    java.io.InputStream var28 = org.jsecurity.util.ClassUtils.getResourceAsStream("");
    java.lang.Object[] var29 = new java.lang.Object[] { var28};
    java.util.List var30 = org.jsecurity.util.CollectionUtils.asList(var29);
    org.jsecurity.authc.pam.ModularRealmAuthenticator var31 = new org.jsecurity.authc.pam.ModularRealmAuthenticator(var30);
    org.jsecurity.subject.SimplePrincipalCollection var33 = new org.jsecurity.subject.SimplePrincipalCollection((java.util.Collection)var30, "org.jsecurity.authz.UnauthorizedException: org.jsecurity.session.ExpiredSessionException: ");
    org.jsecurity.session.UnknownSessionException var38 = new org.jsecurity.session.UnknownSessionException("dd\uFFFD", (java.io.Serializable)100.0f);
    org.jsecurity.session.SessionException var40 = new org.jsecurity.session.SessionException("dd\uFFFD", (java.lang.Throwable)var38, (java.io.Serializable)0);
    org.jsecurity.session.SessionException var41 = new org.jsecurity.session.SessionException("dd\uFFFD", (java.lang.Throwable)var38);
    var33.add((java.lang.Object)var41, "org.jsecurity.config.ConfigurationException: dd\uFFFD");
    var26.onLogout((org.jsecurity.subject.PrincipalCollection)var33);
    org.jsecurity.authc.ExpiredCredentialsException var46 = new org.jsecurity.authc.ExpiredCredentialsException();
    org.jsecurity.session.ExpiredSessionException var47 = new org.jsecurity.session.ExpiredSessionException("", (java.lang.Throwable)var46);
    java.lang.Throwable[] var48 = var47.getSuppressed();
    org.jsecurity.io.ResourceException var49 = new org.jsecurity.io.ResourceException((java.lang.Throwable)var47);
    org.jsecurity.authc.SimpleAuthenticationInfo var50 = new org.jsecurity.authc.SimpleAuthenticationInfo((org.jsecurity.subject.PrincipalCollection)var33, (java.lang.Object)var47);
    var25.merge((org.jsecurity.authc.AuthenticationInfo)var50);
    org.jsecurity.subject.PrincipalCollection var52 = var50.getPrincipals();
    org.jsecurity.authz.SimpleAuthorizingAccount var54 = new org.jsecurity.authz.SimpleAuthorizingAccount((java.util.Collection)var14, (java.lang.Object)var52, "org.jsecurity.realm.text.TextConfigurationRealm_445");
    java.util.Collection var55 = var54.getRoles();
    java.io.InputStream var57 = org.jsecurity.util.ClassUtils.getResourceAsStream("");
    java.lang.Object[] var58 = new java.lang.Object[] { var57};
    java.util.List var59 = org.jsecurity.util.CollectionUtils.asList(var58);
    org.jsecurity.authc.pam.ModularRealmAuthenticator var60 = new org.jsecurity.authc.pam.ModularRealmAuthenticator(var59);
    var54.addObjectPermissions((java.util.Collection)var59);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var2);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var3);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var4);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var12);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var13);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var14);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var28);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var29);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var30);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var48);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var52);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var55);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var57);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var58);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var59);

  }

  public void test476() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest6.test476");


    org.jsecurity.authc.pam.AllSuccessfulModularAuthenticationStrategy var0 = new org.jsecurity.authc.pam.AllSuccessfulModularAuthenticationStrategy();
    char[] var2 = new char[] { };
    org.jsecurity.authc.UsernamePasswordToken var4 = new org.jsecurity.authc.UsernamePasswordToken("hi!", var2, true);
    org.jsecurity.authc.SimpleAccount var5 = new org.jsecurity.authc.SimpleAccount();
    var5.setCredentialsExpired(false);
    boolean var8 = var5.isLocked();
    org.jsecurity.authc.AuthenticationInfo var9 = var0.afterAllAttempts((org.jsecurity.authc.AuthenticationToken)var4, (org.jsecurity.authc.AuthenticationInfo)var5);
    char[] var13 = new char[] { '4', '#'};
    org.jsecurity.authc.UsernamePasswordToken var14 = new org.jsecurity.authc.UsernamePasswordToken("\u0000\u0000", var13);
    org.jsecurity.authc.SimpleAccount var15 = new org.jsecurity.authc.SimpleAccount();
    var15.setCredentialsExpired(false);
    var15.setCredentialsExpired(false);
    boolean var20 = var15.isCredentialsExpired();
    org.jsecurity.authc.AuthenticationInfo var21 = var0.afterAllAttempts((org.jsecurity.authc.AuthenticationToken)var14, (org.jsecurity.authc.AuthenticationInfo)var15);
    java.net.InetAddress var22 = var14.getInetAddress();
    org.jsecurity.session.mgt.eis.MemorySessionDAO var23 = new org.jsecurity.session.mgt.eis.MemorySessionDAO();
    org.jsecurity.cache.Cache var24 = var23.getActiveSessionsCache();
    org.jsecurity.cache.CacheManager var25 = var23.getCacheManager();
    org.jsecurity.cache.HashtableCacheManager var26 = new org.jsecurity.cache.HashtableCacheManager();
    org.jsecurity.cache.Cache var28 = var26.getCache("\u0000\u0000");
    var23.setActiveSessionsCache(var28);
    java.io.InputStream var31 = org.jsecurity.util.ClassUtils.getResourceAsStream("");
    java.lang.Object[] var32 = new java.lang.Object[] { var31};
    java.util.List var33 = org.jsecurity.util.CollectionUtils.asList(var32);
    org.jsecurity.authc.pam.ModularRealmAuthenticator var34 = new org.jsecurity.authc.pam.ModularRealmAuthenticator(var33);
    org.jsecurity.authc.pam.AllSuccessfulModularAuthenticationStrategy var35 = new org.jsecurity.authc.pam.AllSuccessfulModularAuthenticationStrategy();
    var34.setModularAuthenticationStrategy((org.jsecurity.authc.pam.ModularAuthenticationStrategy)var35);
    org.jsecurity.authz.SimpleAuthorizationInfo var37 = new org.jsecurity.authz.SimpleAuthorizationInfo();
    var37.addStringPermission("hi!");
    java.io.InputStream var41 = org.jsecurity.util.ClassUtils.getResourceAsStream("");
    java.lang.Object[] var42 = new java.lang.Object[] { var41};
    java.util.List var43 = org.jsecurity.util.CollectionUtils.asList(var42);
    var37.addRoles((java.util.Collection)var43);
    var34.setAuthenticationListeners((java.util.Collection)var43);
    org.jsecurity.realm.activedirectory.ActiveDirectoryRealm var46 = new org.jsecurity.realm.activedirectory.ActiveDirectoryRealm();
    var46.setPrincipalSuffix("");
    var34.setRealm((org.jsecurity.realm.Realm)var46);
    org.jsecurity.cache.HashtableCacheManager var50 = new org.jsecurity.cache.HashtableCacheManager();
    org.jsecurity.cache.Cache var52 = var50.getCache("\u0000\u0000");
    var46.setAuthorizationCache(var52);
    var23.setActiveSessionsCache(var52);
    org.jsecurity.session.mgt.SimpleSession var55 = new org.jsecurity.session.mgt.SimpleSession();
    java.io.Serializable var56 = var23.create((org.jsecurity.session.Session)var55);
    org.jsecurity.session.mgt.SimpleSession var57 = new org.jsecurity.session.mgt.SimpleSession();
    var57.touch();
    var57.validate();
    org.jsecurity.session.mgt.SimpleSession var60 = new org.jsecurity.session.mgt.SimpleSession();
    var60.setTimeout((-1L));
    org.jsecurity.session.mgt.SimpleSession var63 = new org.jsecurity.session.mgt.SimpleSession();
    java.util.Date var64 = var63.getLastAccessTime();
    var60.setLastAccessTime(var64);
    org.jsecurity.session.mgt.SimpleSession var66 = new org.jsecurity.session.mgt.SimpleSession();
    java.util.Date var67 = var66.getLastAccessTime();
    var60.setStopTimestamp(var67);
    var57.setLastAccessTime(var67);
    var55.setLastAccessTime(var67);
    org.jsecurity.session.mgt.ImmutableProxiedSession var71 = new org.jsecurity.session.mgt.ImmutableProxiedSession((org.jsecurity.session.Session)var55);
    java.util.Date var72 = var71.getLastAccessTime();
    java.net.InetAddress var73 = var71.getHostAddress();
    var14.setInetAddress(var73);
    java.net.InetAddress var75 = var14.getInetAddress();
    char[] var76 = var14.getPassword();
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var2);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var8 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var9);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var13);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var20 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var21);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var22);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var24);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var25);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var28);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var31);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var32);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var33);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var41);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var42);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var43);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var52);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var56 + "' != '" + "87b76e19-c6af-446b-babc-347943b1c6aa"+ "'", var56.equals("87b76e19-c6af-446b-babc-347943b1c6aa"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var64);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var67);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var72);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var73);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var75);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var76);

  }

  public void test477() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest6.test477");


    org.jsecurity.session.mgt.SimpleSession var0 = new org.jsecurity.session.mgt.SimpleSession();
    org.jsecurity.cache.HashtableCache var2 = new org.jsecurity.cache.HashtableCache("\u0000\u0000\u0000");
    org.jsecurity.session.mgt.SimpleSession var3 = new org.jsecurity.session.mgt.SimpleSession();
    var3.touch();
    org.jsecurity.authz.UnauthenticatedException var7 = new org.jsecurity.authz.UnauthenticatedException();
    org.jsecurity.config.UnresolveableReferenceException var8 = new org.jsecurity.config.UnresolveableReferenceException("", (java.lang.Throwable)var7);
    org.jsecurity.cache.CacheException var9 = new org.jsecurity.cache.CacheException("org.jsecurity.config.ConfigurationException: dd\uFFFD", (java.lang.Throwable)var7);
    java.lang.Object var10 = var3.removeAttribute((java.lang.Object)var9);
    org.jsecurity.mgt.DefaultSecurityManager var11 = new org.jsecurity.mgt.DefaultSecurityManager();
    org.jsecurity.authc.pam.AllSuccessfulModularAuthenticationStrategy var12 = new org.jsecurity.authc.pam.AllSuccessfulModularAuthenticationStrategy();
    org.jsecurity.authc.pam.AllSuccessfulModularAuthenticationStrategy var13 = new org.jsecurity.authc.pam.AllSuccessfulModularAuthenticationStrategy();
    char[] var15 = new char[] { };
    org.jsecurity.authc.UsernamePasswordToken var17 = new org.jsecurity.authc.UsernamePasswordToken("hi!", var15, true);
    org.jsecurity.authc.SimpleAccount var18 = new org.jsecurity.authc.SimpleAccount();
    var18.setCredentialsExpired(false);
    boolean var21 = var18.isLocked();
    org.jsecurity.authc.AuthenticationInfo var22 = var13.afterAllAttempts((org.jsecurity.authc.AuthenticationToken)var17, (org.jsecurity.authc.AuthenticationInfo)var18);
    char[] var26 = new char[] { '4', '#'};
    org.jsecurity.authc.UsernamePasswordToken var27 = new org.jsecurity.authc.UsernamePasswordToken("\u0000\u0000", var26);
    org.jsecurity.authc.SimpleAccount var28 = new org.jsecurity.authc.SimpleAccount();
    var28.setCredentialsExpired(false);
    var28.setCredentialsExpired(false);
    boolean var33 = var28.isCredentialsExpired();
    org.jsecurity.authc.AuthenticationInfo var34 = var13.afterAllAttempts((org.jsecurity.authc.AuthenticationToken)var27, (org.jsecurity.authc.AuthenticationInfo)var28);
    org.jsecurity.authz.UnauthenticatedException var38 = new org.jsecurity.authz.UnauthenticatedException();
    org.jsecurity.config.UnresolveableReferenceException var39 = new org.jsecurity.config.UnresolveableReferenceException("", (java.lang.Throwable)var38);
    org.jsecurity.cache.CacheException var40 = new org.jsecurity.cache.CacheException("org.jsecurity.config.ConfigurationException: dd\uFFFD", (java.lang.Throwable)var38);
    org.jsecurity.authc.SimpleAuthenticationInfo var42 = new org.jsecurity.authc.SimpleAuthenticationInfo((java.lang.Object)"org.jsecurity.config.ConfigurationException: dd\uFFFD", (java.lang.Object)var40, "a2b823b1e72eae2b727289df8a00a89df8a0bab6ad8a89c4c5c7a9b62a270000");
    org.jsecurity.subject.PrincipalCollection var43 = var42.getPrincipals();
    org.jsecurity.authc.AuthenticationInfo var44 = var12.afterAllAttempts((org.jsecurity.authc.AuthenticationToken)var27, (org.jsecurity.authc.AuthenticationInfo)var42);
    var11.setModularAuthenticationStrategy((org.jsecurity.authc.pam.ModularAuthenticationStrategy)var12);
    org.jsecurity.subject.RememberMeManager var46 = var11.getRememberMeManager();
    org.jsecurity.authc.pam.ModularRealmAuthenticator var47 = new org.jsecurity.authc.pam.ModularRealmAuthenticator();
    var11.setAuthenticator((org.jsecurity.authc.Authenticator)var47);
    var2.put((java.lang.Object)var3, (java.lang.Object)var47);
    var3.setTimeout(10L);
    org.jsecurity.session.mgt.SimpleSession var52 = new org.jsecurity.session.mgt.SimpleSession();
    var52.validate();
    java.util.Date var54 = var52.getStartTimestamp();
    var3.setStopTimestamp(var54);
    var0.setStartTimestamp(var54);
    java.io.Serializable var57 = var0.getId();
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var10);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var15);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var21 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var22);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var26);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var33 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var34);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var43);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var44);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var46);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var54);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var57);

  }

  public void test478() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest6.test478");


    org.jsecurity.session.mgt.DefaultSessionManager var0 = new org.jsecurity.session.mgt.DefaultSessionManager();
    org.jsecurity.session.mgt.SessionValidationScheduler var1 = var0.getSessionValidationScheduler();
    org.jsecurity.subject.InvalidSubjectException var3 = new org.jsecurity.subject.InvalidSubjectException("NfxhYN7ItBfRAmDBmprtU73ghfEEPpcDJrHPkZ06wiY=");
    boolean var4 = var0.isValid((java.io.Serializable)var3);
    org.jsecurity.cache.ehcache.EhCacheManager var5 = new org.jsecurity.cache.ehcache.EhCacheManager();
    net.sf.ehcache.CacheManager var6 = var5.getCacheManager();
    var5.destroy();
    net.sf.ehcache.CacheManager var8 = var5.getCacheManager();
    net.sf.ehcache.CacheManager var9 = var5.getCacheManager();
    var5.init();
    var0.setCacheManager((org.jsecurity.cache.CacheManager)var5);
    long var12 = var0.getSessionValidationInterval();
    var0.enableSessionValidationIfNecessary();
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var4 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var6);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var8);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var9);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var12 == 3600000L);

  }

  public void test479() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest6.test479");


    org.jsecurity.io.SerializationException var1 = new org.jsecurity.io.SerializationException("b58ffa74-377e-4b7b-ac57-cf7f2dcc96da");

  }

  public void test480() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest6.test480");


    org.jsecurity.session.mgt.DelegatingSession var0 = new org.jsecurity.session.mgt.DelegatingSession();
    org.jsecurity.session.mgt.SessionManager var1 = var0.getSessionManager();
    java.io.Serializable var2 = var0.getId();
    var0.setId((java.io.Serializable)"e7e879cb-1172-4cea-8bca-f370fbe1f08c");
    org.jsecurity.session.mgt.SessionManager var5 = var0.getSessionManager();
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var1);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var2);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var5);

  }

  public void test481() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest6.test481");


    java.io.InputStream var2 = org.jsecurity.util.ClassUtils.getResourceAsStream("");
    java.lang.Object[] var3 = new java.lang.Object[] { var2};
    java.util.List var4 = org.jsecurity.util.CollectionUtils.asList(var3);
    org.jsecurity.authc.pam.ModularRealmAuthenticator var5 = new org.jsecurity.authc.pam.ModularRealmAuthenticator(var4);
    org.jsecurity.authc.pam.AllSuccessfulModularAuthenticationStrategy var6 = new org.jsecurity.authc.pam.AllSuccessfulModularAuthenticationStrategy();
    var5.setModularAuthenticationStrategy((org.jsecurity.authc.pam.ModularAuthenticationStrategy)var6);
    org.jsecurity.authz.SimpleAuthorizationInfo var8 = new org.jsecurity.authz.SimpleAuthorizationInfo();
    var8.addStringPermission("hi!");
    java.io.InputStream var12 = org.jsecurity.util.ClassUtils.getResourceAsStream("");
    java.lang.Object[] var13 = new java.lang.Object[] { var12};
    java.util.List var14 = org.jsecurity.util.CollectionUtils.asList(var13);
    var8.addRoles((java.util.Collection)var14);
    var5.setAuthenticationListeners((java.util.Collection)var14);
    org.jsecurity.realm.activedirectory.ActiveDirectoryRealm var17 = new org.jsecurity.realm.activedirectory.ActiveDirectoryRealm();
    var17.setPrincipalSuffix("");
    var5.setRealm((org.jsecurity.realm.Realm)var17);
    org.jsecurity.authc.pam.FirstSuccessfulAuthenticationStrategy var21 = new org.jsecurity.authc.pam.FirstSuccessfulAuthenticationStrategy();
    org.jsecurity.authz.UnauthorizedException var23 = new org.jsecurity.authz.UnauthorizedException("org.jsecurity.config.ConfigurationException: dd\uFFFD");
    java.lang.Throwable[] var24 = var23.getSuppressed();
    java.util.List var25 = org.jsecurity.util.CollectionUtils.asList((java.lang.Object[])var24);
    org.jsecurity.authc.UsernamePasswordToken var26 = new org.jsecurity.authc.UsernamePasswordToken();
    java.lang.String var27 = var26.getUsername();
    java.net.InetAddress var28 = var26.getInetAddress();
    org.jsecurity.authc.AuthenticationInfo var29 = var21.beforeAllAttempts((java.util.Collection)var25, (org.jsecurity.authc.AuthenticationToken)var26);
    var5.setModularAuthenticationStrategy((org.jsecurity.authc.pam.ModularAuthenticationStrategy)var21);
    org.jsecurity.codec.CodecException var33 = new org.jsecurity.codec.CodecException("dd\uFFFD");
    org.jsecurity.authc.ConcurrentAccessException var34 = new org.jsecurity.authc.ConcurrentAccessException("org.jsecurity.authz.UnauthorizedException: org.jsecurity.session.ExpiredSessionException: ", (java.lang.Throwable)var33);
    org.jsecurity.subject.SimplePrincipalCollection var36 = new org.jsecurity.subject.SimplePrincipalCollection((java.lang.Object)var33, "");
    org.jsecurity.authc.pam.FirstSuccessfulAuthenticationStrategy var37 = new org.jsecurity.authc.pam.FirstSuccessfulAuthenticationStrategy();
    org.jsecurity.authz.UnauthorizedException var39 = new org.jsecurity.authz.UnauthorizedException("org.jsecurity.config.ConfigurationException: dd\uFFFD");
    java.lang.Throwable[] var40 = var39.getSuppressed();
    java.util.List var41 = org.jsecurity.util.CollectionUtils.asList((java.lang.Object[])var40);
    org.jsecurity.authc.UsernamePasswordToken var42 = new org.jsecurity.authc.UsernamePasswordToken();
    java.lang.String var43 = var42.getUsername();
    java.net.InetAddress var44 = var42.getInetAddress();
    org.jsecurity.authc.AuthenticationInfo var45 = var37.beforeAllAttempts((java.util.Collection)var41, (org.jsecurity.authc.AuthenticationToken)var42);
    org.jsecurity.session.UnknownSessionException var50 = new org.jsecurity.session.UnknownSessionException("dd\uFFFD", (java.io.Serializable)100.0f);
    org.jsecurity.subject.SubjectException var51 = new org.jsecurity.subject.SubjectException("dd\uFFFD", (java.lang.Throwable)var50);
    org.jsecurity.io.SerializationException var52 = new org.jsecurity.io.SerializationException("", (java.lang.Throwable)var51);
    java.lang.Throwable[] var53 = var51.getSuppressed();
    java.util.Set var54 = org.jsecurity.util.CollectionUtils.asSet((java.lang.Object[])var53);
    org.jsecurity.authc.SimpleAccount var55 = new org.jsecurity.authc.SimpleAccount((org.jsecurity.subject.PrincipalCollection)var36, (java.lang.Object)var41, var54);
    org.jsecurity.authc.pam.AllSuccessfulModularAuthenticationStrategy var56 = new org.jsecurity.authc.pam.AllSuccessfulModularAuthenticationStrategy();
    char[] var58 = new char[] { };
    org.jsecurity.authc.UsernamePasswordToken var60 = new org.jsecurity.authc.UsernamePasswordToken("hi!", var58, true);
    org.jsecurity.authc.SimpleAccount var61 = new org.jsecurity.authc.SimpleAccount();
    var61.setCredentialsExpired(false);
    boolean var64 = var61.isLocked();
    org.jsecurity.authc.AuthenticationInfo var65 = var56.afterAllAttempts((org.jsecurity.authc.AuthenticationToken)var60, (org.jsecurity.authc.AuthenticationInfo)var61);
    char[] var68 = new char[] { };
    org.jsecurity.authc.UsernamePasswordToken var70 = new org.jsecurity.authc.UsernamePasswordToken("hi!", var68, true);
    org.jsecurity.authc.UsernamePasswordToken var71 = new org.jsecurity.authc.UsernamePasswordToken("\u0000\u0000", var68);
    var60.setPassword(var68);
    org.jsecurity.authc.AuthenticationInfo var73 = var21.beforeAllAttempts((java.util.Collection)var41, (org.jsecurity.authc.AuthenticationToken)var60);
    char[] var74 = var60.getPassword();
    org.jsecurity.authc.UsernamePasswordToken var75 = new org.jsecurity.authc.UsernamePasswordToken("7aaa0eff-7052-4953-955a-cd6cddd8c21c", var74);
    byte[] var76 = org.jsecurity.codec.Hex.decode(var74);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var2);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var3);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var4);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var12);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var13);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var14);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var24);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var25);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var27);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var28);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var29);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var40);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var41);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var43);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var44);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var45);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var53);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var54);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var58);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var64 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var65);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var68);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var73);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var74);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var76);

  }

  public void test482() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest6.test482");


    org.jsecurity.session.mgt.eis.MemorySessionDAO var0 = new org.jsecurity.session.mgt.eis.MemorySessionDAO();
    org.jsecurity.cache.Cache var1 = var0.getActiveSessionsCache();
    org.jsecurity.cache.CacheManager var2 = var0.getCacheManager();
    org.jsecurity.cache.HashtableCacheManager var3 = new org.jsecurity.cache.HashtableCacheManager();
    org.jsecurity.cache.Cache var5 = var3.getCache("\u0000\u0000");
    var0.setActiveSessionsCache(var5);
    java.io.InputStream var8 = org.jsecurity.util.ClassUtils.getResourceAsStream("");
    java.lang.Object[] var9 = new java.lang.Object[] { var8};
    java.util.List var10 = org.jsecurity.util.CollectionUtils.asList(var9);
    org.jsecurity.authc.pam.ModularRealmAuthenticator var11 = new org.jsecurity.authc.pam.ModularRealmAuthenticator(var10);
    org.jsecurity.authc.pam.AllSuccessfulModularAuthenticationStrategy var12 = new org.jsecurity.authc.pam.AllSuccessfulModularAuthenticationStrategy();
    var11.setModularAuthenticationStrategy((org.jsecurity.authc.pam.ModularAuthenticationStrategy)var12);
    org.jsecurity.authz.SimpleAuthorizationInfo var14 = new org.jsecurity.authz.SimpleAuthorizationInfo();
    var14.addStringPermission("hi!");
    java.io.InputStream var18 = org.jsecurity.util.ClassUtils.getResourceAsStream("");
    java.lang.Object[] var19 = new java.lang.Object[] { var18};
    java.util.List var20 = org.jsecurity.util.CollectionUtils.asList(var19);
    var14.addRoles((java.util.Collection)var20);
    var11.setAuthenticationListeners((java.util.Collection)var20);
    org.jsecurity.realm.activedirectory.ActiveDirectoryRealm var23 = new org.jsecurity.realm.activedirectory.ActiveDirectoryRealm();
    var23.setPrincipalSuffix("");
    var11.setRealm((org.jsecurity.realm.Realm)var23);
    org.jsecurity.cache.HashtableCacheManager var27 = new org.jsecurity.cache.HashtableCacheManager();
    org.jsecurity.cache.Cache var29 = var27.getCache("\u0000\u0000");
    var23.setAuthorizationCache(var29);
    var0.setActiveSessionsCache(var29);
    org.jsecurity.session.mgt.SimpleSession var32 = new org.jsecurity.session.mgt.SimpleSession();
    java.io.Serializable var33 = var0.create((org.jsecurity.session.Session)var32);
    org.jsecurity.session.mgt.SimpleSession var34 = new org.jsecurity.session.mgt.SimpleSession();
    var34.touch();
    var34.validate();
    org.jsecurity.session.mgt.SimpleSession var37 = new org.jsecurity.session.mgt.SimpleSession();
    var37.setTimeout((-1L));
    org.jsecurity.session.mgt.SimpleSession var40 = new org.jsecurity.session.mgt.SimpleSession();
    java.util.Date var41 = var40.getLastAccessTime();
    var37.setLastAccessTime(var41);
    org.jsecurity.session.mgt.SimpleSession var43 = new org.jsecurity.session.mgt.SimpleSession();
    java.util.Date var44 = var43.getLastAccessTime();
    var37.setStopTimestamp(var44);
    var34.setLastAccessTime(var44);
    var32.setLastAccessTime(var44);
    org.jsecurity.session.mgt.ImmutableProxiedSession var48 = new org.jsecurity.session.mgt.ImmutableProxiedSession((org.jsecurity.session.Session)var32);
    java.io.Serializable var49 = var48.getId();
    java.util.Date var50 = var48.getStartTimestamp();
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var1);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var2);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var5);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var8);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var9);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var10);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var18);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var19);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var20);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var29);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var33 + "' != '" + "71f30a05-1ea8-413f-82da-8574eb556975"+ "'", var33.equals("71f30a05-1ea8-413f-82da-8574eb556975"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var41);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var44);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var49 + "' != '" + "71f30a05-1ea8-413f-82da-8574eb556975"+ "'", var49.equals("71f30a05-1ea8-413f-82da-8574eb556975"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var50);

  }

  public void test483() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest6.test483");


    org.jsecurity.mgt.DefaultSecurityManager var0 = new org.jsecurity.mgt.DefaultSecurityManager();
    java.io.InputStream var2 = org.jsecurity.util.ClassUtils.getResourceAsStream("");
    java.lang.Object[] var3 = new java.lang.Object[] { var2};
    java.util.List var4 = org.jsecurity.util.CollectionUtils.asList(var3);
    org.jsecurity.authc.pam.ModularRealmAuthenticator var5 = new org.jsecurity.authc.pam.ModularRealmAuthenticator(var4);
    org.jsecurity.authc.pam.AllSuccessfulModularAuthenticationStrategy var6 = new org.jsecurity.authc.pam.AllSuccessfulModularAuthenticationStrategy();
    var5.setModularAuthenticationStrategy((org.jsecurity.authc.pam.ModularAuthenticationStrategy)var6);
    org.jsecurity.authz.SimpleAuthorizationInfo var8 = new org.jsecurity.authz.SimpleAuthorizationInfo();
    var8.addStringPermission("hi!");
    java.io.InputStream var12 = org.jsecurity.util.ClassUtils.getResourceAsStream("");
    java.lang.Object[] var13 = new java.lang.Object[] { var12};
    java.util.List var14 = org.jsecurity.util.CollectionUtils.asList(var13);
    var8.addRoles((java.util.Collection)var14);
    var5.setAuthenticationListeners((java.util.Collection)var14);
    var0.setSessionListeners((java.util.Collection)var14);
    org.jsecurity.authz.UnauthenticatedException var21 = new org.jsecurity.authz.UnauthenticatedException();
    org.jsecurity.config.UnresolveableReferenceException var22 = new org.jsecurity.config.UnresolveableReferenceException("", (java.lang.Throwable)var21);
    org.jsecurity.cache.CacheException var23 = new org.jsecurity.cache.CacheException("org.jsecurity.config.ConfigurationException: dd\uFFFD", (java.lang.Throwable)var21);
    org.jsecurity.authc.SimpleAuthenticationInfo var25 = new org.jsecurity.authc.SimpleAuthenticationInfo((java.lang.Object)"org.jsecurity.config.ConfigurationException: dd\uFFFD", (java.lang.Object)var23, "a2b823b1e72eae2b727289df8a00a89df8a0bab6ad8a89c4c5c7a9b62a270000");
    org.jsecurity.realm.text.TextConfigurationRealm var26 = new org.jsecurity.realm.text.TextConfigurationRealm();
    java.io.InputStream var28 = org.jsecurity.util.ClassUtils.getResourceAsStream("");
    java.lang.Object[] var29 = new java.lang.Object[] { var28};
    java.util.List var30 = org.jsecurity.util.CollectionUtils.asList(var29);
    org.jsecurity.authc.pam.ModularRealmAuthenticator var31 = new org.jsecurity.authc.pam.ModularRealmAuthenticator(var30);
    org.jsecurity.subject.SimplePrincipalCollection var33 = new org.jsecurity.subject.SimplePrincipalCollection((java.util.Collection)var30, "org.jsecurity.authz.UnauthorizedException: org.jsecurity.session.ExpiredSessionException: ");
    org.jsecurity.session.UnknownSessionException var38 = new org.jsecurity.session.UnknownSessionException("dd\uFFFD", (java.io.Serializable)100.0f);
    org.jsecurity.session.SessionException var40 = new org.jsecurity.session.SessionException("dd\uFFFD", (java.lang.Throwable)var38, (java.io.Serializable)0);
    org.jsecurity.session.SessionException var41 = new org.jsecurity.session.SessionException("dd\uFFFD", (java.lang.Throwable)var38);
    var33.add((java.lang.Object)var41, "org.jsecurity.config.ConfigurationException: dd\uFFFD");
    var26.onLogout((org.jsecurity.subject.PrincipalCollection)var33);
    org.jsecurity.authc.ExpiredCredentialsException var46 = new org.jsecurity.authc.ExpiredCredentialsException();
    org.jsecurity.session.ExpiredSessionException var47 = new org.jsecurity.session.ExpiredSessionException("", (java.lang.Throwable)var46);
    java.lang.Throwable[] var48 = var47.getSuppressed();
    org.jsecurity.io.ResourceException var49 = new org.jsecurity.io.ResourceException((java.lang.Throwable)var47);
    org.jsecurity.authc.SimpleAuthenticationInfo var50 = new org.jsecurity.authc.SimpleAuthenticationInfo((org.jsecurity.subject.PrincipalCollection)var33, (java.lang.Object)var47);
    var25.merge((org.jsecurity.authc.AuthenticationInfo)var50);
    org.jsecurity.subject.PrincipalCollection var52 = var50.getPrincipals();
    org.jsecurity.authz.SimpleAuthorizingAccount var54 = new org.jsecurity.authz.SimpleAuthorizingAccount((java.util.Collection)var14, (java.lang.Object)var52, "org.jsecurity.realm.text.TextConfigurationRealm_445");
    java.util.Collection var55 = var54.getRoles();
    boolean var57 = var54.hasRole("77ddc2f7-9066-46c8-b5f2-b99b8caec0fa");
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var2);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var3);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var4);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var12);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var13);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var14);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var28);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var29);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var30);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var48);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var52);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var55);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var57 == false);

  }

  public void test484() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest6.test484");


    org.jsecurity.realm.activedirectory.ActiveDirectoryRealm var0 = new org.jsecurity.realm.activedirectory.ActiveDirectoryRealm();
    var0.init();
    var0.setSystemPassword("dd\uFFFD");
    org.jsecurity.cache.Cache var4 = var0.getAuthorizationCache();
    org.jsecurity.mgt.DefaultSecurityManager var5 = new org.jsecurity.mgt.DefaultSecurityManager((org.jsecurity.realm.Realm)var0);
    org.jsecurity.mgt.DefaultSecurityManager var6 = new org.jsecurity.mgt.DefaultSecurityManager((org.jsecurity.realm.Realm)var0);
    org.jsecurity.session.UnknownSessionException var15 = new org.jsecurity.session.UnknownSessionException("dd\uFFFD", (java.io.Serializable)100.0f);
    org.jsecurity.subject.SubjectException var16 = new org.jsecurity.subject.SubjectException("dd\uFFFD", (java.lang.Throwable)var15);
    org.jsecurity.authc.AccountException var17 = new org.jsecurity.authc.AccountException("hi!", (java.lang.Throwable)var16);
    org.jsecurity.session.StoppedSessionException var18 = new org.jsecurity.session.StoppedSessionException((java.lang.Throwable)var17);
    org.jsecurity.session.SessionException var19 = new org.jsecurity.session.SessionException("hi!", (java.lang.Throwable)var17);
    org.jsecurity.authc.UnknownAccountException var20 = new org.jsecurity.authc.UnknownAccountException("\u0000\u0000\u0000", (java.lang.Throwable)var19);
    org.jsecurity.io.ResourceException var23 = new org.jsecurity.io.ResourceException("hi!");
    org.jsecurity.codec.CodecException var24 = new org.jsecurity.codec.CodecException((java.lang.Throwable)var23);
    org.jsecurity.JSecurityException var25 = new org.jsecurity.JSecurityException("a2b823b1e72eae2b727289df8a00a89df8a0bab6ad8a89c4c5c7a9b62a270000", (java.lang.Throwable)var23);
    org.jsecurity.session.UnknownSessionException var26 = new org.jsecurity.session.UnknownSessionException((java.lang.Throwable)var25);
    org.jsecurity.authc.IncorrectCredentialsException var27 = new org.jsecurity.authc.IncorrectCredentialsException((java.lang.Throwable)var25);
    var19.addSuppressed((java.lang.Throwable)var25);
    org.jsecurity.authc.AccountException var29 = new org.jsecurity.authc.AccountException("QzXpDZSfjjJUpGJc6nnkGQp4loZSAnOxZJSu5IzgpmrfcDFf8bzV/5XmrcPMyQXV", (java.lang.Throwable)var25);
    org.jsecurity.authz.UnauthorizedException var30 = new org.jsecurity.authz.UnauthorizedException("o\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFDw8\u3B9A\uFFFDM\uFFFD\uFFFDg\uFFFD\uFFFD\u07BC\u059C", (java.lang.Throwable)var25);
    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      org.jsecurity.crypto.hash.Md5Hash var31 = new org.jsecurity.crypto.hash.Md5Hash((java.lang.Object)var0, (java.lang.Object)"o\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFDw8\u3B9A\uFFFDM\uFFFD\uFFFDg\uFFFD\uFFFD\u07BC\u059C");
      fail("Expected exception of type org.jsecurity.codec.CodecException");
    } catch (org.jsecurity.codec.CodecException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var4);

  }

  public void test485() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest6.test485");


    byte[] var1 = org.jsecurity.codec.CodecSupport.toBytes("7272eb19-d391-4061-a8d0-d58cec860677");
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var1);

  }

  public void test486() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest6.test486");


    org.jsecurity.config.IniConfiguration var0 = new org.jsecurity.config.IniConfiguration();
    var0.setConfigUrl("hi!");
    var0.setConfig("org.jsecurity.realm.SimpleAccountRealm-52-authorization");
    org.jsecurity.mgt.SecurityManager var5 = var0.getSecurityManager();
    org.jsecurity.mgt.SecurityManager var6 = var0.getSecurityManager();
    var0.setConfigUrl("7dd9d095-6c41-447c-a2f6-e2c6c8807c11");
    var0.setConfigUrl("f3cec280-b0d4-4d1e-9ce8-a8b745fa003b");
    var0.setConfigUrl("\uFFFD\uFFFD#\uFFFD\uFFFD.\uFFFD+r\uFFFD\u6959(\uFFFD\uFFFDW\uFFFDq\uFFFD.\uFFFD\uFFFD^jY\uFFFDj\uFFFDa\uFFFD\uFFFD\uFFFDj\u0628");
    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      var0.init();
      fail("Expected exception of type org.jsecurity.config.ConfigurationException");
    } catch (org.jsecurity.config.ConfigurationException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var5);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var6);

  }

  public void test487() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest6.test487");


    org.jsecurity.util.AntPathMatcher var0 = new org.jsecurity.util.AntPathMatcher();
    boolean var3 = var0.matchStart("org.jsecurity.authc.IncorrectCredentialsException: \u0000\u0000", "ZGT/");
    boolean var5 = var0.isPattern("ecd29e3a-c551-4fce-8683-2e49992d04b8");
    boolean var8 = var0.matchStart("b725e8cc-690c-495e-ac27-b1b425834793", "90538851-b0e4-449f-8dda-973ab1d52c9e");
    boolean var10 = var0.isPattern("b74f4674-5868-4e94-a7d5-832b6ef0fcdb");
    java.lang.String var13 = var0.extractPathWithinPattern("org.jsecurity.realm.SimpleAccountRealm-384-authorization", "org.jsecurity.realm.text.PropertiesRealm_772");
    org.jsecurity.crypto.hash.Md2Hash var14 = new org.jsecurity.crypto.hash.Md2Hash((java.lang.Object)"org.jsecurity.realm.text.PropertiesRealm_772");
    java.lang.String var15 = var14.toBase64();
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var3 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var5 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var8 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var10 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var13 + "' != '" + ""+ "'", var13.equals(""));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var15 + "' != '" + "M6OmVmF64XGTvCnQfBNppw=="+ "'", var15.equals("M6OmVmF64XGTvCnQfBNppw=="));

  }

  public void test488() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest6.test488");


    org.jsecurity.realm.text.PropertiesRealm var0 = new org.jsecurity.realm.text.PropertiesRealm();
    org.jsecurity.realm.activedirectory.ActiveDirectoryRealm var1 = new org.jsecurity.realm.activedirectory.ActiveDirectoryRealm();
    org.jsecurity.authc.credential.Sha256CredentialsMatcher var2 = new org.jsecurity.authc.credential.Sha256CredentialsMatcher();
    var1.setCredentialsMatcher((org.jsecurity.authc.credential.CredentialsMatcher)var2);
    java.lang.String var4 = var1.getAuthorizationCacheName();
    var1.setPrincipalSuffix("org.jsecurity.config.ConfigurationException: dd\uFFFD");
    org.jsecurity.authz.permission.PermissionResolver var7 = var1.getPermissionResolver();
    var0.setPermissionResolver(var7);
    var0.setUseXmlFormat(false);
    var0.init();
    var0.run();
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var4);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var7);

  }

  public void test489() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest6.test489");


    org.jsecurity.session.SessionException var1 = new org.jsecurity.session.SessionException("b58ffa74-377e-4b7b-ac57-cf7f2dcc96da");

  }

  public void test490() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest6.test490");


    org.jsecurity.session.mgt.DelegatingSession var0 = new org.jsecurity.session.mgt.DelegatingSession();
    org.jsecurity.session.mgt.SessionManager var1 = var0.getSessionManager();
    java.io.Serializable var2 = var0.getId();
    var0.setId((java.io.Serializable)"e7e879cb-1172-4cea-8bca-f370fbe1f08c");
    org.jsecurity.authz.UnauthenticatedException var7 = new org.jsecurity.authz.UnauthenticatedException();
    org.jsecurity.config.UnresolveableReferenceException var8 = new org.jsecurity.config.UnresolveableReferenceException("", (java.lang.Throwable)var7);
    org.jsecurity.session.InvalidSessionException var9 = new org.jsecurity.session.InvalidSessionException((java.io.Serializable)var7);
    org.jsecurity.authz.AuthorizationException var10 = new org.jsecurity.authz.AuthorizationException("hi!", (java.lang.Throwable)var9);
    var0.setId((java.io.Serializable)var9);
    org.jsecurity.session.mgt.SessionManager var12 = var0.getSessionManager();
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var1);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var2);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var12);

  }

  public void test491() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest6.test491");


    org.jsecurity.realm.text.TextConfigurationRealm var0 = new org.jsecurity.realm.text.TextConfigurationRealm();
    org.jsecurity.realm.text.TextConfigurationRealm var1 = new org.jsecurity.realm.text.TextConfigurationRealm();
    java.io.InputStream var3 = org.jsecurity.util.ClassUtils.getResourceAsStream("");
    java.lang.Object[] var4 = new java.lang.Object[] { var3};
    java.util.List var5 = org.jsecurity.util.CollectionUtils.asList(var4);
    org.jsecurity.authc.pam.ModularRealmAuthenticator var6 = new org.jsecurity.authc.pam.ModularRealmAuthenticator(var5);
    org.jsecurity.subject.SimplePrincipalCollection var8 = new org.jsecurity.subject.SimplePrincipalCollection((java.util.Collection)var5, "org.jsecurity.authz.UnauthorizedException: org.jsecurity.session.ExpiredSessionException: ");
    org.jsecurity.session.UnknownSessionException var13 = new org.jsecurity.session.UnknownSessionException("dd\uFFFD", (java.io.Serializable)100.0f);
    org.jsecurity.session.SessionException var15 = new org.jsecurity.session.SessionException("dd\uFFFD", (java.lang.Throwable)var13, (java.io.Serializable)0);
    org.jsecurity.session.SessionException var16 = new org.jsecurity.session.SessionException("dd\uFFFD", (java.lang.Throwable)var13);
    var8.add((java.lang.Object)var16, "org.jsecurity.config.ConfigurationException: dd\uFFFD");
    var1.onLogout((org.jsecurity.subject.PrincipalCollection)var8);
    java.util.Collection var21 = var8.fromRealm("\u0000\u0000\u0000");
    var0.onLogout((org.jsecurity.subject.PrincipalCollection)var8);
    org.jsecurity.authz.aop.RoleAnnotationMethodInterceptor var23 = new org.jsecurity.authz.aop.RoleAnnotationMethodInterceptor();
    org.jsecurity.aop.AnnotationHandler var24 = var23.getHandler();
    java.lang.Class var25 = var24.getAnnotationClass();
    java.util.Collection var26 = var8.byType(var25);
    org.jsecurity.session.mgt.SimpleSession var27 = new org.jsecurity.session.mgt.SimpleSession();
    java.util.Date var28 = var27.getLastAccessTime();
    boolean var29 = var27.isValid();
    java.lang.String[] var32 = org.jsecurity.util.StringUtils.split("dade3937-164f-46fa-a082-f5f54b3b44e1", ' ');
    java.util.List var33 = org.jsecurity.util.CollectionUtils.asList((java.lang.Object[])var32);
    org.jsecurity.authz.aop.RoleAnnotationMethodInterceptor var34 = new org.jsecurity.authz.aop.RoleAnnotationMethodInterceptor();
    org.jsecurity.aop.AnnotationHandler var35 = var34.getHandler();
    java.lang.Class var36 = var35.getAnnotationClass();
    var27.setAttribute((java.lang.Object)var33, (java.lang.Object)var36);
    java.lang.Class[] var38 = new java.lang.Class[] { var36};
    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      java.lang.reflect.Constructor var39 = org.jsecurity.util.ClassUtils.getConstructor(var25, var38);
      fail("Expected exception of type java.lang.IllegalStateException");
    } catch (java.lang.IllegalStateException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var3);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var4);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var5);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var21);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var24);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var25);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var26);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var28);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var29 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var32);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var33);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var35);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var36);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var38);

  }

  public void test492() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest6.test492");


    org.jsecurity.util.AntPathMatcher var0 = new org.jsecurity.util.AntPathMatcher();
    boolean var3 = var0.matchStart("\uFFFD\uFFFD#\uFFFD\uFFFD.\uFFFD+rr\uFFFD\u07CA\u0000\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\u01E9\uFFFD*'\u0000\u0000", "ZGT/");
    var0.setPathSeparator("org.jsecurity.config.ConfigurationException: dd\uFFFD");
    boolean var8 = var0.matchStart("6464ff", "\uFFFD\uFFFD\u0000");
    java.lang.String var11 = var0.extractPathWithinPattern("hi!", "10f5b491-38ac-4c02-8085-950abb026a06");
    var0.setPathSeparator("\uFFFD\uFFFD#\uFFFD\uFFFD.\uFFFD+r\uFFFD\u6959(\uFFFD\uFFFDW\uFFFDq\uFFFD.\uFFFD\uFFFD^jY\uFFFDj\uFFFDa\uFFFD\uFFFD\uFFFDj\u0628\u0000");
    var0.setPathSeparator("2de55d54-e620-45f7-8afd-a30a33a48e47");
    java.lang.String var18 = var0.extractPathWithinPattern("3162ca5e-c516-4ad8-9ca6-6ff0939bd5a6", "a7779988-1964-480a-b68c-5556d628a264");
    boolean var21 = var0.matches("M\uFFFD}\uFFFD\uFFFDkM7\uFFFDf\uFFFDi\uFFFD6\uFFFD]\uFFFD\uFFFD\uFFFD5\uFFFDO;", "orgjsecurityconfigConfigurationExceptionAAA=\r\n");
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var3 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var8 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var11 + "' != '" + "org.jsecurity.config.ConfigurationException: dd\uFFFD-4org.jsecurity.config.ConfigurationException: dd\uFFFD02-8085-950org.jsecurity.config.ConfigurationException: dd\uFFFDbb026org.jsecurity.config.ConfigurationException: dd\uFFFD06"+ "'", var11.equals("org.jsecurity.config.ConfigurationException: dd\uFFFD-4org.jsecurity.config.ConfigurationException: dd\uFFFD02-8085-950org.jsecurity.config.ConfigurationException: dd\uFFFDbb026org.jsecurity.config.ConfigurationException: dd\uFFFD06"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var18 + "' != '" + ""+ "'", var18.equals(""));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var21 == false);

  }

  public void test493() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest6.test493");


    org.jsecurity.crypto.BlowfishCipher var0 = new org.jsecurity.crypto.BlowfishCipher();
    java.security.Key var1 = org.jsecurity.crypto.BlowfishCipher.generateNewKey();
    var0.setKey(var1);
    java.security.Key var3 = org.jsecurity.crypto.BlowfishCipher.generateNewKey();
    var0.setKey(var3);
    byte[] var8 = new byte[] { (byte)100, (byte)100, (byte)(-1)};
    java.lang.String var9 = org.jsecurity.codec.CodecSupport.toString(var8);
    char[] var10 = org.jsecurity.codec.CodecSupport.toChars(var8);
    boolean var11 = org.jsecurity.codec.Base64.isBase64(var8);
    boolean var12 = org.jsecurity.codec.Base64.isBase64(var8);
    boolean var13 = org.jsecurity.codec.Base64.isBase64(var8);
    java.lang.String var14 = org.jsecurity.codec.Hex.encodeToString(var8);
    byte[] var18 = new byte[] { (byte)100, (byte)100, (byte)(-1)};
    java.lang.String var19 = org.jsecurity.codec.CodecSupport.toString(var18);
    char[] var20 = org.jsecurity.codec.CodecSupport.toChars(var18);
    boolean var21 = org.jsecurity.codec.Base64.isBase64(var18);
    boolean var22 = org.jsecurity.codec.Base64.isBase64(var18);
    boolean var23 = org.jsecurity.codec.Base64.isBase64(var18);
    java.lang.String var24 = org.jsecurity.codec.Base64.encodeToString(var18);
    byte[] var25 = var0.encrypt(var8, var18);
    org.jsecurity.io.DefaultSerializer var26 = new org.jsecurity.io.DefaultSerializer();
    org.jsecurity.authz.SimpleRole var27 = new org.jsecurity.authz.SimpleRole();
    byte[] var28 = var26.serialize((java.lang.Object)var27);
    byte[] var32 = new byte[] { (byte)100, (byte)100, (byte)(-1)};
    java.lang.String var33 = org.jsecurity.codec.CodecSupport.toString(var32);
    char[] var34 = org.jsecurity.codec.CodecSupport.toChars(var32);
    boolean var35 = org.jsecurity.codec.Base64.isBase64(var32);
    boolean var36 = org.jsecurity.codec.Base64.isBase64(var32);
    boolean var37 = org.jsecurity.codec.Base64.isBase64(var32);
    byte[] var38 = var0.encrypt(var28, var32);
    boolean var39 = org.jsecurity.codec.Base64.isBase64(var28);
    java.lang.String var40 = org.jsecurity.codec.Base64.encodeToString(var28);
    java.lang.String var41 = org.jsecurity.codec.CodecSupport.toString(var28);
    java.lang.String var42 = org.jsecurity.codec.Base64.decodeToString(var28);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var1);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var3);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var8);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var9 + "' != '" + "dd\uFFFD"+ "'", var9.equals("dd\uFFFD"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var10);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var11 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var12 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var13 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var14 + "' != '" + "6464ff"+ "'", var14.equals("6464ff"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var18);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var19 + "' != '" + "dd\uFFFD"+ "'", var19.equals("dd\uFFFD"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var20);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var21 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var22 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var23 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var24 + "' != '" + "ZGT/"+ "'", var24.equals("ZGT/"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var25);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var28);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var32);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var33 + "' != '" + "dd\uFFFD"+ "'", var33.equals("dd\uFFFD"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var34);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var35 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var36 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var37 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var38);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var39 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var40 + "' != '" + "rO0ABXNyAB5vcmcuanNlY3VyaXR5LmF1dGh6LlNpbXBsZVJvbGVJTIBtTJ3XygIAAkwABG5hbWV0ABJMamF2YS9sYW5nL1N0cmluZztMAAtwZXJtaXNzaW9uc3QAD0xqYXZhL3V0aWwvU2V0O3hwcHA="+ "'", var40.equals("rO0ABXNyAB5vcmcuanNlY3VyaXR5LmF1dGh6LlNpbXBsZVJvbGVJTIBtTJ3XygIAAkwABG5hbWV0ABJMamF2YS9sYW5nL1N0cmluZztMAAtwZXJtaXNzaW9uc3QAD0xqYXZhL3V0aWwvU2V0O3hwcHA="));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var41 + "' != '" + "\uFFFD\uFFFD\u0000\u0005sr\u0000\u001Eorg.jsecurity.authz.SimpleRoleIL\uFFFDmL\uFFFD\uFFFD\uFFFD\u0002\u0000\u0002L\u0000\u0004namet\u0000\u0012Ljava/lang/String;L\u0000\u000Bpermissionst\u0000\u000FLjava/util/Set;xppp"+ "'", var41.equals("\uFFFD\uFFFD\u0000\u0005sr\u0000\u001Eorg.jsecurity.authz.SimpleRoleIL\uFFFDmL\uFFFD\uFFFD\uFFFD\u0002\u0000\u0002L\u0000\u0004namet\u0000\u0012Ljava/lang/String;L\u0000\u000Bpermissionst\u0000\u000FLjava/util/Set;xppp"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var42 + "' != '" + "\uFFFD\uFFFD+\uFFFD;\u001Er\uFFFD\uFFFD&\uFFFD\uFFFD\u001C\u048Ajey\u001A%x\uFFFD\uFFFD,\uFFFD\u0699\uFFFDK\uFFFD\uFFFD\uFFFD\uFFFDV\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD)\uFFFD.\uFFFD\uFFFD\uFFFD+,\uFFFD\uFFFD\uCD38\u06BD\uFFFD\uFFFD)I\uFFFDq\u0000\u0000\u0000"+ "'", var42.equals("\uFFFD\uFFFD+\uFFFD;\u001Er\uFFFD\uFFFD&\uFFFD\uFFFD\u001C\u048Ajey\u001A%x\uFFFD\uFFFD,\uFFFD\u0699\uFFFDK\uFFFD\uFFFD\uFFFD\uFFFDV\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD)\uFFFD.\uFFFD\uFFFD\uFFFD+,\uFFFD\uFFFD\uCD38\u06BD\uFFFD\uFFFD)I\uFFFDq\u0000\u0000\u0000"));

  }

  public void test494() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest6.test494");


    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      org.jsecurity.crypto.hash.Md5Hash var1 = org.jsecurity.crypto.hash.Md5Hash.fromHexString("HashtableCache [2e460aa1-7db8-4a99-ad7a-a5b2ab41638e]");
      fail("Expected exception of type java.lang.IllegalArgumentException");
    } catch (java.lang.IllegalArgumentException e) {
      // Expected exception.
    }

  }

  public void test495() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest6.test495");


    org.jsecurity.authz.UnauthenticatedException var3 = new org.jsecurity.authz.UnauthenticatedException();
    org.jsecurity.config.UnresolveableReferenceException var4 = new org.jsecurity.config.UnresolveableReferenceException("", (java.lang.Throwable)var3);
    org.jsecurity.cache.CacheException var5 = new org.jsecurity.cache.CacheException("org.jsecurity.config.ConfigurationException: dd\uFFFD", (java.lang.Throwable)var3);
    org.jsecurity.authc.SimpleAuthenticationInfo var7 = new org.jsecurity.authc.SimpleAuthenticationInfo((java.lang.Object)"org.jsecurity.config.ConfigurationException: dd\uFFFD", (java.lang.Object)var5, "a2b823b1e72eae2b727289df8a00a89df8a0bab6ad8a89c4c5c7a9b62a270000");
    org.jsecurity.realm.text.TextConfigurationRealm var8 = new org.jsecurity.realm.text.TextConfigurationRealm();
    java.io.InputStream var10 = org.jsecurity.util.ClassUtils.getResourceAsStream("");
    java.lang.Object[] var11 = new java.lang.Object[] { var10};
    java.util.List var12 = org.jsecurity.util.CollectionUtils.asList(var11);
    org.jsecurity.authc.pam.ModularRealmAuthenticator var13 = new org.jsecurity.authc.pam.ModularRealmAuthenticator(var12);
    org.jsecurity.subject.SimplePrincipalCollection var15 = new org.jsecurity.subject.SimplePrincipalCollection((java.util.Collection)var12, "org.jsecurity.authz.UnauthorizedException: org.jsecurity.session.ExpiredSessionException: ");
    org.jsecurity.session.UnknownSessionException var20 = new org.jsecurity.session.UnknownSessionException("dd\uFFFD", (java.io.Serializable)100.0f);
    org.jsecurity.session.SessionException var22 = new org.jsecurity.session.SessionException("dd\uFFFD", (java.lang.Throwable)var20, (java.io.Serializable)0);
    org.jsecurity.session.SessionException var23 = new org.jsecurity.session.SessionException("dd\uFFFD", (java.lang.Throwable)var20);
    var15.add((java.lang.Object)var23, "org.jsecurity.config.ConfigurationException: dd\uFFFD");
    var8.onLogout((org.jsecurity.subject.PrincipalCollection)var15);
    org.jsecurity.authc.ExpiredCredentialsException var28 = new org.jsecurity.authc.ExpiredCredentialsException();
    org.jsecurity.session.ExpiredSessionException var29 = new org.jsecurity.session.ExpiredSessionException("", (java.lang.Throwable)var28);
    java.lang.Throwable[] var30 = var29.getSuppressed();
    org.jsecurity.io.ResourceException var31 = new org.jsecurity.io.ResourceException((java.lang.Throwable)var29);
    org.jsecurity.authc.SimpleAuthenticationInfo var32 = new org.jsecurity.authc.SimpleAuthenticationInfo((org.jsecurity.subject.PrincipalCollection)var15, (java.lang.Object)var29);
    var7.merge((org.jsecurity.authc.AuthenticationInfo)var32);
    org.jsecurity.subject.PrincipalCollection var34 = var32.getPrincipals();
    java.io.InputStream var36 = org.jsecurity.util.ClassUtils.getResourceAsStream("");
    java.lang.Object[] var37 = new java.lang.Object[] { var36};
    java.util.List var38 = org.jsecurity.util.CollectionUtils.asList(var37);
    org.jsecurity.authc.pam.ModularRealmAuthenticator var39 = new org.jsecurity.authc.pam.ModularRealmAuthenticator(var38);
    java.io.InputStream var41 = org.jsecurity.util.ClassUtils.getResourceAsStream("");
    java.lang.Object[] var42 = new java.lang.Object[] { var41};
    java.util.List var43 = org.jsecurity.util.CollectionUtils.asList(var42);
    org.jsecurity.authc.pam.ModularRealmAuthenticator var44 = new org.jsecurity.authc.pam.ModularRealmAuthenticator(var43);
    var39.setRealms((java.util.Collection)var43);
    org.jsecurity.subject.SimplePrincipalCollection var47 = new org.jsecurity.subject.SimplePrincipalCollection((java.util.Collection)var43, "org.jsecurity.realm.SimpleAccountRealm-9-authorization");
    org.jsecurity.crypto.BlowfishCipher var48 = new org.jsecurity.crypto.BlowfishCipher();
    java.security.Key var49 = org.jsecurity.crypto.BlowfishCipher.generateNewKey();
    var48.setKey(var49);
    org.jsecurity.authz.SimpleAuthorizingAccount var51 = new org.jsecurity.authz.SimpleAuthorizingAccount((org.jsecurity.subject.PrincipalCollection)var47, (java.lang.Object)var49);
    var32.merge((org.jsecurity.authc.AuthenticationInfo)var51);
    var51.setLocked(true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var10);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var11);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var12);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var30);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var34);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var36);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var37);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var38);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var41);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var42);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var43);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var49);

  }

  public void test496() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest6.test496");


    org.jsecurity.realm.jdbc.JdbcRealm var0 = new org.jsecurity.realm.jdbc.JdbcRealm();
    var0.setPermissionsQuery("org.jsecurity.realm.text.TextConfigurationRealm_445");
    var0.setUserRolesQuery("6464ff");
    org.jsecurity.authc.pam.AllSuccessfulModularAuthenticationStrategy var5 = new org.jsecurity.authc.pam.AllSuccessfulModularAuthenticationStrategy();
    char[] var7 = new char[] { };
    org.jsecurity.authc.UsernamePasswordToken var9 = new org.jsecurity.authc.UsernamePasswordToken("hi!", var7, true);
    org.jsecurity.authc.SimpleAccount var10 = new org.jsecurity.authc.SimpleAccount();
    var10.setCredentialsExpired(false);
    boolean var13 = var10.isLocked();
    org.jsecurity.authc.AuthenticationInfo var14 = var5.afterAllAttempts((org.jsecurity.authc.AuthenticationToken)var9, (org.jsecurity.authc.AuthenticationInfo)var10);
    char[] var16 = new char[] { };
    org.jsecurity.authc.UsernamePasswordToken var18 = new org.jsecurity.authc.UsernamePasswordToken("hi!", var16, true);
    byte[] var19 = org.jsecurity.codec.Hex.decode(var16);
    byte[] var20 = org.jsecurity.codec.Hex.decode(var16);
    var9.setPassword(var16);
    boolean var22 = var0.supports((org.jsecurity.authc.AuthenticationToken)var9);
    var0.setPermissionsQuery("88340016-ef51-4123-8332-9557d9abe70e");
    var0.setName("eea6d09b-519f-41aa-95c1-fb38ae599f45");
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var7);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var13 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var14);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var16);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var19);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var20);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var22 == true);

  }

  public void test497() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest6.test497");


    org.jsecurity.realm.activedirectory.ActiveDirectoryRealm var0 = new org.jsecurity.realm.activedirectory.ActiveDirectoryRealm();
    var0.init();
    var0.setSystemPassword("dd\uFFFD");
    org.jsecurity.authz.aop.GuestAnnotationHandler var4 = new org.jsecurity.authz.aop.GuestAnnotationHandler();
    java.lang.Class var5 = var4.getAnnotationClass();
    var0.setAuthenticationTokenClass(var5);
    org.jsecurity.mgt.DefaultSecurityManager var7 = new org.jsecurity.mgt.DefaultSecurityManager((org.jsecurity.realm.Realm)var0);
    org.jsecurity.cache.CacheManager var8 = var0.getCacheManager();
    var0.setUrl("3aaa5efd-5a5b-4a04-b3d7-42cd5249d0e9");
    org.jsecurity.cache.CacheManager var11 = var0.getCacheManager();
    var0.setAuthorizationCacheName("a7923239-c3f0-4f69-8575-cc6a2af16731");
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var5);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var8);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var11);

  }

  public void test498() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest6.test498");


    org.jsecurity.io.ResourceException var1 = new org.jsecurity.io.ResourceException("40794545-4ac7-46c8-9121-a0809c24d8ab");

  }

  public void test499() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest6.test499");


    org.jsecurity.authz.UnauthenticatedException var1 = new org.jsecurity.authz.UnauthenticatedException("944eaa9e-a16a-40cf-bdfa-a6f7f9bf6e53");

  }

  public void test500() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest6.test500");


    org.jsecurity.session.UnknownSessionException var5 = new org.jsecurity.session.UnknownSessionException("dd\uFFFD", (java.io.Serializable)100.0f);
    org.jsecurity.subject.SubjectException var6 = new org.jsecurity.subject.SubjectException("dd\uFFFD", (java.lang.Throwable)var5);
    org.jsecurity.authc.AccountException var7 = new org.jsecurity.authc.AccountException("hi!", (java.lang.Throwable)var6);
    org.jsecurity.session.StoppedSessionException var8 = new org.jsecurity.session.StoppedSessionException((java.lang.Throwable)var7);
    org.jsecurity.subject.SubjectException var9 = new org.jsecurity.subject.SubjectException((java.lang.Throwable)var8);
    org.jsecurity.io.ResourceException var10 = new org.jsecurity.io.ResourceException("7aaa0eff-7052-4953-955a-cd6cddd8c21c", (java.lang.Throwable)var8);
    org.jsecurity.authc.ExpiredCredentialsException var12 = new org.jsecurity.authc.ExpiredCredentialsException();
    org.jsecurity.session.ExpiredSessionException var13 = new org.jsecurity.session.ExpiredSessionException("", (java.lang.Throwable)var12);
    org.jsecurity.authz.UnauthorizedException var14 = new org.jsecurity.authz.UnauthorizedException((java.lang.Throwable)var13);
    var8.addSuppressed((java.lang.Throwable)var13);

  }

}
