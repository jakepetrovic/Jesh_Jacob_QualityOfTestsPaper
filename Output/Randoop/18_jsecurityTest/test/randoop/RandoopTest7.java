package randoop;

import junit.framework.*;

public class RandoopTest7 extends TestCase {

  public static boolean debug = false;

  public void test1() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest7.test1");


    org.jsecurity.session.ExpiredSessionException var1 = new org.jsecurity.session.ExpiredSessionException("2f9de503-1bce-46ee-bb09-82c8ed4baba8");

  }

  public void test2() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest7.test2");


    org.jsecurity.session.SessionException var1 = new org.jsecurity.session.SessionException("org.jsecurity.realm.text.TextConfigurationRealm_1105");
    org.jsecurity.authc.ExpiredCredentialsException var2 = new org.jsecurity.authc.ExpiredCredentialsException((java.lang.Throwable)var1);
    org.jsecurity.session.StoppedSessionException var3 = new org.jsecurity.session.StoppedSessionException((java.io.Serializable)var1);
    org.jsecurity.util.InstantiationException var4 = new org.jsecurity.util.InstantiationException((java.lang.Throwable)var1);

  }

  public void test3() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest7.test3");


    org.jsecurity.codec.CodecException var2 = new org.jsecurity.codec.CodecException("dd\uFFFD");
    org.jsecurity.authc.ConcurrentAccessException var3 = new org.jsecurity.authc.ConcurrentAccessException("org.jsecurity.authz.UnauthorizedException: org.jsecurity.session.ExpiredSessionException: ", (java.lang.Throwable)var2);
    org.jsecurity.subject.SimplePrincipalCollection var5 = new org.jsecurity.subject.SimplePrincipalCollection((java.lang.Object)var2, "");
    java.io.InputStream var7 = org.jsecurity.util.ClassUtils.getResourceAsStream("");
    java.lang.Object[] var8 = new java.lang.Object[] { var7};
    java.util.List var9 = org.jsecurity.util.CollectionUtils.asList(var8);
    org.jsecurity.authc.pam.ModularRealmAuthenticator var10 = new org.jsecurity.authc.pam.ModularRealmAuthenticator(var9);
    org.jsecurity.authc.pam.AllSuccessfulModularAuthenticationStrategy var11 = new org.jsecurity.authc.pam.AllSuccessfulModularAuthenticationStrategy();
    var10.setModularAuthenticationStrategy((org.jsecurity.authc.pam.ModularAuthenticationStrategy)var11);
    org.jsecurity.authz.SimpleAuthorizationInfo var13 = new org.jsecurity.authz.SimpleAuthorizationInfo();
    var13.addStringPermission("hi!");
    java.io.InputStream var17 = org.jsecurity.util.ClassUtils.getResourceAsStream("");
    java.lang.Object[] var18 = new java.lang.Object[] { var17};
    java.util.List var19 = org.jsecurity.util.CollectionUtils.asList(var18);
    var13.addRoles((java.util.Collection)var19);
    var10.setAuthenticationListeners((java.util.Collection)var19);
    org.jsecurity.realm.activedirectory.ActiveDirectoryRealm var22 = new org.jsecurity.realm.activedirectory.ActiveDirectoryRealm();
    var22.setPrincipalSuffix("");
    var10.setRealm((org.jsecurity.realm.Realm)var22);
    org.jsecurity.authc.pam.FirstSuccessfulAuthenticationStrategy var26 = new org.jsecurity.authc.pam.FirstSuccessfulAuthenticationStrategy();
    org.jsecurity.authz.UnauthorizedException var28 = new org.jsecurity.authz.UnauthorizedException("org.jsecurity.config.ConfigurationException: dd\uFFFD");
    java.lang.Throwable[] var29 = var28.getSuppressed();
    java.util.List var30 = org.jsecurity.util.CollectionUtils.asList((java.lang.Object[])var29);
    org.jsecurity.authc.UsernamePasswordToken var31 = new org.jsecurity.authc.UsernamePasswordToken();
    java.lang.String var32 = var31.getUsername();
    java.net.InetAddress var33 = var31.getInetAddress();
    org.jsecurity.authc.AuthenticationInfo var34 = var26.beforeAllAttempts((java.util.Collection)var30, (org.jsecurity.authc.AuthenticationToken)var31);
    var10.setModularAuthenticationStrategy((org.jsecurity.authc.pam.ModularAuthenticationStrategy)var26);
    org.jsecurity.authc.SimpleAccount var36 = new org.jsecurity.authc.SimpleAccount((org.jsecurity.subject.PrincipalCollection)var5, (java.lang.Object)var10);
    org.jsecurity.session.UnknownSessionException var42 = new org.jsecurity.session.UnknownSessionException("dd\uFFFD", (java.io.Serializable)100.0f);
    org.jsecurity.subject.SubjectException var43 = new org.jsecurity.subject.SubjectException("dd\uFFFD", (java.lang.Throwable)var42);
    org.jsecurity.authc.pam.UnsupportedTokenException var44 = new org.jsecurity.authc.pam.UnsupportedTokenException("dd\uFFFD", (java.lang.Throwable)var42);
    org.jsecurity.session.StoppedSessionException var45 = new org.jsecurity.session.StoppedSessionException("org.jsecurity.config.ConfigurationException: dd\uFFFD", (java.lang.Throwable)var44);
    org.jsecurity.JSecurityException var46 = new org.jsecurity.JSecurityException((java.lang.Throwable)var45);
    boolean var47 = var36.equals((java.lang.Object)var45);
    var36.addStringPermission("eb8eb80000");
    java.util.Set var51 = org.jsecurity.util.PermissionUtils.toPermissionStrings("org.jsecurity.config.ConfigurationException: dd\uFFFD");
    org.jsecurity.authz.SimpleAuthorizationInfo var52 = new org.jsecurity.authz.SimpleAuthorizationInfo(var51);
    var36.addStringPermissions((java.util.Collection)var51);
    org.jsecurity.subject.SimplePrincipalCollection var55 = new org.jsecurity.subject.SimplePrincipalCollection((java.util.Collection)var51, "e2100c27-e41d-4c80-964c-90268ef4a856");
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var7);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var8);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var9);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var17);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var18);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var19);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var29);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var30);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var32);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var33);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var34);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var47 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var51);

  }

  public void test4() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest7.test4");


    org.jsecurity.realm.activedirectory.ActiveDirectoryRealm var0 = new org.jsecurity.realm.activedirectory.ActiveDirectoryRealm();
    org.jsecurity.authc.credential.Sha256CredentialsMatcher var1 = new org.jsecurity.authc.credential.Sha256CredentialsMatcher();
    var0.setCredentialsMatcher((org.jsecurity.authc.credential.CredentialsMatcher)var1);
    org.jsecurity.realm.activedirectory.ActiveDirectoryRealm var3 = new org.jsecurity.realm.activedirectory.ActiveDirectoryRealm();
    org.jsecurity.authc.credential.Sha256CredentialsMatcher var4 = new org.jsecurity.authc.credential.Sha256CredentialsMatcher();
    var3.setCredentialsMatcher((org.jsecurity.authc.credential.CredentialsMatcher)var4);
    java.lang.String var6 = var3.getAuthorizationCacheName();
    var3.setUrl("hi!");
    org.jsecurity.realm.ldap.DefaultLdapContextFactory var9 = new org.jsecurity.realm.ldap.DefaultLdapContextFactory();
    var3.setLdapContextFactory((org.jsecurity.realm.ldap.LdapContextFactory)var9);
    var9.setAuthentication("org.jsecurity.authz.UnauthorizedException: org.jsecurity.session.ExpiredSessionException: ");
    var0.setLdapContextFactory((org.jsecurity.realm.ldap.LdapContextFactory)var9);
    var0.setSystemUsername("HashtableCache [2e460aa1-7db8-4a99-ad7a-a5b2ab41638e]");
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var6);

  }

  public void test5() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest7.test5");


    org.jsecurity.authz.SimpleAuthorizationInfo var0 = new org.jsecurity.authz.SimpleAuthorizationInfo();
    org.jsecurity.session.UnknownSessionException var5 = new org.jsecurity.session.UnknownSessionException("dd\uFFFD", (java.io.Serializable)100.0f);
    org.jsecurity.subject.SubjectException var6 = new org.jsecurity.subject.SubjectException("dd\uFFFD", (java.lang.Throwable)var5);
    org.jsecurity.io.SerializationException var7 = new org.jsecurity.io.SerializationException("", (java.lang.Throwable)var6);
    java.lang.Throwable[] var8 = var6.getSuppressed();
    java.util.Set var9 = org.jsecurity.util.CollectionUtils.asSet((java.lang.Object[])var8);
    var0.setStringPermissions(var9);
    org.jsecurity.authz.permission.WildcardPermissionResolver var11 = new org.jsecurity.authz.permission.WildcardPermissionResolver();
    org.jsecurity.authz.Permission var13 = var11.resolvePermission("hi!");
    var0.addObjectPermission(var13);
    org.jsecurity.authz.SimpleRole var15 = new org.jsecurity.authz.SimpleRole();
    org.jsecurity.authz.SimpleAuthorizationInfo var16 = new org.jsecurity.authz.SimpleAuthorizationInfo();
    var16.addRole("a2b823b1e72eae2b727289df8a00a89df8a0bab6ad8a89c4c5c7a9b62a270000");
    org.jsecurity.session.UnknownSessionException var23 = new org.jsecurity.session.UnknownSessionException("dd\uFFFD", (java.io.Serializable)100.0f);
    org.jsecurity.subject.SubjectException var24 = new org.jsecurity.subject.SubjectException("dd\uFFFD", (java.lang.Throwable)var23);
    org.jsecurity.io.SerializationException var25 = new org.jsecurity.io.SerializationException("", (java.lang.Throwable)var24);
    java.lang.Throwable[] var26 = var24.getSuppressed();
    java.util.Set var27 = org.jsecurity.util.CollectionUtils.asSet((java.lang.Object[])var26);
    var16.addRoles((java.util.Collection)var27);
    var15.addAll((java.util.Collection)var27);
    java.lang.String var30 = var15.getName();
    org.jsecurity.authz.permission.WildcardPermission var33 = new org.jsecurity.authz.permission.WildcardPermission("hi!", false);
    var15.add((org.jsecurity.authz.Permission)var33);
    org.jsecurity.codec.CodecException var37 = new org.jsecurity.codec.CodecException("dd\uFFFD");
    org.jsecurity.authc.ConcurrentAccessException var38 = new org.jsecurity.authc.ConcurrentAccessException("org.jsecurity.authz.UnauthorizedException: org.jsecurity.session.ExpiredSessionException: ", (java.lang.Throwable)var37);
    org.jsecurity.subject.SimplePrincipalCollection var40 = new org.jsecurity.subject.SimplePrincipalCollection((java.lang.Object)var37, "");
    org.jsecurity.authc.pam.FirstSuccessfulAuthenticationStrategy var41 = new org.jsecurity.authc.pam.FirstSuccessfulAuthenticationStrategy();
    org.jsecurity.authz.UnauthorizedException var43 = new org.jsecurity.authz.UnauthorizedException("org.jsecurity.config.ConfigurationException: dd\uFFFD");
    java.lang.Throwable[] var44 = var43.getSuppressed();
    java.util.List var45 = org.jsecurity.util.CollectionUtils.asList((java.lang.Object[])var44);
    org.jsecurity.authc.UsernamePasswordToken var46 = new org.jsecurity.authc.UsernamePasswordToken();
    java.lang.String var47 = var46.getUsername();
    java.net.InetAddress var48 = var46.getInetAddress();
    org.jsecurity.authc.AuthenticationInfo var49 = var41.beforeAllAttempts((java.util.Collection)var45, (org.jsecurity.authc.AuthenticationToken)var46);
    org.jsecurity.session.UnknownSessionException var54 = new org.jsecurity.session.UnknownSessionException("dd\uFFFD", (java.io.Serializable)100.0f);
    org.jsecurity.subject.SubjectException var55 = new org.jsecurity.subject.SubjectException("dd\uFFFD", (java.lang.Throwable)var54);
    org.jsecurity.io.SerializationException var56 = new org.jsecurity.io.SerializationException("", (java.lang.Throwable)var55);
    java.lang.Throwable[] var57 = var55.getSuppressed();
    java.util.Set var58 = org.jsecurity.util.CollectionUtils.asSet((java.lang.Object[])var57);
    org.jsecurity.authc.SimpleAccount var59 = new org.jsecurity.authc.SimpleAccount((org.jsecurity.subject.PrincipalCollection)var40, (java.lang.Object)var45, var58);
    var15.addAll((java.util.Collection)var58);
    var0.setRoles(var58);
    java.util.Set var62 = var0.getObjectPermissions();
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var8);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var9);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var13);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var26);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var27);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var30);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var44);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var45);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var47);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var48);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var49);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var57);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var58);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var62);

  }

  public void test6() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest7.test6");


    org.jsecurity.authc.credential.Sha256CredentialsMatcher var0 = new org.jsecurity.authc.credential.Sha256CredentialsMatcher();
    boolean var1 = var0.isStoredCredentialsHexEncoded();
    var0.setHashIterations(10);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var1 == true);

  }

  public void test7() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest7.test7");


    org.jsecurity.codec.CodecException var2 = new org.jsecurity.codec.CodecException("dd\uFFFD");
    org.jsecurity.authc.ConcurrentAccessException var3 = new org.jsecurity.authc.ConcurrentAccessException("org.jsecurity.authz.UnauthorizedException: org.jsecurity.session.ExpiredSessionException: ", (java.lang.Throwable)var2);
    org.jsecurity.subject.SimplePrincipalCollection var5 = new org.jsecurity.subject.SimplePrincipalCollection((java.lang.Object)var2, "");
    boolean var6 = var5.isEmpty();
    java.util.List var7 = var5.asList();
    org.jsecurity.authc.pam.ModularRealmAuthenticator var8 = new org.jsecurity.authc.pam.ModularRealmAuthenticator(var7);
    org.jsecurity.authc.pam.ModularAuthenticationStrategy var9 = var8.getModularAuthenticationStrategy();
    org.jsecurity.authc.pam.ModularAuthenticationStrategy var10 = var8.getModularAuthenticationStrategy();
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var6 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var7);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var9);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var10);

  }

  public void test8() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest7.test8");


    org.jsecurity.authc.pam.UnsupportedTokenException var0 = new org.jsecurity.authc.pam.UnsupportedTokenException();
    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      org.jsecurity.crypto.hash.Sha384Hash var1 = new org.jsecurity.crypto.hash.Sha384Hash((java.lang.Object)var0);
      fail("Expected exception of type org.jsecurity.codec.CodecException");
    } catch (org.jsecurity.codec.CodecException e) {
      // Expected exception.
    }

  }

  public void test9() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest7.test9");


    org.jsecurity.mgt.DefaultSecurityManager var0 = new org.jsecurity.mgt.DefaultSecurityManager();
    java.io.InputStream var2 = org.jsecurity.util.ClassUtils.getResourceAsStream("");
    java.lang.Object[] var3 = new java.lang.Object[] { var2};
    java.util.List var4 = org.jsecurity.util.CollectionUtils.asList(var3);
    org.jsecurity.authc.pam.ModularRealmAuthenticator var5 = new org.jsecurity.authc.pam.ModularRealmAuthenticator(var4);
    org.jsecurity.authc.pam.AllSuccessfulModularAuthenticationStrategy var6 = new org.jsecurity.authc.pam.AllSuccessfulModularAuthenticationStrategy();
    var5.setModularAuthenticationStrategy((org.jsecurity.authc.pam.ModularAuthenticationStrategy)var6);
    org.jsecurity.authz.SimpleAuthorizationInfo var8 = new org.jsecurity.authz.SimpleAuthorizationInfo();
    var8.addStringPermission("hi!");
    java.io.InputStream var12 = org.jsecurity.util.ClassUtils.getResourceAsStream("");
    java.lang.Object[] var13 = new java.lang.Object[] { var12};
    java.util.List var14 = org.jsecurity.util.CollectionUtils.asList(var13);
    var8.addRoles((java.util.Collection)var14);
    var5.setAuthenticationListeners((java.util.Collection)var14);
    var0.setSessionListeners((java.util.Collection)var14);
    org.jsecurity.authc.pam.ModularRealmAuthenticator var18 = new org.jsecurity.authc.pam.ModularRealmAuthenticator();
    org.jsecurity.authz.permission.InvalidPermissionStringException var21 = new org.jsecurity.authz.permission.InvalidPermissionStringException("", "dd\uFFFD");
    org.jsecurity.JSecurityException var23 = new org.jsecurity.JSecurityException("");
    org.jsecurity.authc.SimpleAuthenticationInfo var25 = new org.jsecurity.authc.SimpleAuthenticationInfo((java.lang.Object)var21, (java.lang.Object)"", "org.jsecurity.authz.UnauthorizedException: org.jsecurity.session.ExpiredSessionException: ");
    org.jsecurity.subject.PrincipalCollection var26 = var25.getPrincipals();
    var18.onLogout(var26);
    var0.setAuthenticator((org.jsecurity.authc.Authenticator)var18);
    org.jsecurity.codec.CodecException var31 = new org.jsecurity.codec.CodecException("dd\uFFFD");
    org.jsecurity.authc.ConcurrentAccessException var32 = new org.jsecurity.authc.ConcurrentAccessException("org.jsecurity.authz.UnauthorizedException: org.jsecurity.session.ExpiredSessionException: ", (java.lang.Throwable)var31);
    org.jsecurity.subject.SimplePrincipalCollection var34 = new org.jsecurity.subject.SimplePrincipalCollection((java.lang.Object)var31, "");
    org.jsecurity.authc.pam.FirstSuccessfulAuthenticationStrategy var35 = new org.jsecurity.authc.pam.FirstSuccessfulAuthenticationStrategy();
    org.jsecurity.authz.UnauthorizedException var37 = new org.jsecurity.authz.UnauthorizedException("org.jsecurity.config.ConfigurationException: dd\uFFFD");
    java.lang.Throwable[] var38 = var37.getSuppressed();
    java.util.List var39 = org.jsecurity.util.CollectionUtils.asList((java.lang.Object[])var38);
    org.jsecurity.authc.UsernamePasswordToken var40 = new org.jsecurity.authc.UsernamePasswordToken();
    java.lang.String var41 = var40.getUsername();
    java.net.InetAddress var42 = var40.getInetAddress();
    org.jsecurity.authc.AuthenticationInfo var43 = var35.beforeAllAttempts((java.util.Collection)var39, (org.jsecurity.authc.AuthenticationToken)var40);
    org.jsecurity.session.UnknownSessionException var48 = new org.jsecurity.session.UnknownSessionException("dd\uFFFD", (java.io.Serializable)100.0f);
    org.jsecurity.subject.SubjectException var49 = new org.jsecurity.subject.SubjectException("dd\uFFFD", (java.lang.Throwable)var48);
    org.jsecurity.io.SerializationException var50 = new org.jsecurity.io.SerializationException("", (java.lang.Throwable)var49);
    java.lang.Throwable[] var51 = var49.getSuppressed();
    java.util.Set var52 = org.jsecurity.util.CollectionUtils.asSet((java.lang.Object[])var51);
    org.jsecurity.authc.SimpleAccount var53 = new org.jsecurity.authc.SimpleAccount((org.jsecurity.subject.PrincipalCollection)var34, (java.lang.Object)var39, var52);
    java.io.InputStream var55 = org.jsecurity.util.ClassUtils.getResourceAsStream("");
    java.lang.Object[] var56 = new java.lang.Object[] { var55};
    java.util.List var57 = org.jsecurity.util.CollectionUtils.asList(var56);
    org.jsecurity.authc.pam.ModularRealmAuthenticator var58 = new org.jsecurity.authc.pam.ModularRealmAuthenticator(var57);
    org.jsecurity.subject.SimplePrincipalCollection var60 = new org.jsecurity.subject.SimplePrincipalCollection((java.util.Collection)var57, "org.jsecurity.authz.UnauthorizedException: org.jsecurity.session.ExpiredSessionException: ");
    org.jsecurity.io.ResourceException var64 = new org.jsecurity.io.ResourceException("hi!");
    org.jsecurity.authc.UnknownAccountException var65 = new org.jsecurity.authc.UnknownAccountException((java.lang.Throwable)var64);
    org.jsecurity.session.StoppedSessionException var66 = new org.jsecurity.session.StoppedSessionException("dd\uFFFD", (java.io.Serializable)var64);
    org.jsecurity.session.UnknownSessionException var67 = new org.jsecurity.session.UnknownSessionException("org.jsecurity.authz.UnauthorizedException: org.jsecurity.session.ExpiredSessionException: ", (java.lang.Throwable)var64);
    boolean var68 = var60.equals((java.lang.Object)var64);
    var34.addAll((org.jsecurity.subject.PrincipalCollection)var60);
    org.jsecurity.session.UnknownSessionException var74 = new org.jsecurity.session.UnknownSessionException("dd\uFFFD", (java.io.Serializable)100.0f);
    org.jsecurity.subject.SubjectException var75 = new org.jsecurity.subject.SubjectException("dd\uFFFD", (java.lang.Throwable)var74);
    org.jsecurity.io.SerializationException var76 = new org.jsecurity.io.SerializationException("", (java.lang.Throwable)var75);
    java.lang.Throwable[] var77 = var75.getSuppressed();
    java.util.List var78 = org.jsecurity.util.CollectionUtils.asList((java.lang.Object[])var77);
    boolean var79 = var0.isPermittedAll((org.jsecurity.subject.PrincipalCollection)var34, (java.util.Collection)var78);
    org.jsecurity.subject.DelegatingSubject var80 = new org.jsecurity.subject.DelegatingSubject((org.jsecurity.mgt.SecurityManager)var0);
    boolean var82 = var80.hasRole("org.jsecurity.authc.IncorrectCredentialsException: \u0000\u0000");
    org.jsecurity.session.Session var84 = var80.getSession(false);
    org.jsecurity.authc.pam.AllSuccessfulModularAuthenticationStrategy var85 = new org.jsecurity.authc.pam.AllSuccessfulModularAuthenticationStrategy();
    char[] var87 = new char[] { };
    org.jsecurity.authc.UsernamePasswordToken var89 = new org.jsecurity.authc.UsernamePasswordToken("hi!", var87, true);
    org.jsecurity.authc.SimpleAccount var90 = new org.jsecurity.authc.SimpleAccount();
    var90.setCredentialsExpired(false);
    boolean var93 = var90.isLocked();
    org.jsecurity.authc.AuthenticationInfo var94 = var85.afterAllAttempts((org.jsecurity.authc.AuthenticationToken)var89, (org.jsecurity.authc.AuthenticationInfo)var90);
    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      var80.login((org.jsecurity.authc.AuthenticationToken)var89);
      fail("Expected exception of type org.jsecurity.authc.AuthenticationException");
    } catch (org.jsecurity.authc.AuthenticationException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var2);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var3);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var4);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var12);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var13);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var14);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var26);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var38);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var39);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var41);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var42);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var43);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var51);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var52);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var55);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var56);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var57);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var68 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var77);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var78);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var79 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var82 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var84);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var87);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var93 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var94);

  }

  public void test10() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest7.test10");


    org.jsecurity.realm.activedirectory.ActiveDirectoryRealm var0 = new org.jsecurity.realm.activedirectory.ActiveDirectoryRealm();
    org.jsecurity.authc.credential.Sha256CredentialsMatcher var1 = new org.jsecurity.authc.credential.Sha256CredentialsMatcher();
    var0.setCredentialsMatcher((org.jsecurity.authc.credential.CredentialsMatcher)var1);
    java.lang.String var3 = var0.getAuthorizationCacheName();
    var0.setUrl("hi!");
    org.jsecurity.realm.ldap.DefaultLdapContextFactory var6 = new org.jsecurity.realm.ldap.DefaultLdapContextFactory();
    var0.setLdapContextFactory((org.jsecurity.realm.ldap.LdapContextFactory)var6);
    var6.setAuthentication("org.jsecurity.authz.UnauthorizedException: org.jsecurity.session.ExpiredSessionException: ");
    var6.setSystemUsername("org.jsecurity.config.ConfigurationException: dd\uFFFD");
    var6.setSystemPassword("orgjsecurityauthcCredentialsException783ccd3148a842dd890fdf885a7baafAA==");
    var6.setPrincipalSuffix("org.jsecurity.authz.UnauthorizedException: org.jsecurity.session.ExpiredSessionException: ");
    var6.setPrincipalSuffix("3aaa5efd-5a5b-4a04-b3d7-42cd5249d0e9");
    var6.setSearchBase("org.jsecurity.realm.SimpleAccountRealm-284-authorization");
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var3);

  }

  public void test11() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest7.test11");


    boolean var1 = org.jsecurity.util.StringUtils.hasText("6c9a3d8a-dfcf-4bc4-9aad-6adc8cd8bee3");
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var1 == true);

  }

  public void test12() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest7.test12");


    org.jsecurity.mgt.DefaultSecurityManager var0 = new org.jsecurity.mgt.DefaultSecurityManager();
    java.io.InputStream var2 = org.jsecurity.util.ClassUtils.getResourceAsStream("");
    java.lang.Object[] var3 = new java.lang.Object[] { var2};
    java.util.List var4 = org.jsecurity.util.CollectionUtils.asList(var3);
    org.jsecurity.authc.pam.ModularRealmAuthenticator var5 = new org.jsecurity.authc.pam.ModularRealmAuthenticator(var4);
    org.jsecurity.authc.pam.AllSuccessfulModularAuthenticationStrategy var6 = new org.jsecurity.authc.pam.AllSuccessfulModularAuthenticationStrategy();
    var5.setModularAuthenticationStrategy((org.jsecurity.authc.pam.ModularAuthenticationStrategy)var6);
    org.jsecurity.authz.SimpleAuthorizationInfo var8 = new org.jsecurity.authz.SimpleAuthorizationInfo();
    var8.addStringPermission("hi!");
    java.io.InputStream var12 = org.jsecurity.util.ClassUtils.getResourceAsStream("");
    java.lang.Object[] var13 = new java.lang.Object[] { var12};
    java.util.List var14 = org.jsecurity.util.CollectionUtils.asList(var13);
    var8.addRoles((java.util.Collection)var14);
    var5.setAuthenticationListeners((java.util.Collection)var14);
    var0.setSessionListeners((java.util.Collection)var14);
    org.jsecurity.realm.text.TextConfigurationRealm var18 = new org.jsecurity.realm.text.TextConfigurationRealm();
    java.io.InputStream var20 = org.jsecurity.util.ClassUtils.getResourceAsStream("");
    java.lang.Object[] var21 = new java.lang.Object[] { var20};
    java.util.List var22 = org.jsecurity.util.CollectionUtils.asList(var21);
    org.jsecurity.authc.pam.ModularRealmAuthenticator var23 = new org.jsecurity.authc.pam.ModularRealmAuthenticator(var22);
    org.jsecurity.subject.SimplePrincipalCollection var25 = new org.jsecurity.subject.SimplePrincipalCollection((java.util.Collection)var22, "org.jsecurity.authz.UnauthorizedException: org.jsecurity.session.ExpiredSessionException: ");
    org.jsecurity.session.UnknownSessionException var30 = new org.jsecurity.session.UnknownSessionException("dd\uFFFD", (java.io.Serializable)100.0f);
    org.jsecurity.session.SessionException var32 = new org.jsecurity.session.SessionException("dd\uFFFD", (java.lang.Throwable)var30, (java.io.Serializable)0);
    org.jsecurity.session.SessionException var33 = new org.jsecurity.session.SessionException("dd\uFFFD", (java.lang.Throwable)var30);
    var25.add((java.lang.Object)var33, "org.jsecurity.config.ConfigurationException: dd\uFFFD");
    var18.onLogout((org.jsecurity.subject.PrincipalCollection)var25);
    org.jsecurity.authc.pam.FirstSuccessfulAuthenticationStrategy var37 = new org.jsecurity.authc.pam.FirstSuccessfulAuthenticationStrategy();
    org.jsecurity.authz.UnauthorizedException var39 = new org.jsecurity.authz.UnauthorizedException("org.jsecurity.config.ConfigurationException: dd\uFFFD");
    java.lang.Throwable[] var40 = var39.getSuppressed();
    java.util.List var41 = org.jsecurity.util.CollectionUtils.asList((java.lang.Object[])var40);
    org.jsecurity.authc.UsernamePasswordToken var42 = new org.jsecurity.authc.UsernamePasswordToken();
    java.lang.String var43 = var42.getUsername();
    java.net.InetAddress var44 = var42.getInetAddress();
    org.jsecurity.authc.AuthenticationInfo var45 = var37.beforeAllAttempts((java.util.Collection)var41, (org.jsecurity.authc.AuthenticationToken)var42);
    boolean[] var46 = var0.hasRoles((org.jsecurity.subject.PrincipalCollection)var25, var41);
    org.jsecurity.subject.Subject var47 = var0.getSubject();
    org.jsecurity.realm.text.TextConfigurationRealm var49 = new org.jsecurity.realm.text.TextConfigurationRealm();
    java.io.InputStream var51 = org.jsecurity.util.ClassUtils.getResourceAsStream("");
    java.lang.Object[] var52 = new java.lang.Object[] { var51};
    java.util.List var53 = org.jsecurity.util.CollectionUtils.asList(var52);
    org.jsecurity.authc.pam.ModularRealmAuthenticator var54 = new org.jsecurity.authc.pam.ModularRealmAuthenticator(var53);
    org.jsecurity.subject.SimplePrincipalCollection var56 = new org.jsecurity.subject.SimplePrincipalCollection((java.util.Collection)var53, "org.jsecurity.authz.UnauthorizedException: org.jsecurity.session.ExpiredSessionException: ");
    org.jsecurity.session.UnknownSessionException var61 = new org.jsecurity.session.UnknownSessionException("dd\uFFFD", (java.io.Serializable)100.0f);
    org.jsecurity.session.SessionException var63 = new org.jsecurity.session.SessionException("dd\uFFFD", (java.lang.Throwable)var61, (java.io.Serializable)0);
    org.jsecurity.session.SessionException var64 = new org.jsecurity.session.SessionException("dd\uFFFD", (java.lang.Throwable)var61);
    var56.add((java.lang.Object)var64, "org.jsecurity.config.ConfigurationException: dd\uFFFD");
    var49.onLogout((org.jsecurity.subject.PrincipalCollection)var56);
    java.util.Set var69 = org.jsecurity.util.PermissionUtils.toPermissionStrings("org.jsecurity.config.ConfigurationException: dd\uFFFD");
    org.jsecurity.authz.SimpleAuthorizationInfo var70 = new org.jsecurity.authz.SimpleAuthorizationInfo(var69);
    org.jsecurity.authz.SimpleAuthorizingAccount var71 = new org.jsecurity.authz.SimpleAuthorizingAccount((org.jsecurity.subject.PrincipalCollection)var56, (java.lang.Object)var69);
    org.jsecurity.session.StoppedSessionException var72 = new org.jsecurity.session.StoppedSessionException("org.jsecurity.realm.SimpleAccountRealm-55-authorization", (java.io.Serializable)var56);
    var0.logout((org.jsecurity.subject.PrincipalCollection)var56);
    org.jsecurity.subject.DelegatingSubject var74 = new org.jsecurity.subject.DelegatingSubject((org.jsecurity.mgt.SecurityManager)var0);
    org.jsecurity.subject.Subject var75 = var0.getSubject();
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var2);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var3);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var4);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var12);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var13);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var14);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var20);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var21);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var22);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var40);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var41);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var43);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var44);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var45);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var46);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var47);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var51);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var52);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var53);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var69);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var75);

  }

  public void test13() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest7.test13");


    org.jsecurity.session.mgt.eis.MemorySessionDAO var0 = new org.jsecurity.session.mgt.eis.MemorySessionDAO();
    org.jsecurity.cache.Cache var1 = var0.getActiveSessionsCache();
    org.jsecurity.session.mgt.SimpleSession var2 = new org.jsecurity.session.mgt.SimpleSession();
    var2.setTimeout((-1L));
    org.jsecurity.session.mgt.SimpleSession var5 = new org.jsecurity.session.mgt.SimpleSession();
    java.util.Date var6 = var5.getLastAccessTime();
    var2.setLastAccessTime(var6);
    var0.update((org.jsecurity.session.Session)var2);
    var0.setActiveSessionsCacheName("hi!");
    java.lang.String var11 = var0.getActiveSessionsCacheName();
    org.jsecurity.session.mgt.SimpleSession var12 = new org.jsecurity.session.mgt.SimpleSession();
    java.io.Serializable var13 = var0.create((org.jsecurity.session.Session)var12);
    org.jsecurity.session.mgt.eis.MemorySessionDAO var14 = new org.jsecurity.session.mgt.eis.MemorySessionDAO();
    org.jsecurity.cache.Cache var15 = var14.getActiveSessionsCache();
    org.jsecurity.cache.CacheManager var16 = var14.getCacheManager();
    org.jsecurity.cache.HashtableCacheManager var17 = new org.jsecurity.cache.HashtableCacheManager();
    org.jsecurity.cache.Cache var19 = var17.getCache("\u0000\u0000");
    var14.setActiveSessionsCache(var19);
    java.io.InputStream var22 = org.jsecurity.util.ClassUtils.getResourceAsStream("");
    java.lang.Object[] var23 = new java.lang.Object[] { var22};
    java.util.List var24 = org.jsecurity.util.CollectionUtils.asList(var23);
    org.jsecurity.authc.pam.ModularRealmAuthenticator var25 = new org.jsecurity.authc.pam.ModularRealmAuthenticator(var24);
    org.jsecurity.authc.pam.AllSuccessfulModularAuthenticationStrategy var26 = new org.jsecurity.authc.pam.AllSuccessfulModularAuthenticationStrategy();
    var25.setModularAuthenticationStrategy((org.jsecurity.authc.pam.ModularAuthenticationStrategy)var26);
    org.jsecurity.authz.SimpleAuthorizationInfo var28 = new org.jsecurity.authz.SimpleAuthorizationInfo();
    var28.addStringPermission("hi!");
    java.io.InputStream var32 = org.jsecurity.util.ClassUtils.getResourceAsStream("");
    java.lang.Object[] var33 = new java.lang.Object[] { var32};
    java.util.List var34 = org.jsecurity.util.CollectionUtils.asList(var33);
    var28.addRoles((java.util.Collection)var34);
    var25.setAuthenticationListeners((java.util.Collection)var34);
    org.jsecurity.realm.activedirectory.ActiveDirectoryRealm var37 = new org.jsecurity.realm.activedirectory.ActiveDirectoryRealm();
    var37.setPrincipalSuffix("");
    var25.setRealm((org.jsecurity.realm.Realm)var37);
    org.jsecurity.cache.HashtableCacheManager var41 = new org.jsecurity.cache.HashtableCacheManager();
    org.jsecurity.cache.Cache var43 = var41.getCache("\u0000\u0000");
    var37.setAuthorizationCache(var43);
    var14.setActiveSessionsCache(var43);
    org.jsecurity.session.mgt.SimpleSession var46 = new org.jsecurity.session.mgt.SimpleSession();
    java.io.Serializable var47 = var14.create((org.jsecurity.session.Session)var46);
    org.jsecurity.cache.HashtableCacheManager var48 = new org.jsecurity.cache.HashtableCacheManager();
    org.jsecurity.cache.Cache var50 = var48.getCache("\u0000\u0000");
    org.jsecurity.cache.Cache var52 = var48.getCache("ZGT/");
    var14.setCacheManager((org.jsecurity.cache.CacheManager)var48);
    org.jsecurity.cache.ehcache.EhCacheManager var54 = new org.jsecurity.cache.ehcache.EhCacheManager();
    net.sf.ehcache.CacheManager var55 = var54.getCacheManager();
    var54.setCacheManagerConfigFile("org.jsecurity.authz.UnauthorizedException: org.jsecurity.session.ExpiredSessionException: ");
    var14.setCacheManager((org.jsecurity.cache.CacheManager)var54);
    java.lang.String var59 = var54.getCacheManagerConfigFile();
    java.lang.String var60 = var54.getCacheManagerConfigFile();
    var0.setCacheManager((org.jsecurity.cache.CacheManager)var54);
    var0.setActiveSessionsCacheName("{\uFFFD\uFFFD\uFFFD\uFFFD\u001B\uFFFD^\uFFFD\uFFFD\u01DA\uFFFD\u001A~\uFFFD}\uFFFD\uFFFDO\u001C");
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var1);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var6);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var11 + "' != '" + "hi!"+ "'", var11.equals("hi!"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var13 + "' != '" + "c89c3ada-c7c4-445a-9ea8-a09ca710f95c"+ "'", var13.equals("c89c3ada-c7c4-445a-9ea8-a09ca710f95c"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var15);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var16);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var19);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var22);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var23);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var24);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var32);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var33);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var34);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var43);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var47 + "' != '" + "4bea27b4-a10d-4068-91ce-eec75517f6c4"+ "'", var47.equals("4bea27b4-a10d-4068-91ce-eec75517f6c4"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var50);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var52);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var55);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var59 + "' != '" + "org.jsecurity.authz.UnauthorizedException: org.jsecurity.session.ExpiredSessionException: "+ "'", var59.equals("org.jsecurity.authz.UnauthorizedException: org.jsecurity.session.ExpiredSessionException: "));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var60 + "' != '" + "org.jsecurity.authz.UnauthorizedException: org.jsecurity.session.ExpiredSessionException: "+ "'", var60.equals("org.jsecurity.authz.UnauthorizedException: org.jsecurity.session.ExpiredSessionException: "));

  }

  public void test14() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest7.test14");


    org.jsecurity.session.mgt.DelegatingSession var0 = new org.jsecurity.session.mgt.DelegatingSession();
    java.io.Serializable var1 = var0.getId();
    org.jsecurity.session.mgt.SessionManager var2 = var0.getSessionManager();
    org.jsecurity.session.mgt.SimpleSession var3 = new org.jsecurity.session.mgt.SimpleSession();
    org.jsecurity.session.UnknownSessionException var7 = new org.jsecurity.session.UnknownSessionException("dd\uFFFD", (java.io.Serializable)100.0f);
    org.jsecurity.session.SessionException var9 = new org.jsecurity.session.SessionException("dd\uFFFD", (java.lang.Throwable)var7, (java.io.Serializable)0);
    org.jsecurity.authc.AccountException var10 = new org.jsecurity.authc.AccountException((java.lang.Throwable)var7);
    var3.setId((java.io.Serializable)var7);
    var3.setTimeout((-1L));
    org.jsecurity.session.mgt.SimpleSession var14 = new org.jsecurity.session.mgt.SimpleSession();
    var14.setTimeout((-1L));
    org.jsecurity.session.mgt.SimpleSession var17 = new org.jsecurity.session.mgt.SimpleSession();
    var17.setTimeout((-1L));
    org.jsecurity.session.mgt.SimpleSession var20 = new org.jsecurity.session.mgt.SimpleSession();
    java.util.Date var21 = var20.getLastAccessTime();
    var17.setLastAccessTime(var21);
    org.jsecurity.session.mgt.SimpleSession var23 = new org.jsecurity.session.mgt.SimpleSession();
    java.util.Date var24 = var23.getLastAccessTime();
    var17.setStopTimestamp(var24);
    var14.setStartTimestamp(var24);
    var3.setLastAccessTime(var24);
    var0.setId((java.io.Serializable)var24);
    java.io.Serializable var29 = var0.getId();
    org.jsecurity.session.mgt.DefaultSessionManager var30 = new org.jsecurity.session.mgt.DefaultSessionManager();
    org.jsecurity.session.mgt.quartz.QuartzSessionValidationScheduler var31 = new org.jsecurity.session.mgt.quartz.QuartzSessionValidationScheduler();
    boolean var32 = var31.isEnabled();
    var31.enableSessionValidation();
    var30.setSessionValidationScheduler((org.jsecurity.session.mgt.SessionValidationScheduler)var31);
    var0.setSessionManager((org.jsecurity.session.mgt.SessionManager)var30);
    org.jsecurity.authz.permission.WildcardPermission var38 = new org.jsecurity.authz.permission.WildcardPermission("\uFFFD\uFFFD#\uFFFD\uFFFD.\uFFFD+rr\uFFFD\u07CA\u0000\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\u01E9\uFFFD*'\u0000\u0000", false);
    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      var30.stop((java.io.Serializable)"\uFFFD\uFFFD#\uFFFD\uFFFD.\uFFFD+rr\uFFFD\u07CA\u0000\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\u01E9\uFFFD*'\u0000\u0000");
      fail("Expected exception of type org.jsecurity.session.UnknownSessionException");
    } catch (org.jsecurity.session.UnknownSessionException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var1);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var2);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var21);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var24);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var29);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var32 == false);

  }

  public void test15() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest7.test15");


    org.jsecurity.session.mgt.SimpleSession var0 = new org.jsecurity.session.mgt.SimpleSession();
    var0.setTimeout((-1L));
    org.jsecurity.session.mgt.SimpleSession var3 = new org.jsecurity.session.mgt.SimpleSession();
    java.util.Date var4 = var3.getLastAccessTime();
    var0.setLastAccessTime(var4);
    org.jsecurity.session.mgt.SimpleSession var6 = new org.jsecurity.session.mgt.SimpleSession();
    java.util.Date var7 = var6.getLastAccessTime();
    var0.setStopTimestamp(var7);
    java.net.InetAddress var9 = var0.getHostAddress();
    var0.setTimeout(100L);
    org.jsecurity.session.mgt.SimpleSession var12 = new org.jsecurity.session.mgt.SimpleSession();
    var12.setTimeout((-1L));
    org.jsecurity.session.mgt.SimpleSession var15 = new org.jsecurity.session.mgt.SimpleSession();
    java.util.Date var16 = var15.getLastAccessTime();
    var12.setLastAccessTime(var16);
    org.jsecurity.session.UnknownSessionException var22 = new org.jsecurity.session.UnknownSessionException("dd\uFFFD", (java.io.Serializable)100.0f);
    org.jsecurity.subject.SubjectException var23 = new org.jsecurity.subject.SubjectException("dd\uFFFD", (java.lang.Throwable)var22);
    org.jsecurity.io.SerializationException var24 = new org.jsecurity.io.SerializationException("", (java.lang.Throwable)var23);
    java.lang.Throwable[] var25 = var23.getSuppressed();
    java.lang.Throwable[] var26 = var23.getSuppressed();
    org.jsecurity.authz.SimpleAuthorizationInfo var29 = new org.jsecurity.authz.SimpleAuthorizationInfo();
    var29.addRole("a2b823b1e72eae2b727289df8a00a89df8a0bab6ad8a89c4c5c7a9b62a270000");
    org.jsecurity.session.UnknownSessionException var36 = new org.jsecurity.session.UnknownSessionException("dd\uFFFD", (java.io.Serializable)100.0f);
    org.jsecurity.subject.SubjectException var37 = new org.jsecurity.subject.SubjectException("dd\uFFFD", (java.lang.Throwable)var36);
    org.jsecurity.io.SerializationException var38 = new org.jsecurity.io.SerializationException("", (java.lang.Throwable)var37);
    java.lang.Throwable[] var39 = var37.getSuppressed();
    java.util.Set var40 = org.jsecurity.util.CollectionUtils.asSet((java.lang.Object[])var39);
    var29.addRoles((java.util.Collection)var40);
    java.io.InputStream var43 = org.jsecurity.util.ClassUtils.getResourceAsStream("");
    java.lang.Object[] var44 = new java.lang.Object[] { var43};
    java.util.List var45 = org.jsecurity.util.CollectionUtils.asList(var44);
    org.jsecurity.authc.pam.ModularRealmAuthenticator var46 = new org.jsecurity.authc.pam.ModularRealmAuthenticator(var45);
    org.jsecurity.subject.SimplePrincipalCollection var48 = new org.jsecurity.subject.SimplePrincipalCollection((java.util.Collection)var45, "org.jsecurity.authz.UnauthorizedException: org.jsecurity.session.ExpiredSessionException: ");
    org.jsecurity.session.UnknownSessionException var53 = new org.jsecurity.session.UnknownSessionException("dd\uFFFD", (java.io.Serializable)100.0f);
    org.jsecurity.session.SessionException var55 = new org.jsecurity.session.SessionException("dd\uFFFD", (java.lang.Throwable)var53, (java.io.Serializable)0);
    org.jsecurity.session.SessionException var56 = new org.jsecurity.session.SessionException("dd\uFFFD", (java.lang.Throwable)var53);
    var48.add((java.lang.Object)var56, "org.jsecurity.config.ConfigurationException: dd\uFFFD");
    java.util.Set var59 = var48.asSet();
    org.jsecurity.authz.SimpleAuthorizingAccount var60 = new org.jsecurity.authz.SimpleAuthorizingAccount((java.lang.Object)var26, (java.lang.Object)"\u0000\u0000\u0000", "\u0000\u0000\u0000", var40, var59);
    java.lang.Object var61 = var12.removeAttribute((java.lang.Object)var40);
    var12.validate();
    java.util.Date var63 = var12.getLastAccessTime();
    var0.setStopTimestamp(var63);
    org.jsecurity.session.mgt.SimpleSession var66 = new org.jsecurity.session.mgt.SimpleSession();
    var66.setTimeout((-1L));
    org.jsecurity.session.mgt.SimpleSession var69 = new org.jsecurity.session.mgt.SimpleSession();
    java.util.Date var70 = var69.getLastAccessTime();
    var66.setLastAccessTime(var70);
    org.jsecurity.session.mgt.SimpleSession var72 = new org.jsecurity.session.mgt.SimpleSession();
    java.util.Date var73 = var72.getLastAccessTime();
    var66.setStopTimestamp(var73);
    java.net.InetAddress var75 = var66.getHostAddress();
    org.jsecurity.session.InvalidSessionException var76 = new org.jsecurity.session.InvalidSessionException("\u0000\u0000\u0000", (java.io.Serializable)var66);
    java.util.Collection var77 = var66.getAttributeKeys();
    org.jsecurity.authc.credential.Md5CredentialsMatcher var78 = new org.jsecurity.authc.credential.Md5CredentialsMatcher();
    boolean var79 = var78.isHashSalted();
    boolean var80 = var78.isHashSalted();
    int var81 = var78.getHashIterations();
    var0.setAttribute((java.lang.Object)var66, (java.lang.Object)var78);
    boolean var83 = var78.isStoredCredentialsHexEncoded();
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var4);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var7);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var9);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var16);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var25);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var26);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var39);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var40);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var43);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var44);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var45);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var59);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var61);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var63);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var70);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var73);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var75);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var77);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var79 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var80 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var81 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var83 == true);

  }

  public void test16() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest7.test16");


    org.jsecurity.authz.permission.InvalidPermissionStringException var2 = new org.jsecurity.authz.permission.InvalidPermissionStringException("", "dd\uFFFD");
    org.jsecurity.JSecurityException var4 = new org.jsecurity.JSecurityException("");
    org.jsecurity.authc.SimpleAuthenticationInfo var6 = new org.jsecurity.authc.SimpleAuthenticationInfo((java.lang.Object)var2, (java.lang.Object)"", "org.jsecurity.authz.UnauthorizedException: org.jsecurity.session.ExpiredSessionException: ");
    org.jsecurity.subject.PrincipalCollection var7 = var6.getPrincipals();
    org.jsecurity.session.UnknownSessionException var11 = new org.jsecurity.session.UnknownSessionException("dd\uFFFD", (java.io.Serializable)100.0f);
    org.jsecurity.session.SessionException var13 = new org.jsecurity.session.SessionException("dd\uFFFD", (java.lang.Throwable)var11, (java.io.Serializable)0);
    org.jsecurity.authc.SimpleAccount var14 = new org.jsecurity.authc.SimpleAccount(var7, (java.lang.Object)var13);
    org.jsecurity.io.IniResource var15 = new org.jsecurity.io.IniResource();
    java.util.Map var16 = var15.getSections();
    java.lang.String var17 = var15.getCharsetName();
    org.jsecurity.config.ReflectionBuilder var18 = new org.jsecurity.config.ReflectionBuilder();
    org.jsecurity.io.IniResource var19 = new org.jsecurity.io.IniResource();
    java.util.Map var20 = var19.getSections();
    var18.setObjects(var20);
    org.jsecurity.io.IniResource var22 = new org.jsecurity.io.IniResource();
    java.util.Map var23 = var22.getSections();
    java.util.Map var24 = var18.buildObjects(var23);
    var15.setSections(var24);
    org.jsecurity.realm.activedirectory.ActiveDirectoryRealm var26 = new org.jsecurity.realm.activedirectory.ActiveDirectoryRealm();
    org.jsecurity.authc.credential.Sha256CredentialsMatcher var27 = new org.jsecurity.authc.credential.Sha256CredentialsMatcher();
    var26.setCredentialsMatcher((org.jsecurity.authc.credential.CredentialsMatcher)var27);
    java.lang.String var29 = var26.getAuthorizationCacheName();
    var26.setUrl("hi!");
    org.jsecurity.realm.ldap.DefaultLdapContextFactory var32 = new org.jsecurity.realm.ldap.DefaultLdapContextFactory();
    var26.setLdapContextFactory((org.jsecurity.realm.ldap.LdapContextFactory)var32);
    org.jsecurity.config.ReflectionBuilder var34 = new org.jsecurity.config.ReflectionBuilder();
    org.jsecurity.io.IniResource var35 = new org.jsecurity.io.IniResource();
    var35.setCharsetName("org.jsecurity.authz.UnauthorizedException: org.jsecurity.session.ExpiredSessionException: ");
    java.util.Map var38 = var35.getSections();
    java.util.Map var39 = var34.buildObjects(var38);
    org.jsecurity.config.ReflectionBuilder var40 = new org.jsecurity.config.ReflectionBuilder();
    org.jsecurity.io.IniResource var41 = new org.jsecurity.io.IniResource();
    var41.setCharsetName("org.jsecurity.authz.UnauthorizedException: org.jsecurity.session.ExpiredSessionException: ");
    java.util.Map var44 = var41.getSections();
    java.util.Map var45 = var40.buildObjects(var44);
    java.util.Map var46 = var34.buildObjects(var45);
    java.util.Map var47 = var34.getObjects();
    var32.setAdditionalEnvironment(var47);
    org.jsecurity.config.ReflectionBuilder var49 = new org.jsecurity.config.ReflectionBuilder();
    org.jsecurity.io.IniResource var50 = new org.jsecurity.io.IniResource();
    java.util.Map var51 = var50.getSections();
    var49.setObjects(var51);
    org.jsecurity.realm.activedirectory.ActiveDirectoryRealm var53 = new org.jsecurity.realm.activedirectory.ActiveDirectoryRealm();
    var53.init();
    var53.init();
    org.jsecurity.config.ReflectionBuilder var56 = new org.jsecurity.config.ReflectionBuilder();
    org.jsecurity.config.ReflectionBuilder var57 = new org.jsecurity.config.ReflectionBuilder();
    org.jsecurity.io.IniResource var58 = new org.jsecurity.io.IniResource();
    var58.setCharsetName("org.jsecurity.authz.UnauthorizedException: org.jsecurity.session.ExpiredSessionException: ");
    java.util.Map var61 = var58.getSections();
    java.util.Map var62 = var57.buildObjects(var61);
    org.jsecurity.config.ReflectionBuilder var63 = new org.jsecurity.config.ReflectionBuilder();
    org.jsecurity.io.IniResource var64 = new org.jsecurity.io.IniResource();
    var64.setCharsetName("org.jsecurity.authz.UnauthorizedException: org.jsecurity.session.ExpiredSessionException: ");
    java.util.Map var67 = var64.getSections();
    java.util.Map var68 = var63.buildObjects(var67);
    java.util.Map var69 = var57.buildObjects(var68);
    java.util.Map var70 = var56.buildObjects(var69);
    var53.setGroupRolesMap(var70);
    var49.setObjects(var70);
    org.jsecurity.config.ReflectionBuilder var73 = new org.jsecurity.config.ReflectionBuilder(var70);
    var32.setAdditionalEnvironment(var70);
    var15.setSections(var70);
    java.lang.String var76 = var15.getCharsetName();
    org.jsecurity.authc.SimpleAuthenticationInfo var77 = new org.jsecurity.authc.SimpleAuthenticationInfo(var7, (java.lang.Object)var15);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var7);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var16);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var17);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var20);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var23);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var24);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var29);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var38);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var39);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var44);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var45);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var46);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var47);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var51);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var61);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var62);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var67);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var68);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var69);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var70);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var76);

  }

  public void test17() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest7.test17");


    org.jsecurity.session.ExpiredSessionException var1 = new org.jsecurity.session.ExpiredSessionException("2e460aa1-7db8-4a99-ad7a-a5b2ab41638e");
    org.jsecurity.codec.CodecException var2 = new org.jsecurity.codec.CodecException((java.lang.Throwable)var1);

  }

  public void test18() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest7.test18");


    org.jsecurity.session.UnknownSessionException var1 = new org.jsecurity.session.UnknownSessionException("7a2fba67-91ca-4400-8590-14c76f9ac1ac");

  }

  public void test19() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest7.test19");


    org.jsecurity.authc.pam.AtLeastOneSuccessfulModularAuthenticationStrategy var0 = new org.jsecurity.authc.pam.AtLeastOneSuccessfulModularAuthenticationStrategy();
    org.jsecurity.authc.pam.AllSuccessfulModularAuthenticationStrategy var2 = new org.jsecurity.authc.pam.AllSuccessfulModularAuthenticationStrategy();
    char[] var4 = new char[] { };
    org.jsecurity.authc.UsernamePasswordToken var6 = new org.jsecurity.authc.UsernamePasswordToken("hi!", var4, true);
    org.jsecurity.authc.SimpleAccount var7 = new org.jsecurity.authc.SimpleAccount();
    var7.setCredentialsExpired(false);
    boolean var10 = var7.isLocked();
    org.jsecurity.authc.AuthenticationInfo var11 = var2.afterAllAttempts((org.jsecurity.authc.AuthenticationToken)var6, (org.jsecurity.authc.AuthenticationInfo)var7);
    char[] var14 = new char[] { };
    org.jsecurity.authc.UsernamePasswordToken var16 = new org.jsecurity.authc.UsernamePasswordToken("hi!", var14, true);
    org.jsecurity.authc.UsernamePasswordToken var17 = new org.jsecurity.authc.UsernamePasswordToken("\u0000\u0000", var14);
    var6.setPassword(var14);
    org.jsecurity.authc.UsernamePasswordToken var19 = new org.jsecurity.authc.UsernamePasswordToken("\u0000\u0000\u0000", var14);
    org.jsecurity.realm.text.TextConfigurationRealm var20 = new org.jsecurity.realm.text.TextConfigurationRealm();
    java.io.InputStream var22 = org.jsecurity.util.ClassUtils.getResourceAsStream("");
    java.lang.Object[] var23 = new java.lang.Object[] { var22};
    java.util.List var24 = org.jsecurity.util.CollectionUtils.asList(var23);
    org.jsecurity.authc.pam.ModularRealmAuthenticator var25 = new org.jsecurity.authc.pam.ModularRealmAuthenticator(var24);
    org.jsecurity.subject.SimplePrincipalCollection var27 = new org.jsecurity.subject.SimplePrincipalCollection((java.util.Collection)var24, "org.jsecurity.authz.UnauthorizedException: org.jsecurity.session.ExpiredSessionException: ");
    org.jsecurity.session.UnknownSessionException var32 = new org.jsecurity.session.UnknownSessionException("dd\uFFFD", (java.io.Serializable)100.0f);
    org.jsecurity.session.SessionException var34 = new org.jsecurity.session.SessionException("dd\uFFFD", (java.lang.Throwable)var32, (java.io.Serializable)0);
    org.jsecurity.session.SessionException var35 = new org.jsecurity.session.SessionException("dd\uFFFD", (java.lang.Throwable)var32);
    var27.add((java.lang.Object)var35, "org.jsecurity.config.ConfigurationException: dd\uFFFD");
    var20.onLogout((org.jsecurity.subject.PrincipalCollection)var27);
    org.jsecurity.authc.ExpiredCredentialsException var40 = new org.jsecurity.authc.ExpiredCredentialsException();
    org.jsecurity.session.ExpiredSessionException var41 = new org.jsecurity.session.ExpiredSessionException("", (java.lang.Throwable)var40);
    java.lang.Throwable[] var42 = var41.getSuppressed();
    org.jsecurity.io.ResourceException var43 = new org.jsecurity.io.ResourceException((java.lang.Throwable)var41);
    org.jsecurity.authc.SimpleAuthenticationInfo var44 = new org.jsecurity.authc.SimpleAuthenticationInfo((org.jsecurity.subject.PrincipalCollection)var27, (java.lang.Object)var41);
    org.jsecurity.authc.AuthenticationInfo var45 = var0.afterAllAttempts((org.jsecurity.authc.AuthenticationToken)var19, (org.jsecurity.authc.AuthenticationInfo)var44);
    java.lang.Object var46 = var44.getCredentials();
    org.jsecurity.subject.PrincipalCollection var47 = var44.getPrincipals();
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var4);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var10 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var11);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var14);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var22);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var23);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var24);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var42);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var45);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var46);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var47);

  }

  public void test20() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest7.test20");


    org.jsecurity.mgt.DefaultSecurityManager var0 = new org.jsecurity.mgt.DefaultSecurityManager();
    java.io.InputStream var2 = org.jsecurity.util.ClassUtils.getResourceAsStream("");
    java.lang.Object[] var3 = new java.lang.Object[] { var2};
    java.util.List var4 = org.jsecurity.util.CollectionUtils.asList(var3);
    org.jsecurity.authc.pam.ModularRealmAuthenticator var5 = new org.jsecurity.authc.pam.ModularRealmAuthenticator(var4);
    org.jsecurity.authc.pam.AllSuccessfulModularAuthenticationStrategy var6 = new org.jsecurity.authc.pam.AllSuccessfulModularAuthenticationStrategy();
    var5.setModularAuthenticationStrategy((org.jsecurity.authc.pam.ModularAuthenticationStrategy)var6);
    org.jsecurity.authz.SimpleAuthorizationInfo var8 = new org.jsecurity.authz.SimpleAuthorizationInfo();
    var8.addStringPermission("hi!");
    java.io.InputStream var12 = org.jsecurity.util.ClassUtils.getResourceAsStream("");
    java.lang.Object[] var13 = new java.lang.Object[] { var12};
    java.util.List var14 = org.jsecurity.util.CollectionUtils.asList(var13);
    var8.addRoles((java.util.Collection)var14);
    var5.setAuthenticationListeners((java.util.Collection)var14);
    var0.setSessionListeners((java.util.Collection)var14);
    org.jsecurity.realm.text.TextConfigurationRealm var18 = new org.jsecurity.realm.text.TextConfigurationRealm();
    java.io.InputStream var20 = org.jsecurity.util.ClassUtils.getResourceAsStream("");
    java.lang.Object[] var21 = new java.lang.Object[] { var20};
    java.util.List var22 = org.jsecurity.util.CollectionUtils.asList(var21);
    org.jsecurity.authc.pam.ModularRealmAuthenticator var23 = new org.jsecurity.authc.pam.ModularRealmAuthenticator(var22);
    org.jsecurity.subject.SimplePrincipalCollection var25 = new org.jsecurity.subject.SimplePrincipalCollection((java.util.Collection)var22, "org.jsecurity.authz.UnauthorizedException: org.jsecurity.session.ExpiredSessionException: ");
    org.jsecurity.session.UnknownSessionException var30 = new org.jsecurity.session.UnknownSessionException("dd\uFFFD", (java.io.Serializable)100.0f);
    org.jsecurity.session.SessionException var32 = new org.jsecurity.session.SessionException("dd\uFFFD", (java.lang.Throwable)var30, (java.io.Serializable)0);
    org.jsecurity.session.SessionException var33 = new org.jsecurity.session.SessionException("dd\uFFFD", (java.lang.Throwable)var30);
    var25.add((java.lang.Object)var33, "org.jsecurity.config.ConfigurationException: dd\uFFFD");
    var18.onLogout((org.jsecurity.subject.PrincipalCollection)var25);
    org.jsecurity.authc.pam.FirstSuccessfulAuthenticationStrategy var37 = new org.jsecurity.authc.pam.FirstSuccessfulAuthenticationStrategy();
    org.jsecurity.authz.UnauthorizedException var39 = new org.jsecurity.authz.UnauthorizedException("org.jsecurity.config.ConfigurationException: dd\uFFFD");
    java.lang.Throwable[] var40 = var39.getSuppressed();
    java.util.List var41 = org.jsecurity.util.CollectionUtils.asList((java.lang.Object[])var40);
    org.jsecurity.authc.UsernamePasswordToken var42 = new org.jsecurity.authc.UsernamePasswordToken();
    java.lang.String var43 = var42.getUsername();
    java.net.InetAddress var44 = var42.getInetAddress();
    org.jsecurity.authc.AuthenticationInfo var45 = var37.beforeAllAttempts((java.util.Collection)var41, (org.jsecurity.authc.AuthenticationToken)var42);
    boolean[] var46 = var0.hasRoles((org.jsecurity.subject.PrincipalCollection)var25, var41);
    org.jsecurity.subject.Subject var47 = var0.getSubject();
    org.jsecurity.realm.text.TextConfigurationRealm var49 = new org.jsecurity.realm.text.TextConfigurationRealm();
    java.io.InputStream var51 = org.jsecurity.util.ClassUtils.getResourceAsStream("");
    java.lang.Object[] var52 = new java.lang.Object[] { var51};
    java.util.List var53 = org.jsecurity.util.CollectionUtils.asList(var52);
    org.jsecurity.authc.pam.ModularRealmAuthenticator var54 = new org.jsecurity.authc.pam.ModularRealmAuthenticator(var53);
    org.jsecurity.subject.SimplePrincipalCollection var56 = new org.jsecurity.subject.SimplePrincipalCollection((java.util.Collection)var53, "org.jsecurity.authz.UnauthorizedException: org.jsecurity.session.ExpiredSessionException: ");
    org.jsecurity.session.UnknownSessionException var61 = new org.jsecurity.session.UnknownSessionException("dd\uFFFD", (java.io.Serializable)100.0f);
    org.jsecurity.session.SessionException var63 = new org.jsecurity.session.SessionException("dd\uFFFD", (java.lang.Throwable)var61, (java.io.Serializable)0);
    org.jsecurity.session.SessionException var64 = new org.jsecurity.session.SessionException("dd\uFFFD", (java.lang.Throwable)var61);
    var56.add((java.lang.Object)var64, "org.jsecurity.config.ConfigurationException: dd\uFFFD");
    var49.onLogout((org.jsecurity.subject.PrincipalCollection)var56);
    java.util.Set var69 = org.jsecurity.util.PermissionUtils.toPermissionStrings("org.jsecurity.config.ConfigurationException: dd\uFFFD");
    org.jsecurity.authz.SimpleAuthorizationInfo var70 = new org.jsecurity.authz.SimpleAuthorizationInfo(var69);
    org.jsecurity.authz.SimpleAuthorizingAccount var71 = new org.jsecurity.authz.SimpleAuthorizingAccount((org.jsecurity.subject.PrincipalCollection)var56, (java.lang.Object)var69);
    org.jsecurity.session.StoppedSessionException var72 = new org.jsecurity.session.StoppedSessionException("org.jsecurity.realm.SimpleAccountRealm-55-authorization", (java.io.Serializable)var56);
    var0.logout((org.jsecurity.subject.PrincipalCollection)var56);
    org.jsecurity.subject.DelegatingSubject var74 = new org.jsecurity.subject.DelegatingSubject((org.jsecurity.mgt.SecurityManager)var0);
    org.jsecurity.cache.ehcache.EhCacheManager var75 = new org.jsecurity.cache.ehcache.EhCacheManager();
    net.sf.ehcache.CacheManager var76 = var75.getCacheManager();
    var75.destroy();
    net.sf.ehcache.CacheManager var78 = var75.getCacheManager();
    net.sf.ehcache.CacheManager var79 = var75.getCacheManager();
    var75.init();
    java.lang.String var81 = var75.getCacheManagerConfigFile();
    var0.setCacheManager((org.jsecurity.cache.CacheManager)var75);
    org.jsecurity.cache.Cache var84 = var75.getCache("5e8a13e5-9407-4da8-a0bf-f6368dff7e1a");
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var2);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var3);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var4);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var12);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var13);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var14);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var20);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var21);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var22);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var40);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var41);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var43);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var44);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var45);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var46);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var47);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var51);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var52);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var53);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var69);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var76);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var78);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var79);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var81 + "' != '" + "classpath:org/jsecurity/cache/ehcache/ehcache.xml"+ "'", var81.equals("classpath:org/jsecurity/cache/ehcache/ehcache.xml"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var84);

  }

  public void test21() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest7.test21");


    org.jsecurity.session.InvalidSessionException var2 = new org.jsecurity.session.InvalidSessionException("cedd2a1f-3314-48a5-a4a5-a84437e5ec49");
    org.jsecurity.io.IniResource var4 = new org.jsecurity.io.IniResource();
    var4.setCharsetName("org.jsecurity.authz.UnauthorizedException: org.jsecurity.session.ExpiredSessionException: ");
    java.util.Map var7 = var4.getSections();
    java.util.Map var8 = var4.getSections();
    org.jsecurity.session.UnknownSessionException var9 = new org.jsecurity.session.UnknownSessionException("f9548f9e-497e-41ec-97ca-89ede08e20b0", (java.io.Serializable)var4);
    java.util.Map var10 = var4.getSections();
    java.lang.String var11 = var4.getCharsetName();
    org.jsecurity.session.SessionException var12 = new org.jsecurity.session.SessionException("7f459141-420b-4ce9-8486-8c578b9f7c7e", (java.lang.Throwable)var2, (java.io.Serializable)var11);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var7);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var8);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var10);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var11 + "' != '" + "org.jsecurity.authz.UnauthorizedException: org.jsecurity.session.ExpiredSessionException: "+ "'", var11.equals("org.jsecurity.authz.UnauthorizedException: org.jsecurity.session.ExpiredSessionException: "));

  }

  public void test22() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest7.test22");


    org.jsecurity.session.UnknownSessionException var7 = new org.jsecurity.session.UnknownSessionException("dd\uFFFD", (java.io.Serializable)100.0f);
    org.jsecurity.subject.SubjectException var8 = new org.jsecurity.subject.SubjectException("dd\uFFFD", (java.lang.Throwable)var7);
    org.jsecurity.io.SerializationException var9 = new org.jsecurity.io.SerializationException("", (java.lang.Throwable)var8);
    org.jsecurity.session.InvalidSessionException var10 = new org.jsecurity.session.InvalidSessionException("dd\uFFFD", (java.lang.Throwable)var8);
    org.jsecurity.authz.AuthorizationException var11 = new org.jsecurity.authz.AuthorizationException("a2b823b1e72eae2b727289df8a00a89df8a0bab6ad8a89c4c5c7a9b62a270000", (java.lang.Throwable)var10);
    org.jsecurity.session.ExpiredSessionException var12 = new org.jsecurity.session.ExpiredSessionException("3d40fa30-fa08-4705-a0dc-1dd5464d0a01", (java.lang.Throwable)var10);
    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      org.jsecurity.crypto.hash.Sha512Hash var13 = new org.jsecurity.crypto.hash.Sha512Hash((java.lang.Object)var12);
      fail("Expected exception of type org.jsecurity.codec.CodecException");
    } catch (org.jsecurity.codec.CodecException e) {
      // Expected exception.
    }

  }

  public void test23() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest7.test23");


    org.jsecurity.realm.SimpleAccountRealm var1 = new org.jsecurity.realm.SimpleAccountRealm("hi!");
    java.lang.Class var2 = var1.getAuthenticationTokenClass();
    org.jsecurity.session.mgt.eis.MemorySessionDAO var3 = new org.jsecurity.session.mgt.eis.MemorySessionDAO();
    org.jsecurity.cache.Cache var4 = var3.getActiveSessionsCache();
    org.jsecurity.cache.CacheManager var5 = var3.getCacheManager();
    var1.setCacheManager(var5);
    org.jsecurity.cache.Cache var7 = var1.getAuthorizationCache();
    boolean var9 = var1.accountExists("a2b823b1e72eae2b727289df8a00a89df8a0bab6ad8a89c4c5c7a9b62a270000");
    org.jsecurity.mgt.DefaultSecurityManager var10 = new org.jsecurity.mgt.DefaultSecurityManager((org.jsecurity.realm.Realm)var1);
    org.jsecurity.authc.pam.FirstSuccessfulAuthenticationStrategy var11 = new org.jsecurity.authc.pam.FirstSuccessfulAuthenticationStrategy();
    var10.setModularAuthenticationStrategy((org.jsecurity.authc.pam.ModularAuthenticationStrategy)var11);
    org.jsecurity.authz.HostUnauthorizedException var13 = new org.jsecurity.authz.HostUnauthorizedException();
    org.jsecurity.authz.permission.WildcardPermission var16 = new org.jsecurity.authz.permission.WildcardPermission("org.jsecurity.authc.AccountException: hi!", true);
    org.jsecurity.authz.SimpleAuthorizationInfo var18 = new org.jsecurity.authz.SimpleAuthorizationInfo();
    java.util.Set var19 = var18.getStringPermissions();
    java.util.Set var20 = var18.getRoles();
    var18.addStringPermission("hi!");
    java.util.Set var23 = var18.getStringPermissions();
    org.jsecurity.session.UnknownSessionException var28 = new org.jsecurity.session.UnknownSessionException("dd\uFFFD", (java.io.Serializable)100.0f);
    org.jsecurity.subject.SubjectException var29 = new org.jsecurity.subject.SubjectException("dd\uFFFD", (java.lang.Throwable)var28);
    org.jsecurity.io.SerializationException var30 = new org.jsecurity.io.SerializationException("", (java.lang.Throwable)var29);
    java.lang.Throwable[] var31 = var29.getSuppressed();
    java.lang.Throwable[] var32 = var29.getSuppressed();
    org.jsecurity.authz.SimpleAuthorizationInfo var35 = new org.jsecurity.authz.SimpleAuthorizationInfo();
    var35.addRole("a2b823b1e72eae2b727289df8a00a89df8a0bab6ad8a89c4c5c7a9b62a270000");
    org.jsecurity.session.UnknownSessionException var42 = new org.jsecurity.session.UnknownSessionException("dd\uFFFD", (java.io.Serializable)100.0f);
    org.jsecurity.subject.SubjectException var43 = new org.jsecurity.subject.SubjectException("dd\uFFFD", (java.lang.Throwable)var42);
    org.jsecurity.io.SerializationException var44 = new org.jsecurity.io.SerializationException("", (java.lang.Throwable)var43);
    java.lang.Throwable[] var45 = var43.getSuppressed();
    java.util.Set var46 = org.jsecurity.util.CollectionUtils.asSet((java.lang.Object[])var45);
    var35.addRoles((java.util.Collection)var46);
    java.io.InputStream var49 = org.jsecurity.util.ClassUtils.getResourceAsStream("");
    java.lang.Object[] var50 = new java.lang.Object[] { var49};
    java.util.List var51 = org.jsecurity.util.CollectionUtils.asList(var50);
    org.jsecurity.authc.pam.ModularRealmAuthenticator var52 = new org.jsecurity.authc.pam.ModularRealmAuthenticator(var51);
    org.jsecurity.subject.SimplePrincipalCollection var54 = new org.jsecurity.subject.SimplePrincipalCollection((java.util.Collection)var51, "org.jsecurity.authz.UnauthorizedException: org.jsecurity.session.ExpiredSessionException: ");
    org.jsecurity.session.UnknownSessionException var59 = new org.jsecurity.session.UnknownSessionException("dd\uFFFD", (java.io.Serializable)100.0f);
    org.jsecurity.session.SessionException var61 = new org.jsecurity.session.SessionException("dd\uFFFD", (java.lang.Throwable)var59, (java.io.Serializable)0);
    org.jsecurity.session.SessionException var62 = new org.jsecurity.session.SessionException("dd\uFFFD", (java.lang.Throwable)var59);
    var54.add((java.lang.Object)var62, "org.jsecurity.config.ConfigurationException: dd\uFFFD");
    java.util.Set var65 = var54.asSet();
    org.jsecurity.authz.SimpleAuthorizingAccount var66 = new org.jsecurity.authz.SimpleAuthorizingAccount((java.lang.Object)var32, (java.lang.Object)"\u0000\u0000\u0000", "\u0000\u0000\u0000", var46, var65);
    org.jsecurity.authz.SimpleRole var68 = var66.getRole("\u0000\u0000\u0000");
    java.util.Set var69 = var66.getPermissions();
    boolean var70 = var66.isLocked();
    java.io.InputStream var72 = org.jsecurity.util.ClassUtils.getResourceAsStream("");
    java.lang.Object[] var73 = new java.lang.Object[] { var72};
    java.util.List var74 = org.jsecurity.util.CollectionUtils.asList(var73);
    org.jsecurity.authc.pam.ModularRealmAuthenticator var75 = new org.jsecurity.authc.pam.ModularRealmAuthenticator(var74);
    org.jsecurity.subject.SimplePrincipalCollection var77 = new org.jsecurity.subject.SimplePrincipalCollection((java.util.Collection)var74, "org.jsecurity.authz.UnauthorizedException: org.jsecurity.session.ExpiredSessionException: ");
    java.util.Set var78 = var77.getRealmNames();
    var66.addStringPermissions((java.util.Collection)var78);
    org.jsecurity.authz.SimpleAuthorizingAccount var80 = new org.jsecurity.authz.SimpleAuthorizingAccount((java.lang.Object)var13, (java.lang.Object)var16, "d8d550ee-3a8c-48f0-8061-1d82c827f505", var23, var78);
    org.jsecurity.authc.pam.AllSuccessfulModularAuthenticationStrategy var81 = new org.jsecurity.authc.pam.AllSuccessfulModularAuthenticationStrategy();
    char[] var83 = new char[] { };
    org.jsecurity.authc.UsernamePasswordToken var85 = new org.jsecurity.authc.UsernamePasswordToken("hi!", var83, true);
    org.jsecurity.authc.SimpleAccount var86 = new org.jsecurity.authc.SimpleAccount();
    var86.setCredentialsExpired(false);
    boolean var89 = var86.isLocked();
    org.jsecurity.authc.AuthenticationInfo var90 = var81.afterAllAttempts((org.jsecurity.authc.AuthenticationToken)var85, (org.jsecurity.authc.AuthenticationInfo)var86);
    char[] var92 = new char[] { };
    org.jsecurity.authc.UsernamePasswordToken var94 = new org.jsecurity.authc.UsernamePasswordToken("hi!", var92, true);
    byte[] var95 = org.jsecurity.codec.Hex.decode(var92);
    byte[] var96 = org.jsecurity.codec.Hex.decode(var92);
    var85.setPassword(var92);
    org.jsecurity.authc.AuthenticationInfo var98 = var11.beforeAllAttempts((java.util.Collection)var23, (org.jsecurity.authc.AuthenticationToken)var85);
    char[] var99 = var85.getPassword();
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var2);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var4);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var5);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var7);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var9 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var19);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var20);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var23);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var31);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var32);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var45);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var46);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var49);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var50);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var51);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var65);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var68);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var69);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var70 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var72);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var73);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var74);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var78);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var83);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var89 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var90);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var92);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var95);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var96);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var98);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var99);

  }

  public void test24() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest7.test24");


    org.jsecurity.realm.text.TextConfigurationRealm var0 = new org.jsecurity.realm.text.TextConfigurationRealm();
    java.io.InputStream var2 = org.jsecurity.util.ClassUtils.getResourceAsStream("");
    java.lang.Object[] var3 = new java.lang.Object[] { var2};
    java.util.List var4 = org.jsecurity.util.CollectionUtils.asList(var3);
    org.jsecurity.authc.pam.ModularRealmAuthenticator var5 = new org.jsecurity.authc.pam.ModularRealmAuthenticator(var4);
    org.jsecurity.subject.SimplePrincipalCollection var7 = new org.jsecurity.subject.SimplePrincipalCollection((java.util.Collection)var4, "org.jsecurity.authz.UnauthorizedException: org.jsecurity.session.ExpiredSessionException: ");
    org.jsecurity.session.UnknownSessionException var12 = new org.jsecurity.session.UnknownSessionException("dd\uFFFD", (java.io.Serializable)100.0f);
    org.jsecurity.session.SessionException var14 = new org.jsecurity.session.SessionException("dd\uFFFD", (java.lang.Throwable)var12, (java.io.Serializable)0);
    org.jsecurity.session.SessionException var15 = new org.jsecurity.session.SessionException("dd\uFFFD", (java.lang.Throwable)var12);
    var7.add((java.lang.Object)var15, "org.jsecurity.config.ConfigurationException: dd\uFFFD");
    var0.onLogout((org.jsecurity.subject.PrincipalCollection)var7);
    org.jsecurity.cache.HashtableCacheManager var19 = new org.jsecurity.cache.HashtableCacheManager();
    org.jsecurity.cache.Cache var21 = var19.getCache("\u0000\u0000");
    var0.setAuthorizationCache(var21);
    org.jsecurity.codec.CodecException var25 = new org.jsecurity.codec.CodecException("dd\uFFFD");
    org.jsecurity.authc.ConcurrentAccessException var26 = new org.jsecurity.authc.ConcurrentAccessException("org.jsecurity.authz.UnauthorizedException: org.jsecurity.session.ExpiredSessionException: ", (java.lang.Throwable)var25);
    org.jsecurity.subject.SimplePrincipalCollection var28 = new org.jsecurity.subject.SimplePrincipalCollection((java.lang.Object)var25, "");
    var0.onLogout((org.jsecurity.subject.PrincipalCollection)var28);
    boolean var31 = var0.accountExists("4ef713cf-5dcd-4003-b930-c7cb38661a43");
    org.jsecurity.authz.ModularRealmAuthorizer var32 = new org.jsecurity.authz.ModularRealmAuthorizer();
    java.io.InputStream var34 = org.jsecurity.util.ClassUtils.getResourceAsStream("");
    java.lang.Object[] var35 = new java.lang.Object[] { var34};
    java.util.List var36 = org.jsecurity.util.CollectionUtils.asList(var35);
    org.jsecurity.authc.pam.ModularRealmAuthenticator var37 = new org.jsecurity.authc.pam.ModularRealmAuthenticator(var36);
    org.jsecurity.subject.SimplePrincipalCollection var39 = new org.jsecurity.subject.SimplePrincipalCollection((java.util.Collection)var36, "org.jsecurity.authz.UnauthorizedException: org.jsecurity.session.ExpiredSessionException: ");
    org.jsecurity.session.UnknownSessionException var44 = new org.jsecurity.session.UnknownSessionException("dd\uFFFD", (java.io.Serializable)100.0f);
    org.jsecurity.session.SessionException var46 = new org.jsecurity.session.SessionException("dd\uFFFD", (java.lang.Throwable)var44, (java.io.Serializable)0);
    org.jsecurity.session.SessionException var47 = new org.jsecurity.session.SessionException("dd\uFFFD", (java.lang.Throwable)var44);
    var39.add((java.lang.Object)var47, "org.jsecurity.config.ConfigurationException: dd\uFFFD");
    java.util.Set var50 = var39.asSet();
    var32.setRealms((java.util.Collection)var50);
    org.jsecurity.authz.UnauthorizedException var53 = new org.jsecurity.authz.UnauthorizedException("org.jsecurity.config.ConfigurationException: dd\uFFFD");
    java.lang.Throwable[] var54 = var53.getSuppressed();
    java.util.Set var55 = org.jsecurity.util.CollectionUtils.asSet((java.lang.Object[])var54);
    var32.setRealms((java.util.Collection)var55);
    org.jsecurity.realm.text.TextConfigurationRealm var57 = new org.jsecurity.realm.text.TextConfigurationRealm();
    org.jsecurity.realm.text.TextConfigurationRealm var58 = new org.jsecurity.realm.text.TextConfigurationRealm();
    java.io.InputStream var60 = org.jsecurity.util.ClassUtils.getResourceAsStream("");
    java.lang.Object[] var61 = new java.lang.Object[] { var60};
    java.util.List var62 = org.jsecurity.util.CollectionUtils.asList(var61);
    org.jsecurity.authc.pam.ModularRealmAuthenticator var63 = new org.jsecurity.authc.pam.ModularRealmAuthenticator(var62);
    org.jsecurity.subject.SimplePrincipalCollection var65 = new org.jsecurity.subject.SimplePrincipalCollection((java.util.Collection)var62, "org.jsecurity.authz.UnauthorizedException: org.jsecurity.session.ExpiredSessionException: ");
    org.jsecurity.session.UnknownSessionException var70 = new org.jsecurity.session.UnknownSessionException("dd\uFFFD", (java.io.Serializable)100.0f);
    org.jsecurity.session.SessionException var72 = new org.jsecurity.session.SessionException("dd\uFFFD", (java.lang.Throwable)var70, (java.io.Serializable)0);
    org.jsecurity.session.SessionException var73 = new org.jsecurity.session.SessionException("dd\uFFFD", (java.lang.Throwable)var70);
    var65.add((java.lang.Object)var73, "org.jsecurity.config.ConfigurationException: dd\uFFFD");
    var58.onLogout((org.jsecurity.subject.PrincipalCollection)var65);
    java.util.Collection var78 = var65.fromRealm("\u0000\u0000\u0000");
    var57.onLogout((org.jsecurity.subject.PrincipalCollection)var65);
    org.jsecurity.authz.aop.RoleAnnotationMethodInterceptor var80 = new org.jsecurity.authz.aop.RoleAnnotationMethodInterceptor();
    org.jsecurity.aop.AnnotationHandler var81 = var80.getHandler();
    java.lang.Class var82 = var81.getAnnotationClass();
    java.util.Collection var83 = var65.byType(var82);
    org.jsecurity.realm.jndi.JndiRealmFactory var84 = new org.jsecurity.realm.jndi.JndiRealmFactory();
    org.jsecurity.authc.ExpiredCredentialsException var86 = new org.jsecurity.authc.ExpiredCredentialsException();
    org.jsecurity.session.ExpiredSessionException var87 = new org.jsecurity.session.ExpiredSessionException("", (java.lang.Throwable)var86);
    java.lang.Throwable[] var88 = var87.getSuppressed();
    java.util.List var89 = org.jsecurity.util.CollectionUtils.asList((java.lang.Object[])var88);
    var84.setJndiNames((java.util.Collection)var89);
    var32.checkPermissions((org.jsecurity.subject.PrincipalCollection)var65, (java.util.Collection)var89);
    var0.onLogout((org.jsecurity.subject.PrincipalCollection)var65);
    var0.addAccount("803207de-db4a-44ce-b9a4-60936c92a820", "5ef57feb-0e65-441c-9026-e1d144b99f81");
    org.jsecurity.cache.Cache var96 = var0.getAuthorizationCache();
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var2);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var3);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var4);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var21);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var31 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var34);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var35);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var36);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var50);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var54);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var55);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var60);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var61);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var62);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var78);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var81);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var82);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var83);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var88);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var89);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var96);

  }

  public void test25() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest7.test25");


    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      java.io.InputStream var1 = org.jsecurity.io.ResourceUtils.getInputStreamForPath("feadc566-ae14-43f5-8d0a-c52f36a11b37");
      fail("Expected exception of type java.io.FileNotFoundException");
    } catch (java.io.FileNotFoundException e) {
      // Expected exception.
    }

  }

  public void test26() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest7.test26");


    boolean var1 = org.jsecurity.io.ResourceUtils.resourceExists("e2497199-95f2-4373-8934-d742f09a6cb1");
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var1 == false);

  }

  public void test27() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest7.test27");


    org.jsecurity.session.mgt.SimpleSession var0 = new org.jsecurity.session.mgt.SimpleSession();
    var0.setTimeout((-1L));
    org.jsecurity.session.mgt.SimpleSession var3 = new org.jsecurity.session.mgt.SimpleSession();
    java.util.Date var4 = var3.getLastAccessTime();
    var0.setLastAccessTime(var4);
    org.jsecurity.session.mgt.SimpleSession var6 = new org.jsecurity.session.mgt.SimpleSession();
    java.util.Date var7 = var6.getLastAccessTime();
    var0.setStopTimestamp(var7);
    java.net.InetAddress var9 = var0.getHostAddress();
    var0.setTimeout(100L);
    org.jsecurity.session.mgt.SimpleSession var12 = new org.jsecurity.session.mgt.SimpleSession();
    var12.setTimeout((-1L));
    org.jsecurity.session.mgt.SimpleSession var15 = new org.jsecurity.session.mgt.SimpleSession();
    java.util.Date var16 = var15.getLastAccessTime();
    var12.setLastAccessTime(var16);
    org.jsecurity.session.UnknownSessionException var22 = new org.jsecurity.session.UnknownSessionException("dd\uFFFD", (java.io.Serializable)100.0f);
    org.jsecurity.subject.SubjectException var23 = new org.jsecurity.subject.SubjectException("dd\uFFFD", (java.lang.Throwable)var22);
    org.jsecurity.io.SerializationException var24 = new org.jsecurity.io.SerializationException("", (java.lang.Throwable)var23);
    java.lang.Throwable[] var25 = var23.getSuppressed();
    java.lang.Throwable[] var26 = var23.getSuppressed();
    org.jsecurity.authz.SimpleAuthorizationInfo var29 = new org.jsecurity.authz.SimpleAuthorizationInfo();
    var29.addRole("a2b823b1e72eae2b727289df8a00a89df8a0bab6ad8a89c4c5c7a9b62a270000");
    org.jsecurity.session.UnknownSessionException var36 = new org.jsecurity.session.UnknownSessionException("dd\uFFFD", (java.io.Serializable)100.0f);
    org.jsecurity.subject.SubjectException var37 = new org.jsecurity.subject.SubjectException("dd\uFFFD", (java.lang.Throwable)var36);
    org.jsecurity.io.SerializationException var38 = new org.jsecurity.io.SerializationException("", (java.lang.Throwable)var37);
    java.lang.Throwable[] var39 = var37.getSuppressed();
    java.util.Set var40 = org.jsecurity.util.CollectionUtils.asSet((java.lang.Object[])var39);
    var29.addRoles((java.util.Collection)var40);
    java.io.InputStream var43 = org.jsecurity.util.ClassUtils.getResourceAsStream("");
    java.lang.Object[] var44 = new java.lang.Object[] { var43};
    java.util.List var45 = org.jsecurity.util.CollectionUtils.asList(var44);
    org.jsecurity.authc.pam.ModularRealmAuthenticator var46 = new org.jsecurity.authc.pam.ModularRealmAuthenticator(var45);
    org.jsecurity.subject.SimplePrincipalCollection var48 = new org.jsecurity.subject.SimplePrincipalCollection((java.util.Collection)var45, "org.jsecurity.authz.UnauthorizedException: org.jsecurity.session.ExpiredSessionException: ");
    org.jsecurity.session.UnknownSessionException var53 = new org.jsecurity.session.UnknownSessionException("dd\uFFFD", (java.io.Serializable)100.0f);
    org.jsecurity.session.SessionException var55 = new org.jsecurity.session.SessionException("dd\uFFFD", (java.lang.Throwable)var53, (java.io.Serializable)0);
    org.jsecurity.session.SessionException var56 = new org.jsecurity.session.SessionException("dd\uFFFD", (java.lang.Throwable)var53);
    var48.add((java.lang.Object)var56, "org.jsecurity.config.ConfigurationException: dd\uFFFD");
    java.util.Set var59 = var48.asSet();
    org.jsecurity.authz.SimpleAuthorizingAccount var60 = new org.jsecurity.authz.SimpleAuthorizingAccount((java.lang.Object)var26, (java.lang.Object)"\u0000\u0000\u0000", "\u0000\u0000\u0000", var40, var59);
    java.lang.Object var61 = var12.removeAttribute((java.lang.Object)var40);
    var12.validate();
    java.util.Date var63 = var12.getLastAccessTime();
    var0.setStopTimestamp(var63);
    org.jsecurity.session.mgt.SimpleSession var66 = new org.jsecurity.session.mgt.SimpleSession();
    var66.setTimeout((-1L));
    org.jsecurity.session.mgt.SimpleSession var69 = new org.jsecurity.session.mgt.SimpleSession();
    java.util.Date var70 = var69.getLastAccessTime();
    var66.setLastAccessTime(var70);
    org.jsecurity.session.mgt.SimpleSession var72 = new org.jsecurity.session.mgt.SimpleSession();
    java.util.Date var73 = var72.getLastAccessTime();
    var66.setStopTimestamp(var73);
    java.net.InetAddress var75 = var66.getHostAddress();
    org.jsecurity.session.InvalidSessionException var76 = new org.jsecurity.session.InvalidSessionException("\u0000\u0000\u0000", (java.io.Serializable)var66);
    java.util.Collection var77 = var66.getAttributeKeys();
    org.jsecurity.authc.credential.Md5CredentialsMatcher var78 = new org.jsecurity.authc.credential.Md5CredentialsMatcher();
    boolean var79 = var78.isHashSalted();
    boolean var80 = var78.isHashSalted();
    int var81 = var78.getHashIterations();
    var0.setAttribute((java.lang.Object)var66, (java.lang.Object)var78);
    java.util.Date var83 = var0.getLastAccessTime();
    var0.touch();
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var4);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var7);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var9);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var16);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var25);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var26);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var39);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var40);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var43);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var44);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var45);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var59);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var61);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var63);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var70);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var73);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var75);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var77);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var79 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var80 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var81 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var83);

  }

  public void test28() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest7.test28");


    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      org.jsecurity.crypto.hash.Sha1Hash var1 = org.jsecurity.crypto.hash.Sha1Hash.fromHexString("org.jsecurity.realm.text.PropertiesRealm_3875");
      fail("Expected exception of type java.lang.IllegalArgumentException");
    } catch (java.lang.IllegalArgumentException e) {
      // Expected exception.
    }

  }

  public void test29() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest7.test29");


    org.jsecurity.realm.activedirectory.ActiveDirectoryRealm var0 = new org.jsecurity.realm.activedirectory.ActiveDirectoryRealm();
    org.jsecurity.authc.credential.Sha256CredentialsMatcher var1 = new org.jsecurity.authc.credential.Sha256CredentialsMatcher();
    var0.setCredentialsMatcher((org.jsecurity.authc.credential.CredentialsMatcher)var1);
    java.lang.String var3 = var0.getAuthorizationCacheName();
    var0.setUrl("hi!");
    org.jsecurity.realm.ldap.DefaultLdapContextFactory var6 = new org.jsecurity.realm.ldap.DefaultLdapContextFactory();
    var0.setLdapContextFactory((org.jsecurity.realm.ldap.LdapContextFactory)var6);
    var6.setAuthentication("org.jsecurity.authz.UnauthorizedException: org.jsecurity.session.ExpiredSessionException: ");
    var6.setSystemUsername("org.jsecurity.config.ConfigurationException: dd\uFFFD");
    var6.setSystemPassword("orgjsecurityauthcCredentialsException783ccd3148a842dd890fdf885a7baafAA==");
    var6.setSystemPassword("bfcfe798-c3eb-4591-b32c-68e2bf73fa04");
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var3);

  }

  public void test30() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest7.test30");


    org.jsecurity.authz.aop.RoleAnnotationHandler var0 = new org.jsecurity.authz.aop.RoleAnnotationHandler();
    java.lang.Class var1 = var0.getAnnotationClass();
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var1);

  }

  public void test31() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest7.test31");


    java.lang.String[] var4 = org.jsecurity.util.StringUtils.tokenizeToStringArray("71f30a05-1ea8-413f-82da-8574eb556975", "4715d7ef-6c04-4682-97ae-b4b0a6ec7f3d", false, true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var4);

  }

  public void test32() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest7.test32");


    org.jsecurity.util.UnavailableConstructorException var1 = new org.jsecurity.util.UnavailableConstructorException("org.jsecurity.config.ConfigurationException: dd\uFFFD-4org.jsecurity.config.ConfigurationException: dd\uFFFD02-8085-950org.jsecurity.config.ConfigurationException: dd\uFFFDbb026org.jsecurity.config.ConfigurationException: dd\uFFFD06");

  }

  public void test33() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest7.test33");


    org.jsecurity.crypto.hash.Md2Hash var1 = org.jsecurity.crypto.hash.Md2Hash.fromBase64String("a2b823b1e72eae2b727289df8a00a89df8a0bab6ad8a89c4c5c7a9b62a270000");
    org.jsecurity.authc.credential.Md2CredentialsMatcher var2 = new org.jsecurity.authc.credential.Md2CredentialsMatcher();
    org.jsecurity.authz.SimpleAuthorizingAccount var4 = new org.jsecurity.authz.SimpleAuthorizingAccount((java.lang.Object)"a2b823b1e72eae2b727289df8a00a89df8a0bab6ad8a89c4c5c7a9b62a270000", (java.lang.Object)var2, "");
    org.jsecurity.authz.SimpleAuthorizationInfo var5 = new org.jsecurity.authz.SimpleAuthorizationInfo();
    java.util.Set var6 = var5.getStringPermissions();
    org.jsecurity.authz.SimpleAuthorizationInfo var8 = new org.jsecurity.authz.SimpleAuthorizationInfo();
    org.jsecurity.session.UnknownSessionException var13 = new org.jsecurity.session.UnknownSessionException("dd\uFFFD", (java.io.Serializable)100.0f);
    org.jsecurity.subject.SubjectException var14 = new org.jsecurity.subject.SubjectException("dd\uFFFD", (java.lang.Throwable)var13);
    org.jsecurity.io.SerializationException var15 = new org.jsecurity.io.SerializationException("", (java.lang.Throwable)var14);
    java.lang.Throwable[] var16 = var14.getSuppressed();
    java.util.Set var17 = org.jsecurity.util.CollectionUtils.asSet((java.lang.Object[])var16);
    var8.setStringPermissions(var17);
    java.util.Set var19 = var8.getRoles();
    org.jsecurity.authz.SimpleAuthorizationInfo var20 = new org.jsecurity.authz.SimpleAuthorizationInfo();
    var20.addRole("a2b823b1e72eae2b727289df8a00a89df8a0bab6ad8a89c4c5c7a9b62a270000");
    org.jsecurity.session.UnknownSessionException var27 = new org.jsecurity.session.UnknownSessionException("dd\uFFFD", (java.io.Serializable)100.0f);
    org.jsecurity.subject.SubjectException var28 = new org.jsecurity.subject.SubjectException("dd\uFFFD", (java.lang.Throwable)var27);
    org.jsecurity.io.SerializationException var29 = new org.jsecurity.io.SerializationException("", (java.lang.Throwable)var28);
    java.lang.Throwable[] var30 = var28.getSuppressed();
    java.util.Set var31 = org.jsecurity.util.CollectionUtils.asSet((java.lang.Object[])var30);
    var20.addRoles((java.util.Collection)var31);
    var8.setRoles(var31);
    org.jsecurity.authz.SimpleRole var34 = new org.jsecurity.authz.SimpleRole("org.jsecurity.authz.UnauthorizedException: org.jsecurity.session.ExpiredSessionException: ", var31);
    var5.addStringPermissions((java.util.Collection)var31);
    boolean var36 = var4.isPermittedAll((java.util.Collection)var31);
    boolean var37 = var4.isCredentialsExpired();
    org.jsecurity.cache.HashtableCache var39 = new org.jsecurity.cache.HashtableCache("783ccd31-48a8-42dd-890f-df885a7baaff");
    java.lang.String var40 = var39.toString();
    java.util.Set var41 = var39.values();
    var4.addAll((java.util.Collection)var41);
    org.jsecurity.authz.SimpleAuthorizationInfo var43 = new org.jsecurity.authz.SimpleAuthorizationInfo(var41);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var1);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var6);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var16);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var17);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var19);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var30);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var31);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var36 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var37 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var40 + "' != '" + "HashtableCache [783ccd31-48a8-42dd-890f-df885a7baaff]"+ "'", var40.equals("HashtableCache [783ccd31-48a8-42dd-890f-df885a7baaff]"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var41);

  }

  public void test34() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest7.test34");


    org.jsecurity.session.ExpiredSessionException var3 = new org.jsecurity.session.ExpiredSessionException((java.io.Serializable)(-1));
    org.jsecurity.authc.DisabledAccountException var4 = new org.jsecurity.authc.DisabledAccountException((java.lang.Throwable)var3);
    org.jsecurity.authc.DisabledAccountException var5 = new org.jsecurity.authc.DisabledAccountException("orgjsecurityconfigConfigurationExceptionAAA=", (java.lang.Throwable)var4);
    org.jsecurity.session.SessionException var6 = new org.jsecurity.session.SessionException("39b17f77-0342-473e-b133-474ccb9f04d9", (java.io.Serializable)var5);

  }

  public void test35() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest7.test35");


    org.jsecurity.crypto.hash.Md2Hash var1 = org.jsecurity.crypto.hash.Md2Hash.fromBase64String("a2b823b1e72eae2b727289df8a00a89df8a0bab6ad8a89c4c5c7a9b62a270000");
    org.jsecurity.authc.credential.Md2CredentialsMatcher var2 = new org.jsecurity.authc.credential.Md2CredentialsMatcher();
    org.jsecurity.authz.SimpleAuthorizingAccount var4 = new org.jsecurity.authz.SimpleAuthorizingAccount((java.lang.Object)"a2b823b1e72eae2b727289df8a00a89df8a0bab6ad8a89c4c5c7a9b62a270000", (java.lang.Object)var2, "");
    org.jsecurity.authz.SimpleAuthorizationInfo var5 = new org.jsecurity.authz.SimpleAuthorizationInfo();
    java.util.Set var6 = var5.getStringPermissions();
    org.jsecurity.authz.SimpleAuthorizationInfo var8 = new org.jsecurity.authz.SimpleAuthorizationInfo();
    org.jsecurity.session.UnknownSessionException var13 = new org.jsecurity.session.UnknownSessionException("dd\uFFFD", (java.io.Serializable)100.0f);
    org.jsecurity.subject.SubjectException var14 = new org.jsecurity.subject.SubjectException("dd\uFFFD", (java.lang.Throwable)var13);
    org.jsecurity.io.SerializationException var15 = new org.jsecurity.io.SerializationException("", (java.lang.Throwable)var14);
    java.lang.Throwable[] var16 = var14.getSuppressed();
    java.util.Set var17 = org.jsecurity.util.CollectionUtils.asSet((java.lang.Object[])var16);
    var8.setStringPermissions(var17);
    java.util.Set var19 = var8.getRoles();
    org.jsecurity.authz.SimpleAuthorizationInfo var20 = new org.jsecurity.authz.SimpleAuthorizationInfo();
    var20.addRole("a2b823b1e72eae2b727289df8a00a89df8a0bab6ad8a89c4c5c7a9b62a270000");
    org.jsecurity.session.UnknownSessionException var27 = new org.jsecurity.session.UnknownSessionException("dd\uFFFD", (java.io.Serializable)100.0f);
    org.jsecurity.subject.SubjectException var28 = new org.jsecurity.subject.SubjectException("dd\uFFFD", (java.lang.Throwable)var27);
    org.jsecurity.io.SerializationException var29 = new org.jsecurity.io.SerializationException("", (java.lang.Throwable)var28);
    java.lang.Throwable[] var30 = var28.getSuppressed();
    java.util.Set var31 = org.jsecurity.util.CollectionUtils.asSet((java.lang.Object[])var30);
    var20.addRoles((java.util.Collection)var31);
    var8.setRoles(var31);
    org.jsecurity.authz.SimpleRole var34 = new org.jsecurity.authz.SimpleRole("org.jsecurity.authz.UnauthorizedException: org.jsecurity.session.ExpiredSessionException: ", var31);
    var5.addStringPermissions((java.util.Collection)var31);
    boolean var36 = var4.isPermittedAll((java.util.Collection)var31);
    boolean var37 = var4.isCredentialsExpired();
    org.jsecurity.authz.SimpleRole var38 = new org.jsecurity.authz.SimpleRole();
    org.jsecurity.authz.SimpleAuthorizationInfo var39 = new org.jsecurity.authz.SimpleAuthorizationInfo();
    var39.addRole("a2b823b1e72eae2b727289df8a00a89df8a0bab6ad8a89c4c5c7a9b62a270000");
    org.jsecurity.session.UnknownSessionException var46 = new org.jsecurity.session.UnknownSessionException("dd\uFFFD", (java.io.Serializable)100.0f);
    org.jsecurity.subject.SubjectException var47 = new org.jsecurity.subject.SubjectException("dd\uFFFD", (java.lang.Throwable)var46);
    org.jsecurity.io.SerializationException var48 = new org.jsecurity.io.SerializationException("", (java.lang.Throwable)var47);
    java.lang.Throwable[] var49 = var47.getSuppressed();
    java.util.Set var50 = org.jsecurity.util.CollectionUtils.asSet((java.lang.Object[])var49);
    var39.addRoles((java.util.Collection)var50);
    var38.addAll((java.util.Collection)var50);
    org.jsecurity.authz.SimpleRole var53 = new org.jsecurity.authz.SimpleRole();
    org.jsecurity.authz.SimpleAuthorizationInfo var54 = new org.jsecurity.authz.SimpleAuthorizationInfo();
    var54.addRole("a2b823b1e72eae2b727289df8a00a89df8a0bab6ad8a89c4c5c7a9b62a270000");
    org.jsecurity.session.UnknownSessionException var61 = new org.jsecurity.session.UnknownSessionException("dd\uFFFD", (java.io.Serializable)100.0f);
    org.jsecurity.subject.SubjectException var62 = new org.jsecurity.subject.SubjectException("dd\uFFFD", (java.lang.Throwable)var61);
    org.jsecurity.io.SerializationException var63 = new org.jsecurity.io.SerializationException("", (java.lang.Throwable)var62);
    java.lang.Throwable[] var64 = var62.getSuppressed();
    java.util.Set var65 = org.jsecurity.util.CollectionUtils.asSet((java.lang.Object[])var64);
    var54.addRoles((java.util.Collection)var65);
    var53.addAll((java.util.Collection)var65);
    java.lang.String var68 = var53.getName();
    org.jsecurity.authz.permission.WildcardPermission var71 = new org.jsecurity.authz.permission.WildcardPermission("hi!", false);
    var53.add((org.jsecurity.authz.Permission)var71);
    var38.add((org.jsecurity.authz.Permission)var71);
    org.jsecurity.authz.SimpleAuthorizationInfo var75 = new org.jsecurity.authz.SimpleAuthorizationInfo();
    var75.addRole("a2b823b1e72eae2b727289df8a00a89df8a0bab6ad8a89c4c5c7a9b62a270000");
    org.jsecurity.session.UnknownSessionException var82 = new org.jsecurity.session.UnknownSessionException("dd\uFFFD", (java.io.Serializable)100.0f);
    org.jsecurity.subject.SubjectException var83 = new org.jsecurity.subject.SubjectException("dd\uFFFD", (java.lang.Throwable)var82);
    org.jsecurity.io.SerializationException var84 = new org.jsecurity.io.SerializationException("", (java.lang.Throwable)var83);
    java.lang.Throwable[] var85 = var83.getSuppressed();
    java.util.Set var86 = org.jsecurity.util.CollectionUtils.asSet((java.lang.Object[])var85);
    var75.addRoles((java.util.Collection)var86);
    org.jsecurity.authz.SimpleRole var88 = new org.jsecurity.authz.SimpleRole("dd\uFFFD", var86);
    var38.setPermissions(var86);
    org.jsecurity.authz.SimpleAuthorizationInfo var90 = new org.jsecurity.authz.SimpleAuthorizationInfo(var86);
    var4.setRoles(var86);
    var4.addRole("org.jsecurity.realm.text.PropertiesRealm-400-authorization");
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var1);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var6);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var16);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var17);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var19);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var30);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var31);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var36 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var37 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var49);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var50);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var64);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var65);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var68);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var85);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var86);

  }

  public void test36() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest7.test36");


    org.jsecurity.crypto.hash.Sha384Hash var1 = org.jsecurity.crypto.hash.Sha384Hash.fromBase64String("88340016-ef51-4123-8332-9557d9abe70e");
    java.lang.String var2 = var1.toHex();
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var2 + "' != '" + "f3cdf8d34d7a79fe75e35db7f37df6f79e7b77d69b7bbd1e"+ "'", var2.equals("f3cdf8d34d7a79fe75e35db7f37df6f79e7b77d69b7bbd1e"));

  }

  public void test37() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest7.test37");


    org.jsecurity.authz.SimpleAuthorizationInfo var0 = new org.jsecurity.authz.SimpleAuthorizationInfo();
    org.jsecurity.session.UnknownSessionException var5 = new org.jsecurity.session.UnknownSessionException("dd\uFFFD", (java.io.Serializable)100.0f);
    org.jsecurity.subject.SubjectException var6 = new org.jsecurity.subject.SubjectException("dd\uFFFD", (java.lang.Throwable)var5);
    org.jsecurity.io.SerializationException var7 = new org.jsecurity.io.SerializationException("", (java.lang.Throwable)var6);
    java.lang.Throwable[] var8 = var6.getSuppressed();
    java.util.Set var9 = org.jsecurity.util.CollectionUtils.asSet((java.lang.Object[])var8);
    var0.setStringPermissions(var9);
    java.util.Set var11 = var0.getRoles();
    org.jsecurity.authz.SimpleAuthorizationInfo var12 = new org.jsecurity.authz.SimpleAuthorizationInfo();
    var12.addRole("a2b823b1e72eae2b727289df8a00a89df8a0bab6ad8a89c4c5c7a9b62a270000");
    org.jsecurity.session.UnknownSessionException var19 = new org.jsecurity.session.UnknownSessionException("dd\uFFFD", (java.io.Serializable)100.0f);
    org.jsecurity.subject.SubjectException var20 = new org.jsecurity.subject.SubjectException("dd\uFFFD", (java.lang.Throwable)var19);
    org.jsecurity.io.SerializationException var21 = new org.jsecurity.io.SerializationException("", (java.lang.Throwable)var20);
    java.lang.Throwable[] var22 = var20.getSuppressed();
    java.util.Set var23 = org.jsecurity.util.CollectionUtils.asSet((java.lang.Object[])var22);
    var12.addRoles((java.util.Collection)var23);
    var0.setRoles(var23);
    org.jsecurity.authz.SimpleAuthorizationInfo var26 = new org.jsecurity.authz.SimpleAuthorizationInfo();
    org.jsecurity.session.UnknownSessionException var31 = new org.jsecurity.session.UnknownSessionException("dd\uFFFD", (java.io.Serializable)100.0f);
    org.jsecurity.subject.SubjectException var32 = new org.jsecurity.subject.SubjectException("dd\uFFFD", (java.lang.Throwable)var31);
    org.jsecurity.io.SerializationException var33 = new org.jsecurity.io.SerializationException("", (java.lang.Throwable)var32);
    java.lang.Throwable[] var34 = var32.getSuppressed();
    java.util.Set var35 = org.jsecurity.util.CollectionUtils.asSet((java.lang.Object[])var34);
    var26.setStringPermissions(var35);
    java.util.Set var37 = var26.getRoles();
    org.jsecurity.authz.SimpleAuthorizationInfo var38 = new org.jsecurity.authz.SimpleAuthorizationInfo();
    var38.addRole("a2b823b1e72eae2b727289df8a00a89df8a0bab6ad8a89c4c5c7a9b62a270000");
    org.jsecurity.session.UnknownSessionException var45 = new org.jsecurity.session.UnknownSessionException("dd\uFFFD", (java.io.Serializable)100.0f);
    org.jsecurity.subject.SubjectException var46 = new org.jsecurity.subject.SubjectException("dd\uFFFD", (java.lang.Throwable)var45);
    org.jsecurity.io.SerializationException var47 = new org.jsecurity.io.SerializationException("", (java.lang.Throwable)var46);
    java.lang.Throwable[] var48 = var46.getSuppressed();
    java.util.Set var49 = org.jsecurity.util.CollectionUtils.asSet((java.lang.Object[])var48);
    var38.addRoles((java.util.Collection)var49);
    var26.setRoles(var49);
    var0.setRoles(var49);
    org.jsecurity.authz.ModularRealmAuthorizer var53 = new org.jsecurity.authz.ModularRealmAuthorizer((java.util.Collection)var49);
    java.util.Collection var54 = var53.getRealms();
    java.util.Collection var55 = var53.getRealms();
    java.io.InputStream var57 = org.jsecurity.util.ClassUtils.getResourceAsStream("");
    java.lang.Object[] var58 = new java.lang.Object[] { var57};
    java.util.List var59 = org.jsecurity.util.CollectionUtils.asList(var58);
    org.jsecurity.authc.pam.ModularRealmAuthenticator var60 = new org.jsecurity.authc.pam.ModularRealmAuthenticator(var59);
    org.jsecurity.subject.SimplePrincipalCollection var62 = new org.jsecurity.subject.SimplePrincipalCollection((java.util.Collection)var59, "org.jsecurity.authz.UnauthorizedException: org.jsecurity.session.ExpiredSessionException: ");
    org.jsecurity.session.UnknownSessionException var67 = new org.jsecurity.session.UnknownSessionException("dd\uFFFD", (java.io.Serializable)100.0f);
    org.jsecurity.session.SessionException var69 = new org.jsecurity.session.SessionException("dd\uFFFD", (java.lang.Throwable)var67, (java.io.Serializable)0);
    org.jsecurity.session.SessionException var70 = new org.jsecurity.session.SessionException("dd\uFFFD", (java.lang.Throwable)var67);
    var62.add((java.lang.Object)var70, "org.jsecurity.config.ConfigurationException: dd\uFFFD");
    java.util.Set var73 = var62.asSet();
    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      var53.checkPermission((org.jsecurity.subject.PrincipalCollection)var62, "97fe9e36-743e-4ede-8eb3-665a83a8d5e6");
      fail("Expected exception of type java.lang.IllegalStateException");
    } catch (java.lang.IllegalStateException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var8);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var9);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var11);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var22);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var23);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var34);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var35);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var37);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var48);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var49);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var54);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var55);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var57);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var58);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var59);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var73);

  }

  public void test38() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest7.test38");


    java.io.InputStream var1 = org.jsecurity.util.ClassUtils.getResourceAsStream("");
    java.lang.Object[] var2 = new java.lang.Object[] { var1};
    java.util.List var3 = org.jsecurity.util.CollectionUtils.asList(var2);
    org.jsecurity.authc.pam.ModularRealmAuthenticator var4 = new org.jsecurity.authc.pam.ModularRealmAuthenticator(var3);
    java.io.InputStream var6 = org.jsecurity.util.ClassUtils.getResourceAsStream("");
    java.lang.Object[] var7 = new java.lang.Object[] { var6};
    java.util.List var8 = org.jsecurity.util.CollectionUtils.asList(var7);
    org.jsecurity.authc.pam.ModularRealmAuthenticator var9 = new org.jsecurity.authc.pam.ModularRealmAuthenticator(var8);
    var4.setRealms((java.util.Collection)var8);
    org.jsecurity.subject.SimplePrincipalCollection var12 = new org.jsecurity.subject.SimplePrincipalCollection((java.util.Collection)var8, "org.jsecurity.realm.SimpleAccountRealm-9-authorization");
    org.jsecurity.crypto.BlowfishCipher var13 = new org.jsecurity.crypto.BlowfishCipher();
    java.security.Key var14 = org.jsecurity.crypto.BlowfishCipher.generateNewKey();
    var13.setKey(var14);
    org.jsecurity.authz.SimpleAuthorizingAccount var16 = new org.jsecurity.authz.SimpleAuthorizingAccount((org.jsecurity.subject.PrincipalCollection)var12, (java.lang.Object)var14);
    org.jsecurity.authz.SimpleAuthorizationInfo var17 = new org.jsecurity.authz.SimpleAuthorizationInfo();
    org.jsecurity.session.UnknownSessionException var22 = new org.jsecurity.session.UnknownSessionException("dd\uFFFD", (java.io.Serializable)100.0f);
    org.jsecurity.subject.SubjectException var23 = new org.jsecurity.subject.SubjectException("dd\uFFFD", (java.lang.Throwable)var22);
    org.jsecurity.io.SerializationException var24 = new org.jsecurity.io.SerializationException("", (java.lang.Throwable)var23);
    java.lang.Throwable[] var25 = var23.getSuppressed();
    java.util.Set var26 = org.jsecurity.util.CollectionUtils.asSet((java.lang.Object[])var25);
    var17.setStringPermissions(var26);
    java.util.Set var28 = var17.getStringPermissions();
    var16.addRoles(var28);
    org.jsecurity.authz.SimpleAuthorizationInfo var30 = new org.jsecurity.authz.SimpleAuthorizationInfo();
    var30.addStringPermission("hi!");
    java.io.InputStream var34 = org.jsecurity.util.ClassUtils.getResourceAsStream("");
    java.lang.Object[] var35 = new java.lang.Object[] { var34};
    java.util.List var36 = org.jsecurity.util.CollectionUtils.asList(var35);
    var30.addRoles((java.util.Collection)var36);
    java.util.Set var38 = var30.getRoles();
    java.util.Set var39 = var30.getStringPermissions();
    var16.setRoles(var39);
    var16.setLocked(false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var1);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var2);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var3);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var6);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var7);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var8);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var14);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var25);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var26);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var28);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var34);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var35);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var36);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var38);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var39);

  }

  public void test39() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest7.test39");


    org.jsecurity.crypto.hash.Md2Hash var2 = org.jsecurity.crypto.hash.Md2Hash.fromBase64String("a2b823b1e72eae2b727289df8a00a89df8a0bab6ad8a89c4c5c7a9b62a270000");
    org.jsecurity.authc.credential.Md2CredentialsMatcher var3 = new org.jsecurity.authc.credential.Md2CredentialsMatcher();
    org.jsecurity.authz.SimpleAuthorizingAccount var5 = new org.jsecurity.authz.SimpleAuthorizingAccount((java.lang.Object)"a2b823b1e72eae2b727289df8a00a89df8a0bab6ad8a89c4c5c7a9b62a270000", (java.lang.Object)var3, "");
    org.jsecurity.session.SessionException var6 = new org.jsecurity.session.SessionException("org.jsecurity.realm.SimpleAccountRealm-9-authorization", (java.io.Serializable)var5);
    org.jsecurity.authz.SimpleAuthorizationInfo var7 = new org.jsecurity.authz.SimpleAuthorizationInfo();
    org.jsecurity.realm.jndi.JndiRealmFactory var8 = new org.jsecurity.realm.jndi.JndiRealmFactory();
    java.io.InputStream var10 = org.jsecurity.util.ClassUtils.getResourceAsStream("");
    java.lang.Object[] var11 = new java.lang.Object[] { var10};
    java.util.List var12 = org.jsecurity.util.CollectionUtils.asList(var11);
    var8.setJndiNames((java.util.Collection)var12);
    org.jsecurity.authz.SimpleRole var14 = new org.jsecurity.authz.SimpleRole();
    org.jsecurity.authz.SimpleAuthorizationInfo var15 = new org.jsecurity.authz.SimpleAuthorizationInfo();
    var15.addRole("a2b823b1e72eae2b727289df8a00a89df8a0bab6ad8a89c4c5c7a9b62a270000");
    org.jsecurity.session.UnknownSessionException var22 = new org.jsecurity.session.UnknownSessionException("dd\uFFFD", (java.io.Serializable)100.0f);
    org.jsecurity.subject.SubjectException var23 = new org.jsecurity.subject.SubjectException("dd\uFFFD", (java.lang.Throwable)var22);
    org.jsecurity.io.SerializationException var24 = new org.jsecurity.io.SerializationException("", (java.lang.Throwable)var23);
    java.lang.Throwable[] var25 = var23.getSuppressed();
    java.util.Set var26 = org.jsecurity.util.CollectionUtils.asSet((java.lang.Object[])var25);
    var15.addRoles((java.util.Collection)var26);
    var14.addAll((java.util.Collection)var26);
    var8.setJndiNames((java.util.Collection)var26);
    var7.setStringPermissions(var26);
    var5.addAll((java.util.Collection)var26);
    var5.addStringPermission("3ea0b55f-199e-4289-aeec-f7716cc7356a");
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var2);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var10);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var11);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var12);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var25);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var26);

  }

  public void test40() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest7.test40");


    org.jsecurity.codec.CodecException var2 = new org.jsecurity.codec.CodecException("dd\uFFFD");
    org.jsecurity.authc.ConcurrentAccessException var3 = new org.jsecurity.authc.ConcurrentAccessException("org.jsecurity.authz.UnauthorizedException: org.jsecurity.session.ExpiredSessionException: ", (java.lang.Throwable)var2);
    org.jsecurity.subject.SimplePrincipalCollection var5 = new org.jsecurity.subject.SimplePrincipalCollection((java.lang.Object)var2, "");
    boolean var6 = var5.isEmpty();
    java.util.List var7 = var5.asList();
    org.jsecurity.authc.pam.ModularRealmAuthenticator var8 = new org.jsecurity.authc.pam.ModularRealmAuthenticator(var7);
    org.jsecurity.cache.HashtableCache var10 = new org.jsecurity.cache.HashtableCache("5dd0c65d-1422-49c2-becb-9e8dca619ab3");
    org.jsecurity.realm.text.TextConfigurationRealm var11 = new org.jsecurity.realm.text.TextConfigurationRealm();
    java.io.InputStream var13 = org.jsecurity.util.ClassUtils.getResourceAsStream("");
    java.lang.Object[] var14 = new java.lang.Object[] { var13};
    java.util.List var15 = org.jsecurity.util.CollectionUtils.asList(var14);
    org.jsecurity.authc.pam.ModularRealmAuthenticator var16 = new org.jsecurity.authc.pam.ModularRealmAuthenticator(var15);
    org.jsecurity.subject.SimplePrincipalCollection var18 = new org.jsecurity.subject.SimplePrincipalCollection((java.util.Collection)var15, "org.jsecurity.authz.UnauthorizedException: org.jsecurity.session.ExpiredSessionException: ");
    org.jsecurity.session.UnknownSessionException var23 = new org.jsecurity.session.UnknownSessionException("dd\uFFFD", (java.io.Serializable)100.0f);
    org.jsecurity.session.SessionException var25 = new org.jsecurity.session.SessionException("dd\uFFFD", (java.lang.Throwable)var23, (java.io.Serializable)0);
    org.jsecurity.session.SessionException var26 = new org.jsecurity.session.SessionException("dd\uFFFD", (java.lang.Throwable)var23);
    var18.add((java.lang.Object)var26, "org.jsecurity.config.ConfigurationException: dd\uFFFD");
    var11.onLogout((org.jsecurity.subject.PrincipalCollection)var18);
    org.jsecurity.cache.HashtableCacheManager var30 = new org.jsecurity.cache.HashtableCacheManager();
    org.jsecurity.cache.Cache var32 = var30.getCache("\u0000\u0000");
    var11.setAuthorizationCache(var32);
    org.jsecurity.authc.DisabledAccountException var36 = new org.jsecurity.authc.DisabledAccountException("org.jsecurity.authz.UnauthorizedException: org.jsecurity.session.ExpiredSessionException: ");
    org.jsecurity.session.UnknownSessionException var42 = new org.jsecurity.session.UnknownSessionException("dd\uFFFD", (java.io.Serializable)100.0f);
    org.jsecurity.subject.SubjectException var43 = new org.jsecurity.subject.SubjectException("dd\uFFFD", (java.lang.Throwable)var42);
    org.jsecurity.session.InvalidSessionException var44 = new org.jsecurity.session.InvalidSessionException("hi!", (java.lang.Throwable)var43);
    org.jsecurity.session.SessionException var45 = new org.jsecurity.session.SessionException("dd\uFFFD", (java.lang.Throwable)var43);
    org.jsecurity.session.SessionException var46 = new org.jsecurity.session.SessionException("hi!", (java.lang.Throwable)var36, (java.io.Serializable)var43);
    var10.put((java.lang.Object)var11, (java.lang.Object)var46);
    var8.setRealm((org.jsecurity.realm.Realm)var11);
    java.lang.String var49 = var11.getUserDefinitions();
    org.jsecurity.authc.pam.ModularRealmAuthenticator var50 = new org.jsecurity.authc.pam.ModularRealmAuthenticator((org.jsecurity.realm.Realm)var11);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var6 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var7);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var13);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var14);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var15);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var32);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var49);

  }

  public void test41() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest7.test41");


    org.jsecurity.io.ResourceException var3 = new org.jsecurity.io.ResourceException("org.jsecurity.realm.SimpleAccountRealm-52-authorization");
    org.jsecurity.authz.UnauthorizedException var4 = new org.jsecurity.authz.UnauthorizedException("8aec7b5f-69b5-4558-9a4d-fda02fdc6486", (java.lang.Throwable)var3);
    org.jsecurity.session.StoppedSessionException var5 = new org.jsecurity.session.StoppedSessionException("269e1a21-00d4-4366-b735-22c165cc08e0", (java.lang.Throwable)var3);

  }

  public void test42() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest7.test42");


    org.jsecurity.mgt.DefaultSecurityManager var0 = new org.jsecurity.mgt.DefaultSecurityManager();
    java.io.InputStream var2 = org.jsecurity.util.ClassUtils.getResourceAsStream("");
    java.lang.Object[] var3 = new java.lang.Object[] { var2};
    java.util.List var4 = org.jsecurity.util.CollectionUtils.asList(var3);
    org.jsecurity.authc.pam.ModularRealmAuthenticator var5 = new org.jsecurity.authc.pam.ModularRealmAuthenticator(var4);
    org.jsecurity.authc.pam.AllSuccessfulModularAuthenticationStrategy var6 = new org.jsecurity.authc.pam.AllSuccessfulModularAuthenticationStrategy();
    var5.setModularAuthenticationStrategy((org.jsecurity.authc.pam.ModularAuthenticationStrategy)var6);
    org.jsecurity.authz.SimpleAuthorizationInfo var8 = new org.jsecurity.authz.SimpleAuthorizationInfo();
    var8.addStringPermission("hi!");
    java.io.InputStream var12 = org.jsecurity.util.ClassUtils.getResourceAsStream("");
    java.lang.Object[] var13 = new java.lang.Object[] { var12};
    java.util.List var14 = org.jsecurity.util.CollectionUtils.asList(var13);
    var8.addRoles((java.util.Collection)var14);
    var5.setAuthenticationListeners((java.util.Collection)var14);
    var0.setSessionListeners((java.util.Collection)var14);
    org.jsecurity.authc.pam.ModularRealmAuthenticator var18 = new org.jsecurity.authc.pam.ModularRealmAuthenticator();
    org.jsecurity.authz.permission.InvalidPermissionStringException var21 = new org.jsecurity.authz.permission.InvalidPermissionStringException("", "dd\uFFFD");
    org.jsecurity.JSecurityException var23 = new org.jsecurity.JSecurityException("");
    org.jsecurity.authc.SimpleAuthenticationInfo var25 = new org.jsecurity.authc.SimpleAuthenticationInfo((java.lang.Object)var21, (java.lang.Object)"", "org.jsecurity.authz.UnauthorizedException: org.jsecurity.session.ExpiredSessionException: ");
    org.jsecurity.subject.PrincipalCollection var26 = var25.getPrincipals();
    var18.onLogout(var26);
    var0.setAuthenticator((org.jsecurity.authc.Authenticator)var18);
    org.jsecurity.codec.CodecException var31 = new org.jsecurity.codec.CodecException("dd\uFFFD");
    org.jsecurity.authc.ConcurrentAccessException var32 = new org.jsecurity.authc.ConcurrentAccessException("org.jsecurity.authz.UnauthorizedException: org.jsecurity.session.ExpiredSessionException: ", (java.lang.Throwable)var31);
    org.jsecurity.subject.SimplePrincipalCollection var34 = new org.jsecurity.subject.SimplePrincipalCollection((java.lang.Object)var31, "");
    org.jsecurity.authc.pam.FirstSuccessfulAuthenticationStrategy var35 = new org.jsecurity.authc.pam.FirstSuccessfulAuthenticationStrategy();
    org.jsecurity.authz.UnauthorizedException var37 = new org.jsecurity.authz.UnauthorizedException("org.jsecurity.config.ConfigurationException: dd\uFFFD");
    java.lang.Throwable[] var38 = var37.getSuppressed();
    java.util.List var39 = org.jsecurity.util.CollectionUtils.asList((java.lang.Object[])var38);
    org.jsecurity.authc.UsernamePasswordToken var40 = new org.jsecurity.authc.UsernamePasswordToken();
    java.lang.String var41 = var40.getUsername();
    java.net.InetAddress var42 = var40.getInetAddress();
    org.jsecurity.authc.AuthenticationInfo var43 = var35.beforeAllAttempts((java.util.Collection)var39, (org.jsecurity.authc.AuthenticationToken)var40);
    org.jsecurity.session.UnknownSessionException var48 = new org.jsecurity.session.UnknownSessionException("dd\uFFFD", (java.io.Serializable)100.0f);
    org.jsecurity.subject.SubjectException var49 = new org.jsecurity.subject.SubjectException("dd\uFFFD", (java.lang.Throwable)var48);
    org.jsecurity.io.SerializationException var50 = new org.jsecurity.io.SerializationException("", (java.lang.Throwable)var49);
    java.lang.Throwable[] var51 = var49.getSuppressed();
    java.util.Set var52 = org.jsecurity.util.CollectionUtils.asSet((java.lang.Object[])var51);
    org.jsecurity.authc.SimpleAccount var53 = new org.jsecurity.authc.SimpleAccount((org.jsecurity.subject.PrincipalCollection)var34, (java.lang.Object)var39, var52);
    java.io.InputStream var55 = org.jsecurity.util.ClassUtils.getResourceAsStream("");
    java.lang.Object[] var56 = new java.lang.Object[] { var55};
    java.util.List var57 = org.jsecurity.util.CollectionUtils.asList(var56);
    org.jsecurity.authc.pam.ModularRealmAuthenticator var58 = new org.jsecurity.authc.pam.ModularRealmAuthenticator(var57);
    org.jsecurity.subject.SimplePrincipalCollection var60 = new org.jsecurity.subject.SimplePrincipalCollection((java.util.Collection)var57, "org.jsecurity.authz.UnauthorizedException: org.jsecurity.session.ExpiredSessionException: ");
    org.jsecurity.io.ResourceException var64 = new org.jsecurity.io.ResourceException("hi!");
    org.jsecurity.authc.UnknownAccountException var65 = new org.jsecurity.authc.UnknownAccountException((java.lang.Throwable)var64);
    org.jsecurity.session.StoppedSessionException var66 = new org.jsecurity.session.StoppedSessionException("dd\uFFFD", (java.io.Serializable)var64);
    org.jsecurity.session.UnknownSessionException var67 = new org.jsecurity.session.UnknownSessionException("org.jsecurity.authz.UnauthorizedException: org.jsecurity.session.ExpiredSessionException: ", (java.lang.Throwable)var64);
    boolean var68 = var60.equals((java.lang.Object)var64);
    var34.addAll((org.jsecurity.subject.PrincipalCollection)var60);
    org.jsecurity.session.UnknownSessionException var74 = new org.jsecurity.session.UnknownSessionException("dd\uFFFD", (java.io.Serializable)100.0f);
    org.jsecurity.subject.SubjectException var75 = new org.jsecurity.subject.SubjectException("dd\uFFFD", (java.lang.Throwable)var74);
    org.jsecurity.io.SerializationException var76 = new org.jsecurity.io.SerializationException("", (java.lang.Throwable)var75);
    java.lang.Throwable[] var77 = var75.getSuppressed();
    java.util.List var78 = org.jsecurity.util.CollectionUtils.asList((java.lang.Object[])var77);
    boolean var79 = var0.isPermittedAll((org.jsecurity.subject.PrincipalCollection)var34, (java.util.Collection)var78);
    org.jsecurity.realm.text.PropertiesRealm var80 = new org.jsecurity.realm.text.PropertiesRealm();
    var0.setRealm((org.jsecurity.realm.Realm)var80);
    var80.setReloadIntervalSeconds((-1));
    org.jsecurity.realm.SimpleAccountRealm var85 = new org.jsecurity.realm.SimpleAccountRealm("hi!");
    java.lang.Class var86 = var85.getAuthenticationTokenClass();
    var80.setAuthenticationTokenClass(var86);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var2);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var3);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var4);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var12);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var13);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var14);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var26);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var38);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var39);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var41);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var42);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var43);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var51);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var52);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var55);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var56);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var57);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var68 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var77);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var78);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var79 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var86);

  }

  public void test43() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest7.test43");


    org.jsecurity.io.SerializationException var1 = new org.jsecurity.io.SerializationException();
    org.jsecurity.config.ConfigurationException var2 = new org.jsecurity.config.ConfigurationException((java.lang.Throwable)var1);
    org.jsecurity.authc.IncorrectCredentialsException var3 = new org.jsecurity.authc.IncorrectCredentialsException("org.jsecurity.config.ConfigurationException: dd\uFFFD", (java.lang.Throwable)var1);
    org.jsecurity.mgt.DefaultSecurityManager var4 = new org.jsecurity.mgt.DefaultSecurityManager();
    java.io.InputStream var6 = org.jsecurity.util.ClassUtils.getResourceAsStream("");
    java.lang.Object[] var7 = new java.lang.Object[] { var6};
    java.util.List var8 = org.jsecurity.util.CollectionUtils.asList(var7);
    org.jsecurity.authc.pam.ModularRealmAuthenticator var9 = new org.jsecurity.authc.pam.ModularRealmAuthenticator(var8);
    org.jsecurity.authc.pam.AllSuccessfulModularAuthenticationStrategy var10 = new org.jsecurity.authc.pam.AllSuccessfulModularAuthenticationStrategy();
    var9.setModularAuthenticationStrategy((org.jsecurity.authc.pam.ModularAuthenticationStrategy)var10);
    org.jsecurity.authz.SimpleAuthorizationInfo var12 = new org.jsecurity.authz.SimpleAuthorizationInfo();
    var12.addStringPermission("hi!");
    java.io.InputStream var16 = org.jsecurity.util.ClassUtils.getResourceAsStream("");
    java.lang.Object[] var17 = new java.lang.Object[] { var16};
    java.util.List var18 = org.jsecurity.util.CollectionUtils.asList(var17);
    var12.addRoles((java.util.Collection)var18);
    var9.setAuthenticationListeners((java.util.Collection)var18);
    var4.setSessionListeners((java.util.Collection)var18);
    org.jsecurity.realm.text.TextConfigurationRealm var22 = new org.jsecurity.realm.text.TextConfigurationRealm();
    java.io.InputStream var24 = org.jsecurity.util.ClassUtils.getResourceAsStream("");
    java.lang.Object[] var25 = new java.lang.Object[] { var24};
    java.util.List var26 = org.jsecurity.util.CollectionUtils.asList(var25);
    org.jsecurity.authc.pam.ModularRealmAuthenticator var27 = new org.jsecurity.authc.pam.ModularRealmAuthenticator(var26);
    org.jsecurity.subject.SimplePrincipalCollection var29 = new org.jsecurity.subject.SimplePrincipalCollection((java.util.Collection)var26, "org.jsecurity.authz.UnauthorizedException: org.jsecurity.session.ExpiredSessionException: ");
    org.jsecurity.session.UnknownSessionException var34 = new org.jsecurity.session.UnknownSessionException("dd\uFFFD", (java.io.Serializable)100.0f);
    org.jsecurity.session.SessionException var36 = new org.jsecurity.session.SessionException("dd\uFFFD", (java.lang.Throwable)var34, (java.io.Serializable)0);
    org.jsecurity.session.SessionException var37 = new org.jsecurity.session.SessionException("dd\uFFFD", (java.lang.Throwable)var34);
    var29.add((java.lang.Object)var37, "org.jsecurity.config.ConfigurationException: dd\uFFFD");
    var22.onLogout((org.jsecurity.subject.PrincipalCollection)var29);
    org.jsecurity.authc.pam.FirstSuccessfulAuthenticationStrategy var41 = new org.jsecurity.authc.pam.FirstSuccessfulAuthenticationStrategy();
    org.jsecurity.authz.UnauthorizedException var43 = new org.jsecurity.authz.UnauthorizedException("org.jsecurity.config.ConfigurationException: dd\uFFFD");
    java.lang.Throwable[] var44 = var43.getSuppressed();
    java.util.List var45 = org.jsecurity.util.CollectionUtils.asList((java.lang.Object[])var44);
    org.jsecurity.authc.UsernamePasswordToken var46 = new org.jsecurity.authc.UsernamePasswordToken();
    java.lang.String var47 = var46.getUsername();
    java.net.InetAddress var48 = var46.getInetAddress();
    org.jsecurity.authc.AuthenticationInfo var49 = var41.beforeAllAttempts((java.util.Collection)var45, (org.jsecurity.authc.AuthenticationToken)var46);
    boolean[] var50 = var4.hasRoles((org.jsecurity.subject.PrincipalCollection)var29, var45);
    org.jsecurity.codec.CodecException var53 = new org.jsecurity.codec.CodecException("dd\uFFFD");
    org.jsecurity.authc.ConcurrentAccessException var54 = new org.jsecurity.authc.ConcurrentAccessException("org.jsecurity.authz.UnauthorizedException: org.jsecurity.session.ExpiredSessionException: ", (java.lang.Throwable)var53);
    org.jsecurity.subject.SimplePrincipalCollection var56 = new org.jsecurity.subject.SimplePrincipalCollection((java.lang.Object)var53, "");
    java.io.InputStream var58 = org.jsecurity.util.ClassUtils.getResourceAsStream("");
    java.lang.Object[] var59 = new java.lang.Object[] { var58};
    java.util.List var60 = org.jsecurity.util.CollectionUtils.asList(var59);
    org.jsecurity.authc.pam.ModularRealmAuthenticator var61 = new org.jsecurity.authc.pam.ModularRealmAuthenticator(var60);
    var56.addAll((java.util.Collection)var60, "\u0000\u0000");
    var4.setSessionListeners((java.util.Collection)var60);
    org.jsecurity.session.mgt.DefaultSessionManager var65 = new org.jsecurity.session.mgt.DefaultSessionManager();
    org.jsecurity.mgt.DefaultSecurityManager var66 = new org.jsecurity.mgt.DefaultSecurityManager();
    org.jsecurity.authz.permission.WildcardPermissionResolver var67 = new org.jsecurity.authz.permission.WildcardPermissionResolver();
    var66.setPermissionResolver((org.jsecurity.authz.permission.PermissionResolver)var67);
    org.jsecurity.cache.CacheManager var69 = var66.getCacheManager();
    var65.setCacheManager(var69);
    org.jsecurity.session.mgt.SessionValidationScheduler var71 = var65.getSessionValidationScheduler();
    var4.setSessionManager((org.jsecurity.session.mgt.SessionManager)var65);
    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      org.jsecurity.crypto.hash.Sha256Hash var73 = new org.jsecurity.crypto.hash.Sha256Hash((java.lang.Object)var3, (java.lang.Object)var4);
      fail("Expected exception of type org.jsecurity.codec.CodecException");
    } catch (org.jsecurity.codec.CodecException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var6);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var7);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var8);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var16);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var17);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var18);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var24);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var25);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var26);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var44);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var45);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var47);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var48);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var49);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var50);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var58);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var59);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var60);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var69);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var71);

  }

  public void test44() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest7.test44");


    org.jsecurity.session.mgt.DelegatingSession var0 = new org.jsecurity.session.mgt.DelegatingSession();
    var0.setId((java.io.Serializable)"org.jsecurity.realm.SimpleAccountRealm-52-authorization");
    org.jsecurity.mgt.DefaultSecurityManager var3 = new org.jsecurity.mgt.DefaultSecurityManager();
    org.jsecurity.realm.text.TextConfigurationRealm var4 = new org.jsecurity.realm.text.TextConfigurationRealm();
    org.jsecurity.realm.text.TextConfigurationRealm var5 = new org.jsecurity.realm.text.TextConfigurationRealm();
    java.io.InputStream var7 = org.jsecurity.util.ClassUtils.getResourceAsStream("");
    java.lang.Object[] var8 = new java.lang.Object[] { var7};
    java.util.List var9 = org.jsecurity.util.CollectionUtils.asList(var8);
    org.jsecurity.authc.pam.ModularRealmAuthenticator var10 = new org.jsecurity.authc.pam.ModularRealmAuthenticator(var9);
    org.jsecurity.subject.SimplePrincipalCollection var12 = new org.jsecurity.subject.SimplePrincipalCollection((java.util.Collection)var9, "org.jsecurity.authz.UnauthorizedException: org.jsecurity.session.ExpiredSessionException: ");
    org.jsecurity.session.UnknownSessionException var17 = new org.jsecurity.session.UnknownSessionException("dd\uFFFD", (java.io.Serializable)100.0f);
    org.jsecurity.session.SessionException var19 = new org.jsecurity.session.SessionException("dd\uFFFD", (java.lang.Throwable)var17, (java.io.Serializable)0);
    org.jsecurity.session.SessionException var20 = new org.jsecurity.session.SessionException("dd\uFFFD", (java.lang.Throwable)var17);
    var12.add((java.lang.Object)var20, "org.jsecurity.config.ConfigurationException: dd\uFFFD");
    var5.onLogout((org.jsecurity.subject.PrincipalCollection)var12);
    java.util.Collection var25 = var12.fromRealm("\u0000\u0000\u0000");
    var4.onLogout((org.jsecurity.subject.PrincipalCollection)var12);
    java.util.Set var27 = var12.asSet();
    org.jsecurity.realm.activedirectory.ActiveDirectoryRealm var28 = new org.jsecurity.realm.activedirectory.ActiveDirectoryRealm();
    org.jsecurity.authc.credential.Sha256CredentialsMatcher var29 = new org.jsecurity.authc.credential.Sha256CredentialsMatcher();
    var28.setCredentialsMatcher((org.jsecurity.authc.credential.CredentialsMatcher)var29);
    java.lang.String var31 = var28.getAuthorizationCacheName();
    var28.setPrincipalSuffix("org.jsecurity.config.ConfigurationException: dd\uFFFD");
    org.jsecurity.realm.text.TextConfigurationRealm var34 = new org.jsecurity.realm.text.TextConfigurationRealm();
    java.io.InputStream var36 = org.jsecurity.util.ClassUtils.getResourceAsStream("");
    java.lang.Object[] var37 = new java.lang.Object[] { var36};
    java.util.List var38 = org.jsecurity.util.CollectionUtils.asList(var37);
    org.jsecurity.authc.pam.ModularRealmAuthenticator var39 = new org.jsecurity.authc.pam.ModularRealmAuthenticator(var38);
    org.jsecurity.subject.SimplePrincipalCollection var41 = new org.jsecurity.subject.SimplePrincipalCollection((java.util.Collection)var38, "org.jsecurity.authz.UnauthorizedException: org.jsecurity.session.ExpiredSessionException: ");
    org.jsecurity.session.UnknownSessionException var46 = new org.jsecurity.session.UnknownSessionException("dd\uFFFD", (java.io.Serializable)100.0f);
    org.jsecurity.session.SessionException var48 = new org.jsecurity.session.SessionException("dd\uFFFD", (java.lang.Throwable)var46, (java.io.Serializable)0);
    org.jsecurity.session.SessionException var49 = new org.jsecurity.session.SessionException("dd\uFFFD", (java.lang.Throwable)var46);
    var41.add((java.lang.Object)var49, "org.jsecurity.config.ConfigurationException: dd\uFFFD");
    var34.onLogout((org.jsecurity.subject.PrincipalCollection)var41);
    var28.onLogout((org.jsecurity.subject.PrincipalCollection)var41);
    org.jsecurity.realm.SimpleAccountRealm var55 = new org.jsecurity.realm.SimpleAccountRealm("hi!");
    java.lang.Class var56 = var55.getAuthenticationTokenClass();
    java.util.Collection var57 = org.jsecurity.util.CollectionUtils.emptyCollection(var56);
    java.util.Collection var58 = var41.byType(var56);
    org.jsecurity.authz.ModularRealmAuthorizer var59 = new org.jsecurity.authz.ModularRealmAuthorizer(var58);
    var3.checkRoles((org.jsecurity.subject.PrincipalCollection)var12, var58);
    org.jsecurity.session.mgt.SessionManager var61 = var3.getSessionManager();
    var0.setSessionManager(var61);
    org.jsecurity.authz.UnauthorizedException var65 = new org.jsecurity.authz.UnauthorizedException();
    org.jsecurity.session.SessionException var67 = new org.jsecurity.session.SessionException("", (java.lang.Throwable)var65, (java.io.Serializable)"org.jsecurity.config.ConfigurationException: dd\uFFFD");
    org.jsecurity.session.ExpiredSessionException var68 = new org.jsecurity.session.ExpiredSessionException("", (java.io.Serializable)"");
    org.jsecurity.authz.UnauthorizedException var69 = new org.jsecurity.authz.UnauthorizedException((java.lang.Throwable)var68);
    org.jsecurity.authz.AuthorizationException var70 = new org.jsecurity.authz.AuthorizationException((java.lang.Throwable)var68);
    org.jsecurity.authc.ConcurrentAccessException var71 = new org.jsecurity.authc.ConcurrentAccessException((java.lang.Throwable)var70);
    org.jsecurity.util.UnavailableConstructorException var72 = new org.jsecurity.util.UnavailableConstructorException((java.lang.Throwable)var70);
    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      java.lang.Object var73 = var0.getAttribute((java.lang.Object)var70);
      fail("Expected exception of type org.jsecurity.session.UnknownSessionException");
    } catch (org.jsecurity.session.UnknownSessionException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var7);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var8);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var9);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var25);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var27);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var31);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var36);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var37);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var38);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var56);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var57);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var58);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var61);

  }

  public void test45() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest7.test45");


    org.jsecurity.crypto.hash.Md2Hash var1 = org.jsecurity.crypto.hash.Md2Hash.fromBase64String("a2b823b1e72eae2b727289df8a00a89df8a0bab6ad8a89c4c5c7a9b62a270000");
    org.jsecurity.authc.credential.Md2CredentialsMatcher var2 = new org.jsecurity.authc.credential.Md2CredentialsMatcher();
    org.jsecurity.authz.SimpleAuthorizingAccount var4 = new org.jsecurity.authz.SimpleAuthorizingAccount((java.lang.Object)"a2b823b1e72eae2b727289df8a00a89df8a0bab6ad8a89c4c5c7a9b62a270000", (java.lang.Object)var2, "");
    java.util.Collection var5 = var4.getRoles();
    boolean var7 = var4.hasRole("88340016-ef51-4123-8332-9557d9abe70e");
    boolean var9 = var4.hasRole("be750ca9-d7fd-4bd0-a0ae-e908c938eb8d");
    org.jsecurity.mgt.DefaultSecurityManager var10 = new org.jsecurity.mgt.DefaultSecurityManager();
    org.jsecurity.authc.pam.AllSuccessfulModularAuthenticationStrategy var11 = new org.jsecurity.authc.pam.AllSuccessfulModularAuthenticationStrategy();
    org.jsecurity.authc.pam.AllSuccessfulModularAuthenticationStrategy var12 = new org.jsecurity.authc.pam.AllSuccessfulModularAuthenticationStrategy();
    char[] var14 = new char[] { };
    org.jsecurity.authc.UsernamePasswordToken var16 = new org.jsecurity.authc.UsernamePasswordToken("hi!", var14, true);
    org.jsecurity.authc.SimpleAccount var17 = new org.jsecurity.authc.SimpleAccount();
    var17.setCredentialsExpired(false);
    boolean var20 = var17.isLocked();
    org.jsecurity.authc.AuthenticationInfo var21 = var12.afterAllAttempts((org.jsecurity.authc.AuthenticationToken)var16, (org.jsecurity.authc.AuthenticationInfo)var17);
    char[] var25 = new char[] { '4', '#'};
    org.jsecurity.authc.UsernamePasswordToken var26 = new org.jsecurity.authc.UsernamePasswordToken("\u0000\u0000", var25);
    org.jsecurity.authc.SimpleAccount var27 = new org.jsecurity.authc.SimpleAccount();
    var27.setCredentialsExpired(false);
    var27.setCredentialsExpired(false);
    boolean var32 = var27.isCredentialsExpired();
    org.jsecurity.authc.AuthenticationInfo var33 = var12.afterAllAttempts((org.jsecurity.authc.AuthenticationToken)var26, (org.jsecurity.authc.AuthenticationInfo)var27);
    org.jsecurity.authz.UnauthenticatedException var37 = new org.jsecurity.authz.UnauthenticatedException();
    org.jsecurity.config.UnresolveableReferenceException var38 = new org.jsecurity.config.UnresolveableReferenceException("", (java.lang.Throwable)var37);
    org.jsecurity.cache.CacheException var39 = new org.jsecurity.cache.CacheException("org.jsecurity.config.ConfigurationException: dd\uFFFD", (java.lang.Throwable)var37);
    org.jsecurity.authc.SimpleAuthenticationInfo var41 = new org.jsecurity.authc.SimpleAuthenticationInfo((java.lang.Object)"org.jsecurity.config.ConfigurationException: dd\uFFFD", (java.lang.Object)var39, "a2b823b1e72eae2b727289df8a00a89df8a0bab6ad8a89c4c5c7a9b62a270000");
    org.jsecurity.subject.PrincipalCollection var42 = var41.getPrincipals();
    org.jsecurity.authc.AuthenticationInfo var43 = var11.afterAllAttempts((org.jsecurity.authc.AuthenticationToken)var26, (org.jsecurity.authc.AuthenticationInfo)var41);
    var10.setModularAuthenticationStrategy((org.jsecurity.authc.pam.ModularAuthenticationStrategy)var11);
    org.jsecurity.session.mgt.SessionManager var45 = var10.getSessionManager();
    org.jsecurity.authz.SimpleAuthorizationInfo var46 = new org.jsecurity.authz.SimpleAuthorizationInfo();
    var46.addRole("a2b823b1e72eae2b727289df8a00a89df8a0bab6ad8a89c4c5c7a9b62a270000");
    org.jsecurity.authz.SimpleAuthorizationInfo var49 = new org.jsecurity.authz.SimpleAuthorizationInfo();
    var49.addRole("a2b823b1e72eae2b727289df8a00a89df8a0bab6ad8a89c4c5c7a9b62a270000");
    org.jsecurity.session.UnknownSessionException var56 = new org.jsecurity.session.UnknownSessionException("dd\uFFFD", (java.io.Serializable)100.0f);
    org.jsecurity.subject.SubjectException var57 = new org.jsecurity.subject.SubjectException("dd\uFFFD", (java.lang.Throwable)var56);
    org.jsecurity.io.SerializationException var58 = new org.jsecurity.io.SerializationException("", (java.lang.Throwable)var57);
    java.lang.Throwable[] var59 = var57.getSuppressed();
    java.util.Set var60 = org.jsecurity.util.CollectionUtils.asSet((java.lang.Object[])var59);
    var49.addRoles((java.util.Collection)var60);
    var46.setObjectPermissions(var60);
    java.io.InputStream var64 = org.jsecurity.util.ClassUtils.getResourceAsStream("");
    java.lang.Object[] var65 = new java.lang.Object[] { var64};
    java.util.List var66 = org.jsecurity.util.CollectionUtils.asList(var65);
    org.jsecurity.authc.pam.ModularRealmAuthenticator var67 = new org.jsecurity.authc.pam.ModularRealmAuthenticator(var66);
    org.jsecurity.subject.SimplePrincipalCollection var69 = new org.jsecurity.subject.SimplePrincipalCollection((java.util.Collection)var66, "org.jsecurity.authz.UnauthorizedException: org.jsecurity.session.ExpiredSessionException: ");
    java.util.Set var70 = var69.getRealmNames();
    java.io.InputStream var72 = org.jsecurity.util.ClassUtils.getResourceAsStream("");
    java.lang.Object[] var73 = new java.lang.Object[] { var72};
    java.util.List var74 = org.jsecurity.util.CollectionUtils.asList(var73);
    org.jsecurity.authc.pam.ModularRealmAuthenticator var75 = new org.jsecurity.authc.pam.ModularRealmAuthenticator(var74);
    org.jsecurity.subject.SimplePrincipalCollection var77 = new org.jsecurity.subject.SimplePrincipalCollection((java.util.Collection)var74, "org.jsecurity.authz.UnauthorizedException: org.jsecurity.session.ExpiredSessionException: ");
    org.jsecurity.session.UnknownSessionException var82 = new org.jsecurity.session.UnknownSessionException("dd\uFFFD", (java.io.Serializable)100.0f);
    org.jsecurity.session.SessionException var84 = new org.jsecurity.session.SessionException("dd\uFFFD", (java.lang.Throwable)var82, (java.io.Serializable)0);
    org.jsecurity.session.SessionException var85 = new org.jsecurity.session.SessionException("dd\uFFFD", (java.lang.Throwable)var82);
    var77.add((java.lang.Object)var85, "org.jsecurity.config.ConfigurationException: dd\uFFFD");
    java.util.Set var88 = var77.asSet();
    var69.addAll((java.util.Collection)var88, "6464ff");
    var46.setStringPermissions(var88);
    org.jsecurity.subject.SimplePrincipalCollection var93 = new org.jsecurity.subject.SimplePrincipalCollection((java.util.Collection)var88, "\u0000\u0000");
    var10.setSessionListeners((java.util.Collection)var88);
    var4.setRoles(var88);
    boolean var96 = var4.isCredentialsExpired();
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var1);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var5);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var7 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var9 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var14);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var20 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var21);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var25);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var32 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var33);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var42);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var43);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var45);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var59);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var60);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var64);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var65);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var66);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var70);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var72);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var73);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var74);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var88);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var96 == false);

  }

  public void test46() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest7.test46");


    boolean var1 = org.jsecurity.util.StringUtils.hasText("1a1fe717-b2f7-4a28-9cfa-6f3955b8b913");
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var1 == true);

  }

  public void test47() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest7.test47");


    org.jsecurity.session.mgt.eis.MemorySessionDAO var0 = new org.jsecurity.session.mgt.eis.MemorySessionDAO();
    org.jsecurity.cache.Cache var1 = var0.getActiveSessionsCache();
    org.jsecurity.cache.CacheManager var2 = var0.getCacheManager();
    org.jsecurity.cache.HashtableCacheManager var3 = new org.jsecurity.cache.HashtableCacheManager();
    org.jsecurity.cache.Cache var5 = var3.getCache("\u0000\u0000");
    var0.setActiveSessionsCache(var5);
    java.io.InputStream var8 = org.jsecurity.util.ClassUtils.getResourceAsStream("");
    java.lang.Object[] var9 = new java.lang.Object[] { var8};
    java.util.List var10 = org.jsecurity.util.CollectionUtils.asList(var9);
    org.jsecurity.authc.pam.ModularRealmAuthenticator var11 = new org.jsecurity.authc.pam.ModularRealmAuthenticator(var10);
    org.jsecurity.authc.pam.AllSuccessfulModularAuthenticationStrategy var12 = new org.jsecurity.authc.pam.AllSuccessfulModularAuthenticationStrategy();
    var11.setModularAuthenticationStrategy((org.jsecurity.authc.pam.ModularAuthenticationStrategy)var12);
    org.jsecurity.authz.SimpleAuthorizationInfo var14 = new org.jsecurity.authz.SimpleAuthorizationInfo();
    var14.addStringPermission("hi!");
    java.io.InputStream var18 = org.jsecurity.util.ClassUtils.getResourceAsStream("");
    java.lang.Object[] var19 = new java.lang.Object[] { var18};
    java.util.List var20 = org.jsecurity.util.CollectionUtils.asList(var19);
    var14.addRoles((java.util.Collection)var20);
    var11.setAuthenticationListeners((java.util.Collection)var20);
    org.jsecurity.realm.activedirectory.ActiveDirectoryRealm var23 = new org.jsecurity.realm.activedirectory.ActiveDirectoryRealm();
    var23.setPrincipalSuffix("");
    var11.setRealm((org.jsecurity.realm.Realm)var23);
    org.jsecurity.cache.HashtableCacheManager var27 = new org.jsecurity.cache.HashtableCacheManager();
    org.jsecurity.cache.Cache var29 = var27.getCache("\u0000\u0000");
    var23.setAuthorizationCache(var29);
    var0.setActiveSessionsCache(var29);
    org.jsecurity.session.mgt.SimpleSession var32 = new org.jsecurity.session.mgt.SimpleSession();
    java.io.Serializable var33 = var0.create((org.jsecurity.session.Session)var32);
    org.jsecurity.session.mgt.SimpleSession var34 = new org.jsecurity.session.mgt.SimpleSession();
    var34.touch();
    var34.validate();
    org.jsecurity.session.mgt.SimpleSession var37 = new org.jsecurity.session.mgt.SimpleSession();
    var37.setTimeout((-1L));
    org.jsecurity.session.mgt.SimpleSession var40 = new org.jsecurity.session.mgt.SimpleSession();
    java.util.Date var41 = var40.getLastAccessTime();
    var37.setLastAccessTime(var41);
    org.jsecurity.session.mgt.SimpleSession var43 = new org.jsecurity.session.mgt.SimpleSession();
    java.util.Date var44 = var43.getLastAccessTime();
    var37.setStopTimestamp(var44);
    var34.setLastAccessTime(var44);
    var32.setLastAccessTime(var44);
    org.jsecurity.session.mgt.ImmutableProxiedSession var48 = new org.jsecurity.session.mgt.ImmutableProxiedSession((org.jsecurity.session.Session)var32);
    java.util.Date var49 = var48.getLastAccessTime();
    org.jsecurity.authz.SimpleAuthorizingAccount var52 = new org.jsecurity.authz.SimpleAuthorizingAccount((java.lang.Object)var48, (java.lang.Object)"fe331fde-1069-4ec3-841b-ec3dd57c829b", "3bf7038a-5bf9-4f69-b89b-6ea74272a097");
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var1);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var2);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var5);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var8);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var9);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var10);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var18);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var19);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var20);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var29);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var33 + "' != '" + "09e9b995-a7e0-42c3-bfc1-d382cfb6c08e"+ "'", var33.equals("09e9b995-a7e0-42c3-bfc1-d382cfb6c08e"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var41);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var44);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var49);

  }

  public void test48() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest7.test48");


    org.jsecurity.realm.activedirectory.ActiveDirectoryRealm var0 = new org.jsecurity.realm.activedirectory.ActiveDirectoryRealm();
    org.jsecurity.authc.credential.Sha256CredentialsMatcher var1 = new org.jsecurity.authc.credential.Sha256CredentialsMatcher();
    var0.setCredentialsMatcher((org.jsecurity.authc.credential.CredentialsMatcher)var1);
    java.lang.String var3 = var0.getAuthorizationCacheName();
    org.jsecurity.authc.UsernamePasswordToken var4 = new org.jsecurity.authc.UsernamePasswordToken();
    java.lang.String var5 = var4.getUsername();
    java.lang.Object var6 = var4.getPrincipal();
    boolean var7 = var0.supports((org.jsecurity.authc.AuthenticationToken)var4);
    var0.setName("hi!");
    org.jsecurity.cache.HashtableCache var11 = new org.jsecurity.cache.HashtableCache("orgjsecurityauthcCredentialsException783ccd3148a842dd890fdf885a7baafAA==");
    org.jsecurity.realm.text.TextConfigurationRealm var12 = new org.jsecurity.realm.text.TextConfigurationRealm();
    java.io.InputStream var14 = org.jsecurity.util.ClassUtils.getResourceAsStream("");
    java.lang.Object[] var15 = new java.lang.Object[] { var14};
    java.util.List var16 = org.jsecurity.util.CollectionUtils.asList(var15);
    org.jsecurity.authc.pam.ModularRealmAuthenticator var17 = new org.jsecurity.authc.pam.ModularRealmAuthenticator(var16);
    org.jsecurity.subject.SimplePrincipalCollection var19 = new org.jsecurity.subject.SimplePrincipalCollection((java.util.Collection)var16, "org.jsecurity.authz.UnauthorizedException: org.jsecurity.session.ExpiredSessionException: ");
    org.jsecurity.session.UnknownSessionException var24 = new org.jsecurity.session.UnknownSessionException("dd\uFFFD", (java.io.Serializable)100.0f);
    org.jsecurity.session.SessionException var26 = new org.jsecurity.session.SessionException("dd\uFFFD", (java.lang.Throwable)var24, (java.io.Serializable)0);
    org.jsecurity.session.SessionException var27 = new org.jsecurity.session.SessionException("dd\uFFFD", (java.lang.Throwable)var24);
    var19.add((java.lang.Object)var27, "org.jsecurity.config.ConfigurationException: dd\uFFFD");
    var12.onLogout((org.jsecurity.subject.PrincipalCollection)var19);
    var11.remove((java.lang.Object)var19);
    org.jsecurity.subject.SimplePrincipalCollection var32 = new org.jsecurity.subject.SimplePrincipalCollection((org.jsecurity.subject.PrincipalCollection)var19);
    org.jsecurity.crypto.BlowfishCipher var33 = new org.jsecurity.crypto.BlowfishCipher();
    java.security.Key var34 = var33.getKey();
    org.jsecurity.authc.SimpleAccount var35 = new org.jsecurity.authc.SimpleAccount((org.jsecurity.subject.PrincipalCollection)var32, (java.lang.Object)var34);
    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      boolean var37 = var0.hasRole((org.jsecurity.subject.PrincipalCollection)var32, "org.jsecurity.realm.text.TextConfigurationRealm_3252");
      fail("Expected exception of type java.util.NoSuchElementException");
    } catch (java.util.NoSuchElementException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var3);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var5);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var6);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var7 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var14);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var15);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var16);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var34);

  }

  public void test49() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest7.test49");


    org.jsecurity.authz.permission.WildcardPermission var2 = new org.jsecurity.authz.permission.WildcardPermission("org.jsecurity.realm.text.PropertiesRealm_3427", true);

  }

  public void test50() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest7.test50");


    org.jsecurity.session.SessionException var2 = new org.jsecurity.session.SessionException("a2b823b1e72eae2b727289df8a00a89df8a0bab6ad8a89c4c5c7a9b62a270000");
    org.jsecurity.session.ExpiredSessionException var4 = new org.jsecurity.session.ExpiredSessionException((java.io.Serializable)(-1));
    org.jsecurity.authc.DisabledAccountException var5 = new org.jsecurity.authc.DisabledAccountException((java.lang.Throwable)var4);
    var2.addSuppressed((java.lang.Throwable)var5);
    org.jsecurity.util.UnavailableConstructorException var7 = new org.jsecurity.util.UnavailableConstructorException((java.lang.Throwable)var5);
    org.jsecurity.config.UnresolveableReferenceException var8 = new org.jsecurity.config.UnresolveableReferenceException("a7923239-c3f0-4f69-8575-cc6a2af16731", (java.lang.Throwable)var7);

  }

  public void test51() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest7.test51");


    org.jsecurity.authc.pam.AllSuccessfulModularAuthenticationStrategy var0 = new org.jsecurity.authc.pam.AllSuccessfulModularAuthenticationStrategy();
    char[] var2 = new char[] { };
    org.jsecurity.authc.UsernamePasswordToken var4 = new org.jsecurity.authc.UsernamePasswordToken("hi!", var2, true);
    org.jsecurity.authc.SimpleAccount var5 = new org.jsecurity.authc.SimpleAccount();
    var5.setCredentialsExpired(false);
    boolean var8 = var5.isLocked();
    org.jsecurity.authc.AuthenticationInfo var9 = var0.afterAllAttempts((org.jsecurity.authc.AuthenticationToken)var4, (org.jsecurity.authc.AuthenticationInfo)var5);
    char[] var12 = new char[] { };
    org.jsecurity.authc.UsernamePasswordToken var14 = new org.jsecurity.authc.UsernamePasswordToken("hi!", var12, true);
    org.jsecurity.authc.UsernamePasswordToken var15 = new org.jsecurity.authc.UsernamePasswordToken("\u0000\u0000", var12);
    java.lang.Object var16 = var15.getPrincipal();
    org.jsecurity.authc.SimpleAccount var17 = new org.jsecurity.authc.SimpleAccount();
    var17.setCredentialsExpired(false);
    var17.setCredentialsExpired(false);
    boolean var22 = var17.isCredentialsExpired();
    org.jsecurity.authc.AuthenticationInfo var23 = var0.afterAllAttempts((org.jsecurity.authc.AuthenticationToken)var15, (org.jsecurity.authc.AuthenticationInfo)var17);
    org.jsecurity.realm.activedirectory.ActiveDirectoryRealm var24 = new org.jsecurity.realm.activedirectory.ActiveDirectoryRealm();
    org.jsecurity.authc.credential.Sha256CredentialsMatcher var25 = new org.jsecurity.authc.credential.Sha256CredentialsMatcher();
    var24.setCredentialsMatcher((org.jsecurity.authc.credential.CredentialsMatcher)var25);
    java.lang.String var27 = var24.getAuthorizationCacheName();
    var24.setPrincipalSuffix("org.jsecurity.config.ConfigurationException: dd\uFFFD");
    char[] var33 = new char[] { '4', '#'};
    org.jsecurity.authc.UsernamePasswordToken var34 = new org.jsecurity.authc.UsernamePasswordToken("\u0000\u0000", var33);
    org.jsecurity.authc.SimpleAccount var35 = new org.jsecurity.authc.SimpleAccount();
    var35.setCredentialsExpired(false);
    org.jsecurity.authc.AuthenticationInfo var38 = var0.beforeAttempt((org.jsecurity.realm.Realm)var24, (org.jsecurity.authc.AuthenticationToken)var34, (org.jsecurity.authc.AuthenticationInfo)var35);
    var34.setRememberMe(true);
    java.lang.Object var41 = var34.getPrincipal();
    var34.setUsername("87b76e19-c6af-446b-babc-347943b1c6aa");
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var2);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var8 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var9);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var12);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var16 + "' != '" + "\u0000\u0000"+ "'", var16.equals("\u0000\u0000"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var22 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var23);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var27);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var33);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var38);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var41 + "' != '" + "\u0000\u0000"+ "'", var41.equals("\u0000\u0000"));

  }

  public void test52() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest7.test52");


    org.jsecurity.authc.credential.AllowAllCredentialsMatcher var0 = new org.jsecurity.authc.credential.AllowAllCredentialsMatcher();
    org.jsecurity.authc.UsernamePasswordToken var1 = new org.jsecurity.authc.UsernamePasswordToken();
    java.lang.String var2 = var1.getUsername();
    org.jsecurity.authc.SimpleAccount var3 = new org.jsecurity.authc.SimpleAccount();
    var3.setCredentialsExpired(false);
    var3.setCredentialsExpired(false);
    boolean var8 = var0.doCredentialsMatch((org.jsecurity.authc.AuthenticationToken)var1, (org.jsecurity.authc.AuthenticationInfo)var3);
    var3.setLocked(true);
    org.jsecurity.crypto.hash.Md5Hash var11 = new org.jsecurity.crypto.hash.Md5Hash();
    org.jsecurity.session.UnknownSessionException var15 = new org.jsecurity.session.UnknownSessionException("dd\uFFFD", (java.io.Serializable)100.0f);
    org.jsecurity.session.SessionException var17 = new org.jsecurity.session.SessionException("dd\uFFFD", (java.lang.Throwable)var15, (java.io.Serializable)0);
    org.jsecurity.authc.SimpleAuthenticationInfo var20 = new org.jsecurity.authc.SimpleAuthenticationInfo((java.lang.Object)0, (java.lang.Object)10, "hi!");
    java.lang.Object var21 = var20.getCredentials();
    java.lang.String var22 = var20.toString();
    org.jsecurity.realm.text.TextConfigurationRealm var23 = new org.jsecurity.realm.text.TextConfigurationRealm();
    java.io.InputStream var25 = org.jsecurity.util.ClassUtils.getResourceAsStream("");
    java.lang.Object[] var26 = new java.lang.Object[] { var25};
    java.util.List var27 = org.jsecurity.util.CollectionUtils.asList(var26);
    org.jsecurity.authc.pam.ModularRealmAuthenticator var28 = new org.jsecurity.authc.pam.ModularRealmAuthenticator(var27);
    org.jsecurity.subject.SimplePrincipalCollection var30 = new org.jsecurity.subject.SimplePrincipalCollection((java.util.Collection)var27, "org.jsecurity.authz.UnauthorizedException: org.jsecurity.session.ExpiredSessionException: ");
    org.jsecurity.session.UnknownSessionException var35 = new org.jsecurity.session.UnknownSessionException("dd\uFFFD", (java.io.Serializable)100.0f);
    org.jsecurity.session.SessionException var37 = new org.jsecurity.session.SessionException("dd\uFFFD", (java.lang.Throwable)var35, (java.io.Serializable)0);
    org.jsecurity.session.SessionException var38 = new org.jsecurity.session.SessionException("dd\uFFFD", (java.lang.Throwable)var35);
    var30.add((java.lang.Object)var38, "org.jsecurity.config.ConfigurationException: dd\uFFFD");
    var23.onLogout((org.jsecurity.subject.PrincipalCollection)var30);
    org.jsecurity.cache.HashtableCacheManager var42 = new org.jsecurity.cache.HashtableCacheManager();
    org.jsecurity.cache.Cache var44 = var42.getCache("\u0000\u0000");
    var23.setAuthorizationCache(var44);
    org.jsecurity.codec.CodecException var48 = new org.jsecurity.codec.CodecException("dd\uFFFD");
    org.jsecurity.authc.ConcurrentAccessException var49 = new org.jsecurity.authc.ConcurrentAccessException("org.jsecurity.authz.UnauthorizedException: org.jsecurity.session.ExpiredSessionException: ", (java.lang.Throwable)var48);
    org.jsecurity.subject.SimplePrincipalCollection var51 = new org.jsecurity.subject.SimplePrincipalCollection((java.lang.Object)var48, "");
    var23.onLogout((org.jsecurity.subject.PrincipalCollection)var51);
    var20.setPrincipals((org.jsecurity.subject.PrincipalCollection)var51);
    org.jsecurity.realm.activedirectory.ActiveDirectoryRealm var54 = new org.jsecurity.realm.activedirectory.ActiveDirectoryRealm();
    org.jsecurity.authc.credential.Sha256CredentialsMatcher var55 = new org.jsecurity.authc.credential.Sha256CredentialsMatcher();
    var54.setCredentialsMatcher((org.jsecurity.authc.credential.CredentialsMatcher)var55);
    org.jsecurity.realm.activedirectory.ActiveDirectoryRealm var57 = new org.jsecurity.realm.activedirectory.ActiveDirectoryRealm();
    org.jsecurity.authc.credential.Sha256CredentialsMatcher var58 = new org.jsecurity.authc.credential.Sha256CredentialsMatcher();
    var57.setCredentialsMatcher((org.jsecurity.authc.credential.CredentialsMatcher)var58);
    java.lang.String var60 = var57.getAuthorizationCacheName();
    var57.setUrl("hi!");
    org.jsecurity.realm.ldap.DefaultLdapContextFactory var63 = new org.jsecurity.realm.ldap.DefaultLdapContextFactory();
    var57.setLdapContextFactory((org.jsecurity.realm.ldap.LdapContextFactory)var63);
    var63.setAuthentication("org.jsecurity.authz.UnauthorizedException: org.jsecurity.session.ExpiredSessionException: ");
    var54.setLdapContextFactory((org.jsecurity.realm.ldap.LdapContextFactory)var63);
    var63.setReferral("a2b823b1e72eae2b727289df8a00a89df8a0bab6ad8a89c4c5c7a9b62a270000");
    var63.setUrl("\u0000\u0000");
    java.util.Set var74 = org.jsecurity.util.PermissionUtils.toPermissionStrings("org.jsecurity.config.ConfigurationException: dd\uFFFD");
    org.jsecurity.authz.SimpleAuthorizationInfo var75 = new org.jsecurity.authz.SimpleAuthorizationInfo(var74);
    org.jsecurity.authz.SimpleRole var76 = new org.jsecurity.authz.SimpleRole();
    java.lang.String var77 = var76.getName();
    org.jsecurity.session.UnknownSessionException var82 = new org.jsecurity.session.UnknownSessionException("dd\uFFFD", (java.io.Serializable)100.0f);
    org.jsecurity.subject.SubjectException var83 = new org.jsecurity.subject.SubjectException("dd\uFFFD", (java.lang.Throwable)var82);
    org.jsecurity.io.SerializationException var84 = new org.jsecurity.io.SerializationException("", (java.lang.Throwable)var83);
    java.lang.Throwable[] var85 = var83.getSuppressed();
    java.util.Set var86 = org.jsecurity.util.CollectionUtils.asSet((java.lang.Object[])var85);
    var76.setPermissions(var86);
    org.jsecurity.authz.SimpleAuthorizingAccount var88 = new org.jsecurity.authz.SimpleAuthorizingAccount((org.jsecurity.subject.PrincipalCollection)var51, (java.lang.Object)"\u0000\u0000", "org.jsecurity.authc.AccountException: hi!", var74, var86);
    org.jsecurity.authz.SimpleAuthorizationInfo var89 = new org.jsecurity.authz.SimpleAuthorizationInfo(var74);
    boolean var90 = var11.equals((java.lang.Object)var74);
    boolean var91 = var3.equals((java.lang.Object)var90);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var2);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var8 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var21 + "' != '" + 10+ "'", var21.equals(10));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var25);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var26);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var27);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var44);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var60);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var74);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var77);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var85);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var86);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var90 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var91 == false);

  }

  public void test53() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest7.test53");


    org.jsecurity.realm.activedirectory.ActiveDirectoryRealm var0 = new org.jsecurity.realm.activedirectory.ActiveDirectoryRealm();
    var0.init();
    var0.init();
    org.jsecurity.config.ReflectionBuilder var3 = new org.jsecurity.config.ReflectionBuilder();
    org.jsecurity.config.ReflectionBuilder var4 = new org.jsecurity.config.ReflectionBuilder();
    org.jsecurity.io.IniResource var5 = new org.jsecurity.io.IniResource();
    var5.setCharsetName("org.jsecurity.authz.UnauthorizedException: org.jsecurity.session.ExpiredSessionException: ");
    java.util.Map var8 = var5.getSections();
    java.util.Map var9 = var4.buildObjects(var8);
    org.jsecurity.config.ReflectionBuilder var10 = new org.jsecurity.config.ReflectionBuilder();
    org.jsecurity.io.IniResource var11 = new org.jsecurity.io.IniResource();
    var11.setCharsetName("org.jsecurity.authz.UnauthorizedException: org.jsecurity.session.ExpiredSessionException: ");
    java.util.Map var14 = var11.getSections();
    java.util.Map var15 = var10.buildObjects(var14);
    java.util.Map var16 = var4.buildObjects(var15);
    java.util.Map var17 = var3.buildObjects(var16);
    var0.setGroupRolesMap(var17);
    org.jsecurity.authc.pam.ModularRealmAuthenticator var19 = new org.jsecurity.authc.pam.ModularRealmAuthenticator((org.jsecurity.realm.Realm)var0);
    org.jsecurity.realm.activedirectory.ActiveDirectoryRealm var20 = new org.jsecurity.realm.activedirectory.ActiveDirectoryRealm();
    org.jsecurity.authc.credential.Sha256CredentialsMatcher var21 = new org.jsecurity.authc.credential.Sha256CredentialsMatcher();
    var20.setCredentialsMatcher((org.jsecurity.authc.credential.CredentialsMatcher)var21);
    org.jsecurity.realm.activedirectory.ActiveDirectoryRealm var23 = new org.jsecurity.realm.activedirectory.ActiveDirectoryRealm();
    org.jsecurity.authc.credential.Sha256CredentialsMatcher var24 = new org.jsecurity.authc.credential.Sha256CredentialsMatcher();
    var23.setCredentialsMatcher((org.jsecurity.authc.credential.CredentialsMatcher)var24);
    java.lang.String var26 = var23.getAuthorizationCacheName();
    var23.setUrl("hi!");
    org.jsecurity.realm.ldap.DefaultLdapContextFactory var29 = new org.jsecurity.realm.ldap.DefaultLdapContextFactory();
    var23.setLdapContextFactory((org.jsecurity.realm.ldap.LdapContextFactory)var29);
    var29.setAuthentication("org.jsecurity.authz.UnauthorizedException: org.jsecurity.session.ExpiredSessionException: ");
    var20.setLdapContextFactory((org.jsecurity.realm.ldap.LdapContextFactory)var29);
    var29.setReferral("a2b823b1e72eae2b727289df8a00a89df8a0bab6ad8a89c4c5c7a9b62a270000");
    var29.setUrl("\u0000\u0000");
    var29.setContextFactoryClassName("org.jsecurity.authc.UsernamePasswordToken - \u0000\u0000, rememberMe=false");
    var29.setPrincipalSuffix("\u0000\u0000\u0000");
    var0.setLdapContextFactory((org.jsecurity.realm.ldap.LdapContextFactory)var29);
    var29.setSystemPassword("org.jsecurity.config.UnresolveableReferenceException: dd\uFFFD");
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var8);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var9);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var14);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var15);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var16);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var17);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var26);

  }

  public void test54() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest7.test54");


    org.jsecurity.util.InstantiationException var1 = new org.jsecurity.util.InstantiationException("eb8eb80000");
    java.lang.Throwable[] var2 = var1.getSuppressed();
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var2);

  }

  public void test55() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest7.test55");


    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      org.jsecurity.crypto.hash.Md2Hash var1 = org.jsecurity.crypto.hash.Md2Hash.fromHexString("f7a4125e-8d75-4df1-90b1-d72857bb1eb2");
      fail("Expected exception of type java.lang.IllegalArgumentException");
    } catch (java.lang.IllegalArgumentException e) {
      // Expected exception.
    }

  }

  public void test56() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest7.test56");


    org.jsecurity.authc.pam.UnsupportedTokenException var0 = new org.jsecurity.authc.pam.UnsupportedTokenException();
    org.jsecurity.authc.UnknownAccountException var1 = new org.jsecurity.authc.UnknownAccountException((java.lang.Throwable)var0);
    org.jsecurity.authc.AccountException var2 = new org.jsecurity.authc.AccountException((java.lang.Throwable)var1);
    org.jsecurity.mgt.DefaultSecurityManager var3 = new org.jsecurity.mgt.DefaultSecurityManager();
    java.io.InputStream var5 = org.jsecurity.util.ClassUtils.getResourceAsStream("");
    java.lang.Object[] var6 = new java.lang.Object[] { var5};
    java.util.List var7 = org.jsecurity.util.CollectionUtils.asList(var6);
    org.jsecurity.authc.pam.ModularRealmAuthenticator var8 = new org.jsecurity.authc.pam.ModularRealmAuthenticator(var7);
    org.jsecurity.authc.pam.AllSuccessfulModularAuthenticationStrategy var9 = new org.jsecurity.authc.pam.AllSuccessfulModularAuthenticationStrategy();
    var8.setModularAuthenticationStrategy((org.jsecurity.authc.pam.ModularAuthenticationStrategy)var9);
    org.jsecurity.authz.SimpleAuthorizationInfo var11 = new org.jsecurity.authz.SimpleAuthorizationInfo();
    var11.addStringPermission("hi!");
    java.io.InputStream var15 = org.jsecurity.util.ClassUtils.getResourceAsStream("");
    java.lang.Object[] var16 = new java.lang.Object[] { var15};
    java.util.List var17 = org.jsecurity.util.CollectionUtils.asList(var16);
    var11.addRoles((java.util.Collection)var17);
    var8.setAuthenticationListeners((java.util.Collection)var17);
    var3.setSessionListeners((java.util.Collection)var17);
    org.jsecurity.realm.text.TextConfigurationRealm var21 = new org.jsecurity.realm.text.TextConfigurationRealm();
    java.io.InputStream var23 = org.jsecurity.util.ClassUtils.getResourceAsStream("");
    java.lang.Object[] var24 = new java.lang.Object[] { var23};
    java.util.List var25 = org.jsecurity.util.CollectionUtils.asList(var24);
    org.jsecurity.authc.pam.ModularRealmAuthenticator var26 = new org.jsecurity.authc.pam.ModularRealmAuthenticator(var25);
    org.jsecurity.subject.SimplePrincipalCollection var28 = new org.jsecurity.subject.SimplePrincipalCollection((java.util.Collection)var25, "org.jsecurity.authz.UnauthorizedException: org.jsecurity.session.ExpiredSessionException: ");
    org.jsecurity.session.UnknownSessionException var33 = new org.jsecurity.session.UnknownSessionException("dd\uFFFD", (java.io.Serializable)100.0f);
    org.jsecurity.session.SessionException var35 = new org.jsecurity.session.SessionException("dd\uFFFD", (java.lang.Throwable)var33, (java.io.Serializable)0);
    org.jsecurity.session.SessionException var36 = new org.jsecurity.session.SessionException("dd\uFFFD", (java.lang.Throwable)var33);
    var28.add((java.lang.Object)var36, "org.jsecurity.config.ConfigurationException: dd\uFFFD");
    var21.onLogout((org.jsecurity.subject.PrincipalCollection)var28);
    org.jsecurity.authc.pam.FirstSuccessfulAuthenticationStrategy var40 = new org.jsecurity.authc.pam.FirstSuccessfulAuthenticationStrategy();
    org.jsecurity.authz.UnauthorizedException var42 = new org.jsecurity.authz.UnauthorizedException("org.jsecurity.config.ConfigurationException: dd\uFFFD");
    java.lang.Throwable[] var43 = var42.getSuppressed();
    java.util.List var44 = org.jsecurity.util.CollectionUtils.asList((java.lang.Object[])var43);
    org.jsecurity.authc.UsernamePasswordToken var45 = new org.jsecurity.authc.UsernamePasswordToken();
    java.lang.String var46 = var45.getUsername();
    java.net.InetAddress var47 = var45.getInetAddress();
    org.jsecurity.authc.AuthenticationInfo var48 = var40.beforeAllAttempts((java.util.Collection)var44, (org.jsecurity.authc.AuthenticationToken)var45);
    boolean[] var49 = var3.hasRoles((org.jsecurity.subject.PrincipalCollection)var28, var44);
    org.jsecurity.codec.CodecException var52 = new org.jsecurity.codec.CodecException("dd\uFFFD");
    org.jsecurity.authc.ConcurrentAccessException var53 = new org.jsecurity.authc.ConcurrentAccessException("org.jsecurity.authz.UnauthorizedException: org.jsecurity.session.ExpiredSessionException: ", (java.lang.Throwable)var52);
    org.jsecurity.subject.SimplePrincipalCollection var55 = new org.jsecurity.subject.SimplePrincipalCollection((java.lang.Object)var52, "");
    java.io.InputStream var57 = org.jsecurity.util.ClassUtils.getResourceAsStream("");
    java.lang.Object[] var58 = new java.lang.Object[] { var57};
    java.util.List var59 = org.jsecurity.util.CollectionUtils.asList(var58);
    org.jsecurity.authc.pam.ModularRealmAuthenticator var60 = new org.jsecurity.authc.pam.ModularRealmAuthenticator(var59);
    var55.addAll((java.util.Collection)var59, "\u0000\u0000");
    var3.setSessionListeners((java.util.Collection)var59);
    org.jsecurity.authc.SimpleAccount var65 = new org.jsecurity.authc.SimpleAccount((java.lang.Object)var2, (java.lang.Object)var3, "ZGT/");
    org.jsecurity.subject.DelegatingSubject var66 = new org.jsecurity.subject.DelegatingSubject((org.jsecurity.mgt.SecurityManager)var3);
    java.io.InputStream var68 = org.jsecurity.util.ClassUtils.getResourceAsStream("");
    java.lang.Object[] var69 = new java.lang.Object[] { var68};
    java.util.List var70 = org.jsecurity.util.CollectionUtils.asList(var69);
    org.jsecurity.authc.pam.ModularRealmAuthenticator var71 = new org.jsecurity.authc.pam.ModularRealmAuthenticator(var70);
    org.jsecurity.subject.SimplePrincipalCollection var73 = new org.jsecurity.subject.SimplePrincipalCollection((java.util.Collection)var70, "org.jsecurity.authz.UnauthorizedException: org.jsecurity.session.ExpiredSessionException: ");
    org.jsecurity.session.UnknownSessionException var78 = new org.jsecurity.session.UnknownSessionException("dd\uFFFD", (java.io.Serializable)100.0f);
    org.jsecurity.session.SessionException var80 = new org.jsecurity.session.SessionException("dd\uFFFD", (java.lang.Throwable)var78, (java.io.Serializable)0);
    org.jsecurity.session.SessionException var81 = new org.jsecurity.session.SessionException("dd\uFFFD", (java.lang.Throwable)var78);
    var73.add((java.lang.Object)var81, "org.jsecurity.config.ConfigurationException: dd\uFFFD");
    java.util.Set var84 = var73.asSet();
    org.jsecurity.session.UnknownSessionException var89 = new org.jsecurity.session.UnknownSessionException("dd\uFFFD", (java.io.Serializable)100.0f);
    org.jsecurity.subject.SubjectException var90 = new org.jsecurity.subject.SubjectException("dd\uFFFD", (java.lang.Throwable)var89);
    org.jsecurity.io.SerializationException var91 = new org.jsecurity.io.SerializationException("", (java.lang.Throwable)var90);
    java.lang.Throwable[] var92 = var90.getSuppressed();
    java.lang.Throwable[] var93 = var90.getSuppressed();
    java.util.Set var94 = org.jsecurity.util.CollectionUtils.asSet((java.lang.Object[])var93);
    boolean var95 = var3.hasAllRoles((org.jsecurity.subject.PrincipalCollection)var73, (java.util.Collection)var94);
    org.jsecurity.authz.aop.GuestAnnotationHandler var96 = new org.jsecurity.authz.aop.GuestAnnotationHandler();
    java.lang.Class var97 = var96.getAnnotationClass();
    java.lang.Class var98 = var96.getAnnotationClass();
    java.lang.Object var99 = var73.oneByType(var98);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var5);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var6);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var7);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var15);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var16);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var17);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var23);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var24);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var25);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var43);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var44);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var46);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var47);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var48);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var49);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var57);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var58);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var59);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var68);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var69);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var70);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var84);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var92);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var93);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var94);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var95 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var97);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var98);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var99);

  }

  public void test57() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest7.test57");


    java.util.Set var1 = org.jsecurity.util.PermissionUtils.toPermissionStrings("e00f87fa-0543-46d5-b69b-14e41add033e");
    org.jsecurity.util.UnknownClassException var3 = new org.jsecurity.util.UnknownClassException("22ab7faf-fab8-4d8b-9c43-096f2af17960");
    org.jsecurity.authc.SimpleAccount var5 = new org.jsecurity.authc.SimpleAccount((java.util.Collection)var1, (java.lang.Object)"22ab7faf-fab8-4d8b-9c43-096f2af17960", "44126908-8346-4f1c-92de-726997ba95f5");
    char[] var8 = new char[] { };
    org.jsecurity.authc.UsernamePasswordToken var10 = new org.jsecurity.authc.UsernamePasswordToken("hi!", var8, true);
    org.jsecurity.authc.UsernamePasswordToken var11 = new org.jsecurity.authc.UsernamePasswordToken("\u0000\u0000", var8);
    org.jsecurity.session.mgt.SimpleSession var12 = new org.jsecurity.session.mgt.SimpleSession();
    var12.setTimeout((-1L));
    org.jsecurity.session.mgt.SimpleSession var15 = new org.jsecurity.session.mgt.SimpleSession();
    java.util.Date var16 = var15.getLastAccessTime();
    var12.setLastAccessTime(var16);
    java.net.InetAddress var18 = var12.getHostAddress();
    var11.setInetAddress(var18);
    org.jsecurity.session.mgt.SimpleSession var20 = new org.jsecurity.session.mgt.SimpleSession(var18);
    org.jsecurity.session.mgt.SimpleSession var21 = new org.jsecurity.session.mgt.SimpleSession(var18);
    org.jsecurity.config.ReflectionBuilder var22 = new org.jsecurity.config.ReflectionBuilder();
    org.jsecurity.io.IniResource var23 = new org.jsecurity.io.IniResource();
    java.util.Map var24 = var23.getSections();
    var22.setObjects(var24);
    org.jsecurity.realm.activedirectory.ActiveDirectoryRealm var26 = new org.jsecurity.realm.activedirectory.ActiveDirectoryRealm();
    var26.init();
    var26.init();
    org.jsecurity.config.ReflectionBuilder var29 = new org.jsecurity.config.ReflectionBuilder();
    org.jsecurity.config.ReflectionBuilder var30 = new org.jsecurity.config.ReflectionBuilder();
    org.jsecurity.io.IniResource var31 = new org.jsecurity.io.IniResource();
    var31.setCharsetName("org.jsecurity.authz.UnauthorizedException: org.jsecurity.session.ExpiredSessionException: ");
    java.util.Map var34 = var31.getSections();
    java.util.Map var35 = var30.buildObjects(var34);
    org.jsecurity.config.ReflectionBuilder var36 = new org.jsecurity.config.ReflectionBuilder();
    org.jsecurity.io.IniResource var37 = new org.jsecurity.io.IniResource();
    var37.setCharsetName("org.jsecurity.authz.UnauthorizedException: org.jsecurity.session.ExpiredSessionException: ");
    java.util.Map var40 = var37.getSections();
    java.util.Map var41 = var36.buildObjects(var40);
    java.util.Map var42 = var30.buildObjects(var41);
    java.util.Map var43 = var29.buildObjects(var42);
    var26.setGroupRolesMap(var43);
    var22.setObjects(var43);
    var21.setAttributes(var43);
    boolean var47 = var21.isExpired();
    java.util.Date var48 = var21.getLastAccessTime();
    var5.setCredentials((java.lang.Object)var48);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var1);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var8);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var16);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var18);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var24);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var34);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var35);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var40);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var41);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var42);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var43);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var47 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var48);

  }

  public void test58() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest7.test58");


    org.jsecurity.codec.CodecException var2 = new org.jsecurity.codec.CodecException("dd\uFFFD");
    org.jsecurity.authc.ConcurrentAccessException var3 = new org.jsecurity.authc.ConcurrentAccessException("org.jsecurity.authz.UnauthorizedException: org.jsecurity.session.ExpiredSessionException: ", (java.lang.Throwable)var2);
    org.jsecurity.subject.SimplePrincipalCollection var5 = new org.jsecurity.subject.SimplePrincipalCollection((java.lang.Object)var2, "");
    java.io.InputStream var7 = org.jsecurity.util.ClassUtils.getResourceAsStream("");
    java.lang.Object[] var8 = new java.lang.Object[] { var7};
    java.util.List var9 = org.jsecurity.util.CollectionUtils.asList(var8);
    org.jsecurity.authc.pam.ModularRealmAuthenticator var10 = new org.jsecurity.authc.pam.ModularRealmAuthenticator(var9);
    var5.addAll((java.util.Collection)var9, "\u0000\u0000");
    java.io.InputStream var14 = org.jsecurity.util.ClassUtils.getResourceAsStream("");
    java.lang.Object[] var15 = new java.lang.Object[] { var14};
    java.util.List var16 = org.jsecurity.util.CollectionUtils.asList(var15);
    org.jsecurity.authc.pam.ModularRealmAuthenticator var17 = new org.jsecurity.authc.pam.ModularRealmAuthenticator(var16);
    var5.addAll((java.util.Collection)var16, "\u0000\u0000");
    org.jsecurity.realm.SimpleAccountRealm var21 = new org.jsecurity.realm.SimpleAccountRealm("hi!");
    java.lang.Class var22 = var21.getAuthenticationTokenClass();
    java.util.Collection var23 = org.jsecurity.util.CollectionUtils.emptyCollection(var22);
    java.lang.Object var24 = org.jsecurity.util.ClassUtils.newInstance(var22);
    java.util.Collection var25 = var5.byType(var22);
    org.jsecurity.subject.SimplePrincipalCollection var26 = new org.jsecurity.subject.SimplePrincipalCollection((org.jsecurity.subject.PrincipalCollection)var5);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var7);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var8);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var9);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var14);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var15);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var16);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var22);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var23);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var24);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var25);

  }

  public void test59() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest7.test59");


    org.jsecurity.io.DefaultSerializer var0 = new org.jsecurity.io.DefaultSerializer();
    org.jsecurity.authz.SimpleRole var1 = new org.jsecurity.authz.SimpleRole();
    byte[] var2 = var0.serialize((java.lang.Object)var1);
    char[] var4 = new char[] { };
    org.jsecurity.authc.UsernamePasswordToken var6 = new org.jsecurity.authc.UsernamePasswordToken("hi!", var4, true);
    byte[] var7 = org.jsecurity.codec.Hex.decode(var4);
    byte[] var8 = org.jsecurity.codec.Hex.decode(var7);
    char[] var9 = org.jsecurity.codec.CodecSupport.toChars(var7);
    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      java.lang.Object var10 = var0.deserialize(var7);
      fail("Expected exception of type org.jsecurity.io.SerializationException");
    } catch (org.jsecurity.io.SerializationException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var2);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var4);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var7);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var8);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var9);

  }

  public void test60() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest7.test60");


    org.jsecurity.authz.UnauthorizedException var1 = new org.jsecurity.authz.UnauthorizedException("8ec85ffa-ab28-4808-9fcc-2d60518e27db");

  }

  public void test61() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest7.test61");


    org.jsecurity.session.mgt.SimpleSession var0 = new org.jsecurity.session.mgt.SimpleSession();
    var0.touch();
    var0.validate();
    org.jsecurity.session.mgt.SimpleSession var3 = new org.jsecurity.session.mgt.SimpleSession();
    var3.setTimeout((-1L));
    org.jsecurity.session.mgt.SimpleSession var6 = new org.jsecurity.session.mgt.SimpleSession();
    java.util.Date var7 = var6.getLastAccessTime();
    var3.setLastAccessTime(var7);
    org.jsecurity.session.mgt.SimpleSession var9 = new org.jsecurity.session.mgt.SimpleSession();
    java.util.Date var10 = var9.getLastAccessTime();
    var3.setStopTimestamp(var10);
    var0.setLastAccessTime(var10);
    org.jsecurity.authc.pam.AllSuccessfulModularAuthenticationStrategy var13 = new org.jsecurity.authc.pam.AllSuccessfulModularAuthenticationStrategy();
    char[] var15 = new char[] { };
    org.jsecurity.authc.UsernamePasswordToken var17 = new org.jsecurity.authc.UsernamePasswordToken("hi!", var15, true);
    org.jsecurity.authc.SimpleAccount var18 = new org.jsecurity.authc.SimpleAccount();
    var18.setCredentialsExpired(false);
    boolean var21 = var18.isLocked();
    org.jsecurity.authc.AuthenticationInfo var22 = var13.afterAllAttempts((org.jsecurity.authc.AuthenticationToken)var17, (org.jsecurity.authc.AuthenticationInfo)var18);
    char[] var26 = new char[] { '4', '#'};
    org.jsecurity.authc.UsernamePasswordToken var27 = new org.jsecurity.authc.UsernamePasswordToken("\u0000\u0000", var26);
    org.jsecurity.authc.SimpleAccount var28 = new org.jsecurity.authc.SimpleAccount();
    var28.setCredentialsExpired(false);
    var28.setCredentialsExpired(false);
    boolean var33 = var28.isCredentialsExpired();
    org.jsecurity.authc.AuthenticationInfo var34 = var13.afterAllAttempts((org.jsecurity.authc.AuthenticationToken)var27, (org.jsecurity.authc.AuthenticationInfo)var28);
    org.jsecurity.realm.activedirectory.ActiveDirectoryRealm var35 = new org.jsecurity.realm.activedirectory.ActiveDirectoryRealm();
    org.jsecurity.authc.credential.Sha256CredentialsMatcher var36 = new org.jsecurity.authc.credential.Sha256CredentialsMatcher();
    var35.setCredentialsMatcher((org.jsecurity.authc.credential.CredentialsMatcher)var36);
    java.lang.String var38 = var35.getAuthorizationCacheName();
    org.jsecurity.authc.UsernamePasswordToken var39 = new org.jsecurity.authc.UsernamePasswordToken();
    java.lang.String var40 = var39.getUsername();
    java.lang.Object var41 = var39.getPrincipal();
    boolean var42 = var35.supports((org.jsecurity.authc.AuthenticationToken)var39);
    org.jsecurity.session.UnknownSessionException var46 = new org.jsecurity.session.UnknownSessionException("dd\uFFFD", (java.io.Serializable)100.0f);
    org.jsecurity.session.SessionException var48 = new org.jsecurity.session.SessionException("dd\uFFFD", (java.lang.Throwable)var46, (java.io.Serializable)0);
    org.jsecurity.authc.SimpleAuthenticationInfo var51 = new org.jsecurity.authc.SimpleAuthenticationInfo((java.lang.Object)0, (java.lang.Object)10, "hi!");
    java.lang.Object var52 = var51.getCredentials();
    java.lang.String var53 = var51.toString();
    org.jsecurity.authc.AuthenticationInfo var54 = var13.afterAllAttempts((org.jsecurity.authc.AuthenticationToken)var39, (org.jsecurity.authc.AuthenticationInfo)var51);
    org.jsecurity.realm.text.PropertiesRealm var55 = new org.jsecurity.realm.text.PropertiesRealm();
    java.lang.String var56 = var55.getUserDefinitions();
    org.jsecurity.codec.CodecException var59 = new org.jsecurity.codec.CodecException("dd\uFFFD");
    org.jsecurity.authc.ConcurrentAccessException var60 = new org.jsecurity.authc.ConcurrentAccessException("org.jsecurity.authz.UnauthorizedException: org.jsecurity.session.ExpiredSessionException: ", (java.lang.Throwable)var59);
    org.jsecurity.subject.SimplePrincipalCollection var62 = new org.jsecurity.subject.SimplePrincipalCollection((java.lang.Object)var59, "");
    java.io.InputStream var64 = org.jsecurity.util.ClassUtils.getResourceAsStream("");
    java.lang.Object[] var65 = new java.lang.Object[] { var64};
    java.util.List var66 = org.jsecurity.util.CollectionUtils.asList(var65);
    org.jsecurity.authc.pam.ModularRealmAuthenticator var67 = new org.jsecurity.authc.pam.ModularRealmAuthenticator(var66);
    var62.addAll((java.util.Collection)var66, "\u0000\u0000");
    java.io.InputStream var71 = org.jsecurity.util.ClassUtils.getResourceAsStream("");
    java.lang.Object[] var72 = new java.lang.Object[] { var71};
    java.util.List var73 = org.jsecurity.util.CollectionUtils.asList(var72);
    org.jsecurity.authc.pam.ModularRealmAuthenticator var74 = new org.jsecurity.authc.pam.ModularRealmAuthenticator(var73);
    var62.addAll((java.util.Collection)var73, "\u0000\u0000");
    var55.onLogout((org.jsecurity.subject.PrincipalCollection)var62);
    java.util.Set var78 = var62.getRealmNames();
    org.jsecurity.authc.UsernamePasswordToken var79 = new org.jsecurity.authc.UsernamePasswordToken();
    java.lang.String var80 = var79.getUsername();
    java.lang.Object var81 = var79.getPrincipal();
    var79.setUsername("hi!");
    java.lang.Object var84 = var79.getCredentials();
    java.lang.String var85 = var79.getUsername();
    org.jsecurity.authc.AuthenticationInfo var86 = var13.beforeAllAttempts((java.util.Collection)var78, (org.jsecurity.authc.AuthenticationToken)var79);
    java.lang.Object var87 = var0.removeAttribute((java.lang.Object)var13);
    java.net.InetAddress var88 = var0.getHostAddress();
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var7);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var10);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var15);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var21 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var22);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var26);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var33 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var34);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var38);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var40);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var41);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var42 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var52 + "' != '" + 10+ "'", var52.equals(10));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var54);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var56);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var64);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var65);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var66);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var71);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var72);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var73);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var78);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var80);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var81);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var84);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var85 + "' != '" + "hi!"+ "'", var85.equals("hi!"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var86);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var87);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var88);

  }

  public void test62() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest7.test62");


    org.jsecurity.util.UnknownClassException var3 = new org.jsecurity.util.UnknownClassException("b6cd6008-ae80-4bfd-ae0c-5041e0198a79");
    org.jsecurity.config.UnresolveableReferenceException var4 = new org.jsecurity.config.UnresolveableReferenceException((java.lang.Throwable)var3);
    org.jsecurity.util.InstantiationException var5 = new org.jsecurity.util.InstantiationException("af4b3469-92f9-4bb0-addf-358eefb0cfc9", (java.lang.Throwable)var3);
    org.jsecurity.session.InvalidSessionException var6 = new org.jsecurity.session.InvalidSessionException("9ea9f35c-33e5-4066-bf1f-b5519107993c", (java.lang.Throwable)var5);

  }

  public void test63() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest7.test63");


    org.jsecurity.session.ExpiredSessionException var1 = new org.jsecurity.session.ExpiredSessionException("jsecurity-activeSessionCache");

  }

  public void test64() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest7.test64");


    org.jsecurity.authc.ConcurrentAccessException var2 = new org.jsecurity.authc.ConcurrentAccessException();
    org.jsecurity.authc.ExpiredCredentialsException var3 = new org.jsecurity.authc.ExpiredCredentialsException("a1bc3336-1b74-45f8-abc3-c5b4ddcead75", (java.lang.Throwable)var2);
    org.jsecurity.authc.UnknownAccountException var4 = new org.jsecurity.authc.UnknownAccountException("f3cec280-b0d4-4d1e-9ce8-a8b745fa003b", (java.lang.Throwable)var3);

  }

  public void test65() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest7.test65");


    org.jsecurity.session.ExpiredSessionException var1 = new org.jsecurity.session.ExpiredSessionException((java.io.Serializable)"22607c11-e2a1-4666-b6fd-10227bdb0738");

  }

  public void test66() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest7.test66");


    org.jsecurity.authz.UnauthenticatedException var3 = new org.jsecurity.authz.UnauthenticatedException();
    org.jsecurity.config.UnresolveableReferenceException var4 = new org.jsecurity.config.UnresolveableReferenceException("", (java.lang.Throwable)var3);
    org.jsecurity.cache.CacheException var5 = new org.jsecurity.cache.CacheException("org.jsecurity.config.ConfigurationException: dd\uFFFD", (java.lang.Throwable)var3);
    org.jsecurity.subject.SubjectException var6 = new org.jsecurity.subject.SubjectException("2845ef71-576b-45b9-aa13-d72d8501e79d", (java.lang.Throwable)var5);

  }

  public void test67() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest7.test67");


    org.jsecurity.session.mgt.DefaultSessionManager var0 = new org.jsecurity.session.mgt.DefaultSessionManager();
    org.jsecurity.session.mgt.SessionValidationScheduler var1 = var0.getSessionValidationScheduler();
    org.jsecurity.session.mgt.SimpleSession var2 = new org.jsecurity.session.mgt.SimpleSession();
    var2.touch();
    var2.validate();
    org.jsecurity.session.mgt.SimpleSession var5 = new org.jsecurity.session.mgt.SimpleSession();
    var5.setTimeout((-1L));
    org.jsecurity.session.mgt.SimpleSession var8 = new org.jsecurity.session.mgt.SimpleSession();
    java.util.Date var9 = var8.getLastAccessTime();
    var5.setLastAccessTime(var9);
    org.jsecurity.session.mgt.SimpleSession var11 = new org.jsecurity.session.mgt.SimpleSession();
    java.util.Date var12 = var11.getLastAccessTime();
    var5.setStopTimestamp(var12);
    var2.setLastAccessTime(var12);
    java.io.Serializable var15 = var2.getId();
    org.jsecurity.authc.ConcurrentAccessException var17 = new org.jsecurity.authc.ConcurrentAccessException("");
    org.jsecurity.authc.pam.UnsupportedTokenException var18 = new org.jsecurity.authc.pam.UnsupportedTokenException();
    var17.addSuppressed((java.lang.Throwable)var18);
    java.lang.Object var20 = var2.removeAttribute((java.lang.Object)var18);
    byte[] var22 = org.jsecurity.codec.Hex.decode("");
    java.lang.Object var23 = var2.getAttribute((java.lang.Object)var22);
    long var24 = var2.getTimeout();
    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      java.util.Date var25 = var0.getLastAccessTime((java.io.Serializable)var24);
      fail("Expected exception of type org.jsecurity.session.UnknownSessionException");
    } catch (org.jsecurity.session.UnknownSessionException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var1);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var9);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var12);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var15);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var20);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var22);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var23);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var24 == 1800000L);

  }

  public void test68() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest7.test68");


    org.jsecurity.session.mgt.eis.MemorySessionDAO var0 = new org.jsecurity.session.mgt.eis.MemorySessionDAO();
    org.jsecurity.cache.Cache var1 = var0.getActiveSessionsCache();
    org.jsecurity.cache.CacheManager var2 = var0.getCacheManager();
    org.jsecurity.cache.HashtableCacheManager var3 = new org.jsecurity.cache.HashtableCacheManager();
    org.jsecurity.cache.Cache var5 = var3.getCache("\u0000\u0000");
    var0.setActiveSessionsCache(var5);
    java.io.InputStream var8 = org.jsecurity.util.ClassUtils.getResourceAsStream("");
    java.lang.Object[] var9 = new java.lang.Object[] { var8};
    java.util.List var10 = org.jsecurity.util.CollectionUtils.asList(var9);
    org.jsecurity.authc.pam.ModularRealmAuthenticator var11 = new org.jsecurity.authc.pam.ModularRealmAuthenticator(var10);
    org.jsecurity.authc.pam.AllSuccessfulModularAuthenticationStrategy var12 = new org.jsecurity.authc.pam.AllSuccessfulModularAuthenticationStrategy();
    var11.setModularAuthenticationStrategy((org.jsecurity.authc.pam.ModularAuthenticationStrategy)var12);
    org.jsecurity.authz.SimpleAuthorizationInfo var14 = new org.jsecurity.authz.SimpleAuthorizationInfo();
    var14.addStringPermission("hi!");
    java.io.InputStream var18 = org.jsecurity.util.ClassUtils.getResourceAsStream("");
    java.lang.Object[] var19 = new java.lang.Object[] { var18};
    java.util.List var20 = org.jsecurity.util.CollectionUtils.asList(var19);
    var14.addRoles((java.util.Collection)var20);
    var11.setAuthenticationListeners((java.util.Collection)var20);
    org.jsecurity.realm.activedirectory.ActiveDirectoryRealm var23 = new org.jsecurity.realm.activedirectory.ActiveDirectoryRealm();
    var23.setPrincipalSuffix("");
    var11.setRealm((org.jsecurity.realm.Realm)var23);
    org.jsecurity.cache.HashtableCacheManager var27 = new org.jsecurity.cache.HashtableCacheManager();
    org.jsecurity.cache.Cache var29 = var27.getCache("\u0000\u0000");
    var23.setAuthorizationCache(var29);
    var0.setActiveSessionsCache(var29);
    org.jsecurity.session.mgt.SimpleSession var32 = new org.jsecurity.session.mgt.SimpleSession();
    java.io.Serializable var33 = var0.create((org.jsecurity.session.Session)var32);
    org.jsecurity.session.mgt.SimpleSession var34 = new org.jsecurity.session.mgt.SimpleSession();
    var34.touch();
    var34.validate();
    org.jsecurity.session.mgt.SimpleSession var37 = new org.jsecurity.session.mgt.SimpleSession();
    var37.setTimeout((-1L));
    org.jsecurity.session.mgt.SimpleSession var40 = new org.jsecurity.session.mgt.SimpleSession();
    java.util.Date var41 = var40.getLastAccessTime();
    var37.setLastAccessTime(var41);
    org.jsecurity.session.mgt.SimpleSession var43 = new org.jsecurity.session.mgt.SimpleSession();
    java.util.Date var44 = var43.getLastAccessTime();
    var37.setStopTimestamp(var44);
    var34.setLastAccessTime(var44);
    var32.setLastAccessTime(var44);
    org.jsecurity.session.mgt.ImmutableProxiedSession var48 = new org.jsecurity.session.mgt.ImmutableProxiedSession((org.jsecurity.session.Session)var32);
    java.util.Date var49 = var48.getStartTimestamp();
    java.io.Serializable var50 = var48.getId();
    java.util.Date var51 = var48.getStartTimestamp();
    java.util.Date var52 = var48.getLastAccessTime();
    org.jsecurity.crypto.hash.Md2Hash var55 = org.jsecurity.crypto.hash.Md2Hash.fromBase64String("a2b823b1e72eae2b727289df8a00a89df8a0bab6ad8a89c4c5c7a9b62a270000");
    org.jsecurity.authc.credential.Md2CredentialsMatcher var56 = new org.jsecurity.authc.credential.Md2CredentialsMatcher();
    org.jsecurity.authz.SimpleAuthorizingAccount var58 = new org.jsecurity.authz.SimpleAuthorizingAccount((java.lang.Object)"a2b823b1e72eae2b727289df8a00a89df8a0bab6ad8a89c4c5c7a9b62a270000", (java.lang.Object)var56, "");
    org.jsecurity.session.SessionException var59 = new org.jsecurity.session.SessionException("org.jsecurity.realm.SimpleAccountRealm-9-authorization", (java.io.Serializable)var58);
    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      java.lang.Object var60 = var48.removeAttribute((java.lang.Object)"org.jsecurity.realm.SimpleAccountRealm-9-authorization");
      fail("Expected exception of type org.jsecurity.session.InvalidSessionException");
    } catch (org.jsecurity.session.InvalidSessionException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var1);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var2);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var5);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var8);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var9);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var10);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var18);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var19);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var20);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var29);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var33 + "' != '" + "a4399825-370c-475b-96f9-08c7257d4576"+ "'", var33.equals("a4399825-370c-475b-96f9-08c7257d4576"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var41);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var44);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var49);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var50 + "' != '" + "a4399825-370c-475b-96f9-08c7257d4576"+ "'", var50.equals("a4399825-370c-475b-96f9-08c7257d4576"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var51);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var52);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var55);

  }

  public void test69() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest7.test69");


    org.jsecurity.mgt.DefaultSecurityManager var0 = new org.jsecurity.mgt.DefaultSecurityManager();
    java.io.InputStream var2 = org.jsecurity.util.ClassUtils.getResourceAsStream("");
    java.lang.Object[] var3 = new java.lang.Object[] { var2};
    java.util.List var4 = org.jsecurity.util.CollectionUtils.asList(var3);
    org.jsecurity.authc.pam.ModularRealmAuthenticator var5 = new org.jsecurity.authc.pam.ModularRealmAuthenticator(var4);
    org.jsecurity.authc.pam.AllSuccessfulModularAuthenticationStrategy var6 = new org.jsecurity.authc.pam.AllSuccessfulModularAuthenticationStrategy();
    var5.setModularAuthenticationStrategy((org.jsecurity.authc.pam.ModularAuthenticationStrategy)var6);
    org.jsecurity.authz.SimpleAuthorizationInfo var8 = new org.jsecurity.authz.SimpleAuthorizationInfo();
    var8.addStringPermission("hi!");
    java.io.InputStream var12 = org.jsecurity.util.ClassUtils.getResourceAsStream("");
    java.lang.Object[] var13 = new java.lang.Object[] { var12};
    java.util.List var14 = org.jsecurity.util.CollectionUtils.asList(var13);
    var8.addRoles((java.util.Collection)var14);
    var5.setAuthenticationListeners((java.util.Collection)var14);
    var0.setSessionListeners((java.util.Collection)var14);
    org.jsecurity.authc.pam.ModularRealmAuthenticator var18 = new org.jsecurity.authc.pam.ModularRealmAuthenticator();
    org.jsecurity.authz.permission.InvalidPermissionStringException var21 = new org.jsecurity.authz.permission.InvalidPermissionStringException("", "dd\uFFFD");
    org.jsecurity.JSecurityException var23 = new org.jsecurity.JSecurityException("");
    org.jsecurity.authc.SimpleAuthenticationInfo var25 = new org.jsecurity.authc.SimpleAuthenticationInfo((java.lang.Object)var21, (java.lang.Object)"", "org.jsecurity.authz.UnauthorizedException: org.jsecurity.session.ExpiredSessionException: ");
    org.jsecurity.subject.PrincipalCollection var26 = var25.getPrincipals();
    var18.onLogout(var26);
    var0.setAuthenticator((org.jsecurity.authc.Authenticator)var18);
    org.jsecurity.codec.CodecException var31 = new org.jsecurity.codec.CodecException("dd\uFFFD");
    org.jsecurity.authc.ConcurrentAccessException var32 = new org.jsecurity.authc.ConcurrentAccessException("org.jsecurity.authz.UnauthorizedException: org.jsecurity.session.ExpiredSessionException: ", (java.lang.Throwable)var31);
    org.jsecurity.subject.SimplePrincipalCollection var34 = new org.jsecurity.subject.SimplePrincipalCollection((java.lang.Object)var31, "");
    org.jsecurity.authc.pam.FirstSuccessfulAuthenticationStrategy var35 = new org.jsecurity.authc.pam.FirstSuccessfulAuthenticationStrategy();
    org.jsecurity.authz.UnauthorizedException var37 = new org.jsecurity.authz.UnauthorizedException("org.jsecurity.config.ConfigurationException: dd\uFFFD");
    java.lang.Throwable[] var38 = var37.getSuppressed();
    java.util.List var39 = org.jsecurity.util.CollectionUtils.asList((java.lang.Object[])var38);
    org.jsecurity.authc.UsernamePasswordToken var40 = new org.jsecurity.authc.UsernamePasswordToken();
    java.lang.String var41 = var40.getUsername();
    java.net.InetAddress var42 = var40.getInetAddress();
    org.jsecurity.authc.AuthenticationInfo var43 = var35.beforeAllAttempts((java.util.Collection)var39, (org.jsecurity.authc.AuthenticationToken)var40);
    org.jsecurity.session.UnknownSessionException var48 = new org.jsecurity.session.UnknownSessionException("dd\uFFFD", (java.io.Serializable)100.0f);
    org.jsecurity.subject.SubjectException var49 = new org.jsecurity.subject.SubjectException("dd\uFFFD", (java.lang.Throwable)var48);
    org.jsecurity.io.SerializationException var50 = new org.jsecurity.io.SerializationException("", (java.lang.Throwable)var49);
    java.lang.Throwable[] var51 = var49.getSuppressed();
    java.util.Set var52 = org.jsecurity.util.CollectionUtils.asSet((java.lang.Object[])var51);
    org.jsecurity.authc.SimpleAccount var53 = new org.jsecurity.authc.SimpleAccount((org.jsecurity.subject.PrincipalCollection)var34, (java.lang.Object)var39, var52);
    java.io.InputStream var55 = org.jsecurity.util.ClassUtils.getResourceAsStream("");
    java.lang.Object[] var56 = new java.lang.Object[] { var55};
    java.util.List var57 = org.jsecurity.util.CollectionUtils.asList(var56);
    org.jsecurity.authc.pam.ModularRealmAuthenticator var58 = new org.jsecurity.authc.pam.ModularRealmAuthenticator(var57);
    org.jsecurity.subject.SimplePrincipalCollection var60 = new org.jsecurity.subject.SimplePrincipalCollection((java.util.Collection)var57, "org.jsecurity.authz.UnauthorizedException: org.jsecurity.session.ExpiredSessionException: ");
    org.jsecurity.io.ResourceException var64 = new org.jsecurity.io.ResourceException("hi!");
    org.jsecurity.authc.UnknownAccountException var65 = new org.jsecurity.authc.UnknownAccountException((java.lang.Throwable)var64);
    org.jsecurity.session.StoppedSessionException var66 = new org.jsecurity.session.StoppedSessionException("dd\uFFFD", (java.io.Serializable)var64);
    org.jsecurity.session.UnknownSessionException var67 = new org.jsecurity.session.UnknownSessionException("org.jsecurity.authz.UnauthorizedException: org.jsecurity.session.ExpiredSessionException: ", (java.lang.Throwable)var64);
    boolean var68 = var60.equals((java.lang.Object)var64);
    var34.addAll((org.jsecurity.subject.PrincipalCollection)var60);
    org.jsecurity.session.UnknownSessionException var74 = new org.jsecurity.session.UnknownSessionException("dd\uFFFD", (java.io.Serializable)100.0f);
    org.jsecurity.subject.SubjectException var75 = new org.jsecurity.subject.SubjectException("dd\uFFFD", (java.lang.Throwable)var74);
    org.jsecurity.io.SerializationException var76 = new org.jsecurity.io.SerializationException("", (java.lang.Throwable)var75);
    java.lang.Throwable[] var77 = var75.getSuppressed();
    java.util.List var78 = org.jsecurity.util.CollectionUtils.asList((java.lang.Object[])var77);
    boolean var79 = var0.isPermittedAll((org.jsecurity.subject.PrincipalCollection)var34, (java.util.Collection)var78);
    org.jsecurity.session.mgt.SessionManager var80 = var0.getSessionManager();
    org.jsecurity.subject.DelegatingSubject var81 = new org.jsecurity.subject.DelegatingSubject((org.jsecurity.mgt.SecurityManager)var0);
    var81.logout();
    java.lang.Object var83 = var81.getPrincipal();
    org.jsecurity.session.UnknownSessionException var88 = new org.jsecurity.session.UnknownSessionException("dd\uFFFD", (java.io.Serializable)100.0f);
    org.jsecurity.subject.SubjectException var89 = new org.jsecurity.subject.SubjectException("dd\uFFFD", (java.lang.Throwable)var88);
    org.jsecurity.io.SerializationException var90 = new org.jsecurity.io.SerializationException("", (java.lang.Throwable)var89);
    java.lang.Throwable[] var91 = var89.getSuppressed();
    java.util.List var92 = org.jsecurity.util.CollectionUtils.asList((java.lang.Object[])var91);
    org.jsecurity.authc.pam.ModularRealmAuthenticator var93 = new org.jsecurity.authc.pam.ModularRealmAuthenticator(var92);
    boolean var94 = var81.isPermittedAll((java.util.Collection)var92);
    org.jsecurity.subject.PrincipalCollection var95 = var81.getPrincipals();
    boolean var97 = var81.hasRole("07c3a6b7-b2be-4132-9b71-96c0b4a3a551");
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var2);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var3);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var4);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var12);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var13);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var14);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var26);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var38);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var39);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var41);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var42);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var43);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var51);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var52);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var55);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var56);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var57);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var68 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var77);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var78);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var79 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var80);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var83);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var91);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var92);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var94 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var95);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var97 == false);

  }

  public void test70() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest7.test70");


    java.lang.String[] var4 = org.jsecurity.util.StringUtils.split("\uFFFD\uFFFD#\uFFFD\uFFFD.\uFFFD+r\uFFFD\u695A\u05F1\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\u0011y\uFFFDf\uFFFD_}", ' ', '4', ' ');
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var4);

  }

  public void test71() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest7.test71");


    org.jsecurity.authc.IncorrectCredentialsException var3 = new org.jsecurity.authc.IncorrectCredentialsException("dd\uFFFD");
    org.jsecurity.authc.UnknownAccountException var4 = new org.jsecurity.authc.UnknownAccountException("", (java.lang.Throwable)var3);
    org.jsecurity.authc.UnknownAccountException var5 = new org.jsecurity.authc.UnknownAccountException("f7a4125e-8d75-4df1-90b1-d72857bb1eb2", (java.lang.Throwable)var4);

  }

  public void test72() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest7.test72");


    org.jsecurity.codec.CodecException var2 = new org.jsecurity.codec.CodecException("dd\uFFFD");
    org.jsecurity.authc.ConcurrentAccessException var3 = new org.jsecurity.authc.ConcurrentAccessException("org.jsecurity.authz.UnauthorizedException: org.jsecurity.session.ExpiredSessionException: ", (java.lang.Throwable)var2);
    org.jsecurity.subject.SimplePrincipalCollection var5 = new org.jsecurity.subject.SimplePrincipalCollection((java.lang.Object)var2, "");
    char[] var9 = new char[] { };
    org.jsecurity.authc.UsernamePasswordToken var11 = new org.jsecurity.authc.UsernamePasswordToken("hi!", var9, true);
    org.jsecurity.authc.UsernamePasswordToken var12 = new org.jsecurity.authc.UsernamePasswordToken("\u0000\u0000", var9);
    org.jsecurity.session.mgt.SimpleSession var13 = new org.jsecurity.session.mgt.SimpleSession();
    var13.setTimeout((-1L));
    org.jsecurity.session.mgt.SimpleSession var16 = new org.jsecurity.session.mgt.SimpleSession();
    java.util.Date var17 = var16.getLastAccessTime();
    var13.setLastAccessTime(var17);
    java.net.InetAddress var19 = var13.getHostAddress();
    var12.setInetAddress(var19);
    org.jsecurity.session.mgt.SimpleSession var21 = new org.jsecurity.session.mgt.SimpleSession();
    var21.setTimeout((-1L));
    org.jsecurity.session.mgt.SimpleSession var24 = new org.jsecurity.session.mgt.SimpleSession();
    java.util.Date var25 = var24.getLastAccessTime();
    var21.setLastAccessTime(var25);
    org.jsecurity.session.mgt.SimpleSession var27 = new org.jsecurity.session.mgt.SimpleSession();
    java.util.Date var28 = var27.getLastAccessTime();
    var21.setStopTimestamp(var28);
    org.jsecurity.mgt.DefaultSecurityManager var30 = new org.jsecurity.mgt.DefaultSecurityManager();
    org.jsecurity.authc.pam.AllSuccessfulModularAuthenticationStrategy var31 = new org.jsecurity.authc.pam.AllSuccessfulModularAuthenticationStrategy();
    org.jsecurity.authc.pam.AllSuccessfulModularAuthenticationStrategy var32 = new org.jsecurity.authc.pam.AllSuccessfulModularAuthenticationStrategy();
    char[] var34 = new char[] { };
    org.jsecurity.authc.UsernamePasswordToken var36 = new org.jsecurity.authc.UsernamePasswordToken("hi!", var34, true);
    org.jsecurity.authc.SimpleAccount var37 = new org.jsecurity.authc.SimpleAccount();
    var37.setCredentialsExpired(false);
    boolean var40 = var37.isLocked();
    org.jsecurity.authc.AuthenticationInfo var41 = var32.afterAllAttempts((org.jsecurity.authc.AuthenticationToken)var36, (org.jsecurity.authc.AuthenticationInfo)var37);
    char[] var45 = new char[] { '4', '#'};
    org.jsecurity.authc.UsernamePasswordToken var46 = new org.jsecurity.authc.UsernamePasswordToken("\u0000\u0000", var45);
    org.jsecurity.authc.SimpleAccount var47 = new org.jsecurity.authc.SimpleAccount();
    var47.setCredentialsExpired(false);
    var47.setCredentialsExpired(false);
    boolean var52 = var47.isCredentialsExpired();
    org.jsecurity.authc.AuthenticationInfo var53 = var32.afterAllAttempts((org.jsecurity.authc.AuthenticationToken)var46, (org.jsecurity.authc.AuthenticationInfo)var47);
    org.jsecurity.authz.UnauthenticatedException var57 = new org.jsecurity.authz.UnauthenticatedException();
    org.jsecurity.config.UnresolveableReferenceException var58 = new org.jsecurity.config.UnresolveableReferenceException("", (java.lang.Throwable)var57);
    org.jsecurity.cache.CacheException var59 = new org.jsecurity.cache.CacheException("org.jsecurity.config.ConfigurationException: dd\uFFFD", (java.lang.Throwable)var57);
    org.jsecurity.authc.SimpleAuthenticationInfo var61 = new org.jsecurity.authc.SimpleAuthenticationInfo((java.lang.Object)"org.jsecurity.config.ConfigurationException: dd\uFFFD", (java.lang.Object)var59, "a2b823b1e72eae2b727289df8a00a89df8a0bab6ad8a89c4c5c7a9b62a270000");
    org.jsecurity.subject.PrincipalCollection var62 = var61.getPrincipals();
    org.jsecurity.authc.AuthenticationInfo var63 = var31.afterAllAttempts((org.jsecurity.authc.AuthenticationToken)var46, (org.jsecurity.authc.AuthenticationInfo)var61);
    var30.setModularAuthenticationStrategy((org.jsecurity.authc.pam.ModularAuthenticationStrategy)var31);
    org.jsecurity.subject.RememberMeManager var65 = var30.getRememberMeManager();
    org.jsecurity.authc.pam.ModularRealmAuthenticator var66 = new org.jsecurity.authc.pam.ModularRealmAuthenticator();
    var30.setAuthenticator((org.jsecurity.authc.Authenticator)var66);
    org.jsecurity.codec.CodecException var70 = new org.jsecurity.codec.CodecException("dd\uFFFD");
    org.jsecurity.authc.ConcurrentAccessException var71 = new org.jsecurity.authc.ConcurrentAccessException("org.jsecurity.authz.UnauthorizedException: org.jsecurity.session.ExpiredSessionException: ", (java.lang.Throwable)var70);
    org.jsecurity.subject.SimplePrincipalCollection var73 = new org.jsecurity.subject.SimplePrincipalCollection((java.lang.Object)var70, "");
    java.io.InputStream var75 = org.jsecurity.util.ClassUtils.getResourceAsStream("");
    java.lang.Object[] var76 = new java.lang.Object[] { var75};
    java.util.List var77 = org.jsecurity.util.CollectionUtils.asList(var76);
    org.jsecurity.authc.pam.ModularRealmAuthenticator var78 = new org.jsecurity.authc.pam.ModularRealmAuthenticator(var77);
    var73.addAll((java.util.Collection)var77, "\u0000\u0000");
    org.jsecurity.authc.pam.FirstSuccessfulAuthenticationStrategy var81 = new org.jsecurity.authc.pam.FirstSuccessfulAuthenticationStrategy();
    org.jsecurity.authz.UnauthorizedException var83 = new org.jsecurity.authz.UnauthorizedException("org.jsecurity.config.ConfigurationException: dd\uFFFD");
    java.lang.Throwable[] var84 = var83.getSuppressed();
    java.util.List var85 = org.jsecurity.util.CollectionUtils.asList((java.lang.Object[])var84);
    org.jsecurity.authc.UsernamePasswordToken var86 = new org.jsecurity.authc.UsernamePasswordToken();
    java.lang.String var87 = var86.getUsername();
    java.net.InetAddress var88 = var86.getInetAddress();
    org.jsecurity.authc.AuthenticationInfo var89 = var81.beforeAllAttempts((java.util.Collection)var85, (org.jsecurity.authc.AuthenticationToken)var86);
    var30.checkPermissions((org.jsecurity.subject.PrincipalCollection)var73, (java.util.Collection)var85);
    org.jsecurity.subject.DelegatingSubject var91 = new org.jsecurity.subject.DelegatingSubject((org.jsecurity.subject.PrincipalCollection)var5, false, var19, (org.jsecurity.session.Session)var21, (org.jsecurity.mgt.SecurityManager)var30);
    org.jsecurity.subject.Subject var92 = var30.getSubject();
    org.jsecurity.session.mgt.SessionManager var93 = var30.getSessionManager();
    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      var30.setRememberMeDecryptionCipherKeyHex("5b932e2b-b95e-47e2-aa30-6b0bc40292e0");
      fail("Expected exception of type java.lang.IllegalStateException");
    } catch (java.lang.IllegalStateException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var9);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var17);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var19);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var25);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var28);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var34);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var40 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var41);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var45);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var52 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var53);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var62);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var63);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var65);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var75);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var76);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var77);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var84);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var85);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var87);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var88);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var89);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var92);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var93);

  }

  public void test73() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest7.test73");


    org.jsecurity.realm.activedirectory.ActiveDirectoryRealm var0 = new org.jsecurity.realm.activedirectory.ActiveDirectoryRealm();
    var0.init();
    var0.init();
    org.jsecurity.config.ReflectionBuilder var3 = new org.jsecurity.config.ReflectionBuilder();
    org.jsecurity.config.ReflectionBuilder var4 = new org.jsecurity.config.ReflectionBuilder();
    org.jsecurity.io.IniResource var5 = new org.jsecurity.io.IniResource();
    var5.setCharsetName("org.jsecurity.authz.UnauthorizedException: org.jsecurity.session.ExpiredSessionException: ");
    java.util.Map var8 = var5.getSections();
    java.util.Map var9 = var4.buildObjects(var8);
    org.jsecurity.config.ReflectionBuilder var10 = new org.jsecurity.config.ReflectionBuilder();
    org.jsecurity.io.IniResource var11 = new org.jsecurity.io.IniResource();
    var11.setCharsetName("org.jsecurity.authz.UnauthorizedException: org.jsecurity.session.ExpiredSessionException: ");
    java.util.Map var14 = var11.getSections();
    java.util.Map var15 = var10.buildObjects(var14);
    java.util.Map var16 = var4.buildObjects(var15);
    java.util.Map var17 = var3.buildObjects(var16);
    var0.setGroupRolesMap(var17);
    org.jsecurity.authc.pam.ModularRealmAuthenticator var19 = new org.jsecurity.authc.pam.ModularRealmAuthenticator((org.jsecurity.realm.Realm)var0);
    org.jsecurity.mgt.DefaultSecurityManager var20 = new org.jsecurity.mgt.DefaultSecurityManager((org.jsecurity.realm.Realm)var0);
    org.jsecurity.authc.Authenticator var21 = var20.getAuthenticator();
    org.jsecurity.config.ConfigurationException var23 = new org.jsecurity.config.ConfigurationException("bcd88f91-36fc-4824-97c3-1a752a1a4e71");
    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      org.jsecurity.session.Session var24 = var20.getSession((java.io.Serializable)"bcd88f91-36fc-4824-97c3-1a752a1a4e71");
      fail("Expected exception of type org.jsecurity.session.InvalidSessionException");
    } catch (org.jsecurity.session.InvalidSessionException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var8);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var9);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var14);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var15);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var16);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var17);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var21);

  }

  public void test74() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest7.test74");


    boolean var1 = org.jsecurity.io.ResourceUtils.resourceExists("1f71e992-36d8-4d02-9b75-21b9056839ca");
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var1 == false);

  }

  public void test75() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest7.test75");


    org.jsecurity.mgt.DefaultSecurityManager var0 = new org.jsecurity.mgt.DefaultSecurityManager();
    java.io.InputStream var2 = org.jsecurity.util.ClassUtils.getResourceAsStream("");
    java.lang.Object[] var3 = new java.lang.Object[] { var2};
    java.util.List var4 = org.jsecurity.util.CollectionUtils.asList(var3);
    org.jsecurity.authc.pam.ModularRealmAuthenticator var5 = new org.jsecurity.authc.pam.ModularRealmAuthenticator(var4);
    org.jsecurity.authc.pam.AllSuccessfulModularAuthenticationStrategy var6 = new org.jsecurity.authc.pam.AllSuccessfulModularAuthenticationStrategy();
    var5.setModularAuthenticationStrategy((org.jsecurity.authc.pam.ModularAuthenticationStrategy)var6);
    org.jsecurity.authz.SimpleAuthorizationInfo var8 = new org.jsecurity.authz.SimpleAuthorizationInfo();
    var8.addStringPermission("hi!");
    java.io.InputStream var12 = org.jsecurity.util.ClassUtils.getResourceAsStream("");
    java.lang.Object[] var13 = new java.lang.Object[] { var12};
    java.util.List var14 = org.jsecurity.util.CollectionUtils.asList(var13);
    var8.addRoles((java.util.Collection)var14);
    var5.setAuthenticationListeners((java.util.Collection)var14);
    var0.setSessionListeners((java.util.Collection)var14);
    org.jsecurity.authc.pam.ModularRealmAuthenticator var18 = new org.jsecurity.authc.pam.ModularRealmAuthenticator();
    org.jsecurity.authz.permission.InvalidPermissionStringException var21 = new org.jsecurity.authz.permission.InvalidPermissionStringException("", "dd\uFFFD");
    org.jsecurity.JSecurityException var23 = new org.jsecurity.JSecurityException("");
    org.jsecurity.authc.SimpleAuthenticationInfo var25 = new org.jsecurity.authc.SimpleAuthenticationInfo((java.lang.Object)var21, (java.lang.Object)"", "org.jsecurity.authz.UnauthorizedException: org.jsecurity.session.ExpiredSessionException: ");
    org.jsecurity.subject.PrincipalCollection var26 = var25.getPrincipals();
    var18.onLogout(var26);
    var0.setAuthenticator((org.jsecurity.authc.Authenticator)var18);
    org.jsecurity.codec.CodecException var31 = new org.jsecurity.codec.CodecException("dd\uFFFD");
    org.jsecurity.authc.ConcurrentAccessException var32 = new org.jsecurity.authc.ConcurrentAccessException("org.jsecurity.authz.UnauthorizedException: org.jsecurity.session.ExpiredSessionException: ", (java.lang.Throwable)var31);
    org.jsecurity.subject.SimplePrincipalCollection var34 = new org.jsecurity.subject.SimplePrincipalCollection((java.lang.Object)var31, "");
    org.jsecurity.authc.pam.FirstSuccessfulAuthenticationStrategy var35 = new org.jsecurity.authc.pam.FirstSuccessfulAuthenticationStrategy();
    org.jsecurity.authz.UnauthorizedException var37 = new org.jsecurity.authz.UnauthorizedException("org.jsecurity.config.ConfigurationException: dd\uFFFD");
    java.lang.Throwable[] var38 = var37.getSuppressed();
    java.util.List var39 = org.jsecurity.util.CollectionUtils.asList((java.lang.Object[])var38);
    org.jsecurity.authc.UsernamePasswordToken var40 = new org.jsecurity.authc.UsernamePasswordToken();
    java.lang.String var41 = var40.getUsername();
    java.net.InetAddress var42 = var40.getInetAddress();
    org.jsecurity.authc.AuthenticationInfo var43 = var35.beforeAllAttempts((java.util.Collection)var39, (org.jsecurity.authc.AuthenticationToken)var40);
    org.jsecurity.session.UnknownSessionException var48 = new org.jsecurity.session.UnknownSessionException("dd\uFFFD", (java.io.Serializable)100.0f);
    org.jsecurity.subject.SubjectException var49 = new org.jsecurity.subject.SubjectException("dd\uFFFD", (java.lang.Throwable)var48);
    org.jsecurity.io.SerializationException var50 = new org.jsecurity.io.SerializationException("", (java.lang.Throwable)var49);
    java.lang.Throwable[] var51 = var49.getSuppressed();
    java.util.Set var52 = org.jsecurity.util.CollectionUtils.asSet((java.lang.Object[])var51);
    org.jsecurity.authc.SimpleAccount var53 = new org.jsecurity.authc.SimpleAccount((org.jsecurity.subject.PrincipalCollection)var34, (java.lang.Object)var39, var52);
    java.io.InputStream var55 = org.jsecurity.util.ClassUtils.getResourceAsStream("");
    java.lang.Object[] var56 = new java.lang.Object[] { var55};
    java.util.List var57 = org.jsecurity.util.CollectionUtils.asList(var56);
    org.jsecurity.authc.pam.ModularRealmAuthenticator var58 = new org.jsecurity.authc.pam.ModularRealmAuthenticator(var57);
    org.jsecurity.subject.SimplePrincipalCollection var60 = new org.jsecurity.subject.SimplePrincipalCollection((java.util.Collection)var57, "org.jsecurity.authz.UnauthorizedException: org.jsecurity.session.ExpiredSessionException: ");
    org.jsecurity.io.ResourceException var64 = new org.jsecurity.io.ResourceException("hi!");
    org.jsecurity.authc.UnknownAccountException var65 = new org.jsecurity.authc.UnknownAccountException((java.lang.Throwable)var64);
    org.jsecurity.session.StoppedSessionException var66 = new org.jsecurity.session.StoppedSessionException("dd\uFFFD", (java.io.Serializable)var64);
    org.jsecurity.session.UnknownSessionException var67 = new org.jsecurity.session.UnknownSessionException("org.jsecurity.authz.UnauthorizedException: org.jsecurity.session.ExpiredSessionException: ", (java.lang.Throwable)var64);
    boolean var68 = var60.equals((java.lang.Object)var64);
    var34.addAll((org.jsecurity.subject.PrincipalCollection)var60);
    org.jsecurity.session.UnknownSessionException var74 = new org.jsecurity.session.UnknownSessionException("dd\uFFFD", (java.io.Serializable)100.0f);
    org.jsecurity.subject.SubjectException var75 = new org.jsecurity.subject.SubjectException("dd\uFFFD", (java.lang.Throwable)var74);
    org.jsecurity.io.SerializationException var76 = new org.jsecurity.io.SerializationException("", (java.lang.Throwable)var75);
    java.lang.Throwable[] var77 = var75.getSuppressed();
    java.util.List var78 = org.jsecurity.util.CollectionUtils.asList((java.lang.Object[])var77);
    boolean var79 = var0.isPermittedAll((org.jsecurity.subject.PrincipalCollection)var34, (java.util.Collection)var78);
    org.jsecurity.session.mgt.SessionManager var80 = var0.getSessionManager();
    org.jsecurity.subject.DelegatingSubject var81 = new org.jsecurity.subject.DelegatingSubject((org.jsecurity.mgt.SecurityManager)var0);
    var0.destroy();
    org.jsecurity.session.mgt.SessionManager var83 = var0.getSessionManager();
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var2);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var3);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var4);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var12);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var13);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var14);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var26);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var38);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var39);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var41);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var42);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var43);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var51);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var52);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var55);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var56);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var57);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var68 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var77);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var78);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var79 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var80);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var83);

  }

  public void test76() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest7.test76");


    char[] var2 = new char[] { };
    org.jsecurity.authc.UsernamePasswordToken var4 = new org.jsecurity.authc.UsernamePasswordToken("hi!", var2, true);
    byte[] var5 = org.jsecurity.codec.Hex.decode(var2);
    byte[] var6 = org.jsecurity.codec.Hex.decode(var2);
    byte[] var7 = org.jsecurity.codec.Base64.encode(var6);
    char[] var8 = org.jsecurity.codec.Hex.encode(var6);
    org.jsecurity.session.mgt.eis.MemorySessionDAO var9 = new org.jsecurity.session.mgt.eis.MemorySessionDAO();
    org.jsecurity.cache.Cache var10 = var9.getActiveSessionsCache();
    org.jsecurity.cache.CacheManager var11 = var9.getCacheManager();
    org.jsecurity.cache.HashtableCacheManager var12 = new org.jsecurity.cache.HashtableCacheManager();
    org.jsecurity.cache.Cache var14 = var12.getCache("\u0000\u0000");
    var9.setActiveSessionsCache(var14);
    java.io.InputStream var17 = org.jsecurity.util.ClassUtils.getResourceAsStream("");
    java.lang.Object[] var18 = new java.lang.Object[] { var17};
    java.util.List var19 = org.jsecurity.util.CollectionUtils.asList(var18);
    org.jsecurity.authc.pam.ModularRealmAuthenticator var20 = new org.jsecurity.authc.pam.ModularRealmAuthenticator(var19);
    org.jsecurity.authc.pam.AllSuccessfulModularAuthenticationStrategy var21 = new org.jsecurity.authc.pam.AllSuccessfulModularAuthenticationStrategy();
    var20.setModularAuthenticationStrategy((org.jsecurity.authc.pam.ModularAuthenticationStrategy)var21);
    org.jsecurity.authz.SimpleAuthorizationInfo var23 = new org.jsecurity.authz.SimpleAuthorizationInfo();
    var23.addStringPermission("hi!");
    java.io.InputStream var27 = org.jsecurity.util.ClassUtils.getResourceAsStream("");
    java.lang.Object[] var28 = new java.lang.Object[] { var27};
    java.util.List var29 = org.jsecurity.util.CollectionUtils.asList(var28);
    var23.addRoles((java.util.Collection)var29);
    var20.setAuthenticationListeners((java.util.Collection)var29);
    org.jsecurity.realm.activedirectory.ActiveDirectoryRealm var32 = new org.jsecurity.realm.activedirectory.ActiveDirectoryRealm();
    var32.setPrincipalSuffix("");
    var20.setRealm((org.jsecurity.realm.Realm)var32);
    org.jsecurity.cache.HashtableCacheManager var36 = new org.jsecurity.cache.HashtableCacheManager();
    org.jsecurity.cache.Cache var38 = var36.getCache("\u0000\u0000");
    var32.setAuthorizationCache(var38);
    var9.setActiveSessionsCache(var38);
    org.jsecurity.session.mgt.SimpleSession var41 = new org.jsecurity.session.mgt.SimpleSession();
    java.io.Serializable var42 = var9.create((org.jsecurity.session.Session)var41);
    org.jsecurity.session.mgt.SimpleSession var43 = new org.jsecurity.session.mgt.SimpleSession();
    var43.touch();
    var43.validate();
    org.jsecurity.session.mgt.SimpleSession var46 = new org.jsecurity.session.mgt.SimpleSession();
    var46.setTimeout((-1L));
    org.jsecurity.session.mgt.SimpleSession var49 = new org.jsecurity.session.mgt.SimpleSession();
    java.util.Date var50 = var49.getLastAccessTime();
    var46.setLastAccessTime(var50);
    org.jsecurity.session.mgt.SimpleSession var52 = new org.jsecurity.session.mgt.SimpleSession();
    java.util.Date var53 = var52.getLastAccessTime();
    var46.setStopTimestamp(var53);
    var43.setLastAccessTime(var53);
    var41.setLastAccessTime(var53);
    org.jsecurity.session.mgt.ImmutableProxiedSession var57 = new org.jsecurity.session.mgt.ImmutableProxiedSession((org.jsecurity.session.Session)var41);
    java.util.Date var58 = var57.getStartTimestamp();
    java.io.Serializable var59 = var57.getId();
    java.util.Date var60 = var57.getStartTimestamp();
    java.util.Date var61 = var57.getLastAccessTime();
    java.net.InetAddress var62 = var57.getHostAddress();
    org.jsecurity.authz.HostUnauthorizedException var63 = new org.jsecurity.authz.HostUnauthorizedException(var62);
    org.jsecurity.authc.UsernamePasswordToken var64 = new org.jsecurity.authc.UsernamePasswordToken("ed89efc0-e7ee-4bac-ae85-52918004c403", var8, var62);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var2);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var5);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var6);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var7);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var8);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var10);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var11);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var14);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var17);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var18);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var19);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var27);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var28);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var29);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var38);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var42 + "' != '" + "42f93426-fd7c-42ce-a69e-0917c2681940"+ "'", var42.equals("42f93426-fd7c-42ce-a69e-0917c2681940"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var50);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var53);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var58);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var59 + "' != '" + "42f93426-fd7c-42ce-a69e-0917c2681940"+ "'", var59.equals("42f93426-fd7c-42ce-a69e-0917c2681940"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var60);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var61);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var62);

  }

  public void test77() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest7.test77");


    org.jsecurity.io.DefaultSerializer var0 = new org.jsecurity.io.DefaultSerializer();
    org.jsecurity.authz.SimpleRole var1 = new org.jsecurity.authz.SimpleRole();
    byte[] var2 = var0.serialize((java.lang.Object)var1);
    byte[] var4 = var0.serialize((java.lang.Object)"org.jsecurity.realm.text.PropertiesRealm-263-authorization");
    org.jsecurity.crypto.hash.Md2Hash var6 = org.jsecurity.crypto.hash.Md2Hash.fromBase64String("0a4dfd98-4ec1-476c-a8b7-0ade4d007ab7");
    byte[] var7 = var0.serialize((java.lang.Object)"0a4dfd98-4ec1-476c-a8b7-0ade4d007ab7");
    org.jsecurity.authc.IncorrectCredentialsException var10 = new org.jsecurity.authc.IncorrectCredentialsException("");
    org.jsecurity.util.InstantiationException var11 = new org.jsecurity.util.InstantiationException((java.lang.Throwable)var10);
    org.jsecurity.authc.IncorrectCredentialsException var12 = new org.jsecurity.authc.IncorrectCredentialsException("HashtableCache [orgjsecurityauthcCredentialsException783ccd3148a842dd890fdf885a7baafAA==]", (java.lang.Throwable)var11);
    byte[] var13 = var0.serialize((java.lang.Object)var11);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var2);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var4);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var6);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var7);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var13);

  }

  public void test78() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest7.test78");


    org.jsecurity.realm.text.PropertiesRealm var0 = new org.jsecurity.realm.text.PropertiesRealm();
    var0.setReloadIntervalSeconds(10);
    java.lang.String var3 = var0.getUserDefinitions();
    var0.setReloadIntervalSeconds((-1));
    var0.destroy();
    var0.destroy();
    var0.setUserDefinitions("330a41fd-f404-4b7f-8f3c-bc52c3f67c3e");
    var0.setUseXmlFormat(true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var3);

  }

  public void test79() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest7.test79");


    org.jsecurity.session.UnknownSessionException var4 = new org.jsecurity.session.UnknownSessionException("dd\uFFFD", (java.io.Serializable)100.0f);
    org.jsecurity.config.ConfigurationException var5 = new org.jsecurity.config.ConfigurationException("dd\uFFFD", (java.lang.Throwable)var4);
    org.jsecurity.session.ExpiredSessionException var7 = new org.jsecurity.session.ExpiredSessionException("", (java.lang.Throwable)var5, (java.io.Serializable)true);
    org.jsecurity.authc.pam.UnsupportedTokenException var8 = new org.jsecurity.authc.pam.UnsupportedTokenException((java.lang.Throwable)var7);
    org.jsecurity.authc.AccountException var9 = new org.jsecurity.authc.AccountException((java.lang.Throwable)var8);
    org.jsecurity.session.SessionException var10 = new org.jsecurity.session.SessionException((java.lang.Throwable)var9);
    org.jsecurity.session.ExpiredSessionException var11 = new org.jsecurity.session.ExpiredSessionException((java.lang.Throwable)var10);

  }

  public void test80() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest7.test80");


    org.jsecurity.subject.SubjectException var1 = new org.jsecurity.subject.SubjectException("c64f564b-28c2-4615-b74b-389173342864");

  }

  public void test81() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest7.test81");


    org.jsecurity.realm.jndi.JndiRealmFactory var0 = new org.jsecurity.realm.jndi.JndiRealmFactory();
    java.io.InputStream var2 = org.jsecurity.util.ClassUtils.getResourceAsStream("");
    java.lang.Object[] var3 = new java.lang.Object[] { var2};
    java.util.List var4 = org.jsecurity.util.CollectionUtils.asList(var3);
    var0.setJndiNames((java.util.Collection)var4);
    var0.setJndiNames("e23a02c5-2287-4daa-91c4-8efed2be0f73");
    java.util.Collection var8 = var0.getJndiNames();
    java.util.Collection var9 = var0.getJndiNames();
    var0.setJndiNames("org.jsecurity.realm.text.TextConfigurationRealm_2300");
    boolean var12 = var0.isResourceRef();
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var2);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var3);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var4);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var8);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var9);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var12 == false);

  }

  public void test82() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest7.test82");


    org.jsecurity.session.mgt.DefaultSessionManager var0 = new org.jsecurity.session.mgt.DefaultSessionManager();
    org.jsecurity.session.mgt.SessionValidationScheduler var1 = var0.getSessionValidationScheduler();
    org.jsecurity.subject.InvalidSubjectException var3 = new org.jsecurity.subject.InvalidSubjectException("NfxhYN7ItBfRAmDBmprtU73ghfEEPpcDJrHPkZ06wiY=");
    boolean var4 = var0.isValid((java.io.Serializable)var3);
    org.jsecurity.cache.ehcache.EhCacheManager var5 = new org.jsecurity.cache.ehcache.EhCacheManager();
    net.sf.ehcache.CacheManager var6 = var5.getCacheManager();
    var5.destroy();
    net.sf.ehcache.CacheManager var8 = var5.getCacheManager();
    net.sf.ehcache.CacheManager var9 = var5.getCacheManager();
    var5.init();
    var0.setCacheManager((org.jsecurity.cache.CacheManager)var5);
    boolean var12 = var0.isSessionValidationSchedulerEnabled();
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var4 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var6);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var8);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var9);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var12 == true);

  }

  public void test83() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest7.test83");


    org.jsecurity.realm.activedirectory.ActiveDirectoryRealm var0 = new org.jsecurity.realm.activedirectory.ActiveDirectoryRealm();
    var0.initAuthorizationCache();
    var0.setSearchBase("dd\uFFFD");
    var0.setUrl("guest = guest,guest\npresidentskroob = 12345,president\ndarkhelmet = ludicrousspeed,darklord,schwartz\nroot = secret,root\nlonestarr = vespa,goodguy,schwartz\n");
    org.jsecurity.cache.HashtableCache var7 = new org.jsecurity.cache.HashtableCache("b017e95a-a08d-4f3a-bab8-cc9b39ef5331");
    var0.setAuthorizationCache((org.jsecurity.cache.Cache)var7);
    java.util.Set var9 = var7.values();
    java.lang.String var10 = var7.toString();
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var9);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var10 + "' != '" + "HashtableCache [b017e95a-a08d-4f3a-bab8-cc9b39ef5331]"+ "'", var10.equals("HashtableCache [b017e95a-a08d-4f3a-bab8-cc9b39ef5331]"));

  }

  public void test84() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest7.test84");


    org.jsecurity.crypto.hash.Sha1Hash var1 = org.jsecurity.crypto.hash.Sha1Hash.fromBase64String("40513ab3-8ef7-4838-90d0-3db374f1b29c");
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var1);

  }

  public void test85() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest7.test85");


    org.jsecurity.session.mgt.eis.MemorySessionDAO var0 = new org.jsecurity.session.mgt.eis.MemorySessionDAO();
    org.jsecurity.cache.Cache var1 = var0.getActiveSessionsCache();
    var0.setActiveSessionsCacheName("dd\uFFFD");
    org.jsecurity.session.mgt.eis.MemorySessionDAO var4 = new org.jsecurity.session.mgt.eis.MemorySessionDAO();
    org.jsecurity.cache.Cache var5 = var4.getActiveSessionsCache();
    org.jsecurity.cache.CacheManager var6 = var4.getCacheManager();
    org.jsecurity.cache.HashtableCacheManager var7 = new org.jsecurity.cache.HashtableCacheManager();
    org.jsecurity.cache.Cache var9 = var7.getCache("\u0000\u0000");
    var4.setActiveSessionsCache(var9);
    java.io.InputStream var12 = org.jsecurity.util.ClassUtils.getResourceAsStream("");
    java.lang.Object[] var13 = new java.lang.Object[] { var12};
    java.util.List var14 = org.jsecurity.util.CollectionUtils.asList(var13);
    org.jsecurity.authc.pam.ModularRealmAuthenticator var15 = new org.jsecurity.authc.pam.ModularRealmAuthenticator(var14);
    org.jsecurity.authc.pam.AllSuccessfulModularAuthenticationStrategy var16 = new org.jsecurity.authc.pam.AllSuccessfulModularAuthenticationStrategy();
    var15.setModularAuthenticationStrategy((org.jsecurity.authc.pam.ModularAuthenticationStrategy)var16);
    org.jsecurity.authz.SimpleAuthorizationInfo var18 = new org.jsecurity.authz.SimpleAuthorizationInfo();
    var18.addStringPermission("hi!");
    java.io.InputStream var22 = org.jsecurity.util.ClassUtils.getResourceAsStream("");
    java.lang.Object[] var23 = new java.lang.Object[] { var22};
    java.util.List var24 = org.jsecurity.util.CollectionUtils.asList(var23);
    var18.addRoles((java.util.Collection)var24);
    var15.setAuthenticationListeners((java.util.Collection)var24);
    org.jsecurity.realm.activedirectory.ActiveDirectoryRealm var27 = new org.jsecurity.realm.activedirectory.ActiveDirectoryRealm();
    var27.setPrincipalSuffix("");
    var15.setRealm((org.jsecurity.realm.Realm)var27);
    org.jsecurity.cache.HashtableCacheManager var31 = new org.jsecurity.cache.HashtableCacheManager();
    org.jsecurity.cache.Cache var33 = var31.getCache("\u0000\u0000");
    var27.setAuthorizationCache(var33);
    var4.setActiveSessionsCache(var33);
    org.jsecurity.session.mgt.SimpleSession var36 = new org.jsecurity.session.mgt.SimpleSession();
    java.io.Serializable var37 = var4.create((org.jsecurity.session.Session)var36);
    org.jsecurity.session.mgt.SimpleSession var38 = new org.jsecurity.session.mgt.SimpleSession();
    var38.touch();
    var38.validate();
    org.jsecurity.session.mgt.SimpleSession var41 = new org.jsecurity.session.mgt.SimpleSession();
    var41.setTimeout((-1L));
    org.jsecurity.session.mgt.SimpleSession var44 = new org.jsecurity.session.mgt.SimpleSession();
    java.util.Date var45 = var44.getLastAccessTime();
    var41.setLastAccessTime(var45);
    org.jsecurity.session.mgt.SimpleSession var47 = new org.jsecurity.session.mgt.SimpleSession();
    java.util.Date var48 = var47.getLastAccessTime();
    var41.setStopTimestamp(var48);
    var38.setLastAccessTime(var48);
    var36.setLastAccessTime(var48);
    org.jsecurity.session.mgt.ImmutableProxiedSession var52 = new org.jsecurity.session.mgt.ImmutableProxiedSession((org.jsecurity.session.Session)var36);
    java.util.Date var53 = var52.getStartTimestamp();
    var0.update((org.jsecurity.session.Session)var52);
    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      var52.touch();
      fail("Expected exception of type org.jsecurity.session.InvalidSessionException");
    } catch (org.jsecurity.session.InvalidSessionException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var1);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var5);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var6);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var9);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var12);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var13);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var14);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var22);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var23);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var24);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var33);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var37 + "' != '" + "30f7d093-7959-448d-b532-e0d1730e5e43"+ "'", var37.equals("30f7d093-7959-448d-b532-e0d1730e5e43"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var45);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var48);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var53);

  }

  public void test86() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest7.test86");


    org.jsecurity.cache.ehcache.EhCacheManager var0 = new org.jsecurity.cache.ehcache.EhCacheManager();
    net.sf.ehcache.CacheManager var1 = var0.getCacheManager();
    var0.destroy();
    net.sf.ehcache.CacheManager var3 = var0.getCacheManager();
    net.sf.ehcache.CacheManager var4 = var0.getCacheManager();
    var0.init();
    java.lang.String var6 = var0.getCacheManagerConfigFile();
    java.lang.String var7 = var0.getCacheManagerConfigFile();
    var0.destroy();
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var1);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var3);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var4);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var6 + "' != '" + "classpath:org/jsecurity/cache/ehcache/ehcache.xml"+ "'", var6.equals("classpath:org/jsecurity/cache/ehcache/ehcache.xml"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var7 + "' != '" + "classpath:org/jsecurity/cache/ehcache/ehcache.xml"+ "'", var7.equals("classpath:org/jsecurity/cache/ehcache/ehcache.xml"));

  }

  public void test87() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest7.test87");


    org.jsecurity.realm.activedirectory.ActiveDirectoryRealm var0 = new org.jsecurity.realm.activedirectory.ActiveDirectoryRealm();
    var0.init();
    var0.init();
    org.jsecurity.config.ReflectionBuilder var3 = new org.jsecurity.config.ReflectionBuilder();
    org.jsecurity.config.ReflectionBuilder var4 = new org.jsecurity.config.ReflectionBuilder();
    org.jsecurity.io.IniResource var5 = new org.jsecurity.io.IniResource();
    var5.setCharsetName("org.jsecurity.authz.UnauthorizedException: org.jsecurity.session.ExpiredSessionException: ");
    java.util.Map var8 = var5.getSections();
    java.util.Map var9 = var4.buildObjects(var8);
    org.jsecurity.config.ReflectionBuilder var10 = new org.jsecurity.config.ReflectionBuilder();
    org.jsecurity.io.IniResource var11 = new org.jsecurity.io.IniResource();
    var11.setCharsetName("org.jsecurity.authz.UnauthorizedException: org.jsecurity.session.ExpiredSessionException: ");
    java.util.Map var14 = var11.getSections();
    java.util.Map var15 = var10.buildObjects(var14);
    java.util.Map var16 = var4.buildObjects(var15);
    java.util.Map var17 = var3.buildObjects(var16);
    var0.setGroupRolesMap(var17);
    org.jsecurity.authc.pam.ModularRealmAuthenticator var19 = new org.jsecurity.authc.pam.ModularRealmAuthenticator((org.jsecurity.realm.Realm)var0);
    var0.setAuthorizationCacheName("4fc395ae-93c6-49c9-bcae-d836884b53a9");
    org.jsecurity.mgt.DefaultSecurityManager var22 = new org.jsecurity.mgt.DefaultSecurityManager();
    org.jsecurity.authc.pam.AllSuccessfulModularAuthenticationStrategy var23 = new org.jsecurity.authc.pam.AllSuccessfulModularAuthenticationStrategy();
    org.jsecurity.authc.pam.AllSuccessfulModularAuthenticationStrategy var24 = new org.jsecurity.authc.pam.AllSuccessfulModularAuthenticationStrategy();
    char[] var26 = new char[] { };
    org.jsecurity.authc.UsernamePasswordToken var28 = new org.jsecurity.authc.UsernamePasswordToken("hi!", var26, true);
    org.jsecurity.authc.SimpleAccount var29 = new org.jsecurity.authc.SimpleAccount();
    var29.setCredentialsExpired(false);
    boolean var32 = var29.isLocked();
    org.jsecurity.authc.AuthenticationInfo var33 = var24.afterAllAttempts((org.jsecurity.authc.AuthenticationToken)var28, (org.jsecurity.authc.AuthenticationInfo)var29);
    char[] var37 = new char[] { '4', '#'};
    org.jsecurity.authc.UsernamePasswordToken var38 = new org.jsecurity.authc.UsernamePasswordToken("\u0000\u0000", var37);
    org.jsecurity.authc.SimpleAccount var39 = new org.jsecurity.authc.SimpleAccount();
    var39.setCredentialsExpired(false);
    var39.setCredentialsExpired(false);
    boolean var44 = var39.isCredentialsExpired();
    org.jsecurity.authc.AuthenticationInfo var45 = var24.afterAllAttempts((org.jsecurity.authc.AuthenticationToken)var38, (org.jsecurity.authc.AuthenticationInfo)var39);
    org.jsecurity.authz.UnauthenticatedException var49 = new org.jsecurity.authz.UnauthenticatedException();
    org.jsecurity.config.UnresolveableReferenceException var50 = new org.jsecurity.config.UnresolveableReferenceException("", (java.lang.Throwable)var49);
    org.jsecurity.cache.CacheException var51 = new org.jsecurity.cache.CacheException("org.jsecurity.config.ConfigurationException: dd\uFFFD", (java.lang.Throwable)var49);
    org.jsecurity.authc.SimpleAuthenticationInfo var53 = new org.jsecurity.authc.SimpleAuthenticationInfo((java.lang.Object)"org.jsecurity.config.ConfigurationException: dd\uFFFD", (java.lang.Object)var51, "a2b823b1e72eae2b727289df8a00a89df8a0bab6ad8a89c4c5c7a9b62a270000");
    org.jsecurity.subject.PrincipalCollection var54 = var53.getPrincipals();
    org.jsecurity.authc.AuthenticationInfo var55 = var23.afterAllAttempts((org.jsecurity.authc.AuthenticationToken)var38, (org.jsecurity.authc.AuthenticationInfo)var53);
    var22.setModularAuthenticationStrategy((org.jsecurity.authc.pam.ModularAuthenticationStrategy)var23);
    org.jsecurity.subject.RememberMeManager var57 = var22.getRememberMeManager();
    org.jsecurity.authc.pam.ModularRealmAuthenticator var58 = new org.jsecurity.authc.pam.ModularRealmAuthenticator();
    var22.setAuthenticator((org.jsecurity.authc.Authenticator)var58);
    org.jsecurity.codec.CodecException var62 = new org.jsecurity.codec.CodecException("dd\uFFFD");
    org.jsecurity.authc.ConcurrentAccessException var63 = new org.jsecurity.authc.ConcurrentAccessException("org.jsecurity.authz.UnauthorizedException: org.jsecurity.session.ExpiredSessionException: ", (java.lang.Throwable)var62);
    org.jsecurity.subject.SimplePrincipalCollection var65 = new org.jsecurity.subject.SimplePrincipalCollection((java.lang.Object)var62, "");
    java.io.InputStream var67 = org.jsecurity.util.ClassUtils.getResourceAsStream("");
    java.lang.Object[] var68 = new java.lang.Object[] { var67};
    java.util.List var69 = org.jsecurity.util.CollectionUtils.asList(var68);
    org.jsecurity.authc.pam.ModularRealmAuthenticator var70 = new org.jsecurity.authc.pam.ModularRealmAuthenticator(var69);
    var65.addAll((java.util.Collection)var69, "\u0000\u0000");
    org.jsecurity.authc.pam.FirstSuccessfulAuthenticationStrategy var73 = new org.jsecurity.authc.pam.FirstSuccessfulAuthenticationStrategy();
    org.jsecurity.authz.UnauthorizedException var75 = new org.jsecurity.authz.UnauthorizedException("org.jsecurity.config.ConfigurationException: dd\uFFFD");
    java.lang.Throwable[] var76 = var75.getSuppressed();
    java.util.List var77 = org.jsecurity.util.CollectionUtils.asList((java.lang.Object[])var76);
    org.jsecurity.authc.UsernamePasswordToken var78 = new org.jsecurity.authc.UsernamePasswordToken();
    java.lang.String var79 = var78.getUsername();
    java.net.InetAddress var80 = var78.getInetAddress();
    org.jsecurity.authc.AuthenticationInfo var81 = var73.beforeAllAttempts((java.util.Collection)var77, (org.jsecurity.authc.AuthenticationToken)var78);
    var22.checkPermissions((org.jsecurity.subject.PrincipalCollection)var65, (java.util.Collection)var77);
    org.jsecurity.authz.aop.RoleAnnotationMethodInterceptor var83 = new org.jsecurity.authz.aop.RoleAnnotationMethodInterceptor();
    org.jsecurity.aop.AnnotationHandler var84 = var83.getHandler();
    java.lang.Class var85 = var84.getAnnotationClass();
    java.lang.Object var86 = var65.oneByType(var85);
    java.lang.String[] var91 = org.jsecurity.util.StringUtils.tokenizeToStringArray("089f152f-387d-4d70-9992-addb94aecba0", "9370bad8-7774-4f3f-9431-c39c9f6aa37d", false, true);
    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      boolean[] var92 = var0.isPermitted((org.jsecurity.subject.PrincipalCollection)var65, var91);
      fail("Expected exception of type java.util.NoSuchElementException");
    } catch (java.util.NoSuchElementException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var8);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var9);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var14);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var15);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var16);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var17);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var26);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var32 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var33);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var37);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var44 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var45);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var54);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var55);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var57);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var67);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var68);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var69);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var76);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var77);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var79);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var80);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var81);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var84);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var85);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var86);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var91);

  }

  public void test88() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest7.test88");


    java.io.InputStream var1 = org.jsecurity.util.ClassUtils.getResourceAsStream("");
    java.lang.Object[] var2 = new java.lang.Object[] { var1};
    java.util.List var3 = org.jsecurity.util.CollectionUtils.asList(var2);
    org.jsecurity.authc.pam.ModularRealmAuthenticator var4 = new org.jsecurity.authc.pam.ModularRealmAuthenticator(var3);
    org.jsecurity.subject.SimplePrincipalCollection var6 = new org.jsecurity.subject.SimplePrincipalCollection((java.util.Collection)var3, "org.jsecurity.authz.UnauthorizedException: org.jsecurity.session.ExpiredSessionException: ");
    org.jsecurity.io.ResourceException var10 = new org.jsecurity.io.ResourceException("hi!");
    org.jsecurity.authc.UnknownAccountException var11 = new org.jsecurity.authc.UnknownAccountException((java.lang.Throwable)var10);
    org.jsecurity.session.StoppedSessionException var12 = new org.jsecurity.session.StoppedSessionException("dd\uFFFD", (java.io.Serializable)var10);
    org.jsecurity.session.UnknownSessionException var13 = new org.jsecurity.session.UnknownSessionException("org.jsecurity.authz.UnauthorizedException: org.jsecurity.session.ExpiredSessionException: ", (java.lang.Throwable)var10);
    boolean var14 = var6.equals((java.lang.Object)var10);
    org.jsecurity.authz.SimpleAuthorizationInfo var15 = new org.jsecurity.authz.SimpleAuthorizationInfo();
    var15.addRole("a2b823b1e72eae2b727289df8a00a89df8a0bab6ad8a89c4c5c7a9b62a270000");
    org.jsecurity.authz.SimpleAuthorizationInfo var18 = new org.jsecurity.authz.SimpleAuthorizationInfo();
    var18.addRole("a2b823b1e72eae2b727289df8a00a89df8a0bab6ad8a89c4c5c7a9b62a270000");
    org.jsecurity.session.UnknownSessionException var25 = new org.jsecurity.session.UnknownSessionException("dd\uFFFD", (java.io.Serializable)100.0f);
    org.jsecurity.subject.SubjectException var26 = new org.jsecurity.subject.SubjectException("dd\uFFFD", (java.lang.Throwable)var25);
    org.jsecurity.io.SerializationException var27 = new org.jsecurity.io.SerializationException("", (java.lang.Throwable)var26);
    java.lang.Throwable[] var28 = var26.getSuppressed();
    java.util.Set var29 = org.jsecurity.util.CollectionUtils.asSet((java.lang.Object[])var28);
    var18.addRoles((java.util.Collection)var29);
    var15.setObjectPermissions(var29);
    java.io.InputStream var33 = org.jsecurity.util.ClassUtils.getResourceAsStream("");
    java.lang.Object[] var34 = new java.lang.Object[] { var33};
    java.util.List var35 = org.jsecurity.util.CollectionUtils.asList(var34);
    org.jsecurity.authc.pam.ModularRealmAuthenticator var36 = new org.jsecurity.authc.pam.ModularRealmAuthenticator(var35);
    org.jsecurity.subject.SimplePrincipalCollection var38 = new org.jsecurity.subject.SimplePrincipalCollection((java.util.Collection)var35, "org.jsecurity.authz.UnauthorizedException: org.jsecurity.session.ExpiredSessionException: ");
    java.util.Set var39 = var38.getRealmNames();
    java.io.InputStream var41 = org.jsecurity.util.ClassUtils.getResourceAsStream("");
    java.lang.Object[] var42 = new java.lang.Object[] { var41};
    java.util.List var43 = org.jsecurity.util.CollectionUtils.asList(var42);
    org.jsecurity.authc.pam.ModularRealmAuthenticator var44 = new org.jsecurity.authc.pam.ModularRealmAuthenticator(var43);
    org.jsecurity.subject.SimplePrincipalCollection var46 = new org.jsecurity.subject.SimplePrincipalCollection((java.util.Collection)var43, "org.jsecurity.authz.UnauthorizedException: org.jsecurity.session.ExpiredSessionException: ");
    org.jsecurity.session.UnknownSessionException var51 = new org.jsecurity.session.UnknownSessionException("dd\uFFFD", (java.io.Serializable)100.0f);
    org.jsecurity.session.SessionException var53 = new org.jsecurity.session.SessionException("dd\uFFFD", (java.lang.Throwable)var51, (java.io.Serializable)0);
    org.jsecurity.session.SessionException var54 = new org.jsecurity.session.SessionException("dd\uFFFD", (java.lang.Throwable)var51);
    var46.add((java.lang.Object)var54, "org.jsecurity.config.ConfigurationException: dd\uFFFD");
    java.util.Set var57 = var46.asSet();
    var38.addAll((java.util.Collection)var57, "6464ff");
    var15.setStringPermissions(var57);
    var6.addAll((java.util.Collection)var57, "\uFFFD\uFFFD#\uFFFD\uFFFD.\uFFFD+r\uFFFD\u6959(\uFFFD\uFFFDW\uFFFDq\uFFFD.\uFFFD\uFFFD^jY\uFFFDj\uFFFDa\uFFFD\uFFFD\uFFFDj\u0628\u0000");
    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      org.jsecurity.mgt.DefaultSecurityManager var63 = new org.jsecurity.mgt.DefaultSecurityManager((java.util.Collection)var57);
      fail("Expected exception of type java.lang.ClassCastException");
    } catch (java.lang.ClassCastException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var1);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var2);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var3);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var14 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var28);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var29);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var33);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var34);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var35);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var39);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var41);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var42);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var43);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var57);

  }

  public void test89() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest7.test89");


    org.jsecurity.session.mgt.eis.MemorySessionDAO var0 = new org.jsecurity.session.mgt.eis.MemorySessionDAO();
    org.jsecurity.cache.Cache var1 = var0.getActiveSessionsCache();
    org.jsecurity.cache.CacheManager var2 = var0.getCacheManager();
    org.jsecurity.cache.HashtableCacheManager var3 = new org.jsecurity.cache.HashtableCacheManager();
    org.jsecurity.cache.Cache var5 = var3.getCache("\u0000\u0000");
    var0.setActiveSessionsCache(var5);
    java.io.InputStream var8 = org.jsecurity.util.ClassUtils.getResourceAsStream("");
    java.lang.Object[] var9 = new java.lang.Object[] { var8};
    java.util.List var10 = org.jsecurity.util.CollectionUtils.asList(var9);
    org.jsecurity.authc.pam.ModularRealmAuthenticator var11 = new org.jsecurity.authc.pam.ModularRealmAuthenticator(var10);
    org.jsecurity.authc.pam.AllSuccessfulModularAuthenticationStrategy var12 = new org.jsecurity.authc.pam.AllSuccessfulModularAuthenticationStrategy();
    var11.setModularAuthenticationStrategy((org.jsecurity.authc.pam.ModularAuthenticationStrategy)var12);
    org.jsecurity.authz.SimpleAuthorizationInfo var14 = new org.jsecurity.authz.SimpleAuthorizationInfo();
    var14.addStringPermission("hi!");
    java.io.InputStream var18 = org.jsecurity.util.ClassUtils.getResourceAsStream("");
    java.lang.Object[] var19 = new java.lang.Object[] { var18};
    java.util.List var20 = org.jsecurity.util.CollectionUtils.asList(var19);
    var14.addRoles((java.util.Collection)var20);
    var11.setAuthenticationListeners((java.util.Collection)var20);
    org.jsecurity.realm.activedirectory.ActiveDirectoryRealm var23 = new org.jsecurity.realm.activedirectory.ActiveDirectoryRealm();
    var23.setPrincipalSuffix("");
    var11.setRealm((org.jsecurity.realm.Realm)var23);
    org.jsecurity.cache.HashtableCacheManager var27 = new org.jsecurity.cache.HashtableCacheManager();
    org.jsecurity.cache.Cache var29 = var27.getCache("\u0000\u0000");
    var23.setAuthorizationCache(var29);
    var0.setActiveSessionsCache(var29);
    org.jsecurity.session.mgt.SimpleSession var32 = new org.jsecurity.session.mgt.SimpleSession();
    java.io.Serializable var33 = var0.create((org.jsecurity.session.Session)var32);
    java.io.Serializable var34 = var32.getId();
    var32.validate();
    org.jsecurity.mgt.DefaultSecurityManager var36 = new org.jsecurity.mgt.DefaultSecurityManager();
    java.io.InputStream var38 = org.jsecurity.util.ClassUtils.getResourceAsStream("");
    java.lang.Object[] var39 = new java.lang.Object[] { var38};
    java.util.List var40 = org.jsecurity.util.CollectionUtils.asList(var39);
    org.jsecurity.authc.pam.ModularRealmAuthenticator var41 = new org.jsecurity.authc.pam.ModularRealmAuthenticator(var40);
    org.jsecurity.authc.pam.AllSuccessfulModularAuthenticationStrategy var42 = new org.jsecurity.authc.pam.AllSuccessfulModularAuthenticationStrategy();
    var41.setModularAuthenticationStrategy((org.jsecurity.authc.pam.ModularAuthenticationStrategy)var42);
    org.jsecurity.authz.SimpleAuthorizationInfo var44 = new org.jsecurity.authz.SimpleAuthorizationInfo();
    var44.addStringPermission("hi!");
    java.io.InputStream var48 = org.jsecurity.util.ClassUtils.getResourceAsStream("");
    java.lang.Object[] var49 = new java.lang.Object[] { var48};
    java.util.List var50 = org.jsecurity.util.CollectionUtils.asList(var49);
    var44.addRoles((java.util.Collection)var50);
    var41.setAuthenticationListeners((java.util.Collection)var50);
    var36.setSessionListeners((java.util.Collection)var50);
    org.jsecurity.authz.UnauthenticatedException var57 = new org.jsecurity.authz.UnauthenticatedException();
    org.jsecurity.config.UnresolveableReferenceException var58 = new org.jsecurity.config.UnresolveableReferenceException("", (java.lang.Throwable)var57);
    org.jsecurity.cache.CacheException var59 = new org.jsecurity.cache.CacheException("org.jsecurity.config.ConfigurationException: dd\uFFFD", (java.lang.Throwable)var57);
    org.jsecurity.authc.SimpleAuthenticationInfo var61 = new org.jsecurity.authc.SimpleAuthenticationInfo((java.lang.Object)"org.jsecurity.config.ConfigurationException: dd\uFFFD", (java.lang.Object)var59, "a2b823b1e72eae2b727289df8a00a89df8a0bab6ad8a89c4c5c7a9b62a270000");
    org.jsecurity.realm.text.TextConfigurationRealm var62 = new org.jsecurity.realm.text.TextConfigurationRealm();
    java.io.InputStream var64 = org.jsecurity.util.ClassUtils.getResourceAsStream("");
    java.lang.Object[] var65 = new java.lang.Object[] { var64};
    java.util.List var66 = org.jsecurity.util.CollectionUtils.asList(var65);
    org.jsecurity.authc.pam.ModularRealmAuthenticator var67 = new org.jsecurity.authc.pam.ModularRealmAuthenticator(var66);
    org.jsecurity.subject.SimplePrincipalCollection var69 = new org.jsecurity.subject.SimplePrincipalCollection((java.util.Collection)var66, "org.jsecurity.authz.UnauthorizedException: org.jsecurity.session.ExpiredSessionException: ");
    org.jsecurity.session.UnknownSessionException var74 = new org.jsecurity.session.UnknownSessionException("dd\uFFFD", (java.io.Serializable)100.0f);
    org.jsecurity.session.SessionException var76 = new org.jsecurity.session.SessionException("dd\uFFFD", (java.lang.Throwable)var74, (java.io.Serializable)0);
    org.jsecurity.session.SessionException var77 = new org.jsecurity.session.SessionException("dd\uFFFD", (java.lang.Throwable)var74);
    var69.add((java.lang.Object)var77, "org.jsecurity.config.ConfigurationException: dd\uFFFD");
    var62.onLogout((org.jsecurity.subject.PrincipalCollection)var69);
    org.jsecurity.authc.ExpiredCredentialsException var82 = new org.jsecurity.authc.ExpiredCredentialsException();
    org.jsecurity.session.ExpiredSessionException var83 = new org.jsecurity.session.ExpiredSessionException("", (java.lang.Throwable)var82);
    java.lang.Throwable[] var84 = var83.getSuppressed();
    org.jsecurity.io.ResourceException var85 = new org.jsecurity.io.ResourceException((java.lang.Throwable)var83);
    org.jsecurity.authc.SimpleAuthenticationInfo var86 = new org.jsecurity.authc.SimpleAuthenticationInfo((org.jsecurity.subject.PrincipalCollection)var69, (java.lang.Object)var83);
    var61.merge((org.jsecurity.authc.AuthenticationInfo)var86);
    org.jsecurity.subject.PrincipalCollection var88 = var86.getPrincipals();
    org.jsecurity.authz.SimpleAuthorizingAccount var90 = new org.jsecurity.authz.SimpleAuthorizingAccount((java.util.Collection)var50, (java.lang.Object)var88, "org.jsecurity.realm.text.TextConfigurationRealm_445");
    java.lang.Object var91 = var32.getAttribute((java.lang.Object)var90);
    org.jsecurity.session.mgt.DelegatingSession var92 = new org.jsecurity.session.mgt.DelegatingSession();
    java.io.Serializable var93 = var92.getId();
    org.jsecurity.session.mgt.SessionManager var94 = var92.getSessionManager();
    var90.setCredentials((java.lang.Object)var92);
    java.util.Set var96 = var90.getSimpleRoles();
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var1);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var2);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var5);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var8);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var9);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var10);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var18);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var19);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var20);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var29);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var33 + "' != '" + "55475157-f303-4f8d-938d-5d27c734a9c4"+ "'", var33.equals("55475157-f303-4f8d-938d-5d27c734a9c4"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var34 + "' != '" + "55475157-f303-4f8d-938d-5d27c734a9c4"+ "'", var34.equals("55475157-f303-4f8d-938d-5d27c734a9c4"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var38);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var39);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var40);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var48);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var49);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var50);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var64);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var65);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var66);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var84);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var88);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var91);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var93);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var94);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var96);

  }

  public void test90() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest7.test90");


    org.jsecurity.session.SessionException var1 = new org.jsecurity.session.SessionException("5e8a13e5-9407-4da8-a0bf-f6368dff7e1a");

  }

  public void test91() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest7.test91");


    org.jsecurity.realm.text.PropertiesRealm var0 = new org.jsecurity.realm.text.PropertiesRealm();
    var0.setRoleDefinitions("5dd0c65d-1422-49c2-becb-9e8dca619ab3");
    var0.setUseXmlFormat(true);
    var0.setResourcePath("b6a77f71-73c4-466a-903e-72fc5968f9ac");
    var0.setRoleDefinitions("bcd88f91-36fc-4824-97c3-1a752a1a4e71");
    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      var0.afterAuthorizationCacheSet();
      fail("Expected exception of type java.lang.IllegalStateException");
    } catch (java.lang.IllegalStateException e) {
      // Expected exception.
    }

  }

  public void test92() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest7.test92");


    org.jsecurity.authz.UnauthorizedException var2 = new org.jsecurity.authz.UnauthorizedException("org.jsecurity.config.ConfigurationException: dd\uFFFD");
    org.jsecurity.crypto.hash.Md2Hash var4 = org.jsecurity.crypto.hash.Md2Hash.fromBase64String("a2b823b1e72eae2b727289df8a00a89df8a0bab6ad8a89c4c5c7a9b62a270000");
    org.jsecurity.authc.credential.Md2CredentialsMatcher var5 = new org.jsecurity.authc.credential.Md2CredentialsMatcher();
    org.jsecurity.authz.SimpleAuthorizingAccount var7 = new org.jsecurity.authz.SimpleAuthorizingAccount((java.lang.Object)"a2b823b1e72eae2b727289df8a00a89df8a0bab6ad8a89c4c5c7a9b62a270000", (java.lang.Object)var5, "");
    org.jsecurity.session.UnknownSessionException var8 = new org.jsecurity.session.UnknownSessionException("org.jsecurity.config.ConfigurationException: dd\uFFFD", (java.lang.Throwable)var2, (java.io.Serializable)var7);
    java.lang.Object var9 = var7.getCredentials();
    java.util.Collection var10 = var7.getRoles();
    char[] var12 = new char[] { };
    org.jsecurity.authc.UsernamePasswordToken var14 = new org.jsecurity.authc.UsernamePasswordToken("hi!", var12, true);
    byte[] var15 = org.jsecurity.codec.Hex.decode(var12);
    byte[] var16 = org.jsecurity.codec.Hex.decode(var12);
    byte[] var17 = org.jsecurity.codec.Base64.encode(var16);
    var7.setCredentials((java.lang.Object)var16);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var4);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var9);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var10);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var12);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var15);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var16);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var17);

  }

  public void test93() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest7.test93");


    org.jsecurity.session.mgt.DefaultSessionManager var0 = new org.jsecurity.session.mgt.DefaultSessionManager();
    var0.setGlobalSessionTimeout(1);
    org.jsecurity.session.mgt.quartz.QuartzSessionValidationScheduler var3 = new org.jsecurity.session.mgt.quartz.QuartzSessionValidationScheduler((org.jsecurity.session.mgt.ValidatingSessionManager)var0);
    var0.destroy();
    var0.setSessionValidationSchedulerEnabled(false);
    long var7 = var0.getSessionValidationInterval();
    org.jsecurity.session.mgt.eis.MemorySessionDAO var8 = new org.jsecurity.session.mgt.eis.MemorySessionDAO();
    org.jsecurity.cache.Cache var9 = var8.getActiveSessionsCache();
    org.jsecurity.cache.CacheManager var10 = var8.getCacheManager();
    org.jsecurity.cache.HashtableCacheManager var11 = new org.jsecurity.cache.HashtableCacheManager();
    org.jsecurity.cache.Cache var13 = var11.getCache("\u0000\u0000");
    var8.setActiveSessionsCache(var13);
    java.io.InputStream var16 = org.jsecurity.util.ClassUtils.getResourceAsStream("");
    java.lang.Object[] var17 = new java.lang.Object[] { var16};
    java.util.List var18 = org.jsecurity.util.CollectionUtils.asList(var17);
    org.jsecurity.authc.pam.ModularRealmAuthenticator var19 = new org.jsecurity.authc.pam.ModularRealmAuthenticator(var18);
    org.jsecurity.authc.pam.AllSuccessfulModularAuthenticationStrategy var20 = new org.jsecurity.authc.pam.AllSuccessfulModularAuthenticationStrategy();
    var19.setModularAuthenticationStrategy((org.jsecurity.authc.pam.ModularAuthenticationStrategy)var20);
    org.jsecurity.authz.SimpleAuthorizationInfo var22 = new org.jsecurity.authz.SimpleAuthorizationInfo();
    var22.addStringPermission("hi!");
    java.io.InputStream var26 = org.jsecurity.util.ClassUtils.getResourceAsStream("");
    java.lang.Object[] var27 = new java.lang.Object[] { var26};
    java.util.List var28 = org.jsecurity.util.CollectionUtils.asList(var27);
    var22.addRoles((java.util.Collection)var28);
    var19.setAuthenticationListeners((java.util.Collection)var28);
    org.jsecurity.realm.activedirectory.ActiveDirectoryRealm var31 = new org.jsecurity.realm.activedirectory.ActiveDirectoryRealm();
    var31.setPrincipalSuffix("");
    var19.setRealm((org.jsecurity.realm.Realm)var31);
    org.jsecurity.cache.HashtableCacheManager var35 = new org.jsecurity.cache.HashtableCacheManager();
    org.jsecurity.cache.Cache var37 = var35.getCache("\u0000\u0000");
    var31.setAuthorizationCache(var37);
    var8.setActiveSessionsCache(var37);
    org.jsecurity.session.mgt.SimpleSession var40 = new org.jsecurity.session.mgt.SimpleSession();
    java.io.Serializable var41 = var8.create((org.jsecurity.session.Session)var40);
    var0.setSessionDAO((org.jsecurity.session.mgt.eis.SessionDAO)var8);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var7 == 3600000L);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var9);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var10);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var13);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var16);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var17);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var18);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var26);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var27);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var28);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var37);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var41 + "' != '" + "0d62e97a-4fd8-4b5b-ad6f-a3b30bb257ca"+ "'", var41.equals("0d62e97a-4fd8-4b5b-ad6f-a3b30bb257ca"));

  }

  public void test94() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest7.test94");


    org.jsecurity.subject.SubjectException var1 = new org.jsecurity.subject.SubjectException("org.jsecurity.realm.text.TextConfigurationRealm_819");

  }

  public void test95() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest7.test95");


    org.jsecurity.util.AntPathMatcher var0 = new org.jsecurity.util.AntPathMatcher();
    boolean var3 = var0.matchStart("\uFFFD\uFFFD#\uFFFD\uFFFD.\uFFFD+rr\uFFFD\u07CA\u0000\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\u01E9\uFFFD*'\u0000\u0000", "ZGT/");
    boolean var6 = var0.matches("6464ff", "orgjsecurityauthcCredentialsException783ccd3148a842dd890fdf885a7baafAA==");
    boolean var9 = var0.matchStart("10f5b491-38ac-4c02-8085-950abb026a06", "57f108f5-de1f-46bc-a431-6c2563f95e22");
    boolean var12 = var0.match("\uFFFD\uFFFD\u0000", "3c88ea99-8ee7-47bc-94b1-7ac2b7eddf5e");
    boolean var14 = var0.isPattern("org.jsecurity.realm.text.PropertiesRealm-821-authorization");
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var3 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var6 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var9 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var12 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var14 == false);

  }

  public void test96() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest7.test96");


    org.jsecurity.session.mgt.SimpleSession var0 = new org.jsecurity.session.mgt.SimpleSession();
    java.util.Date var1 = var0.getLastAccessTime();
    boolean var2 = var0.isValid();
    org.jsecurity.session.ProxiedSession var3 = new org.jsecurity.session.ProxiedSession((org.jsecurity.session.Session)var0);
    var3.stop();
    var3.setTimeout(10L);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var2 == true);

  }

  public void test97() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest7.test97");


    org.jsecurity.session.mgt.DefaultSessionManager var1 = new org.jsecurity.session.mgt.DefaultSessionManager();
    org.jsecurity.mgt.DefaultSecurityManager var2 = new org.jsecurity.mgt.DefaultSecurityManager();
    org.jsecurity.authz.permission.WildcardPermissionResolver var3 = new org.jsecurity.authz.permission.WildcardPermissionResolver();
    var2.setPermissionResolver((org.jsecurity.authz.permission.PermissionResolver)var3);
    org.jsecurity.cache.CacheManager var5 = var2.getCacheManager();
    var1.setCacheManager(var5);
    long var7 = var1.getSessionValidationInterval();
    boolean var8 = var1.isSessionValidationSchedulerEnabled();
    var1.destroy();
    org.jsecurity.session.mgt.SimpleSession var10 = new org.jsecurity.session.mgt.SimpleSession();
    org.jsecurity.io.SerializationException var13 = new org.jsecurity.io.SerializationException("org.jsecurity.config.ConfigurationException: dd\uFFFD");
    org.jsecurity.authc.AccountException var14 = new org.jsecurity.authc.AccountException("a2b823b1e72eae2b727289df8a00a89df8a0bab6ad8a89c4c5c7a9b62a270000", (java.lang.Throwable)var13);
    var10.setId((java.io.Serializable)"a2b823b1e72eae2b727289df8a00a89df8a0bab6ad8a89c4c5c7a9b62a270000");
    org.jsecurity.config.ReflectionBuilder var16 = new org.jsecurity.config.ReflectionBuilder();
    org.jsecurity.config.ReflectionBuilder var17 = new org.jsecurity.config.ReflectionBuilder();
    org.jsecurity.io.IniResource var18 = new org.jsecurity.io.IniResource();
    var18.setCharsetName("org.jsecurity.authz.UnauthorizedException: org.jsecurity.session.ExpiredSessionException: ");
    java.util.Map var21 = var18.getSections();
    java.util.Map var22 = var17.buildObjects(var21);
    org.jsecurity.config.ReflectionBuilder var23 = new org.jsecurity.config.ReflectionBuilder();
    org.jsecurity.io.IniResource var24 = new org.jsecurity.io.IniResource();
    var24.setCharsetName("org.jsecurity.authz.UnauthorizedException: org.jsecurity.session.ExpiredSessionException: ");
    java.util.Map var27 = var24.getSections();
    java.util.Map var28 = var23.buildObjects(var27);
    java.util.Map var29 = var17.buildObjects(var28);
    java.util.Map var30 = var16.buildObjects(var29);
    var10.setAttributes(var30);
    java.net.InetAddress var32 = var10.getHostAddress();
    java.io.Serializable var33 = var1.start(var32);
    org.jsecurity.session.mgt.SimpleSession var34 = new org.jsecurity.session.mgt.SimpleSession(var32);
    org.jsecurity.session.InvalidSessionException var35 = new org.jsecurity.session.InvalidSessionException("4c3ac9b2-544e-4786-8da0-3c08b9281bd6", (java.io.Serializable)var34);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var5);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var7 == 3600000L);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var8 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var21);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var22);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var27);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var28);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var29);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var30);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var32);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var33 + "' != '" + "a1db1a1b-7682-421b-9dba-5dd86b6ffd21"+ "'", var33.equals("a1db1a1b-7682-421b-9dba-5dd86b6ffd21"));

  }

  public void test98() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest7.test98");


    org.jsecurity.session.mgt.DefaultSessionManager var0 = new org.jsecurity.session.mgt.DefaultSessionManager();
    org.jsecurity.session.mgt.eis.MemorySessionDAO var1 = new org.jsecurity.session.mgt.eis.MemorySessionDAO();
    org.jsecurity.cache.Cache var2 = var1.getActiveSessionsCache();
    org.jsecurity.cache.CacheManager var3 = var1.getCacheManager();
    org.jsecurity.cache.HashtableCacheManager var4 = new org.jsecurity.cache.HashtableCacheManager();
    org.jsecurity.cache.Cache var6 = var4.getCache("\u0000\u0000");
    var1.setActiveSessionsCache(var6);
    java.io.InputStream var9 = org.jsecurity.util.ClassUtils.getResourceAsStream("");
    java.lang.Object[] var10 = new java.lang.Object[] { var9};
    java.util.List var11 = org.jsecurity.util.CollectionUtils.asList(var10);
    org.jsecurity.authc.pam.ModularRealmAuthenticator var12 = new org.jsecurity.authc.pam.ModularRealmAuthenticator(var11);
    org.jsecurity.authc.pam.AllSuccessfulModularAuthenticationStrategy var13 = new org.jsecurity.authc.pam.AllSuccessfulModularAuthenticationStrategy();
    var12.setModularAuthenticationStrategy((org.jsecurity.authc.pam.ModularAuthenticationStrategy)var13);
    org.jsecurity.authz.SimpleAuthorizationInfo var15 = new org.jsecurity.authz.SimpleAuthorizationInfo();
    var15.addStringPermission("hi!");
    java.io.InputStream var19 = org.jsecurity.util.ClassUtils.getResourceAsStream("");
    java.lang.Object[] var20 = new java.lang.Object[] { var19};
    java.util.List var21 = org.jsecurity.util.CollectionUtils.asList(var20);
    var15.addRoles((java.util.Collection)var21);
    var12.setAuthenticationListeners((java.util.Collection)var21);
    org.jsecurity.realm.activedirectory.ActiveDirectoryRealm var24 = new org.jsecurity.realm.activedirectory.ActiveDirectoryRealm();
    var24.setPrincipalSuffix("");
    var12.setRealm((org.jsecurity.realm.Realm)var24);
    org.jsecurity.cache.HashtableCacheManager var28 = new org.jsecurity.cache.HashtableCacheManager();
    org.jsecurity.cache.Cache var30 = var28.getCache("\u0000\u0000");
    var24.setAuthorizationCache(var30);
    var1.setActiveSessionsCache(var30);
    org.jsecurity.session.mgt.SimpleSession var33 = new org.jsecurity.session.mgt.SimpleSession();
    java.io.Serializable var34 = var1.create((org.jsecurity.session.Session)var33);
    var0.setSessionDAO((org.jsecurity.session.mgt.eis.SessionDAO)var1);
    org.jsecurity.cache.ehcache.EhCacheManager var36 = new org.jsecurity.cache.ehcache.EhCacheManager();
    net.sf.ehcache.CacheManager var37 = var36.getCacheManager();
    var36.destroy();
    java.lang.String var39 = var36.getCacheManagerConfigFile();
    java.lang.String var40 = var36.getCacheManagerConfigFile();
    var0.setCacheManager((org.jsecurity.cache.CacheManager)var36);
    org.jsecurity.session.mgt.SessionValidationScheduler var42 = var0.getSessionValidationScheduler();
    var0.setSessionValidationSchedulerEnabled(false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var2);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var3);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var6);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var9);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var10);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var11);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var19);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var20);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var21);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var30);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var34 + "' != '" + "c2a40cd3-e772-4d57-8121-37333df4820c"+ "'", var34.equals("c2a40cd3-e772-4d57-8121-37333df4820c"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var37);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var39 + "' != '" + "classpath:org/jsecurity/cache/ehcache/ehcache.xml"+ "'", var39.equals("classpath:org/jsecurity/cache/ehcache/ehcache.xml"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var40 + "' != '" + "classpath:org/jsecurity/cache/ehcache/ehcache.xml"+ "'", var40.equals("classpath:org/jsecurity/cache/ehcache/ehcache.xml"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var42);

  }

  public void test99() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest7.test99");


    org.jsecurity.codec.CodecException var2 = new org.jsecurity.codec.CodecException("dd\uFFFD");
    org.jsecurity.authc.ConcurrentAccessException var3 = new org.jsecurity.authc.ConcurrentAccessException("org.jsecurity.authz.UnauthorizedException: org.jsecurity.session.ExpiredSessionException: ", (java.lang.Throwable)var2);
    org.jsecurity.subject.SimplePrincipalCollection var5 = new org.jsecurity.subject.SimplePrincipalCollection((java.lang.Object)var2, "");
    java.io.InputStream var7 = org.jsecurity.util.ClassUtils.getResourceAsStream("");
    java.lang.Object[] var8 = new java.lang.Object[] { var7};
    java.util.List var9 = org.jsecurity.util.CollectionUtils.asList(var8);
    org.jsecurity.authc.pam.ModularRealmAuthenticator var10 = new org.jsecurity.authc.pam.ModularRealmAuthenticator(var9);
    org.jsecurity.authc.pam.AllSuccessfulModularAuthenticationStrategy var11 = new org.jsecurity.authc.pam.AllSuccessfulModularAuthenticationStrategy();
    var10.setModularAuthenticationStrategy((org.jsecurity.authc.pam.ModularAuthenticationStrategy)var11);
    org.jsecurity.authz.SimpleAuthorizationInfo var13 = new org.jsecurity.authz.SimpleAuthorizationInfo();
    var13.addStringPermission("hi!");
    java.io.InputStream var17 = org.jsecurity.util.ClassUtils.getResourceAsStream("");
    java.lang.Object[] var18 = new java.lang.Object[] { var17};
    java.util.List var19 = org.jsecurity.util.CollectionUtils.asList(var18);
    var13.addRoles((java.util.Collection)var19);
    var10.setAuthenticationListeners((java.util.Collection)var19);
    org.jsecurity.realm.activedirectory.ActiveDirectoryRealm var22 = new org.jsecurity.realm.activedirectory.ActiveDirectoryRealm();
    var22.setPrincipalSuffix("");
    var10.setRealm((org.jsecurity.realm.Realm)var22);
    org.jsecurity.authc.pam.FirstSuccessfulAuthenticationStrategy var26 = new org.jsecurity.authc.pam.FirstSuccessfulAuthenticationStrategy();
    org.jsecurity.authz.UnauthorizedException var28 = new org.jsecurity.authz.UnauthorizedException("org.jsecurity.config.ConfigurationException: dd\uFFFD");
    java.lang.Throwable[] var29 = var28.getSuppressed();
    java.util.List var30 = org.jsecurity.util.CollectionUtils.asList((java.lang.Object[])var29);
    org.jsecurity.authc.UsernamePasswordToken var31 = new org.jsecurity.authc.UsernamePasswordToken();
    java.lang.String var32 = var31.getUsername();
    java.net.InetAddress var33 = var31.getInetAddress();
    org.jsecurity.authc.AuthenticationInfo var34 = var26.beforeAllAttempts((java.util.Collection)var30, (org.jsecurity.authc.AuthenticationToken)var31);
    var10.setModularAuthenticationStrategy((org.jsecurity.authc.pam.ModularAuthenticationStrategy)var26);
    org.jsecurity.authc.SimpleAccount var36 = new org.jsecurity.authc.SimpleAccount((org.jsecurity.subject.PrincipalCollection)var5, (java.lang.Object)var10);
    org.jsecurity.authc.pam.ModularAuthenticationStrategy var37 = var10.getModularAuthenticationStrategy();
    org.jsecurity.authc.pam.ModularAuthenticationStrategy var38 = var10.getModularAuthenticationStrategy();
    char[] var43 = new char[] { ' ', ' '};
    org.jsecurity.authc.UsernamePasswordToken var44 = new org.jsecurity.authc.UsernamePasswordToken("hi!", var43);
    char[] var48 = new char[] { '4', '#'};
    org.jsecurity.authc.UsernamePasswordToken var49 = new org.jsecurity.authc.UsernamePasswordToken("\u0000\u0000", var48);
    var44.setPassword(var48);
    org.jsecurity.authc.UsernamePasswordToken var51 = new org.jsecurity.authc.UsernamePasswordToken("ff1bb54d-80f9-4308-a260-ff3ddf1355e9", var48);
    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      org.jsecurity.authc.AuthenticationInfo var52 = var10.authenticate((org.jsecurity.authc.AuthenticationToken)var51);
      fail("Expected exception of type org.jsecurity.authc.AuthenticationException");
    } catch (org.jsecurity.authc.AuthenticationException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var7);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var8);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var9);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var17);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var18);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var19);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var29);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var30);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var32);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var33);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var34);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var37);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var38);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var43);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var48);

  }

  public void test100() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest7.test100");


    org.jsecurity.session.mgt.quartz.QuartzSessionValidationScheduler var0 = new org.jsecurity.session.mgt.quartz.QuartzSessionValidationScheduler();
    var0.disableSessionValidation();
    var0.enableSessionValidation();
    var0.enableSessionValidation();
    var0.disableSessionValidation();
    org.jsecurity.session.mgt.DefaultSessionManager var5 = new org.jsecurity.session.mgt.DefaultSessionManager();
    org.jsecurity.session.mgt.SessionValidationScheduler var6 = var5.getSessionValidationScheduler();
    long var7 = var5.getGlobalSessionTimeout();
    org.jsecurity.authz.SimpleAuthorizingAccount var8 = new org.jsecurity.authz.SimpleAuthorizingAccount();
    org.jsecurity.authz.SimpleAuthorizationInfo var9 = new org.jsecurity.authz.SimpleAuthorizationInfo();
    var9.addRole("a2b823b1e72eae2b727289df8a00a89df8a0bab6ad8a89c4c5c7a9b62a270000");
    org.jsecurity.authz.SimpleAuthorizationInfo var12 = new org.jsecurity.authz.SimpleAuthorizationInfo();
    var12.addRole("a2b823b1e72eae2b727289df8a00a89df8a0bab6ad8a89c4c5c7a9b62a270000");
    org.jsecurity.session.UnknownSessionException var19 = new org.jsecurity.session.UnknownSessionException("dd\uFFFD", (java.io.Serializable)100.0f);
    org.jsecurity.subject.SubjectException var20 = new org.jsecurity.subject.SubjectException("dd\uFFFD", (java.lang.Throwable)var19);
    org.jsecurity.io.SerializationException var21 = new org.jsecurity.io.SerializationException("", (java.lang.Throwable)var20);
    java.lang.Throwable[] var22 = var20.getSuppressed();
    java.util.Set var23 = org.jsecurity.util.CollectionUtils.asSet((java.lang.Object[])var22);
    var12.addRoles((java.util.Collection)var23);
    var9.setObjectPermissions(var23);
    var8.setSimpleRoles(var23);
    java.util.Set var27 = var8.getPermissions();
    org.jsecurity.authz.SimpleAuthorizationInfo var28 = new org.jsecurity.authz.SimpleAuthorizationInfo();
    var28.addRole("a2b823b1e72eae2b727289df8a00a89df8a0bab6ad8a89c4c5c7a9b62a270000");
    org.jsecurity.authz.SimpleAuthorizationInfo var31 = new org.jsecurity.authz.SimpleAuthorizationInfo();
    var31.addRole("a2b823b1e72eae2b727289df8a00a89df8a0bab6ad8a89c4c5c7a9b62a270000");
    org.jsecurity.session.UnknownSessionException var38 = new org.jsecurity.session.UnknownSessionException("dd\uFFFD", (java.io.Serializable)100.0f);
    org.jsecurity.subject.SubjectException var39 = new org.jsecurity.subject.SubjectException("dd\uFFFD", (java.lang.Throwable)var38);
    org.jsecurity.io.SerializationException var40 = new org.jsecurity.io.SerializationException("", (java.lang.Throwable)var39);
    java.lang.Throwable[] var41 = var39.getSuppressed();
    java.util.Set var42 = org.jsecurity.util.CollectionUtils.asSet((java.lang.Object[])var41);
    var31.addRoles((java.util.Collection)var42);
    var28.setObjectPermissions(var42);
    var8.checkRoles((java.util.Collection)var42);
    org.jsecurity.realm.text.PropertiesRealm var46 = new org.jsecurity.realm.text.PropertiesRealm();
    org.jsecurity.realm.activedirectory.ActiveDirectoryRealm var47 = new org.jsecurity.realm.activedirectory.ActiveDirectoryRealm();
    org.jsecurity.authc.credential.Sha256CredentialsMatcher var48 = new org.jsecurity.authc.credential.Sha256CredentialsMatcher();
    var47.setCredentialsMatcher((org.jsecurity.authc.credential.CredentialsMatcher)var48);
    java.lang.String var50 = var47.getAuthorizationCacheName();
    var47.setPrincipalSuffix("org.jsecurity.config.ConfigurationException: dd\uFFFD");
    org.jsecurity.authz.permission.PermissionResolver var53 = var47.getPermissionResolver();
    var46.setPermissionResolver(var53);
    java.util.Set var55 = org.jsecurity.util.PermissionUtils.resolvePermissions((java.util.Collection)var42, var53);
    var5.setSessionListeners((java.util.Collection)var42);
    org.jsecurity.session.mgt.eis.MemorySessionDAO var57 = new org.jsecurity.session.mgt.eis.MemorySessionDAO();
    org.jsecurity.cache.Cache var58 = var57.getActiveSessionsCache();
    var57.setActiveSessionsCacheName("dd\uFFFD");
    java.util.Collection var61 = var57.getActiveSessions();
    java.lang.String var62 = var57.getActiveSessionsCacheName();
    org.jsecurity.session.mgt.SimpleSession var63 = new org.jsecurity.session.mgt.SimpleSession();
    var63.touch();
    var63.validate();
    java.io.Serializable var66 = var57.create((org.jsecurity.session.Session)var63);
    var5.setSessionDAO((org.jsecurity.session.mgt.eis.SessionDAO)var57);
    var0.setSessionManager((org.jsecurity.session.mgt.ValidatingSessionManager)var5);
    org.jsecurity.codec.CodecException var69 = new org.jsecurity.codec.CodecException();
    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      var5.stop((java.io.Serializable)var69);
      fail("Expected exception of type org.jsecurity.session.UnknownSessionException");
    } catch (org.jsecurity.session.UnknownSessionException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var6);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var7 == 1800000L);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var22);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var23);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var27);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var41);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var42);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var50);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var53);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var55);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var58);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var61);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var62 + "' != '" + "dd\uFFFD"+ "'", var62.equals("dd\uFFFD"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var66 + "' != '" + "242884fe-f9c8-45ee-bd3a-ca1f9c0e827d"+ "'", var66.equals("242884fe-f9c8-45ee-bd3a-ca1f9c0e827d"));

  }

  public void test101() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest7.test101");


    org.jsecurity.session.UnknownSessionException var1 = new org.jsecurity.session.UnknownSessionException("org.jsecurity.realm.SimpleAccountRealm-370-authorization");

  }

  public void test102() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest7.test102");


    org.jsecurity.authc.credential.Sha512CredentialsMatcher var0 = new org.jsecurity.authc.credential.Sha512CredentialsMatcher();
    boolean var1 = var0.isHashSalted();
    var0.setHashIterations(0);
    var0.setStoredCredentialsHexEncoded(false);
    boolean var6 = var0.isStoredCredentialsHexEncoded();
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var1 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var6 == false);

  }

  public void test103() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest7.test103");


    org.jsecurity.mgt.DefaultSecurityManager var0 = new org.jsecurity.mgt.DefaultSecurityManager();
    org.jsecurity.authz.permission.WildcardPermissionResolver var1 = new org.jsecurity.authz.permission.WildcardPermissionResolver();
    var0.setPermissionResolver((org.jsecurity.authz.permission.PermissionResolver)var1);
    org.jsecurity.cache.CacheManager var3 = var0.getCacheManager();
    org.jsecurity.realm.text.PropertiesRealm var4 = new org.jsecurity.realm.text.PropertiesRealm();
    org.jsecurity.realm.activedirectory.ActiveDirectoryRealm var5 = new org.jsecurity.realm.activedirectory.ActiveDirectoryRealm();
    org.jsecurity.authc.credential.Sha256CredentialsMatcher var6 = new org.jsecurity.authc.credential.Sha256CredentialsMatcher();
    var5.setCredentialsMatcher((org.jsecurity.authc.credential.CredentialsMatcher)var6);
    java.lang.String var8 = var5.getAuthorizationCacheName();
    var5.setPrincipalSuffix("org.jsecurity.config.ConfigurationException: dd\uFFFD");
    org.jsecurity.authz.permission.PermissionResolver var11 = var5.getPermissionResolver();
    var4.setPermissionResolver(var11);
    var0.setPermissionResolver(var11);
    org.jsecurity.realm.activedirectory.ActiveDirectoryRealm var16 = new org.jsecurity.realm.activedirectory.ActiveDirectoryRealm();
    org.jsecurity.authc.credential.Sha256CredentialsMatcher var17 = new org.jsecurity.authc.credential.Sha256CredentialsMatcher();
    var16.setCredentialsMatcher((org.jsecurity.authc.credential.CredentialsMatcher)var17);
    java.lang.String var19 = var16.getAuthorizationCacheName();
    var16.setPrincipalSuffix("org.jsecurity.config.ConfigurationException: dd\uFFFD");
    org.jsecurity.authz.permission.PermissionResolver var22 = var16.getPermissionResolver();
    java.util.Set var23 = org.jsecurity.util.PermissionUtils.resolveDelimitedPermissions("NfxhYN7ItBfRAmDBmprtU73ghfEEPpcDJrHPkZ06wiY=", var22);
    java.util.Set var24 = org.jsecurity.util.PermissionUtils.resolveDelimitedPermissions("\uFFFD\uFFFD#\uFFFD\uFFFD.\uFFFD+r\uFFFD\u6959(\uFFFD\uFFFDW\uFFFDq\uFFFD.\uFFFD\uFFFD^jY\uFFFDj\uFFFDa\uFFFD\uFFFD\uFFFDj\u0628\u0000", var22);
    org.jsecurity.authc.LockedAccountException var26 = new org.jsecurity.authc.LockedAccountException();
    org.jsecurity.authc.ConcurrentAccessException var27 = new org.jsecurity.authc.ConcurrentAccessException("0220fc2d-2559-421b-822b-6ed559f96c25", (java.lang.Throwable)var26);
    org.jsecurity.crypto.hash.Md2Hash var30 = org.jsecurity.crypto.hash.Md2Hash.fromBase64String("a2b823b1e72eae2b727289df8a00a89df8a0bab6ad8a89c4c5c7a9b62a270000");
    org.jsecurity.authc.credential.Md2CredentialsMatcher var31 = new org.jsecurity.authc.credential.Md2CredentialsMatcher();
    org.jsecurity.authz.SimpleAuthorizingAccount var33 = new org.jsecurity.authz.SimpleAuthorizingAccount((java.lang.Object)"a2b823b1e72eae2b727289df8a00a89df8a0bab6ad8a89c4c5c7a9b62a270000", (java.lang.Object)var31, "");
    var33.addStringPermission("hi!");
    org.jsecurity.authz.SimpleAuthorizationInfo var36 = new org.jsecurity.authz.SimpleAuthorizationInfo();
    var36.addRole("a2b823b1e72eae2b727289df8a00a89df8a0bab6ad8a89c4c5c7a9b62a270000");
    org.jsecurity.session.UnknownSessionException var43 = new org.jsecurity.session.UnknownSessionException("dd\uFFFD", (java.io.Serializable)100.0f);
    org.jsecurity.subject.SubjectException var44 = new org.jsecurity.subject.SubjectException("dd\uFFFD", (java.lang.Throwable)var43);
    org.jsecurity.io.SerializationException var45 = new org.jsecurity.io.SerializationException("", (java.lang.Throwable)var44);
    java.lang.Throwable[] var46 = var44.getSuppressed();
    java.util.Set var47 = org.jsecurity.util.CollectionUtils.asSet((java.lang.Object[])var46);
    var36.addRoles((java.util.Collection)var47);
    boolean var49 = var33.isPermittedAll((java.util.Collection)var47);
    org.jsecurity.cache.HashtableCache var51 = new org.jsecurity.cache.HashtableCache("783ccd31-48a8-42dd-890f-df885a7baaff");
    java.lang.String var52 = var51.toString();
    java.util.Set var53 = var51.values();
    org.jsecurity.authc.SimpleAccount var54 = new org.jsecurity.authc.SimpleAccount((java.util.Collection)var24, (java.lang.Object)"0220fc2d-2559-421b-822b-6ed559f96c25", "10f5b491-38ac-4c02-8085-950abb026a06", var47, var53);
    var0.setSessionListeners((java.util.Collection)var53);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var3);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var8);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var11);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var19);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var22);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var23);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var24);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var30);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var46);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var47);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var49 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var52 + "' != '" + "HashtableCache [783ccd31-48a8-42dd-890f-df885a7baaff]"+ "'", var52.equals("HashtableCache [783ccd31-48a8-42dd-890f-df885a7baaff]"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var53);

  }

  public void test104() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest7.test104");


    org.jsecurity.session.mgt.eis.MemorySessionDAO var0 = new org.jsecurity.session.mgt.eis.MemorySessionDAO();
    org.jsecurity.cache.Cache var1 = var0.getActiveSessionsCache();
    org.jsecurity.cache.CacheManager var2 = var0.getCacheManager();
    org.jsecurity.cache.HashtableCacheManager var3 = new org.jsecurity.cache.HashtableCacheManager();
    org.jsecurity.cache.Cache var5 = var3.getCache("\u0000\u0000");
    var0.setActiveSessionsCache(var5);
    java.io.InputStream var8 = org.jsecurity.util.ClassUtils.getResourceAsStream("");
    java.lang.Object[] var9 = new java.lang.Object[] { var8};
    java.util.List var10 = org.jsecurity.util.CollectionUtils.asList(var9);
    org.jsecurity.authc.pam.ModularRealmAuthenticator var11 = new org.jsecurity.authc.pam.ModularRealmAuthenticator(var10);
    org.jsecurity.authc.pam.AllSuccessfulModularAuthenticationStrategy var12 = new org.jsecurity.authc.pam.AllSuccessfulModularAuthenticationStrategy();
    var11.setModularAuthenticationStrategy((org.jsecurity.authc.pam.ModularAuthenticationStrategy)var12);
    org.jsecurity.authz.SimpleAuthorizationInfo var14 = new org.jsecurity.authz.SimpleAuthorizationInfo();
    var14.addStringPermission("hi!");
    java.io.InputStream var18 = org.jsecurity.util.ClassUtils.getResourceAsStream("");
    java.lang.Object[] var19 = new java.lang.Object[] { var18};
    java.util.List var20 = org.jsecurity.util.CollectionUtils.asList(var19);
    var14.addRoles((java.util.Collection)var20);
    var11.setAuthenticationListeners((java.util.Collection)var20);
    org.jsecurity.realm.activedirectory.ActiveDirectoryRealm var23 = new org.jsecurity.realm.activedirectory.ActiveDirectoryRealm();
    var23.setPrincipalSuffix("");
    var11.setRealm((org.jsecurity.realm.Realm)var23);
    org.jsecurity.cache.HashtableCacheManager var27 = new org.jsecurity.cache.HashtableCacheManager();
    org.jsecurity.cache.Cache var29 = var27.getCache("\u0000\u0000");
    var23.setAuthorizationCache(var29);
    var0.setActiveSessionsCache(var29);
    org.jsecurity.session.mgt.SimpleSession var32 = new org.jsecurity.session.mgt.SimpleSession();
    java.io.Serializable var33 = var0.create((org.jsecurity.session.Session)var32);
    org.jsecurity.session.mgt.SimpleSession var34 = new org.jsecurity.session.mgt.SimpleSession();
    var34.touch();
    var34.validate();
    org.jsecurity.session.mgt.SimpleSession var37 = new org.jsecurity.session.mgt.SimpleSession();
    var37.setTimeout((-1L));
    org.jsecurity.session.mgt.SimpleSession var40 = new org.jsecurity.session.mgt.SimpleSession();
    java.util.Date var41 = var40.getLastAccessTime();
    var37.setLastAccessTime(var41);
    org.jsecurity.session.mgt.SimpleSession var43 = new org.jsecurity.session.mgt.SimpleSession();
    java.util.Date var44 = var43.getLastAccessTime();
    var37.setStopTimestamp(var44);
    var34.setLastAccessTime(var44);
    var32.setLastAccessTime(var44);
    java.util.Date var48 = var32.getLastAccessTime();
    var32.setExpired(false);
    org.jsecurity.JSecurityException var54 = new org.jsecurity.JSecurityException();
    org.jsecurity.authc.LockedAccountException var55 = new org.jsecurity.authc.LockedAccountException("org.jsecurity.config.ConfigurationException: dd\uFFFD", (java.lang.Throwable)var54);
    org.jsecurity.session.StoppedSessionException var56 = new org.jsecurity.session.StoppedSessionException("783ccd31-48a8-42dd-890f-df885a7baaff", (java.lang.Throwable)var55);
    org.jsecurity.io.ResourceException var61 = new org.jsecurity.io.ResourceException("hi!");
    org.jsecurity.codec.CodecException var62 = new org.jsecurity.codec.CodecException((java.lang.Throwable)var61);
    org.jsecurity.JSecurityException var63 = new org.jsecurity.JSecurityException("a2b823b1e72eae2b727289df8a00a89df8a0bab6ad8a89c4c5c7a9b62a270000", (java.lang.Throwable)var61);
    org.jsecurity.authc.ExcessiveAttemptsException var64 = new org.jsecurity.authc.ExcessiveAttemptsException((java.lang.Throwable)var63);
    org.jsecurity.session.StoppedSessionException var65 = new org.jsecurity.session.StoppedSessionException((java.lang.Throwable)var63);
    org.jsecurity.authc.AccountException var66 = new org.jsecurity.authc.AccountException("org.jsecurity.authz.UnauthorizedException: org.jsecurity.session.ExpiredSessionException: ", (java.lang.Throwable)var65);
    org.jsecurity.authc.ExcessiveAttemptsException var67 = new org.jsecurity.authc.ExcessiveAttemptsException("a3e14b98-1050-4bcc-8787-431663db8814", (java.lang.Throwable)var66);
    org.jsecurity.session.UnknownSessionException var68 = new org.jsecurity.session.UnknownSessionException("3d40fa30-fa08-4705-a0dc-1dd5464d0a01", (java.lang.Throwable)var55, (java.io.Serializable)var66);
    java.lang.Object var69 = var32.removeAttribute((java.lang.Object)var55);
    org.jsecurity.session.StoppedSessionException var70 = new org.jsecurity.session.StoppedSessionException((java.io.Serializable)var55);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var1);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var2);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var5);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var8);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var9);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var10);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var18);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var19);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var20);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var29);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var33 + "' != '" + "bbade6e6-1174-4fee-a5dc-18e8e6b86d83"+ "'", var33.equals("bbade6e6-1174-4fee-a5dc-18e8e6b86d83"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var41);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var44);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var48);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var69);

  }

  public void test105() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest7.test105");


    org.jsecurity.session.mgt.DefaultSessionManager var0 = new org.jsecurity.session.mgt.DefaultSessionManager();
    org.jsecurity.session.mgt.eis.MemorySessionDAO var1 = new org.jsecurity.session.mgt.eis.MemorySessionDAO();
    org.jsecurity.cache.Cache var2 = var1.getActiveSessionsCache();
    org.jsecurity.cache.CacheManager var3 = var1.getCacheManager();
    org.jsecurity.cache.HashtableCacheManager var4 = new org.jsecurity.cache.HashtableCacheManager();
    org.jsecurity.cache.Cache var6 = var4.getCache("\u0000\u0000");
    var1.setActiveSessionsCache(var6);
    java.io.InputStream var9 = org.jsecurity.util.ClassUtils.getResourceAsStream("");
    java.lang.Object[] var10 = new java.lang.Object[] { var9};
    java.util.List var11 = org.jsecurity.util.CollectionUtils.asList(var10);
    org.jsecurity.authc.pam.ModularRealmAuthenticator var12 = new org.jsecurity.authc.pam.ModularRealmAuthenticator(var11);
    org.jsecurity.authc.pam.AllSuccessfulModularAuthenticationStrategy var13 = new org.jsecurity.authc.pam.AllSuccessfulModularAuthenticationStrategy();
    var12.setModularAuthenticationStrategy((org.jsecurity.authc.pam.ModularAuthenticationStrategy)var13);
    org.jsecurity.authz.SimpleAuthorizationInfo var15 = new org.jsecurity.authz.SimpleAuthorizationInfo();
    var15.addStringPermission("hi!");
    java.io.InputStream var19 = org.jsecurity.util.ClassUtils.getResourceAsStream("");
    java.lang.Object[] var20 = new java.lang.Object[] { var19};
    java.util.List var21 = org.jsecurity.util.CollectionUtils.asList(var20);
    var15.addRoles((java.util.Collection)var21);
    var12.setAuthenticationListeners((java.util.Collection)var21);
    org.jsecurity.realm.activedirectory.ActiveDirectoryRealm var24 = new org.jsecurity.realm.activedirectory.ActiveDirectoryRealm();
    var24.setPrincipalSuffix("");
    var12.setRealm((org.jsecurity.realm.Realm)var24);
    org.jsecurity.cache.HashtableCacheManager var28 = new org.jsecurity.cache.HashtableCacheManager();
    org.jsecurity.cache.Cache var30 = var28.getCache("\u0000\u0000");
    var24.setAuthorizationCache(var30);
    var1.setActiveSessionsCache(var30);
    org.jsecurity.session.mgt.SimpleSession var33 = new org.jsecurity.session.mgt.SimpleSession();
    java.io.Serializable var34 = var1.create((org.jsecurity.session.Session)var33);
    var0.setSessionDAO((org.jsecurity.session.mgt.eis.SessionDAO)var1);
    org.jsecurity.authc.pam.AllSuccessfulModularAuthenticationStrategy var36 = new org.jsecurity.authc.pam.AllSuccessfulModularAuthenticationStrategy();
    char[] var38 = new char[] { };
    org.jsecurity.authc.UsernamePasswordToken var40 = new org.jsecurity.authc.UsernamePasswordToken("hi!", var38, true);
    org.jsecurity.authc.SimpleAccount var41 = new org.jsecurity.authc.SimpleAccount();
    var41.setCredentialsExpired(false);
    boolean var44 = var41.isLocked();
    org.jsecurity.authc.AuthenticationInfo var45 = var36.afterAllAttempts((org.jsecurity.authc.AuthenticationToken)var40, (org.jsecurity.authc.AuthenticationInfo)var41);
    char[] var49 = new char[] { '4', '#'};
    org.jsecurity.authc.UsernamePasswordToken var50 = new org.jsecurity.authc.UsernamePasswordToken("\u0000\u0000", var49);
    org.jsecurity.authc.SimpleAccount var51 = new org.jsecurity.authc.SimpleAccount();
    var51.setCredentialsExpired(false);
    var51.setCredentialsExpired(false);
    boolean var56 = var51.isCredentialsExpired();
    org.jsecurity.authc.AuthenticationInfo var57 = var36.afterAllAttempts((org.jsecurity.authc.AuthenticationToken)var50, (org.jsecurity.authc.AuthenticationInfo)var51);
    org.jsecurity.realm.activedirectory.ActiveDirectoryRealm var58 = new org.jsecurity.realm.activedirectory.ActiveDirectoryRealm();
    org.jsecurity.authc.credential.Sha256CredentialsMatcher var59 = new org.jsecurity.authc.credential.Sha256CredentialsMatcher();
    var58.setCredentialsMatcher((org.jsecurity.authc.credential.CredentialsMatcher)var59);
    java.lang.String var61 = var58.getAuthorizationCacheName();
    org.jsecurity.authc.UsernamePasswordToken var62 = new org.jsecurity.authc.UsernamePasswordToken();
    java.lang.String var63 = var62.getUsername();
    java.lang.Object var64 = var62.getPrincipal();
    boolean var65 = var58.supports((org.jsecurity.authc.AuthenticationToken)var62);
    org.jsecurity.session.UnknownSessionException var69 = new org.jsecurity.session.UnknownSessionException("dd\uFFFD", (java.io.Serializable)100.0f);
    org.jsecurity.session.SessionException var71 = new org.jsecurity.session.SessionException("dd\uFFFD", (java.lang.Throwable)var69, (java.io.Serializable)0);
    org.jsecurity.authc.SimpleAuthenticationInfo var74 = new org.jsecurity.authc.SimpleAuthenticationInfo((java.lang.Object)0, (java.lang.Object)10, "hi!");
    java.lang.Object var75 = var74.getCredentials();
    java.lang.String var76 = var74.toString();
    org.jsecurity.authc.AuthenticationInfo var77 = var36.afterAllAttempts((org.jsecurity.authc.AuthenticationToken)var62, (org.jsecurity.authc.AuthenticationInfo)var74);
    org.jsecurity.session.mgt.eis.MemorySessionDAO var78 = new org.jsecurity.session.mgt.eis.MemorySessionDAO();
    org.jsecurity.cache.Cache var79 = var78.getActiveSessionsCache();
    var78.setActiveSessionsCacheName("dd\uFFFD");
    var74.setCredentials((java.lang.Object)var78);
    var0.setSessionDAO((org.jsecurity.session.mgt.eis.SessionDAO)var78);
    org.jsecurity.session.mgt.ExecutorServiceSessionValidationScheduler var84 = new org.jsecurity.session.mgt.ExecutorServiceSessionValidationScheduler((org.jsecurity.session.mgt.ValidatingSessionManager)var0);
    boolean var85 = var84.isEnabled();
    boolean var86 = var84.isEnabled();
    boolean var87 = var84.isEnabled();
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var2);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var3);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var6);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var9);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var10);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var11);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var19);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var20);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var21);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var30);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var34 + "' != '" + "52c8cd58-b771-44d2-a0ff-7d3850ec2b3f"+ "'", var34.equals("52c8cd58-b771-44d2-a0ff-7d3850ec2b3f"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var38);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var44 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var45);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var49);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var56 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var57);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var61);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var63);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var64);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var65 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var75 + "' != '" + 10+ "'", var75.equals(10));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var77);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var79);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var85 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var86 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var87 == false);

  }

  public void test106() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest7.test106");


    org.jsecurity.mgt.DefaultSecurityManager var0 = new org.jsecurity.mgt.DefaultSecurityManager();
    java.io.InputStream var2 = org.jsecurity.util.ClassUtils.getResourceAsStream("");
    java.lang.Object[] var3 = new java.lang.Object[] { var2};
    java.util.List var4 = org.jsecurity.util.CollectionUtils.asList(var3);
    org.jsecurity.authc.pam.ModularRealmAuthenticator var5 = new org.jsecurity.authc.pam.ModularRealmAuthenticator(var4);
    org.jsecurity.authc.pam.AllSuccessfulModularAuthenticationStrategy var6 = new org.jsecurity.authc.pam.AllSuccessfulModularAuthenticationStrategy();
    var5.setModularAuthenticationStrategy((org.jsecurity.authc.pam.ModularAuthenticationStrategy)var6);
    org.jsecurity.authz.SimpleAuthorizationInfo var8 = new org.jsecurity.authz.SimpleAuthorizationInfo();
    var8.addStringPermission("hi!");
    java.io.InputStream var12 = org.jsecurity.util.ClassUtils.getResourceAsStream("");
    java.lang.Object[] var13 = new java.lang.Object[] { var12};
    java.util.List var14 = org.jsecurity.util.CollectionUtils.asList(var13);
    var8.addRoles((java.util.Collection)var14);
    var5.setAuthenticationListeners((java.util.Collection)var14);
    var0.setSessionListeners((java.util.Collection)var14);
    org.jsecurity.authc.pam.ModularRealmAuthenticator var18 = new org.jsecurity.authc.pam.ModularRealmAuthenticator();
    org.jsecurity.authz.permission.InvalidPermissionStringException var21 = new org.jsecurity.authz.permission.InvalidPermissionStringException("", "dd\uFFFD");
    org.jsecurity.JSecurityException var23 = new org.jsecurity.JSecurityException("");
    org.jsecurity.authc.SimpleAuthenticationInfo var25 = new org.jsecurity.authc.SimpleAuthenticationInfo((java.lang.Object)var21, (java.lang.Object)"", "org.jsecurity.authz.UnauthorizedException: org.jsecurity.session.ExpiredSessionException: ");
    org.jsecurity.subject.PrincipalCollection var26 = var25.getPrincipals();
    var18.onLogout(var26);
    var0.setAuthenticator((org.jsecurity.authc.Authenticator)var18);
    org.jsecurity.codec.CodecException var31 = new org.jsecurity.codec.CodecException("dd\uFFFD");
    org.jsecurity.authc.ConcurrentAccessException var32 = new org.jsecurity.authc.ConcurrentAccessException("org.jsecurity.authz.UnauthorizedException: org.jsecurity.session.ExpiredSessionException: ", (java.lang.Throwable)var31);
    org.jsecurity.subject.SimplePrincipalCollection var34 = new org.jsecurity.subject.SimplePrincipalCollection((java.lang.Object)var31, "");
    org.jsecurity.authc.pam.FirstSuccessfulAuthenticationStrategy var35 = new org.jsecurity.authc.pam.FirstSuccessfulAuthenticationStrategy();
    org.jsecurity.authz.UnauthorizedException var37 = new org.jsecurity.authz.UnauthorizedException("org.jsecurity.config.ConfigurationException: dd\uFFFD");
    java.lang.Throwable[] var38 = var37.getSuppressed();
    java.util.List var39 = org.jsecurity.util.CollectionUtils.asList((java.lang.Object[])var38);
    org.jsecurity.authc.UsernamePasswordToken var40 = new org.jsecurity.authc.UsernamePasswordToken();
    java.lang.String var41 = var40.getUsername();
    java.net.InetAddress var42 = var40.getInetAddress();
    org.jsecurity.authc.AuthenticationInfo var43 = var35.beforeAllAttempts((java.util.Collection)var39, (org.jsecurity.authc.AuthenticationToken)var40);
    org.jsecurity.session.UnknownSessionException var48 = new org.jsecurity.session.UnknownSessionException("dd\uFFFD", (java.io.Serializable)100.0f);
    org.jsecurity.subject.SubjectException var49 = new org.jsecurity.subject.SubjectException("dd\uFFFD", (java.lang.Throwable)var48);
    org.jsecurity.io.SerializationException var50 = new org.jsecurity.io.SerializationException("", (java.lang.Throwable)var49);
    java.lang.Throwable[] var51 = var49.getSuppressed();
    java.util.Set var52 = org.jsecurity.util.CollectionUtils.asSet((java.lang.Object[])var51);
    org.jsecurity.authc.SimpleAccount var53 = new org.jsecurity.authc.SimpleAccount((org.jsecurity.subject.PrincipalCollection)var34, (java.lang.Object)var39, var52);
    java.io.InputStream var55 = org.jsecurity.util.ClassUtils.getResourceAsStream("");
    java.lang.Object[] var56 = new java.lang.Object[] { var55};
    java.util.List var57 = org.jsecurity.util.CollectionUtils.asList(var56);
    org.jsecurity.authc.pam.ModularRealmAuthenticator var58 = new org.jsecurity.authc.pam.ModularRealmAuthenticator(var57);
    org.jsecurity.subject.SimplePrincipalCollection var60 = new org.jsecurity.subject.SimplePrincipalCollection((java.util.Collection)var57, "org.jsecurity.authz.UnauthorizedException: org.jsecurity.session.ExpiredSessionException: ");
    org.jsecurity.io.ResourceException var64 = new org.jsecurity.io.ResourceException("hi!");
    org.jsecurity.authc.UnknownAccountException var65 = new org.jsecurity.authc.UnknownAccountException((java.lang.Throwable)var64);
    org.jsecurity.session.StoppedSessionException var66 = new org.jsecurity.session.StoppedSessionException("dd\uFFFD", (java.io.Serializable)var64);
    org.jsecurity.session.UnknownSessionException var67 = new org.jsecurity.session.UnknownSessionException("org.jsecurity.authz.UnauthorizedException: org.jsecurity.session.ExpiredSessionException: ", (java.lang.Throwable)var64);
    boolean var68 = var60.equals((java.lang.Object)var64);
    var34.addAll((org.jsecurity.subject.PrincipalCollection)var60);
    org.jsecurity.session.UnknownSessionException var74 = new org.jsecurity.session.UnknownSessionException("dd\uFFFD", (java.io.Serializable)100.0f);
    org.jsecurity.subject.SubjectException var75 = new org.jsecurity.subject.SubjectException("dd\uFFFD", (java.lang.Throwable)var74);
    org.jsecurity.io.SerializationException var76 = new org.jsecurity.io.SerializationException("", (java.lang.Throwable)var75);
    java.lang.Throwable[] var77 = var75.getSuppressed();
    java.util.List var78 = org.jsecurity.util.CollectionUtils.asList((java.lang.Object[])var77);
    boolean var79 = var0.isPermittedAll((org.jsecurity.subject.PrincipalCollection)var34, (java.util.Collection)var78);
    org.jsecurity.subject.DelegatingSubject var80 = new org.jsecurity.subject.DelegatingSubject((org.jsecurity.mgt.SecurityManager)var0);
    var80.logout();
    org.jsecurity.subject.PrincipalCollection var82 = var80.getPrincipals();
    org.jsecurity.mgt.SecurityManager var83 = var80.getSecurityManager();
    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      var80.checkRole("a7779988-1964-480a-b68c-5556d628a264");
      fail("Expected exception of type org.jsecurity.authz.UnauthenticatedException");
    } catch (org.jsecurity.authz.UnauthenticatedException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var2);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var3);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var4);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var12);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var13);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var14);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var26);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var38);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var39);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var41);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var42);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var43);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var51);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var52);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var55);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var56);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var57);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var68 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var77);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var78);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var79 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var82);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var83);

  }

  public void test107() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest7.test107");


    char[] var2 = new char[] { };
    org.jsecurity.authc.UsernamePasswordToken var4 = new org.jsecurity.authc.UsernamePasswordToken("hi!", var2, true);
    org.jsecurity.authc.UsernamePasswordToken var5 = new org.jsecurity.authc.UsernamePasswordToken("\u0000\u0000", var2);
    var5.clear();
    java.lang.Object var7 = var5.getPrincipal();
    java.lang.String var8 = var5.getUsername();
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var2);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var7);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var8);

  }

  public void test108() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest7.test108");


    org.jsecurity.codec.CodecException var2 = new org.jsecurity.codec.CodecException("dd\uFFFD");
    org.jsecurity.authc.ConcurrentAccessException var3 = new org.jsecurity.authc.ConcurrentAccessException("org.jsecurity.authz.UnauthorizedException: org.jsecurity.session.ExpiredSessionException: ", (java.lang.Throwable)var2);
    org.jsecurity.subject.SimplePrincipalCollection var5 = new org.jsecurity.subject.SimplePrincipalCollection((java.lang.Object)var2, "");
    char[] var9 = new char[] { };
    org.jsecurity.authc.UsernamePasswordToken var11 = new org.jsecurity.authc.UsernamePasswordToken("hi!", var9, true);
    org.jsecurity.authc.UsernamePasswordToken var12 = new org.jsecurity.authc.UsernamePasswordToken("\u0000\u0000", var9);
    org.jsecurity.session.mgt.SimpleSession var13 = new org.jsecurity.session.mgt.SimpleSession();
    var13.setTimeout((-1L));
    org.jsecurity.session.mgt.SimpleSession var16 = new org.jsecurity.session.mgt.SimpleSession();
    java.util.Date var17 = var16.getLastAccessTime();
    var13.setLastAccessTime(var17);
    java.net.InetAddress var19 = var13.getHostAddress();
    var12.setInetAddress(var19);
    org.jsecurity.session.mgt.SimpleSession var21 = new org.jsecurity.session.mgt.SimpleSession();
    var21.setTimeout((-1L));
    org.jsecurity.session.mgt.SimpleSession var24 = new org.jsecurity.session.mgt.SimpleSession();
    java.util.Date var25 = var24.getLastAccessTime();
    var21.setLastAccessTime(var25);
    org.jsecurity.session.mgt.SimpleSession var27 = new org.jsecurity.session.mgt.SimpleSession();
    java.util.Date var28 = var27.getLastAccessTime();
    var21.setStopTimestamp(var28);
    org.jsecurity.mgt.DefaultSecurityManager var30 = new org.jsecurity.mgt.DefaultSecurityManager();
    org.jsecurity.authc.pam.AllSuccessfulModularAuthenticationStrategy var31 = new org.jsecurity.authc.pam.AllSuccessfulModularAuthenticationStrategy();
    org.jsecurity.authc.pam.AllSuccessfulModularAuthenticationStrategy var32 = new org.jsecurity.authc.pam.AllSuccessfulModularAuthenticationStrategy();
    char[] var34 = new char[] { };
    org.jsecurity.authc.UsernamePasswordToken var36 = new org.jsecurity.authc.UsernamePasswordToken("hi!", var34, true);
    org.jsecurity.authc.SimpleAccount var37 = new org.jsecurity.authc.SimpleAccount();
    var37.setCredentialsExpired(false);
    boolean var40 = var37.isLocked();
    org.jsecurity.authc.AuthenticationInfo var41 = var32.afterAllAttempts((org.jsecurity.authc.AuthenticationToken)var36, (org.jsecurity.authc.AuthenticationInfo)var37);
    char[] var45 = new char[] { '4', '#'};
    org.jsecurity.authc.UsernamePasswordToken var46 = new org.jsecurity.authc.UsernamePasswordToken("\u0000\u0000", var45);
    org.jsecurity.authc.SimpleAccount var47 = new org.jsecurity.authc.SimpleAccount();
    var47.setCredentialsExpired(false);
    var47.setCredentialsExpired(false);
    boolean var52 = var47.isCredentialsExpired();
    org.jsecurity.authc.AuthenticationInfo var53 = var32.afterAllAttempts((org.jsecurity.authc.AuthenticationToken)var46, (org.jsecurity.authc.AuthenticationInfo)var47);
    org.jsecurity.authz.UnauthenticatedException var57 = new org.jsecurity.authz.UnauthenticatedException();
    org.jsecurity.config.UnresolveableReferenceException var58 = new org.jsecurity.config.UnresolveableReferenceException("", (java.lang.Throwable)var57);
    org.jsecurity.cache.CacheException var59 = new org.jsecurity.cache.CacheException("org.jsecurity.config.ConfigurationException: dd\uFFFD", (java.lang.Throwable)var57);
    org.jsecurity.authc.SimpleAuthenticationInfo var61 = new org.jsecurity.authc.SimpleAuthenticationInfo((java.lang.Object)"org.jsecurity.config.ConfigurationException: dd\uFFFD", (java.lang.Object)var59, "a2b823b1e72eae2b727289df8a00a89df8a0bab6ad8a89c4c5c7a9b62a270000");
    org.jsecurity.subject.PrincipalCollection var62 = var61.getPrincipals();
    org.jsecurity.authc.AuthenticationInfo var63 = var31.afterAllAttempts((org.jsecurity.authc.AuthenticationToken)var46, (org.jsecurity.authc.AuthenticationInfo)var61);
    var30.setModularAuthenticationStrategy((org.jsecurity.authc.pam.ModularAuthenticationStrategy)var31);
    org.jsecurity.subject.RememberMeManager var65 = var30.getRememberMeManager();
    org.jsecurity.authc.pam.ModularRealmAuthenticator var66 = new org.jsecurity.authc.pam.ModularRealmAuthenticator();
    var30.setAuthenticator((org.jsecurity.authc.Authenticator)var66);
    org.jsecurity.codec.CodecException var70 = new org.jsecurity.codec.CodecException("dd\uFFFD");
    org.jsecurity.authc.ConcurrentAccessException var71 = new org.jsecurity.authc.ConcurrentAccessException("org.jsecurity.authz.UnauthorizedException: org.jsecurity.session.ExpiredSessionException: ", (java.lang.Throwable)var70);
    org.jsecurity.subject.SimplePrincipalCollection var73 = new org.jsecurity.subject.SimplePrincipalCollection((java.lang.Object)var70, "");
    java.io.InputStream var75 = org.jsecurity.util.ClassUtils.getResourceAsStream("");
    java.lang.Object[] var76 = new java.lang.Object[] { var75};
    java.util.List var77 = org.jsecurity.util.CollectionUtils.asList(var76);
    org.jsecurity.authc.pam.ModularRealmAuthenticator var78 = new org.jsecurity.authc.pam.ModularRealmAuthenticator(var77);
    var73.addAll((java.util.Collection)var77, "\u0000\u0000");
    org.jsecurity.authc.pam.FirstSuccessfulAuthenticationStrategy var81 = new org.jsecurity.authc.pam.FirstSuccessfulAuthenticationStrategy();
    org.jsecurity.authz.UnauthorizedException var83 = new org.jsecurity.authz.UnauthorizedException("org.jsecurity.config.ConfigurationException: dd\uFFFD");
    java.lang.Throwable[] var84 = var83.getSuppressed();
    java.util.List var85 = org.jsecurity.util.CollectionUtils.asList((java.lang.Object[])var84);
    org.jsecurity.authc.UsernamePasswordToken var86 = new org.jsecurity.authc.UsernamePasswordToken();
    java.lang.String var87 = var86.getUsername();
    java.net.InetAddress var88 = var86.getInetAddress();
    org.jsecurity.authc.AuthenticationInfo var89 = var81.beforeAllAttempts((java.util.Collection)var85, (org.jsecurity.authc.AuthenticationToken)var86);
    var30.checkPermissions((org.jsecurity.subject.PrincipalCollection)var73, (java.util.Collection)var85);
    org.jsecurity.subject.DelegatingSubject var91 = new org.jsecurity.subject.DelegatingSubject((org.jsecurity.subject.PrincipalCollection)var5, false, var19, (org.jsecurity.session.Session)var21, (org.jsecurity.mgt.SecurityManager)var30);
    var91.logout();
    java.lang.Object var93 = var91.getPrincipal();
    java.lang.String[] var96 = org.jsecurity.util.StringUtils.tokenizeToStringArray("\u0000\u0000", "d8d550ee-3a8c-48f0-8061-1d82c827f505");
    java.util.List var97 = org.jsecurity.util.CollectionUtils.asList((java.lang.Object[])var96);
    boolean[] var98 = var91.isPermitted(var96);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var9);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var17);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var19);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var25);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var28);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var34);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var40 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var41);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var45);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var52 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var53);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var62);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var63);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var65);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var75);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var76);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var77);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var84);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var85);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var87);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var88);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var89);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var93);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var96);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var97);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var98);

  }

  public void test109() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest7.test109");


    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      org.jsecurity.crypto.hash.Sha1Hash var1 = org.jsecurity.crypto.hash.Sha1Hash.fromHexString("5746ccab-0c90-45cf-a71b-b75c687df217");
      fail("Expected exception of type java.lang.IllegalArgumentException");
    } catch (java.lang.IllegalArgumentException e) {
      // Expected exception.
    }

  }

  public void test110() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest7.test110");


    java.io.InputStream var1 = org.jsecurity.util.ClassUtils.getResourceAsStream("bfcfe798-c3eb-4591-b32c-68e2bf73fa04");
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var1);

  }

  public void test111() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest7.test111");


    org.jsecurity.authc.pam.UnsupportedTokenException var1 = new org.jsecurity.authc.pam.UnsupportedTokenException();
    org.jsecurity.authc.UnknownAccountException var2 = new org.jsecurity.authc.UnknownAccountException((java.lang.Throwable)var1);
    org.jsecurity.authc.AccountException var3 = new org.jsecurity.authc.AccountException((java.lang.Throwable)var2);
    org.jsecurity.mgt.DefaultSecurityManager var4 = new org.jsecurity.mgt.DefaultSecurityManager();
    java.io.InputStream var6 = org.jsecurity.util.ClassUtils.getResourceAsStream("");
    java.lang.Object[] var7 = new java.lang.Object[] { var6};
    java.util.List var8 = org.jsecurity.util.CollectionUtils.asList(var7);
    org.jsecurity.authc.pam.ModularRealmAuthenticator var9 = new org.jsecurity.authc.pam.ModularRealmAuthenticator(var8);
    org.jsecurity.authc.pam.AllSuccessfulModularAuthenticationStrategy var10 = new org.jsecurity.authc.pam.AllSuccessfulModularAuthenticationStrategy();
    var9.setModularAuthenticationStrategy((org.jsecurity.authc.pam.ModularAuthenticationStrategy)var10);
    org.jsecurity.authz.SimpleAuthorizationInfo var12 = new org.jsecurity.authz.SimpleAuthorizationInfo();
    var12.addStringPermission("hi!");
    java.io.InputStream var16 = org.jsecurity.util.ClassUtils.getResourceAsStream("");
    java.lang.Object[] var17 = new java.lang.Object[] { var16};
    java.util.List var18 = org.jsecurity.util.CollectionUtils.asList(var17);
    var12.addRoles((java.util.Collection)var18);
    var9.setAuthenticationListeners((java.util.Collection)var18);
    var4.setSessionListeners((java.util.Collection)var18);
    org.jsecurity.realm.text.TextConfigurationRealm var22 = new org.jsecurity.realm.text.TextConfigurationRealm();
    java.io.InputStream var24 = org.jsecurity.util.ClassUtils.getResourceAsStream("");
    java.lang.Object[] var25 = new java.lang.Object[] { var24};
    java.util.List var26 = org.jsecurity.util.CollectionUtils.asList(var25);
    org.jsecurity.authc.pam.ModularRealmAuthenticator var27 = new org.jsecurity.authc.pam.ModularRealmAuthenticator(var26);
    org.jsecurity.subject.SimplePrincipalCollection var29 = new org.jsecurity.subject.SimplePrincipalCollection((java.util.Collection)var26, "org.jsecurity.authz.UnauthorizedException: org.jsecurity.session.ExpiredSessionException: ");
    org.jsecurity.session.UnknownSessionException var34 = new org.jsecurity.session.UnknownSessionException("dd\uFFFD", (java.io.Serializable)100.0f);
    org.jsecurity.session.SessionException var36 = new org.jsecurity.session.SessionException("dd\uFFFD", (java.lang.Throwable)var34, (java.io.Serializable)0);
    org.jsecurity.session.SessionException var37 = new org.jsecurity.session.SessionException("dd\uFFFD", (java.lang.Throwable)var34);
    var29.add((java.lang.Object)var37, "org.jsecurity.config.ConfigurationException: dd\uFFFD");
    var22.onLogout((org.jsecurity.subject.PrincipalCollection)var29);
    org.jsecurity.authc.pam.FirstSuccessfulAuthenticationStrategy var41 = new org.jsecurity.authc.pam.FirstSuccessfulAuthenticationStrategy();
    org.jsecurity.authz.UnauthorizedException var43 = new org.jsecurity.authz.UnauthorizedException("org.jsecurity.config.ConfigurationException: dd\uFFFD");
    java.lang.Throwable[] var44 = var43.getSuppressed();
    java.util.List var45 = org.jsecurity.util.CollectionUtils.asList((java.lang.Object[])var44);
    org.jsecurity.authc.UsernamePasswordToken var46 = new org.jsecurity.authc.UsernamePasswordToken();
    java.lang.String var47 = var46.getUsername();
    java.net.InetAddress var48 = var46.getInetAddress();
    org.jsecurity.authc.AuthenticationInfo var49 = var41.beforeAllAttempts((java.util.Collection)var45, (org.jsecurity.authc.AuthenticationToken)var46);
    boolean[] var50 = var4.hasRoles((org.jsecurity.subject.PrincipalCollection)var29, var45);
    org.jsecurity.codec.CodecException var53 = new org.jsecurity.codec.CodecException("dd\uFFFD");
    org.jsecurity.authc.ConcurrentAccessException var54 = new org.jsecurity.authc.ConcurrentAccessException("org.jsecurity.authz.UnauthorizedException: org.jsecurity.session.ExpiredSessionException: ", (java.lang.Throwable)var53);
    org.jsecurity.subject.SimplePrincipalCollection var56 = new org.jsecurity.subject.SimplePrincipalCollection((java.lang.Object)var53, "");
    java.io.InputStream var58 = org.jsecurity.util.ClassUtils.getResourceAsStream("");
    java.lang.Object[] var59 = new java.lang.Object[] { var58};
    java.util.List var60 = org.jsecurity.util.CollectionUtils.asList(var59);
    org.jsecurity.authc.pam.ModularRealmAuthenticator var61 = new org.jsecurity.authc.pam.ModularRealmAuthenticator(var60);
    var56.addAll((java.util.Collection)var60, "\u0000\u0000");
    var4.setSessionListeners((java.util.Collection)var60);
    org.jsecurity.authc.SimpleAccount var66 = new org.jsecurity.authc.SimpleAccount((java.lang.Object)var3, (java.lang.Object)var4, "ZGT/");
    org.jsecurity.util.InstantiationException var67 = new org.jsecurity.util.InstantiationException("jsecurity-activeSessionCache", (java.lang.Throwable)var3);
    org.jsecurity.subject.SubjectException var68 = new org.jsecurity.subject.SubjectException((java.lang.Throwable)var3);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var6);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var7);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var8);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var16);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var17);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var18);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var24);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var25);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var26);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var44);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var45);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var47);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var48);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var49);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var50);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var58);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var59);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var60);

  }

  public void test112() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest7.test112");


    org.jsecurity.codec.CodecException var2 = new org.jsecurity.codec.CodecException("dd\uFFFD");
    org.jsecurity.authc.ConcurrentAccessException var3 = new org.jsecurity.authc.ConcurrentAccessException("org.jsecurity.authz.UnauthorizedException: org.jsecurity.session.ExpiredSessionException: ", (java.lang.Throwable)var2);
    org.jsecurity.subject.SimplePrincipalCollection var5 = new org.jsecurity.subject.SimplePrincipalCollection((java.lang.Object)var2, "");
    char[] var9 = new char[] { };
    org.jsecurity.authc.UsernamePasswordToken var11 = new org.jsecurity.authc.UsernamePasswordToken("hi!", var9, true);
    org.jsecurity.authc.UsernamePasswordToken var12 = new org.jsecurity.authc.UsernamePasswordToken("\u0000\u0000", var9);
    org.jsecurity.session.mgt.SimpleSession var13 = new org.jsecurity.session.mgt.SimpleSession();
    var13.setTimeout((-1L));
    org.jsecurity.session.mgt.SimpleSession var16 = new org.jsecurity.session.mgt.SimpleSession();
    java.util.Date var17 = var16.getLastAccessTime();
    var13.setLastAccessTime(var17);
    java.net.InetAddress var19 = var13.getHostAddress();
    var12.setInetAddress(var19);
    org.jsecurity.session.mgt.SimpleSession var21 = new org.jsecurity.session.mgt.SimpleSession();
    var21.setTimeout((-1L));
    org.jsecurity.session.mgt.SimpleSession var24 = new org.jsecurity.session.mgt.SimpleSession();
    java.util.Date var25 = var24.getLastAccessTime();
    var21.setLastAccessTime(var25);
    org.jsecurity.session.mgt.SimpleSession var27 = new org.jsecurity.session.mgt.SimpleSession();
    java.util.Date var28 = var27.getLastAccessTime();
    var21.setStopTimestamp(var28);
    org.jsecurity.mgt.DefaultSecurityManager var30 = new org.jsecurity.mgt.DefaultSecurityManager();
    org.jsecurity.authc.pam.AllSuccessfulModularAuthenticationStrategy var31 = new org.jsecurity.authc.pam.AllSuccessfulModularAuthenticationStrategy();
    org.jsecurity.authc.pam.AllSuccessfulModularAuthenticationStrategy var32 = new org.jsecurity.authc.pam.AllSuccessfulModularAuthenticationStrategy();
    char[] var34 = new char[] { };
    org.jsecurity.authc.UsernamePasswordToken var36 = new org.jsecurity.authc.UsernamePasswordToken("hi!", var34, true);
    org.jsecurity.authc.SimpleAccount var37 = new org.jsecurity.authc.SimpleAccount();
    var37.setCredentialsExpired(false);
    boolean var40 = var37.isLocked();
    org.jsecurity.authc.AuthenticationInfo var41 = var32.afterAllAttempts((org.jsecurity.authc.AuthenticationToken)var36, (org.jsecurity.authc.AuthenticationInfo)var37);
    char[] var45 = new char[] { '4', '#'};
    org.jsecurity.authc.UsernamePasswordToken var46 = new org.jsecurity.authc.UsernamePasswordToken("\u0000\u0000", var45);
    org.jsecurity.authc.SimpleAccount var47 = new org.jsecurity.authc.SimpleAccount();
    var47.setCredentialsExpired(false);
    var47.setCredentialsExpired(false);
    boolean var52 = var47.isCredentialsExpired();
    org.jsecurity.authc.AuthenticationInfo var53 = var32.afterAllAttempts((org.jsecurity.authc.AuthenticationToken)var46, (org.jsecurity.authc.AuthenticationInfo)var47);
    org.jsecurity.authz.UnauthenticatedException var57 = new org.jsecurity.authz.UnauthenticatedException();
    org.jsecurity.config.UnresolveableReferenceException var58 = new org.jsecurity.config.UnresolveableReferenceException("", (java.lang.Throwable)var57);
    org.jsecurity.cache.CacheException var59 = new org.jsecurity.cache.CacheException("org.jsecurity.config.ConfigurationException: dd\uFFFD", (java.lang.Throwable)var57);
    org.jsecurity.authc.SimpleAuthenticationInfo var61 = new org.jsecurity.authc.SimpleAuthenticationInfo((java.lang.Object)"org.jsecurity.config.ConfigurationException: dd\uFFFD", (java.lang.Object)var59, "a2b823b1e72eae2b727289df8a00a89df8a0bab6ad8a89c4c5c7a9b62a270000");
    org.jsecurity.subject.PrincipalCollection var62 = var61.getPrincipals();
    org.jsecurity.authc.AuthenticationInfo var63 = var31.afterAllAttempts((org.jsecurity.authc.AuthenticationToken)var46, (org.jsecurity.authc.AuthenticationInfo)var61);
    var30.setModularAuthenticationStrategy((org.jsecurity.authc.pam.ModularAuthenticationStrategy)var31);
    org.jsecurity.subject.RememberMeManager var65 = var30.getRememberMeManager();
    org.jsecurity.authc.pam.ModularRealmAuthenticator var66 = new org.jsecurity.authc.pam.ModularRealmAuthenticator();
    var30.setAuthenticator((org.jsecurity.authc.Authenticator)var66);
    org.jsecurity.codec.CodecException var70 = new org.jsecurity.codec.CodecException("dd\uFFFD");
    org.jsecurity.authc.ConcurrentAccessException var71 = new org.jsecurity.authc.ConcurrentAccessException("org.jsecurity.authz.UnauthorizedException: org.jsecurity.session.ExpiredSessionException: ", (java.lang.Throwable)var70);
    org.jsecurity.subject.SimplePrincipalCollection var73 = new org.jsecurity.subject.SimplePrincipalCollection((java.lang.Object)var70, "");
    java.io.InputStream var75 = org.jsecurity.util.ClassUtils.getResourceAsStream("");
    java.lang.Object[] var76 = new java.lang.Object[] { var75};
    java.util.List var77 = org.jsecurity.util.CollectionUtils.asList(var76);
    org.jsecurity.authc.pam.ModularRealmAuthenticator var78 = new org.jsecurity.authc.pam.ModularRealmAuthenticator(var77);
    var73.addAll((java.util.Collection)var77, "\u0000\u0000");
    org.jsecurity.authc.pam.FirstSuccessfulAuthenticationStrategy var81 = new org.jsecurity.authc.pam.FirstSuccessfulAuthenticationStrategy();
    org.jsecurity.authz.UnauthorizedException var83 = new org.jsecurity.authz.UnauthorizedException("org.jsecurity.config.ConfigurationException: dd\uFFFD");
    java.lang.Throwable[] var84 = var83.getSuppressed();
    java.util.List var85 = org.jsecurity.util.CollectionUtils.asList((java.lang.Object[])var84);
    org.jsecurity.authc.UsernamePasswordToken var86 = new org.jsecurity.authc.UsernamePasswordToken();
    java.lang.String var87 = var86.getUsername();
    java.net.InetAddress var88 = var86.getInetAddress();
    org.jsecurity.authc.AuthenticationInfo var89 = var81.beforeAllAttempts((java.util.Collection)var85, (org.jsecurity.authc.AuthenticationToken)var86);
    var30.checkPermissions((org.jsecurity.subject.PrincipalCollection)var73, (java.util.Collection)var85);
    org.jsecurity.subject.DelegatingSubject var91 = new org.jsecurity.subject.DelegatingSubject((org.jsecurity.subject.PrincipalCollection)var5, false, var19, (org.jsecurity.session.Session)var21, (org.jsecurity.mgt.SecurityManager)var30);
    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      var91.checkPermission("2f9de503-1bce-46ee-bb09-82c8ed4baba8");
      fail("Expected exception of type java.util.NoSuchElementException");
    } catch (java.util.NoSuchElementException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var9);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var17);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var19);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var25);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var28);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var34);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var40 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var41);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var45);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var52 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var53);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var62);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var63);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var65);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var75);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var76);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var77);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var84);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var85);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var87);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var88);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var89);

  }

  public void test113() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest7.test113");


    org.jsecurity.session.mgt.quartz.QuartzSessionValidationScheduler var0 = new org.jsecurity.session.mgt.quartz.QuartzSessionValidationScheduler();
    org.jsecurity.session.mgt.DefaultSessionManager var1 = new org.jsecurity.session.mgt.DefaultSessionManager();
    org.jsecurity.mgt.DefaultSecurityManager var2 = new org.jsecurity.mgt.DefaultSecurityManager();
    org.jsecurity.authz.permission.WildcardPermissionResolver var3 = new org.jsecurity.authz.permission.WildcardPermissionResolver();
    var2.setPermissionResolver((org.jsecurity.authz.permission.PermissionResolver)var3);
    org.jsecurity.cache.CacheManager var5 = var2.getCacheManager();
    var1.setCacheManager(var5);
    var0.setSessionManager((org.jsecurity.session.mgt.ValidatingSessionManager)var1);
    boolean var8 = var0.isEnabled();
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var5);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var8 == false);

  }

  public void test114() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest7.test114");


    org.jsecurity.realm.SimpleAccountRealm var1 = new org.jsecurity.realm.SimpleAccountRealm("hi!");
    java.lang.Class var2 = var1.getAuthenticationTokenClass();
    org.jsecurity.session.mgt.eis.MemorySessionDAO var3 = new org.jsecurity.session.mgt.eis.MemorySessionDAO();
    org.jsecurity.cache.Cache var4 = var3.getActiveSessionsCache();
    org.jsecurity.cache.CacheManager var5 = var3.getCacheManager();
    var1.setCacheManager(var5);
    var1.addAccount("a2b823b1e72eae2b727289df8a00a89df8a0bab6ad8a89c4c5c7a9b62a270000", "org.jsecurity.config.ConfigurationException: dd\uFFFD");
    java.lang.String[] var16 = org.jsecurity.util.StringUtils.split("org.jsecurity.realm.text.TextConfigurationRealm_445", 'a', ' ', ' ');
    var1.addAccount("\uFFFD\uFFFD#\uFFFD\uFFFD.\uFFFD+rr\uFFFD\u07CA\u0000\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\u01E9\uFFFD*'\u0000\u0000", "59719df6-0d65-4dfa-827b-9c7d15c095f8", var16);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var2);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var4);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var5);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var16);

  }

  public void test115() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest7.test115");


    org.jsecurity.authc.pam.AtLeastOneSuccessfulModularAuthenticationStrategy var0 = new org.jsecurity.authc.pam.AtLeastOneSuccessfulModularAuthenticationStrategy();
    char[] var4 = new char[] { ' ', ' '};
    org.jsecurity.authc.UsernamePasswordToken var5 = new org.jsecurity.authc.UsernamePasswordToken("hi!", var4);
    org.jsecurity.codec.CodecException var8 = new org.jsecurity.codec.CodecException("dd\uFFFD");
    org.jsecurity.authc.ConcurrentAccessException var9 = new org.jsecurity.authc.ConcurrentAccessException("org.jsecurity.authz.UnauthorizedException: org.jsecurity.session.ExpiredSessionException: ", (java.lang.Throwable)var8);
    org.jsecurity.subject.SimplePrincipalCollection var11 = new org.jsecurity.subject.SimplePrincipalCollection((java.lang.Object)var8, "");
    org.jsecurity.authc.pam.FirstSuccessfulAuthenticationStrategy var12 = new org.jsecurity.authc.pam.FirstSuccessfulAuthenticationStrategy();
    org.jsecurity.authz.UnauthorizedException var14 = new org.jsecurity.authz.UnauthorizedException("org.jsecurity.config.ConfigurationException: dd\uFFFD");
    java.lang.Throwable[] var15 = var14.getSuppressed();
    java.util.List var16 = org.jsecurity.util.CollectionUtils.asList((java.lang.Object[])var15);
    org.jsecurity.authc.UsernamePasswordToken var17 = new org.jsecurity.authc.UsernamePasswordToken();
    java.lang.String var18 = var17.getUsername();
    java.net.InetAddress var19 = var17.getInetAddress();
    org.jsecurity.authc.AuthenticationInfo var20 = var12.beforeAllAttempts((java.util.Collection)var16, (org.jsecurity.authc.AuthenticationToken)var17);
    org.jsecurity.session.UnknownSessionException var25 = new org.jsecurity.session.UnknownSessionException("dd\uFFFD", (java.io.Serializable)100.0f);
    org.jsecurity.subject.SubjectException var26 = new org.jsecurity.subject.SubjectException("dd\uFFFD", (java.lang.Throwable)var25);
    org.jsecurity.io.SerializationException var27 = new org.jsecurity.io.SerializationException("", (java.lang.Throwable)var26);
    java.lang.Throwable[] var28 = var26.getSuppressed();
    java.util.Set var29 = org.jsecurity.util.CollectionUtils.asSet((java.lang.Object[])var28);
    org.jsecurity.authc.SimpleAccount var30 = new org.jsecurity.authc.SimpleAccount((org.jsecurity.subject.PrincipalCollection)var11, (java.lang.Object)var16, var29);
    java.util.Collection var31 = var30.getStringPermissions();
    java.util.Collection var32 = var30.getStringPermissions();
    org.jsecurity.authc.AuthenticationInfo var33 = var0.afterAllAttempts((org.jsecurity.authc.AuthenticationToken)var5, (org.jsecurity.authc.AuthenticationInfo)var30);
    java.io.InputStream var35 = org.jsecurity.util.ClassUtils.getResourceAsStream("");
    java.lang.Object[] var36 = new java.lang.Object[] { var35};
    java.util.List var37 = org.jsecurity.util.CollectionUtils.asList(var36);
    org.jsecurity.authc.pam.ModularRealmAuthenticator var38 = new org.jsecurity.authc.pam.ModularRealmAuthenticator(var37);
    var30.addStringPermissions((java.util.Collection)var37);
    org.jsecurity.subject.PrincipalCollection var40 = var30.getPrincipals();
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var4);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var15);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var16);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var18);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var19);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var20);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var28);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var29);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var31);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var32);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var33);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var35);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var36);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var37);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var40);

  }

  public void test116() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest7.test116");


    org.jsecurity.authc.CredentialsException var1 = new org.jsecurity.authc.CredentialsException("ea22ff1e-72cd-4683-8e5e-82a2db5ff10c");

  }

  public void test117() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest7.test117");


    org.jsecurity.subject.InvalidSubjectException var1 = new org.jsecurity.subject.InvalidSubjectException("c3e3a4ec-562a-4afb-8e51-7ec417f22d53");

  }

  public void test118() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest7.test118");


    org.jsecurity.session.mgt.DefaultSessionManager var0 = new org.jsecurity.session.mgt.DefaultSessionManager();
    org.jsecurity.mgt.DefaultSecurityManager var1 = new org.jsecurity.mgt.DefaultSecurityManager();
    org.jsecurity.authz.permission.WildcardPermissionResolver var2 = new org.jsecurity.authz.permission.WildcardPermissionResolver();
    var1.setPermissionResolver((org.jsecurity.authz.permission.PermissionResolver)var2);
    org.jsecurity.cache.CacheManager var4 = var1.getCacheManager();
    var0.setCacheManager(var4);
    long var6 = var0.getSessionValidationInterval();
    boolean var7 = var0.isSessionValidationSchedulerEnabled();
    var0.destroy();
    org.jsecurity.session.mgt.SimpleSession var9 = new org.jsecurity.session.mgt.SimpleSession();
    org.jsecurity.io.SerializationException var12 = new org.jsecurity.io.SerializationException("org.jsecurity.config.ConfigurationException: dd\uFFFD");
    org.jsecurity.authc.AccountException var13 = new org.jsecurity.authc.AccountException("a2b823b1e72eae2b727289df8a00a89df8a0bab6ad8a89c4c5c7a9b62a270000", (java.lang.Throwable)var12);
    var9.setId((java.io.Serializable)"a2b823b1e72eae2b727289df8a00a89df8a0bab6ad8a89c4c5c7a9b62a270000");
    org.jsecurity.config.ReflectionBuilder var15 = new org.jsecurity.config.ReflectionBuilder();
    org.jsecurity.config.ReflectionBuilder var16 = new org.jsecurity.config.ReflectionBuilder();
    org.jsecurity.io.IniResource var17 = new org.jsecurity.io.IniResource();
    var17.setCharsetName("org.jsecurity.authz.UnauthorizedException: org.jsecurity.session.ExpiredSessionException: ");
    java.util.Map var20 = var17.getSections();
    java.util.Map var21 = var16.buildObjects(var20);
    org.jsecurity.config.ReflectionBuilder var22 = new org.jsecurity.config.ReflectionBuilder();
    org.jsecurity.io.IniResource var23 = new org.jsecurity.io.IniResource();
    var23.setCharsetName("org.jsecurity.authz.UnauthorizedException: org.jsecurity.session.ExpiredSessionException: ");
    java.util.Map var26 = var23.getSections();
    java.util.Map var27 = var22.buildObjects(var26);
    java.util.Map var28 = var16.buildObjects(var27);
    java.util.Map var29 = var15.buildObjects(var28);
    var9.setAttributes(var29);
    java.net.InetAddress var31 = var9.getHostAddress();
    java.io.Serializable var32 = var0.start(var31);
    org.jsecurity.authz.HostUnauthorizedException var33 = new org.jsecurity.authz.HostUnauthorizedException(var31);
    org.jsecurity.authc.ExcessiveAttemptsException var34 = new org.jsecurity.authc.ExcessiveAttemptsException((java.lang.Throwable)var33);
    org.jsecurity.session.ExpiredSessionException var35 = new org.jsecurity.session.ExpiredSessionException((java.io.Serializable)var34);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var4);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var6 == 3600000L);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var7 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var20);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var21);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var26);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var27);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var28);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var29);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var31);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var32 + "' != '" + "4eec72b3-1904-40d8-945c-cc5d883f9a3b"+ "'", var32.equals("4eec72b3-1904-40d8-945c-cc5d883f9a3b"));

  }

  public void test119() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest7.test119");


    org.jsecurity.crypto.hash.Sha256Hash var1 = org.jsecurity.crypto.hash.Sha256Hash.fromBase64String("676fd581-0339-4093-889a-54dff40b0cb7");
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var1);

  }

  public void test120() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest7.test120");


    java.util.Set var1 = org.jsecurity.util.PermissionUtils.toPermissionStrings("org.jsecurity.config.ConfigurationException: dd\uFFFD");
    org.jsecurity.realm.text.TextConfigurationRealm var2 = new org.jsecurity.realm.text.TextConfigurationRealm();
    org.jsecurity.realm.text.TextConfigurationRealm var3 = new org.jsecurity.realm.text.TextConfigurationRealm();
    java.io.InputStream var5 = org.jsecurity.util.ClassUtils.getResourceAsStream("");
    java.lang.Object[] var6 = new java.lang.Object[] { var5};
    java.util.List var7 = org.jsecurity.util.CollectionUtils.asList(var6);
    org.jsecurity.authc.pam.ModularRealmAuthenticator var8 = new org.jsecurity.authc.pam.ModularRealmAuthenticator(var7);
    org.jsecurity.subject.SimplePrincipalCollection var10 = new org.jsecurity.subject.SimplePrincipalCollection((java.util.Collection)var7, "org.jsecurity.authz.UnauthorizedException: org.jsecurity.session.ExpiredSessionException: ");
    org.jsecurity.session.UnknownSessionException var15 = new org.jsecurity.session.UnknownSessionException("dd\uFFFD", (java.io.Serializable)100.0f);
    org.jsecurity.session.SessionException var17 = new org.jsecurity.session.SessionException("dd\uFFFD", (java.lang.Throwable)var15, (java.io.Serializable)0);
    org.jsecurity.session.SessionException var18 = new org.jsecurity.session.SessionException("dd\uFFFD", (java.lang.Throwable)var15);
    var10.add((java.lang.Object)var18, "org.jsecurity.config.ConfigurationException: dd\uFFFD");
    var3.onLogout((org.jsecurity.subject.PrincipalCollection)var10);
    java.util.Collection var23 = var10.fromRealm("\u0000\u0000\u0000");
    var2.onLogout((org.jsecurity.subject.PrincipalCollection)var10);
    var2.setUserDefinitions("");
    java.lang.String var27 = var2.getName();
    org.jsecurity.authc.pam.ModularRealmAuthenticator var28 = new org.jsecurity.authc.pam.ModularRealmAuthenticator((org.jsecurity.realm.Realm)var2);
    org.jsecurity.realm.text.PropertiesRealm var29 = new org.jsecurity.realm.text.PropertiesRealm();
    var29.setRoleDefinitions("5dd0c65d-1422-49c2-becb-9e8dca619ab3");
    java.lang.String var32 = var29.getUserDefinitions();
    var29.setName("e23a02c5-2287-4daa-91c4-8efed2be0f73");
    var29.setResourcePath("69d3a52f-a464-4f98-8253-2a105929a356");
    org.jsecurity.realm.text.TextConfigurationRealm var38 = new org.jsecurity.realm.text.TextConfigurationRealm();
    java.io.InputStream var40 = org.jsecurity.util.ClassUtils.getResourceAsStream("");
    java.lang.Object[] var41 = new java.lang.Object[] { var40};
    java.util.List var42 = org.jsecurity.util.CollectionUtils.asList(var41);
    org.jsecurity.authc.pam.ModularRealmAuthenticator var43 = new org.jsecurity.authc.pam.ModularRealmAuthenticator(var42);
    org.jsecurity.subject.SimplePrincipalCollection var45 = new org.jsecurity.subject.SimplePrincipalCollection((java.util.Collection)var42, "org.jsecurity.authz.UnauthorizedException: org.jsecurity.session.ExpiredSessionException: ");
    org.jsecurity.session.UnknownSessionException var50 = new org.jsecurity.session.UnknownSessionException("dd\uFFFD", (java.io.Serializable)100.0f);
    org.jsecurity.session.SessionException var52 = new org.jsecurity.session.SessionException("dd\uFFFD", (java.lang.Throwable)var50, (java.io.Serializable)0);
    org.jsecurity.session.SessionException var53 = new org.jsecurity.session.SessionException("dd\uFFFD", (java.lang.Throwable)var50);
    var45.add((java.lang.Object)var53, "org.jsecurity.config.ConfigurationException: dd\uFFFD");
    var38.onLogout((org.jsecurity.subject.PrincipalCollection)var45);
    java.util.Set var58 = org.jsecurity.util.PermissionUtils.toPermissionStrings("org.jsecurity.config.ConfigurationException: dd\uFFFD");
    org.jsecurity.authz.SimpleAuthorizationInfo var59 = new org.jsecurity.authz.SimpleAuthorizationInfo(var58);
    org.jsecurity.authz.SimpleAuthorizingAccount var60 = new org.jsecurity.authz.SimpleAuthorizingAccount((org.jsecurity.subject.PrincipalCollection)var45, (java.lang.Object)var58);
    org.jsecurity.session.StoppedSessionException var61 = new org.jsecurity.session.StoppedSessionException("org.jsecurity.realm.SimpleAccountRealm-55-authorization", (java.io.Serializable)var45);
    org.jsecurity.realm.activedirectory.ActiveDirectoryRealm var62 = new org.jsecurity.realm.activedirectory.ActiveDirectoryRealm();
    var62.init();
    var62.setSystemPassword("dd\uFFFD");
    org.jsecurity.authz.aop.GuestAnnotationHandler var66 = new org.jsecurity.authz.aop.GuestAnnotationHandler();
    java.lang.Class var67 = var66.getAnnotationClass();
    var62.setAuthenticationTokenClass(var67);
    java.util.Collection var69 = var45.byType(var67);
    java.util.Set var70 = var45.asSet();
    var29.onLogout((org.jsecurity.subject.PrincipalCollection)var45);
    org.jsecurity.session.mgt.SimpleSession var72 = new org.jsecurity.session.mgt.SimpleSession();
    var72.setTimeout((-1L));
    org.jsecurity.session.mgt.SimpleSession var75 = new org.jsecurity.session.mgt.SimpleSession();
    java.util.Date var76 = var75.getLastAccessTime();
    var72.setLastAccessTime(var76);
    org.jsecurity.session.mgt.SimpleSession var78 = new org.jsecurity.session.mgt.SimpleSession();
    java.util.Date var79 = var78.getLastAccessTime();
    var72.setStopTimestamp(var79);
    var72.touch();
    org.jsecurity.authc.SimpleAuthenticationInfo var82 = new org.jsecurity.authc.SimpleAuthenticationInfo((org.jsecurity.subject.PrincipalCollection)var45, (java.lang.Object)var72);
    var2.onLogout((org.jsecurity.subject.PrincipalCollection)var45);
    org.jsecurity.authc.SimpleAccount var85 = new org.jsecurity.authc.SimpleAccount((java.util.Collection)var1, (java.lang.Object)var45, "345d9036-762c-4f58-8690-c901bf299cde");
    org.jsecurity.authz.permission.WildcardPermission var88 = new org.jsecurity.authz.permission.WildcardPermission("9ef01302-1480-4c86-ad5f-260a5ece5eb4", false);
    var85.addObjectPermission((org.jsecurity.authz.Permission)var88);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var1);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var5);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var6);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var7);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var23);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var27 + "' != '" + "org.jsecurity.realm.text.TextConfigurationRealm_4335"+ "'", var27.equals("org.jsecurity.realm.text.TextConfigurationRealm_4335"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var32);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var40);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var41);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var42);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var58);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var67);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var69);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var70);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var76);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var79);

  }

  public void test121() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest7.test121");


    org.jsecurity.crypto.hash.Md2Hash var2 = org.jsecurity.crypto.hash.Md2Hash.fromBase64String("a2b823b1e72eae2b727289df8a00a89df8a0bab6ad8a89c4c5c7a9b62a270000");
    org.jsecurity.authc.credential.Md2CredentialsMatcher var3 = new org.jsecurity.authc.credential.Md2CredentialsMatcher();
    org.jsecurity.authz.SimpleAuthorizingAccount var5 = new org.jsecurity.authz.SimpleAuthorizingAccount((java.lang.Object)"a2b823b1e72eae2b727289df8a00a89df8a0bab6ad8a89c4c5c7a9b62a270000", (java.lang.Object)var3, "");
    org.jsecurity.session.SessionException var6 = new org.jsecurity.session.SessionException("org.jsecurity.realm.SimpleAccountRealm-9-authorization", (java.io.Serializable)var5);
    java.io.InputStream var8 = org.jsecurity.util.ClassUtils.getResourceAsStream("");
    java.lang.Object[] var9 = new java.lang.Object[] { var8};
    java.util.List var10 = org.jsecurity.util.CollectionUtils.asList(var9);
    org.jsecurity.authc.pam.ModularRealmAuthenticator var11 = new org.jsecurity.authc.pam.ModularRealmAuthenticator(var10);
    org.jsecurity.subject.SimplePrincipalCollection var13 = new org.jsecurity.subject.SimplePrincipalCollection((java.util.Collection)var10, "org.jsecurity.authz.UnauthorizedException: org.jsecurity.session.ExpiredSessionException: ");
    org.jsecurity.session.UnknownSessionException var18 = new org.jsecurity.session.UnknownSessionException("dd\uFFFD", (java.io.Serializable)100.0f);
    org.jsecurity.session.SessionException var20 = new org.jsecurity.session.SessionException("dd\uFFFD", (java.lang.Throwable)var18, (java.io.Serializable)0);
    org.jsecurity.session.SessionException var21 = new org.jsecurity.session.SessionException("dd\uFFFD", (java.lang.Throwable)var18);
    var13.add((java.lang.Object)var21, "org.jsecurity.config.ConfigurationException: dd\uFFFD");
    java.util.Set var24 = var13.asSet();
    org.jsecurity.authz.SimpleAuthorizationInfo var25 = new org.jsecurity.authz.SimpleAuthorizationInfo(var24);
    var5.addAll((java.util.Collection)var24);
    java.util.Set var27 = var5.getSimpleRoles();
    org.jsecurity.subject.PrincipalCollection var28 = var5.getPrincipals();
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var2);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var8);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var9);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var10);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var24);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var27);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var28);

  }

  public void test122() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest7.test122");


    org.jsecurity.codec.CodecException var2 = new org.jsecurity.codec.CodecException("dd\uFFFD");
    org.jsecurity.authc.ConcurrentAccessException var3 = new org.jsecurity.authc.ConcurrentAccessException("org.jsecurity.authz.UnauthorizedException: org.jsecurity.session.ExpiredSessionException: ", (java.lang.Throwable)var2);
    org.jsecurity.subject.SimplePrincipalCollection var5 = new org.jsecurity.subject.SimplePrincipalCollection((java.lang.Object)var2, "");
    java.io.InputStream var7 = org.jsecurity.util.ClassUtils.getResourceAsStream("");
    java.lang.Object[] var8 = new java.lang.Object[] { var7};
    java.util.List var9 = org.jsecurity.util.CollectionUtils.asList(var8);
    org.jsecurity.authc.pam.ModularRealmAuthenticator var10 = new org.jsecurity.authc.pam.ModularRealmAuthenticator(var9);
    var5.addAll((java.util.Collection)var9, "\u0000\u0000");
    java.io.InputStream var14 = org.jsecurity.util.ClassUtils.getResourceAsStream("");
    java.lang.Object[] var15 = new java.lang.Object[] { var14};
    java.util.List var16 = org.jsecurity.util.CollectionUtils.asList(var15);
    org.jsecurity.authc.pam.ModularRealmAuthenticator var17 = new org.jsecurity.authc.pam.ModularRealmAuthenticator(var16);
    var5.addAll((java.util.Collection)var16, "\u0000\u0000");
    org.jsecurity.realm.SimpleAccountRealm var21 = new org.jsecurity.realm.SimpleAccountRealm("hi!");
    java.lang.Class var22 = var21.getAuthenticationTokenClass();
    java.util.Collection var23 = org.jsecurity.util.CollectionUtils.emptyCollection(var22);
    java.lang.Object var24 = org.jsecurity.util.ClassUtils.newInstance(var22);
    java.util.Collection var25 = var5.byType(var22);
    org.jsecurity.authz.UnauthenticatedException var27 = new org.jsecurity.authz.UnauthenticatedException();
    org.jsecurity.JSecurityException var28 = new org.jsecurity.JSecurityException("\u0000\u0000", (java.lang.Throwable)var27);
    org.jsecurity.authz.SimpleAuthorizingAccount var29 = new org.jsecurity.authz.SimpleAuthorizingAccount((org.jsecurity.subject.PrincipalCollection)var5, (java.lang.Object)var28);
    boolean var30 = var5.isEmpty();
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var7);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var8);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var9);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var14);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var15);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var16);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var22);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var23);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var24);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var25);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var30 == false);

  }

  public void test123() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest7.test123");


    org.jsecurity.codec.CodecException var2 = new org.jsecurity.codec.CodecException("dd\uFFFD");
    org.jsecurity.authc.ConcurrentAccessException var3 = new org.jsecurity.authc.ConcurrentAccessException("org.jsecurity.authz.UnauthorizedException: org.jsecurity.session.ExpiredSessionException: ", (java.lang.Throwable)var2);
    org.jsecurity.subject.SimplePrincipalCollection var5 = new org.jsecurity.subject.SimplePrincipalCollection((java.lang.Object)var2, "");
    org.jsecurity.authc.pam.FirstSuccessfulAuthenticationStrategy var6 = new org.jsecurity.authc.pam.FirstSuccessfulAuthenticationStrategy();
    org.jsecurity.authz.UnauthorizedException var8 = new org.jsecurity.authz.UnauthorizedException("org.jsecurity.config.ConfigurationException: dd\uFFFD");
    java.lang.Throwable[] var9 = var8.getSuppressed();
    java.util.List var10 = org.jsecurity.util.CollectionUtils.asList((java.lang.Object[])var9);
    org.jsecurity.authc.UsernamePasswordToken var11 = new org.jsecurity.authc.UsernamePasswordToken();
    java.lang.String var12 = var11.getUsername();
    java.net.InetAddress var13 = var11.getInetAddress();
    org.jsecurity.authc.AuthenticationInfo var14 = var6.beforeAllAttempts((java.util.Collection)var10, (org.jsecurity.authc.AuthenticationToken)var11);
    org.jsecurity.session.UnknownSessionException var19 = new org.jsecurity.session.UnknownSessionException("dd\uFFFD", (java.io.Serializable)100.0f);
    org.jsecurity.subject.SubjectException var20 = new org.jsecurity.subject.SubjectException("dd\uFFFD", (java.lang.Throwable)var19);
    org.jsecurity.io.SerializationException var21 = new org.jsecurity.io.SerializationException("", (java.lang.Throwable)var20);
    java.lang.Throwable[] var22 = var20.getSuppressed();
    java.util.Set var23 = org.jsecurity.util.CollectionUtils.asSet((java.lang.Object[])var22);
    org.jsecurity.authc.SimpleAccount var24 = new org.jsecurity.authc.SimpleAccount((org.jsecurity.subject.PrincipalCollection)var5, (java.lang.Object)var10, var23);
    java.io.InputStream var26 = org.jsecurity.util.ClassUtils.getResourceAsStream("");
    java.lang.Object[] var27 = new java.lang.Object[] { var26};
    java.util.List var28 = org.jsecurity.util.CollectionUtils.asList(var27);
    org.jsecurity.authc.pam.ModularRealmAuthenticator var29 = new org.jsecurity.authc.pam.ModularRealmAuthenticator(var28);
    org.jsecurity.subject.SimplePrincipalCollection var31 = new org.jsecurity.subject.SimplePrincipalCollection((java.util.Collection)var28, "org.jsecurity.authz.UnauthorizedException: org.jsecurity.session.ExpiredSessionException: ");
    org.jsecurity.io.ResourceException var35 = new org.jsecurity.io.ResourceException("hi!");
    org.jsecurity.authc.UnknownAccountException var36 = new org.jsecurity.authc.UnknownAccountException((java.lang.Throwable)var35);
    org.jsecurity.session.StoppedSessionException var37 = new org.jsecurity.session.StoppedSessionException("dd\uFFFD", (java.io.Serializable)var35);
    org.jsecurity.session.UnknownSessionException var38 = new org.jsecurity.session.UnknownSessionException("org.jsecurity.authz.UnauthorizedException: org.jsecurity.session.ExpiredSessionException: ", (java.lang.Throwable)var35);
    boolean var39 = var31.equals((java.lang.Object)var35);
    var5.addAll((org.jsecurity.subject.PrincipalCollection)var31);
    org.jsecurity.authz.aop.AuthenticatedAnnotationMethodInterceptor var41 = new org.jsecurity.authz.aop.AuthenticatedAnnotationMethodInterceptor();
    org.jsecurity.aop.AnnotationHandler var42 = var41.getHandler();
    java.lang.Class var43 = var42.getAnnotationClass();
    java.util.Collection var44 = var31.byType(var43);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var9);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var10);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var12);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var13);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var14);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var22);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var23);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var26);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var27);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var28);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var39 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var42);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var43);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var44);

  }

  public void test124() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest7.test124");


    org.jsecurity.authc.pam.AllSuccessfulModularAuthenticationStrategy var0 = new org.jsecurity.authc.pam.AllSuccessfulModularAuthenticationStrategy();
    char[] var2 = new char[] { };
    org.jsecurity.authc.UsernamePasswordToken var4 = new org.jsecurity.authc.UsernamePasswordToken("hi!", var2, true);
    org.jsecurity.authc.SimpleAccount var5 = new org.jsecurity.authc.SimpleAccount();
    var5.setCredentialsExpired(false);
    boolean var8 = var5.isLocked();
    org.jsecurity.authc.AuthenticationInfo var9 = var0.afterAllAttempts((org.jsecurity.authc.AuthenticationToken)var4, (org.jsecurity.authc.AuthenticationInfo)var5);
    char[] var12 = new char[] { };
    org.jsecurity.authc.UsernamePasswordToken var14 = new org.jsecurity.authc.UsernamePasswordToken("hi!", var12, true);
    org.jsecurity.authc.UsernamePasswordToken var15 = new org.jsecurity.authc.UsernamePasswordToken("\u0000\u0000", var12);
    java.lang.Object var16 = var15.getPrincipal();
    org.jsecurity.authc.SimpleAccount var17 = new org.jsecurity.authc.SimpleAccount();
    var17.setCredentialsExpired(false);
    var17.setCredentialsExpired(false);
    boolean var22 = var17.isCredentialsExpired();
    org.jsecurity.authc.AuthenticationInfo var23 = var0.afterAllAttempts((org.jsecurity.authc.AuthenticationToken)var15, (org.jsecurity.authc.AuthenticationInfo)var17);
    org.jsecurity.realm.activedirectory.ActiveDirectoryRealm var24 = new org.jsecurity.realm.activedirectory.ActiveDirectoryRealm();
    org.jsecurity.authc.credential.Sha256CredentialsMatcher var25 = new org.jsecurity.authc.credential.Sha256CredentialsMatcher();
    var24.setCredentialsMatcher((org.jsecurity.authc.credential.CredentialsMatcher)var25);
    java.lang.String var27 = var24.getAuthorizationCacheName();
    var24.setPrincipalSuffix("org.jsecurity.config.ConfigurationException: dd\uFFFD");
    char[] var33 = new char[] { '4', '#'};
    org.jsecurity.authc.UsernamePasswordToken var34 = new org.jsecurity.authc.UsernamePasswordToken("\u0000\u0000", var33);
    org.jsecurity.authc.SimpleAccount var35 = new org.jsecurity.authc.SimpleAccount();
    var35.setCredentialsExpired(false);
    org.jsecurity.authc.AuthenticationInfo var38 = var0.beforeAttempt((org.jsecurity.realm.Realm)var24, (org.jsecurity.authc.AuthenticationToken)var34, (org.jsecurity.authc.AuthenticationInfo)var35);
    var34.setRememberMe(true);
    java.lang.Object var41 = var34.getPrincipal();
    var34.setUsername("\u0000\u0000");
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var2);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var8 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var9);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var12);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var16 + "' != '" + "\u0000\u0000"+ "'", var16.equals("\u0000\u0000"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var22 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var23);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var27);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var33);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var38);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var41 + "' != '" + "\u0000\u0000"+ "'", var41.equals("\u0000\u0000"));

  }

  public void test125() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest7.test125");


    org.jsecurity.mgt.DefaultSecurityManager var0 = new org.jsecurity.mgt.DefaultSecurityManager();
    java.io.InputStream var2 = org.jsecurity.util.ClassUtils.getResourceAsStream("");
    java.lang.Object[] var3 = new java.lang.Object[] { var2};
    java.util.List var4 = org.jsecurity.util.CollectionUtils.asList(var3);
    org.jsecurity.authc.pam.ModularRealmAuthenticator var5 = new org.jsecurity.authc.pam.ModularRealmAuthenticator(var4);
    org.jsecurity.authc.pam.AllSuccessfulModularAuthenticationStrategy var6 = new org.jsecurity.authc.pam.AllSuccessfulModularAuthenticationStrategy();
    var5.setModularAuthenticationStrategy((org.jsecurity.authc.pam.ModularAuthenticationStrategy)var6);
    org.jsecurity.authz.SimpleAuthorizationInfo var8 = new org.jsecurity.authz.SimpleAuthorizationInfo();
    var8.addStringPermission("hi!");
    java.io.InputStream var12 = org.jsecurity.util.ClassUtils.getResourceAsStream("");
    java.lang.Object[] var13 = new java.lang.Object[] { var12};
    java.util.List var14 = org.jsecurity.util.CollectionUtils.asList(var13);
    var8.addRoles((java.util.Collection)var14);
    var5.setAuthenticationListeners((java.util.Collection)var14);
    var0.setSessionListeners((java.util.Collection)var14);
    org.jsecurity.authc.pam.ModularRealmAuthenticator var18 = new org.jsecurity.authc.pam.ModularRealmAuthenticator();
    org.jsecurity.authz.permission.InvalidPermissionStringException var21 = new org.jsecurity.authz.permission.InvalidPermissionStringException("", "dd\uFFFD");
    org.jsecurity.JSecurityException var23 = new org.jsecurity.JSecurityException("");
    org.jsecurity.authc.SimpleAuthenticationInfo var25 = new org.jsecurity.authc.SimpleAuthenticationInfo((java.lang.Object)var21, (java.lang.Object)"", "org.jsecurity.authz.UnauthorizedException: org.jsecurity.session.ExpiredSessionException: ");
    org.jsecurity.subject.PrincipalCollection var26 = var25.getPrincipals();
    var18.onLogout(var26);
    var0.setAuthenticator((org.jsecurity.authc.Authenticator)var18);
    org.jsecurity.codec.CodecException var31 = new org.jsecurity.codec.CodecException("dd\uFFFD");
    org.jsecurity.authc.ConcurrentAccessException var32 = new org.jsecurity.authc.ConcurrentAccessException("org.jsecurity.authz.UnauthorizedException: org.jsecurity.session.ExpiredSessionException: ", (java.lang.Throwable)var31);
    org.jsecurity.subject.SimplePrincipalCollection var34 = new org.jsecurity.subject.SimplePrincipalCollection((java.lang.Object)var31, "");
    org.jsecurity.authc.pam.FirstSuccessfulAuthenticationStrategy var35 = new org.jsecurity.authc.pam.FirstSuccessfulAuthenticationStrategy();
    org.jsecurity.authz.UnauthorizedException var37 = new org.jsecurity.authz.UnauthorizedException("org.jsecurity.config.ConfigurationException: dd\uFFFD");
    java.lang.Throwable[] var38 = var37.getSuppressed();
    java.util.List var39 = org.jsecurity.util.CollectionUtils.asList((java.lang.Object[])var38);
    org.jsecurity.authc.UsernamePasswordToken var40 = new org.jsecurity.authc.UsernamePasswordToken();
    java.lang.String var41 = var40.getUsername();
    java.net.InetAddress var42 = var40.getInetAddress();
    org.jsecurity.authc.AuthenticationInfo var43 = var35.beforeAllAttempts((java.util.Collection)var39, (org.jsecurity.authc.AuthenticationToken)var40);
    org.jsecurity.session.UnknownSessionException var48 = new org.jsecurity.session.UnknownSessionException("dd\uFFFD", (java.io.Serializable)100.0f);
    org.jsecurity.subject.SubjectException var49 = new org.jsecurity.subject.SubjectException("dd\uFFFD", (java.lang.Throwable)var48);
    org.jsecurity.io.SerializationException var50 = new org.jsecurity.io.SerializationException("", (java.lang.Throwable)var49);
    java.lang.Throwable[] var51 = var49.getSuppressed();
    java.util.Set var52 = org.jsecurity.util.CollectionUtils.asSet((java.lang.Object[])var51);
    org.jsecurity.authc.SimpleAccount var53 = new org.jsecurity.authc.SimpleAccount((org.jsecurity.subject.PrincipalCollection)var34, (java.lang.Object)var39, var52);
    java.io.InputStream var55 = org.jsecurity.util.ClassUtils.getResourceAsStream("");
    java.lang.Object[] var56 = new java.lang.Object[] { var55};
    java.util.List var57 = org.jsecurity.util.CollectionUtils.asList(var56);
    org.jsecurity.authc.pam.ModularRealmAuthenticator var58 = new org.jsecurity.authc.pam.ModularRealmAuthenticator(var57);
    org.jsecurity.subject.SimplePrincipalCollection var60 = new org.jsecurity.subject.SimplePrincipalCollection((java.util.Collection)var57, "org.jsecurity.authz.UnauthorizedException: org.jsecurity.session.ExpiredSessionException: ");
    org.jsecurity.io.ResourceException var64 = new org.jsecurity.io.ResourceException("hi!");
    org.jsecurity.authc.UnknownAccountException var65 = new org.jsecurity.authc.UnknownAccountException((java.lang.Throwable)var64);
    org.jsecurity.session.StoppedSessionException var66 = new org.jsecurity.session.StoppedSessionException("dd\uFFFD", (java.io.Serializable)var64);
    org.jsecurity.session.UnknownSessionException var67 = new org.jsecurity.session.UnknownSessionException("org.jsecurity.authz.UnauthorizedException: org.jsecurity.session.ExpiredSessionException: ", (java.lang.Throwable)var64);
    boolean var68 = var60.equals((java.lang.Object)var64);
    var34.addAll((org.jsecurity.subject.PrincipalCollection)var60);
    org.jsecurity.session.UnknownSessionException var74 = new org.jsecurity.session.UnknownSessionException("dd\uFFFD", (java.io.Serializable)100.0f);
    org.jsecurity.subject.SubjectException var75 = new org.jsecurity.subject.SubjectException("dd\uFFFD", (java.lang.Throwable)var74);
    org.jsecurity.io.SerializationException var76 = new org.jsecurity.io.SerializationException("", (java.lang.Throwable)var75);
    java.lang.Throwable[] var77 = var75.getSuppressed();
    java.util.List var78 = org.jsecurity.util.CollectionUtils.asList((java.lang.Object[])var77);
    boolean var79 = var0.isPermittedAll((org.jsecurity.subject.PrincipalCollection)var34, (java.util.Collection)var78);
    org.jsecurity.subject.DelegatingSubject var80 = new org.jsecurity.subject.DelegatingSubject((org.jsecurity.mgt.SecurityManager)var0);
    boolean var82 = var80.hasRole("org.jsecurity.authc.IncorrectCredentialsException: \u0000\u0000");
    org.jsecurity.authz.SimpleAuthorizationInfo var84 = new org.jsecurity.authz.SimpleAuthorizationInfo();
    org.jsecurity.session.UnknownSessionException var89 = new org.jsecurity.session.UnknownSessionException("dd\uFFFD", (java.io.Serializable)100.0f);
    org.jsecurity.subject.SubjectException var90 = new org.jsecurity.subject.SubjectException("dd\uFFFD", (java.lang.Throwable)var89);
    org.jsecurity.io.SerializationException var91 = new org.jsecurity.io.SerializationException("", (java.lang.Throwable)var90);
    java.lang.Throwable[] var92 = var90.getSuppressed();
    java.util.Set var93 = org.jsecurity.util.CollectionUtils.asSet((java.lang.Object[])var92);
    var84.setStringPermissions(var93);
    org.jsecurity.authz.SimpleRole var95 = new org.jsecurity.authz.SimpleRole("\u0000\u0000", var93);
    boolean var96 = var80.isPermittedAll((java.util.Collection)var93);
    var80.logout();
    boolean var98 = var80.isAuthenticated();
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var2);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var3);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var4);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var12);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var13);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var14);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var26);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var38);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var39);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var41);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var42);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var43);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var51);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var52);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var55);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var56);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var57);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var68 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var77);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var78);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var79 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var82 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var92);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var93);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var96 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var98 == false);

  }

  public void test126() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest7.test126");


    org.jsecurity.session.mgt.SimpleSession var0 = new org.jsecurity.session.mgt.SimpleSession();
    org.jsecurity.io.SerializationException var3 = new org.jsecurity.io.SerializationException("org.jsecurity.config.ConfigurationException: dd\uFFFD");
    org.jsecurity.authc.AccountException var4 = new org.jsecurity.authc.AccountException("a2b823b1e72eae2b727289df8a00a89df8a0bab6ad8a89c4c5c7a9b62a270000", (java.lang.Throwable)var3);
    var0.setId((java.io.Serializable)"a2b823b1e72eae2b727289df8a00a89df8a0bab6ad8a89c4c5c7a9b62a270000");
    org.jsecurity.config.ReflectionBuilder var6 = new org.jsecurity.config.ReflectionBuilder();
    org.jsecurity.config.ReflectionBuilder var7 = new org.jsecurity.config.ReflectionBuilder();
    org.jsecurity.io.IniResource var8 = new org.jsecurity.io.IniResource();
    var8.setCharsetName("org.jsecurity.authz.UnauthorizedException: org.jsecurity.session.ExpiredSessionException: ");
    java.util.Map var11 = var8.getSections();
    java.util.Map var12 = var7.buildObjects(var11);
    org.jsecurity.config.ReflectionBuilder var13 = new org.jsecurity.config.ReflectionBuilder();
    org.jsecurity.io.IniResource var14 = new org.jsecurity.io.IniResource();
    var14.setCharsetName("org.jsecurity.authz.UnauthorizedException: org.jsecurity.session.ExpiredSessionException: ");
    java.util.Map var17 = var14.getSections();
    java.util.Map var18 = var13.buildObjects(var17);
    java.util.Map var19 = var7.buildObjects(var18);
    java.util.Map var20 = var6.buildObjects(var19);
    var0.setAttributes(var20);
    java.net.InetAddress var22 = var0.getHostAddress();
    org.jsecurity.session.UnknownSessionException var26 = new org.jsecurity.session.UnknownSessionException("dd\uFFFD", (java.io.Serializable)100.0f);
    org.jsecurity.session.SessionException var28 = new org.jsecurity.session.SessionException("dd\uFFFD", (java.lang.Throwable)var26, (java.io.Serializable)0);
    org.jsecurity.authc.SimpleAuthenticationInfo var31 = new org.jsecurity.authc.SimpleAuthenticationInfo((java.lang.Object)0, (java.lang.Object)10, "hi!");
    org.jsecurity.session.UnknownSessionException var37 = new org.jsecurity.session.UnknownSessionException("dd\uFFFD", (java.io.Serializable)100.0f);
    org.jsecurity.subject.SubjectException var38 = new org.jsecurity.subject.SubjectException("dd\uFFFD", (java.lang.Throwable)var37);
    org.jsecurity.authc.AccountException var39 = new org.jsecurity.authc.AccountException("hi!", (java.lang.Throwable)var38);
    org.jsecurity.session.ExpiredSessionException var40 = new org.jsecurity.session.ExpiredSessionException("dd\uFFFD", (java.io.Serializable)var39);
    java.io.Serializable var41 = var40.getSessionId();
    boolean var42 = var31.equals((java.lang.Object)var40);
    byte[] var44 = org.jsecurity.codec.Base64.decode("hi!");
    org.jsecurity.authc.CredentialsException var46 = new org.jsecurity.authc.CredentialsException("org.jsecurity.authz.UnauthorizedException: org.jsecurity.session.ExpiredSessionException: ");
    org.jsecurity.authc.SimpleAuthenticationInfo var48 = new org.jsecurity.authc.SimpleAuthenticationInfo((java.lang.Object)"hi!", (java.lang.Object)var46, "org.jsecurity.config.ConfigurationException: dd\uFFFD");
    var31.merge((org.jsecurity.authc.AuthenticationInfo)var48);
    java.lang.String var50 = var48.toString();
    java.lang.String var51 = var48.toString();
    org.jsecurity.authc.credential.AllowAllCredentialsMatcher var52 = new org.jsecurity.authc.credential.AllowAllCredentialsMatcher();
    org.jsecurity.authc.UsernamePasswordToken var53 = new org.jsecurity.authc.UsernamePasswordToken();
    org.jsecurity.codec.CodecException var56 = new org.jsecurity.codec.CodecException("dd\uFFFD");
    org.jsecurity.authc.ConcurrentAccessException var57 = new org.jsecurity.authc.ConcurrentAccessException("org.jsecurity.authz.UnauthorizedException: org.jsecurity.session.ExpiredSessionException: ", (java.lang.Throwable)var56);
    org.jsecurity.subject.SimplePrincipalCollection var59 = new org.jsecurity.subject.SimplePrincipalCollection((java.lang.Object)var56, "");
    org.jsecurity.authc.pam.FirstSuccessfulAuthenticationStrategy var60 = new org.jsecurity.authc.pam.FirstSuccessfulAuthenticationStrategy();
    org.jsecurity.authz.UnauthorizedException var62 = new org.jsecurity.authz.UnauthorizedException("org.jsecurity.config.ConfigurationException: dd\uFFFD");
    java.lang.Throwable[] var63 = var62.getSuppressed();
    java.util.List var64 = org.jsecurity.util.CollectionUtils.asList((java.lang.Object[])var63);
    org.jsecurity.authc.UsernamePasswordToken var65 = new org.jsecurity.authc.UsernamePasswordToken();
    java.lang.String var66 = var65.getUsername();
    java.net.InetAddress var67 = var65.getInetAddress();
    org.jsecurity.authc.AuthenticationInfo var68 = var60.beforeAllAttempts((java.util.Collection)var64, (org.jsecurity.authc.AuthenticationToken)var65);
    org.jsecurity.session.UnknownSessionException var73 = new org.jsecurity.session.UnknownSessionException("dd\uFFFD", (java.io.Serializable)100.0f);
    org.jsecurity.subject.SubjectException var74 = new org.jsecurity.subject.SubjectException("dd\uFFFD", (java.lang.Throwable)var73);
    org.jsecurity.io.SerializationException var75 = new org.jsecurity.io.SerializationException("", (java.lang.Throwable)var74);
    java.lang.Throwable[] var76 = var74.getSuppressed();
    java.util.Set var77 = org.jsecurity.util.CollectionUtils.asSet((java.lang.Object[])var76);
    org.jsecurity.authc.SimpleAccount var78 = new org.jsecurity.authc.SimpleAccount((org.jsecurity.subject.PrincipalCollection)var59, (java.lang.Object)var64, var77);
    var78.addStringPermission("org.jsecurity.config.ConfigurationException: dd\uFFFD");
    org.jsecurity.authz.SimpleRole var81 = new org.jsecurity.authz.SimpleRole();
    org.jsecurity.authz.permission.WildcardPermission var84 = new org.jsecurity.authz.permission.WildcardPermission("hi!", false);
    boolean var85 = var81.isPermitted((org.jsecurity.authz.Permission)var84);
    var78.addObjectPermission((org.jsecurity.authz.Permission)var84);
    boolean var87 = var52.doCredentialsMatch((org.jsecurity.authc.AuthenticationToken)var53, (org.jsecurity.authc.AuthenticationInfo)var78);
    var48.merge((org.jsecurity.authc.AuthenticationInfo)var78);
    org.jsecurity.authc.SimpleAuthenticationInfo var90 = new org.jsecurity.authc.SimpleAuthenticationInfo((java.lang.Object)var22, (java.lang.Object)var48, "330a41fd-f404-4b7f-8f3c-bc52c3f67c3e");
    org.jsecurity.io.ResourceException var92 = new org.jsecurity.io.ResourceException("hi!");
    boolean var93 = var90.equals((java.lang.Object)var92);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var11);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var12);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var17);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var18);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var19);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var20);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var22);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var41);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var42 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var44);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var63);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var64);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var66);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var67);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var68);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var76);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var77);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var85 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var87 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var93 == false);

  }

  public void test127() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest7.test127");


    org.jsecurity.config.ConfigurationException var1 = new org.jsecurity.config.ConfigurationException();
    org.jsecurity.util.UnknownClassException var2 = new org.jsecurity.util.UnknownClassException((java.lang.Throwable)var1);
    org.jsecurity.util.InstantiationException var3 = new org.jsecurity.util.InstantiationException((java.lang.Throwable)var2);
    org.jsecurity.session.UnknownSessionException var4 = new org.jsecurity.session.UnknownSessionException("9d388eff-106e-47d9-8180-843fdfd13dce", (java.lang.Throwable)var3);
    org.jsecurity.realm.text.PropertiesRealm var5 = new org.jsecurity.realm.text.PropertiesRealm();
    var5.setReloadIntervalSeconds(10);
    java.lang.String var8 = var5.getUserDefinitions();
    var5.setReloadIntervalSeconds((-1));
    var5.destroy();
    org.jsecurity.authc.SimpleAccount var13 = new org.jsecurity.authc.SimpleAccount((java.lang.Object)var4, (java.lang.Object)var5, "e3583cd4-368b-434b-a989-aa59c30eca02");
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var8);

  }

  public void test128() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest7.test128");


    org.jsecurity.crypto.hash.Md5Hash var1 = org.jsecurity.crypto.hash.Md5Hash.fromBase64String("");
    byte[] var2 = var1.getBytes();
    byte[] var3 = var1.getBytes();
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var1);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var2);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var3);

  }

  public void test129() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest7.test129");


    org.jsecurity.authc.AuthenticationException var1 = new org.jsecurity.authc.AuthenticationException("896800bf-f105-4b17-b247-b6d3863d2ce8");

  }

  public void test130() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest7.test130");


    org.jsecurity.crypto.BlowfishCipher var0 = new org.jsecurity.crypto.BlowfishCipher();
    byte[] var4 = new byte[] { (byte)100, (byte)100, (byte)(-1)};
    java.lang.String var5 = org.jsecurity.codec.CodecSupport.toString(var4);
    byte[] var7 = org.jsecurity.codec.Base64.decode("hi!");
    byte[] var8 = var0.encrypt(var4, var7);
    java.lang.String var9 = org.jsecurity.codec.Base64.decodeToString(var4);
    java.lang.String var10 = org.jsecurity.codec.CodecSupport.toString(var4);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var4);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var5 + "' != '" + "dd\uFFFD"+ "'", var5.equals("dd\uFFFD"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var7);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var8);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var9 + "' != '" + "\u0000\u0000"+ "'", var9.equals("\u0000\u0000"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var10 + "' != '" + "dd\uFFFD"+ "'", var10.equals("dd\uFFFD"));

  }

  public void test131() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest7.test131");


    org.jsecurity.authz.ModularRealmAuthorizer var0 = new org.jsecurity.authz.ModularRealmAuthorizer();
    java.io.InputStream var2 = org.jsecurity.util.ClassUtils.getResourceAsStream("");
    java.lang.Object[] var3 = new java.lang.Object[] { var2};
    java.util.List var4 = org.jsecurity.util.CollectionUtils.asList(var3);
    org.jsecurity.authc.pam.ModularRealmAuthenticator var5 = new org.jsecurity.authc.pam.ModularRealmAuthenticator(var4);
    org.jsecurity.subject.SimplePrincipalCollection var7 = new org.jsecurity.subject.SimplePrincipalCollection((java.util.Collection)var4, "org.jsecurity.authz.UnauthorizedException: org.jsecurity.session.ExpiredSessionException: ");
    org.jsecurity.session.UnknownSessionException var12 = new org.jsecurity.session.UnknownSessionException("dd\uFFFD", (java.io.Serializable)100.0f);
    org.jsecurity.session.SessionException var14 = new org.jsecurity.session.SessionException("dd\uFFFD", (java.lang.Throwable)var12, (java.io.Serializable)0);
    org.jsecurity.session.SessionException var15 = new org.jsecurity.session.SessionException("dd\uFFFD", (java.lang.Throwable)var12);
    var7.add((java.lang.Object)var15, "org.jsecurity.config.ConfigurationException: dd\uFFFD");
    java.util.Set var18 = var7.asSet();
    var0.setRealms((java.util.Collection)var18);
    java.util.Collection var20 = var0.getRealms();
    java.util.Collection var21 = var0.getRealms();
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var2);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var3);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var4);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var18);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var20);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var21);

  }

  public void test132() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest7.test132");


    org.jsecurity.session.SessionException var1 = new org.jsecurity.session.SessionException("e2497199-95f2-4373-8934-d742f09a6cb1");

  }

  public void test133() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest7.test133");


    org.jsecurity.session.mgt.quartz.QuartzSessionValidationScheduler var0 = new org.jsecurity.session.mgt.quartz.QuartzSessionValidationScheduler();
    var0.disableSessionValidation();
    var0.enableSessionValidation();
    org.jsecurity.mgt.DefaultSecurityManager var3 = new org.jsecurity.mgt.DefaultSecurityManager();
    java.io.InputStream var5 = org.jsecurity.util.ClassUtils.getResourceAsStream("");
    java.lang.Object[] var6 = new java.lang.Object[] { var5};
    java.util.List var7 = org.jsecurity.util.CollectionUtils.asList(var6);
    org.jsecurity.authc.pam.ModularRealmAuthenticator var8 = new org.jsecurity.authc.pam.ModularRealmAuthenticator(var7);
    org.jsecurity.authc.pam.AllSuccessfulModularAuthenticationStrategy var9 = new org.jsecurity.authc.pam.AllSuccessfulModularAuthenticationStrategy();
    var8.setModularAuthenticationStrategy((org.jsecurity.authc.pam.ModularAuthenticationStrategy)var9);
    org.jsecurity.authz.SimpleAuthorizationInfo var11 = new org.jsecurity.authz.SimpleAuthorizationInfo();
    var11.addStringPermission("hi!");
    java.io.InputStream var15 = org.jsecurity.util.ClassUtils.getResourceAsStream("");
    java.lang.Object[] var16 = new java.lang.Object[] { var15};
    java.util.List var17 = org.jsecurity.util.CollectionUtils.asList(var16);
    var11.addRoles((java.util.Collection)var17);
    var8.setAuthenticationListeners((java.util.Collection)var17);
    var3.setSessionListeners((java.util.Collection)var17);
    org.jsecurity.realm.text.TextConfigurationRealm var21 = new org.jsecurity.realm.text.TextConfigurationRealm();
    java.io.InputStream var23 = org.jsecurity.util.ClassUtils.getResourceAsStream("");
    java.lang.Object[] var24 = new java.lang.Object[] { var23};
    java.util.List var25 = org.jsecurity.util.CollectionUtils.asList(var24);
    org.jsecurity.authc.pam.ModularRealmAuthenticator var26 = new org.jsecurity.authc.pam.ModularRealmAuthenticator(var25);
    org.jsecurity.subject.SimplePrincipalCollection var28 = new org.jsecurity.subject.SimplePrincipalCollection((java.util.Collection)var25, "org.jsecurity.authz.UnauthorizedException: org.jsecurity.session.ExpiredSessionException: ");
    org.jsecurity.session.UnknownSessionException var33 = new org.jsecurity.session.UnknownSessionException("dd\uFFFD", (java.io.Serializable)100.0f);
    org.jsecurity.session.SessionException var35 = new org.jsecurity.session.SessionException("dd\uFFFD", (java.lang.Throwable)var33, (java.io.Serializable)0);
    org.jsecurity.session.SessionException var36 = new org.jsecurity.session.SessionException("dd\uFFFD", (java.lang.Throwable)var33);
    var28.add((java.lang.Object)var36, "org.jsecurity.config.ConfigurationException: dd\uFFFD");
    var21.onLogout((org.jsecurity.subject.PrincipalCollection)var28);
    org.jsecurity.authc.pam.FirstSuccessfulAuthenticationStrategy var40 = new org.jsecurity.authc.pam.FirstSuccessfulAuthenticationStrategy();
    org.jsecurity.authz.UnauthorizedException var42 = new org.jsecurity.authz.UnauthorizedException("org.jsecurity.config.ConfigurationException: dd\uFFFD");
    java.lang.Throwable[] var43 = var42.getSuppressed();
    java.util.List var44 = org.jsecurity.util.CollectionUtils.asList((java.lang.Object[])var43);
    org.jsecurity.authc.UsernamePasswordToken var45 = new org.jsecurity.authc.UsernamePasswordToken();
    java.lang.String var46 = var45.getUsername();
    java.net.InetAddress var47 = var45.getInetAddress();
    org.jsecurity.authc.AuthenticationInfo var48 = var40.beforeAllAttempts((java.util.Collection)var44, (org.jsecurity.authc.AuthenticationToken)var45);
    boolean[] var49 = var3.hasRoles((org.jsecurity.subject.PrincipalCollection)var28, var44);
    org.jsecurity.codec.CodecException var52 = new org.jsecurity.codec.CodecException("dd\uFFFD");
    org.jsecurity.authc.ConcurrentAccessException var53 = new org.jsecurity.authc.ConcurrentAccessException("org.jsecurity.authz.UnauthorizedException: org.jsecurity.session.ExpiredSessionException: ", (java.lang.Throwable)var52);
    org.jsecurity.subject.SimplePrincipalCollection var55 = new org.jsecurity.subject.SimplePrincipalCollection((java.lang.Object)var52, "");
    java.io.InputStream var57 = org.jsecurity.util.ClassUtils.getResourceAsStream("");
    java.lang.Object[] var58 = new java.lang.Object[] { var57};
    java.util.List var59 = org.jsecurity.util.CollectionUtils.asList(var58);
    org.jsecurity.authc.pam.ModularRealmAuthenticator var60 = new org.jsecurity.authc.pam.ModularRealmAuthenticator(var59);
    var55.addAll((java.util.Collection)var59, "\u0000\u0000");
    var3.setSessionListeners((java.util.Collection)var59);
    org.jsecurity.session.mgt.DefaultSessionManager var64 = new org.jsecurity.session.mgt.DefaultSessionManager();
    org.jsecurity.mgt.DefaultSecurityManager var65 = new org.jsecurity.mgt.DefaultSecurityManager();
    org.jsecurity.authz.permission.WildcardPermissionResolver var66 = new org.jsecurity.authz.permission.WildcardPermissionResolver();
    var65.setPermissionResolver((org.jsecurity.authz.permission.PermissionResolver)var66);
    org.jsecurity.cache.CacheManager var68 = var65.getCacheManager();
    var64.setCacheManager(var68);
    org.jsecurity.session.mgt.SessionValidationScheduler var70 = var64.getSessionValidationScheduler();
    var3.setSessionManager((org.jsecurity.session.mgt.SessionManager)var64);
    var64.destroy();
    var64.setSessionValidationSchedulerEnabled(true);
    org.jsecurity.session.mgt.quartz.QuartzSessionValidationScheduler var75 = new org.jsecurity.session.mgt.quartz.QuartzSessionValidationScheduler((org.jsecurity.session.mgt.ValidatingSessionManager)var64);
    var0.setSessionManager((org.jsecurity.session.mgt.ValidatingSessionManager)var64);
    org.jsecurity.session.mgt.DelegatingSession var78 = new org.jsecurity.session.mgt.DelegatingSession((org.jsecurity.session.mgt.SessionManager)var64, (java.io.Serializable)"3c88ea99-8ee7-47bc-94b1-7ac2b7eddf5e");
    org.jsecurity.io.ResourceException var80 = new org.jsecurity.io.ResourceException("hi!");
    org.jsecurity.codec.CodecException var81 = new org.jsecurity.codec.CodecException((java.lang.Throwable)var80);
    org.jsecurity.authc.IncorrectCredentialsException var82 = new org.jsecurity.authc.IncorrectCredentialsException((java.lang.Throwable)var80);
    org.jsecurity.session.mgt.DelegatingSession var83 = new org.jsecurity.session.mgt.DelegatingSession((org.jsecurity.session.mgt.SessionManager)var64, (java.io.Serializable)var80);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var5);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var6);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var7);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var15);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var16);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var17);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var23);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var24);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var25);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var43);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var44);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var46);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var47);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var48);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var49);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var57);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var58);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var59);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var68);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var70);

  }

  public void test134() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest7.test134");


    java.lang.String[] var2 = org.jsecurity.util.StringUtils.split("org.jsecurity.authc.UsernamePasswordToken - \u0000\u0000, rememberMe=false", '#');
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var2);

  }

  public void test135() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest7.test135");


    org.jsecurity.config.ReflectionBuilder var0 = new org.jsecurity.config.ReflectionBuilder();
    org.jsecurity.io.IniResource var1 = new org.jsecurity.io.IniResource();
    var1.setCharsetName("org.jsecurity.authz.UnauthorizedException: org.jsecurity.session.ExpiredSessionException: ");
    java.util.Map var4 = var1.getSections();
    java.util.Map var5 = var0.buildObjects(var4);
    org.jsecurity.config.ReflectionBuilder var6 = new org.jsecurity.config.ReflectionBuilder();
    org.jsecurity.io.IniResource var7 = new org.jsecurity.io.IniResource();
    var7.setCharsetName("org.jsecurity.authz.UnauthorizedException: org.jsecurity.session.ExpiredSessionException: ");
    java.util.Map var10 = var7.getSections();
    java.util.Map var11 = var6.buildObjects(var10);
    java.util.Map var12 = var0.buildObjects(var11);
    java.util.Map var13 = var0.getObjects();
    org.jsecurity.config.ReflectionBuilder var14 = new org.jsecurity.config.ReflectionBuilder(var13);
    org.jsecurity.session.mgt.SimpleSession var15 = new org.jsecurity.session.mgt.SimpleSession();
    org.jsecurity.io.SerializationException var18 = new org.jsecurity.io.SerializationException("org.jsecurity.config.ConfigurationException: dd\uFFFD");
    org.jsecurity.authc.AccountException var19 = new org.jsecurity.authc.AccountException("a2b823b1e72eae2b727289df8a00a89df8a0bab6ad8a89c4c5c7a9b62a270000", (java.lang.Throwable)var18);
    var15.setId((java.io.Serializable)"a2b823b1e72eae2b727289df8a00a89df8a0bab6ad8a89c4c5c7a9b62a270000");
    org.jsecurity.config.ReflectionBuilder var21 = new org.jsecurity.config.ReflectionBuilder();
    org.jsecurity.config.ReflectionBuilder var22 = new org.jsecurity.config.ReflectionBuilder();
    org.jsecurity.io.IniResource var23 = new org.jsecurity.io.IniResource();
    var23.setCharsetName("org.jsecurity.authz.UnauthorizedException: org.jsecurity.session.ExpiredSessionException: ");
    java.util.Map var26 = var23.getSections();
    java.util.Map var27 = var22.buildObjects(var26);
    org.jsecurity.config.ReflectionBuilder var28 = new org.jsecurity.config.ReflectionBuilder();
    org.jsecurity.io.IniResource var29 = new org.jsecurity.io.IniResource();
    var29.setCharsetName("org.jsecurity.authz.UnauthorizedException: org.jsecurity.session.ExpiredSessionException: ");
    java.util.Map var32 = var29.getSections();
    java.util.Map var33 = var28.buildObjects(var32);
    java.util.Map var34 = var22.buildObjects(var33);
    java.util.Map var35 = var21.buildObjects(var34);
    var15.setAttributes(var35);
    var14.setObjects(var35);
    java.util.Map var38 = var14.getObjects();
    org.jsecurity.realm.activedirectory.ActiveDirectoryRealm var39 = new org.jsecurity.realm.activedirectory.ActiveDirectoryRealm();
    var39.initAuthorizationCache();
    org.jsecurity.mgt.DefaultSecurityManager var41 = new org.jsecurity.mgt.DefaultSecurityManager();
    java.io.InputStream var43 = org.jsecurity.util.ClassUtils.getResourceAsStream("");
    java.lang.Object[] var44 = new java.lang.Object[] { var43};
    java.util.List var45 = org.jsecurity.util.CollectionUtils.asList(var44);
    org.jsecurity.authc.pam.ModularRealmAuthenticator var46 = new org.jsecurity.authc.pam.ModularRealmAuthenticator(var45);
    org.jsecurity.authc.pam.AllSuccessfulModularAuthenticationStrategy var47 = new org.jsecurity.authc.pam.AllSuccessfulModularAuthenticationStrategy();
    var46.setModularAuthenticationStrategy((org.jsecurity.authc.pam.ModularAuthenticationStrategy)var47);
    org.jsecurity.authz.SimpleAuthorizationInfo var49 = new org.jsecurity.authz.SimpleAuthorizationInfo();
    var49.addStringPermission("hi!");
    java.io.InputStream var53 = org.jsecurity.util.ClassUtils.getResourceAsStream("");
    java.lang.Object[] var54 = new java.lang.Object[] { var53};
    java.util.List var55 = org.jsecurity.util.CollectionUtils.asList(var54);
    var49.addRoles((java.util.Collection)var55);
    var46.setAuthenticationListeners((java.util.Collection)var55);
    var41.setSessionListeners((java.util.Collection)var55);
    java.io.InputStream var60 = org.jsecurity.util.ClassUtils.getResourceAsStream("");
    java.lang.Object[] var61 = new java.lang.Object[] { var60};
    java.util.List var62 = org.jsecurity.util.CollectionUtils.asList(var61);
    org.jsecurity.authc.pam.ModularRealmAuthenticator var63 = new org.jsecurity.authc.pam.ModularRealmAuthenticator(var62);
    org.jsecurity.authc.pam.AllSuccessfulModularAuthenticationStrategy var64 = new org.jsecurity.authc.pam.AllSuccessfulModularAuthenticationStrategy();
    var63.setModularAuthenticationStrategy((org.jsecurity.authc.pam.ModularAuthenticationStrategy)var64);
    org.jsecurity.authz.SimpleAuthorizationInfo var66 = new org.jsecurity.authz.SimpleAuthorizationInfo();
    var66.addStringPermission("hi!");
    java.io.InputStream var70 = org.jsecurity.util.ClassUtils.getResourceAsStream("");
    java.lang.Object[] var71 = new java.lang.Object[] { var70};
    java.util.List var72 = org.jsecurity.util.CollectionUtils.asList(var71);
    var66.addRoles((java.util.Collection)var72);
    var63.setAuthenticationListeners((java.util.Collection)var72);
    org.jsecurity.realm.activedirectory.ActiveDirectoryRealm var75 = new org.jsecurity.realm.activedirectory.ActiveDirectoryRealm();
    var75.setPrincipalSuffix("");
    var63.setRealm((org.jsecurity.realm.Realm)var75);
    org.jsecurity.cache.HashtableCacheManager var79 = new org.jsecurity.cache.HashtableCacheManager();
    org.jsecurity.cache.Cache var81 = var79.getCache("\u0000\u0000");
    var75.setAuthorizationCache(var81);
    var41.setRealm((org.jsecurity.realm.Realm)var75);
    org.jsecurity.config.ReflectionBuilder var84 = new org.jsecurity.config.ReflectionBuilder();
    org.jsecurity.io.IniResource var85 = new org.jsecurity.io.IniResource();
    java.util.Map var86 = var85.getSections();
    var84.setObjects(var86);
    var75.setGroupRolesMap(var86);
    var39.setGroupRolesMap(var86);
    org.jsecurity.config.ReflectionBuilder var90 = new org.jsecurity.config.ReflectionBuilder(var86);
    java.util.Map var91 = var14.buildObjects(var86);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var4);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var5);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var10);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var11);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var12);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var13);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var26);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var27);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var32);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var33);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var34);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var35);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var38);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var43);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var44);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var45);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var53);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var54);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var55);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var60);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var61);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var62);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var70);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var71);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var72);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var81);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var86);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var91);

  }

  public void test136() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest7.test136");


    org.jsecurity.authz.SimpleAuthorizationInfo var0 = new org.jsecurity.authz.SimpleAuthorizationInfo();
    var0.addStringPermission("hi!");
    org.jsecurity.authz.SimpleAuthorizationInfo var4 = new org.jsecurity.authz.SimpleAuthorizationInfo();
    org.jsecurity.session.UnknownSessionException var9 = new org.jsecurity.session.UnknownSessionException("dd\uFFFD", (java.io.Serializable)100.0f);
    org.jsecurity.subject.SubjectException var10 = new org.jsecurity.subject.SubjectException("dd\uFFFD", (java.lang.Throwable)var9);
    org.jsecurity.io.SerializationException var11 = new org.jsecurity.io.SerializationException("", (java.lang.Throwable)var10);
    java.lang.Throwable[] var12 = var10.getSuppressed();
    java.util.Set var13 = org.jsecurity.util.CollectionUtils.asSet((java.lang.Object[])var12);
    var4.setStringPermissions(var13);
    org.jsecurity.authz.SimpleRole var15 = new org.jsecurity.authz.SimpleRole("\u0000\u0000", var13);
    var0.setRoles(var13);
    org.jsecurity.authz.SimpleRole var17 = new org.jsecurity.authz.SimpleRole();
    org.jsecurity.authz.SimpleAuthorizationInfo var18 = new org.jsecurity.authz.SimpleAuthorizationInfo();
    var18.addRole("a2b823b1e72eae2b727289df8a00a89df8a0bab6ad8a89c4c5c7a9b62a270000");
    org.jsecurity.session.UnknownSessionException var25 = new org.jsecurity.session.UnknownSessionException("dd\uFFFD", (java.io.Serializable)100.0f);
    org.jsecurity.subject.SubjectException var26 = new org.jsecurity.subject.SubjectException("dd\uFFFD", (java.lang.Throwable)var25);
    org.jsecurity.io.SerializationException var27 = new org.jsecurity.io.SerializationException("", (java.lang.Throwable)var26);
    java.lang.Throwable[] var28 = var26.getSuppressed();
    java.util.Set var29 = org.jsecurity.util.CollectionUtils.asSet((java.lang.Object[])var28);
    var18.addRoles((java.util.Collection)var29);
    var17.addAll((java.util.Collection)var29);
    java.lang.String var32 = var17.getName();
    org.jsecurity.authz.permission.WildcardPermission var35 = new org.jsecurity.authz.permission.WildcardPermission("hi!", false);
    var17.add((org.jsecurity.authz.Permission)var35);
    org.jsecurity.realm.activedirectory.ActiveDirectoryRealm var37 = new org.jsecurity.realm.activedirectory.ActiveDirectoryRealm();
    var37.init();
    var37.init();
    org.jsecurity.realm.activedirectory.ActiveDirectoryRealm var40 = new org.jsecurity.realm.activedirectory.ActiveDirectoryRealm();
    org.jsecurity.authc.credential.Sha256CredentialsMatcher var41 = new org.jsecurity.authc.credential.Sha256CredentialsMatcher();
    var40.setCredentialsMatcher((org.jsecurity.authc.credential.CredentialsMatcher)var41);
    java.lang.String var43 = var40.getAuthorizationCacheName();
    var40.setUrl("hi!");
    org.jsecurity.realm.ldap.DefaultLdapContextFactory var46 = new org.jsecurity.realm.ldap.DefaultLdapContextFactory();
    var40.setLdapContextFactory((org.jsecurity.realm.ldap.LdapContextFactory)var46);
    var46.setAuthentication("dd\uFFFD");
    var37.setLdapContextFactory((org.jsecurity.realm.ldap.LdapContextFactory)var46);
    boolean var51 = var17.equals((java.lang.Object)var46);
    org.jsecurity.realm.text.TextConfigurationRealm var52 = new org.jsecurity.realm.text.TextConfigurationRealm();
    org.jsecurity.realm.text.TextConfigurationRealm var53 = new org.jsecurity.realm.text.TextConfigurationRealm();
    java.io.InputStream var55 = org.jsecurity.util.ClassUtils.getResourceAsStream("");
    java.lang.Object[] var56 = new java.lang.Object[] { var55};
    java.util.List var57 = org.jsecurity.util.CollectionUtils.asList(var56);
    org.jsecurity.authc.pam.ModularRealmAuthenticator var58 = new org.jsecurity.authc.pam.ModularRealmAuthenticator(var57);
    org.jsecurity.subject.SimplePrincipalCollection var60 = new org.jsecurity.subject.SimplePrincipalCollection((java.util.Collection)var57, "org.jsecurity.authz.UnauthorizedException: org.jsecurity.session.ExpiredSessionException: ");
    org.jsecurity.session.UnknownSessionException var65 = new org.jsecurity.session.UnknownSessionException("dd\uFFFD", (java.io.Serializable)100.0f);
    org.jsecurity.session.SessionException var67 = new org.jsecurity.session.SessionException("dd\uFFFD", (java.lang.Throwable)var65, (java.io.Serializable)0);
    org.jsecurity.session.SessionException var68 = new org.jsecurity.session.SessionException("dd\uFFFD", (java.lang.Throwable)var65);
    var60.add((java.lang.Object)var68, "org.jsecurity.config.ConfigurationException: dd\uFFFD");
    var53.onLogout((org.jsecurity.subject.PrincipalCollection)var60);
    java.util.Collection var73 = var60.fromRealm("\u0000\u0000\u0000");
    var52.onLogout((org.jsecurity.subject.PrincipalCollection)var60);
    java.util.Set var75 = var60.asSet();
    org.jsecurity.authz.ModularRealmAuthorizer var76 = new org.jsecurity.authz.ModularRealmAuthorizer((java.util.Collection)var75);
    var17.addAll((java.util.Collection)var75);
    var0.addStringPermissions((java.util.Collection)var75);
    java.util.Set var79 = var0.getObjectPermissions();
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var12);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var13);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var28);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var29);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var32);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var43);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var51 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var55);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var56);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var57);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var73);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var75);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var79);

  }

  public void test137() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest7.test137");


    org.jsecurity.io.ResourceException var5 = new org.jsecurity.io.ResourceException("hi!");
    org.jsecurity.codec.CodecException var6 = new org.jsecurity.codec.CodecException((java.lang.Throwable)var5);
    org.jsecurity.JSecurityException var7 = new org.jsecurity.JSecurityException("a2b823b1e72eae2b727289df8a00a89df8a0bab6ad8a89c4c5c7a9b62a270000", (java.lang.Throwable)var5);
    org.jsecurity.session.UnknownSessionException var8 = new org.jsecurity.session.UnknownSessionException((java.lang.Throwable)var7);
    org.jsecurity.authc.IncorrectCredentialsException var9 = new org.jsecurity.authc.IncorrectCredentialsException((java.lang.Throwable)var7);
    org.jsecurity.authz.AuthorizationException var10 = new org.jsecurity.authz.AuthorizationException("\u0000\u0000\u0000", (java.lang.Throwable)var7);
    org.jsecurity.authc.AccountException var11 = new org.jsecurity.authc.AccountException((java.lang.Throwable)var10);
    org.jsecurity.subject.SimplePrincipalCollection var13 = new org.jsecurity.subject.SimplePrincipalCollection((java.lang.Object)var11, "org.jsecurity.authz.UnauthorizedException: org.jsecurity.session.ExpiredSessionException: ");
    org.jsecurity.codec.CodecException var14 = new org.jsecurity.codec.CodecException("org.jsecurity.authc.IncorrectCredentialsException: \u0000\u0000", (java.lang.Throwable)var11);
    org.jsecurity.session.mgt.SimpleSession var15 = new org.jsecurity.session.mgt.SimpleSession();
    var15.touch();
    var15.validate();
    org.jsecurity.session.mgt.SimpleSession var18 = new org.jsecurity.session.mgt.SimpleSession();
    var18.setTimeout((-1L));
    org.jsecurity.session.mgt.SimpleSession var21 = new org.jsecurity.session.mgt.SimpleSession();
    java.util.Date var22 = var21.getLastAccessTime();
    var18.setLastAccessTime(var22);
    org.jsecurity.session.mgt.SimpleSession var24 = new org.jsecurity.session.mgt.SimpleSession();
    java.util.Date var25 = var24.getLastAccessTime();
    var18.setStopTimestamp(var25);
    var15.setLastAccessTime(var25);
    org.jsecurity.session.ExpiredSessionException var28 = new org.jsecurity.session.ExpiredSessionException("a1088bc1-eab4-414f-8f0c-33579d5b6ef9", (java.lang.Throwable)var11, (java.io.Serializable)var25);
    org.jsecurity.authz.UnauthenticatedException var29 = new org.jsecurity.authz.UnauthenticatedException((java.lang.Throwable)var11);
    org.jsecurity.authc.CredentialsException var31 = new org.jsecurity.authc.CredentialsException("org.jsecurity.realm.text.PropertiesRealm_2438");
    var29.addSuppressed((java.lang.Throwable)var31);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var22);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var25);

  }

  public void test138() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest7.test138");


    org.jsecurity.session.UnknownSessionException var4 = new org.jsecurity.session.UnknownSessionException("dd\uFFFD", (java.io.Serializable)100.0f);
    org.jsecurity.subject.SubjectException var5 = new org.jsecurity.subject.SubjectException("dd\uFFFD", (java.lang.Throwable)var4);
    org.jsecurity.io.SerializationException var6 = new org.jsecurity.io.SerializationException("", (java.lang.Throwable)var5);
    java.lang.Throwable[] var7 = var5.getSuppressed();
    java.util.List var8 = org.jsecurity.util.CollectionUtils.asList((java.lang.Object[])var7);
    java.util.List var9 = org.jsecurity.util.CollectionUtils.asList((java.lang.Object[])var7);
    java.util.Set var10 = org.jsecurity.util.CollectionUtils.asSet((java.lang.Object[])var7);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var7);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var8);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var9);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var10);

  }

  public void test139() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest7.test139");


    org.jsecurity.authz.SimpleAuthorizingAccount var0 = new org.jsecurity.authz.SimpleAuthorizingAccount();
    org.jsecurity.authz.SimpleAuthorizationInfo var1 = new org.jsecurity.authz.SimpleAuthorizationInfo();
    var1.addRole("a2b823b1e72eae2b727289df8a00a89df8a0bab6ad8a89c4c5c7a9b62a270000");
    org.jsecurity.authz.SimpleAuthorizationInfo var4 = new org.jsecurity.authz.SimpleAuthorizationInfo();
    var4.addRole("a2b823b1e72eae2b727289df8a00a89df8a0bab6ad8a89c4c5c7a9b62a270000");
    org.jsecurity.session.UnknownSessionException var11 = new org.jsecurity.session.UnknownSessionException("dd\uFFFD", (java.io.Serializable)100.0f);
    org.jsecurity.subject.SubjectException var12 = new org.jsecurity.subject.SubjectException("dd\uFFFD", (java.lang.Throwable)var11);
    org.jsecurity.io.SerializationException var13 = new org.jsecurity.io.SerializationException("", (java.lang.Throwable)var12);
    java.lang.Throwable[] var14 = var12.getSuppressed();
    java.util.Set var15 = org.jsecurity.util.CollectionUtils.asSet((java.lang.Object[])var14);
    var4.addRoles((java.util.Collection)var15);
    var1.setObjectPermissions(var15);
    var0.setSimpleRoles(var15);
    org.jsecurity.mgt.DefaultSecurityManager var19 = new org.jsecurity.mgt.DefaultSecurityManager();
    org.jsecurity.authc.pam.AllSuccessfulModularAuthenticationStrategy var20 = new org.jsecurity.authc.pam.AllSuccessfulModularAuthenticationStrategy();
    org.jsecurity.authc.pam.AllSuccessfulModularAuthenticationStrategy var21 = new org.jsecurity.authc.pam.AllSuccessfulModularAuthenticationStrategy();
    char[] var23 = new char[] { };
    org.jsecurity.authc.UsernamePasswordToken var25 = new org.jsecurity.authc.UsernamePasswordToken("hi!", var23, true);
    org.jsecurity.authc.SimpleAccount var26 = new org.jsecurity.authc.SimpleAccount();
    var26.setCredentialsExpired(false);
    boolean var29 = var26.isLocked();
    org.jsecurity.authc.AuthenticationInfo var30 = var21.afterAllAttempts((org.jsecurity.authc.AuthenticationToken)var25, (org.jsecurity.authc.AuthenticationInfo)var26);
    char[] var34 = new char[] { '4', '#'};
    org.jsecurity.authc.UsernamePasswordToken var35 = new org.jsecurity.authc.UsernamePasswordToken("\u0000\u0000", var34);
    org.jsecurity.authc.SimpleAccount var36 = new org.jsecurity.authc.SimpleAccount();
    var36.setCredentialsExpired(false);
    var36.setCredentialsExpired(false);
    boolean var41 = var36.isCredentialsExpired();
    org.jsecurity.authc.AuthenticationInfo var42 = var21.afterAllAttempts((org.jsecurity.authc.AuthenticationToken)var35, (org.jsecurity.authc.AuthenticationInfo)var36);
    org.jsecurity.authz.UnauthenticatedException var46 = new org.jsecurity.authz.UnauthenticatedException();
    org.jsecurity.config.UnresolveableReferenceException var47 = new org.jsecurity.config.UnresolveableReferenceException("", (java.lang.Throwable)var46);
    org.jsecurity.cache.CacheException var48 = new org.jsecurity.cache.CacheException("org.jsecurity.config.ConfigurationException: dd\uFFFD", (java.lang.Throwable)var46);
    org.jsecurity.authc.SimpleAuthenticationInfo var50 = new org.jsecurity.authc.SimpleAuthenticationInfo((java.lang.Object)"org.jsecurity.config.ConfigurationException: dd\uFFFD", (java.lang.Object)var48, "a2b823b1e72eae2b727289df8a00a89df8a0bab6ad8a89c4c5c7a9b62a270000");
    org.jsecurity.subject.PrincipalCollection var51 = var50.getPrincipals();
    org.jsecurity.authc.AuthenticationInfo var52 = var20.afterAllAttempts((org.jsecurity.authc.AuthenticationToken)var35, (org.jsecurity.authc.AuthenticationInfo)var50);
    var19.setModularAuthenticationStrategy((org.jsecurity.authc.pam.ModularAuthenticationStrategy)var20);
    org.jsecurity.subject.RememberMeManager var54 = var19.getRememberMeManager();
    java.io.InputStream var56 = org.jsecurity.util.ClassUtils.getResourceAsStream("");
    java.lang.Object[] var57 = new java.lang.Object[] { var56};
    java.util.List var58 = org.jsecurity.util.CollectionUtils.asList(var57);
    org.jsecurity.authc.pam.ModularRealmAuthenticator var59 = new org.jsecurity.authc.pam.ModularRealmAuthenticator(var58);
    org.jsecurity.subject.SimplePrincipalCollection var61 = new org.jsecurity.subject.SimplePrincipalCollection((java.util.Collection)var58, "org.jsecurity.authz.UnauthorizedException: org.jsecurity.session.ExpiredSessionException: ");
    java.util.List var62 = var61.asList();
    org.jsecurity.authz.SimpleAuthorizationInfo var63 = new org.jsecurity.authz.SimpleAuthorizationInfo();
    var63.addRole("a2b823b1e72eae2b727289df8a00a89df8a0bab6ad8a89c4c5c7a9b62a270000");
    org.jsecurity.session.UnknownSessionException var70 = new org.jsecurity.session.UnknownSessionException("dd\uFFFD", (java.io.Serializable)100.0f);
    org.jsecurity.subject.SubjectException var71 = new org.jsecurity.subject.SubjectException("dd\uFFFD", (java.lang.Throwable)var70);
    org.jsecurity.io.SerializationException var72 = new org.jsecurity.io.SerializationException("", (java.lang.Throwable)var71);
    java.lang.Throwable[] var73 = var71.getSuppressed();
    java.util.Set var74 = org.jsecurity.util.CollectionUtils.asSet((java.lang.Object[])var73);
    var63.addRoles((java.util.Collection)var74);
    var19.checkRoles((org.jsecurity.subject.PrincipalCollection)var61, (java.util.Collection)var74);
    var0.addRoles(var74);
    org.jsecurity.realm.text.PropertiesRealm var78 = new org.jsecurity.realm.text.PropertiesRealm();
    org.jsecurity.realm.activedirectory.ActiveDirectoryRealm var79 = new org.jsecurity.realm.activedirectory.ActiveDirectoryRealm();
    org.jsecurity.authc.credential.Sha256CredentialsMatcher var80 = new org.jsecurity.authc.credential.Sha256CredentialsMatcher();
    var79.setCredentialsMatcher((org.jsecurity.authc.credential.CredentialsMatcher)var80);
    java.lang.String var82 = var79.getAuthorizationCacheName();
    var79.setPrincipalSuffix("org.jsecurity.config.ConfigurationException: dd\uFFFD");
    org.jsecurity.authz.permission.PermissionResolver var85 = var79.getPermissionResolver();
    var78.setPermissionResolver(var85);
    java.util.Set var87 = org.jsecurity.util.PermissionUtils.resolvePermissions((java.util.Collection)var74, var85);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var14);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var15);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var23);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var29 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var30);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var34);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var41 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var42);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var51);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var52);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var54);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var56);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var57);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var58);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var62);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var73);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var74);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var82);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var85);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var87);

  }

  public void test140() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest7.test140");


    org.jsecurity.mgt.DefaultSecurityManager var0 = new org.jsecurity.mgt.DefaultSecurityManager();
    java.io.InputStream var2 = org.jsecurity.util.ClassUtils.getResourceAsStream("");
    java.lang.Object[] var3 = new java.lang.Object[] { var2};
    java.util.List var4 = org.jsecurity.util.CollectionUtils.asList(var3);
    org.jsecurity.authc.pam.ModularRealmAuthenticator var5 = new org.jsecurity.authc.pam.ModularRealmAuthenticator(var4);
    org.jsecurity.authc.pam.AllSuccessfulModularAuthenticationStrategy var6 = new org.jsecurity.authc.pam.AllSuccessfulModularAuthenticationStrategy();
    var5.setModularAuthenticationStrategy((org.jsecurity.authc.pam.ModularAuthenticationStrategy)var6);
    org.jsecurity.authz.SimpleAuthorizationInfo var8 = new org.jsecurity.authz.SimpleAuthorizationInfo();
    var8.addStringPermission("hi!");
    java.io.InputStream var12 = org.jsecurity.util.ClassUtils.getResourceAsStream("");
    java.lang.Object[] var13 = new java.lang.Object[] { var12};
    java.util.List var14 = org.jsecurity.util.CollectionUtils.asList(var13);
    var8.addRoles((java.util.Collection)var14);
    var5.setAuthenticationListeners((java.util.Collection)var14);
    var0.setSessionListeners((java.util.Collection)var14);
    org.jsecurity.realm.text.TextConfigurationRealm var18 = new org.jsecurity.realm.text.TextConfigurationRealm();
    java.io.InputStream var20 = org.jsecurity.util.ClassUtils.getResourceAsStream("");
    java.lang.Object[] var21 = new java.lang.Object[] { var20};
    java.util.List var22 = org.jsecurity.util.CollectionUtils.asList(var21);
    org.jsecurity.authc.pam.ModularRealmAuthenticator var23 = new org.jsecurity.authc.pam.ModularRealmAuthenticator(var22);
    org.jsecurity.subject.SimplePrincipalCollection var25 = new org.jsecurity.subject.SimplePrincipalCollection((java.util.Collection)var22, "org.jsecurity.authz.UnauthorizedException: org.jsecurity.session.ExpiredSessionException: ");
    org.jsecurity.session.UnknownSessionException var30 = new org.jsecurity.session.UnknownSessionException("dd\uFFFD", (java.io.Serializable)100.0f);
    org.jsecurity.session.SessionException var32 = new org.jsecurity.session.SessionException("dd\uFFFD", (java.lang.Throwable)var30, (java.io.Serializable)0);
    org.jsecurity.session.SessionException var33 = new org.jsecurity.session.SessionException("dd\uFFFD", (java.lang.Throwable)var30);
    var25.add((java.lang.Object)var33, "org.jsecurity.config.ConfigurationException: dd\uFFFD");
    var18.onLogout((org.jsecurity.subject.PrincipalCollection)var25);
    org.jsecurity.authc.pam.FirstSuccessfulAuthenticationStrategy var37 = new org.jsecurity.authc.pam.FirstSuccessfulAuthenticationStrategy();
    org.jsecurity.authz.UnauthorizedException var39 = new org.jsecurity.authz.UnauthorizedException("org.jsecurity.config.ConfigurationException: dd\uFFFD");
    java.lang.Throwable[] var40 = var39.getSuppressed();
    java.util.List var41 = org.jsecurity.util.CollectionUtils.asList((java.lang.Object[])var40);
    org.jsecurity.authc.UsernamePasswordToken var42 = new org.jsecurity.authc.UsernamePasswordToken();
    java.lang.String var43 = var42.getUsername();
    java.net.InetAddress var44 = var42.getInetAddress();
    org.jsecurity.authc.AuthenticationInfo var45 = var37.beforeAllAttempts((java.util.Collection)var41, (org.jsecurity.authc.AuthenticationToken)var42);
    boolean[] var46 = var0.hasRoles((org.jsecurity.subject.PrincipalCollection)var25, var41);
    org.jsecurity.subject.Subject var47 = var0.getSubject();
    org.jsecurity.subject.RememberMeManager var48 = var0.getRememberMeManager();
    var0.destroy();
    org.jsecurity.realm.activedirectory.ActiveDirectoryRealm var50 = new org.jsecurity.realm.activedirectory.ActiveDirectoryRealm();
    var50.init();
    var50.setSystemPassword("dd\uFFFD");
    org.jsecurity.authz.aop.GuestAnnotationHandler var54 = new org.jsecurity.authz.aop.GuestAnnotationHandler();
    java.lang.Class var55 = var54.getAnnotationClass();
    var50.setAuthenticationTokenClass(var55);
    org.jsecurity.mgt.DefaultSecurityManager var57 = new org.jsecurity.mgt.DefaultSecurityManager((org.jsecurity.realm.Realm)var50);
    org.jsecurity.cache.CacheManager var58 = var50.getCacheManager();
    var50.setUrl("3aaa5efd-5a5b-4a04-b3d7-42cd5249d0e9");
    org.jsecurity.cache.CacheManager var61 = var50.getCacheManager();
    var0.setCacheManager(var61);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var2);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var3);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var4);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var12);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var13);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var14);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var20);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var21);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var22);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var40);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var41);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var43);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var44);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var45);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var46);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var47);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var48);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var55);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var58);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var61);

  }

  public void test141() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest7.test141");


    org.jsecurity.authz.AuthorizationException var1 = new org.jsecurity.authz.AuthorizationException();
    org.jsecurity.authz.SimpleRole var2 = new org.jsecurity.authz.SimpleRole();
    org.jsecurity.authz.SimpleAuthorizationInfo var3 = new org.jsecurity.authz.SimpleAuthorizationInfo();
    var3.addRole("a2b823b1e72eae2b727289df8a00a89df8a0bab6ad8a89c4c5c7a9b62a270000");
    org.jsecurity.session.UnknownSessionException var10 = new org.jsecurity.session.UnknownSessionException("dd\uFFFD", (java.io.Serializable)100.0f);
    org.jsecurity.subject.SubjectException var11 = new org.jsecurity.subject.SubjectException("dd\uFFFD", (java.lang.Throwable)var10);
    org.jsecurity.io.SerializationException var12 = new org.jsecurity.io.SerializationException("", (java.lang.Throwable)var11);
    java.lang.Throwable[] var13 = var11.getSuppressed();
    java.util.Set var14 = org.jsecurity.util.CollectionUtils.asSet((java.lang.Object[])var13);
    var3.addRoles((java.util.Collection)var14);
    var2.addAll((java.util.Collection)var14);
    org.jsecurity.authz.SimpleRole var17 = new org.jsecurity.authz.SimpleRole();
    org.jsecurity.authz.SimpleAuthorizationInfo var18 = new org.jsecurity.authz.SimpleAuthorizationInfo();
    var18.addRole("a2b823b1e72eae2b727289df8a00a89df8a0bab6ad8a89c4c5c7a9b62a270000");
    org.jsecurity.session.UnknownSessionException var25 = new org.jsecurity.session.UnknownSessionException("dd\uFFFD", (java.io.Serializable)100.0f);
    org.jsecurity.subject.SubjectException var26 = new org.jsecurity.subject.SubjectException("dd\uFFFD", (java.lang.Throwable)var25);
    org.jsecurity.io.SerializationException var27 = new org.jsecurity.io.SerializationException("", (java.lang.Throwable)var26);
    java.lang.Throwable[] var28 = var26.getSuppressed();
    java.util.Set var29 = org.jsecurity.util.CollectionUtils.asSet((java.lang.Object[])var28);
    var18.addRoles((java.util.Collection)var29);
    var17.addAll((java.util.Collection)var29);
    java.lang.String var32 = var17.getName();
    org.jsecurity.authz.permission.WildcardPermission var35 = new org.jsecurity.authz.permission.WildcardPermission("hi!", false);
    var17.add((org.jsecurity.authz.Permission)var35);
    var2.add((org.jsecurity.authz.Permission)var35);
    org.jsecurity.authz.SimpleAuthorizationInfo var39 = new org.jsecurity.authz.SimpleAuthorizationInfo();
    org.jsecurity.session.UnknownSessionException var44 = new org.jsecurity.session.UnknownSessionException("dd\uFFFD", (java.io.Serializable)100.0f);
    org.jsecurity.subject.SubjectException var45 = new org.jsecurity.subject.SubjectException("dd\uFFFD", (java.lang.Throwable)var44);
    org.jsecurity.io.SerializationException var46 = new org.jsecurity.io.SerializationException("", (java.lang.Throwable)var45);
    java.lang.Throwable[] var47 = var45.getSuppressed();
    java.util.Set var48 = org.jsecurity.util.CollectionUtils.asSet((java.lang.Object[])var47);
    var39.setStringPermissions(var48);
    org.jsecurity.authz.SimpleRole var50 = new org.jsecurity.authz.SimpleRole("\u0000\u0000", var48);
    var2.setPermissions(var48);
    org.jsecurity.session.UnknownSessionException var52 = new org.jsecurity.session.UnknownSessionException("f4578b3a-1e8a-4019-b058-920d7e36ff9e", (java.lang.Throwable)var1, (java.io.Serializable)var2);
    java.lang.String var53 = var2.getName();
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var13);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var14);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var28);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var29);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var32);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var47);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var48);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var53);

  }

  public void test142() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest7.test142");


    org.jsecurity.realm.jndi.JndiRealmFactory var0 = new org.jsecurity.realm.jndi.JndiRealmFactory();
    java.util.Collection var1 = var0.getJndiNames();
    var0.setJndiNames("e8e5d499-33c0-418e-93f9-76a51372c414");
    org.jsecurity.jndi.JndiTemplate var4 = var0.getJndiTemplate();
    org.jsecurity.authz.SimpleAuthorizationInfo var5 = new org.jsecurity.authz.SimpleAuthorizationInfo();
    var5.addRole("a2b823b1e72eae2b727289df8a00a89df8a0bab6ad8a89c4c5c7a9b62a270000");
    org.jsecurity.authz.SimpleAuthorizationInfo var8 = new org.jsecurity.authz.SimpleAuthorizationInfo();
    var8.addRole("a2b823b1e72eae2b727289df8a00a89df8a0bab6ad8a89c4c5c7a9b62a270000");
    org.jsecurity.session.UnknownSessionException var15 = new org.jsecurity.session.UnknownSessionException("dd\uFFFD", (java.io.Serializable)100.0f);
    org.jsecurity.subject.SubjectException var16 = new org.jsecurity.subject.SubjectException("dd\uFFFD", (java.lang.Throwable)var15);
    org.jsecurity.io.SerializationException var17 = new org.jsecurity.io.SerializationException("", (java.lang.Throwable)var16);
    java.lang.Throwable[] var18 = var16.getSuppressed();
    java.util.Set var19 = org.jsecurity.util.CollectionUtils.asSet((java.lang.Object[])var18);
    var8.addRoles((java.util.Collection)var19);
    var5.setObjectPermissions(var19);
    java.io.InputStream var23 = org.jsecurity.util.ClassUtils.getResourceAsStream("");
    java.lang.Object[] var24 = new java.lang.Object[] { var23};
    java.util.List var25 = org.jsecurity.util.CollectionUtils.asList(var24);
    org.jsecurity.authc.pam.ModularRealmAuthenticator var26 = new org.jsecurity.authc.pam.ModularRealmAuthenticator(var25);
    org.jsecurity.subject.SimplePrincipalCollection var28 = new org.jsecurity.subject.SimplePrincipalCollection((java.util.Collection)var25, "org.jsecurity.authz.UnauthorizedException: org.jsecurity.session.ExpiredSessionException: ");
    java.util.Set var29 = var28.getRealmNames();
    java.io.InputStream var31 = org.jsecurity.util.ClassUtils.getResourceAsStream("");
    java.lang.Object[] var32 = new java.lang.Object[] { var31};
    java.util.List var33 = org.jsecurity.util.CollectionUtils.asList(var32);
    org.jsecurity.authc.pam.ModularRealmAuthenticator var34 = new org.jsecurity.authc.pam.ModularRealmAuthenticator(var33);
    org.jsecurity.subject.SimplePrincipalCollection var36 = new org.jsecurity.subject.SimplePrincipalCollection((java.util.Collection)var33, "org.jsecurity.authz.UnauthorizedException: org.jsecurity.session.ExpiredSessionException: ");
    org.jsecurity.session.UnknownSessionException var41 = new org.jsecurity.session.UnknownSessionException("dd\uFFFD", (java.io.Serializable)100.0f);
    org.jsecurity.session.SessionException var43 = new org.jsecurity.session.SessionException("dd\uFFFD", (java.lang.Throwable)var41, (java.io.Serializable)0);
    org.jsecurity.session.SessionException var44 = new org.jsecurity.session.SessionException("dd\uFFFD", (java.lang.Throwable)var41);
    var36.add((java.lang.Object)var44, "org.jsecurity.config.ConfigurationException: dd\uFFFD");
    java.util.Set var47 = var36.asSet();
    var28.addAll((java.util.Collection)var47, "6464ff");
    var5.setStringPermissions(var47);
    var0.setJndiNames((java.util.Collection)var47);
    org.jsecurity.realm.jndi.JndiRealmFactory var52 = new org.jsecurity.realm.jndi.JndiRealmFactory();
    java.util.Collection var53 = var52.getJndiNames();
    org.jsecurity.jndi.JndiTemplate var54 = var52.getJndiTemplate();
    java.util.Properties var55 = var54.getEnvironment();
    var0.setJndiTemplate(var54);
    java.util.Properties var57 = var54.getEnvironment();
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var1);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var4);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var18);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var19);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var23);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var24);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var25);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var29);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var31);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var32);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var33);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var47);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var53);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var54);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var55);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var57);

  }

  public void test143() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest7.test143");


    java.io.InputStream var1 = org.jsecurity.util.ClassUtils.getResourceAsStream("");
    java.lang.Object[] var2 = new java.lang.Object[] { var1};
    java.util.List var3 = org.jsecurity.util.CollectionUtils.asList(var2);
    org.jsecurity.authc.pam.ModularRealmAuthenticator var4 = new org.jsecurity.authc.pam.ModularRealmAuthenticator(var3);
    java.io.InputStream var6 = org.jsecurity.util.ClassUtils.getResourceAsStream("");
    java.lang.Object[] var7 = new java.lang.Object[] { var6};
    java.util.List var8 = org.jsecurity.util.CollectionUtils.asList(var7);
    org.jsecurity.authc.pam.ModularRealmAuthenticator var9 = new org.jsecurity.authc.pam.ModularRealmAuthenticator(var8);
    var4.setRealms((java.util.Collection)var8);
    org.jsecurity.subject.SimplePrincipalCollection var12 = new org.jsecurity.subject.SimplePrincipalCollection((java.util.Collection)var8, "org.jsecurity.realm.SimpleAccountRealm-9-authorization");
    org.jsecurity.crypto.BlowfishCipher var13 = new org.jsecurity.crypto.BlowfishCipher();
    java.security.Key var14 = org.jsecurity.crypto.BlowfishCipher.generateNewKey();
    var13.setKey(var14);
    org.jsecurity.authz.SimpleAuthorizingAccount var16 = new org.jsecurity.authz.SimpleAuthorizingAccount((org.jsecurity.subject.PrincipalCollection)var12, (java.lang.Object)var14);
    org.jsecurity.realm.activedirectory.ActiveDirectoryRealm var18 = new org.jsecurity.realm.activedirectory.ActiveDirectoryRealm();
    org.jsecurity.authc.credential.Sha256CredentialsMatcher var19 = new org.jsecurity.authc.credential.Sha256CredentialsMatcher();
    var18.setCredentialsMatcher((org.jsecurity.authc.credential.CredentialsMatcher)var19);
    java.lang.String var21 = var18.getAuthorizationCacheName();
    var18.setPrincipalSuffix("org.jsecurity.config.ConfigurationException: dd\uFFFD");
    org.jsecurity.authz.permission.PermissionResolver var24 = var18.getPermissionResolver();
    java.util.Set var25 = org.jsecurity.util.PermissionUtils.resolveDelimitedPermissions("NfxhYN7ItBfRAmDBmprtU73ghfEEPpcDJrHPkZ06wiY=", var24);
    var16.addObjectPermissions((java.util.Collection)var25);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var1);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var2);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var3);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var6);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var7);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var8);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var14);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var21);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var24);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var25);

  }

  public void test144() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest7.test144");


    org.jsecurity.realm.jdbc.JdbcRealm var0 = new org.jsecurity.realm.jdbc.JdbcRealm();
    var0.setPermissionsQuery("org.jsecurity.authz.UnauthorizedException: org.jsecurity.session.ExpiredSessionException: ");
    var0.setAuthenticationQuery("518186d8-31e9-47c0-b564-85d1505b64b6");
    var0.setUserRolesQuery("0b128fd4-ef6a-4375-b646-5f7d7b4bb97b");

  }

  public void test145() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest7.test145");


    org.jsecurity.authz.permission.InvalidPermissionStringException var2 = new org.jsecurity.authz.permission.InvalidPermissionStringException("org.jsecurity.realm.text.TextConfigurationRealm_3659", "org.jsecurity.realm.text.PropertiesRealm_2347");

  }

  public void test146() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest7.test146");


    org.jsecurity.session.SessionException var1 = new org.jsecurity.session.SessionException((java.io.Serializable)"hi!");
    org.jsecurity.session.InvalidSessionException var2 = new org.jsecurity.session.InvalidSessionException((java.io.Serializable)var1);

  }

  public void test147() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest7.test147");


    org.jsecurity.authz.SimpleAuthorizingAccount var0 = new org.jsecurity.authz.SimpleAuthorizingAccount();
    org.jsecurity.authz.SimpleAuthorizationInfo var1 = new org.jsecurity.authz.SimpleAuthorizationInfo();
    var1.addRole("a2b823b1e72eae2b727289df8a00a89df8a0bab6ad8a89c4c5c7a9b62a270000");
    org.jsecurity.authz.SimpleAuthorizationInfo var4 = new org.jsecurity.authz.SimpleAuthorizationInfo();
    var4.addRole("a2b823b1e72eae2b727289df8a00a89df8a0bab6ad8a89c4c5c7a9b62a270000");
    org.jsecurity.session.UnknownSessionException var11 = new org.jsecurity.session.UnknownSessionException("dd\uFFFD", (java.io.Serializable)100.0f);
    org.jsecurity.subject.SubjectException var12 = new org.jsecurity.subject.SubjectException("dd\uFFFD", (java.lang.Throwable)var11);
    org.jsecurity.io.SerializationException var13 = new org.jsecurity.io.SerializationException("", (java.lang.Throwable)var12);
    java.lang.Throwable[] var14 = var12.getSuppressed();
    java.util.Set var15 = org.jsecurity.util.CollectionUtils.asSet((java.lang.Object[])var14);
    var4.addRoles((java.util.Collection)var15);
    var1.setObjectPermissions(var15);
    var0.setSimpleRoles(var15);
    java.util.Set var19 = var0.getPermissions();
    org.jsecurity.authz.SimpleAuthorizationInfo var20 = new org.jsecurity.authz.SimpleAuthorizationInfo(var19);
    org.jsecurity.codec.CodecException var24 = new org.jsecurity.codec.CodecException("dd\uFFFD");
    org.jsecurity.authc.ConcurrentAccessException var25 = new org.jsecurity.authc.ConcurrentAccessException("org.jsecurity.authz.UnauthorizedException: org.jsecurity.session.ExpiredSessionException: ", (java.lang.Throwable)var24);
    org.jsecurity.authc.CredentialsException var26 = new org.jsecurity.authc.CredentialsException("\uFFFD\uFFFD#\uFFFD\uFFFD.\uFFFD+rr\uFFFD\u07CA\u0000\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\u01E9\uFFFD*'\u0000\u0000", (java.lang.Throwable)var24);
    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      org.jsecurity.crypto.hash.Sha512Hash var28 = new org.jsecurity.crypto.hash.Sha512Hash((java.lang.Object)var19, (java.lang.Object)var24, 10);
      fail("Expected exception of type org.jsecurity.codec.CodecException");
    } catch (org.jsecurity.codec.CodecException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var14);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var15);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var19);

  }

  public void test148() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest7.test148");


    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      java.io.InputStream var1 = org.jsecurity.io.ResourceUtils.getInputStreamForPath("bf8dc28b-ea8f-43f7-9140-93c64a15daca");
      fail("Expected exception of type java.io.FileNotFoundException");
    } catch (java.io.FileNotFoundException e) {
      // Expected exception.
    }

  }

  public void test149() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest7.test149");


    org.jsecurity.authc.pam.ModularRealmAuthenticator var0 = new org.jsecurity.authc.pam.ModularRealmAuthenticator();
    org.jsecurity.authz.SimpleAuthorizationInfo var1 = new org.jsecurity.authz.SimpleAuthorizationInfo();
    var1.addRole("a2b823b1e72eae2b727289df8a00a89df8a0bab6ad8a89c4c5c7a9b62a270000");
    org.jsecurity.authz.SimpleAuthorizationInfo var4 = new org.jsecurity.authz.SimpleAuthorizationInfo();
    var4.addRole("a2b823b1e72eae2b727289df8a00a89df8a0bab6ad8a89c4c5c7a9b62a270000");
    org.jsecurity.session.UnknownSessionException var11 = new org.jsecurity.session.UnknownSessionException("dd\uFFFD", (java.io.Serializable)100.0f);
    org.jsecurity.subject.SubjectException var12 = new org.jsecurity.subject.SubjectException("dd\uFFFD", (java.lang.Throwable)var11);
    org.jsecurity.io.SerializationException var13 = new org.jsecurity.io.SerializationException("", (java.lang.Throwable)var12);
    java.lang.Throwable[] var14 = var12.getSuppressed();
    java.util.Set var15 = org.jsecurity.util.CollectionUtils.asSet((java.lang.Object[])var14);
    var4.addRoles((java.util.Collection)var15);
    var1.setObjectPermissions(var15);
    java.io.InputStream var19 = org.jsecurity.util.ClassUtils.getResourceAsStream("");
    java.lang.Object[] var20 = new java.lang.Object[] { var19};
    java.util.List var21 = org.jsecurity.util.CollectionUtils.asList(var20);
    org.jsecurity.authc.pam.ModularRealmAuthenticator var22 = new org.jsecurity.authc.pam.ModularRealmAuthenticator(var21);
    org.jsecurity.subject.SimplePrincipalCollection var24 = new org.jsecurity.subject.SimplePrincipalCollection((java.util.Collection)var21, "org.jsecurity.authz.UnauthorizedException: org.jsecurity.session.ExpiredSessionException: ");
    java.util.Set var25 = var24.getRealmNames();
    java.io.InputStream var27 = org.jsecurity.util.ClassUtils.getResourceAsStream("");
    java.lang.Object[] var28 = new java.lang.Object[] { var27};
    java.util.List var29 = org.jsecurity.util.CollectionUtils.asList(var28);
    org.jsecurity.authc.pam.ModularRealmAuthenticator var30 = new org.jsecurity.authc.pam.ModularRealmAuthenticator(var29);
    org.jsecurity.subject.SimplePrincipalCollection var32 = new org.jsecurity.subject.SimplePrincipalCollection((java.util.Collection)var29, "org.jsecurity.authz.UnauthorizedException: org.jsecurity.session.ExpiredSessionException: ");
    org.jsecurity.session.UnknownSessionException var37 = new org.jsecurity.session.UnknownSessionException("dd\uFFFD", (java.io.Serializable)100.0f);
    org.jsecurity.session.SessionException var39 = new org.jsecurity.session.SessionException("dd\uFFFD", (java.lang.Throwable)var37, (java.io.Serializable)0);
    org.jsecurity.session.SessionException var40 = new org.jsecurity.session.SessionException("dd\uFFFD", (java.lang.Throwable)var37);
    var32.add((java.lang.Object)var40, "org.jsecurity.config.ConfigurationException: dd\uFFFD");
    java.util.Set var43 = var32.asSet();
    var24.addAll((java.util.Collection)var43, "6464ff");
    var1.setStringPermissions(var43);
    org.jsecurity.subject.SimplePrincipalCollection var48 = new org.jsecurity.subject.SimplePrincipalCollection((java.util.Collection)var43, "\u0000\u0000");
    var0.setAuthenticationListeners((java.util.Collection)var43);
    org.jsecurity.authc.pam.AtLeastOneSuccessfulModularAuthenticationStrategy var50 = new org.jsecurity.authc.pam.AtLeastOneSuccessfulModularAuthenticationStrategy();
    org.jsecurity.authc.pam.AllSuccessfulModularAuthenticationStrategy var52 = new org.jsecurity.authc.pam.AllSuccessfulModularAuthenticationStrategy();
    char[] var54 = new char[] { };
    org.jsecurity.authc.UsernamePasswordToken var56 = new org.jsecurity.authc.UsernamePasswordToken("hi!", var54, true);
    org.jsecurity.authc.SimpleAccount var57 = new org.jsecurity.authc.SimpleAccount();
    var57.setCredentialsExpired(false);
    boolean var60 = var57.isLocked();
    org.jsecurity.authc.AuthenticationInfo var61 = var52.afterAllAttempts((org.jsecurity.authc.AuthenticationToken)var56, (org.jsecurity.authc.AuthenticationInfo)var57);
    char[] var64 = new char[] { };
    org.jsecurity.authc.UsernamePasswordToken var66 = new org.jsecurity.authc.UsernamePasswordToken("hi!", var64, true);
    org.jsecurity.authc.UsernamePasswordToken var67 = new org.jsecurity.authc.UsernamePasswordToken("\u0000\u0000", var64);
    var56.setPassword(var64);
    org.jsecurity.authc.UsernamePasswordToken var69 = new org.jsecurity.authc.UsernamePasswordToken("\u0000\u0000\u0000", var64);
    org.jsecurity.realm.text.TextConfigurationRealm var70 = new org.jsecurity.realm.text.TextConfigurationRealm();
    java.io.InputStream var72 = org.jsecurity.util.ClassUtils.getResourceAsStream("");
    java.lang.Object[] var73 = new java.lang.Object[] { var72};
    java.util.List var74 = org.jsecurity.util.CollectionUtils.asList(var73);
    org.jsecurity.authc.pam.ModularRealmAuthenticator var75 = new org.jsecurity.authc.pam.ModularRealmAuthenticator(var74);
    org.jsecurity.subject.SimplePrincipalCollection var77 = new org.jsecurity.subject.SimplePrincipalCollection((java.util.Collection)var74, "org.jsecurity.authz.UnauthorizedException: org.jsecurity.session.ExpiredSessionException: ");
    org.jsecurity.session.UnknownSessionException var82 = new org.jsecurity.session.UnknownSessionException("dd\uFFFD", (java.io.Serializable)100.0f);
    org.jsecurity.session.SessionException var84 = new org.jsecurity.session.SessionException("dd\uFFFD", (java.lang.Throwable)var82, (java.io.Serializable)0);
    org.jsecurity.session.SessionException var85 = new org.jsecurity.session.SessionException("dd\uFFFD", (java.lang.Throwable)var82);
    var77.add((java.lang.Object)var85, "org.jsecurity.config.ConfigurationException: dd\uFFFD");
    var70.onLogout((org.jsecurity.subject.PrincipalCollection)var77);
    org.jsecurity.authc.ExpiredCredentialsException var90 = new org.jsecurity.authc.ExpiredCredentialsException();
    org.jsecurity.session.ExpiredSessionException var91 = new org.jsecurity.session.ExpiredSessionException("", (java.lang.Throwable)var90);
    java.lang.Throwable[] var92 = var91.getSuppressed();
    org.jsecurity.io.ResourceException var93 = new org.jsecurity.io.ResourceException((java.lang.Throwable)var91);
    org.jsecurity.authc.SimpleAuthenticationInfo var94 = new org.jsecurity.authc.SimpleAuthenticationInfo((org.jsecurity.subject.PrincipalCollection)var77, (java.lang.Object)var91);
    org.jsecurity.authc.AuthenticationInfo var95 = var50.afterAllAttempts((org.jsecurity.authc.AuthenticationToken)var69, (org.jsecurity.authc.AuthenticationInfo)var94);
    var0.setModularAuthenticationStrategy((org.jsecurity.authc.pam.ModularAuthenticationStrategy)var50);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var14);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var15);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var19);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var20);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var21);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var25);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var27);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var28);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var29);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var43);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var54);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var60 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var61);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var64);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var72);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var73);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var74);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var92);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var95);

  }

  public void test150() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest7.test150");


    org.jsecurity.mgt.DefaultSecurityManager var0 = new org.jsecurity.mgt.DefaultSecurityManager();
    java.io.InputStream var2 = org.jsecurity.util.ClassUtils.getResourceAsStream("");
    java.lang.Object[] var3 = new java.lang.Object[] { var2};
    java.util.List var4 = org.jsecurity.util.CollectionUtils.asList(var3);
    org.jsecurity.authc.pam.ModularRealmAuthenticator var5 = new org.jsecurity.authc.pam.ModularRealmAuthenticator(var4);
    org.jsecurity.authc.pam.AllSuccessfulModularAuthenticationStrategy var6 = new org.jsecurity.authc.pam.AllSuccessfulModularAuthenticationStrategy();
    var5.setModularAuthenticationStrategy((org.jsecurity.authc.pam.ModularAuthenticationStrategy)var6);
    org.jsecurity.authz.SimpleAuthorizationInfo var8 = new org.jsecurity.authz.SimpleAuthorizationInfo();
    var8.addStringPermission("hi!");
    java.io.InputStream var12 = org.jsecurity.util.ClassUtils.getResourceAsStream("");
    java.lang.Object[] var13 = new java.lang.Object[] { var12};
    java.util.List var14 = org.jsecurity.util.CollectionUtils.asList(var13);
    var8.addRoles((java.util.Collection)var14);
    var5.setAuthenticationListeners((java.util.Collection)var14);
    var0.setSessionListeners((java.util.Collection)var14);
    org.jsecurity.realm.text.TextConfigurationRealm var18 = new org.jsecurity.realm.text.TextConfigurationRealm();
    java.io.InputStream var20 = org.jsecurity.util.ClassUtils.getResourceAsStream("");
    java.lang.Object[] var21 = new java.lang.Object[] { var20};
    java.util.List var22 = org.jsecurity.util.CollectionUtils.asList(var21);
    org.jsecurity.authc.pam.ModularRealmAuthenticator var23 = new org.jsecurity.authc.pam.ModularRealmAuthenticator(var22);
    org.jsecurity.subject.SimplePrincipalCollection var25 = new org.jsecurity.subject.SimplePrincipalCollection((java.util.Collection)var22, "org.jsecurity.authz.UnauthorizedException: org.jsecurity.session.ExpiredSessionException: ");
    org.jsecurity.session.UnknownSessionException var30 = new org.jsecurity.session.UnknownSessionException("dd\uFFFD", (java.io.Serializable)100.0f);
    org.jsecurity.session.SessionException var32 = new org.jsecurity.session.SessionException("dd\uFFFD", (java.lang.Throwable)var30, (java.io.Serializable)0);
    org.jsecurity.session.SessionException var33 = new org.jsecurity.session.SessionException("dd\uFFFD", (java.lang.Throwable)var30);
    var25.add((java.lang.Object)var33, "org.jsecurity.config.ConfigurationException: dd\uFFFD");
    var18.onLogout((org.jsecurity.subject.PrincipalCollection)var25);
    org.jsecurity.authc.pam.FirstSuccessfulAuthenticationStrategy var37 = new org.jsecurity.authc.pam.FirstSuccessfulAuthenticationStrategy();
    org.jsecurity.authz.UnauthorizedException var39 = new org.jsecurity.authz.UnauthorizedException("org.jsecurity.config.ConfigurationException: dd\uFFFD");
    java.lang.Throwable[] var40 = var39.getSuppressed();
    java.util.List var41 = org.jsecurity.util.CollectionUtils.asList((java.lang.Object[])var40);
    org.jsecurity.authc.UsernamePasswordToken var42 = new org.jsecurity.authc.UsernamePasswordToken();
    java.lang.String var43 = var42.getUsername();
    java.net.InetAddress var44 = var42.getInetAddress();
    org.jsecurity.authc.AuthenticationInfo var45 = var37.beforeAllAttempts((java.util.Collection)var41, (org.jsecurity.authc.AuthenticationToken)var42);
    boolean[] var46 = var0.hasRoles((org.jsecurity.subject.PrincipalCollection)var25, var41);
    org.jsecurity.authz.permission.WildcardPermissionResolver var47 = new org.jsecurity.authz.permission.WildcardPermissionResolver();
    org.jsecurity.authz.Permission var49 = var47.resolvePermission("hi!");
    org.jsecurity.authz.Permission var51 = var47.resolvePermission("hi!");
    var0.setPermissionResolver((org.jsecurity.authz.permission.PermissionResolver)var47);
    org.jsecurity.authz.Authorizer var53 = var0.getAuthorizer();
    org.jsecurity.realm.activedirectory.ActiveDirectoryRealm var54 = new org.jsecurity.realm.activedirectory.ActiveDirectoryRealm();
    org.jsecurity.authc.credential.Sha256CredentialsMatcher var55 = new org.jsecurity.authc.credential.Sha256CredentialsMatcher();
    var54.setCredentialsMatcher((org.jsecurity.authc.credential.CredentialsMatcher)var55);
    java.lang.String var57 = var54.getAuthorizationCacheName();
    var54.setPrincipalSuffix("org.jsecurity.config.ConfigurationException: dd\uFFFD");
    org.jsecurity.realm.text.TextConfigurationRealm var60 = new org.jsecurity.realm.text.TextConfigurationRealm();
    java.io.InputStream var62 = org.jsecurity.util.ClassUtils.getResourceAsStream("");
    java.lang.Object[] var63 = new java.lang.Object[] { var62};
    java.util.List var64 = org.jsecurity.util.CollectionUtils.asList(var63);
    org.jsecurity.authc.pam.ModularRealmAuthenticator var65 = new org.jsecurity.authc.pam.ModularRealmAuthenticator(var64);
    org.jsecurity.subject.SimplePrincipalCollection var67 = new org.jsecurity.subject.SimplePrincipalCollection((java.util.Collection)var64, "org.jsecurity.authz.UnauthorizedException: org.jsecurity.session.ExpiredSessionException: ");
    org.jsecurity.session.UnknownSessionException var72 = new org.jsecurity.session.UnknownSessionException("dd\uFFFD", (java.io.Serializable)100.0f);
    org.jsecurity.session.SessionException var74 = new org.jsecurity.session.SessionException("dd\uFFFD", (java.lang.Throwable)var72, (java.io.Serializable)0);
    org.jsecurity.session.SessionException var75 = new org.jsecurity.session.SessionException("dd\uFFFD", (java.lang.Throwable)var72);
    var67.add((java.lang.Object)var75, "org.jsecurity.config.ConfigurationException: dd\uFFFD");
    var60.onLogout((org.jsecurity.subject.PrincipalCollection)var67);
    var54.onLogout((org.jsecurity.subject.PrincipalCollection)var67);
    org.jsecurity.realm.SimpleAccountRealm var81 = new org.jsecurity.realm.SimpleAccountRealm("hi!");
    java.lang.Class var82 = var81.getAuthenticationTokenClass();
    java.util.Collection var83 = org.jsecurity.util.CollectionUtils.emptyCollection(var82);
    java.util.Collection var84 = var67.byType(var82);
    java.lang.String[] var87 = org.jsecurity.util.StringUtils.tokenizeToStringArray("e23a02c5-2287-4daa-91c4-8efed2be0f73", "49932616-87e3-49f2-a9ff-1e3516355d97");
    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      boolean var88 = var0.isPermittedAll((org.jsecurity.subject.PrincipalCollection)var67, var87);
      fail("Expected exception of type java.util.NoSuchElementException");
    } catch (java.util.NoSuchElementException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var2);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var3);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var4);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var12);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var13);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var14);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var20);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var21);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var22);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var40);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var41);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var43);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var44);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var45);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var46);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var49);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var51);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var53);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var57);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var62);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var63);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var64);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var82);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var83);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var84);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var87);

  }

  public void test151() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest7.test151");


    org.jsecurity.authz.UnauthorizedException var2 = new org.jsecurity.authz.UnauthorizedException("org.jsecurity.config.ConfigurationException: dd\uFFFD");
    org.jsecurity.crypto.hash.Md2Hash var4 = org.jsecurity.crypto.hash.Md2Hash.fromBase64String("a2b823b1e72eae2b727289df8a00a89df8a0bab6ad8a89c4c5c7a9b62a270000");
    org.jsecurity.authc.credential.Md2CredentialsMatcher var5 = new org.jsecurity.authc.credential.Md2CredentialsMatcher();
    org.jsecurity.authz.SimpleAuthorizingAccount var7 = new org.jsecurity.authz.SimpleAuthorizingAccount((java.lang.Object)"a2b823b1e72eae2b727289df8a00a89df8a0bab6ad8a89c4c5c7a9b62a270000", (java.lang.Object)var5, "");
    org.jsecurity.session.UnknownSessionException var8 = new org.jsecurity.session.UnknownSessionException("org.jsecurity.config.ConfigurationException: dd\uFFFD", (java.lang.Throwable)var2, (java.io.Serializable)var7);
    org.jsecurity.authz.SimpleAuthorizationInfo var9 = new org.jsecurity.authz.SimpleAuthorizationInfo();
    org.jsecurity.session.UnknownSessionException var14 = new org.jsecurity.session.UnknownSessionException("dd\uFFFD", (java.io.Serializable)100.0f);
    org.jsecurity.subject.SubjectException var15 = new org.jsecurity.subject.SubjectException("dd\uFFFD", (java.lang.Throwable)var14);
    org.jsecurity.io.SerializationException var16 = new org.jsecurity.io.SerializationException("", (java.lang.Throwable)var15);
    java.lang.Throwable[] var17 = var15.getSuppressed();
    java.util.Set var18 = org.jsecurity.util.CollectionUtils.asSet((java.lang.Object[])var17);
    var9.setStringPermissions(var18);
    java.util.Set var20 = var9.getRoles();
    org.jsecurity.authz.SimpleAuthorizationInfo var21 = new org.jsecurity.authz.SimpleAuthorizationInfo();
    var21.addRole("a2b823b1e72eae2b727289df8a00a89df8a0bab6ad8a89c4c5c7a9b62a270000");
    org.jsecurity.session.UnknownSessionException var28 = new org.jsecurity.session.UnknownSessionException("dd\uFFFD", (java.io.Serializable)100.0f);
    org.jsecurity.subject.SubjectException var29 = new org.jsecurity.subject.SubjectException("dd\uFFFD", (java.lang.Throwable)var28);
    org.jsecurity.io.SerializationException var30 = new org.jsecurity.io.SerializationException("", (java.lang.Throwable)var29);
    java.lang.Throwable[] var31 = var29.getSuppressed();
    java.util.Set var32 = org.jsecurity.util.CollectionUtils.asSet((java.lang.Object[])var31);
    var21.addRoles((java.util.Collection)var32);
    var9.setRoles(var32);
    org.jsecurity.authz.SimpleAuthorizationInfo var35 = new org.jsecurity.authz.SimpleAuthorizationInfo();
    org.jsecurity.session.UnknownSessionException var40 = new org.jsecurity.session.UnknownSessionException("dd\uFFFD", (java.io.Serializable)100.0f);
    org.jsecurity.subject.SubjectException var41 = new org.jsecurity.subject.SubjectException("dd\uFFFD", (java.lang.Throwable)var40);
    org.jsecurity.io.SerializationException var42 = new org.jsecurity.io.SerializationException("", (java.lang.Throwable)var41);
    java.lang.Throwable[] var43 = var41.getSuppressed();
    java.util.Set var44 = org.jsecurity.util.CollectionUtils.asSet((java.lang.Object[])var43);
    var35.setStringPermissions(var44);
    java.util.Set var46 = var35.getRoles();
    org.jsecurity.authz.SimpleAuthorizationInfo var47 = new org.jsecurity.authz.SimpleAuthorizationInfo();
    var47.addRole("a2b823b1e72eae2b727289df8a00a89df8a0bab6ad8a89c4c5c7a9b62a270000");
    org.jsecurity.session.UnknownSessionException var54 = new org.jsecurity.session.UnknownSessionException("dd\uFFFD", (java.io.Serializable)100.0f);
    org.jsecurity.subject.SubjectException var55 = new org.jsecurity.subject.SubjectException("dd\uFFFD", (java.lang.Throwable)var54);
    org.jsecurity.io.SerializationException var56 = new org.jsecurity.io.SerializationException("", (java.lang.Throwable)var55);
    java.lang.Throwable[] var57 = var55.getSuppressed();
    java.util.Set var58 = org.jsecurity.util.CollectionUtils.asSet((java.lang.Object[])var57);
    var47.addRoles((java.util.Collection)var58);
    var35.setRoles(var58);
    var9.setRoles(var58);
    var7.setSimpleRoles(var58);
    org.jsecurity.crypto.hash.Md5Hash var64 = org.jsecurity.crypto.hash.Md5Hash.fromBase64String("org.jsecurity.authc.IncorrectCredentialsException: \u0000\u0000");
    byte[] var66 = org.jsecurity.codec.CodecSupport.toBytes("dd\uFFFD");
    var64.setBytes(var66);
    boolean var68 = var7.equals((java.lang.Object)var64);
    byte[] var69 = var64.getBytes();
    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      java.lang.String var71 = org.jsecurity.codec.CodecSupport.toString(var69, "a1bc3336-1b74-45f8-abc3-c5b4ddcead75");
      fail("Expected exception of type org.jsecurity.codec.CodecException");
    } catch (org.jsecurity.codec.CodecException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var4);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var17);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var18);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var20);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var31);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var32);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var43);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var44);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var46);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var57);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var58);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var64);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var66);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var68 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var69);

  }

  public void test152() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest7.test152");


    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      org.jsecurity.crypto.hash.Md5Hash var1 = org.jsecurity.crypto.hash.Md5Hash.fromHexString("5dce63b0-a255-4de6-ac68-7cd6a6c96f86");
      fail("Expected exception of type java.lang.IllegalArgumentException");
    } catch (java.lang.IllegalArgumentException e) {
      // Expected exception.
    }

  }

  public void test153() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest7.test153");


    org.jsecurity.io.IniResource var4 = new org.jsecurity.io.IniResource();
    java.lang.String var5 = var4.getCharsetName();
    org.jsecurity.session.UnknownSessionException var6 = new org.jsecurity.session.UnknownSessionException("", (java.io.Serializable)var4);
    org.jsecurity.authz.UnauthorizedException var7 = new org.jsecurity.authz.UnauthorizedException("org.jsecurity.config.ConfigurationException: dd\uFFFD", (java.lang.Throwable)var6);
    org.jsecurity.session.SessionException var8 = new org.jsecurity.session.SessionException("65e65177-d0e5-404e-b955-c04bc53877e7", (java.lang.Throwable)var7);
    org.jsecurity.authc.ConcurrentAccessException var9 = new org.jsecurity.authc.ConcurrentAccessException("4a0e5e90-249b-4eb3-a134-0b53851d6caf", (java.lang.Throwable)var7);
    org.jsecurity.authc.CredentialsException var10 = new org.jsecurity.authc.CredentialsException((java.lang.Throwable)var7);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var5);

  }

  public void test154() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest7.test154");


    org.jsecurity.mgt.DefaultSecurityManager var0 = new org.jsecurity.mgt.DefaultSecurityManager();
    java.io.InputStream var2 = org.jsecurity.util.ClassUtils.getResourceAsStream("");
    java.lang.Object[] var3 = new java.lang.Object[] { var2};
    java.util.List var4 = org.jsecurity.util.CollectionUtils.asList(var3);
    org.jsecurity.authc.pam.ModularRealmAuthenticator var5 = new org.jsecurity.authc.pam.ModularRealmAuthenticator(var4);
    org.jsecurity.authc.pam.AllSuccessfulModularAuthenticationStrategy var6 = new org.jsecurity.authc.pam.AllSuccessfulModularAuthenticationStrategy();
    var5.setModularAuthenticationStrategy((org.jsecurity.authc.pam.ModularAuthenticationStrategy)var6);
    org.jsecurity.authz.SimpleAuthorizationInfo var8 = new org.jsecurity.authz.SimpleAuthorizationInfo();
    var8.addStringPermission("hi!");
    java.io.InputStream var12 = org.jsecurity.util.ClassUtils.getResourceAsStream("");
    java.lang.Object[] var13 = new java.lang.Object[] { var12};
    java.util.List var14 = org.jsecurity.util.CollectionUtils.asList(var13);
    var8.addRoles((java.util.Collection)var14);
    var5.setAuthenticationListeners((java.util.Collection)var14);
    var0.setSessionListeners((java.util.Collection)var14);
    org.jsecurity.authc.pam.ModularRealmAuthenticator var18 = new org.jsecurity.authc.pam.ModularRealmAuthenticator();
    org.jsecurity.authz.permission.InvalidPermissionStringException var21 = new org.jsecurity.authz.permission.InvalidPermissionStringException("", "dd\uFFFD");
    org.jsecurity.JSecurityException var23 = new org.jsecurity.JSecurityException("");
    org.jsecurity.authc.SimpleAuthenticationInfo var25 = new org.jsecurity.authc.SimpleAuthenticationInfo((java.lang.Object)var21, (java.lang.Object)"", "org.jsecurity.authz.UnauthorizedException: org.jsecurity.session.ExpiredSessionException: ");
    org.jsecurity.subject.PrincipalCollection var26 = var25.getPrincipals();
    var18.onLogout(var26);
    var0.setAuthenticator((org.jsecurity.authc.Authenticator)var18);
    org.jsecurity.codec.CodecException var31 = new org.jsecurity.codec.CodecException("dd\uFFFD");
    org.jsecurity.authc.ConcurrentAccessException var32 = new org.jsecurity.authc.ConcurrentAccessException("org.jsecurity.authz.UnauthorizedException: org.jsecurity.session.ExpiredSessionException: ", (java.lang.Throwable)var31);
    org.jsecurity.subject.SimplePrincipalCollection var34 = new org.jsecurity.subject.SimplePrincipalCollection((java.lang.Object)var31, "");
    org.jsecurity.authc.pam.FirstSuccessfulAuthenticationStrategy var35 = new org.jsecurity.authc.pam.FirstSuccessfulAuthenticationStrategy();
    org.jsecurity.authz.UnauthorizedException var37 = new org.jsecurity.authz.UnauthorizedException("org.jsecurity.config.ConfigurationException: dd\uFFFD");
    java.lang.Throwable[] var38 = var37.getSuppressed();
    java.util.List var39 = org.jsecurity.util.CollectionUtils.asList((java.lang.Object[])var38);
    org.jsecurity.authc.UsernamePasswordToken var40 = new org.jsecurity.authc.UsernamePasswordToken();
    java.lang.String var41 = var40.getUsername();
    java.net.InetAddress var42 = var40.getInetAddress();
    org.jsecurity.authc.AuthenticationInfo var43 = var35.beforeAllAttempts((java.util.Collection)var39, (org.jsecurity.authc.AuthenticationToken)var40);
    org.jsecurity.session.UnknownSessionException var48 = new org.jsecurity.session.UnknownSessionException("dd\uFFFD", (java.io.Serializable)100.0f);
    org.jsecurity.subject.SubjectException var49 = new org.jsecurity.subject.SubjectException("dd\uFFFD", (java.lang.Throwable)var48);
    org.jsecurity.io.SerializationException var50 = new org.jsecurity.io.SerializationException("", (java.lang.Throwable)var49);
    java.lang.Throwable[] var51 = var49.getSuppressed();
    java.util.Set var52 = org.jsecurity.util.CollectionUtils.asSet((java.lang.Object[])var51);
    org.jsecurity.authc.SimpleAccount var53 = new org.jsecurity.authc.SimpleAccount((org.jsecurity.subject.PrincipalCollection)var34, (java.lang.Object)var39, var52);
    java.io.InputStream var55 = org.jsecurity.util.ClassUtils.getResourceAsStream("");
    java.lang.Object[] var56 = new java.lang.Object[] { var55};
    java.util.List var57 = org.jsecurity.util.CollectionUtils.asList(var56);
    org.jsecurity.authc.pam.ModularRealmAuthenticator var58 = new org.jsecurity.authc.pam.ModularRealmAuthenticator(var57);
    org.jsecurity.subject.SimplePrincipalCollection var60 = new org.jsecurity.subject.SimplePrincipalCollection((java.util.Collection)var57, "org.jsecurity.authz.UnauthorizedException: org.jsecurity.session.ExpiredSessionException: ");
    org.jsecurity.io.ResourceException var64 = new org.jsecurity.io.ResourceException("hi!");
    org.jsecurity.authc.UnknownAccountException var65 = new org.jsecurity.authc.UnknownAccountException((java.lang.Throwable)var64);
    org.jsecurity.session.StoppedSessionException var66 = new org.jsecurity.session.StoppedSessionException("dd\uFFFD", (java.io.Serializable)var64);
    org.jsecurity.session.UnknownSessionException var67 = new org.jsecurity.session.UnknownSessionException("org.jsecurity.authz.UnauthorizedException: org.jsecurity.session.ExpiredSessionException: ", (java.lang.Throwable)var64);
    boolean var68 = var60.equals((java.lang.Object)var64);
    var34.addAll((org.jsecurity.subject.PrincipalCollection)var60);
    org.jsecurity.session.UnknownSessionException var74 = new org.jsecurity.session.UnknownSessionException("dd\uFFFD", (java.io.Serializable)100.0f);
    org.jsecurity.subject.SubjectException var75 = new org.jsecurity.subject.SubjectException("dd\uFFFD", (java.lang.Throwable)var74);
    org.jsecurity.io.SerializationException var76 = new org.jsecurity.io.SerializationException("", (java.lang.Throwable)var75);
    java.lang.Throwable[] var77 = var75.getSuppressed();
    java.util.List var78 = org.jsecurity.util.CollectionUtils.asList((java.lang.Object[])var77);
    boolean var79 = var0.isPermittedAll((org.jsecurity.subject.PrincipalCollection)var34, (java.util.Collection)var78);
    org.jsecurity.subject.DelegatingSubject var80 = new org.jsecurity.subject.DelegatingSubject((org.jsecurity.mgt.SecurityManager)var0);
    var80.logout();
    java.lang.String[] var86 = org.jsecurity.util.StringUtils.split("org.jsecurity.config.ConfigurationException: dd\uFFFD", '4', '4', '4');
    boolean[] var87 = var80.isPermitted(var86);
    org.jsecurity.mgt.SecurityManager var88 = var80.getSecurityManager();
    java.net.InetAddress var89 = var80.getInetAddress();
    org.jsecurity.subject.PrincipalCollection var90 = var80.getPrincipals();
    java.lang.String[] var93 = org.jsecurity.util.StringUtils.tokenizeToStringArray("c100a0dc-e80a-4d5c-baea-453d05633754", "75c873c8-19df-476a-b82e-72a1eddf7e4b");
    boolean var94 = var80.isPermittedAll(var93);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var2);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var3);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var4);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var12);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var13);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var14);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var26);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var38);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var39);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var41);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var42);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var43);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var51);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var52);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var55);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var56);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var57);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var68 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var77);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var78);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var79 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var86);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var87);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var88);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var89);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var90);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var93);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var94 == false);

  }

  public void test155() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest7.test155");


    org.jsecurity.authc.ExpiredCredentialsException var4 = new org.jsecurity.authc.ExpiredCredentialsException();
    org.jsecurity.session.ExpiredSessionException var5 = new org.jsecurity.session.ExpiredSessionException("", (java.lang.Throwable)var4);
    org.jsecurity.session.StoppedSessionException var6 = new org.jsecurity.session.StoppedSessionException("org.jsecurity.config.ConfigurationException: dd\uFFFD", (java.lang.Throwable)var5);
    org.jsecurity.authc.UnknownAccountException var7 = new org.jsecurity.authc.UnknownAccountException("c7e94096-08e7-4341-a1f5-4aa0b248f022", (java.lang.Throwable)var5);
    org.jsecurity.util.UnknownClassException var8 = new org.jsecurity.util.UnknownClassException((java.lang.Throwable)var7);
    org.jsecurity.io.ResourceException var9 = new org.jsecurity.io.ResourceException("\uFFFD\uFFFD#\uFFFD\uFFFD.\uFFFD+r\uFFFD\u6959(\uFFFD\uFFFDW\uFFFDq\uFFFD.\uFFFD\uFFFD^jY\uFFFDj\uFFFDa\uFFFD\uFFFD\uFFFDj\u0628\u0000", (java.lang.Throwable)var8);

  }

  public void test156() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest7.test156");


    org.jsecurity.session.mgt.SimpleSession var0 = new org.jsecurity.session.mgt.SimpleSession();
    var0.touch();
    org.jsecurity.authz.UnauthenticatedException var4 = new org.jsecurity.authz.UnauthenticatedException();
    org.jsecurity.config.UnresolveableReferenceException var5 = new org.jsecurity.config.UnresolveableReferenceException("", (java.lang.Throwable)var4);
    org.jsecurity.cache.CacheException var6 = new org.jsecurity.cache.CacheException("org.jsecurity.config.ConfigurationException: dd\uFFFD", (java.lang.Throwable)var4);
    java.lang.Object var7 = var0.removeAttribute((java.lang.Object)var6);
    org.jsecurity.session.mgt.eis.MemorySessionDAO var8 = new org.jsecurity.session.mgt.eis.MemorySessionDAO();
    org.jsecurity.cache.Cache var9 = var8.getActiveSessionsCache();
    org.jsecurity.cache.CacheManager var10 = var8.getCacheManager();
    org.jsecurity.cache.HashtableCacheManager var11 = new org.jsecurity.cache.HashtableCacheManager();
    org.jsecurity.cache.Cache var13 = var11.getCache("\u0000\u0000");
    var8.setActiveSessionsCache(var13);
    java.io.InputStream var16 = org.jsecurity.util.ClassUtils.getResourceAsStream("");
    java.lang.Object[] var17 = new java.lang.Object[] { var16};
    java.util.List var18 = org.jsecurity.util.CollectionUtils.asList(var17);
    org.jsecurity.authc.pam.ModularRealmAuthenticator var19 = new org.jsecurity.authc.pam.ModularRealmAuthenticator(var18);
    org.jsecurity.authc.pam.AllSuccessfulModularAuthenticationStrategy var20 = new org.jsecurity.authc.pam.AllSuccessfulModularAuthenticationStrategy();
    var19.setModularAuthenticationStrategy((org.jsecurity.authc.pam.ModularAuthenticationStrategy)var20);
    org.jsecurity.authz.SimpleAuthorizationInfo var22 = new org.jsecurity.authz.SimpleAuthorizationInfo();
    var22.addStringPermission("hi!");
    java.io.InputStream var26 = org.jsecurity.util.ClassUtils.getResourceAsStream("");
    java.lang.Object[] var27 = new java.lang.Object[] { var26};
    java.util.List var28 = org.jsecurity.util.CollectionUtils.asList(var27);
    var22.addRoles((java.util.Collection)var28);
    var19.setAuthenticationListeners((java.util.Collection)var28);
    org.jsecurity.realm.activedirectory.ActiveDirectoryRealm var31 = new org.jsecurity.realm.activedirectory.ActiveDirectoryRealm();
    var31.setPrincipalSuffix("");
    var19.setRealm((org.jsecurity.realm.Realm)var31);
    org.jsecurity.cache.HashtableCacheManager var35 = new org.jsecurity.cache.HashtableCacheManager();
    org.jsecurity.cache.Cache var37 = var35.getCache("\u0000\u0000");
    var31.setAuthorizationCache(var37);
    var8.setActiveSessionsCache(var37);
    org.jsecurity.session.mgt.SimpleSession var40 = new org.jsecurity.session.mgt.SimpleSession();
    java.io.Serializable var41 = var8.create((org.jsecurity.session.Session)var40);
    java.io.Serializable var42 = var40.getId();
    org.jsecurity.session.mgt.SimpleSession var43 = new org.jsecurity.session.mgt.SimpleSession();
    var43.touch();
    var43.validate();
    org.jsecurity.session.mgt.SimpleSession var46 = new org.jsecurity.session.mgt.SimpleSession();
    var46.setTimeout((-1L));
    org.jsecurity.session.mgt.SimpleSession var49 = new org.jsecurity.session.mgt.SimpleSession();
    java.util.Date var50 = var49.getLastAccessTime();
    var46.setLastAccessTime(var50);
    org.jsecurity.session.mgt.SimpleSession var52 = new org.jsecurity.session.mgt.SimpleSession();
    java.util.Date var53 = var52.getLastAccessTime();
    var46.setStopTimestamp(var53);
    var43.setLastAccessTime(var53);
    var40.setStartTimestamp(var53);
    var0.setStartTimestamp(var53);
    var0.validate();
    java.util.Date var59 = var0.getStopTimestamp();
    org.jsecurity.session.mgt.ExecutorServiceSessionValidationScheduler var60 = new org.jsecurity.session.mgt.ExecutorServiceSessionValidationScheduler();
    var60.setInterval(1L);
    long var63 = var60.getInterval();
    java.lang.Object var64 = var0.getAttribute((java.lang.Object)var63);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var7);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var9);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var10);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var13);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var16);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var17);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var18);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var26);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var27);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var28);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var37);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var41 + "' != '" + "3364b248-6862-4aeb-9dbb-1f369e6ac37d"+ "'", var41.equals("3364b248-6862-4aeb-9dbb-1f369e6ac37d"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var42 + "' != '" + "3364b248-6862-4aeb-9dbb-1f369e6ac37d"+ "'", var42.equals("3364b248-6862-4aeb-9dbb-1f369e6ac37d"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var50);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var53);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var59);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var63 == 1L);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var64);

  }

  public void test157() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest7.test157");


    org.jsecurity.realm.activedirectory.ActiveDirectoryRealm var0 = new org.jsecurity.realm.activedirectory.ActiveDirectoryRealm();
    var0.init();
    var0.setSystemPassword("dd\uFFFD");
    org.jsecurity.cache.Cache var4 = var0.getAuthorizationCache();
    var0.setSearchBase("a2b823b1e72eae2b727289df8a00a89df8a0bab6ad8a89c4c5c7a9b62a270000");
    var0.setSystemPassword("\uFFFD\uFFFD\uFFFDq\uFFFD\uFFFD\uFFFD\u01BC\uFFFDg]\uFFFD\uFFFD\u001Fu\uFFFD<\uFFFD\uFFFDi\uFFFD\uFFFD");
    org.jsecurity.authz.permission.PermissionResolver var9 = var0.getPermissionResolver();
    org.jsecurity.realm.activedirectory.ActiveDirectoryRealm var10 = new org.jsecurity.realm.activedirectory.ActiveDirectoryRealm();
    org.jsecurity.authc.credential.Sha256CredentialsMatcher var11 = new org.jsecurity.authc.credential.Sha256CredentialsMatcher();
    var10.setCredentialsMatcher((org.jsecurity.authc.credential.CredentialsMatcher)var11);
    org.jsecurity.realm.activedirectory.ActiveDirectoryRealm var13 = new org.jsecurity.realm.activedirectory.ActiveDirectoryRealm();
    org.jsecurity.authc.credential.Sha256CredentialsMatcher var14 = new org.jsecurity.authc.credential.Sha256CredentialsMatcher();
    var13.setCredentialsMatcher((org.jsecurity.authc.credential.CredentialsMatcher)var14);
    java.lang.String var16 = var13.getAuthorizationCacheName();
    var13.setUrl("hi!");
    org.jsecurity.realm.ldap.DefaultLdapContextFactory var19 = new org.jsecurity.realm.ldap.DefaultLdapContextFactory();
    var13.setLdapContextFactory((org.jsecurity.realm.ldap.LdapContextFactory)var19);
    var19.setAuthentication("org.jsecurity.authz.UnauthorizedException: org.jsecurity.session.ExpiredSessionException: ");
    var10.setLdapContextFactory((org.jsecurity.realm.ldap.LdapContextFactory)var19);
    var19.setPrincipalSuffix("dd\uFFFD");
    var19.setReferral("ff9f2014-649d-414b-8132-f4962e7ca4d7");
    var19.setAuthentication("e23cc964-5ec8-4116-95c0-aa96771b692b");
    var0.setLdapContextFactory((org.jsecurity.realm.ldap.LdapContextFactory)var19);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var4);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var9);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var16);

  }

  public void test158() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest7.test158");


    org.jsecurity.crypto.BlowfishCipher var0 = new org.jsecurity.crypto.BlowfishCipher();
    byte[] var4 = new byte[] { (byte)100, (byte)100, (byte)(-1)};
    java.lang.String var5 = org.jsecurity.codec.CodecSupport.toString(var4);
    byte[] var7 = org.jsecurity.codec.Base64.decode("hi!");
    byte[] var8 = var0.encrypt(var4, var7);
    java.security.Key var9 = var0.getKey();
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var4);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var5 + "' != '" + "dd\uFFFD"+ "'", var5.equals("dd\uFFFD"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var7);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var8);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var9);

  }

  public void test159() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest7.test159");


    java.lang.String[] var3 = org.jsecurity.util.StringUtils.tokenizeToStringArray("089f152f-387d-4d70-9992-addb94aecba0", "f7b61ae8-4a38-47b6-912d-22bfe8ae3866");
    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      java.lang.Object var4 = org.jsecurity.util.ClassUtils.newInstance("4a0e5e90-249b-4eb3-a134-0b53851d6caf", (java.lang.Object[])var3);
      fail("Expected exception of type org.jsecurity.util.UnknownClassException");
    } catch (org.jsecurity.util.UnknownClassException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var3);

  }

  public void test160() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest7.test160");


    org.jsecurity.JSecurityException var1 = new org.jsecurity.JSecurityException("3404264c-53a7-4bda-8312-f6866b44ed78");

  }

  public void test161() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest7.test161");


    org.jsecurity.authz.SimpleRole var0 = new org.jsecurity.authz.SimpleRole();
    org.jsecurity.authz.SimpleAuthorizationInfo var1 = new org.jsecurity.authz.SimpleAuthorizationInfo();
    var1.addRole("a2b823b1e72eae2b727289df8a00a89df8a0bab6ad8a89c4c5c7a9b62a270000");
    org.jsecurity.session.UnknownSessionException var8 = new org.jsecurity.session.UnknownSessionException("dd\uFFFD", (java.io.Serializable)100.0f);
    org.jsecurity.subject.SubjectException var9 = new org.jsecurity.subject.SubjectException("dd\uFFFD", (java.lang.Throwable)var8);
    org.jsecurity.io.SerializationException var10 = new org.jsecurity.io.SerializationException("", (java.lang.Throwable)var9);
    java.lang.Throwable[] var11 = var9.getSuppressed();
    java.util.Set var12 = org.jsecurity.util.CollectionUtils.asSet((java.lang.Object[])var11);
    var1.addRoles((java.util.Collection)var12);
    var0.addAll((java.util.Collection)var12);
    java.lang.String var15 = var0.getName();
    var0.setName("");
    org.jsecurity.codec.CodecException var20 = new org.jsecurity.codec.CodecException("dd\uFFFD");
    org.jsecurity.authc.ConcurrentAccessException var21 = new org.jsecurity.authc.ConcurrentAccessException("org.jsecurity.authz.UnauthorizedException: org.jsecurity.session.ExpiredSessionException: ", (java.lang.Throwable)var20);
    org.jsecurity.subject.SimplePrincipalCollection var23 = new org.jsecurity.subject.SimplePrincipalCollection((java.lang.Object)var20, "");
    java.io.InputStream var25 = org.jsecurity.util.ClassUtils.getResourceAsStream("");
    java.lang.Object[] var26 = new java.lang.Object[] { var25};
    java.util.List var27 = org.jsecurity.util.CollectionUtils.asList(var26);
    org.jsecurity.authc.pam.ModularRealmAuthenticator var28 = new org.jsecurity.authc.pam.ModularRealmAuthenticator(var27);
    var23.addAll((java.util.Collection)var27, "\u0000\u0000");
    java.io.InputStream var32 = org.jsecurity.util.ClassUtils.getResourceAsStream("");
    java.lang.Object[] var33 = new java.lang.Object[] { var32};
    java.util.List var34 = org.jsecurity.util.CollectionUtils.asList(var33);
    org.jsecurity.authc.pam.ModularRealmAuthenticator var35 = new org.jsecurity.authc.pam.ModularRealmAuthenticator(var34);
    var23.addAll((java.util.Collection)var34, "\u0000\u0000");
    var0.addAll((java.util.Collection)var34);
    org.jsecurity.authz.SimpleAuthorizationInfo var39 = new org.jsecurity.authz.SimpleAuthorizationInfo();
    org.jsecurity.session.UnknownSessionException var44 = new org.jsecurity.session.UnknownSessionException("dd\uFFFD", (java.io.Serializable)100.0f);
    org.jsecurity.subject.SubjectException var45 = new org.jsecurity.subject.SubjectException("dd\uFFFD", (java.lang.Throwable)var44);
    org.jsecurity.io.SerializationException var46 = new org.jsecurity.io.SerializationException("", (java.lang.Throwable)var45);
    java.lang.Throwable[] var47 = var45.getSuppressed();
    java.util.Set var48 = org.jsecurity.util.CollectionUtils.asSet((java.lang.Object[])var47);
    var39.setStringPermissions(var48);
    org.jsecurity.authz.permission.WildcardPermissionResolver var50 = new org.jsecurity.authz.permission.WildcardPermissionResolver();
    org.jsecurity.authz.Permission var52 = var50.resolvePermission("hi!");
    org.jsecurity.authz.Permission var54 = var50.resolvePermission("hi!");
    var39.addObjectPermission(var54);
    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      boolean var56 = var0.isPermitted(var54);
      fail("Expected exception of type java.lang.ClassCastException");
    } catch (java.lang.ClassCastException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var11);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var12);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var15);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var25);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var26);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var27);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var32);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var33);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var34);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var47);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var48);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var52);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var54);

  }

  public void test162() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest7.test162");


    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      java.lang.String[] var1 = org.jsecurity.util.StringUtils.splitKeyValue("org.jsecurity.realm.text.PropertiesRealm_1748");
      fail("Expected exception of type java.text.ParseException");
    } catch (java.text.ParseException e) {
      // Expected exception.
    }

  }

  public void test163() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest7.test163");


    org.jsecurity.realm.text.PropertiesRealm var0 = new org.jsecurity.realm.text.PropertiesRealm();
    org.jsecurity.realm.activedirectory.ActiveDirectoryRealm var1 = new org.jsecurity.realm.activedirectory.ActiveDirectoryRealm();
    org.jsecurity.authc.credential.Sha256CredentialsMatcher var2 = new org.jsecurity.authc.credential.Sha256CredentialsMatcher();
    var1.setCredentialsMatcher((org.jsecurity.authc.credential.CredentialsMatcher)var2);
    java.lang.String var4 = var1.getAuthorizationCacheName();
    var1.setPrincipalSuffix("org.jsecurity.config.ConfigurationException: dd\uFFFD");
    org.jsecurity.authz.permission.PermissionResolver var7 = var1.getPermissionResolver();
    var0.setPermissionResolver(var7);
    var0.destroy();
    java.lang.String var10 = var0.getRoleDefinitions();
    var0.setUseXmlFormat(false);
    org.jsecurity.realm.activedirectory.ActiveDirectoryRealm var13 = new org.jsecurity.realm.activedirectory.ActiveDirectoryRealm();
    org.jsecurity.authc.credential.Sha256CredentialsMatcher var14 = new org.jsecurity.authc.credential.Sha256CredentialsMatcher();
    var13.setCredentialsMatcher((org.jsecurity.authc.credential.CredentialsMatcher)var14);
    java.lang.String var16 = var13.getAuthorizationCacheName();
    var13.setPrincipalSuffix("org.jsecurity.config.ConfigurationException: dd\uFFFD");
    org.jsecurity.realm.text.TextConfigurationRealm var19 = new org.jsecurity.realm.text.TextConfigurationRealm();
    java.io.InputStream var21 = org.jsecurity.util.ClassUtils.getResourceAsStream("");
    java.lang.Object[] var22 = new java.lang.Object[] { var21};
    java.util.List var23 = org.jsecurity.util.CollectionUtils.asList(var22);
    org.jsecurity.authc.pam.ModularRealmAuthenticator var24 = new org.jsecurity.authc.pam.ModularRealmAuthenticator(var23);
    org.jsecurity.subject.SimplePrincipalCollection var26 = new org.jsecurity.subject.SimplePrincipalCollection((java.util.Collection)var23, "org.jsecurity.authz.UnauthorizedException: org.jsecurity.session.ExpiredSessionException: ");
    org.jsecurity.session.UnknownSessionException var31 = new org.jsecurity.session.UnknownSessionException("dd\uFFFD", (java.io.Serializable)100.0f);
    org.jsecurity.session.SessionException var33 = new org.jsecurity.session.SessionException("dd\uFFFD", (java.lang.Throwable)var31, (java.io.Serializable)0);
    org.jsecurity.session.SessionException var34 = new org.jsecurity.session.SessionException("dd\uFFFD", (java.lang.Throwable)var31);
    var26.add((java.lang.Object)var34, "org.jsecurity.config.ConfigurationException: dd\uFFFD");
    var19.onLogout((org.jsecurity.subject.PrincipalCollection)var26);
    var13.onLogout((org.jsecurity.subject.PrincipalCollection)var26);
    org.jsecurity.codec.CodecException var41 = new org.jsecurity.codec.CodecException("dd\uFFFD");
    org.jsecurity.authc.ConcurrentAccessException var42 = new org.jsecurity.authc.ConcurrentAccessException("org.jsecurity.authz.UnauthorizedException: org.jsecurity.session.ExpiredSessionException: ", (java.lang.Throwable)var41);
    org.jsecurity.subject.SimplePrincipalCollection var44 = new org.jsecurity.subject.SimplePrincipalCollection((java.lang.Object)var41, "");
    org.jsecurity.authc.pam.FirstSuccessfulAuthenticationStrategy var45 = new org.jsecurity.authc.pam.FirstSuccessfulAuthenticationStrategy();
    org.jsecurity.authz.UnauthorizedException var47 = new org.jsecurity.authz.UnauthorizedException("org.jsecurity.config.ConfigurationException: dd\uFFFD");
    java.lang.Throwable[] var48 = var47.getSuppressed();
    java.util.List var49 = org.jsecurity.util.CollectionUtils.asList((java.lang.Object[])var48);
    org.jsecurity.authc.UsernamePasswordToken var50 = new org.jsecurity.authc.UsernamePasswordToken();
    java.lang.String var51 = var50.getUsername();
    java.net.InetAddress var52 = var50.getInetAddress();
    org.jsecurity.authc.AuthenticationInfo var53 = var45.beforeAllAttempts((java.util.Collection)var49, (org.jsecurity.authc.AuthenticationToken)var50);
    org.jsecurity.session.UnknownSessionException var58 = new org.jsecurity.session.UnknownSessionException("dd\uFFFD", (java.io.Serializable)100.0f);
    org.jsecurity.subject.SubjectException var59 = new org.jsecurity.subject.SubjectException("dd\uFFFD", (java.lang.Throwable)var58);
    org.jsecurity.io.SerializationException var60 = new org.jsecurity.io.SerializationException("", (java.lang.Throwable)var59);
    java.lang.Throwable[] var61 = var59.getSuppressed();
    java.util.Set var62 = org.jsecurity.util.CollectionUtils.asSet((java.lang.Object[])var61);
    org.jsecurity.authc.SimpleAccount var63 = new org.jsecurity.authc.SimpleAccount((org.jsecurity.subject.PrincipalCollection)var44, (java.lang.Object)var49, var62);
    org.jsecurity.authz.SimpleAuthorizingAccount var64 = new org.jsecurity.authz.SimpleAuthorizingAccount((org.jsecurity.subject.PrincipalCollection)var26, (java.lang.Object)var63);
    org.jsecurity.authz.SimpleRole var65 = new org.jsecurity.authz.SimpleRole();
    org.jsecurity.authz.permission.WildcardPermission var68 = new org.jsecurity.authz.permission.WildcardPermission("hi!", false);
    boolean var69 = var65.isPermitted((org.jsecurity.authz.Permission)var68);
    java.io.InputStream var71 = org.jsecurity.util.ClassUtils.getResourceAsStream("");
    java.lang.Object[] var72 = new java.lang.Object[] { var71};
    java.util.List var73 = org.jsecurity.util.CollectionUtils.asList(var72);
    var65.addAll((java.util.Collection)var73);
    org.jsecurity.authc.pam.ModularRealmAuthenticator var75 = new org.jsecurity.authc.pam.ModularRealmAuthenticator(var73);
    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      boolean[] var76 = var0.isPermitted((org.jsecurity.subject.PrincipalCollection)var26, var73);
      fail("Expected exception of type java.util.NoSuchElementException");
    } catch (java.util.NoSuchElementException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var4);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var7);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var10);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var16);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var21);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var22);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var23);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var48);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var49);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var51);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var52);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var53);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var61);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var62);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var69 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var71);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var72);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var73);

  }

  public void test164() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest7.test164");


    org.jsecurity.authz.SimpleAuthorizationInfo var0 = new org.jsecurity.authz.SimpleAuthorizationInfo();
    java.util.Set var1 = var0.getStringPermissions();
    java.util.Set var2 = var0.getRoles();
    var0.addStringPermission("hi!");
    var0.addRole("83cca447-5224-48b6-9cbc-b8d76d507803");
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var1);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var2);

  }

  public void test165() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest7.test165");


    boolean var1 = org.jsecurity.util.StringUtils.hasLength("83cca447-5224-48b6-9cbc-b8d76d507803");
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var1 == true);

  }

  public void test166() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest7.test166");


    org.jsecurity.mgt.DefaultSecurityManager var0 = new org.jsecurity.mgt.DefaultSecurityManager();
    java.io.InputStream var2 = org.jsecurity.util.ClassUtils.getResourceAsStream("");
    java.lang.Object[] var3 = new java.lang.Object[] { var2};
    java.util.List var4 = org.jsecurity.util.CollectionUtils.asList(var3);
    org.jsecurity.authc.pam.ModularRealmAuthenticator var5 = new org.jsecurity.authc.pam.ModularRealmAuthenticator(var4);
    org.jsecurity.authc.pam.AllSuccessfulModularAuthenticationStrategy var6 = new org.jsecurity.authc.pam.AllSuccessfulModularAuthenticationStrategy();
    var5.setModularAuthenticationStrategy((org.jsecurity.authc.pam.ModularAuthenticationStrategy)var6);
    org.jsecurity.authz.SimpleAuthorizationInfo var8 = new org.jsecurity.authz.SimpleAuthorizationInfo();
    var8.addStringPermission("hi!");
    java.io.InputStream var12 = org.jsecurity.util.ClassUtils.getResourceAsStream("");
    java.lang.Object[] var13 = new java.lang.Object[] { var12};
    java.util.List var14 = org.jsecurity.util.CollectionUtils.asList(var13);
    var8.addRoles((java.util.Collection)var14);
    var5.setAuthenticationListeners((java.util.Collection)var14);
    var0.setSessionListeners((java.util.Collection)var14);
    org.jsecurity.realm.text.TextConfigurationRealm var18 = new org.jsecurity.realm.text.TextConfigurationRealm();
    java.io.InputStream var20 = org.jsecurity.util.ClassUtils.getResourceAsStream("");
    java.lang.Object[] var21 = new java.lang.Object[] { var20};
    java.util.List var22 = org.jsecurity.util.CollectionUtils.asList(var21);
    org.jsecurity.authc.pam.ModularRealmAuthenticator var23 = new org.jsecurity.authc.pam.ModularRealmAuthenticator(var22);
    org.jsecurity.subject.SimplePrincipalCollection var25 = new org.jsecurity.subject.SimplePrincipalCollection((java.util.Collection)var22, "org.jsecurity.authz.UnauthorizedException: org.jsecurity.session.ExpiredSessionException: ");
    org.jsecurity.session.UnknownSessionException var30 = new org.jsecurity.session.UnknownSessionException("dd\uFFFD", (java.io.Serializable)100.0f);
    org.jsecurity.session.SessionException var32 = new org.jsecurity.session.SessionException("dd\uFFFD", (java.lang.Throwable)var30, (java.io.Serializable)0);
    org.jsecurity.session.SessionException var33 = new org.jsecurity.session.SessionException("dd\uFFFD", (java.lang.Throwable)var30);
    var25.add((java.lang.Object)var33, "org.jsecurity.config.ConfigurationException: dd\uFFFD");
    var18.onLogout((org.jsecurity.subject.PrincipalCollection)var25);
    org.jsecurity.authc.pam.FirstSuccessfulAuthenticationStrategy var37 = new org.jsecurity.authc.pam.FirstSuccessfulAuthenticationStrategy();
    org.jsecurity.authz.UnauthorizedException var39 = new org.jsecurity.authz.UnauthorizedException("org.jsecurity.config.ConfigurationException: dd\uFFFD");
    java.lang.Throwable[] var40 = var39.getSuppressed();
    java.util.List var41 = org.jsecurity.util.CollectionUtils.asList((java.lang.Object[])var40);
    org.jsecurity.authc.UsernamePasswordToken var42 = new org.jsecurity.authc.UsernamePasswordToken();
    java.lang.String var43 = var42.getUsername();
    java.net.InetAddress var44 = var42.getInetAddress();
    org.jsecurity.authc.AuthenticationInfo var45 = var37.beforeAllAttempts((java.util.Collection)var41, (org.jsecurity.authc.AuthenticationToken)var42);
    boolean[] var46 = var0.hasRoles((org.jsecurity.subject.PrincipalCollection)var25, var41);
    org.jsecurity.codec.CodecException var49 = new org.jsecurity.codec.CodecException("dd\uFFFD");
    org.jsecurity.authc.ConcurrentAccessException var50 = new org.jsecurity.authc.ConcurrentAccessException("org.jsecurity.authz.UnauthorizedException: org.jsecurity.session.ExpiredSessionException: ", (java.lang.Throwable)var49);
    org.jsecurity.subject.SimplePrincipalCollection var52 = new org.jsecurity.subject.SimplePrincipalCollection((java.lang.Object)var49, "");
    java.io.InputStream var54 = org.jsecurity.util.ClassUtils.getResourceAsStream("");
    java.lang.Object[] var55 = new java.lang.Object[] { var54};
    java.util.List var56 = org.jsecurity.util.CollectionUtils.asList(var55);
    org.jsecurity.authc.pam.ModularRealmAuthenticator var57 = new org.jsecurity.authc.pam.ModularRealmAuthenticator(var56);
    var52.addAll((java.util.Collection)var56, "\u0000\u0000");
    var0.setSessionListeners((java.util.Collection)var56);
    org.jsecurity.session.mgt.DefaultSessionManager var61 = new org.jsecurity.session.mgt.DefaultSessionManager();
    org.jsecurity.mgt.DefaultSecurityManager var62 = new org.jsecurity.mgt.DefaultSecurityManager();
    org.jsecurity.authz.permission.WildcardPermissionResolver var63 = new org.jsecurity.authz.permission.WildcardPermissionResolver();
    var62.setPermissionResolver((org.jsecurity.authz.permission.PermissionResolver)var63);
    org.jsecurity.cache.CacheManager var65 = var62.getCacheManager();
    var61.setCacheManager(var65);
    org.jsecurity.session.mgt.SessionValidationScheduler var67 = var61.getSessionValidationScheduler();
    var0.setSessionManager((org.jsecurity.session.mgt.SessionManager)var61);
    var61.destroy();
    var61.setSessionValidationSchedulerEnabled(true);
    org.jsecurity.session.mgt.quartz.QuartzSessionValidationScheduler var72 = new org.jsecurity.session.mgt.quartz.QuartzSessionValidationScheduler((org.jsecurity.session.mgt.ValidatingSessionManager)var61);
    var61.setSessionValidationInterval(10L);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var2);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var3);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var4);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var12);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var13);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var14);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var20);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var21);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var22);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var40);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var41);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var43);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var44);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var45);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var46);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var54);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var55);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var56);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var65);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var67);

  }

  public void test167() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest7.test167");


    org.jsecurity.io.ResourceException var3 = new org.jsecurity.io.ResourceException("hi!");
    org.jsecurity.codec.CodecException var4 = new org.jsecurity.codec.CodecException((java.lang.Throwable)var3);
    org.jsecurity.JSecurityException var5 = new org.jsecurity.JSecurityException("a2b823b1e72eae2b727289df8a00a89df8a0bab6ad8a89c4c5c7a9b62a270000", (java.lang.Throwable)var3);
    org.jsecurity.session.UnknownSessionException var6 = new org.jsecurity.session.UnknownSessionException((java.lang.Throwable)var5);
    org.jsecurity.authc.IncorrectCredentialsException var7 = new org.jsecurity.authc.IncorrectCredentialsException((java.lang.Throwable)var5);
    org.jsecurity.authz.AuthorizationException var8 = new org.jsecurity.authz.AuthorizationException("\u0000\u0000\u0000", (java.lang.Throwable)var5);
    org.jsecurity.authc.AccountException var9 = new org.jsecurity.authc.AccountException((java.lang.Throwable)var8);
    org.jsecurity.authc.ExpiredCredentialsException var10 = new org.jsecurity.authc.ExpiredCredentialsException((java.lang.Throwable)var8);

  }

  public void test168() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest7.test168");


    org.jsecurity.io.SerializationException var2 = new org.jsecurity.io.SerializationException("b107504a-9dbb-4f22-a61f-4440c7af2158");
    org.jsecurity.authz.AuthorizationException var3 = new org.jsecurity.authz.AuthorizationException("30d2554b-f45e-455c-8f41-91504726bf54", (java.lang.Throwable)var2);

  }

  public void test169() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest7.test169");


    org.jsecurity.util.AntPathMatcher var0 = new org.jsecurity.util.AntPathMatcher();
    boolean var3 = var0.matchStart("org.jsecurity.authc.IncorrectCredentialsException: \u0000\u0000", "ZGT/");
    boolean var5 = var0.isPattern("ecd29e3a-c551-4fce-8683-2e49992d04b8");
    boolean var8 = var0.matchStart("b725e8cc-690c-495e-ac27-b1b425834793", "90538851-b0e4-449f-8dda-973ab1d52c9e");
    boolean var10 = var0.isPattern("b74f4674-5868-4e94-a7d5-832b6ef0fcdb");
    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      org.jsecurity.crypto.hash.Md5Hash var11 = new org.jsecurity.crypto.hash.Md5Hash((java.lang.Object)var10);
      fail("Expected exception of type org.jsecurity.codec.CodecException");
    } catch (org.jsecurity.codec.CodecException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var3 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var5 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var8 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var10 == false);

  }

  public void test170() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest7.test170");


    org.jsecurity.session.mgt.eis.MemorySessionDAO var0 = new org.jsecurity.session.mgt.eis.MemorySessionDAO();
    org.jsecurity.cache.Cache var1 = var0.getActiveSessionsCache();
    var0.setActiveSessionsCacheName("dd\uFFFD");
    java.util.Collection var4 = var0.getActiveSessions();
    java.lang.String var5 = var0.getActiveSessionsCacheName();
    org.jsecurity.session.mgt.SimpleSession var6 = new org.jsecurity.session.mgt.SimpleSession();
    var6.touch();
    var6.validate();
    java.io.Serializable var9 = var0.create((org.jsecurity.session.Session)var6);
    long var10 = var6.getTimeout();
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var1);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var4);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var5 + "' != '" + "dd\uFFFD"+ "'", var5.equals("dd\uFFFD"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var9 + "' != '" + "9656bb8e-2aca-4115-9422-090497c1e6af"+ "'", var9.equals("9656bb8e-2aca-4115-9422-090497c1e6af"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var10 == 1800000L);

  }

  public void test171() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest7.test171");


    java.io.InputStream var1 = org.jsecurity.util.ClassUtils.getResourceAsStream("");
    java.lang.Object[] var2 = new java.lang.Object[] { var1};
    java.util.List var3 = org.jsecurity.util.CollectionUtils.asList(var2);
    org.jsecurity.authc.pam.ModularRealmAuthenticator var4 = new org.jsecurity.authc.pam.ModularRealmAuthenticator(var3);
    org.jsecurity.realm.text.TextConfigurationRealm var5 = new org.jsecurity.realm.text.TextConfigurationRealm();
    java.io.InputStream var7 = org.jsecurity.util.ClassUtils.getResourceAsStream("");
    java.lang.Object[] var8 = new java.lang.Object[] { var7};
    java.util.List var9 = org.jsecurity.util.CollectionUtils.asList(var8);
    org.jsecurity.authc.pam.ModularRealmAuthenticator var10 = new org.jsecurity.authc.pam.ModularRealmAuthenticator(var9);
    org.jsecurity.subject.SimplePrincipalCollection var12 = new org.jsecurity.subject.SimplePrincipalCollection((java.util.Collection)var9, "org.jsecurity.authz.UnauthorizedException: org.jsecurity.session.ExpiredSessionException: ");
    org.jsecurity.session.UnknownSessionException var17 = new org.jsecurity.session.UnknownSessionException("dd\uFFFD", (java.io.Serializable)100.0f);
    org.jsecurity.session.SessionException var19 = new org.jsecurity.session.SessionException("dd\uFFFD", (java.lang.Throwable)var17, (java.io.Serializable)0);
    org.jsecurity.session.SessionException var20 = new org.jsecurity.session.SessionException("dd\uFFFD", (java.lang.Throwable)var17);
    var12.add((java.lang.Object)var20, "org.jsecurity.config.ConfigurationException: dd\uFFFD");
    var5.onLogout((org.jsecurity.subject.PrincipalCollection)var12);
    org.jsecurity.cache.HashtableCacheManager var24 = new org.jsecurity.cache.HashtableCacheManager();
    org.jsecurity.cache.Cache var26 = var24.getCache("\u0000\u0000");
    var5.setAuthorizationCache(var26);
    org.jsecurity.codec.CodecException var30 = new org.jsecurity.codec.CodecException("dd\uFFFD");
    org.jsecurity.authc.ConcurrentAccessException var31 = new org.jsecurity.authc.ConcurrentAccessException("org.jsecurity.authz.UnauthorizedException: org.jsecurity.session.ExpiredSessionException: ", (java.lang.Throwable)var30);
    org.jsecurity.subject.SimplePrincipalCollection var33 = new org.jsecurity.subject.SimplePrincipalCollection((java.lang.Object)var30, "");
    var5.onLogout((org.jsecurity.subject.PrincipalCollection)var33);
    var4.setRealm((org.jsecurity.realm.Realm)var5);
    java.io.InputStream var37 = org.jsecurity.util.ClassUtils.getResourceAsStream("");
    java.lang.Object[] var38 = new java.lang.Object[] { var37};
    java.util.List var39 = org.jsecurity.util.CollectionUtils.asList(var38);
    org.jsecurity.authc.pam.ModularRealmAuthenticator var40 = new org.jsecurity.authc.pam.ModularRealmAuthenticator(var39);
    org.jsecurity.authc.pam.AllSuccessfulModularAuthenticationStrategy var41 = new org.jsecurity.authc.pam.AllSuccessfulModularAuthenticationStrategy();
    var40.setModularAuthenticationStrategy((org.jsecurity.authc.pam.ModularAuthenticationStrategy)var41);
    org.jsecurity.authz.SimpleAuthorizationInfo var43 = new org.jsecurity.authz.SimpleAuthorizationInfo();
    var43.addStringPermission("hi!");
    java.io.InputStream var47 = org.jsecurity.util.ClassUtils.getResourceAsStream("");
    java.lang.Object[] var48 = new java.lang.Object[] { var47};
    java.util.List var49 = org.jsecurity.util.CollectionUtils.asList(var48);
    var43.addRoles((java.util.Collection)var49);
    var40.setAuthenticationListeners((java.util.Collection)var49);
    org.jsecurity.realm.activedirectory.ActiveDirectoryRealm var52 = new org.jsecurity.realm.activedirectory.ActiveDirectoryRealm();
    var52.setPrincipalSuffix("");
    var40.setRealm((org.jsecurity.realm.Realm)var52);
    var4.setRealm((org.jsecurity.realm.Realm)var52);
    org.jsecurity.authc.pam.ModularRealmAuthenticator var57 = new org.jsecurity.authc.pam.ModularRealmAuthenticator((org.jsecurity.realm.Realm)var52);
    org.jsecurity.mgt.DefaultSecurityManager var58 = new org.jsecurity.mgt.DefaultSecurityManager((org.jsecurity.realm.Realm)var52);
    org.jsecurity.subject.RememberMeManager var59 = var58.getRememberMeManager();
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var1);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var2);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var3);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var7);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var8);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var9);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var26);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var37);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var38);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var39);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var47);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var48);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var49);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var59);

  }

  public void test172() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest7.test172");


    org.jsecurity.crypto.BlowfishCipher var0 = new org.jsecurity.crypto.BlowfishCipher();
    java.security.Key var1 = var0.getKey();
    java.security.Key var2 = var0.getKey();
    java.security.Key var3 = var0.getKey();
    java.security.Key var4 = var0.getKey();
    org.jsecurity.crypto.BlowfishCipher var5 = new org.jsecurity.crypto.BlowfishCipher();
    java.security.Key var6 = var5.getKey();
    java.security.Key var7 = var5.getKey();
    java.security.Key var8 = var5.getKey();
    java.security.Key var9 = var5.getKey();
    java.security.Key var10 = var5.getKey();
    var0.setKey(var10);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var1);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var2);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var3);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var4);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var6);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var7);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var8);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var9);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var10);

  }

  public void test173() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest7.test173");


    org.jsecurity.mgt.DefaultSecurityManager var0 = new org.jsecurity.mgt.DefaultSecurityManager();
    org.jsecurity.authc.pam.AllSuccessfulModularAuthenticationStrategy var1 = new org.jsecurity.authc.pam.AllSuccessfulModularAuthenticationStrategy();
    org.jsecurity.authc.pam.AllSuccessfulModularAuthenticationStrategy var2 = new org.jsecurity.authc.pam.AllSuccessfulModularAuthenticationStrategy();
    char[] var4 = new char[] { };
    org.jsecurity.authc.UsernamePasswordToken var6 = new org.jsecurity.authc.UsernamePasswordToken("hi!", var4, true);
    org.jsecurity.authc.SimpleAccount var7 = new org.jsecurity.authc.SimpleAccount();
    var7.setCredentialsExpired(false);
    boolean var10 = var7.isLocked();
    org.jsecurity.authc.AuthenticationInfo var11 = var2.afterAllAttempts((org.jsecurity.authc.AuthenticationToken)var6, (org.jsecurity.authc.AuthenticationInfo)var7);
    char[] var15 = new char[] { '4', '#'};
    org.jsecurity.authc.UsernamePasswordToken var16 = new org.jsecurity.authc.UsernamePasswordToken("\u0000\u0000", var15);
    org.jsecurity.authc.SimpleAccount var17 = new org.jsecurity.authc.SimpleAccount();
    var17.setCredentialsExpired(false);
    var17.setCredentialsExpired(false);
    boolean var22 = var17.isCredentialsExpired();
    org.jsecurity.authc.AuthenticationInfo var23 = var2.afterAllAttempts((org.jsecurity.authc.AuthenticationToken)var16, (org.jsecurity.authc.AuthenticationInfo)var17);
    org.jsecurity.authz.UnauthenticatedException var27 = new org.jsecurity.authz.UnauthenticatedException();
    org.jsecurity.config.UnresolveableReferenceException var28 = new org.jsecurity.config.UnresolveableReferenceException("", (java.lang.Throwable)var27);
    org.jsecurity.cache.CacheException var29 = new org.jsecurity.cache.CacheException("org.jsecurity.config.ConfigurationException: dd\uFFFD", (java.lang.Throwable)var27);
    org.jsecurity.authc.SimpleAuthenticationInfo var31 = new org.jsecurity.authc.SimpleAuthenticationInfo((java.lang.Object)"org.jsecurity.config.ConfigurationException: dd\uFFFD", (java.lang.Object)var29, "a2b823b1e72eae2b727289df8a00a89df8a0bab6ad8a89c4c5c7a9b62a270000");
    org.jsecurity.subject.PrincipalCollection var32 = var31.getPrincipals();
    org.jsecurity.authc.AuthenticationInfo var33 = var1.afterAllAttempts((org.jsecurity.authc.AuthenticationToken)var16, (org.jsecurity.authc.AuthenticationInfo)var31);
    var0.setModularAuthenticationStrategy((org.jsecurity.authc.pam.ModularAuthenticationStrategy)var1);
    org.jsecurity.subject.RememberMeManager var35 = var0.getRememberMeManager();
    org.jsecurity.authc.pam.ModularRealmAuthenticator var36 = new org.jsecurity.authc.pam.ModularRealmAuthenticator();
    var0.setAuthenticator((org.jsecurity.authc.Authenticator)var36);
    org.jsecurity.codec.CodecException var40 = new org.jsecurity.codec.CodecException("dd\uFFFD");
    org.jsecurity.authc.ConcurrentAccessException var41 = new org.jsecurity.authc.ConcurrentAccessException("org.jsecurity.authz.UnauthorizedException: org.jsecurity.session.ExpiredSessionException: ", (java.lang.Throwable)var40);
    org.jsecurity.subject.SimplePrincipalCollection var43 = new org.jsecurity.subject.SimplePrincipalCollection((java.lang.Object)var40, "");
    java.io.InputStream var45 = org.jsecurity.util.ClassUtils.getResourceAsStream("");
    java.lang.Object[] var46 = new java.lang.Object[] { var45};
    java.util.List var47 = org.jsecurity.util.CollectionUtils.asList(var46);
    org.jsecurity.authc.pam.ModularRealmAuthenticator var48 = new org.jsecurity.authc.pam.ModularRealmAuthenticator(var47);
    var43.addAll((java.util.Collection)var47, "\u0000\u0000");
    org.jsecurity.authc.pam.FirstSuccessfulAuthenticationStrategy var51 = new org.jsecurity.authc.pam.FirstSuccessfulAuthenticationStrategy();
    org.jsecurity.authz.UnauthorizedException var53 = new org.jsecurity.authz.UnauthorizedException("org.jsecurity.config.ConfigurationException: dd\uFFFD");
    java.lang.Throwable[] var54 = var53.getSuppressed();
    java.util.List var55 = org.jsecurity.util.CollectionUtils.asList((java.lang.Object[])var54);
    org.jsecurity.authc.UsernamePasswordToken var56 = new org.jsecurity.authc.UsernamePasswordToken();
    java.lang.String var57 = var56.getUsername();
    java.net.InetAddress var58 = var56.getInetAddress();
    org.jsecurity.authc.AuthenticationInfo var59 = var51.beforeAllAttempts((java.util.Collection)var55, (org.jsecurity.authc.AuthenticationToken)var56);
    var0.checkPermissions((org.jsecurity.subject.PrincipalCollection)var43, (java.util.Collection)var55);
    org.jsecurity.authz.aop.RoleAnnotationMethodInterceptor var61 = new org.jsecurity.authz.aop.RoleAnnotationMethodInterceptor();
    org.jsecurity.aop.AnnotationHandler var62 = var61.getHandler();
    java.lang.Class var63 = var62.getAnnotationClass();
    java.lang.Object var64 = var43.oneByType(var63);
    java.util.Iterator var65 = var43.iterator();
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var4);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var10 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var11);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var15);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var22 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var23);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var32);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var33);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var35);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var45);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var46);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var47);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var54);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var55);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var57);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var58);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var59);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var62);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var63);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var64);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var65);

  }

  public void test174() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest7.test174");


    java.io.InputStream var1 = org.jsecurity.util.ClassUtils.getResourceAsStream("");
    java.lang.Object[] var2 = new java.lang.Object[] { var1};
    java.util.List var3 = org.jsecurity.util.CollectionUtils.asList(var2);
    org.jsecurity.authc.pam.ModularRealmAuthenticator var4 = new org.jsecurity.authc.pam.ModularRealmAuthenticator(var3);
    org.jsecurity.realm.text.TextConfigurationRealm var5 = new org.jsecurity.realm.text.TextConfigurationRealm();
    java.io.InputStream var7 = org.jsecurity.util.ClassUtils.getResourceAsStream("");
    java.lang.Object[] var8 = new java.lang.Object[] { var7};
    java.util.List var9 = org.jsecurity.util.CollectionUtils.asList(var8);
    org.jsecurity.authc.pam.ModularRealmAuthenticator var10 = new org.jsecurity.authc.pam.ModularRealmAuthenticator(var9);
    org.jsecurity.subject.SimplePrincipalCollection var12 = new org.jsecurity.subject.SimplePrincipalCollection((java.util.Collection)var9, "org.jsecurity.authz.UnauthorizedException: org.jsecurity.session.ExpiredSessionException: ");
    org.jsecurity.session.UnknownSessionException var17 = new org.jsecurity.session.UnknownSessionException("dd\uFFFD", (java.io.Serializable)100.0f);
    org.jsecurity.session.SessionException var19 = new org.jsecurity.session.SessionException("dd\uFFFD", (java.lang.Throwable)var17, (java.io.Serializable)0);
    org.jsecurity.session.SessionException var20 = new org.jsecurity.session.SessionException("dd\uFFFD", (java.lang.Throwable)var17);
    var12.add((java.lang.Object)var20, "org.jsecurity.config.ConfigurationException: dd\uFFFD");
    var5.onLogout((org.jsecurity.subject.PrincipalCollection)var12);
    org.jsecurity.cache.HashtableCacheManager var24 = new org.jsecurity.cache.HashtableCacheManager();
    org.jsecurity.cache.Cache var26 = var24.getCache("\u0000\u0000");
    var5.setAuthorizationCache(var26);
    org.jsecurity.codec.CodecException var30 = new org.jsecurity.codec.CodecException("dd\uFFFD");
    org.jsecurity.authc.ConcurrentAccessException var31 = new org.jsecurity.authc.ConcurrentAccessException("org.jsecurity.authz.UnauthorizedException: org.jsecurity.session.ExpiredSessionException: ", (java.lang.Throwable)var30);
    org.jsecurity.subject.SimplePrincipalCollection var33 = new org.jsecurity.subject.SimplePrincipalCollection((java.lang.Object)var30, "");
    var5.onLogout((org.jsecurity.subject.PrincipalCollection)var33);
    var4.setRealm((org.jsecurity.realm.Realm)var5);
    org.jsecurity.session.UnknownSessionException var40 = new org.jsecurity.session.UnknownSessionException("dd\uFFFD", (java.io.Serializable)100.0f);
    org.jsecurity.subject.SubjectException var41 = new org.jsecurity.subject.SubjectException("dd\uFFFD", (java.lang.Throwable)var40);
    org.jsecurity.io.SerializationException var42 = new org.jsecurity.io.SerializationException("", (java.lang.Throwable)var41);
    java.lang.Throwable[] var43 = var41.getSuppressed();
    java.util.List var44 = org.jsecurity.util.CollectionUtils.asList((java.lang.Object[])var43);
    org.jsecurity.authc.pam.ModularRealmAuthenticator var45 = new org.jsecurity.authc.pam.ModularRealmAuthenticator(var44);
    var4.setRealms((java.util.Collection)var44);
    java.lang.String[] var47 = org.jsecurity.util.StringUtils.toStringArray((java.util.Collection)var44);
    org.jsecurity.authz.ModularRealmAuthorizer var48 = new org.jsecurity.authz.ModularRealmAuthorizer((java.util.Collection)var44);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var1);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var2);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var3);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var7);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var8);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var9);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var26);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var43);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var44);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var47);

  }

  public void test175() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest7.test175");


    org.jsecurity.util.UnknownClassException var1 = new org.jsecurity.util.UnknownClassException("3900277b-9328-4900-8254-f97def7b63e8");
    org.jsecurity.session.UnknownSessionException var2 = new org.jsecurity.session.UnknownSessionException((java.io.Serializable)var1);

  }

  public void test176() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest7.test176");


    org.jsecurity.session.mgt.SimpleSession var0 = new org.jsecurity.session.mgt.SimpleSession();
    java.util.Date var1 = var0.getLastAccessTime();
    boolean var2 = var0.isValid();
    java.util.Date var3 = var0.getStopTimestamp();
    org.jsecurity.config.ReflectionBuilder var4 = new org.jsecurity.config.ReflectionBuilder();
    org.jsecurity.io.IniResource var5 = new org.jsecurity.io.IniResource();
    var5.setCharsetName("org.jsecurity.authz.UnauthorizedException: org.jsecurity.session.ExpiredSessionException: ");
    java.util.Map var8 = var5.getSections();
    java.util.Map var9 = var4.buildObjects(var8);
    org.jsecurity.config.ReflectionBuilder var10 = new org.jsecurity.config.ReflectionBuilder();
    org.jsecurity.io.IniResource var11 = new org.jsecurity.io.IniResource();
    var11.setCharsetName("org.jsecurity.authz.UnauthorizedException: org.jsecurity.session.ExpiredSessionException: ");
    java.util.Map var14 = var11.getSections();
    java.util.Map var15 = var10.buildObjects(var14);
    java.util.Map var16 = var4.buildObjects(var15);
    var0.setAttributes(var15);
    var0.setExpired(true);
    java.net.InetAddress var20 = var0.getHostAddress();
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var2 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var3);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var8);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var9);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var14);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var15);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var16);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var20);

  }

  public void test177() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest7.test177");


    org.jsecurity.session.mgt.DelegatingSession var0 = new org.jsecurity.session.mgt.DelegatingSession();
    org.jsecurity.session.mgt.SessionManager var1 = var0.getSessionManager();
    java.io.Serializable var2 = var0.getId();
    org.jsecurity.session.mgt.SessionManager var3 = var0.getSessionManager();
    java.io.Serializable var4 = var0.getId();
    org.jsecurity.session.mgt.SessionManager var5 = var0.getSessionManager();
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var1);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var2);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var3);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var4);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var5);

  }

  public void test178() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest7.test178");


    java.io.InputStream var1 = org.jsecurity.util.ClassUtils.getResourceAsStream("0b128fd4-ef6a-4375-b646-5f7d7b4bb97b");
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var1);

  }

  public void test179() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest7.test179");


    org.jsecurity.realm.activedirectory.ActiveDirectoryRealm var0 = new org.jsecurity.realm.activedirectory.ActiveDirectoryRealm();
    org.jsecurity.authc.credential.Sha256CredentialsMatcher var1 = new org.jsecurity.authc.credential.Sha256CredentialsMatcher();
    var0.setCredentialsMatcher((org.jsecurity.authc.credential.CredentialsMatcher)var1);
    org.jsecurity.realm.activedirectory.ActiveDirectoryRealm var3 = new org.jsecurity.realm.activedirectory.ActiveDirectoryRealm();
    org.jsecurity.authc.credential.Sha256CredentialsMatcher var4 = new org.jsecurity.authc.credential.Sha256CredentialsMatcher();
    var3.setCredentialsMatcher((org.jsecurity.authc.credential.CredentialsMatcher)var4);
    java.lang.String var6 = var3.getAuthorizationCacheName();
    var3.setUrl("hi!");
    org.jsecurity.realm.ldap.DefaultLdapContextFactory var9 = new org.jsecurity.realm.ldap.DefaultLdapContextFactory();
    var3.setLdapContextFactory((org.jsecurity.realm.ldap.LdapContextFactory)var9);
    var9.setAuthentication("org.jsecurity.authz.UnauthorizedException: org.jsecurity.session.ExpiredSessionException: ");
    var0.setLdapContextFactory((org.jsecurity.realm.ldap.LdapContextFactory)var9);
    var0.setPrincipalSuffix("783ccd31-48a8-42dd-890f-df885a7baaff");
    org.jsecurity.realm.activedirectory.ActiveDirectoryRealm var16 = new org.jsecurity.realm.activedirectory.ActiveDirectoryRealm();
    org.jsecurity.authc.credential.Sha256CredentialsMatcher var17 = new org.jsecurity.authc.credential.Sha256CredentialsMatcher();
    var16.setCredentialsMatcher((org.jsecurity.authc.credential.CredentialsMatcher)var17);
    java.lang.String var19 = var16.getAuthorizationCacheName();
    var16.setUrl("hi!");
    org.jsecurity.realm.ldap.DefaultLdapContextFactory var22 = new org.jsecurity.realm.ldap.DefaultLdapContextFactory();
    var16.setLdapContextFactory((org.jsecurity.realm.ldap.LdapContextFactory)var22);
    org.jsecurity.config.ReflectionBuilder var24 = new org.jsecurity.config.ReflectionBuilder();
    org.jsecurity.io.IniResource var25 = new org.jsecurity.io.IniResource();
    var25.setCharsetName("org.jsecurity.authz.UnauthorizedException: org.jsecurity.session.ExpiredSessionException: ");
    java.util.Map var28 = var25.getSections();
    java.util.Map var29 = var24.buildObjects(var28);
    org.jsecurity.config.ReflectionBuilder var30 = new org.jsecurity.config.ReflectionBuilder();
    org.jsecurity.io.IniResource var31 = new org.jsecurity.io.IniResource();
    var31.setCharsetName("org.jsecurity.authz.UnauthorizedException: org.jsecurity.session.ExpiredSessionException: ");
    java.util.Map var34 = var31.getSections();
    java.util.Map var35 = var30.buildObjects(var34);
    java.util.Map var36 = var24.buildObjects(var35);
    java.util.Map var37 = var24.getObjects();
    var22.setAdditionalEnvironment(var37);
    var0.setLdapContextFactory((org.jsecurity.realm.ldap.LdapContextFactory)var22);
    org.jsecurity.mgt.DefaultSecurityManager var40 = new org.jsecurity.mgt.DefaultSecurityManager((org.jsecurity.realm.Realm)var0);
    java.io.InputStream var42 = org.jsecurity.util.ClassUtils.getResourceAsStream("");
    java.lang.Object[] var43 = new java.lang.Object[] { var42};
    java.util.List var44 = org.jsecurity.util.CollectionUtils.asList(var43);
    org.jsecurity.authc.pam.ModularRealmAuthenticator var45 = new org.jsecurity.authc.pam.ModularRealmAuthenticator(var44);
    org.jsecurity.subject.SimplePrincipalCollection var47 = new org.jsecurity.subject.SimplePrincipalCollection((java.util.Collection)var44, "org.jsecurity.authz.UnauthorizedException: org.jsecurity.session.ExpiredSessionException: ");
    org.jsecurity.session.UnknownSessionException var52 = new org.jsecurity.session.UnknownSessionException("dd\uFFFD", (java.io.Serializable)100.0f);
    org.jsecurity.session.SessionException var54 = new org.jsecurity.session.SessionException("dd\uFFFD", (java.lang.Throwable)var52, (java.io.Serializable)0);
    org.jsecurity.session.SessionException var55 = new org.jsecurity.session.SessionException("dd\uFFFD", (java.lang.Throwable)var52);
    var47.add((java.lang.Object)var55, "org.jsecurity.config.ConfigurationException: dd\uFFFD");
    var40.logout((org.jsecurity.subject.PrincipalCollection)var47);
    org.jsecurity.subject.DelegatingSubject var59 = new org.jsecurity.subject.DelegatingSubject((org.jsecurity.mgt.SecurityManager)var40);
    java.util.Collection var60 = var40.getRealms();
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var6);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var19);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var28);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var29);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var34);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var35);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var36);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var37);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var42);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var43);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var44);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var60);

  }

  public void test180() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest7.test180");


    org.jsecurity.session.UnknownSessionException var3 = new org.jsecurity.session.UnknownSessionException("dd\uFFFD", (java.io.Serializable)100.0f);
    org.jsecurity.session.SessionException var5 = new org.jsecurity.session.SessionException("dd\uFFFD", (java.lang.Throwable)var3, (java.io.Serializable)0);
    org.jsecurity.authc.SimpleAuthenticationInfo var8 = new org.jsecurity.authc.SimpleAuthenticationInfo((java.lang.Object)0, (java.lang.Object)10, "hi!");
    java.lang.Object var9 = var8.getCredentials();
    java.lang.String var10 = var8.toString();
    org.jsecurity.realm.text.TextConfigurationRealm var11 = new org.jsecurity.realm.text.TextConfigurationRealm();
    java.io.InputStream var13 = org.jsecurity.util.ClassUtils.getResourceAsStream("");
    java.lang.Object[] var14 = new java.lang.Object[] { var13};
    java.util.List var15 = org.jsecurity.util.CollectionUtils.asList(var14);
    org.jsecurity.authc.pam.ModularRealmAuthenticator var16 = new org.jsecurity.authc.pam.ModularRealmAuthenticator(var15);
    org.jsecurity.subject.SimplePrincipalCollection var18 = new org.jsecurity.subject.SimplePrincipalCollection((java.util.Collection)var15, "org.jsecurity.authz.UnauthorizedException: org.jsecurity.session.ExpiredSessionException: ");
    org.jsecurity.session.UnknownSessionException var23 = new org.jsecurity.session.UnknownSessionException("dd\uFFFD", (java.io.Serializable)100.0f);
    org.jsecurity.session.SessionException var25 = new org.jsecurity.session.SessionException("dd\uFFFD", (java.lang.Throwable)var23, (java.io.Serializable)0);
    org.jsecurity.session.SessionException var26 = new org.jsecurity.session.SessionException("dd\uFFFD", (java.lang.Throwable)var23);
    var18.add((java.lang.Object)var26, "org.jsecurity.config.ConfigurationException: dd\uFFFD");
    var11.onLogout((org.jsecurity.subject.PrincipalCollection)var18);
    org.jsecurity.cache.HashtableCacheManager var30 = new org.jsecurity.cache.HashtableCacheManager();
    org.jsecurity.cache.Cache var32 = var30.getCache("\u0000\u0000");
    var11.setAuthorizationCache(var32);
    org.jsecurity.codec.CodecException var36 = new org.jsecurity.codec.CodecException("dd\uFFFD");
    org.jsecurity.authc.ConcurrentAccessException var37 = new org.jsecurity.authc.ConcurrentAccessException("org.jsecurity.authz.UnauthorizedException: org.jsecurity.session.ExpiredSessionException: ", (java.lang.Throwable)var36);
    org.jsecurity.subject.SimplePrincipalCollection var39 = new org.jsecurity.subject.SimplePrincipalCollection((java.lang.Object)var36, "");
    var11.onLogout((org.jsecurity.subject.PrincipalCollection)var39);
    var8.setPrincipals((org.jsecurity.subject.PrincipalCollection)var39);
    org.jsecurity.realm.activedirectory.ActiveDirectoryRealm var42 = new org.jsecurity.realm.activedirectory.ActiveDirectoryRealm();
    org.jsecurity.authc.credential.Sha256CredentialsMatcher var43 = new org.jsecurity.authc.credential.Sha256CredentialsMatcher();
    var42.setCredentialsMatcher((org.jsecurity.authc.credential.CredentialsMatcher)var43);
    org.jsecurity.realm.activedirectory.ActiveDirectoryRealm var45 = new org.jsecurity.realm.activedirectory.ActiveDirectoryRealm();
    org.jsecurity.authc.credential.Sha256CredentialsMatcher var46 = new org.jsecurity.authc.credential.Sha256CredentialsMatcher();
    var45.setCredentialsMatcher((org.jsecurity.authc.credential.CredentialsMatcher)var46);
    java.lang.String var48 = var45.getAuthorizationCacheName();
    var45.setUrl("hi!");
    org.jsecurity.realm.ldap.DefaultLdapContextFactory var51 = new org.jsecurity.realm.ldap.DefaultLdapContextFactory();
    var45.setLdapContextFactory((org.jsecurity.realm.ldap.LdapContextFactory)var51);
    var51.setAuthentication("org.jsecurity.authz.UnauthorizedException: org.jsecurity.session.ExpiredSessionException: ");
    var42.setLdapContextFactory((org.jsecurity.realm.ldap.LdapContextFactory)var51);
    var51.setReferral("a2b823b1e72eae2b727289df8a00a89df8a0bab6ad8a89c4c5c7a9b62a270000");
    var51.setUrl("\u0000\u0000");
    java.util.Set var62 = org.jsecurity.util.PermissionUtils.toPermissionStrings("org.jsecurity.config.ConfigurationException: dd\uFFFD");
    org.jsecurity.authz.SimpleAuthorizationInfo var63 = new org.jsecurity.authz.SimpleAuthorizationInfo(var62);
    org.jsecurity.authz.SimpleRole var64 = new org.jsecurity.authz.SimpleRole();
    java.lang.String var65 = var64.getName();
    org.jsecurity.session.UnknownSessionException var70 = new org.jsecurity.session.UnknownSessionException("dd\uFFFD", (java.io.Serializable)100.0f);
    org.jsecurity.subject.SubjectException var71 = new org.jsecurity.subject.SubjectException("dd\uFFFD", (java.lang.Throwable)var70);
    org.jsecurity.io.SerializationException var72 = new org.jsecurity.io.SerializationException("", (java.lang.Throwable)var71);
    java.lang.Throwable[] var73 = var71.getSuppressed();
    java.util.Set var74 = org.jsecurity.util.CollectionUtils.asSet((java.lang.Object[])var73);
    var64.setPermissions(var74);
    org.jsecurity.authz.SimpleAuthorizingAccount var76 = new org.jsecurity.authz.SimpleAuthorizingAccount((org.jsecurity.subject.PrincipalCollection)var39, (java.lang.Object)"\u0000\u0000", "org.jsecurity.authc.AccountException: hi!", var62, var74);
    var76.setLocked(false);
    java.util.Set var79 = var76.getSimpleRoles();
    org.jsecurity.realm.activedirectory.ActiveDirectoryRealm var82 = new org.jsecurity.realm.activedirectory.ActiveDirectoryRealm();
    org.jsecurity.authc.credential.Sha256CredentialsMatcher var83 = new org.jsecurity.authc.credential.Sha256CredentialsMatcher();
    var82.setCredentialsMatcher((org.jsecurity.authc.credential.CredentialsMatcher)var83);
    java.lang.String var85 = var82.getAuthorizationCacheName();
    var82.setPrincipalSuffix("org.jsecurity.config.ConfigurationException: dd\uFFFD");
    org.jsecurity.authz.permission.PermissionResolver var88 = var82.getPermissionResolver();
    java.util.Set var89 = org.jsecurity.util.PermissionUtils.resolveDelimitedPermissions("NfxhYN7ItBfRAmDBmprtU73ghfEEPpcDJrHPkZ06wiY=", var88);
    java.util.Set var90 = org.jsecurity.util.PermissionUtils.resolveDelimitedPermissions("\uFFFD\uFFFD#\uFFFD\uFFFD.\uFFFD+r\uFFFD\u6959(\uFFFD\uFFFDW\uFFFDq\uFFFD.\uFFFD\uFFFD^jY\uFFFDj\uFFFDa\uFFFD\uFFFD\uFFFDj\u0628\u0000", var88);
    boolean var91 = var76.isPermittedAll((java.util.Collection)var90);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var9 + "' != '" + 10+ "'", var9.equals(10));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var13);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var14);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var15);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var32);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var48);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var62);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var65);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var73);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var74);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var79);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var85);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var88);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var89);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var90);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var91 == false);

  }

  public void test181() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest7.test181");


    org.jsecurity.realm.activedirectory.ActiveDirectoryRealm var0 = new org.jsecurity.realm.activedirectory.ActiveDirectoryRealm();
    var0.init();
    var0.setSystemPassword("dd\uFFFD");
    org.jsecurity.cache.Cache var4 = var0.getAuthorizationCache();
    org.jsecurity.mgt.DefaultSecurityManager var5 = new org.jsecurity.mgt.DefaultSecurityManager((org.jsecurity.realm.Realm)var0);
    java.io.InputStream var7 = org.jsecurity.util.ClassUtils.getResourceAsStream("");
    java.lang.Object[] var8 = new java.lang.Object[] { var7};
    java.util.List var9 = org.jsecurity.util.CollectionUtils.asList(var8);
    org.jsecurity.authc.pam.ModularRealmAuthenticator var10 = new org.jsecurity.authc.pam.ModularRealmAuthenticator(var9);
    org.jsecurity.subject.SimplePrincipalCollection var12 = new org.jsecurity.subject.SimplePrincipalCollection((java.util.Collection)var9, "org.jsecurity.authz.UnauthorizedException: org.jsecurity.session.ExpiredSessionException: ");
    org.jsecurity.io.ResourceException var16 = new org.jsecurity.io.ResourceException("hi!");
    org.jsecurity.authc.UnknownAccountException var17 = new org.jsecurity.authc.UnknownAccountException((java.lang.Throwable)var16);
    org.jsecurity.session.StoppedSessionException var18 = new org.jsecurity.session.StoppedSessionException("dd\uFFFD", (java.io.Serializable)var16);
    org.jsecurity.session.UnknownSessionException var19 = new org.jsecurity.session.UnknownSessionException("org.jsecurity.authz.UnauthorizedException: org.jsecurity.session.ExpiredSessionException: ", (java.lang.Throwable)var16);
    boolean var20 = var12.equals((java.lang.Object)var16);
    org.jsecurity.authz.SimpleAuthorizationInfo var21 = new org.jsecurity.authz.SimpleAuthorizationInfo();
    var21.addRole("a2b823b1e72eae2b727289df8a00a89df8a0bab6ad8a89c4c5c7a9b62a270000");
    org.jsecurity.authz.SimpleAuthorizationInfo var24 = new org.jsecurity.authz.SimpleAuthorizationInfo();
    var24.addRole("a2b823b1e72eae2b727289df8a00a89df8a0bab6ad8a89c4c5c7a9b62a270000");
    org.jsecurity.session.UnknownSessionException var31 = new org.jsecurity.session.UnknownSessionException("dd\uFFFD", (java.io.Serializable)100.0f);
    org.jsecurity.subject.SubjectException var32 = new org.jsecurity.subject.SubjectException("dd\uFFFD", (java.lang.Throwable)var31);
    org.jsecurity.io.SerializationException var33 = new org.jsecurity.io.SerializationException("", (java.lang.Throwable)var32);
    java.lang.Throwable[] var34 = var32.getSuppressed();
    java.util.Set var35 = org.jsecurity.util.CollectionUtils.asSet((java.lang.Object[])var34);
    var24.addRoles((java.util.Collection)var35);
    var21.setObjectPermissions(var35);
    java.io.InputStream var39 = org.jsecurity.util.ClassUtils.getResourceAsStream("");
    java.lang.Object[] var40 = new java.lang.Object[] { var39};
    java.util.List var41 = org.jsecurity.util.CollectionUtils.asList(var40);
    org.jsecurity.authc.pam.ModularRealmAuthenticator var42 = new org.jsecurity.authc.pam.ModularRealmAuthenticator(var41);
    org.jsecurity.subject.SimplePrincipalCollection var44 = new org.jsecurity.subject.SimplePrincipalCollection((java.util.Collection)var41, "org.jsecurity.authz.UnauthorizedException: org.jsecurity.session.ExpiredSessionException: ");
    java.util.Set var45 = var44.getRealmNames();
    java.io.InputStream var47 = org.jsecurity.util.ClassUtils.getResourceAsStream("");
    java.lang.Object[] var48 = new java.lang.Object[] { var47};
    java.util.List var49 = org.jsecurity.util.CollectionUtils.asList(var48);
    org.jsecurity.authc.pam.ModularRealmAuthenticator var50 = new org.jsecurity.authc.pam.ModularRealmAuthenticator(var49);
    org.jsecurity.subject.SimplePrincipalCollection var52 = new org.jsecurity.subject.SimplePrincipalCollection((java.util.Collection)var49, "org.jsecurity.authz.UnauthorizedException: org.jsecurity.session.ExpiredSessionException: ");
    org.jsecurity.session.UnknownSessionException var57 = new org.jsecurity.session.UnknownSessionException("dd\uFFFD", (java.io.Serializable)100.0f);
    org.jsecurity.session.SessionException var59 = new org.jsecurity.session.SessionException("dd\uFFFD", (java.lang.Throwable)var57, (java.io.Serializable)0);
    org.jsecurity.session.SessionException var60 = new org.jsecurity.session.SessionException("dd\uFFFD", (java.lang.Throwable)var57);
    var52.add((java.lang.Object)var60, "org.jsecurity.config.ConfigurationException: dd\uFFFD");
    java.util.Set var63 = var52.asSet();
    var44.addAll((java.util.Collection)var63, "6464ff");
    var21.setStringPermissions(var63);
    var12.addAll((java.util.Collection)var63, "\uFFFD\uFFFD#\uFFFD\uFFFD.\uFFFD+r\uFFFD\u6959(\uFFFD\uFFFDW\uFFFDq\uFFFD.\uFFFD\uFFFD^jY\uFFFDj\uFFFDa\uFFFD\uFFFD\uFFFDj\u0628\u0000");
    var5.setSessionListeners((java.util.Collection)var63);
    org.jsecurity.io.ResourceException var73 = new org.jsecurity.io.ResourceException("hi!");
    org.jsecurity.codec.CodecException var74 = new org.jsecurity.codec.CodecException((java.lang.Throwable)var73);
    org.jsecurity.JSecurityException var75 = new org.jsecurity.JSecurityException("a2b823b1e72eae2b727289df8a00a89df8a0bab6ad8a89c4c5c7a9b62a270000", (java.lang.Throwable)var73);
    org.jsecurity.session.UnknownSessionException var76 = new org.jsecurity.session.UnknownSessionException((java.lang.Throwable)var75);
    org.jsecurity.authc.IncorrectCredentialsException var77 = new org.jsecurity.authc.IncorrectCredentialsException((java.lang.Throwable)var75);
    org.jsecurity.authz.AuthorizationException var78 = new org.jsecurity.authz.AuthorizationException("\u0000\u0000\u0000", (java.lang.Throwable)var75);
    org.jsecurity.authc.AccountException var79 = new org.jsecurity.authc.AccountException((java.lang.Throwable)var78);
    org.jsecurity.subject.SimplePrincipalCollection var81 = new org.jsecurity.subject.SimplePrincipalCollection((java.lang.Object)var79, "org.jsecurity.authz.UnauthorizedException: org.jsecurity.session.ExpiredSessionException: ");
    java.util.Set var82 = var81.getRealmNames();
    var5.logout((org.jsecurity.subject.PrincipalCollection)var81);
    org.jsecurity.realm.activedirectory.ActiveDirectoryRealm var84 = new org.jsecurity.realm.activedirectory.ActiveDirectoryRealm();
    var84.setPrincipalSuffix("");
    var84.setPrincipalSuffix("org.jsecurity.authc.CredentialsException: 783ccd31-48a8-42dd-890f-df885a7baaff");
    var84.setSystemPassword("783ccd31-48a8-42dd-890f-df885a7baaff");
    var5.setRealm((org.jsecurity.realm.Realm)var84);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var4);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var7);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var8);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var9);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var20 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var34);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var35);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var39);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var40);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var41);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var45);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var47);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var48);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var49);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var63);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var82);

  }

  public void test182() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest7.test182");


    java.io.InputStream var2 = org.jsecurity.util.ClassUtils.getResourceAsStream("");
    java.lang.Object[] var3 = new java.lang.Object[] { var2};
    java.util.List var4 = org.jsecurity.util.CollectionUtils.asList(var3);
    org.jsecurity.authc.pam.ModularRealmAuthenticator var5 = new org.jsecurity.authc.pam.ModularRealmAuthenticator(var4);
    org.jsecurity.authc.pam.AllSuccessfulModularAuthenticationStrategy var6 = new org.jsecurity.authc.pam.AllSuccessfulModularAuthenticationStrategy();
    var5.setModularAuthenticationStrategy((org.jsecurity.authc.pam.ModularAuthenticationStrategy)var6);
    org.jsecurity.authz.SimpleAuthorizationInfo var8 = new org.jsecurity.authz.SimpleAuthorizationInfo();
    var8.addStringPermission("hi!");
    java.io.InputStream var12 = org.jsecurity.util.ClassUtils.getResourceAsStream("");
    java.lang.Object[] var13 = new java.lang.Object[] { var12};
    java.util.List var14 = org.jsecurity.util.CollectionUtils.asList(var13);
    var8.addRoles((java.util.Collection)var14);
    var5.setAuthenticationListeners((java.util.Collection)var14);
    org.jsecurity.realm.activedirectory.ActiveDirectoryRealm var17 = new org.jsecurity.realm.activedirectory.ActiveDirectoryRealm();
    var17.setPrincipalSuffix("");
    var5.setRealm((org.jsecurity.realm.Realm)var17);
    org.jsecurity.authc.pam.FirstSuccessfulAuthenticationStrategy var21 = new org.jsecurity.authc.pam.FirstSuccessfulAuthenticationStrategy();
    org.jsecurity.authz.UnauthorizedException var23 = new org.jsecurity.authz.UnauthorizedException("org.jsecurity.config.ConfigurationException: dd\uFFFD");
    java.lang.Throwable[] var24 = var23.getSuppressed();
    java.util.List var25 = org.jsecurity.util.CollectionUtils.asList((java.lang.Object[])var24);
    org.jsecurity.authc.UsernamePasswordToken var26 = new org.jsecurity.authc.UsernamePasswordToken();
    java.lang.String var27 = var26.getUsername();
    java.net.InetAddress var28 = var26.getInetAddress();
    org.jsecurity.authc.AuthenticationInfo var29 = var21.beforeAllAttempts((java.util.Collection)var25, (org.jsecurity.authc.AuthenticationToken)var26);
    var5.setModularAuthenticationStrategy((org.jsecurity.authc.pam.ModularAuthenticationStrategy)var21);
    org.jsecurity.codec.CodecException var33 = new org.jsecurity.codec.CodecException("dd\uFFFD");
    org.jsecurity.authc.ConcurrentAccessException var34 = new org.jsecurity.authc.ConcurrentAccessException("org.jsecurity.authz.UnauthorizedException: org.jsecurity.session.ExpiredSessionException: ", (java.lang.Throwable)var33);
    org.jsecurity.subject.SimplePrincipalCollection var36 = new org.jsecurity.subject.SimplePrincipalCollection((java.lang.Object)var33, "");
    org.jsecurity.authc.pam.FirstSuccessfulAuthenticationStrategy var37 = new org.jsecurity.authc.pam.FirstSuccessfulAuthenticationStrategy();
    org.jsecurity.authz.UnauthorizedException var39 = new org.jsecurity.authz.UnauthorizedException("org.jsecurity.config.ConfigurationException: dd\uFFFD");
    java.lang.Throwable[] var40 = var39.getSuppressed();
    java.util.List var41 = org.jsecurity.util.CollectionUtils.asList((java.lang.Object[])var40);
    org.jsecurity.authc.UsernamePasswordToken var42 = new org.jsecurity.authc.UsernamePasswordToken();
    java.lang.String var43 = var42.getUsername();
    java.net.InetAddress var44 = var42.getInetAddress();
    org.jsecurity.authc.AuthenticationInfo var45 = var37.beforeAllAttempts((java.util.Collection)var41, (org.jsecurity.authc.AuthenticationToken)var42);
    org.jsecurity.session.UnknownSessionException var50 = new org.jsecurity.session.UnknownSessionException("dd\uFFFD", (java.io.Serializable)100.0f);
    org.jsecurity.subject.SubjectException var51 = new org.jsecurity.subject.SubjectException("dd\uFFFD", (java.lang.Throwable)var50);
    org.jsecurity.io.SerializationException var52 = new org.jsecurity.io.SerializationException("", (java.lang.Throwable)var51);
    java.lang.Throwable[] var53 = var51.getSuppressed();
    java.util.Set var54 = org.jsecurity.util.CollectionUtils.asSet((java.lang.Object[])var53);
    org.jsecurity.authc.SimpleAccount var55 = new org.jsecurity.authc.SimpleAccount((org.jsecurity.subject.PrincipalCollection)var36, (java.lang.Object)var41, var54);
    org.jsecurity.authc.pam.AllSuccessfulModularAuthenticationStrategy var56 = new org.jsecurity.authc.pam.AllSuccessfulModularAuthenticationStrategy();
    char[] var58 = new char[] { };
    org.jsecurity.authc.UsernamePasswordToken var60 = new org.jsecurity.authc.UsernamePasswordToken("hi!", var58, true);
    org.jsecurity.authc.SimpleAccount var61 = new org.jsecurity.authc.SimpleAccount();
    var61.setCredentialsExpired(false);
    boolean var64 = var61.isLocked();
    org.jsecurity.authc.AuthenticationInfo var65 = var56.afterAllAttempts((org.jsecurity.authc.AuthenticationToken)var60, (org.jsecurity.authc.AuthenticationInfo)var61);
    char[] var68 = new char[] { };
    org.jsecurity.authc.UsernamePasswordToken var70 = new org.jsecurity.authc.UsernamePasswordToken("hi!", var68, true);
    org.jsecurity.authc.UsernamePasswordToken var71 = new org.jsecurity.authc.UsernamePasswordToken("\u0000\u0000", var68);
    var60.setPassword(var68);
    org.jsecurity.authc.AuthenticationInfo var73 = var21.beforeAllAttempts((java.util.Collection)var41, (org.jsecurity.authc.AuthenticationToken)var60);
    char[] var74 = var60.getPassword();
    org.jsecurity.authc.UsernamePasswordToken var75 = new org.jsecurity.authc.UsernamePasswordToken("NfxhYN7ItBfRAmDBmprtU73ghfEEPpcDJrHPkZ06wiY=", var74);
    var75.setRememberMe(false);
    org.jsecurity.session.InvalidSessionException var78 = new org.jsecurity.session.InvalidSessionException((java.io.Serializable)var75);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var2);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var3);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var4);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var12);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var13);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var14);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var24);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var25);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var27);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var28);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var29);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var40);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var41);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var43);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var44);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var45);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var53);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var54);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var58);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var64 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var65);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var68);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var73);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var74);

  }

  public void test183() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest7.test183");


    org.jsecurity.authc.pam.UnsupportedTokenException var0 = new org.jsecurity.authc.pam.UnsupportedTokenException();
    org.jsecurity.authc.UnknownAccountException var1 = new org.jsecurity.authc.UnknownAccountException((java.lang.Throwable)var0);
    org.jsecurity.authz.SimpleRole var2 = new org.jsecurity.authz.SimpleRole();
    org.jsecurity.authz.SimpleAuthorizationInfo var3 = new org.jsecurity.authz.SimpleAuthorizationInfo();
    var3.addRole("a2b823b1e72eae2b727289df8a00a89df8a0bab6ad8a89c4c5c7a9b62a270000");
    org.jsecurity.session.UnknownSessionException var10 = new org.jsecurity.session.UnknownSessionException("dd\uFFFD", (java.io.Serializable)100.0f);
    org.jsecurity.subject.SubjectException var11 = new org.jsecurity.subject.SubjectException("dd\uFFFD", (java.lang.Throwable)var10);
    org.jsecurity.io.SerializationException var12 = new org.jsecurity.io.SerializationException("", (java.lang.Throwable)var11);
    java.lang.Throwable[] var13 = var11.getSuppressed();
    java.util.Set var14 = org.jsecurity.util.CollectionUtils.asSet((java.lang.Object[])var13);
    var3.addRoles((java.util.Collection)var14);
    var2.addAll((java.util.Collection)var14);
    java.lang.String var17 = var2.getName();
    org.jsecurity.authz.SimpleRole var18 = new org.jsecurity.authz.SimpleRole();
    org.jsecurity.authz.permission.WildcardPermission var21 = new org.jsecurity.authz.permission.WildcardPermission("hi!", false);
    boolean var22 = var18.isPermitted((org.jsecurity.authz.Permission)var21);
    boolean var23 = var2.isPermitted((org.jsecurity.authz.Permission)var21);
    org.jsecurity.authz.permission.WildcardPermission var25 = new org.jsecurity.authz.permission.WildcardPermission("a2b823b1e72eae2b727289df8a00a89df8a0bab6ad8a89c4c5c7a9b62a270000");
    var2.add((org.jsecurity.authz.Permission)var25);
    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      org.jsecurity.crypto.hash.Md2Hash var28 = new org.jsecurity.crypto.hash.Md2Hash((java.lang.Object)var0, (java.lang.Object)var25, 100);
      fail("Expected exception of type org.jsecurity.codec.CodecException");
    } catch (org.jsecurity.codec.CodecException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var13);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var14);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var17);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var22 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var23 == false);

  }

  public void test184() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest7.test184");


    org.jsecurity.session.mgt.DefaultSessionManager var0 = new org.jsecurity.session.mgt.DefaultSessionManager();
    var0.setGlobalSessionTimeout(1);
    org.jsecurity.session.mgt.ExecutorServiceSessionValidationScheduler var3 = new org.jsecurity.session.mgt.ExecutorServiceSessionValidationScheduler((org.jsecurity.session.mgt.ValidatingSessionManager)var0);
    org.jsecurity.realm.text.TextConfigurationRealm var4 = new org.jsecurity.realm.text.TextConfigurationRealm();
    java.io.InputStream var6 = org.jsecurity.util.ClassUtils.getResourceAsStream("");
    java.lang.Object[] var7 = new java.lang.Object[] { var6};
    java.util.List var8 = org.jsecurity.util.CollectionUtils.asList(var7);
    org.jsecurity.authc.pam.ModularRealmAuthenticator var9 = new org.jsecurity.authc.pam.ModularRealmAuthenticator(var8);
    org.jsecurity.subject.SimplePrincipalCollection var11 = new org.jsecurity.subject.SimplePrincipalCollection((java.util.Collection)var8, "org.jsecurity.authz.UnauthorizedException: org.jsecurity.session.ExpiredSessionException: ");
    org.jsecurity.session.UnknownSessionException var16 = new org.jsecurity.session.UnknownSessionException("dd\uFFFD", (java.io.Serializable)100.0f);
    org.jsecurity.session.SessionException var18 = new org.jsecurity.session.SessionException("dd\uFFFD", (java.lang.Throwable)var16, (java.io.Serializable)0);
    org.jsecurity.session.SessionException var19 = new org.jsecurity.session.SessionException("dd\uFFFD", (java.lang.Throwable)var16);
    var11.add((java.lang.Object)var19, "org.jsecurity.config.ConfigurationException: dd\uFFFD");
    var4.onLogout((org.jsecurity.subject.PrincipalCollection)var11);
    java.util.Set var24 = org.jsecurity.util.PermissionUtils.toPermissionStrings("org.jsecurity.config.ConfigurationException: dd\uFFFD");
    org.jsecurity.authz.SimpleAuthorizationInfo var25 = new org.jsecurity.authz.SimpleAuthorizationInfo(var24);
    org.jsecurity.authz.SimpleAuthorizingAccount var26 = new org.jsecurity.authz.SimpleAuthorizingAccount((org.jsecurity.subject.PrincipalCollection)var11, (java.lang.Object)var24);
    org.jsecurity.authz.SimpleAuthorizationInfo var27 = new org.jsecurity.authz.SimpleAuthorizationInfo();
    var27.addRole("a2b823b1e72eae2b727289df8a00a89df8a0bab6ad8a89c4c5c7a9b62a270000");
    org.jsecurity.session.UnknownSessionException var34 = new org.jsecurity.session.UnknownSessionException("dd\uFFFD", (java.io.Serializable)100.0f);
    org.jsecurity.subject.SubjectException var35 = new org.jsecurity.subject.SubjectException("dd\uFFFD", (java.lang.Throwable)var34);
    org.jsecurity.io.SerializationException var36 = new org.jsecurity.io.SerializationException("", (java.lang.Throwable)var35);
    java.lang.Throwable[] var37 = var35.getSuppressed();
    java.util.Set var38 = org.jsecurity.util.CollectionUtils.asSet((java.lang.Object[])var37);
    var27.addRoles((java.util.Collection)var38);
    var26.checkPermissions((java.util.Collection)var38);
    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      org.jsecurity.crypto.hash.Md5Hash var42 = new org.jsecurity.crypto.hash.Md5Hash((java.lang.Object)var3, (java.lang.Object)var26, 1);
      fail("Expected exception of type org.jsecurity.codec.CodecException");
    } catch (org.jsecurity.codec.CodecException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var6);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var7);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var8);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var24);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var37);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var38);

  }

  public void test185() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest7.test185");


    org.jsecurity.realm.jdbc.JdbcRealm var0 = new org.jsecurity.realm.jdbc.JdbcRealm();
    var0.setPermissionsQuery("org.jsecurity.realm.text.TextConfigurationRealm_445");
    var0.setUserRolesQuery("6464ff");
    var0.setUserRolesQuery("NfxhYN7ItBfRAmDBmprtU73ghfEEPpcDJrHPkZ06wiY=");
    var0.setUserRolesQuery("\u0000\u0000");
    var0.setPermissionsQuery("f9548f9e-497e-41ec-97ca-89ede08e20b0");
    var0.setPermissionsLookupEnabled(false);
    var0.setAuthenticationQuery("e1f737f7969ef7773ae3d73d6dc69e77cdfaf3ce1be776bd");

  }

  public void test186() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest7.test186");


    org.jsecurity.authc.pam.UnsupportedTokenException var0 = new org.jsecurity.authc.pam.UnsupportedTokenException();
    org.jsecurity.authc.UnknownAccountException var1 = new org.jsecurity.authc.UnknownAccountException((java.lang.Throwable)var0);
    org.jsecurity.authc.AccountException var2 = new org.jsecurity.authc.AccountException((java.lang.Throwable)var1);
    org.jsecurity.mgt.DefaultSecurityManager var3 = new org.jsecurity.mgt.DefaultSecurityManager();
    java.io.InputStream var5 = org.jsecurity.util.ClassUtils.getResourceAsStream("");
    java.lang.Object[] var6 = new java.lang.Object[] { var5};
    java.util.List var7 = org.jsecurity.util.CollectionUtils.asList(var6);
    org.jsecurity.authc.pam.ModularRealmAuthenticator var8 = new org.jsecurity.authc.pam.ModularRealmAuthenticator(var7);
    org.jsecurity.authc.pam.AllSuccessfulModularAuthenticationStrategy var9 = new org.jsecurity.authc.pam.AllSuccessfulModularAuthenticationStrategy();
    var8.setModularAuthenticationStrategy((org.jsecurity.authc.pam.ModularAuthenticationStrategy)var9);
    org.jsecurity.authz.SimpleAuthorizationInfo var11 = new org.jsecurity.authz.SimpleAuthorizationInfo();
    var11.addStringPermission("hi!");
    java.io.InputStream var15 = org.jsecurity.util.ClassUtils.getResourceAsStream("");
    java.lang.Object[] var16 = new java.lang.Object[] { var15};
    java.util.List var17 = org.jsecurity.util.CollectionUtils.asList(var16);
    var11.addRoles((java.util.Collection)var17);
    var8.setAuthenticationListeners((java.util.Collection)var17);
    var3.setSessionListeners((java.util.Collection)var17);
    org.jsecurity.realm.text.TextConfigurationRealm var21 = new org.jsecurity.realm.text.TextConfigurationRealm();
    java.io.InputStream var23 = org.jsecurity.util.ClassUtils.getResourceAsStream("");
    java.lang.Object[] var24 = new java.lang.Object[] { var23};
    java.util.List var25 = org.jsecurity.util.CollectionUtils.asList(var24);
    org.jsecurity.authc.pam.ModularRealmAuthenticator var26 = new org.jsecurity.authc.pam.ModularRealmAuthenticator(var25);
    org.jsecurity.subject.SimplePrincipalCollection var28 = new org.jsecurity.subject.SimplePrincipalCollection((java.util.Collection)var25, "org.jsecurity.authz.UnauthorizedException: org.jsecurity.session.ExpiredSessionException: ");
    org.jsecurity.session.UnknownSessionException var33 = new org.jsecurity.session.UnknownSessionException("dd\uFFFD", (java.io.Serializable)100.0f);
    org.jsecurity.session.SessionException var35 = new org.jsecurity.session.SessionException("dd\uFFFD", (java.lang.Throwable)var33, (java.io.Serializable)0);
    org.jsecurity.session.SessionException var36 = new org.jsecurity.session.SessionException("dd\uFFFD", (java.lang.Throwable)var33);
    var28.add((java.lang.Object)var36, "org.jsecurity.config.ConfigurationException: dd\uFFFD");
    var21.onLogout((org.jsecurity.subject.PrincipalCollection)var28);
    org.jsecurity.authc.pam.FirstSuccessfulAuthenticationStrategy var40 = new org.jsecurity.authc.pam.FirstSuccessfulAuthenticationStrategy();
    org.jsecurity.authz.UnauthorizedException var42 = new org.jsecurity.authz.UnauthorizedException("org.jsecurity.config.ConfigurationException: dd\uFFFD");
    java.lang.Throwable[] var43 = var42.getSuppressed();
    java.util.List var44 = org.jsecurity.util.CollectionUtils.asList((java.lang.Object[])var43);
    org.jsecurity.authc.UsernamePasswordToken var45 = new org.jsecurity.authc.UsernamePasswordToken();
    java.lang.String var46 = var45.getUsername();
    java.net.InetAddress var47 = var45.getInetAddress();
    org.jsecurity.authc.AuthenticationInfo var48 = var40.beforeAllAttempts((java.util.Collection)var44, (org.jsecurity.authc.AuthenticationToken)var45);
    boolean[] var49 = var3.hasRoles((org.jsecurity.subject.PrincipalCollection)var28, var44);
    org.jsecurity.codec.CodecException var52 = new org.jsecurity.codec.CodecException("dd\uFFFD");
    org.jsecurity.authc.ConcurrentAccessException var53 = new org.jsecurity.authc.ConcurrentAccessException("org.jsecurity.authz.UnauthorizedException: org.jsecurity.session.ExpiredSessionException: ", (java.lang.Throwable)var52);
    org.jsecurity.subject.SimplePrincipalCollection var55 = new org.jsecurity.subject.SimplePrincipalCollection((java.lang.Object)var52, "");
    java.io.InputStream var57 = org.jsecurity.util.ClassUtils.getResourceAsStream("");
    java.lang.Object[] var58 = new java.lang.Object[] { var57};
    java.util.List var59 = org.jsecurity.util.CollectionUtils.asList(var58);
    org.jsecurity.authc.pam.ModularRealmAuthenticator var60 = new org.jsecurity.authc.pam.ModularRealmAuthenticator(var59);
    var55.addAll((java.util.Collection)var59, "\u0000\u0000");
    var3.setSessionListeners((java.util.Collection)var59);
    org.jsecurity.authc.SimpleAccount var65 = new org.jsecurity.authc.SimpleAccount((java.lang.Object)var2, (java.lang.Object)var3, "ZGT/");
    org.jsecurity.subject.DelegatingSubject var66 = new org.jsecurity.subject.DelegatingSubject((org.jsecurity.mgt.SecurityManager)var3);
    org.jsecurity.realm.activedirectory.ActiveDirectoryRealm var67 = new org.jsecurity.realm.activedirectory.ActiveDirectoryRealm();
    var3.setAuthorizer((org.jsecurity.authz.Authorizer)var67);
    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      var3.setRememberMeCipherKeyHex("4c18add5-eaa2-4e16-bcb0-a65c0dbc8062");
      fail("Expected exception of type java.lang.IllegalStateException");
    } catch (java.lang.IllegalStateException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var5);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var6);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var7);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var15);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var16);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var17);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var23);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var24);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var25);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var43);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var44);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var46);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var47);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var48);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var49);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var57);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var58);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var59);

  }

  public void test187() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest7.test187");


    org.jsecurity.authz.HostUnauthorizedException var0 = new org.jsecurity.authz.HostUnauthorizedException();
    org.jsecurity.authz.permission.WildcardPermission var3 = new org.jsecurity.authz.permission.WildcardPermission("org.jsecurity.authc.AccountException: hi!", true);
    org.jsecurity.authz.SimpleAuthorizationInfo var5 = new org.jsecurity.authz.SimpleAuthorizationInfo();
    java.util.Set var6 = var5.getStringPermissions();
    java.util.Set var7 = var5.getRoles();
    var5.addStringPermission("hi!");
    java.util.Set var10 = var5.getStringPermissions();
    org.jsecurity.session.UnknownSessionException var15 = new org.jsecurity.session.UnknownSessionException("dd\uFFFD", (java.io.Serializable)100.0f);
    org.jsecurity.subject.SubjectException var16 = new org.jsecurity.subject.SubjectException("dd\uFFFD", (java.lang.Throwable)var15);
    org.jsecurity.io.SerializationException var17 = new org.jsecurity.io.SerializationException("", (java.lang.Throwable)var16);
    java.lang.Throwable[] var18 = var16.getSuppressed();
    java.lang.Throwable[] var19 = var16.getSuppressed();
    org.jsecurity.authz.SimpleAuthorizationInfo var22 = new org.jsecurity.authz.SimpleAuthorizationInfo();
    var22.addRole("a2b823b1e72eae2b727289df8a00a89df8a0bab6ad8a89c4c5c7a9b62a270000");
    org.jsecurity.session.UnknownSessionException var29 = new org.jsecurity.session.UnknownSessionException("dd\uFFFD", (java.io.Serializable)100.0f);
    org.jsecurity.subject.SubjectException var30 = new org.jsecurity.subject.SubjectException("dd\uFFFD", (java.lang.Throwable)var29);
    org.jsecurity.io.SerializationException var31 = new org.jsecurity.io.SerializationException("", (java.lang.Throwable)var30);
    java.lang.Throwable[] var32 = var30.getSuppressed();
    java.util.Set var33 = org.jsecurity.util.CollectionUtils.asSet((java.lang.Object[])var32);
    var22.addRoles((java.util.Collection)var33);
    java.io.InputStream var36 = org.jsecurity.util.ClassUtils.getResourceAsStream("");
    java.lang.Object[] var37 = new java.lang.Object[] { var36};
    java.util.List var38 = org.jsecurity.util.CollectionUtils.asList(var37);
    org.jsecurity.authc.pam.ModularRealmAuthenticator var39 = new org.jsecurity.authc.pam.ModularRealmAuthenticator(var38);
    org.jsecurity.subject.SimplePrincipalCollection var41 = new org.jsecurity.subject.SimplePrincipalCollection((java.util.Collection)var38, "org.jsecurity.authz.UnauthorizedException: org.jsecurity.session.ExpiredSessionException: ");
    org.jsecurity.session.UnknownSessionException var46 = new org.jsecurity.session.UnknownSessionException("dd\uFFFD", (java.io.Serializable)100.0f);
    org.jsecurity.session.SessionException var48 = new org.jsecurity.session.SessionException("dd\uFFFD", (java.lang.Throwable)var46, (java.io.Serializable)0);
    org.jsecurity.session.SessionException var49 = new org.jsecurity.session.SessionException("dd\uFFFD", (java.lang.Throwable)var46);
    var41.add((java.lang.Object)var49, "org.jsecurity.config.ConfigurationException: dd\uFFFD");
    java.util.Set var52 = var41.asSet();
    org.jsecurity.authz.SimpleAuthorizingAccount var53 = new org.jsecurity.authz.SimpleAuthorizingAccount((java.lang.Object)var19, (java.lang.Object)"\u0000\u0000\u0000", "\u0000\u0000\u0000", var33, var52);
    org.jsecurity.authz.SimpleRole var55 = var53.getRole("\u0000\u0000\u0000");
    java.util.Set var56 = var53.getPermissions();
    boolean var57 = var53.isLocked();
    java.io.InputStream var59 = org.jsecurity.util.ClassUtils.getResourceAsStream("");
    java.lang.Object[] var60 = new java.lang.Object[] { var59};
    java.util.List var61 = org.jsecurity.util.CollectionUtils.asList(var60);
    org.jsecurity.authc.pam.ModularRealmAuthenticator var62 = new org.jsecurity.authc.pam.ModularRealmAuthenticator(var61);
    org.jsecurity.subject.SimplePrincipalCollection var64 = new org.jsecurity.subject.SimplePrincipalCollection((java.util.Collection)var61, "org.jsecurity.authz.UnauthorizedException: org.jsecurity.session.ExpiredSessionException: ");
    java.util.Set var65 = var64.getRealmNames();
    var53.addStringPermissions((java.util.Collection)var65);
    org.jsecurity.authz.SimpleAuthorizingAccount var67 = new org.jsecurity.authz.SimpleAuthorizingAccount((java.lang.Object)var0, (java.lang.Object)var3, "d8d550ee-3a8c-48f0-8061-1d82c827f505", var10, var65);
    boolean var69 = var67.hasRole("00dc6e22-d7f9-475d-858b-a4d1b70bee5c");
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var6);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var7);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var10);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var18);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var19);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var32);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var33);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var36);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var37);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var38);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var52);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var55);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var56);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var57 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var59);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var60);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var61);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var65);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var69 == false);

  }

  public void test188() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest7.test188");


    org.jsecurity.authz.UnauthorizedException var2 = new org.jsecurity.authz.UnauthorizedException();
    org.jsecurity.session.SessionException var4 = new org.jsecurity.session.SessionException("", (java.lang.Throwable)var2, (java.io.Serializable)"org.jsecurity.config.ConfigurationException: dd\uFFFD");
    org.jsecurity.session.ExpiredSessionException var5 = new org.jsecurity.session.ExpiredSessionException("", (java.io.Serializable)"");
    org.jsecurity.authz.UnauthorizedException var6 = new org.jsecurity.authz.UnauthorizedException((java.lang.Throwable)var5);
    org.jsecurity.authz.AuthorizationException var7 = new org.jsecurity.authz.AuthorizationException((java.lang.Throwable)var5);
    org.jsecurity.authc.ConcurrentAccessException var8 = new org.jsecurity.authc.ConcurrentAccessException((java.lang.Throwable)var7);
    org.jsecurity.util.UnavailableConstructorException var9 = new org.jsecurity.util.UnavailableConstructorException((java.lang.Throwable)var7);
    org.jsecurity.authz.UnauthorizedException var10 = new org.jsecurity.authz.UnauthorizedException((java.lang.Throwable)var7);

  }

  public void test189() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest7.test189");


    org.jsecurity.realm.text.PropertiesRealm var0 = new org.jsecurity.realm.text.PropertiesRealm();
    org.jsecurity.realm.activedirectory.ActiveDirectoryRealm var1 = new org.jsecurity.realm.activedirectory.ActiveDirectoryRealm();
    org.jsecurity.authc.credential.Sha256CredentialsMatcher var2 = new org.jsecurity.authc.credential.Sha256CredentialsMatcher();
    var1.setCredentialsMatcher((org.jsecurity.authc.credential.CredentialsMatcher)var2);
    java.lang.String var4 = var1.getAuthorizationCacheName();
    var1.setPrincipalSuffix("org.jsecurity.config.ConfigurationException: dd\uFFFD");
    org.jsecurity.authz.permission.PermissionResolver var7 = var1.getPermissionResolver();
    var0.setPermissionResolver(var7);
    var0.destroy();
    var0.setReloadIntervalSeconds(1);
    var0.setUserDefinitions("e492c511-30cc-4e4c-bc2e-4f1f663b7b62");
    org.jsecurity.authz.aop.GuestAnnotationHandler var14 = new org.jsecurity.authz.aop.GuestAnnotationHandler();
    java.lang.Class var15 = var14.getAnnotationClass();
    java.lang.Class var16 = var14.getAnnotationClass();
    var0.setAuthenticationTokenClass(var16);
    java.util.Collection var18 = org.jsecurity.util.CollectionUtils.emptyCollection(var16);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var4);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var7);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var15);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var16);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var18);

  }

  public void test190() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest7.test190");


    org.jsecurity.io.IniResource var2 = new org.jsecurity.io.IniResource();
    java.lang.String var3 = var2.getCharsetName();
    org.jsecurity.config.ReflectionBuilder var4 = new org.jsecurity.config.ReflectionBuilder();
    org.jsecurity.io.IniResource var5 = new org.jsecurity.io.IniResource();
    var5.setCharsetName("org.jsecurity.authz.UnauthorizedException: org.jsecurity.session.ExpiredSessionException: ");
    java.util.Map var8 = var5.getSections();
    java.util.Map var9 = var4.buildObjects(var8);
    var2.setSections(var9);
    var2.setCharsetName("75c873c8-19df-476a-b82e-72a1eddf7e4b");
    org.jsecurity.session.InvalidSessionException var13 = new org.jsecurity.session.InvalidSessionException("52a4a421-03d6-4e18-abbd-dd3112c2d7b3", (java.io.Serializable)"75c873c8-19df-476a-b82e-72a1eddf7e4b");
    org.jsecurity.authc.LockedAccountException var14 = new org.jsecurity.authc.LockedAccountException("e7e879cb-1172-4cea-8bca-f370fbe1f08c", (java.lang.Throwable)var13);
    org.jsecurity.config.ConfigurationException var15 = new org.jsecurity.config.ConfigurationException((java.lang.Throwable)var14);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var3);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var8);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var9);

  }

  public void test191() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest7.test191");


    org.jsecurity.authz.SimpleAuthorizationInfo var1 = new org.jsecurity.authz.SimpleAuthorizationInfo();
    org.jsecurity.session.UnknownSessionException var6 = new org.jsecurity.session.UnknownSessionException("dd\uFFFD", (java.io.Serializable)100.0f);
    org.jsecurity.subject.SubjectException var7 = new org.jsecurity.subject.SubjectException("dd\uFFFD", (java.lang.Throwable)var6);
    org.jsecurity.io.SerializationException var8 = new org.jsecurity.io.SerializationException("", (java.lang.Throwable)var7);
    java.lang.Throwable[] var9 = var7.getSuppressed();
    java.util.Set var10 = org.jsecurity.util.CollectionUtils.asSet((java.lang.Object[])var9);
    var1.setStringPermissions(var10);
    org.jsecurity.authz.SimpleRole var12 = new org.jsecurity.authz.SimpleRole("\u0000\u0000", var10);
    java.lang.String var13 = var12.toString();
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var9);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var10);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var13 + "' != '" + "\u0000\u0000"+ "'", var13.equals("\u0000\u0000"));

  }

  public void test192() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest7.test192");


    org.jsecurity.crypto.hash.Sha384Hash var1 = org.jsecurity.crypto.hash.Sha384Hash.fromBase64String("79436e99-d45a-4bcc-9cbf-0fddb7998f7c");
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var1);

  }

  public void test193() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest7.test193");


    org.jsecurity.io.IniResource var0 = new org.jsecurity.io.IniResource();
    java.util.Map var1 = var0.getSections();
    java.util.Map var2 = var0.getSections();
    var0.setCharsetName("877d40d3-7504-4fde-9f4c-e0fcd7e4321f");
    var0.setCharsetName("org.jsecurity.authc.UsernamePasswordToken - hi!, rememberMe=false");
    java.lang.String var7 = var0.getCharsetName();
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var1);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var2);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var7 + "' != '" + "org.jsecurity.authc.UsernamePasswordToken - hi!, rememberMe=false"+ "'", var7.equals("org.jsecurity.authc.UsernamePasswordToken - hi!, rememberMe=false"));

  }

  public void test194() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest7.test194");


    org.jsecurity.session.UnknownSessionException var5 = new org.jsecurity.session.UnknownSessionException("dd\uFFFD", (java.io.Serializable)100.0f);
    org.jsecurity.subject.SubjectException var6 = new org.jsecurity.subject.SubjectException("dd\uFFFD", (java.lang.Throwable)var5);
    org.jsecurity.authc.AccountException var7 = new org.jsecurity.authc.AccountException("hi!", (java.lang.Throwable)var6);
    org.jsecurity.session.UnknownSessionException var8 = new org.jsecurity.session.UnknownSessionException((java.lang.Throwable)var6);
    org.jsecurity.codec.CodecException var9 = new org.jsecurity.codec.CodecException((java.lang.Throwable)var6);
    org.jsecurity.config.UnresolveableReferenceException var10 = new org.jsecurity.config.UnresolveableReferenceException((java.lang.Throwable)var6);
    org.jsecurity.authz.HostUnauthorizedException var11 = new org.jsecurity.authz.HostUnauthorizedException("381e6835-afe6-46d8-962f-101ca5a332b4", (java.lang.Throwable)var10);

  }

  public void test195() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest7.test195");


    org.jsecurity.config.IniConfiguration var0 = new org.jsecurity.config.IniConfiguration();
    java.lang.String var1 = var0.getConfig();
    var0.setConfig("\uFFFD\uFFFD#\uFFFD\uFFFD.\uFFFD+rr\uFFFD\u07CA\u0000\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\u01E9\uFFFD*'\u0000\u0000");
    var0.setConfig("ff1bb54d-80f9-4308-a260-ff3ddf1355e9");
    org.jsecurity.realm.text.TextConfigurationRealm var6 = new org.jsecurity.realm.text.TextConfigurationRealm();
    java.io.InputStream var8 = org.jsecurity.util.ClassUtils.getResourceAsStream("");
    java.lang.Object[] var9 = new java.lang.Object[] { var8};
    java.util.List var10 = org.jsecurity.util.CollectionUtils.asList(var9);
    org.jsecurity.authc.pam.ModularRealmAuthenticator var11 = new org.jsecurity.authc.pam.ModularRealmAuthenticator(var10);
    org.jsecurity.subject.SimplePrincipalCollection var13 = new org.jsecurity.subject.SimplePrincipalCollection((java.util.Collection)var10, "org.jsecurity.authz.UnauthorizedException: org.jsecurity.session.ExpiredSessionException: ");
    org.jsecurity.session.UnknownSessionException var18 = new org.jsecurity.session.UnknownSessionException("dd\uFFFD", (java.io.Serializable)100.0f);
    org.jsecurity.session.SessionException var20 = new org.jsecurity.session.SessionException("dd\uFFFD", (java.lang.Throwable)var18, (java.io.Serializable)0);
    org.jsecurity.session.SessionException var21 = new org.jsecurity.session.SessionException("dd\uFFFD", (java.lang.Throwable)var18);
    var13.add((java.lang.Object)var21, "org.jsecurity.config.ConfigurationException: dd\uFFFD");
    var6.onLogout((org.jsecurity.subject.PrincipalCollection)var13);
    java.util.Collection var26 = var13.fromRealm("\u0000\u0000\u0000");
    org.jsecurity.session.mgt.eis.MemorySessionDAO var27 = new org.jsecurity.session.mgt.eis.MemorySessionDAO();
    org.jsecurity.authc.SimpleAuthenticationInfo var28 = new org.jsecurity.authc.SimpleAuthenticationInfo((org.jsecurity.subject.PrincipalCollection)var13, (java.lang.Object)var27);
    org.jsecurity.authz.SimpleAuthorizingAccount var30 = new org.jsecurity.authz.SimpleAuthorizingAccount((java.lang.Object)"ff1bb54d-80f9-4308-a260-ff3ddf1355e9", (java.lang.Object)var27, "330a41fd-f404-4b7f-8f3c-bc52c3f67c3e");
    java.util.Collection var31 = var27.getActiveSessions();
    org.jsecurity.cache.CacheManager var32 = var27.getCacheManager();
    org.jsecurity.cache.Cache var33 = var27.getActiveSessionsCache();
    org.jsecurity.session.mgt.SimpleSession var34 = new org.jsecurity.session.mgt.SimpleSession();
    var34.setTimeout((-1L));
    org.jsecurity.session.mgt.SimpleSession var37 = new org.jsecurity.session.mgt.SimpleSession();
    java.util.Date var38 = var37.getLastAccessTime();
    var34.setLastAccessTime(var38);
    org.jsecurity.session.mgt.SimpleSession var40 = new org.jsecurity.session.mgt.SimpleSession();
    java.util.Date var41 = var40.getLastAccessTime();
    var34.setStopTimestamp(var41);
    java.net.InetAddress var43 = var34.getHostAddress();
    org.jsecurity.session.mgt.SimpleSession var44 = new org.jsecurity.session.mgt.SimpleSession(var43);
    var44.validate();
    java.io.Serializable var46 = var27.create((org.jsecurity.session.Session)var44);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var1);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var8);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var9);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var10);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var26);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var31);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var32);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var33);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var38);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var41);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var43);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var46 + "' != '" + "7588c73b-817b-46f6-83df-ca6fcb0a0826"+ "'", var46.equals("7588c73b-817b-46f6-83df-ca6fcb0a0826"));

  }

  public void test196() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest7.test196");


    java.io.InputStream var1 = org.jsecurity.util.ClassUtils.getResourceAsStream("");
    java.lang.Object[] var2 = new java.lang.Object[] { var1};
    java.util.List var3 = org.jsecurity.util.CollectionUtils.asList(var2);
    org.jsecurity.authc.pam.ModularRealmAuthenticator var4 = new org.jsecurity.authc.pam.ModularRealmAuthenticator(var3);
    org.jsecurity.realm.text.TextConfigurationRealm var5 = new org.jsecurity.realm.text.TextConfigurationRealm();
    java.io.InputStream var7 = org.jsecurity.util.ClassUtils.getResourceAsStream("");
    java.lang.Object[] var8 = new java.lang.Object[] { var7};
    java.util.List var9 = org.jsecurity.util.CollectionUtils.asList(var8);
    org.jsecurity.authc.pam.ModularRealmAuthenticator var10 = new org.jsecurity.authc.pam.ModularRealmAuthenticator(var9);
    org.jsecurity.subject.SimplePrincipalCollection var12 = new org.jsecurity.subject.SimplePrincipalCollection((java.util.Collection)var9, "org.jsecurity.authz.UnauthorizedException: org.jsecurity.session.ExpiredSessionException: ");
    org.jsecurity.session.UnknownSessionException var17 = new org.jsecurity.session.UnknownSessionException("dd\uFFFD", (java.io.Serializable)100.0f);
    org.jsecurity.session.SessionException var19 = new org.jsecurity.session.SessionException("dd\uFFFD", (java.lang.Throwable)var17, (java.io.Serializable)0);
    org.jsecurity.session.SessionException var20 = new org.jsecurity.session.SessionException("dd\uFFFD", (java.lang.Throwable)var17);
    var12.add((java.lang.Object)var20, "org.jsecurity.config.ConfigurationException: dd\uFFFD");
    var5.onLogout((org.jsecurity.subject.PrincipalCollection)var12);
    org.jsecurity.cache.HashtableCacheManager var24 = new org.jsecurity.cache.HashtableCacheManager();
    org.jsecurity.cache.Cache var26 = var24.getCache("\u0000\u0000");
    var5.setAuthorizationCache(var26);
    org.jsecurity.codec.CodecException var30 = new org.jsecurity.codec.CodecException("dd\uFFFD");
    org.jsecurity.authc.ConcurrentAccessException var31 = new org.jsecurity.authc.ConcurrentAccessException("org.jsecurity.authz.UnauthorizedException: org.jsecurity.session.ExpiredSessionException: ", (java.lang.Throwable)var30);
    org.jsecurity.subject.SimplePrincipalCollection var33 = new org.jsecurity.subject.SimplePrincipalCollection((java.lang.Object)var30, "");
    var5.onLogout((org.jsecurity.subject.PrincipalCollection)var33);
    var4.setRealm((org.jsecurity.realm.Realm)var5);
    java.lang.String[] var39 = new java.lang.String[] { "a2b823b1e72eae2b727289df8a00a89df8a0bab6ad8a89c4c5c7a9b62a270000"};
    var5.addAccount("a3e14b98-1050-4bcc-8787-431663db8814", "org.jsecurity.config.ConfigurationException: dd\uFFFD", var39);
    var5.addAccount("5d9f4a71-2f17-4e1c-9087-173c6026a805", "org.jsecurity.realm.text.PropertiesRealm_772");
    org.jsecurity.codec.CodecException var46 = new org.jsecurity.codec.CodecException("dd\uFFFD");
    org.jsecurity.authc.ConcurrentAccessException var47 = new org.jsecurity.authc.ConcurrentAccessException("org.jsecurity.authz.UnauthorizedException: org.jsecurity.session.ExpiredSessionException: ", (java.lang.Throwable)var46);
    org.jsecurity.subject.SimplePrincipalCollection var49 = new org.jsecurity.subject.SimplePrincipalCollection((java.lang.Object)var46, "");
    java.io.InputStream var51 = org.jsecurity.util.ClassUtils.getResourceAsStream("");
    java.lang.Object[] var52 = new java.lang.Object[] { var51};
    java.util.List var53 = org.jsecurity.util.CollectionUtils.asList(var52);
    org.jsecurity.authc.pam.ModularRealmAuthenticator var54 = new org.jsecurity.authc.pam.ModularRealmAuthenticator(var53);
    org.jsecurity.authc.pam.AllSuccessfulModularAuthenticationStrategy var55 = new org.jsecurity.authc.pam.AllSuccessfulModularAuthenticationStrategy();
    var54.setModularAuthenticationStrategy((org.jsecurity.authc.pam.ModularAuthenticationStrategy)var55);
    org.jsecurity.authz.SimpleAuthorizationInfo var57 = new org.jsecurity.authz.SimpleAuthorizationInfo();
    var57.addStringPermission("hi!");
    java.io.InputStream var61 = org.jsecurity.util.ClassUtils.getResourceAsStream("");
    java.lang.Object[] var62 = new java.lang.Object[] { var61};
    java.util.List var63 = org.jsecurity.util.CollectionUtils.asList(var62);
    var57.addRoles((java.util.Collection)var63);
    var54.setAuthenticationListeners((java.util.Collection)var63);
    org.jsecurity.realm.activedirectory.ActiveDirectoryRealm var66 = new org.jsecurity.realm.activedirectory.ActiveDirectoryRealm();
    var66.setPrincipalSuffix("");
    var54.setRealm((org.jsecurity.realm.Realm)var66);
    org.jsecurity.authc.pam.FirstSuccessfulAuthenticationStrategy var70 = new org.jsecurity.authc.pam.FirstSuccessfulAuthenticationStrategy();
    org.jsecurity.authz.UnauthorizedException var72 = new org.jsecurity.authz.UnauthorizedException("org.jsecurity.config.ConfigurationException: dd\uFFFD");
    java.lang.Throwable[] var73 = var72.getSuppressed();
    java.util.List var74 = org.jsecurity.util.CollectionUtils.asList((java.lang.Object[])var73);
    org.jsecurity.authc.UsernamePasswordToken var75 = new org.jsecurity.authc.UsernamePasswordToken();
    java.lang.String var76 = var75.getUsername();
    java.net.InetAddress var77 = var75.getInetAddress();
    org.jsecurity.authc.AuthenticationInfo var78 = var70.beforeAllAttempts((java.util.Collection)var74, (org.jsecurity.authc.AuthenticationToken)var75);
    var54.setModularAuthenticationStrategy((org.jsecurity.authc.pam.ModularAuthenticationStrategy)var70);
    org.jsecurity.authc.SimpleAccount var80 = new org.jsecurity.authc.SimpleAccount((org.jsecurity.subject.PrincipalCollection)var49, (java.lang.Object)var54);
    var49.clear();
    java.util.Set var82 = var49.asSet();
    org.jsecurity.authz.UnauthorizedException var84 = new org.jsecurity.authz.UnauthorizedException("org.jsecurity.config.ConfigurationException: dd\uFFFD");
    java.lang.Throwable[] var85 = var84.getSuppressed();
    java.util.List var86 = org.jsecurity.util.CollectionUtils.asList((java.lang.Object[])var85);
    org.jsecurity.authc.pam.ModularRealmAuthenticator var87 = new org.jsecurity.authc.pam.ModularRealmAuthenticator(var86);
    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      boolean[] var88 = var5.isPermitted((org.jsecurity.subject.PrincipalCollection)var49, var86);
      fail("Expected exception of type java.util.NoSuchElementException");
    } catch (java.util.NoSuchElementException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var1);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var2);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var3);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var7);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var8);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var9);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var26);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var39);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var51);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var52);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var53);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var61);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var62);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var63);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var73);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var74);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var76);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var77);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var78);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var82);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var85);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var86);

  }

  public void test197() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest7.test197");


    org.jsecurity.crypto.hash.Sha256Hash var1 = org.jsecurity.crypto.hash.Sha256Hash.fromBase64String("7e3919c4-0808-4dc3-b5c9-76633af849b7");
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var1);

  }

  public void test198() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest7.test198");


    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      java.lang.Object var1 = org.jsecurity.util.ClassUtils.newInstance("8e7db3c0-2758-4f8e-a57d-b6fdc593b63c");
      fail("Expected exception of type org.jsecurity.util.UnknownClassException");
    } catch (org.jsecurity.util.UnknownClassException e) {
      // Expected exception.
    }

  }

  public void test199() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest7.test199");


    org.jsecurity.session.UnknownSessionException var4 = new org.jsecurity.session.UnknownSessionException("dd\uFFFD", (java.io.Serializable)100.0f);
    org.jsecurity.config.ConfigurationException var5 = new org.jsecurity.config.ConfigurationException("dd\uFFFD", (java.lang.Throwable)var4);
    org.jsecurity.session.ExpiredSessionException var7 = new org.jsecurity.session.ExpiredSessionException("", (java.lang.Throwable)var5, (java.io.Serializable)true);
    org.jsecurity.authc.pam.UnsupportedTokenException var8 = new org.jsecurity.authc.pam.UnsupportedTokenException((java.lang.Throwable)var7);
    org.jsecurity.authc.IncorrectCredentialsException var9 = new org.jsecurity.authc.IncorrectCredentialsException((java.lang.Throwable)var7);
    org.jsecurity.io.ResourceException var10 = new org.jsecurity.io.ResourceException((java.lang.Throwable)var7);

  }

  public void test200() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest7.test200");


    org.jsecurity.session.mgt.eis.MemorySessionDAO var1 = new org.jsecurity.session.mgt.eis.MemorySessionDAO();
    org.jsecurity.cache.Cache var2 = var1.getActiveSessionsCache();
    org.jsecurity.cache.CacheManager var3 = var1.getCacheManager();
    org.jsecurity.cache.HashtableCacheManager var4 = new org.jsecurity.cache.HashtableCacheManager();
    org.jsecurity.cache.Cache var6 = var4.getCache("\u0000\u0000");
    var1.setActiveSessionsCache(var6);
    java.io.InputStream var9 = org.jsecurity.util.ClassUtils.getResourceAsStream("");
    java.lang.Object[] var10 = new java.lang.Object[] { var9};
    java.util.List var11 = org.jsecurity.util.CollectionUtils.asList(var10);
    org.jsecurity.authc.pam.ModularRealmAuthenticator var12 = new org.jsecurity.authc.pam.ModularRealmAuthenticator(var11);
    org.jsecurity.authc.pam.AllSuccessfulModularAuthenticationStrategy var13 = new org.jsecurity.authc.pam.AllSuccessfulModularAuthenticationStrategy();
    var12.setModularAuthenticationStrategy((org.jsecurity.authc.pam.ModularAuthenticationStrategy)var13);
    org.jsecurity.authz.SimpleAuthorizationInfo var15 = new org.jsecurity.authz.SimpleAuthorizationInfo();
    var15.addStringPermission("hi!");
    java.io.InputStream var19 = org.jsecurity.util.ClassUtils.getResourceAsStream("");
    java.lang.Object[] var20 = new java.lang.Object[] { var19};
    java.util.List var21 = org.jsecurity.util.CollectionUtils.asList(var20);
    var15.addRoles((java.util.Collection)var21);
    var12.setAuthenticationListeners((java.util.Collection)var21);
    org.jsecurity.realm.activedirectory.ActiveDirectoryRealm var24 = new org.jsecurity.realm.activedirectory.ActiveDirectoryRealm();
    var24.setPrincipalSuffix("");
    var12.setRealm((org.jsecurity.realm.Realm)var24);
    org.jsecurity.cache.HashtableCacheManager var28 = new org.jsecurity.cache.HashtableCacheManager();
    org.jsecurity.cache.Cache var30 = var28.getCache("\u0000\u0000");
    var24.setAuthorizationCache(var30);
    var1.setActiveSessionsCache(var30);
    org.jsecurity.session.mgt.SimpleSession var33 = new org.jsecurity.session.mgt.SimpleSession();
    java.io.Serializable var34 = var1.create((org.jsecurity.session.Session)var33);
    org.jsecurity.session.mgt.SimpleSession var35 = new org.jsecurity.session.mgt.SimpleSession();
    var35.touch();
    var35.validate();
    org.jsecurity.session.mgt.SimpleSession var38 = new org.jsecurity.session.mgt.SimpleSession();
    var38.setTimeout((-1L));
    org.jsecurity.session.mgt.SimpleSession var41 = new org.jsecurity.session.mgt.SimpleSession();
    java.util.Date var42 = var41.getLastAccessTime();
    var38.setLastAccessTime(var42);
    org.jsecurity.session.mgt.SimpleSession var44 = new org.jsecurity.session.mgt.SimpleSession();
    java.util.Date var45 = var44.getLastAccessTime();
    var38.setStopTimestamp(var45);
    var35.setLastAccessTime(var45);
    var33.setLastAccessTime(var45);
    org.jsecurity.session.mgt.ImmutableProxiedSession var49 = new org.jsecurity.session.mgt.ImmutableProxiedSession((org.jsecurity.session.Session)var33);
    org.jsecurity.session.ProxiedSession var50 = new org.jsecurity.session.ProxiedSession((org.jsecurity.session.Session)var33);
    org.jsecurity.crypto.hash.Md2Hash var53 = org.jsecurity.crypto.hash.Md2Hash.fromBase64String("a2b823b1e72eae2b727289df8a00a89df8a0bab6ad8a89c4c5c7a9b62a270000");
    org.jsecurity.authc.credential.Md2CredentialsMatcher var54 = new org.jsecurity.authc.credential.Md2CredentialsMatcher();
    org.jsecurity.authz.SimpleAuthorizingAccount var56 = new org.jsecurity.authz.SimpleAuthorizingAccount((java.lang.Object)"a2b823b1e72eae2b727289df8a00a89df8a0bab6ad8a89c4c5c7a9b62a270000", (java.lang.Object)var54, "");
    org.jsecurity.session.SessionException var57 = new org.jsecurity.session.SessionException("org.jsecurity.realm.SimpleAccountRealm-9-authorization", (java.io.Serializable)var56);
    org.jsecurity.session.mgt.ExecutorServiceSessionValidationScheduler var58 = new org.jsecurity.session.mgt.ExecutorServiceSessionValidationScheduler();
    var50.setAttribute((java.lang.Object)var57, (java.lang.Object)var58);
    org.jsecurity.util.UnknownClassException var61 = new org.jsecurity.util.UnknownClassException("b6cd6008-ae80-4bfd-ae0c-5041e0198a79");
    org.jsecurity.session.ExpiredSessionException var62 = new org.jsecurity.session.ExpiredSessionException("87b76e19-c6af-446b-babc-347943b1c6aa", (java.lang.Throwable)var57, (java.io.Serializable)var61);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var2);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var3);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var6);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var9);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var10);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var11);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var19);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var20);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var21);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var30);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var34 + "' != '" + "fd77d4ab-76f1-4f42-945b-4a62d37c29cb"+ "'", var34.equals("fd77d4ab-76f1-4f42-945b-4a62d37c29cb"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var42);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var45);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var53);

  }

  public void test201() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest7.test201");


    org.jsecurity.session.mgt.DelegatingSession var0 = new org.jsecurity.session.mgt.DelegatingSession();
    org.jsecurity.session.mgt.DefaultSessionManager var1 = new org.jsecurity.session.mgt.DefaultSessionManager();
    org.jsecurity.session.mgt.eis.MemorySessionDAO var2 = new org.jsecurity.session.mgt.eis.MemorySessionDAO();
    org.jsecurity.cache.Cache var3 = var2.getActiveSessionsCache();
    org.jsecurity.cache.CacheManager var4 = var2.getCacheManager();
    org.jsecurity.cache.HashtableCacheManager var5 = new org.jsecurity.cache.HashtableCacheManager();
    org.jsecurity.cache.Cache var7 = var5.getCache("\u0000\u0000");
    var2.setActiveSessionsCache(var7);
    java.io.InputStream var10 = org.jsecurity.util.ClassUtils.getResourceAsStream("");
    java.lang.Object[] var11 = new java.lang.Object[] { var10};
    java.util.List var12 = org.jsecurity.util.CollectionUtils.asList(var11);
    org.jsecurity.authc.pam.ModularRealmAuthenticator var13 = new org.jsecurity.authc.pam.ModularRealmAuthenticator(var12);
    org.jsecurity.authc.pam.AllSuccessfulModularAuthenticationStrategy var14 = new org.jsecurity.authc.pam.AllSuccessfulModularAuthenticationStrategy();
    var13.setModularAuthenticationStrategy((org.jsecurity.authc.pam.ModularAuthenticationStrategy)var14);
    org.jsecurity.authz.SimpleAuthorizationInfo var16 = new org.jsecurity.authz.SimpleAuthorizationInfo();
    var16.addStringPermission("hi!");
    java.io.InputStream var20 = org.jsecurity.util.ClassUtils.getResourceAsStream("");
    java.lang.Object[] var21 = new java.lang.Object[] { var20};
    java.util.List var22 = org.jsecurity.util.CollectionUtils.asList(var21);
    var16.addRoles((java.util.Collection)var22);
    var13.setAuthenticationListeners((java.util.Collection)var22);
    org.jsecurity.realm.activedirectory.ActiveDirectoryRealm var25 = new org.jsecurity.realm.activedirectory.ActiveDirectoryRealm();
    var25.setPrincipalSuffix("");
    var13.setRealm((org.jsecurity.realm.Realm)var25);
    org.jsecurity.cache.HashtableCacheManager var29 = new org.jsecurity.cache.HashtableCacheManager();
    org.jsecurity.cache.Cache var31 = var29.getCache("\u0000\u0000");
    var25.setAuthorizationCache(var31);
    var2.setActiveSessionsCache(var31);
    org.jsecurity.session.mgt.SimpleSession var34 = new org.jsecurity.session.mgt.SimpleSession();
    java.io.Serializable var35 = var2.create((org.jsecurity.session.Session)var34);
    var1.setSessionDAO((org.jsecurity.session.mgt.eis.SessionDAO)var2);
    var0.setSessionManager((org.jsecurity.session.mgt.SessionManager)var1);
    org.jsecurity.codec.CodecException var40 = new org.jsecurity.codec.CodecException("dd\uFFFD");
    org.jsecurity.authc.ConcurrentAccessException var41 = new org.jsecurity.authc.ConcurrentAccessException("org.jsecurity.authz.UnauthorizedException: org.jsecurity.session.ExpiredSessionException: ", (java.lang.Throwable)var40);
    org.jsecurity.subject.SimplePrincipalCollection var43 = new org.jsecurity.subject.SimplePrincipalCollection((java.lang.Object)var40, "");
    boolean var44 = var43.isEmpty();
    java.util.List var45 = var43.asList();
    org.jsecurity.authc.pam.ModularRealmAuthenticator var46 = new org.jsecurity.authc.pam.ModularRealmAuthenticator(var45);
    org.jsecurity.authc.pam.AtLeastOneSuccessfulModularAuthenticationStrategy var47 = new org.jsecurity.authc.pam.AtLeastOneSuccessfulModularAuthenticationStrategy();
    org.jsecurity.authc.pam.AllSuccessfulModularAuthenticationStrategy var49 = new org.jsecurity.authc.pam.AllSuccessfulModularAuthenticationStrategy();
    char[] var51 = new char[] { };
    org.jsecurity.authc.UsernamePasswordToken var53 = new org.jsecurity.authc.UsernamePasswordToken("hi!", var51, true);
    org.jsecurity.authc.SimpleAccount var54 = new org.jsecurity.authc.SimpleAccount();
    var54.setCredentialsExpired(false);
    boolean var57 = var54.isLocked();
    org.jsecurity.authc.AuthenticationInfo var58 = var49.afterAllAttempts((org.jsecurity.authc.AuthenticationToken)var53, (org.jsecurity.authc.AuthenticationInfo)var54);
    char[] var61 = new char[] { };
    org.jsecurity.authc.UsernamePasswordToken var63 = new org.jsecurity.authc.UsernamePasswordToken("hi!", var61, true);
    org.jsecurity.authc.UsernamePasswordToken var64 = new org.jsecurity.authc.UsernamePasswordToken("\u0000\u0000", var61);
    var53.setPassword(var61);
    org.jsecurity.authc.UsernamePasswordToken var66 = new org.jsecurity.authc.UsernamePasswordToken("\u0000\u0000\u0000", var61);
    org.jsecurity.realm.text.TextConfigurationRealm var67 = new org.jsecurity.realm.text.TextConfigurationRealm();
    java.io.InputStream var69 = org.jsecurity.util.ClassUtils.getResourceAsStream("");
    java.lang.Object[] var70 = new java.lang.Object[] { var69};
    java.util.List var71 = org.jsecurity.util.CollectionUtils.asList(var70);
    org.jsecurity.authc.pam.ModularRealmAuthenticator var72 = new org.jsecurity.authc.pam.ModularRealmAuthenticator(var71);
    org.jsecurity.subject.SimplePrincipalCollection var74 = new org.jsecurity.subject.SimplePrincipalCollection((java.util.Collection)var71, "org.jsecurity.authz.UnauthorizedException: org.jsecurity.session.ExpiredSessionException: ");
    org.jsecurity.session.UnknownSessionException var79 = new org.jsecurity.session.UnknownSessionException("dd\uFFFD", (java.io.Serializable)100.0f);
    org.jsecurity.session.SessionException var81 = new org.jsecurity.session.SessionException("dd\uFFFD", (java.lang.Throwable)var79, (java.io.Serializable)0);
    org.jsecurity.session.SessionException var82 = new org.jsecurity.session.SessionException("dd\uFFFD", (java.lang.Throwable)var79);
    var74.add((java.lang.Object)var82, "org.jsecurity.config.ConfigurationException: dd\uFFFD");
    var67.onLogout((org.jsecurity.subject.PrincipalCollection)var74);
    org.jsecurity.authc.ExpiredCredentialsException var87 = new org.jsecurity.authc.ExpiredCredentialsException();
    org.jsecurity.session.ExpiredSessionException var88 = new org.jsecurity.session.ExpiredSessionException("", (java.lang.Throwable)var87);
    java.lang.Throwable[] var89 = var88.getSuppressed();
    org.jsecurity.io.ResourceException var90 = new org.jsecurity.io.ResourceException((java.lang.Throwable)var88);
    org.jsecurity.authc.SimpleAuthenticationInfo var91 = new org.jsecurity.authc.SimpleAuthenticationInfo((org.jsecurity.subject.PrincipalCollection)var74, (java.lang.Object)var88);
    org.jsecurity.authc.AuthenticationInfo var92 = var47.afterAllAttempts((org.jsecurity.authc.AuthenticationToken)var66, (org.jsecurity.authc.AuthenticationInfo)var91);
    org.jsecurity.authz.SimpleAuthorizingAccount var94 = new org.jsecurity.authz.SimpleAuthorizingAccount((java.util.Collection)var45, (java.lang.Object)var91, "org.jsecurity.config.ConfigurationException: dd\uFFFD-4org.jsecurity.config.ConfigurationException: dd\uFFFD02-8085-950org.jsecurity.config.ConfigurationException: dd\uFFFDbb026org.jsecurity.config.ConfigurationException: dd\uFFFD06");
    var94.addRole("162a4550-2475-4cc9-b393-3917de249d8e");
    java.lang.Object var97 = var94.getCredentials();
    var0.setId((java.io.Serializable)var94);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var3);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var4);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var7);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var10);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var11);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var12);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var20);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var21);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var22);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var31);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var35 + "' != '" + "a0d27cec-eb78-4dd0-9b70-a633e28b4abb"+ "'", var35.equals("a0d27cec-eb78-4dd0-9b70-a633e28b4abb"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var44 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var45);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var51);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var57 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var58);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var61);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var69);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var70);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var71);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var89);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var92);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var97);

  }

  public void test202() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest7.test202");


    org.jsecurity.config.IniConfiguration var0 = new org.jsecurity.config.IniConfiguration();
    java.lang.String var1 = var0.getConfig();
    var0.setConfig("\uFFFD\uFFFD#\uFFFD\uFFFD.\uFFFD+rr\uFFFD\u07CA\u0000\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\u01E9\uFFFD*'\u0000\u0000");
    var0.setConfig("ff1bb54d-80f9-4308-a260-ff3ddf1355e9");
    org.jsecurity.realm.text.TextConfigurationRealm var6 = new org.jsecurity.realm.text.TextConfigurationRealm();
    java.io.InputStream var8 = org.jsecurity.util.ClassUtils.getResourceAsStream("");
    java.lang.Object[] var9 = new java.lang.Object[] { var8};
    java.util.List var10 = org.jsecurity.util.CollectionUtils.asList(var9);
    org.jsecurity.authc.pam.ModularRealmAuthenticator var11 = new org.jsecurity.authc.pam.ModularRealmAuthenticator(var10);
    org.jsecurity.subject.SimplePrincipalCollection var13 = new org.jsecurity.subject.SimplePrincipalCollection((java.util.Collection)var10, "org.jsecurity.authz.UnauthorizedException: org.jsecurity.session.ExpiredSessionException: ");
    org.jsecurity.session.UnknownSessionException var18 = new org.jsecurity.session.UnknownSessionException("dd\uFFFD", (java.io.Serializable)100.0f);
    org.jsecurity.session.SessionException var20 = new org.jsecurity.session.SessionException("dd\uFFFD", (java.lang.Throwable)var18, (java.io.Serializable)0);
    org.jsecurity.session.SessionException var21 = new org.jsecurity.session.SessionException("dd\uFFFD", (java.lang.Throwable)var18);
    var13.add((java.lang.Object)var21, "org.jsecurity.config.ConfigurationException: dd\uFFFD");
    var6.onLogout((org.jsecurity.subject.PrincipalCollection)var13);
    java.util.Collection var26 = var13.fromRealm("\u0000\u0000\u0000");
    org.jsecurity.session.mgt.eis.MemorySessionDAO var27 = new org.jsecurity.session.mgt.eis.MemorySessionDAO();
    org.jsecurity.authc.SimpleAuthenticationInfo var28 = new org.jsecurity.authc.SimpleAuthenticationInfo((org.jsecurity.subject.PrincipalCollection)var13, (java.lang.Object)var27);
    org.jsecurity.authz.SimpleAuthorizingAccount var30 = new org.jsecurity.authz.SimpleAuthorizingAccount((java.lang.Object)"ff1bb54d-80f9-4308-a260-ff3ddf1355e9", (java.lang.Object)var27, "330a41fd-f404-4b7f-8f3c-bc52c3f67c3e");
    var30.setCredentialsExpired(false);
    var30.addStringPermission("10f5b491-38ac-4c02-8085-950abb026a06");
    org.jsecurity.authc.pam.ModularRealmAuthenticator var35 = new org.jsecurity.authc.pam.ModularRealmAuthenticator();
    org.jsecurity.authc.pam.AtLeastOneSuccessfulModularAuthenticationStrategy var36 = new org.jsecurity.authc.pam.AtLeastOneSuccessfulModularAuthenticationStrategy();
    var35.setModularAuthenticationStrategy((org.jsecurity.authc.pam.ModularAuthenticationStrategy)var36);
    org.jsecurity.realm.jndi.JndiRealmFactory var38 = new org.jsecurity.realm.jndi.JndiRealmFactory();
    org.jsecurity.authc.ExpiredCredentialsException var40 = new org.jsecurity.authc.ExpiredCredentialsException();
    org.jsecurity.session.ExpiredSessionException var41 = new org.jsecurity.session.ExpiredSessionException("", (java.lang.Throwable)var40);
    java.lang.Throwable[] var42 = var41.getSuppressed();
    java.util.List var43 = org.jsecurity.util.CollectionUtils.asList((java.lang.Object[])var42);
    var38.setJndiNames((java.util.Collection)var43);
    org.jsecurity.authc.pam.AllSuccessfulModularAuthenticationStrategy var45 = new org.jsecurity.authc.pam.AllSuccessfulModularAuthenticationStrategy();
    char[] var47 = new char[] { };
    org.jsecurity.authc.UsernamePasswordToken var49 = new org.jsecurity.authc.UsernamePasswordToken("hi!", var47, true);
    org.jsecurity.authc.SimpleAccount var50 = new org.jsecurity.authc.SimpleAccount();
    var50.setCredentialsExpired(false);
    boolean var53 = var50.isLocked();
    org.jsecurity.authc.AuthenticationInfo var54 = var45.afterAllAttempts((org.jsecurity.authc.AuthenticationToken)var49, (org.jsecurity.authc.AuthenticationInfo)var50);
    char[] var58 = new char[] { '4', '#'};
    org.jsecurity.authc.UsernamePasswordToken var59 = new org.jsecurity.authc.UsernamePasswordToken("\u0000\u0000", var58);
    org.jsecurity.authc.SimpleAccount var60 = new org.jsecurity.authc.SimpleAccount();
    var60.setCredentialsExpired(false);
    var60.setCredentialsExpired(false);
    boolean var65 = var60.isCredentialsExpired();
    org.jsecurity.authc.AuthenticationInfo var66 = var45.afterAllAttempts((org.jsecurity.authc.AuthenticationToken)var59, (org.jsecurity.authc.AuthenticationInfo)var60);
    java.net.InetAddress var67 = var59.getInetAddress();
    org.jsecurity.authc.AuthenticationInfo var68 = var36.beforeAllAttempts((java.util.Collection)var43, (org.jsecurity.authc.AuthenticationToken)var59);
    boolean[] var69 = var30.isPermitted(var43);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var1);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var8);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var9);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var10);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var26);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var42);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var43);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var47);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var53 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var54);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var58);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var65 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var66);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var67);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var68);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var69);

  }

  public void test203() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest7.test203");


    org.jsecurity.realm.text.TextConfigurationRealm var3 = new org.jsecurity.realm.text.TextConfigurationRealm();
    java.io.InputStream var5 = org.jsecurity.util.ClassUtils.getResourceAsStream("");
    java.lang.Object[] var6 = new java.lang.Object[] { var5};
    java.util.List var7 = org.jsecurity.util.CollectionUtils.asList(var6);
    org.jsecurity.authc.pam.ModularRealmAuthenticator var8 = new org.jsecurity.authc.pam.ModularRealmAuthenticator(var7);
    org.jsecurity.subject.SimplePrincipalCollection var10 = new org.jsecurity.subject.SimplePrincipalCollection((java.util.Collection)var7, "org.jsecurity.authz.UnauthorizedException: org.jsecurity.session.ExpiredSessionException: ");
    org.jsecurity.session.UnknownSessionException var15 = new org.jsecurity.session.UnknownSessionException("dd\uFFFD", (java.io.Serializable)100.0f);
    org.jsecurity.session.SessionException var17 = new org.jsecurity.session.SessionException("dd\uFFFD", (java.lang.Throwable)var15, (java.io.Serializable)0);
    org.jsecurity.session.SessionException var18 = new org.jsecurity.session.SessionException("dd\uFFFD", (java.lang.Throwable)var15);
    var10.add((java.lang.Object)var18, "org.jsecurity.config.ConfigurationException: dd\uFFFD");
    var3.onLogout((org.jsecurity.subject.PrincipalCollection)var10);
    org.jsecurity.cache.HashtableCacheManager var22 = new org.jsecurity.cache.HashtableCacheManager();
    org.jsecurity.cache.Cache var24 = var22.getCache("\u0000\u0000");
    var3.setAuthorizationCache(var24);
    org.jsecurity.codec.CodecException var28 = new org.jsecurity.codec.CodecException("dd\uFFFD");
    org.jsecurity.authc.ConcurrentAccessException var29 = new org.jsecurity.authc.ConcurrentAccessException("org.jsecurity.authz.UnauthorizedException: org.jsecurity.session.ExpiredSessionException: ", (java.lang.Throwable)var28);
    org.jsecurity.subject.SimplePrincipalCollection var31 = new org.jsecurity.subject.SimplePrincipalCollection((java.lang.Object)var28, "");
    var3.onLogout((org.jsecurity.subject.PrincipalCollection)var31);
    var3.setRoleDefinitions("org.jsecurity.config.ConfigurationException: dd\uFFFD");
    java.lang.Class var35 = var3.getAuthenticationTokenClass();
    org.jsecurity.session.UnknownSessionException var36 = new org.jsecurity.session.UnknownSessionException("org.jsecurity.realm.text.PropertiesRealm_1154", (java.io.Serializable)var35);
    org.jsecurity.authc.pam.UnsupportedTokenException var37 = new org.jsecurity.authc.pam.UnsupportedTokenException("c3db38c3-be79-43a3-bba0-01550965c39b", (java.lang.Throwable)var36);
    org.jsecurity.authc.ExpiredCredentialsException var39 = new org.jsecurity.authc.ExpiredCredentialsException("org.jsecurity.authz.UnauthorizedException: org.jsecurity.session.ExpiredSessionException: ");
    org.jsecurity.session.UnknownSessionException var40 = new org.jsecurity.session.UnknownSessionException("17782185-43f9-48d9-81e6-210f3ea379e2", (java.lang.Throwable)var36, (java.io.Serializable)"org.jsecurity.authz.UnauthorizedException: org.jsecurity.session.ExpiredSessionException: ");
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var5);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var6);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var7);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var24);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var35);

  }

  public void test204() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest7.test204");


    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      java.io.InputStream var1 = org.jsecurity.io.ResourceUtils.getInputStreamForPath("a1db1a1b-7682-421b-9dba-5dd86b6ffd21");
      fail("Expected exception of type java.io.FileNotFoundException");
    } catch (java.io.FileNotFoundException e) {
      // Expected exception.
    }

  }

  public void test205() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest7.test205");


    org.jsecurity.realm.activedirectory.ActiveDirectoryRealm var0 = new org.jsecurity.realm.activedirectory.ActiveDirectoryRealm();
    org.jsecurity.authc.credential.Sha256CredentialsMatcher var1 = new org.jsecurity.authc.credential.Sha256CredentialsMatcher();
    var0.setCredentialsMatcher((org.jsecurity.authc.credential.CredentialsMatcher)var1);
    java.lang.String var3 = var0.getAuthorizationCacheName();
    var0.setPrincipalSuffix("org.jsecurity.config.ConfigurationException: dd\uFFFD");
    org.jsecurity.realm.text.TextConfigurationRealm var6 = new org.jsecurity.realm.text.TextConfigurationRealm();
    java.io.InputStream var8 = org.jsecurity.util.ClassUtils.getResourceAsStream("");
    java.lang.Object[] var9 = new java.lang.Object[] { var8};
    java.util.List var10 = org.jsecurity.util.CollectionUtils.asList(var9);
    org.jsecurity.authc.pam.ModularRealmAuthenticator var11 = new org.jsecurity.authc.pam.ModularRealmAuthenticator(var10);
    org.jsecurity.subject.SimplePrincipalCollection var13 = new org.jsecurity.subject.SimplePrincipalCollection((java.util.Collection)var10, "org.jsecurity.authz.UnauthorizedException: org.jsecurity.session.ExpiredSessionException: ");
    org.jsecurity.session.UnknownSessionException var18 = new org.jsecurity.session.UnknownSessionException("dd\uFFFD", (java.io.Serializable)100.0f);
    org.jsecurity.session.SessionException var20 = new org.jsecurity.session.SessionException("dd\uFFFD", (java.lang.Throwable)var18, (java.io.Serializable)0);
    org.jsecurity.session.SessionException var21 = new org.jsecurity.session.SessionException("dd\uFFFD", (java.lang.Throwable)var18);
    var13.add((java.lang.Object)var21, "org.jsecurity.config.ConfigurationException: dd\uFFFD");
    var6.onLogout((org.jsecurity.subject.PrincipalCollection)var13);
    var0.onLogout((org.jsecurity.subject.PrincipalCollection)var13);
    org.jsecurity.realm.SimpleAccountRealm var27 = new org.jsecurity.realm.SimpleAccountRealm("hi!");
    java.lang.Class var28 = var27.getAuthenticationTokenClass();
    java.util.Collection var29 = org.jsecurity.util.CollectionUtils.emptyCollection(var28);
    java.util.Collection var30 = var13.byType(var28);
    org.jsecurity.authz.ModularRealmAuthorizer var31 = new org.jsecurity.authz.ModularRealmAuthorizer(var30);
    org.jsecurity.mgt.DefaultSecurityManager var33 = new org.jsecurity.mgt.DefaultSecurityManager();
    java.io.InputStream var35 = org.jsecurity.util.ClassUtils.getResourceAsStream("");
    java.lang.Object[] var36 = new java.lang.Object[] { var35};
    java.util.List var37 = org.jsecurity.util.CollectionUtils.asList(var36);
    org.jsecurity.authc.pam.ModularRealmAuthenticator var38 = new org.jsecurity.authc.pam.ModularRealmAuthenticator(var37);
    org.jsecurity.authc.pam.AllSuccessfulModularAuthenticationStrategy var39 = new org.jsecurity.authc.pam.AllSuccessfulModularAuthenticationStrategy();
    var38.setModularAuthenticationStrategy((org.jsecurity.authc.pam.ModularAuthenticationStrategy)var39);
    org.jsecurity.authz.SimpleAuthorizationInfo var41 = new org.jsecurity.authz.SimpleAuthorizationInfo();
    var41.addStringPermission("hi!");
    java.io.InputStream var45 = org.jsecurity.util.ClassUtils.getResourceAsStream("");
    java.lang.Object[] var46 = new java.lang.Object[] { var45};
    java.util.List var47 = org.jsecurity.util.CollectionUtils.asList(var46);
    var41.addRoles((java.util.Collection)var47);
    var38.setAuthenticationListeners((java.util.Collection)var47);
    var33.setSessionListeners((java.util.Collection)var47);
    org.jsecurity.subject.Subject var51 = var33.getSubject();
    org.jsecurity.authz.permission.WildcardPermissionResolver var52 = new org.jsecurity.authz.permission.WildcardPermissionResolver();
    var33.setPermissionResolver((org.jsecurity.authz.permission.PermissionResolver)var52);
    java.util.Set var54 = org.jsecurity.util.PermissionUtils.resolveDelimitedPermissions("9370bad8-7774-4f3f-9431-c39c9f6aa37d", (org.jsecurity.authz.permission.PermissionResolver)var52);
    var31.setRealms((java.util.Collection)var54);
    org.jsecurity.realm.activedirectory.ActiveDirectoryRealm var57 = new org.jsecurity.realm.activedirectory.ActiveDirectoryRealm();
    var57.init();
    var57.setSystemPassword("dd\uFFFD");
    org.jsecurity.authz.aop.GuestAnnotationHandler var61 = new org.jsecurity.authz.aop.GuestAnnotationHandler();
    java.lang.Class var62 = var61.getAnnotationClass();
    var57.setAuthenticationTokenClass(var62);
    org.jsecurity.authz.permission.WildcardPermissionResolver var64 = new org.jsecurity.authz.permission.WildcardPermissionResolver();
    org.jsecurity.authz.Permission var66 = var64.resolvePermission("hi!");
    var57.setPermissionResolver((org.jsecurity.authz.permission.PermissionResolver)var64);
    java.util.Set var68 = org.jsecurity.util.PermissionUtils.resolveDelimitedPermissions("ZGT/", (org.jsecurity.authz.permission.PermissionResolver)var64);
    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      var31.setPermissionResolver((org.jsecurity.authz.permission.PermissionResolver)var64);
      fail("Expected exception of type java.lang.ClassCastException");
    } catch (java.lang.ClassCastException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var3);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var8);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var9);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var10);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var28);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var29);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var30);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var35);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var36);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var37);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var45);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var46);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var47);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var51);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var54);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var62);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var66);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var68);

  }

  public void test206() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest7.test206");


    org.jsecurity.mgt.DefaultSecurityManager var0 = new org.jsecurity.mgt.DefaultSecurityManager();
    java.io.InputStream var2 = org.jsecurity.util.ClassUtils.getResourceAsStream("");
    java.lang.Object[] var3 = new java.lang.Object[] { var2};
    java.util.List var4 = org.jsecurity.util.CollectionUtils.asList(var3);
    org.jsecurity.authc.pam.ModularRealmAuthenticator var5 = new org.jsecurity.authc.pam.ModularRealmAuthenticator(var4);
    org.jsecurity.authc.pam.AllSuccessfulModularAuthenticationStrategy var6 = new org.jsecurity.authc.pam.AllSuccessfulModularAuthenticationStrategy();
    var5.setModularAuthenticationStrategy((org.jsecurity.authc.pam.ModularAuthenticationStrategy)var6);
    org.jsecurity.authz.SimpleAuthorizationInfo var8 = new org.jsecurity.authz.SimpleAuthorizationInfo();
    var8.addStringPermission("hi!");
    java.io.InputStream var12 = org.jsecurity.util.ClassUtils.getResourceAsStream("");
    java.lang.Object[] var13 = new java.lang.Object[] { var12};
    java.util.List var14 = org.jsecurity.util.CollectionUtils.asList(var13);
    var8.addRoles((java.util.Collection)var14);
    var5.setAuthenticationListeners((java.util.Collection)var14);
    var0.setSessionListeners((java.util.Collection)var14);
    org.jsecurity.realm.text.TextConfigurationRealm var18 = new org.jsecurity.realm.text.TextConfigurationRealm();
    java.io.InputStream var20 = org.jsecurity.util.ClassUtils.getResourceAsStream("");
    java.lang.Object[] var21 = new java.lang.Object[] { var20};
    java.util.List var22 = org.jsecurity.util.CollectionUtils.asList(var21);
    org.jsecurity.authc.pam.ModularRealmAuthenticator var23 = new org.jsecurity.authc.pam.ModularRealmAuthenticator(var22);
    org.jsecurity.subject.SimplePrincipalCollection var25 = new org.jsecurity.subject.SimplePrincipalCollection((java.util.Collection)var22, "org.jsecurity.authz.UnauthorizedException: org.jsecurity.session.ExpiredSessionException: ");
    org.jsecurity.session.UnknownSessionException var30 = new org.jsecurity.session.UnknownSessionException("dd\uFFFD", (java.io.Serializable)100.0f);
    org.jsecurity.session.SessionException var32 = new org.jsecurity.session.SessionException("dd\uFFFD", (java.lang.Throwable)var30, (java.io.Serializable)0);
    org.jsecurity.session.SessionException var33 = new org.jsecurity.session.SessionException("dd\uFFFD", (java.lang.Throwable)var30);
    var25.add((java.lang.Object)var33, "org.jsecurity.config.ConfigurationException: dd\uFFFD");
    var18.onLogout((org.jsecurity.subject.PrincipalCollection)var25);
    org.jsecurity.authc.pam.FirstSuccessfulAuthenticationStrategy var37 = new org.jsecurity.authc.pam.FirstSuccessfulAuthenticationStrategy();
    org.jsecurity.authz.UnauthorizedException var39 = new org.jsecurity.authz.UnauthorizedException("org.jsecurity.config.ConfigurationException: dd\uFFFD");
    java.lang.Throwable[] var40 = var39.getSuppressed();
    java.util.List var41 = org.jsecurity.util.CollectionUtils.asList((java.lang.Object[])var40);
    org.jsecurity.authc.UsernamePasswordToken var42 = new org.jsecurity.authc.UsernamePasswordToken();
    java.lang.String var43 = var42.getUsername();
    java.net.InetAddress var44 = var42.getInetAddress();
    org.jsecurity.authc.AuthenticationInfo var45 = var37.beforeAllAttempts((java.util.Collection)var41, (org.jsecurity.authc.AuthenticationToken)var42);
    boolean[] var46 = var0.hasRoles((org.jsecurity.subject.PrincipalCollection)var25, var41);
    org.jsecurity.authz.permission.WildcardPermissionResolver var47 = new org.jsecurity.authz.permission.WildcardPermissionResolver();
    org.jsecurity.authz.Permission var49 = var47.resolvePermission("hi!");
    org.jsecurity.authz.Permission var51 = var47.resolvePermission("hi!");
    var0.setPermissionResolver((org.jsecurity.authz.permission.PermissionResolver)var47);
    org.jsecurity.session.mgt.DefaultSessionManager var53 = new org.jsecurity.session.mgt.DefaultSessionManager();
    org.jsecurity.mgt.DefaultSecurityManager var54 = new org.jsecurity.mgt.DefaultSecurityManager();
    org.jsecurity.authz.permission.WildcardPermissionResolver var55 = new org.jsecurity.authz.permission.WildcardPermissionResolver();
    var54.setPermissionResolver((org.jsecurity.authz.permission.PermissionResolver)var55);
    org.jsecurity.cache.CacheManager var57 = var54.getCacheManager();
    var53.setCacheManager(var57);
    long var59 = var53.getSessionValidationInterval();
    boolean var60 = var53.isSessionValidationSchedulerEnabled();
    var0.setSessionManager((org.jsecurity.session.mgt.SessionManager)var53);
    long var62 = var53.getSessionValidationInterval();
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var2);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var3);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var4);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var12);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var13);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var14);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var20);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var21);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var22);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var40);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var41);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var43);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var44);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var45);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var46);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var49);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var51);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var57);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var59 == 3600000L);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var60 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var62 == 3600000L);

  }

  public void test207() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest7.test207");


    org.jsecurity.authz.SimpleRole var0 = new org.jsecurity.authz.SimpleRole();
    org.jsecurity.authz.SimpleAuthorizationInfo var1 = new org.jsecurity.authz.SimpleAuthorizationInfo();
    var1.addRole("a2b823b1e72eae2b727289df8a00a89df8a0bab6ad8a89c4c5c7a9b62a270000");
    org.jsecurity.session.UnknownSessionException var8 = new org.jsecurity.session.UnknownSessionException("dd\uFFFD", (java.io.Serializable)100.0f);
    org.jsecurity.subject.SubjectException var9 = new org.jsecurity.subject.SubjectException("dd\uFFFD", (java.lang.Throwable)var8);
    org.jsecurity.io.SerializationException var10 = new org.jsecurity.io.SerializationException("", (java.lang.Throwable)var9);
    java.lang.Throwable[] var11 = var9.getSuppressed();
    java.util.Set var12 = org.jsecurity.util.CollectionUtils.asSet((java.lang.Object[])var11);
    var1.addRoles((java.util.Collection)var12);
    var0.addAll((java.util.Collection)var12);
    java.lang.String var15 = var0.getName();
    org.jsecurity.authz.SimpleRole var16 = new org.jsecurity.authz.SimpleRole();
    org.jsecurity.authz.permission.WildcardPermission var19 = new org.jsecurity.authz.permission.WildcardPermission("hi!", false);
    boolean var20 = var16.isPermitted((org.jsecurity.authz.Permission)var19);
    boolean var21 = var0.isPermitted((org.jsecurity.authz.Permission)var19);
    org.jsecurity.authz.permission.WildcardPermission var23 = new org.jsecurity.authz.permission.WildcardPermission("a2b823b1e72eae2b727289df8a00a89df8a0bab6ad8a89c4c5c7a9b62a270000");
    var0.add((org.jsecurity.authz.Permission)var23);
    org.jsecurity.authz.SimpleAuthorizationInfo var25 = new org.jsecurity.authz.SimpleAuthorizationInfo();
    var25.addStringPermission("hi!");
    java.io.InputStream var29 = org.jsecurity.util.ClassUtils.getResourceAsStream("");
    java.lang.Object[] var30 = new java.lang.Object[] { var29};
    java.util.List var31 = org.jsecurity.util.CollectionUtils.asList(var30);
    var25.addRoles((java.util.Collection)var31);
    java.util.Set var33 = var25.getRoles();
    var0.setPermissions(var33);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var11);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var12);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var15);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var20 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var21 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var29);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var30);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var31);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var33);

  }

  public void test208() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest7.test208");


    org.jsecurity.io.SerializationException var1 = new org.jsecurity.io.SerializationException("64631962-53d7-470e-ad1f-c62447f07c50");

  }

  public void test209() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest7.test209");


    java.io.InputStream var1 = org.jsecurity.util.ClassUtils.getResourceAsStream("");
    java.lang.Object[] var2 = new java.lang.Object[] { var1};
    java.util.List var3 = org.jsecurity.util.CollectionUtils.asList(var2);
    org.jsecurity.authc.pam.ModularRealmAuthenticator var4 = new org.jsecurity.authc.pam.ModularRealmAuthenticator(var3);
    org.jsecurity.subject.SimplePrincipalCollection var6 = new org.jsecurity.subject.SimplePrincipalCollection((java.util.Collection)var3, "org.jsecurity.authz.UnauthorizedException: org.jsecurity.session.ExpiredSessionException: ");
    java.util.List var7 = var6.asList();
    org.jsecurity.realm.activedirectory.ActiveDirectoryRealm var9 = new org.jsecurity.realm.activedirectory.ActiveDirectoryRealm();
    org.jsecurity.authc.credential.Sha256CredentialsMatcher var10 = new org.jsecurity.authc.credential.Sha256CredentialsMatcher();
    var9.setCredentialsMatcher((org.jsecurity.authc.credential.CredentialsMatcher)var10);
    java.lang.String var12 = var9.getAuthorizationCacheName();
    var9.setPrincipalSuffix("org.jsecurity.config.ConfigurationException: dd\uFFFD");
    org.jsecurity.authz.permission.PermissionResolver var15 = var9.getPermissionResolver();
    java.util.Set var16 = org.jsecurity.util.PermissionUtils.resolveDelimitedPermissions("NfxhYN7ItBfRAmDBmprtU73ghfEEPpcDJrHPkZ06wiY=", var15);
    var6.addAll((java.util.Collection)var16, "cff098b5-6d79-4f6d-93d3-148185d0b987");
    org.jsecurity.realm.text.TextConfigurationRealm var19 = new org.jsecurity.realm.text.TextConfigurationRealm();
    java.io.InputStream var21 = org.jsecurity.util.ClassUtils.getResourceAsStream("");
    java.lang.Object[] var22 = new java.lang.Object[] { var21};
    java.util.List var23 = org.jsecurity.util.CollectionUtils.asList(var22);
    org.jsecurity.authc.pam.ModularRealmAuthenticator var24 = new org.jsecurity.authc.pam.ModularRealmAuthenticator(var23);
    org.jsecurity.subject.SimplePrincipalCollection var26 = new org.jsecurity.subject.SimplePrincipalCollection((java.util.Collection)var23, "org.jsecurity.authz.UnauthorizedException: org.jsecurity.session.ExpiredSessionException: ");
    org.jsecurity.session.UnknownSessionException var31 = new org.jsecurity.session.UnknownSessionException("dd\uFFFD", (java.io.Serializable)100.0f);
    org.jsecurity.session.SessionException var33 = new org.jsecurity.session.SessionException("dd\uFFFD", (java.lang.Throwable)var31, (java.io.Serializable)0);
    org.jsecurity.session.SessionException var34 = new org.jsecurity.session.SessionException("dd\uFFFD", (java.lang.Throwable)var31);
    var26.add((java.lang.Object)var34, "org.jsecurity.config.ConfigurationException: dd\uFFFD");
    var19.onLogout((org.jsecurity.subject.PrincipalCollection)var26);
    org.jsecurity.cache.HashtableCacheManager var38 = new org.jsecurity.cache.HashtableCacheManager();
    org.jsecurity.cache.Cache var40 = var38.getCache("\u0000\u0000");
    var19.setAuthorizationCache(var40);
    org.jsecurity.codec.CodecException var44 = new org.jsecurity.codec.CodecException("dd\uFFFD");
    org.jsecurity.authc.ConcurrentAccessException var45 = new org.jsecurity.authc.ConcurrentAccessException("org.jsecurity.authz.UnauthorizedException: org.jsecurity.session.ExpiredSessionException: ", (java.lang.Throwable)var44);
    org.jsecurity.subject.SimplePrincipalCollection var47 = new org.jsecurity.subject.SimplePrincipalCollection((java.lang.Object)var44, "");
    var19.onLogout((org.jsecurity.subject.PrincipalCollection)var47);
    var19.setRoleDefinitions("hi!");
    org.jsecurity.authc.pam.AllSuccessfulModularAuthenticationStrategy var51 = new org.jsecurity.authc.pam.AllSuccessfulModularAuthenticationStrategy();
    char[] var53 = new char[] { };
    org.jsecurity.authc.UsernamePasswordToken var55 = new org.jsecurity.authc.UsernamePasswordToken("hi!", var53, true);
    org.jsecurity.authc.SimpleAccount var56 = new org.jsecurity.authc.SimpleAccount();
    var56.setCredentialsExpired(false);
    boolean var59 = var56.isLocked();
    org.jsecurity.authc.AuthenticationInfo var60 = var51.afterAllAttempts((org.jsecurity.authc.AuthenticationToken)var55, (org.jsecurity.authc.AuthenticationInfo)var56);
    boolean var61 = var19.supports((org.jsecurity.authc.AuthenticationToken)var55);
    java.lang.String var62 = var19.getUserDefinitions();
    java.lang.Class var63 = var19.getAuthenticationTokenClass();
    java.lang.Object var64 = var6.oneByType(var63);
    java.io.InputStream var66 = org.jsecurity.util.ClassUtils.getResourceAsStream("");
    java.lang.Object[] var67 = new java.lang.Object[] { var66};
    java.util.List var68 = org.jsecurity.util.CollectionUtils.asList(var67);
    org.jsecurity.authc.pam.ModularRealmAuthenticator var69 = new org.jsecurity.authc.pam.ModularRealmAuthenticator(var68);
    org.jsecurity.subject.SimplePrincipalCollection var71 = new org.jsecurity.subject.SimplePrincipalCollection((java.util.Collection)var68, "org.jsecurity.authz.UnauthorizedException: org.jsecurity.session.ExpiredSessionException: ");
    org.jsecurity.io.ResourceException var75 = new org.jsecurity.io.ResourceException("hi!");
    org.jsecurity.authc.UnknownAccountException var76 = new org.jsecurity.authc.UnknownAccountException((java.lang.Throwable)var75);
    org.jsecurity.session.StoppedSessionException var77 = new org.jsecurity.session.StoppedSessionException("dd\uFFFD", (java.io.Serializable)var75);
    org.jsecurity.session.UnknownSessionException var78 = new org.jsecurity.session.UnknownSessionException("org.jsecurity.authz.UnauthorizedException: org.jsecurity.session.ExpiredSessionException: ", (java.lang.Throwable)var75);
    boolean var79 = var71.equals((java.lang.Object)var75);
    org.jsecurity.authz.aop.RoleAnnotationMethodInterceptor var80 = new org.jsecurity.authz.aop.RoleAnnotationMethodInterceptor();
    org.jsecurity.aop.AnnotationHandler var81 = var80.getHandler();
    java.lang.Class var82 = var81.getAnnotationClass();
    java.lang.Object var83 = var71.oneByType(var82);
    java.util.Collection var84 = var6.byType(var82);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var1);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var2);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var3);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var7);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var12);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var15);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var16);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var21);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var22);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var23);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var40);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var53);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var59 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var60);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var61 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var62);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var63);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var64);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var66);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var67);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var68);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var79 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var81);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var82);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var83);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var84);

  }

  public void test210() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest7.test210");


    org.jsecurity.authz.HostUnauthorizedException var1 = new org.jsecurity.authz.HostUnauthorizedException("6464ff");
    org.jsecurity.crypto.hash.Md5Hash var2 = new org.jsecurity.crypto.hash.Md5Hash((java.lang.Object)"6464ff");
    org.jsecurity.authz.SimpleAuthorizationInfo var3 = new org.jsecurity.authz.SimpleAuthorizationInfo();
    var3.addRole("a2b823b1e72eae2b727289df8a00a89df8a0bab6ad8a89c4c5c7a9b62a270000");
    org.jsecurity.session.UnknownSessionException var10 = new org.jsecurity.session.UnknownSessionException("dd\uFFFD", (java.io.Serializable)100.0f);
    org.jsecurity.subject.SubjectException var11 = new org.jsecurity.subject.SubjectException("dd\uFFFD", (java.lang.Throwable)var10);
    org.jsecurity.io.SerializationException var12 = new org.jsecurity.io.SerializationException("", (java.lang.Throwable)var11);
    java.lang.Throwable[] var13 = var11.getSuppressed();
    java.util.Set var14 = org.jsecurity.util.CollectionUtils.asSet((java.lang.Object[])var13);
    var3.addRoles((java.util.Collection)var14);
    boolean var16 = var2.equals((java.lang.Object)var14);
    org.jsecurity.crypto.BlowfishCipher var17 = new org.jsecurity.crypto.BlowfishCipher();
    java.security.Key var18 = org.jsecurity.crypto.BlowfishCipher.generateNewKey();
    var17.setKey(var18);
    java.security.Key var20 = org.jsecurity.crypto.BlowfishCipher.generateNewKey();
    var17.setKey(var20);
    byte[] var25 = new byte[] { (byte)100, (byte)100, (byte)(-1)};
    java.lang.String var26 = org.jsecurity.codec.CodecSupport.toString(var25);
    char[] var27 = org.jsecurity.codec.CodecSupport.toChars(var25);
    boolean var28 = org.jsecurity.codec.Base64.isBase64(var25);
    boolean var29 = org.jsecurity.codec.Base64.isBase64(var25);
    boolean var30 = org.jsecurity.codec.Base64.isBase64(var25);
    java.lang.String var31 = org.jsecurity.codec.Hex.encodeToString(var25);
    byte[] var35 = new byte[] { (byte)100, (byte)100, (byte)(-1)};
    java.lang.String var36 = org.jsecurity.codec.CodecSupport.toString(var35);
    char[] var37 = org.jsecurity.codec.CodecSupport.toChars(var35);
    boolean var38 = org.jsecurity.codec.Base64.isBase64(var35);
    boolean var39 = org.jsecurity.codec.Base64.isBase64(var35);
    boolean var40 = org.jsecurity.codec.Base64.isBase64(var35);
    java.lang.String var41 = org.jsecurity.codec.Base64.encodeToString(var35);
    byte[] var42 = var17.encrypt(var25, var35);
    var2.setBytes(var25);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var13);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var14);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var16 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var18);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var20);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var25);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var26 + "' != '" + "dd\uFFFD"+ "'", var26.equals("dd\uFFFD"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var27);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var28 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var29 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var30 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var31 + "' != '" + "6464ff"+ "'", var31.equals("6464ff"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var35);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var36 + "' != '" + "dd\uFFFD"+ "'", var36.equals("dd\uFFFD"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var37);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var38 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var39 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var40 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var41 + "' != '" + "ZGT/"+ "'", var41.equals("ZGT/"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var42);

  }

  public void test211() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest7.test211");


    java.lang.String[] var4 = org.jsecurity.util.StringUtils.split("7588c73b-817b-46f6-83df-ca6fcb0a0826", '4', '4', '4');
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var4);

  }

  public void test212() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest7.test212");


    org.jsecurity.session.UnknownSessionException var6 = new org.jsecurity.session.UnknownSessionException("dd\uFFFD", (java.io.Serializable)100.0f);
    org.jsecurity.subject.SubjectException var7 = new org.jsecurity.subject.SubjectException("dd\uFFFD", (java.lang.Throwable)var6);
    org.jsecurity.session.InvalidSessionException var8 = new org.jsecurity.session.InvalidSessionException("hi!", (java.lang.Throwable)var7);
    org.jsecurity.session.SessionException var9 = new org.jsecurity.session.SessionException("dd\uFFFD", (java.lang.Throwable)var7);
    org.jsecurity.authc.CredentialsException var10 = new org.jsecurity.authc.CredentialsException("783ccd31-48a8-42dd-890f-df885a7baaff", (java.lang.Throwable)var9);
    java.lang.String var11 = var10.toString();
    org.jsecurity.subject.SimplePrincipalCollection var13 = new org.jsecurity.subject.SimplePrincipalCollection((java.lang.Object)var10, "9d388eff-106e-47d9-8180-843fdfd13dce");
    org.jsecurity.realm.text.TextConfigurationRealm var14 = new org.jsecurity.realm.text.TextConfigurationRealm();
    java.io.InputStream var16 = org.jsecurity.util.ClassUtils.getResourceAsStream("");
    java.lang.Object[] var17 = new java.lang.Object[] { var16};
    java.util.List var18 = org.jsecurity.util.CollectionUtils.asList(var17);
    org.jsecurity.authc.pam.ModularRealmAuthenticator var19 = new org.jsecurity.authc.pam.ModularRealmAuthenticator(var18);
    org.jsecurity.subject.SimplePrincipalCollection var21 = new org.jsecurity.subject.SimplePrincipalCollection((java.util.Collection)var18, "org.jsecurity.authz.UnauthorizedException: org.jsecurity.session.ExpiredSessionException: ");
    org.jsecurity.session.UnknownSessionException var26 = new org.jsecurity.session.UnknownSessionException("dd\uFFFD", (java.io.Serializable)100.0f);
    org.jsecurity.session.SessionException var28 = new org.jsecurity.session.SessionException("dd\uFFFD", (java.lang.Throwable)var26, (java.io.Serializable)0);
    org.jsecurity.session.SessionException var29 = new org.jsecurity.session.SessionException("dd\uFFFD", (java.lang.Throwable)var26);
    var21.add((java.lang.Object)var29, "org.jsecurity.config.ConfigurationException: dd\uFFFD");
    var14.onLogout((org.jsecurity.subject.PrincipalCollection)var21);
    org.jsecurity.cache.HashtableCacheManager var33 = new org.jsecurity.cache.HashtableCacheManager();
    org.jsecurity.cache.Cache var35 = var33.getCache("\u0000\u0000");
    var14.setAuthorizationCache(var35);
    org.jsecurity.codec.CodecException var39 = new org.jsecurity.codec.CodecException("dd\uFFFD");
    org.jsecurity.authc.ConcurrentAccessException var40 = new org.jsecurity.authc.ConcurrentAccessException("org.jsecurity.authz.UnauthorizedException: org.jsecurity.session.ExpiredSessionException: ", (java.lang.Throwable)var39);
    org.jsecurity.subject.SimplePrincipalCollection var42 = new org.jsecurity.subject.SimplePrincipalCollection((java.lang.Object)var39, "");
    var14.onLogout((org.jsecurity.subject.PrincipalCollection)var42);
    var14.setRoleDefinitions("org.jsecurity.config.ConfigurationException: dd\uFFFD");
    java.lang.String var46 = var14.getUserDefinitions();
    java.lang.Class var47 = var14.getAuthenticationTokenClass();
    java.util.Collection var48 = var13.byType(var47);
    org.jsecurity.authc.UsernamePasswordToken var51 = new org.jsecurity.authc.UsernamePasswordToken("6fce63f0-31b0-4392-a29b-db1fc03a58d9", "9e3d1131-586f-4bbb-9a00-b1186bff9c0b");
    boolean var52 = var13.equals((java.lang.Object)"9e3d1131-586f-4bbb-9a00-b1186bff9c0b");
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var11 + "' != '" + "org.jsecurity.authc.CredentialsException: 783ccd31-48a8-42dd-890f-df885a7baaff"+ "'", var11.equals("org.jsecurity.authc.CredentialsException: 783ccd31-48a8-42dd-890f-df885a7baaff"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var16);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var17);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var18);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var35);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var46);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var47);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var48);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var52 == false);

  }

  public void test213() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest7.test213");


    org.jsecurity.session.UnknownSessionException var4 = new org.jsecurity.session.UnknownSessionException("dd\uFFFD", (java.io.Serializable)100.0f);
    org.jsecurity.subject.SubjectException var5 = new org.jsecurity.subject.SubjectException("dd\uFFFD", (java.lang.Throwable)var4);
    org.jsecurity.io.SerializationException var6 = new org.jsecurity.io.SerializationException("", (java.lang.Throwable)var5);
    java.lang.Throwable[] var7 = var5.getSuppressed();
    java.lang.Throwable[] var8 = var5.getSuppressed();
    org.jsecurity.authz.SimpleAuthorizationInfo var11 = new org.jsecurity.authz.SimpleAuthorizationInfo();
    var11.addRole("a2b823b1e72eae2b727289df8a00a89df8a0bab6ad8a89c4c5c7a9b62a270000");
    org.jsecurity.session.UnknownSessionException var18 = new org.jsecurity.session.UnknownSessionException("dd\uFFFD", (java.io.Serializable)100.0f);
    org.jsecurity.subject.SubjectException var19 = new org.jsecurity.subject.SubjectException("dd\uFFFD", (java.lang.Throwable)var18);
    org.jsecurity.io.SerializationException var20 = new org.jsecurity.io.SerializationException("", (java.lang.Throwable)var19);
    java.lang.Throwable[] var21 = var19.getSuppressed();
    java.util.Set var22 = org.jsecurity.util.CollectionUtils.asSet((java.lang.Object[])var21);
    var11.addRoles((java.util.Collection)var22);
    java.io.InputStream var25 = org.jsecurity.util.ClassUtils.getResourceAsStream("");
    java.lang.Object[] var26 = new java.lang.Object[] { var25};
    java.util.List var27 = org.jsecurity.util.CollectionUtils.asList(var26);
    org.jsecurity.authc.pam.ModularRealmAuthenticator var28 = new org.jsecurity.authc.pam.ModularRealmAuthenticator(var27);
    org.jsecurity.subject.SimplePrincipalCollection var30 = new org.jsecurity.subject.SimplePrincipalCollection((java.util.Collection)var27, "org.jsecurity.authz.UnauthorizedException: org.jsecurity.session.ExpiredSessionException: ");
    org.jsecurity.session.UnknownSessionException var35 = new org.jsecurity.session.UnknownSessionException("dd\uFFFD", (java.io.Serializable)100.0f);
    org.jsecurity.session.SessionException var37 = new org.jsecurity.session.SessionException("dd\uFFFD", (java.lang.Throwable)var35, (java.io.Serializable)0);
    org.jsecurity.session.SessionException var38 = new org.jsecurity.session.SessionException("dd\uFFFD", (java.lang.Throwable)var35);
    var30.add((java.lang.Object)var38, "org.jsecurity.config.ConfigurationException: dd\uFFFD");
    java.util.Set var41 = var30.asSet();
    org.jsecurity.authz.SimpleAuthorizingAccount var42 = new org.jsecurity.authz.SimpleAuthorizingAccount((java.lang.Object)var8, (java.lang.Object)"\u0000\u0000\u0000", "\u0000\u0000\u0000", var22, var41);
    org.jsecurity.authz.SimpleRole var44 = var42.getRole("\u0000\u0000\u0000");
    var42.addRole("985ef082-f13d-463b-a5a4-b88c15841261");
    java.util.Collection var47 = var42.getStringPermissions();
    org.jsecurity.authz.permission.WildcardPermissionResolver var49 = new org.jsecurity.authz.permission.WildcardPermissionResolver();
    java.util.Set var50 = org.jsecurity.util.PermissionUtils.resolveDelimitedPermissions("a2b823b1e72eae2b727289df8a00a89df8a0bab6ad8a89c4c5c7a9b62a270000", (org.jsecurity.authz.permission.PermissionResolver)var49);
    org.jsecurity.authz.Permission var52 = var49.resolvePermission("6f8b35fd-0848-49a4-9560-659760616ad8");
    var42.addObjectPermission(var52);
    boolean var54 = var42.isCredentialsExpired();
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var7);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var8);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var21);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var22);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var25);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var26);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var27);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var41);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var44);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var47);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var50);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var52);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var54 == false);

  }

  public void test214() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest7.test214");


    org.jsecurity.mgt.DefaultSecurityManager var0 = new org.jsecurity.mgt.DefaultSecurityManager();
    java.io.InputStream var2 = org.jsecurity.util.ClassUtils.getResourceAsStream("");
    java.lang.Object[] var3 = new java.lang.Object[] { var2};
    java.util.List var4 = org.jsecurity.util.CollectionUtils.asList(var3);
    org.jsecurity.authc.pam.ModularRealmAuthenticator var5 = new org.jsecurity.authc.pam.ModularRealmAuthenticator(var4);
    org.jsecurity.authc.pam.AllSuccessfulModularAuthenticationStrategy var6 = new org.jsecurity.authc.pam.AllSuccessfulModularAuthenticationStrategy();
    var5.setModularAuthenticationStrategy((org.jsecurity.authc.pam.ModularAuthenticationStrategy)var6);
    org.jsecurity.authz.SimpleAuthorizationInfo var8 = new org.jsecurity.authz.SimpleAuthorizationInfo();
    var8.addStringPermission("hi!");
    java.io.InputStream var12 = org.jsecurity.util.ClassUtils.getResourceAsStream("");
    java.lang.Object[] var13 = new java.lang.Object[] { var12};
    java.util.List var14 = org.jsecurity.util.CollectionUtils.asList(var13);
    var8.addRoles((java.util.Collection)var14);
    var5.setAuthenticationListeners((java.util.Collection)var14);
    var0.setSessionListeners((java.util.Collection)var14);
    org.jsecurity.authc.pam.ModularRealmAuthenticator var18 = new org.jsecurity.authc.pam.ModularRealmAuthenticator();
    org.jsecurity.authz.permission.InvalidPermissionStringException var21 = new org.jsecurity.authz.permission.InvalidPermissionStringException("", "dd\uFFFD");
    org.jsecurity.JSecurityException var23 = new org.jsecurity.JSecurityException("");
    org.jsecurity.authc.SimpleAuthenticationInfo var25 = new org.jsecurity.authc.SimpleAuthenticationInfo((java.lang.Object)var21, (java.lang.Object)"", "org.jsecurity.authz.UnauthorizedException: org.jsecurity.session.ExpiredSessionException: ");
    org.jsecurity.subject.PrincipalCollection var26 = var25.getPrincipals();
    var18.onLogout(var26);
    var0.setAuthenticator((org.jsecurity.authc.Authenticator)var18);
    org.jsecurity.codec.CodecException var31 = new org.jsecurity.codec.CodecException("dd\uFFFD");
    org.jsecurity.authc.ConcurrentAccessException var32 = new org.jsecurity.authc.ConcurrentAccessException("org.jsecurity.authz.UnauthorizedException: org.jsecurity.session.ExpiredSessionException: ", (java.lang.Throwable)var31);
    org.jsecurity.subject.SimplePrincipalCollection var34 = new org.jsecurity.subject.SimplePrincipalCollection((java.lang.Object)var31, "");
    java.io.InputStream var36 = org.jsecurity.util.ClassUtils.getResourceAsStream("");
    java.lang.Object[] var37 = new java.lang.Object[] { var36};
    java.util.List var38 = org.jsecurity.util.CollectionUtils.asList(var37);
    org.jsecurity.authc.pam.ModularRealmAuthenticator var39 = new org.jsecurity.authc.pam.ModularRealmAuthenticator(var38);
    org.jsecurity.authc.pam.AllSuccessfulModularAuthenticationStrategy var40 = new org.jsecurity.authc.pam.AllSuccessfulModularAuthenticationStrategy();
    var39.setModularAuthenticationStrategy((org.jsecurity.authc.pam.ModularAuthenticationStrategy)var40);
    org.jsecurity.authz.SimpleAuthorizationInfo var42 = new org.jsecurity.authz.SimpleAuthorizationInfo();
    var42.addStringPermission("hi!");
    java.io.InputStream var46 = org.jsecurity.util.ClassUtils.getResourceAsStream("");
    java.lang.Object[] var47 = new java.lang.Object[] { var46};
    java.util.List var48 = org.jsecurity.util.CollectionUtils.asList(var47);
    var42.addRoles((java.util.Collection)var48);
    var39.setAuthenticationListeners((java.util.Collection)var48);
    org.jsecurity.realm.activedirectory.ActiveDirectoryRealm var51 = new org.jsecurity.realm.activedirectory.ActiveDirectoryRealm();
    var51.setPrincipalSuffix("");
    var39.setRealm((org.jsecurity.realm.Realm)var51);
    org.jsecurity.authc.pam.FirstSuccessfulAuthenticationStrategy var55 = new org.jsecurity.authc.pam.FirstSuccessfulAuthenticationStrategy();
    org.jsecurity.authz.UnauthorizedException var57 = new org.jsecurity.authz.UnauthorizedException("org.jsecurity.config.ConfigurationException: dd\uFFFD");
    java.lang.Throwable[] var58 = var57.getSuppressed();
    java.util.List var59 = org.jsecurity.util.CollectionUtils.asList((java.lang.Object[])var58);
    org.jsecurity.authc.UsernamePasswordToken var60 = new org.jsecurity.authc.UsernamePasswordToken();
    java.lang.String var61 = var60.getUsername();
    java.net.InetAddress var62 = var60.getInetAddress();
    org.jsecurity.authc.AuthenticationInfo var63 = var55.beforeAllAttempts((java.util.Collection)var59, (org.jsecurity.authc.AuthenticationToken)var60);
    var39.setModularAuthenticationStrategy((org.jsecurity.authc.pam.ModularAuthenticationStrategy)var55);
    org.jsecurity.authc.SimpleAccount var65 = new org.jsecurity.authc.SimpleAccount((org.jsecurity.subject.PrincipalCollection)var34, (java.lang.Object)var39);
    var0.setAuthenticator((org.jsecurity.authc.Authenticator)var39);
    org.jsecurity.authc.pam.ModularAuthenticationStrategy var67 = var39.getModularAuthenticationStrategy();
    byte[] var72 = new byte[] { (byte)100, (byte)100, (byte)(-1)};
    java.lang.String var73 = org.jsecurity.codec.CodecSupport.toString(var72);
    char[] var74 = org.jsecurity.codec.CodecSupport.toChars(var72);
    boolean var75 = org.jsecurity.codec.Base64.isBase64(var72);
    boolean var76 = org.jsecurity.codec.Base64.isBase64(var72);
    boolean var77 = org.jsecurity.codec.Base64.isBase64(var72);
    char[] var78 = org.jsecurity.codec.CodecSupport.toChars(var72);
    char[] var82 = new char[] { };
    org.jsecurity.authc.UsernamePasswordToken var84 = new org.jsecurity.authc.UsernamePasswordToken("hi!", var82, true);
    org.jsecurity.authc.UsernamePasswordToken var85 = new org.jsecurity.authc.UsernamePasswordToken("\u0000\u0000", var82);
    org.jsecurity.session.mgt.SimpleSession var86 = new org.jsecurity.session.mgt.SimpleSession();
    var86.setTimeout((-1L));
    org.jsecurity.session.mgt.SimpleSession var89 = new org.jsecurity.session.mgt.SimpleSession();
    java.util.Date var90 = var89.getLastAccessTime();
    var86.setLastAccessTime(var90);
    java.net.InetAddress var92 = var86.getHostAddress();
    var85.setInetAddress(var92);
    org.jsecurity.authc.UsernamePasswordToken var94 = new org.jsecurity.authc.UsernamePasswordToken("1afdbe33-7f88-41a7-81da-4454ab8b0297", var78, false, var92);
    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      org.jsecurity.authc.AuthenticationInfo var95 = var39.authenticate((org.jsecurity.authc.AuthenticationToken)var94);
      fail("Expected exception of type org.jsecurity.authc.AuthenticationException");
    } catch (org.jsecurity.authc.AuthenticationException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var2);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var3);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var4);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var12);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var13);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var14);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var26);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var36);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var37);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var38);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var46);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var47);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var48);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var58);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var59);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var61);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var62);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var63);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var67);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var72);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var73 + "' != '" + "dd\uFFFD"+ "'", var73.equals("dd\uFFFD"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var74);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var75 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var76 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var77 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var78);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var82);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var90);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var92);

  }

  public void test215() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest7.test215");


    org.jsecurity.session.mgt.DefaultSessionManager var0 = new org.jsecurity.session.mgt.DefaultSessionManager();
    org.jsecurity.session.mgt.eis.MemorySessionDAO var1 = new org.jsecurity.session.mgt.eis.MemorySessionDAO();
    org.jsecurity.cache.Cache var2 = var1.getActiveSessionsCache();
    org.jsecurity.cache.CacheManager var3 = var1.getCacheManager();
    org.jsecurity.cache.HashtableCacheManager var4 = new org.jsecurity.cache.HashtableCacheManager();
    org.jsecurity.cache.Cache var6 = var4.getCache("\u0000\u0000");
    var1.setActiveSessionsCache(var6);
    java.io.InputStream var9 = org.jsecurity.util.ClassUtils.getResourceAsStream("");
    java.lang.Object[] var10 = new java.lang.Object[] { var9};
    java.util.List var11 = org.jsecurity.util.CollectionUtils.asList(var10);
    org.jsecurity.authc.pam.ModularRealmAuthenticator var12 = new org.jsecurity.authc.pam.ModularRealmAuthenticator(var11);
    org.jsecurity.authc.pam.AllSuccessfulModularAuthenticationStrategy var13 = new org.jsecurity.authc.pam.AllSuccessfulModularAuthenticationStrategy();
    var12.setModularAuthenticationStrategy((org.jsecurity.authc.pam.ModularAuthenticationStrategy)var13);
    org.jsecurity.authz.SimpleAuthorizationInfo var15 = new org.jsecurity.authz.SimpleAuthorizationInfo();
    var15.addStringPermission("hi!");
    java.io.InputStream var19 = org.jsecurity.util.ClassUtils.getResourceAsStream("");
    java.lang.Object[] var20 = new java.lang.Object[] { var19};
    java.util.List var21 = org.jsecurity.util.CollectionUtils.asList(var20);
    var15.addRoles((java.util.Collection)var21);
    var12.setAuthenticationListeners((java.util.Collection)var21);
    org.jsecurity.realm.activedirectory.ActiveDirectoryRealm var24 = new org.jsecurity.realm.activedirectory.ActiveDirectoryRealm();
    var24.setPrincipalSuffix("");
    var12.setRealm((org.jsecurity.realm.Realm)var24);
    org.jsecurity.cache.HashtableCacheManager var28 = new org.jsecurity.cache.HashtableCacheManager();
    org.jsecurity.cache.Cache var30 = var28.getCache("\u0000\u0000");
    var24.setAuthorizationCache(var30);
    var1.setActiveSessionsCache(var30);
    org.jsecurity.session.mgt.SimpleSession var33 = new org.jsecurity.session.mgt.SimpleSession();
    java.io.Serializable var34 = var1.create((org.jsecurity.session.Session)var33);
    var0.setSessionDAO((org.jsecurity.session.mgt.eis.SessionDAO)var1);
    org.jsecurity.authc.pam.AllSuccessfulModularAuthenticationStrategy var36 = new org.jsecurity.authc.pam.AllSuccessfulModularAuthenticationStrategy();
    char[] var38 = new char[] { };
    org.jsecurity.authc.UsernamePasswordToken var40 = new org.jsecurity.authc.UsernamePasswordToken("hi!", var38, true);
    org.jsecurity.authc.SimpleAccount var41 = new org.jsecurity.authc.SimpleAccount();
    var41.setCredentialsExpired(false);
    boolean var44 = var41.isLocked();
    org.jsecurity.authc.AuthenticationInfo var45 = var36.afterAllAttempts((org.jsecurity.authc.AuthenticationToken)var40, (org.jsecurity.authc.AuthenticationInfo)var41);
    char[] var49 = new char[] { '4', '#'};
    org.jsecurity.authc.UsernamePasswordToken var50 = new org.jsecurity.authc.UsernamePasswordToken("\u0000\u0000", var49);
    org.jsecurity.authc.SimpleAccount var51 = new org.jsecurity.authc.SimpleAccount();
    var51.setCredentialsExpired(false);
    var51.setCredentialsExpired(false);
    boolean var56 = var51.isCredentialsExpired();
    org.jsecurity.authc.AuthenticationInfo var57 = var36.afterAllAttempts((org.jsecurity.authc.AuthenticationToken)var50, (org.jsecurity.authc.AuthenticationInfo)var51);
    org.jsecurity.realm.activedirectory.ActiveDirectoryRealm var58 = new org.jsecurity.realm.activedirectory.ActiveDirectoryRealm();
    org.jsecurity.authc.credential.Sha256CredentialsMatcher var59 = new org.jsecurity.authc.credential.Sha256CredentialsMatcher();
    var58.setCredentialsMatcher((org.jsecurity.authc.credential.CredentialsMatcher)var59);
    java.lang.String var61 = var58.getAuthorizationCacheName();
    org.jsecurity.authc.UsernamePasswordToken var62 = new org.jsecurity.authc.UsernamePasswordToken();
    java.lang.String var63 = var62.getUsername();
    java.lang.Object var64 = var62.getPrincipal();
    boolean var65 = var58.supports((org.jsecurity.authc.AuthenticationToken)var62);
    org.jsecurity.session.UnknownSessionException var69 = new org.jsecurity.session.UnknownSessionException("dd\uFFFD", (java.io.Serializable)100.0f);
    org.jsecurity.session.SessionException var71 = new org.jsecurity.session.SessionException("dd\uFFFD", (java.lang.Throwable)var69, (java.io.Serializable)0);
    org.jsecurity.authc.SimpleAuthenticationInfo var74 = new org.jsecurity.authc.SimpleAuthenticationInfo((java.lang.Object)0, (java.lang.Object)10, "hi!");
    java.lang.Object var75 = var74.getCredentials();
    java.lang.String var76 = var74.toString();
    org.jsecurity.authc.AuthenticationInfo var77 = var36.afterAllAttempts((org.jsecurity.authc.AuthenticationToken)var62, (org.jsecurity.authc.AuthenticationInfo)var74);
    org.jsecurity.session.mgt.eis.MemorySessionDAO var78 = new org.jsecurity.session.mgt.eis.MemorySessionDAO();
    org.jsecurity.cache.Cache var79 = var78.getActiveSessionsCache();
    var78.setActiveSessionsCacheName("dd\uFFFD");
    var74.setCredentials((java.lang.Object)var78);
    var0.setSessionDAO((org.jsecurity.session.mgt.eis.SessionDAO)var78);
    org.jsecurity.session.mgt.ExecutorServiceSessionValidationScheduler var84 = new org.jsecurity.session.mgt.ExecutorServiceSessionValidationScheduler((org.jsecurity.session.mgt.ValidatingSessionManager)var0);
    var84.run();
    var84.run();
    var84.enableSessionValidation();
    boolean var88 = var84.isEnabled();
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var2);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var3);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var6);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var9);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var10);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var11);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var19);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var20);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var21);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var30);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var34 + "' != '" + "b510046e-8dd2-43de-928d-f194dc8ef489"+ "'", var34.equals("b510046e-8dd2-43de-928d-f194dc8ef489"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var38);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var44 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var45);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var49);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var56 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var57);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var61);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var63);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var64);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var65 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var75 + "' != '" + 10+ "'", var75.equals(10));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var77);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var79);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var88 == true);

  }

  public void test216() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest7.test216");


    org.jsecurity.crypto.hash.Sha256Hash var1 = org.jsecurity.crypto.hash.Sha256Hash.fromBase64String("92ec7657-39a0-4fe8-843e-f3915140dc01");
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var1);

  }

  public void test217() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest7.test217");


    org.jsecurity.session.mgt.DefaultSessionManager var0 = new org.jsecurity.session.mgt.DefaultSessionManager();
    org.jsecurity.session.mgt.eis.MemorySessionDAO var1 = new org.jsecurity.session.mgt.eis.MemorySessionDAO();
    org.jsecurity.cache.Cache var2 = var1.getActiveSessionsCache();
    org.jsecurity.cache.CacheManager var3 = var1.getCacheManager();
    org.jsecurity.cache.HashtableCacheManager var4 = new org.jsecurity.cache.HashtableCacheManager();
    org.jsecurity.cache.Cache var6 = var4.getCache("\u0000\u0000");
    var1.setActiveSessionsCache(var6);
    java.io.InputStream var9 = org.jsecurity.util.ClassUtils.getResourceAsStream("");
    java.lang.Object[] var10 = new java.lang.Object[] { var9};
    java.util.List var11 = org.jsecurity.util.CollectionUtils.asList(var10);
    org.jsecurity.authc.pam.ModularRealmAuthenticator var12 = new org.jsecurity.authc.pam.ModularRealmAuthenticator(var11);
    org.jsecurity.authc.pam.AllSuccessfulModularAuthenticationStrategy var13 = new org.jsecurity.authc.pam.AllSuccessfulModularAuthenticationStrategy();
    var12.setModularAuthenticationStrategy((org.jsecurity.authc.pam.ModularAuthenticationStrategy)var13);
    org.jsecurity.authz.SimpleAuthorizationInfo var15 = new org.jsecurity.authz.SimpleAuthorizationInfo();
    var15.addStringPermission("hi!");
    java.io.InputStream var19 = org.jsecurity.util.ClassUtils.getResourceAsStream("");
    java.lang.Object[] var20 = new java.lang.Object[] { var19};
    java.util.List var21 = org.jsecurity.util.CollectionUtils.asList(var20);
    var15.addRoles((java.util.Collection)var21);
    var12.setAuthenticationListeners((java.util.Collection)var21);
    org.jsecurity.realm.activedirectory.ActiveDirectoryRealm var24 = new org.jsecurity.realm.activedirectory.ActiveDirectoryRealm();
    var24.setPrincipalSuffix("");
    var12.setRealm((org.jsecurity.realm.Realm)var24);
    org.jsecurity.cache.HashtableCacheManager var28 = new org.jsecurity.cache.HashtableCacheManager();
    org.jsecurity.cache.Cache var30 = var28.getCache("\u0000\u0000");
    var24.setAuthorizationCache(var30);
    var1.setActiveSessionsCache(var30);
    org.jsecurity.session.mgt.SimpleSession var33 = new org.jsecurity.session.mgt.SimpleSession();
    java.io.Serializable var34 = var1.create((org.jsecurity.session.Session)var33);
    var0.setSessionDAO((org.jsecurity.session.mgt.eis.SessionDAO)var1);
    long var36 = var0.getSessionValidationInterval();
    long var37 = var0.getSessionValidationInterval();
    var0.setGlobalSessionTimeout(1);
    var0.validateSessions();
    org.jsecurity.realm.SimpleAccountRealm var42 = new org.jsecurity.realm.SimpleAccountRealm("hi!");
    char[] var45 = new char[] { };
    org.jsecurity.authc.UsernamePasswordToken var47 = new org.jsecurity.authc.UsernamePasswordToken("hi!", var45, true);
    org.jsecurity.authc.UsernamePasswordToken var48 = new org.jsecurity.authc.UsernamePasswordToken("\u0000\u0000", var45);
    java.lang.Object var49 = var48.getPrincipal();
    boolean var50 = var42.supports((org.jsecurity.authc.AuthenticationToken)var48);
    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      var0.stop((java.io.Serializable)var48);
      fail("Expected exception of type org.jsecurity.session.UnknownSessionException");
    } catch (org.jsecurity.session.UnknownSessionException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var2);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var3);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var6);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var9);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var10);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var11);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var19);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var20);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var21);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var30);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var34 + "' != '" + "aa7c92d7-cdf1-4951-ac42-366527f77860"+ "'", var34.equals("aa7c92d7-cdf1-4951-ac42-366527f77860"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var36 == 3600000L);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var37 == 3600000L);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var45);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var49 + "' != '" + "\u0000\u0000"+ "'", var49.equals("\u0000\u0000"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var50 == true);

  }

  public void test218() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest7.test218");


    org.jsecurity.realm.activedirectory.ActiveDirectoryRealm var0 = new org.jsecurity.realm.activedirectory.ActiveDirectoryRealm();
    var0.init();
    var0.init();
    org.jsecurity.realm.activedirectory.ActiveDirectoryRealm var3 = new org.jsecurity.realm.activedirectory.ActiveDirectoryRealm();
    org.jsecurity.authc.credential.Sha256CredentialsMatcher var4 = new org.jsecurity.authc.credential.Sha256CredentialsMatcher();
    var3.setCredentialsMatcher((org.jsecurity.authc.credential.CredentialsMatcher)var4);
    java.lang.String var6 = var3.getAuthorizationCacheName();
    var3.setUrl("hi!");
    org.jsecurity.realm.ldap.DefaultLdapContextFactory var9 = new org.jsecurity.realm.ldap.DefaultLdapContextFactory();
    var3.setLdapContextFactory((org.jsecurity.realm.ldap.LdapContextFactory)var9);
    var9.setAuthentication("dd\uFFFD");
    var0.setLdapContextFactory((org.jsecurity.realm.ldap.LdapContextFactory)var9);
    var9.setSystemUsername("cbfc3e1d-dc49-47b1-a5ab-57e5cb694d7d");
    var9.setUsePooling(false);
    var9.setReferral("org.jsecurity.realm.activedirectory.ActiveDirectoryRealm_3463");
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var6);

  }

  public void test219() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest7.test219");


    org.jsecurity.session.SessionException var1 = new org.jsecurity.session.SessionException();
    org.jsecurity.io.ResourceException var2 = new org.jsecurity.io.ResourceException((java.lang.Throwable)var1);
    org.jsecurity.session.mgt.SimpleSession var3 = new org.jsecurity.session.mgt.SimpleSession();
    var3.setTimeout((-1L));
    org.jsecurity.session.mgt.SimpleSession var6 = new org.jsecurity.session.mgt.SimpleSession();
    java.util.Date var7 = var6.getLastAccessTime();
    var3.setLastAccessTime(var7);
    org.jsecurity.session.mgt.SimpleSession var9 = new org.jsecurity.session.mgt.SimpleSession();
    java.util.Date var10 = var9.getLastAccessTime();
    var3.setStopTimestamp(var10);
    java.net.InetAddress var12 = var3.getHostAddress();
    org.jsecurity.session.mgt.SimpleSession var13 = new org.jsecurity.session.mgt.SimpleSession(var12);
    org.jsecurity.session.StoppedSessionException var14 = new org.jsecurity.session.StoppedSessionException("c2a40cd3-e772-4d57-8121-37333df4820c", (java.lang.Throwable)var1, (java.io.Serializable)var12);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var7);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var10);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var12);

  }

  public void test220() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest7.test220");


    java.io.InputStream var1 = org.jsecurity.util.ClassUtils.getResourceAsStream("");
    java.lang.Object[] var2 = new java.lang.Object[] { var1};
    java.util.List var3 = org.jsecurity.util.CollectionUtils.asList(var2);
    org.jsecurity.authc.pam.ModularRealmAuthenticator var4 = new org.jsecurity.authc.pam.ModularRealmAuthenticator(var3);
    org.jsecurity.authc.pam.FirstSuccessfulAuthenticationStrategy var5 = new org.jsecurity.authc.pam.FirstSuccessfulAuthenticationStrategy();
    org.jsecurity.authz.UnauthorizedException var7 = new org.jsecurity.authz.UnauthorizedException("org.jsecurity.config.ConfigurationException: dd\uFFFD");
    java.lang.Throwable[] var8 = var7.getSuppressed();
    java.util.List var9 = org.jsecurity.util.CollectionUtils.asList((java.lang.Object[])var8);
    org.jsecurity.authc.UsernamePasswordToken var10 = new org.jsecurity.authc.UsernamePasswordToken();
    java.lang.String var11 = var10.getUsername();
    java.net.InetAddress var12 = var10.getInetAddress();
    org.jsecurity.authc.AuthenticationInfo var13 = var5.beforeAllAttempts((java.util.Collection)var9, (org.jsecurity.authc.AuthenticationToken)var10);
    org.jsecurity.realm.SimpleAccountRealm var15 = new org.jsecurity.realm.SimpleAccountRealm("hi!");
    java.lang.Class var16 = var15.getAuthenticationTokenClass();
    java.util.Collection var17 = org.jsecurity.util.CollectionUtils.emptyCollection(var16);
    org.jsecurity.authc.pam.AllSuccessfulModularAuthenticationStrategy var18 = new org.jsecurity.authc.pam.AllSuccessfulModularAuthenticationStrategy();
    char[] var20 = new char[] { };
    org.jsecurity.authc.UsernamePasswordToken var22 = new org.jsecurity.authc.UsernamePasswordToken("hi!", var20, true);
    org.jsecurity.authc.SimpleAccount var23 = new org.jsecurity.authc.SimpleAccount();
    var23.setCredentialsExpired(false);
    boolean var26 = var23.isLocked();
    org.jsecurity.authc.AuthenticationInfo var27 = var18.afterAllAttempts((org.jsecurity.authc.AuthenticationToken)var22, (org.jsecurity.authc.AuthenticationInfo)var23);
    org.jsecurity.authc.AuthenticationInfo var28 = var5.beforeAllAttempts(var17, (org.jsecurity.authc.AuthenticationToken)var22);
    var4.setModularAuthenticationStrategy((org.jsecurity.authc.pam.ModularAuthenticationStrategy)var5);
    org.jsecurity.realm.text.TextConfigurationRealm var30 = new org.jsecurity.realm.text.TextConfigurationRealm();
    org.jsecurity.realm.text.TextConfigurationRealm var31 = new org.jsecurity.realm.text.TextConfigurationRealm();
    java.io.InputStream var33 = org.jsecurity.util.ClassUtils.getResourceAsStream("");
    java.lang.Object[] var34 = new java.lang.Object[] { var33};
    java.util.List var35 = org.jsecurity.util.CollectionUtils.asList(var34);
    org.jsecurity.authc.pam.ModularRealmAuthenticator var36 = new org.jsecurity.authc.pam.ModularRealmAuthenticator(var35);
    org.jsecurity.subject.SimplePrincipalCollection var38 = new org.jsecurity.subject.SimplePrincipalCollection((java.util.Collection)var35, "org.jsecurity.authz.UnauthorizedException: org.jsecurity.session.ExpiredSessionException: ");
    org.jsecurity.session.UnknownSessionException var43 = new org.jsecurity.session.UnknownSessionException("dd\uFFFD", (java.io.Serializable)100.0f);
    org.jsecurity.session.SessionException var45 = new org.jsecurity.session.SessionException("dd\uFFFD", (java.lang.Throwable)var43, (java.io.Serializable)0);
    org.jsecurity.session.SessionException var46 = new org.jsecurity.session.SessionException("dd\uFFFD", (java.lang.Throwable)var43);
    var38.add((java.lang.Object)var46, "org.jsecurity.config.ConfigurationException: dd\uFFFD");
    var31.onLogout((org.jsecurity.subject.PrincipalCollection)var38);
    org.jsecurity.cache.HashtableCacheManager var50 = new org.jsecurity.cache.HashtableCacheManager();
    org.jsecurity.cache.Cache var52 = var50.getCache("\u0000\u0000");
    var31.setAuthorizationCache(var52);
    org.jsecurity.codec.CodecException var56 = new org.jsecurity.codec.CodecException("dd\uFFFD");
    org.jsecurity.authc.ConcurrentAccessException var57 = new org.jsecurity.authc.ConcurrentAccessException("org.jsecurity.authz.UnauthorizedException: org.jsecurity.session.ExpiredSessionException: ", (java.lang.Throwable)var56);
    org.jsecurity.subject.SimplePrincipalCollection var59 = new org.jsecurity.subject.SimplePrincipalCollection((java.lang.Object)var56, "");
    var31.onLogout((org.jsecurity.subject.PrincipalCollection)var59);
    var31.setRoleDefinitions("hi!");
    org.jsecurity.authc.pam.AllSuccessfulModularAuthenticationStrategy var63 = new org.jsecurity.authc.pam.AllSuccessfulModularAuthenticationStrategy();
    char[] var65 = new char[] { };
    org.jsecurity.authc.UsernamePasswordToken var67 = new org.jsecurity.authc.UsernamePasswordToken("hi!", var65, true);
    org.jsecurity.authc.SimpleAccount var68 = new org.jsecurity.authc.SimpleAccount();
    var68.setCredentialsExpired(false);
    boolean var71 = var68.isLocked();
    org.jsecurity.authc.AuthenticationInfo var72 = var63.afterAllAttempts((org.jsecurity.authc.AuthenticationToken)var67, (org.jsecurity.authc.AuthenticationInfo)var68);
    boolean var73 = var31.supports((org.jsecurity.authc.AuthenticationToken)var67);
    org.jsecurity.authc.SimpleAccount var74 = new org.jsecurity.authc.SimpleAccount();
    var74.setCredentialsExpired(false);
    org.jsecurity.authc.AuthenticationInfo var77 = var5.beforeAttempt((org.jsecurity.realm.Realm)var30, (org.jsecurity.authc.AuthenticationToken)var67, (org.jsecurity.authc.AuthenticationInfo)var74);
    org.jsecurity.authz.permission.WildcardPermissionResolver var79 = new org.jsecurity.authz.permission.WildcardPermissionResolver();
    java.util.Set var80 = org.jsecurity.util.PermissionUtils.resolveDelimitedPermissions("7edc3e5f-37f7-4a22-9779-4609545bccd8", (org.jsecurity.authz.permission.PermissionResolver)var79);
    org.jsecurity.subject.SimplePrincipalCollection var82 = new org.jsecurity.subject.SimplePrincipalCollection((java.lang.Object)"7edc3e5f-37f7-4a22-9779-4609545bccd8", "c237631f-f5b6-4602-ad39-91738c85cc84");
    var30.onLogout((org.jsecurity.subject.PrincipalCollection)var82);
    java.lang.String var84 = var30.getRoleDefinitions();
    java.lang.String var85 = var30.getRoleDefinitions();
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var1);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var2);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var3);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var8);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var9);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var11);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var12);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var13);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var16);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var17);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var20);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var26 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var27);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var28);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var33);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var34);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var35);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var52);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var65);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var71 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var72);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var73 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var77);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var80);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var84);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var85);

  }

  public void test221() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest7.test221");


    org.jsecurity.authc.UsernamePasswordToken var3 = new org.jsecurity.authc.UsernamePasswordToken("3008602b-f37d-459d-973e-0453ee1d8c4b", "eb54b1dc-17ba-41ed-a123-385372f86108", false);

  }

  public void test222() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest7.test222");


    org.jsecurity.io.DefaultSerializer var0 = new org.jsecurity.io.DefaultSerializer();
    org.jsecurity.io.IniResource var1 = new org.jsecurity.io.IniResource();
    java.util.Map var2 = var1.getSections();
    java.lang.String var3 = var1.getCharsetName();
    org.jsecurity.config.ReflectionBuilder var4 = new org.jsecurity.config.ReflectionBuilder();
    org.jsecurity.io.IniResource var5 = new org.jsecurity.io.IniResource();
    java.util.Map var6 = var5.getSections();
    var4.setObjects(var6);
    org.jsecurity.io.IniResource var8 = new org.jsecurity.io.IniResource();
    java.util.Map var9 = var8.getSections();
    java.util.Map var10 = var4.buildObjects(var9);
    var1.setSections(var10);
    org.jsecurity.realm.activedirectory.ActiveDirectoryRealm var12 = new org.jsecurity.realm.activedirectory.ActiveDirectoryRealm();
    org.jsecurity.authc.credential.Sha256CredentialsMatcher var13 = new org.jsecurity.authc.credential.Sha256CredentialsMatcher();
    var12.setCredentialsMatcher((org.jsecurity.authc.credential.CredentialsMatcher)var13);
    java.lang.String var15 = var12.getAuthorizationCacheName();
    var12.setUrl("hi!");
    org.jsecurity.realm.ldap.DefaultLdapContextFactory var18 = new org.jsecurity.realm.ldap.DefaultLdapContextFactory();
    var12.setLdapContextFactory((org.jsecurity.realm.ldap.LdapContextFactory)var18);
    org.jsecurity.config.ReflectionBuilder var20 = new org.jsecurity.config.ReflectionBuilder();
    org.jsecurity.io.IniResource var21 = new org.jsecurity.io.IniResource();
    var21.setCharsetName("org.jsecurity.authz.UnauthorizedException: org.jsecurity.session.ExpiredSessionException: ");
    java.util.Map var24 = var21.getSections();
    java.util.Map var25 = var20.buildObjects(var24);
    org.jsecurity.config.ReflectionBuilder var26 = new org.jsecurity.config.ReflectionBuilder();
    org.jsecurity.io.IniResource var27 = new org.jsecurity.io.IniResource();
    var27.setCharsetName("org.jsecurity.authz.UnauthorizedException: org.jsecurity.session.ExpiredSessionException: ");
    java.util.Map var30 = var27.getSections();
    java.util.Map var31 = var26.buildObjects(var30);
    java.util.Map var32 = var20.buildObjects(var31);
    java.util.Map var33 = var20.getObjects();
    var18.setAdditionalEnvironment(var33);
    org.jsecurity.config.ReflectionBuilder var35 = new org.jsecurity.config.ReflectionBuilder();
    org.jsecurity.io.IniResource var36 = new org.jsecurity.io.IniResource();
    java.util.Map var37 = var36.getSections();
    var35.setObjects(var37);
    org.jsecurity.realm.activedirectory.ActiveDirectoryRealm var39 = new org.jsecurity.realm.activedirectory.ActiveDirectoryRealm();
    var39.init();
    var39.init();
    org.jsecurity.config.ReflectionBuilder var42 = new org.jsecurity.config.ReflectionBuilder();
    org.jsecurity.config.ReflectionBuilder var43 = new org.jsecurity.config.ReflectionBuilder();
    org.jsecurity.io.IniResource var44 = new org.jsecurity.io.IniResource();
    var44.setCharsetName("org.jsecurity.authz.UnauthorizedException: org.jsecurity.session.ExpiredSessionException: ");
    java.util.Map var47 = var44.getSections();
    java.util.Map var48 = var43.buildObjects(var47);
    org.jsecurity.config.ReflectionBuilder var49 = new org.jsecurity.config.ReflectionBuilder();
    org.jsecurity.io.IniResource var50 = new org.jsecurity.io.IniResource();
    var50.setCharsetName("org.jsecurity.authz.UnauthorizedException: org.jsecurity.session.ExpiredSessionException: ");
    java.util.Map var53 = var50.getSections();
    java.util.Map var54 = var49.buildObjects(var53);
    java.util.Map var55 = var43.buildObjects(var54);
    java.util.Map var56 = var42.buildObjects(var55);
    var39.setGroupRolesMap(var56);
    var35.setObjects(var56);
    org.jsecurity.config.ReflectionBuilder var59 = new org.jsecurity.config.ReflectionBuilder(var56);
    var18.setAdditionalEnvironment(var56);
    var1.setSections(var56);
    byte[] var62 = var0.serialize((java.lang.Object)var1);
    java.lang.String var63 = org.jsecurity.codec.CodecSupport.toString(var62);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var2);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var3);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var6);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var9);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var10);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var15);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var24);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var25);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var30);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var31);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var32);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var33);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var37);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var47);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var48);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var53);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var54);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var55);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var56);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var62);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var63 + "' != '" + "\uFFFD\uFFFD\u0000\u0005sr\u0000\u001Corg.jsecurity.io.IniResourced\uFFFD\uFFFDJ\uFFFD\uFFFD\u0011\uFFFD\u0002\u0000\u0001L\u0000\bsectionst\u0000\u000FLjava/util/Map;xr\u0000\u001Dorg.jsecurity.io.TextResource\uFFFD^\u04CAz\uFFFD\uFFFD\uFFFD\u0002\u0000\u0001L\u0000\u000BcharsetNamet\u0000\u0012Ljava/lang/String;xr\u0000!org.jsecurity.io.AbstractResource\uFFFDR\uFFFD\uFFFDK\uFFFD\uFFFDs\u0002\u0000\u0000xppsr\u0000\u0017java.util.LinkedHashMap4\uFFFDN\\\u0010l\uFFFD\uFFFD\u0002\u0000\u0001Z\u0000\u000BaccessOrderxr\u0000\u0011java.util.HashMap\u0005\u0007\uFFFD\uFFFD\uFFFD\u0016`\uFFFD\u0003\u0000\u0002F\u0000\nloadFactorI\u0000\tthresholdxp?@\u0000\u0000\u0000\u0000\u0000\u0010w\b\u0000\u0000\u0000\u0010\u0000\u0000\u0000\u0000x\u0000"+ "'", var63.equals("\uFFFD\uFFFD\u0000\u0005sr\u0000\u001Corg.jsecurity.io.IniResourced\uFFFD\uFFFDJ\uFFFD\uFFFD\u0011\uFFFD\u0002\u0000\u0001L\u0000\bsectionst\u0000\u000FLjava/util/Map;xr\u0000\u001Dorg.jsecurity.io.TextResource\uFFFD^\u04CAz\uFFFD\uFFFD\uFFFD\u0002\u0000\u0001L\u0000\u000BcharsetNamet\u0000\u0012Ljava/lang/String;xr\u0000!org.jsecurity.io.AbstractResource\uFFFDR\uFFFD\uFFFDK\uFFFD\uFFFDs\u0002\u0000\u0000xppsr\u0000\u0017java.util.LinkedHashMap4\uFFFDN\\\u0010l\uFFFD\uFFFD\u0002\u0000\u0001Z\u0000\u000BaccessOrderxr\u0000\u0011java.util.HashMap\u0005\u0007\uFFFD\uFFFD\uFFFD\u0016`\uFFFD\u0003\u0000\u0002F\u0000\nloadFactorI\u0000\tthresholdxp?@\u0000\u0000\u0000\u0000\u0000\u0010w\b\u0000\u0000\u0000\u0010\u0000\u0000\u0000\u0000x\u0000"));

  }

  public void test223() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest7.test223");


    org.jsecurity.subject.InvalidSubjectException var2 = new org.jsecurity.subject.InvalidSubjectException("NfxhYN7ItBfRAmDBmprtU73ghfEEPpcDJrHPkZ06wiY=");
    org.jsecurity.io.ResourceException var3 = new org.jsecurity.io.ResourceException((java.lang.Throwable)var2);
    org.jsecurity.authc.CredentialsException var4 = new org.jsecurity.authc.CredentialsException("bf8dc28b-ea8f-43f7-9140-93c64a15daca", (java.lang.Throwable)var3);
    org.jsecurity.authc.UnknownAccountException var5 = new org.jsecurity.authc.UnknownAccountException((java.lang.Throwable)var3);

  }

  public void test224() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest7.test224");


    org.jsecurity.session.UnknownSessionException var5 = new org.jsecurity.session.UnknownSessionException("dd\uFFFD", (java.io.Serializable)100.0f);
    org.jsecurity.subject.SubjectException var6 = new org.jsecurity.subject.SubjectException("dd\uFFFD", (java.lang.Throwable)var5);
    org.jsecurity.io.SerializationException var7 = new org.jsecurity.io.SerializationException("", (java.lang.Throwable)var6);
    org.jsecurity.authc.ExpiredCredentialsException var8 = new org.jsecurity.authc.ExpiredCredentialsException("", (java.lang.Throwable)var6);
    org.jsecurity.mgt.DefaultSecurityManager var9 = new org.jsecurity.mgt.DefaultSecurityManager();
    java.io.InputStream var11 = org.jsecurity.util.ClassUtils.getResourceAsStream("");
    java.lang.Object[] var12 = new java.lang.Object[] { var11};
    java.util.List var13 = org.jsecurity.util.CollectionUtils.asList(var12);
    org.jsecurity.authc.pam.ModularRealmAuthenticator var14 = new org.jsecurity.authc.pam.ModularRealmAuthenticator(var13);
    org.jsecurity.authc.pam.AllSuccessfulModularAuthenticationStrategy var15 = new org.jsecurity.authc.pam.AllSuccessfulModularAuthenticationStrategy();
    var14.setModularAuthenticationStrategy((org.jsecurity.authc.pam.ModularAuthenticationStrategy)var15);
    org.jsecurity.authz.SimpleAuthorizationInfo var17 = new org.jsecurity.authz.SimpleAuthorizationInfo();
    var17.addStringPermission("hi!");
    java.io.InputStream var21 = org.jsecurity.util.ClassUtils.getResourceAsStream("");
    java.lang.Object[] var22 = new java.lang.Object[] { var21};
    java.util.List var23 = org.jsecurity.util.CollectionUtils.asList(var22);
    var17.addRoles((java.util.Collection)var23);
    var14.setAuthenticationListeners((java.util.Collection)var23);
    var9.setSessionListeners((java.util.Collection)var23);
    org.jsecurity.realm.text.TextConfigurationRealm var27 = new org.jsecurity.realm.text.TextConfigurationRealm();
    java.io.InputStream var29 = org.jsecurity.util.ClassUtils.getResourceAsStream("");
    java.lang.Object[] var30 = new java.lang.Object[] { var29};
    java.util.List var31 = org.jsecurity.util.CollectionUtils.asList(var30);
    org.jsecurity.authc.pam.ModularRealmAuthenticator var32 = new org.jsecurity.authc.pam.ModularRealmAuthenticator(var31);
    org.jsecurity.subject.SimplePrincipalCollection var34 = new org.jsecurity.subject.SimplePrincipalCollection((java.util.Collection)var31, "org.jsecurity.authz.UnauthorizedException: org.jsecurity.session.ExpiredSessionException: ");
    org.jsecurity.session.UnknownSessionException var39 = new org.jsecurity.session.UnknownSessionException("dd\uFFFD", (java.io.Serializable)100.0f);
    org.jsecurity.session.SessionException var41 = new org.jsecurity.session.SessionException("dd\uFFFD", (java.lang.Throwable)var39, (java.io.Serializable)0);
    org.jsecurity.session.SessionException var42 = new org.jsecurity.session.SessionException("dd\uFFFD", (java.lang.Throwable)var39);
    var34.add((java.lang.Object)var42, "org.jsecurity.config.ConfigurationException: dd\uFFFD");
    var27.onLogout((org.jsecurity.subject.PrincipalCollection)var34);
    org.jsecurity.authc.pam.FirstSuccessfulAuthenticationStrategy var46 = new org.jsecurity.authc.pam.FirstSuccessfulAuthenticationStrategy();
    org.jsecurity.authz.UnauthorizedException var48 = new org.jsecurity.authz.UnauthorizedException("org.jsecurity.config.ConfigurationException: dd\uFFFD");
    java.lang.Throwable[] var49 = var48.getSuppressed();
    java.util.List var50 = org.jsecurity.util.CollectionUtils.asList((java.lang.Object[])var49);
    org.jsecurity.authc.UsernamePasswordToken var51 = new org.jsecurity.authc.UsernamePasswordToken();
    java.lang.String var52 = var51.getUsername();
    java.net.InetAddress var53 = var51.getInetAddress();
    org.jsecurity.authc.AuthenticationInfo var54 = var46.beforeAllAttempts((java.util.Collection)var50, (org.jsecurity.authc.AuthenticationToken)var51);
    boolean[] var55 = var9.hasRoles((org.jsecurity.subject.PrincipalCollection)var34, var50);
    org.jsecurity.codec.CodecException var58 = new org.jsecurity.codec.CodecException("dd\uFFFD");
    org.jsecurity.authc.ConcurrentAccessException var59 = new org.jsecurity.authc.ConcurrentAccessException("org.jsecurity.authz.UnauthorizedException: org.jsecurity.session.ExpiredSessionException: ", (java.lang.Throwable)var58);
    org.jsecurity.subject.SimplePrincipalCollection var61 = new org.jsecurity.subject.SimplePrincipalCollection((java.lang.Object)var58, "");
    java.io.InputStream var63 = org.jsecurity.util.ClassUtils.getResourceAsStream("");
    java.lang.Object[] var64 = new java.lang.Object[] { var63};
    java.util.List var65 = org.jsecurity.util.CollectionUtils.asList(var64);
    org.jsecurity.authc.pam.ModularRealmAuthenticator var66 = new org.jsecurity.authc.pam.ModularRealmAuthenticator(var65);
    var61.addAll((java.util.Collection)var65, "\u0000\u0000");
    var9.setSessionListeners((java.util.Collection)var65);
    org.jsecurity.subject.Subject var70 = var9.getSubject();
    org.jsecurity.cache.CacheManager var71 = var9.getCacheManager();
    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      org.jsecurity.crypto.hash.Md2Hash var72 = new org.jsecurity.crypto.hash.Md2Hash((java.lang.Object)var8, (java.lang.Object)var71);
      fail("Expected exception of type org.jsecurity.codec.CodecException");
    } catch (org.jsecurity.codec.CodecException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var11);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var12);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var13);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var21);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var22);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var23);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var29);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var30);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var31);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var49);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var50);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var52);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var53);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var54);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var55);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var63);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var64);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var65);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var70);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var71);

  }

  public void test225() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest7.test225");


    org.jsecurity.session.mgt.eis.MemorySessionDAO var0 = new org.jsecurity.session.mgt.eis.MemorySessionDAO();
    org.jsecurity.cache.HashtableCache var2 = new org.jsecurity.cache.HashtableCache("b017e95a-a08d-4f3a-bab8-cc9b39ef5331");
    var0.setActiveSessionsCache((org.jsecurity.cache.Cache)var2);
    java.lang.String var4 = var2.toString();
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var4 + "' != '" + "HashtableCache [b017e95a-a08d-4f3a-bab8-cc9b39ef5331]"+ "'", var4.equals("HashtableCache [b017e95a-a08d-4f3a-bab8-cc9b39ef5331]"));

  }

  public void test226() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest7.test226");


    org.jsecurity.crypto.hash.Sha1Hash var1 = org.jsecurity.crypto.hash.Sha1Hash.fromBase64String("90538851-b0e4-449f-8dda-973ab1d52c9e");
    byte[] var3 = org.jsecurity.codec.CodecSupport.toBytes("org.jsecurity.realm.text.PropertiesRealm_2463");
    boolean var4 = org.jsecurity.codec.Base64.isBase64(var3);
    var1.setBytes(var3);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var1);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var3);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var4 == false);

  }

  public void test227() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest7.test227");


    byte[] var1 = org.jsecurity.codec.Base64.decode("{\uFFFD\uFFFD\uFFFD\uFFFD\u001B\uFFFD^\uFFFD\uFFFD\u01DA\uFFFD\u001A~\uFFFD}\uFFFD\uFFFDO\u001C");
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var1);

  }

  public void test228() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest7.test228");


    org.jsecurity.subject.InvalidSubjectException var4 = new org.jsecurity.subject.InvalidSubjectException("");
    org.jsecurity.authc.CredentialsException var5 = new org.jsecurity.authc.CredentialsException("org.jsecurity.authz.UnauthorizedException: org.jsecurity.session.ExpiredSessionException: ", (java.lang.Throwable)var4);
    org.jsecurity.io.ResourceException var8 = new org.jsecurity.io.ResourceException("d8d550ee-3a8c-48f0-8061-1d82c827f505");
    org.jsecurity.subject.SubjectException var9 = new org.jsecurity.subject.SubjectException("ca73d1a4-706e-42e7-980f-896d3b153de8", (java.lang.Throwable)var8);
    org.jsecurity.session.SessionException var10 = new org.jsecurity.session.SessionException("5b549fba-5a5d-44e6-9c05-771d476c2e80", (java.lang.Throwable)var4, (java.io.Serializable)var9);
    org.jsecurity.session.ExpiredSessionException var12 = new org.jsecurity.session.ExpiredSessionException("20288b2b-3e6e-47a7-9711-888ffbcad2b4", (java.lang.Throwable)var4, (java.io.Serializable)"HashtableCache [orgjsecurityauthcCredentialsException783ccd3148a842dd890fdf885a7baafAA==]");

  }

  public void test229() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest7.test229");


    org.jsecurity.realm.jdbc.JdbcRealm var0 = new org.jsecurity.realm.jdbc.JdbcRealm();
    var0.setUserRolesQuery("s\uFFFD\uFFFDkG\uFFFD\uFFFD\uFFFD4\uFFFDW\uFFFDi\uFFFD\uFFFDi\uFFFD\u067D\uFFFD{\uFFFD\u001F");
    var0.setAuthenticationQuery("4a0e5e90-249b-4eb3-a134-0b53851d6caf");
    var0.setAuthorizationCacheName("499413f2-ff78-44c6-b3f7-2030321675ed");
    org.jsecurity.session.ExpiredSessionException var8 = new org.jsecurity.session.ExpiredSessionException((java.io.Serializable)(-1));
    org.jsecurity.subject.SimplePrincipalCollection var10 = new org.jsecurity.subject.SimplePrincipalCollection((java.lang.Object)(-1), "7f459141-420b-4ce9-8486-8c578b9f7c7e");
    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      var0.checkRole((org.jsecurity.subject.PrincipalCollection)var10, "4854eb67-64de-45f3-aade-e631f39fbc7f");
      fail("Expected exception of type java.util.NoSuchElementException");
    } catch (java.util.NoSuchElementException e) {
      // Expected exception.
    }

  }

  public void test230() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest7.test230");


    org.jsecurity.session.UnknownSessionException var3 = new org.jsecurity.session.UnknownSessionException("dd\uFFFD", (java.io.Serializable)100.0f);
    org.jsecurity.session.SessionException var5 = new org.jsecurity.session.SessionException("dd\uFFFD", (java.lang.Throwable)var3, (java.io.Serializable)0);
    org.jsecurity.authc.SimpleAuthenticationInfo var8 = new org.jsecurity.authc.SimpleAuthenticationInfo((java.lang.Object)0, (java.lang.Object)10, "hi!");
    org.jsecurity.codec.CodecException var11 = new org.jsecurity.codec.CodecException("dd\uFFFD");
    org.jsecurity.authc.ConcurrentAccessException var12 = new org.jsecurity.authc.ConcurrentAccessException("org.jsecurity.authz.UnauthorizedException: org.jsecurity.session.ExpiredSessionException: ", (java.lang.Throwable)var11);
    org.jsecurity.subject.SimplePrincipalCollection var14 = new org.jsecurity.subject.SimplePrincipalCollection((java.lang.Object)var11, "");
    org.jsecurity.authc.pam.FirstSuccessfulAuthenticationStrategy var15 = new org.jsecurity.authc.pam.FirstSuccessfulAuthenticationStrategy();
    org.jsecurity.authz.UnauthorizedException var17 = new org.jsecurity.authz.UnauthorizedException("org.jsecurity.config.ConfigurationException: dd\uFFFD");
    java.lang.Throwable[] var18 = var17.getSuppressed();
    java.util.List var19 = org.jsecurity.util.CollectionUtils.asList((java.lang.Object[])var18);
    org.jsecurity.authc.UsernamePasswordToken var20 = new org.jsecurity.authc.UsernamePasswordToken();
    java.lang.String var21 = var20.getUsername();
    java.net.InetAddress var22 = var20.getInetAddress();
    org.jsecurity.authc.AuthenticationInfo var23 = var15.beforeAllAttempts((java.util.Collection)var19, (org.jsecurity.authc.AuthenticationToken)var20);
    org.jsecurity.session.UnknownSessionException var28 = new org.jsecurity.session.UnknownSessionException("dd\uFFFD", (java.io.Serializable)100.0f);
    org.jsecurity.subject.SubjectException var29 = new org.jsecurity.subject.SubjectException("dd\uFFFD", (java.lang.Throwable)var28);
    org.jsecurity.io.SerializationException var30 = new org.jsecurity.io.SerializationException("", (java.lang.Throwable)var29);
    java.lang.Throwable[] var31 = var29.getSuppressed();
    java.util.Set var32 = org.jsecurity.util.CollectionUtils.asSet((java.lang.Object[])var31);
    org.jsecurity.authc.SimpleAccount var33 = new org.jsecurity.authc.SimpleAccount((org.jsecurity.subject.PrincipalCollection)var14, (java.lang.Object)var19, var32);
    var8.setPrincipals((org.jsecurity.subject.PrincipalCollection)var14);
    org.jsecurity.realm.jdbc.JdbcRealm var35 = new org.jsecurity.realm.jdbc.JdbcRealm();
    var35.setPermissionsQuery("org.jsecurity.realm.text.TextConfigurationRealm_445");
    var35.setUserRolesQuery("6464ff");
    var35.setUserRolesQuery("NfxhYN7ItBfRAmDBmprtU73ghfEEPpcDJrHPkZ06wiY=");
    var35.setUserRolesQuery("\u0000\u0000");
    var35.setName("org.jsecurity.realm.text.TextConfigurationRealm_4041");
    boolean var46 = var8.equals((java.lang.Object)"org.jsecurity.realm.text.TextConfigurationRealm_4041");
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var18);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var19);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var21);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var22);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var23);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var31);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var32);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var46 == false);

  }

  public void test231() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest7.test231");


    org.jsecurity.session.mgt.SimpleSession var3 = new org.jsecurity.session.mgt.SimpleSession();
    var3.touch();
    org.jsecurity.authz.UnauthenticatedException var7 = new org.jsecurity.authz.UnauthenticatedException();
    org.jsecurity.config.UnresolveableReferenceException var8 = new org.jsecurity.config.UnresolveableReferenceException("", (java.lang.Throwable)var7);
    org.jsecurity.cache.CacheException var9 = new org.jsecurity.cache.CacheException("org.jsecurity.config.ConfigurationException: dd\uFFFD", (java.lang.Throwable)var7);
    java.lang.Object var10 = var3.removeAttribute((java.lang.Object)var9);
    org.jsecurity.session.mgt.eis.MemorySessionDAO var11 = new org.jsecurity.session.mgt.eis.MemorySessionDAO();
    org.jsecurity.cache.Cache var12 = var11.getActiveSessionsCache();
    org.jsecurity.cache.CacheManager var13 = var11.getCacheManager();
    org.jsecurity.cache.HashtableCacheManager var14 = new org.jsecurity.cache.HashtableCacheManager();
    org.jsecurity.cache.Cache var16 = var14.getCache("\u0000\u0000");
    var11.setActiveSessionsCache(var16);
    java.io.InputStream var19 = org.jsecurity.util.ClassUtils.getResourceAsStream("");
    java.lang.Object[] var20 = new java.lang.Object[] { var19};
    java.util.List var21 = org.jsecurity.util.CollectionUtils.asList(var20);
    org.jsecurity.authc.pam.ModularRealmAuthenticator var22 = new org.jsecurity.authc.pam.ModularRealmAuthenticator(var21);
    org.jsecurity.authc.pam.AllSuccessfulModularAuthenticationStrategy var23 = new org.jsecurity.authc.pam.AllSuccessfulModularAuthenticationStrategy();
    var22.setModularAuthenticationStrategy((org.jsecurity.authc.pam.ModularAuthenticationStrategy)var23);
    org.jsecurity.authz.SimpleAuthorizationInfo var25 = new org.jsecurity.authz.SimpleAuthorizationInfo();
    var25.addStringPermission("hi!");
    java.io.InputStream var29 = org.jsecurity.util.ClassUtils.getResourceAsStream("");
    java.lang.Object[] var30 = new java.lang.Object[] { var29};
    java.util.List var31 = org.jsecurity.util.CollectionUtils.asList(var30);
    var25.addRoles((java.util.Collection)var31);
    var22.setAuthenticationListeners((java.util.Collection)var31);
    org.jsecurity.realm.activedirectory.ActiveDirectoryRealm var34 = new org.jsecurity.realm.activedirectory.ActiveDirectoryRealm();
    var34.setPrincipalSuffix("");
    var22.setRealm((org.jsecurity.realm.Realm)var34);
    org.jsecurity.cache.HashtableCacheManager var38 = new org.jsecurity.cache.HashtableCacheManager();
    org.jsecurity.cache.Cache var40 = var38.getCache("\u0000\u0000");
    var34.setAuthorizationCache(var40);
    var11.setActiveSessionsCache(var40);
    org.jsecurity.session.mgt.SimpleSession var43 = new org.jsecurity.session.mgt.SimpleSession();
    java.io.Serializable var44 = var11.create((org.jsecurity.session.Session)var43);
    java.io.Serializable var45 = var43.getId();
    org.jsecurity.session.mgt.SimpleSession var46 = new org.jsecurity.session.mgt.SimpleSession();
    var46.touch();
    var46.validate();
    org.jsecurity.session.mgt.SimpleSession var49 = new org.jsecurity.session.mgt.SimpleSession();
    var49.setTimeout((-1L));
    org.jsecurity.session.mgt.SimpleSession var52 = new org.jsecurity.session.mgt.SimpleSession();
    java.util.Date var53 = var52.getLastAccessTime();
    var49.setLastAccessTime(var53);
    org.jsecurity.session.mgt.SimpleSession var55 = new org.jsecurity.session.mgt.SimpleSession();
    java.util.Date var56 = var55.getLastAccessTime();
    var49.setStopTimestamp(var56);
    var46.setLastAccessTime(var56);
    var43.setStartTimestamp(var56);
    var3.setStartTimestamp(var56);
    var3.validate();
    boolean var62 = var3.isExpired();
    java.net.InetAddress var63 = var3.getHostAddress();
    org.jsecurity.authc.UsernamePasswordToken var64 = new org.jsecurity.authc.UsernamePasswordToken("e2dbce5a-2276-49d1-8175-015873d38faf", "a1b9d200-d70c-4093-b754-c4ee20ee247e", false, var63);
    java.lang.Object var65 = var64.getCredentials();
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var10);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var12);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var13);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var16);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var19);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var20);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var21);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var29);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var30);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var31);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var40);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var44 + "' != '" + "af6a77c1-f609-4bea-803f-8680c2dd0632"+ "'", var44.equals("af6a77c1-f609-4bea-803f-8680c2dd0632"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var45 + "' != '" + "af6a77c1-f609-4bea-803f-8680c2dd0632"+ "'", var45.equals("af6a77c1-f609-4bea-803f-8680c2dd0632"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var53);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var56);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var62 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var63);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var65);

  }

  public void test232() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest7.test232");


    org.jsecurity.authz.SimpleAuthorizingAccount var0 = new org.jsecurity.authz.SimpleAuthorizingAccount();
    org.jsecurity.authz.SimpleAuthorizationInfo var1 = new org.jsecurity.authz.SimpleAuthorizationInfo();
    var1.addRole("a2b823b1e72eae2b727289df8a00a89df8a0bab6ad8a89c4c5c7a9b62a270000");
    org.jsecurity.authz.SimpleAuthorizationInfo var4 = new org.jsecurity.authz.SimpleAuthorizationInfo();
    var4.addRole("a2b823b1e72eae2b727289df8a00a89df8a0bab6ad8a89c4c5c7a9b62a270000");
    org.jsecurity.session.UnknownSessionException var11 = new org.jsecurity.session.UnknownSessionException("dd\uFFFD", (java.io.Serializable)100.0f);
    org.jsecurity.subject.SubjectException var12 = new org.jsecurity.subject.SubjectException("dd\uFFFD", (java.lang.Throwable)var11);
    org.jsecurity.io.SerializationException var13 = new org.jsecurity.io.SerializationException("", (java.lang.Throwable)var12);
    java.lang.Throwable[] var14 = var12.getSuppressed();
    java.util.Set var15 = org.jsecurity.util.CollectionUtils.asSet((java.lang.Object[])var14);
    var4.addRoles((java.util.Collection)var15);
    var1.setObjectPermissions(var15);
    var0.setSimpleRoles(var15);
    java.util.Set var19 = var0.getPermissions();
    org.jsecurity.authz.SimpleAuthorizationInfo var20 = new org.jsecurity.authz.SimpleAuthorizationInfo();
    var20.addRole("a2b823b1e72eae2b727289df8a00a89df8a0bab6ad8a89c4c5c7a9b62a270000");
    org.jsecurity.authz.SimpleAuthorizationInfo var23 = new org.jsecurity.authz.SimpleAuthorizationInfo();
    var23.addRole("a2b823b1e72eae2b727289df8a00a89df8a0bab6ad8a89c4c5c7a9b62a270000");
    org.jsecurity.session.UnknownSessionException var30 = new org.jsecurity.session.UnknownSessionException("dd\uFFFD", (java.io.Serializable)100.0f);
    org.jsecurity.subject.SubjectException var31 = new org.jsecurity.subject.SubjectException("dd\uFFFD", (java.lang.Throwable)var30);
    org.jsecurity.io.SerializationException var32 = new org.jsecurity.io.SerializationException("", (java.lang.Throwable)var31);
    java.lang.Throwable[] var33 = var31.getSuppressed();
    java.util.Set var34 = org.jsecurity.util.CollectionUtils.asSet((java.lang.Object[])var33);
    var23.addRoles((java.util.Collection)var34);
    var20.setObjectPermissions(var34);
    var0.checkRoles((java.util.Collection)var34);
    org.jsecurity.realm.text.PropertiesRealm var38 = new org.jsecurity.realm.text.PropertiesRealm();
    org.jsecurity.realm.activedirectory.ActiveDirectoryRealm var39 = new org.jsecurity.realm.activedirectory.ActiveDirectoryRealm();
    org.jsecurity.authc.credential.Sha256CredentialsMatcher var40 = new org.jsecurity.authc.credential.Sha256CredentialsMatcher();
    var39.setCredentialsMatcher((org.jsecurity.authc.credential.CredentialsMatcher)var40);
    java.lang.String var42 = var39.getAuthorizationCacheName();
    var39.setPrincipalSuffix("org.jsecurity.config.ConfigurationException: dd\uFFFD");
    org.jsecurity.authz.permission.PermissionResolver var45 = var39.getPermissionResolver();
    var38.setPermissionResolver(var45);
    java.util.Set var47 = org.jsecurity.util.PermissionUtils.resolvePermissions((java.util.Collection)var34, var45);
    org.jsecurity.authz.SimpleAuthorizationInfo var48 = new org.jsecurity.authz.SimpleAuthorizationInfo(var47);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var14);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var15);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var19);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var33);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var34);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var42);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var45);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var47);

  }

  public void test233() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest7.test233");


    org.jsecurity.realm.text.TextConfigurationRealm var0 = new org.jsecurity.realm.text.TextConfigurationRealm();
    java.io.InputStream var2 = org.jsecurity.util.ClassUtils.getResourceAsStream("");
    java.lang.Object[] var3 = new java.lang.Object[] { var2};
    java.util.List var4 = org.jsecurity.util.CollectionUtils.asList(var3);
    org.jsecurity.authc.pam.ModularRealmAuthenticator var5 = new org.jsecurity.authc.pam.ModularRealmAuthenticator(var4);
    org.jsecurity.subject.SimplePrincipalCollection var7 = new org.jsecurity.subject.SimplePrincipalCollection((java.util.Collection)var4, "org.jsecurity.authz.UnauthorizedException: org.jsecurity.session.ExpiredSessionException: ");
    org.jsecurity.session.UnknownSessionException var12 = new org.jsecurity.session.UnknownSessionException("dd\uFFFD", (java.io.Serializable)100.0f);
    org.jsecurity.session.SessionException var14 = new org.jsecurity.session.SessionException("dd\uFFFD", (java.lang.Throwable)var12, (java.io.Serializable)0);
    org.jsecurity.session.SessionException var15 = new org.jsecurity.session.SessionException("dd\uFFFD", (java.lang.Throwable)var12);
    var7.add((java.lang.Object)var15, "org.jsecurity.config.ConfigurationException: dd\uFFFD");
    var0.onLogout((org.jsecurity.subject.PrincipalCollection)var7);
    org.jsecurity.cache.HashtableCacheManager var19 = new org.jsecurity.cache.HashtableCacheManager();
    org.jsecurity.cache.Cache var21 = var19.getCache("\u0000\u0000");
    var0.setAuthorizationCache(var21);
    org.jsecurity.codec.CodecException var25 = new org.jsecurity.codec.CodecException("dd\uFFFD");
    org.jsecurity.authc.ConcurrentAccessException var26 = new org.jsecurity.authc.ConcurrentAccessException("org.jsecurity.authz.UnauthorizedException: org.jsecurity.session.ExpiredSessionException: ", (java.lang.Throwable)var25);
    org.jsecurity.subject.SimplePrincipalCollection var28 = new org.jsecurity.subject.SimplePrincipalCollection((java.lang.Object)var25, "");
    var0.onLogout((org.jsecurity.subject.PrincipalCollection)var28);
    var0.setRoleDefinitions("org.jsecurity.config.ConfigurationException: dd\uFFFD");
    org.jsecurity.mgt.DefaultSecurityManager var32 = new org.jsecurity.mgt.DefaultSecurityManager();
    java.io.InputStream var34 = org.jsecurity.util.ClassUtils.getResourceAsStream("");
    java.lang.Object[] var35 = new java.lang.Object[] { var34};
    java.util.List var36 = org.jsecurity.util.CollectionUtils.asList(var35);
    org.jsecurity.authc.pam.ModularRealmAuthenticator var37 = new org.jsecurity.authc.pam.ModularRealmAuthenticator(var36);
    org.jsecurity.authc.pam.AllSuccessfulModularAuthenticationStrategy var38 = new org.jsecurity.authc.pam.AllSuccessfulModularAuthenticationStrategy();
    var37.setModularAuthenticationStrategy((org.jsecurity.authc.pam.ModularAuthenticationStrategy)var38);
    org.jsecurity.authz.SimpleAuthorizationInfo var40 = new org.jsecurity.authz.SimpleAuthorizationInfo();
    var40.addStringPermission("hi!");
    java.io.InputStream var44 = org.jsecurity.util.ClassUtils.getResourceAsStream("");
    java.lang.Object[] var45 = new java.lang.Object[] { var44};
    java.util.List var46 = org.jsecurity.util.CollectionUtils.asList(var45);
    var40.addRoles((java.util.Collection)var46);
    var37.setAuthenticationListeners((java.util.Collection)var46);
    var32.setSessionListeners((java.util.Collection)var46);
    org.jsecurity.authz.UnauthenticatedException var53 = new org.jsecurity.authz.UnauthenticatedException();
    org.jsecurity.config.UnresolveableReferenceException var54 = new org.jsecurity.config.UnresolveableReferenceException("", (java.lang.Throwable)var53);
    org.jsecurity.cache.CacheException var55 = new org.jsecurity.cache.CacheException("org.jsecurity.config.ConfigurationException: dd\uFFFD", (java.lang.Throwable)var53);
    org.jsecurity.authc.SimpleAuthenticationInfo var57 = new org.jsecurity.authc.SimpleAuthenticationInfo((java.lang.Object)"org.jsecurity.config.ConfigurationException: dd\uFFFD", (java.lang.Object)var55, "a2b823b1e72eae2b727289df8a00a89df8a0bab6ad8a89c4c5c7a9b62a270000");
    org.jsecurity.realm.text.TextConfigurationRealm var58 = new org.jsecurity.realm.text.TextConfigurationRealm();
    java.io.InputStream var60 = org.jsecurity.util.ClassUtils.getResourceAsStream("");
    java.lang.Object[] var61 = new java.lang.Object[] { var60};
    java.util.List var62 = org.jsecurity.util.CollectionUtils.asList(var61);
    org.jsecurity.authc.pam.ModularRealmAuthenticator var63 = new org.jsecurity.authc.pam.ModularRealmAuthenticator(var62);
    org.jsecurity.subject.SimplePrincipalCollection var65 = new org.jsecurity.subject.SimplePrincipalCollection((java.util.Collection)var62, "org.jsecurity.authz.UnauthorizedException: org.jsecurity.session.ExpiredSessionException: ");
    org.jsecurity.session.UnknownSessionException var70 = new org.jsecurity.session.UnknownSessionException("dd\uFFFD", (java.io.Serializable)100.0f);
    org.jsecurity.session.SessionException var72 = new org.jsecurity.session.SessionException("dd\uFFFD", (java.lang.Throwable)var70, (java.io.Serializable)0);
    org.jsecurity.session.SessionException var73 = new org.jsecurity.session.SessionException("dd\uFFFD", (java.lang.Throwable)var70);
    var65.add((java.lang.Object)var73, "org.jsecurity.config.ConfigurationException: dd\uFFFD");
    var58.onLogout((org.jsecurity.subject.PrincipalCollection)var65);
    org.jsecurity.authc.ExpiredCredentialsException var78 = new org.jsecurity.authc.ExpiredCredentialsException();
    org.jsecurity.session.ExpiredSessionException var79 = new org.jsecurity.session.ExpiredSessionException("", (java.lang.Throwable)var78);
    java.lang.Throwable[] var80 = var79.getSuppressed();
    org.jsecurity.io.ResourceException var81 = new org.jsecurity.io.ResourceException((java.lang.Throwable)var79);
    org.jsecurity.authc.SimpleAuthenticationInfo var82 = new org.jsecurity.authc.SimpleAuthenticationInfo((org.jsecurity.subject.PrincipalCollection)var65, (java.lang.Object)var79);
    var57.merge((org.jsecurity.authc.AuthenticationInfo)var82);
    org.jsecurity.subject.PrincipalCollection var84 = var82.getPrincipals();
    org.jsecurity.authz.SimpleAuthorizingAccount var86 = new org.jsecurity.authz.SimpleAuthorizingAccount((java.util.Collection)var46, (java.lang.Object)var84, "org.jsecurity.realm.text.TextConfigurationRealm_445");
    var0.onLogout(var84);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var2);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var3);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var4);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var21);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var34);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var35);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var36);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var44);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var45);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var46);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var60);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var61);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var62);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var80);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var84);

  }

  public void test234() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest7.test234");


    java.io.InputStream var1 = org.jsecurity.util.ClassUtils.getResourceAsStream("");
    java.lang.Object[] var2 = new java.lang.Object[] { var1};
    java.util.List var3 = org.jsecurity.util.CollectionUtils.asList(var2);
    org.jsecurity.authc.pam.ModularRealmAuthenticator var4 = new org.jsecurity.authc.pam.ModularRealmAuthenticator(var3);
    org.jsecurity.authc.pam.AllSuccessfulModularAuthenticationStrategy var5 = new org.jsecurity.authc.pam.AllSuccessfulModularAuthenticationStrategy();
    var4.setModularAuthenticationStrategy((org.jsecurity.authc.pam.ModularAuthenticationStrategy)var5);
    org.jsecurity.authz.SimpleAuthorizationInfo var7 = new org.jsecurity.authz.SimpleAuthorizationInfo();
    var7.addStringPermission("hi!");
    java.io.InputStream var11 = org.jsecurity.util.ClassUtils.getResourceAsStream("");
    java.lang.Object[] var12 = new java.lang.Object[] { var11};
    java.util.List var13 = org.jsecurity.util.CollectionUtils.asList(var12);
    var7.addRoles((java.util.Collection)var13);
    var4.setAuthenticationListeners((java.util.Collection)var13);
    org.jsecurity.realm.activedirectory.ActiveDirectoryRealm var16 = new org.jsecurity.realm.activedirectory.ActiveDirectoryRealm();
    var16.setPrincipalSuffix("");
    var4.setRealm((org.jsecurity.realm.Realm)var16);
    org.jsecurity.authc.pam.FirstSuccessfulAuthenticationStrategy var20 = new org.jsecurity.authc.pam.FirstSuccessfulAuthenticationStrategy();
    org.jsecurity.authz.UnauthorizedException var22 = new org.jsecurity.authz.UnauthorizedException("org.jsecurity.config.ConfigurationException: dd\uFFFD");
    java.lang.Throwable[] var23 = var22.getSuppressed();
    java.util.List var24 = org.jsecurity.util.CollectionUtils.asList((java.lang.Object[])var23);
    org.jsecurity.authc.UsernamePasswordToken var25 = new org.jsecurity.authc.UsernamePasswordToken();
    java.lang.String var26 = var25.getUsername();
    java.net.InetAddress var27 = var25.getInetAddress();
    org.jsecurity.authc.AuthenticationInfo var28 = var20.beforeAllAttempts((java.util.Collection)var24, (org.jsecurity.authc.AuthenticationToken)var25);
    var4.setModularAuthenticationStrategy((org.jsecurity.authc.pam.ModularAuthenticationStrategy)var20);
    org.jsecurity.codec.CodecException var32 = new org.jsecurity.codec.CodecException("dd\uFFFD");
    org.jsecurity.authc.ConcurrentAccessException var33 = new org.jsecurity.authc.ConcurrentAccessException("org.jsecurity.authz.UnauthorizedException: org.jsecurity.session.ExpiredSessionException: ", (java.lang.Throwable)var32);
    org.jsecurity.subject.SimplePrincipalCollection var35 = new org.jsecurity.subject.SimplePrincipalCollection((java.lang.Object)var32, "");
    org.jsecurity.authc.pam.FirstSuccessfulAuthenticationStrategy var36 = new org.jsecurity.authc.pam.FirstSuccessfulAuthenticationStrategy();
    org.jsecurity.authz.UnauthorizedException var38 = new org.jsecurity.authz.UnauthorizedException("org.jsecurity.config.ConfigurationException: dd\uFFFD");
    java.lang.Throwable[] var39 = var38.getSuppressed();
    java.util.List var40 = org.jsecurity.util.CollectionUtils.asList((java.lang.Object[])var39);
    org.jsecurity.authc.UsernamePasswordToken var41 = new org.jsecurity.authc.UsernamePasswordToken();
    java.lang.String var42 = var41.getUsername();
    java.net.InetAddress var43 = var41.getInetAddress();
    org.jsecurity.authc.AuthenticationInfo var44 = var36.beforeAllAttempts((java.util.Collection)var40, (org.jsecurity.authc.AuthenticationToken)var41);
    org.jsecurity.session.UnknownSessionException var49 = new org.jsecurity.session.UnknownSessionException("dd\uFFFD", (java.io.Serializable)100.0f);
    org.jsecurity.subject.SubjectException var50 = new org.jsecurity.subject.SubjectException("dd\uFFFD", (java.lang.Throwable)var49);
    org.jsecurity.io.SerializationException var51 = new org.jsecurity.io.SerializationException("", (java.lang.Throwable)var50);
    java.lang.Throwable[] var52 = var50.getSuppressed();
    java.util.Set var53 = org.jsecurity.util.CollectionUtils.asSet((java.lang.Object[])var52);
    org.jsecurity.authc.SimpleAccount var54 = new org.jsecurity.authc.SimpleAccount((org.jsecurity.subject.PrincipalCollection)var35, (java.lang.Object)var40, var53);
    org.jsecurity.authc.pam.AllSuccessfulModularAuthenticationStrategy var55 = new org.jsecurity.authc.pam.AllSuccessfulModularAuthenticationStrategy();
    char[] var57 = new char[] { };
    org.jsecurity.authc.UsernamePasswordToken var59 = new org.jsecurity.authc.UsernamePasswordToken("hi!", var57, true);
    org.jsecurity.authc.SimpleAccount var60 = new org.jsecurity.authc.SimpleAccount();
    var60.setCredentialsExpired(false);
    boolean var63 = var60.isLocked();
    org.jsecurity.authc.AuthenticationInfo var64 = var55.afterAllAttempts((org.jsecurity.authc.AuthenticationToken)var59, (org.jsecurity.authc.AuthenticationInfo)var60);
    char[] var67 = new char[] { };
    org.jsecurity.authc.UsernamePasswordToken var69 = new org.jsecurity.authc.UsernamePasswordToken("hi!", var67, true);
    org.jsecurity.authc.UsernamePasswordToken var70 = new org.jsecurity.authc.UsernamePasswordToken("\u0000\u0000", var67);
    var59.setPassword(var67);
    org.jsecurity.authc.AuthenticationInfo var72 = var20.beforeAllAttempts((java.util.Collection)var40, (org.jsecurity.authc.AuthenticationToken)var59);
    char[] var73 = var59.getPassword();
    var59.setUsername("\uFFFD\uFFFD\uFFFDq\uFFFD\uFFFD\uFFFD\u01BC\uFFFDg]\uFFFD\uFFFD\u001Fu\uFFFD<\uFFFD\uFFFDi\uFFFD\uFFFD");
    char[] var77 = new char[] { };
    org.jsecurity.authc.UsernamePasswordToken var79 = new org.jsecurity.authc.UsernamePasswordToken("hi!", var77, true);
    byte[] var80 = org.jsecurity.codec.Hex.decode(var77);
    byte[] var81 = org.jsecurity.codec.Hex.decode(var77);
    byte[] var82 = org.jsecurity.codec.Base64.encode(var81);
    char[] var83 = org.jsecurity.codec.Hex.encode(var81);
    char[] var84 = org.jsecurity.codec.CodecSupport.toChars(var81);
    var59.setPassword(var84);
    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      org.jsecurity.crypto.hash.Sha256Hash var86 = new org.jsecurity.crypto.hash.Sha256Hash((java.lang.Object)var59);
      fail("Expected exception of type org.jsecurity.codec.CodecException");
    } catch (org.jsecurity.codec.CodecException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var1);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var2);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var3);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var11);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var12);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var13);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var23);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var24);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var26);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var27);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var28);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var39);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var40);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var42);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var43);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var44);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var52);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var53);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var57);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var63 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var64);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var67);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var72);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var73);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var77);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var80);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var81);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var82);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var83);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var84);

  }

  public void test235() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest7.test235");


    org.jsecurity.authz.permission.InvalidPermissionStringException var3 = new org.jsecurity.authz.permission.InvalidPermissionStringException("518186d8-31e9-47c0-b564-85d1505b64b6", "10f5b491-38ac-4c02-8085-950abb026a06");
    org.jsecurity.session.ExpiredSessionException var4 = new org.jsecurity.session.ExpiredSessionException("97a45c60-8248-4ecc-bfd4-2f5bd91f04d5", (java.lang.Throwable)var3);

  }

  public void test236() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest7.test236");


    org.jsecurity.authc.IncorrectCredentialsException var2 = new org.jsecurity.authc.IncorrectCredentialsException("7856269b-c3fb-4264-9649-c8194198e7eb");
    org.jsecurity.authc.ConcurrentAccessException var3 = new org.jsecurity.authc.ConcurrentAccessException("330a41fd-f404-4b7f-8f3c-bc52c3f67c3e", (java.lang.Throwable)var2);

  }

  public void test237() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest7.test237");


    org.jsecurity.mgt.DefaultSecurityManager var0 = new org.jsecurity.mgt.DefaultSecurityManager();
    java.io.InputStream var2 = org.jsecurity.util.ClassUtils.getResourceAsStream("");
    java.lang.Object[] var3 = new java.lang.Object[] { var2};
    java.util.List var4 = org.jsecurity.util.CollectionUtils.asList(var3);
    org.jsecurity.authc.pam.ModularRealmAuthenticator var5 = new org.jsecurity.authc.pam.ModularRealmAuthenticator(var4);
    org.jsecurity.authc.pam.AllSuccessfulModularAuthenticationStrategy var6 = new org.jsecurity.authc.pam.AllSuccessfulModularAuthenticationStrategy();
    var5.setModularAuthenticationStrategy((org.jsecurity.authc.pam.ModularAuthenticationStrategy)var6);
    org.jsecurity.authz.SimpleAuthorizationInfo var8 = new org.jsecurity.authz.SimpleAuthorizationInfo();
    var8.addStringPermission("hi!");
    java.io.InputStream var12 = org.jsecurity.util.ClassUtils.getResourceAsStream("");
    java.lang.Object[] var13 = new java.lang.Object[] { var12};
    java.util.List var14 = org.jsecurity.util.CollectionUtils.asList(var13);
    var8.addRoles((java.util.Collection)var14);
    var5.setAuthenticationListeners((java.util.Collection)var14);
    var0.setSessionListeners((java.util.Collection)var14);
    org.jsecurity.authc.pam.ModularRealmAuthenticator var18 = new org.jsecurity.authc.pam.ModularRealmAuthenticator();
    org.jsecurity.authz.permission.InvalidPermissionStringException var21 = new org.jsecurity.authz.permission.InvalidPermissionStringException("", "dd\uFFFD");
    org.jsecurity.JSecurityException var23 = new org.jsecurity.JSecurityException("");
    org.jsecurity.authc.SimpleAuthenticationInfo var25 = new org.jsecurity.authc.SimpleAuthenticationInfo((java.lang.Object)var21, (java.lang.Object)"", "org.jsecurity.authz.UnauthorizedException: org.jsecurity.session.ExpiredSessionException: ");
    org.jsecurity.subject.PrincipalCollection var26 = var25.getPrincipals();
    var18.onLogout(var26);
    var0.setAuthenticator((org.jsecurity.authc.Authenticator)var18);
    org.jsecurity.codec.CodecException var31 = new org.jsecurity.codec.CodecException("dd\uFFFD");
    org.jsecurity.authc.ConcurrentAccessException var32 = new org.jsecurity.authc.ConcurrentAccessException("org.jsecurity.authz.UnauthorizedException: org.jsecurity.session.ExpiredSessionException: ", (java.lang.Throwable)var31);
    org.jsecurity.subject.SimplePrincipalCollection var34 = new org.jsecurity.subject.SimplePrincipalCollection((java.lang.Object)var31, "");
    org.jsecurity.authc.pam.FirstSuccessfulAuthenticationStrategy var35 = new org.jsecurity.authc.pam.FirstSuccessfulAuthenticationStrategy();
    org.jsecurity.authz.UnauthorizedException var37 = new org.jsecurity.authz.UnauthorizedException("org.jsecurity.config.ConfigurationException: dd\uFFFD");
    java.lang.Throwable[] var38 = var37.getSuppressed();
    java.util.List var39 = org.jsecurity.util.CollectionUtils.asList((java.lang.Object[])var38);
    org.jsecurity.authc.UsernamePasswordToken var40 = new org.jsecurity.authc.UsernamePasswordToken();
    java.lang.String var41 = var40.getUsername();
    java.net.InetAddress var42 = var40.getInetAddress();
    org.jsecurity.authc.AuthenticationInfo var43 = var35.beforeAllAttempts((java.util.Collection)var39, (org.jsecurity.authc.AuthenticationToken)var40);
    org.jsecurity.session.UnknownSessionException var48 = new org.jsecurity.session.UnknownSessionException("dd\uFFFD", (java.io.Serializable)100.0f);
    org.jsecurity.subject.SubjectException var49 = new org.jsecurity.subject.SubjectException("dd\uFFFD", (java.lang.Throwable)var48);
    org.jsecurity.io.SerializationException var50 = new org.jsecurity.io.SerializationException("", (java.lang.Throwable)var49);
    java.lang.Throwable[] var51 = var49.getSuppressed();
    java.util.Set var52 = org.jsecurity.util.CollectionUtils.asSet((java.lang.Object[])var51);
    org.jsecurity.authc.SimpleAccount var53 = new org.jsecurity.authc.SimpleAccount((org.jsecurity.subject.PrincipalCollection)var34, (java.lang.Object)var39, var52);
    java.io.InputStream var55 = org.jsecurity.util.ClassUtils.getResourceAsStream("");
    java.lang.Object[] var56 = new java.lang.Object[] { var55};
    java.util.List var57 = org.jsecurity.util.CollectionUtils.asList(var56);
    org.jsecurity.authc.pam.ModularRealmAuthenticator var58 = new org.jsecurity.authc.pam.ModularRealmAuthenticator(var57);
    org.jsecurity.subject.SimplePrincipalCollection var60 = new org.jsecurity.subject.SimplePrincipalCollection((java.util.Collection)var57, "org.jsecurity.authz.UnauthorizedException: org.jsecurity.session.ExpiredSessionException: ");
    org.jsecurity.io.ResourceException var64 = new org.jsecurity.io.ResourceException("hi!");
    org.jsecurity.authc.UnknownAccountException var65 = new org.jsecurity.authc.UnknownAccountException((java.lang.Throwable)var64);
    org.jsecurity.session.StoppedSessionException var66 = new org.jsecurity.session.StoppedSessionException("dd\uFFFD", (java.io.Serializable)var64);
    org.jsecurity.session.UnknownSessionException var67 = new org.jsecurity.session.UnknownSessionException("org.jsecurity.authz.UnauthorizedException: org.jsecurity.session.ExpiredSessionException: ", (java.lang.Throwable)var64);
    boolean var68 = var60.equals((java.lang.Object)var64);
    var34.addAll((org.jsecurity.subject.PrincipalCollection)var60);
    org.jsecurity.session.UnknownSessionException var74 = new org.jsecurity.session.UnknownSessionException("dd\uFFFD", (java.io.Serializable)100.0f);
    org.jsecurity.subject.SubjectException var75 = new org.jsecurity.subject.SubjectException("dd\uFFFD", (java.lang.Throwable)var74);
    org.jsecurity.io.SerializationException var76 = new org.jsecurity.io.SerializationException("", (java.lang.Throwable)var75);
    java.lang.Throwable[] var77 = var75.getSuppressed();
    java.util.List var78 = org.jsecurity.util.CollectionUtils.asList((java.lang.Object[])var77);
    boolean var79 = var0.isPermittedAll((org.jsecurity.subject.PrincipalCollection)var34, (java.util.Collection)var78);
    org.jsecurity.realm.text.PropertiesRealm var80 = new org.jsecurity.realm.text.PropertiesRealm();
    var0.setRealm((org.jsecurity.realm.Realm)var80);
    boolean var83 = var80.accountExists("e2100c27-e41d-4c80-964c-90268ef4a856");
    java.lang.String var84 = var80.getRoleDefinitions();
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var2);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var3);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var4);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var12);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var13);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var14);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var26);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var38);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var39);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var41);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var42);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var43);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var51);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var52);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var55);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var56);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var57);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var68 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var77);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var78);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var79 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var83 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var84 + "' != '" + "goodguy = winnebago:drive:eagle5\nroot = *\nschwartz = lightsaber:*\n"+ "'", var84.equals("goodguy = winnebago:drive:eagle5\nroot = *\nschwartz = lightsaber:*\n"));

  }

  public void test238() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest7.test238");


    org.jsecurity.realm.text.TextConfigurationRealm var0 = new org.jsecurity.realm.text.TextConfigurationRealm();
    java.io.InputStream var2 = org.jsecurity.util.ClassUtils.getResourceAsStream("");
    java.lang.Object[] var3 = new java.lang.Object[] { var2};
    java.util.List var4 = org.jsecurity.util.CollectionUtils.asList(var3);
    org.jsecurity.authc.pam.ModularRealmAuthenticator var5 = new org.jsecurity.authc.pam.ModularRealmAuthenticator(var4);
    org.jsecurity.subject.SimplePrincipalCollection var7 = new org.jsecurity.subject.SimplePrincipalCollection((java.util.Collection)var4, "org.jsecurity.authz.UnauthorizedException: org.jsecurity.session.ExpiredSessionException: ");
    org.jsecurity.session.UnknownSessionException var12 = new org.jsecurity.session.UnknownSessionException("dd\uFFFD", (java.io.Serializable)100.0f);
    org.jsecurity.session.SessionException var14 = new org.jsecurity.session.SessionException("dd\uFFFD", (java.lang.Throwable)var12, (java.io.Serializable)0);
    org.jsecurity.session.SessionException var15 = new org.jsecurity.session.SessionException("dd\uFFFD", (java.lang.Throwable)var12);
    var7.add((java.lang.Object)var15, "org.jsecurity.config.ConfigurationException: dd\uFFFD");
    var0.onLogout((org.jsecurity.subject.PrincipalCollection)var7);
    org.jsecurity.cache.HashtableCacheManager var19 = new org.jsecurity.cache.HashtableCacheManager();
    org.jsecurity.cache.Cache var21 = var19.getCache("\u0000\u0000");
    var0.setAuthorizationCache(var21);
    java.lang.String var23 = var0.getUserDefinitions();
    var0.init();
    java.io.InputStream var26 = org.jsecurity.util.ClassUtils.getResourceAsStream("");
    java.lang.Object[] var27 = new java.lang.Object[] { var26};
    java.util.List var28 = org.jsecurity.util.CollectionUtils.asList(var27);
    org.jsecurity.authc.pam.ModularRealmAuthenticator var29 = new org.jsecurity.authc.pam.ModularRealmAuthenticator(var28);
    org.jsecurity.subject.SimplePrincipalCollection var31 = new org.jsecurity.subject.SimplePrincipalCollection((java.util.Collection)var28, "org.jsecurity.authz.UnauthorizedException: org.jsecurity.session.ExpiredSessionException: ");
    java.util.List var32 = var31.asList();
    org.jsecurity.realm.activedirectory.ActiveDirectoryRealm var34 = new org.jsecurity.realm.activedirectory.ActiveDirectoryRealm();
    org.jsecurity.authc.credential.Sha256CredentialsMatcher var35 = new org.jsecurity.authc.credential.Sha256CredentialsMatcher();
    var34.setCredentialsMatcher((org.jsecurity.authc.credential.CredentialsMatcher)var35);
    java.lang.String var37 = var34.getAuthorizationCacheName();
    var34.setPrincipalSuffix("org.jsecurity.config.ConfigurationException: dd\uFFFD");
    org.jsecurity.authz.permission.PermissionResolver var40 = var34.getPermissionResolver();
    java.util.Set var41 = org.jsecurity.util.PermissionUtils.resolveDelimitedPermissions("NfxhYN7ItBfRAmDBmprtU73ghfEEPpcDJrHPkZ06wiY=", var40);
    var31.addAll((java.util.Collection)var41, "cff098b5-6d79-4f6d-93d3-148185d0b987");
    org.jsecurity.authz.aop.GuestAnnotationHandler var44 = new org.jsecurity.authz.aop.GuestAnnotationHandler();
    java.lang.Class var45 = var44.getAnnotationClass();
    java.lang.Object var46 = var31.oneByType(var45);
    var0.onLogout((org.jsecurity.subject.PrincipalCollection)var31);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var2);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var3);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var4);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var21);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var23);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var26);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var27);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var28);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var32);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var37);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var40);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var41);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var45);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var46);

  }

  public void test239() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest7.test239");


    java.io.InputStream var1 = org.jsecurity.util.ClassUtils.getResourceAsStream("");
    java.lang.Object[] var2 = new java.lang.Object[] { var1};
    java.util.List var3 = org.jsecurity.util.CollectionUtils.asList(var2);
    org.jsecurity.authc.pam.ModularRealmAuthenticator var4 = new org.jsecurity.authc.pam.ModularRealmAuthenticator(var3);
    org.jsecurity.authc.pam.AllSuccessfulModularAuthenticationStrategy var5 = new org.jsecurity.authc.pam.AllSuccessfulModularAuthenticationStrategy();
    var4.setModularAuthenticationStrategy((org.jsecurity.authc.pam.ModularAuthenticationStrategy)var5);
    org.jsecurity.authz.SimpleAuthorizationInfo var7 = new org.jsecurity.authz.SimpleAuthorizationInfo();
    var7.addStringPermission("hi!");
    java.io.InputStream var11 = org.jsecurity.util.ClassUtils.getResourceAsStream("");
    java.lang.Object[] var12 = new java.lang.Object[] { var11};
    java.util.List var13 = org.jsecurity.util.CollectionUtils.asList(var12);
    var7.addRoles((java.util.Collection)var13);
    var4.setAuthenticationListeners((java.util.Collection)var13);
    org.jsecurity.realm.activedirectory.ActiveDirectoryRealm var16 = new org.jsecurity.realm.activedirectory.ActiveDirectoryRealm();
    var16.setPrincipalSuffix("");
    var4.setRealm((org.jsecurity.realm.Realm)var16);
    org.jsecurity.authc.pam.FirstSuccessfulAuthenticationStrategy var20 = new org.jsecurity.authc.pam.FirstSuccessfulAuthenticationStrategy();
    org.jsecurity.authz.UnauthorizedException var22 = new org.jsecurity.authz.UnauthorizedException("org.jsecurity.config.ConfigurationException: dd\uFFFD");
    java.lang.Throwable[] var23 = var22.getSuppressed();
    java.util.List var24 = org.jsecurity.util.CollectionUtils.asList((java.lang.Object[])var23);
    org.jsecurity.authc.UsernamePasswordToken var25 = new org.jsecurity.authc.UsernamePasswordToken();
    java.lang.String var26 = var25.getUsername();
    java.net.InetAddress var27 = var25.getInetAddress();
    org.jsecurity.authc.AuthenticationInfo var28 = var20.beforeAllAttempts((java.util.Collection)var24, (org.jsecurity.authc.AuthenticationToken)var25);
    var4.setModularAuthenticationStrategy((org.jsecurity.authc.pam.ModularAuthenticationStrategy)var20);
    org.jsecurity.realm.activedirectory.ActiveDirectoryRealm var30 = new org.jsecurity.realm.activedirectory.ActiveDirectoryRealm();
    var30.init();
    var30.setSystemPassword("dd\uFFFD");
    var4.setRealm((org.jsecurity.realm.Realm)var30);
    java.io.InputStream var36 = org.jsecurity.util.ClassUtils.getResourceAsStream("");
    java.lang.Object[] var37 = new java.lang.Object[] { var36};
    java.util.List var38 = org.jsecurity.util.CollectionUtils.asList(var37);
    org.jsecurity.authc.pam.ModularRealmAuthenticator var39 = new org.jsecurity.authc.pam.ModularRealmAuthenticator(var38);
    org.jsecurity.subject.SimplePrincipalCollection var41 = new org.jsecurity.subject.SimplePrincipalCollection((java.util.Collection)var38, "org.jsecurity.authz.UnauthorizedException: org.jsecurity.session.ExpiredSessionException: ");
    java.util.Set var42 = var41.getRealmNames();
    java.io.InputStream var44 = org.jsecurity.util.ClassUtils.getResourceAsStream("");
    java.lang.Object[] var45 = new java.lang.Object[] { var44};
    java.util.List var46 = org.jsecurity.util.CollectionUtils.asList(var45);
    org.jsecurity.authc.pam.ModularRealmAuthenticator var47 = new org.jsecurity.authc.pam.ModularRealmAuthenticator(var46);
    org.jsecurity.subject.SimplePrincipalCollection var49 = new org.jsecurity.subject.SimplePrincipalCollection((java.util.Collection)var46, "org.jsecurity.authz.UnauthorizedException: org.jsecurity.session.ExpiredSessionException: ");
    org.jsecurity.session.UnknownSessionException var54 = new org.jsecurity.session.UnknownSessionException("dd\uFFFD", (java.io.Serializable)100.0f);
    org.jsecurity.session.SessionException var56 = new org.jsecurity.session.SessionException("dd\uFFFD", (java.lang.Throwable)var54, (java.io.Serializable)0);
    org.jsecurity.session.SessionException var57 = new org.jsecurity.session.SessionException("dd\uFFFD", (java.lang.Throwable)var54);
    var49.add((java.lang.Object)var57, "org.jsecurity.config.ConfigurationException: dd\uFFFD");
    java.util.Set var60 = var49.asSet();
    var41.addAll((java.util.Collection)var60, "6464ff");
    java.lang.String[] var65 = org.jsecurity.util.StringUtils.tokenizeToStringArray("", "org.jsecurity.realm.SimpleAccountRealm-55-authorization");
    var30.checkPermissions((org.jsecurity.subject.PrincipalCollection)var41, var65);
    java.lang.Class var67 = var30.getAuthenticationTokenClass();
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var1);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var2);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var3);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var11);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var12);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var13);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var23);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var24);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var26);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var27);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var28);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var36);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var37);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var38);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var42);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var44);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var45);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var46);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var60);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var65);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var67);

  }

  public void test240() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest7.test240");


    org.jsecurity.authz.SimpleRole var0 = new org.jsecurity.authz.SimpleRole();
    org.jsecurity.authz.permission.WildcardPermission var3 = new org.jsecurity.authz.permission.WildcardPermission("hi!", false);
    boolean var4 = var0.isPermitted((org.jsecurity.authz.Permission)var3);
    java.lang.String var5 = var0.getName();
    org.jsecurity.authz.UnauthorizedException var8 = new org.jsecurity.authz.UnauthorizedException("org.jsecurity.config.ConfigurationException: dd\uFFFD");
    org.jsecurity.session.InvalidSessionException var9 = new org.jsecurity.session.InvalidSessionException("90538851-b0e4-449f-8dda-973ab1d52c9e", (java.lang.Throwable)var8);
    boolean var10 = var0.equals((java.lang.Object)var9);
    java.lang.String var11 = var0.toString();
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var4 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var5);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var10 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var11);

  }

  public void test241() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest7.test241");


    org.jsecurity.realm.activedirectory.ActiveDirectoryRealm var0 = new org.jsecurity.realm.activedirectory.ActiveDirectoryRealm();
    var0.setSystemPassword("ZGT/");
    org.jsecurity.realm.activedirectory.ActiveDirectoryRealm var3 = new org.jsecurity.realm.activedirectory.ActiveDirectoryRealm();
    org.jsecurity.authc.credential.Sha256CredentialsMatcher var4 = new org.jsecurity.authc.credential.Sha256CredentialsMatcher();
    var3.setCredentialsMatcher((org.jsecurity.authc.credential.CredentialsMatcher)var4);
    java.lang.String var6 = var3.getAuthorizationCacheName();
    var3.setUrl("hi!");
    org.jsecurity.realm.ldap.DefaultLdapContextFactory var9 = new org.jsecurity.realm.ldap.DefaultLdapContextFactory();
    var3.setLdapContextFactory((org.jsecurity.realm.ldap.LdapContextFactory)var9);
    var9.setSearchBase("6464ff");
    var9.setUsePooling(true);
    var9.setSystemUsername("7edc3e5f-37f7-4a22-9779-4609545bccd8");
    var0.setLdapContextFactory((org.jsecurity.realm.ldap.LdapContextFactory)var9);
    org.jsecurity.realm.activedirectory.ActiveDirectoryRealm var18 = new org.jsecurity.realm.activedirectory.ActiveDirectoryRealm();
    org.jsecurity.authc.credential.Sha256CredentialsMatcher var19 = new org.jsecurity.authc.credential.Sha256CredentialsMatcher();
    var18.setCredentialsMatcher((org.jsecurity.authc.credential.CredentialsMatcher)var19);
    org.jsecurity.realm.activedirectory.ActiveDirectoryRealm var21 = new org.jsecurity.realm.activedirectory.ActiveDirectoryRealm();
    org.jsecurity.authc.credential.Sha256CredentialsMatcher var22 = new org.jsecurity.authc.credential.Sha256CredentialsMatcher();
    var21.setCredentialsMatcher((org.jsecurity.authc.credential.CredentialsMatcher)var22);
    java.lang.String var24 = var21.getAuthorizationCacheName();
    var21.setUrl("hi!");
    org.jsecurity.realm.ldap.DefaultLdapContextFactory var27 = new org.jsecurity.realm.ldap.DefaultLdapContextFactory();
    var21.setLdapContextFactory((org.jsecurity.realm.ldap.LdapContextFactory)var27);
    var27.setAuthentication("org.jsecurity.authz.UnauthorizedException: org.jsecurity.session.ExpiredSessionException: ");
    var18.setLdapContextFactory((org.jsecurity.realm.ldap.LdapContextFactory)var27);
    var27.setPrincipalSuffix("dd\uFFFD");
    var27.setReferral("ff9f2014-649d-414b-8132-f4962e7ca4d7");
    var27.setAuthentication("e23cc964-5ec8-4116-95c0-aa96771b692b");
    var0.setLdapContextFactory((org.jsecurity.realm.ldap.LdapContextFactory)var27);
    java.lang.Class var39 = var0.getAuthenticationTokenClass();
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var6);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var24);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var39);

  }

  public void test242() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest7.test242");


    org.jsecurity.authz.SimpleRole var1 = new org.jsecurity.authz.SimpleRole("7f2f7e38-70ef-4596-b197-ceb7511d003b");
    java.lang.String var2 = var1.getName();
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var2 + "' != '" + "7f2f7e38-70ef-4596-b197-ceb7511d003b"+ "'", var2.equals("7f2f7e38-70ef-4596-b197-ceb7511d003b"));

  }

  public void test243() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest7.test243");


    org.jsecurity.realm.jdbc.JdbcRealm var0 = new org.jsecurity.realm.jdbc.JdbcRealm();
    var0.setPermissionsQuery("org.jsecurity.realm.text.TextConfigurationRealm_445");
    var0.setUserRolesQuery("6464ff");
    org.jsecurity.authc.pam.AllSuccessfulModularAuthenticationStrategy var5 = new org.jsecurity.authc.pam.AllSuccessfulModularAuthenticationStrategy();
    char[] var7 = new char[] { };
    org.jsecurity.authc.UsernamePasswordToken var9 = new org.jsecurity.authc.UsernamePasswordToken("hi!", var7, true);
    org.jsecurity.authc.SimpleAccount var10 = new org.jsecurity.authc.SimpleAccount();
    var10.setCredentialsExpired(false);
    boolean var13 = var10.isLocked();
    org.jsecurity.authc.AuthenticationInfo var14 = var5.afterAllAttempts((org.jsecurity.authc.AuthenticationToken)var9, (org.jsecurity.authc.AuthenticationInfo)var10);
    char[] var16 = new char[] { };
    org.jsecurity.authc.UsernamePasswordToken var18 = new org.jsecurity.authc.UsernamePasswordToken("hi!", var16, true);
    byte[] var19 = org.jsecurity.codec.Hex.decode(var16);
    byte[] var20 = org.jsecurity.codec.Hex.decode(var16);
    var9.setPassword(var16);
    boolean var22 = var0.supports((org.jsecurity.authc.AuthenticationToken)var9);
    org.jsecurity.codec.CodecException var25 = new org.jsecurity.codec.CodecException("dd\uFFFD");
    org.jsecurity.authc.ConcurrentAccessException var26 = new org.jsecurity.authc.ConcurrentAccessException("org.jsecurity.authz.UnauthorizedException: org.jsecurity.session.ExpiredSessionException: ", (java.lang.Throwable)var25);
    org.jsecurity.subject.SimplePrincipalCollection var28 = new org.jsecurity.subject.SimplePrincipalCollection((java.lang.Object)var25, "");
    java.io.InputStream var30 = org.jsecurity.util.ClassUtils.getResourceAsStream("");
    java.lang.Object[] var31 = new java.lang.Object[] { var30};
    java.util.List var32 = org.jsecurity.util.CollectionUtils.asList(var31);
    org.jsecurity.authc.pam.ModularRealmAuthenticator var33 = new org.jsecurity.authc.pam.ModularRealmAuthenticator(var32);
    var28.addAll((java.util.Collection)var32, "\u0000\u0000");
    java.io.InputStream var37 = org.jsecurity.util.ClassUtils.getResourceAsStream("");
    java.lang.Object[] var38 = new java.lang.Object[] { var37};
    java.util.List var39 = org.jsecurity.util.CollectionUtils.asList(var38);
    org.jsecurity.authc.pam.ModularRealmAuthenticator var40 = new org.jsecurity.authc.pam.ModularRealmAuthenticator(var39);
    var28.addAll((java.util.Collection)var39, "\u0000\u0000");
    org.jsecurity.realm.SimpleAccountRealm var44 = new org.jsecurity.realm.SimpleAccountRealm("hi!");
    java.lang.Class var45 = var44.getAuthenticationTokenClass();
    java.util.Collection var46 = org.jsecurity.util.CollectionUtils.emptyCollection(var45);
    java.lang.Object var47 = org.jsecurity.util.ClassUtils.newInstance(var45);
    java.util.Collection var48 = var28.byType(var45);
    org.jsecurity.authc.ExpiredCredentialsException var50 = new org.jsecurity.authc.ExpiredCredentialsException();
    org.jsecurity.session.ExpiredSessionException var51 = new org.jsecurity.session.ExpiredSessionException("", (java.lang.Throwable)var50);
    java.lang.Throwable[] var52 = var51.getSuppressed();
    java.lang.Object var53 = org.jsecurity.util.ClassUtils.newInstance(var45, (java.lang.Object[])var52);
    var0.setAuthenticationTokenClass(var45);
    org.jsecurity.authz.permission.PermissionResolver var55 = var0.getPermissionResolver();
    org.jsecurity.authc.credential.Sha512CredentialsMatcher var56 = new org.jsecurity.authc.credential.Sha512CredentialsMatcher();
    boolean var57 = var56.isHashSalted();
    var56.setHashIterations(2);
    var0.setCredentialsMatcher((org.jsecurity.authc.credential.CredentialsMatcher)var56);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var7);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var13 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var14);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var16);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var19);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var20);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var22 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var30);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var31);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var32);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var37);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var38);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var39);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var45);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var46);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var47);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var48);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var52);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var53);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var55);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var57 == false);

  }

  public void test244() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest7.test244");


    org.jsecurity.crypto.hash.Sha384Hash var1 = org.jsecurity.crypto.hash.Sha384Hash.fromBase64String("HashtableCache [5dd0c65d-1422-49c2-becb-9e8dca619ab3]");
    java.lang.String var2 = var1.toString();
    org.jsecurity.crypto.BlowfishCipher var3 = new org.jsecurity.crypto.BlowfishCipher();
    java.security.Key var4 = org.jsecurity.crypto.BlowfishCipher.generateNewKey();
    var3.setKey(var4);
    java.security.Key var6 = org.jsecurity.crypto.BlowfishCipher.generateNewKey();
    var3.setKey(var6);
    byte[] var11 = new byte[] { (byte)100, (byte)100, (byte)(-1)};
    java.lang.String var12 = org.jsecurity.codec.CodecSupport.toString(var11);
    char[] var13 = org.jsecurity.codec.CodecSupport.toChars(var11);
    boolean var14 = org.jsecurity.codec.Base64.isBase64(var11);
    boolean var15 = org.jsecurity.codec.Base64.isBase64(var11);
    boolean var16 = org.jsecurity.codec.Base64.isBase64(var11);
    java.lang.String var17 = org.jsecurity.codec.Hex.encodeToString(var11);
    byte[] var21 = new byte[] { (byte)100, (byte)100, (byte)(-1)};
    java.lang.String var22 = org.jsecurity.codec.CodecSupport.toString(var21);
    char[] var23 = org.jsecurity.codec.CodecSupport.toChars(var21);
    boolean var24 = org.jsecurity.codec.Base64.isBase64(var21);
    boolean var25 = org.jsecurity.codec.Base64.isBase64(var21);
    boolean var26 = org.jsecurity.codec.Base64.isBase64(var21);
    java.lang.String var27 = org.jsecurity.codec.Base64.encodeToString(var21);
    byte[] var28 = var3.encrypt(var11, var21);
    org.jsecurity.io.DefaultSerializer var29 = new org.jsecurity.io.DefaultSerializer();
    org.jsecurity.authz.SimpleRole var30 = new org.jsecurity.authz.SimpleRole();
    byte[] var31 = var29.serialize((java.lang.Object)var30);
    byte[] var35 = new byte[] { (byte)100, (byte)100, (byte)(-1)};
    java.lang.String var36 = org.jsecurity.codec.CodecSupport.toString(var35);
    char[] var37 = org.jsecurity.codec.CodecSupport.toChars(var35);
    boolean var38 = org.jsecurity.codec.Base64.isBase64(var35);
    boolean var39 = org.jsecurity.codec.Base64.isBase64(var35);
    boolean var40 = org.jsecurity.codec.Base64.isBase64(var35);
    byte[] var41 = var3.encrypt(var31, var35);
    boolean var42 = org.jsecurity.codec.Base64.isBase64(var31);
    java.lang.String var43 = org.jsecurity.codec.Base64.encodeToString(var31);
    var1.setBytes(var31);
    java.lang.String var45 = var1.toHex();
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var2 + "' != '" + "1dab21b5a6e578269c85ee5d77473ae5dd78db6e3d7366de71bf5ef1d71aeb5f5a0000"+ "'", var2.equals("1dab21b5a6e578269c85ee5d77473ae5dd78db6e3d7366de71bf5ef1d71aeb5f5a0000"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var4);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var6);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var11);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var12 + "' != '" + "dd\uFFFD"+ "'", var12.equals("dd\uFFFD"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var13);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var14 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var15 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var16 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var17 + "' != '" + "6464ff"+ "'", var17.equals("6464ff"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var21);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var22 + "' != '" + "dd\uFFFD"+ "'", var22.equals("dd\uFFFD"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var23);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var24 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var25 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var26 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var27 + "' != '" + "ZGT/"+ "'", var27.equals("ZGT/"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var28);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var31);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var35);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var36 + "' != '" + "dd\uFFFD"+ "'", var36.equals("dd\uFFFD"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var37);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var38 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var39 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var40 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var41);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var42 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var43 + "' != '" + "rO0ABXNyAB5vcmcuanNlY3VyaXR5LmF1dGh6LlNpbXBsZVJvbGVJTIBtTJ3XygIAAkwABG5hbWV0ABJMamF2YS9sYW5nL1N0cmluZztMAAtwZXJtaXNzaW9uc3QAD0xqYXZhL3V0aWwvU2V0O3hwcHA="+ "'", var43.equals("rO0ABXNyAB5vcmcuanNlY3VyaXR5LmF1dGh6LlNpbXBsZVJvbGVJTIBtTJ3XygIAAkwABG5hbWV0ABJMamF2YS9sYW5nL1N0cmluZztMAAtwZXJtaXNzaW9uc3QAD0xqYXZhL3V0aWwvU2V0O3hwcHA="));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var45 + "' != '" + "aced00057372001e6f72672e6a73656375726974792e617574687a2e53696d706c65526f6c65494c806d4c9dd7ca0200024c00046e616d657400124c6a6176612f6c616e672f537472696e673b4c000b7065726d697373696f6e7374000f4c6a6176612f7574696c2f5365743b78707070"+ "'", var45.equals("aced00057372001e6f72672e6a73656375726974792e617574687a2e53696d706c65526f6c65494c806d4c9dd7ca0200024c00046e616d657400124c6a6176612f6c616e672f537472696e673b4c000b7065726d697373696f6e7374000f4c6a6176612f7574696c2f5365743b78707070"));

  }

  public void test245() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest7.test245");


    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      java.lang.Class var1 = org.jsecurity.util.ClassUtils.forName("34a0f5d5-fe6a-4296-bcec-aa0a04e0cd40");
      fail("Expected exception of type org.jsecurity.util.UnknownClassException");
    } catch (org.jsecurity.util.UnknownClassException e) {
      // Expected exception.
    }

  }

  public void test246() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest7.test246");


    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      org.jsecurity.config.IniConfiguration var1 = new org.jsecurity.config.IniConfiguration("c0a5a000-2a2c-48a5-8b3f-1db6b2cf66a4");
      fail("Expected exception of type org.jsecurity.config.ConfigurationException");
    } catch (org.jsecurity.config.ConfigurationException e) {
      // Expected exception.
    }

  }

  public void test247() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest7.test247");


    org.jsecurity.io.IniResource var0 = new org.jsecurity.io.IniResource();
    var0.setCharsetName("org.jsecurity.authz.UnauthorizedException: org.jsecurity.session.ExpiredSessionException: ");
    java.util.Map var3 = var0.getSections();
    java.util.Map var4 = var0.getSections();
    org.jsecurity.realm.activedirectory.ActiveDirectoryRealm var5 = new org.jsecurity.realm.activedirectory.ActiveDirectoryRealm();
    org.jsecurity.authc.credential.Sha256CredentialsMatcher var6 = new org.jsecurity.authc.credential.Sha256CredentialsMatcher();
    var5.setCredentialsMatcher((org.jsecurity.authc.credential.CredentialsMatcher)var6);
    java.lang.String var8 = var5.getAuthorizationCacheName();
    var5.setUrl("hi!");
    org.jsecurity.realm.ldap.DefaultLdapContextFactory var11 = new org.jsecurity.realm.ldap.DefaultLdapContextFactory();
    var5.setLdapContextFactory((org.jsecurity.realm.ldap.LdapContextFactory)var11);
    org.jsecurity.config.ReflectionBuilder var13 = new org.jsecurity.config.ReflectionBuilder();
    org.jsecurity.io.IniResource var14 = new org.jsecurity.io.IniResource();
    var14.setCharsetName("org.jsecurity.authz.UnauthorizedException: org.jsecurity.session.ExpiredSessionException: ");
    java.util.Map var17 = var14.getSections();
    java.util.Map var18 = var13.buildObjects(var17);
    org.jsecurity.config.ReflectionBuilder var19 = new org.jsecurity.config.ReflectionBuilder();
    org.jsecurity.io.IniResource var20 = new org.jsecurity.io.IniResource();
    var20.setCharsetName("org.jsecurity.authz.UnauthorizedException: org.jsecurity.session.ExpiredSessionException: ");
    java.util.Map var23 = var20.getSections();
    java.util.Map var24 = var19.buildObjects(var23);
    java.util.Map var25 = var13.buildObjects(var24);
    java.util.Map var26 = var13.getObjects();
    var11.setAdditionalEnvironment(var26);
    org.jsecurity.config.ReflectionBuilder var28 = new org.jsecurity.config.ReflectionBuilder();
    org.jsecurity.io.IniResource var29 = new org.jsecurity.io.IniResource();
    java.util.Map var30 = var29.getSections();
    var28.setObjects(var30);
    org.jsecurity.realm.activedirectory.ActiveDirectoryRealm var32 = new org.jsecurity.realm.activedirectory.ActiveDirectoryRealm();
    var32.init();
    var32.init();
    org.jsecurity.config.ReflectionBuilder var35 = new org.jsecurity.config.ReflectionBuilder();
    org.jsecurity.config.ReflectionBuilder var36 = new org.jsecurity.config.ReflectionBuilder();
    org.jsecurity.io.IniResource var37 = new org.jsecurity.io.IniResource();
    var37.setCharsetName("org.jsecurity.authz.UnauthorizedException: org.jsecurity.session.ExpiredSessionException: ");
    java.util.Map var40 = var37.getSections();
    java.util.Map var41 = var36.buildObjects(var40);
    org.jsecurity.config.ReflectionBuilder var42 = new org.jsecurity.config.ReflectionBuilder();
    org.jsecurity.io.IniResource var43 = new org.jsecurity.io.IniResource();
    var43.setCharsetName("org.jsecurity.authz.UnauthorizedException: org.jsecurity.session.ExpiredSessionException: ");
    java.util.Map var46 = var43.getSections();
    java.util.Map var47 = var42.buildObjects(var46);
    java.util.Map var48 = var36.buildObjects(var47);
    java.util.Map var49 = var35.buildObjects(var48);
    var32.setGroupRolesMap(var49);
    var28.setObjects(var49);
    org.jsecurity.config.ReflectionBuilder var52 = new org.jsecurity.config.ReflectionBuilder(var49);
    var11.setAdditionalEnvironment(var49);
    var11.setSystemPassword("c3e3a4ec-562a-4afb-8e51-7ec417f22d53");
    org.jsecurity.realm.activedirectory.ActiveDirectoryRealm var56 = new org.jsecurity.realm.activedirectory.ActiveDirectoryRealm();
    org.jsecurity.authc.credential.Sha256CredentialsMatcher var57 = new org.jsecurity.authc.credential.Sha256CredentialsMatcher();
    var56.setCredentialsMatcher((org.jsecurity.authc.credential.CredentialsMatcher)var57);
    java.lang.String var59 = var56.getAuthorizationCacheName();
    var56.setUrl("hi!");
    org.jsecurity.io.IniResource var62 = new org.jsecurity.io.IniResource();
    java.util.Map var63 = var62.getSections();
    java.util.Map var64 = var62.getSections();
    var56.setGroupRolesMap(var64);
    var11.setAdditionalEnvironment(var64);
    var0.setSections(var64);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var3);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var4);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var8);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var17);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var18);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var23);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var24);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var25);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var26);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var30);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var40);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var41);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var46);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var47);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var48);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var49);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var59);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var63);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var64);

  }

  public void test248() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest7.test248");


    org.jsecurity.session.mgt.DefaultSessionManager var0 = new org.jsecurity.session.mgt.DefaultSessionManager();
    org.jsecurity.mgt.DefaultSecurityManager var1 = new org.jsecurity.mgt.DefaultSecurityManager();
    org.jsecurity.authz.permission.WildcardPermissionResolver var2 = new org.jsecurity.authz.permission.WildcardPermissionResolver();
    var1.setPermissionResolver((org.jsecurity.authz.permission.PermissionResolver)var2);
    org.jsecurity.cache.CacheManager var4 = var1.getCacheManager();
    var0.setCacheManager(var4);
    org.jsecurity.session.mgt.SessionValidationScheduler var6 = var0.getSessionValidationScheduler();
    var0.enableSessionValidationIfNecessary();
    org.jsecurity.session.mgt.SessionValidationScheduler var8 = var0.getSessionValidationScheduler();
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var4);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var6);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var8);

  }

  public void test249() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest7.test249");


    org.jsecurity.realm.text.TextConfigurationRealm var0 = new org.jsecurity.realm.text.TextConfigurationRealm();
    java.io.InputStream var2 = org.jsecurity.util.ClassUtils.getResourceAsStream("");
    java.lang.Object[] var3 = new java.lang.Object[] { var2};
    java.util.List var4 = org.jsecurity.util.CollectionUtils.asList(var3);
    org.jsecurity.authc.pam.ModularRealmAuthenticator var5 = new org.jsecurity.authc.pam.ModularRealmAuthenticator(var4);
    org.jsecurity.subject.SimplePrincipalCollection var7 = new org.jsecurity.subject.SimplePrincipalCollection((java.util.Collection)var4, "org.jsecurity.authz.UnauthorizedException: org.jsecurity.session.ExpiredSessionException: ");
    org.jsecurity.session.UnknownSessionException var12 = new org.jsecurity.session.UnknownSessionException("dd\uFFFD", (java.io.Serializable)100.0f);
    org.jsecurity.session.SessionException var14 = new org.jsecurity.session.SessionException("dd\uFFFD", (java.lang.Throwable)var12, (java.io.Serializable)0);
    org.jsecurity.session.SessionException var15 = new org.jsecurity.session.SessionException("dd\uFFFD", (java.lang.Throwable)var12);
    var7.add((java.lang.Object)var15, "org.jsecurity.config.ConfigurationException: dd\uFFFD");
    var0.onLogout((org.jsecurity.subject.PrincipalCollection)var7);
    org.jsecurity.cache.HashtableCacheManager var19 = new org.jsecurity.cache.HashtableCacheManager();
    org.jsecurity.cache.Cache var21 = var19.getCache("\u0000\u0000");
    var0.setAuthorizationCache(var21);
    org.jsecurity.codec.CodecException var25 = new org.jsecurity.codec.CodecException("dd\uFFFD");
    org.jsecurity.authc.ConcurrentAccessException var26 = new org.jsecurity.authc.ConcurrentAccessException("org.jsecurity.authz.UnauthorizedException: org.jsecurity.session.ExpiredSessionException: ", (java.lang.Throwable)var25);
    org.jsecurity.subject.SimplePrincipalCollection var28 = new org.jsecurity.subject.SimplePrincipalCollection((java.lang.Object)var25, "");
    var0.onLogout((org.jsecurity.subject.PrincipalCollection)var28);
    java.util.Iterator var30 = var28.iterator();
    java.util.Collection var32 = var28.fromRealm("1ff0759d-a078-42db-aa3c-e9d1594c2032");
    org.jsecurity.util.AntPathMatcher var33 = new org.jsecurity.util.AntPathMatcher();
    var28.add((java.lang.Object)var33, "org.jsecurity.authc.UsernamePasswordToken - \u0000\u0000, rememberMe=false (Jeshs-iMac.local/192.168.2.1)");
    org.jsecurity.JSecurityException var37 = new org.jsecurity.JSecurityException();
    org.jsecurity.session.UnknownSessionException var42 = new org.jsecurity.session.UnknownSessionException("dd\uFFFD", (java.io.Serializable)100.0f);
    org.jsecurity.subject.SubjectException var43 = new org.jsecurity.subject.SubjectException("dd\uFFFD", (java.lang.Throwable)var42);
    org.jsecurity.authc.AccountException var44 = new org.jsecurity.authc.AccountException("hi!", (java.lang.Throwable)var43);
    org.jsecurity.session.StoppedSessionException var45 = new org.jsecurity.session.StoppedSessionException((java.lang.Throwable)var44);
    org.jsecurity.session.SessionException var46 = new org.jsecurity.session.SessionException("a2b823b1e72eae2b727289df8a00a89df8a0bab6ad8a89c4c5c7a9b62a270000", (java.lang.Throwable)var37, (java.io.Serializable)var44);
    org.jsecurity.session.UnknownSessionException var50 = new org.jsecurity.session.UnknownSessionException("dd\uFFFD", (java.io.Serializable)100.0f);
    org.jsecurity.session.SessionException var52 = new org.jsecurity.session.SessionException("dd\uFFFD", (java.lang.Throwable)var50, (java.io.Serializable)0);
    org.jsecurity.authc.SimpleAuthenticationInfo var55 = new org.jsecurity.authc.SimpleAuthenticationInfo((java.lang.Object)0, (java.lang.Object)10, "hi!");
    org.jsecurity.codec.CodecException var58 = new org.jsecurity.codec.CodecException("dd\uFFFD");
    org.jsecurity.authc.ConcurrentAccessException var59 = new org.jsecurity.authc.ConcurrentAccessException("org.jsecurity.authz.UnauthorizedException: org.jsecurity.session.ExpiredSessionException: ", (java.lang.Throwable)var58);
    org.jsecurity.subject.SimplePrincipalCollection var61 = new org.jsecurity.subject.SimplePrincipalCollection((java.lang.Object)var58, "");
    org.jsecurity.authc.pam.FirstSuccessfulAuthenticationStrategy var62 = new org.jsecurity.authc.pam.FirstSuccessfulAuthenticationStrategy();
    org.jsecurity.authz.UnauthorizedException var64 = new org.jsecurity.authz.UnauthorizedException("org.jsecurity.config.ConfigurationException: dd\uFFFD");
    java.lang.Throwable[] var65 = var64.getSuppressed();
    java.util.List var66 = org.jsecurity.util.CollectionUtils.asList((java.lang.Object[])var65);
    org.jsecurity.authc.UsernamePasswordToken var67 = new org.jsecurity.authc.UsernamePasswordToken();
    java.lang.String var68 = var67.getUsername();
    java.net.InetAddress var69 = var67.getInetAddress();
    org.jsecurity.authc.AuthenticationInfo var70 = var62.beforeAllAttempts((java.util.Collection)var66, (org.jsecurity.authc.AuthenticationToken)var67);
    org.jsecurity.session.UnknownSessionException var75 = new org.jsecurity.session.UnknownSessionException("dd\uFFFD", (java.io.Serializable)100.0f);
    org.jsecurity.subject.SubjectException var76 = new org.jsecurity.subject.SubjectException("dd\uFFFD", (java.lang.Throwable)var75);
    org.jsecurity.io.SerializationException var77 = new org.jsecurity.io.SerializationException("", (java.lang.Throwable)var76);
    java.lang.Throwable[] var78 = var76.getSuppressed();
    java.util.Set var79 = org.jsecurity.util.CollectionUtils.asSet((java.lang.Object[])var78);
    org.jsecurity.authc.SimpleAccount var80 = new org.jsecurity.authc.SimpleAccount((org.jsecurity.subject.PrincipalCollection)var61, (java.lang.Object)var66, var79);
    var55.setPrincipals((org.jsecurity.subject.PrincipalCollection)var61);
    var46.setSessionId((java.io.Serializable)var61);
    java.util.Collection var84 = var61.fromRealm("org.jsecurity.realm.text.PropertiesRealm_3090");
    var28.addAll((org.jsecurity.subject.PrincipalCollection)var61);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var2);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var3);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var4);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var21);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var30);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var32);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var65);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var66);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var68);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var69);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var70);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var78);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var79);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var84);

  }

  public void test250() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest7.test250");


    org.jsecurity.realm.text.TextConfigurationRealm var1 = new org.jsecurity.realm.text.TextConfigurationRealm();
    java.io.InputStream var3 = org.jsecurity.util.ClassUtils.getResourceAsStream("");
    java.lang.Object[] var4 = new java.lang.Object[] { var3};
    java.util.List var5 = org.jsecurity.util.CollectionUtils.asList(var4);
    org.jsecurity.authc.pam.ModularRealmAuthenticator var6 = new org.jsecurity.authc.pam.ModularRealmAuthenticator(var5);
    org.jsecurity.subject.SimplePrincipalCollection var8 = new org.jsecurity.subject.SimplePrincipalCollection((java.util.Collection)var5, "org.jsecurity.authz.UnauthorizedException: org.jsecurity.session.ExpiredSessionException: ");
    org.jsecurity.session.UnknownSessionException var13 = new org.jsecurity.session.UnknownSessionException("dd\uFFFD", (java.io.Serializable)100.0f);
    org.jsecurity.session.SessionException var15 = new org.jsecurity.session.SessionException("dd\uFFFD", (java.lang.Throwable)var13, (java.io.Serializable)0);
    org.jsecurity.session.SessionException var16 = new org.jsecurity.session.SessionException("dd\uFFFD", (java.lang.Throwable)var13);
    var8.add((java.lang.Object)var16, "org.jsecurity.config.ConfigurationException: dd\uFFFD");
    var1.onLogout((org.jsecurity.subject.PrincipalCollection)var8);
    java.util.Set var21 = org.jsecurity.util.PermissionUtils.toPermissionStrings("org.jsecurity.config.ConfigurationException: dd\uFFFD");
    org.jsecurity.authz.SimpleAuthorizationInfo var22 = new org.jsecurity.authz.SimpleAuthorizationInfo(var21);
    org.jsecurity.authz.SimpleAuthorizingAccount var23 = new org.jsecurity.authz.SimpleAuthorizingAccount((org.jsecurity.subject.PrincipalCollection)var8, (java.lang.Object)var21);
    org.jsecurity.session.StoppedSessionException var24 = new org.jsecurity.session.StoppedSessionException("org.jsecurity.realm.SimpleAccountRealm-55-authorization", (java.io.Serializable)var8);
    byte[] var30 = new byte[] { (byte)100, (byte)100, (byte)(-1)};
    java.lang.String var31 = org.jsecurity.codec.CodecSupport.toString(var30);
    byte[] var32 = org.jsecurity.codec.Base64.encode(var30);
    char[] var33 = org.jsecurity.codec.CodecSupport.toChars(var32);
    org.jsecurity.authc.UsernamePasswordToken var35 = new org.jsecurity.authc.UsernamePasswordToken("org.jsecurity.realm.SimpleAccountRealm-55-authorization", var33, false);
    char[] var36 = var35.getPassword();
    org.jsecurity.session.mgt.SimpleSession var38 = new org.jsecurity.session.mgt.SimpleSession();
    var38.setTimeout((-1L));
    org.jsecurity.session.mgt.SimpleSession var41 = new org.jsecurity.session.mgt.SimpleSession();
    java.util.Date var42 = var41.getLastAccessTime();
    var38.setLastAccessTime(var42);
    java.net.InetAddress var44 = var38.getHostAddress();
    org.jsecurity.authc.UsernamePasswordToken var45 = new org.jsecurity.authc.UsernamePasswordToken("classpath:org/jsecurity/cache/ehcache/ehcache.xml", var36, false, var44);
    boolean var46 = var8.equals((java.lang.Object)var44);
    java.util.Collection var48 = var8.fromRealm("6c9a3d8a-dfcf-4bc4-9aad-6adc8cd8bee3");
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var3);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var4);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var5);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var21);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var30);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var31 + "' != '" + "dd\uFFFD"+ "'", var31.equals("dd\uFFFD"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var32);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var33);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var36);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var42);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var44);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var46 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var48);

  }

  public void test251() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest7.test251");


    org.jsecurity.authc.AccountException var6 = new org.jsecurity.authc.AccountException("hi!");
    org.jsecurity.authc.IncorrectCredentialsException var7 = new org.jsecurity.authc.IncorrectCredentialsException((java.lang.Throwable)var6);
    org.jsecurity.session.ExpiredSessionException var8 = new org.jsecurity.session.ExpiredSessionException("org.jsecurity.authz.UnauthorizedException: org.jsecurity.session.ExpiredSessionException: ", (java.io.Serializable)var6);
    org.jsecurity.session.InvalidSessionException var9 = new org.jsecurity.session.InvalidSessionException("a2b823b1e72eae2b727289df8a00a89df8a0bab6ad8a89c4c5c7a9b62a270000", (java.lang.Throwable)var6);
    org.jsecurity.authc.ExpiredCredentialsException var10 = new org.jsecurity.authc.ExpiredCredentialsException("63bbad34-48e1-408f-9551-a8a0ca6e6734", (java.lang.Throwable)var6);
    org.jsecurity.authc.ExcessiveAttemptsException var11 = new org.jsecurity.authc.ExcessiveAttemptsException("5dd0c65d-1422-49c2-becb-9e8dca619ab3", (java.lang.Throwable)var10);
    org.jsecurity.authz.UnauthorizedException var12 = new org.jsecurity.authz.UnauthorizedException("ff9f2014-649d-414b-8132-f4962e7ca4d7", (java.lang.Throwable)var10);

  }

  public void test252() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest7.test252");


    org.jsecurity.codec.CodecException var2 = new org.jsecurity.codec.CodecException("dd\uFFFD");
    org.jsecurity.authc.ConcurrentAccessException var3 = new org.jsecurity.authc.ConcurrentAccessException("org.jsecurity.authz.UnauthorizedException: org.jsecurity.session.ExpiredSessionException: ", (java.lang.Throwable)var2);
    org.jsecurity.subject.SimplePrincipalCollection var5 = new org.jsecurity.subject.SimplePrincipalCollection((java.lang.Object)var2, "");
    char[] var9 = new char[] { };
    org.jsecurity.authc.UsernamePasswordToken var11 = new org.jsecurity.authc.UsernamePasswordToken("hi!", var9, true);
    org.jsecurity.authc.UsernamePasswordToken var12 = new org.jsecurity.authc.UsernamePasswordToken("\u0000\u0000", var9);
    org.jsecurity.session.mgt.SimpleSession var13 = new org.jsecurity.session.mgt.SimpleSession();
    var13.setTimeout((-1L));
    org.jsecurity.session.mgt.SimpleSession var16 = new org.jsecurity.session.mgt.SimpleSession();
    java.util.Date var17 = var16.getLastAccessTime();
    var13.setLastAccessTime(var17);
    java.net.InetAddress var19 = var13.getHostAddress();
    var12.setInetAddress(var19);
    org.jsecurity.session.mgt.SimpleSession var21 = new org.jsecurity.session.mgt.SimpleSession();
    var21.setTimeout((-1L));
    org.jsecurity.session.mgt.SimpleSession var24 = new org.jsecurity.session.mgt.SimpleSession();
    java.util.Date var25 = var24.getLastAccessTime();
    var21.setLastAccessTime(var25);
    org.jsecurity.session.mgt.SimpleSession var27 = new org.jsecurity.session.mgt.SimpleSession();
    java.util.Date var28 = var27.getLastAccessTime();
    var21.setStopTimestamp(var28);
    org.jsecurity.mgt.DefaultSecurityManager var30 = new org.jsecurity.mgt.DefaultSecurityManager();
    org.jsecurity.authc.pam.AllSuccessfulModularAuthenticationStrategy var31 = new org.jsecurity.authc.pam.AllSuccessfulModularAuthenticationStrategy();
    org.jsecurity.authc.pam.AllSuccessfulModularAuthenticationStrategy var32 = new org.jsecurity.authc.pam.AllSuccessfulModularAuthenticationStrategy();
    char[] var34 = new char[] { };
    org.jsecurity.authc.UsernamePasswordToken var36 = new org.jsecurity.authc.UsernamePasswordToken("hi!", var34, true);
    org.jsecurity.authc.SimpleAccount var37 = new org.jsecurity.authc.SimpleAccount();
    var37.setCredentialsExpired(false);
    boolean var40 = var37.isLocked();
    org.jsecurity.authc.AuthenticationInfo var41 = var32.afterAllAttempts((org.jsecurity.authc.AuthenticationToken)var36, (org.jsecurity.authc.AuthenticationInfo)var37);
    char[] var45 = new char[] { '4', '#'};
    org.jsecurity.authc.UsernamePasswordToken var46 = new org.jsecurity.authc.UsernamePasswordToken("\u0000\u0000", var45);
    org.jsecurity.authc.SimpleAccount var47 = new org.jsecurity.authc.SimpleAccount();
    var47.setCredentialsExpired(false);
    var47.setCredentialsExpired(false);
    boolean var52 = var47.isCredentialsExpired();
    org.jsecurity.authc.AuthenticationInfo var53 = var32.afterAllAttempts((org.jsecurity.authc.AuthenticationToken)var46, (org.jsecurity.authc.AuthenticationInfo)var47);
    org.jsecurity.authz.UnauthenticatedException var57 = new org.jsecurity.authz.UnauthenticatedException();
    org.jsecurity.config.UnresolveableReferenceException var58 = new org.jsecurity.config.UnresolveableReferenceException("", (java.lang.Throwable)var57);
    org.jsecurity.cache.CacheException var59 = new org.jsecurity.cache.CacheException("org.jsecurity.config.ConfigurationException: dd\uFFFD", (java.lang.Throwable)var57);
    org.jsecurity.authc.SimpleAuthenticationInfo var61 = new org.jsecurity.authc.SimpleAuthenticationInfo((java.lang.Object)"org.jsecurity.config.ConfigurationException: dd\uFFFD", (java.lang.Object)var59, "a2b823b1e72eae2b727289df8a00a89df8a0bab6ad8a89c4c5c7a9b62a270000");
    org.jsecurity.subject.PrincipalCollection var62 = var61.getPrincipals();
    org.jsecurity.authc.AuthenticationInfo var63 = var31.afterAllAttempts((org.jsecurity.authc.AuthenticationToken)var46, (org.jsecurity.authc.AuthenticationInfo)var61);
    var30.setModularAuthenticationStrategy((org.jsecurity.authc.pam.ModularAuthenticationStrategy)var31);
    org.jsecurity.subject.RememberMeManager var65 = var30.getRememberMeManager();
    org.jsecurity.authc.pam.ModularRealmAuthenticator var66 = new org.jsecurity.authc.pam.ModularRealmAuthenticator();
    var30.setAuthenticator((org.jsecurity.authc.Authenticator)var66);
    org.jsecurity.codec.CodecException var70 = new org.jsecurity.codec.CodecException("dd\uFFFD");
    org.jsecurity.authc.ConcurrentAccessException var71 = new org.jsecurity.authc.ConcurrentAccessException("org.jsecurity.authz.UnauthorizedException: org.jsecurity.session.ExpiredSessionException: ", (java.lang.Throwable)var70);
    org.jsecurity.subject.SimplePrincipalCollection var73 = new org.jsecurity.subject.SimplePrincipalCollection((java.lang.Object)var70, "");
    java.io.InputStream var75 = org.jsecurity.util.ClassUtils.getResourceAsStream("");
    java.lang.Object[] var76 = new java.lang.Object[] { var75};
    java.util.List var77 = org.jsecurity.util.CollectionUtils.asList(var76);
    org.jsecurity.authc.pam.ModularRealmAuthenticator var78 = new org.jsecurity.authc.pam.ModularRealmAuthenticator(var77);
    var73.addAll((java.util.Collection)var77, "\u0000\u0000");
    org.jsecurity.authc.pam.FirstSuccessfulAuthenticationStrategy var81 = new org.jsecurity.authc.pam.FirstSuccessfulAuthenticationStrategy();
    org.jsecurity.authz.UnauthorizedException var83 = new org.jsecurity.authz.UnauthorizedException("org.jsecurity.config.ConfigurationException: dd\uFFFD");
    java.lang.Throwable[] var84 = var83.getSuppressed();
    java.util.List var85 = org.jsecurity.util.CollectionUtils.asList((java.lang.Object[])var84);
    org.jsecurity.authc.UsernamePasswordToken var86 = new org.jsecurity.authc.UsernamePasswordToken();
    java.lang.String var87 = var86.getUsername();
    java.net.InetAddress var88 = var86.getInetAddress();
    org.jsecurity.authc.AuthenticationInfo var89 = var81.beforeAllAttempts((java.util.Collection)var85, (org.jsecurity.authc.AuthenticationToken)var86);
    var30.checkPermissions((org.jsecurity.subject.PrincipalCollection)var73, (java.util.Collection)var85);
    org.jsecurity.subject.DelegatingSubject var91 = new org.jsecurity.subject.DelegatingSubject((org.jsecurity.subject.PrincipalCollection)var5, false, var19, (org.jsecurity.session.Session)var21, (org.jsecurity.mgt.SecurityManager)var30);
    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      var30.setRememberMeEncryptionCipherKeyHex("af4b3469-92f9-4bb0-addf-358eefb0cfc9");
      fail("Expected exception of type java.lang.IllegalStateException");
    } catch (java.lang.IllegalStateException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var9);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var17);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var19);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var25);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var28);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var34);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var40 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var41);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var45);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var52 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var53);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var62);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var63);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var65);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var75);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var76);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var77);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var84);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var85);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var87);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var88);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var89);

  }

  public void test253() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest7.test253");


    org.jsecurity.authz.SimpleRole var0 = new org.jsecurity.authz.SimpleRole();
    org.jsecurity.authz.SimpleAuthorizationInfo var1 = new org.jsecurity.authz.SimpleAuthorizationInfo();
    var1.addRole("a2b823b1e72eae2b727289df8a00a89df8a0bab6ad8a89c4c5c7a9b62a270000");
    org.jsecurity.session.UnknownSessionException var8 = new org.jsecurity.session.UnknownSessionException("dd\uFFFD", (java.io.Serializable)100.0f);
    org.jsecurity.subject.SubjectException var9 = new org.jsecurity.subject.SubjectException("dd\uFFFD", (java.lang.Throwable)var8);
    org.jsecurity.io.SerializationException var10 = new org.jsecurity.io.SerializationException("", (java.lang.Throwable)var9);
    java.lang.Throwable[] var11 = var9.getSuppressed();
    java.util.Set var12 = org.jsecurity.util.CollectionUtils.asSet((java.lang.Object[])var11);
    var1.addRoles((java.util.Collection)var12);
    var0.addAll((java.util.Collection)var12);
    java.lang.String var15 = var0.getName();
    org.jsecurity.authz.SimpleRole var16 = new org.jsecurity.authz.SimpleRole();
    org.jsecurity.authz.permission.WildcardPermission var19 = new org.jsecurity.authz.permission.WildcardPermission("hi!", false);
    boolean var20 = var16.isPermitted((org.jsecurity.authz.Permission)var19);
    boolean var21 = var0.isPermitted((org.jsecurity.authz.Permission)var19);
    java.lang.String var22 = var0.toString();
    java.lang.String var23 = var0.getName();
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var11);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var12);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var15);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var20 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var21 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var22);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var23);

  }

  public void test254() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest7.test254");


    org.jsecurity.cache.HashtableCache var1 = new org.jsecurity.cache.HashtableCache("\u0000\u0000\u0000");
    org.jsecurity.session.mgt.SimpleSession var2 = new org.jsecurity.session.mgt.SimpleSession();
    var2.touch();
    org.jsecurity.authz.UnauthenticatedException var6 = new org.jsecurity.authz.UnauthenticatedException();
    org.jsecurity.config.UnresolveableReferenceException var7 = new org.jsecurity.config.UnresolveableReferenceException("", (java.lang.Throwable)var6);
    org.jsecurity.cache.CacheException var8 = new org.jsecurity.cache.CacheException("org.jsecurity.config.ConfigurationException: dd\uFFFD", (java.lang.Throwable)var6);
    java.lang.Object var9 = var2.removeAttribute((java.lang.Object)var8);
    org.jsecurity.mgt.DefaultSecurityManager var10 = new org.jsecurity.mgt.DefaultSecurityManager();
    org.jsecurity.authc.pam.AllSuccessfulModularAuthenticationStrategy var11 = new org.jsecurity.authc.pam.AllSuccessfulModularAuthenticationStrategy();
    org.jsecurity.authc.pam.AllSuccessfulModularAuthenticationStrategy var12 = new org.jsecurity.authc.pam.AllSuccessfulModularAuthenticationStrategy();
    char[] var14 = new char[] { };
    org.jsecurity.authc.UsernamePasswordToken var16 = new org.jsecurity.authc.UsernamePasswordToken("hi!", var14, true);
    org.jsecurity.authc.SimpleAccount var17 = new org.jsecurity.authc.SimpleAccount();
    var17.setCredentialsExpired(false);
    boolean var20 = var17.isLocked();
    org.jsecurity.authc.AuthenticationInfo var21 = var12.afterAllAttempts((org.jsecurity.authc.AuthenticationToken)var16, (org.jsecurity.authc.AuthenticationInfo)var17);
    char[] var25 = new char[] { '4', '#'};
    org.jsecurity.authc.UsernamePasswordToken var26 = new org.jsecurity.authc.UsernamePasswordToken("\u0000\u0000", var25);
    org.jsecurity.authc.SimpleAccount var27 = new org.jsecurity.authc.SimpleAccount();
    var27.setCredentialsExpired(false);
    var27.setCredentialsExpired(false);
    boolean var32 = var27.isCredentialsExpired();
    org.jsecurity.authc.AuthenticationInfo var33 = var12.afterAllAttempts((org.jsecurity.authc.AuthenticationToken)var26, (org.jsecurity.authc.AuthenticationInfo)var27);
    org.jsecurity.authz.UnauthenticatedException var37 = new org.jsecurity.authz.UnauthenticatedException();
    org.jsecurity.config.UnresolveableReferenceException var38 = new org.jsecurity.config.UnresolveableReferenceException("", (java.lang.Throwable)var37);
    org.jsecurity.cache.CacheException var39 = new org.jsecurity.cache.CacheException("org.jsecurity.config.ConfigurationException: dd\uFFFD", (java.lang.Throwable)var37);
    org.jsecurity.authc.SimpleAuthenticationInfo var41 = new org.jsecurity.authc.SimpleAuthenticationInfo((java.lang.Object)"org.jsecurity.config.ConfigurationException: dd\uFFFD", (java.lang.Object)var39, "a2b823b1e72eae2b727289df8a00a89df8a0bab6ad8a89c4c5c7a9b62a270000");
    org.jsecurity.subject.PrincipalCollection var42 = var41.getPrincipals();
    org.jsecurity.authc.AuthenticationInfo var43 = var11.afterAllAttempts((org.jsecurity.authc.AuthenticationToken)var26, (org.jsecurity.authc.AuthenticationInfo)var41);
    var10.setModularAuthenticationStrategy((org.jsecurity.authc.pam.ModularAuthenticationStrategy)var11);
    org.jsecurity.subject.RememberMeManager var45 = var10.getRememberMeManager();
    org.jsecurity.authc.pam.ModularRealmAuthenticator var46 = new org.jsecurity.authc.pam.ModularRealmAuthenticator();
    var10.setAuthenticator((org.jsecurity.authc.Authenticator)var46);
    var1.put((java.lang.Object)var2, (java.lang.Object)var46);
    var2.setTimeout(10L);
    org.jsecurity.session.mgt.SimpleSession var51 = new org.jsecurity.session.mgt.SimpleSession();
    var51.validate();
    java.util.Date var53 = var51.getStartTimestamp();
    var2.setStopTimestamp(var53);
    org.jsecurity.codec.CodecException var57 = new org.jsecurity.codec.CodecException("dd\uFFFD");
    org.jsecurity.authc.ConcurrentAccessException var58 = new org.jsecurity.authc.ConcurrentAccessException("org.jsecurity.authz.UnauthorizedException: org.jsecurity.session.ExpiredSessionException: ", (java.lang.Throwable)var57);
    org.jsecurity.authc.ExcessiveAttemptsException var59 = new org.jsecurity.authc.ExcessiveAttemptsException((java.lang.Throwable)var57);
    java.lang.Object var60 = var2.getAttribute((java.lang.Object)var57);
    var2.setTimeout(3600000L);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var9);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var14);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var20 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var21);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var25);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var32 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var33);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var42);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var43);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var45);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var53);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var60);

  }

  public void test255() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest7.test255");


    org.jsecurity.crypto.hash.Sha512Hash var2 = new org.jsecurity.crypto.hash.Sha512Hash((java.lang.Object)"e86ae671-9b55-425f-9fbe-53e372069fcd", (java.lang.Object)"944eaa9e-a16a-40cf-bdfa-a6f7f9bf6e53");

  }

  public void test256() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest7.test256");


    org.jsecurity.authz.SimpleAuthorizingAccount var0 = new org.jsecurity.authz.SimpleAuthorizingAccount();
    org.jsecurity.authz.SimpleAuthorizationInfo var1 = new org.jsecurity.authz.SimpleAuthorizationInfo();
    var1.addRole("a2b823b1e72eae2b727289df8a00a89df8a0bab6ad8a89c4c5c7a9b62a270000");
    org.jsecurity.authz.SimpleAuthorizationInfo var4 = new org.jsecurity.authz.SimpleAuthorizationInfo();
    var4.addRole("a2b823b1e72eae2b727289df8a00a89df8a0bab6ad8a89c4c5c7a9b62a270000");
    org.jsecurity.session.UnknownSessionException var11 = new org.jsecurity.session.UnknownSessionException("dd\uFFFD", (java.io.Serializable)100.0f);
    org.jsecurity.subject.SubjectException var12 = new org.jsecurity.subject.SubjectException("dd\uFFFD", (java.lang.Throwable)var11);
    org.jsecurity.io.SerializationException var13 = new org.jsecurity.io.SerializationException("", (java.lang.Throwable)var12);
    java.lang.Throwable[] var14 = var12.getSuppressed();
    java.util.Set var15 = org.jsecurity.util.CollectionUtils.asSet((java.lang.Object[])var14);
    var4.addRoles((java.util.Collection)var15);
    var1.setObjectPermissions(var15);
    var0.setSimpleRoles(var15);
    java.util.Set var19 = var0.getPermissions();
    org.jsecurity.authz.SimpleAuthorizationInfo var20 = new org.jsecurity.authz.SimpleAuthorizationInfo(var19);
    org.jsecurity.realm.text.TextConfigurationRealm var21 = new org.jsecurity.realm.text.TextConfigurationRealm();
    java.io.InputStream var23 = org.jsecurity.util.ClassUtils.getResourceAsStream("");
    java.lang.Object[] var24 = new java.lang.Object[] { var23};
    java.util.List var25 = org.jsecurity.util.CollectionUtils.asList(var24);
    org.jsecurity.authc.pam.ModularRealmAuthenticator var26 = new org.jsecurity.authc.pam.ModularRealmAuthenticator(var25);
    org.jsecurity.subject.SimplePrincipalCollection var28 = new org.jsecurity.subject.SimplePrincipalCollection((java.util.Collection)var25, "org.jsecurity.authz.UnauthorizedException: org.jsecurity.session.ExpiredSessionException: ");
    org.jsecurity.session.UnknownSessionException var33 = new org.jsecurity.session.UnknownSessionException("dd\uFFFD", (java.io.Serializable)100.0f);
    org.jsecurity.session.SessionException var35 = new org.jsecurity.session.SessionException("dd\uFFFD", (java.lang.Throwable)var33, (java.io.Serializable)0);
    org.jsecurity.session.SessionException var36 = new org.jsecurity.session.SessionException("dd\uFFFD", (java.lang.Throwable)var33);
    var28.add((java.lang.Object)var36, "org.jsecurity.config.ConfigurationException: dd\uFFFD");
    var21.onLogout((org.jsecurity.subject.PrincipalCollection)var28);
    org.jsecurity.cache.HashtableCacheManager var40 = new org.jsecurity.cache.HashtableCacheManager();
    org.jsecurity.cache.Cache var42 = var40.getCache("\u0000\u0000");
    var21.setAuthorizationCache(var42);
    org.jsecurity.codec.CodecException var46 = new org.jsecurity.codec.CodecException("dd\uFFFD");
    org.jsecurity.authc.ConcurrentAccessException var47 = new org.jsecurity.authc.ConcurrentAccessException("org.jsecurity.authz.UnauthorizedException: org.jsecurity.session.ExpiredSessionException: ", (java.lang.Throwable)var46);
    org.jsecurity.subject.SimplePrincipalCollection var49 = new org.jsecurity.subject.SimplePrincipalCollection((java.lang.Object)var46, "");
    var21.onLogout((org.jsecurity.subject.PrincipalCollection)var49);
    java.util.Iterator var51 = var49.iterator();
    java.util.Collection var53 = var49.fromRealm("1ff0759d-a078-42db-aa3c-e9d1594c2032");
    var20.addRoles(var53);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var14);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var15);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var19);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var23);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var24);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var25);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var42);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var51);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var53);

  }

  public void test257() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest7.test257");


    org.jsecurity.session.mgt.eis.MemorySessionDAO var0 = new org.jsecurity.session.mgt.eis.MemorySessionDAO();
    org.jsecurity.cache.Cache var1 = var0.getActiveSessionsCache();
    org.jsecurity.cache.CacheManager var2 = var0.getCacheManager();
    org.jsecurity.cache.HashtableCacheManager var3 = new org.jsecurity.cache.HashtableCacheManager();
    org.jsecurity.cache.Cache var5 = var3.getCache("\u0000\u0000");
    var0.setActiveSessionsCache(var5);
    java.io.InputStream var8 = org.jsecurity.util.ClassUtils.getResourceAsStream("");
    java.lang.Object[] var9 = new java.lang.Object[] { var8};
    java.util.List var10 = org.jsecurity.util.CollectionUtils.asList(var9);
    org.jsecurity.authc.pam.ModularRealmAuthenticator var11 = new org.jsecurity.authc.pam.ModularRealmAuthenticator(var10);
    org.jsecurity.authc.pam.AllSuccessfulModularAuthenticationStrategy var12 = new org.jsecurity.authc.pam.AllSuccessfulModularAuthenticationStrategy();
    var11.setModularAuthenticationStrategy((org.jsecurity.authc.pam.ModularAuthenticationStrategy)var12);
    org.jsecurity.authz.SimpleAuthorizationInfo var14 = new org.jsecurity.authz.SimpleAuthorizationInfo();
    var14.addStringPermission("hi!");
    java.io.InputStream var18 = org.jsecurity.util.ClassUtils.getResourceAsStream("");
    java.lang.Object[] var19 = new java.lang.Object[] { var18};
    java.util.List var20 = org.jsecurity.util.CollectionUtils.asList(var19);
    var14.addRoles((java.util.Collection)var20);
    var11.setAuthenticationListeners((java.util.Collection)var20);
    org.jsecurity.realm.activedirectory.ActiveDirectoryRealm var23 = new org.jsecurity.realm.activedirectory.ActiveDirectoryRealm();
    var23.setPrincipalSuffix("");
    var11.setRealm((org.jsecurity.realm.Realm)var23);
    org.jsecurity.cache.HashtableCacheManager var27 = new org.jsecurity.cache.HashtableCacheManager();
    org.jsecurity.cache.Cache var29 = var27.getCache("\u0000\u0000");
    var23.setAuthorizationCache(var29);
    var0.setActiveSessionsCache(var29);
    org.jsecurity.session.mgt.SimpleSession var32 = new org.jsecurity.session.mgt.SimpleSession();
    java.io.Serializable var33 = var0.create((org.jsecurity.session.Session)var32);
    org.jsecurity.session.mgt.SimpleSession var34 = new org.jsecurity.session.mgt.SimpleSession();
    var34.touch();
    var34.validate();
    org.jsecurity.session.mgt.SimpleSession var37 = new org.jsecurity.session.mgt.SimpleSession();
    var37.setTimeout((-1L));
    org.jsecurity.session.mgt.SimpleSession var40 = new org.jsecurity.session.mgt.SimpleSession();
    java.util.Date var41 = var40.getLastAccessTime();
    var37.setLastAccessTime(var41);
    org.jsecurity.session.mgt.SimpleSession var43 = new org.jsecurity.session.mgt.SimpleSession();
    java.util.Date var44 = var43.getLastAccessTime();
    var37.setStopTimestamp(var44);
    var34.setLastAccessTime(var44);
    var32.setLastAccessTime(var44);
    org.jsecurity.session.mgt.ImmutableProxiedSession var48 = new org.jsecurity.session.mgt.ImmutableProxiedSession((org.jsecurity.session.Session)var32);
    java.util.Date var49 = var48.getStartTimestamp();
    java.io.Serializable var50 = var48.getId();
    java.util.Collection var51 = var48.getAttributeKeys();
    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      var48.setTimeout(100L);
      fail("Expected exception of type org.jsecurity.session.InvalidSessionException");
    } catch (org.jsecurity.session.InvalidSessionException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var1);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var2);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var5);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var8);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var9);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var10);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var18);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var19);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var20);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var29);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var33 + "' != '" + "55bed2ba-01ae-40bb-aa3f-e8d874fa4a4d"+ "'", var33.equals("55bed2ba-01ae-40bb-aa3f-e8d874fa4a4d"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var41);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var44);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var49);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var50 + "' != '" + "55bed2ba-01ae-40bb-aa3f-e8d874fa4a4d"+ "'", var50.equals("55bed2ba-01ae-40bb-aa3f-e8d874fa4a4d"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var51);

  }

  public void test258() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest7.test258");


    org.jsecurity.config.IniConfiguration var0 = new org.jsecurity.config.IniConfiguration();
    java.lang.String var1 = var0.getConfig();
    var0.setConfigUrl("cff098b5-6d79-4f6d-93d3-148185d0b987");
    var0.setConfigUrl("\u0000\u0000");
    var0.setConfigUrl("org.jsecurity.realm.text.PropertiesRealm-480-authorization");
    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      var0.load("38f914b4-f3b1-4442-9664-7c31ce4da5a3");
      fail("Expected exception of type org.jsecurity.config.ConfigurationException");
    } catch (org.jsecurity.config.ConfigurationException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var1);

  }

  public void test259() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest7.test259");


    org.jsecurity.mgt.DefaultSecurityManager var0 = new org.jsecurity.mgt.DefaultSecurityManager();
    org.jsecurity.realm.text.TextConfigurationRealm var1 = new org.jsecurity.realm.text.TextConfigurationRealm();
    org.jsecurity.realm.text.TextConfigurationRealm var2 = new org.jsecurity.realm.text.TextConfigurationRealm();
    java.io.InputStream var4 = org.jsecurity.util.ClassUtils.getResourceAsStream("");
    java.lang.Object[] var5 = new java.lang.Object[] { var4};
    java.util.List var6 = org.jsecurity.util.CollectionUtils.asList(var5);
    org.jsecurity.authc.pam.ModularRealmAuthenticator var7 = new org.jsecurity.authc.pam.ModularRealmAuthenticator(var6);
    org.jsecurity.subject.SimplePrincipalCollection var9 = new org.jsecurity.subject.SimplePrincipalCollection((java.util.Collection)var6, "org.jsecurity.authz.UnauthorizedException: org.jsecurity.session.ExpiredSessionException: ");
    org.jsecurity.session.UnknownSessionException var14 = new org.jsecurity.session.UnknownSessionException("dd\uFFFD", (java.io.Serializable)100.0f);
    org.jsecurity.session.SessionException var16 = new org.jsecurity.session.SessionException("dd\uFFFD", (java.lang.Throwable)var14, (java.io.Serializable)0);
    org.jsecurity.session.SessionException var17 = new org.jsecurity.session.SessionException("dd\uFFFD", (java.lang.Throwable)var14);
    var9.add((java.lang.Object)var17, "org.jsecurity.config.ConfigurationException: dd\uFFFD");
    var2.onLogout((org.jsecurity.subject.PrincipalCollection)var9);
    java.util.Collection var22 = var9.fromRealm("\u0000\u0000\u0000");
    var1.onLogout((org.jsecurity.subject.PrincipalCollection)var9);
    java.util.Set var24 = var9.asSet();
    org.jsecurity.realm.activedirectory.ActiveDirectoryRealm var25 = new org.jsecurity.realm.activedirectory.ActiveDirectoryRealm();
    org.jsecurity.authc.credential.Sha256CredentialsMatcher var26 = new org.jsecurity.authc.credential.Sha256CredentialsMatcher();
    var25.setCredentialsMatcher((org.jsecurity.authc.credential.CredentialsMatcher)var26);
    java.lang.String var28 = var25.getAuthorizationCacheName();
    var25.setPrincipalSuffix("org.jsecurity.config.ConfigurationException: dd\uFFFD");
    org.jsecurity.realm.text.TextConfigurationRealm var31 = new org.jsecurity.realm.text.TextConfigurationRealm();
    java.io.InputStream var33 = org.jsecurity.util.ClassUtils.getResourceAsStream("");
    java.lang.Object[] var34 = new java.lang.Object[] { var33};
    java.util.List var35 = org.jsecurity.util.CollectionUtils.asList(var34);
    org.jsecurity.authc.pam.ModularRealmAuthenticator var36 = new org.jsecurity.authc.pam.ModularRealmAuthenticator(var35);
    org.jsecurity.subject.SimplePrincipalCollection var38 = new org.jsecurity.subject.SimplePrincipalCollection((java.util.Collection)var35, "org.jsecurity.authz.UnauthorizedException: org.jsecurity.session.ExpiredSessionException: ");
    org.jsecurity.session.UnknownSessionException var43 = new org.jsecurity.session.UnknownSessionException("dd\uFFFD", (java.io.Serializable)100.0f);
    org.jsecurity.session.SessionException var45 = new org.jsecurity.session.SessionException("dd\uFFFD", (java.lang.Throwable)var43, (java.io.Serializable)0);
    org.jsecurity.session.SessionException var46 = new org.jsecurity.session.SessionException("dd\uFFFD", (java.lang.Throwable)var43);
    var38.add((java.lang.Object)var46, "org.jsecurity.config.ConfigurationException: dd\uFFFD");
    var31.onLogout((org.jsecurity.subject.PrincipalCollection)var38);
    var25.onLogout((org.jsecurity.subject.PrincipalCollection)var38);
    org.jsecurity.realm.SimpleAccountRealm var52 = new org.jsecurity.realm.SimpleAccountRealm("hi!");
    java.lang.Class var53 = var52.getAuthenticationTokenClass();
    java.util.Collection var54 = org.jsecurity.util.CollectionUtils.emptyCollection(var53);
    java.util.Collection var55 = var38.byType(var53);
    org.jsecurity.authz.ModularRealmAuthorizer var56 = new org.jsecurity.authz.ModularRealmAuthorizer(var55);
    var0.checkRoles((org.jsecurity.subject.PrincipalCollection)var9, var55);
    org.jsecurity.realm.text.PropertiesRealm var58 = new org.jsecurity.realm.text.PropertiesRealm();
    java.lang.String var59 = var58.getUserDefinitions();
    org.jsecurity.cache.Cache var60 = var58.getAuthorizationCache();
    org.jsecurity.authc.credential.CredentialsMatcher var61 = var58.getCredentialsMatcher();
    org.jsecurity.authz.aop.UserAnnotationMethodInterceptor var62 = new org.jsecurity.authz.aop.UserAnnotationMethodInterceptor();
    org.jsecurity.aop.AnnotationHandler var63 = var62.getHandler();
    java.lang.Class var64 = var63.getAnnotationClass();
    var58.setAuthenticationTokenClass(var64);
    var0.setRealm((org.jsecurity.realm.Realm)var58);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var4);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var5);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var6);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var22);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var24);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var28);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var33);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var34);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var35);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var53);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var54);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var55);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var59);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var60);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var61);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var63);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var64);

  }

  public void test260() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest7.test260");


    org.jsecurity.mgt.DefaultSecurityManager var0 = new org.jsecurity.mgt.DefaultSecurityManager();
    java.io.InputStream var2 = org.jsecurity.util.ClassUtils.getResourceAsStream("");
    java.lang.Object[] var3 = new java.lang.Object[] { var2};
    java.util.List var4 = org.jsecurity.util.CollectionUtils.asList(var3);
    org.jsecurity.authc.pam.ModularRealmAuthenticator var5 = new org.jsecurity.authc.pam.ModularRealmAuthenticator(var4);
    org.jsecurity.authc.pam.AllSuccessfulModularAuthenticationStrategy var6 = new org.jsecurity.authc.pam.AllSuccessfulModularAuthenticationStrategy();
    var5.setModularAuthenticationStrategy((org.jsecurity.authc.pam.ModularAuthenticationStrategy)var6);
    org.jsecurity.authz.SimpleAuthorizationInfo var8 = new org.jsecurity.authz.SimpleAuthorizationInfo();
    var8.addStringPermission("hi!");
    java.io.InputStream var12 = org.jsecurity.util.ClassUtils.getResourceAsStream("");
    java.lang.Object[] var13 = new java.lang.Object[] { var12};
    java.util.List var14 = org.jsecurity.util.CollectionUtils.asList(var13);
    var8.addRoles((java.util.Collection)var14);
    var5.setAuthenticationListeners((java.util.Collection)var14);
    var0.setSessionListeners((java.util.Collection)var14);
    org.jsecurity.authc.pam.ModularRealmAuthenticator var18 = new org.jsecurity.authc.pam.ModularRealmAuthenticator();
    org.jsecurity.authz.permission.InvalidPermissionStringException var21 = new org.jsecurity.authz.permission.InvalidPermissionStringException("", "dd\uFFFD");
    org.jsecurity.JSecurityException var23 = new org.jsecurity.JSecurityException("");
    org.jsecurity.authc.SimpleAuthenticationInfo var25 = new org.jsecurity.authc.SimpleAuthenticationInfo((java.lang.Object)var21, (java.lang.Object)"", "org.jsecurity.authz.UnauthorizedException: org.jsecurity.session.ExpiredSessionException: ");
    org.jsecurity.subject.PrincipalCollection var26 = var25.getPrincipals();
    var18.onLogout(var26);
    var0.setAuthenticator((org.jsecurity.authc.Authenticator)var18);
    org.jsecurity.codec.CodecException var31 = new org.jsecurity.codec.CodecException("dd\uFFFD");
    org.jsecurity.authc.ConcurrentAccessException var32 = new org.jsecurity.authc.ConcurrentAccessException("org.jsecurity.authz.UnauthorizedException: org.jsecurity.session.ExpiredSessionException: ", (java.lang.Throwable)var31);
    org.jsecurity.subject.SimplePrincipalCollection var34 = new org.jsecurity.subject.SimplePrincipalCollection((java.lang.Object)var31, "");
    org.jsecurity.authc.pam.FirstSuccessfulAuthenticationStrategy var35 = new org.jsecurity.authc.pam.FirstSuccessfulAuthenticationStrategy();
    org.jsecurity.authz.UnauthorizedException var37 = new org.jsecurity.authz.UnauthorizedException("org.jsecurity.config.ConfigurationException: dd\uFFFD");
    java.lang.Throwable[] var38 = var37.getSuppressed();
    java.util.List var39 = org.jsecurity.util.CollectionUtils.asList((java.lang.Object[])var38);
    org.jsecurity.authc.UsernamePasswordToken var40 = new org.jsecurity.authc.UsernamePasswordToken();
    java.lang.String var41 = var40.getUsername();
    java.net.InetAddress var42 = var40.getInetAddress();
    org.jsecurity.authc.AuthenticationInfo var43 = var35.beforeAllAttempts((java.util.Collection)var39, (org.jsecurity.authc.AuthenticationToken)var40);
    org.jsecurity.session.UnknownSessionException var48 = new org.jsecurity.session.UnknownSessionException("dd\uFFFD", (java.io.Serializable)100.0f);
    org.jsecurity.subject.SubjectException var49 = new org.jsecurity.subject.SubjectException("dd\uFFFD", (java.lang.Throwable)var48);
    org.jsecurity.io.SerializationException var50 = new org.jsecurity.io.SerializationException("", (java.lang.Throwable)var49);
    java.lang.Throwable[] var51 = var49.getSuppressed();
    java.util.Set var52 = org.jsecurity.util.CollectionUtils.asSet((java.lang.Object[])var51);
    org.jsecurity.authc.SimpleAccount var53 = new org.jsecurity.authc.SimpleAccount((org.jsecurity.subject.PrincipalCollection)var34, (java.lang.Object)var39, var52);
    java.io.InputStream var55 = org.jsecurity.util.ClassUtils.getResourceAsStream("");
    java.lang.Object[] var56 = new java.lang.Object[] { var55};
    java.util.List var57 = org.jsecurity.util.CollectionUtils.asList(var56);
    org.jsecurity.authc.pam.ModularRealmAuthenticator var58 = new org.jsecurity.authc.pam.ModularRealmAuthenticator(var57);
    org.jsecurity.subject.SimplePrincipalCollection var60 = new org.jsecurity.subject.SimplePrincipalCollection((java.util.Collection)var57, "org.jsecurity.authz.UnauthorizedException: org.jsecurity.session.ExpiredSessionException: ");
    org.jsecurity.io.ResourceException var64 = new org.jsecurity.io.ResourceException("hi!");
    org.jsecurity.authc.UnknownAccountException var65 = new org.jsecurity.authc.UnknownAccountException((java.lang.Throwable)var64);
    org.jsecurity.session.StoppedSessionException var66 = new org.jsecurity.session.StoppedSessionException("dd\uFFFD", (java.io.Serializable)var64);
    org.jsecurity.session.UnknownSessionException var67 = new org.jsecurity.session.UnknownSessionException("org.jsecurity.authz.UnauthorizedException: org.jsecurity.session.ExpiredSessionException: ", (java.lang.Throwable)var64);
    boolean var68 = var60.equals((java.lang.Object)var64);
    var34.addAll((org.jsecurity.subject.PrincipalCollection)var60);
    org.jsecurity.session.UnknownSessionException var74 = new org.jsecurity.session.UnknownSessionException("dd\uFFFD", (java.io.Serializable)100.0f);
    org.jsecurity.subject.SubjectException var75 = new org.jsecurity.subject.SubjectException("dd\uFFFD", (java.lang.Throwable)var74);
    org.jsecurity.io.SerializationException var76 = new org.jsecurity.io.SerializationException("", (java.lang.Throwable)var75);
    java.lang.Throwable[] var77 = var75.getSuppressed();
    java.util.List var78 = org.jsecurity.util.CollectionUtils.asList((java.lang.Object[])var77);
    boolean var79 = var0.isPermittedAll((org.jsecurity.subject.PrincipalCollection)var34, (java.util.Collection)var78);
    org.jsecurity.subject.DelegatingSubject var80 = new org.jsecurity.subject.DelegatingSubject((org.jsecurity.mgt.SecurityManager)var0);
    boolean var82 = var80.hasRole("org.jsecurity.authc.IncorrectCredentialsException: \u0000\u0000");
    java.lang.String[] var85 = org.jsecurity.util.StringUtils.split("be750ca9-d7fd-4bd0-a0ae-e908c938eb8d", '4');
    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      var80.checkPermissions(var85);
      fail("Expected exception of type org.jsecurity.authz.UnauthenticatedException");
    } catch (org.jsecurity.authz.UnauthenticatedException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var2);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var3);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var4);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var12);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var13);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var14);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var26);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var38);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var39);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var41);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var42);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var43);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var51);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var52);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var55);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var56);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var57);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var68 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var77);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var78);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var79 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var82 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var85);

  }

  public void test261() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest7.test261");


    char[] var1 = new char[] { };
    org.jsecurity.authc.UsernamePasswordToken var3 = new org.jsecurity.authc.UsernamePasswordToken("hi!", var1, true);
    byte[] var4 = org.jsecurity.codec.Hex.decode(var1);
    byte[] var5 = org.jsecurity.codec.Hex.decode(var1);
    byte[] var7 = org.jsecurity.codec.Base64.encode(var5, true);
    byte[] var8 = org.jsecurity.codec.Base64.decode(var7);
    java.lang.String var9 = org.jsecurity.codec.CodecSupport.toString(var8);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var1);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var4);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var5);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var7);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var8);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var9 + "' != '" + ""+ "'", var9.equals(""));

  }

  public void test262() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest7.test262");


    org.jsecurity.session.UnknownSessionException var3 = new org.jsecurity.session.UnknownSessionException("dd\uFFFD", (java.io.Serializable)100.0f);
    org.jsecurity.session.SessionException var5 = new org.jsecurity.session.SessionException("dd\uFFFD", (java.lang.Throwable)var3, (java.io.Serializable)0);
    org.jsecurity.authc.SimpleAuthenticationInfo var8 = new org.jsecurity.authc.SimpleAuthenticationInfo((java.lang.Object)0, (java.lang.Object)10, "hi!");
    java.lang.Object var9 = var8.getCredentials();
    java.lang.String var10 = var8.toString();
    org.jsecurity.realm.text.TextConfigurationRealm var11 = new org.jsecurity.realm.text.TextConfigurationRealm();
    java.io.InputStream var13 = org.jsecurity.util.ClassUtils.getResourceAsStream("");
    java.lang.Object[] var14 = new java.lang.Object[] { var13};
    java.util.List var15 = org.jsecurity.util.CollectionUtils.asList(var14);
    org.jsecurity.authc.pam.ModularRealmAuthenticator var16 = new org.jsecurity.authc.pam.ModularRealmAuthenticator(var15);
    org.jsecurity.subject.SimplePrincipalCollection var18 = new org.jsecurity.subject.SimplePrincipalCollection((java.util.Collection)var15, "org.jsecurity.authz.UnauthorizedException: org.jsecurity.session.ExpiredSessionException: ");
    org.jsecurity.session.UnknownSessionException var23 = new org.jsecurity.session.UnknownSessionException("dd\uFFFD", (java.io.Serializable)100.0f);
    org.jsecurity.session.SessionException var25 = new org.jsecurity.session.SessionException("dd\uFFFD", (java.lang.Throwable)var23, (java.io.Serializable)0);
    org.jsecurity.session.SessionException var26 = new org.jsecurity.session.SessionException("dd\uFFFD", (java.lang.Throwable)var23);
    var18.add((java.lang.Object)var26, "org.jsecurity.config.ConfigurationException: dd\uFFFD");
    var11.onLogout((org.jsecurity.subject.PrincipalCollection)var18);
    org.jsecurity.cache.HashtableCacheManager var30 = new org.jsecurity.cache.HashtableCacheManager();
    org.jsecurity.cache.Cache var32 = var30.getCache("\u0000\u0000");
    var11.setAuthorizationCache(var32);
    org.jsecurity.codec.CodecException var36 = new org.jsecurity.codec.CodecException("dd\uFFFD");
    org.jsecurity.authc.ConcurrentAccessException var37 = new org.jsecurity.authc.ConcurrentAccessException("org.jsecurity.authz.UnauthorizedException: org.jsecurity.session.ExpiredSessionException: ", (java.lang.Throwable)var36);
    org.jsecurity.subject.SimplePrincipalCollection var39 = new org.jsecurity.subject.SimplePrincipalCollection((java.lang.Object)var36, "");
    var11.onLogout((org.jsecurity.subject.PrincipalCollection)var39);
    var8.setPrincipals((org.jsecurity.subject.PrincipalCollection)var39);
    org.jsecurity.realm.activedirectory.ActiveDirectoryRealm var42 = new org.jsecurity.realm.activedirectory.ActiveDirectoryRealm();
    org.jsecurity.authc.credential.Sha256CredentialsMatcher var43 = new org.jsecurity.authc.credential.Sha256CredentialsMatcher();
    var42.setCredentialsMatcher((org.jsecurity.authc.credential.CredentialsMatcher)var43);
    org.jsecurity.realm.activedirectory.ActiveDirectoryRealm var45 = new org.jsecurity.realm.activedirectory.ActiveDirectoryRealm();
    org.jsecurity.authc.credential.Sha256CredentialsMatcher var46 = new org.jsecurity.authc.credential.Sha256CredentialsMatcher();
    var45.setCredentialsMatcher((org.jsecurity.authc.credential.CredentialsMatcher)var46);
    java.lang.String var48 = var45.getAuthorizationCacheName();
    var45.setUrl("hi!");
    org.jsecurity.realm.ldap.DefaultLdapContextFactory var51 = new org.jsecurity.realm.ldap.DefaultLdapContextFactory();
    var45.setLdapContextFactory((org.jsecurity.realm.ldap.LdapContextFactory)var51);
    var51.setAuthentication("org.jsecurity.authz.UnauthorizedException: org.jsecurity.session.ExpiredSessionException: ");
    var42.setLdapContextFactory((org.jsecurity.realm.ldap.LdapContextFactory)var51);
    var51.setReferral("a2b823b1e72eae2b727289df8a00a89df8a0bab6ad8a89c4c5c7a9b62a270000");
    var51.setUrl("\u0000\u0000");
    java.util.Set var62 = org.jsecurity.util.PermissionUtils.toPermissionStrings("org.jsecurity.config.ConfigurationException: dd\uFFFD");
    org.jsecurity.authz.SimpleAuthorizationInfo var63 = new org.jsecurity.authz.SimpleAuthorizationInfo(var62);
    org.jsecurity.authz.SimpleRole var64 = new org.jsecurity.authz.SimpleRole();
    java.lang.String var65 = var64.getName();
    org.jsecurity.session.UnknownSessionException var70 = new org.jsecurity.session.UnknownSessionException("dd\uFFFD", (java.io.Serializable)100.0f);
    org.jsecurity.subject.SubjectException var71 = new org.jsecurity.subject.SubjectException("dd\uFFFD", (java.lang.Throwable)var70);
    org.jsecurity.io.SerializationException var72 = new org.jsecurity.io.SerializationException("", (java.lang.Throwable)var71);
    java.lang.Throwable[] var73 = var71.getSuppressed();
    java.util.Set var74 = org.jsecurity.util.CollectionUtils.asSet((java.lang.Object[])var73);
    var64.setPermissions(var74);
    org.jsecurity.authz.SimpleAuthorizingAccount var76 = new org.jsecurity.authz.SimpleAuthorizingAccount((org.jsecurity.subject.PrincipalCollection)var39, (java.lang.Object)"\u0000\u0000", "org.jsecurity.authc.AccountException: hi!", var62, var74);
    var76.setLocked(false);
    var76.setLocked(true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var9 + "' != '" + 10+ "'", var9.equals(10));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var13);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var14);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var15);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var32);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var48);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var62);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var65);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var73);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var74);

  }

  public void test263() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest7.test263");


    org.jsecurity.session.UnknownSessionException var3 = new org.jsecurity.session.UnknownSessionException("dd\uFFFD", (java.io.Serializable)100.0f);
    org.jsecurity.config.ConfigurationException var4 = new org.jsecurity.config.ConfigurationException("dd\uFFFD", (java.lang.Throwable)var3);
    java.lang.String var5 = var4.toString();
    org.jsecurity.authz.HostUnauthorizedException var8 = new org.jsecurity.authz.HostUnauthorizedException("hi!");
    org.jsecurity.authc.CredentialsException var9 = new org.jsecurity.authc.CredentialsException("\uFFFD\uFFFD#\uFFFD\uFFFD.\uFFFD+r\uFFFD\u6959(\uFFFD\uFFFDW\uFFFDq\uFFFD.\uFFFD\uFFFD^jY\uFFFDj\uFFFDa\uFFFD\uFFFD\uFFFDj\u0628", (java.lang.Throwable)var8);
    var4.addSuppressed((java.lang.Throwable)var8);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var5 + "' != '" + "org.jsecurity.config.ConfigurationException: dd\uFFFD"+ "'", var5.equals("org.jsecurity.config.ConfigurationException: dd\uFFFD"));

  }

  public void test264() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest7.test264");


    org.jsecurity.realm.text.TextConfigurationRealm var0 = new org.jsecurity.realm.text.TextConfigurationRealm();
    java.io.InputStream var2 = org.jsecurity.util.ClassUtils.getResourceAsStream("");
    java.lang.Object[] var3 = new java.lang.Object[] { var2};
    java.util.List var4 = org.jsecurity.util.CollectionUtils.asList(var3);
    org.jsecurity.authc.pam.ModularRealmAuthenticator var5 = new org.jsecurity.authc.pam.ModularRealmAuthenticator(var4);
    org.jsecurity.subject.SimplePrincipalCollection var7 = new org.jsecurity.subject.SimplePrincipalCollection((java.util.Collection)var4, "org.jsecurity.authz.UnauthorizedException: org.jsecurity.session.ExpiredSessionException: ");
    org.jsecurity.session.UnknownSessionException var12 = new org.jsecurity.session.UnknownSessionException("dd\uFFFD", (java.io.Serializable)100.0f);
    org.jsecurity.session.SessionException var14 = new org.jsecurity.session.SessionException("dd\uFFFD", (java.lang.Throwable)var12, (java.io.Serializable)0);
    org.jsecurity.session.SessionException var15 = new org.jsecurity.session.SessionException("dd\uFFFD", (java.lang.Throwable)var12);
    var7.add((java.lang.Object)var15, "org.jsecurity.config.ConfigurationException: dd\uFFFD");
    var0.onLogout((org.jsecurity.subject.PrincipalCollection)var7);
    org.jsecurity.cache.HashtableCacheManager var19 = new org.jsecurity.cache.HashtableCacheManager();
    org.jsecurity.cache.Cache var21 = var19.getCache("\u0000\u0000");
    var0.setAuthorizationCache(var21);
    org.jsecurity.codec.CodecException var25 = new org.jsecurity.codec.CodecException("dd\uFFFD");
    org.jsecurity.authc.ConcurrentAccessException var26 = new org.jsecurity.authc.ConcurrentAccessException("org.jsecurity.authz.UnauthorizedException: org.jsecurity.session.ExpiredSessionException: ", (java.lang.Throwable)var25);
    org.jsecurity.subject.SimplePrincipalCollection var28 = new org.jsecurity.subject.SimplePrincipalCollection((java.lang.Object)var25, "");
    var0.onLogout((org.jsecurity.subject.PrincipalCollection)var28);
    var0.setRoleDefinitions("hi!");
    org.jsecurity.authc.pam.ModularRealmAuthenticator var32 = new org.jsecurity.authc.pam.ModularRealmAuthenticator((org.jsecurity.realm.Realm)var0);
    java.io.InputStream var34 = org.jsecurity.util.ClassUtils.getResourceAsStream("");
    java.lang.Object[] var35 = new java.lang.Object[] { var34};
    java.util.List var36 = org.jsecurity.util.CollectionUtils.asList(var35);
    org.jsecurity.authc.pam.ModularRealmAuthenticator var37 = new org.jsecurity.authc.pam.ModularRealmAuthenticator(var36);
    org.jsecurity.subject.SimplePrincipalCollection var39 = new org.jsecurity.subject.SimplePrincipalCollection((java.util.Collection)var36, "org.jsecurity.authz.UnauthorizedException: org.jsecurity.session.ExpiredSessionException: ");
    org.jsecurity.io.ResourceException var43 = new org.jsecurity.io.ResourceException("hi!");
    org.jsecurity.authc.UnknownAccountException var44 = new org.jsecurity.authc.UnknownAccountException((java.lang.Throwable)var43);
    org.jsecurity.session.StoppedSessionException var45 = new org.jsecurity.session.StoppedSessionException("dd\uFFFD", (java.io.Serializable)var43);
    org.jsecurity.session.UnknownSessionException var46 = new org.jsecurity.session.UnknownSessionException("org.jsecurity.authz.UnauthorizedException: org.jsecurity.session.ExpiredSessionException: ", (java.lang.Throwable)var43);
    boolean var47 = var39.equals((java.lang.Object)var43);
    org.jsecurity.authz.aop.RoleAnnotationMethodInterceptor var48 = new org.jsecurity.authz.aop.RoleAnnotationMethodInterceptor();
    org.jsecurity.aop.AnnotationHandler var49 = var48.getHandler();
    java.lang.Class var50 = var49.getAnnotationClass();
    java.lang.Object var51 = var39.oneByType(var50);
    var0.onLogout((org.jsecurity.subject.PrincipalCollection)var39);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var2);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var3);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var4);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var21);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var34);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var35);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var36);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var47 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var49);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var50);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var51);

  }

  public void test265() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest7.test265");


    org.jsecurity.realm.activedirectory.ActiveDirectoryRealm var0 = new org.jsecurity.realm.activedirectory.ActiveDirectoryRealm();
    org.jsecurity.authc.credential.Sha256CredentialsMatcher var1 = new org.jsecurity.authc.credential.Sha256CredentialsMatcher();
    var0.setCredentialsMatcher((org.jsecurity.authc.credential.CredentialsMatcher)var1);
    java.lang.String var3 = var0.getAuthorizationCacheName();
    org.jsecurity.authc.UsernamePasswordToken var4 = new org.jsecurity.authc.UsernamePasswordToken();
    java.lang.String var5 = var4.getUsername();
    java.lang.Object var6 = var4.getPrincipal();
    boolean var7 = var0.supports((org.jsecurity.authc.AuthenticationToken)var4);
    var0.setAuthorizationCacheName("?\u0238\u0018@\uFFFD");
    var0.init();
    var0.setPrincipalSuffix("s\uFFFD\uFFFDkG\uFFFD\uFFFD\uFFFD4\uFFFDW\uFFFDi\uFFFD\uFFFDi\uFFFD\u067D\uFFFD{\uFFFD\u001F");
    var0.initAuthorizationCache();
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var3);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var5);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var6);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var7 == true);

  }

  public void test266() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest7.test266");


    org.jsecurity.util.AntPathMatcher var0 = new org.jsecurity.util.AntPathMatcher();
    boolean var2 = var0.isPattern("\u0000\u0000\u0000");
    boolean var5 = var0.match("6464ff", "\uFFFD\uFFFD#\uFFFD\uFFFD.\uFFFD+rr\uFFFD\u07CA\u0000\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\u01E9\uFFFD*'\u0000\u0000");
    java.lang.String var8 = var0.extractPathWithinPattern("orgjsecurityauthcCredentialsException783ccd3148a842dd890fdf885a7baafAA==", "a3e14b98-1050-4bcc-8787-431663db8814");
    boolean var11 = var0.match("org.jsecurity.realm.SimpleAccountRealm-55-authorization", "96fe6e53-b302-476e-93c9-0dc51d66e5e0");
    boolean var13 = var0.isPattern("4c20e6b5-f5d8-4e6f-b584-735e30488227");
    boolean var15 = var0.isPattern("c1011819-6bf2-4dab-9482-1d3562bebb3d");
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var2 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var5 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var8 + "' != '" + ""+ "'", var8.equals(""));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var11 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var13 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var15 == false);

  }

  public void test267() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest7.test267");


    org.jsecurity.authz.UnauthorizedException var1 = new org.jsecurity.authz.UnauthorizedException();
    org.jsecurity.config.UnresolveableReferenceException var2 = new org.jsecurity.config.UnresolveableReferenceException("def3bb13-1c13-4efd-8418-6ca61c15cbd6", (java.lang.Throwable)var1);
    org.jsecurity.util.UnknownClassException var3 = new org.jsecurity.util.UnknownClassException((java.lang.Throwable)var1);

  }

  public void test268() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest7.test268");


    org.jsecurity.session.mgt.eis.MemorySessionDAO var0 = new org.jsecurity.session.mgt.eis.MemorySessionDAO();
    org.jsecurity.cache.Cache var1 = var0.getActiveSessionsCache();
    org.jsecurity.cache.CacheManager var2 = var0.getCacheManager();
    org.jsecurity.cache.HashtableCacheManager var3 = new org.jsecurity.cache.HashtableCacheManager();
    org.jsecurity.cache.Cache var5 = var3.getCache("\u0000\u0000");
    var0.setActiveSessionsCache(var5);
    java.io.InputStream var8 = org.jsecurity.util.ClassUtils.getResourceAsStream("");
    java.lang.Object[] var9 = new java.lang.Object[] { var8};
    java.util.List var10 = org.jsecurity.util.CollectionUtils.asList(var9);
    org.jsecurity.authc.pam.ModularRealmAuthenticator var11 = new org.jsecurity.authc.pam.ModularRealmAuthenticator(var10);
    org.jsecurity.authc.pam.AllSuccessfulModularAuthenticationStrategy var12 = new org.jsecurity.authc.pam.AllSuccessfulModularAuthenticationStrategy();
    var11.setModularAuthenticationStrategy((org.jsecurity.authc.pam.ModularAuthenticationStrategy)var12);
    org.jsecurity.authz.SimpleAuthorizationInfo var14 = new org.jsecurity.authz.SimpleAuthorizationInfo();
    var14.addStringPermission("hi!");
    java.io.InputStream var18 = org.jsecurity.util.ClassUtils.getResourceAsStream("");
    java.lang.Object[] var19 = new java.lang.Object[] { var18};
    java.util.List var20 = org.jsecurity.util.CollectionUtils.asList(var19);
    var14.addRoles((java.util.Collection)var20);
    var11.setAuthenticationListeners((java.util.Collection)var20);
    org.jsecurity.realm.activedirectory.ActiveDirectoryRealm var23 = new org.jsecurity.realm.activedirectory.ActiveDirectoryRealm();
    var23.setPrincipalSuffix("");
    var11.setRealm((org.jsecurity.realm.Realm)var23);
    org.jsecurity.cache.HashtableCacheManager var27 = new org.jsecurity.cache.HashtableCacheManager();
    org.jsecurity.cache.Cache var29 = var27.getCache("\u0000\u0000");
    var23.setAuthorizationCache(var29);
    var0.setActiveSessionsCache(var29);
    org.jsecurity.session.mgt.SimpleSession var32 = new org.jsecurity.session.mgt.SimpleSession();
    java.io.Serializable var33 = var0.create((org.jsecurity.session.Session)var32);
    org.jsecurity.session.mgt.SimpleSession var34 = new org.jsecurity.session.mgt.SimpleSession();
    var34.touch();
    var34.validate();
    org.jsecurity.session.mgt.SimpleSession var37 = new org.jsecurity.session.mgt.SimpleSession();
    var37.setTimeout((-1L));
    org.jsecurity.session.mgt.SimpleSession var40 = new org.jsecurity.session.mgt.SimpleSession();
    java.util.Date var41 = var40.getLastAccessTime();
    var37.setLastAccessTime(var41);
    org.jsecurity.session.mgt.SimpleSession var43 = new org.jsecurity.session.mgt.SimpleSession();
    java.util.Date var44 = var43.getLastAccessTime();
    var37.setStopTimestamp(var44);
    var34.setLastAccessTime(var44);
    var32.setLastAccessTime(var44);
    org.jsecurity.session.mgt.ImmutableProxiedSession var48 = new org.jsecurity.session.mgt.ImmutableProxiedSession((org.jsecurity.session.Session)var32);
    org.jsecurity.session.ProxiedSession var49 = new org.jsecurity.session.ProxiedSession((org.jsecurity.session.Session)var32);
    org.jsecurity.session.ProxiedSession var50 = new org.jsecurity.session.ProxiedSession((org.jsecurity.session.Session)var49);
    org.jsecurity.realm.activedirectory.ActiveDirectoryRealm var52 = new org.jsecurity.realm.activedirectory.ActiveDirectoryRealm();
    org.jsecurity.authc.credential.Sha256CredentialsMatcher var53 = new org.jsecurity.authc.credential.Sha256CredentialsMatcher();
    var52.setCredentialsMatcher((org.jsecurity.authc.credential.CredentialsMatcher)var53);
    java.lang.String var55 = var52.getAuthorizationCacheName();
    var52.setUrl("hi!");
    org.jsecurity.realm.ldap.DefaultLdapContextFactory var58 = new org.jsecurity.realm.ldap.DefaultLdapContextFactory();
    var52.setLdapContextFactory((org.jsecurity.realm.ldap.LdapContextFactory)var58);
    var49.setAttribute((java.lang.Object)"57f108f5-de1f-46bc-a431-6c2563f95e22", (java.lang.Object)var52);
    java.util.Date var61 = var49.getStartTimestamp();
    java.util.Date var62 = var49.getStartTimestamp();
    var49.touch();
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var1);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var2);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var5);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var8);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var9);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var10);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var18);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var19);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var20);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var29);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var33 + "' != '" + "9e06ef18-14cb-4757-a2d1-318643a80035"+ "'", var33.equals("9e06ef18-14cb-4757-a2d1-318643a80035"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var41);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var44);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var55);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var61);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var62);

  }

  public void test269() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest7.test269");


    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      java.io.InputStream var1 = org.jsecurity.io.ResourceUtils.getInputStreamForPath("2de55d54-e620-45f7-8afd-a30a33a48e47");
      fail("Expected exception of type java.io.FileNotFoundException");
    } catch (java.io.FileNotFoundException e) {
      // Expected exception.
    }

  }

  public void test270() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest7.test270");


    java.io.InputStream var1 = org.jsecurity.util.ClassUtils.getResourceAsStream("");
    java.lang.Object[] var2 = new java.lang.Object[] { var1};
    java.util.List var3 = org.jsecurity.util.CollectionUtils.asList(var2);
    org.jsecurity.authc.pam.ModularRealmAuthenticator var4 = new org.jsecurity.authc.pam.ModularRealmAuthenticator(var3);
    org.jsecurity.subject.SimplePrincipalCollection var6 = new org.jsecurity.subject.SimplePrincipalCollection((java.util.Collection)var3, "org.jsecurity.authz.UnauthorizedException: org.jsecurity.session.ExpiredSessionException: ");
    org.jsecurity.session.UnknownSessionException var11 = new org.jsecurity.session.UnknownSessionException("dd\uFFFD", (java.io.Serializable)100.0f);
    org.jsecurity.session.SessionException var13 = new org.jsecurity.session.SessionException("dd\uFFFD", (java.lang.Throwable)var11, (java.io.Serializable)0);
    org.jsecurity.session.SessionException var14 = new org.jsecurity.session.SessionException("dd\uFFFD", (java.lang.Throwable)var11);
    var6.add((java.lang.Object)var14, "org.jsecurity.config.ConfigurationException: dd\uFFFD");
    java.util.Set var17 = var6.asSet();
    org.jsecurity.authz.SimpleAuthorizationInfo var18 = new org.jsecurity.authz.SimpleAuthorizationInfo(var17);
    java.util.Set var19 = var18.getObjectPermissions();
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var1);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var2);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var3);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var17);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var19);

  }

  public void test271() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest7.test271");


    org.jsecurity.session.mgt.eis.MemorySessionDAO var0 = new org.jsecurity.session.mgt.eis.MemorySessionDAO();
    org.jsecurity.cache.Cache var1 = var0.getActiveSessionsCache();
    org.jsecurity.cache.CacheManager var2 = var0.getCacheManager();
    org.jsecurity.cache.HashtableCacheManager var3 = new org.jsecurity.cache.HashtableCacheManager();
    org.jsecurity.cache.Cache var5 = var3.getCache("\u0000\u0000");
    var0.setActiveSessionsCache(var5);
    java.io.InputStream var8 = org.jsecurity.util.ClassUtils.getResourceAsStream("");
    java.lang.Object[] var9 = new java.lang.Object[] { var8};
    java.util.List var10 = org.jsecurity.util.CollectionUtils.asList(var9);
    org.jsecurity.authc.pam.ModularRealmAuthenticator var11 = new org.jsecurity.authc.pam.ModularRealmAuthenticator(var10);
    org.jsecurity.authc.pam.AllSuccessfulModularAuthenticationStrategy var12 = new org.jsecurity.authc.pam.AllSuccessfulModularAuthenticationStrategy();
    var11.setModularAuthenticationStrategy((org.jsecurity.authc.pam.ModularAuthenticationStrategy)var12);
    org.jsecurity.authz.SimpleAuthorizationInfo var14 = new org.jsecurity.authz.SimpleAuthorizationInfo();
    var14.addStringPermission("hi!");
    java.io.InputStream var18 = org.jsecurity.util.ClassUtils.getResourceAsStream("");
    java.lang.Object[] var19 = new java.lang.Object[] { var18};
    java.util.List var20 = org.jsecurity.util.CollectionUtils.asList(var19);
    var14.addRoles((java.util.Collection)var20);
    var11.setAuthenticationListeners((java.util.Collection)var20);
    org.jsecurity.realm.activedirectory.ActiveDirectoryRealm var23 = new org.jsecurity.realm.activedirectory.ActiveDirectoryRealm();
    var23.setPrincipalSuffix("");
    var11.setRealm((org.jsecurity.realm.Realm)var23);
    org.jsecurity.cache.HashtableCacheManager var27 = new org.jsecurity.cache.HashtableCacheManager();
    org.jsecurity.cache.Cache var29 = var27.getCache("\u0000\u0000");
    var23.setAuthorizationCache(var29);
    var0.setActiveSessionsCache(var29);
    org.jsecurity.session.mgt.SimpleSession var32 = new org.jsecurity.session.mgt.SimpleSession();
    java.io.Serializable var33 = var0.create((org.jsecurity.session.Session)var32);
    org.jsecurity.session.mgt.SimpleSession var34 = new org.jsecurity.session.mgt.SimpleSession();
    var34.touch();
    var34.validate();
    org.jsecurity.session.mgt.SimpleSession var37 = new org.jsecurity.session.mgt.SimpleSession();
    var37.setTimeout((-1L));
    org.jsecurity.session.mgt.SimpleSession var40 = new org.jsecurity.session.mgt.SimpleSession();
    java.util.Date var41 = var40.getLastAccessTime();
    var37.setLastAccessTime(var41);
    org.jsecurity.session.mgt.SimpleSession var43 = new org.jsecurity.session.mgt.SimpleSession();
    java.util.Date var44 = var43.getLastAccessTime();
    var37.setStopTimestamp(var44);
    var34.setLastAccessTime(var44);
    var32.setLastAccessTime(var44);
    org.jsecurity.session.mgt.ImmutableProxiedSession var48 = new org.jsecurity.session.mgt.ImmutableProxiedSession((org.jsecurity.session.Session)var32);
    java.util.Date var49 = var48.getStartTimestamp();
    java.io.Serializable var50 = var48.getId();
    java.util.Date var51 = var48.getStartTimestamp();
    java.util.Date var52 = var48.getLastAccessTime();
    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      var48.setTimeout(3600000L);
      fail("Expected exception of type org.jsecurity.session.InvalidSessionException");
    } catch (org.jsecurity.session.InvalidSessionException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var1);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var2);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var5);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var8);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var9);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var10);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var18);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var19);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var20);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var29);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var33 + "' != '" + "eb6366a3-f6a1-47a1-918e-7c38d7d05a5d"+ "'", var33.equals("eb6366a3-f6a1-47a1-918e-7c38d7d05a5d"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var41);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var44);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var49);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var50 + "' != '" + "eb6366a3-f6a1-47a1-918e-7c38d7d05a5d"+ "'", var50.equals("eb6366a3-f6a1-47a1-918e-7c38d7d05a5d"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var51);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var52);

  }

  public void test272() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest7.test272");


    org.jsecurity.mgt.DefaultSecurityManager var0 = new org.jsecurity.mgt.DefaultSecurityManager();
    java.io.InputStream var2 = org.jsecurity.util.ClassUtils.getResourceAsStream("");
    java.lang.Object[] var3 = new java.lang.Object[] { var2};
    java.util.List var4 = org.jsecurity.util.CollectionUtils.asList(var3);
    org.jsecurity.authc.pam.ModularRealmAuthenticator var5 = new org.jsecurity.authc.pam.ModularRealmAuthenticator(var4);
    org.jsecurity.authc.pam.AllSuccessfulModularAuthenticationStrategy var6 = new org.jsecurity.authc.pam.AllSuccessfulModularAuthenticationStrategy();
    var5.setModularAuthenticationStrategy((org.jsecurity.authc.pam.ModularAuthenticationStrategy)var6);
    org.jsecurity.authz.SimpleAuthorizationInfo var8 = new org.jsecurity.authz.SimpleAuthorizationInfo();
    var8.addStringPermission("hi!");
    java.io.InputStream var12 = org.jsecurity.util.ClassUtils.getResourceAsStream("");
    java.lang.Object[] var13 = new java.lang.Object[] { var12};
    java.util.List var14 = org.jsecurity.util.CollectionUtils.asList(var13);
    var8.addRoles((java.util.Collection)var14);
    var5.setAuthenticationListeners((java.util.Collection)var14);
    var0.setSessionListeners((java.util.Collection)var14);
    org.jsecurity.authc.pam.ModularRealmAuthenticator var18 = new org.jsecurity.authc.pam.ModularRealmAuthenticator();
    org.jsecurity.authz.permission.InvalidPermissionStringException var21 = new org.jsecurity.authz.permission.InvalidPermissionStringException("", "dd\uFFFD");
    org.jsecurity.JSecurityException var23 = new org.jsecurity.JSecurityException("");
    org.jsecurity.authc.SimpleAuthenticationInfo var25 = new org.jsecurity.authc.SimpleAuthenticationInfo((java.lang.Object)var21, (java.lang.Object)"", "org.jsecurity.authz.UnauthorizedException: org.jsecurity.session.ExpiredSessionException: ");
    org.jsecurity.subject.PrincipalCollection var26 = var25.getPrincipals();
    var18.onLogout(var26);
    var0.setAuthenticator((org.jsecurity.authc.Authenticator)var18);
    org.jsecurity.codec.CodecException var31 = new org.jsecurity.codec.CodecException("dd\uFFFD");
    org.jsecurity.authc.ConcurrentAccessException var32 = new org.jsecurity.authc.ConcurrentAccessException("org.jsecurity.authz.UnauthorizedException: org.jsecurity.session.ExpiredSessionException: ", (java.lang.Throwable)var31);
    org.jsecurity.subject.SimplePrincipalCollection var34 = new org.jsecurity.subject.SimplePrincipalCollection((java.lang.Object)var31, "");
    org.jsecurity.authc.pam.FirstSuccessfulAuthenticationStrategy var35 = new org.jsecurity.authc.pam.FirstSuccessfulAuthenticationStrategy();
    org.jsecurity.authz.UnauthorizedException var37 = new org.jsecurity.authz.UnauthorizedException("org.jsecurity.config.ConfigurationException: dd\uFFFD");
    java.lang.Throwable[] var38 = var37.getSuppressed();
    java.util.List var39 = org.jsecurity.util.CollectionUtils.asList((java.lang.Object[])var38);
    org.jsecurity.authc.UsernamePasswordToken var40 = new org.jsecurity.authc.UsernamePasswordToken();
    java.lang.String var41 = var40.getUsername();
    java.net.InetAddress var42 = var40.getInetAddress();
    org.jsecurity.authc.AuthenticationInfo var43 = var35.beforeAllAttempts((java.util.Collection)var39, (org.jsecurity.authc.AuthenticationToken)var40);
    org.jsecurity.session.UnknownSessionException var48 = new org.jsecurity.session.UnknownSessionException("dd\uFFFD", (java.io.Serializable)100.0f);
    org.jsecurity.subject.SubjectException var49 = new org.jsecurity.subject.SubjectException("dd\uFFFD", (java.lang.Throwable)var48);
    org.jsecurity.io.SerializationException var50 = new org.jsecurity.io.SerializationException("", (java.lang.Throwable)var49);
    java.lang.Throwable[] var51 = var49.getSuppressed();
    java.util.Set var52 = org.jsecurity.util.CollectionUtils.asSet((java.lang.Object[])var51);
    org.jsecurity.authc.SimpleAccount var53 = new org.jsecurity.authc.SimpleAccount((org.jsecurity.subject.PrincipalCollection)var34, (java.lang.Object)var39, var52);
    java.io.InputStream var55 = org.jsecurity.util.ClassUtils.getResourceAsStream("");
    java.lang.Object[] var56 = new java.lang.Object[] { var55};
    java.util.List var57 = org.jsecurity.util.CollectionUtils.asList(var56);
    org.jsecurity.authc.pam.ModularRealmAuthenticator var58 = new org.jsecurity.authc.pam.ModularRealmAuthenticator(var57);
    org.jsecurity.subject.SimplePrincipalCollection var60 = new org.jsecurity.subject.SimplePrincipalCollection((java.util.Collection)var57, "org.jsecurity.authz.UnauthorizedException: org.jsecurity.session.ExpiredSessionException: ");
    org.jsecurity.io.ResourceException var64 = new org.jsecurity.io.ResourceException("hi!");
    org.jsecurity.authc.UnknownAccountException var65 = new org.jsecurity.authc.UnknownAccountException((java.lang.Throwable)var64);
    org.jsecurity.session.StoppedSessionException var66 = new org.jsecurity.session.StoppedSessionException("dd\uFFFD", (java.io.Serializable)var64);
    org.jsecurity.session.UnknownSessionException var67 = new org.jsecurity.session.UnknownSessionException("org.jsecurity.authz.UnauthorizedException: org.jsecurity.session.ExpiredSessionException: ", (java.lang.Throwable)var64);
    boolean var68 = var60.equals((java.lang.Object)var64);
    var34.addAll((org.jsecurity.subject.PrincipalCollection)var60);
    org.jsecurity.session.UnknownSessionException var74 = new org.jsecurity.session.UnknownSessionException("dd\uFFFD", (java.io.Serializable)100.0f);
    org.jsecurity.subject.SubjectException var75 = new org.jsecurity.subject.SubjectException("dd\uFFFD", (java.lang.Throwable)var74);
    org.jsecurity.io.SerializationException var76 = new org.jsecurity.io.SerializationException("", (java.lang.Throwable)var75);
    java.lang.Throwable[] var77 = var75.getSuppressed();
    java.util.List var78 = org.jsecurity.util.CollectionUtils.asList((java.lang.Object[])var77);
    boolean var79 = var0.isPermittedAll((org.jsecurity.subject.PrincipalCollection)var34, (java.util.Collection)var78);
    org.jsecurity.realm.activedirectory.ActiveDirectoryRealm var80 = new org.jsecurity.realm.activedirectory.ActiveDirectoryRealm();
    var80.init();
    var80.setSystemPassword("dd\uFFFD");
    org.jsecurity.authz.aop.GuestAnnotationHandler var84 = new org.jsecurity.authz.aop.GuestAnnotationHandler();
    java.lang.Class var85 = var84.getAnnotationClass();
    var80.setAuthenticationTokenClass(var85);
    java.util.Collection var87 = org.jsecurity.util.CollectionUtils.emptyCollection(var85);
    var0.setAuthenticationListeners(var87);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var2);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var3);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var4);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var12);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var13);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var14);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var26);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var38);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var39);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var41);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var42);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var43);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var51);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var52);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var55);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var56);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var57);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var68 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var77);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var78);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var79 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var85);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var87);

  }

  public void test273() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest7.test273");


    java.io.InputStream var1 = org.jsecurity.util.ClassUtils.getResourceAsStream("");
    java.lang.Object[] var2 = new java.lang.Object[] { var1};
    java.util.List var3 = org.jsecurity.util.CollectionUtils.asList(var2);
    org.jsecurity.authc.pam.ModularRealmAuthenticator var4 = new org.jsecurity.authc.pam.ModularRealmAuthenticator(var3);
    org.jsecurity.subject.SimplePrincipalCollection var6 = new org.jsecurity.subject.SimplePrincipalCollection((java.util.Collection)var3, "org.jsecurity.authz.UnauthorizedException: org.jsecurity.session.ExpiredSessionException: ");
    org.jsecurity.io.ResourceException var10 = new org.jsecurity.io.ResourceException("hi!");
    org.jsecurity.authc.UnknownAccountException var11 = new org.jsecurity.authc.UnknownAccountException((java.lang.Throwable)var10);
    org.jsecurity.session.StoppedSessionException var12 = new org.jsecurity.session.StoppedSessionException("dd\uFFFD", (java.io.Serializable)var10);
    org.jsecurity.session.UnknownSessionException var13 = new org.jsecurity.session.UnknownSessionException("org.jsecurity.authz.UnauthorizedException: org.jsecurity.session.ExpiredSessionException: ", (java.lang.Throwable)var10);
    boolean var14 = var6.equals((java.lang.Object)var10);
    org.jsecurity.subject.SimplePrincipalCollection var15 = new org.jsecurity.subject.SimplePrincipalCollection((org.jsecurity.subject.PrincipalCollection)var6);
    org.jsecurity.authz.SimpleAuthorizationInfo var16 = new org.jsecurity.authz.SimpleAuthorizationInfo();
    org.jsecurity.session.UnknownSessionException var21 = new org.jsecurity.session.UnknownSessionException("dd\uFFFD", (java.io.Serializable)100.0f);
    org.jsecurity.subject.SubjectException var22 = new org.jsecurity.subject.SubjectException("dd\uFFFD", (java.lang.Throwable)var21);
    org.jsecurity.io.SerializationException var23 = new org.jsecurity.io.SerializationException("", (java.lang.Throwable)var22);
    java.lang.Throwable[] var24 = var22.getSuppressed();
    java.util.Set var25 = org.jsecurity.util.CollectionUtils.asSet((java.lang.Object[])var24);
    var16.setStringPermissions(var25);
    java.util.Set var27 = var16.getRoles();
    org.jsecurity.authz.SimpleAuthorizationInfo var28 = new org.jsecurity.authz.SimpleAuthorizationInfo();
    var28.addRole("a2b823b1e72eae2b727289df8a00a89df8a0bab6ad8a89c4c5c7a9b62a270000");
    org.jsecurity.session.UnknownSessionException var35 = new org.jsecurity.session.UnknownSessionException("dd\uFFFD", (java.io.Serializable)100.0f);
    org.jsecurity.subject.SubjectException var36 = new org.jsecurity.subject.SubjectException("dd\uFFFD", (java.lang.Throwable)var35);
    org.jsecurity.io.SerializationException var37 = new org.jsecurity.io.SerializationException("", (java.lang.Throwable)var36);
    java.lang.Throwable[] var38 = var36.getSuppressed();
    java.util.Set var39 = org.jsecurity.util.CollectionUtils.asSet((java.lang.Object[])var38);
    var28.addRoles((java.util.Collection)var39);
    var16.setRoles(var39);
    org.jsecurity.authz.SimpleRole var42 = new org.jsecurity.authz.SimpleRole();
    org.jsecurity.authz.SimpleAuthorizationInfo var43 = new org.jsecurity.authz.SimpleAuthorizationInfo();
    var43.addRole("a2b823b1e72eae2b727289df8a00a89df8a0bab6ad8a89c4c5c7a9b62a270000");
    org.jsecurity.session.UnknownSessionException var50 = new org.jsecurity.session.UnknownSessionException("dd\uFFFD", (java.io.Serializable)100.0f);
    org.jsecurity.subject.SubjectException var51 = new org.jsecurity.subject.SubjectException("dd\uFFFD", (java.lang.Throwable)var50);
    org.jsecurity.io.SerializationException var52 = new org.jsecurity.io.SerializationException("", (java.lang.Throwable)var51);
    java.lang.Throwable[] var53 = var51.getSuppressed();
    java.util.Set var54 = org.jsecurity.util.CollectionUtils.asSet((java.lang.Object[])var53);
    var43.addRoles((java.util.Collection)var54);
    var42.addAll((java.util.Collection)var54);
    java.lang.String var57 = var42.getName();
    org.jsecurity.authz.permission.WildcardPermission var60 = new org.jsecurity.authz.permission.WildcardPermission("hi!", false);
    var42.add((org.jsecurity.authz.Permission)var60);
    org.jsecurity.authz.permission.WildcardPermission var64 = new org.jsecurity.authz.permission.WildcardPermission("hi!", false);
    var42.add((org.jsecurity.authz.Permission)var64);
    org.jsecurity.authz.SimpleRole var67 = new org.jsecurity.authz.SimpleRole();
    org.jsecurity.authz.permission.WildcardPermission var70 = new org.jsecurity.authz.permission.WildcardPermission("hi!", false);
    boolean var71 = var67.isPermitted((org.jsecurity.authz.Permission)var70);
    org.jsecurity.session.InvalidSessionException var72 = new org.jsecurity.session.InvalidSessionException("org.jsecurity.config.ConfigurationException: dd\uFFFD", (java.io.Serializable)var70);
    org.jsecurity.authz.SimpleRole var73 = new org.jsecurity.authz.SimpleRole();
    org.jsecurity.authz.permission.WildcardPermission var76 = new org.jsecurity.authz.permission.WildcardPermission("hi!", false);
    boolean var77 = var73.isPermitted((org.jsecurity.authz.Permission)var76);
    boolean var78 = var70.implies((org.jsecurity.authz.Permission)var76);
    var42.add((org.jsecurity.authz.Permission)var70);
    var16.addObjectPermission((org.jsecurity.authz.Permission)var70);
    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      org.jsecurity.crypto.hash.Md5Hash var82 = new org.jsecurity.crypto.hash.Md5Hash((java.lang.Object)var15, (java.lang.Object)var16, 10);
      fail("Expected exception of type org.jsecurity.codec.CodecException");
    } catch (org.jsecurity.codec.CodecException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var1);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var2);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var3);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var14 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var24);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var25);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var27);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var38);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var39);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var53);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var54);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var57);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var71 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var77 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var78 == true);

  }

  public void test274() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest7.test274");


    org.jsecurity.session.UnknownSessionException var5 = new org.jsecurity.session.UnknownSessionException("dd\uFFFD", (java.io.Serializable)100.0f);
    org.jsecurity.subject.SubjectException var6 = new org.jsecurity.subject.SubjectException("dd\uFFFD", (java.lang.Throwable)var5);
    org.jsecurity.authc.AccountException var7 = new org.jsecurity.authc.AccountException("hi!", (java.lang.Throwable)var6);
    org.jsecurity.session.ExpiredSessionException var8 = new org.jsecurity.session.ExpiredSessionException("dd\uFFFD", (java.io.Serializable)var7);
    org.jsecurity.session.SessionException var9 = new org.jsecurity.session.SessionException((java.lang.Throwable)var7);
    org.jsecurity.util.UnknownClassException var10 = new org.jsecurity.util.UnknownClassException((java.lang.Throwable)var9);

  }

  public void test275() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest7.test275");


    org.jsecurity.realm.activedirectory.ActiveDirectoryRealm var0 = new org.jsecurity.realm.activedirectory.ActiveDirectoryRealm();
    var0.setSystemPassword("ZGT/");
    org.jsecurity.realm.activedirectory.ActiveDirectoryRealm var3 = new org.jsecurity.realm.activedirectory.ActiveDirectoryRealm();
    org.jsecurity.authc.credential.Sha256CredentialsMatcher var4 = new org.jsecurity.authc.credential.Sha256CredentialsMatcher();
    var3.setCredentialsMatcher((org.jsecurity.authc.credential.CredentialsMatcher)var4);
    java.lang.String var6 = var3.getAuthorizationCacheName();
    var3.setUrl("hi!");
    org.jsecurity.realm.ldap.DefaultLdapContextFactory var9 = new org.jsecurity.realm.ldap.DefaultLdapContextFactory();
    var3.setLdapContextFactory((org.jsecurity.realm.ldap.LdapContextFactory)var9);
    var9.setSearchBase("6464ff");
    var9.setUsePooling(true);
    var9.setSystemUsername("7edc3e5f-37f7-4a22-9779-4609545bccd8");
    var0.setLdapContextFactory((org.jsecurity.realm.ldap.LdapContextFactory)var9);
    org.jsecurity.realm.activedirectory.ActiveDirectoryRealm var18 = new org.jsecurity.realm.activedirectory.ActiveDirectoryRealm();
    org.jsecurity.authc.credential.Sha256CredentialsMatcher var19 = new org.jsecurity.authc.credential.Sha256CredentialsMatcher();
    var18.setCredentialsMatcher((org.jsecurity.authc.credential.CredentialsMatcher)var19);
    org.jsecurity.realm.activedirectory.ActiveDirectoryRealm var21 = new org.jsecurity.realm.activedirectory.ActiveDirectoryRealm();
    org.jsecurity.authc.credential.Sha256CredentialsMatcher var22 = new org.jsecurity.authc.credential.Sha256CredentialsMatcher();
    var21.setCredentialsMatcher((org.jsecurity.authc.credential.CredentialsMatcher)var22);
    java.lang.String var24 = var21.getAuthorizationCacheName();
    var21.setUrl("hi!");
    org.jsecurity.realm.ldap.DefaultLdapContextFactory var27 = new org.jsecurity.realm.ldap.DefaultLdapContextFactory();
    var21.setLdapContextFactory((org.jsecurity.realm.ldap.LdapContextFactory)var27);
    var27.setAuthentication("org.jsecurity.authz.UnauthorizedException: org.jsecurity.session.ExpiredSessionException: ");
    var18.setLdapContextFactory((org.jsecurity.realm.ldap.LdapContextFactory)var27);
    var27.setPrincipalSuffix("dd\uFFFD");
    var27.setReferral("ff9f2014-649d-414b-8132-f4962e7ca4d7");
    var27.setAuthentication("e23cc964-5ec8-4116-95c0-aa96771b692b");
    var0.setLdapContextFactory((org.jsecurity.realm.ldap.LdapContextFactory)var27);
    java.io.InputStream var40 = org.jsecurity.util.ClassUtils.getResourceAsStream("");
    java.lang.Object[] var41 = new java.lang.Object[] { var40};
    java.util.List var42 = org.jsecurity.util.CollectionUtils.asList(var41);
    org.jsecurity.authc.pam.ModularRealmAuthenticator var43 = new org.jsecurity.authc.pam.ModularRealmAuthenticator(var42);
    org.jsecurity.subject.SimplePrincipalCollection var45 = new org.jsecurity.subject.SimplePrincipalCollection((java.util.Collection)var42, "org.jsecurity.authz.UnauthorizedException: org.jsecurity.session.ExpiredSessionException: ");
    java.util.Set var46 = var45.getRealmNames();
    org.jsecurity.subject.SimplePrincipalCollection var47 = new org.jsecurity.subject.SimplePrincipalCollection();
    var45.addAll((org.jsecurity.subject.PrincipalCollection)var47);
    java.lang.String[] var52 = org.jsecurity.util.StringUtils.split("ZGT/", '#', '#');
    java.util.Set var53 = org.jsecurity.util.CollectionUtils.asSet((java.lang.Object[])var52);
    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      boolean[] var54 = var0.isPermitted((org.jsecurity.subject.PrincipalCollection)var45, var52);
      fail("Expected exception of type java.util.NoSuchElementException");
    } catch (java.util.NoSuchElementException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var6);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var24);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var40);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var41);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var42);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var46);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var52);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var53);

  }

  public void test276() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest7.test276");


    org.jsecurity.session.mgt.eis.MemorySessionDAO var0 = new org.jsecurity.session.mgt.eis.MemorySessionDAO();
    org.jsecurity.cache.Cache var1 = var0.getActiveSessionsCache();
    org.jsecurity.cache.CacheManager var2 = var0.getCacheManager();
    org.jsecurity.cache.HashtableCacheManager var3 = new org.jsecurity.cache.HashtableCacheManager();
    org.jsecurity.cache.Cache var5 = var3.getCache("\u0000\u0000");
    var0.setActiveSessionsCache(var5);
    java.io.InputStream var8 = org.jsecurity.util.ClassUtils.getResourceAsStream("");
    java.lang.Object[] var9 = new java.lang.Object[] { var8};
    java.util.List var10 = org.jsecurity.util.CollectionUtils.asList(var9);
    org.jsecurity.authc.pam.ModularRealmAuthenticator var11 = new org.jsecurity.authc.pam.ModularRealmAuthenticator(var10);
    org.jsecurity.authc.pam.AllSuccessfulModularAuthenticationStrategy var12 = new org.jsecurity.authc.pam.AllSuccessfulModularAuthenticationStrategy();
    var11.setModularAuthenticationStrategy((org.jsecurity.authc.pam.ModularAuthenticationStrategy)var12);
    org.jsecurity.authz.SimpleAuthorizationInfo var14 = new org.jsecurity.authz.SimpleAuthorizationInfo();
    var14.addStringPermission("hi!");
    java.io.InputStream var18 = org.jsecurity.util.ClassUtils.getResourceAsStream("");
    java.lang.Object[] var19 = new java.lang.Object[] { var18};
    java.util.List var20 = org.jsecurity.util.CollectionUtils.asList(var19);
    var14.addRoles((java.util.Collection)var20);
    var11.setAuthenticationListeners((java.util.Collection)var20);
    org.jsecurity.realm.activedirectory.ActiveDirectoryRealm var23 = new org.jsecurity.realm.activedirectory.ActiveDirectoryRealm();
    var23.setPrincipalSuffix("");
    var11.setRealm((org.jsecurity.realm.Realm)var23);
    org.jsecurity.cache.HashtableCacheManager var27 = new org.jsecurity.cache.HashtableCacheManager();
    org.jsecurity.cache.Cache var29 = var27.getCache("\u0000\u0000");
    var23.setAuthorizationCache(var29);
    var0.setActiveSessionsCache(var29);
    org.jsecurity.session.mgt.SimpleSession var32 = new org.jsecurity.session.mgt.SimpleSession();
    java.io.Serializable var33 = var0.create((org.jsecurity.session.Session)var32);
    org.jsecurity.session.mgt.SimpleSession var34 = new org.jsecurity.session.mgt.SimpleSession();
    var34.touch();
    var34.validate();
    org.jsecurity.session.mgt.SimpleSession var37 = new org.jsecurity.session.mgt.SimpleSession();
    var37.setTimeout((-1L));
    org.jsecurity.session.mgt.SimpleSession var40 = new org.jsecurity.session.mgt.SimpleSession();
    java.util.Date var41 = var40.getLastAccessTime();
    var37.setLastAccessTime(var41);
    org.jsecurity.session.mgt.SimpleSession var43 = new org.jsecurity.session.mgt.SimpleSession();
    java.util.Date var44 = var43.getLastAccessTime();
    var37.setStopTimestamp(var44);
    var34.setLastAccessTime(var44);
    var32.setLastAccessTime(var44);
    org.jsecurity.session.mgt.ImmutableProxiedSession var48 = new org.jsecurity.session.mgt.ImmutableProxiedSession((org.jsecurity.session.Session)var32);
    java.util.Date var49 = var48.getLastAccessTime();
    long var50 = var48.getTimeout();
    java.io.Serializable var51 = var48.getId();
    java.io.Serializable var52 = var48.getId();
    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      var48.touch();
      fail("Expected exception of type org.jsecurity.session.InvalidSessionException");
    } catch (org.jsecurity.session.InvalidSessionException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var1);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var2);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var5);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var8);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var9);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var10);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var18);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var19);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var20);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var29);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var33 + "' != '" + "b9a44d60-671f-4bf3-90a7-8750c14b3eff"+ "'", var33.equals("b9a44d60-671f-4bf3-90a7-8750c14b3eff"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var41);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var44);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var49);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var50 == 1800000L);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var51 + "' != '" + "b9a44d60-671f-4bf3-90a7-8750c14b3eff"+ "'", var51.equals("b9a44d60-671f-4bf3-90a7-8750c14b3eff"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var52 + "' != '" + "b9a44d60-671f-4bf3-90a7-8750c14b3eff"+ "'", var52.equals("b9a44d60-671f-4bf3-90a7-8750c14b3eff"));

  }

  public void test277() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest7.test277");


    org.jsecurity.authc.AccountException var3 = new org.jsecurity.authc.AccountException("hi!");
    org.jsecurity.authc.IncorrectCredentialsException var4 = new org.jsecurity.authc.IncorrectCredentialsException((java.lang.Throwable)var3);
    org.jsecurity.config.ConfigurationException var5 = new org.jsecurity.config.ConfigurationException("NfxhYN7ItBfRAmDBmprtU73ghfEEPpcDJrHPkZ06wiY=", (java.lang.Throwable)var3);
    org.jsecurity.authc.AccountException var6 = new org.jsecurity.authc.AccountException((java.lang.Throwable)var3);
    org.jsecurity.authz.UnauthorizedException var7 = new org.jsecurity.authz.UnauthorizedException("bfcfe798-c3eb-4591-b32c-68e2bf73fa04", (java.lang.Throwable)var6);
    org.jsecurity.authz.AuthorizationException var8 = new org.jsecurity.authz.AuthorizationException((java.lang.Throwable)var7);

  }

  public void test278() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest7.test278");


    org.jsecurity.session.mgt.SimpleSession var0 = new org.jsecurity.session.mgt.SimpleSession();
    org.jsecurity.io.SerializationException var3 = new org.jsecurity.io.SerializationException("org.jsecurity.config.ConfigurationException: dd\uFFFD");
    org.jsecurity.authc.AccountException var4 = new org.jsecurity.authc.AccountException("a2b823b1e72eae2b727289df8a00a89df8a0bab6ad8a89c4c5c7a9b62a270000", (java.lang.Throwable)var3);
    var0.setId((java.io.Serializable)"a2b823b1e72eae2b727289df8a00a89df8a0bab6ad8a89c4c5c7a9b62a270000");
    org.jsecurity.session.mgt.eis.MemorySessionDAO var6 = new org.jsecurity.session.mgt.eis.MemorySessionDAO();
    org.jsecurity.cache.Cache var7 = var6.getActiveSessionsCache();
    org.jsecurity.cache.CacheManager var8 = var6.getCacheManager();
    org.jsecurity.cache.HashtableCacheManager var9 = new org.jsecurity.cache.HashtableCacheManager();
    org.jsecurity.cache.Cache var11 = var9.getCache("\u0000\u0000");
    var6.setActiveSessionsCache(var11);
    java.io.InputStream var14 = org.jsecurity.util.ClassUtils.getResourceAsStream("");
    java.lang.Object[] var15 = new java.lang.Object[] { var14};
    java.util.List var16 = org.jsecurity.util.CollectionUtils.asList(var15);
    org.jsecurity.authc.pam.ModularRealmAuthenticator var17 = new org.jsecurity.authc.pam.ModularRealmAuthenticator(var16);
    org.jsecurity.authc.pam.AllSuccessfulModularAuthenticationStrategy var18 = new org.jsecurity.authc.pam.AllSuccessfulModularAuthenticationStrategy();
    var17.setModularAuthenticationStrategy((org.jsecurity.authc.pam.ModularAuthenticationStrategy)var18);
    org.jsecurity.authz.SimpleAuthorizationInfo var20 = new org.jsecurity.authz.SimpleAuthorizationInfo();
    var20.addStringPermission("hi!");
    java.io.InputStream var24 = org.jsecurity.util.ClassUtils.getResourceAsStream("");
    java.lang.Object[] var25 = new java.lang.Object[] { var24};
    java.util.List var26 = org.jsecurity.util.CollectionUtils.asList(var25);
    var20.addRoles((java.util.Collection)var26);
    var17.setAuthenticationListeners((java.util.Collection)var26);
    org.jsecurity.realm.activedirectory.ActiveDirectoryRealm var29 = new org.jsecurity.realm.activedirectory.ActiveDirectoryRealm();
    var29.setPrincipalSuffix("");
    var17.setRealm((org.jsecurity.realm.Realm)var29);
    org.jsecurity.cache.HashtableCacheManager var33 = new org.jsecurity.cache.HashtableCacheManager();
    org.jsecurity.cache.Cache var35 = var33.getCache("\u0000\u0000");
    var29.setAuthorizationCache(var35);
    var6.setActiveSessionsCache(var35);
    org.jsecurity.session.mgt.SimpleSession var38 = new org.jsecurity.session.mgt.SimpleSession();
    java.io.Serializable var39 = var6.create((org.jsecurity.session.Session)var38);
    java.io.Serializable var40 = var38.getId();
    java.util.Map var41 = var38.getAttributes();
    org.jsecurity.session.mgt.SimpleSession var42 = new org.jsecurity.session.mgt.SimpleSession();
    var42.setTimeout((-1L));
    org.jsecurity.session.mgt.SimpleSession var45 = new org.jsecurity.session.mgt.SimpleSession();
    java.util.Date var46 = var45.getLastAccessTime();
    var42.setLastAccessTime(var46);
    org.jsecurity.session.mgt.SimpleSession var48 = new org.jsecurity.session.mgt.SimpleSession();
    java.util.Date var49 = var48.getLastAccessTime();
    var42.setStopTimestamp(var49);
    var38.setLastAccessTime(var49);
    var0.setStartTimestamp(var49);
    org.jsecurity.session.ProxiedSession var53 = new org.jsecurity.session.ProxiedSession((org.jsecurity.session.Session)var0);
    var53.setTimeout(1L);
    java.io.Serializable var56 = var53.getId();
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var7);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var8);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var11);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var14);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var15);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var16);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var24);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var25);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var26);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var35);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var39 + "' != '" + "d8229e66-374e-42c3-839f-5fd47d7bf955"+ "'", var39.equals("d8229e66-374e-42c3-839f-5fd47d7bf955"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var40 + "' != '" + "d8229e66-374e-42c3-839f-5fd47d7bf955"+ "'", var40.equals("d8229e66-374e-42c3-839f-5fd47d7bf955"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var41);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var46);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var49);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var56 + "' != '" + "a2b823b1e72eae2b727289df8a00a89df8a0bab6ad8a89c4c5c7a9b62a270000"+ "'", var56.equals("a2b823b1e72eae2b727289df8a00a89df8a0bab6ad8a89c4c5c7a9b62a270000"));

  }

  public void test279() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest7.test279");


    org.jsecurity.io.XmlSerializer var0 = new org.jsecurity.io.XmlSerializer();
    org.jsecurity.session.mgt.quartz.QuartzSessionValidationScheduler var1 = new org.jsecurity.session.mgt.quartz.QuartzSessionValidationScheduler();
    var1.disableSessionValidation();
    byte[] var3 = var0.serialize((java.lang.Object)var1);
    byte[] var5 = var0.serialize((java.lang.Object)1);
    org.jsecurity.authz.aop.UserAnnotationMethodInterceptor var6 = new org.jsecurity.authz.aop.UserAnnotationMethodInterceptor();
    org.jsecurity.aop.AnnotationHandler var7 = var6.getHandler();
    java.lang.Class var8 = var7.getAnnotationClass();
    byte[] var9 = var0.serialize((java.lang.Object)var7);
    org.jsecurity.session.mgt.SimpleSession var10 = new org.jsecurity.session.mgt.SimpleSession();
    var10.setTimeout((-1L));
    org.jsecurity.session.mgt.SimpleSession var13 = new org.jsecurity.session.mgt.SimpleSession();
    var13.setTimeout((-1L));
    org.jsecurity.session.mgt.SimpleSession var16 = new org.jsecurity.session.mgt.SimpleSession();
    java.util.Date var17 = var16.getLastAccessTime();
    var13.setLastAccessTime(var17);
    org.jsecurity.session.mgt.SimpleSession var19 = new org.jsecurity.session.mgt.SimpleSession();
    java.util.Date var20 = var19.getLastAccessTime();
    var13.setStopTimestamp(var20);
    var10.setStartTimestamp(var20);
    byte[] var23 = var0.serialize((java.lang.Object)var20);
    java.io.InputStream var25 = org.jsecurity.util.ClassUtils.getResourceAsStream("");
    java.lang.Object[] var26 = new java.lang.Object[] { var25};
    java.util.List var27 = org.jsecurity.util.CollectionUtils.asList(var26);
    org.jsecurity.authc.pam.ModularRealmAuthenticator var28 = new org.jsecurity.authc.pam.ModularRealmAuthenticator(var27);
    org.jsecurity.subject.SimplePrincipalCollection var30 = new org.jsecurity.subject.SimplePrincipalCollection((java.util.Collection)var27, "org.jsecurity.authz.UnauthorizedException: org.jsecurity.session.ExpiredSessionException: ");
    org.jsecurity.io.ResourceException var34 = new org.jsecurity.io.ResourceException("hi!");
    org.jsecurity.authc.UnknownAccountException var35 = new org.jsecurity.authc.UnknownAccountException((java.lang.Throwable)var34);
    org.jsecurity.session.StoppedSessionException var36 = new org.jsecurity.session.StoppedSessionException("dd\uFFFD", (java.io.Serializable)var34);
    org.jsecurity.session.UnknownSessionException var37 = new org.jsecurity.session.UnknownSessionException("org.jsecurity.authz.UnauthorizedException: org.jsecurity.session.ExpiredSessionException: ", (java.lang.Throwable)var34);
    boolean var38 = var30.equals((java.lang.Object)var34);
    org.jsecurity.authz.aop.RoleAnnotationMethodInterceptor var39 = new org.jsecurity.authz.aop.RoleAnnotationMethodInterceptor();
    org.jsecurity.aop.AnnotationHandler var40 = var39.getHandler();
    java.lang.Class var41 = var40.getAnnotationClass();
    java.lang.Object var42 = var30.oneByType(var41);
    byte[] var43 = var0.serialize((java.lang.Object)var41);
    org.jsecurity.JSecurityException var46 = new org.jsecurity.JSecurityException("");
    org.jsecurity.authc.pam.UnsupportedTokenException var47 = new org.jsecurity.authc.pam.UnsupportedTokenException((java.lang.Throwable)var46);
    org.jsecurity.session.StoppedSessionException var48 = new org.jsecurity.session.StoppedSessionException("org.jsecurity.authc.AccountException: hi!", (java.lang.Throwable)var47);
    byte[] var49 = var0.serialize((java.lang.Object)var47);
    byte[] var51 = org.jsecurity.codec.Base64.decode("162a4550-2475-4cc9-b393-3917de249d8e");
    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      java.lang.Object var52 = var0.deserialize(var51);
      fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException");
    } catch (java.lang.ArrayIndexOutOfBoundsException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var3);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var5);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var7);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var8);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var9);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var17);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var20);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var23);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var25);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var26);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var27);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var38 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var40);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var41);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var42);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var43);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var49);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var51);

  }

  public void test280() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest7.test280");


    org.jsecurity.session.mgt.eis.MemorySessionDAO var0 = new org.jsecurity.session.mgt.eis.MemorySessionDAO();
    org.jsecurity.cache.Cache var1 = var0.getActiveSessionsCache();
    org.jsecurity.session.mgt.SimpleSession var2 = new org.jsecurity.session.mgt.SimpleSession();
    var2.setTimeout((-1L));
    org.jsecurity.session.mgt.SimpleSession var5 = new org.jsecurity.session.mgt.SimpleSession();
    java.util.Date var6 = var5.getLastAccessTime();
    var2.setLastAccessTime(var6);
    var0.update((org.jsecurity.session.Session)var2);
    var0.setActiveSessionsCacheName("hi!");
    var0.setActiveSessionsCacheName("d0ddeefd-5576-4906-99f8-93b892e0c773");
    var0.setActiveSessionsCacheName("b74f4674-5868-4e94-a7d5-832b6ef0fcdburity.rb74f4674-5868-4e94-a7d5-832b6ef0fcdblm.tb74f4674-5868-4e94-a7d5-832b6ef0fcdbxt.Propb74f4674-5868-4e94-a7d5-832b6ef0fcdbrtib74f4674-5868-4e94-a7d5-832b6ef0fcdbsRb74f4674-5868-4e94-a7d5-832b6ef0fcdblmb74f4674-5868-4e94-a7d5-832b6ef0fcdbuthorizb74f4674-5868-4e94-a7d5-832b6ef0fcdbtion");
    org.jsecurity.session.mgt.DelegatingSession var15 = new org.jsecurity.session.mgt.DelegatingSession();
    java.io.Serializable var16 = var15.getId();
    org.jsecurity.session.mgt.SessionManager var17 = var15.getSessionManager();
    org.jsecurity.session.mgt.SimpleSession var18 = new org.jsecurity.session.mgt.SimpleSession();
    org.jsecurity.session.UnknownSessionException var22 = new org.jsecurity.session.UnknownSessionException("dd\uFFFD", (java.io.Serializable)100.0f);
    org.jsecurity.session.SessionException var24 = new org.jsecurity.session.SessionException("dd\uFFFD", (java.lang.Throwable)var22, (java.io.Serializable)0);
    org.jsecurity.authc.AccountException var25 = new org.jsecurity.authc.AccountException((java.lang.Throwable)var22);
    var18.setId((java.io.Serializable)var22);
    var18.setTimeout((-1L));
    org.jsecurity.session.mgt.SimpleSession var29 = new org.jsecurity.session.mgt.SimpleSession();
    var29.setTimeout((-1L));
    org.jsecurity.session.mgt.SimpleSession var32 = new org.jsecurity.session.mgt.SimpleSession();
    var32.setTimeout((-1L));
    org.jsecurity.session.mgt.SimpleSession var35 = new org.jsecurity.session.mgt.SimpleSession();
    java.util.Date var36 = var35.getLastAccessTime();
    var32.setLastAccessTime(var36);
    org.jsecurity.session.mgt.SimpleSession var38 = new org.jsecurity.session.mgt.SimpleSession();
    java.util.Date var39 = var38.getLastAccessTime();
    var32.setStopTimestamp(var39);
    var29.setStartTimestamp(var39);
    var18.setLastAccessTime(var39);
    var15.setId((java.io.Serializable)var39);
    java.io.Serializable var44 = var15.getId();
    org.jsecurity.session.mgt.DefaultSessionManager var45 = new org.jsecurity.session.mgt.DefaultSessionManager();
    org.jsecurity.session.mgt.quartz.QuartzSessionValidationScheduler var46 = new org.jsecurity.session.mgt.quartz.QuartzSessionValidationScheduler();
    boolean var47 = var46.isEnabled();
    var46.enableSessionValidation();
    var45.setSessionValidationScheduler((org.jsecurity.session.mgt.SessionValidationScheduler)var46);
    var15.setSessionManager((org.jsecurity.session.mgt.SessionManager)var45);
    org.jsecurity.authz.UnauthenticatedException var52 = new org.jsecurity.authz.UnauthenticatedException();
    org.jsecurity.authc.AccountException var53 = new org.jsecurity.authc.AccountException("hi!", (java.lang.Throwable)var52);
    org.jsecurity.session.mgt.DelegatingSession var54 = new org.jsecurity.session.mgt.DelegatingSession((org.jsecurity.session.mgt.SessionManager)var45, (java.io.Serializable)var53);
    var0.update((org.jsecurity.session.Session)var54);
    org.jsecurity.session.ProxiedSession var56 = new org.jsecurity.session.ProxiedSession((org.jsecurity.session.Session)var54);
    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      var54.stop();
      fail("Expected exception of type org.jsecurity.session.UnknownSessionException");
    } catch (org.jsecurity.session.UnknownSessionException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var1);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var6);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var16);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var17);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var36);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var39);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var44);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var47 == false);

  }

  public void test281() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest7.test281");


    org.jsecurity.cache.ehcache.EhCacheManager var0 = new org.jsecurity.cache.ehcache.EhCacheManager();
    net.sf.ehcache.CacheManager var1 = var0.getCacheManager();
    var0.destroy();
    net.sf.ehcache.CacheManager var3 = var0.getCacheManager();
    net.sf.ehcache.CacheManager var4 = var0.getCacheManager();
    var0.init();
    java.lang.String var6 = var0.getCacheManagerConfigFile();
    org.jsecurity.cache.Cache var8 = var0.getCache("org.jsecurity.realm.text.PropertiesRealm-793-authorization");
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var1);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var3);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var4);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var6 + "' != '" + "classpath:org/jsecurity/cache/ehcache/ehcache.xml"+ "'", var6.equals("classpath:org/jsecurity/cache/ehcache/ehcache.xml"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var8);

  }

  public void test282() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest7.test282");


    org.jsecurity.session.UnknownSessionException var4 = new org.jsecurity.session.UnknownSessionException("dd\uFFFD", (java.io.Serializable)100.0f);
    org.jsecurity.subject.SubjectException var5 = new org.jsecurity.subject.SubjectException("dd\uFFFD", (java.lang.Throwable)var4);
    org.jsecurity.codec.CodecException var6 = new org.jsecurity.codec.CodecException("7306db95-41be-4ac0-9508-5d40aecdf82e", (java.lang.Throwable)var4);

  }

  public void test283() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest7.test283");


    org.jsecurity.crypto.hash.Md2Hash var1 = org.jsecurity.crypto.hash.Md2Hash.fromBase64String("a2b823b1e72eae2b727289df8a00a89df8a0bab6ad8a89c4c5c7a9b62a270000");
    org.jsecurity.authc.credential.Md2CredentialsMatcher var2 = new org.jsecurity.authc.credential.Md2CredentialsMatcher();
    org.jsecurity.authz.SimpleAuthorizingAccount var4 = new org.jsecurity.authz.SimpleAuthorizingAccount((java.lang.Object)"a2b823b1e72eae2b727289df8a00a89df8a0bab6ad8a89c4c5c7a9b62a270000", (java.lang.Object)var2, "");
    int var5 = var2.getHashIterations();
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var5 == 1);

  }

  public void test284() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest7.test284");


    org.jsecurity.session.mgt.SimpleSession var0 = new org.jsecurity.session.mgt.SimpleSession();
    java.util.Date var1 = var0.getLastAccessTime();
    java.util.Date var2 = var0.getStopTimestamp();
    org.jsecurity.session.mgt.SimpleSession var3 = new org.jsecurity.session.mgt.SimpleSession();
    var3.touch();
    org.jsecurity.session.mgt.eis.MemorySessionDAO var5 = new org.jsecurity.session.mgt.eis.MemorySessionDAO();
    org.jsecurity.cache.Cache var6 = var5.getActiveSessionsCache();
    org.jsecurity.cache.CacheManager var7 = var5.getCacheManager();
    org.jsecurity.cache.HashtableCacheManager var8 = new org.jsecurity.cache.HashtableCacheManager();
    org.jsecurity.cache.Cache var10 = var8.getCache("\u0000\u0000");
    var5.setActiveSessionsCache(var10);
    java.io.InputStream var13 = org.jsecurity.util.ClassUtils.getResourceAsStream("");
    java.lang.Object[] var14 = new java.lang.Object[] { var13};
    java.util.List var15 = org.jsecurity.util.CollectionUtils.asList(var14);
    org.jsecurity.authc.pam.ModularRealmAuthenticator var16 = new org.jsecurity.authc.pam.ModularRealmAuthenticator(var15);
    org.jsecurity.authc.pam.AllSuccessfulModularAuthenticationStrategy var17 = new org.jsecurity.authc.pam.AllSuccessfulModularAuthenticationStrategy();
    var16.setModularAuthenticationStrategy((org.jsecurity.authc.pam.ModularAuthenticationStrategy)var17);
    org.jsecurity.authz.SimpleAuthorizationInfo var19 = new org.jsecurity.authz.SimpleAuthorizationInfo();
    var19.addStringPermission("hi!");
    java.io.InputStream var23 = org.jsecurity.util.ClassUtils.getResourceAsStream("");
    java.lang.Object[] var24 = new java.lang.Object[] { var23};
    java.util.List var25 = org.jsecurity.util.CollectionUtils.asList(var24);
    var19.addRoles((java.util.Collection)var25);
    var16.setAuthenticationListeners((java.util.Collection)var25);
    org.jsecurity.realm.activedirectory.ActiveDirectoryRealm var28 = new org.jsecurity.realm.activedirectory.ActiveDirectoryRealm();
    var28.setPrincipalSuffix("");
    var16.setRealm((org.jsecurity.realm.Realm)var28);
    org.jsecurity.cache.HashtableCacheManager var32 = new org.jsecurity.cache.HashtableCacheManager();
    org.jsecurity.cache.Cache var34 = var32.getCache("\u0000\u0000");
    var28.setAuthorizationCache(var34);
    var5.setActiveSessionsCache(var34);
    org.jsecurity.session.mgt.SimpleSession var37 = new org.jsecurity.session.mgt.SimpleSession();
    java.io.Serializable var38 = var5.create((org.jsecurity.session.Session)var37);
    java.io.Serializable var39 = var37.getId();
    org.jsecurity.session.mgt.SimpleSession var40 = new org.jsecurity.session.mgt.SimpleSession();
    var40.touch();
    var40.validate();
    org.jsecurity.session.mgt.SimpleSession var43 = new org.jsecurity.session.mgt.SimpleSession();
    var43.setTimeout((-1L));
    org.jsecurity.session.mgt.SimpleSession var46 = new org.jsecurity.session.mgt.SimpleSession();
    java.util.Date var47 = var46.getLastAccessTime();
    var43.setLastAccessTime(var47);
    org.jsecurity.session.mgt.SimpleSession var49 = new org.jsecurity.session.mgt.SimpleSession();
    java.util.Date var50 = var49.getLastAccessTime();
    var43.setStopTimestamp(var50);
    var40.setLastAccessTime(var50);
    var37.setStartTimestamp(var50);
    var3.setStartTimestamp(var50);
    var0.setStartTimestamp(var50);
    org.jsecurity.session.mgt.SimpleSession var56 = new org.jsecurity.session.mgt.SimpleSession();
    var56.touch();
    var56.validate();
    org.jsecurity.session.mgt.SimpleSession var59 = new org.jsecurity.session.mgt.SimpleSession();
    var59.setTimeout((-1L));
    org.jsecurity.session.mgt.SimpleSession var62 = new org.jsecurity.session.mgt.SimpleSession();
    java.util.Date var63 = var62.getLastAccessTime();
    var59.setLastAccessTime(var63);
    org.jsecurity.session.mgt.SimpleSession var65 = new org.jsecurity.session.mgt.SimpleSession();
    java.util.Date var66 = var65.getLastAccessTime();
    var59.setStopTimestamp(var66);
    var56.setLastAccessTime(var66);
    java.util.Date var69 = var56.getStartTimestamp();
    var0.setLastAccessTime(var69);
    org.jsecurity.session.ProxiedSession var71 = new org.jsecurity.session.ProxiedSession((org.jsecurity.session.Session)var0);
    long var72 = var71.getTimeout();
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var1);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var2);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var6);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var7);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var10);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var13);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var14);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var15);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var23);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var24);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var25);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var34);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var38 + "' != '" + "b2520fab-64b0-486c-9afc-fa4205a960ba"+ "'", var38.equals("b2520fab-64b0-486c-9afc-fa4205a960ba"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var39 + "' != '" + "b2520fab-64b0-486c-9afc-fa4205a960ba"+ "'", var39.equals("b2520fab-64b0-486c-9afc-fa4205a960ba"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var47);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var50);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var63);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var66);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var69);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var72 == 1800000L);

  }

  public void test285() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest7.test285");


    org.jsecurity.io.ResourceException var3 = new org.jsecurity.io.ResourceException("hi!");
    org.jsecurity.codec.CodecException var4 = new org.jsecurity.codec.CodecException((java.lang.Throwable)var3);
    org.jsecurity.JSecurityException var5 = new org.jsecurity.JSecurityException("a2b823b1e72eae2b727289df8a00a89df8a0bab6ad8a89c4c5c7a9b62a270000", (java.lang.Throwable)var3);
    org.jsecurity.session.UnknownSessionException var6 = new org.jsecurity.session.UnknownSessionException((java.lang.Throwable)var5);
    org.jsecurity.authc.IncorrectCredentialsException var7 = new org.jsecurity.authc.IncorrectCredentialsException((java.lang.Throwable)var5);
    org.jsecurity.authz.AuthorizationException var8 = new org.jsecurity.authz.AuthorizationException("\u0000\u0000\u0000", (java.lang.Throwable)var5);
    org.jsecurity.authc.AccountException var9 = new org.jsecurity.authc.AccountException((java.lang.Throwable)var8);
    org.jsecurity.subject.SimplePrincipalCollection var11 = new org.jsecurity.subject.SimplePrincipalCollection((java.lang.Object)var9, "org.jsecurity.authz.UnauthorizedException: org.jsecurity.session.ExpiredSessionException: ");
    org.jsecurity.mgt.DefaultSecurityManager var12 = new org.jsecurity.mgt.DefaultSecurityManager();
    java.io.InputStream var14 = org.jsecurity.util.ClassUtils.getResourceAsStream("");
    java.lang.Object[] var15 = new java.lang.Object[] { var14};
    java.util.List var16 = org.jsecurity.util.CollectionUtils.asList(var15);
    org.jsecurity.authc.pam.ModularRealmAuthenticator var17 = new org.jsecurity.authc.pam.ModularRealmAuthenticator(var16);
    org.jsecurity.authc.pam.AllSuccessfulModularAuthenticationStrategy var18 = new org.jsecurity.authc.pam.AllSuccessfulModularAuthenticationStrategy();
    var17.setModularAuthenticationStrategy((org.jsecurity.authc.pam.ModularAuthenticationStrategy)var18);
    org.jsecurity.authz.SimpleAuthorizationInfo var20 = new org.jsecurity.authz.SimpleAuthorizationInfo();
    var20.addStringPermission("hi!");
    java.io.InputStream var24 = org.jsecurity.util.ClassUtils.getResourceAsStream("");
    java.lang.Object[] var25 = new java.lang.Object[] { var24};
    java.util.List var26 = org.jsecurity.util.CollectionUtils.asList(var25);
    var20.addRoles((java.util.Collection)var26);
    var17.setAuthenticationListeners((java.util.Collection)var26);
    var12.setSessionListeners((java.util.Collection)var26);
    org.jsecurity.subject.Subject var30 = var12.getSubject();
    org.jsecurity.authz.permission.WildcardPermissionResolver var31 = new org.jsecurity.authz.permission.WildcardPermissionResolver();
    var12.setPermissionResolver((org.jsecurity.authz.permission.PermissionResolver)var31);
    boolean var33 = var11.equals((java.lang.Object)var12);
    org.jsecurity.realm.text.TextConfigurationRealm var34 = new org.jsecurity.realm.text.TextConfigurationRealm();
    java.io.InputStream var36 = org.jsecurity.util.ClassUtils.getResourceAsStream("");
    java.lang.Object[] var37 = new java.lang.Object[] { var36};
    java.util.List var38 = org.jsecurity.util.CollectionUtils.asList(var37);
    org.jsecurity.authc.pam.ModularRealmAuthenticator var39 = new org.jsecurity.authc.pam.ModularRealmAuthenticator(var38);
    org.jsecurity.subject.SimplePrincipalCollection var41 = new org.jsecurity.subject.SimplePrincipalCollection((java.util.Collection)var38, "org.jsecurity.authz.UnauthorizedException: org.jsecurity.session.ExpiredSessionException: ");
    org.jsecurity.session.UnknownSessionException var46 = new org.jsecurity.session.UnknownSessionException("dd\uFFFD", (java.io.Serializable)100.0f);
    org.jsecurity.session.SessionException var48 = new org.jsecurity.session.SessionException("dd\uFFFD", (java.lang.Throwable)var46, (java.io.Serializable)0);
    org.jsecurity.session.SessionException var49 = new org.jsecurity.session.SessionException("dd\uFFFD", (java.lang.Throwable)var46);
    var41.add((java.lang.Object)var49, "org.jsecurity.config.ConfigurationException: dd\uFFFD");
    var34.onLogout((org.jsecurity.subject.PrincipalCollection)var41);
    java.util.Set var54 = org.jsecurity.util.PermissionUtils.toPermissionStrings("org.jsecurity.config.ConfigurationException: dd\uFFFD");
    org.jsecurity.authz.SimpleAuthorizationInfo var55 = new org.jsecurity.authz.SimpleAuthorizationInfo(var54);
    org.jsecurity.authz.SimpleAuthorizingAccount var56 = new org.jsecurity.authz.SimpleAuthorizingAccount((org.jsecurity.subject.PrincipalCollection)var41, (java.lang.Object)var54);
    org.jsecurity.subject.SimplePrincipalCollection var57 = new org.jsecurity.subject.SimplePrincipalCollection((org.jsecurity.subject.PrincipalCollection)var41);
    java.util.Set var58 = var41.getRealmNames();
    java.lang.String[] var62 = org.jsecurity.util.StringUtils.split("org.jsecurity.realm.text.PropertiesRealm_983", ' ', ' ');
    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      var12.checkPermissions((org.jsecurity.subject.PrincipalCollection)var41, var62);
      fail("Expected exception of type java.util.NoSuchElementException");
    } catch (java.util.NoSuchElementException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var14);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var15);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var16);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var24);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var25);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var26);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var30);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var33 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var36);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var37);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var38);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var54);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var58);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var62);

  }

  public void test286() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest7.test286");


    char[] var1 = new char[] { };
    org.jsecurity.authc.UsernamePasswordToken var3 = new org.jsecurity.authc.UsernamePasswordToken("hi!", var1, true);
    byte[] var4 = org.jsecurity.codec.Hex.decode(var1);
    byte[] var5 = org.jsecurity.codec.Hex.decode(var1);
    byte[] var6 = org.jsecurity.codec.Base64.encode(var5);
    java.lang.String var7 = org.jsecurity.codec.CodecSupport.toString(var6);
    java.lang.String var8 = org.jsecurity.codec.Base64.decodeToString(var6);
    char[] var9 = org.jsecurity.codec.Hex.encode(var6);
    org.jsecurity.realm.SimpleAccountRealm var11 = new org.jsecurity.realm.SimpleAccountRealm("hi!");
    java.lang.Class var12 = var11.getAuthenticationTokenClass();
    java.util.Collection var13 = org.jsecurity.util.CollectionUtils.emptyCollection(var12);
    java.util.Collection var14 = org.jsecurity.util.CollectionUtils.emptyCollection(var12);
    java.util.Collection var15 = org.jsecurity.util.CollectionUtils.emptyCollection(var12);
    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      org.jsecurity.crypto.hash.Sha384Hash var16 = new org.jsecurity.crypto.hash.Sha384Hash((java.lang.Object)var9, (java.lang.Object)var15);
      fail("Expected exception of type org.jsecurity.codec.CodecException");
    } catch (org.jsecurity.codec.CodecException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var1);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var4);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var5);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var6);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var7 + "' != '" + ""+ "'", var7.equals(""));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var8 + "' != '" + ""+ "'", var8.equals(""));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var9);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var12);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var13);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var14);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var15);

  }

  public void test287() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest7.test287");


    org.jsecurity.config.IniConfiguration var0 = new org.jsecurity.config.IniConfiguration();
    var0.setConfigUrl("hi!");
    var0.setConfig("org.jsecurity.realm.SimpleAccountRealm-52-authorization");
    org.jsecurity.mgt.SecurityManager var5 = var0.getSecurityManager();
    org.jsecurity.mgt.SecurityManager var6 = var0.getSecurityManager();
    org.jsecurity.mgt.SecurityManager var7 = var0.getSecurityManager();
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var5);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var6);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var7);

  }

  public void test288() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest7.test288");


    org.jsecurity.realm.activedirectory.ActiveDirectoryRealm var0 = new org.jsecurity.realm.activedirectory.ActiveDirectoryRealm();
    org.jsecurity.authc.credential.Sha256CredentialsMatcher var1 = new org.jsecurity.authc.credential.Sha256CredentialsMatcher();
    var0.setCredentialsMatcher((org.jsecurity.authc.credential.CredentialsMatcher)var1);
    java.lang.String var3 = var0.getAuthorizationCacheName();
    var0.setPrincipalSuffix("org.jsecurity.config.ConfigurationException: dd\uFFFD");
    org.jsecurity.realm.text.TextConfigurationRealm var6 = new org.jsecurity.realm.text.TextConfigurationRealm();
    java.io.InputStream var8 = org.jsecurity.util.ClassUtils.getResourceAsStream("");
    java.lang.Object[] var9 = new java.lang.Object[] { var8};
    java.util.List var10 = org.jsecurity.util.CollectionUtils.asList(var9);
    org.jsecurity.authc.pam.ModularRealmAuthenticator var11 = new org.jsecurity.authc.pam.ModularRealmAuthenticator(var10);
    org.jsecurity.subject.SimplePrincipalCollection var13 = new org.jsecurity.subject.SimplePrincipalCollection((java.util.Collection)var10, "org.jsecurity.authz.UnauthorizedException: org.jsecurity.session.ExpiredSessionException: ");
    org.jsecurity.session.UnknownSessionException var18 = new org.jsecurity.session.UnknownSessionException("dd\uFFFD", (java.io.Serializable)100.0f);
    org.jsecurity.session.SessionException var20 = new org.jsecurity.session.SessionException("dd\uFFFD", (java.lang.Throwable)var18, (java.io.Serializable)0);
    org.jsecurity.session.SessionException var21 = new org.jsecurity.session.SessionException("dd\uFFFD", (java.lang.Throwable)var18);
    var13.add((java.lang.Object)var21, "org.jsecurity.config.ConfigurationException: dd\uFFFD");
    var6.onLogout((org.jsecurity.subject.PrincipalCollection)var13);
    var0.onLogout((org.jsecurity.subject.PrincipalCollection)var13);
    org.jsecurity.realm.SimpleAccountRealm var27 = new org.jsecurity.realm.SimpleAccountRealm("hi!");
    java.lang.Class var28 = var27.getAuthenticationTokenClass();
    java.util.Collection var29 = org.jsecurity.util.CollectionUtils.emptyCollection(var28);
    java.util.Collection var30 = var13.byType(var28);
    org.jsecurity.authz.aop.UserAnnotationMethodInterceptor var31 = new org.jsecurity.authz.aop.UserAnnotationMethodInterceptor();
    org.jsecurity.aop.AnnotationHandler var32 = var31.getHandler();
    java.lang.Class var33 = var32.getAnnotationClass();
    java.lang.Class[] var34 = new java.lang.Class[] { var33};
    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      java.lang.reflect.Constructor var35 = org.jsecurity.util.ClassUtils.getConstructor(var28, var34);
      fail("Expected exception of type java.lang.IllegalStateException");
    } catch (java.lang.IllegalStateException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var3);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var8);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var9);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var10);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var28);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var29);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var30);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var32);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var33);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var34);

  }

  public void test289() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest7.test289");


    org.jsecurity.authz.SimpleRole var1 = new org.jsecurity.authz.SimpleRole();
    org.jsecurity.session.UnknownSessionException var2 = new org.jsecurity.session.UnknownSessionException("org.jsecurity.authc.IncorrectCredentialsException: \u0000\u0000", (java.io.Serializable)var1);
    var1.setName("49932616-87e3-49f2-a9ff-1e3516355d97");

  }

  public void test290() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest7.test290");


    org.jsecurity.session.UnknownSessionException var6 = new org.jsecurity.session.UnknownSessionException("dd\uFFFD", (java.io.Serializable)100.0f);
    org.jsecurity.config.ConfigurationException var7 = new org.jsecurity.config.ConfigurationException("dd\uFFFD", (java.lang.Throwable)var6);
    org.jsecurity.session.ExpiredSessionException var9 = new org.jsecurity.session.ExpiredSessionException("", (java.lang.Throwable)var7, (java.io.Serializable)true);
    org.jsecurity.authc.pam.UnsupportedTokenException var10 = new org.jsecurity.authc.pam.UnsupportedTokenException((java.lang.Throwable)var9);
    org.jsecurity.authc.AccountException var11 = new org.jsecurity.authc.AccountException((java.lang.Throwable)var10);
    org.jsecurity.authz.UnauthorizedException var12 = new org.jsecurity.authz.UnauthorizedException("a2b823b1e72eae2b727289df8a00a89df8a0bab6ad8a89c4c5c7a9b62a270000", (java.lang.Throwable)var11);
    org.jsecurity.codec.CodecException var15 = new org.jsecurity.codec.CodecException("dd\uFFFD");
    org.jsecurity.authc.ConcurrentAccessException var16 = new org.jsecurity.authc.ConcurrentAccessException("org.jsecurity.authz.UnauthorizedException: org.jsecurity.session.ExpiredSessionException: ", (java.lang.Throwable)var15);
    org.jsecurity.subject.SimplePrincipalCollection var18 = new org.jsecurity.subject.SimplePrincipalCollection((java.lang.Object)var15, "");
    java.io.InputStream var20 = org.jsecurity.util.ClassUtils.getResourceAsStream("");
    java.lang.Object[] var21 = new java.lang.Object[] { var20};
    java.util.List var22 = org.jsecurity.util.CollectionUtils.asList(var21);
    org.jsecurity.authc.pam.ModularRealmAuthenticator var23 = new org.jsecurity.authc.pam.ModularRealmAuthenticator(var22);
    org.jsecurity.authc.pam.AllSuccessfulModularAuthenticationStrategy var24 = new org.jsecurity.authc.pam.AllSuccessfulModularAuthenticationStrategy();
    var23.setModularAuthenticationStrategy((org.jsecurity.authc.pam.ModularAuthenticationStrategy)var24);
    org.jsecurity.authz.SimpleAuthorizationInfo var26 = new org.jsecurity.authz.SimpleAuthorizationInfo();
    var26.addStringPermission("hi!");
    java.io.InputStream var30 = org.jsecurity.util.ClassUtils.getResourceAsStream("");
    java.lang.Object[] var31 = new java.lang.Object[] { var30};
    java.util.List var32 = org.jsecurity.util.CollectionUtils.asList(var31);
    var26.addRoles((java.util.Collection)var32);
    var23.setAuthenticationListeners((java.util.Collection)var32);
    org.jsecurity.realm.activedirectory.ActiveDirectoryRealm var35 = new org.jsecurity.realm.activedirectory.ActiveDirectoryRealm();
    var35.setPrincipalSuffix("");
    var23.setRealm((org.jsecurity.realm.Realm)var35);
    org.jsecurity.authc.pam.FirstSuccessfulAuthenticationStrategy var39 = new org.jsecurity.authc.pam.FirstSuccessfulAuthenticationStrategy();
    org.jsecurity.authz.UnauthorizedException var41 = new org.jsecurity.authz.UnauthorizedException("org.jsecurity.config.ConfigurationException: dd\uFFFD");
    java.lang.Throwable[] var42 = var41.getSuppressed();
    java.util.List var43 = org.jsecurity.util.CollectionUtils.asList((java.lang.Object[])var42);
    org.jsecurity.authc.UsernamePasswordToken var44 = new org.jsecurity.authc.UsernamePasswordToken();
    java.lang.String var45 = var44.getUsername();
    java.net.InetAddress var46 = var44.getInetAddress();
    org.jsecurity.authc.AuthenticationInfo var47 = var39.beforeAllAttempts((java.util.Collection)var43, (org.jsecurity.authc.AuthenticationToken)var44);
    var23.setModularAuthenticationStrategy((org.jsecurity.authc.pam.ModularAuthenticationStrategy)var39);
    org.jsecurity.authc.SimpleAccount var49 = new org.jsecurity.authc.SimpleAccount((org.jsecurity.subject.PrincipalCollection)var18, (java.lang.Object)var23);
    java.util.Collection var50 = var49.getObjectPermissions();
    java.util.Collection var51 = var49.getObjectPermissions();
    org.jsecurity.codec.CodecException var54 = new org.jsecurity.codec.CodecException("dd\uFFFD");
    org.jsecurity.authc.ConcurrentAccessException var55 = new org.jsecurity.authc.ConcurrentAccessException("org.jsecurity.authz.UnauthorizedException: org.jsecurity.session.ExpiredSessionException: ", (java.lang.Throwable)var54);
    org.jsecurity.subject.SimplePrincipalCollection var57 = new org.jsecurity.subject.SimplePrincipalCollection((java.lang.Object)var54, "");
    org.jsecurity.authc.pam.FirstSuccessfulAuthenticationStrategy var58 = new org.jsecurity.authc.pam.FirstSuccessfulAuthenticationStrategy();
    org.jsecurity.authz.UnauthorizedException var60 = new org.jsecurity.authz.UnauthorizedException("org.jsecurity.config.ConfigurationException: dd\uFFFD");
    java.lang.Throwable[] var61 = var60.getSuppressed();
    java.util.List var62 = org.jsecurity.util.CollectionUtils.asList((java.lang.Object[])var61);
    org.jsecurity.authc.UsernamePasswordToken var63 = new org.jsecurity.authc.UsernamePasswordToken();
    java.lang.String var64 = var63.getUsername();
    java.net.InetAddress var65 = var63.getInetAddress();
    org.jsecurity.authc.AuthenticationInfo var66 = var58.beforeAllAttempts((java.util.Collection)var62, (org.jsecurity.authc.AuthenticationToken)var63);
    org.jsecurity.session.UnknownSessionException var71 = new org.jsecurity.session.UnknownSessionException("dd\uFFFD", (java.io.Serializable)100.0f);
    org.jsecurity.subject.SubjectException var72 = new org.jsecurity.subject.SubjectException("dd\uFFFD", (java.lang.Throwable)var71);
    org.jsecurity.io.SerializationException var73 = new org.jsecurity.io.SerializationException("", (java.lang.Throwable)var72);
    java.lang.Throwable[] var74 = var72.getSuppressed();
    java.util.Set var75 = org.jsecurity.util.CollectionUtils.asSet((java.lang.Object[])var74);
    org.jsecurity.authc.SimpleAccount var76 = new org.jsecurity.authc.SimpleAccount((org.jsecurity.subject.PrincipalCollection)var57, (java.lang.Object)var62, var75);
    var49.setObjectPermissions(var75);
    org.jsecurity.session.UnknownSessionException var78 = new org.jsecurity.session.UnknownSessionException("b598ff3d-5685-4491-8ee6-585d37adb1db", (java.lang.Throwable)var12, (java.io.Serializable)var49);
    boolean var79 = var49.isCredentialsExpired();
    var49.addStringPermission("00dc6e22-d7f9-475d-858b-a4d1b70bee5c");
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var20);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var21);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var22);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var30);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var31);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var32);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var42);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var43);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var45);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var46);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var47);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var50);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var51);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var61);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var62);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var64);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var65);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var66);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var74);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var75);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var79 == false);

  }

  public void test291() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest7.test291");


    boolean var1 = org.jsecurity.util.StringUtils.hasText("e9f887e9-5a0f-4c10-a504-0e788ce2df31");
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var1 == true);

  }

  public void test292() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest7.test292");


    org.jsecurity.session.mgt.eis.MemorySessionDAO var0 = new org.jsecurity.session.mgt.eis.MemorySessionDAO();
    org.jsecurity.cache.Cache var1 = var0.getActiveSessionsCache();
    org.jsecurity.session.mgt.SimpleSession var2 = new org.jsecurity.session.mgt.SimpleSession();
    var2.setTimeout((-1L));
    org.jsecurity.session.mgt.SimpleSession var5 = new org.jsecurity.session.mgt.SimpleSession();
    java.util.Date var6 = var5.getLastAccessTime();
    var2.setLastAccessTime(var6);
    var0.update((org.jsecurity.session.Session)var2);
    var0.setActiveSessionsCacheName("hi!");
    java.util.Collection var11 = var0.getActiveSessions();
    org.jsecurity.session.mgt.SimpleSession var12 = new org.jsecurity.session.mgt.SimpleSession();
    org.jsecurity.io.SerializationException var15 = new org.jsecurity.io.SerializationException("org.jsecurity.config.ConfigurationException: dd\uFFFD");
    org.jsecurity.authc.AccountException var16 = new org.jsecurity.authc.AccountException("a2b823b1e72eae2b727289df8a00a89df8a0bab6ad8a89c4c5c7a9b62a270000", (java.lang.Throwable)var15);
    var12.setId((java.io.Serializable)"a2b823b1e72eae2b727289df8a00a89df8a0bab6ad8a89c4c5c7a9b62a270000");
    org.jsecurity.config.ReflectionBuilder var18 = new org.jsecurity.config.ReflectionBuilder();
    org.jsecurity.config.ReflectionBuilder var19 = new org.jsecurity.config.ReflectionBuilder();
    org.jsecurity.io.IniResource var20 = new org.jsecurity.io.IniResource();
    var20.setCharsetName("org.jsecurity.authz.UnauthorizedException: org.jsecurity.session.ExpiredSessionException: ");
    java.util.Map var23 = var20.getSections();
    java.util.Map var24 = var19.buildObjects(var23);
    org.jsecurity.config.ReflectionBuilder var25 = new org.jsecurity.config.ReflectionBuilder();
    org.jsecurity.io.IniResource var26 = new org.jsecurity.io.IniResource();
    var26.setCharsetName("org.jsecurity.authz.UnauthorizedException: org.jsecurity.session.ExpiredSessionException: ");
    java.util.Map var29 = var26.getSections();
    java.util.Map var30 = var25.buildObjects(var29);
    java.util.Map var31 = var19.buildObjects(var30);
    java.util.Map var32 = var18.buildObjects(var31);
    var12.setAttributes(var32);
    java.net.InetAddress var34 = var12.getHostAddress();
    java.io.Serializable var35 = var12.getId();
    var0.delete((org.jsecurity.session.Session)var12);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var1);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var6);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var11);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var23);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var24);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var29);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var30);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var31);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var32);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var34);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var35 + "' != '" + "a2b823b1e72eae2b727289df8a00a89df8a0bab6ad8a89c4c5c7a9b62a270000"+ "'", var35.equals("a2b823b1e72eae2b727289df8a00a89df8a0bab6ad8a89c4c5c7a9b62a270000"));

  }

  public void test293() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest7.test293");


    org.jsecurity.authz.SimpleAuthorizationInfo var0 = new org.jsecurity.authz.SimpleAuthorizationInfo();
    java.util.Set var1 = var0.getStringPermissions();
    java.util.Set var2 = var0.getStringPermissions();
    java.util.Set var3 = var0.getRoles();
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var1);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var2);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var3);

  }

  public void test294() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest7.test294");


    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      byte[] var1 = org.jsecurity.codec.Hex.decode("072be27b-6bd8-4897-92c3-67cf42b4a94f");
      fail("Expected exception of type java.lang.IllegalArgumentException");
    } catch (java.lang.IllegalArgumentException e) {
      // Expected exception.
    }

  }

  public void test295() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest7.test295");


    org.jsecurity.authc.AccountException var2 = new org.jsecurity.authc.AccountException("org.jsecurity.config.ConfigurationException: dd\uFFFD-4org.jsecurity.config.ConfigurationException: dd\uFFFD02-8085-950org.jsecurity.config.ConfigurationException: dd\uFFFDbb026org.jsecurity.config.ConfigurationException: dd\uFFFD06");
    org.jsecurity.io.ResourceException var3 = new org.jsecurity.io.ResourceException((java.lang.Throwable)var2);
    org.jsecurity.authc.ConcurrentAccessException var4 = new org.jsecurity.authc.ConcurrentAccessException("de5c08e4-2d0a-4288-beee-06511caf6487", (java.lang.Throwable)var2);

  }

  public void test296() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest7.test296");


    boolean var1 = org.jsecurity.io.ResourceUtils.hasResourcePrefix("53214ab7-e301-497a-9ab1-a923014df137");
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var1 == false);

  }

  public void test297() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest7.test297");


    org.jsecurity.session.UnknownSessionException var3 = new org.jsecurity.session.UnknownSessionException("dd\uFFFD", (java.io.Serializable)100.0f);
    org.jsecurity.session.SessionException var5 = new org.jsecurity.session.SessionException("dd\uFFFD", (java.lang.Throwable)var3, (java.io.Serializable)0);
    org.jsecurity.authc.SimpleAuthenticationInfo var8 = new org.jsecurity.authc.SimpleAuthenticationInfo((java.lang.Object)0, (java.lang.Object)10, "hi!");
    java.lang.Object var9 = var8.getCredentials();
    org.jsecurity.realm.activedirectory.ActiveDirectoryRealm var10 = new org.jsecurity.realm.activedirectory.ActiveDirectoryRealm();
    org.jsecurity.realm.text.TextConfigurationRealm var11 = new org.jsecurity.realm.text.TextConfigurationRealm();
    java.io.InputStream var13 = org.jsecurity.util.ClassUtils.getResourceAsStream("");
    java.lang.Object[] var14 = new java.lang.Object[] { var13};
    java.util.List var15 = org.jsecurity.util.CollectionUtils.asList(var14);
    org.jsecurity.authc.pam.ModularRealmAuthenticator var16 = new org.jsecurity.authc.pam.ModularRealmAuthenticator(var15);
    org.jsecurity.subject.SimplePrincipalCollection var18 = new org.jsecurity.subject.SimplePrincipalCollection((java.util.Collection)var15, "org.jsecurity.authz.UnauthorizedException: org.jsecurity.session.ExpiredSessionException: ");
    org.jsecurity.session.UnknownSessionException var23 = new org.jsecurity.session.UnknownSessionException("dd\uFFFD", (java.io.Serializable)100.0f);
    org.jsecurity.session.SessionException var25 = new org.jsecurity.session.SessionException("dd\uFFFD", (java.lang.Throwable)var23, (java.io.Serializable)0);
    org.jsecurity.session.SessionException var26 = new org.jsecurity.session.SessionException("dd\uFFFD", (java.lang.Throwable)var23);
    var18.add((java.lang.Object)var26, "org.jsecurity.config.ConfigurationException: dd\uFFFD");
    var11.onLogout((org.jsecurity.subject.PrincipalCollection)var18);
    org.jsecurity.authc.ExpiredCredentialsException var31 = new org.jsecurity.authc.ExpiredCredentialsException();
    org.jsecurity.session.ExpiredSessionException var32 = new org.jsecurity.session.ExpiredSessionException("", (java.lang.Throwable)var31);
    java.lang.Throwable[] var33 = var32.getSuppressed();
    org.jsecurity.io.ResourceException var34 = new org.jsecurity.io.ResourceException((java.lang.Throwable)var32);
    org.jsecurity.authc.SimpleAuthenticationInfo var35 = new org.jsecurity.authc.SimpleAuthenticationInfo((org.jsecurity.subject.PrincipalCollection)var18, (java.lang.Object)var32);
    org.jsecurity.codec.CodecException var38 = new org.jsecurity.codec.CodecException("dd\uFFFD");
    org.jsecurity.authc.ConcurrentAccessException var39 = new org.jsecurity.authc.ConcurrentAccessException("org.jsecurity.authz.UnauthorizedException: org.jsecurity.session.ExpiredSessionException: ", (java.lang.Throwable)var38);
    org.jsecurity.subject.SimplePrincipalCollection var41 = new org.jsecurity.subject.SimplePrincipalCollection((java.lang.Object)var38, "");
    java.io.InputStream var43 = org.jsecurity.util.ClassUtils.getResourceAsStream("");
    java.lang.Object[] var44 = new java.lang.Object[] { var43};
    java.util.List var45 = org.jsecurity.util.CollectionUtils.asList(var44);
    org.jsecurity.authc.pam.ModularRealmAuthenticator var46 = new org.jsecurity.authc.pam.ModularRealmAuthenticator(var45);
    var41.addAll((java.util.Collection)var45, "\u0000\u0000");
    org.jsecurity.authz.UnauthorizedException var50 = new org.jsecurity.authz.UnauthorizedException();
    org.jsecurity.session.SessionException var52 = new org.jsecurity.session.SessionException("", (java.lang.Throwable)var50, (java.io.Serializable)"org.jsecurity.config.ConfigurationException: dd\uFFFD");
    org.jsecurity.crypto.hash.Sha1Hash var53 = new org.jsecurity.crypto.hash.Sha1Hash((java.lang.Object)"");
    org.jsecurity.session.UnknownSessionException var58 = new org.jsecurity.session.UnknownSessionException("dd\uFFFD", (java.io.Serializable)100.0f);
    org.jsecurity.subject.SubjectException var59 = new org.jsecurity.subject.SubjectException("dd\uFFFD", (java.lang.Throwable)var58);
    org.jsecurity.io.SerializationException var60 = new org.jsecurity.io.SerializationException("", (java.lang.Throwable)var59);
    java.lang.Throwable[] var61 = var59.getSuppressed();
    java.util.Set var62 = org.jsecurity.util.CollectionUtils.asSet((java.lang.Object[])var61);
    org.jsecurity.authz.SimpleAuthorizationInfo var64 = new org.jsecurity.authz.SimpleAuthorizationInfo();
    org.jsecurity.session.UnknownSessionException var69 = new org.jsecurity.session.UnknownSessionException("dd\uFFFD", (java.io.Serializable)100.0f);
    org.jsecurity.subject.SubjectException var70 = new org.jsecurity.subject.SubjectException("dd\uFFFD", (java.lang.Throwable)var69);
    org.jsecurity.io.SerializationException var71 = new org.jsecurity.io.SerializationException("", (java.lang.Throwable)var70);
    java.lang.Throwable[] var72 = var70.getSuppressed();
    java.util.Set var73 = org.jsecurity.util.CollectionUtils.asSet((java.lang.Object[])var72);
    var64.setStringPermissions(var73);
    java.util.Set var75 = var64.getRoles();
    org.jsecurity.authz.SimpleAuthorizationInfo var76 = new org.jsecurity.authz.SimpleAuthorizationInfo();
    var76.addRole("a2b823b1e72eae2b727289df8a00a89df8a0bab6ad8a89c4c5c7a9b62a270000");
    org.jsecurity.session.UnknownSessionException var83 = new org.jsecurity.session.UnknownSessionException("dd\uFFFD", (java.io.Serializable)100.0f);
    org.jsecurity.subject.SubjectException var84 = new org.jsecurity.subject.SubjectException("dd\uFFFD", (java.lang.Throwable)var83);
    org.jsecurity.io.SerializationException var85 = new org.jsecurity.io.SerializationException("", (java.lang.Throwable)var84);
    java.lang.Throwable[] var86 = var84.getSuppressed();
    java.util.Set var87 = org.jsecurity.util.CollectionUtils.asSet((java.lang.Object[])var86);
    var76.addRoles((java.util.Collection)var87);
    var64.setRoles(var87);
    org.jsecurity.authz.SimpleRole var90 = new org.jsecurity.authz.SimpleRole("org.jsecurity.authz.UnauthorizedException: org.jsecurity.session.ExpiredSessionException: ", var87);
    org.jsecurity.authc.SimpleAccount var91 = new org.jsecurity.authc.SimpleAccount((org.jsecurity.subject.PrincipalCollection)var41, (java.lang.Object)"", var62, var87);
    var35.setPrincipals((org.jsecurity.subject.PrincipalCollection)var41);
    var10.onLogout((org.jsecurity.subject.PrincipalCollection)var41);
    var8.setPrincipals((org.jsecurity.subject.PrincipalCollection)var41);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var9 + "' != '" + 10+ "'", var9.equals(10));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var13);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var14);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var15);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var33);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var43);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var44);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var45);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var61);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var62);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var72);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var73);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var75);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var86);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var87);

  }

  public void test298() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest7.test298");


    org.jsecurity.session.mgt.SimpleSession var0 = new org.jsecurity.session.mgt.SimpleSession();
    var0.setTimeout((-1L));
    org.jsecurity.session.mgt.SimpleSession var3 = new org.jsecurity.session.mgt.SimpleSession();
    java.util.Date var4 = var3.getLastAccessTime();
    var0.setLastAccessTime(var4);
    org.jsecurity.session.UnknownSessionException var10 = new org.jsecurity.session.UnknownSessionException("dd\uFFFD", (java.io.Serializable)100.0f);
    org.jsecurity.subject.SubjectException var11 = new org.jsecurity.subject.SubjectException("dd\uFFFD", (java.lang.Throwable)var10);
    org.jsecurity.io.SerializationException var12 = new org.jsecurity.io.SerializationException("", (java.lang.Throwable)var11);
    java.lang.Throwable[] var13 = var11.getSuppressed();
    java.lang.Throwable[] var14 = var11.getSuppressed();
    org.jsecurity.authz.SimpleAuthorizationInfo var17 = new org.jsecurity.authz.SimpleAuthorizationInfo();
    var17.addRole("a2b823b1e72eae2b727289df8a00a89df8a0bab6ad8a89c4c5c7a9b62a270000");
    org.jsecurity.session.UnknownSessionException var24 = new org.jsecurity.session.UnknownSessionException("dd\uFFFD", (java.io.Serializable)100.0f);
    org.jsecurity.subject.SubjectException var25 = new org.jsecurity.subject.SubjectException("dd\uFFFD", (java.lang.Throwable)var24);
    org.jsecurity.io.SerializationException var26 = new org.jsecurity.io.SerializationException("", (java.lang.Throwable)var25);
    java.lang.Throwable[] var27 = var25.getSuppressed();
    java.util.Set var28 = org.jsecurity.util.CollectionUtils.asSet((java.lang.Object[])var27);
    var17.addRoles((java.util.Collection)var28);
    java.io.InputStream var31 = org.jsecurity.util.ClassUtils.getResourceAsStream("");
    java.lang.Object[] var32 = new java.lang.Object[] { var31};
    java.util.List var33 = org.jsecurity.util.CollectionUtils.asList(var32);
    org.jsecurity.authc.pam.ModularRealmAuthenticator var34 = new org.jsecurity.authc.pam.ModularRealmAuthenticator(var33);
    org.jsecurity.subject.SimplePrincipalCollection var36 = new org.jsecurity.subject.SimplePrincipalCollection((java.util.Collection)var33, "org.jsecurity.authz.UnauthorizedException: org.jsecurity.session.ExpiredSessionException: ");
    org.jsecurity.session.UnknownSessionException var41 = new org.jsecurity.session.UnknownSessionException("dd\uFFFD", (java.io.Serializable)100.0f);
    org.jsecurity.session.SessionException var43 = new org.jsecurity.session.SessionException("dd\uFFFD", (java.lang.Throwable)var41, (java.io.Serializable)0);
    org.jsecurity.session.SessionException var44 = new org.jsecurity.session.SessionException("dd\uFFFD", (java.lang.Throwable)var41);
    var36.add((java.lang.Object)var44, "org.jsecurity.config.ConfigurationException: dd\uFFFD");
    java.util.Set var47 = var36.asSet();
    org.jsecurity.authz.SimpleAuthorizingAccount var48 = new org.jsecurity.authz.SimpleAuthorizingAccount((java.lang.Object)var14, (java.lang.Object)"\u0000\u0000\u0000", "\u0000\u0000\u0000", var28, var47);
    java.lang.Object var49 = var0.removeAttribute((java.lang.Object)var28);
    java.util.Date var50 = var0.getStopTimestamp();
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var4);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var13);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var14);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var27);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var28);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var31);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var32);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var33);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var47);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var49);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var50);

  }

  public void test299() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest7.test299");


    org.jsecurity.realm.text.PropertiesRealm var0 = new org.jsecurity.realm.text.PropertiesRealm();
    var0.setReloadIntervalSeconds(10);
    var0.setUseXmlFormat(true);
    java.lang.String var5 = var0.getAuthorizationCacheName();
    var0.run();
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var5);

  }

  public void test300() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest7.test300");


    org.jsecurity.JSecurityException var4 = new org.jsecurity.JSecurityException();
    org.jsecurity.authc.LockedAccountException var5 = new org.jsecurity.authc.LockedAccountException("org.jsecurity.config.ConfigurationException: dd\uFFFD", (java.lang.Throwable)var4);
    org.jsecurity.authc.UnknownAccountException var6 = new org.jsecurity.authc.UnknownAccountException("a2b823b1e72eae2b727289df8a00a89df8a0bab6ad8a89c4c5c7a9b62a270000", (java.lang.Throwable)var4);
    org.jsecurity.authc.IncorrectCredentialsException var7 = new org.jsecurity.authc.IncorrectCredentialsException((java.lang.Throwable)var4);
    org.jsecurity.authc.CredentialsException var8 = new org.jsecurity.authc.CredentialsException("\uFFFD\uFFFD#\uFFFD\uFFFD.\uFFFD+r\uFFFD\u6959(\uFFFD\uFFFDW\uFFFDq\uFFFD.\uFFFD\uFFFD^jY\uFFFDj\uFFFDa\uFFFD\uFFFD\uFFFDj\u0628", (java.lang.Throwable)var7);
    org.jsecurity.authz.permission.InvalidPermissionStringException var11 = new org.jsecurity.authz.permission.InvalidPermissionStringException("", "dd\uFFFD");
    org.jsecurity.JSecurityException var13 = new org.jsecurity.JSecurityException("");
    org.jsecurity.authc.SimpleAuthenticationInfo var15 = new org.jsecurity.authc.SimpleAuthenticationInfo((java.lang.Object)var11, (java.lang.Object)"", "org.jsecurity.authz.UnauthorizedException: org.jsecurity.session.ExpiredSessionException: ");
    org.jsecurity.session.ExpiredSessionException var16 = new org.jsecurity.session.ExpiredSessionException("e00f87fa-0543-46d5-b69b-14e41add033e", (java.lang.Throwable)var8, (java.io.Serializable)var11);
    org.jsecurity.codec.CodecException var17 = new org.jsecurity.codec.CodecException((java.lang.Throwable)var11);
    java.lang.String var18 = var11.getPermissionString();
    org.jsecurity.util.InstantiationException var20 = new org.jsecurity.util.InstantiationException("org.jsecurity.authc.UsernamePasswordToken - org.jsecurity.config.ConfigurationException: dd\uFFFD, rememberMe=false");
    var11.addSuppressed((java.lang.Throwable)var20);
    java.lang.String var22 = var11.getPermissionString();
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var18 + "' != '" + "dd\uFFFD"+ "'", var18.equals("dd\uFFFD"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var22 + "' != '" + "dd\uFFFD"+ "'", var22.equals("dd\uFFFD"));

  }

  public void test301() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest7.test301");


    org.jsecurity.authz.SimpleAuthorizationInfo var0 = new org.jsecurity.authz.SimpleAuthorizationInfo();
    org.jsecurity.session.UnknownSessionException var5 = new org.jsecurity.session.UnknownSessionException("dd\uFFFD", (java.io.Serializable)100.0f);
    org.jsecurity.subject.SubjectException var6 = new org.jsecurity.subject.SubjectException("dd\uFFFD", (java.lang.Throwable)var5);
    org.jsecurity.io.SerializationException var7 = new org.jsecurity.io.SerializationException("", (java.lang.Throwable)var6);
    java.lang.Throwable[] var8 = var6.getSuppressed();
    java.util.Set var9 = org.jsecurity.util.CollectionUtils.asSet((java.lang.Object[])var8);
    var0.setStringPermissions(var9);
    org.jsecurity.authz.permission.WildcardPermissionResolver var11 = new org.jsecurity.authz.permission.WildcardPermissionResolver();
    org.jsecurity.authz.Permission var13 = var11.resolvePermission("hi!");
    var0.addObjectPermission(var13);
    var0.addRole("b725e8cc-690c-495e-ac27-b1b425834793");
    java.util.Set var17 = var0.getObjectPermissions();
    org.jsecurity.authz.SimpleAuthorizationInfo var18 = new org.jsecurity.authz.SimpleAuthorizationInfo();
    var18.addStringPermission("hi!");
    org.jsecurity.authz.SimpleAuthorizationInfo var22 = new org.jsecurity.authz.SimpleAuthorizationInfo();
    org.jsecurity.session.UnknownSessionException var27 = new org.jsecurity.session.UnknownSessionException("dd\uFFFD", (java.io.Serializable)100.0f);
    org.jsecurity.subject.SubjectException var28 = new org.jsecurity.subject.SubjectException("dd\uFFFD", (java.lang.Throwable)var27);
    org.jsecurity.io.SerializationException var29 = new org.jsecurity.io.SerializationException("", (java.lang.Throwable)var28);
    java.lang.Throwable[] var30 = var28.getSuppressed();
    java.util.Set var31 = org.jsecurity.util.CollectionUtils.asSet((java.lang.Object[])var30);
    var22.setStringPermissions(var31);
    org.jsecurity.authz.SimpleRole var33 = new org.jsecurity.authz.SimpleRole("\u0000\u0000", var31);
    var18.setRoles(var31);
    org.jsecurity.mgt.DefaultSecurityManager var35 = new org.jsecurity.mgt.DefaultSecurityManager();
    java.io.InputStream var37 = org.jsecurity.util.ClassUtils.getResourceAsStream("");
    java.lang.Object[] var38 = new java.lang.Object[] { var37};
    java.util.List var39 = org.jsecurity.util.CollectionUtils.asList(var38);
    org.jsecurity.authc.pam.ModularRealmAuthenticator var40 = new org.jsecurity.authc.pam.ModularRealmAuthenticator(var39);
    org.jsecurity.authc.pam.AllSuccessfulModularAuthenticationStrategy var41 = new org.jsecurity.authc.pam.AllSuccessfulModularAuthenticationStrategy();
    var40.setModularAuthenticationStrategy((org.jsecurity.authc.pam.ModularAuthenticationStrategy)var41);
    org.jsecurity.authz.SimpleAuthorizationInfo var43 = new org.jsecurity.authz.SimpleAuthorizationInfo();
    var43.addStringPermission("hi!");
    java.io.InputStream var47 = org.jsecurity.util.ClassUtils.getResourceAsStream("");
    java.lang.Object[] var48 = new java.lang.Object[] { var47};
    java.util.List var49 = org.jsecurity.util.CollectionUtils.asList(var48);
    var43.addRoles((java.util.Collection)var49);
    var40.setAuthenticationListeners((java.util.Collection)var49);
    var35.setSessionListeners((java.util.Collection)var49);
    org.jsecurity.realm.text.TextConfigurationRealm var53 = new org.jsecurity.realm.text.TextConfigurationRealm();
    java.io.InputStream var55 = org.jsecurity.util.ClassUtils.getResourceAsStream("");
    java.lang.Object[] var56 = new java.lang.Object[] { var55};
    java.util.List var57 = org.jsecurity.util.CollectionUtils.asList(var56);
    org.jsecurity.authc.pam.ModularRealmAuthenticator var58 = new org.jsecurity.authc.pam.ModularRealmAuthenticator(var57);
    org.jsecurity.subject.SimplePrincipalCollection var60 = new org.jsecurity.subject.SimplePrincipalCollection((java.util.Collection)var57, "org.jsecurity.authz.UnauthorizedException: org.jsecurity.session.ExpiredSessionException: ");
    org.jsecurity.session.UnknownSessionException var65 = new org.jsecurity.session.UnknownSessionException("dd\uFFFD", (java.io.Serializable)100.0f);
    org.jsecurity.session.SessionException var67 = new org.jsecurity.session.SessionException("dd\uFFFD", (java.lang.Throwable)var65, (java.io.Serializable)0);
    org.jsecurity.session.SessionException var68 = new org.jsecurity.session.SessionException("dd\uFFFD", (java.lang.Throwable)var65);
    var60.add((java.lang.Object)var68, "org.jsecurity.config.ConfigurationException: dd\uFFFD");
    var53.onLogout((org.jsecurity.subject.PrincipalCollection)var60);
    org.jsecurity.authc.pam.FirstSuccessfulAuthenticationStrategy var72 = new org.jsecurity.authc.pam.FirstSuccessfulAuthenticationStrategy();
    org.jsecurity.authz.UnauthorizedException var74 = new org.jsecurity.authz.UnauthorizedException("org.jsecurity.config.ConfigurationException: dd\uFFFD");
    java.lang.Throwable[] var75 = var74.getSuppressed();
    java.util.List var76 = org.jsecurity.util.CollectionUtils.asList((java.lang.Object[])var75);
    org.jsecurity.authc.UsernamePasswordToken var77 = new org.jsecurity.authc.UsernamePasswordToken();
    java.lang.String var78 = var77.getUsername();
    java.net.InetAddress var79 = var77.getInetAddress();
    org.jsecurity.authc.AuthenticationInfo var80 = var72.beforeAllAttempts((java.util.Collection)var76, (org.jsecurity.authc.AuthenticationToken)var77);
    boolean[] var81 = var35.hasRoles((org.jsecurity.subject.PrincipalCollection)var60, var76);
    org.jsecurity.codec.CodecException var84 = new org.jsecurity.codec.CodecException("dd\uFFFD");
    org.jsecurity.authc.ConcurrentAccessException var85 = new org.jsecurity.authc.ConcurrentAccessException("org.jsecurity.authz.UnauthorizedException: org.jsecurity.session.ExpiredSessionException: ", (java.lang.Throwable)var84);
    org.jsecurity.subject.SimplePrincipalCollection var87 = new org.jsecurity.subject.SimplePrincipalCollection((java.lang.Object)var84, "");
    java.io.InputStream var89 = org.jsecurity.util.ClassUtils.getResourceAsStream("");
    java.lang.Object[] var90 = new java.lang.Object[] { var89};
    java.util.List var91 = org.jsecurity.util.CollectionUtils.asList(var90);
    org.jsecurity.authc.pam.ModularRealmAuthenticator var92 = new org.jsecurity.authc.pam.ModularRealmAuthenticator(var91);
    var87.addAll((java.util.Collection)var91, "\u0000\u0000");
    var35.setSessionListeners((java.util.Collection)var91);
    var18.addObjectPermissions((java.util.Collection)var91);
    var0.addObjectPermissions((java.util.Collection)var91);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var8);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var9);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var13);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var17);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var30);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var31);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var37);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var38);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var39);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var47);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var48);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var49);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var55);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var56);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var57);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var75);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var76);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var78);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var79);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var80);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var81);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var89);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var90);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var91);

  }

  public void test302() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest7.test302");


    org.jsecurity.authz.SimpleRole var0 = new org.jsecurity.authz.SimpleRole();
    org.jsecurity.authz.permission.WildcardPermission var3 = new org.jsecurity.authz.permission.WildcardPermission("hi!", false);
    boolean var4 = var0.isPermitted((org.jsecurity.authz.Permission)var3);
    java.lang.String var5 = var0.getName();
    org.jsecurity.authz.UnauthorizedException var8 = new org.jsecurity.authz.UnauthorizedException("org.jsecurity.config.ConfigurationException: dd\uFFFD");
    org.jsecurity.session.InvalidSessionException var9 = new org.jsecurity.session.InvalidSessionException("90538851-b0e4-449f-8dda-973ab1d52c9e", (java.lang.Throwable)var8);
    boolean var10 = var0.equals((java.lang.Object)var9);
    var9.setSessionId((java.io.Serializable)"46b7eeaa-afcc-499c-aad3-c2d089ce9a8c");
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var4 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var5);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var10 == false);

  }

  public void test303() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest7.test303");


    org.jsecurity.crypto.hash.Sha512Hash var1 = org.jsecurity.crypto.hash.Sha512Hash.fromBase64String("org.jsecurity.config.ConfigurationException: dd\uFFFD");
    byte[] var2 = var1.getBytes();
    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      char[] var4 = org.jsecurity.codec.CodecSupport.toChars(var2, "org.jsecurity.authc.UsernamePasswordToken - \u0000\u0000, rememberMe=false");
      fail("Expected exception of type org.jsecurity.codec.CodecException");
    } catch (org.jsecurity.codec.CodecException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var1);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var2);

  }

  public void test304() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest7.test304");


    org.jsecurity.io.ResourceException var3 = new org.jsecurity.io.ResourceException("hi!");
    org.jsecurity.codec.CodecException var4 = new org.jsecurity.codec.CodecException((java.lang.Throwable)var3);
    org.jsecurity.JSecurityException var5 = new org.jsecurity.JSecurityException("a2b823b1e72eae2b727289df8a00a89df8a0bab6ad8a89c4c5c7a9b62a270000", (java.lang.Throwable)var3);
    org.jsecurity.authc.ExcessiveAttemptsException var6 = new org.jsecurity.authc.ExcessiveAttemptsException((java.lang.Throwable)var5);
    org.jsecurity.session.StoppedSessionException var7 = new org.jsecurity.session.StoppedSessionException((java.lang.Throwable)var5);
    org.jsecurity.authc.AccountException var8 = new org.jsecurity.authc.AccountException("org.jsecurity.authz.UnauthorizedException: org.jsecurity.session.ExpiredSessionException: ", (java.lang.Throwable)var7);
    org.jsecurity.session.StoppedSessionException var9 = new org.jsecurity.session.StoppedSessionException((java.io.Serializable)var7);
    org.jsecurity.io.ResourceException var10 = new org.jsecurity.io.ResourceException((java.lang.Throwable)var9);
    org.jsecurity.authz.UnauthorizedException var11 = new org.jsecurity.authz.UnauthorizedException((java.lang.Throwable)var9);
    org.jsecurity.cache.CacheException var12 = new org.jsecurity.cache.CacheException((java.lang.Throwable)var11);

  }

  public void test305() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest7.test305");


    org.jsecurity.realm.activedirectory.ActiveDirectoryRealm var0 = new org.jsecurity.realm.activedirectory.ActiveDirectoryRealm();
    var0.init();
    var0.setSystemPassword("dd\uFFFD");
    var0.setSystemPassword("9f00e408-27bf-467d-a45f-01bb47b51aa6");
    var0.setSearchBase("org.jsecurity.realm.text.TextConfigurationRealm_445");

  }

  public void test306() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest7.test306");


    org.jsecurity.subject.InvalidSubjectException var3 = new org.jsecurity.subject.InvalidSubjectException("dd\uFFFD");
    org.jsecurity.session.ExpiredSessionException var4 = new org.jsecurity.session.ExpiredSessionException("org.jsecurity.config.ConfigurationException: dd\uFFFD", (java.io.Serializable)var3);
    org.jsecurity.session.SessionException var5 = new org.jsecurity.session.SessionException((java.lang.Throwable)var4);
    org.jsecurity.util.UnavailableConstructorException var6 = new org.jsecurity.util.UnavailableConstructorException((java.lang.Throwable)var4);
    org.jsecurity.authc.CredentialsException var7 = new org.jsecurity.authc.CredentialsException("ece0d7de-3501-4311-83c5-d3174fe414d8", (java.lang.Throwable)var4);

  }

  public void test307() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest7.test307");


    org.jsecurity.crypto.hash.Sha384Hash var1 = org.jsecurity.crypto.hash.Sha384Hash.fromBase64String("org.jsecurity.realm.text.PropertiesRealm_3025");
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var1);

  }

  public void test308() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest7.test308");


    org.jsecurity.session.UnknownSessionException var4 = new org.jsecurity.session.UnknownSessionException("dd\uFFFD", (java.io.Serializable)100.0f);
    org.jsecurity.config.ConfigurationException var5 = new org.jsecurity.config.ConfigurationException("dd\uFFFD", (java.lang.Throwable)var4);
    org.jsecurity.session.ExpiredSessionException var7 = new org.jsecurity.session.ExpiredSessionException("", (java.lang.Throwable)var5, (java.io.Serializable)true);
    org.jsecurity.authc.pam.UnsupportedTokenException var8 = new org.jsecurity.authc.pam.UnsupportedTokenException((java.lang.Throwable)var7);
    org.jsecurity.authc.LockedAccountException var9 = new org.jsecurity.authc.LockedAccountException((java.lang.Throwable)var7);
    org.jsecurity.config.ConfigurationException var10 = new org.jsecurity.config.ConfigurationException((java.lang.Throwable)var9);
    java.io.InputStream var12 = org.jsecurity.util.ClassUtils.getResourceAsStream("");
    java.lang.Object[] var13 = new java.lang.Object[] { var12};
    java.util.List var14 = org.jsecurity.util.CollectionUtils.asList(var13);
    org.jsecurity.authc.pam.ModularRealmAuthenticator var15 = new org.jsecurity.authc.pam.ModularRealmAuthenticator(var14);
    org.jsecurity.subject.SimplePrincipalCollection var17 = new org.jsecurity.subject.SimplePrincipalCollection((java.util.Collection)var14, "org.jsecurity.authz.UnauthorizedException: org.jsecurity.session.ExpiredSessionException: ");
    java.util.List var18 = var17.asList();
    org.jsecurity.authc.SimpleAccount var20 = new org.jsecurity.authc.SimpleAccount((java.lang.Object)var9, (java.lang.Object)var17, "org.jsecurity.realm.text.PropertiesRealm_2603");
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var12);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var13);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var14);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var18);

  }

  public void test309() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest7.test309");


    org.jsecurity.cache.HashtableCache var1 = new org.jsecurity.cache.HashtableCache("orgjsecurityauthcCredentialsException783ccd3148a842dd890fdf885a7baafAA==");
    int var2 = var1.size();
    var1.clear();
    java.util.Set var4 = var1.values();
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var2 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var4);

  }

  public void test310() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest7.test310");


    org.jsecurity.authz.UnauthorizedException var2 = new org.jsecurity.authz.UnauthorizedException("org.jsecurity.config.ConfigurationException: dd\uFFFD");
    java.lang.Throwable[] var3 = var2.getSuppressed();
    org.jsecurity.session.SessionException var4 = new org.jsecurity.session.SessionException((java.lang.Throwable)var2);
    org.jsecurity.util.UnknownClassException var5 = new org.jsecurity.util.UnknownClassException((java.lang.Throwable)var2);
    org.jsecurity.authc.AuthenticationException var6 = new org.jsecurity.authc.AuthenticationException("07c3a6b7-b2be-4132-9b71-96c0b4a3a551", (java.lang.Throwable)var2);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var3);

  }

  public void test311() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest7.test311");


    org.jsecurity.authz.aop.UserAnnotationMethodInterceptor var0 = new org.jsecurity.authz.aop.UserAnnotationMethodInterceptor();
    org.jsecurity.aop.AnnotationHandler var1 = var0.getHandler();
    org.jsecurity.aop.AnnotationHandler var2 = var0.getHandler();
    org.jsecurity.aop.AnnotationHandler var3 = var0.getHandler();
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var1);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var2);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var3);

  }

  public void test312() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest7.test312");


    org.jsecurity.util.AntPathMatcher var0 = new org.jsecurity.util.AntPathMatcher();
    boolean var3 = var0.matchStart("\uFFFD\uFFFD#\uFFFD\uFFFD.\uFFFD+rr\uFFFD\u07CA\u0000\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\u01E9\uFFFD*'\u0000\u0000", "ZGT/");
    var0.setPathSeparator("org.jsecurity.config.ConfigurationException: dd\uFFFD");
    boolean var8 = var0.matchStart("6464ff", "\uFFFD\uFFFD\u0000");
    java.lang.String var11 = var0.extractPathWithinPattern("hi!", "10f5b491-38ac-4c02-8085-950abb026a06");
    var0.setPathSeparator("\uFFFD\uFFFD#\uFFFD\uFFFD.\uFFFD+r\uFFFD\u6959(\uFFFD\uFFFDW\uFFFDq\uFFFD.\uFFFD\uFFFD^jY\uFFFDj\uFFFDa\uFFFD\uFFFD\uFFFDj\u0628\u0000");
    var0.setPathSeparator("2de55d54-e620-45f7-8afd-a30a33a48e47");
    java.lang.String var18 = var0.extractPathWithinPattern("3162ca5e-c516-4ad8-9ca6-6ff0939bd5a6", "a7779988-1964-480a-b68c-5556d628a264");
    boolean var21 = var0.matchStart("YjNKbmFuTmxZM1Z5YVhSNVkyOXVabWxuUTI5dVptbG5kWEpoZEdsdmJrVjRZMlZ3ZEdsdmJrRkJRVDBOQ2c9PQ==", "bcd88f91-36fc-4824-97c3-1a752a1a4e71");
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var3 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var8 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var11 + "' != '" + "org.jsecurity.config.ConfigurationException: dd\uFFFD-4org.jsecurity.config.ConfigurationException: dd\uFFFD02-8085-950org.jsecurity.config.ConfigurationException: dd\uFFFDbb026org.jsecurity.config.ConfigurationException: dd\uFFFD06"+ "'", var11.equals("org.jsecurity.config.ConfigurationException: dd\uFFFD-4org.jsecurity.config.ConfigurationException: dd\uFFFD02-8085-950org.jsecurity.config.ConfigurationException: dd\uFFFDbb026org.jsecurity.config.ConfigurationException: dd\uFFFD06"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var18 + "' != '" + ""+ "'", var18.equals(""));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var21 == false);

  }

  public void test313() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest7.test313");


    org.jsecurity.session.mgt.SimpleSession var0 = new org.jsecurity.session.mgt.SimpleSession();
    var0.setTimeout((-1L));
    org.jsecurity.session.mgt.SimpleSession var3 = new org.jsecurity.session.mgt.SimpleSession();
    java.util.Date var4 = var3.getLastAccessTime();
    var0.setLastAccessTime(var4);
    java.util.Collection var6 = var0.getAttributeKeys();
    org.jsecurity.session.mgt.SimpleSession var7 = new org.jsecurity.session.mgt.SimpleSession();
    java.util.Date var8 = var7.getLastAccessTime();
    org.jsecurity.session.mgt.eis.MemorySessionDAO var9 = new org.jsecurity.session.mgt.eis.MemorySessionDAO();
    org.jsecurity.cache.Cache var10 = var9.getActiveSessionsCache();
    org.jsecurity.cache.CacheManager var11 = var9.getCacheManager();
    org.jsecurity.cache.HashtableCacheManager var12 = new org.jsecurity.cache.HashtableCacheManager();
    org.jsecurity.cache.Cache var14 = var12.getCache("\u0000\u0000");
    var9.setActiveSessionsCache(var14);
    java.io.InputStream var17 = org.jsecurity.util.ClassUtils.getResourceAsStream("");
    java.lang.Object[] var18 = new java.lang.Object[] { var17};
    java.util.List var19 = org.jsecurity.util.CollectionUtils.asList(var18);
    org.jsecurity.authc.pam.ModularRealmAuthenticator var20 = new org.jsecurity.authc.pam.ModularRealmAuthenticator(var19);
    org.jsecurity.authc.pam.AllSuccessfulModularAuthenticationStrategy var21 = new org.jsecurity.authc.pam.AllSuccessfulModularAuthenticationStrategy();
    var20.setModularAuthenticationStrategy((org.jsecurity.authc.pam.ModularAuthenticationStrategy)var21);
    org.jsecurity.authz.SimpleAuthorizationInfo var23 = new org.jsecurity.authz.SimpleAuthorizationInfo();
    var23.addStringPermission("hi!");
    java.io.InputStream var27 = org.jsecurity.util.ClassUtils.getResourceAsStream("");
    java.lang.Object[] var28 = new java.lang.Object[] { var27};
    java.util.List var29 = org.jsecurity.util.CollectionUtils.asList(var28);
    var23.addRoles((java.util.Collection)var29);
    var20.setAuthenticationListeners((java.util.Collection)var29);
    org.jsecurity.realm.activedirectory.ActiveDirectoryRealm var32 = new org.jsecurity.realm.activedirectory.ActiveDirectoryRealm();
    var32.setPrincipalSuffix("");
    var20.setRealm((org.jsecurity.realm.Realm)var32);
    org.jsecurity.cache.HashtableCacheManager var36 = new org.jsecurity.cache.HashtableCacheManager();
    org.jsecurity.cache.Cache var38 = var36.getCache("\u0000\u0000");
    var32.setAuthorizationCache(var38);
    var9.setActiveSessionsCache(var38);
    org.jsecurity.session.mgt.SimpleSession var41 = new org.jsecurity.session.mgt.SimpleSession();
    java.io.Serializable var42 = var9.create((org.jsecurity.session.Session)var41);
    java.io.Serializable var43 = var41.getId();
    org.jsecurity.session.mgt.SimpleSession var44 = new org.jsecurity.session.mgt.SimpleSession();
    var44.touch();
    var44.validate();
    org.jsecurity.session.mgt.SimpleSession var47 = new org.jsecurity.session.mgt.SimpleSession();
    var47.setTimeout((-1L));
    org.jsecurity.session.mgt.SimpleSession var50 = new org.jsecurity.session.mgt.SimpleSession();
    java.util.Date var51 = var50.getLastAccessTime();
    var47.setLastAccessTime(var51);
    org.jsecurity.session.mgt.SimpleSession var53 = new org.jsecurity.session.mgt.SimpleSession();
    java.util.Date var54 = var53.getLastAccessTime();
    var47.setStopTimestamp(var54);
    var44.setLastAccessTime(var54);
    var41.setStartTimestamp(var54);
    var7.setLastAccessTime(var54);
    var0.setLastAccessTime(var54);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var4);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var6);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var8);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var10);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var11);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var14);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var17);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var18);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var19);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var27);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var28);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var29);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var38);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var42 + "' != '" + "02420a07-edce-4806-ad5f-41df665e31ec"+ "'", var42.equals("02420a07-edce-4806-ad5f-41df665e31ec"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var43 + "' != '" + "02420a07-edce-4806-ad5f-41df665e31ec"+ "'", var43.equals("02420a07-edce-4806-ad5f-41df665e31ec"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var51);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var54);

  }

  public void test314() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest7.test314");


    org.jsecurity.authc.UsernamePasswordToken var2 = new org.jsecurity.authc.UsernamePasswordToken("classpath:org/jsecurity/cache/ehcache/ehcache.xml", "org.jsecurity.authc.UsernamePasswordToken - hi!, rememberMe=false");
    org.jsecurity.authc.pam.AllSuccessfulModularAuthenticationStrategy var3 = new org.jsecurity.authc.pam.AllSuccessfulModularAuthenticationStrategy();
    char[] var5 = new char[] { };
    org.jsecurity.authc.UsernamePasswordToken var7 = new org.jsecurity.authc.UsernamePasswordToken("hi!", var5, true);
    org.jsecurity.authc.SimpleAccount var8 = new org.jsecurity.authc.SimpleAccount();
    var8.setCredentialsExpired(false);
    boolean var11 = var8.isLocked();
    org.jsecurity.authc.AuthenticationInfo var12 = var3.afterAllAttempts((org.jsecurity.authc.AuthenticationToken)var7, (org.jsecurity.authc.AuthenticationInfo)var8);
    char[] var15 = new char[] { };
    org.jsecurity.authc.UsernamePasswordToken var17 = new org.jsecurity.authc.UsernamePasswordToken("hi!", var15, true);
    org.jsecurity.authc.UsernamePasswordToken var18 = new org.jsecurity.authc.UsernamePasswordToken("\u0000\u0000", var15);
    java.lang.Object var19 = var18.getPrincipal();
    org.jsecurity.authc.SimpleAccount var20 = new org.jsecurity.authc.SimpleAccount();
    var20.setCredentialsExpired(false);
    var20.setCredentialsExpired(false);
    boolean var25 = var20.isCredentialsExpired();
    org.jsecurity.authc.AuthenticationInfo var26 = var3.afterAllAttempts((org.jsecurity.authc.AuthenticationToken)var18, (org.jsecurity.authc.AuthenticationInfo)var20);
    byte[] var30 = new byte[] { (byte)100, (byte)100, (byte)(-1)};
    java.lang.String var31 = org.jsecurity.codec.CodecSupport.toString(var30);
    byte[] var32 = org.jsecurity.codec.Base64.encode(var30);
    char[] var33 = org.jsecurity.codec.CodecSupport.toChars(var32);
    var18.setPassword(var33);
    char[] var35 = var18.getPassword();
    var2.setPassword(var35);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var5);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var11 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var12);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var15);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var19 + "' != '" + "\u0000\u0000"+ "'", var19.equals("\u0000\u0000"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var25 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var26);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var30);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var31 + "' != '" + "dd\uFFFD"+ "'", var31.equals("dd\uFFFD"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var32);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var33);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var35);

  }

  public void test315() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest7.test315");


    org.jsecurity.realm.activedirectory.ActiveDirectoryRealm var0 = new org.jsecurity.realm.activedirectory.ActiveDirectoryRealm();
    var0.init();
    var0.init();
    org.jsecurity.config.ReflectionBuilder var3 = new org.jsecurity.config.ReflectionBuilder();
    org.jsecurity.config.ReflectionBuilder var4 = new org.jsecurity.config.ReflectionBuilder();
    org.jsecurity.io.IniResource var5 = new org.jsecurity.io.IniResource();
    var5.setCharsetName("org.jsecurity.authz.UnauthorizedException: org.jsecurity.session.ExpiredSessionException: ");
    java.util.Map var8 = var5.getSections();
    java.util.Map var9 = var4.buildObjects(var8);
    org.jsecurity.config.ReflectionBuilder var10 = new org.jsecurity.config.ReflectionBuilder();
    org.jsecurity.io.IniResource var11 = new org.jsecurity.io.IniResource();
    var11.setCharsetName("org.jsecurity.authz.UnauthorizedException: org.jsecurity.session.ExpiredSessionException: ");
    java.util.Map var14 = var11.getSections();
    java.util.Map var15 = var10.buildObjects(var14);
    java.util.Map var16 = var4.buildObjects(var15);
    java.util.Map var17 = var3.buildObjects(var16);
    var0.setGroupRolesMap(var17);
    org.jsecurity.authz.permission.PermissionResolver var19 = var0.getPermissionResolver();
    var0.setUrl("522d5bb3-3b66-47fd-9278-13facfcab88b");
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var8);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var9);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var14);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var15);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var16);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var17);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var19);

  }

  public void test316() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest7.test316");


    org.jsecurity.authz.AuthorizationException var1 = new org.jsecurity.authz.AuthorizationException();
    org.jsecurity.authz.SimpleRole var2 = new org.jsecurity.authz.SimpleRole();
    org.jsecurity.authz.SimpleAuthorizationInfo var3 = new org.jsecurity.authz.SimpleAuthorizationInfo();
    var3.addRole("a2b823b1e72eae2b727289df8a00a89df8a0bab6ad8a89c4c5c7a9b62a270000");
    org.jsecurity.session.UnknownSessionException var10 = new org.jsecurity.session.UnknownSessionException("dd\uFFFD", (java.io.Serializable)100.0f);
    org.jsecurity.subject.SubjectException var11 = new org.jsecurity.subject.SubjectException("dd\uFFFD", (java.lang.Throwable)var10);
    org.jsecurity.io.SerializationException var12 = new org.jsecurity.io.SerializationException("", (java.lang.Throwable)var11);
    java.lang.Throwable[] var13 = var11.getSuppressed();
    java.util.Set var14 = org.jsecurity.util.CollectionUtils.asSet((java.lang.Object[])var13);
    var3.addRoles((java.util.Collection)var14);
    var2.addAll((java.util.Collection)var14);
    org.jsecurity.authz.SimpleRole var17 = new org.jsecurity.authz.SimpleRole();
    org.jsecurity.authz.SimpleAuthorizationInfo var18 = new org.jsecurity.authz.SimpleAuthorizationInfo();
    var18.addRole("a2b823b1e72eae2b727289df8a00a89df8a0bab6ad8a89c4c5c7a9b62a270000");
    org.jsecurity.session.UnknownSessionException var25 = new org.jsecurity.session.UnknownSessionException("dd\uFFFD", (java.io.Serializable)100.0f);
    org.jsecurity.subject.SubjectException var26 = new org.jsecurity.subject.SubjectException("dd\uFFFD", (java.lang.Throwable)var25);
    org.jsecurity.io.SerializationException var27 = new org.jsecurity.io.SerializationException("", (java.lang.Throwable)var26);
    java.lang.Throwable[] var28 = var26.getSuppressed();
    java.util.Set var29 = org.jsecurity.util.CollectionUtils.asSet((java.lang.Object[])var28);
    var18.addRoles((java.util.Collection)var29);
    var17.addAll((java.util.Collection)var29);
    java.lang.String var32 = var17.getName();
    org.jsecurity.authz.permission.WildcardPermission var35 = new org.jsecurity.authz.permission.WildcardPermission("hi!", false);
    var17.add((org.jsecurity.authz.Permission)var35);
    var2.add((org.jsecurity.authz.Permission)var35);
    org.jsecurity.authz.SimpleAuthorizationInfo var39 = new org.jsecurity.authz.SimpleAuthorizationInfo();
    org.jsecurity.session.UnknownSessionException var44 = new org.jsecurity.session.UnknownSessionException("dd\uFFFD", (java.io.Serializable)100.0f);
    org.jsecurity.subject.SubjectException var45 = new org.jsecurity.subject.SubjectException("dd\uFFFD", (java.lang.Throwable)var44);
    org.jsecurity.io.SerializationException var46 = new org.jsecurity.io.SerializationException("", (java.lang.Throwable)var45);
    java.lang.Throwable[] var47 = var45.getSuppressed();
    java.util.Set var48 = org.jsecurity.util.CollectionUtils.asSet((java.lang.Object[])var47);
    var39.setStringPermissions(var48);
    org.jsecurity.authz.SimpleRole var50 = new org.jsecurity.authz.SimpleRole("\u0000\u0000", var48);
    var2.setPermissions(var48);
    org.jsecurity.session.UnknownSessionException var52 = new org.jsecurity.session.UnknownSessionException("f4578b3a-1e8a-4019-b058-920d7e36ff9e", (java.lang.Throwable)var1, (java.io.Serializable)var2);
    java.util.Set var53 = var2.getPermissions();
    org.jsecurity.authz.SimpleAuthorizationInfo var54 = new org.jsecurity.authz.SimpleAuthorizationInfo(var53);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var13);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var14);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var28);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var29);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var32);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var47);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var48);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var53);

  }

  public void test317() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest7.test317");


    org.jsecurity.io.DefaultSerializer var0 = new org.jsecurity.io.DefaultSerializer();
    org.jsecurity.io.IniResource var1 = new org.jsecurity.io.IniResource();
    java.util.Map var2 = var1.getSections();
    java.lang.String var3 = var1.getCharsetName();
    org.jsecurity.config.ReflectionBuilder var4 = new org.jsecurity.config.ReflectionBuilder();
    org.jsecurity.io.IniResource var5 = new org.jsecurity.io.IniResource();
    java.util.Map var6 = var5.getSections();
    var4.setObjects(var6);
    org.jsecurity.io.IniResource var8 = new org.jsecurity.io.IniResource();
    java.util.Map var9 = var8.getSections();
    java.util.Map var10 = var4.buildObjects(var9);
    var1.setSections(var10);
    org.jsecurity.realm.activedirectory.ActiveDirectoryRealm var12 = new org.jsecurity.realm.activedirectory.ActiveDirectoryRealm();
    org.jsecurity.authc.credential.Sha256CredentialsMatcher var13 = new org.jsecurity.authc.credential.Sha256CredentialsMatcher();
    var12.setCredentialsMatcher((org.jsecurity.authc.credential.CredentialsMatcher)var13);
    java.lang.String var15 = var12.getAuthorizationCacheName();
    var12.setUrl("hi!");
    org.jsecurity.realm.ldap.DefaultLdapContextFactory var18 = new org.jsecurity.realm.ldap.DefaultLdapContextFactory();
    var12.setLdapContextFactory((org.jsecurity.realm.ldap.LdapContextFactory)var18);
    org.jsecurity.config.ReflectionBuilder var20 = new org.jsecurity.config.ReflectionBuilder();
    org.jsecurity.io.IniResource var21 = new org.jsecurity.io.IniResource();
    var21.setCharsetName("org.jsecurity.authz.UnauthorizedException: org.jsecurity.session.ExpiredSessionException: ");
    java.util.Map var24 = var21.getSections();
    java.util.Map var25 = var20.buildObjects(var24);
    org.jsecurity.config.ReflectionBuilder var26 = new org.jsecurity.config.ReflectionBuilder();
    org.jsecurity.io.IniResource var27 = new org.jsecurity.io.IniResource();
    var27.setCharsetName("org.jsecurity.authz.UnauthorizedException: org.jsecurity.session.ExpiredSessionException: ");
    java.util.Map var30 = var27.getSections();
    java.util.Map var31 = var26.buildObjects(var30);
    java.util.Map var32 = var20.buildObjects(var31);
    java.util.Map var33 = var20.getObjects();
    var18.setAdditionalEnvironment(var33);
    org.jsecurity.config.ReflectionBuilder var35 = new org.jsecurity.config.ReflectionBuilder();
    org.jsecurity.io.IniResource var36 = new org.jsecurity.io.IniResource();
    java.util.Map var37 = var36.getSections();
    var35.setObjects(var37);
    org.jsecurity.realm.activedirectory.ActiveDirectoryRealm var39 = new org.jsecurity.realm.activedirectory.ActiveDirectoryRealm();
    var39.init();
    var39.init();
    org.jsecurity.config.ReflectionBuilder var42 = new org.jsecurity.config.ReflectionBuilder();
    org.jsecurity.config.ReflectionBuilder var43 = new org.jsecurity.config.ReflectionBuilder();
    org.jsecurity.io.IniResource var44 = new org.jsecurity.io.IniResource();
    var44.setCharsetName("org.jsecurity.authz.UnauthorizedException: org.jsecurity.session.ExpiredSessionException: ");
    java.util.Map var47 = var44.getSections();
    java.util.Map var48 = var43.buildObjects(var47);
    org.jsecurity.config.ReflectionBuilder var49 = new org.jsecurity.config.ReflectionBuilder();
    org.jsecurity.io.IniResource var50 = new org.jsecurity.io.IniResource();
    var50.setCharsetName("org.jsecurity.authz.UnauthorizedException: org.jsecurity.session.ExpiredSessionException: ");
    java.util.Map var53 = var50.getSections();
    java.util.Map var54 = var49.buildObjects(var53);
    java.util.Map var55 = var43.buildObjects(var54);
    java.util.Map var56 = var42.buildObjects(var55);
    var39.setGroupRolesMap(var56);
    var35.setObjects(var56);
    org.jsecurity.config.ReflectionBuilder var59 = new org.jsecurity.config.ReflectionBuilder(var56);
    var18.setAdditionalEnvironment(var56);
    var1.setSections(var56);
    byte[] var62 = var0.serialize((java.lang.Object)var1);
    byte[] var63 = org.jsecurity.codec.Base64.encode(var62);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var2);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var3);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var6);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var9);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var10);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var15);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var24);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var25);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var30);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var31);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var32);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var33);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var37);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var47);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var48);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var53);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var54);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var55);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var56);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var62);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var63);

  }

  public void test318() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest7.test318");


    org.jsecurity.mgt.DefaultSecurityManager var0 = new org.jsecurity.mgt.DefaultSecurityManager();
    java.io.InputStream var2 = org.jsecurity.util.ClassUtils.getResourceAsStream("");
    java.lang.Object[] var3 = new java.lang.Object[] { var2};
    java.util.List var4 = org.jsecurity.util.CollectionUtils.asList(var3);
    org.jsecurity.authc.pam.ModularRealmAuthenticator var5 = new org.jsecurity.authc.pam.ModularRealmAuthenticator(var4);
    org.jsecurity.authc.pam.AllSuccessfulModularAuthenticationStrategy var6 = new org.jsecurity.authc.pam.AllSuccessfulModularAuthenticationStrategy();
    var5.setModularAuthenticationStrategy((org.jsecurity.authc.pam.ModularAuthenticationStrategy)var6);
    org.jsecurity.authz.SimpleAuthorizationInfo var8 = new org.jsecurity.authz.SimpleAuthorizationInfo();
    var8.addStringPermission("hi!");
    java.io.InputStream var12 = org.jsecurity.util.ClassUtils.getResourceAsStream("");
    java.lang.Object[] var13 = new java.lang.Object[] { var12};
    java.util.List var14 = org.jsecurity.util.CollectionUtils.asList(var13);
    var8.addRoles((java.util.Collection)var14);
    var5.setAuthenticationListeners((java.util.Collection)var14);
    var0.setSessionListeners((java.util.Collection)var14);
    org.jsecurity.authc.pam.ModularRealmAuthenticator var18 = new org.jsecurity.authc.pam.ModularRealmAuthenticator();
    org.jsecurity.authz.permission.InvalidPermissionStringException var21 = new org.jsecurity.authz.permission.InvalidPermissionStringException("", "dd\uFFFD");
    org.jsecurity.JSecurityException var23 = new org.jsecurity.JSecurityException("");
    org.jsecurity.authc.SimpleAuthenticationInfo var25 = new org.jsecurity.authc.SimpleAuthenticationInfo((java.lang.Object)var21, (java.lang.Object)"", "org.jsecurity.authz.UnauthorizedException: org.jsecurity.session.ExpiredSessionException: ");
    org.jsecurity.subject.PrincipalCollection var26 = var25.getPrincipals();
    var18.onLogout(var26);
    var0.setAuthenticator((org.jsecurity.authc.Authenticator)var18);
    org.jsecurity.codec.CodecException var31 = new org.jsecurity.codec.CodecException("dd\uFFFD");
    org.jsecurity.authc.ConcurrentAccessException var32 = new org.jsecurity.authc.ConcurrentAccessException("org.jsecurity.authz.UnauthorizedException: org.jsecurity.session.ExpiredSessionException: ", (java.lang.Throwable)var31);
    org.jsecurity.subject.SimplePrincipalCollection var34 = new org.jsecurity.subject.SimplePrincipalCollection((java.lang.Object)var31, "");
    org.jsecurity.authc.pam.FirstSuccessfulAuthenticationStrategy var35 = new org.jsecurity.authc.pam.FirstSuccessfulAuthenticationStrategy();
    org.jsecurity.authz.UnauthorizedException var37 = new org.jsecurity.authz.UnauthorizedException("org.jsecurity.config.ConfigurationException: dd\uFFFD");
    java.lang.Throwable[] var38 = var37.getSuppressed();
    java.util.List var39 = org.jsecurity.util.CollectionUtils.asList((java.lang.Object[])var38);
    org.jsecurity.authc.UsernamePasswordToken var40 = new org.jsecurity.authc.UsernamePasswordToken();
    java.lang.String var41 = var40.getUsername();
    java.net.InetAddress var42 = var40.getInetAddress();
    org.jsecurity.authc.AuthenticationInfo var43 = var35.beforeAllAttempts((java.util.Collection)var39, (org.jsecurity.authc.AuthenticationToken)var40);
    org.jsecurity.session.UnknownSessionException var48 = new org.jsecurity.session.UnknownSessionException("dd\uFFFD", (java.io.Serializable)100.0f);
    org.jsecurity.subject.SubjectException var49 = new org.jsecurity.subject.SubjectException("dd\uFFFD", (java.lang.Throwable)var48);
    org.jsecurity.io.SerializationException var50 = new org.jsecurity.io.SerializationException("", (java.lang.Throwable)var49);
    java.lang.Throwable[] var51 = var49.getSuppressed();
    java.util.Set var52 = org.jsecurity.util.CollectionUtils.asSet((java.lang.Object[])var51);
    org.jsecurity.authc.SimpleAccount var53 = new org.jsecurity.authc.SimpleAccount((org.jsecurity.subject.PrincipalCollection)var34, (java.lang.Object)var39, var52);
    java.io.InputStream var55 = org.jsecurity.util.ClassUtils.getResourceAsStream("");
    java.lang.Object[] var56 = new java.lang.Object[] { var55};
    java.util.List var57 = org.jsecurity.util.CollectionUtils.asList(var56);
    org.jsecurity.authc.pam.ModularRealmAuthenticator var58 = new org.jsecurity.authc.pam.ModularRealmAuthenticator(var57);
    org.jsecurity.subject.SimplePrincipalCollection var60 = new org.jsecurity.subject.SimplePrincipalCollection((java.util.Collection)var57, "org.jsecurity.authz.UnauthorizedException: org.jsecurity.session.ExpiredSessionException: ");
    org.jsecurity.io.ResourceException var64 = new org.jsecurity.io.ResourceException("hi!");
    org.jsecurity.authc.UnknownAccountException var65 = new org.jsecurity.authc.UnknownAccountException((java.lang.Throwable)var64);
    org.jsecurity.session.StoppedSessionException var66 = new org.jsecurity.session.StoppedSessionException("dd\uFFFD", (java.io.Serializable)var64);
    org.jsecurity.session.UnknownSessionException var67 = new org.jsecurity.session.UnknownSessionException("org.jsecurity.authz.UnauthorizedException: org.jsecurity.session.ExpiredSessionException: ", (java.lang.Throwable)var64);
    boolean var68 = var60.equals((java.lang.Object)var64);
    var34.addAll((org.jsecurity.subject.PrincipalCollection)var60);
    org.jsecurity.session.UnknownSessionException var74 = new org.jsecurity.session.UnknownSessionException("dd\uFFFD", (java.io.Serializable)100.0f);
    org.jsecurity.subject.SubjectException var75 = new org.jsecurity.subject.SubjectException("dd\uFFFD", (java.lang.Throwable)var74);
    org.jsecurity.io.SerializationException var76 = new org.jsecurity.io.SerializationException("", (java.lang.Throwable)var75);
    java.lang.Throwable[] var77 = var75.getSuppressed();
    java.util.List var78 = org.jsecurity.util.CollectionUtils.asList((java.lang.Object[])var77);
    boolean var79 = var0.isPermittedAll((org.jsecurity.subject.PrincipalCollection)var34, (java.util.Collection)var78);
    org.jsecurity.subject.DelegatingSubject var80 = new org.jsecurity.subject.DelegatingSubject((org.jsecurity.mgt.SecurityManager)var0);
    java.lang.String[] var83 = org.jsecurity.util.StringUtils.tokenizeToStringArray("hi!", "");
    boolean[] var84 = var80.isPermitted(var83);
    org.jsecurity.authz.SimpleRole var86 = new org.jsecurity.authz.SimpleRole();
    org.jsecurity.authz.permission.WildcardPermission var89 = new org.jsecurity.authz.permission.WildcardPermission("hi!", false);
    boolean var90 = var86.isPermitted((org.jsecurity.authz.Permission)var89);
    org.jsecurity.session.InvalidSessionException var91 = new org.jsecurity.session.InvalidSessionException("org.jsecurity.config.ConfigurationException: dd\uFFFD", (java.io.Serializable)var89);
    boolean var92 = var80.isPermitted((org.jsecurity.authz.Permission)var89);
    boolean var94 = var80.isPermitted("0d520eae-a37c-45e1-989e-188a7823388d");
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var2);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var3);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var4);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var12);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var13);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var14);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var26);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var38);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var39);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var41);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var42);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var43);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var51);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var52);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var55);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var56);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var57);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var68 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var77);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var78);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var79 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var83);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var84);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var90 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var92 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var94 == false);

  }

  public void test319() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest7.test319");


    org.jsecurity.util.UnavailableConstructorException var1 = new org.jsecurity.util.UnavailableConstructorException("d8d550ee-3a8c-48f0-8061-1d82c827f505");

  }

  public void test320() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest7.test320");


    org.jsecurity.realm.activedirectory.ActiveDirectoryRealm var0 = new org.jsecurity.realm.activedirectory.ActiveDirectoryRealm();
    org.jsecurity.authc.credential.Sha256CredentialsMatcher var1 = new org.jsecurity.authc.credential.Sha256CredentialsMatcher();
    var0.setCredentialsMatcher((org.jsecurity.authc.credential.CredentialsMatcher)var1);
    var0.initAuthorizationCache();
    org.jsecurity.authc.credential.Sha512CredentialsMatcher var4 = new org.jsecurity.authc.credential.Sha512CredentialsMatcher();
    var4.setHashIterations(1);
    var0.setCredentialsMatcher((org.jsecurity.authc.credential.CredentialsMatcher)var4);
    boolean var8 = var4.isStoredCredentialsHexEncoded();
    var4.setHashSalted(false);
    int var11 = var4.getHashIterations();
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var8 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var11 == 1);

  }

  public void test321() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest7.test321");


    java.io.InputStream var1 = org.jsecurity.util.ClassUtils.getResourceAsStream("");
    java.lang.Object[] var2 = new java.lang.Object[] { var1};
    java.util.List var3 = org.jsecurity.util.CollectionUtils.asList(var2);
    org.jsecurity.authc.pam.ModularRealmAuthenticator var4 = new org.jsecurity.authc.pam.ModularRealmAuthenticator(var3);
    org.jsecurity.authc.pam.AllSuccessfulModularAuthenticationStrategy var5 = new org.jsecurity.authc.pam.AllSuccessfulModularAuthenticationStrategy();
    var4.setModularAuthenticationStrategy((org.jsecurity.authc.pam.ModularAuthenticationStrategy)var5);
    org.jsecurity.realm.text.PropertiesRealm var7 = new org.jsecurity.realm.text.PropertiesRealm();
    var7.setReloadIntervalSeconds(10);
    char[] var13 = new char[] { ' ', ' '};
    org.jsecurity.authc.UsernamePasswordToken var14 = new org.jsecurity.authc.UsernamePasswordToken("hi!", var13);
    org.jsecurity.authz.SimpleAuthorizingAccount var15 = new org.jsecurity.authz.SimpleAuthorizingAccount();
    org.jsecurity.authz.SimpleAuthorizationInfo var16 = new org.jsecurity.authz.SimpleAuthorizationInfo();
    var16.addRole("a2b823b1e72eae2b727289df8a00a89df8a0bab6ad8a89c4c5c7a9b62a270000");
    org.jsecurity.authz.SimpleAuthorizationInfo var19 = new org.jsecurity.authz.SimpleAuthorizationInfo();
    var19.addRole("a2b823b1e72eae2b727289df8a00a89df8a0bab6ad8a89c4c5c7a9b62a270000");
    org.jsecurity.session.UnknownSessionException var26 = new org.jsecurity.session.UnknownSessionException("dd\uFFFD", (java.io.Serializable)100.0f);
    org.jsecurity.subject.SubjectException var27 = new org.jsecurity.subject.SubjectException("dd\uFFFD", (java.lang.Throwable)var26);
    org.jsecurity.io.SerializationException var28 = new org.jsecurity.io.SerializationException("", (java.lang.Throwable)var27);
    java.lang.Throwable[] var29 = var27.getSuppressed();
    java.util.Set var30 = org.jsecurity.util.CollectionUtils.asSet((java.lang.Object[])var29);
    var19.addRoles((java.util.Collection)var30);
    var16.setObjectPermissions(var30);
    var15.setSimpleRoles(var30);
    boolean var34 = var15.isCredentialsExpired();
    org.jsecurity.authc.AuthenticationInfo var35 = var5.beforeAttempt((org.jsecurity.realm.Realm)var7, (org.jsecurity.authc.AuthenticationToken)var14, (org.jsecurity.authc.AuthenticationInfo)var15);
    var14.setRememberMe(false);
    org.jsecurity.cache.HashtableCache var39 = new org.jsecurity.cache.HashtableCache("orgjsecurityauthcCredentialsException783ccd3148a842dd890fdf885a7baafAA==");
    int var40 = var39.size();
    org.jsecurity.session.UnknownSessionException var45 = new org.jsecurity.session.UnknownSessionException("dd\uFFFD", (java.io.Serializable)100.0f);
    org.jsecurity.subject.SubjectException var46 = new org.jsecurity.subject.SubjectException("dd\uFFFD", (java.lang.Throwable)var45);
    org.jsecurity.authc.AccountException var47 = new org.jsecurity.authc.AccountException("hi!", (java.lang.Throwable)var46);
    org.jsecurity.session.UnknownSessionException var48 = new org.jsecurity.session.UnknownSessionException((java.lang.Throwable)var46);
    org.jsecurity.codec.CodecException var49 = new org.jsecurity.codec.CodecException((java.lang.Throwable)var46);
    org.jsecurity.config.UnresolveableReferenceException var50 = new org.jsecurity.config.UnresolveableReferenceException((java.lang.Throwable)var46);
    char[] var54 = new char[] { ' ', ' '};
    org.jsecurity.authc.UsernamePasswordToken var55 = new org.jsecurity.authc.UsernamePasswordToken("hi!", var54);
    char[] var59 = new char[] { '4', '#'};
    org.jsecurity.authc.UsernamePasswordToken var60 = new org.jsecurity.authc.UsernamePasswordToken("\u0000\u0000", var59);
    var55.setPassword(var59);
    var39.put((java.lang.Object)var46, (java.lang.Object)var59);
    var14.setPassword(var59);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var1);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var2);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var3);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var13);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var29);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var30);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var34 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var35);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var40 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var54);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var59);

  }

  public void test322() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest7.test322");


    org.jsecurity.authz.permission.InvalidPermissionStringException var4 = new org.jsecurity.authz.permission.InvalidPermissionStringException("7aaa0eff-7052-4953-955a-cd6cddd8c21c", "ff1bb54d-80f9-4308-a260-ff3ddf1355e9");
    org.jsecurity.authc.LockedAccountException var5 = new org.jsecurity.authc.LockedAccountException("org.jsecurity.realm.text.PropertiesRealm-282-authorization", (java.lang.Throwable)var4);
    org.jsecurity.authc.ConcurrentAccessException var6 = new org.jsecurity.authc.ConcurrentAccessException("a485effa-cd38-4fdc-94c9-df09d3b46d47", (java.lang.Throwable)var4);

  }

  public void test323() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest7.test323");


    org.jsecurity.session.mgt.SimpleSession var0 = new org.jsecurity.session.mgt.SimpleSession();
    var0.touch();
    var0.validate();
    org.jsecurity.session.mgt.SimpleSession var3 = new org.jsecurity.session.mgt.SimpleSession();
    var3.setTimeout((-1L));
    org.jsecurity.session.mgt.SimpleSession var6 = new org.jsecurity.session.mgt.SimpleSession();
    java.util.Date var7 = var6.getLastAccessTime();
    var3.setLastAccessTime(var7);
    org.jsecurity.session.mgt.SimpleSession var9 = new org.jsecurity.session.mgt.SimpleSession();
    java.util.Date var10 = var9.getLastAccessTime();
    var3.setStopTimestamp(var10);
    var0.setLastAccessTime(var10);
    java.io.Serializable var13 = var0.getId();
    org.jsecurity.authc.ConcurrentAccessException var15 = new org.jsecurity.authc.ConcurrentAccessException("");
    org.jsecurity.authc.pam.UnsupportedTokenException var16 = new org.jsecurity.authc.pam.UnsupportedTokenException();
    var15.addSuppressed((java.lang.Throwable)var16);
    java.lang.Object var18 = var0.removeAttribute((java.lang.Object)var16);
    org.jsecurity.authc.UnknownAccountException var19 = new org.jsecurity.authc.UnknownAccountException((java.lang.Throwable)var16);
    org.jsecurity.authz.UnauthorizedException var20 = new org.jsecurity.authz.UnauthorizedException((java.lang.Throwable)var19);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var7);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var10);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var13);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var18);

  }

  public void test324() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest7.test324");


    org.jsecurity.authc.ConcurrentAccessException var1 = new org.jsecurity.authc.ConcurrentAccessException("");
    org.jsecurity.authc.pam.UnsupportedTokenException var2 = new org.jsecurity.authc.pam.UnsupportedTokenException();
    var1.addSuppressed((java.lang.Throwable)var2);
    org.jsecurity.io.ResourceException var4 = new org.jsecurity.io.ResourceException((java.lang.Throwable)var1);

  }

  public void test325() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest7.test325");


    org.jsecurity.realm.activedirectory.ActiveDirectoryRealm var0 = new org.jsecurity.realm.activedirectory.ActiveDirectoryRealm();
    org.jsecurity.authc.credential.Sha256CredentialsMatcher var1 = new org.jsecurity.authc.credential.Sha256CredentialsMatcher();
    var0.setCredentialsMatcher((org.jsecurity.authc.credential.CredentialsMatcher)var1);
    org.jsecurity.realm.activedirectory.ActiveDirectoryRealm var3 = new org.jsecurity.realm.activedirectory.ActiveDirectoryRealm();
    org.jsecurity.authc.credential.Sha256CredentialsMatcher var4 = new org.jsecurity.authc.credential.Sha256CredentialsMatcher();
    var3.setCredentialsMatcher((org.jsecurity.authc.credential.CredentialsMatcher)var4);
    java.lang.String var6 = var3.getAuthorizationCacheName();
    var3.setUrl("hi!");
    org.jsecurity.realm.ldap.DefaultLdapContextFactory var9 = new org.jsecurity.realm.ldap.DefaultLdapContextFactory();
    var3.setLdapContextFactory((org.jsecurity.realm.ldap.LdapContextFactory)var9);
    var9.setAuthentication("org.jsecurity.authz.UnauthorizedException: org.jsecurity.session.ExpiredSessionException: ");
    var0.setLdapContextFactory((org.jsecurity.realm.ldap.LdapContextFactory)var9);
    var0.setPrincipalSuffix("783ccd31-48a8-42dd-890f-df885a7baaff");
    org.jsecurity.realm.activedirectory.ActiveDirectoryRealm var16 = new org.jsecurity.realm.activedirectory.ActiveDirectoryRealm();
    org.jsecurity.authc.credential.Sha256CredentialsMatcher var17 = new org.jsecurity.authc.credential.Sha256CredentialsMatcher();
    var16.setCredentialsMatcher((org.jsecurity.authc.credential.CredentialsMatcher)var17);
    java.lang.String var19 = var16.getAuthorizationCacheName();
    var16.setUrl("hi!");
    org.jsecurity.realm.ldap.DefaultLdapContextFactory var22 = new org.jsecurity.realm.ldap.DefaultLdapContextFactory();
    var16.setLdapContextFactory((org.jsecurity.realm.ldap.LdapContextFactory)var22);
    org.jsecurity.config.ReflectionBuilder var24 = new org.jsecurity.config.ReflectionBuilder();
    org.jsecurity.io.IniResource var25 = new org.jsecurity.io.IniResource();
    var25.setCharsetName("org.jsecurity.authz.UnauthorizedException: org.jsecurity.session.ExpiredSessionException: ");
    java.util.Map var28 = var25.getSections();
    java.util.Map var29 = var24.buildObjects(var28);
    org.jsecurity.config.ReflectionBuilder var30 = new org.jsecurity.config.ReflectionBuilder();
    org.jsecurity.io.IniResource var31 = new org.jsecurity.io.IniResource();
    var31.setCharsetName("org.jsecurity.authz.UnauthorizedException: org.jsecurity.session.ExpiredSessionException: ");
    java.util.Map var34 = var31.getSections();
    java.util.Map var35 = var30.buildObjects(var34);
    java.util.Map var36 = var24.buildObjects(var35);
    java.util.Map var37 = var24.getObjects();
    var22.setAdditionalEnvironment(var37);
    var0.setLdapContextFactory((org.jsecurity.realm.ldap.LdapContextFactory)var22);
    org.jsecurity.mgt.DefaultSecurityManager var40 = new org.jsecurity.mgt.DefaultSecurityManager((org.jsecurity.realm.Realm)var0);
    var0.setSystemUsername("e00f87fa-0543-46d5-b69b-14e41add033e");
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var6);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var19);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var28);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var29);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var34);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var35);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var36);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var37);

  }

  public void test326() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest7.test326");


    org.jsecurity.authc.credential.Sha512CredentialsMatcher var0 = new org.jsecurity.authc.credential.Sha512CredentialsMatcher();
    var0.setHashIterations(1);
    var0.setStoredCredentialsHexEncoded(false);
    boolean var5 = var0.isHashSalted();
    boolean var6 = var0.isHashSalted();
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var5 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var6 == false);

  }

  public void test327() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest7.test327");


    org.jsecurity.authz.ModularRealmAuthorizer var0 = new org.jsecurity.authz.ModularRealmAuthorizer();
    java.io.InputStream var2 = org.jsecurity.util.ClassUtils.getResourceAsStream("");
    java.lang.Object[] var3 = new java.lang.Object[] { var2};
    java.util.List var4 = org.jsecurity.util.CollectionUtils.asList(var3);
    org.jsecurity.authc.pam.ModularRealmAuthenticator var5 = new org.jsecurity.authc.pam.ModularRealmAuthenticator(var4);
    org.jsecurity.subject.SimplePrincipalCollection var7 = new org.jsecurity.subject.SimplePrincipalCollection((java.util.Collection)var4, "org.jsecurity.authz.UnauthorizedException: org.jsecurity.session.ExpiredSessionException: ");
    org.jsecurity.session.UnknownSessionException var12 = new org.jsecurity.session.UnknownSessionException("dd\uFFFD", (java.io.Serializable)100.0f);
    org.jsecurity.session.SessionException var14 = new org.jsecurity.session.SessionException("dd\uFFFD", (java.lang.Throwable)var12, (java.io.Serializable)0);
    org.jsecurity.session.SessionException var15 = new org.jsecurity.session.SessionException("dd\uFFFD", (java.lang.Throwable)var12);
    var7.add((java.lang.Object)var15, "org.jsecurity.config.ConfigurationException: dd\uFFFD");
    java.util.Set var18 = var7.asSet();
    var0.setRealms((java.util.Collection)var18);
    org.jsecurity.authz.UnauthorizedException var21 = new org.jsecurity.authz.UnauthorizedException("org.jsecurity.config.ConfigurationException: dd\uFFFD");
    java.lang.Throwable[] var22 = var21.getSuppressed();
    java.util.Set var23 = org.jsecurity.util.CollectionUtils.asSet((java.lang.Object[])var22);
    var0.setRealms((java.util.Collection)var23);
    java.util.Collection var25 = var0.getRealms();
    java.util.Collection var26 = var0.getRealms();
    java.io.InputStream var28 = org.jsecurity.util.ClassUtils.getResourceAsStream("");
    java.lang.Object[] var29 = new java.lang.Object[] { var28};
    java.util.List var30 = org.jsecurity.util.CollectionUtils.asList(var29);
    org.jsecurity.authc.pam.ModularRealmAuthenticator var31 = new org.jsecurity.authc.pam.ModularRealmAuthenticator(var30);
    org.jsecurity.subject.SimplePrincipalCollection var33 = new org.jsecurity.subject.SimplePrincipalCollection((java.util.Collection)var30, "org.jsecurity.authz.UnauthorizedException: org.jsecurity.session.ExpiredSessionException: ");
    java.util.Set var34 = var33.getRealmNames();
    org.jsecurity.authz.UnauthorizedException var36 = new org.jsecurity.authz.UnauthorizedException("org.jsecurity.config.ConfigurationException: dd\uFFFD");
    java.lang.Throwable[] var37 = var36.getSuppressed();
    java.util.List var38 = org.jsecurity.util.CollectionUtils.asList((java.lang.Object[])var37);
    boolean[] var39 = var0.hasRoles((org.jsecurity.subject.PrincipalCollection)var33, var38);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var2);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var3);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var4);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var18);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var22);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var23);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var25);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var26);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var28);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var29);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var30);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var34);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var37);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var38);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var39);

  }

  public void test328() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest7.test328");


    org.jsecurity.authz.permission.InvalidPermissionStringException var3 = new org.jsecurity.authz.permission.InvalidPermissionStringException("7aaa0eff-7052-4953-955a-cd6cddd8c21c", "ff1bb54d-80f9-4308-a260-ff3ddf1355e9");
    org.jsecurity.cache.CacheException var4 = new org.jsecurity.cache.CacheException("b18f10c6-edfc-4d71-956f-238dd07f8bd6", (java.lang.Throwable)var3);
    java.lang.String var5 = var3.getPermissionString();
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var5 + "' != '" + "ff1bb54d-80f9-4308-a260-ff3ddf1355e9"+ "'", var5.equals("ff1bb54d-80f9-4308-a260-ff3ddf1355e9"));

  }

  public void test329() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest7.test329");


    org.jsecurity.realm.activedirectory.ActiveDirectoryRealm var0 = new org.jsecurity.realm.activedirectory.ActiveDirectoryRealm();
    var0.init();
    var0.setSystemPassword("dd\uFFFD");
    org.jsecurity.authz.aop.GuestAnnotationHandler var4 = new org.jsecurity.authz.aop.GuestAnnotationHandler();
    java.lang.Class var5 = var4.getAnnotationClass();
    var0.setAuthenticationTokenClass(var5);
    org.jsecurity.mgt.DefaultSecurityManager var7 = new org.jsecurity.mgt.DefaultSecurityManager((org.jsecurity.realm.Realm)var0);
    org.jsecurity.cache.CacheManager var8 = var0.getCacheManager();
    org.jsecurity.realm.text.PropertiesRealm var9 = new org.jsecurity.realm.text.PropertiesRealm(var8);
    var9.setResourcePath("?\u0238\u0018@\uFFFD");
    java.lang.String var12 = var9.getAuthorizationCacheName();
    org.jsecurity.mgt.DefaultSecurityManager var13 = new org.jsecurity.mgt.DefaultSecurityManager((org.jsecurity.realm.Realm)var9);
    org.jsecurity.crypto.BlowfishCipher var14 = new org.jsecurity.crypto.BlowfishCipher();
    byte[] var18 = new byte[] { (byte)100, (byte)100, (byte)(-1)};
    java.lang.String var19 = org.jsecurity.codec.CodecSupport.toString(var18);
    byte[] var21 = org.jsecurity.codec.Base64.decode("hi!");
    byte[] var22 = var14.encrypt(var18, var21);
    org.jsecurity.crypto.BlowfishCipher var23 = new org.jsecurity.crypto.BlowfishCipher();
    byte[] var27 = new byte[] { (byte)100, (byte)100, (byte)(-1)};
    java.lang.String var28 = org.jsecurity.codec.CodecSupport.toString(var27);
    byte[] var30 = org.jsecurity.codec.Base64.decode("hi!");
    byte[] var31 = var23.encrypt(var27, var30);
    org.jsecurity.crypto.BlowfishCipher var32 = new org.jsecurity.crypto.BlowfishCipher();
    java.security.Key var33 = var32.getKey();
    java.security.Key var34 = var32.getKey();
    var23.setKey(var34);
    var14.setKey(var34);
    byte[] var40 = new byte[] { (byte)100, (byte)100, (byte)(-1)};
    java.lang.String var41 = org.jsecurity.codec.CodecSupport.toString(var40);
    byte[] var43 = org.jsecurity.codec.Base64.encode(var40, false);
    java.lang.String var44 = org.jsecurity.codec.CodecSupport.toString(var43);
    org.jsecurity.crypto.hash.Sha512Hash var46 = org.jsecurity.crypto.hash.Sha512Hash.fromBase64String("org.jsecurity.config.ConfigurationException: dd\uFFFD");
    byte[] var47 = var46.getBytes();
    java.lang.String var48 = var46.toString();
    byte[] var49 = var46.getBytes();
    org.jsecurity.crypto.hash.Md2Hash var51 = org.jsecurity.crypto.hash.Md2Hash.fromHexString("6464ff");
    java.lang.String var52 = var51.toString();
    byte[] var53 = var51.getBytes();
    byte[] var54 = var51.getBytes();
    var46.setBytes(var54);
    java.lang.String var56 = org.jsecurity.codec.CodecSupport.toString(var54);
    byte[] var57 = var14.encrypt(var43, var54);
    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      var13.setRememberMeCipher((org.jsecurity.crypto.Cipher)var14);
      fail("Expected exception of type java.lang.IllegalStateException");
    } catch (java.lang.IllegalStateException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var5);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var8);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var12 + "' != '" + "org.jsecurity.realm.text.PropertiesRealm-888-authorization"+ "'", var12.equals("org.jsecurity.realm.text.PropertiesRealm-888-authorization"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var18);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var19 + "' != '" + "dd\uFFFD"+ "'", var19.equals("dd\uFFFD"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var21);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var22);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var27);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var28 + "' != '" + "dd\uFFFD"+ "'", var28.equals("dd\uFFFD"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var30);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var31);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var33);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var34);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var40);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var41 + "' != '" + "dd\uFFFD"+ "'", var41.equals("dd\uFFFD"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var43);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var44 + "' != '" + "ZGT/"+ "'", var44.equals("ZGT/"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var46);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var47);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var48 + "' != '" + "a2b823b1e72eae2b727289df8a00a89df8a0bab6ad8a89c4c5c7a9b62a270000"+ "'", var48.equals("a2b823b1e72eae2b727289df8a00a89df8a0bab6ad8a89c4c5c7a9b62a270000"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var49);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var51);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var52 + "' != '" + "6464ff"+ "'", var52.equals("6464ff"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var53);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var54);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var56 + "' != '" + "dd\uFFFD"+ "'", var56.equals("dd\uFFFD"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var57);

  }

  public void test330() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest7.test330");


    org.jsecurity.realm.SimpleAccountRealm var1 = new org.jsecurity.realm.SimpleAccountRealm("hi!");
    java.lang.Class var2 = var1.getAuthenticationTokenClass();
    org.jsecurity.session.mgt.eis.MemorySessionDAO var3 = new org.jsecurity.session.mgt.eis.MemorySessionDAO();
    org.jsecurity.cache.Cache var4 = var3.getActiveSessionsCache();
    org.jsecurity.cache.CacheManager var5 = var3.getCacheManager();
    var1.setCacheManager(var5);
    java.lang.String var7 = var1.getAuthorizationCacheName();
    java.lang.String var8 = var1.getAuthorizationCacheName();
    var1.setAuthorizationCacheName("78149b74-b1fa-47f0-8334-6ae03c9c8095");
    java.lang.String[] var15 = org.jsecurity.util.StringUtils.tokenizeToStringArray("hi!", "");
    var1.addAccount("7e3919c4-0808-4dc3-b5c9-76633af849b7", "097f055d-50f3-4dd2-a824-8e89017ab790", var15);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var2);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var4);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var5);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var7 + "' != '" + "org.jsecurity.realm.SimpleAccountRealm-889-authorization"+ "'", var7.equals("org.jsecurity.realm.SimpleAccountRealm-889-authorization"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var8 + "' != '" + "org.jsecurity.realm.SimpleAccountRealm-889-authorization"+ "'", var8.equals("org.jsecurity.realm.SimpleAccountRealm-889-authorization"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var15);

  }

  public void test331() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest7.test331");


    org.jsecurity.util.InstantiationException var1 = new org.jsecurity.util.InstantiationException("6c9a3d8a-dfcf-4bc4-9aad-6adc8cd8bee3");

  }

  public void test332() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest7.test332");


    org.jsecurity.mgt.DefaultSecurityManager var0 = new org.jsecurity.mgt.DefaultSecurityManager();
    org.jsecurity.authz.permission.WildcardPermissionResolver var1 = new org.jsecurity.authz.permission.WildcardPermissionResolver();
    var0.setPermissionResolver((org.jsecurity.authz.permission.PermissionResolver)var1);
    org.jsecurity.cache.CacheManager var3 = var0.getCacheManager();
    org.jsecurity.authc.Authenticator var4 = var0.getAuthenticator();
    org.jsecurity.session.mgt.DefaultSessionManager var5 = new org.jsecurity.session.mgt.DefaultSessionManager();
    org.jsecurity.session.mgt.eis.MemorySessionDAO var6 = new org.jsecurity.session.mgt.eis.MemorySessionDAO();
    org.jsecurity.cache.Cache var7 = var6.getActiveSessionsCache();
    org.jsecurity.cache.CacheManager var8 = var6.getCacheManager();
    org.jsecurity.cache.HashtableCacheManager var9 = new org.jsecurity.cache.HashtableCacheManager();
    org.jsecurity.cache.Cache var11 = var9.getCache("\u0000\u0000");
    var6.setActiveSessionsCache(var11);
    java.io.InputStream var14 = org.jsecurity.util.ClassUtils.getResourceAsStream("");
    java.lang.Object[] var15 = new java.lang.Object[] { var14};
    java.util.List var16 = org.jsecurity.util.CollectionUtils.asList(var15);
    org.jsecurity.authc.pam.ModularRealmAuthenticator var17 = new org.jsecurity.authc.pam.ModularRealmAuthenticator(var16);
    org.jsecurity.authc.pam.AllSuccessfulModularAuthenticationStrategy var18 = new org.jsecurity.authc.pam.AllSuccessfulModularAuthenticationStrategy();
    var17.setModularAuthenticationStrategy((org.jsecurity.authc.pam.ModularAuthenticationStrategy)var18);
    org.jsecurity.authz.SimpleAuthorizationInfo var20 = new org.jsecurity.authz.SimpleAuthorizationInfo();
    var20.addStringPermission("hi!");
    java.io.InputStream var24 = org.jsecurity.util.ClassUtils.getResourceAsStream("");
    java.lang.Object[] var25 = new java.lang.Object[] { var24};
    java.util.List var26 = org.jsecurity.util.CollectionUtils.asList(var25);
    var20.addRoles((java.util.Collection)var26);
    var17.setAuthenticationListeners((java.util.Collection)var26);
    org.jsecurity.realm.activedirectory.ActiveDirectoryRealm var29 = new org.jsecurity.realm.activedirectory.ActiveDirectoryRealm();
    var29.setPrincipalSuffix("");
    var17.setRealm((org.jsecurity.realm.Realm)var29);
    org.jsecurity.cache.HashtableCacheManager var33 = new org.jsecurity.cache.HashtableCacheManager();
    org.jsecurity.cache.Cache var35 = var33.getCache("\u0000\u0000");
    var29.setAuthorizationCache(var35);
    var6.setActiveSessionsCache(var35);
    org.jsecurity.session.mgt.SimpleSession var38 = new org.jsecurity.session.mgt.SimpleSession();
    java.io.Serializable var39 = var6.create((org.jsecurity.session.Session)var38);
    var5.setSessionDAO((org.jsecurity.session.mgt.eis.SessionDAO)var6);
    long var41 = var5.getSessionValidationInterval();
    long var42 = var5.getSessionValidationInterval();
    var5.setGlobalSessionTimeout(1);
    var0.setSessionManager((org.jsecurity.session.mgt.SessionManager)var5);
    org.jsecurity.cache.ehcache.EhCacheManager var46 = new org.jsecurity.cache.ehcache.EhCacheManager();
    var46.init();
    var46.setCacheManagerConfigFile("b6a77f71-73c4-466a-903e-72fc5968f9ac");
    org.jsecurity.realm.text.PropertiesRealm var50 = new org.jsecurity.realm.text.PropertiesRealm((org.jsecurity.cache.CacheManager)var46);
    org.jsecurity.authz.permission.WildcardPermissionResolver var51 = new org.jsecurity.authz.permission.WildcardPermissionResolver();
    org.jsecurity.authz.Permission var53 = var51.resolvePermission("hi!");
    org.jsecurity.authz.Permission var55 = var51.resolvePermission("hi!");
    org.jsecurity.crypto.hash.Sha1Hash var56 = new org.jsecurity.crypto.hash.Sha1Hash((java.lang.Object)"hi!");
    org.jsecurity.cache.ehcache.EhCacheManager var57 = new org.jsecurity.cache.ehcache.EhCacheManager();
    var57.init();
    var57.setCacheManagerConfigFile("b6a77f71-73c4-466a-903e-72fc5968f9ac");
    net.sf.ehcache.CacheManager var61 = var57.getCacheManager();
    boolean var62 = var56.equals((java.lang.Object)var61);
    var46.setCacheManager(var61);
    var5.setCacheManager((org.jsecurity.cache.CacheManager)var46);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var3);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var4);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var7);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var8);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var11);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var14);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var15);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var16);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var24);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var25);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var26);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var35);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var39 + "' != '" + "34880088-b36b-4795-8bb0-f97abdd0a90e"+ "'", var39.equals("34880088-b36b-4795-8bb0-f97abdd0a90e"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var41 == 3600000L);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var42 == 3600000L);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var53);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var55);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var61);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var62 == false);

  }

  public void test333() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest7.test333");


    org.jsecurity.subject.InvalidSubjectException var4 = new org.jsecurity.subject.InvalidSubjectException("");
    org.jsecurity.authc.CredentialsException var5 = new org.jsecurity.authc.CredentialsException("org.jsecurity.authz.UnauthorizedException: org.jsecurity.session.ExpiredSessionException: ", (java.lang.Throwable)var4);
    org.jsecurity.io.ResourceException var8 = new org.jsecurity.io.ResourceException("d8d550ee-3a8c-48f0-8061-1d82c827f505");
    org.jsecurity.subject.SubjectException var9 = new org.jsecurity.subject.SubjectException("ca73d1a4-706e-42e7-980f-896d3b153de8", (java.lang.Throwable)var8);
    org.jsecurity.session.SessionException var10 = new org.jsecurity.session.SessionException("5b549fba-5a5d-44e6-9c05-771d476c2e80", (java.lang.Throwable)var4, (java.io.Serializable)var9);
    org.jsecurity.cache.CacheException var11 = new org.jsecurity.cache.CacheException((java.lang.Throwable)var4);
    org.jsecurity.authc.pam.UnsupportedTokenException var12 = new org.jsecurity.authc.pam.UnsupportedTokenException();
    org.jsecurity.session.StoppedSessionException var13 = new org.jsecurity.session.StoppedSessionException("6b66fcdb76f57bbd9e69ed9bef6ef6f3d75ff1ad346bcf5d7fc6b46da6fa69df1af3d73873973b6bd6fad9adbbd34d34", (java.lang.Throwable)var4, (java.io.Serializable)var12);

  }

  public void test334() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest7.test334");


    org.jsecurity.session.mgt.DelegatingSession var0 = new org.jsecurity.session.mgt.DelegatingSession();
    org.jsecurity.authc.pam.AllSuccessfulModularAuthenticationStrategy var1 = new org.jsecurity.authc.pam.AllSuccessfulModularAuthenticationStrategy();
    char[] var3 = new char[] { };
    org.jsecurity.authc.UsernamePasswordToken var5 = new org.jsecurity.authc.UsernamePasswordToken("hi!", var3, true);
    org.jsecurity.authc.SimpleAccount var6 = new org.jsecurity.authc.SimpleAccount();
    var6.setCredentialsExpired(false);
    boolean var9 = var6.isLocked();
    org.jsecurity.authc.AuthenticationInfo var10 = var1.afterAllAttempts((org.jsecurity.authc.AuthenticationToken)var5, (org.jsecurity.authc.AuthenticationInfo)var6);
    char[] var13 = new char[] { };
    org.jsecurity.authc.UsernamePasswordToken var15 = new org.jsecurity.authc.UsernamePasswordToken("hi!", var13, true);
    org.jsecurity.authc.UsernamePasswordToken var16 = new org.jsecurity.authc.UsernamePasswordToken("\u0000\u0000", var13);
    java.lang.Object var17 = var16.getPrincipal();
    org.jsecurity.authc.SimpleAccount var18 = new org.jsecurity.authc.SimpleAccount();
    var18.setCredentialsExpired(false);
    var18.setCredentialsExpired(false);
    boolean var23 = var18.isCredentialsExpired();
    org.jsecurity.authc.AuthenticationInfo var24 = var1.afterAllAttempts((org.jsecurity.authc.AuthenticationToken)var16, (org.jsecurity.authc.AuthenticationInfo)var18);
    var18.setLocked(false);
    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      org.jsecurity.crypto.hash.Md5Hash var28 = new org.jsecurity.crypto.hash.Md5Hash((java.lang.Object)var0, (java.lang.Object)false, 0);
      fail("Expected exception of type org.jsecurity.codec.CodecException");
    } catch (org.jsecurity.codec.CodecException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var3);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var9 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var10);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var13);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var17 + "' != '" + "\u0000\u0000"+ "'", var17.equals("\u0000\u0000"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var23 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var24);

  }

  public void test335() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest7.test335");


    org.jsecurity.session.UnknownSessionException var5 = new org.jsecurity.session.UnknownSessionException("dd\uFFFD", (java.io.Serializable)100.0f);
    org.jsecurity.session.SessionException var7 = new org.jsecurity.session.SessionException("dd\uFFFD", (java.lang.Throwable)var5, (java.io.Serializable)0);
    org.jsecurity.session.SessionException var8 = new org.jsecurity.session.SessionException("dd\uFFFD", (java.lang.Throwable)var5);
    java.io.Serializable var9 = var8.getSessionId();
    org.jsecurity.subject.InvalidSubjectException var10 = new org.jsecurity.subject.InvalidSubjectException("020e4fd5-81c8-4cbc-9bbb-975c45ce39a3", (java.lang.Throwable)var8);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var9);

  }

  public void test336() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest7.test336");


    org.jsecurity.crypto.hash.Sha384Hash var1 = org.jsecurity.crypto.hash.Sha384Hash.fromBase64String("HashtableCache [5dd0c65d-1422-49c2-becb-9e8dca619ab3]");
    java.lang.String var2 = var1.toString();
    org.jsecurity.crypto.BlowfishCipher var3 = new org.jsecurity.crypto.BlowfishCipher();
    java.security.Key var4 = org.jsecurity.crypto.BlowfishCipher.generateNewKey();
    var3.setKey(var4);
    java.security.Key var6 = org.jsecurity.crypto.BlowfishCipher.generateNewKey();
    var3.setKey(var6);
    byte[] var11 = new byte[] { (byte)100, (byte)100, (byte)(-1)};
    java.lang.String var12 = org.jsecurity.codec.CodecSupport.toString(var11);
    char[] var13 = org.jsecurity.codec.CodecSupport.toChars(var11);
    boolean var14 = org.jsecurity.codec.Base64.isBase64(var11);
    boolean var15 = org.jsecurity.codec.Base64.isBase64(var11);
    boolean var16 = org.jsecurity.codec.Base64.isBase64(var11);
    java.lang.String var17 = org.jsecurity.codec.Hex.encodeToString(var11);
    byte[] var21 = new byte[] { (byte)100, (byte)100, (byte)(-1)};
    java.lang.String var22 = org.jsecurity.codec.CodecSupport.toString(var21);
    char[] var23 = org.jsecurity.codec.CodecSupport.toChars(var21);
    boolean var24 = org.jsecurity.codec.Base64.isBase64(var21);
    boolean var25 = org.jsecurity.codec.Base64.isBase64(var21);
    boolean var26 = org.jsecurity.codec.Base64.isBase64(var21);
    java.lang.String var27 = org.jsecurity.codec.Base64.encodeToString(var21);
    byte[] var28 = var3.encrypt(var11, var21);
    org.jsecurity.io.DefaultSerializer var29 = new org.jsecurity.io.DefaultSerializer();
    org.jsecurity.authz.SimpleRole var30 = new org.jsecurity.authz.SimpleRole();
    byte[] var31 = var29.serialize((java.lang.Object)var30);
    byte[] var35 = new byte[] { (byte)100, (byte)100, (byte)(-1)};
    java.lang.String var36 = org.jsecurity.codec.CodecSupport.toString(var35);
    char[] var37 = org.jsecurity.codec.CodecSupport.toChars(var35);
    boolean var38 = org.jsecurity.codec.Base64.isBase64(var35);
    boolean var39 = org.jsecurity.codec.Base64.isBase64(var35);
    boolean var40 = org.jsecurity.codec.Base64.isBase64(var35);
    byte[] var41 = var3.encrypt(var31, var35);
    boolean var42 = org.jsecurity.codec.Base64.isBase64(var31);
    java.lang.String var43 = org.jsecurity.codec.Base64.encodeToString(var31);
    var1.setBytes(var31);
    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      char[] var46 = org.jsecurity.codec.CodecSupport.toChars(var31, "org.jsecurity.realm.text.TextConfigurationRealm_3659");
      fail("Expected exception of type org.jsecurity.codec.CodecException");
    } catch (org.jsecurity.codec.CodecException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var2 + "' != '" + "1dab21b5a6e578269c85ee5d77473ae5dd78db6e3d7366de71bf5ef1d71aeb5f5a0000"+ "'", var2.equals("1dab21b5a6e578269c85ee5d77473ae5dd78db6e3d7366de71bf5ef1d71aeb5f5a0000"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var4);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var6);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var11);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var12 + "' != '" + "dd\uFFFD"+ "'", var12.equals("dd\uFFFD"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var13);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var14 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var15 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var16 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var17 + "' != '" + "6464ff"+ "'", var17.equals("6464ff"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var21);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var22 + "' != '" + "dd\uFFFD"+ "'", var22.equals("dd\uFFFD"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var23);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var24 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var25 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var26 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var27 + "' != '" + "ZGT/"+ "'", var27.equals("ZGT/"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var28);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var31);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var35);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var36 + "' != '" + "dd\uFFFD"+ "'", var36.equals("dd\uFFFD"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var37);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var38 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var39 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var40 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var41);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var42 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var43 + "' != '" + "rO0ABXNyAB5vcmcuanNlY3VyaXR5LmF1dGh6LlNpbXBsZVJvbGVJTIBtTJ3XygIAAkwABG5hbWV0ABJMamF2YS9sYW5nL1N0cmluZztMAAtwZXJtaXNzaW9uc3QAD0xqYXZhL3V0aWwvU2V0O3hwcHA="+ "'", var43.equals("rO0ABXNyAB5vcmcuanNlY3VyaXR5LmF1dGh6LlNpbXBsZVJvbGVJTIBtTJ3XygIAAkwABG5hbWV0ABJMamF2YS9sYW5nL1N0cmluZztMAAtwZXJtaXNzaW9uc3QAD0xqYXZhL3V0aWwvU2V0O3hwcHA="));

  }

  public void test337() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest7.test337");


    char[] var1 = new char[] { };
    org.jsecurity.authc.UsernamePasswordToken var3 = new org.jsecurity.authc.UsernamePasswordToken("hi!", var1, true);
    byte[] var4 = org.jsecurity.codec.Hex.decode(var1);
    byte[] var5 = org.jsecurity.codec.CodecSupport.toBytes(var1);
    byte[] var6 = org.jsecurity.codec.Hex.decode(var1);
    org.jsecurity.cache.HashtableCache var9 = new org.jsecurity.cache.HashtableCache("\u0000\u0000\u0000");
    org.jsecurity.session.mgt.SimpleSession var10 = new org.jsecurity.session.mgt.SimpleSession();
    var10.touch();
    org.jsecurity.authz.UnauthenticatedException var14 = new org.jsecurity.authz.UnauthenticatedException();
    org.jsecurity.config.UnresolveableReferenceException var15 = new org.jsecurity.config.UnresolveableReferenceException("", (java.lang.Throwable)var14);
    org.jsecurity.cache.CacheException var16 = new org.jsecurity.cache.CacheException("org.jsecurity.config.ConfigurationException: dd\uFFFD", (java.lang.Throwable)var14);
    java.lang.Object var17 = var10.removeAttribute((java.lang.Object)var16);
    org.jsecurity.mgt.DefaultSecurityManager var18 = new org.jsecurity.mgt.DefaultSecurityManager();
    org.jsecurity.authc.pam.AllSuccessfulModularAuthenticationStrategy var19 = new org.jsecurity.authc.pam.AllSuccessfulModularAuthenticationStrategy();
    org.jsecurity.authc.pam.AllSuccessfulModularAuthenticationStrategy var20 = new org.jsecurity.authc.pam.AllSuccessfulModularAuthenticationStrategy();
    char[] var22 = new char[] { };
    org.jsecurity.authc.UsernamePasswordToken var24 = new org.jsecurity.authc.UsernamePasswordToken("hi!", var22, true);
    org.jsecurity.authc.SimpleAccount var25 = new org.jsecurity.authc.SimpleAccount();
    var25.setCredentialsExpired(false);
    boolean var28 = var25.isLocked();
    org.jsecurity.authc.AuthenticationInfo var29 = var20.afterAllAttempts((org.jsecurity.authc.AuthenticationToken)var24, (org.jsecurity.authc.AuthenticationInfo)var25);
    char[] var33 = new char[] { '4', '#'};
    org.jsecurity.authc.UsernamePasswordToken var34 = new org.jsecurity.authc.UsernamePasswordToken("\u0000\u0000", var33);
    org.jsecurity.authc.SimpleAccount var35 = new org.jsecurity.authc.SimpleAccount();
    var35.setCredentialsExpired(false);
    var35.setCredentialsExpired(false);
    boolean var40 = var35.isCredentialsExpired();
    org.jsecurity.authc.AuthenticationInfo var41 = var20.afterAllAttempts((org.jsecurity.authc.AuthenticationToken)var34, (org.jsecurity.authc.AuthenticationInfo)var35);
    org.jsecurity.authz.UnauthenticatedException var45 = new org.jsecurity.authz.UnauthenticatedException();
    org.jsecurity.config.UnresolveableReferenceException var46 = new org.jsecurity.config.UnresolveableReferenceException("", (java.lang.Throwable)var45);
    org.jsecurity.cache.CacheException var47 = new org.jsecurity.cache.CacheException("org.jsecurity.config.ConfigurationException: dd\uFFFD", (java.lang.Throwable)var45);
    org.jsecurity.authc.SimpleAuthenticationInfo var49 = new org.jsecurity.authc.SimpleAuthenticationInfo((java.lang.Object)"org.jsecurity.config.ConfigurationException: dd\uFFFD", (java.lang.Object)var47, "a2b823b1e72eae2b727289df8a00a89df8a0bab6ad8a89c4c5c7a9b62a270000");
    org.jsecurity.subject.PrincipalCollection var50 = var49.getPrincipals();
    org.jsecurity.authc.AuthenticationInfo var51 = var19.afterAllAttempts((org.jsecurity.authc.AuthenticationToken)var34, (org.jsecurity.authc.AuthenticationInfo)var49);
    var18.setModularAuthenticationStrategy((org.jsecurity.authc.pam.ModularAuthenticationStrategy)var19);
    org.jsecurity.subject.RememberMeManager var53 = var18.getRememberMeManager();
    org.jsecurity.authc.pam.ModularRealmAuthenticator var54 = new org.jsecurity.authc.pam.ModularRealmAuthenticator();
    var18.setAuthenticator((org.jsecurity.authc.Authenticator)var54);
    var9.put((java.lang.Object)var10, (java.lang.Object)var54);
    var10.setTimeout(10L);
    org.jsecurity.session.mgt.SimpleSession var59 = new org.jsecurity.session.mgt.SimpleSession();
    var59.validate();
    java.util.Date var61 = var59.getStartTimestamp();
    var10.setStopTimestamp(var61);
    org.jsecurity.session.UnknownSessionException var63 = new org.jsecurity.session.UnknownSessionException("a90fad7f-7d5f-46a8-a669-ef1c9ffd25bf", (java.io.Serializable)var10);
    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      org.jsecurity.crypto.hash.Sha1Hash var64 = new org.jsecurity.crypto.hash.Sha1Hash((java.lang.Object)var1, (java.lang.Object)var63);
      fail("Expected exception of type org.jsecurity.codec.CodecException");
    } catch (org.jsecurity.codec.CodecException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var1);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var4);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var5);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var6);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var17);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var22);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var28 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var29);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var33);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var40 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var41);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var50);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var51);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var53);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var61);

  }

  public void test338() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest7.test338");


    org.jsecurity.session.UnknownSessionException var3 = new org.jsecurity.session.UnknownSessionException("dd\uFFFD", (java.io.Serializable)100.0f);
    org.jsecurity.session.SessionException var5 = new org.jsecurity.session.SessionException("dd\uFFFD", (java.lang.Throwable)var3, (java.io.Serializable)0);
    org.jsecurity.authc.AccountException var6 = new org.jsecurity.authc.AccountException((java.lang.Throwable)var3);
    org.jsecurity.authc.AccountException var7 = new org.jsecurity.authc.AccountException((java.lang.Throwable)var6);

  }

  public void test339() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest7.test339");


    org.jsecurity.session.mgt.eis.MemorySessionDAO var0 = new org.jsecurity.session.mgt.eis.MemorySessionDAO();
    org.jsecurity.cache.Cache var1 = var0.getActiveSessionsCache();
    org.jsecurity.cache.CacheManager var2 = var0.getCacheManager();
    org.jsecurity.cache.HashtableCacheManager var3 = new org.jsecurity.cache.HashtableCacheManager();
    org.jsecurity.cache.Cache var5 = var3.getCache("\u0000\u0000");
    var0.setActiveSessionsCache(var5);
    java.io.InputStream var8 = org.jsecurity.util.ClassUtils.getResourceAsStream("");
    java.lang.Object[] var9 = new java.lang.Object[] { var8};
    java.util.List var10 = org.jsecurity.util.CollectionUtils.asList(var9);
    org.jsecurity.authc.pam.ModularRealmAuthenticator var11 = new org.jsecurity.authc.pam.ModularRealmAuthenticator(var10);
    org.jsecurity.authc.pam.AllSuccessfulModularAuthenticationStrategy var12 = new org.jsecurity.authc.pam.AllSuccessfulModularAuthenticationStrategy();
    var11.setModularAuthenticationStrategy((org.jsecurity.authc.pam.ModularAuthenticationStrategy)var12);
    org.jsecurity.authz.SimpleAuthorizationInfo var14 = new org.jsecurity.authz.SimpleAuthorizationInfo();
    var14.addStringPermission("hi!");
    java.io.InputStream var18 = org.jsecurity.util.ClassUtils.getResourceAsStream("");
    java.lang.Object[] var19 = new java.lang.Object[] { var18};
    java.util.List var20 = org.jsecurity.util.CollectionUtils.asList(var19);
    var14.addRoles((java.util.Collection)var20);
    var11.setAuthenticationListeners((java.util.Collection)var20);
    org.jsecurity.realm.activedirectory.ActiveDirectoryRealm var23 = new org.jsecurity.realm.activedirectory.ActiveDirectoryRealm();
    var23.setPrincipalSuffix("");
    var11.setRealm((org.jsecurity.realm.Realm)var23);
    org.jsecurity.cache.HashtableCacheManager var27 = new org.jsecurity.cache.HashtableCacheManager();
    org.jsecurity.cache.Cache var29 = var27.getCache("\u0000\u0000");
    var23.setAuthorizationCache(var29);
    var0.setActiveSessionsCache(var29);
    org.jsecurity.session.mgt.SimpleSession var32 = new org.jsecurity.session.mgt.SimpleSession();
    java.io.Serializable var33 = var0.create((org.jsecurity.session.Session)var32);
    org.jsecurity.session.mgt.SimpleSession var34 = new org.jsecurity.session.mgt.SimpleSession();
    var34.touch();
    var34.validate();
    org.jsecurity.session.mgt.SimpleSession var37 = new org.jsecurity.session.mgt.SimpleSession();
    var37.setTimeout((-1L));
    org.jsecurity.session.mgt.SimpleSession var40 = new org.jsecurity.session.mgt.SimpleSession();
    java.util.Date var41 = var40.getLastAccessTime();
    var37.setLastAccessTime(var41);
    org.jsecurity.session.mgt.SimpleSession var43 = new org.jsecurity.session.mgt.SimpleSession();
    java.util.Date var44 = var43.getLastAccessTime();
    var37.setStopTimestamp(var44);
    var34.setLastAccessTime(var44);
    var32.setLastAccessTime(var44);
    org.jsecurity.session.mgt.ImmutableProxiedSession var48 = new org.jsecurity.session.mgt.ImmutableProxiedSession((org.jsecurity.session.Session)var32);
    java.util.Date var49 = var48.getStartTimestamp();
    java.io.Serializable var50 = var48.getId();
    java.util.Date var51 = var48.getStartTimestamp();
    java.util.Date var52 = var48.getLastAccessTime();
    java.net.InetAddress var53 = var48.getHostAddress();
    java.net.InetAddress var54 = var48.getHostAddress();
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var1);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var2);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var5);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var8);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var9);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var10);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var18);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var19);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var20);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var29);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var33 + "' != '" + "6b769c7f-29bc-491e-a179-163c48d4e1fa"+ "'", var33.equals("6b769c7f-29bc-491e-a179-163c48d4e1fa"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var41);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var44);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var49);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var50 + "' != '" + "6b769c7f-29bc-491e-a179-163c48d4e1fa"+ "'", var50.equals("6b769c7f-29bc-491e-a179-163c48d4e1fa"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var51);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var52);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var53);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var54);

  }

  public void test340() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest7.test340");


    org.jsecurity.io.DefaultSerializer var0 = new org.jsecurity.io.DefaultSerializer();
    org.jsecurity.authz.SimpleRole var1 = new org.jsecurity.authz.SimpleRole();
    byte[] var2 = var0.serialize((java.lang.Object)var1);
    org.jsecurity.authz.SimpleRole var3 = new org.jsecurity.authz.SimpleRole();
    java.lang.String var4 = var3.getName();
    org.jsecurity.session.UnknownSessionException var9 = new org.jsecurity.session.UnknownSessionException("dd\uFFFD", (java.io.Serializable)100.0f);
    org.jsecurity.subject.SubjectException var10 = new org.jsecurity.subject.SubjectException("dd\uFFFD", (java.lang.Throwable)var9);
    org.jsecurity.io.SerializationException var11 = new org.jsecurity.io.SerializationException("", (java.lang.Throwable)var10);
    java.lang.Throwable[] var12 = var10.getSuppressed();
    java.util.Set var13 = org.jsecurity.util.CollectionUtils.asSet((java.lang.Object[])var12);
    var3.setPermissions(var13);
    byte[] var15 = var0.serialize((java.lang.Object)var13);
    org.jsecurity.io.IniResource var16 = new org.jsecurity.io.IniResource();
    java.util.Map var17 = var16.getSections();
    java.util.Map var18 = var16.getSections();
    var16.setCharsetName("877d40d3-7504-4fde-9f4c-e0fcd7e4321f");
    byte[] var21 = var0.serialize((java.lang.Object)"877d40d3-7504-4fde-9f4c-e0fcd7e4321f");
    byte[] var25 = new byte[] { (byte)100, (byte)100, (byte)(-1)};
    java.lang.String var26 = org.jsecurity.codec.CodecSupport.toString(var25);
    byte[] var28 = org.jsecurity.codec.Base64.encode(var25, false);
    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      java.lang.Object var29 = var0.deserialize(var28);
      fail("Expected exception of type org.jsecurity.io.SerializationException");
    } catch (org.jsecurity.io.SerializationException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var2);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var4);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var12);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var13);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var15);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var17);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var18);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var21);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var25);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var26 + "' != '" + "dd\uFFFD"+ "'", var26.equals("dd\uFFFD"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var28);

  }

  public void test341() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest7.test341");


    org.jsecurity.session.mgt.DefaultSessionManager var0 = new org.jsecurity.session.mgt.DefaultSessionManager();
    org.jsecurity.session.mgt.eis.MemorySessionDAO var1 = new org.jsecurity.session.mgt.eis.MemorySessionDAO();
    org.jsecurity.cache.Cache var2 = var1.getActiveSessionsCache();
    org.jsecurity.cache.CacheManager var3 = var1.getCacheManager();
    org.jsecurity.cache.HashtableCacheManager var4 = new org.jsecurity.cache.HashtableCacheManager();
    org.jsecurity.cache.Cache var6 = var4.getCache("\u0000\u0000");
    var1.setActiveSessionsCache(var6);
    java.io.InputStream var9 = org.jsecurity.util.ClassUtils.getResourceAsStream("");
    java.lang.Object[] var10 = new java.lang.Object[] { var9};
    java.util.List var11 = org.jsecurity.util.CollectionUtils.asList(var10);
    org.jsecurity.authc.pam.ModularRealmAuthenticator var12 = new org.jsecurity.authc.pam.ModularRealmAuthenticator(var11);
    org.jsecurity.authc.pam.AllSuccessfulModularAuthenticationStrategy var13 = new org.jsecurity.authc.pam.AllSuccessfulModularAuthenticationStrategy();
    var12.setModularAuthenticationStrategy((org.jsecurity.authc.pam.ModularAuthenticationStrategy)var13);
    org.jsecurity.authz.SimpleAuthorizationInfo var15 = new org.jsecurity.authz.SimpleAuthorizationInfo();
    var15.addStringPermission("hi!");
    java.io.InputStream var19 = org.jsecurity.util.ClassUtils.getResourceAsStream("");
    java.lang.Object[] var20 = new java.lang.Object[] { var19};
    java.util.List var21 = org.jsecurity.util.CollectionUtils.asList(var20);
    var15.addRoles((java.util.Collection)var21);
    var12.setAuthenticationListeners((java.util.Collection)var21);
    org.jsecurity.realm.activedirectory.ActiveDirectoryRealm var24 = new org.jsecurity.realm.activedirectory.ActiveDirectoryRealm();
    var24.setPrincipalSuffix("");
    var12.setRealm((org.jsecurity.realm.Realm)var24);
    org.jsecurity.cache.HashtableCacheManager var28 = new org.jsecurity.cache.HashtableCacheManager();
    org.jsecurity.cache.Cache var30 = var28.getCache("\u0000\u0000");
    var24.setAuthorizationCache(var30);
    var1.setActiveSessionsCache(var30);
    org.jsecurity.session.mgt.SimpleSession var33 = new org.jsecurity.session.mgt.SimpleSession();
    java.io.Serializable var34 = var1.create((org.jsecurity.session.Session)var33);
    var0.setSessionDAO((org.jsecurity.session.mgt.eis.SessionDAO)var1);
    long var36 = var0.getSessionValidationInterval();
    long var37 = var0.getSessionValidationInterval();
    long var38 = var0.getSessionValidationInterval();
    org.jsecurity.session.mgt.eis.MemorySessionDAO var39 = new org.jsecurity.session.mgt.eis.MemorySessionDAO();
    org.jsecurity.cache.Cache var40 = var39.getActiveSessionsCache();
    org.jsecurity.session.mgt.SimpleSession var41 = new org.jsecurity.session.mgt.SimpleSession();
    var41.setTimeout((-1L));
    org.jsecurity.session.mgt.SimpleSession var44 = new org.jsecurity.session.mgt.SimpleSession();
    java.util.Date var45 = var44.getLastAccessTime();
    var41.setLastAccessTime(var45);
    var39.update((org.jsecurity.session.Session)var41);
    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      var0.validateSession((java.io.Serializable)var41);
      fail("Expected exception of type org.jsecurity.session.UnknownSessionException");
    } catch (org.jsecurity.session.UnknownSessionException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var2);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var3);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var6);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var9);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var10);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var11);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var19);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var20);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var21);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var30);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var34 + "' != '" + "d866056f-3d02-4d13-8b39-798116db857b"+ "'", var34.equals("d866056f-3d02-4d13-8b39-798116db857b"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var36 == 3600000L);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var37 == 3600000L);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var38 == 3600000L);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var40);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var45);

  }

  public void test342() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest7.test342");


    org.jsecurity.authc.pam.AtLeastOneSuccessfulModularAuthenticationStrategy var0 = new org.jsecurity.authc.pam.AtLeastOneSuccessfulModularAuthenticationStrategy();
    org.jsecurity.authc.pam.AllSuccessfulModularAuthenticationStrategy var2 = new org.jsecurity.authc.pam.AllSuccessfulModularAuthenticationStrategy();
    char[] var4 = new char[] { };
    org.jsecurity.authc.UsernamePasswordToken var6 = new org.jsecurity.authc.UsernamePasswordToken("hi!", var4, true);
    org.jsecurity.authc.SimpleAccount var7 = new org.jsecurity.authc.SimpleAccount();
    var7.setCredentialsExpired(false);
    boolean var10 = var7.isLocked();
    org.jsecurity.authc.AuthenticationInfo var11 = var2.afterAllAttempts((org.jsecurity.authc.AuthenticationToken)var6, (org.jsecurity.authc.AuthenticationInfo)var7);
    char[] var14 = new char[] { };
    org.jsecurity.authc.UsernamePasswordToken var16 = new org.jsecurity.authc.UsernamePasswordToken("hi!", var14, true);
    org.jsecurity.authc.UsernamePasswordToken var17 = new org.jsecurity.authc.UsernamePasswordToken("\u0000\u0000", var14);
    var6.setPassword(var14);
    org.jsecurity.authc.UsernamePasswordToken var19 = new org.jsecurity.authc.UsernamePasswordToken("\u0000\u0000\u0000", var14);
    org.jsecurity.realm.text.TextConfigurationRealm var20 = new org.jsecurity.realm.text.TextConfigurationRealm();
    java.io.InputStream var22 = org.jsecurity.util.ClassUtils.getResourceAsStream("");
    java.lang.Object[] var23 = new java.lang.Object[] { var22};
    java.util.List var24 = org.jsecurity.util.CollectionUtils.asList(var23);
    org.jsecurity.authc.pam.ModularRealmAuthenticator var25 = new org.jsecurity.authc.pam.ModularRealmAuthenticator(var24);
    org.jsecurity.subject.SimplePrincipalCollection var27 = new org.jsecurity.subject.SimplePrincipalCollection((java.util.Collection)var24, "org.jsecurity.authz.UnauthorizedException: org.jsecurity.session.ExpiredSessionException: ");
    org.jsecurity.session.UnknownSessionException var32 = new org.jsecurity.session.UnknownSessionException("dd\uFFFD", (java.io.Serializable)100.0f);
    org.jsecurity.session.SessionException var34 = new org.jsecurity.session.SessionException("dd\uFFFD", (java.lang.Throwable)var32, (java.io.Serializable)0);
    org.jsecurity.session.SessionException var35 = new org.jsecurity.session.SessionException("dd\uFFFD", (java.lang.Throwable)var32);
    var27.add((java.lang.Object)var35, "org.jsecurity.config.ConfigurationException: dd\uFFFD");
    var20.onLogout((org.jsecurity.subject.PrincipalCollection)var27);
    org.jsecurity.authc.ExpiredCredentialsException var40 = new org.jsecurity.authc.ExpiredCredentialsException();
    org.jsecurity.session.ExpiredSessionException var41 = new org.jsecurity.session.ExpiredSessionException("", (java.lang.Throwable)var40);
    java.lang.Throwable[] var42 = var41.getSuppressed();
    org.jsecurity.io.ResourceException var43 = new org.jsecurity.io.ResourceException((java.lang.Throwable)var41);
    org.jsecurity.authc.SimpleAuthenticationInfo var44 = new org.jsecurity.authc.SimpleAuthenticationInfo((org.jsecurity.subject.PrincipalCollection)var27, (java.lang.Object)var41);
    org.jsecurity.authc.AuthenticationInfo var45 = var0.afterAllAttempts((org.jsecurity.authc.AuthenticationToken)var19, (org.jsecurity.authc.AuthenticationInfo)var44);
    java.lang.Object var46 = var44.getCredentials();
    org.jsecurity.authc.credential.Md5CredentialsMatcher var47 = new org.jsecurity.authc.credential.Md5CredentialsMatcher();
    boolean var48 = var47.isHashSalted();
    boolean var49 = var47.isHashSalted();
    int var50 = var47.getHashIterations();
    var44.setCredentials((java.lang.Object)var50);
    java.lang.Object var52 = var44.getCredentials();
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var4);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var10 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var11);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var14);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var22);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var23);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var24);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var42);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var45);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var46);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var48 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var49 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var50 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var52 + "' != '" + 1+ "'", var52.equals(1));

  }

  public void test343() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest7.test343");


    org.jsecurity.config.IniConfiguration var0 = new org.jsecurity.config.IniConfiguration();
    java.lang.String var1 = var0.getConfig();
    var0.setConfig("\uFFFD\uFFFD#\uFFFD\uFFFD.\uFFFD+rr\uFFFD\u07CA\u0000\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\u01E9\uFFFD*'\u0000\u0000");
    var0.setConfig("3c0f8cd0-07d8-4de6-8030-3e8afad05e07");
    var0.setConfig("a8df74b8-0f68-49c4-b77d-09857e171e23");
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var1);

  }

  public void test344() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest7.test344");


    org.jsecurity.authz.SimpleAuthorizingAccount var0 = new org.jsecurity.authz.SimpleAuthorizingAccount();
    org.jsecurity.authz.SimpleAuthorizationInfo var1 = new org.jsecurity.authz.SimpleAuthorizationInfo();
    var1.addRole("a2b823b1e72eae2b727289df8a00a89df8a0bab6ad8a89c4c5c7a9b62a270000");
    org.jsecurity.authz.SimpleAuthorizationInfo var4 = new org.jsecurity.authz.SimpleAuthorizationInfo();
    var4.addRole("a2b823b1e72eae2b727289df8a00a89df8a0bab6ad8a89c4c5c7a9b62a270000");
    org.jsecurity.session.UnknownSessionException var11 = new org.jsecurity.session.UnknownSessionException("dd\uFFFD", (java.io.Serializable)100.0f);
    org.jsecurity.subject.SubjectException var12 = new org.jsecurity.subject.SubjectException("dd\uFFFD", (java.lang.Throwable)var11);
    org.jsecurity.io.SerializationException var13 = new org.jsecurity.io.SerializationException("", (java.lang.Throwable)var12);
    java.lang.Throwable[] var14 = var12.getSuppressed();
    java.util.Set var15 = org.jsecurity.util.CollectionUtils.asSet((java.lang.Object[])var14);
    var4.addRoles((java.util.Collection)var15);
    var1.setObjectPermissions(var15);
    var0.setSimpleRoles(var15);
    org.jsecurity.session.mgt.eis.MemorySessionDAO var19 = new org.jsecurity.session.mgt.eis.MemorySessionDAO();
    org.jsecurity.cache.Cache var20 = var19.getActiveSessionsCache();
    var19.setActiveSessionsCacheName("dd\uFFFD");
    java.util.Collection var23 = var19.getActiveSessions();
    var0.checkPermissions(var23);
    java.util.Set var25 = var0.getSimpleRoles();
    org.jsecurity.authz.SimpleRole var27 = var0.getRole("org.jsecurity.authc.UsernamePasswordToken - org.jsecurity.config.ConfigurationException: dd\uFFFD, rememberMe=false");
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var14);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var15);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var20);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var23);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var25);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var27);

  }

  public void test345() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest7.test345");


    org.jsecurity.session.UnknownSessionException var7 = new org.jsecurity.session.UnknownSessionException("dd\uFFFD", (java.io.Serializable)100.0f);
    org.jsecurity.subject.SubjectException var8 = new org.jsecurity.subject.SubjectException("dd\uFFFD", (java.lang.Throwable)var7);
    org.jsecurity.authc.AccountException var9 = new org.jsecurity.authc.AccountException("hi!", (java.lang.Throwable)var8);
    org.jsecurity.session.ExpiredSessionException var10 = new org.jsecurity.session.ExpiredSessionException("dd\uFFFD", (java.io.Serializable)var9);
    org.jsecurity.session.SessionException var11 = new org.jsecurity.session.SessionException((java.lang.Throwable)var9);
    org.jsecurity.authc.AccountException var12 = new org.jsecurity.authc.AccountException("4f79d01b-a90a-4319-b7ab-e8e15489bc6e", (java.lang.Throwable)var11);
    org.jsecurity.authc.ExcessiveAttemptsException var13 = new org.jsecurity.authc.ExcessiveAttemptsException((java.lang.Throwable)var11);
    org.jsecurity.authc.pam.UnsupportedTokenException var14 = new org.jsecurity.authc.pam.UnsupportedTokenException("a1db1a1b-7682-421b-9dba-5dd86b6ffd21", (java.lang.Throwable)var13);

  }

  public void test346() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest7.test346");


    org.jsecurity.authc.pam.UnsupportedTokenException var1 = new org.jsecurity.authc.pam.UnsupportedTokenException("215ab769-9cb8-4898-aeea-426529d1962a");
    org.jsecurity.subject.InvalidSubjectException var2 = new org.jsecurity.subject.InvalidSubjectException((java.lang.Throwable)var1);

  }

  public void test347() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest7.test347");


    org.jsecurity.realm.activedirectory.ActiveDirectoryRealm var2 = new org.jsecurity.realm.activedirectory.ActiveDirectoryRealm();
    org.jsecurity.authc.credential.Sha256CredentialsMatcher var3 = new org.jsecurity.authc.credential.Sha256CredentialsMatcher();
    var2.setCredentialsMatcher((org.jsecurity.authc.credential.CredentialsMatcher)var3);
    java.lang.String var5 = var2.getAuthorizationCacheName();
    java.io.InputStream var7 = org.jsecurity.util.ClassUtils.getResourceAsStream("");
    java.lang.Object[] var8 = new java.lang.Object[] { var7};
    java.util.List var9 = org.jsecurity.util.CollectionUtils.asList(var8);
    org.jsecurity.authc.pam.ModularRealmAuthenticator var10 = new org.jsecurity.authc.pam.ModularRealmAuthenticator(var9);
    org.jsecurity.authc.pam.AllSuccessfulModularAuthenticationStrategy var11 = new org.jsecurity.authc.pam.AllSuccessfulModularAuthenticationStrategy();
    var10.setModularAuthenticationStrategy((org.jsecurity.authc.pam.ModularAuthenticationStrategy)var11);
    org.jsecurity.authz.SimpleAuthorizationInfo var13 = new org.jsecurity.authz.SimpleAuthorizationInfo();
    var13.addStringPermission("hi!");
    java.io.InputStream var17 = org.jsecurity.util.ClassUtils.getResourceAsStream("");
    java.lang.Object[] var18 = new java.lang.Object[] { var17};
    java.util.List var19 = org.jsecurity.util.CollectionUtils.asList(var18);
    var13.addRoles((java.util.Collection)var19);
    var10.setAuthenticationListeners((java.util.Collection)var19);
    org.jsecurity.realm.activedirectory.ActiveDirectoryRealm var22 = new org.jsecurity.realm.activedirectory.ActiveDirectoryRealm();
    var22.setPrincipalSuffix("");
    var10.setRealm((org.jsecurity.realm.Realm)var22);
    org.jsecurity.authc.pam.FirstSuccessfulAuthenticationStrategy var26 = new org.jsecurity.authc.pam.FirstSuccessfulAuthenticationStrategy();
    org.jsecurity.authz.UnauthorizedException var28 = new org.jsecurity.authz.UnauthorizedException("org.jsecurity.config.ConfigurationException: dd\uFFFD");
    java.lang.Throwable[] var29 = var28.getSuppressed();
    java.util.List var30 = org.jsecurity.util.CollectionUtils.asList((java.lang.Object[])var29);
    org.jsecurity.authc.UsernamePasswordToken var31 = new org.jsecurity.authc.UsernamePasswordToken();
    java.lang.String var32 = var31.getUsername();
    java.net.InetAddress var33 = var31.getInetAddress();
    org.jsecurity.authc.AuthenticationInfo var34 = var26.beforeAllAttempts((java.util.Collection)var30, (org.jsecurity.authc.AuthenticationToken)var31);
    var10.setModularAuthenticationStrategy((org.jsecurity.authc.pam.ModularAuthenticationStrategy)var26);
    org.jsecurity.codec.CodecException var38 = new org.jsecurity.codec.CodecException("dd\uFFFD");
    org.jsecurity.authc.ConcurrentAccessException var39 = new org.jsecurity.authc.ConcurrentAccessException("org.jsecurity.authz.UnauthorizedException: org.jsecurity.session.ExpiredSessionException: ", (java.lang.Throwable)var38);
    org.jsecurity.subject.SimplePrincipalCollection var41 = new org.jsecurity.subject.SimplePrincipalCollection((java.lang.Object)var38, "");
    org.jsecurity.authc.pam.FirstSuccessfulAuthenticationStrategy var42 = new org.jsecurity.authc.pam.FirstSuccessfulAuthenticationStrategy();
    org.jsecurity.authz.UnauthorizedException var44 = new org.jsecurity.authz.UnauthorizedException("org.jsecurity.config.ConfigurationException: dd\uFFFD");
    java.lang.Throwable[] var45 = var44.getSuppressed();
    java.util.List var46 = org.jsecurity.util.CollectionUtils.asList((java.lang.Object[])var45);
    org.jsecurity.authc.UsernamePasswordToken var47 = new org.jsecurity.authc.UsernamePasswordToken();
    java.lang.String var48 = var47.getUsername();
    java.net.InetAddress var49 = var47.getInetAddress();
    org.jsecurity.authc.AuthenticationInfo var50 = var42.beforeAllAttempts((java.util.Collection)var46, (org.jsecurity.authc.AuthenticationToken)var47);
    org.jsecurity.session.UnknownSessionException var55 = new org.jsecurity.session.UnknownSessionException("dd\uFFFD", (java.io.Serializable)100.0f);
    org.jsecurity.subject.SubjectException var56 = new org.jsecurity.subject.SubjectException("dd\uFFFD", (java.lang.Throwable)var55);
    org.jsecurity.io.SerializationException var57 = new org.jsecurity.io.SerializationException("", (java.lang.Throwable)var56);
    java.lang.Throwable[] var58 = var56.getSuppressed();
    java.util.Set var59 = org.jsecurity.util.CollectionUtils.asSet((java.lang.Object[])var58);
    org.jsecurity.authc.SimpleAccount var60 = new org.jsecurity.authc.SimpleAccount((org.jsecurity.subject.PrincipalCollection)var41, (java.lang.Object)var46, var59);
    org.jsecurity.authc.pam.AllSuccessfulModularAuthenticationStrategy var61 = new org.jsecurity.authc.pam.AllSuccessfulModularAuthenticationStrategy();
    char[] var63 = new char[] { };
    org.jsecurity.authc.UsernamePasswordToken var65 = new org.jsecurity.authc.UsernamePasswordToken("hi!", var63, true);
    org.jsecurity.authc.SimpleAccount var66 = new org.jsecurity.authc.SimpleAccount();
    var66.setCredentialsExpired(false);
    boolean var69 = var66.isLocked();
    org.jsecurity.authc.AuthenticationInfo var70 = var61.afterAllAttempts((org.jsecurity.authc.AuthenticationToken)var65, (org.jsecurity.authc.AuthenticationInfo)var66);
    char[] var73 = new char[] { };
    org.jsecurity.authc.UsernamePasswordToken var75 = new org.jsecurity.authc.UsernamePasswordToken("hi!", var73, true);
    org.jsecurity.authc.UsernamePasswordToken var76 = new org.jsecurity.authc.UsernamePasswordToken("\u0000\u0000", var73);
    var65.setPassword(var73);
    org.jsecurity.authc.AuthenticationInfo var78 = var26.beforeAllAttempts((java.util.Collection)var46, (org.jsecurity.authc.AuthenticationToken)var65);
    org.jsecurity.authz.permission.WildcardPermissionResolver var79 = new org.jsecurity.authz.permission.WildcardPermissionResolver();
    org.jsecurity.authz.Permission var81 = var79.resolvePermission("hi!");
    org.jsecurity.authz.Permission var83 = var79.resolvePermission("hi!");
    java.util.Set var84 = org.jsecurity.util.PermissionUtils.resolvePermissions((java.util.Collection)var46, (org.jsecurity.authz.permission.PermissionResolver)var79);
    var2.setPermissionResolver((org.jsecurity.authz.permission.PermissionResolver)var79);
    java.util.Set var86 = org.jsecurity.util.PermissionUtils.resolveDelimitedPermissions("15bc7125-17c3-48a1-9138-1f3d04791458", (org.jsecurity.authz.permission.PermissionResolver)var79);
    org.jsecurity.authz.Permission var88 = var79.resolvePermission("\uFFFD\uFFFD#\uFFFD\uFFFD.\uFFFD+r\uFFFD\u6959(\uFFFD\uFFFDW\uFFFDq\uFFFD.\uFFFD\uFFFD^jY\uFFFDj\uFFFDa\uFFFD\uFFFD\uFFFDj\u0628");
    java.util.Set var89 = org.jsecurity.util.PermissionUtils.resolveDelimitedPermissions("70bf5f29-b0cb-4666-b31a-f1e98e2371a0", (org.jsecurity.authz.permission.PermissionResolver)var79);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var5);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var7);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var8);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var9);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var17);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var18);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var19);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var29);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var30);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var32);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var33);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var34);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var45);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var46);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var48);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var49);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var50);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var58);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var59);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var63);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var69 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var70);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var73);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var78);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var81);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var83);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var84);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var86);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var88);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var89);

  }

  public void test348() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest7.test348");


    org.jsecurity.session.mgt.SimpleSession var0 = new org.jsecurity.session.mgt.SimpleSession();
    var0.touch();
    var0.validate();
    org.jsecurity.session.mgt.SimpleSession var3 = new org.jsecurity.session.mgt.SimpleSession();
    var3.setTimeout((-1L));
    org.jsecurity.session.mgt.SimpleSession var6 = new org.jsecurity.session.mgt.SimpleSession();
    java.util.Date var7 = var6.getLastAccessTime();
    var3.setLastAccessTime(var7);
    org.jsecurity.session.mgt.SimpleSession var9 = new org.jsecurity.session.mgt.SimpleSession();
    java.util.Date var10 = var9.getLastAccessTime();
    var3.setStopTimestamp(var10);
    var0.setLastAccessTime(var10);
    java.io.Serializable var13 = var0.getId();
    var0.stop();
    org.jsecurity.jndi.JndiLocator var15 = new org.jsecurity.jndi.JndiLocator();
    boolean var16 = var15.isResourceRef();
    java.lang.Object var17 = var0.getAttribute((java.lang.Object)var15);
    org.jsecurity.realm.jndi.JndiRealmFactory var18 = new org.jsecurity.realm.jndi.JndiRealmFactory();
    java.util.Collection var19 = var18.getJndiNames();
    org.jsecurity.jndi.JndiTemplate var20 = var18.getJndiTemplate();
    java.util.Properties var21 = var20.getEnvironment();
    var15.setJndiTemplate(var20);
    org.jsecurity.jndi.JndiTemplate var23 = var15.getJndiTemplate();
    org.jsecurity.session.mgt.eis.MemorySessionDAO var26 = new org.jsecurity.session.mgt.eis.MemorySessionDAO();
    org.jsecurity.cache.Cache var27 = var26.getActiveSessionsCache();
    org.jsecurity.cache.CacheManager var28 = var26.getCacheManager();
    org.jsecurity.cache.HashtableCacheManager var29 = new org.jsecurity.cache.HashtableCacheManager();
    org.jsecurity.cache.Cache var31 = var29.getCache("\u0000\u0000");
    var26.setActiveSessionsCache(var31);
    java.io.InputStream var34 = org.jsecurity.util.ClassUtils.getResourceAsStream("");
    java.lang.Object[] var35 = new java.lang.Object[] { var34};
    java.util.List var36 = org.jsecurity.util.CollectionUtils.asList(var35);
    org.jsecurity.authc.pam.ModularRealmAuthenticator var37 = new org.jsecurity.authc.pam.ModularRealmAuthenticator(var36);
    org.jsecurity.authc.pam.AllSuccessfulModularAuthenticationStrategy var38 = new org.jsecurity.authc.pam.AllSuccessfulModularAuthenticationStrategy();
    var37.setModularAuthenticationStrategy((org.jsecurity.authc.pam.ModularAuthenticationStrategy)var38);
    org.jsecurity.authz.SimpleAuthorizationInfo var40 = new org.jsecurity.authz.SimpleAuthorizationInfo();
    var40.addStringPermission("hi!");
    java.io.InputStream var44 = org.jsecurity.util.ClassUtils.getResourceAsStream("");
    java.lang.Object[] var45 = new java.lang.Object[] { var44};
    java.util.List var46 = org.jsecurity.util.CollectionUtils.asList(var45);
    var40.addRoles((java.util.Collection)var46);
    var37.setAuthenticationListeners((java.util.Collection)var46);
    org.jsecurity.realm.activedirectory.ActiveDirectoryRealm var49 = new org.jsecurity.realm.activedirectory.ActiveDirectoryRealm();
    var49.setPrincipalSuffix("");
    var37.setRealm((org.jsecurity.realm.Realm)var49);
    org.jsecurity.cache.HashtableCacheManager var53 = new org.jsecurity.cache.HashtableCacheManager();
    org.jsecurity.cache.Cache var55 = var53.getCache("\u0000\u0000");
    var49.setAuthorizationCache(var55);
    var26.setActiveSessionsCache(var55);
    org.jsecurity.session.mgt.SimpleSession var58 = new org.jsecurity.session.mgt.SimpleSession();
    java.io.Serializable var59 = var26.create((org.jsecurity.session.Session)var58);
    java.io.Serializable var60 = var58.getId();
    org.jsecurity.authc.credential.Md5CredentialsMatcher var61 = new org.jsecurity.authc.credential.Md5CredentialsMatcher();
    boolean var62 = var61.isHashSalted();
    boolean var63 = var61.isHashSalted();
    int var64 = var61.getHashIterations();
    java.lang.Object var65 = var58.removeAttribute((java.lang.Object)var61);
    boolean var66 = var58.isExpired();
    java.util.Date var67 = var58.getStartTimestamp();
    org.jsecurity.session.SessionException var68 = new org.jsecurity.session.SessionException((java.io.Serializable)var58);
    org.jsecurity.authc.UnknownAccountException var69 = new org.jsecurity.authc.UnknownAccountException("f3cec280-b0d4-4d1e-9ce8-a8b745fa003b", (java.lang.Throwable)var68);
    org.jsecurity.authz.AuthorizationException var70 = new org.jsecurity.authz.AuthorizationException((java.lang.Throwable)var69);
    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      var23.bind("jsecurity-activeSessionCache", (java.lang.Object)var69);
      fail("Expected exception of type javax.naming.NoInitialContextException");
    } catch (javax.naming.NoInitialContextException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var7);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var10);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var13);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var16 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var17);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var19);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var20);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var21);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var23);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var27);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var28);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var31);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var34);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var35);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var36);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var44);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var45);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var46);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var55);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var59 + "' != '" + "1234387b-c8d1-4891-9b99-6fce3d38f8eb"+ "'", var59.equals("1234387b-c8d1-4891-9b99-6fce3d38f8eb"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var60 + "' != '" + "1234387b-c8d1-4891-9b99-6fce3d38f8eb"+ "'", var60.equals("1234387b-c8d1-4891-9b99-6fce3d38f8eb"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var62 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var63 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var64 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var65);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var66 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var67);

  }

  public void test349() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest7.test349");


    byte[] var3 = new byte[] { (byte)100, (byte)100, (byte)(-1)};
    java.lang.String var4 = org.jsecurity.codec.CodecSupport.toString(var3);
    char[] var5 = org.jsecurity.codec.CodecSupport.toChars(var3);
    boolean var6 = org.jsecurity.codec.Base64.isBase64(var3);
    char[] var7 = org.jsecurity.codec.CodecSupport.toChars(var3);
    org.jsecurity.authz.SimpleAuthorizingAccount var10 = new org.jsecurity.authz.SimpleAuthorizingAccount((java.lang.Object)var3, (java.lang.Object)"org.jsecurity.subject.SubjectException: dd\uFFFD", "162a4550-2475-4cc9-b393-3917de249d8e");
    var10.setLocked(false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var3);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var4 + "' != '" + "dd\uFFFD"+ "'", var4.equals("dd\uFFFD"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var5);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var6 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var7);

  }

  public void test350() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest7.test350");


    org.jsecurity.session.mgt.DefaultSessionManager var0 = new org.jsecurity.session.mgt.DefaultSessionManager();
    org.jsecurity.mgt.DefaultSecurityManager var1 = new org.jsecurity.mgt.DefaultSecurityManager();
    org.jsecurity.authz.permission.WildcardPermissionResolver var2 = new org.jsecurity.authz.permission.WildcardPermissionResolver();
    var1.setPermissionResolver((org.jsecurity.authz.permission.PermissionResolver)var2);
    org.jsecurity.cache.CacheManager var4 = var1.getCacheManager();
    var0.setCacheManager(var4);
    long var6 = var0.getSessionValidationInterval();
    java.util.Set var8 = org.jsecurity.util.PermissionUtils.toPermissionStrings("e00f87fa-0543-46d5-b69b-14e41add033e");
    var0.setSessionListeners((java.util.Collection)var8);
    org.jsecurity.authc.credential.AllowAllCredentialsMatcher var10 = new org.jsecurity.authc.credential.AllowAllCredentialsMatcher();
    org.jsecurity.authc.UsernamePasswordToken var11 = new org.jsecurity.authc.UsernamePasswordToken();
    java.lang.String var12 = var11.getUsername();
    org.jsecurity.authc.SimpleAccount var13 = new org.jsecurity.authc.SimpleAccount();
    var13.setCredentialsExpired(false);
    var13.setCredentialsExpired(false);
    boolean var18 = var10.doCredentialsMatch((org.jsecurity.authc.AuthenticationToken)var11, (org.jsecurity.authc.AuthenticationInfo)var13);
    var11.clear();
    var11.setRememberMe(true);
    org.jsecurity.session.mgt.DelegatingSession var22 = new org.jsecurity.session.mgt.DelegatingSession((org.jsecurity.session.mgt.SessionManager)var0, (java.io.Serializable)true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var4);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var6 == 3600000L);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var8);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var12);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var18 == true);

  }

  public void test351() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest7.test351");


    org.jsecurity.realm.activedirectory.ActiveDirectoryRealm var0 = new org.jsecurity.realm.activedirectory.ActiveDirectoryRealm();
    var0.init();
    var0.setSystemPassword("dd\uFFFD");
    org.jsecurity.authz.aop.GuestAnnotationHandler var4 = new org.jsecurity.authz.aop.GuestAnnotationHandler();
    java.lang.Class var5 = var4.getAnnotationClass();
    var0.setAuthenticationTokenClass(var5);
    org.jsecurity.mgt.DefaultSecurityManager var7 = new org.jsecurity.mgt.DefaultSecurityManager((org.jsecurity.realm.Realm)var0);
    org.jsecurity.cache.CacheManager var8 = var0.getCacheManager();
    org.jsecurity.realm.text.PropertiesRealm var9 = new org.jsecurity.realm.text.PropertiesRealm(var8);
    var9.setReloadIntervalSeconds(0);
    org.jsecurity.realm.activedirectory.ActiveDirectoryRealm var12 = new org.jsecurity.realm.activedirectory.ActiveDirectoryRealm();
    org.jsecurity.authc.credential.Sha256CredentialsMatcher var13 = new org.jsecurity.authc.credential.Sha256CredentialsMatcher();
    var12.setCredentialsMatcher((org.jsecurity.authc.credential.CredentialsMatcher)var13);
    org.jsecurity.realm.activedirectory.ActiveDirectoryRealm var15 = new org.jsecurity.realm.activedirectory.ActiveDirectoryRealm();
    org.jsecurity.authc.credential.Sha256CredentialsMatcher var16 = new org.jsecurity.authc.credential.Sha256CredentialsMatcher();
    var15.setCredentialsMatcher((org.jsecurity.authc.credential.CredentialsMatcher)var16);
    java.lang.String var18 = var15.getAuthorizationCacheName();
    var15.setUrl("hi!");
    org.jsecurity.realm.ldap.DefaultLdapContextFactory var21 = new org.jsecurity.realm.ldap.DefaultLdapContextFactory();
    var15.setLdapContextFactory((org.jsecurity.realm.ldap.LdapContextFactory)var21);
    var21.setAuthentication("org.jsecurity.authz.UnauthorizedException: org.jsecurity.session.ExpiredSessionException: ");
    var12.setLdapContextFactory((org.jsecurity.realm.ldap.LdapContextFactory)var21);
    var12.setPrincipalSuffix("783ccd31-48a8-42dd-890f-df885a7baaff");
    org.jsecurity.realm.activedirectory.ActiveDirectoryRealm var28 = new org.jsecurity.realm.activedirectory.ActiveDirectoryRealm();
    org.jsecurity.authc.credential.Sha256CredentialsMatcher var29 = new org.jsecurity.authc.credential.Sha256CredentialsMatcher();
    var28.setCredentialsMatcher((org.jsecurity.authc.credential.CredentialsMatcher)var29);
    java.lang.String var31 = var28.getAuthorizationCacheName();
    var28.setUrl("hi!");
    org.jsecurity.realm.ldap.DefaultLdapContextFactory var34 = new org.jsecurity.realm.ldap.DefaultLdapContextFactory();
    var28.setLdapContextFactory((org.jsecurity.realm.ldap.LdapContextFactory)var34);
    org.jsecurity.config.ReflectionBuilder var36 = new org.jsecurity.config.ReflectionBuilder();
    org.jsecurity.io.IniResource var37 = new org.jsecurity.io.IniResource();
    var37.setCharsetName("org.jsecurity.authz.UnauthorizedException: org.jsecurity.session.ExpiredSessionException: ");
    java.util.Map var40 = var37.getSections();
    java.util.Map var41 = var36.buildObjects(var40);
    org.jsecurity.config.ReflectionBuilder var42 = new org.jsecurity.config.ReflectionBuilder();
    org.jsecurity.io.IniResource var43 = new org.jsecurity.io.IniResource();
    var43.setCharsetName("org.jsecurity.authz.UnauthorizedException: org.jsecurity.session.ExpiredSessionException: ");
    java.util.Map var46 = var43.getSections();
    java.util.Map var47 = var42.buildObjects(var46);
    java.util.Map var48 = var36.buildObjects(var47);
    java.util.Map var49 = var36.getObjects();
    var34.setAdditionalEnvironment(var49);
    var12.setLdapContextFactory((org.jsecurity.realm.ldap.LdapContextFactory)var34);
    org.jsecurity.mgt.DefaultSecurityManager var52 = new org.jsecurity.mgt.DefaultSecurityManager((org.jsecurity.realm.Realm)var12);
    java.io.InputStream var54 = org.jsecurity.util.ClassUtils.getResourceAsStream("");
    java.lang.Object[] var55 = new java.lang.Object[] { var54};
    java.util.List var56 = org.jsecurity.util.CollectionUtils.asList(var55);
    org.jsecurity.authc.pam.ModularRealmAuthenticator var57 = new org.jsecurity.authc.pam.ModularRealmAuthenticator(var56);
    org.jsecurity.subject.SimplePrincipalCollection var59 = new org.jsecurity.subject.SimplePrincipalCollection((java.util.Collection)var56, "org.jsecurity.authz.UnauthorizedException: org.jsecurity.session.ExpiredSessionException: ");
    org.jsecurity.session.UnknownSessionException var64 = new org.jsecurity.session.UnknownSessionException("dd\uFFFD", (java.io.Serializable)100.0f);
    org.jsecurity.session.SessionException var66 = new org.jsecurity.session.SessionException("dd\uFFFD", (java.lang.Throwable)var64, (java.io.Serializable)0);
    org.jsecurity.session.SessionException var67 = new org.jsecurity.session.SessionException("dd\uFFFD", (java.lang.Throwable)var64);
    var59.add((java.lang.Object)var67, "org.jsecurity.config.ConfigurationException: dd\uFFFD");
    var52.logout((org.jsecurity.subject.PrincipalCollection)var59);
    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      var9.checkPermission((org.jsecurity.subject.PrincipalCollection)var59, "44126908-8346-4f1c-92de-726997ba95f5");
      fail("Expected exception of type java.util.NoSuchElementException");
    } catch (java.util.NoSuchElementException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var5);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var8);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var18);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var31);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var40);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var41);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var46);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var47);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var48);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var49);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var54);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var55);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var56);

  }

  public void test352() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest7.test352");


    org.jsecurity.realm.SimpleAccountRealm var1 = new org.jsecurity.realm.SimpleAccountRealm("2c16a117-2525-40ed-945d-e65e6d5a4546");

  }

  public void test353() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest7.test353");


    org.jsecurity.jndi.JndiLocator var0 = new org.jsecurity.jndi.JndiLocator();
    boolean var1 = var0.isResourceRef();
    java.util.Properties var2 = var0.getJndiEnvironment();
    org.jsecurity.realm.jndi.JndiRealmFactory var3 = new org.jsecurity.realm.jndi.JndiRealmFactory();
    java.util.Collection var4 = var3.getJndiNames();
    var3.setJndiNames("e8e5d499-33c0-418e-93f9-76a51372c414");
    org.jsecurity.jndi.JndiTemplate var7 = var3.getJndiTemplate();
    var0.setJndiTemplate(var7);
    org.jsecurity.jndi.JndiTemplate var9 = var0.getJndiTemplate();
    java.util.Properties var10 = var9.getEnvironment();
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var1 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var2);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var4);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var7);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var9);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var10);

  }

  public void test354() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest7.test354");


    java.lang.String[] var6 = org.jsecurity.util.StringUtils.split("7fc15b23-d5a7-46fa-afed-9cd42a82c334", ' ', 'a', 'a', true, true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var6);

  }

  public void test355() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest7.test355");


    org.jsecurity.util.UnavailableConstructorException var2 = new org.jsecurity.util.UnavailableConstructorException("57f108f5-de1f-46bc-a431-6c2563f95e22");
    org.jsecurity.authz.SimpleAuthorizationInfo var4 = new org.jsecurity.authz.SimpleAuthorizationInfo();
    var4.addStringPermission("hi!");
    org.jsecurity.authz.SimpleAuthorizationInfo var8 = new org.jsecurity.authz.SimpleAuthorizationInfo();
    org.jsecurity.session.UnknownSessionException var13 = new org.jsecurity.session.UnknownSessionException("dd\uFFFD", (java.io.Serializable)100.0f);
    org.jsecurity.subject.SubjectException var14 = new org.jsecurity.subject.SubjectException("dd\uFFFD", (java.lang.Throwable)var13);
    org.jsecurity.io.SerializationException var15 = new org.jsecurity.io.SerializationException("", (java.lang.Throwable)var14);
    java.lang.Throwable[] var16 = var14.getSuppressed();
    java.util.Set var17 = org.jsecurity.util.CollectionUtils.asSet((java.lang.Object[])var16);
    var8.setStringPermissions(var17);
    org.jsecurity.authz.SimpleRole var19 = new org.jsecurity.authz.SimpleRole("\u0000\u0000", var17);
    var4.setRoles(var17);
    java.util.Set var21 = var4.getStringPermissions();
    org.jsecurity.authz.SimpleAuthorizationInfo var23 = new org.jsecurity.authz.SimpleAuthorizationInfo();
    org.jsecurity.session.UnknownSessionException var28 = new org.jsecurity.session.UnknownSessionException("dd\uFFFD", (java.io.Serializable)100.0f);
    org.jsecurity.subject.SubjectException var29 = new org.jsecurity.subject.SubjectException("dd\uFFFD", (java.lang.Throwable)var28);
    org.jsecurity.io.SerializationException var30 = new org.jsecurity.io.SerializationException("", (java.lang.Throwable)var29);
    java.lang.Throwable[] var31 = var29.getSuppressed();
    java.util.Set var32 = org.jsecurity.util.CollectionUtils.asSet((java.lang.Object[])var31);
    var23.setStringPermissions(var32);
    org.jsecurity.authz.SimpleRole var34 = new org.jsecurity.authz.SimpleRole("\u0000\u0000", var32);
    org.jsecurity.authz.SimpleAuthorizingAccount var35 = new org.jsecurity.authz.SimpleAuthorizingAccount((java.lang.Object)"bd696b5e-ea64-4a8d-ba4d-8fc2a60ac011", (java.lang.Object)"57f108f5-de1f-46bc-a431-6c2563f95e22", "7ac52728-a594-485e-8fa4-b9d179454b9f", var21, var32);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var16);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var17);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var21);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var31);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var32);

  }

  public void test356() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest7.test356");


    org.jsecurity.mgt.DefaultSecurityManager var0 = new org.jsecurity.mgt.DefaultSecurityManager();
    org.jsecurity.realm.text.TextConfigurationRealm var1 = new org.jsecurity.realm.text.TextConfigurationRealm();
    org.jsecurity.realm.text.TextConfigurationRealm var2 = new org.jsecurity.realm.text.TextConfigurationRealm();
    java.io.InputStream var4 = org.jsecurity.util.ClassUtils.getResourceAsStream("");
    java.lang.Object[] var5 = new java.lang.Object[] { var4};
    java.util.List var6 = org.jsecurity.util.CollectionUtils.asList(var5);
    org.jsecurity.authc.pam.ModularRealmAuthenticator var7 = new org.jsecurity.authc.pam.ModularRealmAuthenticator(var6);
    org.jsecurity.subject.SimplePrincipalCollection var9 = new org.jsecurity.subject.SimplePrincipalCollection((java.util.Collection)var6, "org.jsecurity.authz.UnauthorizedException: org.jsecurity.session.ExpiredSessionException: ");
    org.jsecurity.session.UnknownSessionException var14 = new org.jsecurity.session.UnknownSessionException("dd\uFFFD", (java.io.Serializable)100.0f);
    org.jsecurity.session.SessionException var16 = new org.jsecurity.session.SessionException("dd\uFFFD", (java.lang.Throwable)var14, (java.io.Serializable)0);
    org.jsecurity.session.SessionException var17 = new org.jsecurity.session.SessionException("dd\uFFFD", (java.lang.Throwable)var14);
    var9.add((java.lang.Object)var17, "org.jsecurity.config.ConfigurationException: dd\uFFFD");
    var2.onLogout((org.jsecurity.subject.PrincipalCollection)var9);
    java.util.Collection var22 = var9.fromRealm("\u0000\u0000\u0000");
    var1.onLogout((org.jsecurity.subject.PrincipalCollection)var9);
    java.util.Set var24 = var9.asSet();
    org.jsecurity.realm.activedirectory.ActiveDirectoryRealm var25 = new org.jsecurity.realm.activedirectory.ActiveDirectoryRealm();
    org.jsecurity.authc.credential.Sha256CredentialsMatcher var26 = new org.jsecurity.authc.credential.Sha256CredentialsMatcher();
    var25.setCredentialsMatcher((org.jsecurity.authc.credential.CredentialsMatcher)var26);
    java.lang.String var28 = var25.getAuthorizationCacheName();
    var25.setPrincipalSuffix("org.jsecurity.config.ConfigurationException: dd\uFFFD");
    org.jsecurity.realm.text.TextConfigurationRealm var31 = new org.jsecurity.realm.text.TextConfigurationRealm();
    java.io.InputStream var33 = org.jsecurity.util.ClassUtils.getResourceAsStream("");
    java.lang.Object[] var34 = new java.lang.Object[] { var33};
    java.util.List var35 = org.jsecurity.util.CollectionUtils.asList(var34);
    org.jsecurity.authc.pam.ModularRealmAuthenticator var36 = new org.jsecurity.authc.pam.ModularRealmAuthenticator(var35);
    org.jsecurity.subject.SimplePrincipalCollection var38 = new org.jsecurity.subject.SimplePrincipalCollection((java.util.Collection)var35, "org.jsecurity.authz.UnauthorizedException: org.jsecurity.session.ExpiredSessionException: ");
    org.jsecurity.session.UnknownSessionException var43 = new org.jsecurity.session.UnknownSessionException("dd\uFFFD", (java.io.Serializable)100.0f);
    org.jsecurity.session.SessionException var45 = new org.jsecurity.session.SessionException("dd\uFFFD", (java.lang.Throwable)var43, (java.io.Serializable)0);
    org.jsecurity.session.SessionException var46 = new org.jsecurity.session.SessionException("dd\uFFFD", (java.lang.Throwable)var43);
    var38.add((java.lang.Object)var46, "org.jsecurity.config.ConfigurationException: dd\uFFFD");
    var31.onLogout((org.jsecurity.subject.PrincipalCollection)var38);
    var25.onLogout((org.jsecurity.subject.PrincipalCollection)var38);
    org.jsecurity.realm.SimpleAccountRealm var52 = new org.jsecurity.realm.SimpleAccountRealm("hi!");
    java.lang.Class var53 = var52.getAuthenticationTokenClass();
    java.util.Collection var54 = org.jsecurity.util.CollectionUtils.emptyCollection(var53);
    java.util.Collection var55 = var38.byType(var53);
    org.jsecurity.authz.ModularRealmAuthorizer var56 = new org.jsecurity.authz.ModularRealmAuthorizer(var55);
    var0.checkRoles((org.jsecurity.subject.PrincipalCollection)var9, var55);
    org.jsecurity.session.mgt.SessionManager var58 = var0.getSessionManager();
    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      var0.setRememberMeCipherKeyBase64("5bf58f6a-9df6-4e91-9123-f0de4d0e543e");
      fail("Expected exception of type java.lang.IllegalStateException");
    } catch (java.lang.IllegalStateException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var4);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var5);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var6);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var22);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var24);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var28);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var33);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var34);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var35);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var53);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var54);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var55);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var58);

  }

  public void test357() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest7.test357");


    org.jsecurity.session.UnknownSessionException var5 = new org.jsecurity.session.UnknownSessionException("dd\uFFFD", (java.io.Serializable)100.0f);
    org.jsecurity.subject.SubjectException var6 = new org.jsecurity.subject.SubjectException("dd\uFFFD", (java.lang.Throwable)var5);
    org.jsecurity.authc.AccountException var7 = new org.jsecurity.authc.AccountException("hi!", (java.lang.Throwable)var6);
    org.jsecurity.session.StoppedSessionException var8 = new org.jsecurity.session.StoppedSessionException((java.lang.Throwable)var7);
    org.jsecurity.JSecurityException var9 = new org.jsecurity.JSecurityException((java.lang.Throwable)var7);
    org.jsecurity.session.InvalidSessionException var10 = new org.jsecurity.session.InvalidSessionException((java.lang.Throwable)var7);
    org.jsecurity.authz.UnauthorizedException var14 = new org.jsecurity.authz.UnauthorizedException();
    org.jsecurity.session.SessionException var16 = new org.jsecurity.session.SessionException("", (java.lang.Throwable)var14, (java.io.Serializable)"org.jsecurity.config.ConfigurationException: dd\uFFFD");
    org.jsecurity.session.ExpiredSessionException var17 = new org.jsecurity.session.ExpiredSessionException("", (java.io.Serializable)"");
    org.jsecurity.session.UnknownSessionException var18 = new org.jsecurity.session.UnknownSessionException("5dd0c65d-1422-49c2-becb-9e8dca619ab3", (java.lang.Throwable)var17);
    var10.addSuppressed((java.lang.Throwable)var18);
    org.jsecurity.util.UnknownClassException var21 = new org.jsecurity.util.UnknownClassException("org.jsecurity.realm.SimpleAccountRealm-55-authorization");
    var18.addSuppressed((java.lang.Throwable)var21);
    org.jsecurity.authz.HostUnauthorizedException var23 = new org.jsecurity.authz.HostUnauthorizedException("3162ca5e-c516-4ad8-9ca6-6ff0939bd5a6", (java.lang.Throwable)var18);

  }

  public void test358() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest7.test358");


    org.jsecurity.session.mgt.eis.MemorySessionDAO var0 = new org.jsecurity.session.mgt.eis.MemorySessionDAO();
    org.jsecurity.cache.Cache var1 = var0.getActiveSessionsCache();
    var0.setActiveSessionsCacheName("dd\uFFFD");
    java.util.Collection var4 = var0.getActiveSessions();
    var0.setActiveSessionsCacheName("org.jsecurity.config.ConfigurationException: dd\uFFFD");
    var0.setActiveSessionsCacheName("79436e99-d45a-4bcc-9cbf-0fddb7998f7c");
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var1);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var4);

  }

  public void test359() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest7.test359");


    org.jsecurity.util.AntPathMatcher var0 = new org.jsecurity.util.AntPathMatcher();
    boolean var3 = var0.matchStart("org.jsecurity.authc.IncorrectCredentialsException: \u0000\u0000", "ZGT/");
    boolean var5 = var0.isPattern("ecd29e3a-c551-4fce-8683-2e49992d04b8");
    java.lang.String var8 = var0.extractPathWithinPattern("HashtableCache [5dd0c65d-1422-49c2-becb-9e8dca619ab3]", "7e3919c4-0808-4dc3-b5c9-76633af849b7");
    var0.setPathSeparator("6a5b7ded-2d92-483a-a150-15fb6ef90177");
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var3 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var5 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var8 + "' != '" + ""+ "'", var8.equals(""));

  }

  public void test360() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest7.test360");


    org.jsecurity.io.IniResource var1 = new org.jsecurity.io.IniResource();
    java.lang.String var2 = var1.getCharsetName();
    org.jsecurity.session.UnknownSessionException var3 = new org.jsecurity.session.UnknownSessionException("", (java.io.Serializable)var1);
    java.lang.String var4 = var1.getCharsetName();
    java.lang.String var5 = var1.getCharsetName();
    java.io.InputStream var7 = org.jsecurity.util.ClassUtils.getResourceAsStream("");
    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      var1.load(var7);
      fail("Expected exception of type org.jsecurity.io.ResourceException");
    } catch (org.jsecurity.io.ResourceException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var2);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var4);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var5);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var7);

  }

  public void test361() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest7.test361");


    org.jsecurity.authc.pam.UnsupportedTokenException var1 = new org.jsecurity.authc.pam.UnsupportedTokenException("cd36f498-f38d-4674-b2a0-133466239aaf");

  }

  public void test362() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest7.test362");


    org.jsecurity.session.mgt.DefaultSessionManager var0 = new org.jsecurity.session.mgt.DefaultSessionManager();
    org.jsecurity.session.mgt.eis.MemorySessionDAO var1 = new org.jsecurity.session.mgt.eis.MemorySessionDAO();
    org.jsecurity.cache.Cache var2 = var1.getActiveSessionsCache();
    org.jsecurity.cache.CacheManager var3 = var1.getCacheManager();
    org.jsecurity.cache.HashtableCacheManager var4 = new org.jsecurity.cache.HashtableCacheManager();
    org.jsecurity.cache.Cache var6 = var4.getCache("\u0000\u0000");
    var1.setActiveSessionsCache(var6);
    java.io.InputStream var9 = org.jsecurity.util.ClassUtils.getResourceAsStream("");
    java.lang.Object[] var10 = new java.lang.Object[] { var9};
    java.util.List var11 = org.jsecurity.util.CollectionUtils.asList(var10);
    org.jsecurity.authc.pam.ModularRealmAuthenticator var12 = new org.jsecurity.authc.pam.ModularRealmAuthenticator(var11);
    org.jsecurity.authc.pam.AllSuccessfulModularAuthenticationStrategy var13 = new org.jsecurity.authc.pam.AllSuccessfulModularAuthenticationStrategy();
    var12.setModularAuthenticationStrategy((org.jsecurity.authc.pam.ModularAuthenticationStrategy)var13);
    org.jsecurity.authz.SimpleAuthorizationInfo var15 = new org.jsecurity.authz.SimpleAuthorizationInfo();
    var15.addStringPermission("hi!");
    java.io.InputStream var19 = org.jsecurity.util.ClassUtils.getResourceAsStream("");
    java.lang.Object[] var20 = new java.lang.Object[] { var19};
    java.util.List var21 = org.jsecurity.util.CollectionUtils.asList(var20);
    var15.addRoles((java.util.Collection)var21);
    var12.setAuthenticationListeners((java.util.Collection)var21);
    org.jsecurity.realm.activedirectory.ActiveDirectoryRealm var24 = new org.jsecurity.realm.activedirectory.ActiveDirectoryRealm();
    var24.setPrincipalSuffix("");
    var12.setRealm((org.jsecurity.realm.Realm)var24);
    org.jsecurity.cache.HashtableCacheManager var28 = new org.jsecurity.cache.HashtableCacheManager();
    org.jsecurity.cache.Cache var30 = var28.getCache("\u0000\u0000");
    var24.setAuthorizationCache(var30);
    var1.setActiveSessionsCache(var30);
    org.jsecurity.session.mgt.SimpleSession var33 = new org.jsecurity.session.mgt.SimpleSession();
    java.io.Serializable var34 = var1.create((org.jsecurity.session.Session)var33);
    var0.setSessionDAO((org.jsecurity.session.mgt.eis.SessionDAO)var1);
    org.jsecurity.authc.pam.AllSuccessfulModularAuthenticationStrategy var36 = new org.jsecurity.authc.pam.AllSuccessfulModularAuthenticationStrategy();
    char[] var38 = new char[] { };
    org.jsecurity.authc.UsernamePasswordToken var40 = new org.jsecurity.authc.UsernamePasswordToken("hi!", var38, true);
    org.jsecurity.authc.SimpleAccount var41 = new org.jsecurity.authc.SimpleAccount();
    var41.setCredentialsExpired(false);
    boolean var44 = var41.isLocked();
    org.jsecurity.authc.AuthenticationInfo var45 = var36.afterAllAttempts((org.jsecurity.authc.AuthenticationToken)var40, (org.jsecurity.authc.AuthenticationInfo)var41);
    char[] var49 = new char[] { '4', '#'};
    org.jsecurity.authc.UsernamePasswordToken var50 = new org.jsecurity.authc.UsernamePasswordToken("\u0000\u0000", var49);
    org.jsecurity.authc.SimpleAccount var51 = new org.jsecurity.authc.SimpleAccount();
    var51.setCredentialsExpired(false);
    var51.setCredentialsExpired(false);
    boolean var56 = var51.isCredentialsExpired();
    org.jsecurity.authc.AuthenticationInfo var57 = var36.afterAllAttempts((org.jsecurity.authc.AuthenticationToken)var50, (org.jsecurity.authc.AuthenticationInfo)var51);
    org.jsecurity.realm.activedirectory.ActiveDirectoryRealm var58 = new org.jsecurity.realm.activedirectory.ActiveDirectoryRealm();
    org.jsecurity.authc.credential.Sha256CredentialsMatcher var59 = new org.jsecurity.authc.credential.Sha256CredentialsMatcher();
    var58.setCredentialsMatcher((org.jsecurity.authc.credential.CredentialsMatcher)var59);
    java.lang.String var61 = var58.getAuthorizationCacheName();
    org.jsecurity.authc.UsernamePasswordToken var62 = new org.jsecurity.authc.UsernamePasswordToken();
    java.lang.String var63 = var62.getUsername();
    java.lang.Object var64 = var62.getPrincipal();
    boolean var65 = var58.supports((org.jsecurity.authc.AuthenticationToken)var62);
    org.jsecurity.session.UnknownSessionException var69 = new org.jsecurity.session.UnknownSessionException("dd\uFFFD", (java.io.Serializable)100.0f);
    org.jsecurity.session.SessionException var71 = new org.jsecurity.session.SessionException("dd\uFFFD", (java.lang.Throwable)var69, (java.io.Serializable)0);
    org.jsecurity.authc.SimpleAuthenticationInfo var74 = new org.jsecurity.authc.SimpleAuthenticationInfo((java.lang.Object)0, (java.lang.Object)10, "hi!");
    java.lang.Object var75 = var74.getCredentials();
    java.lang.String var76 = var74.toString();
    org.jsecurity.authc.AuthenticationInfo var77 = var36.afterAllAttempts((org.jsecurity.authc.AuthenticationToken)var62, (org.jsecurity.authc.AuthenticationInfo)var74);
    org.jsecurity.session.mgt.eis.MemorySessionDAO var78 = new org.jsecurity.session.mgt.eis.MemorySessionDAO();
    org.jsecurity.cache.Cache var79 = var78.getActiveSessionsCache();
    var78.setActiveSessionsCacheName("dd\uFFFD");
    var74.setCredentials((java.lang.Object)var78);
    var0.setSessionDAO((org.jsecurity.session.mgt.eis.SessionDAO)var78);
    org.jsecurity.session.mgt.quartz.QuartzSessionValidationScheduler var84 = new org.jsecurity.session.mgt.quartz.QuartzSessionValidationScheduler();
    var0.setSessionValidationScheduler((org.jsecurity.session.mgt.SessionValidationScheduler)var84);
    var84.setSessionValidationInterval(1L);
    var84.disableSessionValidation();
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var2);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var3);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var6);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var9);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var10);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var11);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var19);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var20);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var21);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var30);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var34 + "' != '" + "8f495982-dacc-434d-bd45-03d804527ab7"+ "'", var34.equals("8f495982-dacc-434d-bd45-03d804527ab7"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var38);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var44 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var45);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var49);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var56 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var57);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var61);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var63);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var64);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var65 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var75 + "' != '" + 10+ "'", var75.equals(10));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var77);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var79);

  }

  public void test363() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest7.test363");


    org.jsecurity.config.ReflectionBuilder var0 = new org.jsecurity.config.ReflectionBuilder();
    org.jsecurity.io.IniResource var1 = new org.jsecurity.io.IniResource();
    var1.setCharsetName("org.jsecurity.authz.UnauthorizedException: org.jsecurity.session.ExpiredSessionException: ");
    java.util.Map var4 = var1.getSections();
    java.util.Map var5 = var0.buildObjects(var4);
    org.jsecurity.config.ReflectionBuilder var6 = new org.jsecurity.config.ReflectionBuilder();
    org.jsecurity.io.IniResource var7 = new org.jsecurity.io.IniResource();
    var7.setCharsetName("org.jsecurity.authz.UnauthorizedException: org.jsecurity.session.ExpiredSessionException: ");
    java.util.Map var10 = var7.getSections();
    java.util.Map var11 = var6.buildObjects(var10);
    org.jsecurity.config.ReflectionBuilder var12 = new org.jsecurity.config.ReflectionBuilder();
    org.jsecurity.io.IniResource var13 = new org.jsecurity.io.IniResource();
    var13.setCharsetName("org.jsecurity.authz.UnauthorizedException: org.jsecurity.session.ExpiredSessionException: ");
    java.util.Map var16 = var13.getSections();
    java.util.Map var17 = var12.buildObjects(var16);
    java.util.Map var18 = var6.buildObjects(var17);
    java.util.Map var19 = var6.getObjects();
    org.jsecurity.config.ReflectionBuilder var20 = new org.jsecurity.config.ReflectionBuilder(var19);
    org.jsecurity.session.mgt.SimpleSession var21 = new org.jsecurity.session.mgt.SimpleSession();
    org.jsecurity.io.SerializationException var24 = new org.jsecurity.io.SerializationException("org.jsecurity.config.ConfigurationException: dd\uFFFD");
    org.jsecurity.authc.AccountException var25 = new org.jsecurity.authc.AccountException("a2b823b1e72eae2b727289df8a00a89df8a0bab6ad8a89c4c5c7a9b62a270000", (java.lang.Throwable)var24);
    var21.setId((java.io.Serializable)"a2b823b1e72eae2b727289df8a00a89df8a0bab6ad8a89c4c5c7a9b62a270000");
    org.jsecurity.config.ReflectionBuilder var27 = new org.jsecurity.config.ReflectionBuilder();
    org.jsecurity.config.ReflectionBuilder var28 = new org.jsecurity.config.ReflectionBuilder();
    org.jsecurity.io.IniResource var29 = new org.jsecurity.io.IniResource();
    var29.setCharsetName("org.jsecurity.authz.UnauthorizedException: org.jsecurity.session.ExpiredSessionException: ");
    java.util.Map var32 = var29.getSections();
    java.util.Map var33 = var28.buildObjects(var32);
    org.jsecurity.config.ReflectionBuilder var34 = new org.jsecurity.config.ReflectionBuilder();
    org.jsecurity.io.IniResource var35 = new org.jsecurity.io.IniResource();
    var35.setCharsetName("org.jsecurity.authz.UnauthorizedException: org.jsecurity.session.ExpiredSessionException: ");
    java.util.Map var38 = var35.getSections();
    java.util.Map var39 = var34.buildObjects(var38);
    java.util.Map var40 = var28.buildObjects(var39);
    java.util.Map var41 = var27.buildObjects(var40);
    var21.setAttributes(var41);
    var20.setObjects(var41);
    org.jsecurity.realm.ldap.DefaultLdapContextFactory var44 = new org.jsecurity.realm.ldap.DefaultLdapContextFactory();
    org.jsecurity.io.IniResource var45 = new org.jsecurity.io.IniResource();
    var45.setCharsetName("org.jsecurity.authz.UnauthorizedException: org.jsecurity.session.ExpiredSessionException: ");
    java.util.Map var48 = var45.getSections();
    var44.setAdditionalEnvironment(var48);
    var20.setObjects(var48);
    java.lang.String[] var56 = org.jsecurity.util.StringUtils.split("org.jsecurity.realm.text.TextConfigurationRealm_445", 'a', ' ', ' ');
    java.util.Set var57 = org.jsecurity.util.CollectionUtils.asSet((java.lang.Object[])var56);
    java.util.Set var59 = org.jsecurity.util.PermissionUtils.toPermissionStrings("org.jsecurity.config.ConfigurationException: dd\uFFFD");
    org.jsecurity.authz.SimpleAuthorizationInfo var60 = new org.jsecurity.authz.SimpleAuthorizationInfo(var59);
    org.jsecurity.authz.SimpleAuthorizingAccount var61 = new org.jsecurity.authz.SimpleAuthorizingAccount((java.lang.Object)var0, (java.lang.Object)var20, "ff1bb54d-80f9-4308-a260-ff3ddf1355e9", var57, var59);
    org.jsecurity.authz.SimpleAuthorizationInfo var62 = new org.jsecurity.authz.SimpleAuthorizationInfo();
    var62.addRole("a2b823b1e72eae2b727289df8a00a89df8a0bab6ad8a89c4c5c7a9b62a270000");
    org.jsecurity.session.UnknownSessionException var69 = new org.jsecurity.session.UnknownSessionException("dd\uFFFD", (java.io.Serializable)100.0f);
    org.jsecurity.subject.SubjectException var70 = new org.jsecurity.subject.SubjectException("dd\uFFFD", (java.lang.Throwable)var69);
    org.jsecurity.io.SerializationException var71 = new org.jsecurity.io.SerializationException("", (java.lang.Throwable)var70);
    java.lang.Throwable[] var72 = var70.getSuppressed();
    java.util.Set var73 = org.jsecurity.util.CollectionUtils.asSet((java.lang.Object[])var72);
    var62.addRoles((java.util.Collection)var73);
    org.jsecurity.realm.activedirectory.ActiveDirectoryRealm var75 = new org.jsecurity.realm.activedirectory.ActiveDirectoryRealm();
    var75.init();
    var75.setSystemPassword("dd\uFFFD");
    org.jsecurity.authz.aop.GuestAnnotationHandler var79 = new org.jsecurity.authz.aop.GuestAnnotationHandler();
    java.lang.Class var80 = var79.getAnnotationClass();
    var75.setAuthenticationTokenClass(var80);
    java.util.Collection var82 = org.jsecurity.util.CollectionUtils.emptyCollection(var80);
    var62.addStringPermissions(var82);
    var61.addAll(var82);
    java.lang.String var85 = var61.toString();
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var4);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var5);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var10);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var11);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var16);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var17);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var18);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var19);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var32);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var33);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var38);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var39);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var40);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var41);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var48);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var56);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var57);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var59);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var72);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var73);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var80);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var82);

  }

  public void test364() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest7.test364");


    org.jsecurity.realm.activedirectory.ActiveDirectoryRealm var0 = new org.jsecurity.realm.activedirectory.ActiveDirectoryRealm();
    var0.initAuthorizationCache();
    var0.setSearchBase("dd\uFFFD");
    var0.setSystemUsername("");
    var0.setPrincipalSuffix("1a1fe717-b2f7-4a28-9cfa-6f3955b8b913");

  }

  public void test365() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest7.test365");


    org.jsecurity.session.UnknownSessionException var7 = new org.jsecurity.session.UnknownSessionException("dd\uFFFD", (java.io.Serializable)100.0f);
    org.jsecurity.config.ConfigurationException var8 = new org.jsecurity.config.ConfigurationException("dd\uFFFD", (java.lang.Throwable)var7);
    org.jsecurity.session.ExpiredSessionException var10 = new org.jsecurity.session.ExpiredSessionException("", (java.lang.Throwable)var8, (java.io.Serializable)true);
    org.jsecurity.authc.pam.UnsupportedTokenException var11 = new org.jsecurity.authc.pam.UnsupportedTokenException((java.lang.Throwable)var10);
    org.jsecurity.authc.AccountException var12 = new org.jsecurity.authc.AccountException((java.lang.Throwable)var11);
    org.jsecurity.authz.UnauthorizedException var13 = new org.jsecurity.authz.UnauthorizedException("a2b823b1e72eae2b727289df8a00a89df8a0bab6ad8a89c4c5c7a9b62a270000", (java.lang.Throwable)var12);
    org.jsecurity.codec.CodecException var16 = new org.jsecurity.codec.CodecException("dd\uFFFD");
    org.jsecurity.authc.ConcurrentAccessException var17 = new org.jsecurity.authc.ConcurrentAccessException("org.jsecurity.authz.UnauthorizedException: org.jsecurity.session.ExpiredSessionException: ", (java.lang.Throwable)var16);
    org.jsecurity.subject.SimplePrincipalCollection var19 = new org.jsecurity.subject.SimplePrincipalCollection((java.lang.Object)var16, "");
    java.io.InputStream var21 = org.jsecurity.util.ClassUtils.getResourceAsStream("");
    java.lang.Object[] var22 = new java.lang.Object[] { var21};
    java.util.List var23 = org.jsecurity.util.CollectionUtils.asList(var22);
    org.jsecurity.authc.pam.ModularRealmAuthenticator var24 = new org.jsecurity.authc.pam.ModularRealmAuthenticator(var23);
    org.jsecurity.authc.pam.AllSuccessfulModularAuthenticationStrategy var25 = new org.jsecurity.authc.pam.AllSuccessfulModularAuthenticationStrategy();
    var24.setModularAuthenticationStrategy((org.jsecurity.authc.pam.ModularAuthenticationStrategy)var25);
    org.jsecurity.authz.SimpleAuthorizationInfo var27 = new org.jsecurity.authz.SimpleAuthorizationInfo();
    var27.addStringPermission("hi!");
    java.io.InputStream var31 = org.jsecurity.util.ClassUtils.getResourceAsStream("");
    java.lang.Object[] var32 = new java.lang.Object[] { var31};
    java.util.List var33 = org.jsecurity.util.CollectionUtils.asList(var32);
    var27.addRoles((java.util.Collection)var33);
    var24.setAuthenticationListeners((java.util.Collection)var33);
    org.jsecurity.realm.activedirectory.ActiveDirectoryRealm var36 = new org.jsecurity.realm.activedirectory.ActiveDirectoryRealm();
    var36.setPrincipalSuffix("");
    var24.setRealm((org.jsecurity.realm.Realm)var36);
    org.jsecurity.authc.pam.FirstSuccessfulAuthenticationStrategy var40 = new org.jsecurity.authc.pam.FirstSuccessfulAuthenticationStrategy();
    org.jsecurity.authz.UnauthorizedException var42 = new org.jsecurity.authz.UnauthorizedException("org.jsecurity.config.ConfigurationException: dd\uFFFD");
    java.lang.Throwable[] var43 = var42.getSuppressed();
    java.util.List var44 = org.jsecurity.util.CollectionUtils.asList((java.lang.Object[])var43);
    org.jsecurity.authc.UsernamePasswordToken var45 = new org.jsecurity.authc.UsernamePasswordToken();
    java.lang.String var46 = var45.getUsername();
    java.net.InetAddress var47 = var45.getInetAddress();
    org.jsecurity.authc.AuthenticationInfo var48 = var40.beforeAllAttempts((java.util.Collection)var44, (org.jsecurity.authc.AuthenticationToken)var45);
    var24.setModularAuthenticationStrategy((org.jsecurity.authc.pam.ModularAuthenticationStrategy)var40);
    org.jsecurity.authc.SimpleAccount var50 = new org.jsecurity.authc.SimpleAccount((org.jsecurity.subject.PrincipalCollection)var19, (java.lang.Object)var24);
    java.util.Collection var51 = var50.getObjectPermissions();
    java.util.Collection var52 = var50.getObjectPermissions();
    org.jsecurity.codec.CodecException var55 = new org.jsecurity.codec.CodecException("dd\uFFFD");
    org.jsecurity.authc.ConcurrentAccessException var56 = new org.jsecurity.authc.ConcurrentAccessException("org.jsecurity.authz.UnauthorizedException: org.jsecurity.session.ExpiredSessionException: ", (java.lang.Throwable)var55);
    org.jsecurity.subject.SimplePrincipalCollection var58 = new org.jsecurity.subject.SimplePrincipalCollection((java.lang.Object)var55, "");
    org.jsecurity.authc.pam.FirstSuccessfulAuthenticationStrategy var59 = new org.jsecurity.authc.pam.FirstSuccessfulAuthenticationStrategy();
    org.jsecurity.authz.UnauthorizedException var61 = new org.jsecurity.authz.UnauthorizedException("org.jsecurity.config.ConfigurationException: dd\uFFFD");
    java.lang.Throwable[] var62 = var61.getSuppressed();
    java.util.List var63 = org.jsecurity.util.CollectionUtils.asList((java.lang.Object[])var62);
    org.jsecurity.authc.UsernamePasswordToken var64 = new org.jsecurity.authc.UsernamePasswordToken();
    java.lang.String var65 = var64.getUsername();
    java.net.InetAddress var66 = var64.getInetAddress();
    org.jsecurity.authc.AuthenticationInfo var67 = var59.beforeAllAttempts((java.util.Collection)var63, (org.jsecurity.authc.AuthenticationToken)var64);
    org.jsecurity.session.UnknownSessionException var72 = new org.jsecurity.session.UnknownSessionException("dd\uFFFD", (java.io.Serializable)100.0f);
    org.jsecurity.subject.SubjectException var73 = new org.jsecurity.subject.SubjectException("dd\uFFFD", (java.lang.Throwable)var72);
    org.jsecurity.io.SerializationException var74 = new org.jsecurity.io.SerializationException("", (java.lang.Throwable)var73);
    java.lang.Throwable[] var75 = var73.getSuppressed();
    java.util.Set var76 = org.jsecurity.util.CollectionUtils.asSet((java.lang.Object[])var75);
    org.jsecurity.authc.SimpleAccount var77 = new org.jsecurity.authc.SimpleAccount((org.jsecurity.subject.PrincipalCollection)var58, (java.lang.Object)var63, var76);
    var50.setObjectPermissions(var76);
    org.jsecurity.session.UnknownSessionException var79 = new org.jsecurity.session.UnknownSessionException("b598ff3d-5685-4491-8ee6-585d37adb1db", (java.lang.Throwable)var13, (java.io.Serializable)var50);
    org.jsecurity.session.SessionException var81 = new org.jsecurity.session.SessionException("def3bb13-1c13-4efd-8418-6ca61c15cbd6", (java.lang.Throwable)var79, (java.io.Serializable)"564db307-e199-4da1-9704-40a58de1f2a8");
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var21);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var22);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var23);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var31);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var32);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var33);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var43);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var44);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var46);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var47);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var48);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var51);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var52);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var62);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var63);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var65);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var66);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var67);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var75);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var76);

  }

  public void test366() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest7.test366");


    org.jsecurity.session.mgt.DefaultSessionManager var0 = new org.jsecurity.session.mgt.DefaultSessionManager();
    org.jsecurity.session.mgt.quartz.QuartzSessionValidationScheduler var1 = new org.jsecurity.session.mgt.quartz.QuartzSessionValidationScheduler();
    boolean var2 = var1.isEnabled();
    var1.enableSessionValidation();
    var0.setSessionValidationScheduler((org.jsecurity.session.mgt.SessionValidationScheduler)var1);
    var1.disableSessionValidation();
    org.jsecurity.session.mgt.DefaultSessionManager var6 = new org.jsecurity.session.mgt.DefaultSessionManager();
    org.jsecurity.session.mgt.eis.MemorySessionDAO var7 = new org.jsecurity.session.mgt.eis.MemorySessionDAO();
    org.jsecurity.cache.Cache var8 = var7.getActiveSessionsCache();
    org.jsecurity.cache.CacheManager var9 = var7.getCacheManager();
    org.jsecurity.cache.HashtableCacheManager var10 = new org.jsecurity.cache.HashtableCacheManager();
    org.jsecurity.cache.Cache var12 = var10.getCache("\u0000\u0000");
    var7.setActiveSessionsCache(var12);
    java.io.InputStream var15 = org.jsecurity.util.ClassUtils.getResourceAsStream("");
    java.lang.Object[] var16 = new java.lang.Object[] { var15};
    java.util.List var17 = org.jsecurity.util.CollectionUtils.asList(var16);
    org.jsecurity.authc.pam.ModularRealmAuthenticator var18 = new org.jsecurity.authc.pam.ModularRealmAuthenticator(var17);
    org.jsecurity.authc.pam.AllSuccessfulModularAuthenticationStrategy var19 = new org.jsecurity.authc.pam.AllSuccessfulModularAuthenticationStrategy();
    var18.setModularAuthenticationStrategy((org.jsecurity.authc.pam.ModularAuthenticationStrategy)var19);
    org.jsecurity.authz.SimpleAuthorizationInfo var21 = new org.jsecurity.authz.SimpleAuthorizationInfo();
    var21.addStringPermission("hi!");
    java.io.InputStream var25 = org.jsecurity.util.ClassUtils.getResourceAsStream("");
    java.lang.Object[] var26 = new java.lang.Object[] { var25};
    java.util.List var27 = org.jsecurity.util.CollectionUtils.asList(var26);
    var21.addRoles((java.util.Collection)var27);
    var18.setAuthenticationListeners((java.util.Collection)var27);
    org.jsecurity.realm.activedirectory.ActiveDirectoryRealm var30 = new org.jsecurity.realm.activedirectory.ActiveDirectoryRealm();
    var30.setPrincipalSuffix("");
    var18.setRealm((org.jsecurity.realm.Realm)var30);
    org.jsecurity.cache.HashtableCacheManager var34 = new org.jsecurity.cache.HashtableCacheManager();
    org.jsecurity.cache.Cache var36 = var34.getCache("\u0000\u0000");
    var30.setAuthorizationCache(var36);
    var7.setActiveSessionsCache(var36);
    org.jsecurity.session.mgt.SimpleSession var39 = new org.jsecurity.session.mgt.SimpleSession();
    java.io.Serializable var40 = var7.create((org.jsecurity.session.Session)var39);
    var6.setSessionDAO((org.jsecurity.session.mgt.eis.SessionDAO)var7);
    org.jsecurity.authc.pam.AllSuccessfulModularAuthenticationStrategy var42 = new org.jsecurity.authc.pam.AllSuccessfulModularAuthenticationStrategy();
    char[] var44 = new char[] { };
    org.jsecurity.authc.UsernamePasswordToken var46 = new org.jsecurity.authc.UsernamePasswordToken("hi!", var44, true);
    org.jsecurity.authc.SimpleAccount var47 = new org.jsecurity.authc.SimpleAccount();
    var47.setCredentialsExpired(false);
    boolean var50 = var47.isLocked();
    org.jsecurity.authc.AuthenticationInfo var51 = var42.afterAllAttempts((org.jsecurity.authc.AuthenticationToken)var46, (org.jsecurity.authc.AuthenticationInfo)var47);
    char[] var55 = new char[] { '4', '#'};
    org.jsecurity.authc.UsernamePasswordToken var56 = new org.jsecurity.authc.UsernamePasswordToken("\u0000\u0000", var55);
    org.jsecurity.authc.SimpleAccount var57 = new org.jsecurity.authc.SimpleAccount();
    var57.setCredentialsExpired(false);
    var57.setCredentialsExpired(false);
    boolean var62 = var57.isCredentialsExpired();
    org.jsecurity.authc.AuthenticationInfo var63 = var42.afterAllAttempts((org.jsecurity.authc.AuthenticationToken)var56, (org.jsecurity.authc.AuthenticationInfo)var57);
    org.jsecurity.realm.activedirectory.ActiveDirectoryRealm var64 = new org.jsecurity.realm.activedirectory.ActiveDirectoryRealm();
    org.jsecurity.authc.credential.Sha256CredentialsMatcher var65 = new org.jsecurity.authc.credential.Sha256CredentialsMatcher();
    var64.setCredentialsMatcher((org.jsecurity.authc.credential.CredentialsMatcher)var65);
    java.lang.String var67 = var64.getAuthorizationCacheName();
    org.jsecurity.authc.UsernamePasswordToken var68 = new org.jsecurity.authc.UsernamePasswordToken();
    java.lang.String var69 = var68.getUsername();
    java.lang.Object var70 = var68.getPrincipal();
    boolean var71 = var64.supports((org.jsecurity.authc.AuthenticationToken)var68);
    org.jsecurity.session.UnknownSessionException var75 = new org.jsecurity.session.UnknownSessionException("dd\uFFFD", (java.io.Serializable)100.0f);
    org.jsecurity.session.SessionException var77 = new org.jsecurity.session.SessionException("dd\uFFFD", (java.lang.Throwable)var75, (java.io.Serializable)0);
    org.jsecurity.authc.SimpleAuthenticationInfo var80 = new org.jsecurity.authc.SimpleAuthenticationInfo((java.lang.Object)0, (java.lang.Object)10, "hi!");
    java.lang.Object var81 = var80.getCredentials();
    java.lang.String var82 = var80.toString();
    org.jsecurity.authc.AuthenticationInfo var83 = var42.afterAllAttempts((org.jsecurity.authc.AuthenticationToken)var68, (org.jsecurity.authc.AuthenticationInfo)var80);
    org.jsecurity.session.mgt.eis.MemorySessionDAO var84 = new org.jsecurity.session.mgt.eis.MemorySessionDAO();
    org.jsecurity.cache.Cache var85 = var84.getActiveSessionsCache();
    var84.setActiveSessionsCacheName("dd\uFFFD");
    var80.setCredentials((java.lang.Object)var84);
    var6.setSessionDAO((org.jsecurity.session.mgt.eis.SessionDAO)var84);
    var1.setSessionManager((org.jsecurity.session.mgt.ValidatingSessionManager)var6);
    org.jsecurity.cache.ehcache.EhCacheManager var91 = new org.jsecurity.cache.ehcache.EhCacheManager();
    var91.init();
    var6.setCacheManager((org.jsecurity.cache.CacheManager)var91);
    var91.init();
    org.jsecurity.cache.Cache var96 = var91.getCache("\uFFFD\uFFFD#\uFFFD\uFFFD.\uFFFD+r\uFFFD\u695A\u05F1\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\u0011y\uFFFDf\uFFFD_}");
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var2 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var8);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var9);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var12);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var15);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var16);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var17);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var25);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var26);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var27);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var36);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var40 + "' != '" + "4325aa75-1a86-4a48-a011-740ece4890ec"+ "'", var40.equals("4325aa75-1a86-4a48-a011-740ece4890ec"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var44);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var50 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var51);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var55);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var62 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var63);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var67);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var69);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var70);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var71 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var81 + "' != '" + 10+ "'", var81.equals(10));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var83);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var85);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var96);

  }

  public void test367() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest7.test367");


    org.jsecurity.realm.jndi.JndiRealmFactory var0 = new org.jsecurity.realm.jndi.JndiRealmFactory();
    java.io.InputStream var2 = org.jsecurity.util.ClassUtils.getResourceAsStream("");
    java.lang.Object[] var3 = new java.lang.Object[] { var2};
    java.util.List var4 = org.jsecurity.util.CollectionUtils.asList(var3);
    var0.setJndiNames((java.util.Collection)var4);
    boolean var6 = var0.isResourceRef();
    java.io.InputStream var8 = org.jsecurity.util.ClassUtils.getResourceAsStream("");
    java.lang.Object[] var9 = new java.lang.Object[] { var8};
    java.util.List var10 = org.jsecurity.util.CollectionUtils.asList(var9);
    org.jsecurity.authc.pam.ModularRealmAuthenticator var11 = new org.jsecurity.authc.pam.ModularRealmAuthenticator(var10);
    org.jsecurity.realm.text.TextConfigurationRealm var12 = new org.jsecurity.realm.text.TextConfigurationRealm();
    java.io.InputStream var14 = org.jsecurity.util.ClassUtils.getResourceAsStream("");
    java.lang.Object[] var15 = new java.lang.Object[] { var14};
    java.util.List var16 = org.jsecurity.util.CollectionUtils.asList(var15);
    org.jsecurity.authc.pam.ModularRealmAuthenticator var17 = new org.jsecurity.authc.pam.ModularRealmAuthenticator(var16);
    org.jsecurity.subject.SimplePrincipalCollection var19 = new org.jsecurity.subject.SimplePrincipalCollection((java.util.Collection)var16, "org.jsecurity.authz.UnauthorizedException: org.jsecurity.session.ExpiredSessionException: ");
    org.jsecurity.session.UnknownSessionException var24 = new org.jsecurity.session.UnknownSessionException("dd\uFFFD", (java.io.Serializable)100.0f);
    org.jsecurity.session.SessionException var26 = new org.jsecurity.session.SessionException("dd\uFFFD", (java.lang.Throwable)var24, (java.io.Serializable)0);
    org.jsecurity.session.SessionException var27 = new org.jsecurity.session.SessionException("dd\uFFFD", (java.lang.Throwable)var24);
    var19.add((java.lang.Object)var27, "org.jsecurity.config.ConfigurationException: dd\uFFFD");
    var12.onLogout((org.jsecurity.subject.PrincipalCollection)var19);
    org.jsecurity.cache.HashtableCacheManager var31 = new org.jsecurity.cache.HashtableCacheManager();
    org.jsecurity.cache.Cache var33 = var31.getCache("\u0000\u0000");
    var12.setAuthorizationCache(var33);
    org.jsecurity.codec.CodecException var37 = new org.jsecurity.codec.CodecException("dd\uFFFD");
    org.jsecurity.authc.ConcurrentAccessException var38 = new org.jsecurity.authc.ConcurrentAccessException("org.jsecurity.authz.UnauthorizedException: org.jsecurity.session.ExpiredSessionException: ", (java.lang.Throwable)var37);
    org.jsecurity.subject.SimplePrincipalCollection var40 = new org.jsecurity.subject.SimplePrincipalCollection((java.lang.Object)var37, "");
    var12.onLogout((org.jsecurity.subject.PrincipalCollection)var40);
    var11.setRealm((org.jsecurity.realm.Realm)var12);
    org.jsecurity.session.UnknownSessionException var47 = new org.jsecurity.session.UnknownSessionException("dd\uFFFD", (java.io.Serializable)100.0f);
    org.jsecurity.subject.SubjectException var48 = new org.jsecurity.subject.SubjectException("dd\uFFFD", (java.lang.Throwable)var47);
    org.jsecurity.io.SerializationException var49 = new org.jsecurity.io.SerializationException("", (java.lang.Throwable)var48);
    java.lang.Throwable[] var50 = var48.getSuppressed();
    java.util.List var51 = org.jsecurity.util.CollectionUtils.asList((java.lang.Object[])var50);
    org.jsecurity.authc.pam.ModularRealmAuthenticator var52 = new org.jsecurity.authc.pam.ModularRealmAuthenticator(var51);
    var11.setRealms((java.util.Collection)var51);
    var0.setJndiNames((java.util.Collection)var51);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var2);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var3);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var4);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var6 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var8);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var9);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var10);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var14);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var15);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var16);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var33);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var50);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var51);

  }

  public void test368() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest7.test368");


    org.jsecurity.session.mgt.DefaultSessionManager var0 = new org.jsecurity.session.mgt.DefaultSessionManager();
    boolean var1 = var0.isSessionValidationSchedulerEnabled();
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var1 == true);

  }

  public void test369() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest7.test369");


    org.jsecurity.realm.activedirectory.ActiveDirectoryRealm var0 = new org.jsecurity.realm.activedirectory.ActiveDirectoryRealm();
    var0.initAuthorizationCache();
    var0.setSearchBase("dd\uFFFD");
    var0.setUrl("guest = guest,guest\npresidentskroob = 12345,president\ndarkhelmet = ludicrousspeed,darklord,schwartz\nroot = secret,root\nlonestarr = vespa,goodguy,schwartz\n");
    org.jsecurity.cache.HashtableCache var7 = new org.jsecurity.cache.HashtableCache("b017e95a-a08d-4f3a-bab8-cc9b39ef5331");
    var0.setAuthorizationCache((org.jsecurity.cache.Cache)var7);
    org.jsecurity.session.UnknownSessionException var12 = new org.jsecurity.session.UnknownSessionException("dd\uFFFD", (java.io.Serializable)100.0f);
    org.jsecurity.session.SessionException var14 = new org.jsecurity.session.SessionException("dd\uFFFD", (java.lang.Throwable)var12, (java.io.Serializable)0);
    java.lang.Object var15 = var7.get((java.lang.Object)var14);
    org.jsecurity.io.IniResource var16 = new org.jsecurity.io.IniResource();
    java.lang.String var17 = var16.getCharsetName();
    java.lang.String var18 = var16.getCharsetName();
    org.jsecurity.io.IniResource var19 = new org.jsecurity.io.IniResource();
    java.util.Map var20 = var19.getSections();
    java.lang.String var21 = var19.getCharsetName();
    org.jsecurity.config.ReflectionBuilder var22 = new org.jsecurity.config.ReflectionBuilder();
    org.jsecurity.io.IniResource var23 = new org.jsecurity.io.IniResource();
    java.util.Map var24 = var23.getSections();
    var22.setObjects(var24);
    org.jsecurity.io.IniResource var26 = new org.jsecurity.io.IniResource();
    java.util.Map var27 = var26.getSections();
    java.util.Map var28 = var22.buildObjects(var27);
    var19.setSections(var28);
    org.jsecurity.realm.activedirectory.ActiveDirectoryRealm var30 = new org.jsecurity.realm.activedirectory.ActiveDirectoryRealm();
    org.jsecurity.authc.credential.Sha256CredentialsMatcher var31 = new org.jsecurity.authc.credential.Sha256CredentialsMatcher();
    var30.setCredentialsMatcher((org.jsecurity.authc.credential.CredentialsMatcher)var31);
    java.lang.String var33 = var30.getAuthorizationCacheName();
    var30.setUrl("hi!");
    org.jsecurity.realm.ldap.DefaultLdapContextFactory var36 = new org.jsecurity.realm.ldap.DefaultLdapContextFactory();
    var30.setLdapContextFactory((org.jsecurity.realm.ldap.LdapContextFactory)var36);
    org.jsecurity.config.ReflectionBuilder var38 = new org.jsecurity.config.ReflectionBuilder();
    org.jsecurity.io.IniResource var39 = new org.jsecurity.io.IniResource();
    var39.setCharsetName("org.jsecurity.authz.UnauthorizedException: org.jsecurity.session.ExpiredSessionException: ");
    java.util.Map var42 = var39.getSections();
    java.util.Map var43 = var38.buildObjects(var42);
    org.jsecurity.config.ReflectionBuilder var44 = new org.jsecurity.config.ReflectionBuilder();
    org.jsecurity.io.IniResource var45 = new org.jsecurity.io.IniResource();
    var45.setCharsetName("org.jsecurity.authz.UnauthorizedException: org.jsecurity.session.ExpiredSessionException: ");
    java.util.Map var48 = var45.getSections();
    java.util.Map var49 = var44.buildObjects(var48);
    java.util.Map var50 = var38.buildObjects(var49);
    java.util.Map var51 = var38.getObjects();
    var36.setAdditionalEnvironment(var51);
    org.jsecurity.config.ReflectionBuilder var53 = new org.jsecurity.config.ReflectionBuilder();
    org.jsecurity.io.IniResource var54 = new org.jsecurity.io.IniResource();
    java.util.Map var55 = var54.getSections();
    var53.setObjects(var55);
    org.jsecurity.realm.activedirectory.ActiveDirectoryRealm var57 = new org.jsecurity.realm.activedirectory.ActiveDirectoryRealm();
    var57.init();
    var57.init();
    org.jsecurity.config.ReflectionBuilder var60 = new org.jsecurity.config.ReflectionBuilder();
    org.jsecurity.config.ReflectionBuilder var61 = new org.jsecurity.config.ReflectionBuilder();
    org.jsecurity.io.IniResource var62 = new org.jsecurity.io.IniResource();
    var62.setCharsetName("org.jsecurity.authz.UnauthorizedException: org.jsecurity.session.ExpiredSessionException: ");
    java.util.Map var65 = var62.getSections();
    java.util.Map var66 = var61.buildObjects(var65);
    org.jsecurity.config.ReflectionBuilder var67 = new org.jsecurity.config.ReflectionBuilder();
    org.jsecurity.io.IniResource var68 = new org.jsecurity.io.IniResource();
    var68.setCharsetName("org.jsecurity.authz.UnauthorizedException: org.jsecurity.session.ExpiredSessionException: ");
    java.util.Map var71 = var68.getSections();
    java.util.Map var72 = var67.buildObjects(var71);
    java.util.Map var73 = var61.buildObjects(var72);
    java.util.Map var74 = var60.buildObjects(var73);
    var57.setGroupRolesMap(var74);
    var53.setObjects(var74);
    org.jsecurity.config.ReflectionBuilder var77 = new org.jsecurity.config.ReflectionBuilder(var74);
    var36.setAdditionalEnvironment(var74);
    var19.setSections(var74);
    var16.setSections(var74);
    var16.setCharsetName("5c3cc6ba-00c8-4890-85cf-e7058c10f878");
    var14.setSessionId((java.io.Serializable)var16);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var15);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var17);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var18);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var20);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var21);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var24);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var27);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var28);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var33);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var42);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var43);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var48);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var49);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var50);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var51);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var55);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var65);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var66);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var71);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var72);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var73);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var74);

  }

  public void test370() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest7.test370");


    org.jsecurity.config.UnresolveableReferenceException var2 = new org.jsecurity.config.UnresolveableReferenceException("e2497199-95f2-4373-8934-d742f09a6cb1");
    org.jsecurity.authc.DisabledAccountException var3 = new org.jsecurity.authc.DisabledAccountException("org.jsecurity.realm.text.TextConfigurationRealm_2807", (java.lang.Throwable)var2);

  }

  public void test371() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest7.test371");


    org.jsecurity.subject.InvalidSubjectException var3 = new org.jsecurity.subject.InvalidSubjectException("dd\uFFFD");
    org.jsecurity.session.ExpiredSessionException var4 = new org.jsecurity.session.ExpiredSessionException("org.jsecurity.config.ConfigurationException: dd\uFFFD", (java.io.Serializable)var3);
    org.jsecurity.session.SessionException var5 = new org.jsecurity.session.SessionException((java.lang.Throwable)var4);
    org.jsecurity.config.ConfigurationException var6 = new org.jsecurity.config.ConfigurationException("4ef713cf-5dcd-4003-b930-c7cb38661a43", (java.lang.Throwable)var4);

  }

  public void test372() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest7.test372");


    org.jsecurity.realm.text.TextConfigurationRealm var0 = new org.jsecurity.realm.text.TextConfigurationRealm();
    java.io.InputStream var2 = org.jsecurity.util.ClassUtils.getResourceAsStream("");
    java.lang.Object[] var3 = new java.lang.Object[] { var2};
    java.util.List var4 = org.jsecurity.util.CollectionUtils.asList(var3);
    org.jsecurity.authc.pam.ModularRealmAuthenticator var5 = new org.jsecurity.authc.pam.ModularRealmAuthenticator(var4);
    org.jsecurity.subject.SimplePrincipalCollection var7 = new org.jsecurity.subject.SimplePrincipalCollection((java.util.Collection)var4, "org.jsecurity.authz.UnauthorizedException: org.jsecurity.session.ExpiredSessionException: ");
    org.jsecurity.session.UnknownSessionException var12 = new org.jsecurity.session.UnknownSessionException("dd\uFFFD", (java.io.Serializable)100.0f);
    org.jsecurity.session.SessionException var14 = new org.jsecurity.session.SessionException("dd\uFFFD", (java.lang.Throwable)var12, (java.io.Serializable)0);
    org.jsecurity.session.SessionException var15 = new org.jsecurity.session.SessionException("dd\uFFFD", (java.lang.Throwable)var12);
    var7.add((java.lang.Object)var15, "org.jsecurity.config.ConfigurationException: dd\uFFFD");
    var0.onLogout((org.jsecurity.subject.PrincipalCollection)var7);
    org.jsecurity.cache.HashtableCacheManager var19 = new org.jsecurity.cache.HashtableCacheManager();
    org.jsecurity.cache.Cache var21 = var19.getCache("\u0000\u0000");
    var0.setAuthorizationCache(var21);
    org.jsecurity.authc.UsernamePasswordToken var23 = new org.jsecurity.authc.UsernamePasswordToken();
    java.lang.String var24 = var23.getUsername();
    java.lang.Object var25 = var23.getPrincipal();
    var23.setUsername("hi!");
    java.lang.Object var28 = var23.getCredentials();
    boolean var29 = var0.supports((org.jsecurity.authc.AuthenticationToken)var23);
    java.lang.String var30 = var0.getName();
    var0.afterRoleCacheSet();
    org.jsecurity.codec.CodecException var34 = new org.jsecurity.codec.CodecException("dd\uFFFD");
    org.jsecurity.authc.ConcurrentAccessException var35 = new org.jsecurity.authc.ConcurrentAccessException("org.jsecurity.authz.UnauthorizedException: org.jsecurity.session.ExpiredSessionException: ", (java.lang.Throwable)var34);
    org.jsecurity.subject.SimplePrincipalCollection var37 = new org.jsecurity.subject.SimplePrincipalCollection((java.lang.Object)var34, "");
    java.io.InputStream var39 = org.jsecurity.util.ClassUtils.getResourceAsStream("");
    java.lang.Object[] var40 = new java.lang.Object[] { var39};
    java.util.List var41 = org.jsecurity.util.CollectionUtils.asList(var40);
    org.jsecurity.authc.pam.ModularRealmAuthenticator var42 = new org.jsecurity.authc.pam.ModularRealmAuthenticator(var41);
    var37.addAll((java.util.Collection)var41, "\u0000\u0000");
    java.io.InputStream var46 = org.jsecurity.util.ClassUtils.getResourceAsStream("");
    java.lang.Object[] var47 = new java.lang.Object[] { var46};
    java.util.List var48 = org.jsecurity.util.CollectionUtils.asList(var47);
    org.jsecurity.authc.pam.ModularRealmAuthenticator var49 = new org.jsecurity.authc.pam.ModularRealmAuthenticator(var48);
    var37.addAll((java.util.Collection)var48, "\u0000\u0000");
    org.jsecurity.io.IniResource var52 = new org.jsecurity.io.IniResource();
    var52.setCharsetName("org.jsecurity.authz.UnauthorizedException: org.jsecurity.session.ExpiredSessionException: ");
    java.util.Map var55 = var52.getSections();
    java.util.Map var56 = var52.getSections();
    var37.add((java.lang.Object)var56, "345d9036-762c-4f58-8690-c901bf299cde");
    org.jsecurity.session.UnknownSessionException var63 = new org.jsecurity.session.UnknownSessionException("dd\uFFFD", (java.io.Serializable)100.0f);
    org.jsecurity.subject.SubjectException var64 = new org.jsecurity.subject.SubjectException("dd\uFFFD", (java.lang.Throwable)var63);
    org.jsecurity.io.SerializationException var65 = new org.jsecurity.io.SerializationException("", (java.lang.Throwable)var64);
    java.lang.Throwable[] var66 = var64.getSuppressed();
    java.lang.Throwable[] var67 = var64.getSuppressed();
    java.util.Set var68 = org.jsecurity.util.CollectionUtils.asSet((java.lang.Object[])var67);
    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      boolean var69 = var0.isPermittedAll((org.jsecurity.subject.PrincipalCollection)var37, (java.util.Collection)var68);
      fail("Expected exception of type java.util.NoSuchElementException");
    } catch (java.util.NoSuchElementException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var2);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var3);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var4);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var21);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var24);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var25);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var28);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var29 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var30 + "' != '" + "org.jsecurity.realm.text.TextConfigurationRealm_4558"+ "'", var30.equals("org.jsecurity.realm.text.TextConfigurationRealm_4558"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var39);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var40);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var41);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var46);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var47);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var48);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var55);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var56);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var66);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var67);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var68);

  }

  public void test373() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest7.test373");


    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      org.jsecurity.config.IniConfiguration var2 = new org.jsecurity.config.IniConfiguration("77c51321-76a3-453b-9232-a9e7abf1877b", "7856269b-c3fb-4264-9649-c8194198e7eb");
      fail("Expected exception of type org.jsecurity.config.ConfigurationException");
    } catch (org.jsecurity.config.ConfigurationException e) {
      // Expected exception.
    }

  }

  public void test374() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest7.test374");


    org.jsecurity.io.ResourceException var6 = new org.jsecurity.io.ResourceException("hi!");
    org.jsecurity.codec.CodecException var7 = new org.jsecurity.codec.CodecException((java.lang.Throwable)var6);
    org.jsecurity.JSecurityException var8 = new org.jsecurity.JSecurityException("a2b823b1e72eae2b727289df8a00a89df8a0bab6ad8a89c4c5c7a9b62a270000", (java.lang.Throwable)var6);
    org.jsecurity.session.UnknownSessionException var9 = new org.jsecurity.session.UnknownSessionException((java.lang.Throwable)var8);
    org.jsecurity.authc.IncorrectCredentialsException var10 = new org.jsecurity.authc.IncorrectCredentialsException((java.lang.Throwable)var8);
    org.jsecurity.authz.AuthorizationException var11 = new org.jsecurity.authz.AuthorizationException("\u0000\u0000\u0000", (java.lang.Throwable)var8);
    org.jsecurity.authc.AccountException var12 = new org.jsecurity.authc.AccountException((java.lang.Throwable)var11);
    org.jsecurity.subject.SimplePrincipalCollection var14 = new org.jsecurity.subject.SimplePrincipalCollection((java.lang.Object)var12, "org.jsecurity.authz.UnauthorizedException: org.jsecurity.session.ExpiredSessionException: ");
    org.jsecurity.codec.CodecException var15 = new org.jsecurity.codec.CodecException("org.jsecurity.authc.IncorrectCredentialsException: \u0000\u0000", (java.lang.Throwable)var12);
    org.jsecurity.session.mgt.SimpleSession var16 = new org.jsecurity.session.mgt.SimpleSession();
    var16.touch();
    var16.validate();
    org.jsecurity.session.mgt.SimpleSession var19 = new org.jsecurity.session.mgt.SimpleSession();
    var19.setTimeout((-1L));
    org.jsecurity.session.mgt.SimpleSession var22 = new org.jsecurity.session.mgt.SimpleSession();
    java.util.Date var23 = var22.getLastAccessTime();
    var19.setLastAccessTime(var23);
    org.jsecurity.session.mgt.SimpleSession var25 = new org.jsecurity.session.mgt.SimpleSession();
    java.util.Date var26 = var25.getLastAccessTime();
    var19.setStopTimestamp(var26);
    var16.setLastAccessTime(var26);
    org.jsecurity.session.ExpiredSessionException var29 = new org.jsecurity.session.ExpiredSessionException("a1088bc1-eab4-414f-8f0c-33579d5b6ef9", (java.lang.Throwable)var12, (java.io.Serializable)var26);
    org.jsecurity.authz.UnauthenticatedException var30 = new org.jsecurity.authz.UnauthenticatedException((java.lang.Throwable)var12);
    org.jsecurity.authc.AuthenticationException var31 = new org.jsecurity.authc.AuthenticationException("2bd8fc5b-0501-4fae-b217-a412eedb1133", (java.lang.Throwable)var12);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var23);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var26);

  }

  public void test375() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest7.test375");


    org.jsecurity.authz.permission.InvalidPermissionStringException var2 = new org.jsecurity.authz.permission.InvalidPermissionStringException("564db307-e199-4da1-9704-40a58de1f2a8", "012605ea-9dda-481d-a436-b8a58422e8d3");

  }

  public void test376() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest7.test376");


    org.jsecurity.session.mgt.DefaultSessionManager var0 = new org.jsecurity.session.mgt.DefaultSessionManager();
    var0.setGlobalSessionTimeout(1);
    var0.validateSessions();
    org.jsecurity.session.mgt.eis.MemorySessionDAO var4 = new org.jsecurity.session.mgt.eis.MemorySessionDAO();
    org.jsecurity.cache.Cache var5 = var4.getActiveSessionsCache();
    org.jsecurity.cache.CacheManager var6 = var4.getCacheManager();
    org.jsecurity.cache.HashtableCacheManager var7 = new org.jsecurity.cache.HashtableCacheManager();
    org.jsecurity.cache.Cache var9 = var7.getCache("\u0000\u0000");
    var4.setActiveSessionsCache(var9);
    java.io.InputStream var12 = org.jsecurity.util.ClassUtils.getResourceAsStream("");
    java.lang.Object[] var13 = new java.lang.Object[] { var12};
    java.util.List var14 = org.jsecurity.util.CollectionUtils.asList(var13);
    org.jsecurity.authc.pam.ModularRealmAuthenticator var15 = new org.jsecurity.authc.pam.ModularRealmAuthenticator(var14);
    org.jsecurity.authc.pam.AllSuccessfulModularAuthenticationStrategy var16 = new org.jsecurity.authc.pam.AllSuccessfulModularAuthenticationStrategy();
    var15.setModularAuthenticationStrategy((org.jsecurity.authc.pam.ModularAuthenticationStrategy)var16);
    org.jsecurity.authz.SimpleAuthorizationInfo var18 = new org.jsecurity.authz.SimpleAuthorizationInfo();
    var18.addStringPermission("hi!");
    java.io.InputStream var22 = org.jsecurity.util.ClassUtils.getResourceAsStream("");
    java.lang.Object[] var23 = new java.lang.Object[] { var22};
    java.util.List var24 = org.jsecurity.util.CollectionUtils.asList(var23);
    var18.addRoles((java.util.Collection)var24);
    var15.setAuthenticationListeners((java.util.Collection)var24);
    org.jsecurity.realm.activedirectory.ActiveDirectoryRealm var27 = new org.jsecurity.realm.activedirectory.ActiveDirectoryRealm();
    var27.setPrincipalSuffix("");
    var15.setRealm((org.jsecurity.realm.Realm)var27);
    org.jsecurity.cache.HashtableCacheManager var31 = new org.jsecurity.cache.HashtableCacheManager();
    org.jsecurity.cache.Cache var33 = var31.getCache("\u0000\u0000");
    var27.setAuthorizationCache(var33);
    var4.setActiveSessionsCache(var33);
    org.jsecurity.session.mgt.SimpleSession var36 = new org.jsecurity.session.mgt.SimpleSession();
    java.io.Serializable var37 = var4.create((org.jsecurity.session.Session)var36);
    org.jsecurity.session.mgt.SimpleSession var38 = new org.jsecurity.session.mgt.SimpleSession();
    var38.touch();
    var38.validate();
    org.jsecurity.session.mgt.SimpleSession var41 = new org.jsecurity.session.mgt.SimpleSession();
    var41.setTimeout((-1L));
    org.jsecurity.session.mgt.SimpleSession var44 = new org.jsecurity.session.mgt.SimpleSession();
    java.util.Date var45 = var44.getLastAccessTime();
    var41.setLastAccessTime(var45);
    org.jsecurity.session.mgt.SimpleSession var47 = new org.jsecurity.session.mgt.SimpleSession();
    java.util.Date var48 = var47.getLastAccessTime();
    var41.setStopTimestamp(var48);
    var38.setLastAccessTime(var48);
    var36.setLastAccessTime(var48);
    org.jsecurity.session.mgt.ImmutableProxiedSession var52 = new org.jsecurity.session.mgt.ImmutableProxiedSession((org.jsecurity.session.Session)var36);
    java.util.Date var53 = var52.getLastAccessTime();
    java.net.InetAddress var54 = var52.getHostAddress();
    org.jsecurity.authz.HostUnauthorizedException var55 = new org.jsecurity.authz.HostUnauthorizedException(var54);
    java.io.Serializable var56 = var0.start(var54);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var5);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var6);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var9);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var12);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var13);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var14);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var22);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var23);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var24);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var33);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var37 + "' != '" + "4a393637-321c-4fd6-9653-7cdeb2395371"+ "'", var37.equals("4a393637-321c-4fd6-9653-7cdeb2395371"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var45);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var48);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var53);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var54);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var56 + "' != '" + "57a91ef3-e2ce-42b9-9c6e-0c500fd42f48"+ "'", var56.equals("57a91ef3-e2ce-42b9-9c6e-0c500fd42f48"));

  }

  public void test377() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest7.test377");


    org.jsecurity.realm.text.TextConfigurationRealm var0 = new org.jsecurity.realm.text.TextConfigurationRealm();
    java.io.InputStream var2 = org.jsecurity.util.ClassUtils.getResourceAsStream("");
    java.lang.Object[] var3 = new java.lang.Object[] { var2};
    java.util.List var4 = org.jsecurity.util.CollectionUtils.asList(var3);
    org.jsecurity.authc.pam.ModularRealmAuthenticator var5 = new org.jsecurity.authc.pam.ModularRealmAuthenticator(var4);
    org.jsecurity.subject.SimplePrincipalCollection var7 = new org.jsecurity.subject.SimplePrincipalCollection((java.util.Collection)var4, "org.jsecurity.authz.UnauthorizedException: org.jsecurity.session.ExpiredSessionException: ");
    org.jsecurity.session.UnknownSessionException var12 = new org.jsecurity.session.UnknownSessionException("dd\uFFFD", (java.io.Serializable)100.0f);
    org.jsecurity.session.SessionException var14 = new org.jsecurity.session.SessionException("dd\uFFFD", (java.lang.Throwable)var12, (java.io.Serializable)0);
    org.jsecurity.session.SessionException var15 = new org.jsecurity.session.SessionException("dd\uFFFD", (java.lang.Throwable)var12);
    var7.add((java.lang.Object)var15, "org.jsecurity.config.ConfigurationException: dd\uFFFD");
    var0.onLogout((org.jsecurity.subject.PrincipalCollection)var7);
    org.jsecurity.cache.HashtableCacheManager var19 = new org.jsecurity.cache.HashtableCacheManager();
    org.jsecurity.cache.Cache var21 = var19.getCache("\u0000\u0000");
    var0.setAuthorizationCache(var21);
    org.jsecurity.authc.UsernamePasswordToken var23 = new org.jsecurity.authc.UsernamePasswordToken();
    java.lang.String var24 = var23.getUsername();
    java.lang.Object var25 = var23.getPrincipal();
    var23.setUsername("hi!");
    java.lang.Object var28 = var23.getCredentials();
    boolean var29 = var0.supports((org.jsecurity.authc.AuthenticationToken)var23);
    boolean var31 = var0.accountExists("org.jsecurity.config.ConfigurationException: dd\uFFFD-4org.jsecurity.config.ConfigurationException: dd\uFFFD02-8085-950org.jsecurity.config.ConfigurationException: dd\uFFFDbb026org.jsecurity.config.ConfigurationException: dd\uFFFD06");
    var0.setRoleDefinitions("goodguy = winnebago:drive:eagle5\nroot = *\nschwartz = lightsaber:*\n");
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var2);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var3);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var4);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var21);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var24);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var25);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var28);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var29 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var31 == false);

  }

  public void test378() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest7.test378");


    org.jsecurity.realm.text.TextConfigurationRealm var0 = new org.jsecurity.realm.text.TextConfigurationRealm();
    java.io.InputStream var2 = org.jsecurity.util.ClassUtils.getResourceAsStream("");
    java.lang.Object[] var3 = new java.lang.Object[] { var2};
    java.util.List var4 = org.jsecurity.util.CollectionUtils.asList(var3);
    org.jsecurity.authc.pam.ModularRealmAuthenticator var5 = new org.jsecurity.authc.pam.ModularRealmAuthenticator(var4);
    org.jsecurity.subject.SimplePrincipalCollection var7 = new org.jsecurity.subject.SimplePrincipalCollection((java.util.Collection)var4, "org.jsecurity.authz.UnauthorizedException: org.jsecurity.session.ExpiredSessionException: ");
    org.jsecurity.session.UnknownSessionException var12 = new org.jsecurity.session.UnknownSessionException("dd\uFFFD", (java.io.Serializable)100.0f);
    org.jsecurity.session.SessionException var14 = new org.jsecurity.session.SessionException("dd\uFFFD", (java.lang.Throwable)var12, (java.io.Serializable)0);
    org.jsecurity.session.SessionException var15 = new org.jsecurity.session.SessionException("dd\uFFFD", (java.lang.Throwable)var12);
    var7.add((java.lang.Object)var15, "org.jsecurity.config.ConfigurationException: dd\uFFFD");
    var0.onLogout((org.jsecurity.subject.PrincipalCollection)var7);
    org.jsecurity.realm.activedirectory.ActiveDirectoryRealm var19 = new org.jsecurity.realm.activedirectory.ActiveDirectoryRealm();
    org.jsecurity.authc.credential.Sha256CredentialsMatcher var20 = new org.jsecurity.authc.credential.Sha256CredentialsMatcher();
    var19.setCredentialsMatcher((org.jsecurity.authc.credential.CredentialsMatcher)var20);
    java.lang.String var22 = var19.getAuthorizationCacheName();
    var19.setPrincipalSuffix("org.jsecurity.config.ConfigurationException: dd\uFFFD");
    org.jsecurity.authz.permission.PermissionResolver var25 = var19.getPermissionResolver();
    var0.setPermissionResolver(var25);
    java.lang.String var27 = var0.getUserDefinitions();
    var0.afterAuthorizationCacheSet();
    var0.setUserDefinitions("c1011819-6bf2-4dab-9482-1d3562bebb3d");
    org.jsecurity.authc.pam.ModularRealmAuthenticator var31 = new org.jsecurity.authc.pam.ModularRealmAuthenticator((org.jsecurity.realm.Realm)var0);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var2);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var3);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var4);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var22);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var25);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var27);

  }

  public void test379() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest7.test379");


    org.jsecurity.session.mgt.SimpleSession var1 = new org.jsecurity.session.mgt.SimpleSession();
    org.jsecurity.session.UnknownSessionException var5 = new org.jsecurity.session.UnknownSessionException("dd\uFFFD", (java.io.Serializable)100.0f);
    org.jsecurity.session.SessionException var7 = new org.jsecurity.session.SessionException("dd\uFFFD", (java.lang.Throwable)var5, (java.io.Serializable)0);
    org.jsecurity.authc.AccountException var8 = new org.jsecurity.authc.AccountException((java.lang.Throwable)var5);
    var1.setId((java.io.Serializable)var5);
    org.jsecurity.session.StoppedSessionException var10 = new org.jsecurity.session.StoppedSessionException("org.jsecurity.authc.UsernamePasswordToken - \u0000\u0000, rememberMe=false", (java.lang.Throwable)var5);
    org.jsecurity.authc.AuthenticationException var11 = new org.jsecurity.authc.AuthenticationException((java.lang.Throwable)var10);
    org.jsecurity.util.UnknownClassException var12 = new org.jsecurity.util.UnknownClassException((java.lang.Throwable)var10);

  }

  public void test380() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest7.test380");


    boolean var1 = org.jsecurity.io.ResourceUtils.hasResourcePrefix("534d81de-ee39-466d-b839-49671dee6c25");
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var1 == false);

  }

  public void test381() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest7.test381");


    org.jsecurity.mgt.DefaultSecurityManager var0 = new org.jsecurity.mgt.DefaultSecurityManager();
    java.io.InputStream var2 = org.jsecurity.util.ClassUtils.getResourceAsStream("");
    java.lang.Object[] var3 = new java.lang.Object[] { var2};
    java.util.List var4 = org.jsecurity.util.CollectionUtils.asList(var3);
    org.jsecurity.authc.pam.ModularRealmAuthenticator var5 = new org.jsecurity.authc.pam.ModularRealmAuthenticator(var4);
    org.jsecurity.authc.pam.AllSuccessfulModularAuthenticationStrategy var6 = new org.jsecurity.authc.pam.AllSuccessfulModularAuthenticationStrategy();
    var5.setModularAuthenticationStrategy((org.jsecurity.authc.pam.ModularAuthenticationStrategy)var6);
    org.jsecurity.authz.SimpleAuthorizationInfo var8 = new org.jsecurity.authz.SimpleAuthorizationInfo();
    var8.addStringPermission("hi!");
    java.io.InputStream var12 = org.jsecurity.util.ClassUtils.getResourceAsStream("");
    java.lang.Object[] var13 = new java.lang.Object[] { var12};
    java.util.List var14 = org.jsecurity.util.CollectionUtils.asList(var13);
    var8.addRoles((java.util.Collection)var14);
    var5.setAuthenticationListeners((java.util.Collection)var14);
    var0.setSessionListeners((java.util.Collection)var14);
    java.io.InputStream var19 = org.jsecurity.util.ClassUtils.getResourceAsStream("");
    java.lang.Object[] var20 = new java.lang.Object[] { var19};
    java.util.List var21 = org.jsecurity.util.CollectionUtils.asList(var20);
    org.jsecurity.authc.pam.ModularRealmAuthenticator var22 = new org.jsecurity.authc.pam.ModularRealmAuthenticator(var21);
    org.jsecurity.authc.pam.AllSuccessfulModularAuthenticationStrategy var23 = new org.jsecurity.authc.pam.AllSuccessfulModularAuthenticationStrategy();
    var22.setModularAuthenticationStrategy((org.jsecurity.authc.pam.ModularAuthenticationStrategy)var23);
    org.jsecurity.authz.SimpleAuthorizationInfo var25 = new org.jsecurity.authz.SimpleAuthorizationInfo();
    var25.addStringPermission("hi!");
    java.io.InputStream var29 = org.jsecurity.util.ClassUtils.getResourceAsStream("");
    java.lang.Object[] var30 = new java.lang.Object[] { var29};
    java.util.List var31 = org.jsecurity.util.CollectionUtils.asList(var30);
    var25.addRoles((java.util.Collection)var31);
    var22.setAuthenticationListeners((java.util.Collection)var31);
    org.jsecurity.realm.activedirectory.ActiveDirectoryRealm var34 = new org.jsecurity.realm.activedirectory.ActiveDirectoryRealm();
    var34.setPrincipalSuffix("");
    var22.setRealm((org.jsecurity.realm.Realm)var34);
    org.jsecurity.cache.HashtableCacheManager var38 = new org.jsecurity.cache.HashtableCacheManager();
    org.jsecurity.cache.Cache var40 = var38.getCache("\u0000\u0000");
    var34.setAuthorizationCache(var40);
    var0.setRealm((org.jsecurity.realm.Realm)var34);
    org.jsecurity.subject.RememberMeManager var43 = var0.getRememberMeManager();
    org.jsecurity.session.mgt.SessionManager var44 = var0.getSessionManager();
    org.jsecurity.session.mgt.SessionManager var45 = var0.getSessionManager();
    org.jsecurity.realm.text.TextConfigurationRealm var47 = new org.jsecurity.realm.text.TextConfigurationRealm();
    java.io.InputStream var49 = org.jsecurity.util.ClassUtils.getResourceAsStream("");
    java.lang.Object[] var50 = new java.lang.Object[] { var49};
    java.util.List var51 = org.jsecurity.util.CollectionUtils.asList(var50);
    org.jsecurity.authc.pam.ModularRealmAuthenticator var52 = new org.jsecurity.authc.pam.ModularRealmAuthenticator(var51);
    org.jsecurity.subject.SimplePrincipalCollection var54 = new org.jsecurity.subject.SimplePrincipalCollection((java.util.Collection)var51, "org.jsecurity.authz.UnauthorizedException: org.jsecurity.session.ExpiredSessionException: ");
    org.jsecurity.session.UnknownSessionException var59 = new org.jsecurity.session.UnknownSessionException("dd\uFFFD", (java.io.Serializable)100.0f);
    org.jsecurity.session.SessionException var61 = new org.jsecurity.session.SessionException("dd\uFFFD", (java.lang.Throwable)var59, (java.io.Serializable)0);
    org.jsecurity.session.SessionException var62 = new org.jsecurity.session.SessionException("dd\uFFFD", (java.lang.Throwable)var59);
    var54.add((java.lang.Object)var62, "org.jsecurity.config.ConfigurationException: dd\uFFFD");
    var47.onLogout((org.jsecurity.subject.PrincipalCollection)var54);
    java.util.Set var67 = org.jsecurity.util.PermissionUtils.toPermissionStrings("org.jsecurity.config.ConfigurationException: dd\uFFFD");
    org.jsecurity.authz.SimpleAuthorizationInfo var68 = new org.jsecurity.authz.SimpleAuthorizationInfo(var67);
    org.jsecurity.authz.SimpleAuthorizingAccount var69 = new org.jsecurity.authz.SimpleAuthorizingAccount((org.jsecurity.subject.PrincipalCollection)var54, (java.lang.Object)var67);
    org.jsecurity.session.StoppedSessionException var70 = new org.jsecurity.session.StoppedSessionException("org.jsecurity.realm.SimpleAccountRealm-55-authorization", (java.io.Serializable)var54);
    org.jsecurity.realm.activedirectory.ActiveDirectoryRealm var71 = new org.jsecurity.realm.activedirectory.ActiveDirectoryRealm();
    var71.init();
    var71.setSystemPassword("dd\uFFFD");
    org.jsecurity.authz.aop.GuestAnnotationHandler var75 = new org.jsecurity.authz.aop.GuestAnnotationHandler();
    java.lang.Class var76 = var75.getAnnotationClass();
    var71.setAuthenticationTokenClass(var76);
    java.util.Collection var78 = var54.byType(var76);
    java.io.InputStream var80 = org.jsecurity.util.ClassUtils.getResourceAsStream("");
    java.lang.Object[] var81 = new java.lang.Object[] { var80};
    java.util.List var82 = org.jsecurity.util.CollectionUtils.asList(var81);
    org.jsecurity.authc.pam.ModularRealmAuthenticator var83 = new org.jsecurity.authc.pam.ModularRealmAuthenticator(var82);
    java.io.InputStream var85 = org.jsecurity.util.ClassUtils.getResourceAsStream("");
    java.lang.Object[] var86 = new java.lang.Object[] { var85};
    java.util.List var87 = org.jsecurity.util.CollectionUtils.asList(var86);
    org.jsecurity.authc.pam.ModularRealmAuthenticator var88 = new org.jsecurity.authc.pam.ModularRealmAuthenticator(var87);
    var83.setRealms((java.util.Collection)var87);
    org.jsecurity.subject.SimplePrincipalCollection var91 = new org.jsecurity.subject.SimplePrincipalCollection((java.util.Collection)var87, "org.jsecurity.realm.SimpleAccountRealm-9-authorization");
    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      boolean[] var92 = var0.hasRoles((org.jsecurity.subject.PrincipalCollection)var54, var87);
      fail("Expected exception of type java.lang.ClassCastException");
    } catch (java.lang.ClassCastException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var2);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var3);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var4);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var12);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var13);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var14);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var19);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var20);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var21);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var29);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var30);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var31);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var40);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var43);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var44);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var45);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var49);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var50);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var51);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var67);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var76);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var78);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var80);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var81);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var82);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var85);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var86);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var87);

  }

  public void test382() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest7.test382");


    org.jsecurity.realm.jndi.JndiRealmFactory var0 = new org.jsecurity.realm.jndi.JndiRealmFactory();
    java.io.InputStream var2 = org.jsecurity.util.ClassUtils.getResourceAsStream("");
    java.lang.Object[] var3 = new java.lang.Object[] { var2};
    java.util.List var4 = org.jsecurity.util.CollectionUtils.asList(var3);
    var0.setJndiNames((java.util.Collection)var4);
    boolean var6 = var0.isResourceRef();
    java.util.Properties var7 = var0.getJndiEnvironment();
    java.util.Properties var8 = var0.getJndiEnvironment();
    org.jsecurity.jndi.JndiTemplate var9 = var0.getJndiTemplate();
    java.util.Properties var10 = var0.getJndiEnvironment();
    var0.setJndiNames("org.jsecurity.realm.text.PropertiesRealm_3090");
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var2);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var3);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var4);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var6 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var7);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var8);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var9);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var10);

  }

  public void test383() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest7.test383");


    char[] var2 = new char[] { };
    org.jsecurity.authc.UsernamePasswordToken var4 = new org.jsecurity.authc.UsernamePasswordToken("hi!", var2, true);
    byte[] var5 = org.jsecurity.codec.Hex.decode(var2);
    byte[] var6 = org.jsecurity.codec.Hex.decode(var5);
    char[] var7 = org.jsecurity.codec.CodecSupport.toChars(var5);
    org.jsecurity.authc.UsernamePasswordToken var9 = new org.jsecurity.authc.UsernamePasswordToken("3404264c-53a7-4bda-8312-f6866b44ed78", var7, false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var2);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var5);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var6);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var7);

  }

  public void test384() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest7.test384");


    org.jsecurity.realm.text.TextConfigurationRealm var0 = new org.jsecurity.realm.text.TextConfigurationRealm();
    java.io.InputStream var2 = org.jsecurity.util.ClassUtils.getResourceAsStream("");
    java.lang.Object[] var3 = new java.lang.Object[] { var2};
    java.util.List var4 = org.jsecurity.util.CollectionUtils.asList(var3);
    org.jsecurity.authc.pam.ModularRealmAuthenticator var5 = new org.jsecurity.authc.pam.ModularRealmAuthenticator(var4);
    org.jsecurity.subject.SimplePrincipalCollection var7 = new org.jsecurity.subject.SimplePrincipalCollection((java.util.Collection)var4, "org.jsecurity.authz.UnauthorizedException: org.jsecurity.session.ExpiredSessionException: ");
    org.jsecurity.session.UnknownSessionException var12 = new org.jsecurity.session.UnknownSessionException("dd\uFFFD", (java.io.Serializable)100.0f);
    org.jsecurity.session.SessionException var14 = new org.jsecurity.session.SessionException("dd\uFFFD", (java.lang.Throwable)var12, (java.io.Serializable)0);
    org.jsecurity.session.SessionException var15 = new org.jsecurity.session.SessionException("dd\uFFFD", (java.lang.Throwable)var12);
    var7.add((java.lang.Object)var15, "org.jsecurity.config.ConfigurationException: dd\uFFFD");
    var0.onLogout((org.jsecurity.subject.PrincipalCollection)var7);
    org.jsecurity.cache.HashtableCacheManager var19 = new org.jsecurity.cache.HashtableCacheManager();
    org.jsecurity.cache.Cache var21 = var19.getCache("\u0000\u0000");
    var0.setAuthorizationCache(var21);
    org.jsecurity.codec.CodecException var25 = new org.jsecurity.codec.CodecException("dd\uFFFD");
    org.jsecurity.authc.ConcurrentAccessException var26 = new org.jsecurity.authc.ConcurrentAccessException("org.jsecurity.authz.UnauthorizedException: org.jsecurity.session.ExpiredSessionException: ", (java.lang.Throwable)var25);
    org.jsecurity.subject.SimplePrincipalCollection var28 = new org.jsecurity.subject.SimplePrincipalCollection((java.lang.Object)var25, "");
    var0.onLogout((org.jsecurity.subject.PrincipalCollection)var28);
    java.lang.String var30 = var0.getUserDefinitions();
    org.jsecurity.realm.text.TextConfigurationRealm var31 = new org.jsecurity.realm.text.TextConfigurationRealm();
    java.io.InputStream var33 = org.jsecurity.util.ClassUtils.getResourceAsStream("");
    java.lang.Object[] var34 = new java.lang.Object[] { var33};
    java.util.List var35 = org.jsecurity.util.CollectionUtils.asList(var34);
    org.jsecurity.authc.pam.ModularRealmAuthenticator var36 = new org.jsecurity.authc.pam.ModularRealmAuthenticator(var35);
    org.jsecurity.subject.SimplePrincipalCollection var38 = new org.jsecurity.subject.SimplePrincipalCollection((java.util.Collection)var35, "org.jsecurity.authz.UnauthorizedException: org.jsecurity.session.ExpiredSessionException: ");
    org.jsecurity.session.UnknownSessionException var43 = new org.jsecurity.session.UnknownSessionException("dd\uFFFD", (java.io.Serializable)100.0f);
    org.jsecurity.session.SessionException var45 = new org.jsecurity.session.SessionException("dd\uFFFD", (java.lang.Throwable)var43, (java.io.Serializable)0);
    org.jsecurity.session.SessionException var46 = new org.jsecurity.session.SessionException("dd\uFFFD", (java.lang.Throwable)var43);
    var38.add((java.lang.Object)var46, "org.jsecurity.config.ConfigurationException: dd\uFFFD");
    var31.onLogout((org.jsecurity.subject.PrincipalCollection)var38);
    java.util.Collection var51 = var38.fromRealm("\u0000\u0000\u0000");
    org.jsecurity.session.mgt.eis.MemorySessionDAO var52 = new org.jsecurity.session.mgt.eis.MemorySessionDAO();
    org.jsecurity.authc.SimpleAuthenticationInfo var53 = new org.jsecurity.authc.SimpleAuthenticationInfo((org.jsecurity.subject.PrincipalCollection)var38, (java.lang.Object)var52);
    org.jsecurity.authz.SimpleAuthorizationInfo var55 = new org.jsecurity.authz.SimpleAuthorizationInfo();
    var55.addRole("a2b823b1e72eae2b727289df8a00a89df8a0bab6ad8a89c4c5c7a9b62a270000");
    org.jsecurity.session.UnknownSessionException var62 = new org.jsecurity.session.UnknownSessionException("dd\uFFFD", (java.io.Serializable)100.0f);
    org.jsecurity.subject.SubjectException var63 = new org.jsecurity.subject.SubjectException("dd\uFFFD", (java.lang.Throwable)var62);
    org.jsecurity.io.SerializationException var64 = new org.jsecurity.io.SerializationException("", (java.lang.Throwable)var63);
    java.lang.Throwable[] var65 = var63.getSuppressed();
    java.util.Set var66 = org.jsecurity.util.CollectionUtils.asSet((java.lang.Object[])var65);
    var55.addRoles((java.util.Collection)var66);
    org.jsecurity.authz.SimpleRole var68 = new org.jsecurity.authz.SimpleRole("dd\uFFFD", var66);
    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      var0.checkPermissions((org.jsecurity.subject.PrincipalCollection)var38, (java.util.Collection)var66);
      fail("Expected exception of type java.util.NoSuchElementException");
    } catch (java.util.NoSuchElementException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var2);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var3);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var4);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var21);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var30);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var33);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var34);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var35);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var51);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var65);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var66);

  }

  public void test385() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest7.test385");


    org.jsecurity.authz.permission.InvalidPermissionStringException var2 = new org.jsecurity.authz.permission.InvalidPermissionStringException("", "dd\uFFFD");
    org.jsecurity.JSecurityException var4 = new org.jsecurity.JSecurityException("");
    org.jsecurity.authc.SimpleAuthenticationInfo var6 = new org.jsecurity.authc.SimpleAuthenticationInfo((java.lang.Object)var2, (java.lang.Object)"", "org.jsecurity.authz.UnauthorizedException: org.jsecurity.session.ExpiredSessionException: ");
    org.jsecurity.subject.PrincipalCollection var7 = var6.getPrincipals();
    org.jsecurity.session.UnknownSessionException var11 = new org.jsecurity.session.UnknownSessionException("dd\uFFFD", (java.io.Serializable)100.0f);
    org.jsecurity.session.SessionException var13 = new org.jsecurity.session.SessionException("dd\uFFFD", (java.lang.Throwable)var11, (java.io.Serializable)0);
    org.jsecurity.authc.SimpleAccount var14 = new org.jsecurity.authc.SimpleAccount(var7, (java.lang.Object)var13);
    var14.setLocked(true);
    org.jsecurity.authz.SimpleAuthorizationInfo var17 = new org.jsecurity.authz.SimpleAuthorizationInfo();
    var17.addStringPermission("hi!");
    java.io.InputStream var21 = org.jsecurity.util.ClassUtils.getResourceAsStream("");
    java.lang.Object[] var22 = new java.lang.Object[] { var21};
    java.util.List var23 = org.jsecurity.util.CollectionUtils.asList(var22);
    var17.addRoles((java.util.Collection)var23);
    java.util.Set var25 = var17.getRoles();
    java.util.Set var26 = var17.getStringPermissions();
    var14.addStringPermissions((java.util.Collection)var26);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var7);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var21);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var22);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var23);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var25);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var26);

  }

  public void test386() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest7.test386");


    org.jsecurity.authc.UsernamePasswordToken var3 = new org.jsecurity.authc.UsernamePasswordToken("00dc6e22-d7f9-475d-858b-a4d1b70bee5c", "5b932e2b-b95e-47e2-aa30-6b0bc40292e0", true);

  }

  public void test387() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest7.test387");


    org.jsecurity.session.UnknownSessionException var5 = new org.jsecurity.session.UnknownSessionException("dd\uFFFD", (java.io.Serializable)100.0f);
    org.jsecurity.subject.SubjectException var6 = new org.jsecurity.subject.SubjectException("dd\uFFFD", (java.lang.Throwable)var5);
    org.jsecurity.authc.AccountException var7 = new org.jsecurity.authc.AccountException("hi!", (java.lang.Throwable)var6);
    org.jsecurity.session.UnknownSessionException var8 = new org.jsecurity.session.UnknownSessionException((java.lang.Throwable)var6);
    org.jsecurity.session.UnknownSessionException var9 = new org.jsecurity.session.UnknownSessionException((java.lang.Throwable)var6);
    org.jsecurity.authc.ConcurrentAccessException var10 = new org.jsecurity.authc.ConcurrentAccessException((java.lang.Throwable)var6);
    org.jsecurity.authz.HostUnauthorizedException var11 = new org.jsecurity.authz.HostUnauthorizedException("org.jsecurity.realm.text.PropertiesRealm_772", (java.lang.Throwable)var10);

  }

  public void test388() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest7.test388");


    org.jsecurity.realm.text.TextConfigurationRealm var0 = new org.jsecurity.realm.text.TextConfigurationRealm();
    java.io.InputStream var2 = org.jsecurity.util.ClassUtils.getResourceAsStream("");
    java.lang.Object[] var3 = new java.lang.Object[] { var2};
    java.util.List var4 = org.jsecurity.util.CollectionUtils.asList(var3);
    org.jsecurity.authc.pam.ModularRealmAuthenticator var5 = new org.jsecurity.authc.pam.ModularRealmAuthenticator(var4);
    org.jsecurity.subject.SimplePrincipalCollection var7 = new org.jsecurity.subject.SimplePrincipalCollection((java.util.Collection)var4, "org.jsecurity.authz.UnauthorizedException: org.jsecurity.session.ExpiredSessionException: ");
    org.jsecurity.session.UnknownSessionException var12 = new org.jsecurity.session.UnknownSessionException("dd\uFFFD", (java.io.Serializable)100.0f);
    org.jsecurity.session.SessionException var14 = new org.jsecurity.session.SessionException("dd\uFFFD", (java.lang.Throwable)var12, (java.io.Serializable)0);
    org.jsecurity.session.SessionException var15 = new org.jsecurity.session.SessionException("dd\uFFFD", (java.lang.Throwable)var12);
    var7.add((java.lang.Object)var15, "org.jsecurity.config.ConfigurationException: dd\uFFFD");
    var0.onLogout((org.jsecurity.subject.PrincipalCollection)var7);
    org.jsecurity.authc.ExpiredCredentialsException var20 = new org.jsecurity.authc.ExpiredCredentialsException();
    org.jsecurity.session.ExpiredSessionException var21 = new org.jsecurity.session.ExpiredSessionException("", (java.lang.Throwable)var20);
    java.lang.Throwable[] var22 = var21.getSuppressed();
    org.jsecurity.io.ResourceException var23 = new org.jsecurity.io.ResourceException((java.lang.Throwable)var21);
    org.jsecurity.authc.SimpleAuthenticationInfo var24 = new org.jsecurity.authc.SimpleAuthenticationInfo((org.jsecurity.subject.PrincipalCollection)var7, (java.lang.Object)var21);
    org.jsecurity.authc.ExcessiveAttemptsException var25 = new org.jsecurity.authc.ExcessiveAttemptsException((java.lang.Throwable)var21);
    org.jsecurity.session.InvalidSessionException var26 = new org.jsecurity.session.InvalidSessionException((java.lang.Throwable)var25);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var2);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var3);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var4);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var22);

  }

  public void test389() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest7.test389");


    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      java.io.InputStream var1 = org.jsecurity.io.ResourceUtils.getInputStreamForPath("b2520fab-64b0-486c-9afc-fa4205a960ba");
      fail("Expected exception of type java.io.FileNotFoundException");
    } catch (java.io.FileNotFoundException e) {
      // Expected exception.
    }

  }

  public void test390() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest7.test390");


    byte[] var4 = new byte[] { (byte)100, (byte)100, (byte)(-1)};
    java.lang.String var5 = org.jsecurity.codec.CodecSupport.toString(var4);
    byte[] var6 = org.jsecurity.codec.Base64.encode(var4);
    char[] var7 = org.jsecurity.codec.Hex.encode(var4);
    org.jsecurity.session.UnknownSessionException var13 = new org.jsecurity.session.UnknownSessionException("dd\uFFFD", (java.io.Serializable)100.0f);
    org.jsecurity.subject.SubjectException var14 = new org.jsecurity.subject.SubjectException("dd\uFFFD", (java.lang.Throwable)var13);
    org.jsecurity.authc.AccountException var15 = new org.jsecurity.authc.AccountException("hi!", (java.lang.Throwable)var14);
    org.jsecurity.session.UnknownSessionException var16 = new org.jsecurity.session.UnknownSessionException((java.lang.Throwable)var14);
    org.jsecurity.codec.CodecException var17 = new org.jsecurity.codec.CodecException((java.lang.Throwable)var14);
    org.jsecurity.authz.HostUnauthorizedException var18 = new org.jsecurity.authz.HostUnauthorizedException((java.lang.Throwable)var14);
    java.net.InetAddress var19 = var18.getHostAddress();
    org.jsecurity.session.mgt.SimpleSession var20 = new org.jsecurity.session.mgt.SimpleSession();
    var20.setTimeout((-1L));
    org.jsecurity.session.mgt.SimpleSession var23 = new org.jsecurity.session.mgt.SimpleSession();
    java.util.Date var24 = var23.getLastAccessTime();
    var20.setLastAccessTime(var24);
    java.net.InetAddress var26 = var20.getHostAddress();
    org.jsecurity.authz.HostUnauthorizedException var27 = new org.jsecurity.authz.HostUnauthorizedException(var26);
    org.jsecurity.authz.HostUnauthorizedException var28 = new org.jsecurity.authz.HostUnauthorizedException(var26);
    var18.setHostAddress(var26);
    org.jsecurity.authc.UsernamePasswordToken var30 = new org.jsecurity.authc.UsernamePasswordToken("c2fe5c81-2549-4571-98f1-95504b63acfd", var7, true, var26);
    var30.clear();
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var4);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var5 + "' != '" + "dd\uFFFD"+ "'", var5.equals("dd\uFFFD"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var6);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var7);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var19);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var24);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var26);

  }

  public void test391() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest7.test391");


    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      org.jsecurity.crypto.hash.Sha256Hash var1 = org.jsecurity.crypto.hash.Sha256Hash.fromHexString("4325aa75-1a86-4a48-a011-740ece4890ec");
      fail("Expected exception of type java.lang.IllegalArgumentException");
    } catch (java.lang.IllegalArgumentException e) {
      // Expected exception.
    }

  }

  public void test392() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest7.test392");


    org.jsecurity.session.ExpiredSessionException var1 = new org.jsecurity.session.ExpiredSessionException("5dd0c65d-1422-49c2-becb-9e8dca619ab3");

  }

  public void test393() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest7.test393");


    org.jsecurity.session.UnknownSessionException var4 = new org.jsecurity.session.UnknownSessionException("dd\uFFFD", (java.io.Serializable)100.0f);
    org.jsecurity.subject.SubjectException var5 = new org.jsecurity.subject.SubjectException("dd\uFFFD", (java.lang.Throwable)var4);
    org.jsecurity.authc.AccountException var6 = new org.jsecurity.authc.AccountException("hi!", (java.lang.Throwable)var5);
    org.jsecurity.session.UnknownSessionException var7 = new org.jsecurity.session.UnknownSessionException((java.lang.Throwable)var5);
    org.jsecurity.codec.CodecException var8 = new org.jsecurity.codec.CodecException((java.lang.Throwable)var5);
    org.jsecurity.authz.HostUnauthorizedException var9 = new org.jsecurity.authz.HostUnauthorizedException((java.lang.Throwable)var5);
    java.net.InetAddress var10 = var9.getHostAddress();
    org.jsecurity.authz.HostUnauthorizedException var11 = new org.jsecurity.authz.HostUnauthorizedException((java.lang.Throwable)var9);
    char[] var14 = new char[] { };
    org.jsecurity.authc.UsernamePasswordToken var16 = new org.jsecurity.authc.UsernamePasswordToken("hi!", var14, true);
    org.jsecurity.authc.UsernamePasswordToken var17 = new org.jsecurity.authc.UsernamePasswordToken("\u0000\u0000", var14);
    org.jsecurity.session.mgt.SimpleSession var18 = new org.jsecurity.session.mgt.SimpleSession();
    var18.setTimeout((-1L));
    org.jsecurity.session.mgt.SimpleSession var21 = new org.jsecurity.session.mgt.SimpleSession();
    java.util.Date var22 = var21.getLastAccessTime();
    var18.setLastAccessTime(var22);
    java.net.InetAddress var24 = var18.getHostAddress();
    var17.setInetAddress(var24);
    org.jsecurity.session.mgt.SimpleSession var26 = new org.jsecurity.session.mgt.SimpleSession(var24);
    var11.setHostAddress(var24);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var10);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var14);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var22);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var24);

  }

  public void test394() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest7.test394");


    org.jsecurity.session.mgt.eis.MemorySessionDAO var0 = new org.jsecurity.session.mgt.eis.MemorySessionDAO();
    org.jsecurity.cache.Cache var1 = var0.getActiveSessionsCache();
    org.jsecurity.cache.CacheManager var2 = var0.getCacheManager();
    org.jsecurity.cache.Cache var3 = var0.getActiveSessionsCache();
    org.jsecurity.session.mgt.eis.MemorySessionDAO var4 = new org.jsecurity.session.mgt.eis.MemorySessionDAO();
    org.jsecurity.cache.Cache var5 = var4.getActiveSessionsCache();
    var4.setActiveSessionsCacheName("dd\uFFFD");
    java.util.Collection var8 = var4.getActiveSessions();
    java.lang.String var9 = var4.getActiveSessionsCacheName();
    org.jsecurity.session.mgt.SimpleSession var10 = new org.jsecurity.session.mgt.SimpleSession();
    var10.touch();
    var10.validate();
    java.io.Serializable var13 = var4.create((org.jsecurity.session.Session)var10);
    var10.setExpired(false);
    long var16 = var10.getTimeout();
    java.io.Serializable var17 = var0.create((org.jsecurity.session.Session)var10);
    org.jsecurity.cache.Cache var18 = var0.getActiveSessionsCache();
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var1);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var2);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var3);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var5);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var8);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var9 + "' != '" + "dd\uFFFD"+ "'", var9.equals("dd\uFFFD"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var13 + "' != '" + "18634120-0ae3-49b3-88ea-aa0304d59567"+ "'", var13.equals("18634120-0ae3-49b3-88ea-aa0304d59567"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var16 == 1800000L);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var17 + "' != '" + "469c0e44-f8bf-4146-8fca-cc3d9c35e7ca"+ "'", var17.equals("469c0e44-f8bf-4146-8fca-cc3d9c35e7ca"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var18);

  }

  public void test395() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest7.test395");


    org.jsecurity.session.mgt.eis.MemorySessionDAO var0 = new org.jsecurity.session.mgt.eis.MemorySessionDAO();
    org.jsecurity.cache.Cache var1 = var0.getActiveSessionsCache();
    org.jsecurity.cache.CacheManager var2 = var0.getCacheManager();
    org.jsecurity.cache.HashtableCacheManager var3 = new org.jsecurity.cache.HashtableCacheManager();
    org.jsecurity.cache.Cache var5 = var3.getCache("\u0000\u0000");
    var0.setActiveSessionsCache(var5);
    java.io.InputStream var8 = org.jsecurity.util.ClassUtils.getResourceAsStream("");
    java.lang.Object[] var9 = new java.lang.Object[] { var8};
    java.util.List var10 = org.jsecurity.util.CollectionUtils.asList(var9);
    org.jsecurity.authc.pam.ModularRealmAuthenticator var11 = new org.jsecurity.authc.pam.ModularRealmAuthenticator(var10);
    org.jsecurity.authc.pam.AllSuccessfulModularAuthenticationStrategy var12 = new org.jsecurity.authc.pam.AllSuccessfulModularAuthenticationStrategy();
    var11.setModularAuthenticationStrategy((org.jsecurity.authc.pam.ModularAuthenticationStrategy)var12);
    org.jsecurity.authz.SimpleAuthorizationInfo var14 = new org.jsecurity.authz.SimpleAuthorizationInfo();
    var14.addStringPermission("hi!");
    java.io.InputStream var18 = org.jsecurity.util.ClassUtils.getResourceAsStream("");
    java.lang.Object[] var19 = new java.lang.Object[] { var18};
    java.util.List var20 = org.jsecurity.util.CollectionUtils.asList(var19);
    var14.addRoles((java.util.Collection)var20);
    var11.setAuthenticationListeners((java.util.Collection)var20);
    org.jsecurity.realm.activedirectory.ActiveDirectoryRealm var23 = new org.jsecurity.realm.activedirectory.ActiveDirectoryRealm();
    var23.setPrincipalSuffix("");
    var11.setRealm((org.jsecurity.realm.Realm)var23);
    org.jsecurity.cache.HashtableCacheManager var27 = new org.jsecurity.cache.HashtableCacheManager();
    org.jsecurity.cache.Cache var29 = var27.getCache("\u0000\u0000");
    var23.setAuthorizationCache(var29);
    var0.setActiveSessionsCache(var29);
    org.jsecurity.session.mgt.SimpleSession var32 = new org.jsecurity.session.mgt.SimpleSession();
    java.io.Serializable var33 = var0.create((org.jsecurity.session.Session)var32);
    org.jsecurity.session.mgt.SimpleSession var34 = new org.jsecurity.session.mgt.SimpleSession();
    var34.touch();
    var34.validate();
    org.jsecurity.session.mgt.SimpleSession var37 = new org.jsecurity.session.mgt.SimpleSession();
    var37.setTimeout((-1L));
    org.jsecurity.session.mgt.SimpleSession var40 = new org.jsecurity.session.mgt.SimpleSession();
    java.util.Date var41 = var40.getLastAccessTime();
    var37.setLastAccessTime(var41);
    org.jsecurity.session.mgt.SimpleSession var43 = new org.jsecurity.session.mgt.SimpleSession();
    java.util.Date var44 = var43.getLastAccessTime();
    var37.setStopTimestamp(var44);
    var34.setLastAccessTime(var44);
    var32.setLastAccessTime(var44);
    java.util.Date var48 = var32.getLastAccessTime();
    org.jsecurity.config.ReflectionBuilder var49 = new org.jsecurity.config.ReflectionBuilder();
    org.jsecurity.io.IniResource var50 = new org.jsecurity.io.IniResource();
    var50.setCharsetName("org.jsecurity.authz.UnauthorizedException: org.jsecurity.session.ExpiredSessionException: ");
    java.util.Map var53 = var50.getSections();
    java.util.Map var54 = var49.buildObjects(var53);
    org.jsecurity.config.ReflectionBuilder var55 = new org.jsecurity.config.ReflectionBuilder();
    org.jsecurity.io.IniResource var56 = new org.jsecurity.io.IniResource();
    var56.setCharsetName("org.jsecurity.authz.UnauthorizedException: org.jsecurity.session.ExpiredSessionException: ");
    java.util.Map var59 = var56.getSections();
    java.util.Map var60 = var55.buildObjects(var59);
    java.util.Map var61 = var49.buildObjects(var60);
    java.util.Map var62 = var49.getObjects();
    org.jsecurity.config.ReflectionBuilder var63 = new org.jsecurity.config.ReflectionBuilder(var62);
    java.util.Map var64 = var63.getObjects();
    org.jsecurity.JSecurityException var67 = new org.jsecurity.JSecurityException();
    org.jsecurity.authc.LockedAccountException var68 = new org.jsecurity.authc.LockedAccountException("org.jsecurity.config.ConfigurationException: dd\uFFFD", (java.lang.Throwable)var67);
    org.jsecurity.authc.UnknownAccountException var69 = new org.jsecurity.authc.UnknownAccountException("a2b823b1e72eae2b727289df8a00a89df8a0bab6ad8a89c4c5c7a9b62a270000", (java.lang.Throwable)var67);
    org.jsecurity.authc.IncorrectCredentialsException var70 = new org.jsecurity.authc.IncorrectCredentialsException((java.lang.Throwable)var67);
    var32.setAttribute((java.lang.Object)var63, (java.lang.Object)var70);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var1);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var2);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var5);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var8);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var9);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var10);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var18);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var19);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var20);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var29);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var33 + "' != '" + "88d578fd-3e83-4e50-b979-a5324ec94d5a"+ "'", var33.equals("88d578fd-3e83-4e50-b979-a5324ec94d5a"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var41);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var44);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var48);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var53);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var54);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var59);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var60);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var61);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var62);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var64);

  }

  public void test396() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest7.test396");


    org.jsecurity.cache.ehcache.EhCacheManager var0 = new org.jsecurity.cache.ehcache.EhCacheManager();
    var0.init();
    var0.init();
    var0.init();
    var0.destroy();

  }

  public void test397() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest7.test397");


    boolean var1 = org.jsecurity.util.ClassUtils.isAvailable("org.jsecurity.realm.text.PropertiesRealm-282-authorization");
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var1 == false);

  }

  public void test398() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest7.test398");


    org.jsecurity.authz.SimpleAuthorizationInfo var0 = new org.jsecurity.authz.SimpleAuthorizationInfo();
    org.jsecurity.session.UnknownSessionException var5 = new org.jsecurity.session.UnknownSessionException("dd\uFFFD", (java.io.Serializable)100.0f);
    org.jsecurity.subject.SubjectException var6 = new org.jsecurity.subject.SubjectException("dd\uFFFD", (java.lang.Throwable)var5);
    org.jsecurity.io.SerializationException var7 = new org.jsecurity.io.SerializationException("", (java.lang.Throwable)var6);
    java.lang.Throwable[] var8 = var6.getSuppressed();
    java.util.Set var9 = org.jsecurity.util.CollectionUtils.asSet((java.lang.Object[])var8);
    var0.setStringPermissions(var9);
    java.util.Set var11 = var0.getRoles();
    org.jsecurity.authz.SimpleAuthorizingAccount var12 = new org.jsecurity.authz.SimpleAuthorizingAccount();
    java.util.Set var13 = var12.getSimpleRoles();
    org.jsecurity.authz.SimpleRole var14 = new org.jsecurity.authz.SimpleRole();
    org.jsecurity.authz.SimpleAuthorizationInfo var15 = new org.jsecurity.authz.SimpleAuthorizationInfo();
    var15.addRole("a2b823b1e72eae2b727289df8a00a89df8a0bab6ad8a89c4c5c7a9b62a270000");
    org.jsecurity.session.UnknownSessionException var22 = new org.jsecurity.session.UnknownSessionException("dd\uFFFD", (java.io.Serializable)100.0f);
    org.jsecurity.subject.SubjectException var23 = new org.jsecurity.subject.SubjectException("dd\uFFFD", (java.lang.Throwable)var22);
    org.jsecurity.io.SerializationException var24 = new org.jsecurity.io.SerializationException("", (java.lang.Throwable)var23);
    java.lang.Throwable[] var25 = var23.getSuppressed();
    java.util.Set var26 = org.jsecurity.util.CollectionUtils.asSet((java.lang.Object[])var25);
    var15.addRoles((java.util.Collection)var26);
    var14.addAll((java.util.Collection)var26);
    org.jsecurity.authz.SimpleRole var30 = new org.jsecurity.authz.SimpleRole();
    org.jsecurity.authz.permission.WildcardPermission var33 = new org.jsecurity.authz.permission.WildcardPermission("hi!", false);
    boolean var34 = var30.isPermitted((org.jsecurity.authz.Permission)var33);
    org.jsecurity.session.InvalidSessionException var35 = new org.jsecurity.session.InvalidSessionException("org.jsecurity.config.ConfigurationException: dd\uFFFD", (java.io.Serializable)var33);
    org.jsecurity.authz.SimpleRole var36 = new org.jsecurity.authz.SimpleRole();
    org.jsecurity.authz.permission.WildcardPermission var39 = new org.jsecurity.authz.permission.WildcardPermission("hi!", false);
    boolean var40 = var36.isPermitted((org.jsecurity.authz.Permission)var39);
    boolean var41 = var33.implies((org.jsecurity.authz.Permission)var39);
    boolean var42 = var14.isPermitted((org.jsecurity.authz.Permission)var39);
    boolean var43 = var12.isPermitted((org.jsecurity.authz.Permission)var39);
    var0.addObjectPermission((org.jsecurity.authz.Permission)var39);
    java.util.Set var45 = var0.getRoles();
    java.util.Set var46 = var0.getRoles();
    java.util.Set var47 = var0.getRoles();
    org.jsecurity.authz.ModularRealmAuthorizer var49 = new org.jsecurity.authz.ModularRealmAuthorizer();
    java.io.InputStream var51 = org.jsecurity.util.ClassUtils.getResourceAsStream("");
    java.lang.Object[] var52 = new java.lang.Object[] { var51};
    java.util.List var53 = org.jsecurity.util.CollectionUtils.asList(var52);
    org.jsecurity.authc.pam.ModularRealmAuthenticator var54 = new org.jsecurity.authc.pam.ModularRealmAuthenticator(var53);
    org.jsecurity.subject.SimplePrincipalCollection var56 = new org.jsecurity.subject.SimplePrincipalCollection((java.util.Collection)var53, "org.jsecurity.authz.UnauthorizedException: org.jsecurity.session.ExpiredSessionException: ");
    org.jsecurity.session.UnknownSessionException var61 = new org.jsecurity.session.UnknownSessionException("dd\uFFFD", (java.io.Serializable)100.0f);
    org.jsecurity.session.SessionException var63 = new org.jsecurity.session.SessionException("dd\uFFFD", (java.lang.Throwable)var61, (java.io.Serializable)0);
    org.jsecurity.session.SessionException var64 = new org.jsecurity.session.SessionException("dd\uFFFD", (java.lang.Throwable)var61);
    var56.add((java.lang.Object)var64, "org.jsecurity.config.ConfigurationException: dd\uFFFD");
    java.util.Set var67 = var56.asSet();
    var49.setRealms((java.util.Collection)var67);
    org.jsecurity.authz.UnauthorizedException var70 = new org.jsecurity.authz.UnauthorizedException("org.jsecurity.config.ConfigurationException: dd\uFFFD");
    java.lang.Throwable[] var71 = var70.getSuppressed();
    java.util.Set var72 = org.jsecurity.util.CollectionUtils.asSet((java.lang.Object[])var71);
    var49.setRealms((java.util.Collection)var72);
    org.jsecurity.realm.text.PropertiesRealm var74 = new org.jsecurity.realm.text.PropertiesRealm();
    org.jsecurity.realm.activedirectory.ActiveDirectoryRealm var75 = new org.jsecurity.realm.activedirectory.ActiveDirectoryRealm();
    org.jsecurity.authc.credential.Sha256CredentialsMatcher var76 = new org.jsecurity.authc.credential.Sha256CredentialsMatcher();
    var75.setCredentialsMatcher((org.jsecurity.authc.credential.CredentialsMatcher)var76);
    java.lang.String var78 = var75.getAuthorizationCacheName();
    var75.setPrincipalSuffix("org.jsecurity.config.ConfigurationException: dd\uFFFD");
    org.jsecurity.authz.permission.PermissionResolver var81 = var75.getPermissionResolver();
    var74.setPermissionResolver(var81);
    var49.setPermissionResolver(var81);
    org.jsecurity.authz.permission.WildcardPermissionResolver var84 = new org.jsecurity.authz.permission.WildcardPermissionResolver();
    org.jsecurity.authz.Permission var86 = var84.resolvePermission("b017e95a-a08d-4f3a-bab8-cc9b39ef5331");
    org.jsecurity.authz.Permission var88 = var84.resolvePermission("ecd29e3a-c551-4fce-8683-2e49992d04b8");
    var49.setPermissionResolver((org.jsecurity.authz.permission.PermissionResolver)var84);
    java.util.Set var90 = org.jsecurity.util.PermissionUtils.resolveDelimitedPermissions("e23cc964-5ec8-4116-95c0-aa96771b692b", (org.jsecurity.authz.permission.PermissionResolver)var84);
    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      var0.addStringPermissions((java.util.Collection)var90);
      fail("Expected exception of type java.lang.UnsupportedOperationException");
    } catch (java.lang.UnsupportedOperationException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var8);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var9);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var11);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var13);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var25);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var26);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var34 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var40 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var41 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var42 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var43 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var45);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var46);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var47);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var51);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var52);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var53);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var67);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var71);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var72);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var78);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var81);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var86);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var88);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var90);

  }

  public void test399() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest7.test399");


    org.jsecurity.authc.UsernamePasswordToken var2 = new org.jsecurity.authc.UsernamePasswordToken("7f459141-420b-4ce9-8486-8c578b9f7c7e", "1afdbe33-7f88-41a7-81da-4454ab8b0297");
    java.lang.String var3 = var2.getUsername();
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var3 + "' != '" + "7f459141-420b-4ce9-8486-8c578b9f7c7e"+ "'", var3.equals("7f459141-420b-4ce9-8486-8c578b9f7c7e"));

  }

  public void test400() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest7.test400");


    org.jsecurity.jndi.JndiLocator var0 = new org.jsecurity.jndi.JndiLocator();
    java.util.Properties var1 = var0.getJndiEnvironment();
    org.jsecurity.jndi.JndiTemplate var2 = new org.jsecurity.jndi.JndiTemplate();
    java.util.Properties var3 = var2.getEnvironment();
    var0.setJndiTemplate(var2);
    boolean var5 = var0.isResourceRef();
    org.jsecurity.jndi.JndiLocator var6 = new org.jsecurity.jndi.JndiLocator();
    boolean var7 = var6.isResourceRef();
    java.util.Properties var8 = var6.getJndiEnvironment();
    org.jsecurity.realm.jndi.JndiRealmFactory var9 = new org.jsecurity.realm.jndi.JndiRealmFactory();
    java.util.Collection var10 = var9.getJndiNames();
    var9.setJndiNames("e8e5d499-33c0-418e-93f9-76a51372c414");
    org.jsecurity.jndi.JndiTemplate var13 = var9.getJndiTemplate();
    var6.setJndiTemplate(var13);
    var0.setJndiTemplate(var13);
    org.jsecurity.codec.CodecException var19 = new org.jsecurity.codec.CodecException("dd\uFFFD");
    org.jsecurity.authc.ConcurrentAccessException var20 = new org.jsecurity.authc.ConcurrentAccessException("org.jsecurity.authz.UnauthorizedException: org.jsecurity.session.ExpiredSessionException: ", (java.lang.Throwable)var19);
    org.jsecurity.subject.SimplePrincipalCollection var22 = new org.jsecurity.subject.SimplePrincipalCollection((java.lang.Object)var19, "");
    java.io.InputStream var24 = org.jsecurity.util.ClassUtils.getResourceAsStream("");
    java.lang.Object[] var25 = new java.lang.Object[] { var24};
    java.util.List var26 = org.jsecurity.util.CollectionUtils.asList(var25);
    org.jsecurity.authc.pam.ModularRealmAuthenticator var27 = new org.jsecurity.authc.pam.ModularRealmAuthenticator(var26);
    var22.addAll((java.util.Collection)var26, "\u0000\u0000");
    java.io.InputStream var31 = org.jsecurity.util.ClassUtils.getResourceAsStream("");
    java.lang.Object[] var32 = new java.lang.Object[] { var31};
    java.util.List var33 = org.jsecurity.util.CollectionUtils.asList(var32);
    org.jsecurity.authc.pam.ModularRealmAuthenticator var34 = new org.jsecurity.authc.pam.ModularRealmAuthenticator(var33);
    var22.addAll((java.util.Collection)var33, "\u0000\u0000");
    org.jsecurity.realm.SimpleAccountRealm var38 = new org.jsecurity.realm.SimpleAccountRealm("hi!");
    java.lang.Class var39 = var38.getAuthenticationTokenClass();
    java.util.Collection var40 = org.jsecurity.util.CollectionUtils.emptyCollection(var39);
    java.lang.Object var41 = org.jsecurity.util.ClassUtils.newInstance(var39);
    java.util.Collection var42 = var22.byType(var39);
    org.jsecurity.authc.ExpiredCredentialsException var44 = new org.jsecurity.authc.ExpiredCredentialsException();
    org.jsecurity.session.ExpiredSessionException var45 = new org.jsecurity.session.ExpiredSessionException("", (java.lang.Throwable)var44);
    java.lang.Throwable[] var46 = var45.getSuppressed();
    java.lang.Object var47 = org.jsecurity.util.ClassUtils.newInstance(var39, (java.lang.Object[])var46);
    java.lang.Object var48 = org.jsecurity.util.ClassUtils.newInstance(var39);
    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      java.lang.Object var49 = var13.lookup("92cc9917-55ec-4f8f-9133-00d142a214d9", var39);
      fail("Expected exception of type javax.naming.NoInitialContextException");
    } catch (javax.naming.NoInitialContextException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var1);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var3);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var5 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var7 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var8);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var10);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var13);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var24);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var25);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var26);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var31);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var32);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var33);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var39);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var40);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var41);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var42);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var46);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var47);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var48);

  }

  public void test401() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest7.test401");


    org.jsecurity.realm.activedirectory.ActiveDirectoryRealm var0 = new org.jsecurity.realm.activedirectory.ActiveDirectoryRealm();
    org.jsecurity.authc.credential.Sha256CredentialsMatcher var1 = new org.jsecurity.authc.credential.Sha256CredentialsMatcher();
    var0.setCredentialsMatcher((org.jsecurity.authc.credential.CredentialsMatcher)var1);
    java.lang.String var3 = var0.getAuthorizationCacheName();
    var0.setSystemUsername("a2b823b1e72eae2b727289df8a00a89df8a0bab6ad8a89c4c5c7a9b62a270000");
    org.jsecurity.realm.text.TextConfigurationRealm var6 = new org.jsecurity.realm.text.TextConfigurationRealm();
    org.jsecurity.realm.text.TextConfigurationRealm var7 = new org.jsecurity.realm.text.TextConfigurationRealm();
    java.io.InputStream var9 = org.jsecurity.util.ClassUtils.getResourceAsStream("");
    java.lang.Object[] var10 = new java.lang.Object[] { var9};
    java.util.List var11 = org.jsecurity.util.CollectionUtils.asList(var10);
    org.jsecurity.authc.pam.ModularRealmAuthenticator var12 = new org.jsecurity.authc.pam.ModularRealmAuthenticator(var11);
    org.jsecurity.subject.SimplePrincipalCollection var14 = new org.jsecurity.subject.SimplePrincipalCollection((java.util.Collection)var11, "org.jsecurity.authz.UnauthorizedException: org.jsecurity.session.ExpiredSessionException: ");
    org.jsecurity.session.UnknownSessionException var19 = new org.jsecurity.session.UnknownSessionException("dd\uFFFD", (java.io.Serializable)100.0f);
    org.jsecurity.session.SessionException var21 = new org.jsecurity.session.SessionException("dd\uFFFD", (java.lang.Throwable)var19, (java.io.Serializable)0);
    org.jsecurity.session.SessionException var22 = new org.jsecurity.session.SessionException("dd\uFFFD", (java.lang.Throwable)var19);
    var14.add((java.lang.Object)var22, "org.jsecurity.config.ConfigurationException: dd\uFFFD");
    var7.onLogout((org.jsecurity.subject.PrincipalCollection)var14);
    java.util.Collection var27 = var14.fromRealm("\u0000\u0000\u0000");
    var6.onLogout((org.jsecurity.subject.PrincipalCollection)var14);
    java.util.Set var29 = var14.asSet();
    java.io.InputStream var31 = org.jsecurity.util.ClassUtils.getResourceAsStream("");
    java.lang.Object[] var32 = new java.lang.Object[] { var31};
    java.util.List var33 = org.jsecurity.util.CollectionUtils.asList(var32);
    org.jsecurity.authc.pam.ModularRealmAuthenticator var34 = new org.jsecurity.authc.pam.ModularRealmAuthenticator(var33);
    org.jsecurity.subject.SimplePrincipalCollection var36 = new org.jsecurity.subject.SimplePrincipalCollection((java.util.Collection)var33, "org.jsecurity.authz.UnauthorizedException: org.jsecurity.session.ExpiredSessionException: ");
    org.jsecurity.io.ResourceException var40 = new org.jsecurity.io.ResourceException("hi!");
    org.jsecurity.authc.UnknownAccountException var41 = new org.jsecurity.authc.UnknownAccountException((java.lang.Throwable)var40);
    org.jsecurity.session.StoppedSessionException var42 = new org.jsecurity.session.StoppedSessionException("dd\uFFFD", (java.io.Serializable)var40);
    org.jsecurity.session.UnknownSessionException var43 = new org.jsecurity.session.UnknownSessionException("org.jsecurity.authz.UnauthorizedException: org.jsecurity.session.ExpiredSessionException: ", (java.lang.Throwable)var40);
    boolean var44 = var36.equals((java.lang.Object)var40);
    org.jsecurity.authz.aop.RoleAnnotationMethodInterceptor var45 = new org.jsecurity.authz.aop.RoleAnnotationMethodInterceptor();
    org.jsecurity.aop.AnnotationHandler var46 = var45.getHandler();
    java.lang.Class var47 = var46.getAnnotationClass();
    java.lang.Object var48 = var36.oneByType(var47);
    boolean var49 = var36.isEmpty();
    var14.addAll((org.jsecurity.subject.PrincipalCollection)var36);
    org.jsecurity.authz.aop.RoleAnnotationMethodInterceptor var51 = new org.jsecurity.authz.aop.RoleAnnotationMethodInterceptor();
    org.jsecurity.authz.aop.UserAnnotationMethodInterceptor var52 = new org.jsecurity.authz.aop.UserAnnotationMethodInterceptor();
    org.jsecurity.aop.AnnotationHandler var53 = var52.getHandler();
    var51.setHandler(var53);
    java.lang.Class var55 = var53.getAnnotationClass();
    java.lang.Object var56 = var14.oneByType(var55);
    java.lang.String[] var63 = org.jsecurity.util.StringUtils.split("org.jsecurity.config.ConfigurationException: dd\uFFFD-4org.jsecurity.config.ConfigurationException: dd\uFFFD02-8085-950org.jsecurity.config.ConfigurationException: dd\uFFFDbb026org.jsecurity.config.ConfigurationException: dd\uFFFD06", '4', '4', '#', false, false);
    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      var0.checkPermissions((org.jsecurity.subject.PrincipalCollection)var14, var63);
      fail("Expected exception of type java.util.NoSuchElementException");
    } catch (java.util.NoSuchElementException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var3);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var9);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var10);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var11);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var27);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var29);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var31);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var32);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var33);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var44 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var46);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var47);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var48);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var49 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var53);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var55);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var56);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var63);

  }

  public void test402() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest7.test402");


    org.jsecurity.authz.aop.PermissionAnnotationMethodInterceptor var0 = new org.jsecurity.authz.aop.PermissionAnnotationMethodInterceptor();
    org.jsecurity.authz.aop.GuestAnnotationMethodInterceptor var1 = new org.jsecurity.authz.aop.GuestAnnotationMethodInterceptor();
    org.jsecurity.authz.aop.UserAnnotationHandler var2 = new org.jsecurity.authz.aop.UserAnnotationHandler();
    java.lang.Class var3 = var2.getAnnotationClass();
    var1.setHandler((org.jsecurity.aop.AnnotationHandler)var2);
    var0.setHandler((org.jsecurity.aop.AnnotationHandler)var2);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var3);

  }

  public void test403() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest7.test403");


    org.jsecurity.codec.CodecException var1 = new org.jsecurity.codec.CodecException("3d7a5d91-ee7d-4414-b96f-4f9e3da37be2");

  }

  public void test404() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest7.test404");


    org.jsecurity.config.UnresolveableReferenceException var1 = new org.jsecurity.config.UnresolveableReferenceException("org.jsecurity.realm.text.PropertiesRealm_2851");

  }

  public void test405() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest7.test405");


    org.jsecurity.config.ReflectionBuilder var0 = new org.jsecurity.config.ReflectionBuilder();
    org.jsecurity.io.IniResource var1 = new org.jsecurity.io.IniResource();
    var1.setCharsetName("org.jsecurity.authz.UnauthorizedException: org.jsecurity.session.ExpiredSessionException: ");
    java.util.Map var4 = var1.getSections();
    java.util.Map var5 = var0.buildObjects(var4);
    org.jsecurity.realm.activedirectory.ActiveDirectoryRealm var6 = new org.jsecurity.realm.activedirectory.ActiveDirectoryRealm();
    org.jsecurity.authc.credential.Sha256CredentialsMatcher var7 = new org.jsecurity.authc.credential.Sha256CredentialsMatcher();
    var6.setCredentialsMatcher((org.jsecurity.authc.credential.CredentialsMatcher)var7);
    java.lang.String var9 = var6.getAuthorizationCacheName();
    var6.setUrl("hi!");
    org.jsecurity.io.IniResource var12 = new org.jsecurity.io.IniResource();
    java.util.Map var13 = var12.getSections();
    java.util.Map var14 = var12.getSections();
    var6.setGroupRolesMap(var14);
    org.jsecurity.config.ReflectionBuilder var16 = new org.jsecurity.config.ReflectionBuilder(var14);
    org.jsecurity.config.ReflectionBuilder var17 = new org.jsecurity.config.ReflectionBuilder();
    org.jsecurity.io.IniResource var18 = new org.jsecurity.io.IniResource();
    var18.setCharsetName("org.jsecurity.authz.UnauthorizedException: org.jsecurity.session.ExpiredSessionException: ");
    java.util.Map var21 = var18.getSections();
    java.util.Map var22 = var17.buildObjects(var21);
    var16.setObjects(var22);
    var0.setObjects(var22);
    org.jsecurity.config.ReflectionBuilder var25 = new org.jsecurity.config.ReflectionBuilder();
    org.jsecurity.io.IniResource var26 = new org.jsecurity.io.IniResource();
    var26.setCharsetName("org.jsecurity.authz.UnauthorizedException: org.jsecurity.session.ExpiredSessionException: ");
    java.util.Map var29 = var26.getSections();
    java.util.Map var30 = var25.buildObjects(var29);
    org.jsecurity.config.ReflectionBuilder var31 = new org.jsecurity.config.ReflectionBuilder();
    org.jsecurity.io.IniResource var32 = new org.jsecurity.io.IniResource();
    var32.setCharsetName("org.jsecurity.authz.UnauthorizedException: org.jsecurity.session.ExpiredSessionException: ");
    java.util.Map var35 = var32.getSections();
    java.util.Map var36 = var31.buildObjects(var35);
    java.util.Map var37 = var25.buildObjects(var36);
    java.util.Map var38 = var25.getObjects();
    org.jsecurity.config.ReflectionBuilder var39 = new org.jsecurity.config.ReflectionBuilder(var38);
    org.jsecurity.session.mgt.SimpleSession var40 = new org.jsecurity.session.mgt.SimpleSession();
    org.jsecurity.io.SerializationException var43 = new org.jsecurity.io.SerializationException("org.jsecurity.config.ConfigurationException: dd\uFFFD");
    org.jsecurity.authc.AccountException var44 = new org.jsecurity.authc.AccountException("a2b823b1e72eae2b727289df8a00a89df8a0bab6ad8a89c4c5c7a9b62a270000", (java.lang.Throwable)var43);
    var40.setId((java.io.Serializable)"a2b823b1e72eae2b727289df8a00a89df8a0bab6ad8a89c4c5c7a9b62a270000");
    org.jsecurity.config.ReflectionBuilder var46 = new org.jsecurity.config.ReflectionBuilder();
    org.jsecurity.config.ReflectionBuilder var47 = new org.jsecurity.config.ReflectionBuilder();
    org.jsecurity.io.IniResource var48 = new org.jsecurity.io.IniResource();
    var48.setCharsetName("org.jsecurity.authz.UnauthorizedException: org.jsecurity.session.ExpiredSessionException: ");
    java.util.Map var51 = var48.getSections();
    java.util.Map var52 = var47.buildObjects(var51);
    org.jsecurity.config.ReflectionBuilder var53 = new org.jsecurity.config.ReflectionBuilder();
    org.jsecurity.io.IniResource var54 = new org.jsecurity.io.IniResource();
    var54.setCharsetName("org.jsecurity.authz.UnauthorizedException: org.jsecurity.session.ExpiredSessionException: ");
    java.util.Map var57 = var54.getSections();
    java.util.Map var58 = var53.buildObjects(var57);
    java.util.Map var59 = var47.buildObjects(var58);
    java.util.Map var60 = var46.buildObjects(var59);
    var40.setAttributes(var60);
    var39.setObjects(var60);
    org.jsecurity.realm.ldap.DefaultLdapContextFactory var63 = new org.jsecurity.realm.ldap.DefaultLdapContextFactory();
    org.jsecurity.io.IniResource var64 = new org.jsecurity.io.IniResource();
    var64.setCharsetName("org.jsecurity.authz.UnauthorizedException: org.jsecurity.session.ExpiredSessionException: ");
    java.util.Map var67 = var64.getSections();
    var63.setAdditionalEnvironment(var67);
    var39.setObjects(var67);
    var0.setObjects(var67);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var4);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var5);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var9);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var13);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var14);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var21);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var22);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var29);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var30);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var35);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var36);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var37);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var38);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var51);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var52);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var57);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var58);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var59);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var60);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var67);

  }

  public void test406() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest7.test406");


    org.jsecurity.session.UnknownSessionException var4 = new org.jsecurity.session.UnknownSessionException("dd\uFFFD", (java.io.Serializable)100.0f);
    org.jsecurity.subject.SubjectException var5 = new org.jsecurity.subject.SubjectException("dd\uFFFD", (java.lang.Throwable)var4);
    org.jsecurity.io.SerializationException var6 = new org.jsecurity.io.SerializationException("", (java.lang.Throwable)var5);
    java.lang.Throwable[] var7 = var5.getSuppressed();
    java.lang.Throwable[] var8 = var5.getSuppressed();
    org.jsecurity.authz.SimpleAuthorizationInfo var11 = new org.jsecurity.authz.SimpleAuthorizationInfo();
    var11.addRole("a2b823b1e72eae2b727289df8a00a89df8a0bab6ad8a89c4c5c7a9b62a270000");
    org.jsecurity.session.UnknownSessionException var18 = new org.jsecurity.session.UnknownSessionException("dd\uFFFD", (java.io.Serializable)100.0f);
    org.jsecurity.subject.SubjectException var19 = new org.jsecurity.subject.SubjectException("dd\uFFFD", (java.lang.Throwable)var18);
    org.jsecurity.io.SerializationException var20 = new org.jsecurity.io.SerializationException("", (java.lang.Throwable)var19);
    java.lang.Throwable[] var21 = var19.getSuppressed();
    java.util.Set var22 = org.jsecurity.util.CollectionUtils.asSet((java.lang.Object[])var21);
    var11.addRoles((java.util.Collection)var22);
    java.io.InputStream var25 = org.jsecurity.util.ClassUtils.getResourceAsStream("");
    java.lang.Object[] var26 = new java.lang.Object[] { var25};
    java.util.List var27 = org.jsecurity.util.CollectionUtils.asList(var26);
    org.jsecurity.authc.pam.ModularRealmAuthenticator var28 = new org.jsecurity.authc.pam.ModularRealmAuthenticator(var27);
    org.jsecurity.subject.SimplePrincipalCollection var30 = new org.jsecurity.subject.SimplePrincipalCollection((java.util.Collection)var27, "org.jsecurity.authz.UnauthorizedException: org.jsecurity.session.ExpiredSessionException: ");
    org.jsecurity.session.UnknownSessionException var35 = new org.jsecurity.session.UnknownSessionException("dd\uFFFD", (java.io.Serializable)100.0f);
    org.jsecurity.session.SessionException var37 = new org.jsecurity.session.SessionException("dd\uFFFD", (java.lang.Throwable)var35, (java.io.Serializable)0);
    org.jsecurity.session.SessionException var38 = new org.jsecurity.session.SessionException("dd\uFFFD", (java.lang.Throwable)var35);
    var30.add((java.lang.Object)var38, "org.jsecurity.config.ConfigurationException: dd\uFFFD");
    java.util.Set var41 = var30.asSet();
    org.jsecurity.authz.SimpleAuthorizingAccount var42 = new org.jsecurity.authz.SimpleAuthorizingAccount((java.lang.Object)var8, (java.lang.Object)"\u0000\u0000\u0000", "\u0000\u0000\u0000", var22, var41);
    org.jsecurity.authz.SimpleRole var44 = var42.getRole("\u0000\u0000\u0000");
    org.jsecurity.realm.text.PropertiesRealm var46 = new org.jsecurity.realm.text.PropertiesRealm();
    org.jsecurity.realm.activedirectory.ActiveDirectoryRealm var47 = new org.jsecurity.realm.activedirectory.ActiveDirectoryRealm();
    org.jsecurity.authc.credential.Sha256CredentialsMatcher var48 = new org.jsecurity.authc.credential.Sha256CredentialsMatcher();
    var47.setCredentialsMatcher((org.jsecurity.authc.credential.CredentialsMatcher)var48);
    java.lang.String var50 = var47.getAuthorizationCacheName();
    var47.setPrincipalSuffix("org.jsecurity.config.ConfigurationException: dd\uFFFD");
    org.jsecurity.authz.permission.PermissionResolver var53 = var47.getPermissionResolver();
    var46.setPermissionResolver(var53);
    java.util.Set var55 = org.jsecurity.util.PermissionUtils.resolveDelimitedPermissions("\uFFFD\uFFFD#\uFFFD\uFFFD.\uFFFD+r\uFFFD\u6959(\uFFFD\uFFFDW\uFFFDq\uFFFD.\uFFFD\uFFFD^jY\uFFFDj\uFFFDa\uFFFD\uFFFD\uFFFDj\u0628", var53);
    var42.setSimpleRoles(var55);
    org.jsecurity.authz.permission.WildcardPermissionResolver var58 = new org.jsecurity.authz.permission.WildcardPermissionResolver();
    java.util.Set var59 = org.jsecurity.util.PermissionUtils.resolveDelimitedPermissions("a2b823b1e72eae2b727289df8a00a89df8a0bab6ad8a89c4c5c7a9b62a270000", (org.jsecurity.authz.permission.PermissionResolver)var58);
    var42.addAll((java.util.Collection)var59);
    java.lang.String var61 = var42.toString();
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var7);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var8);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var21);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var22);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var25);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var26);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var27);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var41);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var44);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var50);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var53);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var55);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var59);

  }

  public void test407() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest7.test407");


    org.jsecurity.realm.text.TextConfigurationRealm var0 = new org.jsecurity.realm.text.TextConfigurationRealm();
    org.jsecurity.cache.HashtableCache var2 = new org.jsecurity.cache.HashtableCache("orgjsecurityauthcCredentialsException783ccd3148a842dd890fdf885a7baafAA==");
    int var3 = var2.size();
    org.jsecurity.session.UnknownSessionException var8 = new org.jsecurity.session.UnknownSessionException("dd\uFFFD", (java.io.Serializable)100.0f);
    org.jsecurity.subject.SubjectException var9 = new org.jsecurity.subject.SubjectException("dd\uFFFD", (java.lang.Throwable)var8);
    org.jsecurity.authc.AccountException var10 = new org.jsecurity.authc.AccountException("hi!", (java.lang.Throwable)var9);
    org.jsecurity.session.UnknownSessionException var11 = new org.jsecurity.session.UnknownSessionException((java.lang.Throwable)var9);
    org.jsecurity.codec.CodecException var12 = new org.jsecurity.codec.CodecException((java.lang.Throwable)var9);
    org.jsecurity.config.UnresolveableReferenceException var13 = new org.jsecurity.config.UnresolveableReferenceException((java.lang.Throwable)var9);
    char[] var17 = new char[] { ' ', ' '};
    org.jsecurity.authc.UsernamePasswordToken var18 = new org.jsecurity.authc.UsernamePasswordToken("hi!", var17);
    char[] var22 = new char[] { '4', '#'};
    org.jsecurity.authc.UsernamePasswordToken var23 = new org.jsecurity.authc.UsernamePasswordToken("\u0000\u0000", var22);
    var18.setPassword(var22);
    var2.put((java.lang.Object)var9, (java.lang.Object)var22);
    var0.setAuthorizationCache((org.jsecurity.cache.Cache)var2);
    java.lang.String var27 = var2.toString();
    java.lang.String var28 = var2.toString();
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var3 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var17);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var22);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var27 + "' != '" + "HashtableCache [orgjsecurityauthcCredentialsException783ccd3148a842dd890fdf885a7baafAA==]"+ "'", var27.equals("HashtableCache [orgjsecurityauthcCredentialsException783ccd3148a842dd890fdf885a7baafAA==]"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var28 + "' != '" + "HashtableCache [orgjsecurityauthcCredentialsException783ccd3148a842dd890fdf885a7baafAA==]"+ "'", var28.equals("HashtableCache [orgjsecurityauthcCredentialsException783ccd3148a842dd890fdf885a7baafAA==]"));

  }

  public void test408() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest7.test408");


    org.jsecurity.codec.CodecException var2 = new org.jsecurity.codec.CodecException("dd\uFFFD");
    org.jsecurity.authc.ConcurrentAccessException var3 = new org.jsecurity.authc.ConcurrentAccessException("org.jsecurity.authz.UnauthorizedException: org.jsecurity.session.ExpiredSessionException: ", (java.lang.Throwable)var2);
    org.jsecurity.subject.SimplePrincipalCollection var5 = new org.jsecurity.subject.SimplePrincipalCollection((java.lang.Object)var2, "");
    java.io.InputStream var7 = org.jsecurity.util.ClassUtils.getResourceAsStream("");
    java.lang.Object[] var8 = new java.lang.Object[] { var7};
    java.util.List var9 = org.jsecurity.util.CollectionUtils.asList(var8);
    org.jsecurity.authc.pam.ModularRealmAuthenticator var10 = new org.jsecurity.authc.pam.ModularRealmAuthenticator(var9);
    var5.addAll((java.util.Collection)var9, "\u0000\u0000");
    org.jsecurity.authz.UnauthorizedException var14 = new org.jsecurity.authz.UnauthorizedException();
    org.jsecurity.session.SessionException var16 = new org.jsecurity.session.SessionException("", (java.lang.Throwable)var14, (java.io.Serializable)"org.jsecurity.config.ConfigurationException: dd\uFFFD");
    org.jsecurity.crypto.hash.Sha1Hash var17 = new org.jsecurity.crypto.hash.Sha1Hash((java.lang.Object)"");
    org.jsecurity.session.UnknownSessionException var22 = new org.jsecurity.session.UnknownSessionException("dd\uFFFD", (java.io.Serializable)100.0f);
    org.jsecurity.subject.SubjectException var23 = new org.jsecurity.subject.SubjectException("dd\uFFFD", (java.lang.Throwable)var22);
    org.jsecurity.io.SerializationException var24 = new org.jsecurity.io.SerializationException("", (java.lang.Throwable)var23);
    java.lang.Throwable[] var25 = var23.getSuppressed();
    java.util.Set var26 = org.jsecurity.util.CollectionUtils.asSet((java.lang.Object[])var25);
    org.jsecurity.authz.SimpleAuthorizationInfo var28 = new org.jsecurity.authz.SimpleAuthorizationInfo();
    org.jsecurity.session.UnknownSessionException var33 = new org.jsecurity.session.UnknownSessionException("dd\uFFFD", (java.io.Serializable)100.0f);
    org.jsecurity.subject.SubjectException var34 = new org.jsecurity.subject.SubjectException("dd\uFFFD", (java.lang.Throwable)var33);
    org.jsecurity.io.SerializationException var35 = new org.jsecurity.io.SerializationException("", (java.lang.Throwable)var34);
    java.lang.Throwable[] var36 = var34.getSuppressed();
    java.util.Set var37 = org.jsecurity.util.CollectionUtils.asSet((java.lang.Object[])var36);
    var28.setStringPermissions(var37);
    java.util.Set var39 = var28.getRoles();
    org.jsecurity.authz.SimpleAuthorizationInfo var40 = new org.jsecurity.authz.SimpleAuthorizationInfo();
    var40.addRole("a2b823b1e72eae2b727289df8a00a89df8a0bab6ad8a89c4c5c7a9b62a270000");
    org.jsecurity.session.UnknownSessionException var47 = new org.jsecurity.session.UnknownSessionException("dd\uFFFD", (java.io.Serializable)100.0f);
    org.jsecurity.subject.SubjectException var48 = new org.jsecurity.subject.SubjectException("dd\uFFFD", (java.lang.Throwable)var47);
    org.jsecurity.io.SerializationException var49 = new org.jsecurity.io.SerializationException("", (java.lang.Throwable)var48);
    java.lang.Throwable[] var50 = var48.getSuppressed();
    java.util.Set var51 = org.jsecurity.util.CollectionUtils.asSet((java.lang.Object[])var50);
    var40.addRoles((java.util.Collection)var51);
    var28.setRoles(var51);
    org.jsecurity.authz.SimpleRole var54 = new org.jsecurity.authz.SimpleRole("org.jsecurity.authz.UnauthorizedException: org.jsecurity.session.ExpiredSessionException: ", var51);
    org.jsecurity.authc.SimpleAccount var55 = new org.jsecurity.authc.SimpleAccount((org.jsecurity.subject.PrincipalCollection)var5, (java.lang.Object)"", var26, var51);
    org.jsecurity.realm.jndi.JndiRealmFactory var56 = new org.jsecurity.realm.jndi.JndiRealmFactory();
    java.io.InputStream var58 = org.jsecurity.util.ClassUtils.getResourceAsStream("");
    java.lang.Object[] var59 = new java.lang.Object[] { var58};
    java.util.List var60 = org.jsecurity.util.CollectionUtils.asList(var59);
    var56.setJndiNames((java.util.Collection)var60);
    org.jsecurity.authz.SimpleRole var62 = new org.jsecurity.authz.SimpleRole();
    org.jsecurity.authz.SimpleAuthorizationInfo var63 = new org.jsecurity.authz.SimpleAuthorizationInfo();
    var63.addRole("a2b823b1e72eae2b727289df8a00a89df8a0bab6ad8a89c4c5c7a9b62a270000");
    org.jsecurity.session.UnknownSessionException var70 = new org.jsecurity.session.UnknownSessionException("dd\uFFFD", (java.io.Serializable)100.0f);
    org.jsecurity.subject.SubjectException var71 = new org.jsecurity.subject.SubjectException("dd\uFFFD", (java.lang.Throwable)var70);
    org.jsecurity.io.SerializationException var72 = new org.jsecurity.io.SerializationException("", (java.lang.Throwable)var71);
    java.lang.Throwable[] var73 = var71.getSuppressed();
    java.util.Set var74 = org.jsecurity.util.CollectionUtils.asSet((java.lang.Object[])var73);
    var63.addRoles((java.util.Collection)var74);
    var62.addAll((java.util.Collection)var74);
    var56.setJndiNames((java.util.Collection)var74);
    var55.setObjectPermissions(var74);
    org.jsecurity.authz.permission.WildcardPermissionResolver var81 = new org.jsecurity.authz.permission.WildcardPermissionResolver();
    java.util.Set var82 = org.jsecurity.util.PermissionUtils.resolveDelimitedPermissions("7edc3e5f-37f7-4a22-9779-4609545bccd8", (org.jsecurity.authz.permission.PermissionResolver)var81);
    org.jsecurity.authz.Permission var84 = var81.resolvePermission("ff9f2014-649d-414b-8132-f4962e7ca4d7");
    java.util.Set var85 = org.jsecurity.util.PermissionUtils.resolveDelimitedPermissions("ZGT/", (org.jsecurity.authz.permission.PermissionResolver)var81);
    var55.addStringPermissions((java.util.Collection)var85);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var7);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var8);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var9);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var25);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var26);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var36);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var37);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var39);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var50);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var51);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var58);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var59);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var60);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var73);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var74);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var82);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var84);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var85);

  }

  public void test409() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest7.test409");


    org.jsecurity.session.ExpiredSessionException var1 = new org.jsecurity.session.ExpiredSessionException("3bf7038a-5bf9-4f69-b89b-6ea74272a097");

  }

  public void test410() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest7.test410");


    org.jsecurity.realm.activedirectory.ActiveDirectoryRealm var0 = new org.jsecurity.realm.activedirectory.ActiveDirectoryRealm();
    var0.init();
    var0.setSystemPassword("dd\uFFFD");
    org.jsecurity.authz.aop.GuestAnnotationHandler var4 = new org.jsecurity.authz.aop.GuestAnnotationHandler();
    java.lang.Class var5 = var4.getAnnotationClass();
    var0.setAuthenticationTokenClass(var5);
    org.jsecurity.mgt.DefaultSecurityManager var7 = new org.jsecurity.mgt.DefaultSecurityManager((org.jsecurity.realm.Realm)var0);
    org.jsecurity.mgt.DefaultSecurityManager var8 = new org.jsecurity.mgt.DefaultSecurityManager();
    java.io.InputStream var10 = org.jsecurity.util.ClassUtils.getResourceAsStream("");
    java.lang.Object[] var11 = new java.lang.Object[] { var10};
    java.util.List var12 = org.jsecurity.util.CollectionUtils.asList(var11);
    org.jsecurity.authc.pam.ModularRealmAuthenticator var13 = new org.jsecurity.authc.pam.ModularRealmAuthenticator(var12);
    org.jsecurity.authc.pam.AllSuccessfulModularAuthenticationStrategy var14 = new org.jsecurity.authc.pam.AllSuccessfulModularAuthenticationStrategy();
    var13.setModularAuthenticationStrategy((org.jsecurity.authc.pam.ModularAuthenticationStrategy)var14);
    org.jsecurity.authz.SimpleAuthorizationInfo var16 = new org.jsecurity.authz.SimpleAuthorizationInfo();
    var16.addStringPermission("hi!");
    java.io.InputStream var20 = org.jsecurity.util.ClassUtils.getResourceAsStream("");
    java.lang.Object[] var21 = new java.lang.Object[] { var20};
    java.util.List var22 = org.jsecurity.util.CollectionUtils.asList(var21);
    var16.addRoles((java.util.Collection)var22);
    var13.setAuthenticationListeners((java.util.Collection)var22);
    var8.setSessionListeners((java.util.Collection)var22);
    org.jsecurity.realm.text.TextConfigurationRealm var26 = new org.jsecurity.realm.text.TextConfigurationRealm();
    java.io.InputStream var28 = org.jsecurity.util.ClassUtils.getResourceAsStream("");
    java.lang.Object[] var29 = new java.lang.Object[] { var28};
    java.util.List var30 = org.jsecurity.util.CollectionUtils.asList(var29);
    org.jsecurity.authc.pam.ModularRealmAuthenticator var31 = new org.jsecurity.authc.pam.ModularRealmAuthenticator(var30);
    org.jsecurity.subject.SimplePrincipalCollection var33 = new org.jsecurity.subject.SimplePrincipalCollection((java.util.Collection)var30, "org.jsecurity.authz.UnauthorizedException: org.jsecurity.session.ExpiredSessionException: ");
    org.jsecurity.session.UnknownSessionException var38 = new org.jsecurity.session.UnknownSessionException("dd\uFFFD", (java.io.Serializable)100.0f);
    org.jsecurity.session.SessionException var40 = new org.jsecurity.session.SessionException("dd\uFFFD", (java.lang.Throwable)var38, (java.io.Serializable)0);
    org.jsecurity.session.SessionException var41 = new org.jsecurity.session.SessionException("dd\uFFFD", (java.lang.Throwable)var38);
    var33.add((java.lang.Object)var41, "org.jsecurity.config.ConfigurationException: dd\uFFFD");
    var26.onLogout((org.jsecurity.subject.PrincipalCollection)var33);
    org.jsecurity.authc.pam.FirstSuccessfulAuthenticationStrategy var45 = new org.jsecurity.authc.pam.FirstSuccessfulAuthenticationStrategy();
    org.jsecurity.authz.UnauthorizedException var47 = new org.jsecurity.authz.UnauthorizedException("org.jsecurity.config.ConfigurationException: dd\uFFFD");
    java.lang.Throwable[] var48 = var47.getSuppressed();
    java.util.List var49 = org.jsecurity.util.CollectionUtils.asList((java.lang.Object[])var48);
    org.jsecurity.authc.UsernamePasswordToken var50 = new org.jsecurity.authc.UsernamePasswordToken();
    java.lang.String var51 = var50.getUsername();
    java.net.InetAddress var52 = var50.getInetAddress();
    org.jsecurity.authc.AuthenticationInfo var53 = var45.beforeAllAttempts((java.util.Collection)var49, (org.jsecurity.authc.AuthenticationToken)var50);
    boolean[] var54 = var8.hasRoles((org.jsecurity.subject.PrincipalCollection)var33, var49);
    org.jsecurity.session.mgt.SessionManager var55 = var8.getSessionManager();
    var7.setSessionManager(var55);
    org.jsecurity.cache.CacheManager var57 = var7.getCacheManager();
    org.jsecurity.subject.DelegatingSubject var58 = new org.jsecurity.subject.DelegatingSubject((org.jsecurity.mgt.SecurityManager)var7);
    java.net.InetAddress var59 = var58.getInetAddress();
    org.jsecurity.mgt.SecurityManager var60 = var58.getSecurityManager();
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var5);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var10);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var11);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var12);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var20);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var21);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var22);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var28);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var29);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var30);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var48);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var49);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var51);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var52);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var53);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var54);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var55);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var57);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var59);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var60);

  }

  public void test411() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest7.test411");


    org.jsecurity.authz.UnauthenticatedException var3 = new org.jsecurity.authz.UnauthenticatedException("guest = guest,guest\npresidentskroob = 12345,president\ndarkhelmet = ludicrousspeed,darklord,schwartz\nroot = secret,root\nlonestarr = vespa,goodguy,schwartz\n");
    org.jsecurity.authz.HostUnauthorizedException var4 = new org.jsecurity.authz.HostUnauthorizedException((java.lang.Throwable)var3);
    org.jsecurity.session.SessionException var5 = new org.jsecurity.session.SessionException("c237631f-f5b6-4602-ad39-91738c85cc84", (java.io.Serializable)var3);
    org.jsecurity.authc.ExcessiveAttemptsException var6 = new org.jsecurity.authc.ExcessiveAttemptsException("e02035fb-9560-4cf8-a9b2-0050cc0f1ad7", (java.lang.Throwable)var5);

  }

  public void test412() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest7.test412");


    org.jsecurity.mgt.DefaultSecurityManager var0 = new org.jsecurity.mgt.DefaultSecurityManager();
    java.io.InputStream var2 = org.jsecurity.util.ClassUtils.getResourceAsStream("");
    java.lang.Object[] var3 = new java.lang.Object[] { var2};
    java.util.List var4 = org.jsecurity.util.CollectionUtils.asList(var3);
    org.jsecurity.authc.pam.ModularRealmAuthenticator var5 = new org.jsecurity.authc.pam.ModularRealmAuthenticator(var4);
    org.jsecurity.authc.pam.AllSuccessfulModularAuthenticationStrategy var6 = new org.jsecurity.authc.pam.AllSuccessfulModularAuthenticationStrategy();
    var5.setModularAuthenticationStrategy((org.jsecurity.authc.pam.ModularAuthenticationStrategy)var6);
    org.jsecurity.authz.SimpleAuthorizationInfo var8 = new org.jsecurity.authz.SimpleAuthorizationInfo();
    var8.addStringPermission("hi!");
    java.io.InputStream var12 = org.jsecurity.util.ClassUtils.getResourceAsStream("");
    java.lang.Object[] var13 = new java.lang.Object[] { var12};
    java.util.List var14 = org.jsecurity.util.CollectionUtils.asList(var13);
    var8.addRoles((java.util.Collection)var14);
    var5.setAuthenticationListeners((java.util.Collection)var14);
    var0.setSessionListeners((java.util.Collection)var14);
    org.jsecurity.realm.text.TextConfigurationRealm var18 = new org.jsecurity.realm.text.TextConfigurationRealm();
    java.io.InputStream var20 = org.jsecurity.util.ClassUtils.getResourceAsStream("");
    java.lang.Object[] var21 = new java.lang.Object[] { var20};
    java.util.List var22 = org.jsecurity.util.CollectionUtils.asList(var21);
    org.jsecurity.authc.pam.ModularRealmAuthenticator var23 = new org.jsecurity.authc.pam.ModularRealmAuthenticator(var22);
    org.jsecurity.subject.SimplePrincipalCollection var25 = new org.jsecurity.subject.SimplePrincipalCollection((java.util.Collection)var22, "org.jsecurity.authz.UnauthorizedException: org.jsecurity.session.ExpiredSessionException: ");
    org.jsecurity.session.UnknownSessionException var30 = new org.jsecurity.session.UnknownSessionException("dd\uFFFD", (java.io.Serializable)100.0f);
    org.jsecurity.session.SessionException var32 = new org.jsecurity.session.SessionException("dd\uFFFD", (java.lang.Throwable)var30, (java.io.Serializable)0);
    org.jsecurity.session.SessionException var33 = new org.jsecurity.session.SessionException("dd\uFFFD", (java.lang.Throwable)var30);
    var25.add((java.lang.Object)var33, "org.jsecurity.config.ConfigurationException: dd\uFFFD");
    var18.onLogout((org.jsecurity.subject.PrincipalCollection)var25);
    org.jsecurity.authc.pam.FirstSuccessfulAuthenticationStrategy var37 = new org.jsecurity.authc.pam.FirstSuccessfulAuthenticationStrategy();
    org.jsecurity.authz.UnauthorizedException var39 = new org.jsecurity.authz.UnauthorizedException("org.jsecurity.config.ConfigurationException: dd\uFFFD");
    java.lang.Throwable[] var40 = var39.getSuppressed();
    java.util.List var41 = org.jsecurity.util.CollectionUtils.asList((java.lang.Object[])var40);
    org.jsecurity.authc.UsernamePasswordToken var42 = new org.jsecurity.authc.UsernamePasswordToken();
    java.lang.String var43 = var42.getUsername();
    java.net.InetAddress var44 = var42.getInetAddress();
    org.jsecurity.authc.AuthenticationInfo var45 = var37.beforeAllAttempts((java.util.Collection)var41, (org.jsecurity.authc.AuthenticationToken)var42);
    boolean[] var46 = var0.hasRoles((org.jsecurity.subject.PrincipalCollection)var25, var41);
    org.jsecurity.codec.CodecException var49 = new org.jsecurity.codec.CodecException("dd\uFFFD");
    org.jsecurity.authc.ConcurrentAccessException var50 = new org.jsecurity.authc.ConcurrentAccessException("org.jsecurity.authz.UnauthorizedException: org.jsecurity.session.ExpiredSessionException: ", (java.lang.Throwable)var49);
    org.jsecurity.subject.SimplePrincipalCollection var52 = new org.jsecurity.subject.SimplePrincipalCollection((java.lang.Object)var49, "");
    java.io.InputStream var54 = org.jsecurity.util.ClassUtils.getResourceAsStream("");
    java.lang.Object[] var55 = new java.lang.Object[] { var54};
    java.util.List var56 = org.jsecurity.util.CollectionUtils.asList(var55);
    org.jsecurity.authc.pam.ModularRealmAuthenticator var57 = new org.jsecurity.authc.pam.ModularRealmAuthenticator(var56);
    var52.addAll((java.util.Collection)var56, "\u0000\u0000");
    var0.setSessionListeners((java.util.Collection)var56);
    org.jsecurity.session.mgt.DefaultSessionManager var61 = new org.jsecurity.session.mgt.DefaultSessionManager();
    org.jsecurity.mgt.DefaultSecurityManager var62 = new org.jsecurity.mgt.DefaultSecurityManager();
    org.jsecurity.authz.permission.WildcardPermissionResolver var63 = new org.jsecurity.authz.permission.WildcardPermissionResolver();
    var62.setPermissionResolver((org.jsecurity.authz.permission.PermissionResolver)var63);
    org.jsecurity.cache.CacheManager var65 = var62.getCacheManager();
    var61.setCacheManager(var65);
    org.jsecurity.session.mgt.SessionValidationScheduler var67 = var61.getSessionValidationScheduler();
    var0.setSessionManager((org.jsecurity.session.mgt.SessionManager)var61);
    var61.destroy();
    long var70 = var61.getGlobalSessionTimeout();
    var61.destroy();
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var2);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var3);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var4);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var12);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var13);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var14);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var20);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var21);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var22);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var40);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var41);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var43);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var44);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var45);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var46);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var54);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var55);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var56);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var65);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var67);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var70 == 1800000L);

  }

  public void test413() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest7.test413");


    org.jsecurity.crypto.hash.Sha384Hash var1 = org.jsecurity.crypto.hash.Sha384Hash.fromBase64String("e2497199-95f2-4373-8934-d742f09a6cb1");
    org.jsecurity.session.mgt.DefaultSessionManager var2 = new org.jsecurity.session.mgt.DefaultSessionManager();
    var2.setGlobalSessionTimeout(1);
    boolean var6 = var2.isValid((java.io.Serializable)"org.jsecurity.realm.SimpleAccountRealm-173-authorization");
    org.jsecurity.session.mgt.quartz.QuartzSessionValidationScheduler var7 = new org.jsecurity.session.mgt.quartz.QuartzSessionValidationScheduler();
    var7.disableSessionValidation();
    var7.enableSessionValidation();
    var7.enableSessionValidation();
    var7.setSessionValidationInterval((-1L));
    var2.setSessionValidationScheduler((org.jsecurity.session.mgt.SessionValidationScheduler)var7);
    boolean var14 = var1.equals((java.lang.Object)var2);
    org.jsecurity.session.mgt.eis.MemorySessionDAO var15 = new org.jsecurity.session.mgt.eis.MemorySessionDAO();
    org.jsecurity.cache.HashtableCache var17 = new org.jsecurity.cache.HashtableCache("b017e95a-a08d-4f3a-bab8-cc9b39ef5331");
    var15.setActiveSessionsCache((org.jsecurity.cache.Cache)var17);
    var2.setSessionDAO((org.jsecurity.session.mgt.eis.SessionDAO)var15);
    org.jsecurity.session.mgt.SimpleSession var20 = new org.jsecurity.session.mgt.SimpleSession();
    org.jsecurity.session.UnknownSessionException var24 = new org.jsecurity.session.UnknownSessionException("dd\uFFFD", (java.io.Serializable)100.0f);
    org.jsecurity.session.SessionException var26 = new org.jsecurity.session.SessionException("dd\uFFFD", (java.lang.Throwable)var24, (java.io.Serializable)0);
    org.jsecurity.authc.AccountException var27 = new org.jsecurity.authc.AccountException((java.lang.Throwable)var24);
    var20.setId((java.io.Serializable)var24);
    java.util.Map var29 = var20.getAttributes();
    java.util.Collection var30 = var20.getAttributeKeys();
    var15.update((org.jsecurity.session.Session)var20);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var6 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var14 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var29);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var30);

  }

  public void test414() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest7.test414");


    org.jsecurity.realm.activedirectory.ActiveDirectoryRealm var0 = new org.jsecurity.realm.activedirectory.ActiveDirectoryRealm();
    org.jsecurity.authc.credential.Sha256CredentialsMatcher var1 = new org.jsecurity.authc.credential.Sha256CredentialsMatcher();
    var0.setCredentialsMatcher((org.jsecurity.authc.credential.CredentialsMatcher)var1);
    java.lang.String var3 = var0.getAuthorizationCacheName();
    var0.setUrl("hi!");
    org.jsecurity.realm.ldap.DefaultLdapContextFactory var6 = new org.jsecurity.realm.ldap.DefaultLdapContextFactory();
    var0.setLdapContextFactory((org.jsecurity.realm.ldap.LdapContextFactory)var6);
    var6.setAuthentication("org.jsecurity.authz.UnauthorizedException: org.jsecurity.session.ExpiredSessionException: ");
    var6.setSearchBase("2e460aa1-7db8-4a99-ad7a-a5b2ab41638e");
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var3);

  }

  public void test415() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest7.test415");


    org.jsecurity.authz.permission.InvalidPermissionStringException var3 = new org.jsecurity.authz.permission.InvalidPermissionStringException("org.jsecurity.authc.ExcessiveAttemptsException: 499413f2-ff78-44c6-b3f7-2030321675ed", "20288b2b-3e6e-47a7-9711-888ffbcad2b4");
    org.jsecurity.authz.AuthorizationException var4 = new org.jsecurity.authz.AuthorizationException((java.lang.Throwable)var3);
    org.jsecurity.session.UnknownSessionException var5 = new org.jsecurity.session.UnknownSessionException("7ba0dec9-df58-43bc-b7da-f28f3e23c1e0", (java.io.Serializable)var3);

  }

  public void test416() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest7.test416");


    java.io.InputStream var1 = org.jsecurity.util.ClassUtils.getResourceAsStream("");
    java.lang.Object[] var2 = new java.lang.Object[] { var1};
    java.util.List var3 = org.jsecurity.util.CollectionUtils.asList(var2);
    org.jsecurity.authc.pam.ModularRealmAuthenticator var4 = new org.jsecurity.authc.pam.ModularRealmAuthenticator(var3);
    org.jsecurity.subject.SimplePrincipalCollection var6 = new org.jsecurity.subject.SimplePrincipalCollection((java.util.Collection)var3, "org.jsecurity.authz.UnauthorizedException: org.jsecurity.session.ExpiredSessionException: ");
    org.jsecurity.io.ResourceException var10 = new org.jsecurity.io.ResourceException("hi!");
    org.jsecurity.authc.UnknownAccountException var11 = new org.jsecurity.authc.UnknownAccountException((java.lang.Throwable)var10);
    org.jsecurity.session.StoppedSessionException var12 = new org.jsecurity.session.StoppedSessionException("dd\uFFFD", (java.io.Serializable)var10);
    org.jsecurity.session.UnknownSessionException var13 = new org.jsecurity.session.UnknownSessionException("org.jsecurity.authz.UnauthorizedException: org.jsecurity.session.ExpiredSessionException: ", (java.lang.Throwable)var10);
    boolean var14 = var6.equals((java.lang.Object)var10);
    org.jsecurity.authz.aop.RoleAnnotationMethodInterceptor var15 = new org.jsecurity.authz.aop.RoleAnnotationMethodInterceptor();
    org.jsecurity.aop.AnnotationHandler var16 = var15.getHandler();
    java.lang.Class var17 = var16.getAnnotationClass();
    java.lang.Object var18 = var6.oneByType(var17);
    boolean var19 = var6.isEmpty();
    org.jsecurity.cache.HashtableCache var21 = new org.jsecurity.cache.HashtableCache("orgjsecurityauthcCredentialsException783ccd3148a842dd890fdf885a7baafAA==");
    org.jsecurity.realm.text.TextConfigurationRealm var22 = new org.jsecurity.realm.text.TextConfigurationRealm();
    java.io.InputStream var24 = org.jsecurity.util.ClassUtils.getResourceAsStream("");
    java.lang.Object[] var25 = new java.lang.Object[] { var24};
    java.util.List var26 = org.jsecurity.util.CollectionUtils.asList(var25);
    org.jsecurity.authc.pam.ModularRealmAuthenticator var27 = new org.jsecurity.authc.pam.ModularRealmAuthenticator(var26);
    org.jsecurity.subject.SimplePrincipalCollection var29 = new org.jsecurity.subject.SimplePrincipalCollection((java.util.Collection)var26, "org.jsecurity.authz.UnauthorizedException: org.jsecurity.session.ExpiredSessionException: ");
    org.jsecurity.session.UnknownSessionException var34 = new org.jsecurity.session.UnknownSessionException("dd\uFFFD", (java.io.Serializable)100.0f);
    org.jsecurity.session.SessionException var36 = new org.jsecurity.session.SessionException("dd\uFFFD", (java.lang.Throwable)var34, (java.io.Serializable)0);
    org.jsecurity.session.SessionException var37 = new org.jsecurity.session.SessionException("dd\uFFFD", (java.lang.Throwable)var34);
    var29.add((java.lang.Object)var37, "org.jsecurity.config.ConfigurationException: dd\uFFFD");
    var22.onLogout((org.jsecurity.subject.PrincipalCollection)var29);
    var21.remove((java.lang.Object)var29);
    org.jsecurity.subject.SimplePrincipalCollection var42 = new org.jsecurity.subject.SimplePrincipalCollection((org.jsecurity.subject.PrincipalCollection)var29);
    var6.addAll((org.jsecurity.subject.PrincipalCollection)var42);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var1);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var2);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var3);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var14 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var16);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var17);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var18);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var19 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var24);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var25);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var26);

  }

  public void test417() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest7.test417");


    org.jsecurity.codec.CodecException var2 = new org.jsecurity.codec.CodecException("dd\uFFFD");
    org.jsecurity.authc.ConcurrentAccessException var3 = new org.jsecurity.authc.ConcurrentAccessException("org.jsecurity.authz.UnauthorizedException: org.jsecurity.session.ExpiredSessionException: ", (java.lang.Throwable)var2);
    org.jsecurity.subject.SimplePrincipalCollection var5 = new org.jsecurity.subject.SimplePrincipalCollection((java.lang.Object)var2, "");
    boolean var6 = var5.isEmpty();
    java.util.List var7 = var5.asList();
    org.jsecurity.realm.text.TextConfigurationRealm var8 = new org.jsecurity.realm.text.TextConfigurationRealm();
    java.io.InputStream var10 = org.jsecurity.util.ClassUtils.getResourceAsStream("");
    java.lang.Object[] var11 = new java.lang.Object[] { var10};
    java.util.List var12 = org.jsecurity.util.CollectionUtils.asList(var11);
    org.jsecurity.authc.pam.ModularRealmAuthenticator var13 = new org.jsecurity.authc.pam.ModularRealmAuthenticator(var12);
    org.jsecurity.subject.SimplePrincipalCollection var15 = new org.jsecurity.subject.SimplePrincipalCollection((java.util.Collection)var12, "org.jsecurity.authz.UnauthorizedException: org.jsecurity.session.ExpiredSessionException: ");
    org.jsecurity.session.UnknownSessionException var20 = new org.jsecurity.session.UnknownSessionException("dd\uFFFD", (java.io.Serializable)100.0f);
    org.jsecurity.session.SessionException var22 = new org.jsecurity.session.SessionException("dd\uFFFD", (java.lang.Throwable)var20, (java.io.Serializable)0);
    org.jsecurity.session.SessionException var23 = new org.jsecurity.session.SessionException("dd\uFFFD", (java.lang.Throwable)var20);
    var15.add((java.lang.Object)var23, "org.jsecurity.config.ConfigurationException: dd\uFFFD");
    var8.onLogout((org.jsecurity.subject.PrincipalCollection)var15);
    org.jsecurity.cache.HashtableCacheManager var27 = new org.jsecurity.cache.HashtableCacheManager();
    org.jsecurity.cache.Cache var29 = var27.getCache("\u0000\u0000");
    var8.setAuthorizationCache(var29);
    org.jsecurity.codec.CodecException var33 = new org.jsecurity.codec.CodecException("dd\uFFFD");
    org.jsecurity.authc.ConcurrentAccessException var34 = new org.jsecurity.authc.ConcurrentAccessException("org.jsecurity.authz.UnauthorizedException: org.jsecurity.session.ExpiredSessionException: ", (java.lang.Throwable)var33);
    org.jsecurity.subject.SimplePrincipalCollection var36 = new org.jsecurity.subject.SimplePrincipalCollection((java.lang.Object)var33, "");
    var8.onLogout((org.jsecurity.subject.PrincipalCollection)var36);
    boolean var38 = var36.isEmpty();
    var5.addAll((org.jsecurity.subject.PrincipalCollection)var36);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var6 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var7);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var10);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var11);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var12);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var29);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var38 == false);

  }

  public void test418() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest7.test418");


    org.jsecurity.authc.pam.AllSuccessfulModularAuthenticationStrategy var0 = new org.jsecurity.authc.pam.AllSuccessfulModularAuthenticationStrategy();
    char[] var2 = new char[] { };
    org.jsecurity.authc.UsernamePasswordToken var4 = new org.jsecurity.authc.UsernamePasswordToken("hi!", var2, true);
    org.jsecurity.authc.SimpleAccount var5 = new org.jsecurity.authc.SimpleAccount();
    var5.setCredentialsExpired(false);
    boolean var8 = var5.isLocked();
    org.jsecurity.authc.AuthenticationInfo var9 = var0.afterAllAttempts((org.jsecurity.authc.AuthenticationToken)var4, (org.jsecurity.authc.AuthenticationInfo)var5);
    char[] var13 = new char[] { '4', '#'};
    org.jsecurity.authc.UsernamePasswordToken var14 = new org.jsecurity.authc.UsernamePasswordToken("\u0000\u0000", var13);
    org.jsecurity.authc.SimpleAccount var15 = new org.jsecurity.authc.SimpleAccount();
    var15.setCredentialsExpired(false);
    var15.setCredentialsExpired(false);
    boolean var20 = var15.isCredentialsExpired();
    org.jsecurity.authc.AuthenticationInfo var21 = var0.afterAllAttempts((org.jsecurity.authc.AuthenticationToken)var14, (org.jsecurity.authc.AuthenticationInfo)var15);
    org.jsecurity.realm.activedirectory.ActiveDirectoryRealm var22 = new org.jsecurity.realm.activedirectory.ActiveDirectoryRealm();
    org.jsecurity.authc.credential.Sha256CredentialsMatcher var23 = new org.jsecurity.authc.credential.Sha256CredentialsMatcher();
    var22.setCredentialsMatcher((org.jsecurity.authc.credential.CredentialsMatcher)var23);
    java.lang.String var25 = var22.getAuthorizationCacheName();
    org.jsecurity.authc.UsernamePasswordToken var26 = new org.jsecurity.authc.UsernamePasswordToken();
    java.lang.String var27 = var26.getUsername();
    java.lang.Object var28 = var26.getPrincipal();
    boolean var29 = var22.supports((org.jsecurity.authc.AuthenticationToken)var26);
    org.jsecurity.session.UnknownSessionException var33 = new org.jsecurity.session.UnknownSessionException("dd\uFFFD", (java.io.Serializable)100.0f);
    org.jsecurity.session.SessionException var35 = new org.jsecurity.session.SessionException("dd\uFFFD", (java.lang.Throwable)var33, (java.io.Serializable)0);
    org.jsecurity.authc.SimpleAuthenticationInfo var38 = new org.jsecurity.authc.SimpleAuthenticationInfo((java.lang.Object)0, (java.lang.Object)10, "hi!");
    java.lang.Object var39 = var38.getCredentials();
    java.lang.String var40 = var38.toString();
    org.jsecurity.authc.AuthenticationInfo var41 = var0.afterAllAttempts((org.jsecurity.authc.AuthenticationToken)var26, (org.jsecurity.authc.AuthenticationInfo)var38);
    org.jsecurity.session.mgt.eis.MemorySessionDAO var42 = new org.jsecurity.session.mgt.eis.MemorySessionDAO();
    org.jsecurity.cache.Cache var43 = var42.getActiveSessionsCache();
    var42.setActiveSessionsCacheName("dd\uFFFD");
    var38.setCredentials((java.lang.Object)var42);
    org.jsecurity.session.mgt.SimpleSession var47 = new org.jsecurity.session.mgt.SimpleSession();
    var47.setTimeout((-1L));
    org.jsecurity.session.mgt.SimpleSession var50 = new org.jsecurity.session.mgt.SimpleSession();
    java.util.Date var51 = var50.getLastAccessTime();
    var47.setLastAccessTime(var51);
    org.jsecurity.session.mgt.SimpleSession var53 = new org.jsecurity.session.mgt.SimpleSession();
    java.util.Date var54 = var53.getLastAccessTime();
    var47.setStopTimestamp(var54);
    java.io.Serializable var56 = var42.create((org.jsecurity.session.Session)var47);
    org.jsecurity.realm.text.TextConfigurationRealm var57 = new org.jsecurity.realm.text.TextConfigurationRealm();
    java.io.InputStream var59 = org.jsecurity.util.ClassUtils.getResourceAsStream("");
    java.lang.Object[] var60 = new java.lang.Object[] { var59};
    java.util.List var61 = org.jsecurity.util.CollectionUtils.asList(var60);
    org.jsecurity.authc.pam.ModularRealmAuthenticator var62 = new org.jsecurity.authc.pam.ModularRealmAuthenticator(var61);
    org.jsecurity.subject.SimplePrincipalCollection var64 = new org.jsecurity.subject.SimplePrincipalCollection((java.util.Collection)var61, "org.jsecurity.authz.UnauthorizedException: org.jsecurity.session.ExpiredSessionException: ");
    org.jsecurity.session.UnknownSessionException var69 = new org.jsecurity.session.UnknownSessionException("dd\uFFFD", (java.io.Serializable)100.0f);
    org.jsecurity.session.SessionException var71 = new org.jsecurity.session.SessionException("dd\uFFFD", (java.lang.Throwable)var69, (java.io.Serializable)0);
    org.jsecurity.session.SessionException var72 = new org.jsecurity.session.SessionException("dd\uFFFD", (java.lang.Throwable)var69);
    var64.add((java.lang.Object)var72, "org.jsecurity.config.ConfigurationException: dd\uFFFD");
    var57.onLogout((org.jsecurity.subject.PrincipalCollection)var64);
    org.jsecurity.cache.HashtableCacheManager var76 = new org.jsecurity.cache.HashtableCacheManager();
    org.jsecurity.cache.Cache var78 = var76.getCache("\u0000\u0000");
    var57.setAuthorizationCache(var78);
    var42.setActiveSessionsCache(var78);
    org.jsecurity.session.mgt.SimpleSession var81 = new org.jsecurity.session.mgt.SimpleSession();
    java.util.Date var82 = var81.getLastAccessTime();
    boolean var83 = var81.isValid();
    boolean var84 = var81.isExpired();
    var42.update((org.jsecurity.session.Session)var81);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var2);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var8 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var9);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var13);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var20 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var21);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var25);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var27);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var28);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var29 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var39 + "' != '" + 10+ "'", var39.equals(10));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var41);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var43);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var51);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var54);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var56 + "' != '" + "cb41067f-de79-41f1-bf8f-bcf905a2f203"+ "'", var56.equals("cb41067f-de79-41f1-bf8f-bcf905a2f203"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var59);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var60);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var61);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var78);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var82);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var83 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var84 == false);

  }

  public void test419() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest7.test419");


    org.jsecurity.session.mgt.DelegatingSession var0 = new org.jsecurity.session.mgt.DelegatingSession();
    java.io.Serializable var1 = var0.getId();
    org.jsecurity.session.mgt.DefaultSessionManager var2 = new org.jsecurity.session.mgt.DefaultSessionManager();
    org.jsecurity.session.mgt.SessionValidationScheduler var3 = var2.getSessionValidationScheduler();
    org.jsecurity.mgt.DefaultSecurityManager var4 = new org.jsecurity.mgt.DefaultSecurityManager();
    java.io.InputStream var6 = org.jsecurity.util.ClassUtils.getResourceAsStream("");
    java.lang.Object[] var7 = new java.lang.Object[] { var6};
    java.util.List var8 = org.jsecurity.util.CollectionUtils.asList(var7);
    org.jsecurity.authc.pam.ModularRealmAuthenticator var9 = new org.jsecurity.authc.pam.ModularRealmAuthenticator(var8);
    org.jsecurity.authc.pam.AllSuccessfulModularAuthenticationStrategy var10 = new org.jsecurity.authc.pam.AllSuccessfulModularAuthenticationStrategy();
    var9.setModularAuthenticationStrategy((org.jsecurity.authc.pam.ModularAuthenticationStrategy)var10);
    org.jsecurity.authz.SimpleAuthorizationInfo var12 = new org.jsecurity.authz.SimpleAuthorizationInfo();
    var12.addStringPermission("hi!");
    java.io.InputStream var16 = org.jsecurity.util.ClassUtils.getResourceAsStream("");
    java.lang.Object[] var17 = new java.lang.Object[] { var16};
    java.util.List var18 = org.jsecurity.util.CollectionUtils.asList(var17);
    var12.addRoles((java.util.Collection)var18);
    var9.setAuthenticationListeners((java.util.Collection)var18);
    var4.setSessionListeners((java.util.Collection)var18);
    org.jsecurity.realm.text.TextConfigurationRealm var22 = new org.jsecurity.realm.text.TextConfigurationRealm();
    java.io.InputStream var24 = org.jsecurity.util.ClassUtils.getResourceAsStream("");
    java.lang.Object[] var25 = new java.lang.Object[] { var24};
    java.util.List var26 = org.jsecurity.util.CollectionUtils.asList(var25);
    org.jsecurity.authc.pam.ModularRealmAuthenticator var27 = new org.jsecurity.authc.pam.ModularRealmAuthenticator(var26);
    org.jsecurity.subject.SimplePrincipalCollection var29 = new org.jsecurity.subject.SimplePrincipalCollection((java.util.Collection)var26, "org.jsecurity.authz.UnauthorizedException: org.jsecurity.session.ExpiredSessionException: ");
    org.jsecurity.session.UnknownSessionException var34 = new org.jsecurity.session.UnknownSessionException("dd\uFFFD", (java.io.Serializable)100.0f);
    org.jsecurity.session.SessionException var36 = new org.jsecurity.session.SessionException("dd\uFFFD", (java.lang.Throwable)var34, (java.io.Serializable)0);
    org.jsecurity.session.SessionException var37 = new org.jsecurity.session.SessionException("dd\uFFFD", (java.lang.Throwable)var34);
    var29.add((java.lang.Object)var37, "org.jsecurity.config.ConfigurationException: dd\uFFFD");
    var22.onLogout((org.jsecurity.subject.PrincipalCollection)var29);
    org.jsecurity.authc.pam.FirstSuccessfulAuthenticationStrategy var41 = new org.jsecurity.authc.pam.FirstSuccessfulAuthenticationStrategy();
    org.jsecurity.authz.UnauthorizedException var43 = new org.jsecurity.authz.UnauthorizedException("org.jsecurity.config.ConfigurationException: dd\uFFFD");
    java.lang.Throwable[] var44 = var43.getSuppressed();
    java.util.List var45 = org.jsecurity.util.CollectionUtils.asList((java.lang.Object[])var44);
    org.jsecurity.authc.UsernamePasswordToken var46 = new org.jsecurity.authc.UsernamePasswordToken();
    java.lang.String var47 = var46.getUsername();
    java.net.InetAddress var48 = var46.getInetAddress();
    org.jsecurity.authc.AuthenticationInfo var49 = var41.beforeAllAttempts((java.util.Collection)var45, (org.jsecurity.authc.AuthenticationToken)var46);
    boolean[] var50 = var4.hasRoles((org.jsecurity.subject.PrincipalCollection)var29, var45);
    org.jsecurity.codec.CodecException var53 = new org.jsecurity.codec.CodecException("dd\uFFFD");
    org.jsecurity.authc.ConcurrentAccessException var54 = new org.jsecurity.authc.ConcurrentAccessException("org.jsecurity.authz.UnauthorizedException: org.jsecurity.session.ExpiredSessionException: ", (java.lang.Throwable)var53);
    org.jsecurity.subject.SimplePrincipalCollection var56 = new org.jsecurity.subject.SimplePrincipalCollection((java.lang.Object)var53, "");
    java.io.InputStream var58 = org.jsecurity.util.ClassUtils.getResourceAsStream("");
    java.lang.Object[] var59 = new java.lang.Object[] { var58};
    java.util.List var60 = org.jsecurity.util.CollectionUtils.asList(var59);
    org.jsecurity.authc.pam.ModularRealmAuthenticator var61 = new org.jsecurity.authc.pam.ModularRealmAuthenticator(var60);
    var56.addAll((java.util.Collection)var60, "\u0000\u0000");
    var4.setSessionListeners((java.util.Collection)var60);
    org.jsecurity.session.mgt.DefaultSessionManager var65 = new org.jsecurity.session.mgt.DefaultSessionManager();
    org.jsecurity.mgt.DefaultSecurityManager var66 = new org.jsecurity.mgt.DefaultSecurityManager();
    org.jsecurity.authz.permission.WildcardPermissionResolver var67 = new org.jsecurity.authz.permission.WildcardPermissionResolver();
    var66.setPermissionResolver((org.jsecurity.authz.permission.PermissionResolver)var67);
    org.jsecurity.cache.CacheManager var69 = var66.getCacheManager();
    var65.setCacheManager(var69);
    org.jsecurity.session.mgt.SessionValidationScheduler var71 = var65.getSessionValidationScheduler();
    var4.setSessionManager((org.jsecurity.session.mgt.SessionManager)var65);
    var65.destroy();
    var65.setSessionValidationSchedulerEnabled(true);
    org.jsecurity.session.mgt.quartz.QuartzSessionValidationScheduler var76 = new org.jsecurity.session.mgt.quartz.QuartzSessionValidationScheduler((org.jsecurity.session.mgt.ValidatingSessionManager)var65);
    var2.setSessionValidationScheduler((org.jsecurity.session.mgt.SessionValidationScheduler)var76);
    var0.setSessionManager((org.jsecurity.session.mgt.SessionManager)var2);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var1);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var3);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var6);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var7);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var8);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var16);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var17);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var18);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var24);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var25);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var26);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var44);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var45);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var47);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var48);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var49);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var50);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var58);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var59);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var60);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var69);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var71);

  }

  public void test420() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest7.test420");


    org.jsecurity.authc.pam.AllSuccessfulModularAuthenticationStrategy var2 = new org.jsecurity.authc.pam.AllSuccessfulModularAuthenticationStrategy();
    char[] var4 = new char[] { };
    org.jsecurity.authc.UsernamePasswordToken var6 = new org.jsecurity.authc.UsernamePasswordToken("hi!", var4, true);
    org.jsecurity.authc.SimpleAccount var7 = new org.jsecurity.authc.SimpleAccount();
    var7.setCredentialsExpired(false);
    boolean var10 = var7.isLocked();
    org.jsecurity.authc.AuthenticationInfo var11 = var2.afterAllAttempts((org.jsecurity.authc.AuthenticationToken)var6, (org.jsecurity.authc.AuthenticationInfo)var7);
    char[] var15 = new char[] { '4', '#'};
    org.jsecurity.authc.UsernamePasswordToken var16 = new org.jsecurity.authc.UsernamePasswordToken("\u0000\u0000", var15);
    org.jsecurity.authc.SimpleAccount var17 = new org.jsecurity.authc.SimpleAccount();
    var17.setCredentialsExpired(false);
    var17.setCredentialsExpired(false);
    boolean var22 = var17.isCredentialsExpired();
    org.jsecurity.authc.AuthenticationInfo var23 = var2.afterAllAttempts((org.jsecurity.authc.AuthenticationToken)var16, (org.jsecurity.authc.AuthenticationInfo)var17);
    org.jsecurity.realm.activedirectory.ActiveDirectoryRealm var24 = new org.jsecurity.realm.activedirectory.ActiveDirectoryRealm();
    org.jsecurity.authc.credential.Sha256CredentialsMatcher var25 = new org.jsecurity.authc.credential.Sha256CredentialsMatcher();
    var24.setCredentialsMatcher((org.jsecurity.authc.credential.CredentialsMatcher)var25);
    java.lang.String var27 = var24.getAuthorizationCacheName();
    org.jsecurity.authc.UsernamePasswordToken var28 = new org.jsecurity.authc.UsernamePasswordToken();
    java.lang.String var29 = var28.getUsername();
    java.lang.Object var30 = var28.getPrincipal();
    boolean var31 = var24.supports((org.jsecurity.authc.AuthenticationToken)var28);
    org.jsecurity.session.UnknownSessionException var35 = new org.jsecurity.session.UnknownSessionException("dd\uFFFD", (java.io.Serializable)100.0f);
    org.jsecurity.session.SessionException var37 = new org.jsecurity.session.SessionException("dd\uFFFD", (java.lang.Throwable)var35, (java.io.Serializable)0);
    org.jsecurity.authc.SimpleAuthenticationInfo var40 = new org.jsecurity.authc.SimpleAuthenticationInfo((java.lang.Object)0, (java.lang.Object)10, "hi!");
    java.lang.Object var41 = var40.getCredentials();
    java.lang.String var42 = var40.toString();
    org.jsecurity.authc.AuthenticationInfo var43 = var2.afterAllAttempts((org.jsecurity.authc.AuthenticationToken)var28, (org.jsecurity.authc.AuthenticationInfo)var40);
    char[] var47 = new char[] { ' ', ' '};
    org.jsecurity.authc.UsernamePasswordToken var48 = new org.jsecurity.authc.UsernamePasswordToken("hi!", var47);
    char[] var52 = new char[] { '4', '#'};
    org.jsecurity.authc.UsernamePasswordToken var53 = new org.jsecurity.authc.UsernamePasswordToken("\u0000\u0000", var52);
    var48.setPassword(var52);
    org.jsecurity.session.mgt.SimpleSession var55 = new org.jsecurity.session.mgt.SimpleSession();
    var55.setTimeout((-1L));
    org.jsecurity.session.mgt.SimpleSession var58 = new org.jsecurity.session.mgt.SimpleSession();
    java.util.Date var59 = var58.getLastAccessTime();
    var55.setLastAccessTime(var59);
    java.net.InetAddress var61 = var55.getHostAddress();
    var48.setInetAddress(var61);
    var28.setInetAddress(var61);
    org.jsecurity.authc.UsernamePasswordToken var64 = new org.jsecurity.authc.UsernamePasswordToken("HashtableCache [\u0000\u0000\u0000]", "020e4fd5-81c8-4cbc-9bbb-975c45ce39a3", var61);
    char[] var65 = var64.getPassword();
    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      byte[] var66 = org.jsecurity.codec.Hex.decode(var65);
      fail("Expected exception of type java.lang.IllegalArgumentException");
    } catch (java.lang.IllegalArgumentException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var4);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var10 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var11);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var15);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var22 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var23);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var27);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var29);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var30);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var31 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var41 + "' != '" + 10+ "'", var41.equals(10));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var43);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var47);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var52);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var59);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var61);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var65);

  }

  public void test421() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest7.test421");


    org.jsecurity.session.UnknownSessionException var4 = new org.jsecurity.session.UnknownSessionException("dd\uFFFD", (java.io.Serializable)100.0f);
    org.jsecurity.subject.SubjectException var5 = new org.jsecurity.subject.SubjectException("dd\uFFFD", (java.lang.Throwable)var4);
    org.jsecurity.io.SerializationException var6 = new org.jsecurity.io.SerializationException("", (java.lang.Throwable)var5);
    java.lang.Throwable[] var7 = var5.getSuppressed();
    java.lang.Throwable[] var8 = var5.getSuppressed();
    org.jsecurity.authz.SimpleAuthorizationInfo var11 = new org.jsecurity.authz.SimpleAuthorizationInfo();
    var11.addRole("a2b823b1e72eae2b727289df8a00a89df8a0bab6ad8a89c4c5c7a9b62a270000");
    org.jsecurity.session.UnknownSessionException var18 = new org.jsecurity.session.UnknownSessionException("dd\uFFFD", (java.io.Serializable)100.0f);
    org.jsecurity.subject.SubjectException var19 = new org.jsecurity.subject.SubjectException("dd\uFFFD", (java.lang.Throwable)var18);
    org.jsecurity.io.SerializationException var20 = new org.jsecurity.io.SerializationException("", (java.lang.Throwable)var19);
    java.lang.Throwable[] var21 = var19.getSuppressed();
    java.util.Set var22 = org.jsecurity.util.CollectionUtils.asSet((java.lang.Object[])var21);
    var11.addRoles((java.util.Collection)var22);
    java.io.InputStream var25 = org.jsecurity.util.ClassUtils.getResourceAsStream("");
    java.lang.Object[] var26 = new java.lang.Object[] { var25};
    java.util.List var27 = org.jsecurity.util.CollectionUtils.asList(var26);
    org.jsecurity.authc.pam.ModularRealmAuthenticator var28 = new org.jsecurity.authc.pam.ModularRealmAuthenticator(var27);
    org.jsecurity.subject.SimplePrincipalCollection var30 = new org.jsecurity.subject.SimplePrincipalCollection((java.util.Collection)var27, "org.jsecurity.authz.UnauthorizedException: org.jsecurity.session.ExpiredSessionException: ");
    org.jsecurity.session.UnknownSessionException var35 = new org.jsecurity.session.UnknownSessionException("dd\uFFFD", (java.io.Serializable)100.0f);
    org.jsecurity.session.SessionException var37 = new org.jsecurity.session.SessionException("dd\uFFFD", (java.lang.Throwable)var35, (java.io.Serializable)0);
    org.jsecurity.session.SessionException var38 = new org.jsecurity.session.SessionException("dd\uFFFD", (java.lang.Throwable)var35);
    var30.add((java.lang.Object)var38, "org.jsecurity.config.ConfigurationException: dd\uFFFD");
    java.util.Set var41 = var30.asSet();
    org.jsecurity.authz.SimpleAuthorizingAccount var42 = new org.jsecurity.authz.SimpleAuthorizingAccount((java.lang.Object)var8, (java.lang.Object)"\u0000\u0000\u0000", "\u0000\u0000\u0000", var22, var41);
    org.jsecurity.authz.SimpleRole var44 = var42.getRole("\u0000\u0000\u0000");
    var42.addRole("985ef082-f13d-463b-a5a4-b88c15841261");
    java.util.Collection var47 = var42.getStringPermissions();
    org.jsecurity.authz.permission.WildcardPermissionResolver var49 = new org.jsecurity.authz.permission.WildcardPermissionResolver();
    java.util.Set var50 = org.jsecurity.util.PermissionUtils.resolveDelimitedPermissions("a2b823b1e72eae2b727289df8a00a89df8a0bab6ad8a89c4c5c7a9b62a270000", (org.jsecurity.authz.permission.PermissionResolver)var49);
    org.jsecurity.authz.Permission var52 = var49.resolvePermission("6f8b35fd-0848-49a4-9560-659760616ad8");
    var42.addObjectPermission(var52);
    var42.addRole("a841fcb8-4bf6-4cea-a7a1-055c1bccd5ae");
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var7);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var8);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var21);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var22);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var25);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var26);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var27);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var41);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var44);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var47);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var50);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var52);

  }

  public void test422() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest7.test422");


    org.jsecurity.authc.pam.AllSuccessfulModularAuthenticationStrategy var0 = new org.jsecurity.authc.pam.AllSuccessfulModularAuthenticationStrategy();
    char[] var2 = new char[] { };
    org.jsecurity.authc.UsernamePasswordToken var4 = new org.jsecurity.authc.UsernamePasswordToken("hi!", var2, true);
    org.jsecurity.authc.SimpleAccount var5 = new org.jsecurity.authc.SimpleAccount();
    var5.setCredentialsExpired(false);
    boolean var8 = var5.isLocked();
    org.jsecurity.authc.AuthenticationInfo var9 = var0.afterAllAttempts((org.jsecurity.authc.AuthenticationToken)var4, (org.jsecurity.authc.AuthenticationInfo)var5);
    char[] var12 = new char[] { };
    org.jsecurity.authc.UsernamePasswordToken var14 = new org.jsecurity.authc.UsernamePasswordToken("hi!", var12, true);
    org.jsecurity.authc.UsernamePasswordToken var15 = new org.jsecurity.authc.UsernamePasswordToken("\u0000\u0000", var12);
    var4.setPassword(var12);
    var4.setUsername("org.jsecurity.realm.text.TextConfigurationRealm_4335");
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var2);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var8 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var9);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var12);

  }

  public void test423() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest7.test423");


    org.jsecurity.realm.activedirectory.ActiveDirectoryRealm var0 = new org.jsecurity.realm.activedirectory.ActiveDirectoryRealm();
    var0.init();
    var0.setSystemPassword("dd\uFFFD");
    org.jsecurity.cache.Cache var4 = var0.getAuthorizationCache();
    org.jsecurity.mgt.DefaultSecurityManager var5 = new org.jsecurity.mgt.DefaultSecurityManager((org.jsecurity.realm.Realm)var0);
    org.jsecurity.mgt.DefaultSecurityManager var6 = new org.jsecurity.mgt.DefaultSecurityManager((org.jsecurity.realm.Realm)var0);
    java.lang.String var7 = var0.getName();
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var4);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var7 + "' != '" + "org.jsecurity.realm.activedirectory.ActiveDirectoryRealm_4594"+ "'", var7.equals("org.jsecurity.realm.activedirectory.ActiveDirectoryRealm_4594"));

  }

  public void test424() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest7.test424");


    org.jsecurity.session.mgt.DefaultSessionManager var0 = new org.jsecurity.session.mgt.DefaultSessionManager();
    org.jsecurity.mgt.DefaultSecurityManager var1 = new org.jsecurity.mgt.DefaultSecurityManager();
    org.jsecurity.authz.permission.WildcardPermissionResolver var2 = new org.jsecurity.authz.permission.WildcardPermissionResolver();
    var1.setPermissionResolver((org.jsecurity.authz.permission.PermissionResolver)var2);
    org.jsecurity.cache.CacheManager var4 = var1.getCacheManager();
    var0.setCacheManager(var4);
    org.jsecurity.session.mgt.SessionValidationScheduler var6 = var0.getSessionValidationScheduler();
    var0.enableSessionValidationIfNecessary();
    org.jsecurity.session.UnknownSessionException var12 = new org.jsecurity.session.UnknownSessionException("dd\uFFFD", (java.io.Serializable)100.0f);
    org.jsecurity.subject.SubjectException var13 = new org.jsecurity.subject.SubjectException("dd\uFFFD", (java.lang.Throwable)var12);
    org.jsecurity.io.SerializationException var14 = new org.jsecurity.io.SerializationException("", (java.lang.Throwable)var13);
    java.lang.Throwable[] var15 = var13.getSuppressed();
    java.lang.Throwable[] var16 = var13.getSuppressed();
    org.jsecurity.authz.SimpleAuthorizationInfo var19 = new org.jsecurity.authz.SimpleAuthorizationInfo();
    var19.addRole("a2b823b1e72eae2b727289df8a00a89df8a0bab6ad8a89c4c5c7a9b62a270000");
    org.jsecurity.session.UnknownSessionException var26 = new org.jsecurity.session.UnknownSessionException("dd\uFFFD", (java.io.Serializable)100.0f);
    org.jsecurity.subject.SubjectException var27 = new org.jsecurity.subject.SubjectException("dd\uFFFD", (java.lang.Throwable)var26);
    org.jsecurity.io.SerializationException var28 = new org.jsecurity.io.SerializationException("", (java.lang.Throwable)var27);
    java.lang.Throwable[] var29 = var27.getSuppressed();
    java.util.Set var30 = org.jsecurity.util.CollectionUtils.asSet((java.lang.Object[])var29);
    var19.addRoles((java.util.Collection)var30);
    java.io.InputStream var33 = org.jsecurity.util.ClassUtils.getResourceAsStream("");
    java.lang.Object[] var34 = new java.lang.Object[] { var33};
    java.util.List var35 = org.jsecurity.util.CollectionUtils.asList(var34);
    org.jsecurity.authc.pam.ModularRealmAuthenticator var36 = new org.jsecurity.authc.pam.ModularRealmAuthenticator(var35);
    org.jsecurity.subject.SimplePrincipalCollection var38 = new org.jsecurity.subject.SimplePrincipalCollection((java.util.Collection)var35, "org.jsecurity.authz.UnauthorizedException: org.jsecurity.session.ExpiredSessionException: ");
    org.jsecurity.session.UnknownSessionException var43 = new org.jsecurity.session.UnknownSessionException("dd\uFFFD", (java.io.Serializable)100.0f);
    org.jsecurity.session.SessionException var45 = new org.jsecurity.session.SessionException("dd\uFFFD", (java.lang.Throwable)var43, (java.io.Serializable)0);
    org.jsecurity.session.SessionException var46 = new org.jsecurity.session.SessionException("dd\uFFFD", (java.lang.Throwable)var43);
    var38.add((java.lang.Object)var46, "org.jsecurity.config.ConfigurationException: dd\uFFFD");
    java.util.Set var49 = var38.asSet();
    org.jsecurity.authz.SimpleAuthorizingAccount var50 = new org.jsecurity.authz.SimpleAuthorizingAccount((java.lang.Object)var16, (java.lang.Object)"\u0000\u0000\u0000", "\u0000\u0000\u0000", var30, var49);
    org.jsecurity.authz.SimpleRole var52 = var50.getRole("\u0000\u0000\u0000");
    var50.addRole("985ef082-f13d-463b-a5a4-b88c15841261");
    java.util.Collection var55 = var50.getStringPermissions();
    var50.addStringPermission("307b02c4-87eb-48e4-9737-540d906d5738");
    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      var0.stop((java.io.Serializable)var50);
      fail("Expected exception of type org.jsecurity.session.UnknownSessionException");
    } catch (org.jsecurity.session.UnknownSessionException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var4);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var6);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var15);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var16);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var29);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var30);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var33);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var34);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var35);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var49);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var52);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var55);

  }

  public void test425() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest7.test425");


    org.jsecurity.realm.jdbc.JdbcRealm var0 = new org.jsecurity.realm.jdbc.JdbcRealm();
    var0.setUserRolesQuery("s\uFFFD\uFFFDkG\uFFFD\uFFFD\uFFFD4\uFFFDW\uFFFDi\uFFFD\uFFFDi\uFFFD\u067D\uFFFD{\uFFFD\u001F");
    var0.setAuthenticationQuery("4a0e5e90-249b-4eb3-a134-0b53851d6caf");
    var0.setAuthorizationCacheName("499413f2-ff78-44c6-b3f7-2030321675ed");
    var0.setPermissionsLookupEnabled(false);

  }

  public void test426() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest7.test426");


    org.jsecurity.crypto.BlowfishCipher var0 = new org.jsecurity.crypto.BlowfishCipher();
    byte[] var4 = new byte[] { (byte)100, (byte)100, (byte)(-1)};
    java.lang.String var5 = org.jsecurity.codec.CodecSupport.toString(var4);
    byte[] var7 = org.jsecurity.codec.Base64.decode("hi!");
    byte[] var8 = var0.encrypt(var4, var7);
    java.lang.String var9 = org.jsecurity.codec.Base64.decodeToString(var4);
    byte[] var10 = org.jsecurity.codec.Base64.encode(var4);
    byte[] var11 = org.jsecurity.codec.Base64.encodeChunked(var4);
    char[] var12 = org.jsecurity.codec.CodecSupport.toChars(var11);
    byte[] var13 = org.jsecurity.codec.Base64.encodeChunked(var11);
    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      byte[] var14 = org.jsecurity.codec.Hex.decode(var11);
      fail("Expected exception of type java.lang.IllegalArgumentException");
    } catch (java.lang.IllegalArgumentException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var4);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var5 + "' != '" + "dd\uFFFD"+ "'", var5.equals("dd\uFFFD"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var7);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var8);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var9 + "' != '" + "\u0000\u0000"+ "'", var9.equals("\u0000\u0000"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var10);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var11);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var12);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var13);

  }

  public void test427() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest7.test427");


    org.jsecurity.session.UnknownSessionException var4 = new org.jsecurity.session.UnknownSessionException("dd\uFFFD", (java.io.Serializable)100.0f);
    org.jsecurity.subject.SubjectException var5 = new org.jsecurity.subject.SubjectException("dd\uFFFD", (java.lang.Throwable)var4);
    org.jsecurity.io.SerializationException var6 = new org.jsecurity.io.SerializationException("", (java.lang.Throwable)var5);
    java.lang.Throwable[] var7 = var5.getSuppressed();
    java.lang.Throwable[] var8 = var5.getSuppressed();
    org.jsecurity.authz.SimpleAuthorizationInfo var11 = new org.jsecurity.authz.SimpleAuthorizationInfo();
    var11.addRole("a2b823b1e72eae2b727289df8a00a89df8a0bab6ad8a89c4c5c7a9b62a270000");
    org.jsecurity.session.UnknownSessionException var18 = new org.jsecurity.session.UnknownSessionException("dd\uFFFD", (java.io.Serializable)100.0f);
    org.jsecurity.subject.SubjectException var19 = new org.jsecurity.subject.SubjectException("dd\uFFFD", (java.lang.Throwable)var18);
    org.jsecurity.io.SerializationException var20 = new org.jsecurity.io.SerializationException("", (java.lang.Throwable)var19);
    java.lang.Throwable[] var21 = var19.getSuppressed();
    java.util.Set var22 = org.jsecurity.util.CollectionUtils.asSet((java.lang.Object[])var21);
    var11.addRoles((java.util.Collection)var22);
    java.io.InputStream var25 = org.jsecurity.util.ClassUtils.getResourceAsStream("");
    java.lang.Object[] var26 = new java.lang.Object[] { var25};
    java.util.List var27 = org.jsecurity.util.CollectionUtils.asList(var26);
    org.jsecurity.authc.pam.ModularRealmAuthenticator var28 = new org.jsecurity.authc.pam.ModularRealmAuthenticator(var27);
    org.jsecurity.subject.SimplePrincipalCollection var30 = new org.jsecurity.subject.SimplePrincipalCollection((java.util.Collection)var27, "org.jsecurity.authz.UnauthorizedException: org.jsecurity.session.ExpiredSessionException: ");
    org.jsecurity.session.UnknownSessionException var35 = new org.jsecurity.session.UnknownSessionException("dd\uFFFD", (java.io.Serializable)100.0f);
    org.jsecurity.session.SessionException var37 = new org.jsecurity.session.SessionException("dd\uFFFD", (java.lang.Throwable)var35, (java.io.Serializable)0);
    org.jsecurity.session.SessionException var38 = new org.jsecurity.session.SessionException("dd\uFFFD", (java.lang.Throwable)var35);
    var30.add((java.lang.Object)var38, "org.jsecurity.config.ConfigurationException: dd\uFFFD");
    java.util.Set var41 = var30.asSet();
    org.jsecurity.authz.SimpleAuthorizingAccount var42 = new org.jsecurity.authz.SimpleAuthorizingAccount((java.lang.Object)var8, (java.lang.Object)"\u0000\u0000\u0000", "\u0000\u0000\u0000", var22, var41);
    org.jsecurity.authz.SimpleRole var44 = var42.getRole("\u0000\u0000\u0000");
    org.jsecurity.realm.text.PropertiesRealm var46 = new org.jsecurity.realm.text.PropertiesRealm();
    org.jsecurity.realm.activedirectory.ActiveDirectoryRealm var47 = new org.jsecurity.realm.activedirectory.ActiveDirectoryRealm();
    org.jsecurity.authc.credential.Sha256CredentialsMatcher var48 = new org.jsecurity.authc.credential.Sha256CredentialsMatcher();
    var47.setCredentialsMatcher((org.jsecurity.authc.credential.CredentialsMatcher)var48);
    java.lang.String var50 = var47.getAuthorizationCacheName();
    var47.setPrincipalSuffix("org.jsecurity.config.ConfigurationException: dd\uFFFD");
    org.jsecurity.authz.permission.PermissionResolver var53 = var47.getPermissionResolver();
    var46.setPermissionResolver(var53);
    java.util.Set var55 = org.jsecurity.util.PermissionUtils.resolveDelimitedPermissions("\uFFFD\uFFFD#\uFFFD\uFFFD.\uFFFD+r\uFFFD\u6959(\uFFFD\uFFFDW\uFFFDq\uFFFD.\uFFFD\uFFFD^jY\uFFFDj\uFFFDa\uFFFD\uFFFD\uFFFDj\u0628", var53);
    var42.setSimpleRoles(var55);
    boolean var57 = var42.isCredentialsExpired();
    org.jsecurity.mgt.DefaultSecurityManager var59 = new org.jsecurity.mgt.DefaultSecurityManager();
    java.io.InputStream var61 = org.jsecurity.util.ClassUtils.getResourceAsStream("");
    java.lang.Object[] var62 = new java.lang.Object[] { var61};
    java.util.List var63 = org.jsecurity.util.CollectionUtils.asList(var62);
    org.jsecurity.authc.pam.ModularRealmAuthenticator var64 = new org.jsecurity.authc.pam.ModularRealmAuthenticator(var63);
    org.jsecurity.authc.pam.AllSuccessfulModularAuthenticationStrategy var65 = new org.jsecurity.authc.pam.AllSuccessfulModularAuthenticationStrategy();
    var64.setModularAuthenticationStrategy((org.jsecurity.authc.pam.ModularAuthenticationStrategy)var65);
    org.jsecurity.authz.SimpleAuthorizationInfo var67 = new org.jsecurity.authz.SimpleAuthorizationInfo();
    var67.addStringPermission("hi!");
    java.io.InputStream var71 = org.jsecurity.util.ClassUtils.getResourceAsStream("");
    java.lang.Object[] var72 = new java.lang.Object[] { var71};
    java.util.List var73 = org.jsecurity.util.CollectionUtils.asList(var72);
    var67.addRoles((java.util.Collection)var73);
    var64.setAuthenticationListeners((java.util.Collection)var73);
    var59.setSessionListeners((java.util.Collection)var73);
    org.jsecurity.subject.Subject var77 = var59.getSubject();
    org.jsecurity.authz.permission.WildcardPermissionResolver var78 = new org.jsecurity.authz.permission.WildcardPermissionResolver();
    var59.setPermissionResolver((org.jsecurity.authz.permission.PermissionResolver)var78);
    java.util.Set var80 = org.jsecurity.util.PermissionUtils.resolveDelimitedPermissions("9370bad8-7774-4f3f-9431-c39c9f6aa37d", (org.jsecurity.authz.permission.PermissionResolver)var78);
    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      boolean var81 = var42.isPermittedAll((java.util.Collection)var80);
      fail("Expected exception of type java.lang.ClassCastException");
    } catch (java.lang.ClassCastException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var7);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var8);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var21);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var22);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var25);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var26);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var27);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var41);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var44);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var50);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var53);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var55);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var57 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var61);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var62);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var63);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var71);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var72);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var73);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var77);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var80);

  }

  public void test428() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest7.test428");


    org.jsecurity.util.AntPathMatcher var0 = new org.jsecurity.util.AntPathMatcher();
    var0.setPathSeparator("orgjsecurityauthcCredentialsException783ccd3148a842dd890fdf885a7baafAA==");
    var0.setPathSeparator("b74f4674-5868-4e94-a7d5-832b6ef0fcdb");
    boolean var7 = var0.match("c90601ac-cfac-4c24-b18f-498fb061e4c8", "3c0772ed-e224-45f4-af0b-4a8bf286f87b");
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var7 == false);

  }

  public void test429() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest7.test429");


    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      java.lang.Class var1 = org.jsecurity.util.ClassUtils.forName("11ec0f48-38d4-4429-ba1d-6a4035d60891");
      fail("Expected exception of type org.jsecurity.util.UnknownClassException");
    } catch (org.jsecurity.util.UnknownClassException e) {
      // Expected exception.
    }

  }

  public void test430() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest7.test430");


    org.jsecurity.authz.SimpleRole var1 = new org.jsecurity.authz.SimpleRole("a85af86c-c8fb-4f41-8f4c-e13bb111b188");

  }

  public void test431() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest7.test431");


    org.jsecurity.crypto.hash.Sha512Hash var1 = org.jsecurity.crypto.hash.Sha512Hash.fromBase64String("5642a434-0d22-4b09-92db-5a40904768c2");
    byte[] var2 = var1.getBytes();
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var1);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var2);

  }

  public void test432() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest7.test432");


    org.jsecurity.authc.LockedAccountException var2 = new org.jsecurity.authc.LockedAccountException();
    org.jsecurity.authc.ConcurrentAccessException var3 = new org.jsecurity.authc.ConcurrentAccessException("0220fc2d-2559-421b-822b-6ed559f96c25", (java.lang.Throwable)var2);
    org.jsecurity.config.UnresolveableReferenceException var4 = new org.jsecurity.config.UnresolveableReferenceException((java.lang.Throwable)var2);
    org.jsecurity.session.UnknownSessionException var5 = new org.jsecurity.session.UnknownSessionException("cfe8aded-c7e7-466a-8775-37cd34b9dc9d", (java.lang.Throwable)var2);

  }

  public void test433() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest7.test433");


    org.jsecurity.realm.jndi.JndiRealmFactory var0 = new org.jsecurity.realm.jndi.JndiRealmFactory();
    java.io.InputStream var2 = org.jsecurity.util.ClassUtils.getResourceAsStream("");
    java.lang.Object[] var3 = new java.lang.Object[] { var2};
    java.util.List var4 = org.jsecurity.util.CollectionUtils.asList(var3);
    var0.setJndiNames((java.util.Collection)var4);
    org.jsecurity.authz.SimpleRole var6 = new org.jsecurity.authz.SimpleRole();
    org.jsecurity.authz.SimpleAuthorizationInfo var7 = new org.jsecurity.authz.SimpleAuthorizationInfo();
    var7.addRole("a2b823b1e72eae2b727289df8a00a89df8a0bab6ad8a89c4c5c7a9b62a270000");
    org.jsecurity.session.UnknownSessionException var14 = new org.jsecurity.session.UnknownSessionException("dd\uFFFD", (java.io.Serializable)100.0f);
    org.jsecurity.subject.SubjectException var15 = new org.jsecurity.subject.SubjectException("dd\uFFFD", (java.lang.Throwable)var14);
    org.jsecurity.io.SerializationException var16 = new org.jsecurity.io.SerializationException("", (java.lang.Throwable)var15);
    java.lang.Throwable[] var17 = var15.getSuppressed();
    java.util.Set var18 = org.jsecurity.util.CollectionUtils.asSet((java.lang.Object[])var17);
    var7.addRoles((java.util.Collection)var18);
    var6.addAll((java.util.Collection)var18);
    var0.setJndiNames((java.util.Collection)var18);
    java.util.Collection var22 = var0.getJndiNames();
    var0.setResourceRef(false);
    org.jsecurity.jndi.JndiTemplate var25 = var0.getJndiTemplate();
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var2);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var3);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var4);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var17);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var18);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var22);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var25);

  }

  public void test434() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest7.test434");


    org.jsecurity.authc.UsernamePasswordToken var0 = new org.jsecurity.authc.UsernamePasswordToken();
    java.lang.String var1 = var0.getUsername();
    java.net.InetAddress var2 = var0.getInetAddress();
    java.lang.String var3 = var0.toString();
    char[] var7 = new char[] { ' ', ' '};
    org.jsecurity.authc.UsernamePasswordToken var8 = new org.jsecurity.authc.UsernamePasswordToken("hi!", var7);
    org.jsecurity.authc.pam.AllSuccessfulModularAuthenticationStrategy var9 = new org.jsecurity.authc.pam.AllSuccessfulModularAuthenticationStrategy();
    char[] var11 = new char[] { };
    org.jsecurity.authc.UsernamePasswordToken var13 = new org.jsecurity.authc.UsernamePasswordToken("hi!", var11, true);
    org.jsecurity.authc.SimpleAccount var14 = new org.jsecurity.authc.SimpleAccount();
    var14.setCredentialsExpired(false);
    boolean var17 = var14.isLocked();
    org.jsecurity.authc.AuthenticationInfo var18 = var9.afterAllAttempts((org.jsecurity.authc.AuthenticationToken)var13, (org.jsecurity.authc.AuthenticationInfo)var14);
    char[] var21 = new char[] { };
    org.jsecurity.authc.UsernamePasswordToken var23 = new org.jsecurity.authc.UsernamePasswordToken("hi!", var21, true);
    org.jsecurity.authc.UsernamePasswordToken var24 = new org.jsecurity.authc.UsernamePasswordToken("\u0000\u0000", var21);
    var13.setPassword(var21);
    byte[] var26 = org.jsecurity.codec.Hex.decode(var21);
    var8.setPassword(var21);
    var0.setPassword(var21);
    char[] var29 = var0.getPassword();
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var1);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var2);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var3 + "' != '" + "org.jsecurity.authc.UsernamePasswordToken - null, rememberMe=false"+ "'", var3.equals("org.jsecurity.authc.UsernamePasswordToken - null, rememberMe=false"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var7);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var11);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var17 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var18);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var21);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var26);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var29);

  }

  public void test435() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest7.test435");


    org.jsecurity.session.mgt.DelegatingSession var0 = new org.jsecurity.session.mgt.DelegatingSession();
    java.io.Serializable var1 = var0.getId();
    org.jsecurity.session.mgt.SessionManager var2 = var0.getSessionManager();
    org.jsecurity.session.SessionException var4 = new org.jsecurity.session.SessionException("ab8fbf0b-d098-4d6c-b2c3-f29cba54d65b");
    var0.setId((java.io.Serializable)var4);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var1);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var2);

  }

  public void test436() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest7.test436");


    org.jsecurity.authc.pam.UnsupportedTokenException var1 = new org.jsecurity.authc.pam.UnsupportedTokenException("\uFFFD\uFFFD#\uFFFD\uFFFD.\uFFFD+r\uFFFD\u6959(\uFFFD\uFFFDW\uFFFDq\uFFFD.\uFFFD\uFFFD^jY\uFFFDj\uFFFDa\uFFFD\uFFFD\uFFFDj\u0628\u0000");

  }

  public void test437() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest7.test437");


    org.jsecurity.session.UnknownSessionException var3 = new org.jsecurity.session.UnknownSessionException("dd\uFFFD", (java.io.Serializable)100.0f);
    org.jsecurity.session.SessionException var5 = new org.jsecurity.session.SessionException("dd\uFFFD", (java.lang.Throwable)var3, (java.io.Serializable)0);
    org.jsecurity.authc.SimpleAuthenticationInfo var8 = new org.jsecurity.authc.SimpleAuthenticationInfo((java.lang.Object)0, (java.lang.Object)10, "hi!");
    java.lang.Object var9 = var8.getCredentials();
    java.lang.String var10 = var8.toString();
    org.jsecurity.realm.text.TextConfigurationRealm var11 = new org.jsecurity.realm.text.TextConfigurationRealm();
    java.io.InputStream var13 = org.jsecurity.util.ClassUtils.getResourceAsStream("");
    java.lang.Object[] var14 = new java.lang.Object[] { var13};
    java.util.List var15 = org.jsecurity.util.CollectionUtils.asList(var14);
    org.jsecurity.authc.pam.ModularRealmAuthenticator var16 = new org.jsecurity.authc.pam.ModularRealmAuthenticator(var15);
    org.jsecurity.subject.SimplePrincipalCollection var18 = new org.jsecurity.subject.SimplePrincipalCollection((java.util.Collection)var15, "org.jsecurity.authz.UnauthorizedException: org.jsecurity.session.ExpiredSessionException: ");
    org.jsecurity.session.UnknownSessionException var23 = new org.jsecurity.session.UnknownSessionException("dd\uFFFD", (java.io.Serializable)100.0f);
    org.jsecurity.session.SessionException var25 = new org.jsecurity.session.SessionException("dd\uFFFD", (java.lang.Throwable)var23, (java.io.Serializable)0);
    org.jsecurity.session.SessionException var26 = new org.jsecurity.session.SessionException("dd\uFFFD", (java.lang.Throwable)var23);
    var18.add((java.lang.Object)var26, "org.jsecurity.config.ConfigurationException: dd\uFFFD");
    var11.onLogout((org.jsecurity.subject.PrincipalCollection)var18);
    org.jsecurity.cache.HashtableCacheManager var30 = new org.jsecurity.cache.HashtableCacheManager();
    org.jsecurity.cache.Cache var32 = var30.getCache("\u0000\u0000");
    var11.setAuthorizationCache(var32);
    org.jsecurity.codec.CodecException var36 = new org.jsecurity.codec.CodecException("dd\uFFFD");
    org.jsecurity.authc.ConcurrentAccessException var37 = new org.jsecurity.authc.ConcurrentAccessException("org.jsecurity.authz.UnauthorizedException: org.jsecurity.session.ExpiredSessionException: ", (java.lang.Throwable)var36);
    org.jsecurity.subject.SimplePrincipalCollection var39 = new org.jsecurity.subject.SimplePrincipalCollection((java.lang.Object)var36, "");
    var11.onLogout((org.jsecurity.subject.PrincipalCollection)var39);
    var8.setPrincipals((org.jsecurity.subject.PrincipalCollection)var39);
    org.jsecurity.realm.activedirectory.ActiveDirectoryRealm var42 = new org.jsecurity.realm.activedirectory.ActiveDirectoryRealm();
    org.jsecurity.authc.credential.Sha256CredentialsMatcher var43 = new org.jsecurity.authc.credential.Sha256CredentialsMatcher();
    var42.setCredentialsMatcher((org.jsecurity.authc.credential.CredentialsMatcher)var43);
    org.jsecurity.realm.activedirectory.ActiveDirectoryRealm var45 = new org.jsecurity.realm.activedirectory.ActiveDirectoryRealm();
    org.jsecurity.authc.credential.Sha256CredentialsMatcher var46 = new org.jsecurity.authc.credential.Sha256CredentialsMatcher();
    var45.setCredentialsMatcher((org.jsecurity.authc.credential.CredentialsMatcher)var46);
    java.lang.String var48 = var45.getAuthorizationCacheName();
    var45.setUrl("hi!");
    org.jsecurity.realm.ldap.DefaultLdapContextFactory var51 = new org.jsecurity.realm.ldap.DefaultLdapContextFactory();
    var45.setLdapContextFactory((org.jsecurity.realm.ldap.LdapContextFactory)var51);
    var51.setAuthentication("org.jsecurity.authz.UnauthorizedException: org.jsecurity.session.ExpiredSessionException: ");
    var42.setLdapContextFactory((org.jsecurity.realm.ldap.LdapContextFactory)var51);
    var51.setReferral("a2b823b1e72eae2b727289df8a00a89df8a0bab6ad8a89c4c5c7a9b62a270000");
    var51.setUrl("\u0000\u0000");
    java.util.Set var62 = org.jsecurity.util.PermissionUtils.toPermissionStrings("org.jsecurity.config.ConfigurationException: dd\uFFFD");
    org.jsecurity.authz.SimpleAuthorizationInfo var63 = new org.jsecurity.authz.SimpleAuthorizationInfo(var62);
    org.jsecurity.authz.SimpleRole var64 = new org.jsecurity.authz.SimpleRole();
    java.lang.String var65 = var64.getName();
    org.jsecurity.session.UnknownSessionException var70 = new org.jsecurity.session.UnknownSessionException("dd\uFFFD", (java.io.Serializable)100.0f);
    org.jsecurity.subject.SubjectException var71 = new org.jsecurity.subject.SubjectException("dd\uFFFD", (java.lang.Throwable)var70);
    org.jsecurity.io.SerializationException var72 = new org.jsecurity.io.SerializationException("", (java.lang.Throwable)var71);
    java.lang.Throwable[] var73 = var71.getSuppressed();
    java.util.Set var74 = org.jsecurity.util.CollectionUtils.asSet((java.lang.Object[])var73);
    var64.setPermissions(var74);
    org.jsecurity.authz.SimpleAuthorizingAccount var76 = new org.jsecurity.authz.SimpleAuthorizingAccount((org.jsecurity.subject.PrincipalCollection)var39, (java.lang.Object)"\u0000\u0000", "org.jsecurity.authc.AccountException: hi!", var62, var74);
    java.util.Set var77 = var76.getRolenames();
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var9 + "' != '" + 10+ "'", var9.equals(10));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var13);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var14);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var15);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var32);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var48);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var62);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var65);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var73);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var74);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var77);

  }

  public void test438() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest7.test438");


    org.jsecurity.session.mgt.eis.MemorySessionDAO var0 = new org.jsecurity.session.mgt.eis.MemorySessionDAO();
    org.jsecurity.cache.Cache var1 = var0.getActiveSessionsCache();
    org.jsecurity.cache.CacheManager var2 = var0.getCacheManager();
    org.jsecurity.cache.HashtableCacheManager var3 = new org.jsecurity.cache.HashtableCacheManager();
    org.jsecurity.cache.Cache var5 = var3.getCache("\u0000\u0000");
    var0.setActiveSessionsCache(var5);
    java.io.InputStream var8 = org.jsecurity.util.ClassUtils.getResourceAsStream("");
    java.lang.Object[] var9 = new java.lang.Object[] { var8};
    java.util.List var10 = org.jsecurity.util.CollectionUtils.asList(var9);
    org.jsecurity.authc.pam.ModularRealmAuthenticator var11 = new org.jsecurity.authc.pam.ModularRealmAuthenticator(var10);
    org.jsecurity.authc.pam.AllSuccessfulModularAuthenticationStrategy var12 = new org.jsecurity.authc.pam.AllSuccessfulModularAuthenticationStrategy();
    var11.setModularAuthenticationStrategy((org.jsecurity.authc.pam.ModularAuthenticationStrategy)var12);
    org.jsecurity.authz.SimpleAuthorizationInfo var14 = new org.jsecurity.authz.SimpleAuthorizationInfo();
    var14.addStringPermission("hi!");
    java.io.InputStream var18 = org.jsecurity.util.ClassUtils.getResourceAsStream("");
    java.lang.Object[] var19 = new java.lang.Object[] { var18};
    java.util.List var20 = org.jsecurity.util.CollectionUtils.asList(var19);
    var14.addRoles((java.util.Collection)var20);
    var11.setAuthenticationListeners((java.util.Collection)var20);
    org.jsecurity.realm.activedirectory.ActiveDirectoryRealm var23 = new org.jsecurity.realm.activedirectory.ActiveDirectoryRealm();
    var23.setPrincipalSuffix("");
    var11.setRealm((org.jsecurity.realm.Realm)var23);
    org.jsecurity.cache.HashtableCacheManager var27 = new org.jsecurity.cache.HashtableCacheManager();
    org.jsecurity.cache.Cache var29 = var27.getCache("\u0000\u0000");
    var23.setAuthorizationCache(var29);
    var0.setActiveSessionsCache(var29);
    org.jsecurity.session.mgt.SimpleSession var32 = new org.jsecurity.session.mgt.SimpleSession();
    java.io.Serializable var33 = var0.create((org.jsecurity.session.Session)var32);
    org.jsecurity.cache.Cache var34 = var0.getActiveSessionsCache();
    java.util.Collection var35 = var0.getActiveSessions();
    org.jsecurity.session.UnknownSessionException var39 = new org.jsecurity.session.UnknownSessionException("dd\uFFFD", (java.io.Serializable)100.0f);
    org.jsecurity.subject.SubjectException var40 = new org.jsecurity.subject.SubjectException("dd\uFFFD", (java.lang.Throwable)var39);
    org.jsecurity.session.StoppedSessionException var41 = new org.jsecurity.session.StoppedSessionException((java.lang.Throwable)var39);
    org.jsecurity.authc.SimpleAccount var43 = new org.jsecurity.authc.SimpleAccount((java.lang.Object)var0, (java.lang.Object)var39, "8efe64ee-f094-4108-98aa-31f517161dc2");
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var1);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var2);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var5);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var8);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var9);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var10);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var18);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var19);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var20);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var29);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var33 + "' != '" + "a4a5d2c3-38c5-4ac2-8586-d50894417a3e"+ "'", var33.equals("a4a5d2c3-38c5-4ac2-8586-d50894417a3e"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var34);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var35);

  }

  public void test439() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest7.test439");


    org.jsecurity.session.mgt.eis.MemorySessionDAO var0 = new org.jsecurity.session.mgt.eis.MemorySessionDAO();
    org.jsecurity.cache.Cache var1 = var0.getActiveSessionsCache();
    org.jsecurity.cache.CacheManager var2 = var0.getCacheManager();
    org.jsecurity.cache.HashtableCacheManager var3 = new org.jsecurity.cache.HashtableCacheManager();
    org.jsecurity.cache.Cache var5 = var3.getCache("\u0000\u0000");
    var0.setActiveSessionsCache(var5);
    java.io.InputStream var8 = org.jsecurity.util.ClassUtils.getResourceAsStream("");
    java.lang.Object[] var9 = new java.lang.Object[] { var8};
    java.util.List var10 = org.jsecurity.util.CollectionUtils.asList(var9);
    org.jsecurity.authc.pam.ModularRealmAuthenticator var11 = new org.jsecurity.authc.pam.ModularRealmAuthenticator(var10);
    org.jsecurity.authc.pam.AllSuccessfulModularAuthenticationStrategy var12 = new org.jsecurity.authc.pam.AllSuccessfulModularAuthenticationStrategy();
    var11.setModularAuthenticationStrategy((org.jsecurity.authc.pam.ModularAuthenticationStrategy)var12);
    org.jsecurity.authz.SimpleAuthorizationInfo var14 = new org.jsecurity.authz.SimpleAuthorizationInfo();
    var14.addStringPermission("hi!");
    java.io.InputStream var18 = org.jsecurity.util.ClassUtils.getResourceAsStream("");
    java.lang.Object[] var19 = new java.lang.Object[] { var18};
    java.util.List var20 = org.jsecurity.util.CollectionUtils.asList(var19);
    var14.addRoles((java.util.Collection)var20);
    var11.setAuthenticationListeners((java.util.Collection)var20);
    org.jsecurity.realm.activedirectory.ActiveDirectoryRealm var23 = new org.jsecurity.realm.activedirectory.ActiveDirectoryRealm();
    var23.setPrincipalSuffix("");
    var11.setRealm((org.jsecurity.realm.Realm)var23);
    org.jsecurity.cache.HashtableCacheManager var27 = new org.jsecurity.cache.HashtableCacheManager();
    org.jsecurity.cache.Cache var29 = var27.getCache("\u0000\u0000");
    var23.setAuthorizationCache(var29);
    var0.setActiveSessionsCache(var29);
    org.jsecurity.session.mgt.SimpleSession var32 = new org.jsecurity.session.mgt.SimpleSession();
    java.io.Serializable var33 = var0.create((org.jsecurity.session.Session)var32);
    org.jsecurity.session.mgt.SimpleSession var34 = new org.jsecurity.session.mgt.SimpleSession();
    var34.touch();
    var34.validate();
    org.jsecurity.session.mgt.SimpleSession var37 = new org.jsecurity.session.mgt.SimpleSession();
    var37.setTimeout((-1L));
    org.jsecurity.session.mgt.SimpleSession var40 = new org.jsecurity.session.mgt.SimpleSession();
    java.util.Date var41 = var40.getLastAccessTime();
    var37.setLastAccessTime(var41);
    org.jsecurity.session.mgt.SimpleSession var43 = new org.jsecurity.session.mgt.SimpleSession();
    java.util.Date var44 = var43.getLastAccessTime();
    var37.setStopTimestamp(var44);
    var34.setLastAccessTime(var44);
    var32.setLastAccessTime(var44);
    org.jsecurity.session.mgt.ImmutableProxiedSession var48 = new org.jsecurity.session.mgt.ImmutableProxiedSession((org.jsecurity.session.Session)var32);
    java.util.Date var49 = var48.getLastAccessTime();
    long var50 = var48.getTimeout();
    java.util.Date var51 = var48.getLastAccessTime();
    java.net.InetAddress var52 = var48.getHostAddress();
    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      var48.setTimeout(3600000L);
      fail("Expected exception of type org.jsecurity.session.InvalidSessionException");
    } catch (org.jsecurity.session.InvalidSessionException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var1);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var2);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var5);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var8);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var9);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var10);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var18);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var19);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var20);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var29);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var33 + "' != '" + "35bd3a95-35aa-4936-9ee1-a5c136b3ace7"+ "'", var33.equals("35bd3a95-35aa-4936-9ee1-a5c136b3ace7"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var41);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var44);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var49);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var50 == 1800000L);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var51);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var52);

  }

  public void test440() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest7.test440");


    org.jsecurity.authz.aop.UserAnnotationMethodInterceptor var0 = new org.jsecurity.authz.aop.UserAnnotationMethodInterceptor();
    org.jsecurity.io.XmlSerializer var1 = new org.jsecurity.io.XmlSerializer();
    org.jsecurity.session.mgt.quartz.QuartzSessionValidationScheduler var2 = new org.jsecurity.session.mgt.quartz.QuartzSessionValidationScheduler();
    var2.disableSessionValidation();
    byte[] var4 = var1.serialize((java.lang.Object)var2);
    byte[] var6 = var1.serialize((java.lang.Object)1);
    org.jsecurity.authz.aop.UserAnnotationMethodInterceptor var7 = new org.jsecurity.authz.aop.UserAnnotationMethodInterceptor();
    org.jsecurity.aop.AnnotationHandler var8 = var7.getHandler();
    java.lang.Class var9 = var8.getAnnotationClass();
    byte[] var10 = var1.serialize((java.lang.Object)var8);
    var0.setHandler(var8);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var4);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var6);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var8);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var9);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var10);

  }

  public void test441() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest7.test441");


    org.jsecurity.util.UnknownClassException var3 = new org.jsecurity.util.UnknownClassException("b6cd6008-ae80-4bfd-ae0c-5041e0198a79");
    org.jsecurity.config.UnresolveableReferenceException var4 = new org.jsecurity.config.UnresolveableReferenceException((java.lang.Throwable)var3);
    org.jsecurity.authz.UnauthenticatedException var5 = new org.jsecurity.authz.UnauthenticatedException("ff9f2014-649d-414b-8132-f4962e7ca4d7", (java.lang.Throwable)var4);
    org.jsecurity.session.SessionException var7 = new org.jsecurity.session.SessionException("f7b61ae8-4a38-47b6-912d-22bfe8ae3866", (java.lang.Throwable)var5, (java.io.Serializable)"hi!");

  }

  public void test442() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest7.test442");


    org.jsecurity.realm.activedirectory.ActiveDirectoryRealm var0 = new org.jsecurity.realm.activedirectory.ActiveDirectoryRealm();
    org.jsecurity.authc.credential.Sha256CredentialsMatcher var1 = new org.jsecurity.authc.credential.Sha256CredentialsMatcher();
    var0.setCredentialsMatcher((org.jsecurity.authc.credential.CredentialsMatcher)var1);
    org.jsecurity.session.mgt.eis.MemorySessionDAO var3 = new org.jsecurity.session.mgt.eis.MemorySessionDAO();
    org.jsecurity.cache.HashtableCache var5 = new org.jsecurity.cache.HashtableCache("b017e95a-a08d-4f3a-bab8-cc9b39ef5331");
    var3.setActiveSessionsCache((org.jsecurity.cache.Cache)var5);
    var0.setAuthorizationCache((org.jsecurity.cache.Cache)var5);
    org.jsecurity.realm.activedirectory.ActiveDirectoryRealm var8 = new org.jsecurity.realm.activedirectory.ActiveDirectoryRealm();
    org.jsecurity.authc.credential.Sha256CredentialsMatcher var9 = new org.jsecurity.authc.credential.Sha256CredentialsMatcher();
    var8.setCredentialsMatcher((org.jsecurity.authc.credential.CredentialsMatcher)var9);
    org.jsecurity.realm.activedirectory.ActiveDirectoryRealm var11 = new org.jsecurity.realm.activedirectory.ActiveDirectoryRealm();
    org.jsecurity.authc.credential.Sha256CredentialsMatcher var12 = new org.jsecurity.authc.credential.Sha256CredentialsMatcher();
    var11.setCredentialsMatcher((org.jsecurity.authc.credential.CredentialsMatcher)var12);
    java.lang.String var14 = var11.getAuthorizationCacheName();
    var11.setUrl("hi!");
    org.jsecurity.realm.ldap.DefaultLdapContextFactory var17 = new org.jsecurity.realm.ldap.DefaultLdapContextFactory();
    var11.setLdapContextFactory((org.jsecurity.realm.ldap.LdapContextFactory)var17);
    var17.setAuthentication("org.jsecurity.authz.UnauthorizedException: org.jsecurity.session.ExpiredSessionException: ");
    var8.setLdapContextFactory((org.jsecurity.realm.ldap.LdapContextFactory)var17);
    var17.setReferral("a2b823b1e72eae2b727289df8a00a89df8a0bab6ad8a89c4c5c7a9b62a270000");
    var17.setUrl("\u0000\u0000");
    var17.setSystemUsername("3404264c-53a7-4bda-8312-f6866b44ed78");
    var0.setLdapContextFactory((org.jsecurity.realm.ldap.LdapContextFactory)var17);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var14);

  }

  public void test443() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest7.test443");


    org.jsecurity.realm.text.PropertiesRealm var0 = new org.jsecurity.realm.text.PropertiesRealm();
    org.jsecurity.realm.activedirectory.ActiveDirectoryRealm var1 = new org.jsecurity.realm.activedirectory.ActiveDirectoryRealm();
    org.jsecurity.authc.credential.Sha256CredentialsMatcher var2 = new org.jsecurity.authc.credential.Sha256CredentialsMatcher();
    var1.setCredentialsMatcher((org.jsecurity.authc.credential.CredentialsMatcher)var2);
    java.lang.String var4 = var1.getAuthorizationCacheName();
    var1.setPrincipalSuffix("org.jsecurity.config.ConfigurationException: dd\uFFFD");
    org.jsecurity.authz.permission.PermissionResolver var7 = var1.getPermissionResolver();
    var0.setPermissionResolver(var7);
    var0.destroy();
    java.lang.String var10 = var0.getRoleDefinitions();
    var0.init();
    org.jsecurity.cache.HashtableCache var13 = new org.jsecurity.cache.HashtableCache("\u0000\u0000\u0000");
    org.jsecurity.session.mgt.SimpleSession var14 = new org.jsecurity.session.mgt.SimpleSession();
    var14.touch();
    org.jsecurity.authz.UnauthenticatedException var18 = new org.jsecurity.authz.UnauthenticatedException();
    org.jsecurity.config.UnresolveableReferenceException var19 = new org.jsecurity.config.UnresolveableReferenceException("", (java.lang.Throwable)var18);
    org.jsecurity.cache.CacheException var20 = new org.jsecurity.cache.CacheException("org.jsecurity.config.ConfigurationException: dd\uFFFD", (java.lang.Throwable)var18);
    java.lang.Object var21 = var14.removeAttribute((java.lang.Object)var20);
    org.jsecurity.mgt.DefaultSecurityManager var22 = new org.jsecurity.mgt.DefaultSecurityManager();
    org.jsecurity.authc.pam.AllSuccessfulModularAuthenticationStrategy var23 = new org.jsecurity.authc.pam.AllSuccessfulModularAuthenticationStrategy();
    org.jsecurity.authc.pam.AllSuccessfulModularAuthenticationStrategy var24 = new org.jsecurity.authc.pam.AllSuccessfulModularAuthenticationStrategy();
    char[] var26 = new char[] { };
    org.jsecurity.authc.UsernamePasswordToken var28 = new org.jsecurity.authc.UsernamePasswordToken("hi!", var26, true);
    org.jsecurity.authc.SimpleAccount var29 = new org.jsecurity.authc.SimpleAccount();
    var29.setCredentialsExpired(false);
    boolean var32 = var29.isLocked();
    org.jsecurity.authc.AuthenticationInfo var33 = var24.afterAllAttempts((org.jsecurity.authc.AuthenticationToken)var28, (org.jsecurity.authc.AuthenticationInfo)var29);
    char[] var37 = new char[] { '4', '#'};
    org.jsecurity.authc.UsernamePasswordToken var38 = new org.jsecurity.authc.UsernamePasswordToken("\u0000\u0000", var37);
    org.jsecurity.authc.SimpleAccount var39 = new org.jsecurity.authc.SimpleAccount();
    var39.setCredentialsExpired(false);
    var39.setCredentialsExpired(false);
    boolean var44 = var39.isCredentialsExpired();
    org.jsecurity.authc.AuthenticationInfo var45 = var24.afterAllAttempts((org.jsecurity.authc.AuthenticationToken)var38, (org.jsecurity.authc.AuthenticationInfo)var39);
    org.jsecurity.authz.UnauthenticatedException var49 = new org.jsecurity.authz.UnauthenticatedException();
    org.jsecurity.config.UnresolveableReferenceException var50 = new org.jsecurity.config.UnresolveableReferenceException("", (java.lang.Throwable)var49);
    org.jsecurity.cache.CacheException var51 = new org.jsecurity.cache.CacheException("org.jsecurity.config.ConfigurationException: dd\uFFFD", (java.lang.Throwable)var49);
    org.jsecurity.authc.SimpleAuthenticationInfo var53 = new org.jsecurity.authc.SimpleAuthenticationInfo((java.lang.Object)"org.jsecurity.config.ConfigurationException: dd\uFFFD", (java.lang.Object)var51, "a2b823b1e72eae2b727289df8a00a89df8a0bab6ad8a89c4c5c7a9b62a270000");
    org.jsecurity.subject.PrincipalCollection var54 = var53.getPrincipals();
    org.jsecurity.authc.AuthenticationInfo var55 = var23.afterAllAttempts((org.jsecurity.authc.AuthenticationToken)var38, (org.jsecurity.authc.AuthenticationInfo)var53);
    var22.setModularAuthenticationStrategy((org.jsecurity.authc.pam.ModularAuthenticationStrategy)var23);
    org.jsecurity.subject.RememberMeManager var57 = var22.getRememberMeManager();
    org.jsecurity.authc.pam.ModularRealmAuthenticator var58 = new org.jsecurity.authc.pam.ModularRealmAuthenticator();
    var22.setAuthenticator((org.jsecurity.authc.Authenticator)var58);
    var13.put((java.lang.Object)var14, (java.lang.Object)var58);
    org.jsecurity.realm.activedirectory.ActiveDirectoryRealm var61 = new org.jsecurity.realm.activedirectory.ActiveDirectoryRealm();
    org.jsecurity.authc.credential.Sha256CredentialsMatcher var62 = new org.jsecurity.authc.credential.Sha256CredentialsMatcher();
    var61.setCredentialsMatcher((org.jsecurity.authc.credential.CredentialsMatcher)var62);
    var62.setHashSalted(false);
    org.jsecurity.authz.UnauthenticatedException var68 = new org.jsecurity.authz.UnauthenticatedException();
    org.jsecurity.config.UnresolveableReferenceException var69 = new org.jsecurity.config.UnresolveableReferenceException("", (java.lang.Throwable)var68);
    org.jsecurity.session.InvalidSessionException var70 = new org.jsecurity.session.InvalidSessionException((java.io.Serializable)var68);
    org.jsecurity.subject.InvalidSubjectException var71 = new org.jsecurity.subject.InvalidSubjectException("org.jsecurity.config.ConfigurationException: dd\uFFFD", (java.lang.Throwable)var68);
    var13.put((java.lang.Object)var62, (java.lang.Object)"org.jsecurity.config.ConfigurationException: dd\uFFFD");
    org.jsecurity.authc.UsernamePasswordToken var73 = new org.jsecurity.authc.UsernamePasswordToken();
    java.lang.String var74 = var73.getUsername();
    java.lang.Object var75 = var73.getPrincipal();
    var73.setUsername("hi!");
    java.lang.Object var78 = var73.getCredentials();
    java.lang.String var79 = var73.getUsername();
    var13.remove((java.lang.Object)var73);
    var0.setAuthorizationCache((org.jsecurity.cache.Cache)var13);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var4);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var7);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var10);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var21);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var26);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var32 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var33);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var37);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var44 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var45);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var54);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var55);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var57);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var74);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var75);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var78);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var79 + "' != '" + "hi!"+ "'", var79.equals("hi!"));

  }

  public void test444() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest7.test444");


    org.jsecurity.codec.CodecException var2 = new org.jsecurity.codec.CodecException("dd\uFFFD");
    org.jsecurity.authc.ConcurrentAccessException var3 = new org.jsecurity.authc.ConcurrentAccessException("org.jsecurity.authz.UnauthorizedException: org.jsecurity.session.ExpiredSessionException: ", (java.lang.Throwable)var2);
    org.jsecurity.subject.SimplePrincipalCollection var5 = new org.jsecurity.subject.SimplePrincipalCollection((java.lang.Object)var2, "");
    org.jsecurity.authc.pam.FirstSuccessfulAuthenticationStrategy var6 = new org.jsecurity.authc.pam.FirstSuccessfulAuthenticationStrategy();
    org.jsecurity.authz.UnauthorizedException var8 = new org.jsecurity.authz.UnauthorizedException("org.jsecurity.config.ConfigurationException: dd\uFFFD");
    java.lang.Throwable[] var9 = var8.getSuppressed();
    java.util.List var10 = org.jsecurity.util.CollectionUtils.asList((java.lang.Object[])var9);
    org.jsecurity.authc.UsernamePasswordToken var11 = new org.jsecurity.authc.UsernamePasswordToken();
    java.lang.String var12 = var11.getUsername();
    java.net.InetAddress var13 = var11.getInetAddress();
    org.jsecurity.authc.AuthenticationInfo var14 = var6.beforeAllAttempts((java.util.Collection)var10, (org.jsecurity.authc.AuthenticationToken)var11);
    org.jsecurity.session.UnknownSessionException var19 = new org.jsecurity.session.UnknownSessionException("dd\uFFFD", (java.io.Serializable)100.0f);
    org.jsecurity.subject.SubjectException var20 = new org.jsecurity.subject.SubjectException("dd\uFFFD", (java.lang.Throwable)var19);
    org.jsecurity.io.SerializationException var21 = new org.jsecurity.io.SerializationException("", (java.lang.Throwable)var20);
    java.lang.Throwable[] var22 = var20.getSuppressed();
    java.util.Set var23 = org.jsecurity.util.CollectionUtils.asSet((java.lang.Object[])var22);
    org.jsecurity.authc.SimpleAccount var24 = new org.jsecurity.authc.SimpleAccount((org.jsecurity.subject.PrincipalCollection)var5, (java.lang.Object)var10, var23);
    java.io.InputStream var26 = org.jsecurity.util.ClassUtils.getResourceAsStream("");
    java.lang.Object[] var27 = new java.lang.Object[] { var26};
    java.util.List var28 = org.jsecurity.util.CollectionUtils.asList(var27);
    org.jsecurity.authc.pam.ModularRealmAuthenticator var29 = new org.jsecurity.authc.pam.ModularRealmAuthenticator(var28);
    org.jsecurity.subject.SimplePrincipalCollection var31 = new org.jsecurity.subject.SimplePrincipalCollection((java.util.Collection)var28, "org.jsecurity.authz.UnauthorizedException: org.jsecurity.session.ExpiredSessionException: ");
    org.jsecurity.io.ResourceException var35 = new org.jsecurity.io.ResourceException("hi!");
    org.jsecurity.authc.UnknownAccountException var36 = new org.jsecurity.authc.UnknownAccountException((java.lang.Throwable)var35);
    org.jsecurity.session.StoppedSessionException var37 = new org.jsecurity.session.StoppedSessionException("dd\uFFFD", (java.io.Serializable)var35);
    org.jsecurity.session.UnknownSessionException var38 = new org.jsecurity.session.UnknownSessionException("org.jsecurity.authz.UnauthorizedException: org.jsecurity.session.ExpiredSessionException: ", (java.lang.Throwable)var35);
    boolean var39 = var31.equals((java.lang.Object)var35);
    var5.addAll((org.jsecurity.subject.PrincipalCollection)var31);
    java.util.List var41 = var31.asList();
    org.jsecurity.authz.ModularRealmAuthorizer var42 = new org.jsecurity.authz.ModularRealmAuthorizer((java.util.Collection)var41);
    org.jsecurity.session.mgt.SimpleSession var43 = new org.jsecurity.session.mgt.SimpleSession();
    java.util.Date var44 = var43.getLastAccessTime();
    boolean var45 = var43.isValid();
    java.lang.String[] var48 = org.jsecurity.util.StringUtils.split("dade3937-164f-46fa-a082-f5f54b3b44e1", ' ');
    java.util.List var49 = org.jsecurity.util.CollectionUtils.asList((java.lang.Object[])var48);
    org.jsecurity.authz.aop.RoleAnnotationMethodInterceptor var50 = new org.jsecurity.authz.aop.RoleAnnotationMethodInterceptor();
    org.jsecurity.aop.AnnotationHandler var51 = var50.getHandler();
    java.lang.Class var52 = var51.getAnnotationClass();
    var43.setAttribute((java.lang.Object)var49, (java.lang.Object)var52);
    var42.setRealms((java.util.Collection)var49);
    org.jsecurity.realm.text.PropertiesRealm var55 = new org.jsecurity.realm.text.PropertiesRealm();
    var55.setRoleDefinitions("5dd0c65d-1422-49c2-becb-9e8dca619ab3");
    java.lang.String var58 = var55.getUserDefinitions();
    var55.setName("e23a02c5-2287-4daa-91c4-8efed2be0f73");
    var55.setResourcePath("69d3a52f-a464-4f98-8253-2a105929a356");
    org.jsecurity.realm.text.TextConfigurationRealm var64 = new org.jsecurity.realm.text.TextConfigurationRealm();
    java.io.InputStream var66 = org.jsecurity.util.ClassUtils.getResourceAsStream("");
    java.lang.Object[] var67 = new java.lang.Object[] { var66};
    java.util.List var68 = org.jsecurity.util.CollectionUtils.asList(var67);
    org.jsecurity.authc.pam.ModularRealmAuthenticator var69 = new org.jsecurity.authc.pam.ModularRealmAuthenticator(var68);
    org.jsecurity.subject.SimplePrincipalCollection var71 = new org.jsecurity.subject.SimplePrincipalCollection((java.util.Collection)var68, "org.jsecurity.authz.UnauthorizedException: org.jsecurity.session.ExpiredSessionException: ");
    org.jsecurity.session.UnknownSessionException var76 = new org.jsecurity.session.UnknownSessionException("dd\uFFFD", (java.io.Serializable)100.0f);
    org.jsecurity.session.SessionException var78 = new org.jsecurity.session.SessionException("dd\uFFFD", (java.lang.Throwable)var76, (java.io.Serializable)0);
    org.jsecurity.session.SessionException var79 = new org.jsecurity.session.SessionException("dd\uFFFD", (java.lang.Throwable)var76);
    var71.add((java.lang.Object)var79, "org.jsecurity.config.ConfigurationException: dd\uFFFD");
    var64.onLogout((org.jsecurity.subject.PrincipalCollection)var71);
    java.util.Set var84 = org.jsecurity.util.PermissionUtils.toPermissionStrings("org.jsecurity.config.ConfigurationException: dd\uFFFD");
    org.jsecurity.authz.SimpleAuthorizationInfo var85 = new org.jsecurity.authz.SimpleAuthorizationInfo(var84);
    org.jsecurity.authz.SimpleAuthorizingAccount var86 = new org.jsecurity.authz.SimpleAuthorizingAccount((org.jsecurity.subject.PrincipalCollection)var71, (java.lang.Object)var84);
    org.jsecurity.session.StoppedSessionException var87 = new org.jsecurity.session.StoppedSessionException("org.jsecurity.realm.SimpleAccountRealm-55-authorization", (java.io.Serializable)var71);
    org.jsecurity.realm.activedirectory.ActiveDirectoryRealm var88 = new org.jsecurity.realm.activedirectory.ActiveDirectoryRealm();
    var88.init();
    var88.setSystemPassword("dd\uFFFD");
    org.jsecurity.authz.aop.GuestAnnotationHandler var92 = new org.jsecurity.authz.aop.GuestAnnotationHandler();
    java.lang.Class var93 = var92.getAnnotationClass();
    var88.setAuthenticationTokenClass(var93);
    java.util.Collection var95 = var71.byType(var93);
    java.util.Set var96 = var71.asSet();
    var55.onLogout((org.jsecurity.subject.PrincipalCollection)var71);
    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      var42.checkPermission((org.jsecurity.subject.PrincipalCollection)var71, "org.jsecurity.realm.text.TextConfigurationRealm_445");
      fail("Expected exception of type java.lang.ClassCastException");
    } catch (java.lang.ClassCastException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var9);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var10);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var12);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var13);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var14);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var22);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var23);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var26);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var27);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var28);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var39 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var41);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var44);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var45 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var48);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var49);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var51);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var52);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var58);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var66);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var67);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var68);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var84);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var93);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var95);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var96);

  }

  public void test445() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest7.test445");


    org.jsecurity.mgt.DefaultSecurityManager var0 = new org.jsecurity.mgt.DefaultSecurityManager();
    org.jsecurity.authc.pam.AllSuccessfulModularAuthenticationStrategy var1 = new org.jsecurity.authc.pam.AllSuccessfulModularAuthenticationStrategy();
    org.jsecurity.authc.pam.AllSuccessfulModularAuthenticationStrategy var2 = new org.jsecurity.authc.pam.AllSuccessfulModularAuthenticationStrategy();
    char[] var4 = new char[] { };
    org.jsecurity.authc.UsernamePasswordToken var6 = new org.jsecurity.authc.UsernamePasswordToken("hi!", var4, true);
    org.jsecurity.authc.SimpleAccount var7 = new org.jsecurity.authc.SimpleAccount();
    var7.setCredentialsExpired(false);
    boolean var10 = var7.isLocked();
    org.jsecurity.authc.AuthenticationInfo var11 = var2.afterAllAttempts((org.jsecurity.authc.AuthenticationToken)var6, (org.jsecurity.authc.AuthenticationInfo)var7);
    char[] var15 = new char[] { '4', '#'};
    org.jsecurity.authc.UsernamePasswordToken var16 = new org.jsecurity.authc.UsernamePasswordToken("\u0000\u0000", var15);
    org.jsecurity.authc.SimpleAccount var17 = new org.jsecurity.authc.SimpleAccount();
    var17.setCredentialsExpired(false);
    var17.setCredentialsExpired(false);
    boolean var22 = var17.isCredentialsExpired();
    org.jsecurity.authc.AuthenticationInfo var23 = var2.afterAllAttempts((org.jsecurity.authc.AuthenticationToken)var16, (org.jsecurity.authc.AuthenticationInfo)var17);
    org.jsecurity.authz.UnauthenticatedException var27 = new org.jsecurity.authz.UnauthenticatedException();
    org.jsecurity.config.UnresolveableReferenceException var28 = new org.jsecurity.config.UnresolveableReferenceException("", (java.lang.Throwable)var27);
    org.jsecurity.cache.CacheException var29 = new org.jsecurity.cache.CacheException("org.jsecurity.config.ConfigurationException: dd\uFFFD", (java.lang.Throwable)var27);
    org.jsecurity.authc.SimpleAuthenticationInfo var31 = new org.jsecurity.authc.SimpleAuthenticationInfo((java.lang.Object)"org.jsecurity.config.ConfigurationException: dd\uFFFD", (java.lang.Object)var29, "a2b823b1e72eae2b727289df8a00a89df8a0bab6ad8a89c4c5c7a9b62a270000");
    org.jsecurity.subject.PrincipalCollection var32 = var31.getPrincipals();
    org.jsecurity.authc.AuthenticationInfo var33 = var1.afterAllAttempts((org.jsecurity.authc.AuthenticationToken)var16, (org.jsecurity.authc.AuthenticationInfo)var31);
    var0.setModularAuthenticationStrategy((org.jsecurity.authc.pam.ModularAuthenticationStrategy)var1);
    org.jsecurity.subject.RememberMeManager var35 = var0.getRememberMeManager();
    org.jsecurity.authc.pam.ModularRealmAuthenticator var36 = new org.jsecurity.authc.pam.ModularRealmAuthenticator();
    var0.setAuthenticator((org.jsecurity.authc.Authenticator)var36);
    org.jsecurity.codec.CodecException var40 = new org.jsecurity.codec.CodecException("dd\uFFFD");
    org.jsecurity.authc.ConcurrentAccessException var41 = new org.jsecurity.authc.ConcurrentAccessException("org.jsecurity.authz.UnauthorizedException: org.jsecurity.session.ExpiredSessionException: ", (java.lang.Throwable)var40);
    org.jsecurity.subject.SimplePrincipalCollection var43 = new org.jsecurity.subject.SimplePrincipalCollection((java.lang.Object)var40, "");
    java.io.InputStream var45 = org.jsecurity.util.ClassUtils.getResourceAsStream("");
    java.lang.Object[] var46 = new java.lang.Object[] { var45};
    java.util.List var47 = org.jsecurity.util.CollectionUtils.asList(var46);
    org.jsecurity.authc.pam.ModularRealmAuthenticator var48 = new org.jsecurity.authc.pam.ModularRealmAuthenticator(var47);
    var43.addAll((java.util.Collection)var47, "\u0000\u0000");
    org.jsecurity.authc.pam.FirstSuccessfulAuthenticationStrategy var51 = new org.jsecurity.authc.pam.FirstSuccessfulAuthenticationStrategy();
    org.jsecurity.authz.UnauthorizedException var53 = new org.jsecurity.authz.UnauthorizedException("org.jsecurity.config.ConfigurationException: dd\uFFFD");
    java.lang.Throwable[] var54 = var53.getSuppressed();
    java.util.List var55 = org.jsecurity.util.CollectionUtils.asList((java.lang.Object[])var54);
    org.jsecurity.authc.UsernamePasswordToken var56 = new org.jsecurity.authc.UsernamePasswordToken();
    java.lang.String var57 = var56.getUsername();
    java.net.InetAddress var58 = var56.getInetAddress();
    org.jsecurity.authc.AuthenticationInfo var59 = var51.beforeAllAttempts((java.util.Collection)var55, (org.jsecurity.authc.AuthenticationToken)var56);
    var0.checkPermissions((org.jsecurity.subject.PrincipalCollection)var43, (java.util.Collection)var55);
    org.jsecurity.realm.text.TextConfigurationRealm var62 = new org.jsecurity.realm.text.TextConfigurationRealm();
    java.io.InputStream var64 = org.jsecurity.util.ClassUtils.getResourceAsStream("");
    java.lang.Object[] var65 = new java.lang.Object[] { var64};
    java.util.List var66 = org.jsecurity.util.CollectionUtils.asList(var65);
    org.jsecurity.authc.pam.ModularRealmAuthenticator var67 = new org.jsecurity.authc.pam.ModularRealmAuthenticator(var66);
    org.jsecurity.subject.SimplePrincipalCollection var69 = new org.jsecurity.subject.SimplePrincipalCollection((java.util.Collection)var66, "org.jsecurity.authz.UnauthorizedException: org.jsecurity.session.ExpiredSessionException: ");
    org.jsecurity.session.UnknownSessionException var74 = new org.jsecurity.session.UnknownSessionException("dd\uFFFD", (java.io.Serializable)100.0f);
    org.jsecurity.session.SessionException var76 = new org.jsecurity.session.SessionException("dd\uFFFD", (java.lang.Throwable)var74, (java.io.Serializable)0);
    org.jsecurity.session.SessionException var77 = new org.jsecurity.session.SessionException("dd\uFFFD", (java.lang.Throwable)var74);
    var69.add((java.lang.Object)var77, "org.jsecurity.config.ConfigurationException: dd\uFFFD");
    var62.onLogout((org.jsecurity.subject.PrincipalCollection)var69);
    org.jsecurity.cache.HashtableCacheManager var81 = new org.jsecurity.cache.HashtableCacheManager();
    org.jsecurity.cache.Cache var83 = var81.getCache("\u0000\u0000");
    var62.setAuthorizationCache(var83);
    org.jsecurity.codec.CodecException var87 = new org.jsecurity.codec.CodecException("dd\uFFFD");
    org.jsecurity.authc.ConcurrentAccessException var88 = new org.jsecurity.authc.ConcurrentAccessException("org.jsecurity.authz.UnauthorizedException: org.jsecurity.session.ExpiredSessionException: ", (java.lang.Throwable)var87);
    org.jsecurity.subject.SimplePrincipalCollection var90 = new org.jsecurity.subject.SimplePrincipalCollection((java.lang.Object)var87, "");
    var62.onLogout((org.jsecurity.subject.PrincipalCollection)var90);
    var62.setRoleDefinitions("org.jsecurity.config.ConfigurationException: dd\uFFFD");
    java.lang.Class var94 = var62.getAuthenticationTokenClass();
    org.jsecurity.session.UnknownSessionException var95 = new org.jsecurity.session.UnknownSessionException("org.jsecurity.realm.text.PropertiesRealm_1154", (java.io.Serializable)var94);
    java.util.Collection var96 = var43.byType(var94);
    java.util.Set var97 = var43.getRealmNames();
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var4);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var10 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var11);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var15);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var22 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var23);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var32);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var33);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var35);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var45);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var46);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var47);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var54);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var55);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var57);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var58);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var59);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var64);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var65);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var66);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var83);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var94);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var96);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var97);

  }

  public void test446() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest7.test446");


    org.jsecurity.realm.activedirectory.ActiveDirectoryRealm var0 = new org.jsecurity.realm.activedirectory.ActiveDirectoryRealm();
    org.jsecurity.authc.credential.Sha256CredentialsMatcher var1 = new org.jsecurity.authc.credential.Sha256CredentialsMatcher();
    var0.setCredentialsMatcher((org.jsecurity.authc.credential.CredentialsMatcher)var1);
    java.lang.String var3 = var0.getAuthorizationCacheName();
    var0.setUrl("hi!");
    org.jsecurity.io.IniResource var6 = new org.jsecurity.io.IniResource();
    java.util.Map var7 = var6.getSections();
    java.util.Map var8 = var6.getSections();
    var0.setGroupRolesMap(var8);
    var0.setName("9f00e408-27bf-467d-a45f-01bb47b51aa6");
    org.jsecurity.authc.UsernamePasswordToken var12 = new org.jsecurity.authc.UsernamePasswordToken();
    java.lang.String var13 = var12.getUsername();
    boolean var14 = var0.supports((org.jsecurity.authc.AuthenticationToken)var12);
    boolean var15 = var12.isRememberMe();
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var3);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var7);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var8);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var13);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var14 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var15 == false);

  }

  public void test447() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest7.test447");


    org.jsecurity.cache.HashtableCache var1 = new org.jsecurity.cache.HashtableCache("\u0000\u0000\u0000");
    org.jsecurity.session.mgt.SimpleSession var2 = new org.jsecurity.session.mgt.SimpleSession();
    var2.touch();
    org.jsecurity.authz.UnauthenticatedException var6 = new org.jsecurity.authz.UnauthenticatedException();
    org.jsecurity.config.UnresolveableReferenceException var7 = new org.jsecurity.config.UnresolveableReferenceException("", (java.lang.Throwable)var6);
    org.jsecurity.cache.CacheException var8 = new org.jsecurity.cache.CacheException("org.jsecurity.config.ConfigurationException: dd\uFFFD", (java.lang.Throwable)var6);
    java.lang.Object var9 = var2.removeAttribute((java.lang.Object)var8);
    org.jsecurity.mgt.DefaultSecurityManager var10 = new org.jsecurity.mgt.DefaultSecurityManager();
    org.jsecurity.authc.pam.AllSuccessfulModularAuthenticationStrategy var11 = new org.jsecurity.authc.pam.AllSuccessfulModularAuthenticationStrategy();
    org.jsecurity.authc.pam.AllSuccessfulModularAuthenticationStrategy var12 = new org.jsecurity.authc.pam.AllSuccessfulModularAuthenticationStrategy();
    char[] var14 = new char[] { };
    org.jsecurity.authc.UsernamePasswordToken var16 = new org.jsecurity.authc.UsernamePasswordToken("hi!", var14, true);
    org.jsecurity.authc.SimpleAccount var17 = new org.jsecurity.authc.SimpleAccount();
    var17.setCredentialsExpired(false);
    boolean var20 = var17.isLocked();
    org.jsecurity.authc.AuthenticationInfo var21 = var12.afterAllAttempts((org.jsecurity.authc.AuthenticationToken)var16, (org.jsecurity.authc.AuthenticationInfo)var17);
    char[] var25 = new char[] { '4', '#'};
    org.jsecurity.authc.UsernamePasswordToken var26 = new org.jsecurity.authc.UsernamePasswordToken("\u0000\u0000", var25);
    org.jsecurity.authc.SimpleAccount var27 = new org.jsecurity.authc.SimpleAccount();
    var27.setCredentialsExpired(false);
    var27.setCredentialsExpired(false);
    boolean var32 = var27.isCredentialsExpired();
    org.jsecurity.authc.AuthenticationInfo var33 = var12.afterAllAttempts((org.jsecurity.authc.AuthenticationToken)var26, (org.jsecurity.authc.AuthenticationInfo)var27);
    org.jsecurity.authz.UnauthenticatedException var37 = new org.jsecurity.authz.UnauthenticatedException();
    org.jsecurity.config.UnresolveableReferenceException var38 = new org.jsecurity.config.UnresolveableReferenceException("", (java.lang.Throwable)var37);
    org.jsecurity.cache.CacheException var39 = new org.jsecurity.cache.CacheException("org.jsecurity.config.ConfigurationException: dd\uFFFD", (java.lang.Throwable)var37);
    org.jsecurity.authc.SimpleAuthenticationInfo var41 = new org.jsecurity.authc.SimpleAuthenticationInfo((java.lang.Object)"org.jsecurity.config.ConfigurationException: dd\uFFFD", (java.lang.Object)var39, "a2b823b1e72eae2b727289df8a00a89df8a0bab6ad8a89c4c5c7a9b62a270000");
    org.jsecurity.subject.PrincipalCollection var42 = var41.getPrincipals();
    org.jsecurity.authc.AuthenticationInfo var43 = var11.afterAllAttempts((org.jsecurity.authc.AuthenticationToken)var26, (org.jsecurity.authc.AuthenticationInfo)var41);
    var10.setModularAuthenticationStrategy((org.jsecurity.authc.pam.ModularAuthenticationStrategy)var11);
    org.jsecurity.subject.RememberMeManager var45 = var10.getRememberMeManager();
    org.jsecurity.authc.pam.ModularRealmAuthenticator var46 = new org.jsecurity.authc.pam.ModularRealmAuthenticator();
    var10.setAuthenticator((org.jsecurity.authc.Authenticator)var46);
    var1.put((java.lang.Object)var2, (java.lang.Object)var46);
    var1.clear();
    java.util.Set var50 = var1.values();
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var9);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var14);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var20 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var21);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var25);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var32 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var33);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var42);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var43);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var45);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var50);

  }

  public void test448() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest7.test448");


    org.jsecurity.authz.UnauthorizedException var3 = new org.jsecurity.authz.UnauthorizedException();
    org.jsecurity.session.SessionException var5 = new org.jsecurity.session.SessionException("", (java.lang.Throwable)var3, (java.io.Serializable)"org.jsecurity.config.ConfigurationException: dd\uFFFD");
    org.jsecurity.authz.UnauthorizedException var6 = new org.jsecurity.authz.UnauthorizedException((java.lang.Throwable)var5);
    org.jsecurity.util.InstantiationException var7 = new org.jsecurity.util.InstantiationException("", (java.lang.Throwable)var6);
    org.jsecurity.authc.UnknownAccountException var8 = new org.jsecurity.authc.UnknownAccountException("3c0f8cd0-07d8-4de6-8030-3e8afad05e07", (java.lang.Throwable)var6);
    org.jsecurity.authz.HostUnauthorizedException var11 = new org.jsecurity.authz.HostUnauthorizedException("hi!");
    java.net.InetAddress var12 = var11.getHostAddress();
    org.jsecurity.authc.LockedAccountException var13 = new org.jsecurity.authc.LockedAccountException("NfxhYN7ItBfRAmDBmprtU73ghfEEPpcDJrHPkZ06wiY=", (java.lang.Throwable)var11);
    org.jsecurity.authc.SimpleAccount var15 = new org.jsecurity.authc.SimpleAccount((java.lang.Object)var8, (java.lang.Object)"NfxhYN7ItBfRAmDBmprtU73ghfEEPpcDJrHPkZ06wiY=", "947c1ad9-ebd5-4704-882a-a14f51bda9a4");
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var12);

  }

  public void test449() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest7.test449");


    org.jsecurity.config.IniConfiguration var0 = new org.jsecurity.config.IniConfiguration();
    var0.init();
    java.lang.String var2 = var0.getConfig();
    var0.setConfig("3008602b-f37d-459d-973e-0453ee1d8c4b");
    var0.init();
    var0.setConfig("orgjsecurityconfigConfigurationExceptionAAA=\r\n");
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var2);

  }

  public void test450() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest7.test450");


    org.jsecurity.realm.jndi.JndiRealmFactory var0 = new org.jsecurity.realm.jndi.JndiRealmFactory();
    org.jsecurity.jndi.JndiTemplate var1 = var0.getJndiTemplate();
    java.util.Properties var2 = var1.getEnvironment();
    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      var1.unbind("org.jsecurity.realm.text.PropertiesRealm_2075");
      fail("Expected exception of type javax.naming.NoInitialContextException");
    } catch (javax.naming.NoInitialContextException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var1);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var2);

  }

  public void test451() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest7.test451");


    org.jsecurity.authz.SimpleAuthorizationInfo var0 = new org.jsecurity.authz.SimpleAuthorizationInfo();
    org.jsecurity.session.UnknownSessionException var5 = new org.jsecurity.session.UnknownSessionException("dd\uFFFD", (java.io.Serializable)100.0f);
    org.jsecurity.subject.SubjectException var6 = new org.jsecurity.subject.SubjectException("dd\uFFFD", (java.lang.Throwable)var5);
    org.jsecurity.io.SerializationException var7 = new org.jsecurity.io.SerializationException("", (java.lang.Throwable)var6);
    java.lang.Throwable[] var8 = var6.getSuppressed();
    java.util.Set var9 = org.jsecurity.util.CollectionUtils.asSet((java.lang.Object[])var8);
    var0.setStringPermissions(var9);
    java.util.Set var11 = var0.getRoles();
    org.jsecurity.authz.SimpleAuthorizationInfo var12 = new org.jsecurity.authz.SimpleAuthorizationInfo();
    var12.addRole("a2b823b1e72eae2b727289df8a00a89df8a0bab6ad8a89c4c5c7a9b62a270000");
    org.jsecurity.session.UnknownSessionException var19 = new org.jsecurity.session.UnknownSessionException("dd\uFFFD", (java.io.Serializable)100.0f);
    org.jsecurity.subject.SubjectException var20 = new org.jsecurity.subject.SubjectException("dd\uFFFD", (java.lang.Throwable)var19);
    org.jsecurity.io.SerializationException var21 = new org.jsecurity.io.SerializationException("", (java.lang.Throwable)var20);
    java.lang.Throwable[] var22 = var20.getSuppressed();
    java.util.Set var23 = org.jsecurity.util.CollectionUtils.asSet((java.lang.Object[])var22);
    var12.addRoles((java.util.Collection)var23);
    var0.setRoles(var23);
    org.jsecurity.authz.SimpleAuthorizationInfo var26 = new org.jsecurity.authz.SimpleAuthorizationInfo();
    org.jsecurity.session.UnknownSessionException var31 = new org.jsecurity.session.UnknownSessionException("dd\uFFFD", (java.io.Serializable)100.0f);
    org.jsecurity.subject.SubjectException var32 = new org.jsecurity.subject.SubjectException("dd\uFFFD", (java.lang.Throwable)var31);
    org.jsecurity.io.SerializationException var33 = new org.jsecurity.io.SerializationException("", (java.lang.Throwable)var32);
    java.lang.Throwable[] var34 = var32.getSuppressed();
    java.util.Set var35 = org.jsecurity.util.CollectionUtils.asSet((java.lang.Object[])var34);
    var26.setStringPermissions(var35);
    java.util.Set var37 = var26.getRoles();
    org.jsecurity.authz.SimpleAuthorizationInfo var38 = new org.jsecurity.authz.SimpleAuthorizationInfo();
    var38.addRole("a2b823b1e72eae2b727289df8a00a89df8a0bab6ad8a89c4c5c7a9b62a270000");
    org.jsecurity.session.UnknownSessionException var45 = new org.jsecurity.session.UnknownSessionException("dd\uFFFD", (java.io.Serializable)100.0f);
    org.jsecurity.subject.SubjectException var46 = new org.jsecurity.subject.SubjectException("dd\uFFFD", (java.lang.Throwable)var45);
    org.jsecurity.io.SerializationException var47 = new org.jsecurity.io.SerializationException("", (java.lang.Throwable)var46);
    java.lang.Throwable[] var48 = var46.getSuppressed();
    java.util.Set var49 = org.jsecurity.util.CollectionUtils.asSet((java.lang.Object[])var48);
    var38.addRoles((java.util.Collection)var49);
    var26.setRoles(var49);
    var0.setRoles(var49);
    org.jsecurity.authz.ModularRealmAuthorizer var53 = new org.jsecurity.authz.ModularRealmAuthorizer((java.util.Collection)var49);
    java.util.Collection var54 = var53.getRealms();
    java.util.Collection var55 = var53.getRealms();
    org.jsecurity.subject.SimplePrincipalCollection var57 = new org.jsecurity.subject.SimplePrincipalCollection((java.lang.Object)var53, "c7738557-3464-414b-b0bf-21af1f5a66fc");
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var8);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var9);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var11);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var22);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var23);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var34);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var35);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var37);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var48);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var49);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var54);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var55);

  }

  public void test452() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest7.test452");


    org.jsecurity.realm.text.PropertiesRealm var0 = new org.jsecurity.realm.text.PropertiesRealm();
    var0.setRoleDefinitions("5dd0c65d-1422-49c2-becb-9e8dca619ab3");
    var0.setUseXmlFormat(true);
    var0.setResourcePath("b6a77f71-73c4-466a-903e-72fc5968f9ac");
    java.lang.String var7 = var0.getUserDefinitions();
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var7);

  }

  public void test453() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest7.test453");


    org.jsecurity.session.UnknownSessionException var3 = new org.jsecurity.session.UnknownSessionException("dd\uFFFD", (java.io.Serializable)100.0f);
    org.jsecurity.session.SessionException var5 = new org.jsecurity.session.SessionException("dd\uFFFD", (java.lang.Throwable)var3, (java.io.Serializable)0);
    org.jsecurity.authc.SimpleAuthenticationInfo var8 = new org.jsecurity.authc.SimpleAuthenticationInfo((java.lang.Object)0, (java.lang.Object)10, "hi!");
    org.jsecurity.codec.CodecException var11 = new org.jsecurity.codec.CodecException("dd\uFFFD");
    org.jsecurity.authc.ConcurrentAccessException var12 = new org.jsecurity.authc.ConcurrentAccessException("org.jsecurity.authz.UnauthorizedException: org.jsecurity.session.ExpiredSessionException: ", (java.lang.Throwable)var11);
    org.jsecurity.subject.SimplePrincipalCollection var14 = new org.jsecurity.subject.SimplePrincipalCollection((java.lang.Object)var11, "");
    org.jsecurity.authc.pam.FirstSuccessfulAuthenticationStrategy var15 = new org.jsecurity.authc.pam.FirstSuccessfulAuthenticationStrategy();
    org.jsecurity.authz.UnauthorizedException var17 = new org.jsecurity.authz.UnauthorizedException("org.jsecurity.config.ConfigurationException: dd\uFFFD");
    java.lang.Throwable[] var18 = var17.getSuppressed();
    java.util.List var19 = org.jsecurity.util.CollectionUtils.asList((java.lang.Object[])var18);
    org.jsecurity.authc.UsernamePasswordToken var20 = new org.jsecurity.authc.UsernamePasswordToken();
    java.lang.String var21 = var20.getUsername();
    java.net.InetAddress var22 = var20.getInetAddress();
    org.jsecurity.authc.AuthenticationInfo var23 = var15.beforeAllAttempts((java.util.Collection)var19, (org.jsecurity.authc.AuthenticationToken)var20);
    org.jsecurity.session.UnknownSessionException var28 = new org.jsecurity.session.UnknownSessionException("dd\uFFFD", (java.io.Serializable)100.0f);
    org.jsecurity.subject.SubjectException var29 = new org.jsecurity.subject.SubjectException("dd\uFFFD", (java.lang.Throwable)var28);
    org.jsecurity.io.SerializationException var30 = new org.jsecurity.io.SerializationException("", (java.lang.Throwable)var29);
    java.lang.Throwable[] var31 = var29.getSuppressed();
    java.util.Set var32 = org.jsecurity.util.CollectionUtils.asSet((java.lang.Object[])var31);
    org.jsecurity.authc.SimpleAccount var33 = new org.jsecurity.authc.SimpleAccount((org.jsecurity.subject.PrincipalCollection)var14, (java.lang.Object)var19, var32);
    var8.setPrincipals((org.jsecurity.subject.PrincipalCollection)var14);
    java.util.Collection var36 = var14.fromRealm("org.jsecurity.subject.SubjectException: dd\uFFFD");
    var14.clear();
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var18);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var19);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var21);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var22);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var23);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var31);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var32);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var36);

  }

  public void test454() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest7.test454");


    org.jsecurity.realm.activedirectory.ActiveDirectoryRealm var0 = new org.jsecurity.realm.activedirectory.ActiveDirectoryRealm();
    var0.init();
    var0.setSystemPassword("dd\uFFFD");
    org.jsecurity.cache.Cache var4 = var0.getAuthorizationCache();
    org.jsecurity.mgt.DefaultSecurityManager var5 = new org.jsecurity.mgt.DefaultSecurityManager((org.jsecurity.realm.Realm)var0);
    org.jsecurity.mgt.DefaultSecurityManager var6 = new org.jsecurity.mgt.DefaultSecurityManager((org.jsecurity.realm.Realm)var0);
    var0.setSystemPassword("org.jsecurity.realm.text.TextConfigurationRealm_2587");
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var4);

  }

  public void test455() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest7.test455");


    org.jsecurity.realm.activedirectory.ActiveDirectoryRealm var0 = new org.jsecurity.realm.activedirectory.ActiveDirectoryRealm();
    var0.init();
    var0.setSystemPassword("dd\uFFFD");
    org.jsecurity.authc.credential.Sha512CredentialsMatcher var4 = new org.jsecurity.authc.credential.Sha512CredentialsMatcher();
    var0.setCredentialsMatcher((org.jsecurity.authc.credential.CredentialsMatcher)var4);
    var4.setHashSalted(false);
    boolean var8 = var4.isStoredCredentialsHexEncoded();
    boolean var9 = var4.isStoredCredentialsHexEncoded();
    boolean var10 = var4.isStoredCredentialsHexEncoded();
    var4.setStoredCredentialsHexEncoded(false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var8 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var9 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var10 == true);

  }

  public void test456() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest7.test456");


    org.jsecurity.mgt.DefaultSecurityManager var0 = new org.jsecurity.mgt.DefaultSecurityManager();
    org.jsecurity.authz.permission.WildcardPermissionResolver var1 = new org.jsecurity.authz.permission.WildcardPermissionResolver();
    var0.setPermissionResolver((org.jsecurity.authz.permission.PermissionResolver)var1);
    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      var0.setRememberMeCipherKeyHex("7edc3e5f-37f7-4a22-9779-4609545bccd8");
      fail("Expected exception of type java.lang.IllegalStateException");
    } catch (java.lang.IllegalStateException e) {
      // Expected exception.
    }

  }

  public void test457() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest7.test457");


    org.jsecurity.crypto.hash.Md2Hash var1 = org.jsecurity.crypto.hash.Md2Hash.fromBase64String("a2b823b1e72eae2b727289df8a00a89df8a0bab6ad8a89c4c5c7a9b62a270000");
    org.jsecurity.authc.credential.Md2CredentialsMatcher var2 = new org.jsecurity.authc.credential.Md2CredentialsMatcher();
    org.jsecurity.authz.SimpleAuthorizingAccount var4 = new org.jsecurity.authz.SimpleAuthorizingAccount((java.lang.Object)"a2b823b1e72eae2b727289df8a00a89df8a0bab6ad8a89c4c5c7a9b62a270000", (java.lang.Object)var2, "");
    org.jsecurity.authz.SimpleAuthorizationInfo var5 = new org.jsecurity.authz.SimpleAuthorizationInfo();
    java.util.Set var6 = var5.getStringPermissions();
    org.jsecurity.authz.SimpleAuthorizationInfo var8 = new org.jsecurity.authz.SimpleAuthorizationInfo();
    org.jsecurity.session.UnknownSessionException var13 = new org.jsecurity.session.UnknownSessionException("dd\uFFFD", (java.io.Serializable)100.0f);
    org.jsecurity.subject.SubjectException var14 = new org.jsecurity.subject.SubjectException("dd\uFFFD", (java.lang.Throwable)var13);
    org.jsecurity.io.SerializationException var15 = new org.jsecurity.io.SerializationException("", (java.lang.Throwable)var14);
    java.lang.Throwable[] var16 = var14.getSuppressed();
    java.util.Set var17 = org.jsecurity.util.CollectionUtils.asSet((java.lang.Object[])var16);
    var8.setStringPermissions(var17);
    java.util.Set var19 = var8.getRoles();
    org.jsecurity.authz.SimpleAuthorizationInfo var20 = new org.jsecurity.authz.SimpleAuthorizationInfo();
    var20.addRole("a2b823b1e72eae2b727289df8a00a89df8a0bab6ad8a89c4c5c7a9b62a270000");
    org.jsecurity.session.UnknownSessionException var27 = new org.jsecurity.session.UnknownSessionException("dd\uFFFD", (java.io.Serializable)100.0f);
    org.jsecurity.subject.SubjectException var28 = new org.jsecurity.subject.SubjectException("dd\uFFFD", (java.lang.Throwable)var27);
    org.jsecurity.io.SerializationException var29 = new org.jsecurity.io.SerializationException("", (java.lang.Throwable)var28);
    java.lang.Throwable[] var30 = var28.getSuppressed();
    java.util.Set var31 = org.jsecurity.util.CollectionUtils.asSet((java.lang.Object[])var30);
    var20.addRoles((java.util.Collection)var31);
    var8.setRoles(var31);
    org.jsecurity.authz.SimpleRole var34 = new org.jsecurity.authz.SimpleRole("org.jsecurity.authz.UnauthorizedException: org.jsecurity.session.ExpiredSessionException: ", var31);
    var5.addStringPermissions((java.util.Collection)var31);
    boolean var36 = var4.isPermittedAll((java.util.Collection)var31);
    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      var4.checkRole("c07dcc1f-69d1-439f-8202-c1ed75146e6e");
      fail("Expected exception of type org.jsecurity.authz.UnauthorizedException");
    } catch (org.jsecurity.authz.UnauthorizedException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var1);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var6);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var16);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var17);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var19);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var30);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var31);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var36 == true);

  }

  public void test458() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest7.test458");


    org.jsecurity.session.mgt.eis.MemorySessionDAO var0 = new org.jsecurity.session.mgt.eis.MemorySessionDAO();
    org.jsecurity.cache.Cache var1 = var0.getActiveSessionsCache();
    org.jsecurity.cache.CacheManager var2 = var0.getCacheManager();
    org.jsecurity.cache.HashtableCacheManager var3 = new org.jsecurity.cache.HashtableCacheManager();
    org.jsecurity.cache.Cache var5 = var3.getCache("\u0000\u0000");
    var0.setActiveSessionsCache(var5);
    java.io.InputStream var8 = org.jsecurity.util.ClassUtils.getResourceAsStream("");
    java.lang.Object[] var9 = new java.lang.Object[] { var8};
    java.util.List var10 = org.jsecurity.util.CollectionUtils.asList(var9);
    org.jsecurity.authc.pam.ModularRealmAuthenticator var11 = new org.jsecurity.authc.pam.ModularRealmAuthenticator(var10);
    org.jsecurity.authc.pam.AllSuccessfulModularAuthenticationStrategy var12 = new org.jsecurity.authc.pam.AllSuccessfulModularAuthenticationStrategy();
    var11.setModularAuthenticationStrategy((org.jsecurity.authc.pam.ModularAuthenticationStrategy)var12);
    org.jsecurity.authz.SimpleAuthorizationInfo var14 = new org.jsecurity.authz.SimpleAuthorizationInfo();
    var14.addStringPermission("hi!");
    java.io.InputStream var18 = org.jsecurity.util.ClassUtils.getResourceAsStream("");
    java.lang.Object[] var19 = new java.lang.Object[] { var18};
    java.util.List var20 = org.jsecurity.util.CollectionUtils.asList(var19);
    var14.addRoles((java.util.Collection)var20);
    var11.setAuthenticationListeners((java.util.Collection)var20);
    org.jsecurity.realm.activedirectory.ActiveDirectoryRealm var23 = new org.jsecurity.realm.activedirectory.ActiveDirectoryRealm();
    var23.setPrincipalSuffix("");
    var11.setRealm((org.jsecurity.realm.Realm)var23);
    org.jsecurity.cache.HashtableCacheManager var27 = new org.jsecurity.cache.HashtableCacheManager();
    org.jsecurity.cache.Cache var29 = var27.getCache("\u0000\u0000");
    var23.setAuthorizationCache(var29);
    var0.setActiveSessionsCache(var29);
    org.jsecurity.session.mgt.SimpleSession var32 = new org.jsecurity.session.mgt.SimpleSession();
    java.io.Serializable var33 = var0.create((org.jsecurity.session.Session)var32);
    org.jsecurity.cache.HashtableCacheManager var34 = new org.jsecurity.cache.HashtableCacheManager();
    org.jsecurity.cache.Cache var36 = var34.getCache("\u0000\u0000");
    org.jsecurity.cache.Cache var38 = var34.getCache("ZGT/");
    var0.setCacheManager((org.jsecurity.cache.CacheManager)var34);
    org.jsecurity.cache.ehcache.EhCacheManager var40 = new org.jsecurity.cache.ehcache.EhCacheManager();
    net.sf.ehcache.CacheManager var41 = var40.getCacheManager();
    var40.setCacheManagerConfigFile("org.jsecurity.authz.UnauthorizedException: org.jsecurity.session.ExpiredSessionException: ");
    var0.setCacheManager((org.jsecurity.cache.CacheManager)var40);
    java.lang.String var45 = var40.getCacheManagerConfigFile();
    java.lang.String var46 = var40.getCacheManagerConfigFile();
    net.sf.ehcache.CacheManager var47 = var40.getCacheManager();
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var1);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var2);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var5);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var8);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var9);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var10);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var18);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var19);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var20);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var29);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var33 + "' != '" + "f5eeb321-38f3-4da7-8962-20db4ad52587"+ "'", var33.equals("f5eeb321-38f3-4da7-8962-20db4ad52587"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var36);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var38);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var41);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var45 + "' != '" + "org.jsecurity.authz.UnauthorizedException: org.jsecurity.session.ExpiredSessionException: "+ "'", var45.equals("org.jsecurity.authz.UnauthorizedException: org.jsecurity.session.ExpiredSessionException: "));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var46 + "' != '" + "org.jsecurity.authz.UnauthorizedException: org.jsecurity.session.ExpiredSessionException: "+ "'", var46.equals("org.jsecurity.authz.UnauthorizedException: org.jsecurity.session.ExpiredSessionException: "));
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var47);

  }

  public void test459() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest7.test459");


    org.jsecurity.authc.credential.AllowAllCredentialsMatcher var0 = new org.jsecurity.authc.credential.AllowAllCredentialsMatcher();
    org.jsecurity.authc.UsernamePasswordToken var1 = new org.jsecurity.authc.UsernamePasswordToken();
    org.jsecurity.codec.CodecException var4 = new org.jsecurity.codec.CodecException("dd\uFFFD");
    org.jsecurity.authc.ConcurrentAccessException var5 = new org.jsecurity.authc.ConcurrentAccessException("org.jsecurity.authz.UnauthorizedException: org.jsecurity.session.ExpiredSessionException: ", (java.lang.Throwable)var4);
    org.jsecurity.subject.SimplePrincipalCollection var7 = new org.jsecurity.subject.SimplePrincipalCollection((java.lang.Object)var4, "");
    org.jsecurity.authc.pam.FirstSuccessfulAuthenticationStrategy var8 = new org.jsecurity.authc.pam.FirstSuccessfulAuthenticationStrategy();
    org.jsecurity.authz.UnauthorizedException var10 = new org.jsecurity.authz.UnauthorizedException("org.jsecurity.config.ConfigurationException: dd\uFFFD");
    java.lang.Throwable[] var11 = var10.getSuppressed();
    java.util.List var12 = org.jsecurity.util.CollectionUtils.asList((java.lang.Object[])var11);
    org.jsecurity.authc.UsernamePasswordToken var13 = new org.jsecurity.authc.UsernamePasswordToken();
    java.lang.String var14 = var13.getUsername();
    java.net.InetAddress var15 = var13.getInetAddress();
    org.jsecurity.authc.AuthenticationInfo var16 = var8.beforeAllAttempts((java.util.Collection)var12, (org.jsecurity.authc.AuthenticationToken)var13);
    org.jsecurity.session.UnknownSessionException var21 = new org.jsecurity.session.UnknownSessionException("dd\uFFFD", (java.io.Serializable)100.0f);
    org.jsecurity.subject.SubjectException var22 = new org.jsecurity.subject.SubjectException("dd\uFFFD", (java.lang.Throwable)var21);
    org.jsecurity.io.SerializationException var23 = new org.jsecurity.io.SerializationException("", (java.lang.Throwable)var22);
    java.lang.Throwable[] var24 = var22.getSuppressed();
    java.util.Set var25 = org.jsecurity.util.CollectionUtils.asSet((java.lang.Object[])var24);
    org.jsecurity.authc.SimpleAccount var26 = new org.jsecurity.authc.SimpleAccount((org.jsecurity.subject.PrincipalCollection)var7, (java.lang.Object)var12, var25);
    var26.addStringPermission("org.jsecurity.config.ConfigurationException: dd\uFFFD");
    org.jsecurity.authz.SimpleRole var29 = new org.jsecurity.authz.SimpleRole();
    org.jsecurity.authz.permission.WildcardPermission var32 = new org.jsecurity.authz.permission.WildcardPermission("hi!", false);
    boolean var33 = var29.isPermitted((org.jsecurity.authz.Permission)var32);
    var26.addObjectPermission((org.jsecurity.authz.Permission)var32);
    boolean var35 = var0.doCredentialsMatch((org.jsecurity.authc.AuthenticationToken)var1, (org.jsecurity.authc.AuthenticationInfo)var26);
    boolean var36 = var26.isCredentialsExpired();
    org.jsecurity.authz.permission.WildcardPermission var38 = new org.jsecurity.authz.permission.WildcardPermission("63bbad34-48e1-408f-9551-a8a0ca6e6734");
    var26.addObjectPermission((org.jsecurity.authz.Permission)var38);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var11);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var12);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var14);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var15);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var16);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var24);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var25);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var33 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var35 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var36 == false);

  }

  public void test460() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest7.test460");


    org.jsecurity.mgt.DefaultSecurityManager var0 = new org.jsecurity.mgt.DefaultSecurityManager();
    org.jsecurity.authc.pam.AllSuccessfulModularAuthenticationStrategy var1 = new org.jsecurity.authc.pam.AllSuccessfulModularAuthenticationStrategy();
    org.jsecurity.authc.pam.AllSuccessfulModularAuthenticationStrategy var2 = new org.jsecurity.authc.pam.AllSuccessfulModularAuthenticationStrategy();
    char[] var4 = new char[] { };
    org.jsecurity.authc.UsernamePasswordToken var6 = new org.jsecurity.authc.UsernamePasswordToken("hi!", var4, true);
    org.jsecurity.authc.SimpleAccount var7 = new org.jsecurity.authc.SimpleAccount();
    var7.setCredentialsExpired(false);
    boolean var10 = var7.isLocked();
    org.jsecurity.authc.AuthenticationInfo var11 = var2.afterAllAttempts((org.jsecurity.authc.AuthenticationToken)var6, (org.jsecurity.authc.AuthenticationInfo)var7);
    char[] var15 = new char[] { '4', '#'};
    org.jsecurity.authc.UsernamePasswordToken var16 = new org.jsecurity.authc.UsernamePasswordToken("\u0000\u0000", var15);
    org.jsecurity.authc.SimpleAccount var17 = new org.jsecurity.authc.SimpleAccount();
    var17.setCredentialsExpired(false);
    var17.setCredentialsExpired(false);
    boolean var22 = var17.isCredentialsExpired();
    org.jsecurity.authc.AuthenticationInfo var23 = var2.afterAllAttempts((org.jsecurity.authc.AuthenticationToken)var16, (org.jsecurity.authc.AuthenticationInfo)var17);
    org.jsecurity.authz.UnauthenticatedException var27 = new org.jsecurity.authz.UnauthenticatedException();
    org.jsecurity.config.UnresolveableReferenceException var28 = new org.jsecurity.config.UnresolveableReferenceException("", (java.lang.Throwable)var27);
    org.jsecurity.cache.CacheException var29 = new org.jsecurity.cache.CacheException("org.jsecurity.config.ConfigurationException: dd\uFFFD", (java.lang.Throwable)var27);
    org.jsecurity.authc.SimpleAuthenticationInfo var31 = new org.jsecurity.authc.SimpleAuthenticationInfo((java.lang.Object)"org.jsecurity.config.ConfigurationException: dd\uFFFD", (java.lang.Object)var29, "a2b823b1e72eae2b727289df8a00a89df8a0bab6ad8a89c4c5c7a9b62a270000");
    org.jsecurity.subject.PrincipalCollection var32 = var31.getPrincipals();
    org.jsecurity.authc.AuthenticationInfo var33 = var1.afterAllAttempts((org.jsecurity.authc.AuthenticationToken)var16, (org.jsecurity.authc.AuthenticationInfo)var31);
    var0.setModularAuthenticationStrategy((org.jsecurity.authc.pam.ModularAuthenticationStrategy)var1);
    org.jsecurity.subject.RememberMeManager var35 = var0.getRememberMeManager();
    org.jsecurity.authc.pam.ModularRealmAuthenticator var36 = new org.jsecurity.authc.pam.ModularRealmAuthenticator();
    var0.setAuthenticator((org.jsecurity.authc.Authenticator)var36);
    org.jsecurity.authz.Authorizer var38 = var0.getAuthorizer();
    org.jsecurity.realm.activedirectory.ActiveDirectoryRealm var39 = new org.jsecurity.realm.activedirectory.ActiveDirectoryRealm();
    org.jsecurity.authc.credential.Sha256CredentialsMatcher var40 = new org.jsecurity.authc.credential.Sha256CredentialsMatcher();
    var39.setCredentialsMatcher((org.jsecurity.authc.credential.CredentialsMatcher)var40);
    java.lang.String var42 = var39.getAuthorizationCacheName();
    var39.setPrincipalSuffix("org.jsecurity.config.ConfigurationException: dd\uFFFD");
    org.jsecurity.realm.text.TextConfigurationRealm var45 = new org.jsecurity.realm.text.TextConfigurationRealm();
    java.io.InputStream var47 = org.jsecurity.util.ClassUtils.getResourceAsStream("");
    java.lang.Object[] var48 = new java.lang.Object[] { var47};
    java.util.List var49 = org.jsecurity.util.CollectionUtils.asList(var48);
    org.jsecurity.authc.pam.ModularRealmAuthenticator var50 = new org.jsecurity.authc.pam.ModularRealmAuthenticator(var49);
    org.jsecurity.subject.SimplePrincipalCollection var52 = new org.jsecurity.subject.SimplePrincipalCollection((java.util.Collection)var49, "org.jsecurity.authz.UnauthorizedException: org.jsecurity.session.ExpiredSessionException: ");
    org.jsecurity.session.UnknownSessionException var57 = new org.jsecurity.session.UnknownSessionException("dd\uFFFD", (java.io.Serializable)100.0f);
    org.jsecurity.session.SessionException var59 = new org.jsecurity.session.SessionException("dd\uFFFD", (java.lang.Throwable)var57, (java.io.Serializable)0);
    org.jsecurity.session.SessionException var60 = new org.jsecurity.session.SessionException("dd\uFFFD", (java.lang.Throwable)var57);
    var52.add((java.lang.Object)var60, "org.jsecurity.config.ConfigurationException: dd\uFFFD");
    var45.onLogout((org.jsecurity.subject.PrincipalCollection)var52);
    var39.onLogout((org.jsecurity.subject.PrincipalCollection)var52);
    org.jsecurity.realm.SimpleAccountRealm var66 = new org.jsecurity.realm.SimpleAccountRealm("hi!");
    java.lang.Class var67 = var66.getAuthenticationTokenClass();
    java.util.Collection var68 = org.jsecurity.util.CollectionUtils.emptyCollection(var67);
    java.util.Collection var69 = var52.byType(var67);
    var0.setAuthenticationListeners(var69);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var4);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var10 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var11);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var15);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var22 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var23);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var32);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var33);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var35);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var38);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var42);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var47);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var48);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var49);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var67);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var68);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var69);

  }

  public void test461() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest7.test461");


    org.jsecurity.crypto.hash.Md2Hash var1 = org.jsecurity.crypto.hash.Md2Hash.fromBase64String("a2b823b1e72eae2b727289df8a00a89df8a0bab6ad8a89c4c5c7a9b62a270000");
    org.jsecurity.authc.credential.Md2CredentialsMatcher var2 = new org.jsecurity.authc.credential.Md2CredentialsMatcher();
    org.jsecurity.authz.SimpleAuthorizingAccount var4 = new org.jsecurity.authz.SimpleAuthorizingAccount((java.lang.Object)"a2b823b1e72eae2b727289df8a00a89df8a0bab6ad8a89c4c5c7a9b62a270000", (java.lang.Object)var2, "");
    var4.addStringPermission("hi!");
    org.jsecurity.session.UnknownSessionException var11 = new org.jsecurity.session.UnknownSessionException("dd\uFFFD", (java.io.Serializable)100.0f);
    org.jsecurity.subject.SubjectException var12 = new org.jsecurity.subject.SubjectException("dd\uFFFD", (java.lang.Throwable)var11);
    org.jsecurity.io.SerializationException var13 = new org.jsecurity.io.SerializationException("", (java.lang.Throwable)var12);
    java.lang.Throwable[] var14 = var12.getSuppressed();
    java.lang.Throwable[] var15 = var12.getSuppressed();
    org.jsecurity.authz.SimpleAuthorizationInfo var18 = new org.jsecurity.authz.SimpleAuthorizationInfo();
    var18.addRole("a2b823b1e72eae2b727289df8a00a89df8a0bab6ad8a89c4c5c7a9b62a270000");
    org.jsecurity.session.UnknownSessionException var25 = new org.jsecurity.session.UnknownSessionException("dd\uFFFD", (java.io.Serializable)100.0f);
    org.jsecurity.subject.SubjectException var26 = new org.jsecurity.subject.SubjectException("dd\uFFFD", (java.lang.Throwable)var25);
    org.jsecurity.io.SerializationException var27 = new org.jsecurity.io.SerializationException("", (java.lang.Throwable)var26);
    java.lang.Throwable[] var28 = var26.getSuppressed();
    java.util.Set var29 = org.jsecurity.util.CollectionUtils.asSet((java.lang.Object[])var28);
    var18.addRoles((java.util.Collection)var29);
    java.io.InputStream var32 = org.jsecurity.util.ClassUtils.getResourceAsStream("");
    java.lang.Object[] var33 = new java.lang.Object[] { var32};
    java.util.List var34 = org.jsecurity.util.CollectionUtils.asList(var33);
    org.jsecurity.authc.pam.ModularRealmAuthenticator var35 = new org.jsecurity.authc.pam.ModularRealmAuthenticator(var34);
    org.jsecurity.subject.SimplePrincipalCollection var37 = new org.jsecurity.subject.SimplePrincipalCollection((java.util.Collection)var34, "org.jsecurity.authz.UnauthorizedException: org.jsecurity.session.ExpiredSessionException: ");
    org.jsecurity.session.UnknownSessionException var42 = new org.jsecurity.session.UnknownSessionException("dd\uFFFD", (java.io.Serializable)100.0f);
    org.jsecurity.session.SessionException var44 = new org.jsecurity.session.SessionException("dd\uFFFD", (java.lang.Throwable)var42, (java.io.Serializable)0);
    org.jsecurity.session.SessionException var45 = new org.jsecurity.session.SessionException("dd\uFFFD", (java.lang.Throwable)var42);
    var37.add((java.lang.Object)var45, "org.jsecurity.config.ConfigurationException: dd\uFFFD");
    java.util.Set var48 = var37.asSet();
    org.jsecurity.authz.SimpleAuthorizingAccount var49 = new org.jsecurity.authz.SimpleAuthorizingAccount((java.lang.Object)var15, (java.lang.Object)"\u0000\u0000\u0000", "\u0000\u0000\u0000", var29, var48);
    org.jsecurity.authz.SimpleRole var50 = new org.jsecurity.authz.SimpleRole();
    org.jsecurity.authz.SimpleAuthorizationInfo var51 = new org.jsecurity.authz.SimpleAuthorizationInfo();
    var51.addRole("a2b823b1e72eae2b727289df8a00a89df8a0bab6ad8a89c4c5c7a9b62a270000");
    org.jsecurity.session.UnknownSessionException var58 = new org.jsecurity.session.UnknownSessionException("dd\uFFFD", (java.io.Serializable)100.0f);
    org.jsecurity.subject.SubjectException var59 = new org.jsecurity.subject.SubjectException("dd\uFFFD", (java.lang.Throwable)var58);
    org.jsecurity.io.SerializationException var60 = new org.jsecurity.io.SerializationException("", (java.lang.Throwable)var59);
    java.lang.Throwable[] var61 = var59.getSuppressed();
    java.util.Set var62 = org.jsecurity.util.CollectionUtils.asSet((java.lang.Object[])var61);
    var51.addRoles((java.util.Collection)var62);
    var50.addAll((java.util.Collection)var62);
    var49.addObjectPermissions((java.util.Collection)var62);
    var49.addRole("6f8b35fd-0848-49a4-9560-659760616ad8");
    var4.merge((org.jsecurity.authc.Account)var49);
    java.util.Collection var69 = var4.getStringPermissions();
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var1);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var14);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var15);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var28);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var29);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var32);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var33);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var34);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var48);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var61);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var62);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var69);

  }

  public void test462() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest7.test462");


    org.jsecurity.crypto.hash.Sha256Hash var1 = org.jsecurity.crypto.hash.Sha256Hash.fromBase64String("7edc3e5f-37f7-4a22-9779-4609545bccd8");
    java.lang.String var2 = var1.toBase64();
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var2 + "' != '" + "7edc3e5f37f74a2297794609545bccd8"+ "'", var2.equals("7edc3e5f37f74a2297794609545bccd8"));

  }

  public void test463() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest7.test463");


    org.jsecurity.session.mgt.eis.MemorySessionDAO var0 = new org.jsecurity.session.mgt.eis.MemorySessionDAO();
    org.jsecurity.cache.Cache var1 = var0.getActiveSessionsCache();
    org.jsecurity.cache.CacheManager var2 = var0.getCacheManager();
    org.jsecurity.cache.HashtableCacheManager var3 = new org.jsecurity.cache.HashtableCacheManager();
    org.jsecurity.cache.Cache var5 = var3.getCache("\u0000\u0000");
    var0.setActiveSessionsCache(var5);
    java.io.InputStream var8 = org.jsecurity.util.ClassUtils.getResourceAsStream("");
    java.lang.Object[] var9 = new java.lang.Object[] { var8};
    java.util.List var10 = org.jsecurity.util.CollectionUtils.asList(var9);
    org.jsecurity.authc.pam.ModularRealmAuthenticator var11 = new org.jsecurity.authc.pam.ModularRealmAuthenticator(var10);
    org.jsecurity.authc.pam.AllSuccessfulModularAuthenticationStrategy var12 = new org.jsecurity.authc.pam.AllSuccessfulModularAuthenticationStrategy();
    var11.setModularAuthenticationStrategy((org.jsecurity.authc.pam.ModularAuthenticationStrategy)var12);
    org.jsecurity.authz.SimpleAuthorizationInfo var14 = new org.jsecurity.authz.SimpleAuthorizationInfo();
    var14.addStringPermission("hi!");
    java.io.InputStream var18 = org.jsecurity.util.ClassUtils.getResourceAsStream("");
    java.lang.Object[] var19 = new java.lang.Object[] { var18};
    java.util.List var20 = org.jsecurity.util.CollectionUtils.asList(var19);
    var14.addRoles((java.util.Collection)var20);
    var11.setAuthenticationListeners((java.util.Collection)var20);
    org.jsecurity.realm.activedirectory.ActiveDirectoryRealm var23 = new org.jsecurity.realm.activedirectory.ActiveDirectoryRealm();
    var23.setPrincipalSuffix("");
    var11.setRealm((org.jsecurity.realm.Realm)var23);
    org.jsecurity.cache.HashtableCacheManager var27 = new org.jsecurity.cache.HashtableCacheManager();
    org.jsecurity.cache.Cache var29 = var27.getCache("\u0000\u0000");
    var23.setAuthorizationCache(var29);
    var0.setActiveSessionsCache(var29);
    org.jsecurity.session.mgt.SimpleSession var32 = new org.jsecurity.session.mgt.SimpleSession();
    java.io.Serializable var33 = var0.create((org.jsecurity.session.Session)var32);
    org.jsecurity.session.mgt.SimpleSession var34 = new org.jsecurity.session.mgt.SimpleSession();
    var34.touch();
    var34.validate();
    org.jsecurity.session.mgt.SimpleSession var37 = new org.jsecurity.session.mgt.SimpleSession();
    var37.setTimeout((-1L));
    org.jsecurity.session.mgt.SimpleSession var40 = new org.jsecurity.session.mgt.SimpleSession();
    java.util.Date var41 = var40.getLastAccessTime();
    var37.setLastAccessTime(var41);
    org.jsecurity.session.mgt.SimpleSession var43 = new org.jsecurity.session.mgt.SimpleSession();
    java.util.Date var44 = var43.getLastAccessTime();
    var37.setStopTimestamp(var44);
    var34.setLastAccessTime(var44);
    var32.setLastAccessTime(var44);
    org.jsecurity.session.mgt.ImmutableProxiedSession var48 = new org.jsecurity.session.mgt.ImmutableProxiedSession((org.jsecurity.session.Session)var32);
    org.jsecurity.session.ProxiedSession var49 = new org.jsecurity.session.ProxiedSession((org.jsecurity.session.Session)var32);
    org.jsecurity.realm.jdbc.JdbcRealm var50 = new org.jsecurity.realm.jdbc.JdbcRealm();
    var50.setPermissionsQuery("org.jsecurity.realm.text.TextConfigurationRealm_445");
    var50.setUserRolesQuery("6464ff");
    org.jsecurity.crypto.BlowfishCipher var55 = new org.jsecurity.crypto.BlowfishCipher();
    java.security.Key var56 = org.jsecurity.crypto.BlowfishCipher.generateNewKey();
    var55.setKey(var56);
    java.security.Key var58 = org.jsecurity.crypto.BlowfishCipher.generateNewKey();
    var55.setKey(var58);
    byte[] var63 = new byte[] { (byte)100, (byte)100, (byte)(-1)};
    java.lang.String var64 = org.jsecurity.codec.CodecSupport.toString(var63);
    char[] var65 = org.jsecurity.codec.CodecSupport.toChars(var63);
    boolean var66 = org.jsecurity.codec.Base64.isBase64(var63);
    boolean var67 = org.jsecurity.codec.Base64.isBase64(var63);
    boolean var68 = org.jsecurity.codec.Base64.isBase64(var63);
    java.lang.String var69 = org.jsecurity.codec.Hex.encodeToString(var63);
    byte[] var73 = new byte[] { (byte)100, (byte)100, (byte)(-1)};
    java.lang.String var74 = org.jsecurity.codec.CodecSupport.toString(var73);
    char[] var75 = org.jsecurity.codec.CodecSupport.toChars(var73);
    boolean var76 = org.jsecurity.codec.Base64.isBase64(var73);
    boolean var77 = org.jsecurity.codec.Base64.isBase64(var73);
    boolean var78 = org.jsecurity.codec.Base64.isBase64(var73);
    java.lang.String var79 = org.jsecurity.codec.Base64.encodeToString(var73);
    byte[] var80 = var55.encrypt(var63, var73);
    var49.setAttribute((java.lang.Object)"6464ff", (java.lang.Object)var73);
    var49.setTimeout(100L);
    java.lang.Object var85 = var49.removeAttribute((java.lang.Object)"52a4a421-03d6-4e18-abbd-dd3112c2d7b3");
    java.io.Serializable var86 = var49.getId();
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var1);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var2);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var5);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var8);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var9);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var10);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var18);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var19);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var20);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var29);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var33 + "' != '" + "2f3b7ef8-40a9-431d-a49c-23b0e1c91153"+ "'", var33.equals("2f3b7ef8-40a9-431d-a49c-23b0e1c91153"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var41);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var44);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var56);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var58);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var63);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var64 + "' != '" + "dd\uFFFD"+ "'", var64.equals("dd\uFFFD"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var65);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var66 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var67 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var68 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var69 + "' != '" + "6464ff"+ "'", var69.equals("6464ff"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var73);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var74 + "' != '" + "dd\uFFFD"+ "'", var74.equals("dd\uFFFD"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var75);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var76 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var77 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var78 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var79 + "' != '" + "ZGT/"+ "'", var79.equals("ZGT/"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var80);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var85);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var86 + "' != '" + "2f3b7ef8-40a9-431d-a49c-23b0e1c91153"+ "'", var86.equals("2f3b7ef8-40a9-431d-a49c-23b0e1c91153"));

  }

  public void test464() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest7.test464");


    org.jsecurity.mgt.DefaultSecurityManager var0 = new org.jsecurity.mgt.DefaultSecurityManager();
    org.jsecurity.subject.RememberMeManager var1 = var0.getRememberMeManager();
    org.jsecurity.session.UnknownSessionException var4 = new org.jsecurity.session.UnknownSessionException("org.jsecurity.config.ConfigurationException: dd\uFFFD");
    org.jsecurity.authc.pam.UnsupportedTokenException var5 = new org.jsecurity.authc.pam.UnsupportedTokenException("020e4fd5-81c8-4cbc-9bbb-975c45ce39a3", (java.lang.Throwable)var4);
    org.jsecurity.authz.SimpleAuthorizationInfo var6 = new org.jsecurity.authz.SimpleAuthorizationInfo();
    java.util.Set var7 = var6.getStringPermissions();
    java.util.Set var8 = var6.getRoles();
    var6.addStringPermission("hi!");
    org.jsecurity.subject.SimplePrincipalCollection var12 = new org.jsecurity.subject.SimplePrincipalCollection((java.lang.Object)"hi!", "5dd0c65d-1422-49c2-becb-9e8dca619ab3");
    var4.setSessionId((java.io.Serializable)var12);
    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      boolean var15 = var0.hasRole((org.jsecurity.subject.PrincipalCollection)var12, "fb26d57a-4da8-4c2f-905b-b7c4bc888a13");
      fail("Expected exception of type java.util.NoSuchElementException");
    } catch (java.util.NoSuchElementException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var1);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var7);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var8);

  }

  public void test465() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest7.test465");


    java.lang.String[] var2 = org.jsecurity.util.StringUtils.tokenizeToStringArray("c545f9de-9859-467d-991b-aff81446ecc4", "51683bf6-3418-4d98-b15a-6e3f3f2f8eb9");
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var2);

  }

  public void test466() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest7.test466");


    org.jsecurity.cache.HashtableCache var1 = new org.jsecurity.cache.HashtableCache("hi!");
    var1.clear();

  }

  public void test467() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest7.test467");


    org.jsecurity.realm.activedirectory.ActiveDirectoryRealm var0 = new org.jsecurity.realm.activedirectory.ActiveDirectoryRealm();
    var0.initAuthorizationCache();
    var0.setSearchBase("dd\uFFFD");
    var0.setPrincipalSuffix("8aec7b5f-69b5-4558-9a4d-fda02fdc6486");

  }

  public void test468() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest7.test468");


    org.jsecurity.realm.jndi.JndiRealmFactory var0 = new org.jsecurity.realm.jndi.JndiRealmFactory();
    java.io.InputStream var2 = org.jsecurity.util.ClassUtils.getResourceAsStream("");
    java.lang.Object[] var3 = new java.lang.Object[] { var2};
    java.util.List var4 = org.jsecurity.util.CollectionUtils.asList(var3);
    var0.setJndiNames((java.util.Collection)var4);
    boolean var6 = var0.isResourceRef();
    java.util.Collection var7 = var0.getJndiNames();
    var0.setResourceRef(true);
    var0.setResourceRef(true);
    org.jsecurity.jndi.JndiTemplate var12 = var0.getJndiTemplate();
    org.jsecurity.authc.pam.AllSuccessfulModularAuthenticationStrategy var15 = new org.jsecurity.authc.pam.AllSuccessfulModularAuthenticationStrategy();
    char[] var17 = new char[] { };
    org.jsecurity.authc.UsernamePasswordToken var19 = new org.jsecurity.authc.UsernamePasswordToken("hi!", var17, true);
    org.jsecurity.authc.SimpleAccount var20 = new org.jsecurity.authc.SimpleAccount();
    var20.setCredentialsExpired(false);
    boolean var23 = var20.isLocked();
    org.jsecurity.authc.AuthenticationInfo var24 = var15.afterAllAttempts((org.jsecurity.authc.AuthenticationToken)var19, (org.jsecurity.authc.AuthenticationInfo)var20);
    char[] var28 = new char[] { '4', '#'};
    org.jsecurity.authc.UsernamePasswordToken var29 = new org.jsecurity.authc.UsernamePasswordToken("\u0000\u0000", var28);
    org.jsecurity.authc.SimpleAccount var30 = new org.jsecurity.authc.SimpleAccount();
    var30.setCredentialsExpired(false);
    var30.setCredentialsExpired(false);
    boolean var35 = var30.isCredentialsExpired();
    org.jsecurity.authc.AuthenticationInfo var36 = var15.afterAllAttempts((org.jsecurity.authc.AuthenticationToken)var29, (org.jsecurity.authc.AuthenticationInfo)var30);
    org.jsecurity.session.InvalidSessionException var37 = new org.jsecurity.session.InvalidSessionException("ZGT/", (java.io.Serializable)var29);
    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      var12.bind("2e1fbab3-cc43-40c6-9365-7d70b9e81b78", (java.lang.Object)"ZGT/");
      fail("Expected exception of type javax.naming.NoInitialContextException");
    } catch (javax.naming.NoInitialContextException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var2);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var3);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var4);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var6 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var7);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var12);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var17);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var23 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var24);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var28);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var35 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var36);

  }

  public void test469() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest7.test469");


    org.jsecurity.realm.text.TextConfigurationRealm var0 = new org.jsecurity.realm.text.TextConfigurationRealm();
    java.io.InputStream var2 = org.jsecurity.util.ClassUtils.getResourceAsStream("");
    java.lang.Object[] var3 = new java.lang.Object[] { var2};
    java.util.List var4 = org.jsecurity.util.CollectionUtils.asList(var3);
    org.jsecurity.authc.pam.ModularRealmAuthenticator var5 = new org.jsecurity.authc.pam.ModularRealmAuthenticator(var4);
    org.jsecurity.subject.SimplePrincipalCollection var7 = new org.jsecurity.subject.SimplePrincipalCollection((java.util.Collection)var4, "org.jsecurity.authz.UnauthorizedException: org.jsecurity.session.ExpiredSessionException: ");
    org.jsecurity.session.UnknownSessionException var12 = new org.jsecurity.session.UnknownSessionException("dd\uFFFD", (java.io.Serializable)100.0f);
    org.jsecurity.session.SessionException var14 = new org.jsecurity.session.SessionException("dd\uFFFD", (java.lang.Throwable)var12, (java.io.Serializable)0);
    org.jsecurity.session.SessionException var15 = new org.jsecurity.session.SessionException("dd\uFFFD", (java.lang.Throwable)var12);
    var7.add((java.lang.Object)var15, "org.jsecurity.config.ConfigurationException: dd\uFFFD");
    var0.onLogout((org.jsecurity.subject.PrincipalCollection)var7);
    java.util.Set var20 = org.jsecurity.util.PermissionUtils.toPermissionStrings("org.jsecurity.config.ConfigurationException: dd\uFFFD");
    org.jsecurity.authz.SimpleAuthorizationInfo var21 = new org.jsecurity.authz.SimpleAuthorizationInfo(var20);
    org.jsecurity.authz.SimpleAuthorizingAccount var22 = new org.jsecurity.authz.SimpleAuthorizingAccount((org.jsecurity.subject.PrincipalCollection)var7, (java.lang.Object)var20);
    org.jsecurity.authz.SimpleAuthorizationInfo var23 = new org.jsecurity.authz.SimpleAuthorizationInfo();
    var23.addRole("a2b823b1e72eae2b727289df8a00a89df8a0bab6ad8a89c4c5c7a9b62a270000");
    org.jsecurity.session.UnknownSessionException var30 = new org.jsecurity.session.UnknownSessionException("dd\uFFFD", (java.io.Serializable)100.0f);
    org.jsecurity.subject.SubjectException var31 = new org.jsecurity.subject.SubjectException("dd\uFFFD", (java.lang.Throwable)var30);
    org.jsecurity.io.SerializationException var32 = new org.jsecurity.io.SerializationException("", (java.lang.Throwable)var31);
    java.lang.Throwable[] var33 = var31.getSuppressed();
    java.util.Set var34 = org.jsecurity.util.CollectionUtils.asSet((java.lang.Object[])var33);
    var23.addRoles((java.util.Collection)var34);
    var22.checkPermissions((java.util.Collection)var34);
    java.util.Collection var37 = var22.getRoles();
    java.util.Collection var38 = var22.getRoles();
    var22.addRole("org.jsecurity.realm.text.TextConfigurationRealm_2361");
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var2);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var3);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var4);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var20);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var33);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var34);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var37);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var38);

  }

  public void test470() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest7.test470");


    org.jsecurity.session.mgt.eis.MemorySessionDAO var3 = new org.jsecurity.session.mgt.eis.MemorySessionDAO();
    org.jsecurity.cache.Cache var4 = var3.getActiveSessionsCache();
    org.jsecurity.cache.CacheManager var5 = var3.getCacheManager();
    org.jsecurity.cache.HashtableCacheManager var6 = new org.jsecurity.cache.HashtableCacheManager();
    org.jsecurity.cache.Cache var8 = var6.getCache("\u0000\u0000");
    var3.setActiveSessionsCache(var8);
    java.io.InputStream var11 = org.jsecurity.util.ClassUtils.getResourceAsStream("");
    java.lang.Object[] var12 = new java.lang.Object[] { var11};
    java.util.List var13 = org.jsecurity.util.CollectionUtils.asList(var12);
    org.jsecurity.authc.pam.ModularRealmAuthenticator var14 = new org.jsecurity.authc.pam.ModularRealmAuthenticator(var13);
    org.jsecurity.authc.pam.AllSuccessfulModularAuthenticationStrategy var15 = new org.jsecurity.authc.pam.AllSuccessfulModularAuthenticationStrategy();
    var14.setModularAuthenticationStrategy((org.jsecurity.authc.pam.ModularAuthenticationStrategy)var15);
    org.jsecurity.authz.SimpleAuthorizationInfo var17 = new org.jsecurity.authz.SimpleAuthorizationInfo();
    var17.addStringPermission("hi!");
    java.io.InputStream var21 = org.jsecurity.util.ClassUtils.getResourceAsStream("");
    java.lang.Object[] var22 = new java.lang.Object[] { var21};
    java.util.List var23 = org.jsecurity.util.CollectionUtils.asList(var22);
    var17.addRoles((java.util.Collection)var23);
    var14.setAuthenticationListeners((java.util.Collection)var23);
    org.jsecurity.realm.activedirectory.ActiveDirectoryRealm var26 = new org.jsecurity.realm.activedirectory.ActiveDirectoryRealm();
    var26.setPrincipalSuffix("");
    var14.setRealm((org.jsecurity.realm.Realm)var26);
    org.jsecurity.cache.HashtableCacheManager var30 = new org.jsecurity.cache.HashtableCacheManager();
    org.jsecurity.cache.Cache var32 = var30.getCache("\u0000\u0000");
    var26.setAuthorizationCache(var32);
    var3.setActiveSessionsCache(var32);
    org.jsecurity.session.mgt.SimpleSession var35 = new org.jsecurity.session.mgt.SimpleSession();
    java.io.Serializable var36 = var3.create((org.jsecurity.session.Session)var35);
    org.jsecurity.session.mgt.SimpleSession var37 = new org.jsecurity.session.mgt.SimpleSession();
    var37.touch();
    var37.validate();
    org.jsecurity.session.mgt.SimpleSession var40 = new org.jsecurity.session.mgt.SimpleSession();
    var40.setTimeout((-1L));
    org.jsecurity.session.mgt.SimpleSession var43 = new org.jsecurity.session.mgt.SimpleSession();
    java.util.Date var44 = var43.getLastAccessTime();
    var40.setLastAccessTime(var44);
    org.jsecurity.session.mgt.SimpleSession var46 = new org.jsecurity.session.mgt.SimpleSession();
    java.util.Date var47 = var46.getLastAccessTime();
    var40.setStopTimestamp(var47);
    var37.setLastAccessTime(var47);
    var35.setLastAccessTime(var47);
    org.jsecurity.session.mgt.ImmutableProxiedSession var51 = new org.jsecurity.session.mgt.ImmutableProxiedSession((org.jsecurity.session.Session)var35);
    java.util.Date var52 = var51.getLastAccessTime();
    java.net.InetAddress var53 = var51.getHostAddress();
    org.jsecurity.authz.HostUnauthorizedException var54 = new org.jsecurity.authz.HostUnauthorizedException(var53);
    org.jsecurity.authc.UsernamePasswordToken var55 = new org.jsecurity.authc.UsernamePasswordToken("2845ef71-576b-45b9-aa13-d72d8501e79d", "345d9036-762c-4f58-8690-c901bf299cde", false, var53);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var4);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var5);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var8);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var11);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var12);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var13);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var21);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var22);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var23);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var32);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var36 + "' != '" + "768c0551-7d45-4d84-b7ae-731da3fdb6cc"+ "'", var36.equals("768c0551-7d45-4d84-b7ae-731da3fdb6cc"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var44);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var47);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var52);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var53);

  }

  public void test471() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest7.test471");


    org.jsecurity.authz.SimpleAuthorizationInfo var0 = new org.jsecurity.authz.SimpleAuthorizationInfo();
    org.jsecurity.session.UnknownSessionException var5 = new org.jsecurity.session.UnknownSessionException("dd\uFFFD", (java.io.Serializable)100.0f);
    org.jsecurity.subject.SubjectException var6 = new org.jsecurity.subject.SubjectException("dd\uFFFD", (java.lang.Throwable)var5);
    org.jsecurity.io.SerializationException var7 = new org.jsecurity.io.SerializationException("", (java.lang.Throwable)var6);
    java.lang.Throwable[] var8 = var6.getSuppressed();
    java.util.Set var9 = org.jsecurity.util.CollectionUtils.asSet((java.lang.Object[])var8);
    var0.setStringPermissions(var9);
    org.jsecurity.session.UnknownSessionException var14 = new org.jsecurity.session.UnknownSessionException("dd\uFFFD", (java.io.Serializable)100.0f);
    org.jsecurity.session.SessionException var16 = new org.jsecurity.session.SessionException("dd\uFFFD", (java.lang.Throwable)var14, (java.io.Serializable)0);
    org.jsecurity.authc.SimpleAuthenticationInfo var19 = new org.jsecurity.authc.SimpleAuthenticationInfo((java.lang.Object)0, (java.lang.Object)10, "hi!");
    java.lang.Object var20 = var19.getCredentials();
    java.lang.String var21 = var19.toString();
    org.jsecurity.realm.text.TextConfigurationRealm var22 = new org.jsecurity.realm.text.TextConfigurationRealm();
    java.io.InputStream var24 = org.jsecurity.util.ClassUtils.getResourceAsStream("");
    java.lang.Object[] var25 = new java.lang.Object[] { var24};
    java.util.List var26 = org.jsecurity.util.CollectionUtils.asList(var25);
    org.jsecurity.authc.pam.ModularRealmAuthenticator var27 = new org.jsecurity.authc.pam.ModularRealmAuthenticator(var26);
    org.jsecurity.subject.SimplePrincipalCollection var29 = new org.jsecurity.subject.SimplePrincipalCollection((java.util.Collection)var26, "org.jsecurity.authz.UnauthorizedException: org.jsecurity.session.ExpiredSessionException: ");
    org.jsecurity.session.UnknownSessionException var34 = new org.jsecurity.session.UnknownSessionException("dd\uFFFD", (java.io.Serializable)100.0f);
    org.jsecurity.session.SessionException var36 = new org.jsecurity.session.SessionException("dd\uFFFD", (java.lang.Throwable)var34, (java.io.Serializable)0);
    org.jsecurity.session.SessionException var37 = new org.jsecurity.session.SessionException("dd\uFFFD", (java.lang.Throwable)var34);
    var29.add((java.lang.Object)var37, "org.jsecurity.config.ConfigurationException: dd\uFFFD");
    var22.onLogout((org.jsecurity.subject.PrincipalCollection)var29);
    org.jsecurity.cache.HashtableCacheManager var41 = new org.jsecurity.cache.HashtableCacheManager();
    org.jsecurity.cache.Cache var43 = var41.getCache("\u0000\u0000");
    var22.setAuthorizationCache(var43);
    org.jsecurity.codec.CodecException var47 = new org.jsecurity.codec.CodecException("dd\uFFFD");
    org.jsecurity.authc.ConcurrentAccessException var48 = new org.jsecurity.authc.ConcurrentAccessException("org.jsecurity.authz.UnauthorizedException: org.jsecurity.session.ExpiredSessionException: ", (java.lang.Throwable)var47);
    org.jsecurity.subject.SimplePrincipalCollection var50 = new org.jsecurity.subject.SimplePrincipalCollection((java.lang.Object)var47, "");
    var22.onLogout((org.jsecurity.subject.PrincipalCollection)var50);
    var19.setPrincipals((org.jsecurity.subject.PrincipalCollection)var50);
    org.jsecurity.realm.activedirectory.ActiveDirectoryRealm var53 = new org.jsecurity.realm.activedirectory.ActiveDirectoryRealm();
    org.jsecurity.authc.credential.Sha256CredentialsMatcher var54 = new org.jsecurity.authc.credential.Sha256CredentialsMatcher();
    var53.setCredentialsMatcher((org.jsecurity.authc.credential.CredentialsMatcher)var54);
    org.jsecurity.realm.activedirectory.ActiveDirectoryRealm var56 = new org.jsecurity.realm.activedirectory.ActiveDirectoryRealm();
    org.jsecurity.authc.credential.Sha256CredentialsMatcher var57 = new org.jsecurity.authc.credential.Sha256CredentialsMatcher();
    var56.setCredentialsMatcher((org.jsecurity.authc.credential.CredentialsMatcher)var57);
    java.lang.String var59 = var56.getAuthorizationCacheName();
    var56.setUrl("hi!");
    org.jsecurity.realm.ldap.DefaultLdapContextFactory var62 = new org.jsecurity.realm.ldap.DefaultLdapContextFactory();
    var56.setLdapContextFactory((org.jsecurity.realm.ldap.LdapContextFactory)var62);
    var62.setAuthentication("org.jsecurity.authz.UnauthorizedException: org.jsecurity.session.ExpiredSessionException: ");
    var53.setLdapContextFactory((org.jsecurity.realm.ldap.LdapContextFactory)var62);
    var62.setReferral("a2b823b1e72eae2b727289df8a00a89df8a0bab6ad8a89c4c5c7a9b62a270000");
    var62.setUrl("\u0000\u0000");
    java.util.Set var73 = org.jsecurity.util.PermissionUtils.toPermissionStrings("org.jsecurity.config.ConfigurationException: dd\uFFFD");
    org.jsecurity.authz.SimpleAuthorizationInfo var74 = new org.jsecurity.authz.SimpleAuthorizationInfo(var73);
    org.jsecurity.authz.SimpleRole var75 = new org.jsecurity.authz.SimpleRole();
    java.lang.String var76 = var75.getName();
    org.jsecurity.session.UnknownSessionException var81 = new org.jsecurity.session.UnknownSessionException("dd\uFFFD", (java.io.Serializable)100.0f);
    org.jsecurity.subject.SubjectException var82 = new org.jsecurity.subject.SubjectException("dd\uFFFD", (java.lang.Throwable)var81);
    org.jsecurity.io.SerializationException var83 = new org.jsecurity.io.SerializationException("", (java.lang.Throwable)var82);
    java.lang.Throwable[] var84 = var82.getSuppressed();
    java.util.Set var85 = org.jsecurity.util.CollectionUtils.asSet((java.lang.Object[])var84);
    var75.setPermissions(var85);
    org.jsecurity.authz.SimpleAuthorizingAccount var87 = new org.jsecurity.authz.SimpleAuthorizingAccount((org.jsecurity.subject.PrincipalCollection)var50, (java.lang.Object)"\u0000\u0000", "org.jsecurity.authc.AccountException: hi!", var73, var85);
    var87.setLocked(false);
    java.util.Set var90 = var87.getSimpleRoles();
    var0.setRoles(var90);
    org.jsecurity.subject.SimplePrincipalCollection var93 = new org.jsecurity.subject.SimplePrincipalCollection((java.util.Collection)var90, "M\uFFFD}\uFFFD\uFFFDkM7\uFFFDf\uFFFDi\uFFFD6\uFFFD]\uFFFD\uFFFD\uFFFD5\uFFFDO;");
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var8);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var9);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var20 + "' != '" + 10+ "'", var20.equals(10));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var24);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var25);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var26);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var43);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var59);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var73);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var76);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var84);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var85);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var90);

  }

  public void test472() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest7.test472");


    org.jsecurity.codec.CodecException var2 = new org.jsecurity.codec.CodecException("dd\uFFFD");
    org.jsecurity.authc.ConcurrentAccessException var3 = new org.jsecurity.authc.ConcurrentAccessException("org.jsecurity.authz.UnauthorizedException: org.jsecurity.session.ExpiredSessionException: ", (java.lang.Throwable)var2);
    org.jsecurity.subject.SimplePrincipalCollection var5 = new org.jsecurity.subject.SimplePrincipalCollection((java.lang.Object)var2, "");
    char[] var9 = new char[] { };
    org.jsecurity.authc.UsernamePasswordToken var11 = new org.jsecurity.authc.UsernamePasswordToken("hi!", var9, true);
    org.jsecurity.authc.UsernamePasswordToken var12 = new org.jsecurity.authc.UsernamePasswordToken("\u0000\u0000", var9);
    org.jsecurity.session.mgt.SimpleSession var13 = new org.jsecurity.session.mgt.SimpleSession();
    var13.setTimeout((-1L));
    org.jsecurity.session.mgt.SimpleSession var16 = new org.jsecurity.session.mgt.SimpleSession();
    java.util.Date var17 = var16.getLastAccessTime();
    var13.setLastAccessTime(var17);
    java.net.InetAddress var19 = var13.getHostAddress();
    var12.setInetAddress(var19);
    org.jsecurity.session.mgt.SimpleSession var21 = new org.jsecurity.session.mgt.SimpleSession();
    var21.setTimeout((-1L));
    org.jsecurity.session.mgt.SimpleSession var24 = new org.jsecurity.session.mgt.SimpleSession();
    java.util.Date var25 = var24.getLastAccessTime();
    var21.setLastAccessTime(var25);
    org.jsecurity.session.mgt.SimpleSession var27 = new org.jsecurity.session.mgt.SimpleSession();
    java.util.Date var28 = var27.getLastAccessTime();
    var21.setStopTimestamp(var28);
    org.jsecurity.mgt.DefaultSecurityManager var30 = new org.jsecurity.mgt.DefaultSecurityManager();
    org.jsecurity.authc.pam.AllSuccessfulModularAuthenticationStrategy var31 = new org.jsecurity.authc.pam.AllSuccessfulModularAuthenticationStrategy();
    org.jsecurity.authc.pam.AllSuccessfulModularAuthenticationStrategy var32 = new org.jsecurity.authc.pam.AllSuccessfulModularAuthenticationStrategy();
    char[] var34 = new char[] { };
    org.jsecurity.authc.UsernamePasswordToken var36 = new org.jsecurity.authc.UsernamePasswordToken("hi!", var34, true);
    org.jsecurity.authc.SimpleAccount var37 = new org.jsecurity.authc.SimpleAccount();
    var37.setCredentialsExpired(false);
    boolean var40 = var37.isLocked();
    org.jsecurity.authc.AuthenticationInfo var41 = var32.afterAllAttempts((org.jsecurity.authc.AuthenticationToken)var36, (org.jsecurity.authc.AuthenticationInfo)var37);
    char[] var45 = new char[] { '4', '#'};
    org.jsecurity.authc.UsernamePasswordToken var46 = new org.jsecurity.authc.UsernamePasswordToken("\u0000\u0000", var45);
    org.jsecurity.authc.SimpleAccount var47 = new org.jsecurity.authc.SimpleAccount();
    var47.setCredentialsExpired(false);
    var47.setCredentialsExpired(false);
    boolean var52 = var47.isCredentialsExpired();
    org.jsecurity.authc.AuthenticationInfo var53 = var32.afterAllAttempts((org.jsecurity.authc.AuthenticationToken)var46, (org.jsecurity.authc.AuthenticationInfo)var47);
    org.jsecurity.authz.UnauthenticatedException var57 = new org.jsecurity.authz.UnauthenticatedException();
    org.jsecurity.config.UnresolveableReferenceException var58 = new org.jsecurity.config.UnresolveableReferenceException("", (java.lang.Throwable)var57);
    org.jsecurity.cache.CacheException var59 = new org.jsecurity.cache.CacheException("org.jsecurity.config.ConfigurationException: dd\uFFFD", (java.lang.Throwable)var57);
    org.jsecurity.authc.SimpleAuthenticationInfo var61 = new org.jsecurity.authc.SimpleAuthenticationInfo((java.lang.Object)"org.jsecurity.config.ConfigurationException: dd\uFFFD", (java.lang.Object)var59, "a2b823b1e72eae2b727289df8a00a89df8a0bab6ad8a89c4c5c7a9b62a270000");
    org.jsecurity.subject.PrincipalCollection var62 = var61.getPrincipals();
    org.jsecurity.authc.AuthenticationInfo var63 = var31.afterAllAttempts((org.jsecurity.authc.AuthenticationToken)var46, (org.jsecurity.authc.AuthenticationInfo)var61);
    var30.setModularAuthenticationStrategy((org.jsecurity.authc.pam.ModularAuthenticationStrategy)var31);
    org.jsecurity.subject.RememberMeManager var65 = var30.getRememberMeManager();
    org.jsecurity.authc.pam.ModularRealmAuthenticator var66 = new org.jsecurity.authc.pam.ModularRealmAuthenticator();
    var30.setAuthenticator((org.jsecurity.authc.Authenticator)var66);
    org.jsecurity.codec.CodecException var70 = new org.jsecurity.codec.CodecException("dd\uFFFD");
    org.jsecurity.authc.ConcurrentAccessException var71 = new org.jsecurity.authc.ConcurrentAccessException("org.jsecurity.authz.UnauthorizedException: org.jsecurity.session.ExpiredSessionException: ", (java.lang.Throwable)var70);
    org.jsecurity.subject.SimplePrincipalCollection var73 = new org.jsecurity.subject.SimplePrincipalCollection((java.lang.Object)var70, "");
    java.io.InputStream var75 = org.jsecurity.util.ClassUtils.getResourceAsStream("");
    java.lang.Object[] var76 = new java.lang.Object[] { var75};
    java.util.List var77 = org.jsecurity.util.CollectionUtils.asList(var76);
    org.jsecurity.authc.pam.ModularRealmAuthenticator var78 = new org.jsecurity.authc.pam.ModularRealmAuthenticator(var77);
    var73.addAll((java.util.Collection)var77, "\u0000\u0000");
    org.jsecurity.authc.pam.FirstSuccessfulAuthenticationStrategy var81 = new org.jsecurity.authc.pam.FirstSuccessfulAuthenticationStrategy();
    org.jsecurity.authz.UnauthorizedException var83 = new org.jsecurity.authz.UnauthorizedException("org.jsecurity.config.ConfigurationException: dd\uFFFD");
    java.lang.Throwable[] var84 = var83.getSuppressed();
    java.util.List var85 = org.jsecurity.util.CollectionUtils.asList((java.lang.Object[])var84);
    org.jsecurity.authc.UsernamePasswordToken var86 = new org.jsecurity.authc.UsernamePasswordToken();
    java.lang.String var87 = var86.getUsername();
    java.net.InetAddress var88 = var86.getInetAddress();
    org.jsecurity.authc.AuthenticationInfo var89 = var81.beforeAllAttempts((java.util.Collection)var85, (org.jsecurity.authc.AuthenticationToken)var86);
    var30.checkPermissions((org.jsecurity.subject.PrincipalCollection)var73, (java.util.Collection)var85);
    org.jsecurity.subject.DelegatingSubject var91 = new org.jsecurity.subject.DelegatingSubject((org.jsecurity.subject.PrincipalCollection)var5, false, var19, (org.jsecurity.session.Session)var21, (org.jsecurity.mgt.SecurityManager)var30);
    var91.logout();
    java.lang.Object var93 = var91.getPrincipal();
    org.jsecurity.subject.PrincipalCollection var94 = var91.getPrincipals();
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var9);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var17);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var19);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var25);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var28);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var34);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var40 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var41);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var45);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var52 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var53);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var62);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var63);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var65);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var75);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var76);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var77);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var84);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var85);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var87);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var88);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var89);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var93);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var94);

  }

  public void test473() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest7.test473");


    org.jsecurity.authc.UnknownAccountException var1 = new org.jsecurity.authc.UnknownAccountException("HashtableCache [5dd0c65d-1422-49c2-becb-9e8dca619ab3]");

  }

  public void test474() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest7.test474");


    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      org.jsecurity.crypto.hash.Sha384Hash var1 = org.jsecurity.crypto.hash.Sha384Hash.fromHexString("a90fad7f-7d5f-46a8-a669-ef1c9ffd25bf");
      fail("Expected exception of type java.lang.IllegalArgumentException");
    } catch (java.lang.IllegalArgumentException e) {
      // Expected exception.
    }

  }

  public void test475() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest7.test475");


    org.jsecurity.authc.ExcessiveAttemptsException var1 = new org.jsecurity.authc.ExcessiveAttemptsException("4d3ad5aa-ac3f-4e82-99cd-6644fc7349ee");

  }

  public void test476() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest7.test476");


    org.jsecurity.config.UnresolveableReferenceException var1 = new org.jsecurity.config.UnresolveableReferenceException("org.jsecurity.config.ConfigurationException: dd\uFFFD");
    org.jsecurity.session.mgt.SimpleSession var2 = new org.jsecurity.session.mgt.SimpleSession();
    var2.setTimeout((-1L));
    org.jsecurity.session.mgt.SimpleSession var5 = new org.jsecurity.session.mgt.SimpleSession();
    var5.setTimeout((-1L));
    org.jsecurity.session.mgt.SimpleSession var8 = new org.jsecurity.session.mgt.SimpleSession();
    java.util.Date var9 = var8.getLastAccessTime();
    var5.setLastAccessTime(var9);
    org.jsecurity.session.mgt.SimpleSession var11 = new org.jsecurity.session.mgt.SimpleSession();
    java.util.Date var12 = var11.getLastAccessTime();
    var5.setStopTimestamp(var12);
    var2.setStartTimestamp(var12);
    org.jsecurity.authc.SimpleAccount var16 = new org.jsecurity.authc.SimpleAccount((java.lang.Object)"org.jsecurity.config.ConfigurationException: dd\uFFFD", (java.lang.Object)var12, "e2497199-95f2-4373-8934-d742f09a6cb1");
    var16.setLocked(true);
    org.jsecurity.realm.activedirectory.ActiveDirectoryRealm var19 = new org.jsecurity.realm.activedirectory.ActiveDirectoryRealm();
    var19.init();
    var19.setSystemPassword("dd\uFFFD");
    org.jsecurity.cache.Cache var23 = var19.getAuthorizationCache();
    org.jsecurity.mgt.DefaultSecurityManager var24 = new org.jsecurity.mgt.DefaultSecurityManager((org.jsecurity.realm.Realm)var19);
    var24.destroy();
    org.jsecurity.subject.RememberMeManager var26 = var24.getRememberMeManager();
    org.jsecurity.mgt.DefaultSecurityManager var27 = new org.jsecurity.mgt.DefaultSecurityManager();
    java.io.InputStream var29 = org.jsecurity.util.ClassUtils.getResourceAsStream("");
    java.lang.Object[] var30 = new java.lang.Object[] { var29};
    java.util.List var31 = org.jsecurity.util.CollectionUtils.asList(var30);
    org.jsecurity.authc.pam.ModularRealmAuthenticator var32 = new org.jsecurity.authc.pam.ModularRealmAuthenticator(var31);
    org.jsecurity.authc.pam.AllSuccessfulModularAuthenticationStrategy var33 = new org.jsecurity.authc.pam.AllSuccessfulModularAuthenticationStrategy();
    var32.setModularAuthenticationStrategy((org.jsecurity.authc.pam.ModularAuthenticationStrategy)var33);
    org.jsecurity.authz.SimpleAuthorizationInfo var35 = new org.jsecurity.authz.SimpleAuthorizationInfo();
    var35.addStringPermission("hi!");
    java.io.InputStream var39 = org.jsecurity.util.ClassUtils.getResourceAsStream("");
    java.lang.Object[] var40 = new java.lang.Object[] { var39};
    java.util.List var41 = org.jsecurity.util.CollectionUtils.asList(var40);
    var35.addRoles((java.util.Collection)var41);
    var32.setAuthenticationListeners((java.util.Collection)var41);
    var27.setSessionListeners((java.util.Collection)var41);
    org.jsecurity.realm.text.TextConfigurationRealm var45 = new org.jsecurity.realm.text.TextConfigurationRealm();
    java.io.InputStream var47 = org.jsecurity.util.ClassUtils.getResourceAsStream("");
    java.lang.Object[] var48 = new java.lang.Object[] { var47};
    java.util.List var49 = org.jsecurity.util.CollectionUtils.asList(var48);
    org.jsecurity.authc.pam.ModularRealmAuthenticator var50 = new org.jsecurity.authc.pam.ModularRealmAuthenticator(var49);
    org.jsecurity.subject.SimplePrincipalCollection var52 = new org.jsecurity.subject.SimplePrincipalCollection((java.util.Collection)var49, "org.jsecurity.authz.UnauthorizedException: org.jsecurity.session.ExpiredSessionException: ");
    org.jsecurity.session.UnknownSessionException var57 = new org.jsecurity.session.UnknownSessionException("dd\uFFFD", (java.io.Serializable)100.0f);
    org.jsecurity.session.SessionException var59 = new org.jsecurity.session.SessionException("dd\uFFFD", (java.lang.Throwable)var57, (java.io.Serializable)0);
    org.jsecurity.session.SessionException var60 = new org.jsecurity.session.SessionException("dd\uFFFD", (java.lang.Throwable)var57);
    var52.add((java.lang.Object)var60, "org.jsecurity.config.ConfigurationException: dd\uFFFD");
    var45.onLogout((org.jsecurity.subject.PrincipalCollection)var52);
    org.jsecurity.authc.pam.FirstSuccessfulAuthenticationStrategy var64 = new org.jsecurity.authc.pam.FirstSuccessfulAuthenticationStrategy();
    org.jsecurity.authz.UnauthorizedException var66 = new org.jsecurity.authz.UnauthorizedException("org.jsecurity.config.ConfigurationException: dd\uFFFD");
    java.lang.Throwable[] var67 = var66.getSuppressed();
    java.util.List var68 = org.jsecurity.util.CollectionUtils.asList((java.lang.Object[])var67);
    org.jsecurity.authc.UsernamePasswordToken var69 = new org.jsecurity.authc.UsernamePasswordToken();
    java.lang.String var70 = var69.getUsername();
    java.net.InetAddress var71 = var69.getInetAddress();
    org.jsecurity.authc.AuthenticationInfo var72 = var64.beforeAllAttempts((java.util.Collection)var68, (org.jsecurity.authc.AuthenticationToken)var69);
    boolean[] var73 = var27.hasRoles((org.jsecurity.subject.PrincipalCollection)var52, var68);
    org.jsecurity.authz.permission.WildcardPermissionResolver var74 = new org.jsecurity.authz.permission.WildcardPermissionResolver();
    org.jsecurity.authz.Permission var76 = var74.resolvePermission("hi!");
    org.jsecurity.authz.Permission var78 = var74.resolvePermission("hi!");
    var27.setPermissionResolver((org.jsecurity.authz.permission.PermissionResolver)var74);
    java.util.Collection var80 = var27.getRealms();
    var24.setAuthenticationListeners(var80);
    org.jsecurity.cache.HashtableCache var83 = new org.jsecurity.cache.HashtableCache("5dd0c65d-1422-49c2-becb-9e8dca619ab3");
    java.util.Set var84 = var83.values();
    var24.setSessionListeners((java.util.Collection)var84);
    var16.addRole((java.util.Collection)var84);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var9);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var12);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var23);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var26);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var29);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var30);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var31);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var39);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var40);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var41);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var47);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var48);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var49);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var67);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var68);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var70);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var71);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var72);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var73);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var76);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var78);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var80);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var84);

  }

  public void test477() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest7.test477");


    org.jsecurity.session.mgt.DefaultSessionManager var0 = new org.jsecurity.session.mgt.DefaultSessionManager();
    org.jsecurity.mgt.DefaultSecurityManager var1 = new org.jsecurity.mgt.DefaultSecurityManager();
    org.jsecurity.authz.permission.WildcardPermissionResolver var2 = new org.jsecurity.authz.permission.WildcardPermissionResolver();
    var1.setPermissionResolver((org.jsecurity.authz.permission.PermissionResolver)var2);
    org.jsecurity.cache.CacheManager var4 = var1.getCacheManager();
    var0.setCacheManager(var4);
    long var6 = var0.getSessionValidationInterval();
    org.jsecurity.codec.CodecException var10 = new org.jsecurity.codec.CodecException("dd\uFFFD");
    org.jsecurity.authc.ConcurrentAccessException var11 = new org.jsecurity.authc.ConcurrentAccessException("org.jsecurity.authz.UnauthorizedException: org.jsecurity.session.ExpiredSessionException: ", (java.lang.Throwable)var10);
    org.jsecurity.authc.ConcurrentAccessException var12 = new org.jsecurity.authc.ConcurrentAccessException("020e4fd5-81c8-4cbc-9bbb-975c45ce39a3", (java.lang.Throwable)var10);
    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      var0.touch((java.io.Serializable)"020e4fd5-81c8-4cbc-9bbb-975c45ce39a3");
      fail("Expected exception of type org.jsecurity.session.UnknownSessionException");
    } catch (org.jsecurity.session.UnknownSessionException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var4);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var6 == 3600000L);

  }

  public void test478() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest7.test478");


    org.jsecurity.io.ResourceException var4 = new org.jsecurity.io.ResourceException("hi!");
    org.jsecurity.authc.UnknownAccountException var5 = new org.jsecurity.authc.UnknownAccountException((java.lang.Throwable)var4);
    org.jsecurity.session.StoppedSessionException var6 = new org.jsecurity.session.StoppedSessionException("dd\uFFFD", (java.io.Serializable)var4);
    org.jsecurity.authc.pam.UnsupportedTokenException var8 = new org.jsecurity.authc.pam.UnsupportedTokenException("a2b823b1e72eae2b727289df8a00a89df8a0bab6ad8a89c4c5c7a9b62a270000");
    org.jsecurity.session.ExpiredSessionException var9 = new org.jsecurity.session.ExpiredSessionException("org.jsecurity.authz.UnauthorizedException: org.jsecurity.session.ExpiredSessionException: ", (java.lang.Throwable)var6, (java.io.Serializable)"a2b823b1e72eae2b727289df8a00a89df8a0bab6ad8a89c4c5c7a9b62a270000");
    org.jsecurity.session.InvalidSessionException var10 = new org.jsecurity.session.InvalidSessionException((java.lang.Throwable)var9);
    org.jsecurity.JSecurityException var11 = new org.jsecurity.JSecurityException("92ec7657-39a0-4fe8-843e-f3915140dc01", (java.lang.Throwable)var9);
    org.jsecurity.authz.UnauthenticatedException var12 = new org.jsecurity.authz.UnauthenticatedException((java.lang.Throwable)var11);

  }

  public void test479() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest7.test479");


    org.jsecurity.subject.InvalidSubjectException var1 = new org.jsecurity.subject.InvalidSubjectException("dd\uFFFD");
    org.jsecurity.session.UnknownSessionException var2 = new org.jsecurity.session.UnknownSessionException((java.lang.Throwable)var1);

  }

  public void test480() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest7.test480");


    org.jsecurity.authz.SimpleRole var0 = new org.jsecurity.authz.SimpleRole();
    java.lang.String var1 = var0.getName();
    java.util.Set var2 = var0.getPermissions();
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var1);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var2);

  }

  public void test481() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest7.test481");


    org.jsecurity.JSecurityException var1 = new org.jsecurity.JSecurityException();
    org.jsecurity.authc.LockedAccountException var2 = new org.jsecurity.authc.LockedAccountException("org.jsecurity.config.ConfigurationException: dd\uFFFD", (java.lang.Throwable)var1);
    org.jsecurity.subject.InvalidSubjectException var3 = new org.jsecurity.subject.InvalidSubjectException((java.lang.Throwable)var2);
    org.jsecurity.authc.IncorrectCredentialsException var4 = new org.jsecurity.authc.IncorrectCredentialsException((java.lang.Throwable)var3);

  }

  public void test482() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest7.test482");


    org.jsecurity.authz.SimpleAuthorizationInfo var0 = new org.jsecurity.authz.SimpleAuthorizationInfo();
    org.jsecurity.session.UnknownSessionException var5 = new org.jsecurity.session.UnknownSessionException("dd\uFFFD", (java.io.Serializable)100.0f);
    org.jsecurity.subject.SubjectException var6 = new org.jsecurity.subject.SubjectException("dd\uFFFD", (java.lang.Throwable)var5);
    org.jsecurity.io.SerializationException var7 = new org.jsecurity.io.SerializationException("", (java.lang.Throwable)var6);
    java.lang.Throwable[] var8 = var6.getSuppressed();
    java.util.Set var9 = org.jsecurity.util.CollectionUtils.asSet((java.lang.Object[])var8);
    var0.setStringPermissions(var9);
    org.jsecurity.authz.permission.WildcardPermissionResolver var11 = new org.jsecurity.authz.permission.WildcardPermissionResolver();
    org.jsecurity.authz.Permission var13 = var11.resolvePermission("hi!");
    var0.addObjectPermission(var13);
    var0.addRole("b725e8cc-690c-495e-ac27-b1b425834793");
    java.util.Set var17 = var0.getObjectPermissions();
    org.jsecurity.subject.SimplePrincipalCollection var19 = new org.jsecurity.subject.SimplePrincipalCollection((java.util.Collection)var17, "bcd88f91-36fc-4824-97c3-1a752a1a4e71");
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var8);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var9);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var13);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var17);

  }

  public void test483() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest7.test483");


    org.jsecurity.session.mgt.DefaultSessionManager var0 = new org.jsecurity.session.mgt.DefaultSessionManager();
    org.jsecurity.mgt.DefaultSecurityManager var1 = new org.jsecurity.mgt.DefaultSecurityManager();
    org.jsecurity.authz.permission.WildcardPermissionResolver var2 = new org.jsecurity.authz.permission.WildcardPermissionResolver();
    var1.setPermissionResolver((org.jsecurity.authz.permission.PermissionResolver)var2);
    org.jsecurity.cache.CacheManager var4 = var1.getCacheManager();
    var0.setCacheManager(var4);
    long var6 = var0.getSessionValidationInterval();
    org.jsecurity.session.mgt.SessionValidationScheduler var7 = var0.getSessionValidationScheduler();
    org.jsecurity.util.UnavailableConstructorException var9 = new org.jsecurity.util.UnavailableConstructorException("\uFFFD\uFFFD#\uFFFD\uFFFD.\uFFFD+r\uFFFD\u6959(\uFFFD\uFFFDW\uFFFDq\uFFFD.\uFFFD\uFFFD^jY\uFFFDj\uFFFDa\uFFFD\uFFFD\uFFFDj\u0628\u0000");
    boolean var10 = var0.isValid((java.io.Serializable)var9);
    org.jsecurity.session.mgt.eis.MemorySessionDAO var12 = new org.jsecurity.session.mgt.eis.MemorySessionDAO();
    org.jsecurity.cache.Cache var13 = var12.getActiveSessionsCache();
    org.jsecurity.cache.CacheManager var14 = var12.getCacheManager();
    org.jsecurity.cache.HashtableCacheManager var15 = new org.jsecurity.cache.HashtableCacheManager();
    org.jsecurity.cache.Cache var17 = var15.getCache("\u0000\u0000");
    var12.setActiveSessionsCache(var17);
    java.io.InputStream var20 = org.jsecurity.util.ClassUtils.getResourceAsStream("");
    java.lang.Object[] var21 = new java.lang.Object[] { var20};
    java.util.List var22 = org.jsecurity.util.CollectionUtils.asList(var21);
    org.jsecurity.authc.pam.ModularRealmAuthenticator var23 = new org.jsecurity.authc.pam.ModularRealmAuthenticator(var22);
    org.jsecurity.authc.pam.AllSuccessfulModularAuthenticationStrategy var24 = new org.jsecurity.authc.pam.AllSuccessfulModularAuthenticationStrategy();
    var23.setModularAuthenticationStrategy((org.jsecurity.authc.pam.ModularAuthenticationStrategy)var24);
    org.jsecurity.authz.SimpleAuthorizationInfo var26 = new org.jsecurity.authz.SimpleAuthorizationInfo();
    var26.addStringPermission("hi!");
    java.io.InputStream var30 = org.jsecurity.util.ClassUtils.getResourceAsStream("");
    java.lang.Object[] var31 = new java.lang.Object[] { var30};
    java.util.List var32 = org.jsecurity.util.CollectionUtils.asList(var31);
    var26.addRoles((java.util.Collection)var32);
    var23.setAuthenticationListeners((java.util.Collection)var32);
    org.jsecurity.realm.activedirectory.ActiveDirectoryRealm var35 = new org.jsecurity.realm.activedirectory.ActiveDirectoryRealm();
    var35.setPrincipalSuffix("");
    var23.setRealm((org.jsecurity.realm.Realm)var35);
    org.jsecurity.cache.HashtableCacheManager var39 = new org.jsecurity.cache.HashtableCacheManager();
    org.jsecurity.cache.Cache var41 = var39.getCache("\u0000\u0000");
    var35.setAuthorizationCache(var41);
    var12.setActiveSessionsCache(var41);
    org.jsecurity.session.mgt.SimpleSession var44 = new org.jsecurity.session.mgt.SimpleSession();
    java.io.Serializable var45 = var12.create((org.jsecurity.session.Session)var44);
    org.jsecurity.session.mgt.SimpleSession var46 = new org.jsecurity.session.mgt.SimpleSession();
    var46.touch();
    var46.validate();
    org.jsecurity.session.mgt.SimpleSession var49 = new org.jsecurity.session.mgt.SimpleSession();
    var49.setTimeout((-1L));
    org.jsecurity.session.mgt.SimpleSession var52 = new org.jsecurity.session.mgt.SimpleSession();
    java.util.Date var53 = var52.getLastAccessTime();
    var49.setLastAccessTime(var53);
    org.jsecurity.session.mgt.SimpleSession var55 = new org.jsecurity.session.mgt.SimpleSession();
    java.util.Date var56 = var55.getLastAccessTime();
    var49.setStopTimestamp(var56);
    var46.setLastAccessTime(var56);
    var44.setLastAccessTime(var56);
    org.jsecurity.session.mgt.ImmutableProxiedSession var60 = new org.jsecurity.session.mgt.ImmutableProxiedSession((org.jsecurity.session.Session)var44);
    java.util.Date var61 = var60.getLastAccessTime();
    java.net.InetAddress var62 = var60.getHostAddress();
    org.jsecurity.authz.HostUnauthorizedException var63 = new org.jsecurity.authz.HostUnauthorizedException(var62);
    org.jsecurity.util.InstantiationException var64 = new org.jsecurity.util.InstantiationException("org.jsecurity.authc.UsernamePasswordToken - \u0000\u0000, rememberMe=false", (java.lang.Throwable)var63);
    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      var0.stop((java.io.Serializable)var63);
      fail("Expected exception of type org.jsecurity.session.UnknownSessionException");
    } catch (org.jsecurity.session.UnknownSessionException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var4);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var6 == 3600000L);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var7);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var10 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var13);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var14);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var17);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var20);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var21);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var22);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var30);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var31);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var32);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var41);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var45 + "' != '" + "1eee1117-cbd6-411a-965c-3736ef1cdcab"+ "'", var45.equals("1eee1117-cbd6-411a-965c-3736ef1cdcab"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var53);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var56);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var61);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var62);

  }

  public void test484() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest7.test484");


    org.jsecurity.io.ResourceException var4 = new org.jsecurity.io.ResourceException("hi!");
    org.jsecurity.authc.UnknownAccountException var5 = new org.jsecurity.authc.UnknownAccountException((java.lang.Throwable)var4);
    org.jsecurity.session.StoppedSessionException var6 = new org.jsecurity.session.StoppedSessionException("dd\uFFFD", (java.io.Serializable)var4);
    org.jsecurity.authc.pam.UnsupportedTokenException var8 = new org.jsecurity.authc.pam.UnsupportedTokenException("a2b823b1e72eae2b727289df8a00a89df8a0bab6ad8a89c4c5c7a9b62a270000");
    org.jsecurity.session.ExpiredSessionException var9 = new org.jsecurity.session.ExpiredSessionException("org.jsecurity.authz.UnauthorizedException: org.jsecurity.session.ExpiredSessionException: ", (java.lang.Throwable)var6, (java.io.Serializable)"a2b823b1e72eae2b727289df8a00a89df8a0bab6ad8a89c4c5c7a9b62a270000");
    org.jsecurity.session.InvalidSessionException var10 = new org.jsecurity.session.InvalidSessionException((java.lang.Throwable)var9);
    org.jsecurity.JSecurityException var11 = new org.jsecurity.JSecurityException("92ec7657-39a0-4fe8-843e-f3915140dc01", (java.lang.Throwable)var9);
    org.jsecurity.authz.AuthorizationException var12 = new org.jsecurity.authz.AuthorizationException((java.lang.Throwable)var9);
    org.jsecurity.util.UnknownClassException var13 = new org.jsecurity.util.UnknownClassException((java.lang.Throwable)var9);

  }

  public void test485() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest7.test485");


    org.jsecurity.crypto.hash.Sha512Hash var1 = org.jsecurity.crypto.hash.Sha512Hash.fromBase64String("org.jsecurity.config.ConfigurationException: dd\uFFFD");
    byte[] var2 = var1.getBytes();
    java.lang.String var3 = org.jsecurity.codec.Base64.decodeToString(var2);
    byte[] var4 = org.jsecurity.codec.Base64.encodeChunked(var2);
    byte[] var6 = org.jsecurity.codec.Base64.encode(var4, false);
    java.lang.String var7 = org.jsecurity.codec.Base64.encodeToString(var6);
    char[] var8 = org.jsecurity.codec.CodecSupport.toChars(var6);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var1);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var2);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var3 + "' != '" + "\u0000\u0000\u0000"+ "'", var3.equals("\u0000\u0000\u0000"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var4);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var6);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var7 + "' != '" + "YjNKbmFuTmxZM1Z5YVhSNVkyOXVabWxuUTI5dVptbG5kWEpoZEdsdmJrVjRZMlZ3ZEdsdmJrRkJRVDBOQ2c9PQ=="+ "'", var7.equals("YjNKbmFuTmxZM1Z5YVhSNVkyOXVabWxuUTI5dVptbG5kWEpoZEdsdmJrVjRZMlZ3ZEdsdmJrRkJRVDBOQ2c9PQ=="));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var8);

  }

  public void test486() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest7.test486");


    org.jsecurity.authc.ExpiredCredentialsException var5 = new org.jsecurity.authc.ExpiredCredentialsException();
    org.jsecurity.session.ExpiredSessionException var6 = new org.jsecurity.session.ExpiredSessionException("", (java.lang.Throwable)var5);
    org.jsecurity.subject.InvalidSubjectException var7 = new org.jsecurity.subject.InvalidSubjectException("org.jsecurity.authc.AccountException: hi!", (java.lang.Throwable)var5);
    org.jsecurity.subject.SubjectException var8 = new org.jsecurity.subject.SubjectException("51683bf6-3418-4d98-b15a-6e3f3f2f8eb9", (java.lang.Throwable)var7);
    org.jsecurity.authz.UnauthorizedException var9 = new org.jsecurity.authz.UnauthorizedException("65e65177-d0e5-404e-b955-c04bc53877e7", (java.lang.Throwable)var7);
    org.jsecurity.authz.HostUnauthorizedException var10 = new org.jsecurity.authz.HostUnauthorizedException("6f8b35fd-0848-49a4-9560-659760616ad8", (java.lang.Throwable)var9);

  }

  public void test487() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest7.test487");


    org.jsecurity.subject.SimplePrincipalCollection var0 = new org.jsecurity.subject.SimplePrincipalCollection();
    org.jsecurity.authc.IncorrectCredentialsException var2 = new org.jsecurity.authc.IncorrectCredentialsException("c88beeba-81c4-4196-82b6-97784ab62fef");
    org.jsecurity.authc.SimpleAccount var3 = new org.jsecurity.authc.SimpleAccount((org.jsecurity.subject.PrincipalCollection)var0, (java.lang.Object)"c88beeba-81c4-4196-82b6-97784ab62fef");

  }

  public void test488() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest7.test488");


    org.jsecurity.realm.activedirectory.ActiveDirectoryRealm var0 = new org.jsecurity.realm.activedirectory.ActiveDirectoryRealm();
    org.jsecurity.authc.credential.Sha256CredentialsMatcher var1 = new org.jsecurity.authc.credential.Sha256CredentialsMatcher();
    var0.setCredentialsMatcher((org.jsecurity.authc.credential.CredentialsMatcher)var1);
    java.lang.String var3 = var0.getAuthorizationCacheName();
    var0.setUrl("hi!");
    var0.setName("org.jsecurity.realm.text.PropertiesRealm_772");
    var0.initAuthorizationCache();
    org.jsecurity.realm.text.TextConfigurationRealm var9 = new org.jsecurity.realm.text.TextConfigurationRealm();
    java.io.InputStream var11 = org.jsecurity.util.ClassUtils.getResourceAsStream("");
    java.lang.Object[] var12 = new java.lang.Object[] { var11};
    java.util.List var13 = org.jsecurity.util.CollectionUtils.asList(var12);
    org.jsecurity.authc.pam.ModularRealmAuthenticator var14 = new org.jsecurity.authc.pam.ModularRealmAuthenticator(var13);
    org.jsecurity.subject.SimplePrincipalCollection var16 = new org.jsecurity.subject.SimplePrincipalCollection((java.util.Collection)var13, "org.jsecurity.authz.UnauthorizedException: org.jsecurity.session.ExpiredSessionException: ");
    org.jsecurity.session.UnknownSessionException var21 = new org.jsecurity.session.UnknownSessionException("dd\uFFFD", (java.io.Serializable)100.0f);
    org.jsecurity.session.SessionException var23 = new org.jsecurity.session.SessionException("dd\uFFFD", (java.lang.Throwable)var21, (java.io.Serializable)0);
    org.jsecurity.session.SessionException var24 = new org.jsecurity.session.SessionException("dd\uFFFD", (java.lang.Throwable)var21);
    var16.add((java.lang.Object)var24, "org.jsecurity.config.ConfigurationException: dd\uFFFD");
    var9.onLogout((org.jsecurity.subject.PrincipalCollection)var16);
    org.jsecurity.authc.ExpiredCredentialsException var29 = new org.jsecurity.authc.ExpiredCredentialsException();
    org.jsecurity.session.ExpiredSessionException var30 = new org.jsecurity.session.ExpiredSessionException("", (java.lang.Throwable)var29);
    java.lang.Throwable[] var31 = var30.getSuppressed();
    org.jsecurity.io.ResourceException var32 = new org.jsecurity.io.ResourceException((java.lang.Throwable)var30);
    org.jsecurity.authc.SimpleAuthenticationInfo var33 = new org.jsecurity.authc.SimpleAuthenticationInfo((org.jsecurity.subject.PrincipalCollection)var16, (java.lang.Object)var30);
    java.util.Collection var35 = var16.fromRealm("a8df74b8-0f68-49c4-b77d-09857e171e23");
    java.util.List var36 = var16.asList();
    org.jsecurity.authc.LockedAccountException var38 = new org.jsecurity.authc.LockedAccountException("6464ff");
    org.jsecurity.io.SerializationException var39 = new org.jsecurity.io.SerializationException((java.lang.Throwable)var38);
    org.jsecurity.authz.SimpleAuthorizingAccount var40 = new org.jsecurity.authz.SimpleAuthorizingAccount((org.jsecurity.subject.PrincipalCollection)var16, (java.lang.Object)var38);
    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      boolean var42 = var0.hasRole((org.jsecurity.subject.PrincipalCollection)var16, "dade3937-164f-46fa-a082-f5f54b3b44e1");
      fail("Expected exception of type java.util.NoSuchElementException");
    } catch (java.util.NoSuchElementException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var3);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var11);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var12);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var13);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var31);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var35);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var36);

  }

  public void test489() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest7.test489");


    org.jsecurity.io.IniResource var0 = new org.jsecurity.io.IniResource();
    java.lang.String var1 = var0.getCharsetName();
    org.jsecurity.config.ReflectionBuilder var2 = new org.jsecurity.config.ReflectionBuilder();
    org.jsecurity.io.IniResource var3 = new org.jsecurity.io.IniResource();
    var3.setCharsetName("org.jsecurity.authz.UnauthorizedException: org.jsecurity.session.ExpiredSessionException: ");
    java.util.Map var6 = var3.getSections();
    java.util.Map var7 = var2.buildObjects(var6);
    var0.setSections(var7);
    var0.setCharsetName("ZGT/");
    java.util.Map var11 = var0.getSections();
    org.jsecurity.realm.activedirectory.ActiveDirectoryRealm var12 = new org.jsecurity.realm.activedirectory.ActiveDirectoryRealm();
    var12.init();
    var12.init();
    org.jsecurity.config.ReflectionBuilder var15 = new org.jsecurity.config.ReflectionBuilder();
    org.jsecurity.config.ReflectionBuilder var16 = new org.jsecurity.config.ReflectionBuilder();
    org.jsecurity.io.IniResource var17 = new org.jsecurity.io.IniResource();
    var17.setCharsetName("org.jsecurity.authz.UnauthorizedException: org.jsecurity.session.ExpiredSessionException: ");
    java.util.Map var20 = var17.getSections();
    java.util.Map var21 = var16.buildObjects(var20);
    org.jsecurity.config.ReflectionBuilder var22 = new org.jsecurity.config.ReflectionBuilder();
    org.jsecurity.io.IniResource var23 = new org.jsecurity.io.IniResource();
    var23.setCharsetName("org.jsecurity.authz.UnauthorizedException: org.jsecurity.session.ExpiredSessionException: ");
    java.util.Map var26 = var23.getSections();
    java.util.Map var27 = var22.buildObjects(var26);
    java.util.Map var28 = var16.buildObjects(var27);
    java.util.Map var29 = var15.buildObjects(var28);
    var12.setGroupRolesMap(var29);
    org.jsecurity.authc.pam.ModularRealmAuthenticator var31 = new org.jsecurity.authc.pam.ModularRealmAuthenticator((org.jsecurity.realm.Realm)var12);
    org.jsecurity.io.IniResource var32 = new org.jsecurity.io.IniResource();
    java.util.Map var33 = var32.getSections();
    java.lang.String var34 = var32.getCharsetName();
    org.jsecurity.config.ReflectionBuilder var35 = new org.jsecurity.config.ReflectionBuilder();
    org.jsecurity.io.IniResource var36 = new org.jsecurity.io.IniResource();
    java.util.Map var37 = var36.getSections();
    var35.setObjects(var37);
    org.jsecurity.io.IniResource var39 = new org.jsecurity.io.IniResource();
    java.util.Map var40 = var39.getSections();
    java.util.Map var41 = var35.buildObjects(var40);
    var32.setSections(var41);
    java.lang.String var43 = var32.getCharsetName();
    java.util.Map var44 = var32.getSections();
    var12.setGroupRolesMap(var44);
    var0.setSections(var44);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var1);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var6);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var7);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var11);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var20);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var21);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var26);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var27);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var28);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var29);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var33);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var34);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var37);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var40);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var41);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var43);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var44);

  }

  public void test490() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest7.test490");


    java.io.InputStream var1 = org.jsecurity.util.ClassUtils.getResourceAsStream("");
    java.lang.Object[] var2 = new java.lang.Object[] { var1};
    java.util.List var3 = org.jsecurity.util.CollectionUtils.asList(var2);
    org.jsecurity.authc.pam.ModularRealmAuthenticator var4 = new org.jsecurity.authc.pam.ModularRealmAuthenticator(var3);
    org.jsecurity.realm.text.TextConfigurationRealm var5 = new org.jsecurity.realm.text.TextConfigurationRealm();
    java.io.InputStream var7 = org.jsecurity.util.ClassUtils.getResourceAsStream("");
    java.lang.Object[] var8 = new java.lang.Object[] { var7};
    java.util.List var9 = org.jsecurity.util.CollectionUtils.asList(var8);
    org.jsecurity.authc.pam.ModularRealmAuthenticator var10 = new org.jsecurity.authc.pam.ModularRealmAuthenticator(var9);
    org.jsecurity.subject.SimplePrincipalCollection var12 = new org.jsecurity.subject.SimplePrincipalCollection((java.util.Collection)var9, "org.jsecurity.authz.UnauthorizedException: org.jsecurity.session.ExpiredSessionException: ");
    org.jsecurity.session.UnknownSessionException var17 = new org.jsecurity.session.UnknownSessionException("dd\uFFFD", (java.io.Serializable)100.0f);
    org.jsecurity.session.SessionException var19 = new org.jsecurity.session.SessionException("dd\uFFFD", (java.lang.Throwable)var17, (java.io.Serializable)0);
    org.jsecurity.session.SessionException var20 = new org.jsecurity.session.SessionException("dd\uFFFD", (java.lang.Throwable)var17);
    var12.add((java.lang.Object)var20, "org.jsecurity.config.ConfigurationException: dd\uFFFD");
    var5.onLogout((org.jsecurity.subject.PrincipalCollection)var12);
    org.jsecurity.cache.HashtableCacheManager var24 = new org.jsecurity.cache.HashtableCacheManager();
    org.jsecurity.cache.Cache var26 = var24.getCache("\u0000\u0000");
    var5.setAuthorizationCache(var26);
    org.jsecurity.codec.CodecException var30 = new org.jsecurity.codec.CodecException("dd\uFFFD");
    org.jsecurity.authc.ConcurrentAccessException var31 = new org.jsecurity.authc.ConcurrentAccessException("org.jsecurity.authz.UnauthorizedException: org.jsecurity.session.ExpiredSessionException: ", (java.lang.Throwable)var30);
    org.jsecurity.subject.SimplePrincipalCollection var33 = new org.jsecurity.subject.SimplePrincipalCollection((java.lang.Object)var30, "");
    var5.onLogout((org.jsecurity.subject.PrincipalCollection)var33);
    var4.setRealm((org.jsecurity.realm.Realm)var5);
    java.io.InputStream var37 = org.jsecurity.util.ClassUtils.getResourceAsStream("");
    java.lang.Object[] var38 = new java.lang.Object[] { var37};
    java.util.List var39 = org.jsecurity.util.CollectionUtils.asList(var38);
    org.jsecurity.authc.pam.ModularRealmAuthenticator var40 = new org.jsecurity.authc.pam.ModularRealmAuthenticator(var39);
    org.jsecurity.subject.SimplePrincipalCollection var42 = new org.jsecurity.subject.SimplePrincipalCollection((java.util.Collection)var39, "org.jsecurity.authz.UnauthorizedException: org.jsecurity.session.ExpiredSessionException: ");
    var4.onLogout((org.jsecurity.subject.PrincipalCollection)var42);
    org.jsecurity.mgt.DefaultSecurityManager var44 = new org.jsecurity.mgt.DefaultSecurityManager();
    java.io.InputStream var46 = org.jsecurity.util.ClassUtils.getResourceAsStream("");
    java.lang.Object[] var47 = new java.lang.Object[] { var46};
    java.util.List var48 = org.jsecurity.util.CollectionUtils.asList(var47);
    org.jsecurity.authc.pam.ModularRealmAuthenticator var49 = new org.jsecurity.authc.pam.ModularRealmAuthenticator(var48);
    org.jsecurity.authc.pam.AllSuccessfulModularAuthenticationStrategy var50 = new org.jsecurity.authc.pam.AllSuccessfulModularAuthenticationStrategy();
    var49.setModularAuthenticationStrategy((org.jsecurity.authc.pam.ModularAuthenticationStrategy)var50);
    org.jsecurity.authz.SimpleAuthorizationInfo var52 = new org.jsecurity.authz.SimpleAuthorizationInfo();
    var52.addStringPermission("hi!");
    java.io.InputStream var56 = org.jsecurity.util.ClassUtils.getResourceAsStream("");
    java.lang.Object[] var57 = new java.lang.Object[] { var56};
    java.util.List var58 = org.jsecurity.util.CollectionUtils.asList(var57);
    var52.addRoles((java.util.Collection)var58);
    var49.setAuthenticationListeners((java.util.Collection)var58);
    var44.setSessionListeners((java.util.Collection)var58);
    org.jsecurity.realm.text.TextConfigurationRealm var62 = new org.jsecurity.realm.text.TextConfigurationRealm();
    java.io.InputStream var64 = org.jsecurity.util.ClassUtils.getResourceAsStream("");
    java.lang.Object[] var65 = new java.lang.Object[] { var64};
    java.util.List var66 = org.jsecurity.util.CollectionUtils.asList(var65);
    org.jsecurity.authc.pam.ModularRealmAuthenticator var67 = new org.jsecurity.authc.pam.ModularRealmAuthenticator(var66);
    org.jsecurity.subject.SimplePrincipalCollection var69 = new org.jsecurity.subject.SimplePrincipalCollection((java.util.Collection)var66, "org.jsecurity.authz.UnauthorizedException: org.jsecurity.session.ExpiredSessionException: ");
    org.jsecurity.session.UnknownSessionException var74 = new org.jsecurity.session.UnknownSessionException("dd\uFFFD", (java.io.Serializable)100.0f);
    org.jsecurity.session.SessionException var76 = new org.jsecurity.session.SessionException("dd\uFFFD", (java.lang.Throwable)var74, (java.io.Serializable)0);
    org.jsecurity.session.SessionException var77 = new org.jsecurity.session.SessionException("dd\uFFFD", (java.lang.Throwable)var74);
    var69.add((java.lang.Object)var77, "org.jsecurity.config.ConfigurationException: dd\uFFFD");
    var62.onLogout((org.jsecurity.subject.PrincipalCollection)var69);
    org.jsecurity.authc.pam.FirstSuccessfulAuthenticationStrategy var81 = new org.jsecurity.authc.pam.FirstSuccessfulAuthenticationStrategy();
    org.jsecurity.authz.UnauthorizedException var83 = new org.jsecurity.authz.UnauthorizedException("org.jsecurity.config.ConfigurationException: dd\uFFFD");
    java.lang.Throwable[] var84 = var83.getSuppressed();
    java.util.List var85 = org.jsecurity.util.CollectionUtils.asList((java.lang.Object[])var84);
    org.jsecurity.authc.UsernamePasswordToken var86 = new org.jsecurity.authc.UsernamePasswordToken();
    java.lang.String var87 = var86.getUsername();
    java.net.InetAddress var88 = var86.getInetAddress();
    org.jsecurity.authc.AuthenticationInfo var89 = var81.beforeAllAttempts((java.util.Collection)var85, (org.jsecurity.authc.AuthenticationToken)var86);
    boolean[] var90 = var44.hasRoles((org.jsecurity.subject.PrincipalCollection)var69, var85);
    boolean var91 = var69.isEmpty();
    boolean var92 = var69.isEmpty();
    var4.onLogout((org.jsecurity.subject.PrincipalCollection)var69);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var1);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var2);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var3);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var7);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var8);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var9);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var26);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var37);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var38);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var39);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var46);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var47);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var48);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var56);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var57);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var58);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var64);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var65);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var66);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var84);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var85);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var87);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var88);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var89);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var90);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var91 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var92 == false);

  }

  public void test491() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest7.test491");


    org.jsecurity.mgt.DefaultSecurityManager var0 = new org.jsecurity.mgt.DefaultSecurityManager();
    java.io.InputStream var2 = org.jsecurity.util.ClassUtils.getResourceAsStream("");
    java.lang.Object[] var3 = new java.lang.Object[] { var2};
    java.util.List var4 = org.jsecurity.util.CollectionUtils.asList(var3);
    org.jsecurity.authc.pam.ModularRealmAuthenticator var5 = new org.jsecurity.authc.pam.ModularRealmAuthenticator(var4);
    org.jsecurity.authc.pam.AllSuccessfulModularAuthenticationStrategy var6 = new org.jsecurity.authc.pam.AllSuccessfulModularAuthenticationStrategy();
    var5.setModularAuthenticationStrategy((org.jsecurity.authc.pam.ModularAuthenticationStrategy)var6);
    org.jsecurity.authz.SimpleAuthorizationInfo var8 = new org.jsecurity.authz.SimpleAuthorizationInfo();
    var8.addStringPermission("hi!");
    java.io.InputStream var12 = org.jsecurity.util.ClassUtils.getResourceAsStream("");
    java.lang.Object[] var13 = new java.lang.Object[] { var12};
    java.util.List var14 = org.jsecurity.util.CollectionUtils.asList(var13);
    var8.addRoles((java.util.Collection)var14);
    var5.setAuthenticationListeners((java.util.Collection)var14);
    var0.setSessionListeners((java.util.Collection)var14);
    org.jsecurity.authc.pam.ModularRealmAuthenticator var18 = new org.jsecurity.authc.pam.ModularRealmAuthenticator();
    org.jsecurity.authz.permission.InvalidPermissionStringException var21 = new org.jsecurity.authz.permission.InvalidPermissionStringException("", "dd\uFFFD");
    org.jsecurity.JSecurityException var23 = new org.jsecurity.JSecurityException("");
    org.jsecurity.authc.SimpleAuthenticationInfo var25 = new org.jsecurity.authc.SimpleAuthenticationInfo((java.lang.Object)var21, (java.lang.Object)"", "org.jsecurity.authz.UnauthorizedException: org.jsecurity.session.ExpiredSessionException: ");
    org.jsecurity.subject.PrincipalCollection var26 = var25.getPrincipals();
    var18.onLogout(var26);
    var0.setAuthenticator((org.jsecurity.authc.Authenticator)var18);
    org.jsecurity.cache.CacheManager var29 = var0.getCacheManager();
    org.jsecurity.authc.Authenticator var30 = var0.getAuthenticator();
    java.io.InputStream var32 = org.jsecurity.util.ClassUtils.getResourceAsStream("");
    java.lang.Object[] var33 = new java.lang.Object[] { var32};
    java.util.List var34 = org.jsecurity.util.CollectionUtils.asList(var33);
    org.jsecurity.authc.pam.ModularRealmAuthenticator var35 = new org.jsecurity.authc.pam.ModularRealmAuthenticator(var34);
    java.io.InputStream var37 = org.jsecurity.util.ClassUtils.getResourceAsStream("");
    java.lang.Object[] var38 = new java.lang.Object[] { var37};
    java.util.List var39 = org.jsecurity.util.CollectionUtils.asList(var38);
    org.jsecurity.authc.pam.ModularRealmAuthenticator var40 = new org.jsecurity.authc.pam.ModularRealmAuthenticator(var39);
    var35.setRealms((java.util.Collection)var39);
    org.jsecurity.subject.SimplePrincipalCollection var43 = new org.jsecurity.subject.SimplePrincipalCollection((java.util.Collection)var39, "org.jsecurity.realm.SimpleAccountRealm-9-authorization");
    org.jsecurity.crypto.BlowfishCipher var44 = new org.jsecurity.crypto.BlowfishCipher();
    java.security.Key var45 = org.jsecurity.crypto.BlowfishCipher.generateNewKey();
    var44.setKey(var45);
    org.jsecurity.authz.SimpleAuthorizingAccount var47 = new org.jsecurity.authz.SimpleAuthorizingAccount((org.jsecurity.subject.PrincipalCollection)var43, (java.lang.Object)var45);
    org.jsecurity.authz.SimpleAuthorizationInfo var48 = new org.jsecurity.authz.SimpleAuthorizationInfo();
    org.jsecurity.session.UnknownSessionException var53 = new org.jsecurity.session.UnknownSessionException("dd\uFFFD", (java.io.Serializable)100.0f);
    org.jsecurity.subject.SubjectException var54 = new org.jsecurity.subject.SubjectException("dd\uFFFD", (java.lang.Throwable)var53);
    org.jsecurity.io.SerializationException var55 = new org.jsecurity.io.SerializationException("", (java.lang.Throwable)var54);
    java.lang.Throwable[] var56 = var54.getSuppressed();
    java.util.Set var57 = org.jsecurity.util.CollectionUtils.asSet((java.lang.Object[])var56);
    var48.setStringPermissions(var57);
    java.util.Set var59 = var48.getStringPermissions();
    var47.addRoles(var59);
    org.jsecurity.authz.SimpleAuthorizationInfo var61 = new org.jsecurity.authz.SimpleAuthorizationInfo();
    var61.addStringPermission("hi!");
    java.io.InputStream var65 = org.jsecurity.util.ClassUtils.getResourceAsStream("");
    java.lang.Object[] var66 = new java.lang.Object[] { var65};
    java.util.List var67 = org.jsecurity.util.CollectionUtils.asList(var66);
    var61.addRoles((java.util.Collection)var67);
    java.util.Set var69 = var61.getRoles();
    java.util.Set var70 = var61.getStringPermissions();
    var47.setRoles(var70);
    var0.setSessionListeners((java.util.Collection)var70);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var2);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var3);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var4);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var12);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var13);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var14);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var26);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var29);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var30);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var32);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var33);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var34);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var37);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var38);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var39);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var45);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var56);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var57);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var59);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var65);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var66);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var67);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var69);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var70);

  }

  public void test492() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest7.test492");


    org.jsecurity.mgt.DefaultSecurityManager var0 = new org.jsecurity.mgt.DefaultSecurityManager();
    java.io.InputStream var2 = org.jsecurity.util.ClassUtils.getResourceAsStream("");
    java.lang.Object[] var3 = new java.lang.Object[] { var2};
    java.util.List var4 = org.jsecurity.util.CollectionUtils.asList(var3);
    org.jsecurity.authc.pam.ModularRealmAuthenticator var5 = new org.jsecurity.authc.pam.ModularRealmAuthenticator(var4);
    org.jsecurity.authc.pam.AllSuccessfulModularAuthenticationStrategy var6 = new org.jsecurity.authc.pam.AllSuccessfulModularAuthenticationStrategy();
    var5.setModularAuthenticationStrategy((org.jsecurity.authc.pam.ModularAuthenticationStrategy)var6);
    org.jsecurity.authz.SimpleAuthorizationInfo var8 = new org.jsecurity.authz.SimpleAuthorizationInfo();
    var8.addStringPermission("hi!");
    java.io.InputStream var12 = org.jsecurity.util.ClassUtils.getResourceAsStream("");
    java.lang.Object[] var13 = new java.lang.Object[] { var12};
    java.util.List var14 = org.jsecurity.util.CollectionUtils.asList(var13);
    var8.addRoles((java.util.Collection)var14);
    var5.setAuthenticationListeners((java.util.Collection)var14);
    var0.setSessionListeners((java.util.Collection)var14);
    org.jsecurity.authc.pam.ModularRealmAuthenticator var18 = new org.jsecurity.authc.pam.ModularRealmAuthenticator();
    org.jsecurity.authz.permission.InvalidPermissionStringException var21 = new org.jsecurity.authz.permission.InvalidPermissionStringException("", "dd\uFFFD");
    org.jsecurity.JSecurityException var23 = new org.jsecurity.JSecurityException("");
    org.jsecurity.authc.SimpleAuthenticationInfo var25 = new org.jsecurity.authc.SimpleAuthenticationInfo((java.lang.Object)var21, (java.lang.Object)"", "org.jsecurity.authz.UnauthorizedException: org.jsecurity.session.ExpiredSessionException: ");
    org.jsecurity.subject.PrincipalCollection var26 = var25.getPrincipals();
    var18.onLogout(var26);
    var0.setAuthenticator((org.jsecurity.authc.Authenticator)var18);
    org.jsecurity.cache.CacheManager var29 = var0.getCacheManager();
    org.jsecurity.authc.Authenticator var30 = var0.getAuthenticator();
    org.jsecurity.subject.RememberMeManager var31 = var0.getRememberMeManager();
    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      var0.setRememberMeDecryptionCipherKeyHex("c8eb58de-b12b-43ca-af3f-78361fd8ba4a");
      fail("Expected exception of type java.lang.IllegalStateException");
    } catch (java.lang.IllegalStateException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var2);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var3);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var4);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var12);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var13);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var14);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var26);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var29);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var30);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var31);

  }

  public void test493() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest7.test493");


    org.jsecurity.session.mgt.DelegatingSession var0 = new org.jsecurity.session.mgt.DelegatingSession();
    org.jsecurity.session.mgt.DefaultSessionManager var1 = new org.jsecurity.session.mgt.DefaultSessionManager();
    org.jsecurity.session.mgt.eis.MemorySessionDAO var2 = new org.jsecurity.session.mgt.eis.MemorySessionDAO();
    org.jsecurity.cache.Cache var3 = var2.getActiveSessionsCache();
    org.jsecurity.cache.CacheManager var4 = var2.getCacheManager();
    org.jsecurity.cache.HashtableCacheManager var5 = new org.jsecurity.cache.HashtableCacheManager();
    org.jsecurity.cache.Cache var7 = var5.getCache("\u0000\u0000");
    var2.setActiveSessionsCache(var7);
    java.io.InputStream var10 = org.jsecurity.util.ClassUtils.getResourceAsStream("");
    java.lang.Object[] var11 = new java.lang.Object[] { var10};
    java.util.List var12 = org.jsecurity.util.CollectionUtils.asList(var11);
    org.jsecurity.authc.pam.ModularRealmAuthenticator var13 = new org.jsecurity.authc.pam.ModularRealmAuthenticator(var12);
    org.jsecurity.authc.pam.AllSuccessfulModularAuthenticationStrategy var14 = new org.jsecurity.authc.pam.AllSuccessfulModularAuthenticationStrategy();
    var13.setModularAuthenticationStrategy((org.jsecurity.authc.pam.ModularAuthenticationStrategy)var14);
    org.jsecurity.authz.SimpleAuthorizationInfo var16 = new org.jsecurity.authz.SimpleAuthorizationInfo();
    var16.addStringPermission("hi!");
    java.io.InputStream var20 = org.jsecurity.util.ClassUtils.getResourceAsStream("");
    java.lang.Object[] var21 = new java.lang.Object[] { var20};
    java.util.List var22 = org.jsecurity.util.CollectionUtils.asList(var21);
    var16.addRoles((java.util.Collection)var22);
    var13.setAuthenticationListeners((java.util.Collection)var22);
    org.jsecurity.realm.activedirectory.ActiveDirectoryRealm var25 = new org.jsecurity.realm.activedirectory.ActiveDirectoryRealm();
    var25.setPrincipalSuffix("");
    var13.setRealm((org.jsecurity.realm.Realm)var25);
    org.jsecurity.cache.HashtableCacheManager var29 = new org.jsecurity.cache.HashtableCacheManager();
    org.jsecurity.cache.Cache var31 = var29.getCache("\u0000\u0000");
    var25.setAuthorizationCache(var31);
    var2.setActiveSessionsCache(var31);
    org.jsecurity.session.mgt.SimpleSession var34 = new org.jsecurity.session.mgt.SimpleSession();
    java.io.Serializable var35 = var2.create((org.jsecurity.session.Session)var34);
    var1.setSessionDAO((org.jsecurity.session.mgt.eis.SessionDAO)var2);
    var0.setSessionManager((org.jsecurity.session.mgt.SessionManager)var1);
    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      java.util.Date var38 = var0.getStartTimestamp();
      fail("Expected exception of type org.jsecurity.session.UnknownSessionException");
    } catch (org.jsecurity.session.UnknownSessionException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var3);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var4);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var7);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var10);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var11);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var12);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var20);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var21);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var22);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var31);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var35 + "' != '" + "8e6f63eb-855c-4dbd-b634-6d0febeb199a"+ "'", var35.equals("8e6f63eb-855c-4dbd-b634-6d0febeb199a"));

  }

  public void test494() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest7.test494");


    org.jsecurity.mgt.DefaultSecurityManager var0 = new org.jsecurity.mgt.DefaultSecurityManager();
    java.io.InputStream var2 = org.jsecurity.util.ClassUtils.getResourceAsStream("");
    java.lang.Object[] var3 = new java.lang.Object[] { var2};
    java.util.List var4 = org.jsecurity.util.CollectionUtils.asList(var3);
    org.jsecurity.authc.pam.ModularRealmAuthenticator var5 = new org.jsecurity.authc.pam.ModularRealmAuthenticator(var4);
    org.jsecurity.authc.pam.AllSuccessfulModularAuthenticationStrategy var6 = new org.jsecurity.authc.pam.AllSuccessfulModularAuthenticationStrategy();
    var5.setModularAuthenticationStrategy((org.jsecurity.authc.pam.ModularAuthenticationStrategy)var6);
    org.jsecurity.authz.SimpleAuthorizationInfo var8 = new org.jsecurity.authz.SimpleAuthorizationInfo();
    var8.addStringPermission("hi!");
    java.io.InputStream var12 = org.jsecurity.util.ClassUtils.getResourceAsStream("");
    java.lang.Object[] var13 = new java.lang.Object[] { var12};
    java.util.List var14 = org.jsecurity.util.CollectionUtils.asList(var13);
    var8.addRoles((java.util.Collection)var14);
    var5.setAuthenticationListeners((java.util.Collection)var14);
    var0.setSessionListeners((java.util.Collection)var14);
    org.jsecurity.realm.text.TextConfigurationRealm var18 = new org.jsecurity.realm.text.TextConfigurationRealm();
    java.io.InputStream var20 = org.jsecurity.util.ClassUtils.getResourceAsStream("");
    java.lang.Object[] var21 = new java.lang.Object[] { var20};
    java.util.List var22 = org.jsecurity.util.CollectionUtils.asList(var21);
    org.jsecurity.authc.pam.ModularRealmAuthenticator var23 = new org.jsecurity.authc.pam.ModularRealmAuthenticator(var22);
    org.jsecurity.subject.SimplePrincipalCollection var25 = new org.jsecurity.subject.SimplePrincipalCollection((java.util.Collection)var22, "org.jsecurity.authz.UnauthorizedException: org.jsecurity.session.ExpiredSessionException: ");
    org.jsecurity.session.UnknownSessionException var30 = new org.jsecurity.session.UnknownSessionException("dd\uFFFD", (java.io.Serializable)100.0f);
    org.jsecurity.session.SessionException var32 = new org.jsecurity.session.SessionException("dd\uFFFD", (java.lang.Throwable)var30, (java.io.Serializable)0);
    org.jsecurity.session.SessionException var33 = new org.jsecurity.session.SessionException("dd\uFFFD", (java.lang.Throwable)var30);
    var25.add((java.lang.Object)var33, "org.jsecurity.config.ConfigurationException: dd\uFFFD");
    var18.onLogout((org.jsecurity.subject.PrincipalCollection)var25);
    org.jsecurity.authc.pam.FirstSuccessfulAuthenticationStrategy var37 = new org.jsecurity.authc.pam.FirstSuccessfulAuthenticationStrategy();
    org.jsecurity.authz.UnauthorizedException var39 = new org.jsecurity.authz.UnauthorizedException("org.jsecurity.config.ConfigurationException: dd\uFFFD");
    java.lang.Throwable[] var40 = var39.getSuppressed();
    java.util.List var41 = org.jsecurity.util.CollectionUtils.asList((java.lang.Object[])var40);
    org.jsecurity.authc.UsernamePasswordToken var42 = new org.jsecurity.authc.UsernamePasswordToken();
    java.lang.String var43 = var42.getUsername();
    java.net.InetAddress var44 = var42.getInetAddress();
    org.jsecurity.authc.AuthenticationInfo var45 = var37.beforeAllAttempts((java.util.Collection)var41, (org.jsecurity.authc.AuthenticationToken)var42);
    boolean[] var46 = var0.hasRoles((org.jsecurity.subject.PrincipalCollection)var25, var41);
    org.jsecurity.codec.CodecException var49 = new org.jsecurity.codec.CodecException("dd\uFFFD");
    org.jsecurity.authc.ConcurrentAccessException var50 = new org.jsecurity.authc.ConcurrentAccessException("org.jsecurity.authz.UnauthorizedException: org.jsecurity.session.ExpiredSessionException: ", (java.lang.Throwable)var49);
    org.jsecurity.subject.SimplePrincipalCollection var52 = new org.jsecurity.subject.SimplePrincipalCollection((java.lang.Object)var49, "");
    java.io.InputStream var54 = org.jsecurity.util.ClassUtils.getResourceAsStream("");
    java.lang.Object[] var55 = new java.lang.Object[] { var54};
    java.util.List var56 = org.jsecurity.util.CollectionUtils.asList(var55);
    org.jsecurity.authc.pam.ModularRealmAuthenticator var57 = new org.jsecurity.authc.pam.ModularRealmAuthenticator(var56);
    var52.addAll((java.util.Collection)var56, "\u0000\u0000");
    var0.setSessionListeners((java.util.Collection)var56);
    org.jsecurity.realm.activedirectory.ActiveDirectoryRealm var61 = new org.jsecurity.realm.activedirectory.ActiveDirectoryRealm();
    org.jsecurity.authc.credential.Sha256CredentialsMatcher var62 = new org.jsecurity.authc.credential.Sha256CredentialsMatcher();
    var61.setCredentialsMatcher((org.jsecurity.authc.credential.CredentialsMatcher)var62);
    java.lang.String var64 = var61.getAuthorizationCacheName();
    var61.setPrincipalSuffix("org.jsecurity.config.ConfigurationException: dd\uFFFD");
    org.jsecurity.realm.text.TextConfigurationRealm var67 = new org.jsecurity.realm.text.TextConfigurationRealm();
    java.io.InputStream var69 = org.jsecurity.util.ClassUtils.getResourceAsStream("");
    java.lang.Object[] var70 = new java.lang.Object[] { var69};
    java.util.List var71 = org.jsecurity.util.CollectionUtils.asList(var70);
    org.jsecurity.authc.pam.ModularRealmAuthenticator var72 = new org.jsecurity.authc.pam.ModularRealmAuthenticator(var71);
    org.jsecurity.subject.SimplePrincipalCollection var74 = new org.jsecurity.subject.SimplePrincipalCollection((java.util.Collection)var71, "org.jsecurity.authz.UnauthorizedException: org.jsecurity.session.ExpiredSessionException: ");
    org.jsecurity.session.UnknownSessionException var79 = new org.jsecurity.session.UnknownSessionException("dd\uFFFD", (java.io.Serializable)100.0f);
    org.jsecurity.session.SessionException var81 = new org.jsecurity.session.SessionException("dd\uFFFD", (java.lang.Throwable)var79, (java.io.Serializable)0);
    org.jsecurity.session.SessionException var82 = new org.jsecurity.session.SessionException("dd\uFFFD", (java.lang.Throwable)var79);
    var74.add((java.lang.Object)var82, "org.jsecurity.config.ConfigurationException: dd\uFFFD");
    var67.onLogout((org.jsecurity.subject.PrincipalCollection)var74);
    var61.onLogout((org.jsecurity.subject.PrincipalCollection)var74);
    java.util.Iterator var87 = var74.iterator();
    org.jsecurity.realm.activedirectory.ActiveDirectoryRealm var88 = new org.jsecurity.realm.activedirectory.ActiveDirectoryRealm();
    var88.init();
    var88.setSystemPassword("dd\uFFFD");
    org.jsecurity.authz.aop.GuestAnnotationHandler var92 = new org.jsecurity.authz.aop.GuestAnnotationHandler();
    java.lang.Class var93 = var92.getAnnotationClass();
    var88.setAuthenticationTokenClass(var93);
    java.util.Collection var95 = org.jsecurity.util.CollectionUtils.emptyCollection(var93);
    var0.checkPermissions((org.jsecurity.subject.PrincipalCollection)var74, var95);
    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      var0.setRememberMeDecryptionCipherKeyBase64("5dd0c65d-1422-49c2-becb-9e8dca619ab3");
      fail("Expected exception of type java.lang.IllegalStateException");
    } catch (java.lang.IllegalStateException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var2);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var3);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var4);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var12);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var13);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var14);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var20);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var21);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var22);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var40);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var41);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var43);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var44);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var45);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var46);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var54);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var55);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var56);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var64);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var69);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var70);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var71);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var87);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var93);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var95);

  }

  public void test495() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest7.test495");


    org.jsecurity.authc.pam.UnsupportedTokenException var1 = new org.jsecurity.authc.pam.UnsupportedTokenException();
    org.jsecurity.authc.UnknownAccountException var2 = new org.jsecurity.authc.UnknownAccountException((java.lang.Throwable)var1);
    org.jsecurity.authc.AccountException var3 = new org.jsecurity.authc.AccountException((java.lang.Throwable)var2);
    org.jsecurity.mgt.DefaultSecurityManager var4 = new org.jsecurity.mgt.DefaultSecurityManager();
    java.io.InputStream var6 = org.jsecurity.util.ClassUtils.getResourceAsStream("");
    java.lang.Object[] var7 = new java.lang.Object[] { var6};
    java.util.List var8 = org.jsecurity.util.CollectionUtils.asList(var7);
    org.jsecurity.authc.pam.ModularRealmAuthenticator var9 = new org.jsecurity.authc.pam.ModularRealmAuthenticator(var8);
    org.jsecurity.authc.pam.AllSuccessfulModularAuthenticationStrategy var10 = new org.jsecurity.authc.pam.AllSuccessfulModularAuthenticationStrategy();
    var9.setModularAuthenticationStrategy((org.jsecurity.authc.pam.ModularAuthenticationStrategy)var10);
    org.jsecurity.authz.SimpleAuthorizationInfo var12 = new org.jsecurity.authz.SimpleAuthorizationInfo();
    var12.addStringPermission("hi!");
    java.io.InputStream var16 = org.jsecurity.util.ClassUtils.getResourceAsStream("");
    java.lang.Object[] var17 = new java.lang.Object[] { var16};
    java.util.List var18 = org.jsecurity.util.CollectionUtils.asList(var17);
    var12.addRoles((java.util.Collection)var18);
    var9.setAuthenticationListeners((java.util.Collection)var18);
    var4.setSessionListeners((java.util.Collection)var18);
    org.jsecurity.realm.text.TextConfigurationRealm var22 = new org.jsecurity.realm.text.TextConfigurationRealm();
    java.io.InputStream var24 = org.jsecurity.util.ClassUtils.getResourceAsStream("");
    java.lang.Object[] var25 = new java.lang.Object[] { var24};
    java.util.List var26 = org.jsecurity.util.CollectionUtils.asList(var25);
    org.jsecurity.authc.pam.ModularRealmAuthenticator var27 = new org.jsecurity.authc.pam.ModularRealmAuthenticator(var26);
    org.jsecurity.subject.SimplePrincipalCollection var29 = new org.jsecurity.subject.SimplePrincipalCollection((java.util.Collection)var26, "org.jsecurity.authz.UnauthorizedException: org.jsecurity.session.ExpiredSessionException: ");
    org.jsecurity.session.UnknownSessionException var34 = new org.jsecurity.session.UnknownSessionException("dd\uFFFD", (java.io.Serializable)100.0f);
    org.jsecurity.session.SessionException var36 = new org.jsecurity.session.SessionException("dd\uFFFD", (java.lang.Throwable)var34, (java.io.Serializable)0);
    org.jsecurity.session.SessionException var37 = new org.jsecurity.session.SessionException("dd\uFFFD", (java.lang.Throwable)var34);
    var29.add((java.lang.Object)var37, "org.jsecurity.config.ConfigurationException: dd\uFFFD");
    var22.onLogout((org.jsecurity.subject.PrincipalCollection)var29);
    org.jsecurity.authc.pam.FirstSuccessfulAuthenticationStrategy var41 = new org.jsecurity.authc.pam.FirstSuccessfulAuthenticationStrategy();
    org.jsecurity.authz.UnauthorizedException var43 = new org.jsecurity.authz.UnauthorizedException("org.jsecurity.config.ConfigurationException: dd\uFFFD");
    java.lang.Throwable[] var44 = var43.getSuppressed();
    java.util.List var45 = org.jsecurity.util.CollectionUtils.asList((java.lang.Object[])var44);
    org.jsecurity.authc.UsernamePasswordToken var46 = new org.jsecurity.authc.UsernamePasswordToken();
    java.lang.String var47 = var46.getUsername();
    java.net.InetAddress var48 = var46.getInetAddress();
    org.jsecurity.authc.AuthenticationInfo var49 = var41.beforeAllAttempts((java.util.Collection)var45, (org.jsecurity.authc.AuthenticationToken)var46);
    boolean[] var50 = var4.hasRoles((org.jsecurity.subject.PrincipalCollection)var29, var45);
    org.jsecurity.codec.CodecException var53 = new org.jsecurity.codec.CodecException("dd\uFFFD");
    org.jsecurity.authc.ConcurrentAccessException var54 = new org.jsecurity.authc.ConcurrentAccessException("org.jsecurity.authz.UnauthorizedException: org.jsecurity.session.ExpiredSessionException: ", (java.lang.Throwable)var53);
    org.jsecurity.subject.SimplePrincipalCollection var56 = new org.jsecurity.subject.SimplePrincipalCollection((java.lang.Object)var53, "");
    java.io.InputStream var58 = org.jsecurity.util.ClassUtils.getResourceAsStream("");
    java.lang.Object[] var59 = new java.lang.Object[] { var58};
    java.util.List var60 = org.jsecurity.util.CollectionUtils.asList(var59);
    org.jsecurity.authc.pam.ModularRealmAuthenticator var61 = new org.jsecurity.authc.pam.ModularRealmAuthenticator(var60);
    var56.addAll((java.util.Collection)var60, "\u0000\u0000");
    var4.setSessionListeners((java.util.Collection)var60);
    org.jsecurity.authc.SimpleAccount var66 = new org.jsecurity.authc.SimpleAccount((java.lang.Object)var3, (java.lang.Object)var4, "ZGT/");
    org.jsecurity.util.InstantiationException var67 = new org.jsecurity.util.InstantiationException("jsecurity-activeSessionCache", (java.lang.Throwable)var3);
    org.jsecurity.authz.HostUnauthorizedException var68 = new org.jsecurity.authz.HostUnauthorizedException((java.lang.Throwable)var67);
    org.jsecurity.session.UnknownSessionException var69 = new org.jsecurity.session.UnknownSessionException((java.lang.Throwable)var68);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var6);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var7);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var8);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var16);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var17);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var18);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var24);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var25);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var26);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var44);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var45);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var47);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var48);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var49);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var50);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var58);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var59);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var60);

  }

  public void test496() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest7.test496");


    org.jsecurity.crypto.hash.Md5Hash var3 = new org.jsecurity.crypto.hash.Md5Hash((java.lang.Object)"953e234d-cb85-4bb2-8041-e376f6ba7f9c", (java.lang.Object)"ab2c262d-859b-4165-8fa9-5d431a38dfb0", 10);

  }

  public void test497() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest7.test497");


    org.jsecurity.session.UnknownSessionException var6 = new org.jsecurity.session.UnknownSessionException("dd\uFFFD", (java.io.Serializable)100.0f);
    org.jsecurity.config.ConfigurationException var7 = new org.jsecurity.config.ConfigurationException("dd\uFFFD", (java.lang.Throwable)var6);
    org.jsecurity.session.ExpiredSessionException var9 = new org.jsecurity.session.ExpiredSessionException("", (java.lang.Throwable)var7, (java.io.Serializable)true);
    org.jsecurity.authc.pam.UnsupportedTokenException var10 = new org.jsecurity.authc.pam.UnsupportedTokenException((java.lang.Throwable)var9);
    org.jsecurity.authc.AccountException var11 = new org.jsecurity.authc.AccountException((java.lang.Throwable)var10);
    org.jsecurity.authz.UnauthorizedException var12 = new org.jsecurity.authz.UnauthorizedException("a2b823b1e72eae2b727289df8a00a89df8a0bab6ad8a89c4c5c7a9b62a270000", (java.lang.Throwable)var11);
    org.jsecurity.codec.CodecException var15 = new org.jsecurity.codec.CodecException("dd\uFFFD");
    org.jsecurity.authc.ConcurrentAccessException var16 = new org.jsecurity.authc.ConcurrentAccessException("org.jsecurity.authz.UnauthorizedException: org.jsecurity.session.ExpiredSessionException: ", (java.lang.Throwable)var15);
    org.jsecurity.subject.SimplePrincipalCollection var18 = new org.jsecurity.subject.SimplePrincipalCollection((java.lang.Object)var15, "");
    java.io.InputStream var20 = org.jsecurity.util.ClassUtils.getResourceAsStream("");
    java.lang.Object[] var21 = new java.lang.Object[] { var20};
    java.util.List var22 = org.jsecurity.util.CollectionUtils.asList(var21);
    org.jsecurity.authc.pam.ModularRealmAuthenticator var23 = new org.jsecurity.authc.pam.ModularRealmAuthenticator(var22);
    org.jsecurity.authc.pam.AllSuccessfulModularAuthenticationStrategy var24 = new org.jsecurity.authc.pam.AllSuccessfulModularAuthenticationStrategy();
    var23.setModularAuthenticationStrategy((org.jsecurity.authc.pam.ModularAuthenticationStrategy)var24);
    org.jsecurity.authz.SimpleAuthorizationInfo var26 = new org.jsecurity.authz.SimpleAuthorizationInfo();
    var26.addStringPermission("hi!");
    java.io.InputStream var30 = org.jsecurity.util.ClassUtils.getResourceAsStream("");
    java.lang.Object[] var31 = new java.lang.Object[] { var30};
    java.util.List var32 = org.jsecurity.util.CollectionUtils.asList(var31);
    var26.addRoles((java.util.Collection)var32);
    var23.setAuthenticationListeners((java.util.Collection)var32);
    org.jsecurity.realm.activedirectory.ActiveDirectoryRealm var35 = new org.jsecurity.realm.activedirectory.ActiveDirectoryRealm();
    var35.setPrincipalSuffix("");
    var23.setRealm((org.jsecurity.realm.Realm)var35);
    org.jsecurity.authc.pam.FirstSuccessfulAuthenticationStrategy var39 = new org.jsecurity.authc.pam.FirstSuccessfulAuthenticationStrategy();
    org.jsecurity.authz.UnauthorizedException var41 = new org.jsecurity.authz.UnauthorizedException("org.jsecurity.config.ConfigurationException: dd\uFFFD");
    java.lang.Throwable[] var42 = var41.getSuppressed();
    java.util.List var43 = org.jsecurity.util.CollectionUtils.asList((java.lang.Object[])var42);
    org.jsecurity.authc.UsernamePasswordToken var44 = new org.jsecurity.authc.UsernamePasswordToken();
    java.lang.String var45 = var44.getUsername();
    java.net.InetAddress var46 = var44.getInetAddress();
    org.jsecurity.authc.AuthenticationInfo var47 = var39.beforeAllAttempts((java.util.Collection)var43, (org.jsecurity.authc.AuthenticationToken)var44);
    var23.setModularAuthenticationStrategy((org.jsecurity.authc.pam.ModularAuthenticationStrategy)var39);
    org.jsecurity.authc.SimpleAccount var49 = new org.jsecurity.authc.SimpleAccount((org.jsecurity.subject.PrincipalCollection)var18, (java.lang.Object)var23);
    java.util.Collection var50 = var49.getObjectPermissions();
    java.util.Collection var51 = var49.getObjectPermissions();
    org.jsecurity.codec.CodecException var54 = new org.jsecurity.codec.CodecException("dd\uFFFD");
    org.jsecurity.authc.ConcurrentAccessException var55 = new org.jsecurity.authc.ConcurrentAccessException("org.jsecurity.authz.UnauthorizedException: org.jsecurity.session.ExpiredSessionException: ", (java.lang.Throwable)var54);
    org.jsecurity.subject.SimplePrincipalCollection var57 = new org.jsecurity.subject.SimplePrincipalCollection((java.lang.Object)var54, "");
    org.jsecurity.authc.pam.FirstSuccessfulAuthenticationStrategy var58 = new org.jsecurity.authc.pam.FirstSuccessfulAuthenticationStrategy();
    org.jsecurity.authz.UnauthorizedException var60 = new org.jsecurity.authz.UnauthorizedException("org.jsecurity.config.ConfigurationException: dd\uFFFD");
    java.lang.Throwable[] var61 = var60.getSuppressed();
    java.util.List var62 = org.jsecurity.util.CollectionUtils.asList((java.lang.Object[])var61);
    org.jsecurity.authc.UsernamePasswordToken var63 = new org.jsecurity.authc.UsernamePasswordToken();
    java.lang.String var64 = var63.getUsername();
    java.net.InetAddress var65 = var63.getInetAddress();
    org.jsecurity.authc.AuthenticationInfo var66 = var58.beforeAllAttempts((java.util.Collection)var62, (org.jsecurity.authc.AuthenticationToken)var63);
    org.jsecurity.session.UnknownSessionException var71 = new org.jsecurity.session.UnknownSessionException("dd\uFFFD", (java.io.Serializable)100.0f);
    org.jsecurity.subject.SubjectException var72 = new org.jsecurity.subject.SubjectException("dd\uFFFD", (java.lang.Throwable)var71);
    org.jsecurity.io.SerializationException var73 = new org.jsecurity.io.SerializationException("", (java.lang.Throwable)var72);
    java.lang.Throwable[] var74 = var72.getSuppressed();
    java.util.Set var75 = org.jsecurity.util.CollectionUtils.asSet((java.lang.Object[])var74);
    org.jsecurity.authc.SimpleAccount var76 = new org.jsecurity.authc.SimpleAccount((org.jsecurity.subject.PrincipalCollection)var57, (java.lang.Object)var62, var75);
    var49.setObjectPermissions(var75);
    org.jsecurity.session.UnknownSessionException var78 = new org.jsecurity.session.UnknownSessionException("b598ff3d-5685-4491-8ee6-585d37adb1db", (java.lang.Throwable)var12, (java.io.Serializable)var49);
    java.lang.String var79 = var49.toString();
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var20);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var21);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var22);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var30);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var31);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var32);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var42);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var43);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var45);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var46);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var47);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var50);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var51);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var61);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var62);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var64);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var65);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var66);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var74);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var75);

  }

  public void test498() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest7.test498");


    org.jsecurity.authz.ModularRealmAuthorizer var0 = new org.jsecurity.authz.ModularRealmAuthorizer();
    java.io.InputStream var2 = org.jsecurity.util.ClassUtils.getResourceAsStream("");
    java.lang.Object[] var3 = new java.lang.Object[] { var2};
    java.util.List var4 = org.jsecurity.util.CollectionUtils.asList(var3);
    org.jsecurity.authc.pam.ModularRealmAuthenticator var5 = new org.jsecurity.authc.pam.ModularRealmAuthenticator(var4);
    org.jsecurity.subject.SimplePrincipalCollection var7 = new org.jsecurity.subject.SimplePrincipalCollection((java.util.Collection)var4, "org.jsecurity.authz.UnauthorizedException: org.jsecurity.session.ExpiredSessionException: ");
    org.jsecurity.session.UnknownSessionException var12 = new org.jsecurity.session.UnknownSessionException("dd\uFFFD", (java.io.Serializable)100.0f);
    org.jsecurity.session.SessionException var14 = new org.jsecurity.session.SessionException("dd\uFFFD", (java.lang.Throwable)var12, (java.io.Serializable)0);
    org.jsecurity.session.SessionException var15 = new org.jsecurity.session.SessionException("dd\uFFFD", (java.lang.Throwable)var12);
    var7.add((java.lang.Object)var15, "org.jsecurity.config.ConfigurationException: dd\uFFFD");
    java.util.Set var18 = var7.asSet();
    var0.setRealms((java.util.Collection)var18);
    org.jsecurity.authz.UnauthorizedException var21 = new org.jsecurity.authz.UnauthorizedException("org.jsecurity.config.ConfigurationException: dd\uFFFD");
    java.lang.Throwable[] var22 = var21.getSuppressed();
    java.util.Set var23 = org.jsecurity.util.CollectionUtils.asSet((java.lang.Object[])var22);
    var0.setRealms((java.util.Collection)var23);
    org.jsecurity.realm.text.TextConfigurationRealm var25 = new org.jsecurity.realm.text.TextConfigurationRealm();
    org.jsecurity.realm.text.TextConfigurationRealm var26 = new org.jsecurity.realm.text.TextConfigurationRealm();
    java.io.InputStream var28 = org.jsecurity.util.ClassUtils.getResourceAsStream("");
    java.lang.Object[] var29 = new java.lang.Object[] { var28};
    java.util.List var30 = org.jsecurity.util.CollectionUtils.asList(var29);
    org.jsecurity.authc.pam.ModularRealmAuthenticator var31 = new org.jsecurity.authc.pam.ModularRealmAuthenticator(var30);
    org.jsecurity.subject.SimplePrincipalCollection var33 = new org.jsecurity.subject.SimplePrincipalCollection((java.util.Collection)var30, "org.jsecurity.authz.UnauthorizedException: org.jsecurity.session.ExpiredSessionException: ");
    org.jsecurity.session.UnknownSessionException var38 = new org.jsecurity.session.UnknownSessionException("dd\uFFFD", (java.io.Serializable)100.0f);
    org.jsecurity.session.SessionException var40 = new org.jsecurity.session.SessionException("dd\uFFFD", (java.lang.Throwable)var38, (java.io.Serializable)0);
    org.jsecurity.session.SessionException var41 = new org.jsecurity.session.SessionException("dd\uFFFD", (java.lang.Throwable)var38);
    var33.add((java.lang.Object)var41, "org.jsecurity.config.ConfigurationException: dd\uFFFD");
    var26.onLogout((org.jsecurity.subject.PrincipalCollection)var33);
    java.util.Collection var46 = var33.fromRealm("\u0000\u0000\u0000");
    var25.onLogout((org.jsecurity.subject.PrincipalCollection)var33);
    org.jsecurity.authz.aop.RoleAnnotationMethodInterceptor var48 = new org.jsecurity.authz.aop.RoleAnnotationMethodInterceptor();
    org.jsecurity.aop.AnnotationHandler var49 = var48.getHandler();
    java.lang.Class var50 = var49.getAnnotationClass();
    java.util.Collection var51 = var33.byType(var50);
    org.jsecurity.realm.jndi.JndiRealmFactory var52 = new org.jsecurity.realm.jndi.JndiRealmFactory();
    org.jsecurity.authc.ExpiredCredentialsException var54 = new org.jsecurity.authc.ExpiredCredentialsException();
    org.jsecurity.session.ExpiredSessionException var55 = new org.jsecurity.session.ExpiredSessionException("", (java.lang.Throwable)var54);
    java.lang.Throwable[] var56 = var55.getSuppressed();
    java.util.List var57 = org.jsecurity.util.CollectionUtils.asList((java.lang.Object[])var56);
    var52.setJndiNames((java.util.Collection)var57);
    var0.checkPermissions((org.jsecurity.subject.PrincipalCollection)var33, (java.util.Collection)var57);
    java.lang.String[] var60 = org.jsecurity.util.StringUtils.toStringArray((java.util.Collection)var57);
    java.util.Set var61 = org.jsecurity.util.CollectionUtils.asSet((java.lang.Object[])var60);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var2);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var3);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var4);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var18);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var22);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var23);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var28);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var29);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var30);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var46);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var49);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var50);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var51);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var56);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var57);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var60);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var61);

  }

  public void test499() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest7.test499");


    org.jsecurity.session.mgt.DefaultSessionManager var1 = new org.jsecurity.session.mgt.DefaultSessionManager();
    org.jsecurity.mgt.DefaultSecurityManager var2 = new org.jsecurity.mgt.DefaultSecurityManager();
    org.jsecurity.authz.permission.WildcardPermissionResolver var3 = new org.jsecurity.authz.permission.WildcardPermissionResolver();
    var2.setPermissionResolver((org.jsecurity.authz.permission.PermissionResolver)var3);
    org.jsecurity.cache.CacheManager var5 = var2.getCacheManager();
    var1.setCacheManager(var5);
    long var7 = var1.getSessionValidationInterval();
    boolean var8 = var1.isSessionValidationSchedulerEnabled();
    var1.destroy();
    org.jsecurity.session.mgt.SimpleSession var10 = new org.jsecurity.session.mgt.SimpleSession();
    org.jsecurity.io.SerializationException var13 = new org.jsecurity.io.SerializationException("org.jsecurity.config.ConfigurationException: dd\uFFFD");
    org.jsecurity.authc.AccountException var14 = new org.jsecurity.authc.AccountException("a2b823b1e72eae2b727289df8a00a89df8a0bab6ad8a89c4c5c7a9b62a270000", (java.lang.Throwable)var13);
    var10.setId((java.io.Serializable)"a2b823b1e72eae2b727289df8a00a89df8a0bab6ad8a89c4c5c7a9b62a270000");
    org.jsecurity.config.ReflectionBuilder var16 = new org.jsecurity.config.ReflectionBuilder();
    org.jsecurity.config.ReflectionBuilder var17 = new org.jsecurity.config.ReflectionBuilder();
    org.jsecurity.io.IniResource var18 = new org.jsecurity.io.IniResource();
    var18.setCharsetName("org.jsecurity.authz.UnauthorizedException: org.jsecurity.session.ExpiredSessionException: ");
    java.util.Map var21 = var18.getSections();
    java.util.Map var22 = var17.buildObjects(var21);
    org.jsecurity.config.ReflectionBuilder var23 = new org.jsecurity.config.ReflectionBuilder();
    org.jsecurity.io.IniResource var24 = new org.jsecurity.io.IniResource();
    var24.setCharsetName("org.jsecurity.authz.UnauthorizedException: org.jsecurity.session.ExpiredSessionException: ");
    java.util.Map var27 = var24.getSections();
    java.util.Map var28 = var23.buildObjects(var27);
    java.util.Map var29 = var17.buildObjects(var28);
    java.util.Map var30 = var16.buildObjects(var29);
    var10.setAttributes(var30);
    java.net.InetAddress var32 = var10.getHostAddress();
    java.io.Serializable var33 = var1.start(var32);
    org.jsecurity.authz.HostUnauthorizedException var34 = new org.jsecurity.authz.HostUnauthorizedException(var32);
    org.jsecurity.authc.ExcessiveAttemptsException var35 = new org.jsecurity.authc.ExcessiveAttemptsException((java.lang.Throwable)var34);
    org.jsecurity.authz.AuthorizationException var36 = new org.jsecurity.authz.AuthorizationException("953e234d-cb85-4bb2-8041-e376f6ba7f9c", (java.lang.Throwable)var34);
    org.jsecurity.cache.CacheException var37 = new org.jsecurity.cache.CacheException((java.lang.Throwable)var34);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var5);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var7 == 3600000L);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var8 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var21);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var22);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var27);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var28);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var29);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var30);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var32);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var33 + "' != '" + "9629cae6-9980-450d-81b4-ae91eaa5d8d7"+ "'", var33.equals("9629cae6-9980-450d-81b4-ae91eaa5d8d7"));

  }

  public void test500() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest7.test500");


    org.jsecurity.codec.CodecException var2 = new org.jsecurity.codec.CodecException("dd\uFFFD");
    org.jsecurity.authc.ConcurrentAccessException var3 = new org.jsecurity.authc.ConcurrentAccessException("org.jsecurity.authz.UnauthorizedException: org.jsecurity.session.ExpiredSessionException: ", (java.lang.Throwable)var2);
    org.jsecurity.subject.SimplePrincipalCollection var5 = new org.jsecurity.subject.SimplePrincipalCollection((java.lang.Object)var2, "");
    java.io.InputStream var7 = org.jsecurity.util.ClassUtils.getResourceAsStream("");
    java.lang.Object[] var8 = new java.lang.Object[] { var7};
    java.util.List var9 = org.jsecurity.util.CollectionUtils.asList(var8);
    org.jsecurity.authc.pam.ModularRealmAuthenticator var10 = new org.jsecurity.authc.pam.ModularRealmAuthenticator(var9);
    var5.addAll((java.util.Collection)var9, "\u0000\u0000");
    java.io.InputStream var14 = org.jsecurity.util.ClassUtils.getResourceAsStream("");
    java.lang.Object[] var15 = new java.lang.Object[] { var14};
    java.util.List var16 = org.jsecurity.util.CollectionUtils.asList(var15);
    org.jsecurity.authc.pam.ModularRealmAuthenticator var17 = new org.jsecurity.authc.pam.ModularRealmAuthenticator(var16);
    var5.addAll((java.util.Collection)var16, "\u0000\u0000");
    org.jsecurity.realm.SimpleAccountRealm var21 = new org.jsecurity.realm.SimpleAccountRealm("hi!");
    java.lang.Class var22 = var21.getAuthenticationTokenClass();
    java.util.Collection var23 = org.jsecurity.util.CollectionUtils.emptyCollection(var22);
    java.lang.Object var24 = org.jsecurity.util.ClassUtils.newInstance(var22);
    java.util.Collection var25 = var5.byType(var22);
    org.jsecurity.authc.ExpiredCredentialsException var27 = new org.jsecurity.authc.ExpiredCredentialsException();
    org.jsecurity.session.ExpiredSessionException var28 = new org.jsecurity.session.ExpiredSessionException("", (java.lang.Throwable)var27);
    java.lang.Throwable[] var29 = var28.getSuppressed();
    java.lang.Object var30 = org.jsecurity.util.ClassUtils.newInstance(var22, (java.lang.Object[])var29);
    java.util.List var31 = org.jsecurity.util.CollectionUtils.asList((java.lang.Object[])var29);
    org.jsecurity.authc.pam.ModularRealmAuthenticator var32 = new org.jsecurity.authc.pam.ModularRealmAuthenticator(var31);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var7);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var8);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var9);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var14);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var15);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var16);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var22);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var23);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var24);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var25);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var29);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var30);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var31);

  }

}
