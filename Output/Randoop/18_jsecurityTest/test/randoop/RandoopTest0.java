package randoop;

import junit.framework.*;

public class RandoopTest0 extends TestCase {

  public static boolean debug = false;

  public void test1() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest0.test1");


    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      java.lang.Class var1 = org.jsecurity.util.ClassUtils.forName("hi!");
      fail("Expected exception of type org.jsecurity.util.UnknownClassException");
    } catch (org.jsecurity.util.UnknownClassException e) {
      // Expected exception.
    }

  }

  public void test2() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest0.test2");


    org.jsecurity.cache.ehcache.EhCacheManager var0 = new org.jsecurity.cache.ehcache.EhCacheManager();
    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      org.jsecurity.crypto.hash.Md5Hash var3 = new org.jsecurity.crypto.hash.Md5Hash((java.lang.Object)var0, (java.lang.Object)'#', 0);
      fail("Expected exception of type org.jsecurity.codec.CodecException");
    } catch (org.jsecurity.codec.CodecException e) {
      // Expected exception.
    }

  }

  public void test3() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest0.test3");


    boolean var1 = org.jsecurity.util.StringUtils.hasText("hi!");
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var1 == true);

  }

  public void test4() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest0.test4");


    java.lang.String var1 = org.jsecurity.codec.Base64.decodeToString("");
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var1 + "' != '" + ""+ "'", var1.equals(""));

  }

  public void test5() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest0.test5");


    org.jsecurity.util.CollectionUtils var0 = new org.jsecurity.util.CollectionUtils();

  }

  public void test6() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest0.test6");


    org.jsecurity.session.UnknownSessionException var3 = new org.jsecurity.session.UnknownSessionException("dd\uFFFD", (java.io.Serializable)100.0f);
    org.jsecurity.session.SessionException var5 = new org.jsecurity.session.SessionException("dd\uFFFD", (java.lang.Throwable)var3, (java.io.Serializable)0);
    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      org.jsecurity.crypto.hash.Sha512Hash var6 = new org.jsecurity.crypto.hash.Sha512Hash((java.lang.Object)var5);
      fail("Expected exception of type org.jsecurity.codec.CodecException");
    } catch (org.jsecurity.codec.CodecException e) {
      // Expected exception.
    }

  }

  public void test7() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest0.test7");


    org.jsecurity.session.UnknownSessionException var3 = new org.jsecurity.session.UnknownSessionException("dd\uFFFD", (java.io.Serializable)100.0f);
    org.jsecurity.subject.SubjectException var4 = new org.jsecurity.subject.SubjectException("dd\uFFFD", (java.lang.Throwable)var3);
    org.jsecurity.authc.IncorrectCredentialsException var5 = new org.jsecurity.authc.IncorrectCredentialsException((java.lang.Throwable)var3);

  }

  public void test8() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest0.test8");


    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      org.jsecurity.crypto.hash.Sha512Hash var2 = new org.jsecurity.crypto.hash.Sha512Hash((java.lang.Object)0, (java.lang.Object)100.0d);
      fail("Expected exception of type org.jsecurity.codec.CodecException");
    } catch (org.jsecurity.codec.CodecException e) {
      // Expected exception.
    }

  }

  public void test9() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest0.test9");


    java.lang.String[] var1 = org.jsecurity.util.StringUtils.splitKeyValue("");
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var1);

  }

  public void test10() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest0.test10");


    byte[] var3 = new byte[] { (byte)100, (byte)100, (byte)(-1)};
    java.lang.String var4 = org.jsecurity.codec.CodecSupport.toString(var3);
    byte[] var5 = org.jsecurity.codec.Base64.encode(var3);
    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      byte[] var6 = org.jsecurity.codec.Hex.decode(var5);
      fail("Expected exception of type java.lang.IllegalArgumentException");
    } catch (java.lang.IllegalArgumentException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var3);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var4 + "' != '" + "dd\uFFFD"+ "'", var4.equals("dd\uFFFD"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var5);

  }

  public void test11() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest0.test11");


    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      java.lang.Class var1 = org.jsecurity.util.ClassUtils.forName("");
      fail("Expected exception of type org.jsecurity.util.UnknownClassException");
    } catch (org.jsecurity.util.UnknownClassException e) {
      // Expected exception.
    }

  }

  public void test12() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest0.test12");


    org.jsecurity.crypto.BlowfishCipher var1 = new org.jsecurity.crypto.BlowfishCipher();
    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      org.jsecurity.crypto.hash.Sha384Hash var3 = new org.jsecurity.crypto.hash.Sha384Hash((java.lang.Object)(short)10, (java.lang.Object)var1, (-1));
      fail("Expected exception of type org.jsecurity.codec.CodecException");
    } catch (org.jsecurity.codec.CodecException e) {
      // Expected exception.
    }

  }

  public void test13() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest0.test13");


    org.jsecurity.session.InvalidSessionException var1 = new org.jsecurity.session.InvalidSessionException("org.jsecurity.config.ConfigurationException: dd\uFFFD");

  }

  public void test14() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest0.test14");


    byte[] var3 = new byte[] { (byte)100, (byte)100, (byte)(-1)};
    java.lang.String var4 = org.jsecurity.codec.CodecSupport.toString(var3);
    byte[] var5 = org.jsecurity.codec.Base64.encode(var3);
    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      java.lang.String var7 = org.jsecurity.codec.CodecSupport.toString(var5, "org.jsecurity.config.ConfigurationException: dd\uFFFD");
      fail("Expected exception of type org.jsecurity.codec.CodecException");
    } catch (org.jsecurity.codec.CodecException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var3);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var4 + "' != '" + "dd\uFFFD"+ "'", var4.equals("dd\uFFFD"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var5);

  }

  public void test15() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest0.test15");


    org.jsecurity.authc.SimpleAccount var0 = new org.jsecurity.authc.SimpleAccount();
    var0.setCredentialsExpired(false);
    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      org.jsecurity.crypto.hash.Sha256Hash var3 = new org.jsecurity.crypto.hash.Sha256Hash((java.lang.Object)var0);
      fail("Expected exception of type org.jsecurity.codec.CodecException");
    } catch (org.jsecurity.codec.CodecException e) {
      // Expected exception.
    }

  }

  public void test16() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest0.test16");


    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      org.jsecurity.crypto.hash.Sha256Hash var1 = org.jsecurity.crypto.hash.Sha256Hash.fromHexString("org.jsecurity.config.ConfigurationException: dd\uFFFD");
      fail("Expected exception of type java.lang.IllegalArgumentException");
    } catch (java.lang.IllegalArgumentException e) {
      // Expected exception.
    }

  }

  public void test17() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest0.test17");


    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      org.jsecurity.crypto.hash.Sha256Hash var1 = org.jsecurity.crypto.hash.Sha256Hash.fromHexString("dd\uFFFD");
      fail("Expected exception of type java.lang.IllegalArgumentException");
    } catch (java.lang.IllegalArgumentException e) {
      // Expected exception.
    }

  }

  public void test18() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest0.test18");


    boolean var1 = org.jsecurity.util.StringUtils.hasText("dd\uFFFD");
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var1 == true);

  }

  public void test19() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest0.test19");


    org.jsecurity.session.UnknownSessionException var3 = new org.jsecurity.session.UnknownSessionException("dd\uFFFD", (java.io.Serializable)100.0f);
    org.jsecurity.subject.SubjectException var4 = new org.jsecurity.subject.SubjectException("dd\uFFFD", (java.lang.Throwable)var3);
    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      org.jsecurity.crypto.hash.Md5Hash var7 = new org.jsecurity.crypto.hash.Md5Hash((java.lang.Object)"dd\uFFFD", (java.lang.Object)100L, 1);
      fail("Expected exception of type org.jsecurity.codec.CodecException");
    } catch (org.jsecurity.codec.CodecException e) {
      // Expected exception.
    }

  }

  public void test20() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest0.test20");


    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      org.jsecurity.crypto.hash.Sha384Hash var1 = org.jsecurity.crypto.hash.Sha384Hash.fromHexString("org.jsecurity.config.ConfigurationException: dd\uFFFD");
      fail("Expected exception of type java.lang.IllegalArgumentException");
    } catch (java.lang.IllegalArgumentException e) {
      // Expected exception.
    }

  }

  public void test21() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest0.test21");


    org.jsecurity.io.IniResource var0 = new org.jsecurity.io.IniResource();
    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      var0.load("");
      fail("Expected exception of type org.jsecurity.io.ResourceException");
    } catch (org.jsecurity.io.ResourceException e) {
      // Expected exception.
    }

  }

  public void test22() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest0.test22");


    byte[] var1 = org.jsecurity.codec.Base64.decode("hi!");
    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      java.lang.String var3 = org.jsecurity.codec.CodecSupport.toString(var1, "org.jsecurity.config.ConfigurationException: dd\uFFFD");
      fail("Expected exception of type org.jsecurity.codec.CodecException");
    } catch (org.jsecurity.codec.CodecException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var1);

  }

  public void test23() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest0.test23");


    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      org.jsecurity.crypto.hash.Sha384Hash var1 = org.jsecurity.crypto.hash.Sha384Hash.fromHexString("hi!");
      fail("Expected exception of type java.lang.IllegalArgumentException");
    } catch (java.lang.IllegalArgumentException e) {
      // Expected exception.
    }

  }

  public void test24() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest0.test24");


    org.jsecurity.util.ClassUtils var0 = new org.jsecurity.util.ClassUtils();

  }

  public void test25() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest0.test25");


    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      org.jsecurity.crypto.hash.Sha1Hash var1 = new org.jsecurity.crypto.hash.Sha1Hash((java.lang.Object)'#');
      fail("Expected exception of type org.jsecurity.codec.CodecException");
    } catch (org.jsecurity.codec.CodecException e) {
      // Expected exception.
    }

  }

  public void test26() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest0.test26");


    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      byte[] var1 = org.jsecurity.codec.Hex.decode("hi!");
      fail("Expected exception of type java.lang.IllegalArgumentException");
    } catch (java.lang.IllegalArgumentException e) {
      // Expected exception.
    }

  }

  public void test27() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest0.test27");


    org.jsecurity.session.UnknownSessionException var4 = new org.jsecurity.session.UnknownSessionException("dd\uFFFD", (java.io.Serializable)100.0f);
    org.jsecurity.session.SessionException var6 = new org.jsecurity.session.SessionException("dd\uFFFD", (java.lang.Throwable)var4, (java.io.Serializable)0);
    org.jsecurity.session.SessionException var7 = new org.jsecurity.session.SessionException("dd\uFFFD", (java.lang.Throwable)var4);
    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      org.jsecurity.crypto.hash.Sha512Hash var9 = new org.jsecurity.crypto.hash.Sha512Hash((java.lang.Object)"dd\uFFFD", (java.lang.Object)0L);
      fail("Expected exception of type org.jsecurity.codec.CodecException");
    } catch (org.jsecurity.codec.CodecException e) {
      // Expected exception.
    }

  }

  public void test28() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest0.test28");


    org.jsecurity.io.ResourceException var1 = new org.jsecurity.io.ResourceException("org.jsecurity.config.ConfigurationException: dd\uFFFD");

  }

  public void test29() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest0.test29");


    org.jsecurity.authz.UnauthenticatedException var1 = new org.jsecurity.authz.UnauthenticatedException();
    org.jsecurity.authc.AccountException var2 = new org.jsecurity.authc.AccountException("hi!", (java.lang.Throwable)var1);
    org.jsecurity.crypto.hash.Md5Hash var3 = new org.jsecurity.crypto.hash.Md5Hash();
    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      org.jsecurity.crypto.hash.Md2Hash var5 = new org.jsecurity.crypto.hash.Md2Hash((java.lang.Object)var1, (java.lang.Object)var3, (-1));
      fail("Expected exception of type org.jsecurity.codec.CodecException");
    } catch (org.jsecurity.codec.CodecException e) {
      // Expected exception.
    }

  }

  public void test30() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest0.test30");


    org.jsecurity.session.StoppedSessionException var0 = new org.jsecurity.session.StoppedSessionException();

  }

  public void test31() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest0.test31");


    org.jsecurity.authc.credential.Sha1CredentialsMatcher var0 = new org.jsecurity.authc.credential.Sha1CredentialsMatcher();
    org.jsecurity.authc.UsernamePasswordToken var1 = new org.jsecurity.authc.UsernamePasswordToken();
    java.lang.String var2 = var1.getUsername();
    java.lang.Object var3 = var1.getPrincipal();
    var1.setUsername("hi!");
    org.jsecurity.authc.SimpleAccount var6 = new org.jsecurity.authc.SimpleAccount();
    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      boolean var7 = var0.doCredentialsMatch((org.jsecurity.authc.AuthenticationToken)var1, (org.jsecurity.authc.AuthenticationInfo)var6);
      fail("Expected exception of type java.lang.IllegalArgumentException");
    } catch (java.lang.IllegalArgumentException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var2);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var3);

  }

  public void test32() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest0.test32");


    org.jsecurity.authc.pam.UnsupportedTokenException var1 = new org.jsecurity.authc.pam.UnsupportedTokenException("hi!");

  }

  public void test33() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest0.test33");


    org.jsecurity.jndi.JndiTemplate var0 = new org.jsecurity.jndi.JndiTemplate();
    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      var0.bind("", (java.lang.Object)' ');
      fail("Expected exception of type javax.naming.NoInitialContextException");
    } catch (javax.naming.NoInitialContextException e) {
      // Expected exception.
    }

  }

  public void test34() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest0.test34");


    org.jsecurity.session.SessionException var1 = new org.jsecurity.session.SessionException((java.io.Serializable)(byte)0);

  }

  public void test35() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest0.test35");


    org.jsecurity.crypto.BlowfishCipher var0 = new org.jsecurity.crypto.BlowfishCipher();
    org.jsecurity.session.UnknownSessionException var6 = new org.jsecurity.session.UnknownSessionException("dd\uFFFD", (java.io.Serializable)100.0f);
    org.jsecurity.config.ConfigurationException var7 = new org.jsecurity.config.ConfigurationException("dd\uFFFD", (java.lang.Throwable)var6);
    org.jsecurity.session.ExpiredSessionException var9 = new org.jsecurity.session.ExpiredSessionException("", (java.lang.Throwable)var7, (java.io.Serializable)true);
    org.jsecurity.authc.LockedAccountException var10 = new org.jsecurity.authc.LockedAccountException("", (java.lang.Throwable)var9);
    org.jsecurity.session.SessionException var11 = new org.jsecurity.session.SessionException((java.lang.Throwable)var10);
    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      org.jsecurity.crypto.hash.Sha1Hash var13 = new org.jsecurity.crypto.hash.Sha1Hash((java.lang.Object)var0, (java.lang.Object)var11, 1);
      fail("Expected exception of type org.jsecurity.codec.CodecException");
    } catch (org.jsecurity.codec.CodecException e) {
      // Expected exception.
    }

  }

  public void test36() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest0.test36");


    boolean var1 = org.jsecurity.util.StringUtils.hasText("a2b823b1e72eae2b727289df8a00a89df8a0bab6ad8a89c4c5c7a9b62a270000");
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var1 == true);

  }

  public void test37() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest0.test37");


    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      org.jsecurity.crypto.hash.Sha1Hash var1 = new org.jsecurity.crypto.hash.Sha1Hash((java.lang.Object)100);
      fail("Expected exception of type org.jsecurity.codec.CodecException");
    } catch (org.jsecurity.codec.CodecException e) {
      // Expected exception.
    }

  }

  public void test38() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest0.test38");


    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      org.jsecurity.io.IniResource var1 = new org.jsecurity.io.IniResource("org.jsecurity.config.ConfigurationException: dd\uFFFD");
      fail("Expected exception of type org.jsecurity.io.ResourceException");
    } catch (org.jsecurity.io.ResourceException e) {
      // Expected exception.
    }

  }

  public void test39() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest0.test39");


    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      org.jsecurity.io.IniResource var1 = new org.jsecurity.io.IniResource("");
      fail("Expected exception of type org.jsecurity.io.ResourceException");
    } catch (org.jsecurity.io.ResourceException e) {
      // Expected exception.
    }

  }

  public void test40() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest0.test40");


    org.jsecurity.session.InvalidSessionException var1 = new org.jsecurity.session.InvalidSessionException("hi!");
    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      org.jsecurity.crypto.hash.Sha384Hash var4 = new org.jsecurity.crypto.hash.Sha384Hash((java.lang.Object)var1, (java.lang.Object)"", 100);
      fail("Expected exception of type org.jsecurity.codec.CodecException");
    } catch (org.jsecurity.codec.CodecException e) {
      // Expected exception.
    }

  }

  public void test41() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest0.test41");


    boolean var1 = org.jsecurity.util.ClassUtils.isAvailable("org.jsecurity.config.ConfigurationException: dd\uFFFD");
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var1 == false);

  }

  public void test42() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest0.test42");


    org.jsecurity.authz.SimpleAuthorizationInfo var0 = new org.jsecurity.authz.SimpleAuthorizationInfo();
    var0.addStringPermission("hi!");
    java.io.InputStream var4 = org.jsecurity.util.ClassUtils.getResourceAsStream("");
    java.lang.Object[] var5 = new java.lang.Object[] { var4};
    java.util.List var6 = org.jsecurity.util.CollectionUtils.asList(var5);
    var0.addRoles((java.util.Collection)var6);
    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      java.lang.String[] var8 = org.jsecurity.util.StringUtils.toStringArray((java.util.Collection)var6);
      fail("Expected exception of type java.lang.ArrayStoreException");
    } catch (java.lang.ArrayStoreException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var4);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var5);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var6);

  }

  public void test43() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest0.test43");


    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      org.jsecurity.config.IniConfiguration var1 = new org.jsecurity.config.IniConfiguration("org.jsecurity.config.ConfigurationException: dd\uFFFD");
      fail("Expected exception of type org.jsecurity.config.ConfigurationException");
    } catch (org.jsecurity.config.ConfigurationException e) {
      // Expected exception.
    }

  }

  public void test44() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest0.test44");


    org.jsecurity.util.UnknownClassException var0 = new org.jsecurity.util.UnknownClassException();

  }

  public void test45() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest0.test45");


    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      java.security.Key var1 = org.jsecurity.crypto.BlowfishCipher.generateNewKey(10);
      fail("Expected exception of type java.security.InvalidParameterException");
    } catch (java.security.InvalidParameterException e) {
      // Expected exception.
    }

  }

  public void test46() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest0.test46");


    org.jsecurity.authz.permission.WildcardPermissionResolver var0 = new org.jsecurity.authz.permission.WildcardPermissionResolver();
    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      org.jsecurity.authz.Permission var2 = var0.resolvePermission("");
      fail("Expected exception of type java.lang.IllegalArgumentException");
    } catch (java.lang.IllegalArgumentException e) {
      // Expected exception.
    }

  }

  public void test47() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest0.test47");


    org.jsecurity.session.UnknownSessionException var4 = new org.jsecurity.session.UnknownSessionException("dd\uFFFD", (java.io.Serializable)100.0f);
    org.jsecurity.subject.SubjectException var5 = new org.jsecurity.subject.SubjectException("dd\uFFFD", (java.lang.Throwable)var4);
    org.jsecurity.io.SerializationException var6 = new org.jsecurity.io.SerializationException("", (java.lang.Throwable)var5);
    java.lang.Throwable[] var7 = var5.getSuppressed();
    java.util.Set var8 = org.jsecurity.util.CollectionUtils.asSet((java.lang.Object[])var7);
    byte[] var10 = org.jsecurity.codec.CodecSupport.toBytes("dd\uFFFD");
    org.jsecurity.session.UnknownSessionException var16 = new org.jsecurity.session.UnknownSessionException("dd\uFFFD", (java.io.Serializable)100.0f);
    org.jsecurity.subject.SubjectException var17 = new org.jsecurity.subject.SubjectException("dd\uFFFD", (java.lang.Throwable)var16);
    org.jsecurity.io.SerializationException var18 = new org.jsecurity.io.SerializationException("", (java.lang.Throwable)var17);
    java.lang.Throwable[] var19 = var17.getSuppressed();
    java.util.Set var20 = org.jsecurity.util.CollectionUtils.asSet((java.lang.Object[])var19);
    org.jsecurity.session.UnknownSessionException var25 = new org.jsecurity.session.UnknownSessionException("dd\uFFFD", (java.io.Serializable)100.0f);
    org.jsecurity.subject.SubjectException var26 = new org.jsecurity.subject.SubjectException("dd\uFFFD", (java.lang.Throwable)var25);
    org.jsecurity.io.SerializationException var27 = new org.jsecurity.io.SerializationException("", (java.lang.Throwable)var26);
    java.lang.Throwable[] var28 = var26.getSuppressed();
    java.util.Set var29 = org.jsecurity.util.CollectionUtils.asSet((java.lang.Object[])var28);
    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      org.jsecurity.authz.SimpleAuthorizingAccount var30 = new org.jsecurity.authz.SimpleAuthorizingAccount((java.util.Collection)var8, (java.lang.Object)"dd\uFFFD", "dd\uFFFD", var20, var29);
      fail("Expected exception of type java.lang.IllegalArgumentException");
    } catch (java.lang.IllegalArgumentException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var7);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var8);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var10);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var19);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var20);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var28);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var29);

  }

  public void test48() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest0.test48");


    org.jsecurity.util.StringUtils var0 = new org.jsecurity.util.StringUtils();

  }

  public void test49() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest0.test49");


    org.jsecurity.session.mgt.eis.MemorySessionDAO var0 = new org.jsecurity.session.mgt.eis.MemorySessionDAO();
    org.jsecurity.cache.Cache var1 = var0.getActiveSessionsCache();
    org.jsecurity.cache.CacheManager var2 = var0.getCacheManager();
    org.jsecurity.authz.UnauthenticatedException var4 = new org.jsecurity.authz.UnauthenticatedException();
    org.jsecurity.config.UnresolveableReferenceException var5 = new org.jsecurity.config.UnresolveableReferenceException("", (java.lang.Throwable)var4);
    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      org.jsecurity.session.Session var6 = var0.readSession((java.io.Serializable)"");
      fail("Expected exception of type org.jsecurity.session.UnknownSessionException");
    } catch (org.jsecurity.session.UnknownSessionException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var1);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var2);

  }

  public void test50() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest0.test50");


    org.jsecurity.session.UnknownSessionException var5 = new org.jsecurity.session.UnknownSessionException("dd\uFFFD", (java.io.Serializable)100.0f);
    org.jsecurity.config.ConfigurationException var6 = new org.jsecurity.config.ConfigurationException("dd\uFFFD", (java.lang.Throwable)var5);
    org.jsecurity.session.ExpiredSessionException var8 = new org.jsecurity.session.ExpiredSessionException("", (java.lang.Throwable)var6, (java.io.Serializable)true);
    org.jsecurity.authc.LockedAccountException var9 = new org.jsecurity.authc.LockedAccountException("", (java.lang.Throwable)var8);
    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      org.jsecurity.crypto.hash.Md2Hash var12 = new org.jsecurity.crypto.hash.Md2Hash((java.lang.Object)var9, (java.lang.Object)(short)0, 10);
      fail("Expected exception of type org.jsecurity.codec.CodecException");
    } catch (org.jsecurity.codec.CodecException e) {
      // Expected exception.
    }

  }

  public void test51() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest0.test51");


    org.jsecurity.authz.AuthorizationException var1 = new org.jsecurity.authz.AuthorizationException("org.jsecurity.config.ConfigurationException: dd\uFFFD");

  }

  public void test52() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest0.test52");


    org.jsecurity.authz.SimpleAuthorizationInfo var0 = new org.jsecurity.authz.SimpleAuthorizationInfo();
    var0.addRole("a2b823b1e72eae2b727289df8a00a89df8a0bab6ad8a89c4c5c7a9b62a270000");
    org.jsecurity.session.UnknownSessionException var7 = new org.jsecurity.session.UnknownSessionException("dd\uFFFD", (java.io.Serializable)100.0f);
    org.jsecurity.subject.SubjectException var8 = new org.jsecurity.subject.SubjectException("dd\uFFFD", (java.lang.Throwable)var7);
    org.jsecurity.io.SerializationException var9 = new org.jsecurity.io.SerializationException("", (java.lang.Throwable)var8);
    java.lang.Throwable[] var10 = var8.getSuppressed();
    java.util.Set var11 = org.jsecurity.util.CollectionUtils.asSet((java.lang.Object[])var10);
    var0.addRoles((java.util.Collection)var11);
    org.jsecurity.session.UnknownSessionException var17 = new org.jsecurity.session.UnknownSessionException("dd\uFFFD", (java.io.Serializable)100.0f);
    org.jsecurity.session.SessionException var19 = new org.jsecurity.session.SessionException("dd\uFFFD", (java.lang.Throwable)var17, (java.io.Serializable)0);
    org.jsecurity.session.SessionException var20 = new org.jsecurity.session.SessionException("dd\uFFFD", (java.lang.Throwable)var17);
    java.io.Serializable var21 = var20.getSessionId();
    org.jsecurity.subject.InvalidSubjectException var22 = new org.jsecurity.subject.InvalidSubjectException((java.lang.Throwable)var20);
    org.jsecurity.authz.SimpleAuthorizationInfo var24 = new org.jsecurity.authz.SimpleAuthorizationInfo();
    var24.addRole("a2b823b1e72eae2b727289df8a00a89df8a0bab6ad8a89c4c5c7a9b62a270000");
    org.jsecurity.session.UnknownSessionException var31 = new org.jsecurity.session.UnknownSessionException("dd\uFFFD", (java.io.Serializable)100.0f);
    org.jsecurity.subject.SubjectException var32 = new org.jsecurity.subject.SubjectException("dd\uFFFD", (java.lang.Throwable)var31);
    org.jsecurity.io.SerializationException var33 = new org.jsecurity.io.SerializationException("", (java.lang.Throwable)var32);
    java.lang.Throwable[] var34 = var32.getSuppressed();
    java.util.Set var35 = org.jsecurity.util.CollectionUtils.asSet((java.lang.Object[])var34);
    var24.addRoles((java.util.Collection)var35);
    org.jsecurity.session.UnknownSessionException var41 = new org.jsecurity.session.UnknownSessionException("dd\uFFFD", (java.io.Serializable)100.0f);
    org.jsecurity.subject.SubjectException var42 = new org.jsecurity.subject.SubjectException("dd\uFFFD", (java.lang.Throwable)var41);
    org.jsecurity.io.SerializationException var43 = new org.jsecurity.io.SerializationException("", (java.lang.Throwable)var42);
    java.lang.Throwable[] var44 = var42.getSuppressed();
    java.util.Set var45 = org.jsecurity.util.CollectionUtils.asSet((java.lang.Object[])var44);
    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      org.jsecurity.authc.SimpleAccount var46 = new org.jsecurity.authc.SimpleAccount((java.util.Collection)var11, (java.lang.Object)var20, "hi!", var35, var45);
      fail("Expected exception of type java.lang.IllegalArgumentException");
    } catch (java.lang.IllegalArgumentException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var10);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var11);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var21);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var34);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var35);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var44);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var45);

  }

  public void test53() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest0.test53");


    java.lang.String var1 = org.jsecurity.codec.Base64.decodeToString("dd\uFFFD");
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var1 + "' != '" + "\u0000\u0000"+ "'", var1.equals("\u0000\u0000"));

  }

  public void test54() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest0.test54");


    org.jsecurity.authz.UnauthorizedException var1 = new org.jsecurity.authz.UnauthorizedException("org.jsecurity.config.ConfigurationException: dd\uFFFD");
    java.lang.Throwable[] var2 = var1.getSuppressed();
    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      org.jsecurity.crypto.hash.Sha1Hash var3 = new org.jsecurity.crypto.hash.Sha1Hash((java.lang.Object)var2);
      fail("Expected exception of type org.jsecurity.codec.CodecException");
    } catch (org.jsecurity.codec.CodecException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var2);

  }

  public void test55() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest0.test55");


    org.jsecurity.session.InvalidSessionException var1 = new org.jsecurity.session.InvalidSessionException("");

  }

  public void test56() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest0.test56");


    org.jsecurity.crypto.hash.Sha512Hash var0 = new org.jsecurity.crypto.hash.Sha512Hash();
    org.jsecurity.authc.credential.Sha512CredentialsMatcher var1 = new org.jsecurity.authc.credential.Sha512CredentialsMatcher();
    var1.setHashIterations(1);
    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      org.jsecurity.crypto.hash.Sha512Hash var4 = new org.jsecurity.crypto.hash.Sha512Hash((java.lang.Object)var0, (java.lang.Object)var1);
      fail("Expected exception of type org.jsecurity.codec.CodecException");
    } catch (org.jsecurity.codec.CodecException e) {
      // Expected exception.
    }

  }

  public void test57() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest0.test57");


    org.jsecurity.authc.credential.Sha256CredentialsMatcher var0 = new org.jsecurity.authc.credential.Sha256CredentialsMatcher();
    org.jsecurity.realm.activedirectory.ActiveDirectoryRealm var1 = new org.jsecurity.realm.activedirectory.ActiveDirectoryRealm();
    org.jsecurity.authc.credential.Sha256CredentialsMatcher var2 = new org.jsecurity.authc.credential.Sha256CredentialsMatcher();
    var1.setCredentialsMatcher((org.jsecurity.authc.credential.CredentialsMatcher)var2);
    java.lang.String var4 = var1.getAuthorizationCacheName();
    org.jsecurity.authc.UsernamePasswordToken var5 = new org.jsecurity.authc.UsernamePasswordToken();
    java.lang.String var6 = var5.getUsername();
    java.lang.Object var7 = var5.getPrincipal();
    boolean var8 = var1.supports((org.jsecurity.authc.AuthenticationToken)var5);
    org.jsecurity.authc.SimpleAccount var9 = new org.jsecurity.authc.SimpleAccount();
    var9.setCredentialsExpired(false);
    var9.setCredentialsExpired(false);
    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      boolean var14 = var0.doCredentialsMatch((org.jsecurity.authc.AuthenticationToken)var5, (org.jsecurity.authc.AuthenticationInfo)var9);
      fail("Expected exception of type java.lang.IllegalArgumentException");
    } catch (java.lang.IllegalArgumentException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var4);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var6);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var7);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var8 == true);

  }

  public void test58() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest0.test58");


    org.jsecurity.jndi.JndiTemplate var0 = new org.jsecurity.jndi.JndiTemplate();
    java.util.Properties var1 = var0.getEnvironment();
    org.jsecurity.authz.UnauthenticatedException var4 = new org.jsecurity.authz.UnauthenticatedException();
    org.jsecurity.authc.AccountException var5 = new org.jsecurity.authc.AccountException("hi!", (java.lang.Throwable)var4);
    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      var0.bind("a2b823b1e72eae2b727289df8a00a89df8a0bab6ad8a89c4c5c7a9b62a270000", (java.lang.Object)"hi!");
      fail("Expected exception of type javax.naming.NoInitialContextException");
    } catch (javax.naming.NoInitialContextException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var1);

  }

  public void test59() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest0.test59");


    byte[] var3 = new byte[] { (byte)100, (byte)100, (byte)(-1)};
    java.lang.String var4 = org.jsecurity.codec.CodecSupport.toString(var3);
    char[] var5 = org.jsecurity.codec.CodecSupport.toChars(var3);
    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      char[] var7 = org.jsecurity.codec.CodecSupport.toChars(var3, "");
      fail("Expected exception of type org.jsecurity.codec.CodecException");
    } catch (org.jsecurity.codec.CodecException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var3);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var4 + "' != '" + "dd\uFFFD"+ "'", var4.equals("dd\uFFFD"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var5);

  }

  public void test60() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest0.test60");


    byte[] var2 = new byte[] { (byte)0, (byte)(-1)};
    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      java.lang.String var4 = org.jsecurity.codec.CodecSupport.toString(var2, "dd\uFFFD");
      fail("Expected exception of type org.jsecurity.codec.CodecException");
    } catch (org.jsecurity.codec.CodecException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var2);

  }

  public void test61() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest0.test61");


    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      byte[] var1 = org.jsecurity.codec.Hex.decode("\u0000\u0000");
      fail("Expected exception of type java.lang.IllegalArgumentException");
    } catch (java.lang.IllegalArgumentException e) {
      // Expected exception.
    }

  }

  public void test62() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest0.test62");


    org.jsecurity.authc.AuthenticationException var0 = new org.jsecurity.authc.AuthenticationException();

  }

  public void test63() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest0.test63");


    java.lang.String[] var6 = org.jsecurity.util.StringUtils.split("", '#', '4', ' ', false, false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var6);

  }

  public void test64() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest0.test64");


    org.jsecurity.realm.activedirectory.ActiveDirectoryRealm var0 = new org.jsecurity.realm.activedirectory.ActiveDirectoryRealm();
    var0.init();
    var0.init();
    java.io.InputStream var4 = org.jsecurity.util.ClassUtils.getResourceAsStream("");
    java.lang.Object[] var5 = new java.lang.Object[] { var4};
    java.util.List var6 = org.jsecurity.util.CollectionUtils.asList(var5);
    org.jsecurity.authc.pam.ModularRealmAuthenticator var7 = new org.jsecurity.authc.pam.ModularRealmAuthenticator(var6);
    org.jsecurity.subject.SimplePrincipalCollection var9 = new org.jsecurity.subject.SimplePrincipalCollection((java.util.Collection)var6, "org.jsecurity.authz.UnauthorizedException: org.jsecurity.session.ExpiredSessionException: ");
    org.jsecurity.authz.SimpleAuthorizationInfo var10 = new org.jsecurity.authz.SimpleAuthorizationInfo();
    var10.addStringPermission("hi!");
    java.io.InputStream var14 = org.jsecurity.util.ClassUtils.getResourceAsStream("");
    java.lang.Object[] var15 = new java.lang.Object[] { var14};
    java.util.List var16 = org.jsecurity.util.CollectionUtils.asList(var15);
    var10.addRoles((java.util.Collection)var16);
    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      boolean var18 = var0.isPermittedAll((org.jsecurity.subject.PrincipalCollection)var9, (java.util.Collection)var16);
      fail("Expected exception of type java.util.NoSuchElementException");
    } catch (java.util.NoSuchElementException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var4);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var5);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var6);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var14);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var15);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var16);

  }

  public void test65() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest0.test65");


    org.jsecurity.authz.SimpleAuthorizationInfo var0 = new org.jsecurity.authz.SimpleAuthorizationInfo();
    var0.addRole("a2b823b1e72eae2b727289df8a00a89df8a0bab6ad8a89c4c5c7a9b62a270000");
    org.jsecurity.session.UnknownSessionException var7 = new org.jsecurity.session.UnknownSessionException("dd\uFFFD", (java.io.Serializable)100.0f);
    org.jsecurity.subject.SubjectException var8 = new org.jsecurity.subject.SubjectException("dd\uFFFD", (java.lang.Throwable)var7);
    org.jsecurity.io.SerializationException var9 = new org.jsecurity.io.SerializationException("", (java.lang.Throwable)var8);
    java.lang.Throwable[] var10 = var8.getSuppressed();
    java.util.Set var11 = org.jsecurity.util.CollectionUtils.asSet((java.lang.Object[])var10);
    var0.addRoles((java.util.Collection)var11);
    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      org.jsecurity.crypto.hash.Sha384Hash var13 = new org.jsecurity.crypto.hash.Sha384Hash((java.lang.Object)var0);
      fail("Expected exception of type org.jsecurity.codec.CodecException");
    } catch (org.jsecurity.codec.CodecException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var10);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var11);

  }

  public void test66() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest0.test66");


    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      org.jsecurity.io.IniResource var1 = new org.jsecurity.io.IniResource("\u0000\u0000");
      fail("Expected exception of type org.jsecurity.io.ResourceException");
    } catch (org.jsecurity.io.ResourceException e) {
      // Expected exception.
    }

  }

  public void test67() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest0.test67");


    org.jsecurity.authc.AccountException var0 = new org.jsecurity.authc.AccountException();

  }

  public void test68() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest0.test68");


    org.jsecurity.session.mgt.quartz.QuartzSessionValidationJob var0 = new org.jsecurity.session.mgt.quartz.QuartzSessionValidationJob();

  }

  public void test69() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest0.test69");


    java.lang.String[] var3 = org.jsecurity.util.StringUtils.split("", 'a', '#');
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var3);

  }

  public void test70() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest0.test70");


    byte[] var1 = org.jsecurity.codec.Hex.decode("");
    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      java.lang.String var3 = org.jsecurity.codec.CodecSupport.toString(var1, "org.jsecurity.authz.UnauthorizedException: org.jsecurity.session.ExpiredSessionException: ");
      fail("Expected exception of type org.jsecurity.codec.CodecException");
    } catch (org.jsecurity.codec.CodecException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var1);

  }

  public void test71() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest0.test71");


    org.jsecurity.io.SerializationException var1 = new org.jsecurity.io.SerializationException("org.jsecurity.config.ConfigurationException: dd\uFFFD");
    org.jsecurity.authz.UnauthorizedException var3 = new org.jsecurity.authz.UnauthorizedException("org.jsecurity.config.ConfigurationException: dd\uFFFD");
    java.lang.Throwable[] var4 = var3.getSuppressed();
    java.util.List var5 = org.jsecurity.util.CollectionUtils.asList((java.lang.Object[])var4);
    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      org.jsecurity.crypto.hash.Sha512Hash var7 = new org.jsecurity.crypto.hash.Sha512Hash((java.lang.Object)var1, (java.lang.Object)var5, (-1));
      fail("Expected exception of type org.jsecurity.codec.CodecException");
    } catch (org.jsecurity.codec.CodecException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var4);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var5);

  }

  public void test72() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest0.test72");


    org.jsecurity.crypto.hash.Md5Hash var0 = new org.jsecurity.crypto.hash.Md5Hash();
    byte[] var1 = var0.getBytes();
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var1);

  }

  public void test73() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest0.test73");


    java.io.InputStream var1 = org.jsecurity.util.ClassUtils.getResourceAsStream("\u0000\u0000");
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var1);

  }

  public void test74() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest0.test74");


    java.io.InputStream var1 = org.jsecurity.util.ClassUtils.getResourceAsStream("");
    java.lang.Object[] var2 = new java.lang.Object[] { var1};
    java.util.List var3 = org.jsecurity.util.CollectionUtils.asList(var2);
    org.jsecurity.authc.pam.ModularRealmAuthenticator var4 = new org.jsecurity.authc.pam.ModularRealmAuthenticator(var3);
    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      org.jsecurity.mgt.DefaultSecurityManager var5 = new org.jsecurity.mgt.DefaultSecurityManager((java.util.Collection)var3);
      fail("Expected exception of type java.lang.ClassCastException");
    } catch (java.lang.ClassCastException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var1);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var2);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var3);

  }

  public void test75() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest0.test75");


    org.jsecurity.authz.UnauthenticatedException var2 = new org.jsecurity.authz.UnauthenticatedException();
    org.jsecurity.config.UnresolveableReferenceException var3 = new org.jsecurity.config.UnresolveableReferenceException("", (java.lang.Throwable)var2);
    org.jsecurity.authz.HostUnauthorizedException var4 = new org.jsecurity.authz.HostUnauthorizedException("org.jsecurity.config.ConfigurationException: dd\uFFFD", (java.lang.Throwable)var3);
    org.jsecurity.JSecurityException var6 = new org.jsecurity.JSecurityException();
    org.jsecurity.authc.LockedAccountException var7 = new org.jsecurity.authc.LockedAccountException("org.jsecurity.config.ConfigurationException: dd\uFFFD", (java.lang.Throwable)var6);
    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      org.jsecurity.crypto.hash.Md5Hash var9 = new org.jsecurity.crypto.hash.Md5Hash((java.lang.Object)"org.jsecurity.config.ConfigurationException: dd\uFFFD", (java.lang.Object)var7, 1);
      fail("Expected exception of type org.jsecurity.codec.CodecException");
    } catch (org.jsecurity.codec.CodecException e) {
      // Expected exception.
    }

  }

  public void test76() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest0.test76");


    org.jsecurity.session.UnknownSessionException var3 = new org.jsecurity.session.UnknownSessionException("dd\uFFFD", (java.io.Serializable)100.0f);
    org.jsecurity.session.SessionException var5 = new org.jsecurity.session.SessionException("dd\uFFFD", (java.lang.Throwable)var3, (java.io.Serializable)0);
    org.jsecurity.authc.SimpleAuthenticationInfo var8 = new org.jsecurity.authc.SimpleAuthenticationInfo((java.lang.Object)0, (java.lang.Object)10, "hi!");
    java.lang.Object var9 = var8.getCredentials();
    org.jsecurity.authc.DisabledAccountException var10 = new org.jsecurity.authc.DisabledAccountException();
    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      org.jsecurity.crypto.hash.Sha512Hash var12 = new org.jsecurity.crypto.hash.Sha512Hash((java.lang.Object)var8, (java.lang.Object)var10, 10);
      fail("Expected exception of type org.jsecurity.codec.CodecException");
    } catch (org.jsecurity.codec.CodecException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var9 + "' != '" + 10+ "'", var9.equals(10));

  }

  public void test77() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest0.test77");


    org.jsecurity.realm.activedirectory.ActiveDirectoryRealm var0 = new org.jsecurity.realm.activedirectory.ActiveDirectoryRealm();
    org.jsecurity.authc.credential.Sha256CredentialsMatcher var1 = new org.jsecurity.authc.credential.Sha256CredentialsMatcher();
    var0.setCredentialsMatcher((org.jsecurity.authc.credential.CredentialsMatcher)var1);
    org.jsecurity.realm.text.TextConfigurationRealm var3 = new org.jsecurity.realm.text.TextConfigurationRealm();
    java.io.InputStream var5 = org.jsecurity.util.ClassUtils.getResourceAsStream("");
    java.lang.Object[] var6 = new java.lang.Object[] { var5};
    java.util.List var7 = org.jsecurity.util.CollectionUtils.asList(var6);
    org.jsecurity.authc.pam.ModularRealmAuthenticator var8 = new org.jsecurity.authc.pam.ModularRealmAuthenticator(var7);
    org.jsecurity.subject.SimplePrincipalCollection var10 = new org.jsecurity.subject.SimplePrincipalCollection((java.util.Collection)var7, "org.jsecurity.authz.UnauthorizedException: org.jsecurity.session.ExpiredSessionException: ");
    org.jsecurity.session.UnknownSessionException var15 = new org.jsecurity.session.UnknownSessionException("dd\uFFFD", (java.io.Serializable)100.0f);
    org.jsecurity.session.SessionException var17 = new org.jsecurity.session.SessionException("dd\uFFFD", (java.lang.Throwable)var15, (java.io.Serializable)0);
    org.jsecurity.session.SessionException var18 = new org.jsecurity.session.SessionException("dd\uFFFD", (java.lang.Throwable)var15);
    var10.add((java.lang.Object)var18, "org.jsecurity.config.ConfigurationException: dd\uFFFD");
    var3.onLogout((org.jsecurity.subject.PrincipalCollection)var10);
    java.io.InputStream var23 = org.jsecurity.util.ClassUtils.getResourceAsStream("");
    java.lang.Object[] var24 = new java.lang.Object[] { var23};
    java.util.List var25 = org.jsecurity.util.CollectionUtils.asList(var24);
    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      boolean[] var26 = var0.isPermitted((org.jsecurity.subject.PrincipalCollection)var10, var25);
      fail("Expected exception of type java.util.NoSuchElementException");
    } catch (java.util.NoSuchElementException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var5);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var6);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var7);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var23);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var24);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var25);

  }

  public void test78() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest0.test78");


    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      org.jsecurity.crypto.hash.Md5Hash var1 = org.jsecurity.crypto.hash.Md5Hash.fromHexString("hi!");
      fail("Expected exception of type java.lang.IllegalArgumentException");
    } catch (java.lang.IllegalArgumentException e) {
      // Expected exception.
    }

  }

  public void test79() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest0.test79");


    org.jsecurity.session.UnknownSessionException var4 = new org.jsecurity.session.UnknownSessionException("dd\uFFFD", (java.io.Serializable)100.0f);
    org.jsecurity.subject.SubjectException var5 = new org.jsecurity.subject.SubjectException("dd\uFFFD", (java.lang.Throwable)var4);
    org.jsecurity.authc.AccountException var6 = new org.jsecurity.authc.AccountException("hi!", (java.lang.Throwable)var5);
    org.jsecurity.session.UnknownSessionException var7 = new org.jsecurity.session.UnknownSessionException((java.lang.Throwable)var5);
    org.jsecurity.codec.CodecException var8 = new org.jsecurity.codec.CodecException((java.lang.Throwable)var5);
    org.jsecurity.session.SessionException var9 = new org.jsecurity.session.SessionException((java.lang.Throwable)var8);

  }

  public void test80() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest0.test80");


    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      org.jsecurity.crypto.hash.Sha384Hash var1 = org.jsecurity.crypto.hash.Sha384Hash.fromHexString("dd\uFFFD");
      fail("Expected exception of type java.lang.IllegalArgumentException");
    } catch (java.lang.IllegalArgumentException e) {
      // Expected exception.
    }

  }

  public void test81() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest0.test81");


    org.jsecurity.io.SerializationException var1 = new org.jsecurity.io.SerializationException("");

  }

  public void test82() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest0.test82");


    org.jsecurity.codec.Hex var0 = new org.jsecurity.codec.Hex();

  }

  public void test83() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest0.test83");


    org.jsecurity.session.UnknownSessionException var5 = new org.jsecurity.session.UnknownSessionException("dd\uFFFD", (java.io.Serializable)100.0f);
    org.jsecurity.config.ConfigurationException var6 = new org.jsecurity.config.ConfigurationException("dd\uFFFD", (java.lang.Throwable)var5);
    org.jsecurity.session.ExpiredSessionException var8 = new org.jsecurity.session.ExpiredSessionException("", (java.lang.Throwable)var6, (java.io.Serializable)true);
    org.jsecurity.authc.pam.UnsupportedTokenException var9 = new org.jsecurity.authc.pam.UnsupportedTokenException((java.lang.Throwable)var8);
    org.jsecurity.authc.AccountException var10 = new org.jsecurity.authc.AccountException((java.lang.Throwable)var9);
    org.jsecurity.authz.UnauthorizedException var11 = new org.jsecurity.authz.UnauthorizedException("a2b823b1e72eae2b727289df8a00a89df8a0bab6ad8a89c4c5c7a9b62a270000", (java.lang.Throwable)var10);
    org.jsecurity.session.UnknownSessionException var15 = new org.jsecurity.session.UnknownSessionException("dd\uFFFD", (java.io.Serializable)100.0f);
    org.jsecurity.session.SessionException var17 = new org.jsecurity.session.SessionException("dd\uFFFD", (java.lang.Throwable)var15, (java.io.Serializable)0);
    org.jsecurity.authc.SimpleAuthenticationInfo var20 = new org.jsecurity.authc.SimpleAuthenticationInfo((java.lang.Object)0, (java.lang.Object)10, "hi!");
    java.lang.Object var21 = var20.getCredentials();
    java.lang.String var22 = var20.toString();
    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      org.jsecurity.crypto.hash.Sha256Hash var24 = new org.jsecurity.crypto.hash.Sha256Hash((java.lang.Object)var10, (java.lang.Object)var22, (-1));
      fail("Expected exception of type org.jsecurity.codec.CodecException");
    } catch (org.jsecurity.codec.CodecException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var21 + "' != '" + 10+ "'", var21.equals(10));

  }

  public void test84() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest0.test84");


    org.jsecurity.crypto.hash.Md2Hash var0 = new org.jsecurity.crypto.hash.Md2Hash();

  }

  public void test85() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest0.test85");


    java.io.InputStream var1 = org.jsecurity.util.ClassUtils.getResourceAsStream("");
    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      org.jsecurity.io.IniResource var2 = new org.jsecurity.io.IniResource(var1);
      fail("Expected exception of type org.jsecurity.io.ResourceException");
    } catch (org.jsecurity.io.ResourceException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var1);

  }

  public void test86() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest0.test86");


    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      org.jsecurity.crypto.hash.Sha384Hash var1 = org.jsecurity.crypto.hash.Sha384Hash.fromHexString("org.jsecurity.authz.UnauthorizedException: org.jsecurity.session.ExpiredSessionException: ");
      fail("Expected exception of type java.lang.IllegalArgumentException");
    } catch (java.lang.IllegalArgumentException e) {
      // Expected exception.
    }

  }

  public void test87() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest0.test87");


    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      org.jsecurity.crypto.hash.Sha512Hash var1 = org.jsecurity.crypto.hash.Sha512Hash.fromHexString("org.jsecurity.config.ConfigurationException: dd\uFFFD");
      fail("Expected exception of type java.lang.IllegalArgumentException");
    } catch (java.lang.IllegalArgumentException e) {
      // Expected exception.
    }

  }

  public void test88() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest0.test88");


    java.io.InputStream var1 = org.jsecurity.util.ClassUtils.getResourceAsStream("");
    java.lang.Object[] var2 = new java.lang.Object[] { var1};
    java.util.List var3 = org.jsecurity.util.CollectionUtils.asList(var2);
    org.jsecurity.authc.pam.ModularRealmAuthenticator var4 = new org.jsecurity.authc.pam.ModularRealmAuthenticator(var3);
    org.jsecurity.authc.pam.AllSuccessfulModularAuthenticationStrategy var5 = new org.jsecurity.authc.pam.AllSuccessfulModularAuthenticationStrategy();
    var4.setModularAuthenticationStrategy((org.jsecurity.authc.pam.ModularAuthenticationStrategy)var5);
    org.jsecurity.authz.SimpleAuthorizationInfo var7 = new org.jsecurity.authz.SimpleAuthorizationInfo();
    var7.addStringPermission("hi!");
    java.io.InputStream var11 = org.jsecurity.util.ClassUtils.getResourceAsStream("");
    java.lang.Object[] var12 = new java.lang.Object[] { var11};
    java.util.List var13 = org.jsecurity.util.CollectionUtils.asList(var12);
    var7.addRoles((java.util.Collection)var13);
    var4.setAuthenticationListeners((java.util.Collection)var13);
    org.jsecurity.realm.activedirectory.ActiveDirectoryRealm var16 = new org.jsecurity.realm.activedirectory.ActiveDirectoryRealm();
    var16.setPrincipalSuffix("");
    var4.setRealm((org.jsecurity.realm.Realm)var16);
    org.jsecurity.cache.HashtableCacheManager var20 = new org.jsecurity.cache.HashtableCacheManager();
    org.jsecurity.cache.Cache var22 = var20.getCache("\u0000\u0000");
    var16.setAuthorizationCache(var22);
    org.jsecurity.realm.text.TextConfigurationRealm var24 = new org.jsecurity.realm.text.TextConfigurationRealm();
    java.io.InputStream var26 = org.jsecurity.util.ClassUtils.getResourceAsStream("");
    java.lang.Object[] var27 = new java.lang.Object[] { var26};
    java.util.List var28 = org.jsecurity.util.CollectionUtils.asList(var27);
    org.jsecurity.authc.pam.ModularRealmAuthenticator var29 = new org.jsecurity.authc.pam.ModularRealmAuthenticator(var28);
    org.jsecurity.subject.SimplePrincipalCollection var31 = new org.jsecurity.subject.SimplePrincipalCollection((java.util.Collection)var28, "org.jsecurity.authz.UnauthorizedException: org.jsecurity.session.ExpiredSessionException: ");
    org.jsecurity.session.UnknownSessionException var36 = new org.jsecurity.session.UnknownSessionException("dd\uFFFD", (java.io.Serializable)100.0f);
    org.jsecurity.session.SessionException var38 = new org.jsecurity.session.SessionException("dd\uFFFD", (java.lang.Throwable)var36, (java.io.Serializable)0);
    org.jsecurity.session.SessionException var39 = new org.jsecurity.session.SessionException("dd\uFFFD", (java.lang.Throwable)var36);
    var31.add((java.lang.Object)var39, "org.jsecurity.config.ConfigurationException: dd\uFFFD");
    var24.onLogout((org.jsecurity.subject.PrincipalCollection)var31);
    org.jsecurity.cache.HashtableCacheManager var43 = new org.jsecurity.cache.HashtableCacheManager();
    org.jsecurity.cache.Cache var45 = var43.getCache("\u0000\u0000");
    var24.setAuthorizationCache(var45);
    org.jsecurity.codec.CodecException var49 = new org.jsecurity.codec.CodecException("dd\uFFFD");
    org.jsecurity.authc.ConcurrentAccessException var50 = new org.jsecurity.authc.ConcurrentAccessException("org.jsecurity.authz.UnauthorizedException: org.jsecurity.session.ExpiredSessionException: ", (java.lang.Throwable)var49);
    org.jsecurity.subject.SimplePrincipalCollection var52 = new org.jsecurity.subject.SimplePrincipalCollection((java.lang.Object)var49, "");
    var24.onLogout((org.jsecurity.subject.PrincipalCollection)var52);
    org.jsecurity.authz.UnauthorizedException var55 = new org.jsecurity.authz.UnauthorizedException("org.jsecurity.config.ConfigurationException: dd\uFFFD");
    java.lang.Throwable[] var56 = var55.getSuppressed();
    java.util.List var57 = org.jsecurity.util.CollectionUtils.asList((java.lang.Object[])var56);
    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      boolean[] var58 = var16.isPermitted((org.jsecurity.subject.PrincipalCollection)var52, var57);
      fail("Expected exception of type java.util.NoSuchElementException");
    } catch (java.util.NoSuchElementException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var1);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var2);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var3);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var11);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var12);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var13);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var22);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var26);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var27);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var28);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var45);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var56);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var57);

  }

  public void test89() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest0.test89");


    org.jsecurity.crypto.hash.Sha1Hash var1 = org.jsecurity.crypto.hash.Sha1Hash.fromBase64String("");
    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      org.jsecurity.crypto.hash.Sha512Hash var2 = new org.jsecurity.crypto.hash.Sha512Hash((java.lang.Object)var1);
      fail("Expected exception of type org.jsecurity.codec.CodecException");
    } catch (org.jsecurity.codec.CodecException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var1);

  }

  public void test90() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest0.test90");


    org.jsecurity.authc.AuthenticationException var1 = new org.jsecurity.authc.AuthenticationException("a2b823b1e72eae2b727289df8a00a89df8a0bab6ad8a89c4c5c7a9b62a270000");

  }

  public void test91() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest0.test91");


    org.jsecurity.io.ResourceException var2 = new org.jsecurity.io.ResourceException("hi!");
    org.jsecurity.codec.CodecException var3 = new org.jsecurity.codec.CodecException((java.lang.Throwable)var2);
    org.jsecurity.JSecurityException var4 = new org.jsecurity.JSecurityException("a2b823b1e72eae2b727289df8a00a89df8a0bab6ad8a89c4c5c7a9b62a270000", (java.lang.Throwable)var2);
    org.jsecurity.authz.AuthorizationException var5 = new org.jsecurity.authz.AuthorizationException((java.lang.Throwable)var4);

  }

  public void test92() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest0.test92");


    org.jsecurity.crypto.hash.Sha512Hash var1 = org.jsecurity.crypto.hash.Sha512Hash.fromBase64String("org.jsecurity.config.ConfigurationException: dd\uFFFD");
    java.lang.String var2 = var1.toHex();
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var2 + "' != '" + "a2b823b1e72eae2b727289df8a00a89df8a0bab6ad8a89c4c5c7a9b62a270000"+ "'", var2.equals("a2b823b1e72eae2b727289df8a00a89df8a0bab6ad8a89c4c5c7a9b62a270000"));

  }

  public void test93() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest0.test93");


    java.io.InputStream var1 = org.jsecurity.util.ClassUtils.getResourceAsStream("");
    java.lang.Object[] var2 = new java.lang.Object[] { var1};
    java.util.List var3 = org.jsecurity.util.CollectionUtils.asList(var2);
    org.jsecurity.authc.pam.ModularRealmAuthenticator var4 = new org.jsecurity.authc.pam.ModularRealmAuthenticator(var3);
    org.jsecurity.authc.pam.AllSuccessfulModularAuthenticationStrategy var5 = new org.jsecurity.authc.pam.AllSuccessfulModularAuthenticationStrategy();
    var4.setModularAuthenticationStrategy((org.jsecurity.authc.pam.ModularAuthenticationStrategy)var5);
    java.io.InputStream var8 = org.jsecurity.util.ClassUtils.getResourceAsStream("");
    java.lang.Object[] var9 = new java.lang.Object[] { var8};
    java.util.List var10 = org.jsecurity.util.CollectionUtils.asList(var9);
    org.jsecurity.authc.pam.ModularRealmAuthenticator var11 = new org.jsecurity.authc.pam.ModularRealmAuthenticator(var10);
    org.jsecurity.subject.SimplePrincipalCollection var13 = new org.jsecurity.subject.SimplePrincipalCollection((java.util.Collection)var10, "org.jsecurity.authz.UnauthorizedException: org.jsecurity.session.ExpiredSessionException: ");
    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      var4.onLogout((org.jsecurity.subject.PrincipalCollection)var13);
      fail("Expected exception of type java.lang.ClassCastException");
    } catch (java.lang.ClassCastException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var1);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var2);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var3);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var8);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var9);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var10);

  }

  public void test94() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest0.test94");


    org.jsecurity.authz.UnauthorizedException var1 = new org.jsecurity.authz.UnauthorizedException();
    org.jsecurity.session.SessionException var3 = new org.jsecurity.session.SessionException("", (java.lang.Throwable)var1, (java.io.Serializable)"org.jsecurity.config.ConfigurationException: dd\uFFFD");
    org.jsecurity.cache.HashtableCacheManager var4 = new org.jsecurity.cache.HashtableCacheManager();
    org.jsecurity.cache.Cache var6 = var4.getCache("\u0000\u0000");
    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      org.jsecurity.crypto.hash.Sha512Hash var8 = new org.jsecurity.crypto.hash.Sha512Hash((java.lang.Object)var3, (java.lang.Object)var6, 100);
      fail("Expected exception of type org.jsecurity.codec.CodecException");
    } catch (org.jsecurity.codec.CodecException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var6);

  }

  public void test95() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest0.test95");


    org.jsecurity.authc.pam.AllSuccessfulModularAuthenticationStrategy var0 = new org.jsecurity.authc.pam.AllSuccessfulModularAuthenticationStrategy();
    char[] var2 = new char[] { };
    org.jsecurity.authc.UsernamePasswordToken var4 = new org.jsecurity.authc.UsernamePasswordToken("hi!", var2, true);
    org.jsecurity.authc.SimpleAccount var5 = new org.jsecurity.authc.SimpleAccount();
    var5.setCredentialsExpired(false);
    boolean var8 = var5.isLocked();
    org.jsecurity.authc.AuthenticationInfo var9 = var0.afterAllAttempts((org.jsecurity.authc.AuthenticationToken)var4, (org.jsecurity.authc.AuthenticationInfo)var5);
    char[] var13 = new char[] { '4', '#'};
    org.jsecurity.authc.UsernamePasswordToken var14 = new org.jsecurity.authc.UsernamePasswordToken("\u0000\u0000", var13);
    org.jsecurity.authc.SimpleAccount var15 = new org.jsecurity.authc.SimpleAccount();
    var15.setCredentialsExpired(false);
    var15.setCredentialsExpired(false);
    boolean var20 = var15.isCredentialsExpired();
    org.jsecurity.authc.AuthenticationInfo var21 = var0.afterAllAttempts((org.jsecurity.authc.AuthenticationToken)var14, (org.jsecurity.authc.AuthenticationInfo)var15);
    org.jsecurity.realm.activedirectory.ActiveDirectoryRealm var22 = new org.jsecurity.realm.activedirectory.ActiveDirectoryRealm();
    org.jsecurity.authc.credential.Sha256CredentialsMatcher var23 = new org.jsecurity.authc.credential.Sha256CredentialsMatcher();
    var22.setCredentialsMatcher((org.jsecurity.authc.credential.CredentialsMatcher)var23);
    java.lang.String var25 = var22.getAuthorizationCacheName();
    org.jsecurity.authc.UsernamePasswordToken var26 = new org.jsecurity.authc.UsernamePasswordToken();
    java.lang.String var27 = var26.getUsername();
    java.lang.Object var28 = var26.getPrincipal();
    boolean var29 = var22.supports((org.jsecurity.authc.AuthenticationToken)var26);
    org.jsecurity.session.UnknownSessionException var33 = new org.jsecurity.session.UnknownSessionException("dd\uFFFD", (java.io.Serializable)100.0f);
    org.jsecurity.session.SessionException var35 = new org.jsecurity.session.SessionException("dd\uFFFD", (java.lang.Throwable)var33, (java.io.Serializable)0);
    org.jsecurity.authc.SimpleAuthenticationInfo var38 = new org.jsecurity.authc.SimpleAuthenticationInfo((java.lang.Object)0, (java.lang.Object)10, "hi!");
    java.lang.Object var39 = var38.getCredentials();
    java.lang.String var40 = var38.toString();
    org.jsecurity.authc.AuthenticationInfo var41 = var0.afterAllAttempts((org.jsecurity.authc.AuthenticationToken)var26, (org.jsecurity.authc.AuthenticationInfo)var38);
    java.io.InputStream var43 = org.jsecurity.util.ClassUtils.getResourceAsStream("");
    java.lang.Object[] var44 = new java.lang.Object[] { var43};
    java.util.List var45 = org.jsecurity.util.CollectionUtils.asList(var44);
    org.jsecurity.authc.pam.ModularRealmAuthenticator var46 = new org.jsecurity.authc.pam.ModularRealmAuthenticator(var45);
    org.jsecurity.authc.pam.AllSuccessfulModularAuthenticationStrategy var47 = new org.jsecurity.authc.pam.AllSuccessfulModularAuthenticationStrategy();
    var46.setModularAuthenticationStrategy((org.jsecurity.authc.pam.ModularAuthenticationStrategy)var47);
    org.jsecurity.authz.SimpleAuthorizationInfo var49 = new org.jsecurity.authz.SimpleAuthorizationInfo();
    var49.addStringPermission("hi!");
    java.io.InputStream var53 = org.jsecurity.util.ClassUtils.getResourceAsStream("");
    java.lang.Object[] var54 = new java.lang.Object[] { var53};
    java.util.List var55 = org.jsecurity.util.CollectionUtils.asList(var54);
    var49.addRoles((java.util.Collection)var55);
    var46.setAuthenticationListeners((java.util.Collection)var55);
    org.jsecurity.realm.activedirectory.ActiveDirectoryRealm var58 = new org.jsecurity.realm.activedirectory.ActiveDirectoryRealm();
    var58.setPrincipalSuffix("");
    var46.setRealm((org.jsecurity.realm.Realm)var58);
    org.jsecurity.authc.pam.AllSuccessfulModularAuthenticationStrategy var62 = new org.jsecurity.authc.pam.AllSuccessfulModularAuthenticationStrategy();
    char[] var64 = new char[] { };
    org.jsecurity.authc.UsernamePasswordToken var66 = new org.jsecurity.authc.UsernamePasswordToken("hi!", var64, true);
    org.jsecurity.authc.SimpleAccount var67 = new org.jsecurity.authc.SimpleAccount();
    var67.setCredentialsExpired(false);
    boolean var70 = var67.isLocked();
    org.jsecurity.authc.AuthenticationInfo var71 = var62.afterAllAttempts((org.jsecurity.authc.AuthenticationToken)var66, (org.jsecurity.authc.AuthenticationInfo)var67);
    org.jsecurity.authc.pam.AllSuccessfulModularAuthenticationStrategy var72 = new org.jsecurity.authc.pam.AllSuccessfulModularAuthenticationStrategy();
    char[] var74 = new char[] { };
    org.jsecurity.authc.UsernamePasswordToken var76 = new org.jsecurity.authc.UsernamePasswordToken("hi!", var74, true);
    org.jsecurity.authc.SimpleAccount var77 = new org.jsecurity.authc.SimpleAccount();
    var77.setCredentialsExpired(false);
    boolean var80 = var77.isLocked();
    org.jsecurity.authc.AuthenticationInfo var81 = var72.afterAllAttempts((org.jsecurity.authc.AuthenticationToken)var76, (org.jsecurity.authc.AuthenticationInfo)var77);
    org.jsecurity.authc.SimpleAuthenticationInfo var82 = new org.jsecurity.authc.SimpleAuthenticationInfo();
    org.jsecurity.authz.UnauthenticatedException var85 = new org.jsecurity.authz.UnauthenticatedException("");
    org.jsecurity.session.UnknownSessionException var86 = new org.jsecurity.session.UnknownSessionException("org.jsecurity.config.ConfigurationException: dd\uFFFD", (java.lang.Throwable)var85);
    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      org.jsecurity.authc.AuthenticationInfo var87 = var0.afterAttempt((org.jsecurity.realm.Realm)var58, (org.jsecurity.authc.AuthenticationToken)var66, var81, (org.jsecurity.authc.AuthenticationInfo)var82, (java.lang.Throwable)var85);
      fail("Expected exception of type org.jsecurity.authc.AuthenticationException");
    } catch (org.jsecurity.authc.AuthenticationException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var2);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var8 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var9);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var13);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var20 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var21);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var25);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var27);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var28);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var29 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var39 + "' != '" + 10+ "'", var39.equals(10));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var41);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var43);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var44);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var45);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var53);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var54);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var55);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var64);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var70 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var71);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var74);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var80 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var81);

  }

  public void test96() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest0.test96");


    org.jsecurity.realm.SimpleAccountRealm var1 = new org.jsecurity.realm.SimpleAccountRealm("hi!");
    java.lang.Class var2 = var1.getAuthenticationTokenClass();
    org.jsecurity.realm.text.TextConfigurationRealm var3 = new org.jsecurity.realm.text.TextConfigurationRealm();
    java.io.InputStream var5 = org.jsecurity.util.ClassUtils.getResourceAsStream("");
    java.lang.Object[] var6 = new java.lang.Object[] { var5};
    java.util.List var7 = org.jsecurity.util.CollectionUtils.asList(var6);
    org.jsecurity.authc.pam.ModularRealmAuthenticator var8 = new org.jsecurity.authc.pam.ModularRealmAuthenticator(var7);
    org.jsecurity.subject.SimplePrincipalCollection var10 = new org.jsecurity.subject.SimplePrincipalCollection((java.util.Collection)var7, "org.jsecurity.authz.UnauthorizedException: org.jsecurity.session.ExpiredSessionException: ");
    org.jsecurity.session.UnknownSessionException var15 = new org.jsecurity.session.UnknownSessionException("dd\uFFFD", (java.io.Serializable)100.0f);
    org.jsecurity.session.SessionException var17 = new org.jsecurity.session.SessionException("dd\uFFFD", (java.lang.Throwable)var15, (java.io.Serializable)0);
    org.jsecurity.session.SessionException var18 = new org.jsecurity.session.SessionException("dd\uFFFD", (java.lang.Throwable)var15);
    var10.add((java.lang.Object)var18, "org.jsecurity.config.ConfigurationException: dd\uFFFD");
    var3.onLogout((org.jsecurity.subject.PrincipalCollection)var10);
    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      org.jsecurity.authz.AuthorizationInfo var22 = var1.getAuthorizationInfo((org.jsecurity.subject.PrincipalCollection)var10);
      fail("Expected exception of type java.util.NoSuchElementException");
    } catch (java.util.NoSuchElementException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var2);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var5);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var6);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var7);

  }

  public void test97() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest0.test97");


    org.jsecurity.config.ReflectionBuilder var0 = new org.jsecurity.config.ReflectionBuilder();
    org.jsecurity.io.ResourceException var3 = new org.jsecurity.io.ResourceException("hi!");
    org.jsecurity.codec.CodecException var4 = new org.jsecurity.codec.CodecException((java.lang.Throwable)var3);
    org.jsecurity.JSecurityException var5 = new org.jsecurity.JSecurityException("a2b823b1e72eae2b727289df8a00a89df8a0bab6ad8a89c4c5c7a9b62a270000", (java.lang.Throwable)var3);
    org.jsecurity.authc.ExcessiveAttemptsException var6 = new org.jsecurity.authc.ExcessiveAttemptsException((java.lang.Throwable)var5);
    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      org.jsecurity.crypto.hash.Sha384Hash var7 = new org.jsecurity.crypto.hash.Sha384Hash((java.lang.Object)var0, (java.lang.Object)var6);
      fail("Expected exception of type org.jsecurity.codec.CodecException");
    } catch (org.jsecurity.codec.CodecException e) {
      // Expected exception.
    }

  }

  public void test98() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest0.test98");


    byte[] var3 = new byte[] { (byte)100, (byte)100, (byte)(-1)};
    java.lang.String var4 = org.jsecurity.codec.CodecSupport.toString(var3);
    char[] var5 = org.jsecurity.codec.CodecSupport.toChars(var3);
    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      byte[] var7 = org.jsecurity.codec.CodecSupport.toBytes(var5, "a2b823b1e72eae2b727289df8a00a89df8a0bab6ad8a89c4c5c7a9b62a270000");
      fail("Expected exception of type org.jsecurity.codec.CodecException");
    } catch (org.jsecurity.codec.CodecException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var3);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var4 + "' != '" + "dd\uFFFD"+ "'", var4.equals("dd\uFFFD"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var5);

  }

  public void test99() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest0.test99");


    byte[] var1 = org.jsecurity.codec.CodecSupport.toBytes("dd\uFFFD");
    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      byte[] var2 = org.jsecurity.codec.Hex.decode(var1);
      fail("Expected exception of type java.lang.IllegalArgumentException");
    } catch (java.lang.IllegalArgumentException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var1);

  }

  public void test100() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest0.test100");


    org.jsecurity.authz.SimpleAuthorizationInfo var1 = new org.jsecurity.authz.SimpleAuthorizationInfo();
    org.jsecurity.session.UnknownSessionException var6 = new org.jsecurity.session.UnknownSessionException("dd\uFFFD", (java.io.Serializable)100.0f);
    org.jsecurity.subject.SubjectException var7 = new org.jsecurity.subject.SubjectException("dd\uFFFD", (java.lang.Throwable)var6);
    org.jsecurity.io.SerializationException var8 = new org.jsecurity.io.SerializationException("", (java.lang.Throwable)var7);
    java.lang.Throwable[] var9 = var7.getSuppressed();
    java.util.Set var10 = org.jsecurity.util.CollectionUtils.asSet((java.lang.Object[])var9);
    var1.setStringPermissions(var10);
    org.jsecurity.authz.SimpleRole var12 = new org.jsecurity.authz.SimpleRole("\u0000\u0000", var10);
    org.jsecurity.jndi.JndiTemplate var13 = new org.jsecurity.jndi.JndiTemplate();
    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      org.jsecurity.authz.SimpleAuthorizingAccount var15 = new org.jsecurity.authz.SimpleAuthorizingAccount((java.util.Collection)var10, (java.lang.Object)var13, "org.jsecurity.config.ConfigurationException: dd\uFFFD");
      fail("Expected exception of type java.lang.IllegalArgumentException");
    } catch (java.lang.IllegalArgumentException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var9);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var10);

  }

  public void test101() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest0.test101");


    org.jsecurity.codec.CodecException var2 = new org.jsecurity.codec.CodecException("dd\uFFFD");
    org.jsecurity.authc.ConcurrentAccessException var3 = new org.jsecurity.authc.ConcurrentAccessException("org.jsecurity.authz.UnauthorizedException: org.jsecurity.session.ExpiredSessionException: ", (java.lang.Throwable)var2);
    org.jsecurity.subject.SimplePrincipalCollection var5 = new org.jsecurity.subject.SimplePrincipalCollection((java.lang.Object)var2, "");
    org.jsecurity.authc.pam.FirstSuccessfulAuthenticationStrategy var6 = new org.jsecurity.authc.pam.FirstSuccessfulAuthenticationStrategy();
    org.jsecurity.authz.UnauthorizedException var8 = new org.jsecurity.authz.UnauthorizedException("org.jsecurity.config.ConfigurationException: dd\uFFFD");
    java.lang.Throwable[] var9 = var8.getSuppressed();
    java.util.List var10 = org.jsecurity.util.CollectionUtils.asList((java.lang.Object[])var9);
    org.jsecurity.authc.UsernamePasswordToken var11 = new org.jsecurity.authc.UsernamePasswordToken();
    java.lang.String var12 = var11.getUsername();
    java.net.InetAddress var13 = var11.getInetAddress();
    org.jsecurity.authc.AuthenticationInfo var14 = var6.beforeAllAttempts((java.util.Collection)var10, (org.jsecurity.authc.AuthenticationToken)var11);
    org.jsecurity.session.UnknownSessionException var19 = new org.jsecurity.session.UnknownSessionException("dd\uFFFD", (java.io.Serializable)100.0f);
    org.jsecurity.subject.SubjectException var20 = new org.jsecurity.subject.SubjectException("dd\uFFFD", (java.lang.Throwable)var19);
    org.jsecurity.io.SerializationException var21 = new org.jsecurity.io.SerializationException("", (java.lang.Throwable)var20);
    java.lang.Throwable[] var22 = var20.getSuppressed();
    java.util.Set var23 = org.jsecurity.util.CollectionUtils.asSet((java.lang.Object[])var22);
    org.jsecurity.authc.SimpleAccount var24 = new org.jsecurity.authc.SimpleAccount((org.jsecurity.subject.PrincipalCollection)var5, (java.lang.Object)var10, var23);
    var24.addStringPermission("org.jsecurity.config.ConfigurationException: dd\uFFFD");
    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      var24.addRole("org.jsecurity.config.ConfigurationException: dd\uFFFD");
      fail("Expected exception of type java.lang.UnsupportedOperationException");
    } catch (java.lang.UnsupportedOperationException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var9);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var10);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var12);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var13);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var14);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var22);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var23);

  }

  public void test102() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest0.test102");


    org.jsecurity.realm.activedirectory.ActiveDirectoryRealm var0 = new org.jsecurity.realm.activedirectory.ActiveDirectoryRealm();
    org.jsecurity.authc.credential.Sha256CredentialsMatcher var1 = new org.jsecurity.authc.credential.Sha256CredentialsMatcher();
    var0.setCredentialsMatcher((org.jsecurity.authc.credential.CredentialsMatcher)var1);
    java.lang.String var3 = var0.getAuthorizationCacheName();
    var0.setUrl("hi!");
    org.jsecurity.realm.ldap.DefaultLdapContextFactory var6 = new org.jsecurity.realm.ldap.DefaultLdapContextFactory();
    var0.setLdapContextFactory((org.jsecurity.realm.ldap.LdapContextFactory)var6);
    var6.setAuthentication("org.jsecurity.authz.UnauthorizedException: org.jsecurity.session.ExpiredSessionException: ");
    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      javax.naming.ldap.LdapContext var10 = var6.getSystemLdapContext();
      fail("Expected exception of type java.lang.IllegalStateException");
    } catch (java.lang.IllegalStateException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var3);

  }

  public void test103() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest0.test103");


    org.jsecurity.authz.SimpleRole var0 = new org.jsecurity.authz.SimpleRole();
    org.jsecurity.authz.SimpleAuthorizationInfo var1 = new org.jsecurity.authz.SimpleAuthorizationInfo();
    var1.addRole("a2b823b1e72eae2b727289df8a00a89df8a0bab6ad8a89c4c5c7a9b62a270000");
    org.jsecurity.session.UnknownSessionException var8 = new org.jsecurity.session.UnknownSessionException("dd\uFFFD", (java.io.Serializable)100.0f);
    org.jsecurity.subject.SubjectException var9 = new org.jsecurity.subject.SubjectException("dd\uFFFD", (java.lang.Throwable)var8);
    org.jsecurity.io.SerializationException var10 = new org.jsecurity.io.SerializationException("", (java.lang.Throwable)var9);
    java.lang.Throwable[] var11 = var9.getSuppressed();
    java.util.Set var12 = org.jsecurity.util.CollectionUtils.asSet((java.lang.Object[])var11);
    var1.addRoles((java.util.Collection)var12);
    var0.addAll((java.util.Collection)var12);
    org.jsecurity.session.UnknownSessionException var20 = new org.jsecurity.session.UnknownSessionException("dd\uFFFD", (java.io.Serializable)100.0f);
    org.jsecurity.subject.SubjectException var21 = new org.jsecurity.subject.SubjectException("dd\uFFFD", (java.lang.Throwable)var20);
    org.jsecurity.io.SerializationException var22 = new org.jsecurity.io.SerializationException("", (java.lang.Throwable)var21);
    org.jsecurity.authc.ExpiredCredentialsException var23 = new org.jsecurity.authc.ExpiredCredentialsException("", (java.lang.Throwable)var21);
    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      org.jsecurity.crypto.hash.Sha256Hash var25 = new org.jsecurity.crypto.hash.Sha256Hash((java.lang.Object)var0, (java.lang.Object)var23, (-1));
      fail("Expected exception of type org.jsecurity.codec.CodecException");
    } catch (org.jsecurity.codec.CodecException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var11);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var12);

  }

  public void test104() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest0.test104");


    org.jsecurity.authc.pam.FirstSuccessfulAuthenticationStrategy var0 = new org.jsecurity.authc.pam.FirstSuccessfulAuthenticationStrategy();
    org.jsecurity.realm.ldap.DefaultLdapContextFactory var1 = new org.jsecurity.realm.ldap.DefaultLdapContextFactory();
    org.jsecurity.io.IniResource var2 = new org.jsecurity.io.IniResource();
    var2.setCharsetName("org.jsecurity.authz.UnauthorizedException: org.jsecurity.session.ExpiredSessionException: ");
    java.util.Map var5 = var2.getSections();
    var1.setAdditionalEnvironment(var5);
    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      org.jsecurity.crypto.hash.Sha384Hash var8 = new org.jsecurity.crypto.hash.Sha384Hash((java.lang.Object)var0, (java.lang.Object)var5, 0);
      fail("Expected exception of type org.jsecurity.codec.CodecException");
    } catch (org.jsecurity.codec.CodecException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var5);

  }

  public void test105() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest0.test105");


    org.jsecurity.realm.activedirectory.ActiveDirectoryRealm var0 = new org.jsecurity.realm.activedirectory.ActiveDirectoryRealm();
    org.jsecurity.authc.credential.Sha256CredentialsMatcher var1 = new org.jsecurity.authc.credential.Sha256CredentialsMatcher();
    var0.setCredentialsMatcher((org.jsecurity.authc.credential.CredentialsMatcher)var1);
    java.lang.String var3 = var0.getAuthorizationCacheName();
    org.jsecurity.authc.UsernamePasswordToken var4 = new org.jsecurity.authc.UsernamePasswordToken();
    java.lang.String var5 = var4.getUsername();
    java.lang.Object var6 = var4.getPrincipal();
    boolean var7 = var0.supports((org.jsecurity.authc.AuthenticationToken)var4);
    org.jsecurity.realm.text.TextConfigurationRealm var8 = new org.jsecurity.realm.text.TextConfigurationRealm();
    java.io.InputStream var10 = org.jsecurity.util.ClassUtils.getResourceAsStream("");
    java.lang.Object[] var11 = new java.lang.Object[] { var10};
    java.util.List var12 = org.jsecurity.util.CollectionUtils.asList(var11);
    org.jsecurity.authc.pam.ModularRealmAuthenticator var13 = new org.jsecurity.authc.pam.ModularRealmAuthenticator(var12);
    org.jsecurity.subject.SimplePrincipalCollection var15 = new org.jsecurity.subject.SimplePrincipalCollection((java.util.Collection)var12, "org.jsecurity.authz.UnauthorizedException: org.jsecurity.session.ExpiredSessionException: ");
    org.jsecurity.session.UnknownSessionException var20 = new org.jsecurity.session.UnknownSessionException("dd\uFFFD", (java.io.Serializable)100.0f);
    org.jsecurity.session.SessionException var22 = new org.jsecurity.session.SessionException("dd\uFFFD", (java.lang.Throwable)var20, (java.io.Serializable)0);
    org.jsecurity.session.SessionException var23 = new org.jsecurity.session.SessionException("dd\uFFFD", (java.lang.Throwable)var20);
    var15.add((java.lang.Object)var23, "org.jsecurity.config.ConfigurationException: dd\uFFFD");
    var8.onLogout((org.jsecurity.subject.PrincipalCollection)var15);
    org.jsecurity.cache.HashtableCacheManager var27 = new org.jsecurity.cache.HashtableCacheManager();
    org.jsecurity.cache.Cache var29 = var27.getCache("\u0000\u0000");
    var8.setAuthorizationCache(var29);
    org.jsecurity.codec.CodecException var33 = new org.jsecurity.codec.CodecException("dd\uFFFD");
    org.jsecurity.authc.ConcurrentAccessException var34 = new org.jsecurity.authc.ConcurrentAccessException("org.jsecurity.authz.UnauthorizedException: org.jsecurity.session.ExpiredSessionException: ", (java.lang.Throwable)var33);
    org.jsecurity.subject.SimplePrincipalCollection var36 = new org.jsecurity.subject.SimplePrincipalCollection((java.lang.Object)var33, "");
    var8.onLogout((org.jsecurity.subject.PrincipalCollection)var36);
    org.jsecurity.codec.CodecException var40 = new org.jsecurity.codec.CodecException("dd\uFFFD");
    org.jsecurity.authc.ConcurrentAccessException var41 = new org.jsecurity.authc.ConcurrentAccessException("org.jsecurity.authz.UnauthorizedException: org.jsecurity.session.ExpiredSessionException: ", (java.lang.Throwable)var40);
    org.jsecurity.subject.SimplePrincipalCollection var43 = new org.jsecurity.subject.SimplePrincipalCollection((java.lang.Object)var40, "");
    org.jsecurity.authc.pam.FirstSuccessfulAuthenticationStrategy var44 = new org.jsecurity.authc.pam.FirstSuccessfulAuthenticationStrategy();
    org.jsecurity.authz.UnauthorizedException var46 = new org.jsecurity.authz.UnauthorizedException("org.jsecurity.config.ConfigurationException: dd\uFFFD");
    java.lang.Throwable[] var47 = var46.getSuppressed();
    java.util.List var48 = org.jsecurity.util.CollectionUtils.asList((java.lang.Object[])var47);
    org.jsecurity.authc.UsernamePasswordToken var49 = new org.jsecurity.authc.UsernamePasswordToken();
    java.lang.String var50 = var49.getUsername();
    java.net.InetAddress var51 = var49.getInetAddress();
    org.jsecurity.authc.AuthenticationInfo var52 = var44.beforeAllAttempts((java.util.Collection)var48, (org.jsecurity.authc.AuthenticationToken)var49);
    org.jsecurity.session.UnknownSessionException var57 = new org.jsecurity.session.UnknownSessionException("dd\uFFFD", (java.io.Serializable)100.0f);
    org.jsecurity.subject.SubjectException var58 = new org.jsecurity.subject.SubjectException("dd\uFFFD", (java.lang.Throwable)var57);
    org.jsecurity.io.SerializationException var59 = new org.jsecurity.io.SerializationException("", (java.lang.Throwable)var58);
    java.lang.Throwable[] var60 = var58.getSuppressed();
    java.util.Set var61 = org.jsecurity.util.CollectionUtils.asSet((java.lang.Object[])var60);
    org.jsecurity.authc.SimpleAccount var62 = new org.jsecurity.authc.SimpleAccount((org.jsecurity.subject.PrincipalCollection)var43, (java.lang.Object)var48, var61);
    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      boolean var63 = var0.isPermittedAll((org.jsecurity.subject.PrincipalCollection)var36, (java.util.Collection)var48);
      fail("Expected exception of type java.util.NoSuchElementException");
    } catch (java.util.NoSuchElementException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var3);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var5);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var6);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var7 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var10);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var11);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var12);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var29);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var47);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var48);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var50);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var51);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var52);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var60);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var61);

  }

  public void test106() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest0.test106");


    org.jsecurity.crypto.hash.Md5Hash var1 = org.jsecurity.crypto.hash.Md5Hash.fromBase64String("dd\uFFFD");
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var1);

  }

  public void test107() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest0.test107");


    org.jsecurity.crypto.hash.Sha512Hash var1 = org.jsecurity.crypto.hash.Sha512Hash.fromBase64String("hi!");
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var1);

  }

  public void test108() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest0.test108");


    org.jsecurity.jndi.JndiTemplate var0 = new org.jsecurity.jndi.JndiTemplate();
    org.jsecurity.io.ResourceException var4 = new org.jsecurity.io.ResourceException("hi!");
    org.jsecurity.codec.CodecException var5 = new org.jsecurity.codec.CodecException((java.lang.Throwable)var4);
    org.jsecurity.JSecurityException var6 = new org.jsecurity.JSecurityException("a2b823b1e72eae2b727289df8a00a89df8a0bab6ad8a89c4c5c7a9b62a270000", (java.lang.Throwable)var4);
    org.jsecurity.authc.ExcessiveAttemptsException var7 = new org.jsecurity.authc.ExcessiveAttemptsException((java.lang.Throwable)var6);
    org.jsecurity.session.StoppedSessionException var8 = new org.jsecurity.session.StoppedSessionException((java.lang.Throwable)var6);
    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      var0.bind("", (java.lang.Object)var6);
      fail("Expected exception of type javax.naming.NoInitialContextException");
    } catch (javax.naming.NoInitialContextException e) {
      // Expected exception.
    }

  }

  public void test109() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest0.test109");


    org.jsecurity.authc.CredentialsException var0 = new org.jsecurity.authc.CredentialsException();

  }

  public void test110() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest0.test110");


    org.jsecurity.authc.pam.AllSuccessfulModularAuthenticationStrategy var0 = new org.jsecurity.authc.pam.AllSuccessfulModularAuthenticationStrategy();
    char[] var2 = new char[] { };
    org.jsecurity.authc.UsernamePasswordToken var4 = new org.jsecurity.authc.UsernamePasswordToken("hi!", var2, true);
    org.jsecurity.authc.SimpleAccount var5 = new org.jsecurity.authc.SimpleAccount();
    var5.setCredentialsExpired(false);
    boolean var8 = var5.isLocked();
    org.jsecurity.authc.AuthenticationInfo var9 = var0.afterAllAttempts((org.jsecurity.authc.AuthenticationToken)var4, (org.jsecurity.authc.AuthenticationInfo)var5);
    char[] var13 = new char[] { '4', '#'};
    org.jsecurity.authc.UsernamePasswordToken var14 = new org.jsecurity.authc.UsernamePasswordToken("\u0000\u0000", var13);
    org.jsecurity.authc.SimpleAccount var15 = new org.jsecurity.authc.SimpleAccount();
    var15.setCredentialsExpired(false);
    var15.setCredentialsExpired(false);
    boolean var20 = var15.isCredentialsExpired();
    org.jsecurity.authc.AuthenticationInfo var21 = var0.afterAllAttempts((org.jsecurity.authc.AuthenticationToken)var14, (org.jsecurity.authc.AuthenticationInfo)var15);
    boolean var22 = var14.isRememberMe();
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var2);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var8 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var9);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var13);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var20 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var21);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var22 == false);

  }

  public void test111() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest0.test111");


    org.jsecurity.realm.activedirectory.ActiveDirectoryRealm var0 = new org.jsecurity.realm.activedirectory.ActiveDirectoryRealm();
    var0.init();
    org.jsecurity.realm.text.TextConfigurationRealm var2 = new org.jsecurity.realm.text.TextConfigurationRealm();
    java.io.InputStream var4 = org.jsecurity.util.ClassUtils.getResourceAsStream("");
    java.lang.Object[] var5 = new java.lang.Object[] { var4};
    java.util.List var6 = org.jsecurity.util.CollectionUtils.asList(var5);
    org.jsecurity.authc.pam.ModularRealmAuthenticator var7 = new org.jsecurity.authc.pam.ModularRealmAuthenticator(var6);
    org.jsecurity.subject.SimplePrincipalCollection var9 = new org.jsecurity.subject.SimplePrincipalCollection((java.util.Collection)var6, "org.jsecurity.authz.UnauthorizedException: org.jsecurity.session.ExpiredSessionException: ");
    org.jsecurity.session.UnknownSessionException var14 = new org.jsecurity.session.UnknownSessionException("dd\uFFFD", (java.io.Serializable)100.0f);
    org.jsecurity.session.SessionException var16 = new org.jsecurity.session.SessionException("dd\uFFFD", (java.lang.Throwable)var14, (java.io.Serializable)0);
    org.jsecurity.session.SessionException var17 = new org.jsecurity.session.SessionException("dd\uFFFD", (java.lang.Throwable)var14);
    var9.add((java.lang.Object)var17, "org.jsecurity.config.ConfigurationException: dd\uFFFD");
    var2.onLogout((org.jsecurity.subject.PrincipalCollection)var9);
    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      boolean var22 = var0.hasRole((org.jsecurity.subject.PrincipalCollection)var9, "dd\uFFFD");
      fail("Expected exception of type java.util.NoSuchElementException");
    } catch (java.util.NoSuchElementException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var4);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var5);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var6);

  }

  public void test112() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest0.test112");


    org.jsecurity.io.IniResource var0 = new org.jsecurity.io.IniResource();
    var0.setCharsetName("org.jsecurity.authz.UnauthorizedException: org.jsecurity.session.ExpiredSessionException: ");
    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      var0.load("org.jsecurity.config.ConfigurationException: dd\uFFFD");
      fail("Expected exception of type org.jsecurity.io.ResourceException");
    } catch (org.jsecurity.io.ResourceException e) {
      // Expected exception.
    }

  }

  public void test113() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest0.test113");


    org.jsecurity.crypto.hash.Sha1Hash var1 = org.jsecurity.crypto.hash.Sha1Hash.fromHexString("");
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var1);

  }

  public void test114() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest0.test114");


    org.jsecurity.authz.permission.InvalidPermissionStringException var2 = new org.jsecurity.authz.permission.InvalidPermissionStringException("", "dd\uFFFD");
    org.jsecurity.io.IniResource var3 = new org.jsecurity.io.IniResource();
    var3.setCharsetName("org.jsecurity.authz.UnauthorizedException: org.jsecurity.session.ExpiredSessionException: ");
    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      org.jsecurity.crypto.hash.Sha256Hash var6 = new org.jsecurity.crypto.hash.Sha256Hash((java.lang.Object)var2, (java.lang.Object)var3);
      fail("Expected exception of type org.jsecurity.codec.CodecException");
    } catch (org.jsecurity.codec.CodecException e) {
      // Expected exception.
    }

  }

  public void test115() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest0.test115");


    boolean var1 = org.jsecurity.util.StringUtils.hasLength("org.jsecurity.authz.UnauthorizedException: org.jsecurity.session.ExpiredSessionException: ");
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var1 == true);

  }

  public void test116() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest0.test116");


    org.jsecurity.authc.ConcurrentAccessException var1 = new org.jsecurity.authc.ConcurrentAccessException();
    java.lang.Throwable[] var2 = var1.getSuppressed();
    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      java.lang.Object var3 = org.jsecurity.util.ClassUtils.newInstance("", (java.lang.Object[])var2);
      fail("Expected exception of type org.jsecurity.util.UnknownClassException");
    } catch (org.jsecurity.util.UnknownClassException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var2);

  }

  public void test117() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest0.test117");


    org.jsecurity.config.ConfigurationException var1 = new org.jsecurity.config.ConfigurationException("org.jsecurity.config.ConfigurationException: dd\uFFFD");

  }

  public void test118() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest0.test118");


    org.jsecurity.authc.credential.Sha384CredentialsMatcher var0 = new org.jsecurity.authc.credential.Sha384CredentialsMatcher();
    boolean var1 = var0.isHashSalted();
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var1 == false);

  }

  public void test119() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest0.test119");


    org.jsecurity.jndi.JndiTemplate var0 = new org.jsecurity.jndi.JndiTemplate();
    java.util.Properties var1 = var0.getEnvironment();
    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      var0.unbind("hi!");
      fail("Expected exception of type javax.naming.NoInitialContextException");
    } catch (javax.naming.NoInitialContextException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var1);

  }

  public void test120() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest0.test120");


    org.jsecurity.realm.SimpleAccountRealm var1 = new org.jsecurity.realm.SimpleAccountRealm("hi!");
    java.lang.Class var2 = var1.getAuthenticationTokenClass();
    org.jsecurity.realm.SimpleAccountRealm var4 = new org.jsecurity.realm.SimpleAccountRealm("hi!");
    java.lang.Class var5 = var4.getAuthenticationTokenClass();
    java.util.Collection var6 = org.jsecurity.util.CollectionUtils.emptyCollection(var5);
    java.lang.Object var7 = org.jsecurity.util.ClassUtils.newInstance(var5);
    java.lang.Class[] var8 = new java.lang.Class[] { var5};
    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      java.lang.reflect.Constructor var9 = org.jsecurity.util.ClassUtils.getConstructor(var2, var8);
      fail("Expected exception of type java.lang.IllegalStateException");
    } catch (java.lang.IllegalStateException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var2);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var5);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var6);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var7);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var8);

  }

  public void test121() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest0.test121");


    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      org.jsecurity.io.IniResource var2 = new org.jsecurity.io.IniResource("\u0000\u0000", "\u0000\u0000");
      fail("Expected exception of type org.jsecurity.io.ResourceException");
    } catch (org.jsecurity.io.ResourceException e) {
      // Expected exception.
    }

  }

  public void test122() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest0.test122");


    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      org.jsecurity.crypto.hash.Md5Hash var1 = org.jsecurity.crypto.hash.Md5Hash.fromHexString("dd\uFFFD");
      fail("Expected exception of type java.lang.IllegalArgumentException");
    } catch (java.lang.IllegalArgumentException e) {
      // Expected exception.
    }

  }

  public void test123() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest0.test123");


    char[] var2 = new char[] { };
    org.jsecurity.authc.UsernamePasswordToken var4 = new org.jsecurity.authc.UsernamePasswordToken("hi!", var2, true);
    org.jsecurity.authc.UsernamePasswordToken var5 = new org.jsecurity.authc.UsernamePasswordToken("\u0000\u0000", var2);
    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      byte[] var7 = org.jsecurity.codec.CodecSupport.toBytes(var2, "");
      fail("Expected exception of type org.jsecurity.codec.CodecException");
    } catch (org.jsecurity.codec.CodecException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var2);

  }

  public void test124() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest0.test124");


    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      org.jsecurity.authz.permission.WildcardPermission var2 = new org.jsecurity.authz.permission.WildcardPermission("\u0000\u0000", false);
      fail("Expected exception of type java.lang.IllegalArgumentException");
    } catch (java.lang.IllegalArgumentException e) {
      // Expected exception.
    }

  }

  public void test125() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest0.test125");


    org.jsecurity.crypto.BlowfishCipher var0 = new org.jsecurity.crypto.BlowfishCipher();
    byte[] var4 = new byte[] { (byte)100, (byte)100, (byte)(-1)};
    java.lang.String var5 = org.jsecurity.codec.CodecSupport.toString(var4);
    byte[] var7 = org.jsecurity.codec.Base64.decode("hi!");
    byte[] var8 = var0.encrypt(var4, var7);
    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      java.lang.String var10 = org.jsecurity.codec.CodecSupport.toString(var8, "a2b823b1e72eae2b727289df8a00a89df8a0bab6ad8a89c4c5c7a9b62a270000");
      fail("Expected exception of type org.jsecurity.codec.CodecException");
    } catch (org.jsecurity.codec.CodecException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var4);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var5 + "' != '" + "dd\uFFFD"+ "'", var5.equals("dd\uFFFD"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var7);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var8);

  }

  public void test126() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest0.test126");


    org.jsecurity.session.UnknownSessionException var3 = new org.jsecurity.session.UnknownSessionException("dd\uFFFD", (java.io.Serializable)100.0f);
    org.jsecurity.session.SessionException var5 = new org.jsecurity.session.SessionException("dd\uFFFD", (java.lang.Throwable)var3, (java.io.Serializable)0);
    org.jsecurity.authc.SimpleAuthenticationInfo var8 = new org.jsecurity.authc.SimpleAuthenticationInfo((java.lang.Object)0, (java.lang.Object)10, "hi!");
    org.jsecurity.session.UnknownSessionException var14 = new org.jsecurity.session.UnknownSessionException("dd\uFFFD", (java.io.Serializable)100.0f);
    org.jsecurity.subject.SubjectException var15 = new org.jsecurity.subject.SubjectException("dd\uFFFD", (java.lang.Throwable)var14);
    org.jsecurity.authc.AccountException var16 = new org.jsecurity.authc.AccountException("hi!", (java.lang.Throwable)var15);
    org.jsecurity.session.ExpiredSessionException var17 = new org.jsecurity.session.ExpiredSessionException("dd\uFFFD", (java.io.Serializable)var16);
    java.io.Serializable var18 = var17.getSessionId();
    boolean var19 = var8.equals((java.lang.Object)var17);
    org.jsecurity.io.SerializationException var20 = new org.jsecurity.io.SerializationException((java.lang.Throwable)var17);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var18);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var19 == false);

  }

  public void test127() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest0.test127");


    org.jsecurity.realm.activedirectory.ActiveDirectoryRealm var0 = new org.jsecurity.realm.activedirectory.ActiveDirectoryRealm();
    org.jsecurity.authc.credential.Sha256CredentialsMatcher var1 = new org.jsecurity.authc.credential.Sha256CredentialsMatcher();
    var0.setCredentialsMatcher((org.jsecurity.authc.credential.CredentialsMatcher)var1);
    java.lang.String var3 = var0.getAuthorizationCacheName();
    var0.setUrl("hi!");
    java.io.InputStream var7 = org.jsecurity.util.ClassUtils.getResourceAsStream("");
    java.lang.Object[] var8 = new java.lang.Object[] { var7};
    java.util.List var9 = org.jsecurity.util.CollectionUtils.asList(var8);
    org.jsecurity.authc.pam.ModularRealmAuthenticator var10 = new org.jsecurity.authc.pam.ModularRealmAuthenticator(var9);
    org.jsecurity.subject.SimplePrincipalCollection var12 = new org.jsecurity.subject.SimplePrincipalCollection((java.util.Collection)var9, "org.jsecurity.authz.UnauthorizedException: org.jsecurity.session.ExpiredSessionException: ");
    org.jsecurity.io.ResourceException var16 = new org.jsecurity.io.ResourceException("hi!");
    org.jsecurity.authc.UnknownAccountException var17 = new org.jsecurity.authc.UnknownAccountException((java.lang.Throwable)var16);
    org.jsecurity.session.StoppedSessionException var18 = new org.jsecurity.session.StoppedSessionException("dd\uFFFD", (java.io.Serializable)var16);
    org.jsecurity.session.UnknownSessionException var19 = new org.jsecurity.session.UnknownSessionException("org.jsecurity.authz.UnauthorizedException: org.jsecurity.session.ExpiredSessionException: ", (java.lang.Throwable)var16);
    boolean var20 = var12.equals((java.lang.Object)var16);
    java.lang.String[] var22 = new java.lang.String[] { "org.jsecurity.config.ConfigurationException: dd\uFFFD"};
    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      boolean var23 = var0.isPermittedAll((org.jsecurity.subject.PrincipalCollection)var12, var22);
      fail("Expected exception of type java.util.NoSuchElementException");
    } catch (java.util.NoSuchElementException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var3);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var7);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var8);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var9);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var20 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var22);

  }

  public void test128() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest0.test128");


    boolean var1 = org.jsecurity.util.StringUtils.hasLength("dd\uFFFD");
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var1 == true);

  }

  public void test129() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest0.test129");


    java.io.InputStream var1 = org.jsecurity.util.ClassUtils.getResourceAsStream("hi!");
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var1);

  }

  public void test130() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest0.test130");


    org.jsecurity.authc.AuthenticationException var1 = new org.jsecurity.authc.AuthenticationException("dd\uFFFD");

  }

  public void test131() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest0.test131");


    java.lang.String[] var1 = org.jsecurity.util.StringUtils.splitKeyValue("\u0000\u0000");
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var1);

  }

  public void test132() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest0.test132");


    org.jsecurity.authc.CredentialsException var1 = new org.jsecurity.authc.CredentialsException("a2b823b1e72eae2b727289df8a00a89df8a0bab6ad8a89c4c5c7a9b62a270000");

  }

  public void test133() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest0.test133");


    org.jsecurity.io.SerializationException var1 = new org.jsecurity.io.SerializationException("\u0000\u0000");
    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      org.jsecurity.crypto.hash.Md2Hash var2 = new org.jsecurity.crypto.hash.Md2Hash((java.lang.Object)var1);
      fail("Expected exception of type org.jsecurity.codec.CodecException");
    } catch (org.jsecurity.codec.CodecException e) {
      // Expected exception.
    }

  }

  public void test134() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest0.test134");


    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      org.jsecurity.io.IniResource var2 = new org.jsecurity.io.IniResource("hi!", "dd\uFFFD");
      fail("Expected exception of type org.jsecurity.io.ResourceException");
    } catch (org.jsecurity.io.ResourceException e) {
      // Expected exception.
    }

  }

  public void test135() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest0.test135");


    org.jsecurity.session.UnknownSessionException var5 = new org.jsecurity.session.UnknownSessionException("dd\uFFFD", (java.io.Serializable)100.0f);
    org.jsecurity.config.ConfigurationException var6 = new org.jsecurity.config.ConfigurationException("dd\uFFFD", (java.lang.Throwable)var5);
    org.jsecurity.session.ExpiredSessionException var8 = new org.jsecurity.session.ExpiredSessionException("", (java.lang.Throwable)var6, (java.io.Serializable)true);
    org.jsecurity.authc.pam.UnsupportedTokenException var9 = new org.jsecurity.authc.pam.UnsupportedTokenException((java.lang.Throwable)var8);
    org.jsecurity.authc.AccountException var10 = new org.jsecurity.authc.AccountException((java.lang.Throwable)var9);
    org.jsecurity.authz.UnauthorizedException var11 = new org.jsecurity.authz.UnauthorizedException("a2b823b1e72eae2b727289df8a00a89df8a0bab6ad8a89c4c5c7a9b62a270000", (java.lang.Throwable)var10);
    org.jsecurity.authz.UnauthenticatedException var13 = new org.jsecurity.authz.UnauthenticatedException("hi!");
    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      org.jsecurity.crypto.hash.Md5Hash var15 = new org.jsecurity.crypto.hash.Md5Hash((java.lang.Object)var10, (java.lang.Object)"hi!", (-1));
      fail("Expected exception of type org.jsecurity.codec.CodecException");
    } catch (org.jsecurity.codec.CodecException e) {
      // Expected exception.
    }

  }

  public void test136() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest0.test136");


    org.jsecurity.realm.activedirectory.ActiveDirectoryRealm var0 = new org.jsecurity.realm.activedirectory.ActiveDirectoryRealm();
    org.jsecurity.authc.credential.Sha256CredentialsMatcher var1 = new org.jsecurity.authc.credential.Sha256CredentialsMatcher();
    var0.setCredentialsMatcher((org.jsecurity.authc.credential.CredentialsMatcher)var1);
    java.lang.String var3 = var0.getAuthorizationCacheName();
    org.jsecurity.codec.CodecException var6 = new org.jsecurity.codec.CodecException("dd\uFFFD");
    org.jsecurity.authc.ConcurrentAccessException var7 = new org.jsecurity.authc.ConcurrentAccessException("org.jsecurity.authz.UnauthorizedException: org.jsecurity.session.ExpiredSessionException: ", (java.lang.Throwable)var6);
    org.jsecurity.subject.SimplePrincipalCollection var9 = new org.jsecurity.subject.SimplePrincipalCollection((java.lang.Object)var6, "");
    java.io.InputStream var11 = org.jsecurity.util.ClassUtils.getResourceAsStream("");
    java.lang.Object[] var12 = new java.lang.Object[] { var11};
    java.util.List var13 = org.jsecurity.util.CollectionUtils.asList(var12);
    org.jsecurity.authc.pam.ModularRealmAuthenticator var14 = new org.jsecurity.authc.pam.ModularRealmAuthenticator(var13);
    var9.addAll((java.util.Collection)var13, "\u0000\u0000");
    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      var0.checkPermission((org.jsecurity.subject.PrincipalCollection)var9, "org.jsecurity.authz.UnauthorizedException: org.jsecurity.session.ExpiredSessionException: ");
      fail("Expected exception of type java.util.NoSuchElementException");
    } catch (java.util.NoSuchElementException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var3);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var11);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var12);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var13);

  }

  public void test137() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest0.test137");


    org.jsecurity.authz.SimpleAuthorizingAccount var0 = new org.jsecurity.authz.SimpleAuthorizingAccount();
    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      var0.checkRole("");
      fail("Expected exception of type org.jsecurity.authz.UnauthorizedException");
    } catch (org.jsecurity.authz.UnauthorizedException e) {
      // Expected exception.
    }

  }

  public void test138() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest0.test138");


    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      byte[] var2 = org.jsecurity.codec.CodecSupport.toBytes("org.jsecurity.authz.UnauthorizedException: org.jsecurity.session.ExpiredSessionException: ", "a2b823b1e72eae2b727289df8a00a89df8a0bab6ad8a89c4c5c7a9b62a270000");
      fail("Expected exception of type org.jsecurity.codec.CodecException");
    } catch (org.jsecurity.codec.CodecException e) {
      // Expected exception.
    }

  }

  public void test139() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest0.test139");


    org.jsecurity.crypto.BlowfishCipher var0 = new org.jsecurity.crypto.BlowfishCipher();
    byte[] var4 = new byte[] { (byte)100, (byte)100, (byte)(-1)};
    java.lang.String var5 = org.jsecurity.codec.CodecSupport.toString(var4);
    byte[] var7 = org.jsecurity.codec.Base64.decode("hi!");
    byte[] var8 = var0.encrypt(var4, var7);
    org.jsecurity.crypto.BlowfishCipher var9 = new org.jsecurity.crypto.BlowfishCipher();
    byte[] var13 = new byte[] { (byte)100, (byte)100, (byte)(-1)};
    java.lang.String var14 = org.jsecurity.codec.CodecSupport.toString(var13);
    byte[] var16 = org.jsecurity.codec.Base64.decode("hi!");
    byte[] var17 = var9.encrypt(var13, var16);
    byte[] var21 = new byte[] { (byte)100, (byte)100, (byte)(-1)};
    java.lang.String var22 = org.jsecurity.codec.CodecSupport.toString(var21);
    char[] var23 = org.jsecurity.codec.CodecSupport.toChars(var21);
    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      byte[] var24 = var0.decrypt(var17, var21);
      fail("Expected exception of type java.lang.IllegalStateException");
    } catch (java.lang.IllegalStateException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var4);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var5 + "' != '" + "dd\uFFFD"+ "'", var5.equals("dd\uFFFD"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var7);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var8);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var13);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var14 + "' != '" + "dd\uFFFD"+ "'", var14.equals("dd\uFFFD"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var16);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var17);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var21);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var22 + "' != '" + "dd\uFFFD"+ "'", var22.equals("dd\uFFFD"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var23);

  }

  public void test140() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest0.test140");


    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      org.jsecurity.crypto.hash.Sha1Hash var1 = org.jsecurity.crypto.hash.Sha1Hash.fromHexString("org.jsecurity.authz.UnauthorizedException: org.jsecurity.session.ExpiredSessionException: ");
      fail("Expected exception of type java.lang.IllegalArgumentException");
    } catch (java.lang.IllegalArgumentException e) {
      // Expected exception.
    }

  }

  public void test141() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest0.test141");


    org.jsecurity.subject.SubjectException var1 = new org.jsecurity.subject.SubjectException("hi!");

  }

  public void test142() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest0.test142");


    org.jsecurity.codec.CodecException var2 = new org.jsecurity.codec.CodecException("dd\uFFFD");
    org.jsecurity.authc.ConcurrentAccessException var3 = new org.jsecurity.authc.ConcurrentAccessException("org.jsecurity.authz.UnauthorizedException: org.jsecurity.session.ExpiredSessionException: ", (java.lang.Throwable)var2);
    org.jsecurity.subject.SimplePrincipalCollection var5 = new org.jsecurity.subject.SimplePrincipalCollection((java.lang.Object)var2, "");
    java.io.InputStream var7 = org.jsecurity.util.ClassUtils.getResourceAsStream("");
    java.lang.Object[] var8 = new java.lang.Object[] { var7};
    java.util.List var9 = org.jsecurity.util.CollectionUtils.asList(var8);
    org.jsecurity.authc.pam.ModularRealmAuthenticator var10 = new org.jsecurity.authc.pam.ModularRealmAuthenticator(var9);
    var5.addAll((java.util.Collection)var9, "\u0000\u0000");
    org.jsecurity.authz.UnauthorizedException var14 = new org.jsecurity.authz.UnauthorizedException();
    org.jsecurity.session.SessionException var16 = new org.jsecurity.session.SessionException("", (java.lang.Throwable)var14, (java.io.Serializable)"org.jsecurity.config.ConfigurationException: dd\uFFFD");
    org.jsecurity.crypto.hash.Sha1Hash var17 = new org.jsecurity.crypto.hash.Sha1Hash((java.lang.Object)"");
    org.jsecurity.session.UnknownSessionException var22 = new org.jsecurity.session.UnknownSessionException("dd\uFFFD", (java.io.Serializable)100.0f);
    org.jsecurity.subject.SubjectException var23 = new org.jsecurity.subject.SubjectException("dd\uFFFD", (java.lang.Throwable)var22);
    org.jsecurity.io.SerializationException var24 = new org.jsecurity.io.SerializationException("", (java.lang.Throwable)var23);
    java.lang.Throwable[] var25 = var23.getSuppressed();
    java.util.Set var26 = org.jsecurity.util.CollectionUtils.asSet((java.lang.Object[])var25);
    org.jsecurity.authz.SimpleAuthorizationInfo var28 = new org.jsecurity.authz.SimpleAuthorizationInfo();
    org.jsecurity.session.UnknownSessionException var33 = new org.jsecurity.session.UnknownSessionException("dd\uFFFD", (java.io.Serializable)100.0f);
    org.jsecurity.subject.SubjectException var34 = new org.jsecurity.subject.SubjectException("dd\uFFFD", (java.lang.Throwable)var33);
    org.jsecurity.io.SerializationException var35 = new org.jsecurity.io.SerializationException("", (java.lang.Throwable)var34);
    java.lang.Throwable[] var36 = var34.getSuppressed();
    java.util.Set var37 = org.jsecurity.util.CollectionUtils.asSet((java.lang.Object[])var36);
    var28.setStringPermissions(var37);
    java.util.Set var39 = var28.getRoles();
    org.jsecurity.authz.SimpleAuthorizationInfo var40 = new org.jsecurity.authz.SimpleAuthorizationInfo();
    var40.addRole("a2b823b1e72eae2b727289df8a00a89df8a0bab6ad8a89c4c5c7a9b62a270000");
    org.jsecurity.session.UnknownSessionException var47 = new org.jsecurity.session.UnknownSessionException("dd\uFFFD", (java.io.Serializable)100.0f);
    org.jsecurity.subject.SubjectException var48 = new org.jsecurity.subject.SubjectException("dd\uFFFD", (java.lang.Throwable)var47);
    org.jsecurity.io.SerializationException var49 = new org.jsecurity.io.SerializationException("", (java.lang.Throwable)var48);
    java.lang.Throwable[] var50 = var48.getSuppressed();
    java.util.Set var51 = org.jsecurity.util.CollectionUtils.asSet((java.lang.Object[])var50);
    var40.addRoles((java.util.Collection)var51);
    var28.setRoles(var51);
    org.jsecurity.authz.SimpleRole var54 = new org.jsecurity.authz.SimpleRole("org.jsecurity.authz.UnauthorizedException: org.jsecurity.session.ExpiredSessionException: ", var51);
    org.jsecurity.authc.SimpleAccount var55 = new org.jsecurity.authc.SimpleAccount((org.jsecurity.subject.PrincipalCollection)var5, (java.lang.Object)"", var26, var51);
    byte[] var57 = org.jsecurity.codec.Base64.decode("hi!");
    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      org.jsecurity.authz.SimpleAuthorizingAccount var59 = new org.jsecurity.authz.SimpleAuthorizingAccount((java.util.Collection)var51, (java.lang.Object)var57, "\u0000\u0000\u0000");
      fail("Expected exception of type java.lang.IllegalArgumentException");
    } catch (java.lang.IllegalArgumentException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var7);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var8);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var9);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var25);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var26);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var36);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var37);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var39);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var50);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var51);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var57);

  }

  public void test143() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest0.test143");


    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      java.io.InputStream var1 = org.jsecurity.io.ResourceUtils.getInputStreamForPath("");
      fail("Expected exception of type java.io.FileNotFoundException");
    } catch (java.io.FileNotFoundException e) {
      // Expected exception.
    }

  }

  public void test144() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest0.test144");


    org.jsecurity.jndi.JndiTemplate var0 = new org.jsecurity.jndi.JndiTemplate();
    org.jsecurity.codec.CodecException var4 = new org.jsecurity.codec.CodecException("dd\uFFFD");
    org.jsecurity.authc.ConcurrentAccessException var5 = new org.jsecurity.authc.ConcurrentAccessException("org.jsecurity.authz.UnauthorizedException: org.jsecurity.session.ExpiredSessionException: ", (java.lang.Throwable)var4);
    org.jsecurity.subject.SimplePrincipalCollection var7 = new org.jsecurity.subject.SimplePrincipalCollection((java.lang.Object)var4, "");
    java.io.InputStream var9 = org.jsecurity.util.ClassUtils.getResourceAsStream("");
    java.lang.Object[] var10 = new java.lang.Object[] { var9};
    java.util.List var11 = org.jsecurity.util.CollectionUtils.asList(var10);
    org.jsecurity.authc.pam.ModularRealmAuthenticator var12 = new org.jsecurity.authc.pam.ModularRealmAuthenticator(var11);
    var7.addAll((java.util.Collection)var11, "\u0000\u0000");
    org.jsecurity.authz.UnauthorizedException var16 = new org.jsecurity.authz.UnauthorizedException();
    org.jsecurity.session.SessionException var18 = new org.jsecurity.session.SessionException("", (java.lang.Throwable)var16, (java.io.Serializable)"org.jsecurity.config.ConfigurationException: dd\uFFFD");
    org.jsecurity.crypto.hash.Sha1Hash var19 = new org.jsecurity.crypto.hash.Sha1Hash((java.lang.Object)"");
    org.jsecurity.session.UnknownSessionException var24 = new org.jsecurity.session.UnknownSessionException("dd\uFFFD", (java.io.Serializable)100.0f);
    org.jsecurity.subject.SubjectException var25 = new org.jsecurity.subject.SubjectException("dd\uFFFD", (java.lang.Throwable)var24);
    org.jsecurity.io.SerializationException var26 = new org.jsecurity.io.SerializationException("", (java.lang.Throwable)var25);
    java.lang.Throwable[] var27 = var25.getSuppressed();
    java.util.Set var28 = org.jsecurity.util.CollectionUtils.asSet((java.lang.Object[])var27);
    org.jsecurity.authz.SimpleAuthorizationInfo var30 = new org.jsecurity.authz.SimpleAuthorizationInfo();
    org.jsecurity.session.UnknownSessionException var35 = new org.jsecurity.session.UnknownSessionException("dd\uFFFD", (java.io.Serializable)100.0f);
    org.jsecurity.subject.SubjectException var36 = new org.jsecurity.subject.SubjectException("dd\uFFFD", (java.lang.Throwable)var35);
    org.jsecurity.io.SerializationException var37 = new org.jsecurity.io.SerializationException("", (java.lang.Throwable)var36);
    java.lang.Throwable[] var38 = var36.getSuppressed();
    java.util.Set var39 = org.jsecurity.util.CollectionUtils.asSet((java.lang.Object[])var38);
    var30.setStringPermissions(var39);
    java.util.Set var41 = var30.getRoles();
    org.jsecurity.authz.SimpleAuthorizationInfo var42 = new org.jsecurity.authz.SimpleAuthorizationInfo();
    var42.addRole("a2b823b1e72eae2b727289df8a00a89df8a0bab6ad8a89c4c5c7a9b62a270000");
    org.jsecurity.session.UnknownSessionException var49 = new org.jsecurity.session.UnknownSessionException("dd\uFFFD", (java.io.Serializable)100.0f);
    org.jsecurity.subject.SubjectException var50 = new org.jsecurity.subject.SubjectException("dd\uFFFD", (java.lang.Throwable)var49);
    org.jsecurity.io.SerializationException var51 = new org.jsecurity.io.SerializationException("", (java.lang.Throwable)var50);
    java.lang.Throwable[] var52 = var50.getSuppressed();
    java.util.Set var53 = org.jsecurity.util.CollectionUtils.asSet((java.lang.Object[])var52);
    var42.addRoles((java.util.Collection)var53);
    var30.setRoles(var53);
    org.jsecurity.authz.SimpleRole var56 = new org.jsecurity.authz.SimpleRole("org.jsecurity.authz.UnauthorizedException: org.jsecurity.session.ExpiredSessionException: ", var53);
    org.jsecurity.authc.SimpleAccount var57 = new org.jsecurity.authc.SimpleAccount((org.jsecurity.subject.PrincipalCollection)var7, (java.lang.Object)"", var28, var53);
    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      var0.bind("\u0000\u0000", (java.lang.Object)var53);
      fail("Expected exception of type javax.naming.NoInitialContextException");
    } catch (javax.naming.NoInitialContextException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var9);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var10);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var11);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var27);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var28);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var38);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var39);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var41);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var52);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var53);

  }

  public void test145() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest0.test145");


    org.jsecurity.authc.ExpiredCredentialsException var1 = new org.jsecurity.authc.ExpiredCredentialsException();
    org.jsecurity.session.ExpiredSessionException var2 = new org.jsecurity.session.ExpiredSessionException("", (java.lang.Throwable)var1);
    org.jsecurity.authz.UnauthorizedException var3 = new org.jsecurity.authz.UnauthorizedException((java.lang.Throwable)var2);
    org.jsecurity.authc.ExcessiveAttemptsException var4 = new org.jsecurity.authc.ExcessiveAttemptsException((java.lang.Throwable)var3);
    java.lang.String var5 = var3.toString();
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var5 + "' != '" + "org.jsecurity.authz.UnauthorizedException: org.jsecurity.session.ExpiredSessionException: "+ "'", var5.equals("org.jsecurity.authz.UnauthorizedException: org.jsecurity.session.ExpiredSessionException: "));

  }

  public void test146() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest0.test146");


    char[] var1 = new char[] { };
    org.jsecurity.authc.UsernamePasswordToken var3 = new org.jsecurity.authc.UsernamePasswordToken("hi!", var1, true);
    byte[] var4 = org.jsecurity.codec.Hex.decode(var1);
    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      byte[] var6 = org.jsecurity.codec.CodecSupport.toBytes(var1, "\u0000\u0000\u0000");
      fail("Expected exception of type org.jsecurity.codec.CodecException");
    } catch (org.jsecurity.codec.CodecException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var1);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var4);

  }

  public void test147() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest0.test147");


    org.jsecurity.realm.activedirectory.ActiveDirectoryRealm var0 = new org.jsecurity.realm.activedirectory.ActiveDirectoryRealm();
    org.jsecurity.authc.credential.Sha256CredentialsMatcher var1 = new org.jsecurity.authc.credential.Sha256CredentialsMatcher();
    var0.setCredentialsMatcher((org.jsecurity.authc.credential.CredentialsMatcher)var1);
    java.lang.String var3 = var0.getAuthorizationCacheName();
    var0.setUrl("hi!");
    org.jsecurity.realm.ldap.DefaultLdapContextFactory var6 = new org.jsecurity.realm.ldap.DefaultLdapContextFactory();
    var0.setLdapContextFactory((org.jsecurity.realm.ldap.LdapContextFactory)var6);
    java.io.InputStream var9 = org.jsecurity.util.ClassUtils.getResourceAsStream("");
    java.lang.Object[] var10 = new java.lang.Object[] { var9};
    java.util.List var11 = org.jsecurity.util.CollectionUtils.asList(var10);
    org.jsecurity.authc.pam.ModularRealmAuthenticator var12 = new org.jsecurity.authc.pam.ModularRealmAuthenticator(var11);
    org.jsecurity.subject.SimplePrincipalCollection var14 = new org.jsecurity.subject.SimplePrincipalCollection((java.util.Collection)var11, "org.jsecurity.authz.UnauthorizedException: org.jsecurity.session.ExpiredSessionException: ");
    org.jsecurity.session.UnknownSessionException var19 = new org.jsecurity.session.UnknownSessionException("dd\uFFFD", (java.io.Serializable)100.0f);
    org.jsecurity.session.SessionException var21 = new org.jsecurity.session.SessionException("dd\uFFFD", (java.lang.Throwable)var19, (java.io.Serializable)0);
    org.jsecurity.session.SessionException var22 = new org.jsecurity.session.SessionException("dd\uFFFD", (java.lang.Throwable)var19);
    var14.add((java.lang.Object)var22, "org.jsecurity.config.ConfigurationException: dd\uFFFD");
    java.lang.String[] var27 = org.jsecurity.util.StringUtils.tokenizeToStringArray("hi!", "");
    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      var0.checkPermissions((org.jsecurity.subject.PrincipalCollection)var14, var27);
      fail("Expected exception of type java.util.NoSuchElementException");
    } catch (java.util.NoSuchElementException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var3);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var9);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var10);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var11);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var27);

  }

  public void test148() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest0.test148");


    org.jsecurity.config.ConfigurationException var1 = new org.jsecurity.config.ConfigurationException("org.jsecurity.authz.UnauthorizedException: org.jsecurity.session.ExpiredSessionException: ");
    org.jsecurity.session.UnknownSessionException var5 = new org.jsecurity.session.UnknownSessionException("dd\uFFFD", (java.io.Serializable)100.0f);
    org.jsecurity.session.SessionException var7 = new org.jsecurity.session.SessionException("dd\uFFFD", (java.lang.Throwable)var5, (java.io.Serializable)0);
    org.jsecurity.authc.SimpleAuthenticationInfo var10 = new org.jsecurity.authc.SimpleAuthenticationInfo((java.lang.Object)0, (java.lang.Object)10, "hi!");
    java.lang.Object var11 = var10.getCredentials();
    org.jsecurity.authc.ExpiredCredentialsException var13 = new org.jsecurity.authc.ExpiredCredentialsException();
    org.jsecurity.session.ExpiredSessionException var14 = new org.jsecurity.session.ExpiredSessionException("", (java.lang.Throwable)var13);
    org.jsecurity.authz.UnauthorizedException var15 = new org.jsecurity.authz.UnauthorizedException((java.lang.Throwable)var14);
    var10.setCredentials((java.lang.Object)var14);
    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      org.jsecurity.crypto.hash.Md5Hash var17 = new org.jsecurity.crypto.hash.Md5Hash((java.lang.Object)var1, (java.lang.Object)var10);
      fail("Expected exception of type org.jsecurity.codec.CodecException");
    } catch (org.jsecurity.codec.CodecException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var11 + "' != '" + 10+ "'", var11.equals(10));

  }

  public void test149() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest0.test149");


    boolean var1 = org.jsecurity.util.StringUtils.hasLength("\u0000\u0000\u0000");
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var1 == true);

  }

  public void test150() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest0.test150");


    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      org.jsecurity.io.IniResource var2 = new org.jsecurity.io.IniResource("dd\uFFFD", "\u0000\u0000\u0000");
      fail("Expected exception of type org.jsecurity.io.ResourceException");
    } catch (org.jsecurity.io.ResourceException e) {
      // Expected exception.
    }

  }

  public void test151() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest0.test151");


    org.jsecurity.crypto.hash.Sha256Hash var1 = org.jsecurity.crypto.hash.Sha256Hash.fromHexString("");
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var1);

  }

  public void test152() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest0.test152");


    org.jsecurity.realm.SimpleAccountRealm var1 = new org.jsecurity.realm.SimpleAccountRealm("hi!");
    java.lang.Class var2 = var1.getAuthenticationTokenClass();
    java.io.InputStream var4 = org.jsecurity.util.ClassUtils.getResourceAsStream("");
    java.lang.Object[] var5 = new java.lang.Object[] { var4};
    java.util.List var6 = org.jsecurity.util.CollectionUtils.asList(var5);
    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      java.lang.Object var7 = org.jsecurity.util.ClassUtils.newInstance(var2, var5);
      fail("Expected exception of type java.lang.IllegalStateException");
    } catch (java.lang.IllegalStateException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var2);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var4);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var5);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var6);

  }

  public void test153() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest0.test153");


    java.lang.String[] var2 = org.jsecurity.util.StringUtils.split("org.jsecurity.config.ConfigurationException: dd\uFFFD", '#');
    org.jsecurity.authz.UnauthorizedException var4 = new org.jsecurity.authz.UnauthorizedException();
    org.jsecurity.session.SessionException var6 = new org.jsecurity.session.SessionException("", (java.lang.Throwable)var4, (java.io.Serializable)"org.jsecurity.config.ConfigurationException: dd\uFFFD");
    org.jsecurity.crypto.hash.Sha1Hash var7 = new org.jsecurity.crypto.hash.Sha1Hash((java.lang.Object)"");
    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      org.jsecurity.crypto.hash.Sha256Hash var9 = new org.jsecurity.crypto.hash.Sha256Hash((java.lang.Object)'#', (java.lang.Object)var7, 0);
      fail("Expected exception of type org.jsecurity.codec.CodecException");
    } catch (org.jsecurity.codec.CodecException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var2);

  }

  public void test154() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest0.test154");


    org.jsecurity.session.UnknownSessionException var3 = new org.jsecurity.session.UnknownSessionException("dd\uFFFD", (java.io.Serializable)100.0f);
    org.jsecurity.subject.SubjectException var4 = new org.jsecurity.subject.SubjectException("dd\uFFFD", (java.lang.Throwable)var3);
    org.jsecurity.session.StoppedSessionException var5 = new org.jsecurity.session.StoppedSessionException((java.lang.Throwable)var3);
    java.io.InputStream var7 = org.jsecurity.util.ClassUtils.getResourceAsStream("");
    java.lang.Object[] var8 = new java.lang.Object[] { var7};
    java.util.List var9 = org.jsecurity.util.CollectionUtils.asList(var8);
    org.jsecurity.authc.pam.ModularRealmAuthenticator var10 = new org.jsecurity.authc.pam.ModularRealmAuthenticator(var9);
    org.jsecurity.authc.pam.AllSuccessfulModularAuthenticationStrategy var11 = new org.jsecurity.authc.pam.AllSuccessfulModularAuthenticationStrategy();
    var10.setModularAuthenticationStrategy((org.jsecurity.authc.pam.ModularAuthenticationStrategy)var11);
    org.jsecurity.authz.SimpleAuthorizationInfo var13 = new org.jsecurity.authz.SimpleAuthorizationInfo();
    var13.addStringPermission("hi!");
    java.io.InputStream var17 = org.jsecurity.util.ClassUtils.getResourceAsStream("");
    java.lang.Object[] var18 = new java.lang.Object[] { var17};
    java.util.List var19 = org.jsecurity.util.CollectionUtils.asList(var18);
    var13.addRoles((java.util.Collection)var19);
    var10.setAuthenticationListeners((java.util.Collection)var19);
    org.jsecurity.realm.activedirectory.ActiveDirectoryRealm var22 = new org.jsecurity.realm.activedirectory.ActiveDirectoryRealm();
    var22.setPrincipalSuffix("");
    var10.setRealm((org.jsecurity.realm.Realm)var22);
    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      org.jsecurity.crypto.hash.Md2Hash var26 = new org.jsecurity.crypto.hash.Md2Hash((java.lang.Object)var3, (java.lang.Object)var22);
      fail("Expected exception of type org.jsecurity.codec.CodecException");
    } catch (org.jsecurity.codec.CodecException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var7);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var8);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var9);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var17);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var18);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var19);

  }

  public void test155() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest0.test155");


    org.jsecurity.authz.AuthorizationException var1 = new org.jsecurity.authz.AuthorizationException("\u0000\u0000\u0000");

  }

  public void test156() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest0.test156");


    org.jsecurity.realm.SimpleAccountRealm var1 = new org.jsecurity.realm.SimpleAccountRealm("hi!");
    java.lang.Class var2 = var1.getAuthenticationTokenClass();
    java.util.Collection var3 = org.jsecurity.util.CollectionUtils.emptyCollection(var2);
    org.jsecurity.realm.SimpleAccountRealm var5 = new org.jsecurity.realm.SimpleAccountRealm("hi!");
    java.lang.Class var6 = var5.getAuthenticationTokenClass();
    java.lang.Class[] var7 = new java.lang.Class[] { var6};
    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      java.lang.reflect.Constructor var8 = org.jsecurity.util.ClassUtils.getConstructor(var2, var7);
      fail("Expected exception of type java.lang.IllegalStateException");
    } catch (java.lang.IllegalStateException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var2);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var3);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var6);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var7);

  }

  public void test157() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest0.test157");


    org.jsecurity.realm.SimpleAccountRealm var1 = new org.jsecurity.realm.SimpleAccountRealm("hi!");
    java.lang.Class var2 = var1.getAuthenticationTokenClass();
    java.util.Collection var3 = org.jsecurity.util.CollectionUtils.emptyCollection(var2);
    org.jsecurity.realm.SimpleAccountRealm var5 = new org.jsecurity.realm.SimpleAccountRealm("hi!");
    java.lang.Class var6 = var5.getAuthenticationTokenClass();
    java.util.Collection var7 = org.jsecurity.util.CollectionUtils.emptyCollection(var6);
    java.lang.Object var8 = org.jsecurity.util.ClassUtils.newInstance(var6);
    java.lang.Class[] var9 = new java.lang.Class[] { var6};
    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      java.lang.reflect.Constructor var10 = org.jsecurity.util.ClassUtils.getConstructor(var2, var9);
      fail("Expected exception of type java.lang.IllegalStateException");
    } catch (java.lang.IllegalStateException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var2);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var3);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var6);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var7);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var8);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var9);

  }

  public void test158() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest0.test158");


    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      org.jsecurity.crypto.hash.Md2Hash var1 = org.jsecurity.crypto.hash.Md2Hash.fromHexString("\u0000\u0000");
      fail("Expected exception of type java.lang.IllegalArgumentException");
    } catch (java.lang.IllegalArgumentException e) {
      // Expected exception.
    }

  }

  public void test159() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest0.test159");


    org.jsecurity.jndi.JndiTemplate var0 = new org.jsecurity.jndi.JndiTemplate();
    org.jsecurity.realm.SimpleAccountRealm var3 = new org.jsecurity.realm.SimpleAccountRealm("hi!");
    java.lang.Class var4 = var3.getAuthenticationTokenClass();
    java.util.Collection var5 = org.jsecurity.util.CollectionUtils.emptyCollection(var4);
    java.lang.Object var6 = org.jsecurity.util.ClassUtils.newInstance(var4);
    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      java.lang.Object var7 = var0.lookup("a2b823b1e72eae2b727289df8a00a89df8a0bab6ad8a89c4c5c7a9b62a270000", var4);
      fail("Expected exception of type javax.naming.NoInitialContextException");
    } catch (javax.naming.NoInitialContextException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var4);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var5);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var6);

  }

  public void test160() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest0.test160");


    org.jsecurity.authz.SimpleAuthorizationInfo var0 = new org.jsecurity.authz.SimpleAuthorizationInfo();
    java.util.Set var1 = var0.getRoles();
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var1);

  }

  public void test161() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest0.test161");


    java.io.InputStream var1 = org.jsecurity.util.ClassUtils.getResourceAsStream("");
    java.lang.Object[] var2 = new java.lang.Object[] { var1};
    java.util.List var3 = org.jsecurity.util.CollectionUtils.asList(var2);
    org.jsecurity.session.UnknownSessionException var8 = new org.jsecurity.session.UnknownSessionException("dd\uFFFD", (java.io.Serializable)100.0f);
    org.jsecurity.subject.SubjectException var9 = new org.jsecurity.subject.SubjectException("dd\uFFFD", (java.lang.Throwable)var8);
    org.jsecurity.authc.AccountException var10 = new org.jsecurity.authc.AccountException("hi!", (java.lang.Throwable)var9);
    org.jsecurity.session.StoppedSessionException var11 = new org.jsecurity.session.StoppedSessionException((java.lang.Throwable)var10);
    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      org.jsecurity.crypto.hash.Md2Hash var12 = new org.jsecurity.crypto.hash.Md2Hash((java.lang.Object)var3, (java.lang.Object)var10);
      fail("Expected exception of type org.jsecurity.codec.CodecException");
    } catch (org.jsecurity.codec.CodecException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var1);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var2);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var3);

  }

  public void test162() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest0.test162");


    org.jsecurity.codec.CodecException var2 = new org.jsecurity.codec.CodecException("dd\uFFFD");
    org.jsecurity.authc.ConcurrentAccessException var3 = new org.jsecurity.authc.ConcurrentAccessException("org.jsecurity.authz.UnauthorizedException: org.jsecurity.session.ExpiredSessionException: ", (java.lang.Throwable)var2);
    org.jsecurity.subject.SimplePrincipalCollection var5 = new org.jsecurity.subject.SimplePrincipalCollection((java.lang.Object)var2, "");
    java.io.InputStream var7 = org.jsecurity.util.ClassUtils.getResourceAsStream("");
    java.lang.Object[] var8 = new java.lang.Object[] { var7};
    java.util.List var9 = org.jsecurity.util.CollectionUtils.asList(var8);
    org.jsecurity.authc.pam.ModularRealmAuthenticator var10 = new org.jsecurity.authc.pam.ModularRealmAuthenticator(var9);
    var5.addAll((java.util.Collection)var9, "\u0000\u0000");
    org.jsecurity.authz.UnauthorizedException var14 = new org.jsecurity.authz.UnauthorizedException();
    org.jsecurity.session.SessionException var16 = new org.jsecurity.session.SessionException("", (java.lang.Throwable)var14, (java.io.Serializable)"org.jsecurity.config.ConfigurationException: dd\uFFFD");
    org.jsecurity.crypto.hash.Sha1Hash var17 = new org.jsecurity.crypto.hash.Sha1Hash((java.lang.Object)"");
    org.jsecurity.session.UnknownSessionException var22 = new org.jsecurity.session.UnknownSessionException("dd\uFFFD", (java.io.Serializable)100.0f);
    org.jsecurity.subject.SubjectException var23 = new org.jsecurity.subject.SubjectException("dd\uFFFD", (java.lang.Throwable)var22);
    org.jsecurity.io.SerializationException var24 = new org.jsecurity.io.SerializationException("", (java.lang.Throwable)var23);
    java.lang.Throwable[] var25 = var23.getSuppressed();
    java.util.Set var26 = org.jsecurity.util.CollectionUtils.asSet((java.lang.Object[])var25);
    org.jsecurity.authz.SimpleAuthorizationInfo var28 = new org.jsecurity.authz.SimpleAuthorizationInfo();
    org.jsecurity.session.UnknownSessionException var33 = new org.jsecurity.session.UnknownSessionException("dd\uFFFD", (java.io.Serializable)100.0f);
    org.jsecurity.subject.SubjectException var34 = new org.jsecurity.subject.SubjectException("dd\uFFFD", (java.lang.Throwable)var33);
    org.jsecurity.io.SerializationException var35 = new org.jsecurity.io.SerializationException("", (java.lang.Throwable)var34);
    java.lang.Throwable[] var36 = var34.getSuppressed();
    java.util.Set var37 = org.jsecurity.util.CollectionUtils.asSet((java.lang.Object[])var36);
    var28.setStringPermissions(var37);
    java.util.Set var39 = var28.getRoles();
    org.jsecurity.authz.SimpleAuthorizationInfo var40 = new org.jsecurity.authz.SimpleAuthorizationInfo();
    var40.addRole("a2b823b1e72eae2b727289df8a00a89df8a0bab6ad8a89c4c5c7a9b62a270000");
    org.jsecurity.session.UnknownSessionException var47 = new org.jsecurity.session.UnknownSessionException("dd\uFFFD", (java.io.Serializable)100.0f);
    org.jsecurity.subject.SubjectException var48 = new org.jsecurity.subject.SubjectException("dd\uFFFD", (java.lang.Throwable)var47);
    org.jsecurity.io.SerializationException var49 = new org.jsecurity.io.SerializationException("", (java.lang.Throwable)var48);
    java.lang.Throwable[] var50 = var48.getSuppressed();
    java.util.Set var51 = org.jsecurity.util.CollectionUtils.asSet((java.lang.Object[])var50);
    var40.addRoles((java.util.Collection)var51);
    var28.setRoles(var51);
    org.jsecurity.authz.SimpleRole var54 = new org.jsecurity.authz.SimpleRole("org.jsecurity.authz.UnauthorizedException: org.jsecurity.session.ExpiredSessionException: ", var51);
    org.jsecurity.authc.SimpleAccount var55 = new org.jsecurity.authc.SimpleAccount((org.jsecurity.subject.PrincipalCollection)var5, (java.lang.Object)"", var26, var51);
    org.jsecurity.authc.SimpleAccount var56 = new org.jsecurity.authc.SimpleAccount();
    var56.setCredentialsExpired(false);
    boolean var59 = var56.isLocked();
    org.jsecurity.authz.SimpleAuthorizationInfo var60 = new org.jsecurity.authz.SimpleAuthorizationInfo();
    org.jsecurity.session.UnknownSessionException var65 = new org.jsecurity.session.UnknownSessionException("dd\uFFFD", (java.io.Serializable)100.0f);
    org.jsecurity.subject.SubjectException var66 = new org.jsecurity.subject.SubjectException("dd\uFFFD", (java.lang.Throwable)var65);
    org.jsecurity.io.SerializationException var67 = new org.jsecurity.io.SerializationException("", (java.lang.Throwable)var66);
    java.lang.Throwable[] var68 = var66.getSuppressed();
    java.util.Set var69 = org.jsecurity.util.CollectionUtils.asSet((java.lang.Object[])var68);
    var60.setStringPermissions(var69);
    java.util.Set var71 = var60.getRoles();
    org.jsecurity.authz.SimpleAuthorizationInfo var72 = new org.jsecurity.authz.SimpleAuthorizationInfo();
    var72.addRole("a2b823b1e72eae2b727289df8a00a89df8a0bab6ad8a89c4c5c7a9b62a270000");
    org.jsecurity.session.UnknownSessionException var79 = new org.jsecurity.session.UnknownSessionException("dd\uFFFD", (java.io.Serializable)100.0f);
    org.jsecurity.subject.SubjectException var80 = new org.jsecurity.subject.SubjectException("dd\uFFFD", (java.lang.Throwable)var79);
    org.jsecurity.io.SerializationException var81 = new org.jsecurity.io.SerializationException("", (java.lang.Throwable)var80);
    java.lang.Throwable[] var82 = var80.getSuppressed();
    java.util.Set var83 = org.jsecurity.util.CollectionUtils.asSet((java.lang.Object[])var82);
    var72.addRoles((java.util.Collection)var83);
    var60.setRoles(var83);
    org.jsecurity.authz.SimpleAuthorizationInfo var86 = new org.jsecurity.authz.SimpleAuthorizationInfo();
    var86.addRole("a2b823b1e72eae2b727289df8a00a89df8a0bab6ad8a89c4c5c7a9b62a270000");
    org.jsecurity.session.UnknownSessionException var93 = new org.jsecurity.session.UnknownSessionException("dd\uFFFD", (java.io.Serializable)100.0f);
    org.jsecurity.subject.SubjectException var94 = new org.jsecurity.subject.SubjectException("dd\uFFFD", (java.lang.Throwable)var93);
    org.jsecurity.io.SerializationException var95 = new org.jsecurity.io.SerializationException("", (java.lang.Throwable)var94);
    java.lang.Throwable[] var96 = var94.getSuppressed();
    java.util.Set var97 = org.jsecurity.util.CollectionUtils.asSet((java.lang.Object[])var96);
    var86.addRoles((java.util.Collection)var97);
    org.jsecurity.authc.SimpleAccount var99 = new org.jsecurity.authc.SimpleAccount((org.jsecurity.subject.PrincipalCollection)var5, (java.lang.Object)var56, var83, var97);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var7);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var8);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var9);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var25);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var26);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var36);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var37);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var39);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var50);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var51);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var59 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var68);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var69);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var71);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var82);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var83);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var96);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var97);

  }

  public void test163() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest0.test163");


    org.jsecurity.session.mgt.eis.MemorySessionDAO var0 = new org.jsecurity.session.mgt.eis.MemorySessionDAO();
    org.jsecurity.cache.Cache var1 = var0.getActiveSessionsCache();
    org.jsecurity.cache.CacheManager var2 = var0.getCacheManager();
    org.jsecurity.cache.HashtableCacheManager var3 = new org.jsecurity.cache.HashtableCacheManager();
    org.jsecurity.cache.Cache var5 = var3.getCache("\u0000\u0000");
    var0.setActiveSessionsCache(var5);
    org.jsecurity.authz.UnauthenticatedException var9 = new org.jsecurity.authz.UnauthenticatedException();
    org.jsecurity.config.UnresolveableReferenceException var10 = new org.jsecurity.config.UnresolveableReferenceException("", (java.lang.Throwable)var9);
    org.jsecurity.session.InvalidSessionException var11 = new org.jsecurity.session.InvalidSessionException((java.io.Serializable)var9);
    org.jsecurity.subject.InvalidSubjectException var12 = new org.jsecurity.subject.InvalidSubjectException("org.jsecurity.config.ConfigurationException: dd\uFFFD", (java.lang.Throwable)var9);
    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      org.jsecurity.session.Session var13 = var0.readSession((java.io.Serializable)"org.jsecurity.config.ConfigurationException: dd\uFFFD");
      fail("Expected exception of type org.jsecurity.session.UnknownSessionException");
    } catch (org.jsecurity.session.UnknownSessionException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var1);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var2);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var5);

  }

  public void test164() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest0.test164");


    java.lang.String var1 = org.jsecurity.util.StringUtils.clean("a2b823b1e72eae2b727289df8a00a89df8a0bab6ad8a89c4c5c7a9b62a270000");
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var1 + "' != '" + "a2b823b1e72eae2b727289df8a00a89df8a0bab6ad8a89c4c5c7a9b62a270000"+ "'", var1.equals("a2b823b1e72eae2b727289df8a00a89df8a0bab6ad8a89c4c5c7a9b62a270000"));

  }

  public void test165() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest0.test165");


    java.io.InputStream var1 = org.jsecurity.util.ClassUtils.getResourceAsStream("");
    java.lang.Object[] var2 = new java.lang.Object[] { var1};
    java.util.List var3 = org.jsecurity.util.CollectionUtils.asList(var2);
    org.jsecurity.authc.pam.ModularRealmAuthenticator var4 = new org.jsecurity.authc.pam.ModularRealmAuthenticator(var3);
    org.jsecurity.authc.pam.AllSuccessfulModularAuthenticationStrategy var5 = new org.jsecurity.authc.pam.AllSuccessfulModularAuthenticationStrategy();
    var4.setModularAuthenticationStrategy((org.jsecurity.authc.pam.ModularAuthenticationStrategy)var5);
    org.jsecurity.authz.SimpleAuthorizationInfo var7 = new org.jsecurity.authz.SimpleAuthorizationInfo();
    var7.addStringPermission("hi!");
    java.io.InputStream var11 = org.jsecurity.util.ClassUtils.getResourceAsStream("");
    java.lang.Object[] var12 = new java.lang.Object[] { var11};
    java.util.List var13 = org.jsecurity.util.CollectionUtils.asList(var12);
    var7.addRoles((java.util.Collection)var13);
    var4.setAuthenticationListeners((java.util.Collection)var13);
    org.jsecurity.realm.activedirectory.ActiveDirectoryRealm var16 = new org.jsecurity.realm.activedirectory.ActiveDirectoryRealm();
    var16.setPrincipalSuffix("");
    var4.setRealm((org.jsecurity.realm.Realm)var16);
    org.jsecurity.realm.text.TextConfigurationRealm var20 = new org.jsecurity.realm.text.TextConfigurationRealm();
    java.io.InputStream var22 = org.jsecurity.util.ClassUtils.getResourceAsStream("");
    java.lang.Object[] var23 = new java.lang.Object[] { var22};
    java.util.List var24 = org.jsecurity.util.CollectionUtils.asList(var23);
    org.jsecurity.authc.pam.ModularRealmAuthenticator var25 = new org.jsecurity.authc.pam.ModularRealmAuthenticator(var24);
    org.jsecurity.subject.SimplePrincipalCollection var27 = new org.jsecurity.subject.SimplePrincipalCollection((java.util.Collection)var24, "org.jsecurity.authz.UnauthorizedException: org.jsecurity.session.ExpiredSessionException: ");
    org.jsecurity.session.UnknownSessionException var32 = new org.jsecurity.session.UnknownSessionException("dd\uFFFD", (java.io.Serializable)100.0f);
    org.jsecurity.session.SessionException var34 = new org.jsecurity.session.SessionException("dd\uFFFD", (java.lang.Throwable)var32, (java.io.Serializable)0);
    org.jsecurity.session.SessionException var35 = new org.jsecurity.session.SessionException("dd\uFFFD", (java.lang.Throwable)var32);
    var27.add((java.lang.Object)var35, "org.jsecurity.config.ConfigurationException: dd\uFFFD");
    var20.onLogout((org.jsecurity.subject.PrincipalCollection)var27);
    org.jsecurity.cache.HashtableCacheManager var39 = new org.jsecurity.cache.HashtableCacheManager();
    org.jsecurity.cache.Cache var41 = var39.getCache("\u0000\u0000");
    var20.setAuthorizationCache(var41);
    org.jsecurity.codec.CodecException var45 = new org.jsecurity.codec.CodecException("dd\uFFFD");
    org.jsecurity.authc.ConcurrentAccessException var46 = new org.jsecurity.authc.ConcurrentAccessException("org.jsecurity.authz.UnauthorizedException: org.jsecurity.session.ExpiredSessionException: ", (java.lang.Throwable)var45);
    org.jsecurity.subject.SimplePrincipalCollection var48 = new org.jsecurity.subject.SimplePrincipalCollection((java.lang.Object)var45, "");
    var20.onLogout((org.jsecurity.subject.PrincipalCollection)var48);
    org.jsecurity.authz.SimpleRole var50 = new org.jsecurity.authz.SimpleRole();
    org.jsecurity.authz.SimpleAuthorizationInfo var51 = new org.jsecurity.authz.SimpleAuthorizationInfo();
    var51.addRole("a2b823b1e72eae2b727289df8a00a89df8a0bab6ad8a89c4c5c7a9b62a270000");
    org.jsecurity.session.UnknownSessionException var58 = new org.jsecurity.session.UnknownSessionException("dd\uFFFD", (java.io.Serializable)100.0f);
    org.jsecurity.subject.SubjectException var59 = new org.jsecurity.subject.SubjectException("dd\uFFFD", (java.lang.Throwable)var58);
    org.jsecurity.io.SerializationException var60 = new org.jsecurity.io.SerializationException("", (java.lang.Throwable)var59);
    java.lang.Throwable[] var61 = var59.getSuppressed();
    java.util.Set var62 = org.jsecurity.util.CollectionUtils.asSet((java.lang.Object[])var61);
    var51.addRoles((java.util.Collection)var62);
    var50.addAll((java.util.Collection)var62);
    java.lang.String var65 = var50.getName();
    org.jsecurity.authz.permission.WildcardPermission var68 = new org.jsecurity.authz.permission.WildcardPermission("hi!", false);
    var50.add((org.jsecurity.authz.Permission)var68);
    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      boolean var70 = var16.isPermitted((org.jsecurity.subject.PrincipalCollection)var48, (org.jsecurity.authz.Permission)var68);
      fail("Expected exception of type java.util.NoSuchElementException");
    } catch (java.util.NoSuchElementException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var1);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var2);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var3);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var11);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var12);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var13);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var22);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var23);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var24);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var41);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var61);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var62);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var65);

  }

  public void test166() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest0.test166");


    java.lang.String var1 = org.jsecurity.codec.Base64.decodeToString("org.jsecurity.config.ConfigurationException: dd\uFFFD");
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var1 + "' != '" + "\uFFFD\uFFFD#\uFFFD\uFFFD.\uFFFD+rr\uFFFD\u07CA\u0000\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\u01E9\uFFFD*'\u0000\u0000"+ "'", var1.equals("\uFFFD\uFFFD#\uFFFD\uFFFD.\uFFFD+rr\uFFFD\u07CA\u0000\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\u01E9\uFFFD*'\u0000\u0000"));

  }

  public void test167() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest0.test167");


    org.jsecurity.io.ResourceException var1 = new org.jsecurity.io.ResourceException("\u0000\u0000\u0000");

  }

  public void test168() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest0.test168");


    org.jsecurity.authz.SimpleAuthorizingAccount var0 = new org.jsecurity.authz.SimpleAuthorizingAccount();
    java.io.InputStream var2 = org.jsecurity.util.ClassUtils.getResourceAsStream("");
    java.lang.Object[] var3 = new java.lang.Object[] { var2};
    java.util.List var4 = org.jsecurity.util.CollectionUtils.asList(var3);
    org.jsecurity.authc.pam.ModularRealmAuthenticator var5 = new org.jsecurity.authc.pam.ModularRealmAuthenticator(var4);
    org.jsecurity.subject.SimplePrincipalCollection var7 = new org.jsecurity.subject.SimplePrincipalCollection((java.util.Collection)var4, "org.jsecurity.authz.UnauthorizedException: org.jsecurity.session.ExpiredSessionException: ");
    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      boolean var8 = var0.isPermittedAll((java.util.Collection)var4);
      fail("Expected exception of type java.lang.ClassCastException");
    } catch (java.lang.ClassCastException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var2);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var3);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var4);

  }

  public void test169() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest0.test169");


    org.jsecurity.util.InstantiationException var0 = new org.jsecurity.util.InstantiationException();
    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      org.jsecurity.crypto.hash.Sha1Hash var2 = new org.jsecurity.crypto.hash.Sha1Hash((java.lang.Object)var0, (java.lang.Object)(short)0);
      fail("Expected exception of type org.jsecurity.codec.CodecException");
    } catch (org.jsecurity.codec.CodecException e) {
      // Expected exception.
    }

  }

  public void test170() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest0.test170");


    org.jsecurity.crypto.hash.Sha384Hash var1 = org.jsecurity.crypto.hash.Sha384Hash.fromBase64String("\uFFFD\uFFFD#\uFFFD\uFFFD.\uFFFD+rr\uFFFD\u07CA\u0000\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\u01E9\uFFFD*'\u0000\u0000");
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var1);

  }

  public void test171() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest0.test171");


    org.jsecurity.jndi.JndiTemplate var0 = new org.jsecurity.jndi.JndiTemplate();
    java.util.Properties var1 = var0.getEnvironment();
    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      java.lang.Object var3 = var0.lookup("");
      fail("Expected exception of type javax.naming.NoInitialContextException");
    } catch (javax.naming.NoInitialContextException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var1);

  }

  public void test172() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest0.test172");


    java.io.InputStream var1 = org.jsecurity.util.ClassUtils.getResourceAsStream("");
    org.jsecurity.io.ResourceUtils.close(var1);
    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      org.jsecurity.io.IniResource var3 = new org.jsecurity.io.IniResource(var1);
      fail("Expected exception of type org.jsecurity.io.ResourceException");
    } catch (org.jsecurity.io.ResourceException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var1);

  }

  public void test173() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest0.test173");


    boolean var1 = org.jsecurity.util.ClassUtils.isAvailable("org.jsecurity.authz.UnauthorizedException: org.jsecurity.session.ExpiredSessionException: ");
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var1 == false);

  }

  public void test174() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest0.test174");


    org.jsecurity.authz.SimpleAuthorizingAccount var0 = new org.jsecurity.authz.SimpleAuthorizingAccount();
    boolean var2 = var0.hasRole("\u0000\u0000\u0000");
    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      var0.checkRole("783ccd31-48a8-42dd-890f-df885a7baaff");
      fail("Expected exception of type org.jsecurity.authz.UnauthorizedException");
    } catch (org.jsecurity.authz.UnauthorizedException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var2 == false);

  }

  public void test175() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest0.test175");


    org.jsecurity.codec.Base64 var0 = new org.jsecurity.codec.Base64();

  }

  public void test176() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest0.test176");


    org.jsecurity.session.ExpiredSessionException var0 = new org.jsecurity.session.ExpiredSessionException();

  }

  public void test177() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest0.test177");


    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      org.jsecurity.crypto.hash.Md5Hash var1 = org.jsecurity.crypto.hash.Md5Hash.fromHexString("ZGT/");
      fail("Expected exception of type java.lang.IllegalArgumentException");
    } catch (java.lang.IllegalArgumentException e) {
      // Expected exception.
    }

  }

  public void test178() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest0.test178");


    boolean var1 = org.jsecurity.util.StringUtils.hasText("\u0000\u0000\u0000");
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var1 == true);

  }

  public void test179() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest0.test179");


    org.jsecurity.authc.pam.UnsupportedTokenException var1 = new org.jsecurity.authc.pam.UnsupportedTokenException("dd\uFFFD");

  }

  public void test180() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest0.test180");


    org.jsecurity.mgt.DefaultSecurityManager var0 = new org.jsecurity.mgt.DefaultSecurityManager();
    org.jsecurity.codec.CodecException var3 = new org.jsecurity.codec.CodecException("dd\uFFFD");
    org.jsecurity.authc.ConcurrentAccessException var4 = new org.jsecurity.authc.ConcurrentAccessException("org.jsecurity.authz.UnauthorizedException: org.jsecurity.session.ExpiredSessionException: ", (java.lang.Throwable)var3);
    org.jsecurity.subject.SimplePrincipalCollection var6 = new org.jsecurity.subject.SimplePrincipalCollection((java.lang.Object)var3, "");
    java.io.InputStream var8 = org.jsecurity.util.ClassUtils.getResourceAsStream("");
    java.lang.Object[] var9 = new java.lang.Object[] { var8};
    java.util.List var10 = org.jsecurity.util.CollectionUtils.asList(var9);
    org.jsecurity.authc.pam.ModularRealmAuthenticator var11 = new org.jsecurity.authc.pam.ModularRealmAuthenticator(var10);
    org.jsecurity.authc.pam.AllSuccessfulModularAuthenticationStrategy var12 = new org.jsecurity.authc.pam.AllSuccessfulModularAuthenticationStrategy();
    var11.setModularAuthenticationStrategy((org.jsecurity.authc.pam.ModularAuthenticationStrategy)var12);
    org.jsecurity.authz.SimpleAuthorizationInfo var14 = new org.jsecurity.authz.SimpleAuthorizationInfo();
    var14.addStringPermission("hi!");
    java.io.InputStream var18 = org.jsecurity.util.ClassUtils.getResourceAsStream("");
    java.lang.Object[] var19 = new java.lang.Object[] { var18};
    java.util.List var20 = org.jsecurity.util.CollectionUtils.asList(var19);
    var14.addRoles((java.util.Collection)var20);
    var11.setAuthenticationListeners((java.util.Collection)var20);
    org.jsecurity.realm.activedirectory.ActiveDirectoryRealm var23 = new org.jsecurity.realm.activedirectory.ActiveDirectoryRealm();
    var23.setPrincipalSuffix("");
    var11.setRealm((org.jsecurity.realm.Realm)var23);
    org.jsecurity.authc.pam.FirstSuccessfulAuthenticationStrategy var27 = new org.jsecurity.authc.pam.FirstSuccessfulAuthenticationStrategy();
    org.jsecurity.authz.UnauthorizedException var29 = new org.jsecurity.authz.UnauthorizedException("org.jsecurity.config.ConfigurationException: dd\uFFFD");
    java.lang.Throwable[] var30 = var29.getSuppressed();
    java.util.List var31 = org.jsecurity.util.CollectionUtils.asList((java.lang.Object[])var30);
    org.jsecurity.authc.UsernamePasswordToken var32 = new org.jsecurity.authc.UsernamePasswordToken();
    java.lang.String var33 = var32.getUsername();
    java.net.InetAddress var34 = var32.getInetAddress();
    org.jsecurity.authc.AuthenticationInfo var35 = var27.beforeAllAttempts((java.util.Collection)var31, (org.jsecurity.authc.AuthenticationToken)var32);
    var11.setModularAuthenticationStrategy((org.jsecurity.authc.pam.ModularAuthenticationStrategy)var27);
    org.jsecurity.authc.SimpleAccount var37 = new org.jsecurity.authc.SimpleAccount((org.jsecurity.subject.PrincipalCollection)var6, (java.lang.Object)var11);
    java.util.Collection var38 = var37.getObjectPermissions();
    java.util.Collection var39 = var37.getObjectPermissions();
    org.jsecurity.codec.CodecException var42 = new org.jsecurity.codec.CodecException("dd\uFFFD");
    org.jsecurity.authc.ConcurrentAccessException var43 = new org.jsecurity.authc.ConcurrentAccessException("org.jsecurity.authz.UnauthorizedException: org.jsecurity.session.ExpiredSessionException: ", (java.lang.Throwable)var42);
    org.jsecurity.subject.SimplePrincipalCollection var45 = new org.jsecurity.subject.SimplePrincipalCollection((java.lang.Object)var42, "");
    org.jsecurity.authc.pam.FirstSuccessfulAuthenticationStrategy var46 = new org.jsecurity.authc.pam.FirstSuccessfulAuthenticationStrategy();
    org.jsecurity.authz.UnauthorizedException var48 = new org.jsecurity.authz.UnauthorizedException("org.jsecurity.config.ConfigurationException: dd\uFFFD");
    java.lang.Throwable[] var49 = var48.getSuppressed();
    java.util.List var50 = org.jsecurity.util.CollectionUtils.asList((java.lang.Object[])var49);
    org.jsecurity.authc.UsernamePasswordToken var51 = new org.jsecurity.authc.UsernamePasswordToken();
    java.lang.String var52 = var51.getUsername();
    java.net.InetAddress var53 = var51.getInetAddress();
    org.jsecurity.authc.AuthenticationInfo var54 = var46.beforeAllAttempts((java.util.Collection)var50, (org.jsecurity.authc.AuthenticationToken)var51);
    org.jsecurity.session.UnknownSessionException var59 = new org.jsecurity.session.UnknownSessionException("dd\uFFFD", (java.io.Serializable)100.0f);
    org.jsecurity.subject.SubjectException var60 = new org.jsecurity.subject.SubjectException("dd\uFFFD", (java.lang.Throwable)var59);
    org.jsecurity.io.SerializationException var61 = new org.jsecurity.io.SerializationException("", (java.lang.Throwable)var60);
    java.lang.Throwable[] var62 = var60.getSuppressed();
    java.util.Set var63 = org.jsecurity.util.CollectionUtils.asSet((java.lang.Object[])var62);
    org.jsecurity.authc.SimpleAccount var64 = new org.jsecurity.authc.SimpleAccount((org.jsecurity.subject.PrincipalCollection)var45, (java.lang.Object)var50, var63);
    var37.setObjectPermissions(var63);
    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      var0.setRealms((java.util.Collection)var63);
      fail("Expected exception of type java.lang.IllegalArgumentException");
    } catch (java.lang.IllegalArgumentException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var8);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var9);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var10);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var18);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var19);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var20);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var30);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var31);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var33);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var34);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var35);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var38);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var39);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var49);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var50);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var52);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var53);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var54);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var62);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var63);

  }

  public void test181() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest0.test181");


    java.lang.String[] var5 = org.jsecurity.util.StringUtils.split("org.jsecurity.config.ConfigurationException: dd\uFFFD", '4', '4', '4');
    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      java.lang.Object var6 = org.jsecurity.util.ClassUtils.newInstance("5dd0c65d-1422-49c2-becb-9e8dca619ab3", (java.lang.Object[])var5);
      fail("Expected exception of type org.jsecurity.util.UnknownClassException");
    } catch (org.jsecurity.util.UnknownClassException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var5);

  }

  public void test182() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest0.test182");


    org.jsecurity.mgt.DefaultSecurityManager var0 = new org.jsecurity.mgt.DefaultSecurityManager();
    org.jsecurity.authc.pam.AllSuccessfulModularAuthenticationStrategy var1 = new org.jsecurity.authc.pam.AllSuccessfulModularAuthenticationStrategy();
    org.jsecurity.authc.pam.AllSuccessfulModularAuthenticationStrategy var2 = new org.jsecurity.authc.pam.AllSuccessfulModularAuthenticationStrategy();
    char[] var4 = new char[] { };
    org.jsecurity.authc.UsernamePasswordToken var6 = new org.jsecurity.authc.UsernamePasswordToken("hi!", var4, true);
    org.jsecurity.authc.SimpleAccount var7 = new org.jsecurity.authc.SimpleAccount();
    var7.setCredentialsExpired(false);
    boolean var10 = var7.isLocked();
    org.jsecurity.authc.AuthenticationInfo var11 = var2.afterAllAttempts((org.jsecurity.authc.AuthenticationToken)var6, (org.jsecurity.authc.AuthenticationInfo)var7);
    char[] var15 = new char[] { '4', '#'};
    org.jsecurity.authc.UsernamePasswordToken var16 = new org.jsecurity.authc.UsernamePasswordToken("\u0000\u0000", var15);
    org.jsecurity.authc.SimpleAccount var17 = new org.jsecurity.authc.SimpleAccount();
    var17.setCredentialsExpired(false);
    var17.setCredentialsExpired(false);
    boolean var22 = var17.isCredentialsExpired();
    org.jsecurity.authc.AuthenticationInfo var23 = var2.afterAllAttempts((org.jsecurity.authc.AuthenticationToken)var16, (org.jsecurity.authc.AuthenticationInfo)var17);
    org.jsecurity.authz.UnauthenticatedException var27 = new org.jsecurity.authz.UnauthenticatedException();
    org.jsecurity.config.UnresolveableReferenceException var28 = new org.jsecurity.config.UnresolveableReferenceException("", (java.lang.Throwable)var27);
    org.jsecurity.cache.CacheException var29 = new org.jsecurity.cache.CacheException("org.jsecurity.config.ConfigurationException: dd\uFFFD", (java.lang.Throwable)var27);
    org.jsecurity.authc.SimpleAuthenticationInfo var31 = new org.jsecurity.authc.SimpleAuthenticationInfo((java.lang.Object)"org.jsecurity.config.ConfigurationException: dd\uFFFD", (java.lang.Object)var29, "a2b823b1e72eae2b727289df8a00a89df8a0bab6ad8a89c4c5c7a9b62a270000");
    org.jsecurity.subject.PrincipalCollection var32 = var31.getPrincipals();
    org.jsecurity.authc.AuthenticationInfo var33 = var1.afterAllAttempts((org.jsecurity.authc.AuthenticationToken)var16, (org.jsecurity.authc.AuthenticationInfo)var31);
    var0.setModularAuthenticationStrategy((org.jsecurity.authc.pam.ModularAuthenticationStrategy)var1);
    org.jsecurity.realm.text.TextConfigurationRealm var35 = new org.jsecurity.realm.text.TextConfigurationRealm();
    java.io.InputStream var37 = org.jsecurity.util.ClassUtils.getResourceAsStream("");
    java.lang.Object[] var38 = new java.lang.Object[] { var37};
    java.util.List var39 = org.jsecurity.util.CollectionUtils.asList(var38);
    org.jsecurity.authc.pam.ModularRealmAuthenticator var40 = new org.jsecurity.authc.pam.ModularRealmAuthenticator(var39);
    org.jsecurity.subject.SimplePrincipalCollection var42 = new org.jsecurity.subject.SimplePrincipalCollection((java.util.Collection)var39, "org.jsecurity.authz.UnauthorizedException: org.jsecurity.session.ExpiredSessionException: ");
    org.jsecurity.session.UnknownSessionException var47 = new org.jsecurity.session.UnknownSessionException("dd\uFFFD", (java.io.Serializable)100.0f);
    org.jsecurity.session.SessionException var49 = new org.jsecurity.session.SessionException("dd\uFFFD", (java.lang.Throwable)var47, (java.io.Serializable)0);
    org.jsecurity.session.SessionException var50 = new org.jsecurity.session.SessionException("dd\uFFFD", (java.lang.Throwable)var47);
    var42.add((java.lang.Object)var50, "org.jsecurity.config.ConfigurationException: dd\uFFFD");
    var35.onLogout((org.jsecurity.subject.PrincipalCollection)var42);
    org.jsecurity.cache.HashtableCacheManager var54 = new org.jsecurity.cache.HashtableCacheManager();
    org.jsecurity.cache.Cache var56 = var54.getCache("\u0000\u0000");
    var35.setAuthorizationCache(var56);
    org.jsecurity.codec.CodecException var60 = new org.jsecurity.codec.CodecException("dd\uFFFD");
    org.jsecurity.authc.ConcurrentAccessException var61 = new org.jsecurity.authc.ConcurrentAccessException("org.jsecurity.authz.UnauthorizedException: org.jsecurity.session.ExpiredSessionException: ", (java.lang.Throwable)var60);
    org.jsecurity.subject.SimplePrincipalCollection var63 = new org.jsecurity.subject.SimplePrincipalCollection((java.lang.Object)var60, "");
    var35.onLogout((org.jsecurity.subject.PrincipalCollection)var63);
    java.lang.String[] var66 = org.jsecurity.util.StringUtils.split("org.jsecurity.authz.UnauthorizedException: org.jsecurity.session.ExpiredSessionException: ");
    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      boolean var67 = var0.isPermittedAll((org.jsecurity.subject.PrincipalCollection)var63, var66);
      fail("Expected exception of type java.util.NoSuchElementException");
    } catch (java.util.NoSuchElementException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var4);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var10 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var11);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var15);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var22 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var23);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var32);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var33);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var37);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var38);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var39);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var56);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var66);

  }

  public void test183() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest0.test183");


    org.jsecurity.subject.SubjectException var1 = new org.jsecurity.subject.SubjectException("\u0000\u0000");

  }

  public void test184() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest0.test184");


    boolean var1 = org.jsecurity.io.ResourceUtils.hasResourcePrefix("");
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var1 == false);

  }

  public void test185() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest0.test185");


    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      org.jsecurity.crypto.hash.Sha512Hash var1 = org.jsecurity.crypto.hash.Sha512Hash.fromHexString("org.jsecurity.authz.UnauthorizedException: org.jsecurity.session.ExpiredSessionException: ");
      fail("Expected exception of type java.lang.IllegalArgumentException");
    } catch (java.lang.IllegalArgumentException e) {
      // Expected exception.
    }

  }

  public void test186() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest0.test186");


    boolean var1 = org.jsecurity.io.ResourceUtils.hasResourcePrefix("ZGT/");
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var1 == false);

  }

  public void test187() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest0.test187");


    org.jsecurity.authz.aop.AuthenticatedAnnotationHandler var0 = new org.jsecurity.authz.aop.AuthenticatedAnnotationHandler();

  }

  public void test188() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest0.test188");


    org.jsecurity.mgt.DefaultSecurityManager var0 = new org.jsecurity.mgt.DefaultSecurityManager();
    java.io.InputStream var2 = org.jsecurity.util.ClassUtils.getResourceAsStream("");
    java.lang.Object[] var3 = new java.lang.Object[] { var2};
    java.util.List var4 = org.jsecurity.util.CollectionUtils.asList(var3);
    org.jsecurity.authc.pam.ModularRealmAuthenticator var5 = new org.jsecurity.authc.pam.ModularRealmAuthenticator(var4);
    org.jsecurity.authc.pam.AllSuccessfulModularAuthenticationStrategy var6 = new org.jsecurity.authc.pam.AllSuccessfulModularAuthenticationStrategy();
    var5.setModularAuthenticationStrategy((org.jsecurity.authc.pam.ModularAuthenticationStrategy)var6);
    org.jsecurity.authz.SimpleAuthorizationInfo var8 = new org.jsecurity.authz.SimpleAuthorizationInfo();
    var8.addStringPermission("hi!");
    java.io.InputStream var12 = org.jsecurity.util.ClassUtils.getResourceAsStream("");
    java.lang.Object[] var13 = new java.lang.Object[] { var12};
    java.util.List var14 = org.jsecurity.util.CollectionUtils.asList(var13);
    var8.addRoles((java.util.Collection)var14);
    var5.setAuthenticationListeners((java.util.Collection)var14);
    var0.setSessionListeners((java.util.Collection)var14);
    java.io.InputStream var19 = org.jsecurity.util.ClassUtils.getResourceAsStream("");
    java.lang.Object[] var20 = new java.lang.Object[] { var19};
    java.util.List var21 = org.jsecurity.util.CollectionUtils.asList(var20);
    org.jsecurity.authc.pam.ModularRealmAuthenticator var22 = new org.jsecurity.authc.pam.ModularRealmAuthenticator(var21);
    org.jsecurity.subject.SimplePrincipalCollection var24 = new org.jsecurity.subject.SimplePrincipalCollection((java.util.Collection)var21, "org.jsecurity.authz.UnauthorizedException: org.jsecurity.session.ExpiredSessionException: ");
    org.jsecurity.session.UnknownSessionException var29 = new org.jsecurity.session.UnknownSessionException("dd\uFFFD", (java.io.Serializable)100.0f);
    org.jsecurity.session.SessionException var31 = new org.jsecurity.session.SessionException("dd\uFFFD", (java.lang.Throwable)var29, (java.io.Serializable)0);
    org.jsecurity.session.SessionException var32 = new org.jsecurity.session.SessionException("dd\uFFFD", (java.lang.Throwable)var29);
    var24.add((java.lang.Object)var32, "org.jsecurity.config.ConfigurationException: dd\uFFFD");
    java.util.Set var35 = var24.asSet();
    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      var0.checkRole((org.jsecurity.subject.PrincipalCollection)var24, "dd\uFFFD");
      fail("Expected exception of type java.util.NoSuchElementException");
    } catch (java.util.NoSuchElementException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var2);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var3);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var4);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var12);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var13);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var14);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var19);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var20);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var21);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var35);

  }

  public void test189() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest0.test189");


    org.jsecurity.session.ExpiredSessionException var1 = new org.jsecurity.session.ExpiredSessionException("783ccd31-48a8-42dd-890f-df885a7baaff");

  }

  public void test190() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest0.test190");


    org.jsecurity.realm.activedirectory.ActiveDirectoryRealm var0 = new org.jsecurity.realm.activedirectory.ActiveDirectoryRealm();
    var0.init();
    var0.init();
    org.jsecurity.realm.text.TextConfigurationRealm var3 = new org.jsecurity.realm.text.TextConfigurationRealm();
    java.io.InputStream var5 = org.jsecurity.util.ClassUtils.getResourceAsStream("");
    java.lang.Object[] var6 = new java.lang.Object[] { var5};
    java.util.List var7 = org.jsecurity.util.CollectionUtils.asList(var6);
    org.jsecurity.authc.pam.ModularRealmAuthenticator var8 = new org.jsecurity.authc.pam.ModularRealmAuthenticator(var7);
    org.jsecurity.subject.SimplePrincipalCollection var10 = new org.jsecurity.subject.SimplePrincipalCollection((java.util.Collection)var7, "org.jsecurity.authz.UnauthorizedException: org.jsecurity.session.ExpiredSessionException: ");
    org.jsecurity.session.UnknownSessionException var15 = new org.jsecurity.session.UnknownSessionException("dd\uFFFD", (java.io.Serializable)100.0f);
    org.jsecurity.session.SessionException var17 = new org.jsecurity.session.SessionException("dd\uFFFD", (java.lang.Throwable)var15, (java.io.Serializable)0);
    org.jsecurity.session.SessionException var18 = new org.jsecurity.session.SessionException("dd\uFFFD", (java.lang.Throwable)var15);
    var10.add((java.lang.Object)var18, "org.jsecurity.config.ConfigurationException: dd\uFFFD");
    var3.onLogout((org.jsecurity.subject.PrincipalCollection)var10);
    org.jsecurity.authz.SimpleAuthorizationInfo var22 = new org.jsecurity.authz.SimpleAuthorizationInfo();
    org.jsecurity.session.UnknownSessionException var27 = new org.jsecurity.session.UnknownSessionException("dd\uFFFD", (java.io.Serializable)100.0f);
    org.jsecurity.subject.SubjectException var28 = new org.jsecurity.subject.SubjectException("dd\uFFFD", (java.lang.Throwable)var27);
    org.jsecurity.io.SerializationException var29 = new org.jsecurity.io.SerializationException("", (java.lang.Throwable)var28);
    java.lang.Throwable[] var30 = var28.getSuppressed();
    java.util.Set var31 = org.jsecurity.util.CollectionUtils.asSet((java.lang.Object[])var30);
    var22.setStringPermissions(var31);
    java.util.Set var33 = var22.getRoles();
    org.jsecurity.authz.SimpleAuthorizationInfo var34 = new org.jsecurity.authz.SimpleAuthorizationInfo();
    var34.addRole("a2b823b1e72eae2b727289df8a00a89df8a0bab6ad8a89c4c5c7a9b62a270000");
    org.jsecurity.session.UnknownSessionException var41 = new org.jsecurity.session.UnknownSessionException("dd\uFFFD", (java.io.Serializable)100.0f);
    org.jsecurity.subject.SubjectException var42 = new org.jsecurity.subject.SubjectException("dd\uFFFD", (java.lang.Throwable)var41);
    org.jsecurity.io.SerializationException var43 = new org.jsecurity.io.SerializationException("", (java.lang.Throwable)var42);
    java.lang.Throwable[] var44 = var42.getSuppressed();
    java.util.Set var45 = org.jsecurity.util.CollectionUtils.asSet((java.lang.Object[])var44);
    var34.addRoles((java.util.Collection)var45);
    var22.setRoles(var45);
    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      var0.checkRoles((org.jsecurity.subject.PrincipalCollection)var10, (java.util.Collection)var45);
      fail("Expected exception of type java.util.NoSuchElementException");
    } catch (java.util.NoSuchElementException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var5);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var6);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var7);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var30);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var31);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var33);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var44);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var45);

  }

  public void test191() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest0.test191");


    org.jsecurity.realm.text.TextConfigurationRealm var0 = new org.jsecurity.realm.text.TextConfigurationRealm();
    java.io.InputStream var2 = org.jsecurity.util.ClassUtils.getResourceAsStream("");
    java.lang.Object[] var3 = new java.lang.Object[] { var2};
    java.util.List var4 = org.jsecurity.util.CollectionUtils.asList(var3);
    org.jsecurity.authc.pam.ModularRealmAuthenticator var5 = new org.jsecurity.authc.pam.ModularRealmAuthenticator(var4);
    org.jsecurity.subject.SimplePrincipalCollection var7 = new org.jsecurity.subject.SimplePrincipalCollection((java.util.Collection)var4, "org.jsecurity.authz.UnauthorizedException: org.jsecurity.session.ExpiredSessionException: ");
    org.jsecurity.session.UnknownSessionException var12 = new org.jsecurity.session.UnknownSessionException("dd\uFFFD", (java.io.Serializable)100.0f);
    org.jsecurity.session.SessionException var14 = new org.jsecurity.session.SessionException("dd\uFFFD", (java.lang.Throwable)var12, (java.io.Serializable)0);
    org.jsecurity.session.SessionException var15 = new org.jsecurity.session.SessionException("dd\uFFFD", (java.lang.Throwable)var12);
    var7.add((java.lang.Object)var15, "org.jsecurity.config.ConfigurationException: dd\uFFFD");
    var0.onLogout((org.jsecurity.subject.PrincipalCollection)var7);
    org.jsecurity.cache.HashtableCacheManager var19 = new org.jsecurity.cache.HashtableCacheManager();
    org.jsecurity.cache.Cache var21 = var19.getCache("\u0000\u0000");
    var0.setAuthorizationCache(var21);
    java.lang.String var23 = var0.getUserDefinitions();
    org.jsecurity.authz.permission.InvalidPermissionStringException var26 = new org.jsecurity.authz.permission.InvalidPermissionStringException("", "dd\uFFFD");
    org.jsecurity.JSecurityException var28 = new org.jsecurity.JSecurityException("");
    org.jsecurity.authc.SimpleAuthenticationInfo var30 = new org.jsecurity.authc.SimpleAuthenticationInfo((java.lang.Object)var26, (java.lang.Object)"", "org.jsecurity.authz.UnauthorizedException: org.jsecurity.session.ExpiredSessionException: ");
    org.jsecurity.subject.PrincipalCollection var31 = var30.getPrincipals();
    org.jsecurity.authz.permission.WildcardPermission var33 = new org.jsecurity.authz.permission.WildcardPermission("a2b823b1e72eae2b727289df8a00a89df8a0bab6ad8a89c4c5c7a9b62a270000");
    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      var0.checkPermission(var31, (org.jsecurity.authz.Permission)var33);
      fail("Expected exception of type java.util.NoSuchElementException");
    } catch (java.util.NoSuchElementException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var2);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var3);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var4);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var21);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var23);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var31);

  }

  public void test192() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest0.test192");


    org.jsecurity.realm.text.TextConfigurationRealm var0 = new org.jsecurity.realm.text.TextConfigurationRealm();
    java.io.InputStream var2 = org.jsecurity.util.ClassUtils.getResourceAsStream("");
    java.lang.Object[] var3 = new java.lang.Object[] { var2};
    java.util.List var4 = org.jsecurity.util.CollectionUtils.asList(var3);
    org.jsecurity.authc.pam.ModularRealmAuthenticator var5 = new org.jsecurity.authc.pam.ModularRealmAuthenticator(var4);
    org.jsecurity.subject.SimplePrincipalCollection var7 = new org.jsecurity.subject.SimplePrincipalCollection((java.util.Collection)var4, "org.jsecurity.authz.UnauthorizedException: org.jsecurity.session.ExpiredSessionException: ");
    org.jsecurity.session.UnknownSessionException var12 = new org.jsecurity.session.UnknownSessionException("dd\uFFFD", (java.io.Serializable)100.0f);
    org.jsecurity.session.SessionException var14 = new org.jsecurity.session.SessionException("dd\uFFFD", (java.lang.Throwable)var12, (java.io.Serializable)0);
    org.jsecurity.session.SessionException var15 = new org.jsecurity.session.SessionException("dd\uFFFD", (java.lang.Throwable)var12);
    var7.add((java.lang.Object)var15, "org.jsecurity.config.ConfigurationException: dd\uFFFD");
    var0.onLogout((org.jsecurity.subject.PrincipalCollection)var7);
    org.jsecurity.cache.HashtableCacheManager var19 = new org.jsecurity.cache.HashtableCacheManager();
    org.jsecurity.cache.Cache var21 = var19.getCache("\u0000\u0000");
    var0.setAuthorizationCache(var21);
    var0.setRoleDefinitions("\uFFFD\uFFFD#\uFFFD\uFFFD.\uFFFD+rr\uFFFD\u07CA\u0000\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\u01E9\uFFFD*'\u0000\u0000");
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var2);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var3);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var4);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var21);

  }

  public void test193() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest0.test193");


    org.jsecurity.mgt.DefaultSecurityManager var0 = new org.jsecurity.mgt.DefaultSecurityManager();
    org.jsecurity.authc.pam.AllSuccessfulModularAuthenticationStrategy var1 = new org.jsecurity.authc.pam.AllSuccessfulModularAuthenticationStrategy();
    org.jsecurity.authc.pam.AllSuccessfulModularAuthenticationStrategy var2 = new org.jsecurity.authc.pam.AllSuccessfulModularAuthenticationStrategy();
    char[] var4 = new char[] { };
    org.jsecurity.authc.UsernamePasswordToken var6 = new org.jsecurity.authc.UsernamePasswordToken("hi!", var4, true);
    org.jsecurity.authc.SimpleAccount var7 = new org.jsecurity.authc.SimpleAccount();
    var7.setCredentialsExpired(false);
    boolean var10 = var7.isLocked();
    org.jsecurity.authc.AuthenticationInfo var11 = var2.afterAllAttempts((org.jsecurity.authc.AuthenticationToken)var6, (org.jsecurity.authc.AuthenticationInfo)var7);
    char[] var15 = new char[] { '4', '#'};
    org.jsecurity.authc.UsernamePasswordToken var16 = new org.jsecurity.authc.UsernamePasswordToken("\u0000\u0000", var15);
    org.jsecurity.authc.SimpleAccount var17 = new org.jsecurity.authc.SimpleAccount();
    var17.setCredentialsExpired(false);
    var17.setCredentialsExpired(false);
    boolean var22 = var17.isCredentialsExpired();
    org.jsecurity.authc.AuthenticationInfo var23 = var2.afterAllAttempts((org.jsecurity.authc.AuthenticationToken)var16, (org.jsecurity.authc.AuthenticationInfo)var17);
    org.jsecurity.authz.UnauthenticatedException var27 = new org.jsecurity.authz.UnauthenticatedException();
    org.jsecurity.config.UnresolveableReferenceException var28 = new org.jsecurity.config.UnresolveableReferenceException("", (java.lang.Throwable)var27);
    org.jsecurity.cache.CacheException var29 = new org.jsecurity.cache.CacheException("org.jsecurity.config.ConfigurationException: dd\uFFFD", (java.lang.Throwable)var27);
    org.jsecurity.authc.SimpleAuthenticationInfo var31 = new org.jsecurity.authc.SimpleAuthenticationInfo((java.lang.Object)"org.jsecurity.config.ConfigurationException: dd\uFFFD", (java.lang.Object)var29, "a2b823b1e72eae2b727289df8a00a89df8a0bab6ad8a89c4c5c7a9b62a270000");
    org.jsecurity.subject.PrincipalCollection var32 = var31.getPrincipals();
    org.jsecurity.authc.AuthenticationInfo var33 = var1.afterAllAttempts((org.jsecurity.authc.AuthenticationToken)var16, (org.jsecurity.authc.AuthenticationInfo)var31);
    var0.setModularAuthenticationStrategy((org.jsecurity.authc.pam.ModularAuthenticationStrategy)var1);
    byte[] var38 = new byte[] { (byte)100, (byte)100, (byte)(-1)};
    java.lang.String var39 = org.jsecurity.codec.CodecSupport.toString(var38);
    char[] var40 = org.jsecurity.codec.CodecSupport.toChars(var38);
    boolean var41 = org.jsecurity.codec.Base64.isBase64(var38);
    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      var0.setRememberMeEncryptionCipherKey(var38);
      fail("Expected exception of type java.lang.IllegalStateException");
    } catch (java.lang.IllegalStateException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var4);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var10 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var11);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var15);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var22 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var23);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var32);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var33);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var38);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var39 + "' != '" + "dd\uFFFD"+ "'", var39.equals("dd\uFFFD"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var40);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var41 == false);

  }

  public void test194() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest0.test194");


    org.jsecurity.realm.text.TextConfigurationRealm var0 = new org.jsecurity.realm.text.TextConfigurationRealm();
    org.jsecurity.realm.text.TextConfigurationRealm var1 = new org.jsecurity.realm.text.TextConfigurationRealm();
    java.io.InputStream var3 = org.jsecurity.util.ClassUtils.getResourceAsStream("");
    java.lang.Object[] var4 = new java.lang.Object[] { var3};
    java.util.List var5 = org.jsecurity.util.CollectionUtils.asList(var4);
    org.jsecurity.authc.pam.ModularRealmAuthenticator var6 = new org.jsecurity.authc.pam.ModularRealmAuthenticator(var5);
    org.jsecurity.subject.SimplePrincipalCollection var8 = new org.jsecurity.subject.SimplePrincipalCollection((java.util.Collection)var5, "org.jsecurity.authz.UnauthorizedException: org.jsecurity.session.ExpiredSessionException: ");
    org.jsecurity.session.UnknownSessionException var13 = new org.jsecurity.session.UnknownSessionException("dd\uFFFD", (java.io.Serializable)100.0f);
    org.jsecurity.session.SessionException var15 = new org.jsecurity.session.SessionException("dd\uFFFD", (java.lang.Throwable)var13, (java.io.Serializable)0);
    org.jsecurity.session.SessionException var16 = new org.jsecurity.session.SessionException("dd\uFFFD", (java.lang.Throwable)var13);
    var8.add((java.lang.Object)var16, "org.jsecurity.config.ConfigurationException: dd\uFFFD");
    var1.onLogout((org.jsecurity.subject.PrincipalCollection)var8);
    java.util.Collection var21 = var8.fromRealm("\u0000\u0000\u0000");
    var0.onLogout((org.jsecurity.subject.PrincipalCollection)var8);
    org.jsecurity.codec.CodecException var25 = new org.jsecurity.codec.CodecException("dd\uFFFD");
    org.jsecurity.authc.ConcurrentAccessException var26 = new org.jsecurity.authc.ConcurrentAccessException("org.jsecurity.authz.UnauthorizedException: org.jsecurity.session.ExpiredSessionException: ", (java.lang.Throwable)var25);
    org.jsecurity.subject.SimplePrincipalCollection var28 = new org.jsecurity.subject.SimplePrincipalCollection((java.lang.Object)var25, "");
    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      var0.checkRole((org.jsecurity.subject.PrincipalCollection)var28, "783ccd31-48a8-42dd-890f-df885a7baaff");
      fail("Expected exception of type java.util.NoSuchElementException");
    } catch (java.util.NoSuchElementException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var3);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var4);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var5);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var21);

  }

  public void test195() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest0.test195");


    org.jsecurity.codec.CodecException var2 = new org.jsecurity.codec.CodecException("dd\uFFFD");
    org.jsecurity.authc.DisabledAccountException var3 = new org.jsecurity.authc.DisabledAccountException("org.jsecurity.authz.UnauthorizedException: org.jsecurity.session.ExpiredSessionException: ", (java.lang.Throwable)var2);

  }

  public void test196() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest0.test196");


    org.jsecurity.realm.activedirectory.ActiveDirectoryRealm var0 = new org.jsecurity.realm.activedirectory.ActiveDirectoryRealm();
    org.jsecurity.authc.credential.Sha256CredentialsMatcher var1 = new org.jsecurity.authc.credential.Sha256CredentialsMatcher();
    var0.setCredentialsMatcher((org.jsecurity.authc.credential.CredentialsMatcher)var1);
    org.jsecurity.realm.activedirectory.ActiveDirectoryRealm var3 = new org.jsecurity.realm.activedirectory.ActiveDirectoryRealm();
    org.jsecurity.authc.credential.Sha256CredentialsMatcher var4 = new org.jsecurity.authc.credential.Sha256CredentialsMatcher();
    var3.setCredentialsMatcher((org.jsecurity.authc.credential.CredentialsMatcher)var4);
    java.lang.String var6 = var3.getAuthorizationCacheName();
    var3.setUrl("hi!");
    org.jsecurity.realm.ldap.DefaultLdapContextFactory var9 = new org.jsecurity.realm.ldap.DefaultLdapContextFactory();
    var3.setLdapContextFactory((org.jsecurity.realm.ldap.LdapContextFactory)var9);
    var9.setAuthentication("org.jsecurity.authz.UnauthorizedException: org.jsecurity.session.ExpiredSessionException: ");
    var0.setLdapContextFactory((org.jsecurity.realm.ldap.LdapContextFactory)var9);
    var0.setSystemPassword("a2b823b1e72eae2b727289df8a00a89df8a0bab6ad8a89c4c5c7a9b62a270000");
    java.io.InputStream var17 = org.jsecurity.util.ClassUtils.getResourceAsStream("");
    java.lang.Object[] var18 = new java.lang.Object[] { var17};
    java.util.List var19 = org.jsecurity.util.CollectionUtils.asList(var18);
    org.jsecurity.authc.pam.ModularRealmAuthenticator var20 = new org.jsecurity.authc.pam.ModularRealmAuthenticator(var19);
    org.jsecurity.subject.SimplePrincipalCollection var22 = new org.jsecurity.subject.SimplePrincipalCollection((java.util.Collection)var19, "org.jsecurity.authz.UnauthorizedException: org.jsecurity.session.ExpiredSessionException: ");
    org.jsecurity.session.UnknownSessionException var27 = new org.jsecurity.session.UnknownSessionException("dd\uFFFD", (java.io.Serializable)100.0f);
    org.jsecurity.session.SessionException var29 = new org.jsecurity.session.SessionException("dd\uFFFD", (java.lang.Throwable)var27, (java.io.Serializable)0);
    org.jsecurity.session.SessionException var30 = new org.jsecurity.session.SessionException("dd\uFFFD", (java.lang.Throwable)var27);
    var22.add((java.lang.Object)var30, "org.jsecurity.config.ConfigurationException: dd\uFFFD");
    java.io.InputStream var34 = org.jsecurity.util.ClassUtils.getResourceAsStream("");
    java.lang.Object[] var35 = new java.lang.Object[] { var34};
    java.util.List var36 = org.jsecurity.util.CollectionUtils.asList(var35);
    org.jsecurity.authc.pam.ModularRealmAuthenticator var37 = new org.jsecurity.authc.pam.ModularRealmAuthenticator(var36);
    org.jsecurity.subject.SimplePrincipalCollection var39 = new org.jsecurity.subject.SimplePrincipalCollection((java.util.Collection)var36, "org.jsecurity.authz.UnauthorizedException: org.jsecurity.session.ExpiredSessionException: ");
    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      boolean[] var40 = var0.isPermitted((org.jsecurity.subject.PrincipalCollection)var22, var36);
      fail("Expected exception of type java.util.NoSuchElementException");
    } catch (java.util.NoSuchElementException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var6);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var17);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var18);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var19);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var34);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var35);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var36);

  }

  public void test197() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest0.test197");


    org.jsecurity.io.ResourceException var2 = new org.jsecurity.io.ResourceException("hi!");
    org.jsecurity.codec.CodecException var3 = new org.jsecurity.codec.CodecException((java.lang.Throwable)var2);
    org.jsecurity.JSecurityException var4 = new org.jsecurity.JSecurityException("a2b823b1e72eae2b727289df8a00a89df8a0bab6ad8a89c4c5c7a9b62a270000", (java.lang.Throwable)var2);
    org.jsecurity.authc.ExcessiveAttemptsException var5 = new org.jsecurity.authc.ExcessiveAttemptsException((java.lang.Throwable)var4);
    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      org.jsecurity.crypto.hash.Sha512Hash var6 = new org.jsecurity.crypto.hash.Sha512Hash((java.lang.Object)var4);
      fail("Expected exception of type org.jsecurity.codec.CodecException");
    } catch (org.jsecurity.codec.CodecException e) {
      // Expected exception.
    }

  }

  public void test198() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest0.test198");


    java.io.InputStream var1 = org.jsecurity.util.ClassUtils.getResourceAsStream("org.jsecurity.authz.UnauthorizedException: org.jsecurity.session.ExpiredSessionException: ");
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var1);

  }

  public void test199() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest0.test199");


    org.jsecurity.io.IniResource var0 = new org.jsecurity.io.IniResource();
    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      var0.load("ZGT/");
      fail("Expected exception of type org.jsecurity.io.ResourceException");
    } catch (org.jsecurity.io.ResourceException e) {
      // Expected exception.
    }

  }

  public void test200() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest0.test200");


    org.jsecurity.session.UnknownSessionException var6 = new org.jsecurity.session.UnknownSessionException("dd\uFFFD", (java.io.Serializable)100.0f);
    org.jsecurity.subject.SubjectException var7 = new org.jsecurity.subject.SubjectException("dd\uFFFD", (java.lang.Throwable)var6);
    org.jsecurity.session.InvalidSessionException var8 = new org.jsecurity.session.InvalidSessionException("hi!", (java.lang.Throwable)var7);
    org.jsecurity.session.SessionException var9 = new org.jsecurity.session.SessionException("dd\uFFFD", (java.lang.Throwable)var7);
    org.jsecurity.authc.ConcurrentAccessException var10 = new org.jsecurity.authc.ConcurrentAccessException((java.lang.Throwable)var7);
    org.jsecurity.session.UnknownSessionException var16 = new org.jsecurity.session.UnknownSessionException("dd\uFFFD", (java.io.Serializable)100.0f);
    org.jsecurity.subject.SubjectException var17 = new org.jsecurity.subject.SubjectException("dd\uFFFD", (java.lang.Throwable)var16);
    org.jsecurity.authc.pam.UnsupportedTokenException var18 = new org.jsecurity.authc.pam.UnsupportedTokenException("dd\uFFFD", (java.lang.Throwable)var16);
    org.jsecurity.session.StoppedSessionException var19 = new org.jsecurity.session.StoppedSessionException("org.jsecurity.config.ConfigurationException: dd\uFFFD", (java.lang.Throwable)var18);
    org.jsecurity.JSecurityException var20 = new org.jsecurity.JSecurityException((java.lang.Throwable)var19);
    org.jsecurity.cache.CacheException var21 = new org.jsecurity.cache.CacheException((java.lang.Throwable)var19);
    org.jsecurity.session.InvalidSessionException var22 = new org.jsecurity.session.InvalidSessionException("dd\uFFFD", (java.lang.Throwable)var7, (java.io.Serializable)var19);

  }

  public void test201() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest0.test201");


    org.jsecurity.authc.pam.ModularRealmAuthenticator var0 = new org.jsecurity.authc.pam.ModularRealmAuthenticator();
    org.jsecurity.authz.permission.InvalidPermissionStringException var3 = new org.jsecurity.authz.permission.InvalidPermissionStringException("", "dd\uFFFD");
    org.jsecurity.JSecurityException var5 = new org.jsecurity.JSecurityException("");
    org.jsecurity.authc.SimpleAuthenticationInfo var7 = new org.jsecurity.authc.SimpleAuthenticationInfo((java.lang.Object)var3, (java.lang.Object)"", "org.jsecurity.authz.UnauthorizedException: org.jsecurity.session.ExpiredSessionException: ");
    org.jsecurity.subject.PrincipalCollection var8 = var7.getPrincipals();
    var0.onLogout(var8);
    org.jsecurity.authc.UsernamePasswordToken var10 = new org.jsecurity.authc.UsernamePasswordToken();
    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      org.jsecurity.authc.AuthenticationInfo var11 = var0.authenticate((org.jsecurity.authc.AuthenticationToken)var10);
      fail("Expected exception of type org.jsecurity.authc.AuthenticationException");
    } catch (org.jsecurity.authc.AuthenticationException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var8);

  }

  public void test202() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest0.test202");


    org.jsecurity.authz.SimpleAuthorizationInfo var0 = new org.jsecurity.authz.SimpleAuthorizationInfo();
    org.jsecurity.session.UnknownSessionException var5 = new org.jsecurity.session.UnknownSessionException("dd\uFFFD", (java.io.Serializable)100.0f);
    org.jsecurity.subject.SubjectException var6 = new org.jsecurity.subject.SubjectException("dd\uFFFD", (java.lang.Throwable)var5);
    org.jsecurity.io.SerializationException var7 = new org.jsecurity.io.SerializationException("", (java.lang.Throwable)var6);
    java.lang.Throwable[] var8 = var6.getSuppressed();
    java.util.Set var9 = org.jsecurity.util.CollectionUtils.asSet((java.lang.Object[])var8);
    var0.setStringPermissions(var9);
    java.util.Set var11 = var0.getRoles();
    org.jsecurity.authz.SimpleAuthorizingAccount var12 = new org.jsecurity.authz.SimpleAuthorizingAccount();
    java.util.Set var13 = var12.getSimpleRoles();
    org.jsecurity.authz.SimpleRole var14 = new org.jsecurity.authz.SimpleRole();
    org.jsecurity.authz.SimpleAuthorizationInfo var15 = new org.jsecurity.authz.SimpleAuthorizationInfo();
    var15.addRole("a2b823b1e72eae2b727289df8a00a89df8a0bab6ad8a89c4c5c7a9b62a270000");
    org.jsecurity.session.UnknownSessionException var22 = new org.jsecurity.session.UnknownSessionException("dd\uFFFD", (java.io.Serializable)100.0f);
    org.jsecurity.subject.SubjectException var23 = new org.jsecurity.subject.SubjectException("dd\uFFFD", (java.lang.Throwable)var22);
    org.jsecurity.io.SerializationException var24 = new org.jsecurity.io.SerializationException("", (java.lang.Throwable)var23);
    java.lang.Throwable[] var25 = var23.getSuppressed();
    java.util.Set var26 = org.jsecurity.util.CollectionUtils.asSet((java.lang.Object[])var25);
    var15.addRoles((java.util.Collection)var26);
    var14.addAll((java.util.Collection)var26);
    org.jsecurity.authz.SimpleRole var30 = new org.jsecurity.authz.SimpleRole();
    org.jsecurity.authz.permission.WildcardPermission var33 = new org.jsecurity.authz.permission.WildcardPermission("hi!", false);
    boolean var34 = var30.isPermitted((org.jsecurity.authz.Permission)var33);
    org.jsecurity.session.InvalidSessionException var35 = new org.jsecurity.session.InvalidSessionException("org.jsecurity.config.ConfigurationException: dd\uFFFD", (java.io.Serializable)var33);
    org.jsecurity.authz.SimpleRole var36 = new org.jsecurity.authz.SimpleRole();
    org.jsecurity.authz.permission.WildcardPermission var39 = new org.jsecurity.authz.permission.WildcardPermission("hi!", false);
    boolean var40 = var36.isPermitted((org.jsecurity.authz.Permission)var39);
    boolean var41 = var33.implies((org.jsecurity.authz.Permission)var39);
    boolean var42 = var14.isPermitted((org.jsecurity.authz.Permission)var39);
    boolean var43 = var12.isPermitted((org.jsecurity.authz.Permission)var39);
    var0.addObjectPermission((org.jsecurity.authz.Permission)var39);
    org.jsecurity.session.UnknownSessionException var49 = new org.jsecurity.session.UnknownSessionException("dd\uFFFD", (java.io.Serializable)100.0f);
    org.jsecurity.subject.SubjectException var50 = new org.jsecurity.subject.SubjectException("dd\uFFFD", (java.lang.Throwable)var49);
    org.jsecurity.io.SerializationException var51 = new org.jsecurity.io.SerializationException("", (java.lang.Throwable)var50);
    java.lang.Throwable[] var52 = var50.getSuppressed();
    java.lang.Throwable[] var53 = var50.getSuppressed();
    org.jsecurity.authz.SimpleAuthorizationInfo var56 = new org.jsecurity.authz.SimpleAuthorizationInfo();
    var56.addRole("a2b823b1e72eae2b727289df8a00a89df8a0bab6ad8a89c4c5c7a9b62a270000");
    org.jsecurity.session.UnknownSessionException var63 = new org.jsecurity.session.UnknownSessionException("dd\uFFFD", (java.io.Serializable)100.0f);
    org.jsecurity.subject.SubjectException var64 = new org.jsecurity.subject.SubjectException("dd\uFFFD", (java.lang.Throwable)var63);
    org.jsecurity.io.SerializationException var65 = new org.jsecurity.io.SerializationException("", (java.lang.Throwable)var64);
    java.lang.Throwable[] var66 = var64.getSuppressed();
    java.util.Set var67 = org.jsecurity.util.CollectionUtils.asSet((java.lang.Object[])var66);
    var56.addRoles((java.util.Collection)var67);
    java.io.InputStream var70 = org.jsecurity.util.ClassUtils.getResourceAsStream("");
    java.lang.Object[] var71 = new java.lang.Object[] { var70};
    java.util.List var72 = org.jsecurity.util.CollectionUtils.asList(var71);
    org.jsecurity.authc.pam.ModularRealmAuthenticator var73 = new org.jsecurity.authc.pam.ModularRealmAuthenticator(var72);
    org.jsecurity.subject.SimplePrincipalCollection var75 = new org.jsecurity.subject.SimplePrincipalCollection((java.util.Collection)var72, "org.jsecurity.authz.UnauthorizedException: org.jsecurity.session.ExpiredSessionException: ");
    org.jsecurity.session.UnknownSessionException var80 = new org.jsecurity.session.UnknownSessionException("dd\uFFFD", (java.io.Serializable)100.0f);
    org.jsecurity.session.SessionException var82 = new org.jsecurity.session.SessionException("dd\uFFFD", (java.lang.Throwable)var80, (java.io.Serializable)0);
    org.jsecurity.session.SessionException var83 = new org.jsecurity.session.SessionException("dd\uFFFD", (java.lang.Throwable)var80);
    var75.add((java.lang.Object)var83, "org.jsecurity.config.ConfigurationException: dd\uFFFD");
    java.util.Set var86 = var75.asSet();
    org.jsecurity.authz.SimpleAuthorizingAccount var87 = new org.jsecurity.authz.SimpleAuthorizingAccount((java.lang.Object)var53, (java.lang.Object)"\u0000\u0000\u0000", "\u0000\u0000\u0000", var67, var86);
    var0.addStringPermissions((java.util.Collection)var67);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var8);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var9);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var11);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var13);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var25);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var26);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var34 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var40 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var41 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var42 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var43 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var52);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var53);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var66);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var67);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var70);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var71);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var72);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var86);

  }

  public void test203() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest0.test203");


    boolean var1 = org.jsecurity.io.ResourceUtils.resourceExists("ZGT/");
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var1 == false);

  }

  public void test204() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest0.test204");


    org.jsecurity.mgt.DefaultSecurityManager var0 = new org.jsecurity.mgt.DefaultSecurityManager();
    org.jsecurity.authc.pam.AllSuccessfulModularAuthenticationStrategy var1 = new org.jsecurity.authc.pam.AllSuccessfulModularAuthenticationStrategy();
    org.jsecurity.authc.pam.AllSuccessfulModularAuthenticationStrategy var2 = new org.jsecurity.authc.pam.AllSuccessfulModularAuthenticationStrategy();
    char[] var4 = new char[] { };
    org.jsecurity.authc.UsernamePasswordToken var6 = new org.jsecurity.authc.UsernamePasswordToken("hi!", var4, true);
    org.jsecurity.authc.SimpleAccount var7 = new org.jsecurity.authc.SimpleAccount();
    var7.setCredentialsExpired(false);
    boolean var10 = var7.isLocked();
    org.jsecurity.authc.AuthenticationInfo var11 = var2.afterAllAttempts((org.jsecurity.authc.AuthenticationToken)var6, (org.jsecurity.authc.AuthenticationInfo)var7);
    char[] var15 = new char[] { '4', '#'};
    org.jsecurity.authc.UsernamePasswordToken var16 = new org.jsecurity.authc.UsernamePasswordToken("\u0000\u0000", var15);
    org.jsecurity.authc.SimpleAccount var17 = new org.jsecurity.authc.SimpleAccount();
    var17.setCredentialsExpired(false);
    var17.setCredentialsExpired(false);
    boolean var22 = var17.isCredentialsExpired();
    org.jsecurity.authc.AuthenticationInfo var23 = var2.afterAllAttempts((org.jsecurity.authc.AuthenticationToken)var16, (org.jsecurity.authc.AuthenticationInfo)var17);
    org.jsecurity.authz.UnauthenticatedException var27 = new org.jsecurity.authz.UnauthenticatedException();
    org.jsecurity.config.UnresolveableReferenceException var28 = new org.jsecurity.config.UnresolveableReferenceException("", (java.lang.Throwable)var27);
    org.jsecurity.cache.CacheException var29 = new org.jsecurity.cache.CacheException("org.jsecurity.config.ConfigurationException: dd\uFFFD", (java.lang.Throwable)var27);
    org.jsecurity.authc.SimpleAuthenticationInfo var31 = new org.jsecurity.authc.SimpleAuthenticationInfo((java.lang.Object)"org.jsecurity.config.ConfigurationException: dd\uFFFD", (java.lang.Object)var29, "a2b823b1e72eae2b727289df8a00a89df8a0bab6ad8a89c4c5c7a9b62a270000");
    org.jsecurity.subject.PrincipalCollection var32 = var31.getPrincipals();
    org.jsecurity.authc.AuthenticationInfo var33 = var1.afterAllAttempts((org.jsecurity.authc.AuthenticationToken)var16, (org.jsecurity.authc.AuthenticationInfo)var31);
    var0.setModularAuthenticationStrategy((org.jsecurity.authc.pam.ModularAuthenticationStrategy)var1);
    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      var0.setRememberMeEncryptionCipherKeyBase64("\u0000\u0000\u0000");
      fail("Expected exception of type java.lang.IllegalStateException");
    } catch (java.lang.IllegalStateException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var4);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var10 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var11);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var15);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var22 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var23);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var32);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var33);

  }

  public void test205() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest0.test205");


    org.jsecurity.authz.ModularRealmAuthorizer var0 = new org.jsecurity.authz.ModularRealmAuthorizer();
    org.jsecurity.codec.CodecException var3 = new org.jsecurity.codec.CodecException("dd\uFFFD");
    org.jsecurity.authc.ConcurrentAccessException var4 = new org.jsecurity.authc.ConcurrentAccessException("org.jsecurity.authz.UnauthorizedException: org.jsecurity.session.ExpiredSessionException: ", (java.lang.Throwable)var3);
    org.jsecurity.subject.SimplePrincipalCollection var6 = new org.jsecurity.subject.SimplePrincipalCollection((java.lang.Object)var3, "");
    boolean var7 = var6.isEmpty();
    java.lang.String[] var11 = org.jsecurity.util.StringUtils.split("ZGT/", '#', '#');
    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      var0.checkPermissions((org.jsecurity.subject.PrincipalCollection)var6, var11);
      fail("Expected exception of type java.lang.IllegalStateException");
    } catch (java.lang.IllegalStateException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var7 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var11);

  }

  public void test206() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest0.test206");


    org.jsecurity.realm.activedirectory.ActiveDirectoryRealm var0 = new org.jsecurity.realm.activedirectory.ActiveDirectoryRealm();
    var0.init();
    var0.init();
    org.jsecurity.authc.IncorrectCredentialsException var4 = new org.jsecurity.authc.IncorrectCredentialsException("\u0000\u0000");
    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      org.jsecurity.crypto.hash.Sha512Hash var5 = new org.jsecurity.crypto.hash.Sha512Hash((java.lang.Object)var0, (java.lang.Object)"\u0000\u0000");
      fail("Expected exception of type org.jsecurity.codec.CodecException");
    } catch (org.jsecurity.codec.CodecException e) {
      // Expected exception.
    }

  }

  public void test207() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest0.test207");


    org.jsecurity.mgt.DefaultSecurityManager var0 = new org.jsecurity.mgt.DefaultSecurityManager();
    java.io.InputStream var2 = org.jsecurity.util.ClassUtils.getResourceAsStream("");
    java.lang.Object[] var3 = new java.lang.Object[] { var2};
    java.util.List var4 = org.jsecurity.util.CollectionUtils.asList(var3);
    org.jsecurity.authc.pam.ModularRealmAuthenticator var5 = new org.jsecurity.authc.pam.ModularRealmAuthenticator(var4);
    org.jsecurity.authc.pam.AllSuccessfulModularAuthenticationStrategy var6 = new org.jsecurity.authc.pam.AllSuccessfulModularAuthenticationStrategy();
    var5.setModularAuthenticationStrategy((org.jsecurity.authc.pam.ModularAuthenticationStrategy)var6);
    org.jsecurity.authz.SimpleAuthorizationInfo var8 = new org.jsecurity.authz.SimpleAuthorizationInfo();
    var8.addStringPermission("hi!");
    java.io.InputStream var12 = org.jsecurity.util.ClassUtils.getResourceAsStream("");
    java.lang.Object[] var13 = new java.lang.Object[] { var12};
    java.util.List var14 = org.jsecurity.util.CollectionUtils.asList(var13);
    var8.addRoles((java.util.Collection)var14);
    var5.setAuthenticationListeners((java.util.Collection)var14);
    var0.setSessionListeners((java.util.Collection)var14);
    java.io.InputStream var19 = org.jsecurity.util.ClassUtils.getResourceAsStream("");
    java.lang.Object[] var20 = new java.lang.Object[] { var19};
    java.util.List var21 = org.jsecurity.util.CollectionUtils.asList(var20);
    org.jsecurity.authc.pam.ModularRealmAuthenticator var22 = new org.jsecurity.authc.pam.ModularRealmAuthenticator(var21);
    org.jsecurity.subject.SimplePrincipalCollection var24 = new org.jsecurity.subject.SimplePrincipalCollection((java.util.Collection)var21, "org.jsecurity.authz.UnauthorizedException: org.jsecurity.session.ExpiredSessionException: ");
    org.jsecurity.session.UnknownSessionException var29 = new org.jsecurity.session.UnknownSessionException("dd\uFFFD", (java.io.Serializable)100.0f);
    org.jsecurity.session.SessionException var31 = new org.jsecurity.session.SessionException("dd\uFFFD", (java.lang.Throwable)var29, (java.io.Serializable)0);
    org.jsecurity.session.SessionException var32 = new org.jsecurity.session.SessionException("dd\uFFFD", (java.lang.Throwable)var29);
    var24.add((java.lang.Object)var32, "org.jsecurity.config.ConfigurationException: dd\uFFFD");
    java.util.Set var35 = var24.asSet();
    org.jsecurity.codec.CodecException var38 = new org.jsecurity.codec.CodecException("dd\uFFFD");
    org.jsecurity.authc.ConcurrentAccessException var39 = new org.jsecurity.authc.ConcurrentAccessException("org.jsecurity.authz.UnauthorizedException: org.jsecurity.session.ExpiredSessionException: ", (java.lang.Throwable)var38);
    org.jsecurity.subject.SimplePrincipalCollection var41 = new org.jsecurity.subject.SimplePrincipalCollection((java.lang.Object)var38, "");
    java.io.InputStream var43 = org.jsecurity.util.ClassUtils.getResourceAsStream("");
    java.lang.Object[] var44 = new java.lang.Object[] { var43};
    java.util.List var45 = org.jsecurity.util.CollectionUtils.asList(var44);
    org.jsecurity.authc.pam.ModularRealmAuthenticator var46 = new org.jsecurity.authc.pam.ModularRealmAuthenticator(var45);
    var41.addAll((java.util.Collection)var45, "\u0000\u0000");
    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      var0.checkRoles((org.jsecurity.subject.PrincipalCollection)var24, (java.util.Collection)var45);
      fail("Expected exception of type java.lang.ClassCastException");
    } catch (java.lang.ClassCastException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var2);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var3);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var4);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var12);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var13);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var14);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var19);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var20);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var21);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var35);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var43);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var44);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var45);

  }

  public void test208() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest0.test208");


    org.jsecurity.authz.SimpleAuthorizationInfo var0 = new org.jsecurity.authz.SimpleAuthorizationInfo();
    org.jsecurity.session.UnknownSessionException var5 = new org.jsecurity.session.UnknownSessionException("dd\uFFFD", (java.io.Serializable)100.0f);
    org.jsecurity.subject.SubjectException var6 = new org.jsecurity.subject.SubjectException("dd\uFFFD", (java.lang.Throwable)var5);
    org.jsecurity.io.SerializationException var7 = new org.jsecurity.io.SerializationException("", (java.lang.Throwable)var6);
    java.lang.Throwable[] var8 = var6.getSuppressed();
    java.util.Set var9 = org.jsecurity.util.CollectionUtils.asSet((java.lang.Object[])var8);
    var0.setStringPermissions(var9);
    java.util.Set var11 = var0.getRoles();
    org.jsecurity.authz.SimpleAuthorizingAccount var12 = new org.jsecurity.authz.SimpleAuthorizingAccount();
    java.util.Set var13 = var12.getSimpleRoles();
    org.jsecurity.authz.SimpleRole var14 = new org.jsecurity.authz.SimpleRole();
    org.jsecurity.authz.SimpleAuthorizationInfo var15 = new org.jsecurity.authz.SimpleAuthorizationInfo();
    var15.addRole("a2b823b1e72eae2b727289df8a00a89df8a0bab6ad8a89c4c5c7a9b62a270000");
    org.jsecurity.session.UnknownSessionException var22 = new org.jsecurity.session.UnknownSessionException("dd\uFFFD", (java.io.Serializable)100.0f);
    org.jsecurity.subject.SubjectException var23 = new org.jsecurity.subject.SubjectException("dd\uFFFD", (java.lang.Throwable)var22);
    org.jsecurity.io.SerializationException var24 = new org.jsecurity.io.SerializationException("", (java.lang.Throwable)var23);
    java.lang.Throwable[] var25 = var23.getSuppressed();
    java.util.Set var26 = org.jsecurity.util.CollectionUtils.asSet((java.lang.Object[])var25);
    var15.addRoles((java.util.Collection)var26);
    var14.addAll((java.util.Collection)var26);
    org.jsecurity.authz.SimpleRole var30 = new org.jsecurity.authz.SimpleRole();
    org.jsecurity.authz.permission.WildcardPermission var33 = new org.jsecurity.authz.permission.WildcardPermission("hi!", false);
    boolean var34 = var30.isPermitted((org.jsecurity.authz.Permission)var33);
    org.jsecurity.session.InvalidSessionException var35 = new org.jsecurity.session.InvalidSessionException("org.jsecurity.config.ConfigurationException: dd\uFFFD", (java.io.Serializable)var33);
    org.jsecurity.authz.SimpleRole var36 = new org.jsecurity.authz.SimpleRole();
    org.jsecurity.authz.permission.WildcardPermission var39 = new org.jsecurity.authz.permission.WildcardPermission("hi!", false);
    boolean var40 = var36.isPermitted((org.jsecurity.authz.Permission)var39);
    boolean var41 = var33.implies((org.jsecurity.authz.Permission)var39);
    boolean var42 = var14.isPermitted((org.jsecurity.authz.Permission)var39);
    boolean var43 = var12.isPermitted((org.jsecurity.authz.Permission)var39);
    var0.addObjectPermission((org.jsecurity.authz.Permission)var39);
    java.io.InputStream var46 = org.jsecurity.util.ClassUtils.getResourceAsStream("");
    java.lang.Object[] var47 = new java.lang.Object[] { var46};
    java.util.List var48 = org.jsecurity.util.CollectionUtils.asList(var47);
    org.jsecurity.authc.pam.ModularRealmAuthenticator var49 = new org.jsecurity.authc.pam.ModularRealmAuthenticator(var48);
    org.jsecurity.subject.SimplePrincipalCollection var51 = new org.jsecurity.subject.SimplePrincipalCollection((java.util.Collection)var48, "org.jsecurity.authz.UnauthorizedException: org.jsecurity.session.ExpiredSessionException: ");
    org.jsecurity.session.UnknownSessionException var56 = new org.jsecurity.session.UnknownSessionException("dd\uFFFD", (java.io.Serializable)100.0f);
    org.jsecurity.session.SessionException var58 = new org.jsecurity.session.SessionException("dd\uFFFD", (java.lang.Throwable)var56, (java.io.Serializable)0);
    org.jsecurity.session.SessionException var59 = new org.jsecurity.session.SessionException("dd\uFFFD", (java.lang.Throwable)var56);
    var51.add((java.lang.Object)var59, "org.jsecurity.config.ConfigurationException: dd\uFFFD");
    java.util.Set var62 = var51.asSet();
    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      var0.addStringPermissions((java.util.Collection)var62);
      fail("Expected exception of type java.lang.UnsupportedOperationException");
    } catch (java.lang.UnsupportedOperationException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var8);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var9);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var11);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var13);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var25);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var26);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var34 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var40 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var41 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var42 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var43 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var46);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var47);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var48);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var62);

  }

  public void test209() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest0.test209");


    org.jsecurity.util.UnavailableConstructorException var1 = new org.jsecurity.util.UnavailableConstructorException("5dd0c65d-1422-49c2-becb-9e8dca619ab3");

  }

  public void test210() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest0.test210");


    org.jsecurity.mgt.DefaultSecurityManager var0 = new org.jsecurity.mgt.DefaultSecurityManager();
    java.io.InputStream var2 = org.jsecurity.util.ClassUtils.getResourceAsStream("");
    java.lang.Object[] var3 = new java.lang.Object[] { var2};
    java.util.List var4 = org.jsecurity.util.CollectionUtils.asList(var3);
    org.jsecurity.authc.pam.ModularRealmAuthenticator var5 = new org.jsecurity.authc.pam.ModularRealmAuthenticator(var4);
    org.jsecurity.authc.pam.AllSuccessfulModularAuthenticationStrategy var6 = new org.jsecurity.authc.pam.AllSuccessfulModularAuthenticationStrategy();
    var5.setModularAuthenticationStrategy((org.jsecurity.authc.pam.ModularAuthenticationStrategy)var6);
    org.jsecurity.authz.SimpleAuthorizationInfo var8 = new org.jsecurity.authz.SimpleAuthorizationInfo();
    var8.addStringPermission("hi!");
    java.io.InputStream var12 = org.jsecurity.util.ClassUtils.getResourceAsStream("");
    java.lang.Object[] var13 = new java.lang.Object[] { var12};
    java.util.List var14 = org.jsecurity.util.CollectionUtils.asList(var13);
    var8.addRoles((java.util.Collection)var14);
    var5.setAuthenticationListeners((java.util.Collection)var14);
    var0.setSessionListeners((java.util.Collection)var14);
    java.util.Collection var18 = var0.getRealms();
    byte[] var22 = new byte[] { (byte)100, (byte)100, (byte)(-1)};
    java.lang.String var23 = org.jsecurity.codec.CodecSupport.toString(var22);
    byte[] var24 = org.jsecurity.codec.Base64.encode(var22);
    java.lang.String var25 = org.jsecurity.codec.Base64.decodeToString(var24);
    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      var0.setRememberMeEncryptionCipherKey(var24);
      fail("Expected exception of type java.lang.IllegalStateException");
    } catch (java.lang.IllegalStateException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var2);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var3);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var4);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var12);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var13);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var14);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var18);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var22);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var23 + "' != '" + "dd\uFFFD"+ "'", var23.equals("dd\uFFFD"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var24);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var25 + "' != '" + "dd\uFFFD"+ "'", var25.equals("dd\uFFFD"));

  }

  public void test211() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest0.test211");


    org.jsecurity.jndi.JndiTemplate var0 = new org.jsecurity.jndi.JndiTemplate();
    org.jsecurity.authz.SimpleAuthorizingAccount var2 = new org.jsecurity.authz.SimpleAuthorizingAccount();
    org.jsecurity.authz.SimpleAuthorizationInfo var3 = new org.jsecurity.authz.SimpleAuthorizationInfo();
    var3.addRole("a2b823b1e72eae2b727289df8a00a89df8a0bab6ad8a89c4c5c7a9b62a270000");
    org.jsecurity.authz.SimpleAuthorizationInfo var6 = new org.jsecurity.authz.SimpleAuthorizationInfo();
    var6.addRole("a2b823b1e72eae2b727289df8a00a89df8a0bab6ad8a89c4c5c7a9b62a270000");
    org.jsecurity.session.UnknownSessionException var13 = new org.jsecurity.session.UnknownSessionException("dd\uFFFD", (java.io.Serializable)100.0f);
    org.jsecurity.subject.SubjectException var14 = new org.jsecurity.subject.SubjectException("dd\uFFFD", (java.lang.Throwable)var13);
    org.jsecurity.io.SerializationException var15 = new org.jsecurity.io.SerializationException("", (java.lang.Throwable)var14);
    java.lang.Throwable[] var16 = var14.getSuppressed();
    java.util.Set var17 = org.jsecurity.util.CollectionUtils.asSet((java.lang.Object[])var16);
    var6.addRoles((java.util.Collection)var17);
    var3.setObjectPermissions(var17);
    var2.setSimpleRoles(var17);
    java.util.Set var21 = var2.getPermissions();
    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      var0.bind("hi!", (java.lang.Object)var21);
      fail("Expected exception of type javax.naming.NoInitialContextException");
    } catch (javax.naming.NoInitialContextException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var16);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var17);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var21);

  }

  public void test212() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest0.test212");


    org.jsecurity.authz.ModularRealmAuthorizer var0 = new org.jsecurity.authz.ModularRealmAuthorizer();
    org.jsecurity.mgt.DefaultSecurityManager var1 = new org.jsecurity.mgt.DefaultSecurityManager();
    java.io.InputStream var3 = org.jsecurity.util.ClassUtils.getResourceAsStream("");
    java.lang.Object[] var4 = new java.lang.Object[] { var3};
    java.util.List var5 = org.jsecurity.util.CollectionUtils.asList(var4);
    org.jsecurity.authc.pam.ModularRealmAuthenticator var6 = new org.jsecurity.authc.pam.ModularRealmAuthenticator(var5);
    org.jsecurity.authc.pam.AllSuccessfulModularAuthenticationStrategy var7 = new org.jsecurity.authc.pam.AllSuccessfulModularAuthenticationStrategy();
    var6.setModularAuthenticationStrategy((org.jsecurity.authc.pam.ModularAuthenticationStrategy)var7);
    org.jsecurity.authz.SimpleAuthorizationInfo var9 = new org.jsecurity.authz.SimpleAuthorizationInfo();
    var9.addStringPermission("hi!");
    java.io.InputStream var13 = org.jsecurity.util.ClassUtils.getResourceAsStream("");
    java.lang.Object[] var14 = new java.lang.Object[] { var13};
    java.util.List var15 = org.jsecurity.util.CollectionUtils.asList(var14);
    var9.addRoles((java.util.Collection)var15);
    var6.setAuthenticationListeners((java.util.Collection)var15);
    var1.setSessionListeners((java.util.Collection)var15);
    org.jsecurity.realm.text.TextConfigurationRealm var19 = new org.jsecurity.realm.text.TextConfigurationRealm();
    java.io.InputStream var21 = org.jsecurity.util.ClassUtils.getResourceAsStream("");
    java.lang.Object[] var22 = new java.lang.Object[] { var21};
    java.util.List var23 = org.jsecurity.util.CollectionUtils.asList(var22);
    org.jsecurity.authc.pam.ModularRealmAuthenticator var24 = new org.jsecurity.authc.pam.ModularRealmAuthenticator(var23);
    org.jsecurity.subject.SimplePrincipalCollection var26 = new org.jsecurity.subject.SimplePrincipalCollection((java.util.Collection)var23, "org.jsecurity.authz.UnauthorizedException: org.jsecurity.session.ExpiredSessionException: ");
    org.jsecurity.session.UnknownSessionException var31 = new org.jsecurity.session.UnknownSessionException("dd\uFFFD", (java.io.Serializable)100.0f);
    org.jsecurity.session.SessionException var33 = new org.jsecurity.session.SessionException("dd\uFFFD", (java.lang.Throwable)var31, (java.io.Serializable)0);
    org.jsecurity.session.SessionException var34 = new org.jsecurity.session.SessionException("dd\uFFFD", (java.lang.Throwable)var31);
    var26.add((java.lang.Object)var34, "org.jsecurity.config.ConfigurationException: dd\uFFFD");
    var19.onLogout((org.jsecurity.subject.PrincipalCollection)var26);
    org.jsecurity.authc.pam.FirstSuccessfulAuthenticationStrategy var38 = new org.jsecurity.authc.pam.FirstSuccessfulAuthenticationStrategy();
    org.jsecurity.authz.UnauthorizedException var40 = new org.jsecurity.authz.UnauthorizedException("org.jsecurity.config.ConfigurationException: dd\uFFFD");
    java.lang.Throwable[] var41 = var40.getSuppressed();
    java.util.List var42 = org.jsecurity.util.CollectionUtils.asList((java.lang.Object[])var41);
    org.jsecurity.authc.UsernamePasswordToken var43 = new org.jsecurity.authc.UsernamePasswordToken();
    java.lang.String var44 = var43.getUsername();
    java.net.InetAddress var45 = var43.getInetAddress();
    org.jsecurity.authc.AuthenticationInfo var46 = var38.beforeAllAttempts((java.util.Collection)var42, (org.jsecurity.authc.AuthenticationToken)var43);
    boolean[] var47 = var1.hasRoles((org.jsecurity.subject.PrincipalCollection)var26, var42);
    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      var0.checkRole((org.jsecurity.subject.PrincipalCollection)var26, "5dd0c65d-1422-49c2-becb-9e8dca619ab3");
      fail("Expected exception of type java.lang.IllegalStateException");
    } catch (java.lang.IllegalStateException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var3);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var4);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var5);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var13);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var14);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var15);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var21);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var22);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var23);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var41);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var42);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var44);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var45);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var46);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var47);

  }

  public void test213() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest0.test213");


    org.jsecurity.mgt.DefaultSecurityManager var0 = new org.jsecurity.mgt.DefaultSecurityManager();
    java.io.InputStream var2 = org.jsecurity.util.ClassUtils.getResourceAsStream("");
    java.lang.Object[] var3 = new java.lang.Object[] { var2};
    java.util.List var4 = org.jsecurity.util.CollectionUtils.asList(var3);
    org.jsecurity.authc.pam.ModularRealmAuthenticator var5 = new org.jsecurity.authc.pam.ModularRealmAuthenticator(var4);
    org.jsecurity.authc.pam.AllSuccessfulModularAuthenticationStrategy var6 = new org.jsecurity.authc.pam.AllSuccessfulModularAuthenticationStrategy();
    var5.setModularAuthenticationStrategy((org.jsecurity.authc.pam.ModularAuthenticationStrategy)var6);
    org.jsecurity.authz.SimpleAuthorizationInfo var8 = new org.jsecurity.authz.SimpleAuthorizationInfo();
    var8.addStringPermission("hi!");
    java.io.InputStream var12 = org.jsecurity.util.ClassUtils.getResourceAsStream("");
    java.lang.Object[] var13 = new java.lang.Object[] { var12};
    java.util.List var14 = org.jsecurity.util.CollectionUtils.asList(var13);
    var8.addRoles((java.util.Collection)var14);
    var5.setAuthenticationListeners((java.util.Collection)var14);
    var0.setSessionListeners((java.util.Collection)var14);
    java.util.Collection var18 = var0.getRealms();
    org.jsecurity.codec.CodecException var21 = new org.jsecurity.codec.CodecException("dd\uFFFD");
    org.jsecurity.authc.ConcurrentAccessException var22 = new org.jsecurity.authc.ConcurrentAccessException("org.jsecurity.authz.UnauthorizedException: org.jsecurity.session.ExpiredSessionException: ", (java.lang.Throwable)var21);
    org.jsecurity.subject.SimplePrincipalCollection var24 = new org.jsecurity.subject.SimplePrincipalCollection((java.lang.Object)var21, "");
    org.jsecurity.authc.pam.FirstSuccessfulAuthenticationStrategy var25 = new org.jsecurity.authc.pam.FirstSuccessfulAuthenticationStrategy();
    org.jsecurity.authz.UnauthorizedException var27 = new org.jsecurity.authz.UnauthorizedException("org.jsecurity.config.ConfigurationException: dd\uFFFD");
    java.lang.Throwable[] var28 = var27.getSuppressed();
    java.util.List var29 = org.jsecurity.util.CollectionUtils.asList((java.lang.Object[])var28);
    org.jsecurity.authc.UsernamePasswordToken var30 = new org.jsecurity.authc.UsernamePasswordToken();
    java.lang.String var31 = var30.getUsername();
    java.net.InetAddress var32 = var30.getInetAddress();
    org.jsecurity.authc.AuthenticationInfo var33 = var25.beforeAllAttempts((java.util.Collection)var29, (org.jsecurity.authc.AuthenticationToken)var30);
    org.jsecurity.session.UnknownSessionException var38 = new org.jsecurity.session.UnknownSessionException("dd\uFFFD", (java.io.Serializable)100.0f);
    org.jsecurity.subject.SubjectException var39 = new org.jsecurity.subject.SubjectException("dd\uFFFD", (java.lang.Throwable)var38);
    org.jsecurity.io.SerializationException var40 = new org.jsecurity.io.SerializationException("", (java.lang.Throwable)var39);
    java.lang.Throwable[] var41 = var39.getSuppressed();
    java.util.Set var42 = org.jsecurity.util.CollectionUtils.asSet((java.lang.Object[])var41);
    org.jsecurity.authc.SimpleAccount var43 = new org.jsecurity.authc.SimpleAccount((org.jsecurity.subject.PrincipalCollection)var24, (java.lang.Object)var29, var42);
    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      boolean var45 = var0.hasRole((org.jsecurity.subject.PrincipalCollection)var24, "");
      fail("Expected exception of type java.util.NoSuchElementException");
    } catch (java.util.NoSuchElementException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var2);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var3);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var4);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var12);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var13);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var14);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var18);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var28);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var29);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var31);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var32);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var33);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var41);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var42);

  }

  public void test214() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest0.test214");


    boolean var1 = org.jsecurity.util.ClassUtils.isAvailable("ZGT/");
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var1 == false);

  }

  public void test215() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest0.test215");


    org.jsecurity.jndi.JndiTemplate var0 = new org.jsecurity.jndi.JndiTemplate();
    org.jsecurity.authz.SimpleRole var2 = new org.jsecurity.authz.SimpleRole();
    org.jsecurity.authz.SimpleAuthorizationInfo var3 = new org.jsecurity.authz.SimpleAuthorizationInfo();
    var3.addRole("a2b823b1e72eae2b727289df8a00a89df8a0bab6ad8a89c4c5c7a9b62a270000");
    org.jsecurity.session.UnknownSessionException var10 = new org.jsecurity.session.UnknownSessionException("dd\uFFFD", (java.io.Serializable)100.0f);
    org.jsecurity.subject.SubjectException var11 = new org.jsecurity.subject.SubjectException("dd\uFFFD", (java.lang.Throwable)var10);
    org.jsecurity.io.SerializationException var12 = new org.jsecurity.io.SerializationException("", (java.lang.Throwable)var11);
    java.lang.Throwable[] var13 = var11.getSuppressed();
    java.util.Set var14 = org.jsecurity.util.CollectionUtils.asSet((java.lang.Object[])var13);
    var3.addRoles((java.util.Collection)var14);
    var2.addAll((java.util.Collection)var14);
    org.jsecurity.authz.SimpleRole var18 = new org.jsecurity.authz.SimpleRole();
    org.jsecurity.authz.permission.WildcardPermission var21 = new org.jsecurity.authz.permission.WildcardPermission("hi!", false);
    boolean var22 = var18.isPermitted((org.jsecurity.authz.Permission)var21);
    org.jsecurity.session.InvalidSessionException var23 = new org.jsecurity.session.InvalidSessionException("org.jsecurity.config.ConfigurationException: dd\uFFFD", (java.io.Serializable)var21);
    org.jsecurity.authz.SimpleRole var24 = new org.jsecurity.authz.SimpleRole();
    org.jsecurity.authz.permission.WildcardPermission var27 = new org.jsecurity.authz.permission.WildcardPermission("hi!", false);
    boolean var28 = var24.isPermitted((org.jsecurity.authz.Permission)var27);
    boolean var29 = var21.implies((org.jsecurity.authz.Permission)var27);
    boolean var30 = var2.isPermitted((org.jsecurity.authz.Permission)var27);
    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      var0.bind("\u0000\u0000", (java.lang.Object)var2);
      fail("Expected exception of type javax.naming.NoInitialContextException");
    } catch (javax.naming.NoInitialContextException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var13);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var14);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var22 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var28 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var29 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var30 == false);

  }

  public void test216() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest0.test216");


    org.jsecurity.jndi.JndiTemplate var0 = new org.jsecurity.jndi.JndiTemplate();
    java.util.Properties var1 = var0.getEnvironment();
    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      java.lang.Object var3 = var0.lookup("\uFFFD\uFFFD#\uFFFD\uFFFD.\uFFFD+rr\uFFFD\u07CA\u0000\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\u01E9\uFFFD*'\u0000\u0000");
      fail("Expected exception of type javax.naming.NoInitialContextException");
    } catch (javax.naming.NoInitialContextException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var1);

  }

  public void test217() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest0.test217");


    org.jsecurity.crypto.hash.Sha1Hash var1 = org.jsecurity.crypto.hash.Sha1Hash.fromBase64String("6464ff");
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var1);

  }

  public void test218() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest0.test218");


    org.jsecurity.jndi.JndiTemplate var0 = new org.jsecurity.jndi.JndiTemplate();
    java.io.InputStream var3 = org.jsecurity.util.ClassUtils.getResourceAsStream("");
    java.lang.Object[] var4 = new java.lang.Object[] { var3};
    java.util.List var5 = org.jsecurity.util.CollectionUtils.asList(var4);
    org.jsecurity.authc.pam.ModularRealmAuthenticator var6 = new org.jsecurity.authc.pam.ModularRealmAuthenticator(var5);
    org.jsecurity.subject.SimplePrincipalCollection var8 = new org.jsecurity.subject.SimplePrincipalCollection((java.util.Collection)var5, "org.jsecurity.authz.UnauthorizedException: org.jsecurity.session.ExpiredSessionException: ");
    org.jsecurity.io.ResourceException var12 = new org.jsecurity.io.ResourceException("hi!");
    org.jsecurity.authc.UnknownAccountException var13 = new org.jsecurity.authc.UnknownAccountException((java.lang.Throwable)var12);
    org.jsecurity.session.StoppedSessionException var14 = new org.jsecurity.session.StoppedSessionException("dd\uFFFD", (java.io.Serializable)var12);
    org.jsecurity.session.UnknownSessionException var15 = new org.jsecurity.session.UnknownSessionException("org.jsecurity.authz.UnauthorizedException: org.jsecurity.session.ExpiredSessionException: ", (java.lang.Throwable)var12);
    boolean var16 = var8.equals((java.lang.Object)var12);
    org.jsecurity.authz.aop.RoleAnnotationMethodInterceptor var17 = new org.jsecurity.authz.aop.RoleAnnotationMethodInterceptor();
    org.jsecurity.aop.AnnotationHandler var18 = var17.getHandler();
    java.lang.Class var19 = var18.getAnnotationClass();
    java.lang.Object var20 = var8.oneByType(var19);
    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      java.lang.Object var21 = var0.lookup("783ccd31-48a8-42dd-890f-df885a7baaff", var19);
      fail("Expected exception of type javax.naming.NoInitialContextException");
    } catch (javax.naming.NoInitialContextException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var3);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var4);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var5);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var16 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var18);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var19);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var20);

  }

  public void test219() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest0.test219");


    org.jsecurity.authc.pam.FirstSuccessfulAuthenticationStrategy var0 = new org.jsecurity.authc.pam.FirstSuccessfulAuthenticationStrategy();
    org.jsecurity.authz.UnauthorizedException var2 = new org.jsecurity.authz.UnauthorizedException("org.jsecurity.config.ConfigurationException: dd\uFFFD");
    java.lang.Throwable[] var3 = var2.getSuppressed();
    java.util.List var4 = org.jsecurity.util.CollectionUtils.asList((java.lang.Object[])var3);
    org.jsecurity.authc.UsernamePasswordToken var5 = new org.jsecurity.authc.UsernamePasswordToken();
    java.lang.String var6 = var5.getUsername();
    java.net.InetAddress var7 = var5.getInetAddress();
    org.jsecurity.authc.AuthenticationInfo var8 = var0.beforeAllAttempts((java.util.Collection)var4, (org.jsecurity.authc.AuthenticationToken)var5);
    org.jsecurity.authz.SimpleAuthorizingAccount var9 = new org.jsecurity.authz.SimpleAuthorizingAccount();
    org.jsecurity.authz.SimpleAuthorizationInfo var10 = new org.jsecurity.authz.SimpleAuthorizationInfo();
    var10.addRole("a2b823b1e72eae2b727289df8a00a89df8a0bab6ad8a89c4c5c7a9b62a270000");
    org.jsecurity.authz.SimpleAuthorizationInfo var13 = new org.jsecurity.authz.SimpleAuthorizationInfo();
    var13.addRole("a2b823b1e72eae2b727289df8a00a89df8a0bab6ad8a89c4c5c7a9b62a270000");
    org.jsecurity.session.UnknownSessionException var20 = new org.jsecurity.session.UnknownSessionException("dd\uFFFD", (java.io.Serializable)100.0f);
    org.jsecurity.subject.SubjectException var21 = new org.jsecurity.subject.SubjectException("dd\uFFFD", (java.lang.Throwable)var20);
    org.jsecurity.io.SerializationException var22 = new org.jsecurity.io.SerializationException("", (java.lang.Throwable)var21);
    java.lang.Throwable[] var23 = var21.getSuppressed();
    java.util.Set var24 = org.jsecurity.util.CollectionUtils.asSet((java.lang.Object[])var23);
    var13.addRoles((java.util.Collection)var24);
    var10.setObjectPermissions(var24);
    var9.setSimpleRoles(var24);
    java.util.Set var28 = var9.getPermissions();
    org.jsecurity.authz.SimpleAuthorizationInfo var29 = new org.jsecurity.authz.SimpleAuthorizationInfo();
    var29.addRole("a2b823b1e72eae2b727289df8a00a89df8a0bab6ad8a89c4c5c7a9b62a270000");
    org.jsecurity.authz.SimpleAuthorizationInfo var32 = new org.jsecurity.authz.SimpleAuthorizationInfo();
    var32.addRole("a2b823b1e72eae2b727289df8a00a89df8a0bab6ad8a89c4c5c7a9b62a270000");
    org.jsecurity.session.UnknownSessionException var39 = new org.jsecurity.session.UnknownSessionException("dd\uFFFD", (java.io.Serializable)100.0f);
    org.jsecurity.subject.SubjectException var40 = new org.jsecurity.subject.SubjectException("dd\uFFFD", (java.lang.Throwable)var39);
    org.jsecurity.io.SerializationException var41 = new org.jsecurity.io.SerializationException("", (java.lang.Throwable)var40);
    java.lang.Throwable[] var42 = var40.getSuppressed();
    java.util.Set var43 = org.jsecurity.util.CollectionUtils.asSet((java.lang.Object[])var42);
    var32.addRoles((java.util.Collection)var43);
    var29.setObjectPermissions(var43);
    var9.checkRoles((java.util.Collection)var43);
    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      org.jsecurity.crypto.hash.Sha256Hash var48 = new org.jsecurity.crypto.hash.Sha256Hash((java.lang.Object)var5, (java.lang.Object)var9, 100);
      fail("Expected exception of type org.jsecurity.codec.CodecException");
    } catch (org.jsecurity.codec.CodecException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var3);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var4);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var6);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var7);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var8);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var23);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var24);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var28);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var42);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var43);

  }

  public void test220() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest0.test220");


    org.jsecurity.mgt.DefaultSecurityManager var0 = new org.jsecurity.mgt.DefaultSecurityManager();
    java.io.InputStream var2 = org.jsecurity.util.ClassUtils.getResourceAsStream("");
    java.lang.Object[] var3 = new java.lang.Object[] { var2};
    java.util.List var4 = org.jsecurity.util.CollectionUtils.asList(var3);
    org.jsecurity.authc.pam.ModularRealmAuthenticator var5 = new org.jsecurity.authc.pam.ModularRealmAuthenticator(var4);
    org.jsecurity.subject.SimplePrincipalCollection var7 = new org.jsecurity.subject.SimplePrincipalCollection((java.util.Collection)var4, "org.jsecurity.authz.UnauthorizedException: org.jsecurity.session.ExpiredSessionException: ");
    java.util.Set var8 = var7.getRealmNames();
    java.io.InputStream var10 = org.jsecurity.util.ClassUtils.getResourceAsStream("");
    java.lang.Object[] var11 = new java.lang.Object[] { var10};
    java.util.List var12 = org.jsecurity.util.CollectionUtils.asList(var11);
    org.jsecurity.authc.pam.ModularRealmAuthenticator var13 = new org.jsecurity.authc.pam.ModularRealmAuthenticator(var12);
    org.jsecurity.subject.SimplePrincipalCollection var15 = new org.jsecurity.subject.SimplePrincipalCollection((java.util.Collection)var12, "org.jsecurity.authz.UnauthorizedException: org.jsecurity.session.ExpiredSessionException: ");
    org.jsecurity.session.UnknownSessionException var20 = new org.jsecurity.session.UnknownSessionException("dd\uFFFD", (java.io.Serializable)100.0f);
    org.jsecurity.session.SessionException var22 = new org.jsecurity.session.SessionException("dd\uFFFD", (java.lang.Throwable)var20, (java.io.Serializable)0);
    org.jsecurity.session.SessionException var23 = new org.jsecurity.session.SessionException("dd\uFFFD", (java.lang.Throwable)var20);
    var15.add((java.lang.Object)var23, "org.jsecurity.config.ConfigurationException: dd\uFFFD");
    java.util.Set var26 = var15.asSet();
    var7.addAll((java.util.Collection)var26, "6464ff");
    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      boolean var30 = var0.hasRole((org.jsecurity.subject.PrincipalCollection)var7, "org.jsecurity.authc.CredentialsException: 783ccd31-48a8-42dd-890f-df885a7baaff");
      fail("Expected exception of type java.util.NoSuchElementException");
    } catch (java.util.NoSuchElementException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var2);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var3);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var4);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var8);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var10);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var11);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var12);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var26);

  }

  public void test221() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest0.test221");


    org.jsecurity.mgt.DefaultSecurityManager var0 = new org.jsecurity.mgt.DefaultSecurityManager();
    org.jsecurity.authc.pam.AllSuccessfulModularAuthenticationStrategy var1 = new org.jsecurity.authc.pam.AllSuccessfulModularAuthenticationStrategy();
    org.jsecurity.authc.pam.AllSuccessfulModularAuthenticationStrategy var2 = new org.jsecurity.authc.pam.AllSuccessfulModularAuthenticationStrategy();
    char[] var4 = new char[] { };
    org.jsecurity.authc.UsernamePasswordToken var6 = new org.jsecurity.authc.UsernamePasswordToken("hi!", var4, true);
    org.jsecurity.authc.SimpleAccount var7 = new org.jsecurity.authc.SimpleAccount();
    var7.setCredentialsExpired(false);
    boolean var10 = var7.isLocked();
    org.jsecurity.authc.AuthenticationInfo var11 = var2.afterAllAttempts((org.jsecurity.authc.AuthenticationToken)var6, (org.jsecurity.authc.AuthenticationInfo)var7);
    char[] var15 = new char[] { '4', '#'};
    org.jsecurity.authc.UsernamePasswordToken var16 = new org.jsecurity.authc.UsernamePasswordToken("\u0000\u0000", var15);
    org.jsecurity.authc.SimpleAccount var17 = new org.jsecurity.authc.SimpleAccount();
    var17.setCredentialsExpired(false);
    var17.setCredentialsExpired(false);
    boolean var22 = var17.isCredentialsExpired();
    org.jsecurity.authc.AuthenticationInfo var23 = var2.afterAllAttempts((org.jsecurity.authc.AuthenticationToken)var16, (org.jsecurity.authc.AuthenticationInfo)var17);
    org.jsecurity.authz.UnauthenticatedException var27 = new org.jsecurity.authz.UnauthenticatedException();
    org.jsecurity.config.UnresolveableReferenceException var28 = new org.jsecurity.config.UnresolveableReferenceException("", (java.lang.Throwable)var27);
    org.jsecurity.cache.CacheException var29 = new org.jsecurity.cache.CacheException("org.jsecurity.config.ConfigurationException: dd\uFFFD", (java.lang.Throwable)var27);
    org.jsecurity.authc.SimpleAuthenticationInfo var31 = new org.jsecurity.authc.SimpleAuthenticationInfo((java.lang.Object)"org.jsecurity.config.ConfigurationException: dd\uFFFD", (java.lang.Object)var29, "a2b823b1e72eae2b727289df8a00a89df8a0bab6ad8a89c4c5c7a9b62a270000");
    org.jsecurity.subject.PrincipalCollection var32 = var31.getPrincipals();
    org.jsecurity.authc.AuthenticationInfo var33 = var1.afterAllAttempts((org.jsecurity.authc.AuthenticationToken)var16, (org.jsecurity.authc.AuthenticationInfo)var31);
    var0.setModularAuthenticationStrategy((org.jsecurity.authc.pam.ModularAuthenticationStrategy)var1);
    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      var0.setRememberMeCipherKeyBase64("6464ff");
      fail("Expected exception of type java.lang.IllegalStateException");
    } catch (java.lang.IllegalStateException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var4);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var10 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var11);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var15);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var22 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var23);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var32);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var33);

  }

  public void test222() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest0.test222");


    org.jsecurity.realm.activedirectory.ActiveDirectoryRealm var0 = new org.jsecurity.realm.activedirectory.ActiveDirectoryRealm();
    var0.init();
    var0.setSystemPassword("dd\uFFFD");
    org.jsecurity.cache.Cache var4 = var0.getAuthorizationCache();
    var0.setSearchBase("a2b823b1e72eae2b727289df8a00a89df8a0bab6ad8a89c4c5c7a9b62a270000");
    org.jsecurity.realm.text.TextConfigurationRealm var7 = new org.jsecurity.realm.text.TextConfigurationRealm();
    java.io.InputStream var9 = org.jsecurity.util.ClassUtils.getResourceAsStream("");
    java.lang.Object[] var10 = new java.lang.Object[] { var9};
    java.util.List var11 = org.jsecurity.util.CollectionUtils.asList(var10);
    org.jsecurity.authc.pam.ModularRealmAuthenticator var12 = new org.jsecurity.authc.pam.ModularRealmAuthenticator(var11);
    org.jsecurity.subject.SimplePrincipalCollection var14 = new org.jsecurity.subject.SimplePrincipalCollection((java.util.Collection)var11, "org.jsecurity.authz.UnauthorizedException: org.jsecurity.session.ExpiredSessionException: ");
    org.jsecurity.session.UnknownSessionException var19 = new org.jsecurity.session.UnknownSessionException("dd\uFFFD", (java.io.Serializable)100.0f);
    org.jsecurity.session.SessionException var21 = new org.jsecurity.session.SessionException("dd\uFFFD", (java.lang.Throwable)var19, (java.io.Serializable)0);
    org.jsecurity.session.SessionException var22 = new org.jsecurity.session.SessionException("dd\uFFFD", (java.lang.Throwable)var19);
    var14.add((java.lang.Object)var22, "org.jsecurity.config.ConfigurationException: dd\uFFFD");
    var7.onLogout((org.jsecurity.subject.PrincipalCollection)var14);
    org.jsecurity.authc.ExpiredCredentialsException var27 = new org.jsecurity.authc.ExpiredCredentialsException();
    org.jsecurity.session.ExpiredSessionException var28 = new org.jsecurity.session.ExpiredSessionException("", (java.lang.Throwable)var27);
    java.lang.Throwable[] var29 = var28.getSuppressed();
    java.util.List var30 = org.jsecurity.util.CollectionUtils.asList((java.lang.Object[])var29);
    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      boolean var31 = var0.hasAllRoles((org.jsecurity.subject.PrincipalCollection)var14, (java.util.Collection)var30);
      fail("Expected exception of type java.util.NoSuchElementException");
    } catch (java.util.NoSuchElementException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var4);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var9);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var10);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var11);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var29);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var30);

  }

  public void test223() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest0.test223");


    byte[] var3 = new byte[] { (byte)100, (byte)100, (byte)(-1)};
    java.lang.String var4 = org.jsecurity.codec.CodecSupport.toString(var3);
    char[] var5 = org.jsecurity.codec.CodecSupport.toChars(var3);
    boolean var6 = org.jsecurity.codec.Base64.isBase64(var3);
    boolean var7 = org.jsecurity.codec.Base64.isBase64(var3);
    boolean var8 = org.jsecurity.codec.Base64.isBase64(var3);
    org.jsecurity.authz.SimpleRole var9 = new org.jsecurity.authz.SimpleRole();
    org.jsecurity.authz.permission.WildcardPermission var12 = new org.jsecurity.authz.permission.WildcardPermission("hi!", false);
    boolean var13 = var9.isPermitted((org.jsecurity.authz.Permission)var12);
    java.lang.String var14 = var9.toString();
    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      org.jsecurity.crypto.hash.Md5Hash var16 = new org.jsecurity.crypto.hash.Md5Hash((java.lang.Object)var3, (java.lang.Object)var9, (-1));
      fail("Expected exception of type org.jsecurity.codec.CodecException");
    } catch (org.jsecurity.codec.CodecException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var3);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var4 + "' != '" + "dd\uFFFD"+ "'", var4.equals("dd\uFFFD"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var5);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var6 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var7 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var8 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var13 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var14);

  }

  public void test224() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest0.test224");


    org.jsecurity.realm.activedirectory.ActiveDirectoryRealm var0 = new org.jsecurity.realm.activedirectory.ActiveDirectoryRealm();
    org.jsecurity.authc.credential.Sha256CredentialsMatcher var1 = new org.jsecurity.authc.credential.Sha256CredentialsMatcher();
    var0.setCredentialsMatcher((org.jsecurity.authc.credential.CredentialsMatcher)var1);
    java.lang.String var3 = var0.getAuthorizationCacheName();
    var0.setUrl("hi!");
    org.jsecurity.realm.ldap.DefaultLdapContextFactory var6 = new org.jsecurity.realm.ldap.DefaultLdapContextFactory();
    var0.setLdapContextFactory((org.jsecurity.realm.ldap.LdapContextFactory)var6);
    org.jsecurity.authz.permission.InvalidPermissionStringException var10 = new org.jsecurity.authz.permission.InvalidPermissionStringException("", "dd\uFFFD");
    org.jsecurity.JSecurityException var12 = new org.jsecurity.JSecurityException("");
    org.jsecurity.authc.SimpleAuthenticationInfo var14 = new org.jsecurity.authc.SimpleAuthenticationInfo((java.lang.Object)var10, (java.lang.Object)"", "org.jsecurity.authz.UnauthorizedException: org.jsecurity.session.ExpiredSessionException: ");
    org.jsecurity.subject.PrincipalCollection var15 = var14.getPrincipals();
    java.lang.String[] var18 = org.jsecurity.util.StringUtils.tokenizeToStringArray("hi!", "");
    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      boolean[] var19 = var0.isPermitted(var15, var18);
      fail("Expected exception of type java.util.NoSuchElementException");
    } catch (java.util.NoSuchElementException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var3);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var15);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var18);

  }

  public void test225() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest0.test225");


    org.jsecurity.authz.UnauthorizedException var1 = new org.jsecurity.authz.UnauthorizedException("org.jsecurity.authz.UnauthorizedException: org.jsecurity.session.ExpiredSessionException: ");

  }

  public void test226() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest0.test226");


    org.jsecurity.authc.credential.Sha1CredentialsMatcher var0 = new org.jsecurity.authc.credential.Sha1CredentialsMatcher();
    boolean var1 = var0.isStoredCredentialsHexEncoded();
    org.jsecurity.authc.UsernamePasswordToken var2 = new org.jsecurity.authc.UsernamePasswordToken();
    org.jsecurity.authz.UnauthenticatedException var6 = new org.jsecurity.authz.UnauthenticatedException();
    org.jsecurity.config.UnresolveableReferenceException var7 = new org.jsecurity.config.UnresolveableReferenceException("", (java.lang.Throwable)var6);
    org.jsecurity.cache.CacheException var8 = new org.jsecurity.cache.CacheException("org.jsecurity.config.ConfigurationException: dd\uFFFD", (java.lang.Throwable)var6);
    org.jsecurity.authc.SimpleAuthenticationInfo var10 = new org.jsecurity.authc.SimpleAuthenticationInfo((java.lang.Object)"org.jsecurity.config.ConfigurationException: dd\uFFFD", (java.lang.Object)var8, "a2b823b1e72eae2b727289df8a00a89df8a0bab6ad8a89c4c5c7a9b62a270000");
    org.jsecurity.realm.text.TextConfigurationRealm var11 = new org.jsecurity.realm.text.TextConfigurationRealm();
    java.io.InputStream var13 = org.jsecurity.util.ClassUtils.getResourceAsStream("");
    java.lang.Object[] var14 = new java.lang.Object[] { var13};
    java.util.List var15 = org.jsecurity.util.CollectionUtils.asList(var14);
    org.jsecurity.authc.pam.ModularRealmAuthenticator var16 = new org.jsecurity.authc.pam.ModularRealmAuthenticator(var15);
    org.jsecurity.subject.SimplePrincipalCollection var18 = new org.jsecurity.subject.SimplePrincipalCollection((java.util.Collection)var15, "org.jsecurity.authz.UnauthorizedException: org.jsecurity.session.ExpiredSessionException: ");
    org.jsecurity.session.UnknownSessionException var23 = new org.jsecurity.session.UnknownSessionException("dd\uFFFD", (java.io.Serializable)100.0f);
    org.jsecurity.session.SessionException var25 = new org.jsecurity.session.SessionException("dd\uFFFD", (java.lang.Throwable)var23, (java.io.Serializable)0);
    org.jsecurity.session.SessionException var26 = new org.jsecurity.session.SessionException("dd\uFFFD", (java.lang.Throwable)var23);
    var18.add((java.lang.Object)var26, "org.jsecurity.config.ConfigurationException: dd\uFFFD");
    var11.onLogout((org.jsecurity.subject.PrincipalCollection)var18);
    org.jsecurity.authc.ExpiredCredentialsException var31 = new org.jsecurity.authc.ExpiredCredentialsException();
    org.jsecurity.session.ExpiredSessionException var32 = new org.jsecurity.session.ExpiredSessionException("", (java.lang.Throwable)var31);
    java.lang.Throwable[] var33 = var32.getSuppressed();
    org.jsecurity.io.ResourceException var34 = new org.jsecurity.io.ResourceException((java.lang.Throwable)var32);
    org.jsecurity.authc.SimpleAuthenticationInfo var35 = new org.jsecurity.authc.SimpleAuthenticationInfo((org.jsecurity.subject.PrincipalCollection)var18, (java.lang.Object)var32);
    var10.merge((org.jsecurity.authc.AuthenticationInfo)var35);
    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      boolean var37 = var0.doCredentialsMatch((org.jsecurity.authc.AuthenticationToken)var2, (org.jsecurity.authc.AuthenticationInfo)var10);
      fail("Expected exception of type java.lang.IllegalArgumentException");
    } catch (java.lang.IllegalArgumentException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var1 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var13);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var14);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var15);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var33);

  }

  public void test227() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest0.test227");


    org.jsecurity.mgt.DefaultSecurityManager var0 = new org.jsecurity.mgt.DefaultSecurityManager();
    java.io.InputStream var2 = org.jsecurity.util.ClassUtils.getResourceAsStream("");
    java.lang.Object[] var3 = new java.lang.Object[] { var2};
    java.util.List var4 = org.jsecurity.util.CollectionUtils.asList(var3);
    org.jsecurity.authc.pam.ModularRealmAuthenticator var5 = new org.jsecurity.authc.pam.ModularRealmAuthenticator(var4);
    org.jsecurity.authc.pam.AllSuccessfulModularAuthenticationStrategy var6 = new org.jsecurity.authc.pam.AllSuccessfulModularAuthenticationStrategy();
    var5.setModularAuthenticationStrategy((org.jsecurity.authc.pam.ModularAuthenticationStrategy)var6);
    org.jsecurity.authz.SimpleAuthorizationInfo var8 = new org.jsecurity.authz.SimpleAuthorizationInfo();
    var8.addStringPermission("hi!");
    java.io.InputStream var12 = org.jsecurity.util.ClassUtils.getResourceAsStream("");
    java.lang.Object[] var13 = new java.lang.Object[] { var12};
    java.util.List var14 = org.jsecurity.util.CollectionUtils.asList(var13);
    var8.addRoles((java.util.Collection)var14);
    var5.setAuthenticationListeners((java.util.Collection)var14);
    var0.setSessionListeners((java.util.Collection)var14);
    org.jsecurity.authc.pam.ModularRealmAuthenticator var18 = new org.jsecurity.authc.pam.ModularRealmAuthenticator();
    org.jsecurity.authz.permission.InvalidPermissionStringException var21 = new org.jsecurity.authz.permission.InvalidPermissionStringException("", "dd\uFFFD");
    org.jsecurity.JSecurityException var23 = new org.jsecurity.JSecurityException("");
    org.jsecurity.authc.SimpleAuthenticationInfo var25 = new org.jsecurity.authc.SimpleAuthenticationInfo((java.lang.Object)var21, (java.lang.Object)"", "org.jsecurity.authz.UnauthorizedException: org.jsecurity.session.ExpiredSessionException: ");
    org.jsecurity.subject.PrincipalCollection var26 = var25.getPrincipals();
    var18.onLogout(var26);
    var0.setAuthenticator((org.jsecurity.authc.Authenticator)var18);
    org.jsecurity.realm.text.TextConfigurationRealm var29 = new org.jsecurity.realm.text.TextConfigurationRealm();
    java.io.InputStream var31 = org.jsecurity.util.ClassUtils.getResourceAsStream("");
    java.lang.Object[] var32 = new java.lang.Object[] { var31};
    java.util.List var33 = org.jsecurity.util.CollectionUtils.asList(var32);
    org.jsecurity.authc.pam.ModularRealmAuthenticator var34 = new org.jsecurity.authc.pam.ModularRealmAuthenticator(var33);
    org.jsecurity.subject.SimplePrincipalCollection var36 = new org.jsecurity.subject.SimplePrincipalCollection((java.util.Collection)var33, "org.jsecurity.authz.UnauthorizedException: org.jsecurity.session.ExpiredSessionException: ");
    org.jsecurity.session.UnknownSessionException var41 = new org.jsecurity.session.UnknownSessionException("dd\uFFFD", (java.io.Serializable)100.0f);
    org.jsecurity.session.SessionException var43 = new org.jsecurity.session.SessionException("dd\uFFFD", (java.lang.Throwable)var41, (java.io.Serializable)0);
    org.jsecurity.session.SessionException var44 = new org.jsecurity.session.SessionException("dd\uFFFD", (java.lang.Throwable)var41);
    var36.add((java.lang.Object)var44, "org.jsecurity.config.ConfigurationException: dd\uFFFD");
    var29.onLogout((org.jsecurity.subject.PrincipalCollection)var36);
    org.jsecurity.cache.HashtableCacheManager var48 = new org.jsecurity.cache.HashtableCacheManager();
    org.jsecurity.cache.Cache var50 = var48.getCache("\u0000\u0000");
    var29.setAuthorizationCache(var50);
    org.jsecurity.codec.CodecException var54 = new org.jsecurity.codec.CodecException("dd\uFFFD");
    org.jsecurity.authc.ConcurrentAccessException var55 = new org.jsecurity.authc.ConcurrentAccessException("org.jsecurity.authz.UnauthorizedException: org.jsecurity.session.ExpiredSessionException: ", (java.lang.Throwable)var54);
    org.jsecurity.subject.SimplePrincipalCollection var57 = new org.jsecurity.subject.SimplePrincipalCollection((java.lang.Object)var54, "");
    var29.onLogout((org.jsecurity.subject.PrincipalCollection)var57);
    boolean var59 = var57.isEmpty();
    java.lang.String[] var61 = new java.lang.String[] { "org.jsecurity.authc.CredentialsException: 783ccd31-48a8-42dd-890f-df885a7baaff"};
    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      boolean[] var62 = var0.isPermitted((org.jsecurity.subject.PrincipalCollection)var57, var61);
      fail("Expected exception of type java.util.NoSuchElementException");
    } catch (java.util.NoSuchElementException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var2);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var3);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var4);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var12);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var13);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var14);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var26);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var31);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var32);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var33);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var50);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var59 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var61);

  }

  public void test228() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest0.test228");


    org.jsecurity.mgt.DefaultSecurityManager var0 = new org.jsecurity.mgt.DefaultSecurityManager();
    java.io.InputStream var2 = org.jsecurity.util.ClassUtils.getResourceAsStream("");
    java.lang.Object[] var3 = new java.lang.Object[] { var2};
    java.util.List var4 = org.jsecurity.util.CollectionUtils.asList(var3);
    org.jsecurity.authc.pam.ModularRealmAuthenticator var5 = new org.jsecurity.authc.pam.ModularRealmAuthenticator(var4);
    org.jsecurity.authc.pam.AllSuccessfulModularAuthenticationStrategy var6 = new org.jsecurity.authc.pam.AllSuccessfulModularAuthenticationStrategy();
    var5.setModularAuthenticationStrategy((org.jsecurity.authc.pam.ModularAuthenticationStrategy)var6);
    org.jsecurity.authz.SimpleAuthorizationInfo var8 = new org.jsecurity.authz.SimpleAuthorizationInfo();
    var8.addStringPermission("hi!");
    java.io.InputStream var12 = org.jsecurity.util.ClassUtils.getResourceAsStream("");
    java.lang.Object[] var13 = new java.lang.Object[] { var12};
    java.util.List var14 = org.jsecurity.util.CollectionUtils.asList(var13);
    var8.addRoles((java.util.Collection)var14);
    var5.setAuthenticationListeners((java.util.Collection)var14);
    var0.setSessionListeners((java.util.Collection)var14);
    org.jsecurity.realm.text.TextConfigurationRealm var18 = new org.jsecurity.realm.text.TextConfigurationRealm();
    java.io.InputStream var20 = org.jsecurity.util.ClassUtils.getResourceAsStream("");
    java.lang.Object[] var21 = new java.lang.Object[] { var20};
    java.util.List var22 = org.jsecurity.util.CollectionUtils.asList(var21);
    org.jsecurity.authc.pam.ModularRealmAuthenticator var23 = new org.jsecurity.authc.pam.ModularRealmAuthenticator(var22);
    org.jsecurity.subject.SimplePrincipalCollection var25 = new org.jsecurity.subject.SimplePrincipalCollection((java.util.Collection)var22, "org.jsecurity.authz.UnauthorizedException: org.jsecurity.session.ExpiredSessionException: ");
    org.jsecurity.session.UnknownSessionException var30 = new org.jsecurity.session.UnknownSessionException("dd\uFFFD", (java.io.Serializable)100.0f);
    org.jsecurity.session.SessionException var32 = new org.jsecurity.session.SessionException("dd\uFFFD", (java.lang.Throwable)var30, (java.io.Serializable)0);
    org.jsecurity.session.SessionException var33 = new org.jsecurity.session.SessionException("dd\uFFFD", (java.lang.Throwable)var30);
    var25.add((java.lang.Object)var33, "org.jsecurity.config.ConfigurationException: dd\uFFFD");
    var18.onLogout((org.jsecurity.subject.PrincipalCollection)var25);
    org.jsecurity.authc.pam.FirstSuccessfulAuthenticationStrategy var37 = new org.jsecurity.authc.pam.FirstSuccessfulAuthenticationStrategy();
    org.jsecurity.authz.UnauthorizedException var39 = new org.jsecurity.authz.UnauthorizedException("org.jsecurity.config.ConfigurationException: dd\uFFFD");
    java.lang.Throwable[] var40 = var39.getSuppressed();
    java.util.List var41 = org.jsecurity.util.CollectionUtils.asList((java.lang.Object[])var40);
    org.jsecurity.authc.UsernamePasswordToken var42 = new org.jsecurity.authc.UsernamePasswordToken();
    java.lang.String var43 = var42.getUsername();
    java.net.InetAddress var44 = var42.getInetAddress();
    org.jsecurity.authc.AuthenticationInfo var45 = var37.beforeAllAttempts((java.util.Collection)var41, (org.jsecurity.authc.AuthenticationToken)var42);
    boolean[] var46 = var0.hasRoles((org.jsecurity.subject.PrincipalCollection)var25, var41);
    org.jsecurity.codec.CodecException var49 = new org.jsecurity.codec.CodecException("dd\uFFFD");
    org.jsecurity.authc.ConcurrentAccessException var50 = new org.jsecurity.authc.ConcurrentAccessException("org.jsecurity.authz.UnauthorizedException: org.jsecurity.session.ExpiredSessionException: ", (java.lang.Throwable)var49);
    org.jsecurity.subject.SimplePrincipalCollection var52 = new org.jsecurity.subject.SimplePrincipalCollection((java.lang.Object)var49, "");
    org.jsecurity.authc.pam.FirstSuccessfulAuthenticationStrategy var53 = new org.jsecurity.authc.pam.FirstSuccessfulAuthenticationStrategy();
    org.jsecurity.authz.UnauthorizedException var55 = new org.jsecurity.authz.UnauthorizedException("org.jsecurity.config.ConfigurationException: dd\uFFFD");
    java.lang.Throwable[] var56 = var55.getSuppressed();
    java.util.List var57 = org.jsecurity.util.CollectionUtils.asList((java.lang.Object[])var56);
    org.jsecurity.authc.UsernamePasswordToken var58 = new org.jsecurity.authc.UsernamePasswordToken();
    java.lang.String var59 = var58.getUsername();
    java.net.InetAddress var60 = var58.getInetAddress();
    org.jsecurity.authc.AuthenticationInfo var61 = var53.beforeAllAttempts((java.util.Collection)var57, (org.jsecurity.authc.AuthenticationToken)var58);
    org.jsecurity.session.UnknownSessionException var66 = new org.jsecurity.session.UnknownSessionException("dd\uFFFD", (java.io.Serializable)100.0f);
    org.jsecurity.subject.SubjectException var67 = new org.jsecurity.subject.SubjectException("dd\uFFFD", (java.lang.Throwable)var66);
    org.jsecurity.io.SerializationException var68 = new org.jsecurity.io.SerializationException("", (java.lang.Throwable)var67);
    java.lang.Throwable[] var69 = var67.getSuppressed();
    java.util.Set var70 = org.jsecurity.util.CollectionUtils.asSet((java.lang.Object[])var69);
    org.jsecurity.authc.SimpleAccount var71 = new org.jsecurity.authc.SimpleAccount((org.jsecurity.subject.PrincipalCollection)var52, (java.lang.Object)var57, var70);
    java.io.InputStream var73 = org.jsecurity.util.ClassUtils.getResourceAsStream("");
    java.lang.Object[] var74 = new java.lang.Object[] { var73};
    java.util.List var75 = org.jsecurity.util.CollectionUtils.asList(var74);
    org.jsecurity.authc.pam.ModularRealmAuthenticator var76 = new org.jsecurity.authc.pam.ModularRealmAuthenticator(var75);
    org.jsecurity.subject.SimplePrincipalCollection var78 = new org.jsecurity.subject.SimplePrincipalCollection((java.util.Collection)var75, "org.jsecurity.authz.UnauthorizedException: org.jsecurity.session.ExpiredSessionException: ");
    org.jsecurity.io.ResourceException var82 = new org.jsecurity.io.ResourceException("hi!");
    org.jsecurity.authc.UnknownAccountException var83 = new org.jsecurity.authc.UnknownAccountException((java.lang.Throwable)var82);
    org.jsecurity.session.StoppedSessionException var84 = new org.jsecurity.session.StoppedSessionException("dd\uFFFD", (java.io.Serializable)var82);
    org.jsecurity.session.UnknownSessionException var85 = new org.jsecurity.session.UnknownSessionException("org.jsecurity.authz.UnauthorizedException: org.jsecurity.session.ExpiredSessionException: ", (java.lang.Throwable)var82);
    boolean var86 = var78.equals((java.lang.Object)var82);
    var52.addAll((org.jsecurity.subject.PrincipalCollection)var78);
    java.util.List var88 = var78.asList();
    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      boolean var90 = var0.isPermitted((org.jsecurity.subject.PrincipalCollection)var78, "5dd0c65d-1422-49c2-becb-9e8dca619ab3");
      fail("Expected exception of type java.util.NoSuchElementException");
    } catch (java.util.NoSuchElementException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var2);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var3);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var4);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var12);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var13);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var14);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var20);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var21);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var22);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var40);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var41);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var43);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var44);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var45);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var46);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var56);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var57);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var59);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var60);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var61);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var69);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var70);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var73);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var74);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var75);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var86 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var88);

  }

  public void test229() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest0.test229");


    org.jsecurity.authc.IncorrectCredentialsException var2 = new org.jsecurity.authc.IncorrectCredentialsException("\u0000\u0000");
    org.jsecurity.codec.CodecException var5 = new org.jsecurity.codec.CodecException("dd\uFFFD");
    org.jsecurity.authc.ConcurrentAccessException var6 = new org.jsecurity.authc.ConcurrentAccessException("org.jsecurity.authz.UnauthorizedException: org.jsecurity.session.ExpiredSessionException: ", (java.lang.Throwable)var5);
    org.jsecurity.subject.SimplePrincipalCollection var8 = new org.jsecurity.subject.SimplePrincipalCollection((java.lang.Object)var5, "");
    java.io.InputStream var10 = org.jsecurity.util.ClassUtils.getResourceAsStream("");
    java.lang.Object[] var11 = new java.lang.Object[] { var10};
    java.util.List var12 = org.jsecurity.util.CollectionUtils.asList(var11);
    org.jsecurity.authc.pam.ModularRealmAuthenticator var13 = new org.jsecurity.authc.pam.ModularRealmAuthenticator(var12);
    org.jsecurity.authc.pam.AllSuccessfulModularAuthenticationStrategy var14 = new org.jsecurity.authc.pam.AllSuccessfulModularAuthenticationStrategy();
    var13.setModularAuthenticationStrategy((org.jsecurity.authc.pam.ModularAuthenticationStrategy)var14);
    org.jsecurity.authz.SimpleAuthorizationInfo var16 = new org.jsecurity.authz.SimpleAuthorizationInfo();
    var16.addStringPermission("hi!");
    java.io.InputStream var20 = org.jsecurity.util.ClassUtils.getResourceAsStream("");
    java.lang.Object[] var21 = new java.lang.Object[] { var20};
    java.util.List var22 = org.jsecurity.util.CollectionUtils.asList(var21);
    var16.addRoles((java.util.Collection)var22);
    var13.setAuthenticationListeners((java.util.Collection)var22);
    org.jsecurity.realm.activedirectory.ActiveDirectoryRealm var25 = new org.jsecurity.realm.activedirectory.ActiveDirectoryRealm();
    var25.setPrincipalSuffix("");
    var13.setRealm((org.jsecurity.realm.Realm)var25);
    org.jsecurity.authc.pam.FirstSuccessfulAuthenticationStrategy var29 = new org.jsecurity.authc.pam.FirstSuccessfulAuthenticationStrategy();
    org.jsecurity.authz.UnauthorizedException var31 = new org.jsecurity.authz.UnauthorizedException("org.jsecurity.config.ConfigurationException: dd\uFFFD");
    java.lang.Throwable[] var32 = var31.getSuppressed();
    java.util.List var33 = org.jsecurity.util.CollectionUtils.asList((java.lang.Object[])var32);
    org.jsecurity.authc.UsernamePasswordToken var34 = new org.jsecurity.authc.UsernamePasswordToken();
    java.lang.String var35 = var34.getUsername();
    java.net.InetAddress var36 = var34.getInetAddress();
    org.jsecurity.authc.AuthenticationInfo var37 = var29.beforeAllAttempts((java.util.Collection)var33, (org.jsecurity.authc.AuthenticationToken)var34);
    var13.setModularAuthenticationStrategy((org.jsecurity.authc.pam.ModularAuthenticationStrategy)var29);
    org.jsecurity.authc.SimpleAccount var39 = new org.jsecurity.authc.SimpleAccount((org.jsecurity.subject.PrincipalCollection)var8, (java.lang.Object)var13);
    org.jsecurity.session.StoppedSessionException var40 = new org.jsecurity.session.StoppedSessionException("org.jsecurity.authz.UnauthorizedException: org.jsecurity.session.ExpiredSessionException: ", (java.lang.Throwable)var2, (java.io.Serializable)var39);
    org.jsecurity.subject.SubjectException var41 = new org.jsecurity.subject.SubjectException((java.lang.Throwable)var2);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var10);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var11);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var12);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var20);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var21);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var22);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var32);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var33);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var35);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var36);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var37);

  }

  public void test230() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest0.test230");


    org.jsecurity.mgt.DefaultSecurityManager var0 = new org.jsecurity.mgt.DefaultSecurityManager();
    java.io.InputStream var2 = org.jsecurity.util.ClassUtils.getResourceAsStream("");
    java.lang.Object[] var3 = new java.lang.Object[] { var2};
    java.util.List var4 = org.jsecurity.util.CollectionUtils.asList(var3);
    org.jsecurity.authc.pam.ModularRealmAuthenticator var5 = new org.jsecurity.authc.pam.ModularRealmAuthenticator(var4);
    org.jsecurity.authc.pam.AllSuccessfulModularAuthenticationStrategy var6 = new org.jsecurity.authc.pam.AllSuccessfulModularAuthenticationStrategy();
    var5.setModularAuthenticationStrategy((org.jsecurity.authc.pam.ModularAuthenticationStrategy)var6);
    org.jsecurity.authz.SimpleAuthorizationInfo var8 = new org.jsecurity.authz.SimpleAuthorizationInfo();
    var8.addStringPermission("hi!");
    java.io.InputStream var12 = org.jsecurity.util.ClassUtils.getResourceAsStream("");
    java.lang.Object[] var13 = new java.lang.Object[] { var12};
    java.util.List var14 = org.jsecurity.util.CollectionUtils.asList(var13);
    var8.addRoles((java.util.Collection)var14);
    var5.setAuthenticationListeners((java.util.Collection)var14);
    var0.setSessionListeners((java.util.Collection)var14);
    org.jsecurity.realm.text.TextConfigurationRealm var18 = new org.jsecurity.realm.text.TextConfigurationRealm();
    java.io.InputStream var20 = org.jsecurity.util.ClassUtils.getResourceAsStream("");
    java.lang.Object[] var21 = new java.lang.Object[] { var20};
    java.util.List var22 = org.jsecurity.util.CollectionUtils.asList(var21);
    org.jsecurity.authc.pam.ModularRealmAuthenticator var23 = new org.jsecurity.authc.pam.ModularRealmAuthenticator(var22);
    org.jsecurity.subject.SimplePrincipalCollection var25 = new org.jsecurity.subject.SimplePrincipalCollection((java.util.Collection)var22, "org.jsecurity.authz.UnauthorizedException: org.jsecurity.session.ExpiredSessionException: ");
    org.jsecurity.session.UnknownSessionException var30 = new org.jsecurity.session.UnknownSessionException("dd\uFFFD", (java.io.Serializable)100.0f);
    org.jsecurity.session.SessionException var32 = new org.jsecurity.session.SessionException("dd\uFFFD", (java.lang.Throwable)var30, (java.io.Serializable)0);
    org.jsecurity.session.SessionException var33 = new org.jsecurity.session.SessionException("dd\uFFFD", (java.lang.Throwable)var30);
    var25.add((java.lang.Object)var33, "org.jsecurity.config.ConfigurationException: dd\uFFFD");
    var18.onLogout((org.jsecurity.subject.PrincipalCollection)var25);
    org.jsecurity.authc.pam.FirstSuccessfulAuthenticationStrategy var37 = new org.jsecurity.authc.pam.FirstSuccessfulAuthenticationStrategy();
    org.jsecurity.authz.UnauthorizedException var39 = new org.jsecurity.authz.UnauthorizedException("org.jsecurity.config.ConfigurationException: dd\uFFFD");
    java.lang.Throwable[] var40 = var39.getSuppressed();
    java.util.List var41 = org.jsecurity.util.CollectionUtils.asList((java.lang.Object[])var40);
    org.jsecurity.authc.UsernamePasswordToken var42 = new org.jsecurity.authc.UsernamePasswordToken();
    java.lang.String var43 = var42.getUsername();
    java.net.InetAddress var44 = var42.getInetAddress();
    org.jsecurity.authc.AuthenticationInfo var45 = var37.beforeAllAttempts((java.util.Collection)var41, (org.jsecurity.authc.AuthenticationToken)var42);
    boolean[] var46 = var0.hasRoles((org.jsecurity.subject.PrincipalCollection)var25, var41);
    java.io.InputStream var48 = org.jsecurity.util.ClassUtils.getResourceAsStream("");
    java.lang.Object[] var49 = new java.lang.Object[] { var48};
    java.util.List var50 = org.jsecurity.util.CollectionUtils.asList(var49);
    org.jsecurity.authc.pam.ModularRealmAuthenticator var51 = new org.jsecurity.authc.pam.ModularRealmAuthenticator(var50);
    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      var0.setRealms((java.util.Collection)var50);
      fail("Expected exception of type java.lang.ClassCastException");
    } catch (java.lang.ClassCastException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var2);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var3);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var4);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var12);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var13);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var14);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var20);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var21);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var22);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var40);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var41);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var43);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var44);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var45);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var46);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var48);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var49);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var50);

  }

  public void test231() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest0.test231");


    boolean var1 = org.jsecurity.util.StringUtils.hasLength("\u0000\u0000");
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var1 == true);

  }

  public void test232() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest0.test232");


    org.jsecurity.codec.CodecException var1 = new org.jsecurity.codec.CodecException("");

  }

  public void test233() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest0.test233");


    boolean var1 = org.jsecurity.util.StringUtils.hasLength("ZGT/");
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var1 == true);

  }

  public void test234() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest0.test234");


    org.jsecurity.authz.SimpleAuthorizingAccount var0 = new org.jsecurity.authz.SimpleAuthorizingAccount();
    org.jsecurity.authz.SimpleAuthorizationInfo var1 = new org.jsecurity.authz.SimpleAuthorizationInfo();
    var1.addRole("a2b823b1e72eae2b727289df8a00a89df8a0bab6ad8a89c4c5c7a9b62a270000");
    org.jsecurity.authz.SimpleAuthorizationInfo var4 = new org.jsecurity.authz.SimpleAuthorizationInfo();
    var4.addRole("a2b823b1e72eae2b727289df8a00a89df8a0bab6ad8a89c4c5c7a9b62a270000");
    org.jsecurity.session.UnknownSessionException var11 = new org.jsecurity.session.UnknownSessionException("dd\uFFFD", (java.io.Serializable)100.0f);
    org.jsecurity.subject.SubjectException var12 = new org.jsecurity.subject.SubjectException("dd\uFFFD", (java.lang.Throwable)var11);
    org.jsecurity.io.SerializationException var13 = new org.jsecurity.io.SerializationException("", (java.lang.Throwable)var12);
    java.lang.Throwable[] var14 = var12.getSuppressed();
    java.util.Set var15 = org.jsecurity.util.CollectionUtils.asSet((java.lang.Object[])var14);
    var4.addRoles((java.util.Collection)var15);
    var1.setObjectPermissions(var15);
    var0.setSimpleRoles(var15);
    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      var0.addRole("org.jsecurity.authz.UnauthorizedException: org.jsecurity.session.ExpiredSessionException: ");
      fail("Expected exception of type java.lang.UnsupportedOperationException");
    } catch (java.lang.UnsupportedOperationException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var14);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var15);

  }

  public void test235() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest0.test235");


    org.jsecurity.jndi.JndiTemplate var0 = new org.jsecurity.jndi.JndiTemplate();
    java.util.Properties var1 = var0.getEnvironment();
    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      var0.unbind("org.jsecurity.authc.CredentialsException: 783ccd31-48a8-42dd-890f-df885a7baaff");
      fail("Expected exception of type javax.naming.NoInitialContextException");
    } catch (javax.naming.NoInitialContextException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var1);

  }

  public void test236() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest0.test236");


    org.jsecurity.authz.SimpleAuthorizingAccount var0 = new org.jsecurity.authz.SimpleAuthorizingAccount();
    org.jsecurity.authz.SimpleRole var2 = new org.jsecurity.authz.SimpleRole();
    org.jsecurity.authz.permission.WildcardPermission var5 = new org.jsecurity.authz.permission.WildcardPermission("hi!", false);
    boolean var6 = var2.isPermitted((org.jsecurity.authz.Permission)var5);
    org.jsecurity.session.InvalidSessionException var7 = new org.jsecurity.session.InvalidSessionException("org.jsecurity.config.ConfigurationException: dd\uFFFD", (java.io.Serializable)var5);
    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      var0.checkPermission((org.jsecurity.authz.Permission)var5);
      fail("Expected exception of type org.jsecurity.authz.UnauthorizedException");
    } catch (org.jsecurity.authz.UnauthorizedException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var6 == false);

  }

  public void test237() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest0.test237");


    org.jsecurity.mgt.DefaultSecurityManager var0 = new org.jsecurity.mgt.DefaultSecurityManager();
    org.jsecurity.authz.permission.WildcardPermissionResolver var1 = new org.jsecurity.authz.permission.WildcardPermissionResolver();
    var0.setPermissionResolver((org.jsecurity.authz.permission.PermissionResolver)var1);
    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      var0.setRememberMeCipherKeyBase64("");
      fail("Expected exception of type java.lang.IllegalStateException");
    } catch (java.lang.IllegalStateException e) {
      // Expected exception.
    }

  }

  public void test238() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest0.test238");


    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      org.jsecurity.crypto.hash.Sha1Hash var1 = org.jsecurity.crypto.hash.Sha1Hash.fromHexString("org.jsecurity.realm.SimpleAccountRealm-9-authorization");
      fail("Expected exception of type java.lang.IllegalArgumentException");
    } catch (java.lang.IllegalArgumentException e) {
      // Expected exception.
    }

  }

  public void test239() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest0.test239");


    org.jsecurity.mgt.DefaultSecurityManager var0 = new org.jsecurity.mgt.DefaultSecurityManager();
    java.io.InputStream var2 = org.jsecurity.util.ClassUtils.getResourceAsStream("");
    java.lang.Object[] var3 = new java.lang.Object[] { var2};
    java.util.List var4 = org.jsecurity.util.CollectionUtils.asList(var3);
    org.jsecurity.authc.pam.ModularRealmAuthenticator var5 = new org.jsecurity.authc.pam.ModularRealmAuthenticator(var4);
    org.jsecurity.authc.pam.AllSuccessfulModularAuthenticationStrategy var6 = new org.jsecurity.authc.pam.AllSuccessfulModularAuthenticationStrategy();
    var5.setModularAuthenticationStrategy((org.jsecurity.authc.pam.ModularAuthenticationStrategy)var6);
    org.jsecurity.authz.SimpleAuthorizationInfo var8 = new org.jsecurity.authz.SimpleAuthorizationInfo();
    var8.addStringPermission("hi!");
    java.io.InputStream var12 = org.jsecurity.util.ClassUtils.getResourceAsStream("");
    java.lang.Object[] var13 = new java.lang.Object[] { var12};
    java.util.List var14 = org.jsecurity.util.CollectionUtils.asList(var13);
    var8.addRoles((java.util.Collection)var14);
    var5.setAuthenticationListeners((java.util.Collection)var14);
    var0.setSessionListeners((java.util.Collection)var14);
    org.jsecurity.authc.pam.ModularRealmAuthenticator var18 = new org.jsecurity.authc.pam.ModularRealmAuthenticator();
    org.jsecurity.authz.permission.InvalidPermissionStringException var21 = new org.jsecurity.authz.permission.InvalidPermissionStringException("", "dd\uFFFD");
    org.jsecurity.JSecurityException var23 = new org.jsecurity.JSecurityException("");
    org.jsecurity.authc.SimpleAuthenticationInfo var25 = new org.jsecurity.authc.SimpleAuthenticationInfo((java.lang.Object)var21, (java.lang.Object)"", "org.jsecurity.authz.UnauthorizedException: org.jsecurity.session.ExpiredSessionException: ");
    org.jsecurity.subject.PrincipalCollection var26 = var25.getPrincipals();
    var18.onLogout(var26);
    var0.setAuthenticator((org.jsecurity.authc.Authenticator)var18);
    org.jsecurity.codec.CodecException var31 = new org.jsecurity.codec.CodecException("dd\uFFFD");
    org.jsecurity.authc.ConcurrentAccessException var32 = new org.jsecurity.authc.ConcurrentAccessException("org.jsecurity.authz.UnauthorizedException: org.jsecurity.session.ExpiredSessionException: ", (java.lang.Throwable)var31);
    org.jsecurity.subject.SimplePrincipalCollection var34 = new org.jsecurity.subject.SimplePrincipalCollection((java.lang.Object)var31, "");
    org.jsecurity.authc.pam.FirstSuccessfulAuthenticationStrategy var35 = new org.jsecurity.authc.pam.FirstSuccessfulAuthenticationStrategy();
    org.jsecurity.authz.UnauthorizedException var37 = new org.jsecurity.authz.UnauthorizedException("org.jsecurity.config.ConfigurationException: dd\uFFFD");
    java.lang.Throwable[] var38 = var37.getSuppressed();
    java.util.List var39 = org.jsecurity.util.CollectionUtils.asList((java.lang.Object[])var38);
    org.jsecurity.authc.UsernamePasswordToken var40 = new org.jsecurity.authc.UsernamePasswordToken();
    java.lang.String var41 = var40.getUsername();
    java.net.InetAddress var42 = var40.getInetAddress();
    org.jsecurity.authc.AuthenticationInfo var43 = var35.beforeAllAttempts((java.util.Collection)var39, (org.jsecurity.authc.AuthenticationToken)var40);
    org.jsecurity.session.UnknownSessionException var48 = new org.jsecurity.session.UnknownSessionException("dd\uFFFD", (java.io.Serializable)100.0f);
    org.jsecurity.subject.SubjectException var49 = new org.jsecurity.subject.SubjectException("dd\uFFFD", (java.lang.Throwable)var48);
    org.jsecurity.io.SerializationException var50 = new org.jsecurity.io.SerializationException("", (java.lang.Throwable)var49);
    java.lang.Throwable[] var51 = var49.getSuppressed();
    java.util.Set var52 = org.jsecurity.util.CollectionUtils.asSet((java.lang.Object[])var51);
    org.jsecurity.authc.SimpleAccount var53 = new org.jsecurity.authc.SimpleAccount((org.jsecurity.subject.PrincipalCollection)var34, (java.lang.Object)var39, var52);
    java.io.InputStream var55 = org.jsecurity.util.ClassUtils.getResourceAsStream("");
    java.lang.Object[] var56 = new java.lang.Object[] { var55};
    java.util.List var57 = org.jsecurity.util.CollectionUtils.asList(var56);
    org.jsecurity.authc.pam.ModularRealmAuthenticator var58 = new org.jsecurity.authc.pam.ModularRealmAuthenticator(var57);
    org.jsecurity.subject.SimplePrincipalCollection var60 = new org.jsecurity.subject.SimplePrincipalCollection((java.util.Collection)var57, "org.jsecurity.authz.UnauthorizedException: org.jsecurity.session.ExpiredSessionException: ");
    org.jsecurity.io.ResourceException var64 = new org.jsecurity.io.ResourceException("hi!");
    org.jsecurity.authc.UnknownAccountException var65 = new org.jsecurity.authc.UnknownAccountException((java.lang.Throwable)var64);
    org.jsecurity.session.StoppedSessionException var66 = new org.jsecurity.session.StoppedSessionException("dd\uFFFD", (java.io.Serializable)var64);
    org.jsecurity.session.UnknownSessionException var67 = new org.jsecurity.session.UnknownSessionException("org.jsecurity.authz.UnauthorizedException: org.jsecurity.session.ExpiredSessionException: ", (java.lang.Throwable)var64);
    boolean var68 = var60.equals((java.lang.Object)var64);
    var34.addAll((org.jsecurity.subject.PrincipalCollection)var60);
    org.jsecurity.session.UnknownSessionException var74 = new org.jsecurity.session.UnknownSessionException("dd\uFFFD", (java.io.Serializable)100.0f);
    org.jsecurity.subject.SubjectException var75 = new org.jsecurity.subject.SubjectException("dd\uFFFD", (java.lang.Throwable)var74);
    org.jsecurity.io.SerializationException var76 = new org.jsecurity.io.SerializationException("", (java.lang.Throwable)var75);
    java.lang.Throwable[] var77 = var75.getSuppressed();
    java.util.List var78 = org.jsecurity.util.CollectionUtils.asList((java.lang.Object[])var77);
    boolean var79 = var0.isPermittedAll((org.jsecurity.subject.PrincipalCollection)var34, (java.util.Collection)var78);
    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      org.jsecurity.mgt.DefaultSecurityManager var80 = new org.jsecurity.mgt.DefaultSecurityManager((java.util.Collection)var78);
      fail("Expected exception of type java.lang.IllegalArgumentException");
    } catch (java.lang.IllegalArgumentException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var2);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var3);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var4);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var12);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var13);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var14);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var26);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var38);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var39);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var41);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var42);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var43);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var51);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var52);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var55);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var56);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var57);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var68 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var77);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var78);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var79 == true);

  }

  public void test240() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest0.test240");


    java.io.InputStream var1 = org.jsecurity.util.ClassUtils.getResourceAsStream("");
    java.lang.Object[] var2 = new java.lang.Object[] { var1};
    java.util.List var3 = org.jsecurity.util.CollectionUtils.asList(var2);
    org.jsecurity.authc.pam.ModularRealmAuthenticator var4 = new org.jsecurity.authc.pam.ModularRealmAuthenticator(var3);
    org.jsecurity.authc.pam.AllSuccessfulModularAuthenticationStrategy var5 = new org.jsecurity.authc.pam.AllSuccessfulModularAuthenticationStrategy();
    var4.setModularAuthenticationStrategy((org.jsecurity.authc.pam.ModularAuthenticationStrategy)var5);
    org.jsecurity.authz.SimpleAuthorizationInfo var7 = new org.jsecurity.authz.SimpleAuthorizationInfo();
    var7.addStringPermission("hi!");
    java.io.InputStream var11 = org.jsecurity.util.ClassUtils.getResourceAsStream("");
    java.lang.Object[] var12 = new java.lang.Object[] { var11};
    java.util.List var13 = org.jsecurity.util.CollectionUtils.asList(var12);
    var7.addRoles((java.util.Collection)var13);
    var4.setAuthenticationListeners((java.util.Collection)var13);
    org.jsecurity.realm.activedirectory.ActiveDirectoryRealm var16 = new org.jsecurity.realm.activedirectory.ActiveDirectoryRealm();
    var16.setPrincipalSuffix("");
    var4.setRealm((org.jsecurity.realm.Realm)var16);
    org.jsecurity.authc.pam.FirstSuccessfulAuthenticationStrategy var20 = new org.jsecurity.authc.pam.FirstSuccessfulAuthenticationStrategy();
    org.jsecurity.authz.UnauthorizedException var22 = new org.jsecurity.authz.UnauthorizedException("org.jsecurity.config.ConfigurationException: dd\uFFFD");
    java.lang.Throwable[] var23 = var22.getSuppressed();
    java.util.List var24 = org.jsecurity.util.CollectionUtils.asList((java.lang.Object[])var23);
    org.jsecurity.authc.UsernamePasswordToken var25 = new org.jsecurity.authc.UsernamePasswordToken();
    java.lang.String var26 = var25.getUsername();
    java.net.InetAddress var27 = var25.getInetAddress();
    org.jsecurity.authc.AuthenticationInfo var28 = var20.beforeAllAttempts((java.util.Collection)var24, (org.jsecurity.authc.AuthenticationToken)var25);
    var4.setModularAuthenticationStrategy((org.jsecurity.authc.pam.ModularAuthenticationStrategy)var20);
    org.jsecurity.mgt.DefaultSecurityManager var30 = new org.jsecurity.mgt.DefaultSecurityManager();
    java.io.InputStream var32 = org.jsecurity.util.ClassUtils.getResourceAsStream("");
    java.lang.Object[] var33 = new java.lang.Object[] { var32};
    java.util.List var34 = org.jsecurity.util.CollectionUtils.asList(var33);
    org.jsecurity.authc.pam.ModularRealmAuthenticator var35 = new org.jsecurity.authc.pam.ModularRealmAuthenticator(var34);
    org.jsecurity.authc.pam.AllSuccessfulModularAuthenticationStrategy var36 = new org.jsecurity.authc.pam.AllSuccessfulModularAuthenticationStrategy();
    var35.setModularAuthenticationStrategy((org.jsecurity.authc.pam.ModularAuthenticationStrategy)var36);
    org.jsecurity.authz.SimpleAuthorizationInfo var38 = new org.jsecurity.authz.SimpleAuthorizationInfo();
    var38.addStringPermission("hi!");
    java.io.InputStream var42 = org.jsecurity.util.ClassUtils.getResourceAsStream("");
    java.lang.Object[] var43 = new java.lang.Object[] { var42};
    java.util.List var44 = org.jsecurity.util.CollectionUtils.asList(var43);
    var38.addRoles((java.util.Collection)var44);
    var35.setAuthenticationListeners((java.util.Collection)var44);
    var30.setSessionListeners((java.util.Collection)var44);
    org.jsecurity.realm.text.TextConfigurationRealm var48 = new org.jsecurity.realm.text.TextConfigurationRealm();
    java.io.InputStream var50 = org.jsecurity.util.ClassUtils.getResourceAsStream("");
    java.lang.Object[] var51 = new java.lang.Object[] { var50};
    java.util.List var52 = org.jsecurity.util.CollectionUtils.asList(var51);
    org.jsecurity.authc.pam.ModularRealmAuthenticator var53 = new org.jsecurity.authc.pam.ModularRealmAuthenticator(var52);
    org.jsecurity.subject.SimplePrincipalCollection var55 = new org.jsecurity.subject.SimplePrincipalCollection((java.util.Collection)var52, "org.jsecurity.authz.UnauthorizedException: org.jsecurity.session.ExpiredSessionException: ");
    org.jsecurity.session.UnknownSessionException var60 = new org.jsecurity.session.UnknownSessionException("dd\uFFFD", (java.io.Serializable)100.0f);
    org.jsecurity.session.SessionException var62 = new org.jsecurity.session.SessionException("dd\uFFFD", (java.lang.Throwable)var60, (java.io.Serializable)0);
    org.jsecurity.session.SessionException var63 = new org.jsecurity.session.SessionException("dd\uFFFD", (java.lang.Throwable)var60);
    var55.add((java.lang.Object)var63, "org.jsecurity.config.ConfigurationException: dd\uFFFD");
    var48.onLogout((org.jsecurity.subject.PrincipalCollection)var55);
    org.jsecurity.authc.pam.FirstSuccessfulAuthenticationStrategy var67 = new org.jsecurity.authc.pam.FirstSuccessfulAuthenticationStrategy();
    org.jsecurity.authz.UnauthorizedException var69 = new org.jsecurity.authz.UnauthorizedException("org.jsecurity.config.ConfigurationException: dd\uFFFD");
    java.lang.Throwable[] var70 = var69.getSuppressed();
    java.util.List var71 = org.jsecurity.util.CollectionUtils.asList((java.lang.Object[])var70);
    org.jsecurity.authc.UsernamePasswordToken var72 = new org.jsecurity.authc.UsernamePasswordToken();
    java.lang.String var73 = var72.getUsername();
    java.net.InetAddress var74 = var72.getInetAddress();
    org.jsecurity.authc.AuthenticationInfo var75 = var67.beforeAllAttempts((java.util.Collection)var71, (org.jsecurity.authc.AuthenticationToken)var72);
    boolean[] var76 = var30.hasRoles((org.jsecurity.subject.PrincipalCollection)var55, var71);
    org.jsecurity.codec.CodecException var79 = new org.jsecurity.codec.CodecException("dd\uFFFD");
    org.jsecurity.authc.ConcurrentAccessException var80 = new org.jsecurity.authc.ConcurrentAccessException("org.jsecurity.authz.UnauthorizedException: org.jsecurity.session.ExpiredSessionException: ", (java.lang.Throwable)var79);
    org.jsecurity.subject.SimplePrincipalCollection var82 = new org.jsecurity.subject.SimplePrincipalCollection((java.lang.Object)var79, "");
    java.io.InputStream var84 = org.jsecurity.util.ClassUtils.getResourceAsStream("");
    java.lang.Object[] var85 = new java.lang.Object[] { var84};
    java.util.List var86 = org.jsecurity.util.CollectionUtils.asList(var85);
    org.jsecurity.authc.pam.ModularRealmAuthenticator var87 = new org.jsecurity.authc.pam.ModularRealmAuthenticator(var86);
    var82.addAll((java.util.Collection)var86, "\u0000\u0000");
    var30.setSessionListeners((java.util.Collection)var86);
    org.jsecurity.realm.activedirectory.ActiveDirectoryRealm var91 = new org.jsecurity.realm.activedirectory.ActiveDirectoryRealm();
    org.jsecurity.authc.UsernamePasswordToken var92 = new org.jsecurity.authc.UsernamePasswordToken();
    java.lang.String var93 = var92.getUsername();
    java.lang.Object var94 = var92.getPrincipal();
    var92.setUsername("hi!");
    java.lang.Object var97 = var92.getPrincipal();
    boolean var98 = var91.supports((org.jsecurity.authc.AuthenticationToken)var92);
    org.jsecurity.authc.AuthenticationInfo var99 = var20.beforeAllAttempts((java.util.Collection)var86, (org.jsecurity.authc.AuthenticationToken)var92);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var1);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var2);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var3);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var11);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var12);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var13);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var23);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var24);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var26);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var27);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var28);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var32);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var33);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var34);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var42);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var43);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var44);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var50);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var51);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var52);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var70);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var71);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var73);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var74);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var75);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var76);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var84);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var85);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var86);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var93);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var94);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var97 + "' != '" + "hi!"+ "'", var97.equals("hi!"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var98 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var99);

  }

  public void test241() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest0.test241");


    org.jsecurity.authc.IncorrectCredentialsException var1 = new org.jsecurity.authc.IncorrectCredentialsException("org.jsecurity.authc.CredentialsException: 783ccd31-48a8-42dd-890f-df885a7baaff");

  }

  public void test242() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest0.test242");


    org.jsecurity.authz.HostUnauthorizedException var1 = new org.jsecurity.authz.HostUnauthorizedException("6464ff");
    java.net.InetAddress var2 = var1.getHostAddress();
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var2);

  }

  public void test243() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest0.test243");


    org.jsecurity.mgt.DefaultSecurityManager var0 = new org.jsecurity.mgt.DefaultSecurityManager();
    java.io.InputStream var2 = org.jsecurity.util.ClassUtils.getResourceAsStream("");
    java.lang.Object[] var3 = new java.lang.Object[] { var2};
    java.util.List var4 = org.jsecurity.util.CollectionUtils.asList(var3);
    org.jsecurity.authc.pam.ModularRealmAuthenticator var5 = new org.jsecurity.authc.pam.ModularRealmAuthenticator(var4);
    org.jsecurity.authc.pam.AllSuccessfulModularAuthenticationStrategy var6 = new org.jsecurity.authc.pam.AllSuccessfulModularAuthenticationStrategy();
    var5.setModularAuthenticationStrategy((org.jsecurity.authc.pam.ModularAuthenticationStrategy)var6);
    org.jsecurity.authz.SimpleAuthorizationInfo var8 = new org.jsecurity.authz.SimpleAuthorizationInfo();
    var8.addStringPermission("hi!");
    java.io.InputStream var12 = org.jsecurity.util.ClassUtils.getResourceAsStream("");
    java.lang.Object[] var13 = new java.lang.Object[] { var12};
    java.util.List var14 = org.jsecurity.util.CollectionUtils.asList(var13);
    var8.addRoles((java.util.Collection)var14);
    var5.setAuthenticationListeners((java.util.Collection)var14);
    var0.setSessionListeners((java.util.Collection)var14);
    org.jsecurity.authc.pam.ModularRealmAuthenticator var18 = new org.jsecurity.authc.pam.ModularRealmAuthenticator();
    org.jsecurity.authz.permission.InvalidPermissionStringException var21 = new org.jsecurity.authz.permission.InvalidPermissionStringException("", "dd\uFFFD");
    org.jsecurity.JSecurityException var23 = new org.jsecurity.JSecurityException("");
    org.jsecurity.authc.SimpleAuthenticationInfo var25 = new org.jsecurity.authc.SimpleAuthenticationInfo((java.lang.Object)var21, (java.lang.Object)"", "org.jsecurity.authz.UnauthorizedException: org.jsecurity.session.ExpiredSessionException: ");
    org.jsecurity.subject.PrincipalCollection var26 = var25.getPrincipals();
    var18.onLogout(var26);
    var0.setAuthenticator((org.jsecurity.authc.Authenticator)var18);
    org.jsecurity.realm.text.TextConfigurationRealm var29 = new org.jsecurity.realm.text.TextConfigurationRealm();
    org.jsecurity.realm.text.TextConfigurationRealm var30 = new org.jsecurity.realm.text.TextConfigurationRealm();
    java.io.InputStream var32 = org.jsecurity.util.ClassUtils.getResourceAsStream("");
    java.lang.Object[] var33 = new java.lang.Object[] { var32};
    java.util.List var34 = org.jsecurity.util.CollectionUtils.asList(var33);
    org.jsecurity.authc.pam.ModularRealmAuthenticator var35 = new org.jsecurity.authc.pam.ModularRealmAuthenticator(var34);
    org.jsecurity.subject.SimplePrincipalCollection var37 = new org.jsecurity.subject.SimplePrincipalCollection((java.util.Collection)var34, "org.jsecurity.authz.UnauthorizedException: org.jsecurity.session.ExpiredSessionException: ");
    org.jsecurity.session.UnknownSessionException var42 = new org.jsecurity.session.UnknownSessionException("dd\uFFFD", (java.io.Serializable)100.0f);
    org.jsecurity.session.SessionException var44 = new org.jsecurity.session.SessionException("dd\uFFFD", (java.lang.Throwable)var42, (java.io.Serializable)0);
    org.jsecurity.session.SessionException var45 = new org.jsecurity.session.SessionException("dd\uFFFD", (java.lang.Throwable)var42);
    var37.add((java.lang.Object)var45, "org.jsecurity.config.ConfigurationException: dd\uFFFD");
    var30.onLogout((org.jsecurity.subject.PrincipalCollection)var37);
    java.util.Collection var50 = var37.fromRealm("\u0000\u0000\u0000");
    var29.onLogout((org.jsecurity.subject.PrincipalCollection)var37);
    java.util.Set var52 = var37.asSet();
    org.jsecurity.authz.permission.WildcardPermission var55 = new org.jsecurity.authz.permission.WildcardPermission("783ccd31-48a8-42dd-890f-df885a7baaff", false);
    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      boolean var56 = var0.isPermitted((org.jsecurity.subject.PrincipalCollection)var37, (org.jsecurity.authz.Permission)var55);
      fail("Expected exception of type java.util.NoSuchElementException");
    } catch (java.util.NoSuchElementException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var2);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var3);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var4);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var12);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var13);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var14);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var26);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var32);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var33);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var34);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var50);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var52);

  }

  public void test244() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest0.test244");


    org.jsecurity.subject.InvalidSubjectException var0 = new org.jsecurity.subject.InvalidSubjectException();
    org.jsecurity.session.UnknownSessionException var7 = new org.jsecurity.session.UnknownSessionException("dd\uFFFD", (java.io.Serializable)100.0f);
    org.jsecurity.config.ConfigurationException var8 = new org.jsecurity.config.ConfigurationException("dd\uFFFD", (java.lang.Throwable)var7);
    org.jsecurity.session.ExpiredSessionException var10 = new org.jsecurity.session.ExpiredSessionException("", (java.lang.Throwable)var8, (java.io.Serializable)true);
    org.jsecurity.authc.pam.UnsupportedTokenException var11 = new org.jsecurity.authc.pam.UnsupportedTokenException((java.lang.Throwable)var10);
    org.jsecurity.authc.AccountException var12 = new org.jsecurity.authc.AccountException((java.lang.Throwable)var11);
    org.jsecurity.authc.DisabledAccountException var13 = new org.jsecurity.authc.DisabledAccountException((java.lang.Throwable)var11);
    org.jsecurity.session.StoppedSessionException var14 = new org.jsecurity.session.StoppedSessionException("org.jsecurity.config.ConfigurationException: dd\uFFFD", (java.io.Serializable)var11);
    org.jsecurity.session.ExpiredSessionException var15 = new org.jsecurity.session.ExpiredSessionException("\u0000\u0000", (java.lang.Throwable)var14);
    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      org.jsecurity.crypto.hash.Md5Hash var16 = new org.jsecurity.crypto.hash.Md5Hash((java.lang.Object)var0, (java.lang.Object)"\u0000\u0000");
      fail("Expected exception of type org.jsecurity.codec.CodecException");
    } catch (org.jsecurity.codec.CodecException e) {
      // Expected exception.
    }

  }

  public void test245() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest0.test245");


    org.jsecurity.authz.UnauthorizedException var1 = new org.jsecurity.authz.UnauthorizedException("org.jsecurity.config.ConfigurationException: dd\uFFFD");
    java.lang.Throwable[] var2 = var1.getSuppressed();
    java.util.List var3 = org.jsecurity.util.CollectionUtils.asList((java.lang.Object[])var2);
    java.util.Set var4 = org.jsecurity.util.CollectionUtils.asSet((java.lang.Object[])var2);
    org.jsecurity.io.ResourceException var8 = new org.jsecurity.io.ResourceException("hi!");
    org.jsecurity.codec.CodecException var9 = new org.jsecurity.codec.CodecException((java.lang.Throwable)var8);
    org.jsecurity.JSecurityException var10 = new org.jsecurity.JSecurityException("a2b823b1e72eae2b727289df8a00a89df8a0bab6ad8a89c4c5c7a9b62a270000", (java.lang.Throwable)var8);
    org.jsecurity.util.InstantiationException var11 = new org.jsecurity.util.InstantiationException("org.jsecurity.config.ConfigurationException: dd\uFFFD", (java.lang.Throwable)var10);
    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      org.jsecurity.authz.SimpleAuthorizingAccount var13 = new org.jsecurity.authz.SimpleAuthorizingAccount((java.util.Collection)var4, (java.lang.Object)"org.jsecurity.config.ConfigurationException: dd\uFFFD", "\uFFFD\uFFFD#\uFFFD\uFFFD.\uFFFD+rr\uFFFD\u07CA\u0000\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\u01E9\uFFFD*'\u0000\u0000");
      fail("Expected exception of type java.lang.IllegalArgumentException");
    } catch (java.lang.IllegalArgumentException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var2);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var3);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var4);

  }

  public void test246() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest0.test246");


    org.jsecurity.authz.permission.InvalidPermissionStringException var2 = new org.jsecurity.authz.permission.InvalidPermissionStringException("hi!", "\uFFFD\uFFFD#\uFFFD\uFFFD.\uFFFD+rr\uFFFD\u07CA\u0000\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\u01E9\uFFFD*'\u0000\u0000");
    java.lang.String var3 = var2.getPermissionString();
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var3 + "' != '" + "\uFFFD\uFFFD#\uFFFD\uFFFD.\uFFFD+rr\uFFFD\u07CA\u0000\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\u01E9\uFFFD*'\u0000\u0000"+ "'", var3.equals("\uFFFD\uFFFD#\uFFFD\uFFFD.\uFFFD+rr\uFFFD\u07CA\u0000\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\u01E9\uFFFD*'\u0000\u0000"));

  }

  public void test247() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest0.test247");


    org.jsecurity.mgt.DefaultSecurityManager var0 = new org.jsecurity.mgt.DefaultSecurityManager();
    org.jsecurity.authz.permission.WildcardPermissionResolver var1 = new org.jsecurity.authz.permission.WildcardPermissionResolver();
    var0.setPermissionResolver((org.jsecurity.authz.permission.PermissionResolver)var1);
    org.jsecurity.authc.pam.AllSuccessfulModularAuthenticationStrategy var3 = new org.jsecurity.authc.pam.AllSuccessfulModularAuthenticationStrategy();
    org.jsecurity.authc.pam.AllSuccessfulModularAuthenticationStrategy var4 = new org.jsecurity.authc.pam.AllSuccessfulModularAuthenticationStrategy();
    char[] var6 = new char[] { };
    org.jsecurity.authc.UsernamePasswordToken var8 = new org.jsecurity.authc.UsernamePasswordToken("hi!", var6, true);
    org.jsecurity.authc.SimpleAccount var9 = new org.jsecurity.authc.SimpleAccount();
    var9.setCredentialsExpired(false);
    boolean var12 = var9.isLocked();
    org.jsecurity.authc.AuthenticationInfo var13 = var4.afterAllAttempts((org.jsecurity.authc.AuthenticationToken)var8, (org.jsecurity.authc.AuthenticationInfo)var9);
    char[] var17 = new char[] { '4', '#'};
    org.jsecurity.authc.UsernamePasswordToken var18 = new org.jsecurity.authc.UsernamePasswordToken("\u0000\u0000", var17);
    org.jsecurity.authc.SimpleAccount var19 = new org.jsecurity.authc.SimpleAccount();
    var19.setCredentialsExpired(false);
    var19.setCredentialsExpired(false);
    boolean var24 = var19.isCredentialsExpired();
    org.jsecurity.authc.AuthenticationInfo var25 = var4.afterAllAttempts((org.jsecurity.authc.AuthenticationToken)var18, (org.jsecurity.authc.AuthenticationInfo)var19);
    org.jsecurity.authz.UnauthenticatedException var29 = new org.jsecurity.authz.UnauthenticatedException();
    org.jsecurity.config.UnresolveableReferenceException var30 = new org.jsecurity.config.UnresolveableReferenceException("", (java.lang.Throwable)var29);
    org.jsecurity.cache.CacheException var31 = new org.jsecurity.cache.CacheException("org.jsecurity.config.ConfigurationException: dd\uFFFD", (java.lang.Throwable)var29);
    org.jsecurity.authc.SimpleAuthenticationInfo var33 = new org.jsecurity.authc.SimpleAuthenticationInfo((java.lang.Object)"org.jsecurity.config.ConfigurationException: dd\uFFFD", (java.lang.Object)var31, "a2b823b1e72eae2b727289df8a00a89df8a0bab6ad8a89c4c5c7a9b62a270000");
    org.jsecurity.subject.PrincipalCollection var34 = var33.getPrincipals();
    org.jsecurity.authc.AuthenticationInfo var35 = var3.afterAllAttempts((org.jsecurity.authc.AuthenticationToken)var18, (org.jsecurity.authc.AuthenticationInfo)var33);
    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      org.jsecurity.authc.AuthenticationInfo var36 = var0.authenticate((org.jsecurity.authc.AuthenticationToken)var18);
      fail("Expected exception of type org.jsecurity.authc.AuthenticationException");
    } catch (org.jsecurity.authc.AuthenticationException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var6);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var12 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var13);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var17);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var24 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var25);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var34);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var35);

  }

  public void test248() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest0.test248");


    java.io.InputStream var1 = org.jsecurity.util.ClassUtils.getResourceAsStream("");
    java.lang.Object[] var2 = new java.lang.Object[] { var1};
    java.util.List var3 = org.jsecurity.util.CollectionUtils.asList(var2);
    org.jsecurity.authc.pam.ModularRealmAuthenticator var4 = new org.jsecurity.authc.pam.ModularRealmAuthenticator(var3);
    org.jsecurity.subject.SimplePrincipalCollection var6 = new org.jsecurity.subject.SimplePrincipalCollection((java.util.Collection)var3, "org.jsecurity.authz.UnauthorizedException: org.jsecurity.session.ExpiredSessionException: ");
    org.jsecurity.io.ResourceException var10 = new org.jsecurity.io.ResourceException("hi!");
    org.jsecurity.authc.UnknownAccountException var11 = new org.jsecurity.authc.UnknownAccountException((java.lang.Throwable)var10);
    org.jsecurity.session.StoppedSessionException var12 = new org.jsecurity.session.StoppedSessionException("dd\uFFFD", (java.io.Serializable)var10);
    org.jsecurity.session.UnknownSessionException var13 = new org.jsecurity.session.UnknownSessionException("org.jsecurity.authz.UnauthorizedException: org.jsecurity.session.ExpiredSessionException: ", (java.lang.Throwable)var10);
    boolean var14 = var6.equals((java.lang.Object)var10);
    org.jsecurity.authz.aop.RoleAnnotationMethodInterceptor var15 = new org.jsecurity.authz.aop.RoleAnnotationMethodInterceptor();
    org.jsecurity.aop.AnnotationHandler var16 = var15.getHandler();
    java.lang.Class var17 = var16.getAnnotationClass();
    java.lang.Object var18 = var6.oneByType(var17);
    org.jsecurity.realm.SimpleAccountRealm var20 = new org.jsecurity.realm.SimpleAccountRealm("hi!");
    java.lang.Class var21 = var20.getAuthenticationTokenClass();
    java.lang.Class[] var22 = new java.lang.Class[] { var21};
    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      java.lang.reflect.Constructor var23 = org.jsecurity.util.ClassUtils.getConstructor(var17, var22);
      fail("Expected exception of type java.lang.IllegalStateException");
    } catch (java.lang.IllegalStateException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var1);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var2);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var3);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var14 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var16);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var17);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var18);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var21);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var22);

  }

  public void test249() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest0.test249");


    org.jsecurity.util.UnknownClassException var1 = new org.jsecurity.util.UnknownClassException("org.jsecurity.authz.UnauthorizedException: org.jsecurity.session.ExpiredSessionException: ");

  }

  public void test250() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest0.test250");


    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      java.security.Key var1 = org.jsecurity.crypto.BlowfishCipher.generateNewKey(1);
      fail("Expected exception of type java.security.InvalidParameterException");
    } catch (java.security.InvalidParameterException e) {
      // Expected exception.
    }

  }

  public void test251() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest0.test251");


    org.jsecurity.codec.CodecException var2 = new org.jsecurity.codec.CodecException("dd\uFFFD");
    org.jsecurity.authc.ConcurrentAccessException var3 = new org.jsecurity.authc.ConcurrentAccessException("org.jsecurity.authz.UnauthorizedException: org.jsecurity.session.ExpiredSessionException: ", (java.lang.Throwable)var2);
    org.jsecurity.subject.SimplePrincipalCollection var5 = new org.jsecurity.subject.SimplePrincipalCollection((java.lang.Object)var2, "");
    java.io.InputStream var7 = org.jsecurity.util.ClassUtils.getResourceAsStream("");
    java.lang.Object[] var8 = new java.lang.Object[] { var7};
    java.util.List var9 = org.jsecurity.util.CollectionUtils.asList(var8);
    org.jsecurity.authc.pam.ModularRealmAuthenticator var10 = new org.jsecurity.authc.pam.ModularRealmAuthenticator(var9);
    org.jsecurity.authc.pam.AllSuccessfulModularAuthenticationStrategy var11 = new org.jsecurity.authc.pam.AllSuccessfulModularAuthenticationStrategy();
    var10.setModularAuthenticationStrategy((org.jsecurity.authc.pam.ModularAuthenticationStrategy)var11);
    org.jsecurity.authz.SimpleAuthorizationInfo var13 = new org.jsecurity.authz.SimpleAuthorizationInfo();
    var13.addStringPermission("hi!");
    java.io.InputStream var17 = org.jsecurity.util.ClassUtils.getResourceAsStream("");
    java.lang.Object[] var18 = new java.lang.Object[] { var17};
    java.util.List var19 = org.jsecurity.util.CollectionUtils.asList(var18);
    var13.addRoles((java.util.Collection)var19);
    var10.setAuthenticationListeners((java.util.Collection)var19);
    org.jsecurity.realm.activedirectory.ActiveDirectoryRealm var22 = new org.jsecurity.realm.activedirectory.ActiveDirectoryRealm();
    var22.setPrincipalSuffix("");
    var10.setRealm((org.jsecurity.realm.Realm)var22);
    org.jsecurity.authc.pam.FirstSuccessfulAuthenticationStrategy var26 = new org.jsecurity.authc.pam.FirstSuccessfulAuthenticationStrategy();
    org.jsecurity.authz.UnauthorizedException var28 = new org.jsecurity.authz.UnauthorizedException("org.jsecurity.config.ConfigurationException: dd\uFFFD");
    java.lang.Throwable[] var29 = var28.getSuppressed();
    java.util.List var30 = org.jsecurity.util.CollectionUtils.asList((java.lang.Object[])var29);
    org.jsecurity.authc.UsernamePasswordToken var31 = new org.jsecurity.authc.UsernamePasswordToken();
    java.lang.String var32 = var31.getUsername();
    java.net.InetAddress var33 = var31.getInetAddress();
    org.jsecurity.authc.AuthenticationInfo var34 = var26.beforeAllAttempts((java.util.Collection)var30, (org.jsecurity.authc.AuthenticationToken)var31);
    var10.setModularAuthenticationStrategy((org.jsecurity.authc.pam.ModularAuthenticationStrategy)var26);
    org.jsecurity.authc.SimpleAccount var36 = new org.jsecurity.authc.SimpleAccount((org.jsecurity.subject.PrincipalCollection)var5, (java.lang.Object)var10);
    org.jsecurity.session.UnknownSessionException var42 = new org.jsecurity.session.UnknownSessionException("dd\uFFFD", (java.io.Serializable)100.0f);
    org.jsecurity.subject.SubjectException var43 = new org.jsecurity.subject.SubjectException("dd\uFFFD", (java.lang.Throwable)var42);
    org.jsecurity.authc.pam.UnsupportedTokenException var44 = new org.jsecurity.authc.pam.UnsupportedTokenException("dd\uFFFD", (java.lang.Throwable)var42);
    org.jsecurity.session.StoppedSessionException var45 = new org.jsecurity.session.StoppedSessionException("org.jsecurity.config.ConfigurationException: dd\uFFFD", (java.lang.Throwable)var44);
    org.jsecurity.JSecurityException var46 = new org.jsecurity.JSecurityException((java.lang.Throwable)var45);
    boolean var47 = var36.equals((java.lang.Object)var45);
    org.jsecurity.config.ConfigurationException var48 = new org.jsecurity.config.ConfigurationException();
    org.jsecurity.util.UnknownClassException var49 = new org.jsecurity.util.UnknownClassException((java.lang.Throwable)var48);
    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      org.jsecurity.crypto.hash.Sha1Hash var50 = new org.jsecurity.crypto.hash.Sha1Hash((java.lang.Object)var47, (java.lang.Object)var49);
      fail("Expected exception of type org.jsecurity.codec.CodecException");
    } catch (org.jsecurity.codec.CodecException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var7);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var8);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var9);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var17);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var18);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var19);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var29);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var30);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var32);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var33);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var34);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var47 == false);

  }

  public void test252() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest0.test252");


    org.jsecurity.mgt.DefaultSecurityManager var0 = new org.jsecurity.mgt.DefaultSecurityManager();
    java.io.InputStream var2 = org.jsecurity.util.ClassUtils.getResourceAsStream("");
    java.lang.Object[] var3 = new java.lang.Object[] { var2};
    java.util.List var4 = org.jsecurity.util.CollectionUtils.asList(var3);
    org.jsecurity.authc.pam.ModularRealmAuthenticator var5 = new org.jsecurity.authc.pam.ModularRealmAuthenticator(var4);
    org.jsecurity.authc.pam.AllSuccessfulModularAuthenticationStrategy var6 = new org.jsecurity.authc.pam.AllSuccessfulModularAuthenticationStrategy();
    var5.setModularAuthenticationStrategy((org.jsecurity.authc.pam.ModularAuthenticationStrategy)var6);
    org.jsecurity.authz.SimpleAuthorizationInfo var8 = new org.jsecurity.authz.SimpleAuthorizationInfo();
    var8.addStringPermission("hi!");
    java.io.InputStream var12 = org.jsecurity.util.ClassUtils.getResourceAsStream("");
    java.lang.Object[] var13 = new java.lang.Object[] { var12};
    java.util.List var14 = org.jsecurity.util.CollectionUtils.asList(var13);
    var8.addRoles((java.util.Collection)var14);
    var5.setAuthenticationListeners((java.util.Collection)var14);
    var0.setSessionListeners((java.util.Collection)var14);
    java.io.InputStream var19 = org.jsecurity.util.ClassUtils.getResourceAsStream("");
    java.lang.Object[] var20 = new java.lang.Object[] { var19};
    java.util.List var21 = org.jsecurity.util.CollectionUtils.asList(var20);
    org.jsecurity.authc.pam.ModularRealmAuthenticator var22 = new org.jsecurity.authc.pam.ModularRealmAuthenticator(var21);
    org.jsecurity.subject.SimplePrincipalCollection var24 = new org.jsecurity.subject.SimplePrincipalCollection((java.util.Collection)var21, "org.jsecurity.authz.UnauthorizedException: org.jsecurity.session.ExpiredSessionException: ");
    org.jsecurity.session.UnknownSessionException var29 = new org.jsecurity.session.UnknownSessionException("dd\uFFFD", (java.io.Serializable)100.0f);
    org.jsecurity.session.SessionException var31 = new org.jsecurity.session.SessionException("dd\uFFFD", (java.lang.Throwable)var29, (java.io.Serializable)0);
    org.jsecurity.session.SessionException var32 = new org.jsecurity.session.SessionException("dd\uFFFD", (java.lang.Throwable)var29);
    var24.add((java.lang.Object)var32, "org.jsecurity.config.ConfigurationException: dd\uFFFD");
    java.util.Set var35 = var24.asSet();
    org.jsecurity.authz.SimpleRole var37 = new org.jsecurity.authz.SimpleRole();
    org.jsecurity.authz.permission.WildcardPermission var40 = new org.jsecurity.authz.permission.WildcardPermission("hi!", false);
    boolean var41 = var37.isPermitted((org.jsecurity.authz.Permission)var40);
    org.jsecurity.session.InvalidSessionException var42 = new org.jsecurity.session.InvalidSessionException("org.jsecurity.config.ConfigurationException: dd\uFFFD", (java.io.Serializable)var40);
    org.jsecurity.codec.CodecException var45 = new org.jsecurity.codec.CodecException("dd\uFFFD");
    org.jsecurity.authc.ConcurrentAccessException var46 = new org.jsecurity.authc.ConcurrentAccessException("org.jsecurity.authz.UnauthorizedException: org.jsecurity.session.ExpiredSessionException: ", (java.lang.Throwable)var45);
    org.jsecurity.subject.SimplePrincipalCollection var48 = new org.jsecurity.subject.SimplePrincipalCollection((java.lang.Object)var45, "");
    org.jsecurity.authc.pam.FirstSuccessfulAuthenticationStrategy var49 = new org.jsecurity.authc.pam.FirstSuccessfulAuthenticationStrategy();
    org.jsecurity.authz.UnauthorizedException var51 = new org.jsecurity.authz.UnauthorizedException("org.jsecurity.config.ConfigurationException: dd\uFFFD");
    java.lang.Throwable[] var52 = var51.getSuppressed();
    java.util.List var53 = org.jsecurity.util.CollectionUtils.asList((java.lang.Object[])var52);
    org.jsecurity.authc.UsernamePasswordToken var54 = new org.jsecurity.authc.UsernamePasswordToken();
    java.lang.String var55 = var54.getUsername();
    java.net.InetAddress var56 = var54.getInetAddress();
    org.jsecurity.authc.AuthenticationInfo var57 = var49.beforeAllAttempts((java.util.Collection)var53, (org.jsecurity.authc.AuthenticationToken)var54);
    org.jsecurity.session.UnknownSessionException var62 = new org.jsecurity.session.UnknownSessionException("dd\uFFFD", (java.io.Serializable)100.0f);
    org.jsecurity.subject.SubjectException var63 = new org.jsecurity.subject.SubjectException("dd\uFFFD", (java.lang.Throwable)var62);
    org.jsecurity.io.SerializationException var64 = new org.jsecurity.io.SerializationException("", (java.lang.Throwable)var63);
    java.lang.Throwable[] var65 = var63.getSuppressed();
    java.util.Set var66 = org.jsecurity.util.CollectionUtils.asSet((java.lang.Object[])var65);
    org.jsecurity.authc.SimpleAccount var67 = new org.jsecurity.authc.SimpleAccount((org.jsecurity.subject.PrincipalCollection)var48, (java.lang.Object)var53, var66);
    var67.addStringPermission("org.jsecurity.config.ConfigurationException: dd\uFFFD");
    org.jsecurity.authz.SimpleRole var70 = new org.jsecurity.authz.SimpleRole();
    org.jsecurity.authz.permission.WildcardPermission var73 = new org.jsecurity.authz.permission.WildcardPermission("hi!", false);
    boolean var74 = var70.isPermitted((org.jsecurity.authz.Permission)var73);
    var67.addObjectPermission((org.jsecurity.authz.Permission)var73);
    boolean var76 = var40.implies((org.jsecurity.authz.Permission)var73);
    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      var0.checkPermission((org.jsecurity.subject.PrincipalCollection)var24, (org.jsecurity.authz.Permission)var73);
      fail("Expected exception of type java.util.NoSuchElementException");
    } catch (java.util.NoSuchElementException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var2);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var3);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var4);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var12);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var13);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var14);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var19);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var20);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var21);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var35);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var41 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var52);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var53);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var55);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var56);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var57);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var65);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var66);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var74 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var76 == true);

  }

  public void test253() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest0.test253");


    org.jsecurity.authz.ModularRealmAuthorizer var0 = new org.jsecurity.authz.ModularRealmAuthorizer();
    java.io.InputStream var2 = org.jsecurity.util.ClassUtils.getResourceAsStream("");
    java.lang.Object[] var3 = new java.lang.Object[] { var2};
    java.util.List var4 = org.jsecurity.util.CollectionUtils.asList(var3);
    org.jsecurity.authc.pam.ModularRealmAuthenticator var5 = new org.jsecurity.authc.pam.ModularRealmAuthenticator(var4);
    org.jsecurity.subject.SimplePrincipalCollection var7 = new org.jsecurity.subject.SimplePrincipalCollection((java.util.Collection)var4, "org.jsecurity.authz.UnauthorizedException: org.jsecurity.session.ExpiredSessionException: ");
    org.jsecurity.io.ResourceException var11 = new org.jsecurity.io.ResourceException("hi!");
    org.jsecurity.authc.UnknownAccountException var12 = new org.jsecurity.authc.UnknownAccountException((java.lang.Throwable)var11);
    org.jsecurity.session.StoppedSessionException var13 = new org.jsecurity.session.StoppedSessionException("dd\uFFFD", (java.io.Serializable)var11);
    org.jsecurity.session.UnknownSessionException var14 = new org.jsecurity.session.UnknownSessionException("org.jsecurity.authz.UnauthorizedException: org.jsecurity.session.ExpiredSessionException: ", (java.lang.Throwable)var11);
    boolean var15 = var7.equals((java.lang.Object)var11);
    org.jsecurity.authz.aop.RoleAnnotationMethodInterceptor var16 = new org.jsecurity.authz.aop.RoleAnnotationMethodInterceptor();
    org.jsecurity.aop.AnnotationHandler var17 = var16.getHandler();
    java.lang.Class var18 = var17.getAnnotationClass();
    java.lang.Object var19 = var7.oneByType(var18);
    boolean var20 = var7.isEmpty();
    java.lang.String[] var25 = org.jsecurity.util.StringUtils.split("ZGT/", '4', '#', '4');
    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      var0.checkPermissions((org.jsecurity.subject.PrincipalCollection)var7, var25);
      fail("Expected exception of type java.lang.IllegalStateException");
    } catch (java.lang.IllegalStateException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var2);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var3);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var4);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var15 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var17);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var18);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var19);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var20 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var25);

  }

  public void test254() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest0.test254");


    org.jsecurity.crypto.BlowfishCipher var0 = new org.jsecurity.crypto.BlowfishCipher();
    byte[] var4 = new byte[] { (byte)100, (byte)100, (byte)(-1)};
    java.lang.String var5 = org.jsecurity.codec.CodecSupport.toString(var4);
    byte[] var7 = org.jsecurity.codec.Base64.decode("hi!");
    byte[] var8 = var0.encrypt(var4, var7);
    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      java.lang.String var10 = org.jsecurity.codec.CodecSupport.toString(var7, "5dd0c65d-1422-49c2-becb-9e8dca619ab3");
      fail("Expected exception of type org.jsecurity.codec.CodecException");
    } catch (org.jsecurity.codec.CodecException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var4);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var5 + "' != '" + "dd\uFFFD"+ "'", var5.equals("dd\uFFFD"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var7);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var8);

  }

  public void test255() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest0.test255");


    org.jsecurity.authc.AccountException var1 = new org.jsecurity.authc.AccountException("783ccd31-48a8-42dd-890f-df885a7baaff");

  }

  public void test256() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest0.test256");


    org.jsecurity.authz.ModularRealmAuthorizer var0 = new org.jsecurity.authz.ModularRealmAuthorizer();
    org.jsecurity.codec.CodecException var3 = new org.jsecurity.codec.CodecException("dd\uFFFD");
    org.jsecurity.authc.ConcurrentAccessException var4 = new org.jsecurity.authc.ConcurrentAccessException("org.jsecurity.authz.UnauthorizedException: org.jsecurity.session.ExpiredSessionException: ", (java.lang.Throwable)var3);
    org.jsecurity.subject.SimplePrincipalCollection var6 = new org.jsecurity.subject.SimplePrincipalCollection((java.lang.Object)var3, "");
    boolean var7 = var6.isEmpty();
    org.jsecurity.authz.SimpleAuthorizationInfo var8 = new org.jsecurity.authz.SimpleAuthorizationInfo();
    org.jsecurity.session.UnknownSessionException var13 = new org.jsecurity.session.UnknownSessionException("dd\uFFFD", (java.io.Serializable)100.0f);
    org.jsecurity.subject.SubjectException var14 = new org.jsecurity.subject.SubjectException("dd\uFFFD", (java.lang.Throwable)var13);
    org.jsecurity.io.SerializationException var15 = new org.jsecurity.io.SerializationException("", (java.lang.Throwable)var14);
    java.lang.Throwable[] var16 = var14.getSuppressed();
    java.util.Set var17 = org.jsecurity.util.CollectionUtils.asSet((java.lang.Object[])var16);
    var8.setStringPermissions(var17);
    java.util.Set var19 = var8.getRoles();
    org.jsecurity.authz.SimpleAuthorizingAccount var20 = new org.jsecurity.authz.SimpleAuthorizingAccount();
    java.util.Set var21 = var20.getSimpleRoles();
    org.jsecurity.authz.SimpleRole var22 = new org.jsecurity.authz.SimpleRole();
    org.jsecurity.authz.SimpleAuthorizationInfo var23 = new org.jsecurity.authz.SimpleAuthorizationInfo();
    var23.addRole("a2b823b1e72eae2b727289df8a00a89df8a0bab6ad8a89c4c5c7a9b62a270000");
    org.jsecurity.session.UnknownSessionException var30 = new org.jsecurity.session.UnknownSessionException("dd\uFFFD", (java.io.Serializable)100.0f);
    org.jsecurity.subject.SubjectException var31 = new org.jsecurity.subject.SubjectException("dd\uFFFD", (java.lang.Throwable)var30);
    org.jsecurity.io.SerializationException var32 = new org.jsecurity.io.SerializationException("", (java.lang.Throwable)var31);
    java.lang.Throwable[] var33 = var31.getSuppressed();
    java.util.Set var34 = org.jsecurity.util.CollectionUtils.asSet((java.lang.Object[])var33);
    var23.addRoles((java.util.Collection)var34);
    var22.addAll((java.util.Collection)var34);
    org.jsecurity.authz.SimpleRole var38 = new org.jsecurity.authz.SimpleRole();
    org.jsecurity.authz.permission.WildcardPermission var41 = new org.jsecurity.authz.permission.WildcardPermission("hi!", false);
    boolean var42 = var38.isPermitted((org.jsecurity.authz.Permission)var41);
    org.jsecurity.session.InvalidSessionException var43 = new org.jsecurity.session.InvalidSessionException("org.jsecurity.config.ConfigurationException: dd\uFFFD", (java.io.Serializable)var41);
    org.jsecurity.authz.SimpleRole var44 = new org.jsecurity.authz.SimpleRole();
    org.jsecurity.authz.permission.WildcardPermission var47 = new org.jsecurity.authz.permission.WildcardPermission("hi!", false);
    boolean var48 = var44.isPermitted((org.jsecurity.authz.Permission)var47);
    boolean var49 = var41.implies((org.jsecurity.authz.Permission)var47);
    boolean var50 = var22.isPermitted((org.jsecurity.authz.Permission)var47);
    boolean var51 = var20.isPermitted((org.jsecurity.authz.Permission)var47);
    var8.addObjectPermission((org.jsecurity.authz.Permission)var47);
    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      var0.checkPermission((org.jsecurity.subject.PrincipalCollection)var6, (org.jsecurity.authz.Permission)var47);
      fail("Expected exception of type java.lang.IllegalStateException");
    } catch (java.lang.IllegalStateException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var7 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var16);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var17);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var19);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var21);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var33);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var34);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var42 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var48 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var49 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var50 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var51 == false);

  }

  public void test257() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest0.test257");


    org.jsecurity.util.InstantiationException var1 = new org.jsecurity.util.InstantiationException();
    org.jsecurity.config.UnresolveableReferenceException var2 = new org.jsecurity.config.UnresolveableReferenceException("org.jsecurity.config.ConfigurationException: dd\uFFFD", (java.lang.Throwable)var1);
    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      org.jsecurity.crypto.hash.Sha512Hash var3 = new org.jsecurity.crypto.hash.Sha512Hash((java.lang.Object)var1);
      fail("Expected exception of type org.jsecurity.codec.CodecException");
    } catch (org.jsecurity.codec.CodecException e) {
      // Expected exception.
    }

  }

  public void test258() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest0.test258");


    org.jsecurity.realm.activedirectory.ActiveDirectoryRealm var0 = new org.jsecurity.realm.activedirectory.ActiveDirectoryRealm();
    var0.setPrincipalSuffix("");
    org.jsecurity.codec.CodecException var5 = new org.jsecurity.codec.CodecException("dd\uFFFD");
    org.jsecurity.authc.ConcurrentAccessException var6 = new org.jsecurity.authc.ConcurrentAccessException("org.jsecurity.authz.UnauthorizedException: org.jsecurity.session.ExpiredSessionException: ", (java.lang.Throwable)var5);
    org.jsecurity.subject.SimplePrincipalCollection var8 = new org.jsecurity.subject.SimplePrincipalCollection((java.lang.Object)var5, "");
    boolean var9 = var8.isEmpty();
    java.util.List var10 = var8.asList();
    org.jsecurity.authz.SimpleRole var11 = new org.jsecurity.authz.SimpleRole();
    org.jsecurity.authz.SimpleAuthorizationInfo var12 = new org.jsecurity.authz.SimpleAuthorizationInfo();
    var12.addRole("a2b823b1e72eae2b727289df8a00a89df8a0bab6ad8a89c4c5c7a9b62a270000");
    org.jsecurity.session.UnknownSessionException var19 = new org.jsecurity.session.UnknownSessionException("dd\uFFFD", (java.io.Serializable)100.0f);
    org.jsecurity.subject.SubjectException var20 = new org.jsecurity.subject.SubjectException("dd\uFFFD", (java.lang.Throwable)var19);
    org.jsecurity.io.SerializationException var21 = new org.jsecurity.io.SerializationException("", (java.lang.Throwable)var20);
    java.lang.Throwable[] var22 = var20.getSuppressed();
    java.util.Set var23 = org.jsecurity.util.CollectionUtils.asSet((java.lang.Object[])var22);
    var12.addRoles((java.util.Collection)var23);
    var11.addAll((java.util.Collection)var23);
    org.jsecurity.authz.SimpleRole var27 = new org.jsecurity.authz.SimpleRole();
    org.jsecurity.authz.permission.WildcardPermission var30 = new org.jsecurity.authz.permission.WildcardPermission("hi!", false);
    boolean var31 = var27.isPermitted((org.jsecurity.authz.Permission)var30);
    org.jsecurity.session.InvalidSessionException var32 = new org.jsecurity.session.InvalidSessionException("org.jsecurity.config.ConfigurationException: dd\uFFFD", (java.io.Serializable)var30);
    org.jsecurity.authz.SimpleRole var33 = new org.jsecurity.authz.SimpleRole();
    org.jsecurity.authz.permission.WildcardPermission var36 = new org.jsecurity.authz.permission.WildcardPermission("hi!", false);
    boolean var37 = var33.isPermitted((org.jsecurity.authz.Permission)var36);
    boolean var38 = var30.implies((org.jsecurity.authz.Permission)var36);
    boolean var39 = var11.isPermitted((org.jsecurity.authz.Permission)var36);
    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      boolean var40 = var0.isPermitted((org.jsecurity.subject.PrincipalCollection)var8, (org.jsecurity.authz.Permission)var36);
      fail("Expected exception of type java.util.NoSuchElementException");
    } catch (java.util.NoSuchElementException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var9 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var10);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var22);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var23);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var31 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var37 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var38 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var39 == false);

  }

  public void test259() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest0.test259");


    org.jsecurity.crypto.BlowfishCipher var0 = new org.jsecurity.crypto.BlowfishCipher();
    char[] var2 = new char[] { };
    org.jsecurity.authc.UsernamePasswordToken var4 = new org.jsecurity.authc.UsernamePasswordToken("hi!", var2, true);
    byte[] var5 = org.jsecurity.codec.Hex.decode(var2);
    byte[] var6 = new byte[] { };
    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      byte[] var7 = var0.encrypt(var5, var6);
      fail("Expected exception of type java.lang.IllegalArgumentException");
    } catch (java.lang.IllegalArgumentException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var2);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var5);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var6);

  }

  public void test260() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest0.test260");


    org.jsecurity.mgt.DefaultSecurityManager var0 = new org.jsecurity.mgt.DefaultSecurityManager();
    java.io.InputStream var2 = org.jsecurity.util.ClassUtils.getResourceAsStream("");
    java.lang.Object[] var3 = new java.lang.Object[] { var2};
    java.util.List var4 = org.jsecurity.util.CollectionUtils.asList(var3);
    org.jsecurity.authc.pam.ModularRealmAuthenticator var5 = new org.jsecurity.authc.pam.ModularRealmAuthenticator(var4);
    org.jsecurity.authc.pam.AllSuccessfulModularAuthenticationStrategy var6 = new org.jsecurity.authc.pam.AllSuccessfulModularAuthenticationStrategy();
    var5.setModularAuthenticationStrategy((org.jsecurity.authc.pam.ModularAuthenticationStrategy)var6);
    org.jsecurity.authz.SimpleAuthorizationInfo var8 = new org.jsecurity.authz.SimpleAuthorizationInfo();
    var8.addStringPermission("hi!");
    java.io.InputStream var12 = org.jsecurity.util.ClassUtils.getResourceAsStream("");
    java.lang.Object[] var13 = new java.lang.Object[] { var12};
    java.util.List var14 = org.jsecurity.util.CollectionUtils.asList(var13);
    var8.addRoles((java.util.Collection)var14);
    var5.setAuthenticationListeners((java.util.Collection)var14);
    var0.setSessionListeners((java.util.Collection)var14);
    org.jsecurity.authc.pam.ModularRealmAuthenticator var18 = new org.jsecurity.authc.pam.ModularRealmAuthenticator();
    org.jsecurity.authz.permission.InvalidPermissionStringException var21 = new org.jsecurity.authz.permission.InvalidPermissionStringException("", "dd\uFFFD");
    org.jsecurity.JSecurityException var23 = new org.jsecurity.JSecurityException("");
    org.jsecurity.authc.SimpleAuthenticationInfo var25 = new org.jsecurity.authc.SimpleAuthenticationInfo((java.lang.Object)var21, (java.lang.Object)"", "org.jsecurity.authz.UnauthorizedException: org.jsecurity.session.ExpiredSessionException: ");
    org.jsecurity.subject.PrincipalCollection var26 = var25.getPrincipals();
    var18.onLogout(var26);
    var0.setAuthenticator((org.jsecurity.authc.Authenticator)var18);
    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      var0.setRememberMeEncryptionCipherKeyBase64("org.jsecurity.authc.IncorrectCredentialsException: \u0000\u0000");
      fail("Expected exception of type java.lang.IllegalStateException");
    } catch (java.lang.IllegalStateException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var2);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var3);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var4);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var12);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var13);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var14);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var26);

  }

  public void test261() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest0.test261");


    org.jsecurity.realm.activedirectory.ActiveDirectoryRealm var0 = new org.jsecurity.realm.activedirectory.ActiveDirectoryRealm();
    org.jsecurity.authc.credential.Sha256CredentialsMatcher var1 = new org.jsecurity.authc.credential.Sha256CredentialsMatcher();
    var0.setCredentialsMatcher((org.jsecurity.authc.credential.CredentialsMatcher)var1);
    var0.initAuthorizationCache();
    org.jsecurity.authc.credential.Sha512CredentialsMatcher var4 = new org.jsecurity.authc.credential.Sha512CredentialsMatcher();
    var4.setHashIterations(1);
    var0.setCredentialsMatcher((org.jsecurity.authc.credential.CredentialsMatcher)var4);
    java.io.InputStream var9 = org.jsecurity.util.ClassUtils.getResourceAsStream("");
    java.lang.Object[] var10 = new java.lang.Object[] { var9};
    java.util.List var11 = org.jsecurity.util.CollectionUtils.asList(var10);
    org.jsecurity.authc.pam.ModularRealmAuthenticator var12 = new org.jsecurity.authc.pam.ModularRealmAuthenticator(var11);
    org.jsecurity.subject.SimplePrincipalCollection var14 = new org.jsecurity.subject.SimplePrincipalCollection((java.util.Collection)var11, "org.jsecurity.authz.UnauthorizedException: org.jsecurity.session.ExpiredSessionException: ");
    java.util.Set var15 = var14.getRealmNames();
    org.jsecurity.session.mgt.eis.MemorySessionDAO var16 = new org.jsecurity.session.mgt.eis.MemorySessionDAO();
    org.jsecurity.cache.Cache var17 = var16.getActiveSessionsCache();
    var16.setActiveSessionsCacheName("dd\uFFFD");
    java.util.Collection var20 = var16.getActiveSessions();
    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      boolean var21 = var0.isPermittedAll((org.jsecurity.subject.PrincipalCollection)var14, var20);
      fail("Expected exception of type java.util.NoSuchElementException");
    } catch (java.util.NoSuchElementException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var9);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var10);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var11);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var15);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var17);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var20);

  }

  public void test262() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest0.test262");


    java.io.InputStream var1 = org.jsecurity.util.ClassUtils.getResourceAsStream("");
    java.lang.Object[] var2 = new java.lang.Object[] { var1};
    java.util.List var3 = org.jsecurity.util.CollectionUtils.asList(var2);
    org.jsecurity.authc.pam.ModularRealmAuthenticator var4 = new org.jsecurity.authc.pam.ModularRealmAuthenticator(var3);
    org.jsecurity.subject.SimplePrincipalCollection var6 = new org.jsecurity.subject.SimplePrincipalCollection((java.util.Collection)var3, "org.jsecurity.authz.UnauthorizedException: org.jsecurity.session.ExpiredSessionException: ");
    org.jsecurity.session.UnknownSessionException var11 = new org.jsecurity.session.UnknownSessionException("dd\uFFFD", (java.io.Serializable)100.0f);
    org.jsecurity.session.SessionException var13 = new org.jsecurity.session.SessionException("dd\uFFFD", (java.lang.Throwable)var11, (java.io.Serializable)0);
    org.jsecurity.session.SessionException var14 = new org.jsecurity.session.SessionException("dd\uFFFD", (java.lang.Throwable)var11);
    var6.add((java.lang.Object)var14, "org.jsecurity.config.ConfigurationException: dd\uFFFD");
    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      org.jsecurity.crypto.hash.Sha384Hash var18 = new org.jsecurity.crypto.hash.Sha384Hash((java.lang.Object)var6, (java.lang.Object)"5dd0c65d-1422-49c2-becb-9e8dca619ab3");
      fail("Expected exception of type org.jsecurity.codec.CodecException");
    } catch (org.jsecurity.codec.CodecException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var1);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var2);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var3);

  }

  public void test263() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest0.test263");


    org.jsecurity.authc.ExpiredCredentialsException var1 = new org.jsecurity.authc.ExpiredCredentialsException("org.jsecurity.authc.IncorrectCredentialsException: \u0000\u0000");

  }

  public void test264() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest0.test264");


    org.jsecurity.jndi.JndiTemplate var0 = new org.jsecurity.jndi.JndiTemplate();
    java.util.Properties var1 = var0.getEnvironment();
    org.jsecurity.session.UnknownSessionException var8 = new org.jsecurity.session.UnknownSessionException("dd\uFFFD", (java.io.Serializable)100.0f);
    org.jsecurity.config.ConfigurationException var9 = new org.jsecurity.config.ConfigurationException("dd\uFFFD", (java.lang.Throwable)var8);
    org.jsecurity.session.ExpiredSessionException var11 = new org.jsecurity.session.ExpiredSessionException("", (java.lang.Throwable)var9, (java.io.Serializable)true);
    org.jsecurity.authc.pam.UnsupportedTokenException var12 = new org.jsecurity.authc.pam.UnsupportedTokenException((java.lang.Throwable)var11);
    org.jsecurity.authc.IncorrectCredentialsException var13 = new org.jsecurity.authc.IncorrectCredentialsException((java.lang.Throwable)var11);
    org.jsecurity.authc.IncorrectCredentialsException var14 = new org.jsecurity.authc.IncorrectCredentialsException("org.jsecurity.config.ConfigurationException: dd\uFFFD", (java.lang.Throwable)var13);
    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      var0.rebind("5dd0c65d-1422-49c2-becb-9e8dca619ab3", (java.lang.Object)var14);
      fail("Expected exception of type javax.naming.NoInitialContextException");
    } catch (javax.naming.NoInitialContextException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var1);

  }

  public void test265() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest0.test265");


    org.jsecurity.mgt.DefaultSecurityManager var0 = new org.jsecurity.mgt.DefaultSecurityManager();
    org.jsecurity.authz.permission.InvalidPermissionStringException var3 = new org.jsecurity.authz.permission.InvalidPermissionStringException("", "dd\uFFFD");
    org.jsecurity.JSecurityException var5 = new org.jsecurity.JSecurityException("");
    org.jsecurity.authc.SimpleAuthenticationInfo var7 = new org.jsecurity.authc.SimpleAuthenticationInfo((java.lang.Object)var3, (java.lang.Object)"", "org.jsecurity.authz.UnauthorizedException: org.jsecurity.session.ExpiredSessionException: ");
    org.jsecurity.subject.PrincipalCollection var8 = var7.getPrincipals();
    java.lang.String[] var12 = org.jsecurity.util.StringUtils.split("ZGT/", '#', '#');
    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      var0.checkPermissions(var8, var12);
      fail("Expected exception of type java.util.NoSuchElementException");
    } catch (java.util.NoSuchElementException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var8);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var12);

  }

  public void test266() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest0.test266");


    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      org.jsecurity.crypto.hash.Sha512Hash var1 = org.jsecurity.crypto.hash.Sha512Hash.fromHexString("org.jsecurity.authc.IncorrectCredentialsException: \u0000\u0000");
      fail("Expected exception of type java.lang.IllegalArgumentException");
    } catch (java.lang.IllegalArgumentException e) {
      // Expected exception.
    }

  }

  public void test267() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest0.test267");


    java.io.InputStream var1 = org.jsecurity.util.ClassUtils.getResourceAsStream("dd\uFFFD");
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var1);

  }

  public void test268() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest0.test268");


    org.jsecurity.realm.ldap.DefaultLdapContextFactory var0 = new org.jsecurity.realm.ldap.DefaultLdapContextFactory();
    org.jsecurity.io.IniResource var1 = new org.jsecurity.io.IniResource();
    var1.setCharsetName("org.jsecurity.authz.UnauthorizedException: org.jsecurity.session.ExpiredSessionException: ");
    java.util.Map var4 = var1.getSections();
    var0.setAdditionalEnvironment(var4);
    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      javax.naming.ldap.LdapContext var6 = var0.getSystemLdapContext();
      fail("Expected exception of type java.lang.IllegalStateException");
    } catch (java.lang.IllegalStateException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var4);

  }

  public void test269() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest0.test269");


    java.io.InputStream var1 = org.jsecurity.util.ClassUtils.getResourceAsStream("");
    java.lang.Object[] var2 = new java.lang.Object[] { var1};
    java.util.List var3 = org.jsecurity.util.CollectionUtils.asList(var2);
    org.jsecurity.authc.pam.ModularRealmAuthenticator var4 = new org.jsecurity.authc.pam.ModularRealmAuthenticator(var3);
    org.jsecurity.realm.text.TextConfigurationRealm var5 = new org.jsecurity.realm.text.TextConfigurationRealm();
    java.io.InputStream var7 = org.jsecurity.util.ClassUtils.getResourceAsStream("");
    java.lang.Object[] var8 = new java.lang.Object[] { var7};
    java.util.List var9 = org.jsecurity.util.CollectionUtils.asList(var8);
    org.jsecurity.authc.pam.ModularRealmAuthenticator var10 = new org.jsecurity.authc.pam.ModularRealmAuthenticator(var9);
    org.jsecurity.subject.SimplePrincipalCollection var12 = new org.jsecurity.subject.SimplePrincipalCollection((java.util.Collection)var9, "org.jsecurity.authz.UnauthorizedException: org.jsecurity.session.ExpiredSessionException: ");
    org.jsecurity.session.UnknownSessionException var17 = new org.jsecurity.session.UnknownSessionException("dd\uFFFD", (java.io.Serializable)100.0f);
    org.jsecurity.session.SessionException var19 = new org.jsecurity.session.SessionException("dd\uFFFD", (java.lang.Throwable)var17, (java.io.Serializable)0);
    org.jsecurity.session.SessionException var20 = new org.jsecurity.session.SessionException("dd\uFFFD", (java.lang.Throwable)var17);
    var12.add((java.lang.Object)var20, "org.jsecurity.config.ConfigurationException: dd\uFFFD");
    var5.onLogout((org.jsecurity.subject.PrincipalCollection)var12);
    org.jsecurity.cache.HashtableCacheManager var24 = new org.jsecurity.cache.HashtableCacheManager();
    org.jsecurity.cache.Cache var26 = var24.getCache("\u0000\u0000");
    var5.setAuthorizationCache(var26);
    org.jsecurity.codec.CodecException var30 = new org.jsecurity.codec.CodecException("dd\uFFFD");
    org.jsecurity.authc.ConcurrentAccessException var31 = new org.jsecurity.authc.ConcurrentAccessException("org.jsecurity.authz.UnauthorizedException: org.jsecurity.session.ExpiredSessionException: ", (java.lang.Throwable)var30);
    org.jsecurity.subject.SimplePrincipalCollection var33 = new org.jsecurity.subject.SimplePrincipalCollection((java.lang.Object)var30, "");
    var5.onLogout((org.jsecurity.subject.PrincipalCollection)var33);
    var4.setRealm((org.jsecurity.realm.Realm)var5);
    org.jsecurity.authc.pam.ModularRealmAuthenticator var37 = new org.jsecurity.authc.pam.ModularRealmAuthenticator();
    org.jsecurity.authz.permission.InvalidPermissionStringException var40 = new org.jsecurity.authz.permission.InvalidPermissionStringException("", "dd\uFFFD");
    org.jsecurity.JSecurityException var42 = new org.jsecurity.JSecurityException("");
    org.jsecurity.authc.SimpleAuthenticationInfo var44 = new org.jsecurity.authc.SimpleAuthenticationInfo((java.lang.Object)var40, (java.lang.Object)"", "org.jsecurity.authz.UnauthorizedException: org.jsecurity.session.ExpiredSessionException: ");
    org.jsecurity.subject.PrincipalCollection var45 = var44.getPrincipals();
    var37.onLogout(var45);
    org.jsecurity.session.SessionException var47 = new org.jsecurity.session.SessionException("\uFFFD\uFFFD#\uFFFD\uFFFD.\uFFFD+rr\uFFFD\u07CA\u0000\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\u01E9\uFFFD*'\u0000\u0000", (java.io.Serializable)var45);
    org.jsecurity.mgt.DefaultSecurityManager var48 = new org.jsecurity.mgt.DefaultSecurityManager();
    java.io.InputStream var50 = org.jsecurity.util.ClassUtils.getResourceAsStream("");
    java.lang.Object[] var51 = new java.lang.Object[] { var50};
    java.util.List var52 = org.jsecurity.util.CollectionUtils.asList(var51);
    org.jsecurity.authc.pam.ModularRealmAuthenticator var53 = new org.jsecurity.authc.pam.ModularRealmAuthenticator(var52);
    org.jsecurity.authc.pam.AllSuccessfulModularAuthenticationStrategy var54 = new org.jsecurity.authc.pam.AllSuccessfulModularAuthenticationStrategy();
    var53.setModularAuthenticationStrategy((org.jsecurity.authc.pam.ModularAuthenticationStrategy)var54);
    org.jsecurity.authz.SimpleAuthorizationInfo var56 = new org.jsecurity.authz.SimpleAuthorizationInfo();
    var56.addStringPermission("hi!");
    java.io.InputStream var60 = org.jsecurity.util.ClassUtils.getResourceAsStream("");
    java.lang.Object[] var61 = new java.lang.Object[] { var60};
    java.util.List var62 = org.jsecurity.util.CollectionUtils.asList(var61);
    var56.addRoles((java.util.Collection)var62);
    var53.setAuthenticationListeners((java.util.Collection)var62);
    var48.setSessionListeners((java.util.Collection)var62);
    org.jsecurity.realm.text.TextConfigurationRealm var66 = new org.jsecurity.realm.text.TextConfigurationRealm();
    java.io.InputStream var68 = org.jsecurity.util.ClassUtils.getResourceAsStream("");
    java.lang.Object[] var69 = new java.lang.Object[] { var68};
    java.util.List var70 = org.jsecurity.util.CollectionUtils.asList(var69);
    org.jsecurity.authc.pam.ModularRealmAuthenticator var71 = new org.jsecurity.authc.pam.ModularRealmAuthenticator(var70);
    org.jsecurity.subject.SimplePrincipalCollection var73 = new org.jsecurity.subject.SimplePrincipalCollection((java.util.Collection)var70, "org.jsecurity.authz.UnauthorizedException: org.jsecurity.session.ExpiredSessionException: ");
    org.jsecurity.session.UnknownSessionException var78 = new org.jsecurity.session.UnknownSessionException("dd\uFFFD", (java.io.Serializable)100.0f);
    org.jsecurity.session.SessionException var80 = new org.jsecurity.session.SessionException("dd\uFFFD", (java.lang.Throwable)var78, (java.io.Serializable)0);
    org.jsecurity.session.SessionException var81 = new org.jsecurity.session.SessionException("dd\uFFFD", (java.lang.Throwable)var78);
    var73.add((java.lang.Object)var81, "org.jsecurity.config.ConfigurationException: dd\uFFFD");
    var66.onLogout((org.jsecurity.subject.PrincipalCollection)var73);
    org.jsecurity.authc.pam.FirstSuccessfulAuthenticationStrategy var85 = new org.jsecurity.authc.pam.FirstSuccessfulAuthenticationStrategy();
    org.jsecurity.authz.UnauthorizedException var87 = new org.jsecurity.authz.UnauthorizedException("org.jsecurity.config.ConfigurationException: dd\uFFFD");
    java.lang.Throwable[] var88 = var87.getSuppressed();
    java.util.List var89 = org.jsecurity.util.CollectionUtils.asList((java.lang.Object[])var88);
    org.jsecurity.authc.UsernamePasswordToken var90 = new org.jsecurity.authc.UsernamePasswordToken();
    java.lang.String var91 = var90.getUsername();
    java.net.InetAddress var92 = var90.getInetAddress();
    org.jsecurity.authc.AuthenticationInfo var93 = var85.beforeAllAttempts((java.util.Collection)var89, (org.jsecurity.authc.AuthenticationToken)var90);
    boolean[] var94 = var48.hasRoles((org.jsecurity.subject.PrincipalCollection)var73, var89);
    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      boolean[] var95 = var5.hasRoles(var45, var89);
      fail("Expected exception of type java.util.NoSuchElementException");
    } catch (java.util.NoSuchElementException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var1);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var2);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var3);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var7);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var8);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var9);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var26);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var45);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var50);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var51);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var52);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var60);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var61);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var62);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var68);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var69);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var70);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var88);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var89);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var91);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var92);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var93);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var94);

  }

  public void test270() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest0.test270");


    org.jsecurity.session.mgt.eis.MemorySessionDAO var0 = new org.jsecurity.session.mgt.eis.MemorySessionDAO();
    org.jsecurity.cache.Cache var1 = var0.getActiveSessionsCache();
    org.jsecurity.authc.ExpiredCredentialsException var3 = new org.jsecurity.authc.ExpiredCredentialsException();
    org.jsecurity.session.ExpiredSessionException var4 = new org.jsecurity.session.ExpiredSessionException("", (java.lang.Throwable)var3);
    org.jsecurity.authz.UnauthorizedException var5 = new org.jsecurity.authz.UnauthorizedException((java.lang.Throwable)var4);
    var4.setSessionId((java.io.Serializable)100.0f);
    org.jsecurity.session.ExpiredSessionException var8 = new org.jsecurity.session.ExpiredSessionException((java.io.Serializable)100.0f);
    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      org.jsecurity.session.Session var9 = var0.readSession((java.io.Serializable)var8);
      fail("Expected exception of type org.jsecurity.session.UnknownSessionException");
    } catch (org.jsecurity.session.UnknownSessionException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var1);

  }

  public void test271() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest0.test271");


    org.jsecurity.authz.aop.GuestAnnotationHandler var0 = new org.jsecurity.authz.aop.GuestAnnotationHandler();
    org.jsecurity.realm.activedirectory.ActiveDirectoryRealm var1 = new org.jsecurity.realm.activedirectory.ActiveDirectoryRealm();
    var1.init();
    var1.setSystemPassword("dd\uFFFD");
    org.jsecurity.authc.credential.Sha512CredentialsMatcher var5 = new org.jsecurity.authc.credential.Sha512CredentialsMatcher();
    var1.setCredentialsMatcher((org.jsecurity.authc.credential.CredentialsMatcher)var5);
    var5.setHashSalted(false);
    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      org.jsecurity.crypto.hash.Sha256Hash var9 = new org.jsecurity.crypto.hash.Sha256Hash((java.lang.Object)var0, (java.lang.Object)false);
      fail("Expected exception of type org.jsecurity.codec.CodecException");
    } catch (org.jsecurity.codec.CodecException e) {
      // Expected exception.
    }

  }

  public void test272() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest0.test272");


    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      java.lang.Object var1 = org.jsecurity.util.ClassUtils.newInstance("dd\uFFFD");
      fail("Expected exception of type org.jsecurity.util.UnknownClassException");
    } catch (org.jsecurity.util.UnknownClassException e) {
      // Expected exception.
    }

  }

  public void test273() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest0.test273");


    org.jsecurity.mgt.DefaultSecurityManager var0 = new org.jsecurity.mgt.DefaultSecurityManager();
    org.jsecurity.authc.pam.AllSuccessfulModularAuthenticationStrategy var1 = new org.jsecurity.authc.pam.AllSuccessfulModularAuthenticationStrategy();
    org.jsecurity.authc.pam.AllSuccessfulModularAuthenticationStrategy var2 = new org.jsecurity.authc.pam.AllSuccessfulModularAuthenticationStrategy();
    char[] var4 = new char[] { };
    org.jsecurity.authc.UsernamePasswordToken var6 = new org.jsecurity.authc.UsernamePasswordToken("hi!", var4, true);
    org.jsecurity.authc.SimpleAccount var7 = new org.jsecurity.authc.SimpleAccount();
    var7.setCredentialsExpired(false);
    boolean var10 = var7.isLocked();
    org.jsecurity.authc.AuthenticationInfo var11 = var2.afterAllAttempts((org.jsecurity.authc.AuthenticationToken)var6, (org.jsecurity.authc.AuthenticationInfo)var7);
    char[] var15 = new char[] { '4', '#'};
    org.jsecurity.authc.UsernamePasswordToken var16 = new org.jsecurity.authc.UsernamePasswordToken("\u0000\u0000", var15);
    org.jsecurity.authc.SimpleAccount var17 = new org.jsecurity.authc.SimpleAccount();
    var17.setCredentialsExpired(false);
    var17.setCredentialsExpired(false);
    boolean var22 = var17.isCredentialsExpired();
    org.jsecurity.authc.AuthenticationInfo var23 = var2.afterAllAttempts((org.jsecurity.authc.AuthenticationToken)var16, (org.jsecurity.authc.AuthenticationInfo)var17);
    org.jsecurity.authz.UnauthenticatedException var27 = new org.jsecurity.authz.UnauthenticatedException();
    org.jsecurity.config.UnresolveableReferenceException var28 = new org.jsecurity.config.UnresolveableReferenceException("", (java.lang.Throwable)var27);
    org.jsecurity.cache.CacheException var29 = new org.jsecurity.cache.CacheException("org.jsecurity.config.ConfigurationException: dd\uFFFD", (java.lang.Throwable)var27);
    org.jsecurity.authc.SimpleAuthenticationInfo var31 = new org.jsecurity.authc.SimpleAuthenticationInfo((java.lang.Object)"org.jsecurity.config.ConfigurationException: dd\uFFFD", (java.lang.Object)var29, "a2b823b1e72eae2b727289df8a00a89df8a0bab6ad8a89c4c5c7a9b62a270000");
    org.jsecurity.subject.PrincipalCollection var32 = var31.getPrincipals();
    org.jsecurity.authc.AuthenticationInfo var33 = var1.afterAllAttempts((org.jsecurity.authc.AuthenticationToken)var16, (org.jsecurity.authc.AuthenticationInfo)var31);
    var0.setModularAuthenticationStrategy((org.jsecurity.authc.pam.ModularAuthenticationStrategy)var1);
    org.jsecurity.authc.UsernamePasswordToken var35 = new org.jsecurity.authc.UsernamePasswordToken();
    java.lang.String var36 = var35.getUsername();
    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      org.jsecurity.subject.Subject var37 = var0.login((org.jsecurity.authc.AuthenticationToken)var35);
      fail("Expected exception of type org.jsecurity.authc.AuthenticationException");
    } catch (org.jsecurity.authc.AuthenticationException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var4);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var10 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var11);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var15);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var22 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var23);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var32);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var33);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var36);

  }

  public void test274() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest0.test274");


    org.jsecurity.session.mgt.eis.MemorySessionDAO var0 = new org.jsecurity.session.mgt.eis.MemorySessionDAO();
    org.jsecurity.cache.Cache var1 = var0.getActiveSessionsCache();
    org.jsecurity.cache.CacheManager var2 = var0.getCacheManager();
    org.jsecurity.cache.HashtableCacheManager var3 = new org.jsecurity.cache.HashtableCacheManager();
    org.jsecurity.cache.Cache var5 = var3.getCache("\u0000\u0000");
    var0.setActiveSessionsCache(var5);
    java.io.InputStream var8 = org.jsecurity.util.ClassUtils.getResourceAsStream("");
    java.lang.Object[] var9 = new java.lang.Object[] { var8};
    java.util.List var10 = org.jsecurity.util.CollectionUtils.asList(var9);
    org.jsecurity.authc.pam.ModularRealmAuthenticator var11 = new org.jsecurity.authc.pam.ModularRealmAuthenticator(var10);
    org.jsecurity.authc.pam.AllSuccessfulModularAuthenticationStrategy var12 = new org.jsecurity.authc.pam.AllSuccessfulModularAuthenticationStrategy();
    var11.setModularAuthenticationStrategy((org.jsecurity.authc.pam.ModularAuthenticationStrategy)var12);
    org.jsecurity.authz.SimpleAuthorizationInfo var14 = new org.jsecurity.authz.SimpleAuthorizationInfo();
    var14.addStringPermission("hi!");
    java.io.InputStream var18 = org.jsecurity.util.ClassUtils.getResourceAsStream("");
    java.lang.Object[] var19 = new java.lang.Object[] { var18};
    java.util.List var20 = org.jsecurity.util.CollectionUtils.asList(var19);
    var14.addRoles((java.util.Collection)var20);
    var11.setAuthenticationListeners((java.util.Collection)var20);
    org.jsecurity.realm.activedirectory.ActiveDirectoryRealm var23 = new org.jsecurity.realm.activedirectory.ActiveDirectoryRealm();
    var23.setPrincipalSuffix("");
    var11.setRealm((org.jsecurity.realm.Realm)var23);
    org.jsecurity.cache.HashtableCacheManager var27 = new org.jsecurity.cache.HashtableCacheManager();
    org.jsecurity.cache.Cache var29 = var27.getCache("\u0000\u0000");
    var23.setAuthorizationCache(var29);
    var0.setActiveSessionsCache(var29);
    org.jsecurity.realm.text.TextConfigurationRealm var32 = new org.jsecurity.realm.text.TextConfigurationRealm();
    java.io.InputStream var34 = org.jsecurity.util.ClassUtils.getResourceAsStream("");
    java.lang.Object[] var35 = new java.lang.Object[] { var34};
    java.util.List var36 = org.jsecurity.util.CollectionUtils.asList(var35);
    org.jsecurity.authc.pam.ModularRealmAuthenticator var37 = new org.jsecurity.authc.pam.ModularRealmAuthenticator(var36);
    org.jsecurity.subject.SimplePrincipalCollection var39 = new org.jsecurity.subject.SimplePrincipalCollection((java.util.Collection)var36, "org.jsecurity.authz.UnauthorizedException: org.jsecurity.session.ExpiredSessionException: ");
    org.jsecurity.session.UnknownSessionException var44 = new org.jsecurity.session.UnknownSessionException("dd\uFFFD", (java.io.Serializable)100.0f);
    org.jsecurity.session.SessionException var46 = new org.jsecurity.session.SessionException("dd\uFFFD", (java.lang.Throwable)var44, (java.io.Serializable)0);
    org.jsecurity.session.SessionException var47 = new org.jsecurity.session.SessionException("dd\uFFFD", (java.lang.Throwable)var44);
    var39.add((java.lang.Object)var47, "org.jsecurity.config.ConfigurationException: dd\uFFFD");
    var32.onLogout((org.jsecurity.subject.PrincipalCollection)var39);
    org.jsecurity.cache.HashtableCacheManager var51 = new org.jsecurity.cache.HashtableCacheManager();
    org.jsecurity.cache.Cache var53 = var51.getCache("\u0000\u0000");
    var32.setAuthorizationCache(var53);
    var0.setActiveSessionsCache(var53);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var1);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var2);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var5);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var8);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var9);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var10);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var18);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var19);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var20);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var29);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var34);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var35);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var36);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var53);

  }

  public void test275() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest0.test275");


    org.jsecurity.realm.activedirectory.ActiveDirectoryRealm var0 = new org.jsecurity.realm.activedirectory.ActiveDirectoryRealm();
    org.jsecurity.authc.credential.Sha256CredentialsMatcher var1 = new org.jsecurity.authc.credential.Sha256CredentialsMatcher();
    var0.setCredentialsMatcher((org.jsecurity.authc.credential.CredentialsMatcher)var1);
    java.lang.String var3 = var0.getAuthorizationCacheName();
    var0.setUrl("hi!");
    org.jsecurity.realm.ldap.DefaultLdapContextFactory var6 = new org.jsecurity.realm.ldap.DefaultLdapContextFactory();
    var0.setLdapContextFactory((org.jsecurity.realm.ldap.LdapContextFactory)var6);
    org.jsecurity.codec.CodecException var10 = new org.jsecurity.codec.CodecException("dd\uFFFD");
    org.jsecurity.authc.ConcurrentAccessException var11 = new org.jsecurity.authc.ConcurrentAccessException("org.jsecurity.authz.UnauthorizedException: org.jsecurity.session.ExpiredSessionException: ", (java.lang.Throwable)var10);
    org.jsecurity.subject.SimplePrincipalCollection var13 = new org.jsecurity.subject.SimplePrincipalCollection((java.lang.Object)var10, "");
    org.jsecurity.authc.pam.FirstSuccessfulAuthenticationStrategy var14 = new org.jsecurity.authc.pam.FirstSuccessfulAuthenticationStrategy();
    org.jsecurity.authz.UnauthorizedException var16 = new org.jsecurity.authz.UnauthorizedException("org.jsecurity.config.ConfigurationException: dd\uFFFD");
    java.lang.Throwable[] var17 = var16.getSuppressed();
    java.util.List var18 = org.jsecurity.util.CollectionUtils.asList((java.lang.Object[])var17);
    org.jsecurity.authc.UsernamePasswordToken var19 = new org.jsecurity.authc.UsernamePasswordToken();
    java.lang.String var20 = var19.getUsername();
    java.net.InetAddress var21 = var19.getInetAddress();
    org.jsecurity.authc.AuthenticationInfo var22 = var14.beforeAllAttempts((java.util.Collection)var18, (org.jsecurity.authc.AuthenticationToken)var19);
    org.jsecurity.session.UnknownSessionException var27 = new org.jsecurity.session.UnknownSessionException("dd\uFFFD", (java.io.Serializable)100.0f);
    org.jsecurity.subject.SubjectException var28 = new org.jsecurity.subject.SubjectException("dd\uFFFD", (java.lang.Throwable)var27);
    org.jsecurity.io.SerializationException var29 = new org.jsecurity.io.SerializationException("", (java.lang.Throwable)var28);
    java.lang.Throwable[] var30 = var28.getSuppressed();
    java.util.Set var31 = org.jsecurity.util.CollectionUtils.asSet((java.lang.Object[])var30);
    org.jsecurity.authc.SimpleAccount var32 = new org.jsecurity.authc.SimpleAccount((org.jsecurity.subject.PrincipalCollection)var13, (java.lang.Object)var18, var31);
    org.jsecurity.authc.pam.FirstSuccessfulAuthenticationStrategy var33 = new org.jsecurity.authc.pam.FirstSuccessfulAuthenticationStrategy();
    org.jsecurity.authz.UnauthorizedException var35 = new org.jsecurity.authz.UnauthorizedException("org.jsecurity.config.ConfigurationException: dd\uFFFD");
    java.lang.Throwable[] var36 = var35.getSuppressed();
    java.util.List var37 = org.jsecurity.util.CollectionUtils.asList((java.lang.Object[])var36);
    org.jsecurity.authc.UsernamePasswordToken var38 = new org.jsecurity.authc.UsernamePasswordToken();
    java.lang.String var39 = var38.getUsername();
    java.net.InetAddress var40 = var38.getInetAddress();
    org.jsecurity.authc.AuthenticationInfo var41 = var33.beforeAllAttempts((java.util.Collection)var37, (org.jsecurity.authc.AuthenticationToken)var38);
    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      boolean[] var42 = var0.hasRoles((org.jsecurity.subject.PrincipalCollection)var13, var37);
      fail("Expected exception of type java.util.NoSuchElementException");
    } catch (java.util.NoSuchElementException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var3);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var17);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var18);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var20);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var21);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var22);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var30);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var31);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var36);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var37);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var39);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var40);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var41);

  }

  public void test276() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest0.test276");


    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      org.jsecurity.crypto.hash.Md5Hash var1 = org.jsecurity.crypto.hash.Md5Hash.fromHexString("5dd0c65d-1422-49c2-becb-9e8dca619ab3");
      fail("Expected exception of type java.lang.IllegalArgumentException");
    } catch (java.lang.IllegalArgumentException e) {
      // Expected exception.
    }

  }

  public void test277() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest0.test277");


    org.jsecurity.authz.SimpleAuthorizationInfo var0 = new org.jsecurity.authz.SimpleAuthorizationInfo();
    org.jsecurity.session.UnknownSessionException var5 = new org.jsecurity.session.UnknownSessionException("dd\uFFFD", (java.io.Serializable)100.0f);
    org.jsecurity.subject.SubjectException var6 = new org.jsecurity.subject.SubjectException("dd\uFFFD", (java.lang.Throwable)var5);
    org.jsecurity.io.SerializationException var7 = new org.jsecurity.io.SerializationException("", (java.lang.Throwable)var6);
    java.lang.Throwable[] var8 = var6.getSuppressed();
    java.util.Set var9 = org.jsecurity.util.CollectionUtils.asSet((java.lang.Object[])var8);
    var0.setStringPermissions(var9);
    org.jsecurity.authz.permission.WildcardPermissionResolver var11 = new org.jsecurity.authz.permission.WildcardPermissionResolver();
    org.jsecurity.authz.Permission var13 = var11.resolvePermission("hi!");
    var0.addObjectPermission(var13);
    org.jsecurity.authc.SimpleAccount var15 = new org.jsecurity.authc.SimpleAccount();
    var15.setCredentialsExpired(false);
    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      org.jsecurity.crypto.hash.Sha512Hash var19 = new org.jsecurity.crypto.hash.Sha512Hash((java.lang.Object)var0, (java.lang.Object)false, (-1));
      fail("Expected exception of type org.jsecurity.codec.CodecException");
    } catch (org.jsecurity.codec.CodecException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var8);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var9);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var13);

  }

  public void test278() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest0.test278");


    org.jsecurity.authz.SimpleAuthorizingAccount var0 = new org.jsecurity.authz.SimpleAuthorizingAccount();
    java.util.Set var1 = var0.getSimpleRoles();
    org.jsecurity.authz.SimpleRole var2 = new org.jsecurity.authz.SimpleRole();
    org.jsecurity.authz.SimpleAuthorizationInfo var3 = new org.jsecurity.authz.SimpleAuthorizationInfo();
    var3.addRole("a2b823b1e72eae2b727289df8a00a89df8a0bab6ad8a89c4c5c7a9b62a270000");
    org.jsecurity.session.UnknownSessionException var10 = new org.jsecurity.session.UnknownSessionException("dd\uFFFD", (java.io.Serializable)100.0f);
    org.jsecurity.subject.SubjectException var11 = new org.jsecurity.subject.SubjectException("dd\uFFFD", (java.lang.Throwable)var10);
    org.jsecurity.io.SerializationException var12 = new org.jsecurity.io.SerializationException("", (java.lang.Throwable)var11);
    java.lang.Throwable[] var13 = var11.getSuppressed();
    java.util.Set var14 = org.jsecurity.util.CollectionUtils.asSet((java.lang.Object[])var13);
    var3.addRoles((java.util.Collection)var14);
    var2.addAll((java.util.Collection)var14);
    org.jsecurity.authz.SimpleRole var18 = new org.jsecurity.authz.SimpleRole();
    org.jsecurity.authz.permission.WildcardPermission var21 = new org.jsecurity.authz.permission.WildcardPermission("hi!", false);
    boolean var22 = var18.isPermitted((org.jsecurity.authz.Permission)var21);
    org.jsecurity.session.InvalidSessionException var23 = new org.jsecurity.session.InvalidSessionException("org.jsecurity.config.ConfigurationException: dd\uFFFD", (java.io.Serializable)var21);
    org.jsecurity.authz.SimpleRole var24 = new org.jsecurity.authz.SimpleRole();
    org.jsecurity.authz.permission.WildcardPermission var27 = new org.jsecurity.authz.permission.WildcardPermission("hi!", false);
    boolean var28 = var24.isPermitted((org.jsecurity.authz.Permission)var27);
    boolean var29 = var21.implies((org.jsecurity.authz.Permission)var27);
    boolean var30 = var2.isPermitted((org.jsecurity.authz.Permission)var27);
    boolean var31 = var0.isPermitted((org.jsecurity.authz.Permission)var27);
    var0.addRole("org.jsecurity.authc.IncorrectCredentialsException: \u0000\u0000");
    org.jsecurity.realm.activedirectory.ActiveDirectoryRealm var35 = new org.jsecurity.realm.activedirectory.ActiveDirectoryRealm();
    org.jsecurity.authc.credential.Sha256CredentialsMatcher var36 = new org.jsecurity.authc.credential.Sha256CredentialsMatcher();
    var35.setCredentialsMatcher((org.jsecurity.authc.credential.CredentialsMatcher)var36);
    java.lang.String var38 = var35.getAuthorizationCacheName();
    var35.setPrincipalSuffix("org.jsecurity.config.ConfigurationException: dd\uFFFD");
    org.jsecurity.authz.permission.PermissionResolver var41 = var35.getPermissionResolver();
    java.util.Set var42 = org.jsecurity.util.PermissionUtils.resolveDelimitedPermissions("NfxhYN7ItBfRAmDBmprtU73ghfEEPpcDJrHPkZ06wiY=", var41);
    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      var0.addRoles(var42);
      fail("Expected exception of type java.lang.ClassCastException");
    } catch (java.lang.ClassCastException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var1);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var13);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var14);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var22 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var28 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var29 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var30 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var31 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var38);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var41);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var42);

  }

  public void test279() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest0.test279");


    org.jsecurity.authc.ConcurrentAccessException var1 = new org.jsecurity.authc.ConcurrentAccessException();
    org.jsecurity.authz.HostUnauthorizedException var2 = new org.jsecurity.authz.HostUnauthorizedException("org.jsecurity.authc.CredentialsException: 783ccd31-48a8-42dd-890f-df885a7baaff", (java.lang.Throwable)var1);
    java.net.InetAddress var3 = var2.getHostAddress();
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var3);

  }

  public void test280() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest0.test280");


    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      org.jsecurity.crypto.hash.Sha256Hash var1 = org.jsecurity.crypto.hash.Sha256Hash.fromHexString("783ccd31-48a8-42dd-890f-df885a7baaff");
      fail("Expected exception of type java.lang.IllegalArgumentException");
    } catch (java.lang.IllegalArgumentException e) {
      // Expected exception.
    }

  }

  public void test281() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest0.test281");


    org.jsecurity.authz.ModularRealmAuthorizer var0 = new org.jsecurity.authz.ModularRealmAuthorizer();
    org.jsecurity.codec.CodecException var3 = new org.jsecurity.codec.CodecException("dd\uFFFD");
    org.jsecurity.authc.ConcurrentAccessException var4 = new org.jsecurity.authc.ConcurrentAccessException("org.jsecurity.authz.UnauthorizedException: org.jsecurity.session.ExpiredSessionException: ", (java.lang.Throwable)var3);
    org.jsecurity.subject.SimplePrincipalCollection var6 = new org.jsecurity.subject.SimplePrincipalCollection((java.lang.Object)var3, "");
    boolean var7 = var6.isEmpty();
    java.util.List var8 = var6.asList();
    java.lang.String[] var11 = org.jsecurity.util.StringUtils.split("org.jsecurity.config.ConfigurationException: dd\uFFFD", '#');
    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      boolean var12 = var0.isPermittedAll((org.jsecurity.subject.PrincipalCollection)var6, var11);
      fail("Expected exception of type java.lang.IllegalStateException");
    } catch (java.lang.IllegalStateException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var7 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var8);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var11);

  }

  public void test282() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest0.test282");


    org.jsecurity.session.SessionException var1 = new org.jsecurity.session.SessionException("a2b823b1e72eae2b727289df8a00a89df8a0bab6ad8a89c4c5c7a9b62a270000");
    org.jsecurity.session.ExpiredSessionException var3 = new org.jsecurity.session.ExpiredSessionException((java.io.Serializable)(-1));
    org.jsecurity.authc.DisabledAccountException var4 = new org.jsecurity.authc.DisabledAccountException((java.lang.Throwable)var3);
    var1.addSuppressed((java.lang.Throwable)var4);
    org.jsecurity.authc.ExpiredCredentialsException var6 = new org.jsecurity.authc.ExpiredCredentialsException((java.lang.Throwable)var1);

  }

  public void test283() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest0.test283");


    org.jsecurity.io.ResourceException var3 = new org.jsecurity.io.ResourceException("hi!");
    org.jsecurity.codec.CodecException var4 = new org.jsecurity.codec.CodecException((java.lang.Throwable)var3);
    org.jsecurity.JSecurityException var5 = new org.jsecurity.JSecurityException("a2b823b1e72eae2b727289df8a00a89df8a0bab6ad8a89c4c5c7a9b62a270000", (java.lang.Throwable)var3);
    org.jsecurity.session.UnknownSessionException var6 = new org.jsecurity.session.UnknownSessionException((java.lang.Throwable)var5);
    org.jsecurity.authc.IncorrectCredentialsException var7 = new org.jsecurity.authc.IncorrectCredentialsException((java.lang.Throwable)var5);
    org.jsecurity.authz.UnauthorizedException var8 = new org.jsecurity.authz.UnauthorizedException("NfxhYN7ItBfRAmDBmprtU73ghfEEPpcDJrHPkZ06wiY=", (java.lang.Throwable)var5);

  }

  public void test284() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest0.test284");


    org.jsecurity.authc.LockedAccountException var1 = new org.jsecurity.authc.LockedAccountException("\u0000\u0000");

  }

  public void test285() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest0.test285");


    org.jsecurity.realm.text.TextConfigurationRealm var0 = new org.jsecurity.realm.text.TextConfigurationRealm();
    org.jsecurity.realm.text.TextConfigurationRealm var1 = new org.jsecurity.realm.text.TextConfigurationRealm();
    java.io.InputStream var3 = org.jsecurity.util.ClassUtils.getResourceAsStream("");
    java.lang.Object[] var4 = new java.lang.Object[] { var3};
    java.util.List var5 = org.jsecurity.util.CollectionUtils.asList(var4);
    org.jsecurity.authc.pam.ModularRealmAuthenticator var6 = new org.jsecurity.authc.pam.ModularRealmAuthenticator(var5);
    org.jsecurity.subject.SimplePrincipalCollection var8 = new org.jsecurity.subject.SimplePrincipalCollection((java.util.Collection)var5, "org.jsecurity.authz.UnauthorizedException: org.jsecurity.session.ExpiredSessionException: ");
    org.jsecurity.session.UnknownSessionException var13 = new org.jsecurity.session.UnknownSessionException("dd\uFFFD", (java.io.Serializable)100.0f);
    org.jsecurity.session.SessionException var15 = new org.jsecurity.session.SessionException("dd\uFFFD", (java.lang.Throwable)var13, (java.io.Serializable)0);
    org.jsecurity.session.SessionException var16 = new org.jsecurity.session.SessionException("dd\uFFFD", (java.lang.Throwable)var13);
    var8.add((java.lang.Object)var16, "org.jsecurity.config.ConfigurationException: dd\uFFFD");
    var1.onLogout((org.jsecurity.subject.PrincipalCollection)var8);
    java.util.Collection var21 = var8.fromRealm("\u0000\u0000\u0000");
    var0.onLogout((org.jsecurity.subject.PrincipalCollection)var8);
    java.util.Set var23 = var8.asSet();
    org.jsecurity.authz.ModularRealmAuthorizer var24 = new org.jsecurity.authz.ModularRealmAuthorizer((java.util.Collection)var23);
    org.jsecurity.realm.text.TextConfigurationRealm var25 = new org.jsecurity.realm.text.TextConfigurationRealm();
    java.io.InputStream var27 = org.jsecurity.util.ClassUtils.getResourceAsStream("");
    java.lang.Object[] var28 = new java.lang.Object[] { var27};
    java.util.List var29 = org.jsecurity.util.CollectionUtils.asList(var28);
    org.jsecurity.authc.pam.ModularRealmAuthenticator var30 = new org.jsecurity.authc.pam.ModularRealmAuthenticator(var29);
    org.jsecurity.subject.SimplePrincipalCollection var32 = new org.jsecurity.subject.SimplePrincipalCollection((java.util.Collection)var29, "org.jsecurity.authz.UnauthorizedException: org.jsecurity.session.ExpiredSessionException: ");
    org.jsecurity.session.UnknownSessionException var37 = new org.jsecurity.session.UnknownSessionException("dd\uFFFD", (java.io.Serializable)100.0f);
    org.jsecurity.session.SessionException var39 = new org.jsecurity.session.SessionException("dd\uFFFD", (java.lang.Throwable)var37, (java.io.Serializable)0);
    org.jsecurity.session.SessionException var40 = new org.jsecurity.session.SessionException("dd\uFFFD", (java.lang.Throwable)var37);
    var32.add((java.lang.Object)var40, "org.jsecurity.config.ConfigurationException: dd\uFFFD");
    var25.onLogout((org.jsecurity.subject.PrincipalCollection)var32);
    java.util.Set var45 = org.jsecurity.util.PermissionUtils.toPermissionStrings("org.jsecurity.config.ConfigurationException: dd\uFFFD");
    org.jsecurity.authz.SimpleAuthorizationInfo var46 = new org.jsecurity.authz.SimpleAuthorizationInfo(var45);
    org.jsecurity.authz.SimpleAuthorizingAccount var47 = new org.jsecurity.authz.SimpleAuthorizingAccount((org.jsecurity.subject.PrincipalCollection)var32, (java.lang.Object)var45);
    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      var24.checkPermission((org.jsecurity.subject.PrincipalCollection)var32, "dd\uFFFD");
      fail("Expected exception of type java.lang.ClassCastException");
    } catch (java.lang.ClassCastException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var3);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var4);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var5);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var21);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var23);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var27);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var28);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var29);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var45);

  }

  public void test286() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest0.test286");


    org.jsecurity.crypto.hash.Md2Hash var1 = org.jsecurity.crypto.hash.Md2Hash.fromBase64String("a2b823b1e72eae2b727289df8a00a89df8a0bab6ad8a89c4c5c7a9b62a270000");
    org.jsecurity.authc.credential.Md2CredentialsMatcher var2 = new org.jsecurity.authc.credential.Md2CredentialsMatcher();
    org.jsecurity.authz.SimpleAuthorizingAccount var4 = new org.jsecurity.authz.SimpleAuthorizingAccount((java.lang.Object)"a2b823b1e72eae2b727289df8a00a89df8a0bab6ad8a89c4c5c7a9b62a270000", (java.lang.Object)var2, "");
    var4.addRole("5dd0c65d-1422-49c2-becb-9e8dca619ab3");
    org.jsecurity.codec.CodecException var9 = new org.jsecurity.codec.CodecException("dd\uFFFD");
    org.jsecurity.authc.ConcurrentAccessException var10 = new org.jsecurity.authc.ConcurrentAccessException("org.jsecurity.authz.UnauthorizedException: org.jsecurity.session.ExpiredSessionException: ", (java.lang.Throwable)var9);
    org.jsecurity.subject.SimplePrincipalCollection var12 = new org.jsecurity.subject.SimplePrincipalCollection((java.lang.Object)var9, "");
    boolean var13 = var12.isEmpty();
    java.util.List var14 = var12.asList();
    org.jsecurity.authc.pam.ModularRealmAuthenticator var15 = new org.jsecurity.authc.pam.ModularRealmAuthenticator(var14);
    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      boolean var16 = var4.isPermittedAll((java.util.Collection)var14);
      fail("Expected exception of type java.lang.ClassCastException");
    } catch (java.lang.ClassCastException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var13 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var14);

  }

  public void test287() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest0.test287");


    org.jsecurity.session.StoppedSessionException var1 = new org.jsecurity.session.StoppedSessionException("\uFFFD\uFFFD#\uFFFD\uFFFD.\uFFFD+rr\uFFFD\u07CA\u0000\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\u01E9\uFFFD*'\u0000\u0000");

  }

  public void test288() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest0.test288");


    org.jsecurity.mgt.DefaultSecurityManager var0 = new org.jsecurity.mgt.DefaultSecurityManager();
    java.io.InputStream var2 = org.jsecurity.util.ClassUtils.getResourceAsStream("");
    java.lang.Object[] var3 = new java.lang.Object[] { var2};
    java.util.List var4 = org.jsecurity.util.CollectionUtils.asList(var3);
    org.jsecurity.authc.pam.ModularRealmAuthenticator var5 = new org.jsecurity.authc.pam.ModularRealmAuthenticator(var4);
    org.jsecurity.authc.pam.AllSuccessfulModularAuthenticationStrategy var6 = new org.jsecurity.authc.pam.AllSuccessfulModularAuthenticationStrategy();
    var5.setModularAuthenticationStrategy((org.jsecurity.authc.pam.ModularAuthenticationStrategy)var6);
    org.jsecurity.authz.SimpleAuthorizationInfo var8 = new org.jsecurity.authz.SimpleAuthorizationInfo();
    var8.addStringPermission("hi!");
    java.io.InputStream var12 = org.jsecurity.util.ClassUtils.getResourceAsStream("");
    java.lang.Object[] var13 = new java.lang.Object[] { var12};
    java.util.List var14 = org.jsecurity.util.CollectionUtils.asList(var13);
    var8.addRoles((java.util.Collection)var14);
    var5.setAuthenticationListeners((java.util.Collection)var14);
    var0.setSessionListeners((java.util.Collection)var14);
    org.jsecurity.authc.pam.ModularRealmAuthenticator var18 = new org.jsecurity.authc.pam.ModularRealmAuthenticator();
    org.jsecurity.authz.permission.InvalidPermissionStringException var21 = new org.jsecurity.authz.permission.InvalidPermissionStringException("", "dd\uFFFD");
    org.jsecurity.JSecurityException var23 = new org.jsecurity.JSecurityException("");
    org.jsecurity.authc.SimpleAuthenticationInfo var25 = new org.jsecurity.authc.SimpleAuthenticationInfo((java.lang.Object)var21, (java.lang.Object)"", "org.jsecurity.authz.UnauthorizedException: org.jsecurity.session.ExpiredSessionException: ");
    org.jsecurity.subject.PrincipalCollection var26 = var25.getPrincipals();
    var18.onLogout(var26);
    var0.setAuthenticator((org.jsecurity.authc.Authenticator)var18);
    org.jsecurity.codec.CodecException var31 = new org.jsecurity.codec.CodecException("dd\uFFFD");
    org.jsecurity.authc.ConcurrentAccessException var32 = new org.jsecurity.authc.ConcurrentAccessException("org.jsecurity.authz.UnauthorizedException: org.jsecurity.session.ExpiredSessionException: ", (java.lang.Throwable)var31);
    org.jsecurity.subject.SimplePrincipalCollection var34 = new org.jsecurity.subject.SimplePrincipalCollection((java.lang.Object)var31, "");
    org.jsecurity.authc.pam.FirstSuccessfulAuthenticationStrategy var35 = new org.jsecurity.authc.pam.FirstSuccessfulAuthenticationStrategy();
    org.jsecurity.authz.UnauthorizedException var37 = new org.jsecurity.authz.UnauthorizedException("org.jsecurity.config.ConfigurationException: dd\uFFFD");
    java.lang.Throwable[] var38 = var37.getSuppressed();
    java.util.List var39 = org.jsecurity.util.CollectionUtils.asList((java.lang.Object[])var38);
    org.jsecurity.authc.UsernamePasswordToken var40 = new org.jsecurity.authc.UsernamePasswordToken();
    java.lang.String var41 = var40.getUsername();
    java.net.InetAddress var42 = var40.getInetAddress();
    org.jsecurity.authc.AuthenticationInfo var43 = var35.beforeAllAttempts((java.util.Collection)var39, (org.jsecurity.authc.AuthenticationToken)var40);
    org.jsecurity.session.UnknownSessionException var48 = new org.jsecurity.session.UnknownSessionException("dd\uFFFD", (java.io.Serializable)100.0f);
    org.jsecurity.subject.SubjectException var49 = new org.jsecurity.subject.SubjectException("dd\uFFFD", (java.lang.Throwable)var48);
    org.jsecurity.io.SerializationException var50 = new org.jsecurity.io.SerializationException("", (java.lang.Throwable)var49);
    java.lang.Throwable[] var51 = var49.getSuppressed();
    java.util.Set var52 = org.jsecurity.util.CollectionUtils.asSet((java.lang.Object[])var51);
    org.jsecurity.authc.SimpleAccount var53 = new org.jsecurity.authc.SimpleAccount((org.jsecurity.subject.PrincipalCollection)var34, (java.lang.Object)var39, var52);
    java.io.InputStream var55 = org.jsecurity.util.ClassUtils.getResourceAsStream("");
    java.lang.Object[] var56 = new java.lang.Object[] { var55};
    java.util.List var57 = org.jsecurity.util.CollectionUtils.asList(var56);
    org.jsecurity.authc.pam.ModularRealmAuthenticator var58 = new org.jsecurity.authc.pam.ModularRealmAuthenticator(var57);
    org.jsecurity.subject.SimplePrincipalCollection var60 = new org.jsecurity.subject.SimplePrincipalCollection((java.util.Collection)var57, "org.jsecurity.authz.UnauthorizedException: org.jsecurity.session.ExpiredSessionException: ");
    org.jsecurity.io.ResourceException var64 = new org.jsecurity.io.ResourceException("hi!");
    org.jsecurity.authc.UnknownAccountException var65 = new org.jsecurity.authc.UnknownAccountException((java.lang.Throwable)var64);
    org.jsecurity.session.StoppedSessionException var66 = new org.jsecurity.session.StoppedSessionException("dd\uFFFD", (java.io.Serializable)var64);
    org.jsecurity.session.UnknownSessionException var67 = new org.jsecurity.session.UnknownSessionException("org.jsecurity.authz.UnauthorizedException: org.jsecurity.session.ExpiredSessionException: ", (java.lang.Throwable)var64);
    boolean var68 = var60.equals((java.lang.Object)var64);
    var34.addAll((org.jsecurity.subject.PrincipalCollection)var60);
    org.jsecurity.session.UnknownSessionException var74 = new org.jsecurity.session.UnknownSessionException("dd\uFFFD", (java.io.Serializable)100.0f);
    org.jsecurity.subject.SubjectException var75 = new org.jsecurity.subject.SubjectException("dd\uFFFD", (java.lang.Throwable)var74);
    org.jsecurity.io.SerializationException var76 = new org.jsecurity.io.SerializationException("", (java.lang.Throwable)var75);
    java.lang.Throwable[] var77 = var75.getSuppressed();
    java.util.List var78 = org.jsecurity.util.CollectionUtils.asList((java.lang.Object[])var77);
    boolean var79 = var0.isPermittedAll((org.jsecurity.subject.PrincipalCollection)var34, (java.util.Collection)var78);
    org.jsecurity.subject.DelegatingSubject var80 = new org.jsecurity.subject.DelegatingSubject((org.jsecurity.mgt.SecurityManager)var0);
    java.lang.String[] var85 = org.jsecurity.util.StringUtils.split("org.jsecurity.config.ConfigurationException: dd\uFFFD", '4', '4', '4');
    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      var80.checkPermissions(var85);
      fail("Expected exception of type org.jsecurity.authz.UnauthenticatedException");
    } catch (org.jsecurity.authz.UnauthenticatedException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var2);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var3);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var4);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var12);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var13);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var14);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var26);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var38);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var39);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var41);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var42);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var43);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var51);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var52);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var55);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var56);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var57);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var68 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var77);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var78);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var79 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var85);

  }

  public void test289() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest0.test289");


    org.jsecurity.authz.SimpleAuthorizingAccount var0 = new org.jsecurity.authz.SimpleAuthorizingAccount();
    java.util.Set var1 = var0.getSimpleRoles();
    org.jsecurity.authz.SimpleRole var2 = new org.jsecurity.authz.SimpleRole();
    org.jsecurity.authz.SimpleAuthorizationInfo var3 = new org.jsecurity.authz.SimpleAuthorizationInfo();
    var3.addRole("a2b823b1e72eae2b727289df8a00a89df8a0bab6ad8a89c4c5c7a9b62a270000");
    org.jsecurity.session.UnknownSessionException var10 = new org.jsecurity.session.UnknownSessionException("dd\uFFFD", (java.io.Serializable)100.0f);
    org.jsecurity.subject.SubjectException var11 = new org.jsecurity.subject.SubjectException("dd\uFFFD", (java.lang.Throwable)var10);
    org.jsecurity.io.SerializationException var12 = new org.jsecurity.io.SerializationException("", (java.lang.Throwable)var11);
    java.lang.Throwable[] var13 = var11.getSuppressed();
    java.util.Set var14 = org.jsecurity.util.CollectionUtils.asSet((java.lang.Object[])var13);
    var3.addRoles((java.util.Collection)var14);
    var2.addAll((java.util.Collection)var14);
    org.jsecurity.authz.SimpleRole var18 = new org.jsecurity.authz.SimpleRole();
    org.jsecurity.authz.permission.WildcardPermission var21 = new org.jsecurity.authz.permission.WildcardPermission("hi!", false);
    boolean var22 = var18.isPermitted((org.jsecurity.authz.Permission)var21);
    org.jsecurity.session.InvalidSessionException var23 = new org.jsecurity.session.InvalidSessionException("org.jsecurity.config.ConfigurationException: dd\uFFFD", (java.io.Serializable)var21);
    org.jsecurity.authz.SimpleRole var24 = new org.jsecurity.authz.SimpleRole();
    org.jsecurity.authz.permission.WildcardPermission var27 = new org.jsecurity.authz.permission.WildcardPermission("hi!", false);
    boolean var28 = var24.isPermitted((org.jsecurity.authz.Permission)var27);
    boolean var29 = var21.implies((org.jsecurity.authz.Permission)var27);
    boolean var30 = var2.isPermitted((org.jsecurity.authz.Permission)var27);
    boolean var31 = var0.isPermitted((org.jsecurity.authz.Permission)var27);
    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      var0.checkRole("783ccd31-48a8-42dd-890f-df885a7baaff");
      fail("Expected exception of type org.jsecurity.authz.UnauthorizedException");
    } catch (org.jsecurity.authz.UnauthorizedException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var1);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var13);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var14);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var22 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var28 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var29 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var30 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var31 == false);

  }

  public void test290() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest0.test290");


    char[] var3 = new char[] { '4', '#'};
    org.jsecurity.authc.UsernamePasswordToken var4 = new org.jsecurity.authc.UsernamePasswordToken("\u0000\u0000", var3);
    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      byte[] var5 = org.jsecurity.codec.Hex.decode(var3);
      fail("Expected exception of type java.lang.IllegalArgumentException");
    } catch (java.lang.IllegalArgumentException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var3);

  }

  public void test291() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest0.test291");


    org.jsecurity.mgt.DefaultSecurityManager var0 = new org.jsecurity.mgt.DefaultSecurityManager();
    java.io.InputStream var2 = org.jsecurity.util.ClassUtils.getResourceAsStream("");
    java.lang.Object[] var3 = new java.lang.Object[] { var2};
    java.util.List var4 = org.jsecurity.util.CollectionUtils.asList(var3);
    org.jsecurity.authc.pam.ModularRealmAuthenticator var5 = new org.jsecurity.authc.pam.ModularRealmAuthenticator(var4);
    org.jsecurity.authc.pam.AllSuccessfulModularAuthenticationStrategy var6 = new org.jsecurity.authc.pam.AllSuccessfulModularAuthenticationStrategy();
    var5.setModularAuthenticationStrategy((org.jsecurity.authc.pam.ModularAuthenticationStrategy)var6);
    org.jsecurity.authz.SimpleAuthorizationInfo var8 = new org.jsecurity.authz.SimpleAuthorizationInfo();
    var8.addStringPermission("hi!");
    java.io.InputStream var12 = org.jsecurity.util.ClassUtils.getResourceAsStream("");
    java.lang.Object[] var13 = new java.lang.Object[] { var12};
    java.util.List var14 = org.jsecurity.util.CollectionUtils.asList(var13);
    var8.addRoles((java.util.Collection)var14);
    var5.setAuthenticationListeners((java.util.Collection)var14);
    var0.setSessionListeners((java.util.Collection)var14);
    org.jsecurity.realm.text.TextConfigurationRealm var18 = new org.jsecurity.realm.text.TextConfigurationRealm();
    java.io.InputStream var20 = org.jsecurity.util.ClassUtils.getResourceAsStream("");
    java.lang.Object[] var21 = new java.lang.Object[] { var20};
    java.util.List var22 = org.jsecurity.util.CollectionUtils.asList(var21);
    org.jsecurity.authc.pam.ModularRealmAuthenticator var23 = new org.jsecurity.authc.pam.ModularRealmAuthenticator(var22);
    org.jsecurity.subject.SimplePrincipalCollection var25 = new org.jsecurity.subject.SimplePrincipalCollection((java.util.Collection)var22, "org.jsecurity.authz.UnauthorizedException: org.jsecurity.session.ExpiredSessionException: ");
    org.jsecurity.session.UnknownSessionException var30 = new org.jsecurity.session.UnknownSessionException("dd\uFFFD", (java.io.Serializable)100.0f);
    org.jsecurity.session.SessionException var32 = new org.jsecurity.session.SessionException("dd\uFFFD", (java.lang.Throwable)var30, (java.io.Serializable)0);
    org.jsecurity.session.SessionException var33 = new org.jsecurity.session.SessionException("dd\uFFFD", (java.lang.Throwable)var30);
    var25.add((java.lang.Object)var33, "org.jsecurity.config.ConfigurationException: dd\uFFFD");
    var18.onLogout((org.jsecurity.subject.PrincipalCollection)var25);
    org.jsecurity.authc.pam.FirstSuccessfulAuthenticationStrategy var37 = new org.jsecurity.authc.pam.FirstSuccessfulAuthenticationStrategy();
    org.jsecurity.authz.UnauthorizedException var39 = new org.jsecurity.authz.UnauthorizedException("org.jsecurity.config.ConfigurationException: dd\uFFFD");
    java.lang.Throwable[] var40 = var39.getSuppressed();
    java.util.List var41 = org.jsecurity.util.CollectionUtils.asList((java.lang.Object[])var40);
    org.jsecurity.authc.UsernamePasswordToken var42 = new org.jsecurity.authc.UsernamePasswordToken();
    java.lang.String var43 = var42.getUsername();
    java.net.InetAddress var44 = var42.getInetAddress();
    org.jsecurity.authc.AuthenticationInfo var45 = var37.beforeAllAttempts((java.util.Collection)var41, (org.jsecurity.authc.AuthenticationToken)var42);
    boolean[] var46 = var0.hasRoles((org.jsecurity.subject.PrincipalCollection)var25, var41);
    org.jsecurity.codec.CodecException var49 = new org.jsecurity.codec.CodecException("dd\uFFFD");
    org.jsecurity.authc.ConcurrentAccessException var50 = new org.jsecurity.authc.ConcurrentAccessException("org.jsecurity.authz.UnauthorizedException: org.jsecurity.session.ExpiredSessionException: ", (java.lang.Throwable)var49);
    org.jsecurity.subject.SimplePrincipalCollection var52 = new org.jsecurity.subject.SimplePrincipalCollection((java.lang.Object)var49, "");
    java.io.InputStream var54 = org.jsecurity.util.ClassUtils.getResourceAsStream("");
    java.lang.Object[] var55 = new java.lang.Object[] { var54};
    java.util.List var56 = org.jsecurity.util.CollectionUtils.asList(var55);
    org.jsecurity.authc.pam.ModularRealmAuthenticator var57 = new org.jsecurity.authc.pam.ModularRealmAuthenticator(var56);
    var52.addAll((java.util.Collection)var56, "\u0000\u0000");
    var0.setSessionListeners((java.util.Collection)var56);
    org.jsecurity.subject.Subject var61 = var0.getSubject();
    org.jsecurity.codec.CodecException var64 = new org.jsecurity.codec.CodecException("dd\uFFFD");
    org.jsecurity.authc.ConcurrentAccessException var65 = new org.jsecurity.authc.ConcurrentAccessException("org.jsecurity.authz.UnauthorizedException: org.jsecurity.session.ExpiredSessionException: ", (java.lang.Throwable)var64);
    org.jsecurity.subject.SimplePrincipalCollection var67 = new org.jsecurity.subject.SimplePrincipalCollection((java.lang.Object)var64, "");
    boolean var68 = var67.isEmpty();
    java.util.List var69 = var67.asList();
    var0.setSessionListeners((java.util.Collection)var69);
    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      var0.setRememberMeDecryptionCipherKeyBase64("hi!");
      fail("Expected exception of type java.lang.IllegalStateException");
    } catch (java.lang.IllegalStateException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var2);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var3);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var4);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var12);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var13);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var14);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var20);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var21);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var22);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var40);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var41);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var43);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var44);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var45);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var46);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var54);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var55);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var56);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var61);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var68 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var69);

  }

  public void test292() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest0.test292");


    org.jsecurity.codec.CodecException var2 = new org.jsecurity.codec.CodecException("dd\uFFFD");
    org.jsecurity.authc.ConcurrentAccessException var3 = new org.jsecurity.authc.ConcurrentAccessException("org.jsecurity.authz.UnauthorizedException: org.jsecurity.session.ExpiredSessionException: ", (java.lang.Throwable)var2);
    org.jsecurity.subject.SimplePrincipalCollection var5 = new org.jsecurity.subject.SimplePrincipalCollection((java.lang.Object)var2, "");
    org.jsecurity.authc.pam.FirstSuccessfulAuthenticationStrategy var6 = new org.jsecurity.authc.pam.FirstSuccessfulAuthenticationStrategy();
    org.jsecurity.authz.UnauthorizedException var8 = new org.jsecurity.authz.UnauthorizedException("org.jsecurity.config.ConfigurationException: dd\uFFFD");
    java.lang.Throwable[] var9 = var8.getSuppressed();
    java.util.List var10 = org.jsecurity.util.CollectionUtils.asList((java.lang.Object[])var9);
    org.jsecurity.authc.UsernamePasswordToken var11 = new org.jsecurity.authc.UsernamePasswordToken();
    java.lang.String var12 = var11.getUsername();
    java.net.InetAddress var13 = var11.getInetAddress();
    org.jsecurity.authc.AuthenticationInfo var14 = var6.beforeAllAttempts((java.util.Collection)var10, (org.jsecurity.authc.AuthenticationToken)var11);
    org.jsecurity.session.UnknownSessionException var19 = new org.jsecurity.session.UnknownSessionException("dd\uFFFD", (java.io.Serializable)100.0f);
    org.jsecurity.subject.SubjectException var20 = new org.jsecurity.subject.SubjectException("dd\uFFFD", (java.lang.Throwable)var19);
    org.jsecurity.io.SerializationException var21 = new org.jsecurity.io.SerializationException("", (java.lang.Throwable)var20);
    java.lang.Throwable[] var22 = var20.getSuppressed();
    java.util.Set var23 = org.jsecurity.util.CollectionUtils.asSet((java.lang.Object[])var22);
    org.jsecurity.authc.SimpleAccount var24 = new org.jsecurity.authc.SimpleAccount((org.jsecurity.subject.PrincipalCollection)var5, (java.lang.Object)var10, var23);
    var24.addStringPermission("org.jsecurity.config.ConfigurationException: dd\uFFFD");
    java.lang.String var27 = var24.toString();
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var9);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var10);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var12);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var13);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var14);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var22);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var23);

  }

  public void test293() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest0.test293");


    org.jsecurity.session.UnknownSessionException var7 = new org.jsecurity.session.UnknownSessionException("dd\uFFFD", (java.io.Serializable)100.0f);
    org.jsecurity.config.ConfigurationException var8 = new org.jsecurity.config.ConfigurationException("dd\uFFFD", (java.lang.Throwable)var7);
    org.jsecurity.session.ExpiredSessionException var10 = new org.jsecurity.session.ExpiredSessionException("", (java.lang.Throwable)var8, (java.io.Serializable)true);
    org.jsecurity.authc.pam.UnsupportedTokenException var11 = new org.jsecurity.authc.pam.UnsupportedTokenException((java.lang.Throwable)var10);
    org.jsecurity.authc.AccountException var12 = new org.jsecurity.authc.AccountException((java.lang.Throwable)var11);
    org.jsecurity.authz.UnauthorizedException var13 = new org.jsecurity.authz.UnauthorizedException("a2b823b1e72eae2b727289df8a00a89df8a0bab6ad8a89c4c5c7a9b62a270000", (java.lang.Throwable)var12);
    org.jsecurity.session.InvalidSessionException var14 = new org.jsecurity.session.InvalidSessionException((java.lang.Throwable)var12);
    org.jsecurity.config.ConfigurationException var15 = new org.jsecurity.config.ConfigurationException("\u0000\u0000", (java.lang.Throwable)var12);
    org.jsecurity.authc.UnknownAccountException var16 = new org.jsecurity.authc.UnknownAccountException((java.lang.Throwable)var15);
    org.jsecurity.io.SerializationException var17 = new org.jsecurity.io.SerializationException("\u0000\u0000\u0000", (java.lang.Throwable)var16);

  }

  public void test294() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest0.test294");


    org.jsecurity.authz.SimpleAuthorizationInfo var0 = new org.jsecurity.authz.SimpleAuthorizationInfo();
    org.jsecurity.session.UnknownSessionException var5 = new org.jsecurity.session.UnknownSessionException("dd\uFFFD", (java.io.Serializable)100.0f);
    org.jsecurity.subject.SubjectException var6 = new org.jsecurity.subject.SubjectException("dd\uFFFD", (java.lang.Throwable)var5);
    org.jsecurity.io.SerializationException var7 = new org.jsecurity.io.SerializationException("", (java.lang.Throwable)var6);
    java.lang.Throwable[] var8 = var6.getSuppressed();
    java.util.Set var9 = org.jsecurity.util.CollectionUtils.asSet((java.lang.Object[])var8);
    var0.setStringPermissions(var9);
    java.util.Set var11 = var0.getRoles();
    org.jsecurity.authz.SimpleAuthorizationInfo var12 = new org.jsecurity.authz.SimpleAuthorizationInfo();
    var12.addRole("a2b823b1e72eae2b727289df8a00a89df8a0bab6ad8a89c4c5c7a9b62a270000");
    org.jsecurity.session.UnknownSessionException var19 = new org.jsecurity.session.UnknownSessionException("dd\uFFFD", (java.io.Serializable)100.0f);
    org.jsecurity.subject.SubjectException var20 = new org.jsecurity.subject.SubjectException("dd\uFFFD", (java.lang.Throwable)var19);
    org.jsecurity.io.SerializationException var21 = new org.jsecurity.io.SerializationException("", (java.lang.Throwable)var20);
    java.lang.Throwable[] var22 = var20.getSuppressed();
    java.util.Set var23 = org.jsecurity.util.CollectionUtils.asSet((java.lang.Object[])var22);
    var12.addRoles((java.util.Collection)var23);
    var0.setRoles(var23);
    org.jsecurity.authz.SimpleAuthorizationInfo var26 = new org.jsecurity.authz.SimpleAuthorizationInfo();
    org.jsecurity.session.UnknownSessionException var31 = new org.jsecurity.session.UnknownSessionException("dd\uFFFD", (java.io.Serializable)100.0f);
    org.jsecurity.subject.SubjectException var32 = new org.jsecurity.subject.SubjectException("dd\uFFFD", (java.lang.Throwable)var31);
    org.jsecurity.io.SerializationException var33 = new org.jsecurity.io.SerializationException("", (java.lang.Throwable)var32);
    java.lang.Throwable[] var34 = var32.getSuppressed();
    java.util.Set var35 = org.jsecurity.util.CollectionUtils.asSet((java.lang.Object[])var34);
    var26.setStringPermissions(var35);
    java.util.Set var37 = var26.getRoles();
    org.jsecurity.authz.SimpleAuthorizationInfo var38 = new org.jsecurity.authz.SimpleAuthorizationInfo();
    var38.addRole("a2b823b1e72eae2b727289df8a00a89df8a0bab6ad8a89c4c5c7a9b62a270000");
    org.jsecurity.session.UnknownSessionException var45 = new org.jsecurity.session.UnknownSessionException("dd\uFFFD", (java.io.Serializable)100.0f);
    org.jsecurity.subject.SubjectException var46 = new org.jsecurity.subject.SubjectException("dd\uFFFD", (java.lang.Throwable)var45);
    org.jsecurity.io.SerializationException var47 = new org.jsecurity.io.SerializationException("", (java.lang.Throwable)var46);
    java.lang.Throwable[] var48 = var46.getSuppressed();
    java.util.Set var49 = org.jsecurity.util.CollectionUtils.asSet((java.lang.Object[])var48);
    var38.addRoles((java.util.Collection)var49);
    var26.setRoles(var49);
    var0.setRoles(var49);
    org.jsecurity.session.UnknownSessionException var58 = new org.jsecurity.session.UnknownSessionException("dd\uFFFD", (java.io.Serializable)100.0f);
    org.jsecurity.config.ConfigurationException var59 = new org.jsecurity.config.ConfigurationException("dd\uFFFD", (java.lang.Throwable)var58);
    org.jsecurity.session.ExpiredSessionException var61 = new org.jsecurity.session.ExpiredSessionException("", (java.lang.Throwable)var59, (java.io.Serializable)true);
    org.jsecurity.authc.pam.UnsupportedTokenException var62 = new org.jsecurity.authc.pam.UnsupportedTokenException((java.lang.Throwable)var61);
    org.jsecurity.authc.AccountException var63 = new org.jsecurity.authc.AccountException((java.lang.Throwable)var62);
    org.jsecurity.authc.DisabledAccountException var64 = new org.jsecurity.authc.DisabledAccountException((java.lang.Throwable)var62);
    org.jsecurity.session.ExpiredSessionException var65 = new org.jsecurity.session.ExpiredSessionException("dd\uFFFD", (java.io.Serializable)var62);
    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      org.jsecurity.authc.SimpleAccount var67 = new org.jsecurity.authc.SimpleAccount((java.util.Collection)var49, (java.lang.Object)"dd\uFFFD", "ZGT/");
      fail("Expected exception of type java.lang.IllegalArgumentException");
    } catch (java.lang.IllegalArgumentException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var8);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var9);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var11);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var22);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var23);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var34);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var35);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var37);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var48);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var49);

  }

  public void test295() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest0.test295");


    org.jsecurity.mgt.DefaultSecurityManager var0 = new org.jsecurity.mgt.DefaultSecurityManager();
    java.io.InputStream var2 = org.jsecurity.util.ClassUtils.getResourceAsStream("");
    java.lang.Object[] var3 = new java.lang.Object[] { var2};
    java.util.List var4 = org.jsecurity.util.CollectionUtils.asList(var3);
    org.jsecurity.authc.pam.ModularRealmAuthenticator var5 = new org.jsecurity.authc.pam.ModularRealmAuthenticator(var4);
    org.jsecurity.authc.pam.AllSuccessfulModularAuthenticationStrategy var6 = new org.jsecurity.authc.pam.AllSuccessfulModularAuthenticationStrategy();
    var5.setModularAuthenticationStrategy((org.jsecurity.authc.pam.ModularAuthenticationStrategy)var6);
    org.jsecurity.authz.SimpleAuthorizationInfo var8 = new org.jsecurity.authz.SimpleAuthorizationInfo();
    var8.addStringPermission("hi!");
    java.io.InputStream var12 = org.jsecurity.util.ClassUtils.getResourceAsStream("");
    java.lang.Object[] var13 = new java.lang.Object[] { var12};
    java.util.List var14 = org.jsecurity.util.CollectionUtils.asList(var13);
    var8.addRoles((java.util.Collection)var14);
    var5.setAuthenticationListeners((java.util.Collection)var14);
    var0.setSessionListeners((java.util.Collection)var14);
    org.jsecurity.authc.pam.ModularRealmAuthenticator var18 = new org.jsecurity.authc.pam.ModularRealmAuthenticator();
    org.jsecurity.authz.permission.InvalidPermissionStringException var21 = new org.jsecurity.authz.permission.InvalidPermissionStringException("", "dd\uFFFD");
    org.jsecurity.JSecurityException var23 = new org.jsecurity.JSecurityException("");
    org.jsecurity.authc.SimpleAuthenticationInfo var25 = new org.jsecurity.authc.SimpleAuthenticationInfo((java.lang.Object)var21, (java.lang.Object)"", "org.jsecurity.authz.UnauthorizedException: org.jsecurity.session.ExpiredSessionException: ");
    org.jsecurity.subject.PrincipalCollection var26 = var25.getPrincipals();
    var18.onLogout(var26);
    var0.setAuthenticator((org.jsecurity.authc.Authenticator)var18);
    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      var0.setRememberMeCipherKeyBase64("ZGT/");
      fail("Expected exception of type java.lang.IllegalStateException");
    } catch (java.lang.IllegalStateException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var2);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var3);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var4);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var12);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var13);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var14);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var26);

  }

  public void test296() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest0.test296");


    org.jsecurity.authz.aop.GuestAnnotationHandler var0 = new org.jsecurity.authz.aop.GuestAnnotationHandler();
    java.lang.Class var1 = var0.getAnnotationClass();
    java.util.Collection var2 = org.jsecurity.util.CollectionUtils.emptyCollection(var1);
    org.jsecurity.session.UnknownSessionException var9 = new org.jsecurity.session.UnknownSessionException("dd\uFFFD", (java.io.Serializable)100.0f);
    org.jsecurity.config.ConfigurationException var10 = new org.jsecurity.config.ConfigurationException("dd\uFFFD", (java.lang.Throwable)var9);
    org.jsecurity.session.ExpiredSessionException var12 = new org.jsecurity.session.ExpiredSessionException("", (java.lang.Throwable)var10, (java.io.Serializable)true);
    org.jsecurity.authc.pam.UnsupportedTokenException var13 = new org.jsecurity.authc.pam.UnsupportedTokenException((java.lang.Throwable)var12);
    org.jsecurity.authc.AccountException var14 = new org.jsecurity.authc.AccountException((java.lang.Throwable)var13);
    org.jsecurity.authz.UnauthorizedException var15 = new org.jsecurity.authz.UnauthorizedException("a2b823b1e72eae2b727289df8a00a89df8a0bab6ad8a89c4c5c7a9b62a270000", (java.lang.Throwable)var14);
    org.jsecurity.session.InvalidSessionException var16 = new org.jsecurity.session.InvalidSessionException((java.lang.Throwable)var14);
    org.jsecurity.config.ConfigurationException var17 = new org.jsecurity.config.ConfigurationException("\u0000\u0000", (java.lang.Throwable)var14);
    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      org.jsecurity.authc.SimpleAccount var19 = new org.jsecurity.authc.SimpleAccount(var2, (java.lang.Object)var17, "org.jsecurity.authc.IncorrectCredentialsException: \u0000\u0000");
      fail("Expected exception of type java.lang.IllegalArgumentException");
    } catch (java.lang.IllegalArgumentException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var1);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var2);

  }

  public void test297() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest0.test297");


    char[] var3 = new char[] { ' ', ' '};
    org.jsecurity.authc.UsernamePasswordToken var4 = new org.jsecurity.authc.UsernamePasswordToken("hi!", var3);
    char[] var8 = new char[] { '4', '#'};
    org.jsecurity.authc.UsernamePasswordToken var9 = new org.jsecurity.authc.UsernamePasswordToken("\u0000\u0000", var8);
    var4.setPassword(var8);
    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      byte[] var12 = org.jsecurity.codec.CodecSupport.toBytes(var8, "org.jsecurity.authz.UnauthorizedException: org.jsecurity.session.ExpiredSessionException: ");
      fail("Expected exception of type org.jsecurity.codec.CodecException");
    } catch (org.jsecurity.codec.CodecException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var3);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var8);

  }

  public void test298() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest0.test298");


    org.jsecurity.authc.AuthenticationException var1 = new org.jsecurity.authc.AuthenticationException("6464ff");

  }

  public void test299() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest0.test299");


    org.jsecurity.mgt.DefaultSecurityManager var0 = new org.jsecurity.mgt.DefaultSecurityManager();
    java.io.InputStream var2 = org.jsecurity.util.ClassUtils.getResourceAsStream("");
    java.lang.Object[] var3 = new java.lang.Object[] { var2};
    java.util.List var4 = org.jsecurity.util.CollectionUtils.asList(var3);
    org.jsecurity.authc.pam.ModularRealmAuthenticator var5 = new org.jsecurity.authc.pam.ModularRealmAuthenticator(var4);
    org.jsecurity.authc.pam.AllSuccessfulModularAuthenticationStrategy var6 = new org.jsecurity.authc.pam.AllSuccessfulModularAuthenticationStrategy();
    var5.setModularAuthenticationStrategy((org.jsecurity.authc.pam.ModularAuthenticationStrategy)var6);
    org.jsecurity.authz.SimpleAuthorizationInfo var8 = new org.jsecurity.authz.SimpleAuthorizationInfo();
    var8.addStringPermission("hi!");
    java.io.InputStream var12 = org.jsecurity.util.ClassUtils.getResourceAsStream("");
    java.lang.Object[] var13 = new java.lang.Object[] { var12};
    java.util.List var14 = org.jsecurity.util.CollectionUtils.asList(var13);
    var8.addRoles((java.util.Collection)var14);
    var5.setAuthenticationListeners((java.util.Collection)var14);
    var0.setSessionListeners((java.util.Collection)var14);
    java.io.InputStream var19 = org.jsecurity.util.ClassUtils.getResourceAsStream("");
    java.lang.Object[] var20 = new java.lang.Object[] { var19};
    java.util.List var21 = org.jsecurity.util.CollectionUtils.asList(var20);
    org.jsecurity.authc.pam.ModularRealmAuthenticator var22 = new org.jsecurity.authc.pam.ModularRealmAuthenticator(var21);
    org.jsecurity.authc.pam.AllSuccessfulModularAuthenticationStrategy var23 = new org.jsecurity.authc.pam.AllSuccessfulModularAuthenticationStrategy();
    var22.setModularAuthenticationStrategy((org.jsecurity.authc.pam.ModularAuthenticationStrategy)var23);
    org.jsecurity.authz.SimpleAuthorizationInfo var25 = new org.jsecurity.authz.SimpleAuthorizationInfo();
    var25.addStringPermission("hi!");
    java.io.InputStream var29 = org.jsecurity.util.ClassUtils.getResourceAsStream("");
    java.lang.Object[] var30 = new java.lang.Object[] { var29};
    java.util.List var31 = org.jsecurity.util.CollectionUtils.asList(var30);
    var25.addRoles((java.util.Collection)var31);
    var22.setAuthenticationListeners((java.util.Collection)var31);
    org.jsecurity.realm.activedirectory.ActiveDirectoryRealm var34 = new org.jsecurity.realm.activedirectory.ActiveDirectoryRealm();
    var34.setPrincipalSuffix("");
    var22.setRealm((org.jsecurity.realm.Realm)var34);
    org.jsecurity.cache.HashtableCacheManager var38 = new org.jsecurity.cache.HashtableCacheManager();
    org.jsecurity.cache.Cache var40 = var38.getCache("\u0000\u0000");
    var34.setAuthorizationCache(var40);
    var0.setRealm((org.jsecurity.realm.Realm)var34);
    org.jsecurity.subject.RememberMeManager var43 = var0.getRememberMeManager();
    org.jsecurity.codec.CodecException var46 = new org.jsecurity.codec.CodecException("dd\uFFFD");
    org.jsecurity.authc.ConcurrentAccessException var47 = new org.jsecurity.authc.ConcurrentAccessException("org.jsecurity.authz.UnauthorizedException: org.jsecurity.session.ExpiredSessionException: ", (java.lang.Throwable)var46);
    org.jsecurity.subject.SimplePrincipalCollection var49 = new org.jsecurity.subject.SimplePrincipalCollection((java.lang.Object)var46, "");
    boolean var50 = var49.isEmpty();
    java.util.List var51 = var49.asList();
    org.jsecurity.authc.pam.ModularRealmAuthenticator var52 = new org.jsecurity.authc.pam.ModularRealmAuthenticator(var51);
    var0.setAuthenticationListeners((java.util.Collection)var51);
    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      var0.setRememberMeDecryptionCipherKeyHex("\uFFFD\uFFFD#\uFFFD\uFFFD.\uFFFD+rr\uFFFD\u07CA\u0000\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\u01E9\uFFFD*'\u0000\u0000");
      fail("Expected exception of type java.lang.IllegalStateException");
    } catch (java.lang.IllegalStateException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var2);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var3);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var4);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var12);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var13);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var14);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var19);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var20);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var21);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var29);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var30);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var31);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var40);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var43);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var50 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var51);

  }

  public void test300() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest0.test300");


    java.lang.String[] var2 = org.jsecurity.util.StringUtils.tokenizeToStringArray("hi!", "");
    org.jsecurity.authz.UnauthenticatedException var6 = new org.jsecurity.authz.UnauthenticatedException();
    org.jsecurity.config.UnresolveableReferenceException var7 = new org.jsecurity.config.UnresolveableReferenceException("", (java.lang.Throwable)var6);
    org.jsecurity.cache.CacheException var8 = new org.jsecurity.cache.CacheException("org.jsecurity.config.ConfigurationException: dd\uFFFD", (java.lang.Throwable)var6);
    org.jsecurity.authc.SimpleAuthenticationInfo var10 = new org.jsecurity.authc.SimpleAuthenticationInfo((java.lang.Object)"org.jsecurity.config.ConfigurationException: dd\uFFFD", (java.lang.Object)var8, "a2b823b1e72eae2b727289df8a00a89df8a0bab6ad8a89c4c5c7a9b62a270000");
    org.jsecurity.realm.text.TextConfigurationRealm var11 = new org.jsecurity.realm.text.TextConfigurationRealm();
    java.io.InputStream var13 = org.jsecurity.util.ClassUtils.getResourceAsStream("");
    java.lang.Object[] var14 = new java.lang.Object[] { var13};
    java.util.List var15 = org.jsecurity.util.CollectionUtils.asList(var14);
    org.jsecurity.authc.pam.ModularRealmAuthenticator var16 = new org.jsecurity.authc.pam.ModularRealmAuthenticator(var15);
    org.jsecurity.subject.SimplePrincipalCollection var18 = new org.jsecurity.subject.SimplePrincipalCollection((java.util.Collection)var15, "org.jsecurity.authz.UnauthorizedException: org.jsecurity.session.ExpiredSessionException: ");
    org.jsecurity.session.UnknownSessionException var23 = new org.jsecurity.session.UnknownSessionException("dd\uFFFD", (java.io.Serializable)100.0f);
    org.jsecurity.session.SessionException var25 = new org.jsecurity.session.SessionException("dd\uFFFD", (java.lang.Throwable)var23, (java.io.Serializable)0);
    org.jsecurity.session.SessionException var26 = new org.jsecurity.session.SessionException("dd\uFFFD", (java.lang.Throwable)var23);
    var18.add((java.lang.Object)var26, "org.jsecurity.config.ConfigurationException: dd\uFFFD");
    var11.onLogout((org.jsecurity.subject.PrincipalCollection)var18);
    org.jsecurity.authc.ExpiredCredentialsException var31 = new org.jsecurity.authc.ExpiredCredentialsException();
    org.jsecurity.session.ExpiredSessionException var32 = new org.jsecurity.session.ExpiredSessionException("", (java.lang.Throwable)var31);
    java.lang.Throwable[] var33 = var32.getSuppressed();
    org.jsecurity.io.ResourceException var34 = new org.jsecurity.io.ResourceException((java.lang.Throwable)var32);
    org.jsecurity.authc.SimpleAuthenticationInfo var35 = new org.jsecurity.authc.SimpleAuthenticationInfo((org.jsecurity.subject.PrincipalCollection)var18, (java.lang.Object)var32);
    var10.merge((org.jsecurity.authc.AuthenticationInfo)var35);
    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      org.jsecurity.crypto.hash.Md5Hash var37 = new org.jsecurity.crypto.hash.Md5Hash((java.lang.Object)"hi!", (java.lang.Object)var35);
      fail("Expected exception of type org.jsecurity.codec.CodecException");
    } catch (org.jsecurity.codec.CodecException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var2);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var13);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var14);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var15);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var33);

  }

  public void test301() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest0.test301");


    org.jsecurity.mgt.DefaultSecurityManager var0 = new org.jsecurity.mgt.DefaultSecurityManager();
    java.io.InputStream var2 = org.jsecurity.util.ClassUtils.getResourceAsStream("");
    java.lang.Object[] var3 = new java.lang.Object[] { var2};
    java.util.List var4 = org.jsecurity.util.CollectionUtils.asList(var3);
    org.jsecurity.authc.pam.ModularRealmAuthenticator var5 = new org.jsecurity.authc.pam.ModularRealmAuthenticator(var4);
    org.jsecurity.authc.pam.AllSuccessfulModularAuthenticationStrategy var6 = new org.jsecurity.authc.pam.AllSuccessfulModularAuthenticationStrategy();
    var5.setModularAuthenticationStrategy((org.jsecurity.authc.pam.ModularAuthenticationStrategy)var6);
    org.jsecurity.authz.SimpleAuthorizationInfo var8 = new org.jsecurity.authz.SimpleAuthorizationInfo();
    var8.addStringPermission("hi!");
    java.io.InputStream var12 = org.jsecurity.util.ClassUtils.getResourceAsStream("");
    java.lang.Object[] var13 = new java.lang.Object[] { var12};
    java.util.List var14 = org.jsecurity.util.CollectionUtils.asList(var13);
    var8.addRoles((java.util.Collection)var14);
    var5.setAuthenticationListeners((java.util.Collection)var14);
    var0.setSessionListeners((java.util.Collection)var14);
    org.jsecurity.authc.pam.ModularRealmAuthenticator var18 = new org.jsecurity.authc.pam.ModularRealmAuthenticator();
    org.jsecurity.authz.permission.InvalidPermissionStringException var21 = new org.jsecurity.authz.permission.InvalidPermissionStringException("", "dd\uFFFD");
    org.jsecurity.JSecurityException var23 = new org.jsecurity.JSecurityException("");
    org.jsecurity.authc.SimpleAuthenticationInfo var25 = new org.jsecurity.authc.SimpleAuthenticationInfo((java.lang.Object)var21, (java.lang.Object)"", "org.jsecurity.authz.UnauthorizedException: org.jsecurity.session.ExpiredSessionException: ");
    org.jsecurity.subject.PrincipalCollection var26 = var25.getPrincipals();
    var18.onLogout(var26);
    var0.setAuthenticator((org.jsecurity.authc.Authenticator)var18);
    org.jsecurity.authz.SimpleRole var29 = new org.jsecurity.authz.SimpleRole();
    org.jsecurity.authz.permission.WildcardPermission var32 = new org.jsecurity.authz.permission.WildcardPermission("hi!", false);
    boolean var33 = var29.isPermitted((org.jsecurity.authz.Permission)var32);
    java.io.InputStream var35 = org.jsecurity.util.ClassUtils.getResourceAsStream("");
    java.lang.Object[] var36 = new java.lang.Object[] { var35};
    java.util.List var37 = org.jsecurity.util.CollectionUtils.asList(var36);
    var29.addAll((java.util.Collection)var37);
    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      var0.setRealms((java.util.Collection)var37);
      fail("Expected exception of type java.lang.ClassCastException");
    } catch (java.lang.ClassCastException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var2);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var3);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var4);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var12);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var13);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var14);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var26);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var33 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var35);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var36);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var37);

  }

  public void test302() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest0.test302");


    org.jsecurity.io.IniResource var0 = new org.jsecurity.io.IniResource();
    java.lang.String var1 = var0.getCharsetName();
    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      var0.load("\u0000\u0000\u0000");
      fail("Expected exception of type org.jsecurity.io.ResourceException");
    } catch (org.jsecurity.io.ResourceException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var1);

  }

  public void test303() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest0.test303");


    org.jsecurity.authz.SimpleAuthorizingAccount var0 = new org.jsecurity.authz.SimpleAuthorizingAccount();
    org.jsecurity.authz.SimpleAuthorizationInfo var1 = new org.jsecurity.authz.SimpleAuthorizationInfo();
    var1.addRole("a2b823b1e72eae2b727289df8a00a89df8a0bab6ad8a89c4c5c7a9b62a270000");
    org.jsecurity.authz.SimpleAuthorizationInfo var4 = new org.jsecurity.authz.SimpleAuthorizationInfo();
    var4.addRole("a2b823b1e72eae2b727289df8a00a89df8a0bab6ad8a89c4c5c7a9b62a270000");
    org.jsecurity.session.UnknownSessionException var11 = new org.jsecurity.session.UnknownSessionException("dd\uFFFD", (java.io.Serializable)100.0f);
    org.jsecurity.subject.SubjectException var12 = new org.jsecurity.subject.SubjectException("dd\uFFFD", (java.lang.Throwable)var11);
    org.jsecurity.io.SerializationException var13 = new org.jsecurity.io.SerializationException("", (java.lang.Throwable)var12);
    java.lang.Throwable[] var14 = var12.getSuppressed();
    java.util.Set var15 = org.jsecurity.util.CollectionUtils.asSet((java.lang.Object[])var14);
    var4.addRoles((java.util.Collection)var15);
    var1.setObjectPermissions(var15);
    var0.setSimpleRoles(var15);
    java.util.Set var19 = var0.getPermissions();
    org.jsecurity.authz.SimpleAuthorizationInfo var20 = new org.jsecurity.authz.SimpleAuthorizationInfo();
    var20.addRole("a2b823b1e72eae2b727289df8a00a89df8a0bab6ad8a89c4c5c7a9b62a270000");
    org.jsecurity.authz.SimpleAuthorizationInfo var23 = new org.jsecurity.authz.SimpleAuthorizationInfo();
    var23.addRole("a2b823b1e72eae2b727289df8a00a89df8a0bab6ad8a89c4c5c7a9b62a270000");
    org.jsecurity.session.UnknownSessionException var30 = new org.jsecurity.session.UnknownSessionException("dd\uFFFD", (java.io.Serializable)100.0f);
    org.jsecurity.subject.SubjectException var31 = new org.jsecurity.subject.SubjectException("dd\uFFFD", (java.lang.Throwable)var30);
    org.jsecurity.io.SerializationException var32 = new org.jsecurity.io.SerializationException("", (java.lang.Throwable)var31);
    java.lang.Throwable[] var33 = var31.getSuppressed();
    java.util.Set var34 = org.jsecurity.util.CollectionUtils.asSet((java.lang.Object[])var33);
    var23.addRoles((java.util.Collection)var34);
    var20.setObjectPermissions(var34);
    var0.checkRoles((java.util.Collection)var34);
    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      var0.addRole("\u0000\u0000\u0000");
      fail("Expected exception of type java.lang.UnsupportedOperationException");
    } catch (java.lang.UnsupportedOperationException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var14);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var15);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var19);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var33);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var34);

  }

  public void test304() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest0.test304");


    org.jsecurity.mgt.DefaultSecurityManager var0 = new org.jsecurity.mgt.DefaultSecurityManager();
    java.io.InputStream var2 = org.jsecurity.util.ClassUtils.getResourceAsStream("");
    java.lang.Object[] var3 = new java.lang.Object[] { var2};
    java.util.List var4 = org.jsecurity.util.CollectionUtils.asList(var3);
    org.jsecurity.authc.pam.ModularRealmAuthenticator var5 = new org.jsecurity.authc.pam.ModularRealmAuthenticator(var4);
    org.jsecurity.authc.pam.AllSuccessfulModularAuthenticationStrategy var6 = new org.jsecurity.authc.pam.AllSuccessfulModularAuthenticationStrategy();
    var5.setModularAuthenticationStrategy((org.jsecurity.authc.pam.ModularAuthenticationStrategy)var6);
    org.jsecurity.authz.SimpleAuthorizationInfo var8 = new org.jsecurity.authz.SimpleAuthorizationInfo();
    var8.addStringPermission("hi!");
    java.io.InputStream var12 = org.jsecurity.util.ClassUtils.getResourceAsStream("");
    java.lang.Object[] var13 = new java.lang.Object[] { var12};
    java.util.List var14 = org.jsecurity.util.CollectionUtils.asList(var13);
    var8.addRoles((java.util.Collection)var14);
    var5.setAuthenticationListeners((java.util.Collection)var14);
    var0.setSessionListeners((java.util.Collection)var14);
    java.util.Collection var18 = var0.getRealms();
    org.jsecurity.authc.UsernamePasswordToken var19 = new org.jsecurity.authc.UsernamePasswordToken();
    java.lang.String var20 = var19.getUsername();
    java.lang.Object var21 = var19.getPrincipal();
    var19.setUsername("hi!");
    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      org.jsecurity.authc.AuthenticationInfo var24 = var0.authenticate((org.jsecurity.authc.AuthenticationToken)var19);
      fail("Expected exception of type org.jsecurity.authc.AuthenticationException");
    } catch (org.jsecurity.authc.AuthenticationException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var2);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var3);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var4);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var12);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var13);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var14);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var18);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var20);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var21);

  }

  public void test305() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest0.test305");


    org.jsecurity.crypto.hash.Sha512Hash var1 = org.jsecurity.crypto.hash.Sha512Hash.fromBase64String("org.jsecurity.config.ConfigurationException: dd\uFFFD");
    byte[] var2 = var1.getBytes();
    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      char[] var4 = org.jsecurity.codec.CodecSupport.toChars(var2, "5dd0c65d-1422-49c2-becb-9e8dca619ab3");
      fail("Expected exception of type org.jsecurity.codec.CodecException");
    } catch (org.jsecurity.codec.CodecException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var1);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var2);

  }

  public void test306() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest0.test306");


    org.jsecurity.mgt.DefaultSecurityManager var0 = new org.jsecurity.mgt.DefaultSecurityManager();
    java.io.InputStream var2 = org.jsecurity.util.ClassUtils.getResourceAsStream("");
    java.lang.Object[] var3 = new java.lang.Object[] { var2};
    java.util.List var4 = org.jsecurity.util.CollectionUtils.asList(var3);
    org.jsecurity.authc.pam.ModularRealmAuthenticator var5 = new org.jsecurity.authc.pam.ModularRealmAuthenticator(var4);
    org.jsecurity.authc.pam.AllSuccessfulModularAuthenticationStrategy var6 = new org.jsecurity.authc.pam.AllSuccessfulModularAuthenticationStrategy();
    var5.setModularAuthenticationStrategy((org.jsecurity.authc.pam.ModularAuthenticationStrategy)var6);
    org.jsecurity.authz.SimpleAuthorizationInfo var8 = new org.jsecurity.authz.SimpleAuthorizationInfo();
    var8.addStringPermission("hi!");
    java.io.InputStream var12 = org.jsecurity.util.ClassUtils.getResourceAsStream("");
    java.lang.Object[] var13 = new java.lang.Object[] { var12};
    java.util.List var14 = org.jsecurity.util.CollectionUtils.asList(var13);
    var8.addRoles((java.util.Collection)var14);
    var5.setAuthenticationListeners((java.util.Collection)var14);
    var0.setSessionListeners((java.util.Collection)var14);
    org.jsecurity.realm.text.TextConfigurationRealm var18 = new org.jsecurity.realm.text.TextConfigurationRealm();
    java.io.InputStream var20 = org.jsecurity.util.ClassUtils.getResourceAsStream("");
    java.lang.Object[] var21 = new java.lang.Object[] { var20};
    java.util.List var22 = org.jsecurity.util.CollectionUtils.asList(var21);
    org.jsecurity.authc.pam.ModularRealmAuthenticator var23 = new org.jsecurity.authc.pam.ModularRealmAuthenticator(var22);
    org.jsecurity.subject.SimplePrincipalCollection var25 = new org.jsecurity.subject.SimplePrincipalCollection((java.util.Collection)var22, "org.jsecurity.authz.UnauthorizedException: org.jsecurity.session.ExpiredSessionException: ");
    org.jsecurity.session.UnknownSessionException var30 = new org.jsecurity.session.UnknownSessionException("dd\uFFFD", (java.io.Serializable)100.0f);
    org.jsecurity.session.SessionException var32 = new org.jsecurity.session.SessionException("dd\uFFFD", (java.lang.Throwable)var30, (java.io.Serializable)0);
    org.jsecurity.session.SessionException var33 = new org.jsecurity.session.SessionException("dd\uFFFD", (java.lang.Throwable)var30);
    var25.add((java.lang.Object)var33, "org.jsecurity.config.ConfigurationException: dd\uFFFD");
    var18.onLogout((org.jsecurity.subject.PrincipalCollection)var25);
    org.jsecurity.authc.pam.FirstSuccessfulAuthenticationStrategy var37 = new org.jsecurity.authc.pam.FirstSuccessfulAuthenticationStrategy();
    org.jsecurity.authz.UnauthorizedException var39 = new org.jsecurity.authz.UnauthorizedException("org.jsecurity.config.ConfigurationException: dd\uFFFD");
    java.lang.Throwable[] var40 = var39.getSuppressed();
    java.util.List var41 = org.jsecurity.util.CollectionUtils.asList((java.lang.Object[])var40);
    org.jsecurity.authc.UsernamePasswordToken var42 = new org.jsecurity.authc.UsernamePasswordToken();
    java.lang.String var43 = var42.getUsername();
    java.net.InetAddress var44 = var42.getInetAddress();
    org.jsecurity.authc.AuthenticationInfo var45 = var37.beforeAllAttempts((java.util.Collection)var41, (org.jsecurity.authc.AuthenticationToken)var42);
    boolean[] var46 = var0.hasRoles((org.jsecurity.subject.PrincipalCollection)var25, var41);
    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      var0.setRememberMeCipherKeyBase64("org.jsecurity.config.ConfigurationException: dd\uFFFD");
      fail("Expected exception of type java.lang.IllegalStateException");
    } catch (java.lang.IllegalStateException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var2);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var3);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var4);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var12);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var13);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var14);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var20);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var21);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var22);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var40);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var41);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var43);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var44);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var45);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var46);

  }

  public void test307() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest0.test307");


    org.jsecurity.authc.pam.AllSuccessfulModularAuthenticationStrategy var0 = new org.jsecurity.authc.pam.AllSuccessfulModularAuthenticationStrategy();
    char[] var2 = new char[] { };
    org.jsecurity.authc.UsernamePasswordToken var4 = new org.jsecurity.authc.UsernamePasswordToken("hi!", var2, true);
    org.jsecurity.authc.SimpleAccount var5 = new org.jsecurity.authc.SimpleAccount();
    var5.setCredentialsExpired(false);
    boolean var8 = var5.isLocked();
    org.jsecurity.authc.AuthenticationInfo var9 = var0.afterAllAttempts((org.jsecurity.authc.AuthenticationToken)var4, (org.jsecurity.authc.AuthenticationInfo)var5);
    org.jsecurity.realm.activedirectory.ActiveDirectoryRealm var10 = new org.jsecurity.realm.activedirectory.ActiveDirectoryRealm();
    org.jsecurity.io.IniResource var11 = new org.jsecurity.io.IniResource();
    java.lang.String var12 = var11.getCharsetName();
    org.jsecurity.config.ReflectionBuilder var13 = new org.jsecurity.config.ReflectionBuilder();
    org.jsecurity.io.IniResource var14 = new org.jsecurity.io.IniResource();
    var14.setCharsetName("org.jsecurity.authz.UnauthorizedException: org.jsecurity.session.ExpiredSessionException: ");
    java.util.Map var17 = var14.getSections();
    java.util.Map var18 = var13.buildObjects(var17);
    var11.setSections(var18);
    var10.setGroupRolesMap(var18);
    org.jsecurity.authc.UsernamePasswordToken var21 = new org.jsecurity.authc.UsernamePasswordToken();
    java.lang.String var22 = var21.getUsername();
    java.lang.Object var23 = var21.getPrincipal();
    var21.setUsername("hi!");
    org.jsecurity.session.UnknownSessionException var29 = new org.jsecurity.session.UnknownSessionException("dd\uFFFD", (java.io.Serializable)100.0f);
    org.jsecurity.session.SessionException var31 = new org.jsecurity.session.SessionException("dd\uFFFD", (java.lang.Throwable)var29, (java.io.Serializable)0);
    org.jsecurity.authc.SimpleAuthenticationInfo var34 = new org.jsecurity.authc.SimpleAuthenticationInfo((java.lang.Object)0, (java.lang.Object)10, "hi!");
    java.lang.Object var35 = var34.getCredentials();
    org.jsecurity.authc.ExpiredCredentialsException var37 = new org.jsecurity.authc.ExpiredCredentialsException();
    org.jsecurity.session.ExpiredSessionException var38 = new org.jsecurity.session.ExpiredSessionException("", (java.lang.Throwable)var37);
    org.jsecurity.authz.UnauthorizedException var39 = new org.jsecurity.authz.UnauthorizedException((java.lang.Throwable)var38);
    var34.setCredentials((java.lang.Object)var38);
    org.jsecurity.session.UnknownSessionException var44 = new org.jsecurity.session.UnknownSessionException("dd\uFFFD", (java.io.Serializable)100.0f);
    org.jsecurity.session.SessionException var46 = new org.jsecurity.session.SessionException("dd\uFFFD", (java.lang.Throwable)var44, (java.io.Serializable)0);
    org.jsecurity.authc.SimpleAuthenticationInfo var49 = new org.jsecurity.authc.SimpleAuthenticationInfo((java.lang.Object)0, (java.lang.Object)10, "hi!");
    java.lang.Object var50 = var49.getCredentials();
    java.lang.String var51 = var49.toString();
    org.jsecurity.realm.text.TextConfigurationRealm var52 = new org.jsecurity.realm.text.TextConfigurationRealm();
    java.io.InputStream var54 = org.jsecurity.util.ClassUtils.getResourceAsStream("");
    java.lang.Object[] var55 = new java.lang.Object[] { var54};
    java.util.List var56 = org.jsecurity.util.CollectionUtils.asList(var55);
    org.jsecurity.authc.pam.ModularRealmAuthenticator var57 = new org.jsecurity.authc.pam.ModularRealmAuthenticator(var56);
    org.jsecurity.subject.SimplePrincipalCollection var59 = new org.jsecurity.subject.SimplePrincipalCollection((java.util.Collection)var56, "org.jsecurity.authz.UnauthorizedException: org.jsecurity.session.ExpiredSessionException: ");
    org.jsecurity.session.UnknownSessionException var64 = new org.jsecurity.session.UnknownSessionException("dd\uFFFD", (java.io.Serializable)100.0f);
    org.jsecurity.session.SessionException var66 = new org.jsecurity.session.SessionException("dd\uFFFD", (java.lang.Throwable)var64, (java.io.Serializable)0);
    org.jsecurity.session.SessionException var67 = new org.jsecurity.session.SessionException("dd\uFFFD", (java.lang.Throwable)var64);
    var59.add((java.lang.Object)var67, "org.jsecurity.config.ConfigurationException: dd\uFFFD");
    var52.onLogout((org.jsecurity.subject.PrincipalCollection)var59);
    org.jsecurity.cache.HashtableCacheManager var71 = new org.jsecurity.cache.HashtableCacheManager();
    org.jsecurity.cache.Cache var73 = var71.getCache("\u0000\u0000");
    var52.setAuthorizationCache(var73);
    org.jsecurity.codec.CodecException var77 = new org.jsecurity.codec.CodecException("dd\uFFFD");
    org.jsecurity.authc.ConcurrentAccessException var78 = new org.jsecurity.authc.ConcurrentAccessException("org.jsecurity.authz.UnauthorizedException: org.jsecurity.session.ExpiredSessionException: ", (java.lang.Throwable)var77);
    org.jsecurity.subject.SimplePrincipalCollection var80 = new org.jsecurity.subject.SimplePrincipalCollection((java.lang.Object)var77, "");
    var52.onLogout((org.jsecurity.subject.PrincipalCollection)var80);
    var49.setPrincipals((org.jsecurity.subject.PrincipalCollection)var80);
    org.jsecurity.session.UnknownSessionException var87 = new org.jsecurity.session.UnknownSessionException("dd\uFFFD", (java.io.Serializable)100.0f);
    org.jsecurity.subject.SubjectException var88 = new org.jsecurity.subject.SubjectException("dd\uFFFD", (java.lang.Throwable)var87);
    org.jsecurity.authc.AccountException var89 = new org.jsecurity.authc.AccountException("hi!", (java.lang.Throwable)var88);
    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      org.jsecurity.authc.AuthenticationInfo var90 = var0.afterAttempt((org.jsecurity.realm.Realm)var10, (org.jsecurity.authc.AuthenticationToken)var21, (org.jsecurity.authc.AuthenticationInfo)var34, (org.jsecurity.authc.AuthenticationInfo)var49, (java.lang.Throwable)var89);
      fail("Expected exception of type org.jsecurity.authc.AccountException");
    } catch (org.jsecurity.authc.AccountException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var2);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var8 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var9);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var12);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var17);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var18);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var22);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var23);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var35 + "' != '" + 10+ "'", var35.equals(10));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var50 + "' != '" + 10+ "'", var50.equals(10));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var54);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var55);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var56);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var73);

  }

  public void test308() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest0.test308");


    org.jsecurity.mgt.DefaultSecurityManager var0 = new org.jsecurity.mgt.DefaultSecurityManager();
    java.io.InputStream var2 = org.jsecurity.util.ClassUtils.getResourceAsStream("");
    java.lang.Object[] var3 = new java.lang.Object[] { var2};
    java.util.List var4 = org.jsecurity.util.CollectionUtils.asList(var3);
    org.jsecurity.authc.pam.ModularRealmAuthenticator var5 = new org.jsecurity.authc.pam.ModularRealmAuthenticator(var4);
    org.jsecurity.authc.pam.AllSuccessfulModularAuthenticationStrategy var6 = new org.jsecurity.authc.pam.AllSuccessfulModularAuthenticationStrategy();
    var5.setModularAuthenticationStrategy((org.jsecurity.authc.pam.ModularAuthenticationStrategy)var6);
    org.jsecurity.authz.SimpleAuthorizationInfo var8 = new org.jsecurity.authz.SimpleAuthorizationInfo();
    var8.addStringPermission("hi!");
    java.io.InputStream var12 = org.jsecurity.util.ClassUtils.getResourceAsStream("");
    java.lang.Object[] var13 = new java.lang.Object[] { var12};
    java.util.List var14 = org.jsecurity.util.CollectionUtils.asList(var13);
    var8.addRoles((java.util.Collection)var14);
    var5.setAuthenticationListeners((java.util.Collection)var14);
    var0.setSessionListeners((java.util.Collection)var14);
    org.jsecurity.authc.pam.ModularRealmAuthenticator var18 = new org.jsecurity.authc.pam.ModularRealmAuthenticator();
    org.jsecurity.authz.permission.InvalidPermissionStringException var21 = new org.jsecurity.authz.permission.InvalidPermissionStringException("", "dd\uFFFD");
    org.jsecurity.JSecurityException var23 = new org.jsecurity.JSecurityException("");
    org.jsecurity.authc.SimpleAuthenticationInfo var25 = new org.jsecurity.authc.SimpleAuthenticationInfo((java.lang.Object)var21, (java.lang.Object)"", "org.jsecurity.authz.UnauthorizedException: org.jsecurity.session.ExpiredSessionException: ");
    org.jsecurity.subject.PrincipalCollection var26 = var25.getPrincipals();
    var18.onLogout(var26);
    var0.setAuthenticator((org.jsecurity.authc.Authenticator)var18);
    org.jsecurity.codec.CodecException var31 = new org.jsecurity.codec.CodecException("dd\uFFFD");
    org.jsecurity.authc.ConcurrentAccessException var32 = new org.jsecurity.authc.ConcurrentAccessException("org.jsecurity.authz.UnauthorizedException: org.jsecurity.session.ExpiredSessionException: ", (java.lang.Throwable)var31);
    org.jsecurity.subject.SimplePrincipalCollection var34 = new org.jsecurity.subject.SimplePrincipalCollection((java.lang.Object)var31, "");
    org.jsecurity.authc.pam.FirstSuccessfulAuthenticationStrategy var35 = new org.jsecurity.authc.pam.FirstSuccessfulAuthenticationStrategy();
    org.jsecurity.authz.UnauthorizedException var37 = new org.jsecurity.authz.UnauthorizedException("org.jsecurity.config.ConfigurationException: dd\uFFFD");
    java.lang.Throwable[] var38 = var37.getSuppressed();
    java.util.List var39 = org.jsecurity.util.CollectionUtils.asList((java.lang.Object[])var38);
    org.jsecurity.authc.UsernamePasswordToken var40 = new org.jsecurity.authc.UsernamePasswordToken();
    java.lang.String var41 = var40.getUsername();
    java.net.InetAddress var42 = var40.getInetAddress();
    org.jsecurity.authc.AuthenticationInfo var43 = var35.beforeAllAttempts((java.util.Collection)var39, (org.jsecurity.authc.AuthenticationToken)var40);
    org.jsecurity.session.UnknownSessionException var48 = new org.jsecurity.session.UnknownSessionException("dd\uFFFD", (java.io.Serializable)100.0f);
    org.jsecurity.subject.SubjectException var49 = new org.jsecurity.subject.SubjectException("dd\uFFFD", (java.lang.Throwable)var48);
    org.jsecurity.io.SerializationException var50 = new org.jsecurity.io.SerializationException("", (java.lang.Throwable)var49);
    java.lang.Throwable[] var51 = var49.getSuppressed();
    java.util.Set var52 = org.jsecurity.util.CollectionUtils.asSet((java.lang.Object[])var51);
    org.jsecurity.authc.SimpleAccount var53 = new org.jsecurity.authc.SimpleAccount((org.jsecurity.subject.PrincipalCollection)var34, (java.lang.Object)var39, var52);
    java.io.InputStream var55 = org.jsecurity.util.ClassUtils.getResourceAsStream("");
    java.lang.Object[] var56 = new java.lang.Object[] { var55};
    java.util.List var57 = org.jsecurity.util.CollectionUtils.asList(var56);
    org.jsecurity.authc.pam.ModularRealmAuthenticator var58 = new org.jsecurity.authc.pam.ModularRealmAuthenticator(var57);
    org.jsecurity.subject.SimplePrincipalCollection var60 = new org.jsecurity.subject.SimplePrincipalCollection((java.util.Collection)var57, "org.jsecurity.authz.UnauthorizedException: org.jsecurity.session.ExpiredSessionException: ");
    org.jsecurity.io.ResourceException var64 = new org.jsecurity.io.ResourceException("hi!");
    org.jsecurity.authc.UnknownAccountException var65 = new org.jsecurity.authc.UnknownAccountException((java.lang.Throwable)var64);
    org.jsecurity.session.StoppedSessionException var66 = new org.jsecurity.session.StoppedSessionException("dd\uFFFD", (java.io.Serializable)var64);
    org.jsecurity.session.UnknownSessionException var67 = new org.jsecurity.session.UnknownSessionException("org.jsecurity.authz.UnauthorizedException: org.jsecurity.session.ExpiredSessionException: ", (java.lang.Throwable)var64);
    boolean var68 = var60.equals((java.lang.Object)var64);
    var34.addAll((org.jsecurity.subject.PrincipalCollection)var60);
    org.jsecurity.session.UnknownSessionException var74 = new org.jsecurity.session.UnknownSessionException("dd\uFFFD", (java.io.Serializable)100.0f);
    org.jsecurity.subject.SubjectException var75 = new org.jsecurity.subject.SubjectException("dd\uFFFD", (java.lang.Throwable)var74);
    org.jsecurity.io.SerializationException var76 = new org.jsecurity.io.SerializationException("", (java.lang.Throwable)var75);
    java.lang.Throwable[] var77 = var75.getSuppressed();
    java.util.List var78 = org.jsecurity.util.CollectionUtils.asList((java.lang.Object[])var77);
    boolean var79 = var0.isPermittedAll((org.jsecurity.subject.PrincipalCollection)var34, (java.util.Collection)var78);
    org.jsecurity.subject.DelegatingSubject var80 = new org.jsecurity.subject.DelegatingSubject((org.jsecurity.mgt.SecurityManager)var0);
    java.lang.String[] var83 = org.jsecurity.util.StringUtils.tokenizeToStringArray("hi!", "");
    boolean[] var84 = var80.isPermitted(var83);
    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      org.jsecurity.session.Session var86 = var80.getSession(true);
      fail("Expected exception of type java.lang.ClassCastException");
    } catch (java.lang.ClassCastException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var2);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var3);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var4);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var12);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var13);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var14);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var26);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var38);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var39);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var41);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var42);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var43);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var51);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var52);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var55);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var56);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var57);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var68 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var77);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var78);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var79 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var83);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var84);

  }

  public void test309() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest0.test309");


    org.jsecurity.mgt.DefaultSecurityManager var0 = new org.jsecurity.mgt.DefaultSecurityManager();
    java.io.InputStream var2 = org.jsecurity.util.ClassUtils.getResourceAsStream("");
    java.lang.Object[] var3 = new java.lang.Object[] { var2};
    java.util.List var4 = org.jsecurity.util.CollectionUtils.asList(var3);
    org.jsecurity.authc.pam.ModularRealmAuthenticator var5 = new org.jsecurity.authc.pam.ModularRealmAuthenticator(var4);
    org.jsecurity.authc.pam.AllSuccessfulModularAuthenticationStrategy var6 = new org.jsecurity.authc.pam.AllSuccessfulModularAuthenticationStrategy();
    var5.setModularAuthenticationStrategy((org.jsecurity.authc.pam.ModularAuthenticationStrategy)var6);
    org.jsecurity.authz.SimpleAuthorizationInfo var8 = new org.jsecurity.authz.SimpleAuthorizationInfo();
    var8.addStringPermission("hi!");
    java.io.InputStream var12 = org.jsecurity.util.ClassUtils.getResourceAsStream("");
    java.lang.Object[] var13 = new java.lang.Object[] { var12};
    java.util.List var14 = org.jsecurity.util.CollectionUtils.asList(var13);
    var8.addRoles((java.util.Collection)var14);
    var5.setAuthenticationListeners((java.util.Collection)var14);
    var0.setSessionListeners((java.util.Collection)var14);
    org.jsecurity.realm.text.TextConfigurationRealm var18 = new org.jsecurity.realm.text.TextConfigurationRealm();
    java.io.InputStream var20 = org.jsecurity.util.ClassUtils.getResourceAsStream("");
    java.lang.Object[] var21 = new java.lang.Object[] { var20};
    java.util.List var22 = org.jsecurity.util.CollectionUtils.asList(var21);
    org.jsecurity.authc.pam.ModularRealmAuthenticator var23 = new org.jsecurity.authc.pam.ModularRealmAuthenticator(var22);
    org.jsecurity.subject.SimplePrincipalCollection var25 = new org.jsecurity.subject.SimplePrincipalCollection((java.util.Collection)var22, "org.jsecurity.authz.UnauthorizedException: org.jsecurity.session.ExpiredSessionException: ");
    org.jsecurity.session.UnknownSessionException var30 = new org.jsecurity.session.UnknownSessionException("dd\uFFFD", (java.io.Serializable)100.0f);
    org.jsecurity.session.SessionException var32 = new org.jsecurity.session.SessionException("dd\uFFFD", (java.lang.Throwable)var30, (java.io.Serializable)0);
    org.jsecurity.session.SessionException var33 = new org.jsecurity.session.SessionException("dd\uFFFD", (java.lang.Throwable)var30);
    var25.add((java.lang.Object)var33, "org.jsecurity.config.ConfigurationException: dd\uFFFD");
    var18.onLogout((org.jsecurity.subject.PrincipalCollection)var25);
    org.jsecurity.authc.pam.FirstSuccessfulAuthenticationStrategy var37 = new org.jsecurity.authc.pam.FirstSuccessfulAuthenticationStrategy();
    org.jsecurity.authz.UnauthorizedException var39 = new org.jsecurity.authz.UnauthorizedException("org.jsecurity.config.ConfigurationException: dd\uFFFD");
    java.lang.Throwable[] var40 = var39.getSuppressed();
    java.util.List var41 = org.jsecurity.util.CollectionUtils.asList((java.lang.Object[])var40);
    org.jsecurity.authc.UsernamePasswordToken var42 = new org.jsecurity.authc.UsernamePasswordToken();
    java.lang.String var43 = var42.getUsername();
    java.net.InetAddress var44 = var42.getInetAddress();
    org.jsecurity.authc.AuthenticationInfo var45 = var37.beforeAllAttempts((java.util.Collection)var41, (org.jsecurity.authc.AuthenticationToken)var42);
    boolean[] var46 = var0.hasRoles((org.jsecurity.subject.PrincipalCollection)var25, var41);
    org.jsecurity.codec.CodecException var49 = new org.jsecurity.codec.CodecException("dd\uFFFD");
    org.jsecurity.authc.ConcurrentAccessException var50 = new org.jsecurity.authc.ConcurrentAccessException("org.jsecurity.authz.UnauthorizedException: org.jsecurity.session.ExpiredSessionException: ", (java.lang.Throwable)var49);
    org.jsecurity.subject.SimplePrincipalCollection var52 = new org.jsecurity.subject.SimplePrincipalCollection((java.lang.Object)var49, "");
    java.io.InputStream var54 = org.jsecurity.util.ClassUtils.getResourceAsStream("");
    java.lang.Object[] var55 = new java.lang.Object[] { var54};
    java.util.List var56 = org.jsecurity.util.CollectionUtils.asList(var55);
    org.jsecurity.authc.pam.ModularRealmAuthenticator var57 = new org.jsecurity.authc.pam.ModularRealmAuthenticator(var56);
    var52.addAll((java.util.Collection)var56, "\u0000\u0000");
    var0.setSessionListeners((java.util.Collection)var56);
    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      var0.setRememberMeEncryptionCipherKeyHex("ZGT/");
      fail("Expected exception of type java.lang.IllegalStateException");
    } catch (java.lang.IllegalStateException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var2);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var3);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var4);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var12);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var13);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var14);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var20);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var21);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var22);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var40);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var41);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var43);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var44);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var45);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var46);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var54);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var55);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var56);

  }

  public void test310() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest0.test310");


    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      org.jsecurity.crypto.hash.Md5Hash var1 = org.jsecurity.crypto.hash.Md5Hash.fromHexString("org.jsecurity.realm.SimpleAccountRealm-9-authorization");
      fail("Expected exception of type java.lang.IllegalArgumentException");
    } catch (java.lang.IllegalArgumentException e) {
      // Expected exception.
    }

  }

  public void test311() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest0.test311");


    java.lang.String var1 = org.jsecurity.codec.Base64.decodeToString("org.jsecurity.realm.SimpleAccountRealm-9-authorization");
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var1 + "' != '" + "\uFFFD\uFFFD#\uFFFD\uFFFD.\uFFFD+r\uFFFD\u6959(\uFFFD\uFFFDW\uFFFDq\uFFFD.\uFFFD\uFFFD^jY\uFFFDj\uFFFDa\uFFFD\uFFFD\uFFFDj\u0628\u0000"+ "'", var1.equals("\uFFFD\uFFFD#\uFFFD\uFFFD.\uFFFD+r\uFFFD\u6959(\uFFFD\uFFFDW\uFFFDq\uFFFD.\uFFFD\uFFFD^jY\uFFFDj\uFFFDa\uFFFD\uFFFD\uFFFDj\u0628\u0000"));

  }

  public void test312() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest0.test312");


    org.jsecurity.authz.SimpleAuthorizationInfo var0 = new org.jsecurity.authz.SimpleAuthorizationInfo();
    org.jsecurity.session.UnknownSessionException var5 = new org.jsecurity.session.UnknownSessionException("dd\uFFFD", (java.io.Serializable)100.0f);
    org.jsecurity.subject.SubjectException var6 = new org.jsecurity.subject.SubjectException("dd\uFFFD", (java.lang.Throwable)var5);
    org.jsecurity.io.SerializationException var7 = new org.jsecurity.io.SerializationException("", (java.lang.Throwable)var6);
    java.lang.Throwable[] var8 = var6.getSuppressed();
    java.util.Set var9 = org.jsecurity.util.CollectionUtils.asSet((java.lang.Object[])var8);
    var0.setStringPermissions(var9);
    java.util.Set var11 = var0.getRoles();
    org.jsecurity.authz.SimpleAuthorizationInfo var12 = new org.jsecurity.authz.SimpleAuthorizationInfo();
    var12.addRole("a2b823b1e72eae2b727289df8a00a89df8a0bab6ad8a89c4c5c7a9b62a270000");
    org.jsecurity.session.UnknownSessionException var19 = new org.jsecurity.session.UnknownSessionException("dd\uFFFD", (java.io.Serializable)100.0f);
    org.jsecurity.subject.SubjectException var20 = new org.jsecurity.subject.SubjectException("dd\uFFFD", (java.lang.Throwable)var19);
    org.jsecurity.io.SerializationException var21 = new org.jsecurity.io.SerializationException("", (java.lang.Throwable)var20);
    java.lang.Throwable[] var22 = var20.getSuppressed();
    java.util.Set var23 = org.jsecurity.util.CollectionUtils.asSet((java.lang.Object[])var22);
    var12.addRoles((java.util.Collection)var23);
    var0.setRoles(var23);
    org.jsecurity.authz.SimpleRole var26 = new org.jsecurity.authz.SimpleRole();
    org.jsecurity.authz.permission.WildcardPermission var29 = new org.jsecurity.authz.permission.WildcardPermission("hi!", false);
    boolean var30 = var26.isPermitted((org.jsecurity.authz.Permission)var29);
    java.io.InputStream var32 = org.jsecurity.util.ClassUtils.getResourceAsStream("");
    java.lang.Object[] var33 = new java.lang.Object[] { var32};
    java.util.List var34 = org.jsecurity.util.CollectionUtils.asList(var33);
    var26.addAll((java.util.Collection)var34);
    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      var0.addRoles((java.util.Collection)var34);
      fail("Expected exception of type java.lang.UnsupportedOperationException");
    } catch (java.lang.UnsupportedOperationException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var8);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var9);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var11);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var22);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var23);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var30 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var32);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var33);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var34);

  }

  public void test313() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest0.test313");


    java.io.InputStream var1 = org.jsecurity.util.ClassUtils.getResourceAsStream("");
    java.lang.Object[] var2 = new java.lang.Object[] { var1};
    java.util.List var3 = org.jsecurity.util.CollectionUtils.asList(var2);
    org.jsecurity.authc.pam.ModularRealmAuthenticator var4 = new org.jsecurity.authc.pam.ModularRealmAuthenticator(var3);
    org.jsecurity.authc.pam.AllSuccessfulModularAuthenticationStrategy var5 = new org.jsecurity.authc.pam.AllSuccessfulModularAuthenticationStrategy();
    var4.setModularAuthenticationStrategy((org.jsecurity.authc.pam.ModularAuthenticationStrategy)var5);
    org.jsecurity.authz.SimpleAuthorizationInfo var7 = new org.jsecurity.authz.SimpleAuthorizationInfo();
    var7.addStringPermission("hi!");
    java.io.InputStream var11 = org.jsecurity.util.ClassUtils.getResourceAsStream("");
    java.lang.Object[] var12 = new java.lang.Object[] { var11};
    java.util.List var13 = org.jsecurity.util.CollectionUtils.asList(var12);
    var7.addRoles((java.util.Collection)var13);
    var4.setAuthenticationListeners((java.util.Collection)var13);
    org.jsecurity.realm.activedirectory.ActiveDirectoryRealm var16 = new org.jsecurity.realm.activedirectory.ActiveDirectoryRealm();
    var16.setPrincipalSuffix("");
    var4.setRealm((org.jsecurity.realm.Realm)var16);
    org.jsecurity.authc.pam.FirstSuccessfulAuthenticationStrategy var20 = new org.jsecurity.authc.pam.FirstSuccessfulAuthenticationStrategy();
    org.jsecurity.authz.UnauthorizedException var22 = new org.jsecurity.authz.UnauthorizedException("org.jsecurity.config.ConfigurationException: dd\uFFFD");
    java.lang.Throwable[] var23 = var22.getSuppressed();
    java.util.List var24 = org.jsecurity.util.CollectionUtils.asList((java.lang.Object[])var23);
    org.jsecurity.authc.UsernamePasswordToken var25 = new org.jsecurity.authc.UsernamePasswordToken();
    java.lang.String var26 = var25.getUsername();
    java.net.InetAddress var27 = var25.getInetAddress();
    org.jsecurity.authc.AuthenticationInfo var28 = var20.beforeAllAttempts((java.util.Collection)var24, (org.jsecurity.authc.AuthenticationToken)var25);
    var4.setModularAuthenticationStrategy((org.jsecurity.authc.pam.ModularAuthenticationStrategy)var20);
    org.jsecurity.realm.activedirectory.ActiveDirectoryRealm var30 = new org.jsecurity.realm.activedirectory.ActiveDirectoryRealm();
    var30.init();
    var30.setSystemPassword("dd\uFFFD");
    var4.setRealm((org.jsecurity.realm.Realm)var30);
    org.jsecurity.realm.activedirectory.ActiveDirectoryRealm var35 = new org.jsecurity.realm.activedirectory.ActiveDirectoryRealm();
    org.jsecurity.authc.credential.Sha256CredentialsMatcher var36 = new org.jsecurity.authc.credential.Sha256CredentialsMatcher();
    var35.setCredentialsMatcher((org.jsecurity.authc.credential.CredentialsMatcher)var36);
    java.lang.String var38 = var35.getAuthorizationCacheName();
    var35.setPrincipalSuffix("org.jsecurity.config.ConfigurationException: dd\uFFFD");
    org.jsecurity.realm.text.TextConfigurationRealm var41 = new org.jsecurity.realm.text.TextConfigurationRealm();
    java.io.InputStream var43 = org.jsecurity.util.ClassUtils.getResourceAsStream("");
    java.lang.Object[] var44 = new java.lang.Object[] { var43};
    java.util.List var45 = org.jsecurity.util.CollectionUtils.asList(var44);
    org.jsecurity.authc.pam.ModularRealmAuthenticator var46 = new org.jsecurity.authc.pam.ModularRealmAuthenticator(var45);
    org.jsecurity.subject.SimplePrincipalCollection var48 = new org.jsecurity.subject.SimplePrincipalCollection((java.util.Collection)var45, "org.jsecurity.authz.UnauthorizedException: org.jsecurity.session.ExpiredSessionException: ");
    org.jsecurity.session.UnknownSessionException var53 = new org.jsecurity.session.UnknownSessionException("dd\uFFFD", (java.io.Serializable)100.0f);
    org.jsecurity.session.SessionException var55 = new org.jsecurity.session.SessionException("dd\uFFFD", (java.lang.Throwable)var53, (java.io.Serializable)0);
    org.jsecurity.session.SessionException var56 = new org.jsecurity.session.SessionException("dd\uFFFD", (java.lang.Throwable)var53);
    var48.add((java.lang.Object)var56, "org.jsecurity.config.ConfigurationException: dd\uFFFD");
    var41.onLogout((org.jsecurity.subject.PrincipalCollection)var48);
    var35.onLogout((org.jsecurity.subject.PrincipalCollection)var48);
    org.jsecurity.authz.ModularRealmAuthorizer var61 = new org.jsecurity.authz.ModularRealmAuthorizer();
    java.io.InputStream var63 = org.jsecurity.util.ClassUtils.getResourceAsStream("");
    java.lang.Object[] var64 = new java.lang.Object[] { var63};
    java.util.List var65 = org.jsecurity.util.CollectionUtils.asList(var64);
    org.jsecurity.authc.pam.ModularRealmAuthenticator var66 = new org.jsecurity.authc.pam.ModularRealmAuthenticator(var65);
    org.jsecurity.subject.SimplePrincipalCollection var68 = new org.jsecurity.subject.SimplePrincipalCollection((java.util.Collection)var65, "org.jsecurity.authz.UnauthorizedException: org.jsecurity.session.ExpiredSessionException: ");
    org.jsecurity.session.UnknownSessionException var73 = new org.jsecurity.session.UnknownSessionException("dd\uFFFD", (java.io.Serializable)100.0f);
    org.jsecurity.session.SessionException var75 = new org.jsecurity.session.SessionException("dd\uFFFD", (java.lang.Throwable)var73, (java.io.Serializable)0);
    org.jsecurity.session.SessionException var76 = new org.jsecurity.session.SessionException("dd\uFFFD", (java.lang.Throwable)var73);
    var68.add((java.lang.Object)var76, "org.jsecurity.config.ConfigurationException: dd\uFFFD");
    java.util.Set var79 = var68.asSet();
    var61.setRealms((java.util.Collection)var79);
    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      var30.checkRoles((org.jsecurity.subject.PrincipalCollection)var48, (java.util.Collection)var79);
      fail("Expected exception of type java.util.NoSuchElementException");
    } catch (java.util.NoSuchElementException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var1);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var2);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var3);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var11);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var12);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var13);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var23);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var24);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var26);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var27);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var28);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var38);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var43);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var44);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var45);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var63);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var64);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var65);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var79);

  }

  public void test314() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest0.test314");


    org.jsecurity.cache.HashtableCache var1 = new org.jsecurity.cache.HashtableCache("\u0000\u0000\u0000");
    org.jsecurity.realm.text.TextConfigurationRealm var2 = new org.jsecurity.realm.text.TextConfigurationRealm();
    java.io.InputStream var4 = org.jsecurity.util.ClassUtils.getResourceAsStream("");
    java.lang.Object[] var5 = new java.lang.Object[] { var4};
    java.util.List var6 = org.jsecurity.util.CollectionUtils.asList(var5);
    org.jsecurity.authc.pam.ModularRealmAuthenticator var7 = new org.jsecurity.authc.pam.ModularRealmAuthenticator(var6);
    org.jsecurity.subject.SimplePrincipalCollection var9 = new org.jsecurity.subject.SimplePrincipalCollection((java.util.Collection)var6, "org.jsecurity.authz.UnauthorizedException: org.jsecurity.session.ExpiredSessionException: ");
    org.jsecurity.session.UnknownSessionException var14 = new org.jsecurity.session.UnknownSessionException("dd\uFFFD", (java.io.Serializable)100.0f);
    org.jsecurity.session.SessionException var16 = new org.jsecurity.session.SessionException("dd\uFFFD", (java.lang.Throwable)var14, (java.io.Serializable)0);
    org.jsecurity.session.SessionException var17 = new org.jsecurity.session.SessionException("dd\uFFFD", (java.lang.Throwable)var14);
    var9.add((java.lang.Object)var17, "org.jsecurity.config.ConfigurationException: dd\uFFFD");
    var2.onLogout((org.jsecurity.subject.PrincipalCollection)var9);
    org.jsecurity.authc.ExpiredCredentialsException var22 = new org.jsecurity.authc.ExpiredCredentialsException();
    org.jsecurity.session.ExpiredSessionException var23 = new org.jsecurity.session.ExpiredSessionException("", (java.lang.Throwable)var22);
    java.lang.Throwable[] var24 = var23.getSuppressed();
    org.jsecurity.io.ResourceException var25 = new org.jsecurity.io.ResourceException((java.lang.Throwable)var23);
    org.jsecurity.authc.SimpleAuthenticationInfo var26 = new org.jsecurity.authc.SimpleAuthenticationInfo((org.jsecurity.subject.PrincipalCollection)var9, (java.lang.Object)var23);
    org.jsecurity.codec.CodecException var29 = new org.jsecurity.codec.CodecException("dd\uFFFD");
    org.jsecurity.authc.ConcurrentAccessException var30 = new org.jsecurity.authc.ConcurrentAccessException("org.jsecurity.authz.UnauthorizedException: org.jsecurity.session.ExpiredSessionException: ", (java.lang.Throwable)var29);
    org.jsecurity.subject.SimplePrincipalCollection var32 = new org.jsecurity.subject.SimplePrincipalCollection((java.lang.Object)var29, "");
    java.io.InputStream var34 = org.jsecurity.util.ClassUtils.getResourceAsStream("");
    java.lang.Object[] var35 = new java.lang.Object[] { var34};
    java.util.List var36 = org.jsecurity.util.CollectionUtils.asList(var35);
    org.jsecurity.authc.pam.ModularRealmAuthenticator var37 = new org.jsecurity.authc.pam.ModularRealmAuthenticator(var36);
    var32.addAll((java.util.Collection)var36, "\u0000\u0000");
    org.jsecurity.authz.UnauthorizedException var41 = new org.jsecurity.authz.UnauthorizedException();
    org.jsecurity.session.SessionException var43 = new org.jsecurity.session.SessionException("", (java.lang.Throwable)var41, (java.io.Serializable)"org.jsecurity.config.ConfigurationException: dd\uFFFD");
    org.jsecurity.crypto.hash.Sha1Hash var44 = new org.jsecurity.crypto.hash.Sha1Hash((java.lang.Object)"");
    org.jsecurity.session.UnknownSessionException var49 = new org.jsecurity.session.UnknownSessionException("dd\uFFFD", (java.io.Serializable)100.0f);
    org.jsecurity.subject.SubjectException var50 = new org.jsecurity.subject.SubjectException("dd\uFFFD", (java.lang.Throwable)var49);
    org.jsecurity.io.SerializationException var51 = new org.jsecurity.io.SerializationException("", (java.lang.Throwable)var50);
    java.lang.Throwable[] var52 = var50.getSuppressed();
    java.util.Set var53 = org.jsecurity.util.CollectionUtils.asSet((java.lang.Object[])var52);
    org.jsecurity.authz.SimpleAuthorizationInfo var55 = new org.jsecurity.authz.SimpleAuthorizationInfo();
    org.jsecurity.session.UnknownSessionException var60 = new org.jsecurity.session.UnknownSessionException("dd\uFFFD", (java.io.Serializable)100.0f);
    org.jsecurity.subject.SubjectException var61 = new org.jsecurity.subject.SubjectException("dd\uFFFD", (java.lang.Throwable)var60);
    org.jsecurity.io.SerializationException var62 = new org.jsecurity.io.SerializationException("", (java.lang.Throwable)var61);
    java.lang.Throwable[] var63 = var61.getSuppressed();
    java.util.Set var64 = org.jsecurity.util.CollectionUtils.asSet((java.lang.Object[])var63);
    var55.setStringPermissions(var64);
    java.util.Set var66 = var55.getRoles();
    org.jsecurity.authz.SimpleAuthorizationInfo var67 = new org.jsecurity.authz.SimpleAuthorizationInfo();
    var67.addRole("a2b823b1e72eae2b727289df8a00a89df8a0bab6ad8a89c4c5c7a9b62a270000");
    org.jsecurity.session.UnknownSessionException var74 = new org.jsecurity.session.UnknownSessionException("dd\uFFFD", (java.io.Serializable)100.0f);
    org.jsecurity.subject.SubjectException var75 = new org.jsecurity.subject.SubjectException("dd\uFFFD", (java.lang.Throwable)var74);
    org.jsecurity.io.SerializationException var76 = new org.jsecurity.io.SerializationException("", (java.lang.Throwable)var75);
    java.lang.Throwable[] var77 = var75.getSuppressed();
    java.util.Set var78 = org.jsecurity.util.CollectionUtils.asSet((java.lang.Object[])var77);
    var67.addRoles((java.util.Collection)var78);
    var55.setRoles(var78);
    org.jsecurity.authz.SimpleRole var81 = new org.jsecurity.authz.SimpleRole("org.jsecurity.authz.UnauthorizedException: org.jsecurity.session.ExpiredSessionException: ", var78);
    org.jsecurity.authc.SimpleAccount var82 = new org.jsecurity.authc.SimpleAccount((org.jsecurity.subject.PrincipalCollection)var32, (java.lang.Object)"", var53, var78);
    var26.setPrincipals((org.jsecurity.subject.PrincipalCollection)var32);
    java.lang.String[] var87 = org.jsecurity.util.StringUtils.split("dd\uFFFD", '4', 'a');
    var1.put((java.lang.Object)var32, (java.lang.Object)'a');
    int var89 = var1.size();
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var4);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var5);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var6);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var24);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var34);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var35);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var36);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var52);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var53);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var63);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var64);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var66);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var77);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var78);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var87);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var89 == 1);

  }

  public void test315() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest0.test315");


    org.jsecurity.realm.text.TextConfigurationRealm var0 = new org.jsecurity.realm.text.TextConfigurationRealm();
    org.jsecurity.realm.text.TextConfigurationRealm var1 = new org.jsecurity.realm.text.TextConfigurationRealm();
    java.io.InputStream var3 = org.jsecurity.util.ClassUtils.getResourceAsStream("");
    java.lang.Object[] var4 = new java.lang.Object[] { var3};
    java.util.List var5 = org.jsecurity.util.CollectionUtils.asList(var4);
    org.jsecurity.authc.pam.ModularRealmAuthenticator var6 = new org.jsecurity.authc.pam.ModularRealmAuthenticator(var5);
    org.jsecurity.subject.SimplePrincipalCollection var8 = new org.jsecurity.subject.SimplePrincipalCollection((java.util.Collection)var5, "org.jsecurity.authz.UnauthorizedException: org.jsecurity.session.ExpiredSessionException: ");
    org.jsecurity.session.UnknownSessionException var13 = new org.jsecurity.session.UnknownSessionException("dd\uFFFD", (java.io.Serializable)100.0f);
    org.jsecurity.session.SessionException var15 = new org.jsecurity.session.SessionException("dd\uFFFD", (java.lang.Throwable)var13, (java.io.Serializable)0);
    org.jsecurity.session.SessionException var16 = new org.jsecurity.session.SessionException("dd\uFFFD", (java.lang.Throwable)var13);
    var8.add((java.lang.Object)var16, "org.jsecurity.config.ConfigurationException: dd\uFFFD");
    var1.onLogout((org.jsecurity.subject.PrincipalCollection)var8);
    java.util.Collection var21 = var8.fromRealm("\u0000\u0000\u0000");
    var0.onLogout((org.jsecurity.subject.PrincipalCollection)var8);
    java.util.Set var23 = var8.asSet();
    org.jsecurity.authz.ModularRealmAuthorizer var24 = new org.jsecurity.authz.ModularRealmAuthorizer((java.util.Collection)var23);
    java.io.InputStream var26 = org.jsecurity.util.ClassUtils.getResourceAsStream("");
    java.lang.Object[] var27 = new java.lang.Object[] { var26};
    java.util.List var28 = org.jsecurity.util.CollectionUtils.asList(var27);
    org.jsecurity.authc.pam.ModularRealmAuthenticator var29 = new org.jsecurity.authc.pam.ModularRealmAuthenticator(var28);
    org.jsecurity.subject.SimplePrincipalCollection var31 = new org.jsecurity.subject.SimplePrincipalCollection((java.util.Collection)var28, "org.jsecurity.authz.UnauthorizedException: org.jsecurity.session.ExpiredSessionException: ");
    org.jsecurity.mgt.DefaultSecurityManager var32 = new org.jsecurity.mgt.DefaultSecurityManager();
    java.io.InputStream var34 = org.jsecurity.util.ClassUtils.getResourceAsStream("");
    java.lang.Object[] var35 = new java.lang.Object[] { var34};
    java.util.List var36 = org.jsecurity.util.CollectionUtils.asList(var35);
    org.jsecurity.authc.pam.ModularRealmAuthenticator var37 = new org.jsecurity.authc.pam.ModularRealmAuthenticator(var36);
    org.jsecurity.authc.pam.AllSuccessfulModularAuthenticationStrategy var38 = new org.jsecurity.authc.pam.AllSuccessfulModularAuthenticationStrategy();
    var37.setModularAuthenticationStrategy((org.jsecurity.authc.pam.ModularAuthenticationStrategy)var38);
    org.jsecurity.authz.SimpleAuthorizationInfo var40 = new org.jsecurity.authz.SimpleAuthorizationInfo();
    var40.addStringPermission("hi!");
    java.io.InputStream var44 = org.jsecurity.util.ClassUtils.getResourceAsStream("");
    java.lang.Object[] var45 = new java.lang.Object[] { var44};
    java.util.List var46 = org.jsecurity.util.CollectionUtils.asList(var45);
    var40.addRoles((java.util.Collection)var46);
    var37.setAuthenticationListeners((java.util.Collection)var46);
    var32.setSessionListeners((java.util.Collection)var46);
    org.jsecurity.realm.text.TextConfigurationRealm var50 = new org.jsecurity.realm.text.TextConfigurationRealm();
    java.io.InputStream var52 = org.jsecurity.util.ClassUtils.getResourceAsStream("");
    java.lang.Object[] var53 = new java.lang.Object[] { var52};
    java.util.List var54 = org.jsecurity.util.CollectionUtils.asList(var53);
    org.jsecurity.authc.pam.ModularRealmAuthenticator var55 = new org.jsecurity.authc.pam.ModularRealmAuthenticator(var54);
    org.jsecurity.subject.SimplePrincipalCollection var57 = new org.jsecurity.subject.SimplePrincipalCollection((java.util.Collection)var54, "org.jsecurity.authz.UnauthorizedException: org.jsecurity.session.ExpiredSessionException: ");
    org.jsecurity.session.UnknownSessionException var62 = new org.jsecurity.session.UnknownSessionException("dd\uFFFD", (java.io.Serializable)100.0f);
    org.jsecurity.session.SessionException var64 = new org.jsecurity.session.SessionException("dd\uFFFD", (java.lang.Throwable)var62, (java.io.Serializable)0);
    org.jsecurity.session.SessionException var65 = new org.jsecurity.session.SessionException("dd\uFFFD", (java.lang.Throwable)var62);
    var57.add((java.lang.Object)var65, "org.jsecurity.config.ConfigurationException: dd\uFFFD");
    var50.onLogout((org.jsecurity.subject.PrincipalCollection)var57);
    org.jsecurity.authc.pam.FirstSuccessfulAuthenticationStrategy var69 = new org.jsecurity.authc.pam.FirstSuccessfulAuthenticationStrategy();
    org.jsecurity.authz.UnauthorizedException var71 = new org.jsecurity.authz.UnauthorizedException("org.jsecurity.config.ConfigurationException: dd\uFFFD");
    java.lang.Throwable[] var72 = var71.getSuppressed();
    java.util.List var73 = org.jsecurity.util.CollectionUtils.asList((java.lang.Object[])var72);
    org.jsecurity.authc.UsernamePasswordToken var74 = new org.jsecurity.authc.UsernamePasswordToken();
    java.lang.String var75 = var74.getUsername();
    java.net.InetAddress var76 = var74.getInetAddress();
    org.jsecurity.authc.AuthenticationInfo var77 = var69.beforeAllAttempts((java.util.Collection)var73, (org.jsecurity.authc.AuthenticationToken)var74);
    boolean[] var78 = var32.hasRoles((org.jsecurity.subject.PrincipalCollection)var57, var73);
    org.jsecurity.codec.CodecException var81 = new org.jsecurity.codec.CodecException("dd\uFFFD");
    org.jsecurity.authc.ConcurrentAccessException var82 = new org.jsecurity.authc.ConcurrentAccessException("org.jsecurity.authz.UnauthorizedException: org.jsecurity.session.ExpiredSessionException: ", (java.lang.Throwable)var81);
    org.jsecurity.subject.SimplePrincipalCollection var84 = new org.jsecurity.subject.SimplePrincipalCollection((java.lang.Object)var81, "");
    java.io.InputStream var86 = org.jsecurity.util.ClassUtils.getResourceAsStream("");
    java.lang.Object[] var87 = new java.lang.Object[] { var86};
    java.util.List var88 = org.jsecurity.util.CollectionUtils.asList(var87);
    org.jsecurity.authc.pam.ModularRealmAuthenticator var89 = new org.jsecurity.authc.pam.ModularRealmAuthenticator(var88);
    var84.addAll((java.util.Collection)var88, "\u0000\u0000");
    var32.setSessionListeners((java.util.Collection)var88);
    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      boolean[] var93 = var24.hasRoles((org.jsecurity.subject.PrincipalCollection)var31, var88);
      fail("Expected exception of type java.lang.ClassCastException");
    } catch (java.lang.ClassCastException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var3);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var4);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var5);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var21);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var23);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var26);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var27);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var28);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var34);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var35);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var36);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var44);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var45);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var46);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var52);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var53);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var54);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var72);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var73);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var75);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var76);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var77);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var78);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var86);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var87);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var88);

  }

  public void test316() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest0.test316");


    org.jsecurity.realm.activedirectory.ActiveDirectoryRealm var0 = new org.jsecurity.realm.activedirectory.ActiveDirectoryRealm();
    org.jsecurity.authc.credential.Sha256CredentialsMatcher var1 = new org.jsecurity.authc.credential.Sha256CredentialsMatcher();
    var0.setCredentialsMatcher((org.jsecurity.authc.credential.CredentialsMatcher)var1);
    java.lang.String var3 = var0.getAuthorizationCacheName();
    org.jsecurity.authc.UsernamePasswordToken var4 = new org.jsecurity.authc.UsernamePasswordToken();
    java.lang.String var5 = var4.getUsername();
    java.lang.Object var6 = var4.getPrincipal();
    boolean var7 = var0.supports((org.jsecurity.authc.AuthenticationToken)var4);
    var0.setName("hi!");
    org.jsecurity.cache.CacheManager var10 = var0.getCacheManager();
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var3);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var5);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var6);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var7 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var10);

  }

  public void test317() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest0.test317");


    org.jsecurity.mgt.DefaultSecurityManager var0 = new org.jsecurity.mgt.DefaultSecurityManager();
    java.io.InputStream var2 = org.jsecurity.util.ClassUtils.getResourceAsStream("");
    java.lang.Object[] var3 = new java.lang.Object[] { var2};
    java.util.List var4 = org.jsecurity.util.CollectionUtils.asList(var3);
    org.jsecurity.authc.pam.ModularRealmAuthenticator var5 = new org.jsecurity.authc.pam.ModularRealmAuthenticator(var4);
    org.jsecurity.authc.pam.AllSuccessfulModularAuthenticationStrategy var6 = new org.jsecurity.authc.pam.AllSuccessfulModularAuthenticationStrategy();
    var5.setModularAuthenticationStrategy((org.jsecurity.authc.pam.ModularAuthenticationStrategy)var6);
    org.jsecurity.authz.SimpleAuthorizationInfo var8 = new org.jsecurity.authz.SimpleAuthorizationInfo();
    var8.addStringPermission("hi!");
    java.io.InputStream var12 = org.jsecurity.util.ClassUtils.getResourceAsStream("");
    java.lang.Object[] var13 = new java.lang.Object[] { var12};
    java.util.List var14 = org.jsecurity.util.CollectionUtils.asList(var13);
    var8.addRoles((java.util.Collection)var14);
    var5.setAuthenticationListeners((java.util.Collection)var14);
    var0.setSessionListeners((java.util.Collection)var14);
    org.jsecurity.authc.pam.ModularRealmAuthenticator var18 = new org.jsecurity.authc.pam.ModularRealmAuthenticator();
    org.jsecurity.authz.permission.InvalidPermissionStringException var21 = new org.jsecurity.authz.permission.InvalidPermissionStringException("", "dd\uFFFD");
    org.jsecurity.JSecurityException var23 = new org.jsecurity.JSecurityException("");
    org.jsecurity.authc.SimpleAuthenticationInfo var25 = new org.jsecurity.authc.SimpleAuthenticationInfo((java.lang.Object)var21, (java.lang.Object)"", "org.jsecurity.authz.UnauthorizedException: org.jsecurity.session.ExpiredSessionException: ");
    org.jsecurity.subject.PrincipalCollection var26 = var25.getPrincipals();
    var18.onLogout(var26);
    var0.setAuthenticator((org.jsecurity.authc.Authenticator)var18);
    org.jsecurity.codec.CodecException var31 = new org.jsecurity.codec.CodecException("dd\uFFFD");
    org.jsecurity.authc.ConcurrentAccessException var32 = new org.jsecurity.authc.ConcurrentAccessException("org.jsecurity.authz.UnauthorizedException: org.jsecurity.session.ExpiredSessionException: ", (java.lang.Throwable)var31);
    org.jsecurity.subject.SimplePrincipalCollection var34 = new org.jsecurity.subject.SimplePrincipalCollection((java.lang.Object)var31, "");
    org.jsecurity.authc.pam.FirstSuccessfulAuthenticationStrategy var35 = new org.jsecurity.authc.pam.FirstSuccessfulAuthenticationStrategy();
    org.jsecurity.authz.UnauthorizedException var37 = new org.jsecurity.authz.UnauthorizedException("org.jsecurity.config.ConfigurationException: dd\uFFFD");
    java.lang.Throwable[] var38 = var37.getSuppressed();
    java.util.List var39 = org.jsecurity.util.CollectionUtils.asList((java.lang.Object[])var38);
    org.jsecurity.authc.UsernamePasswordToken var40 = new org.jsecurity.authc.UsernamePasswordToken();
    java.lang.String var41 = var40.getUsername();
    java.net.InetAddress var42 = var40.getInetAddress();
    org.jsecurity.authc.AuthenticationInfo var43 = var35.beforeAllAttempts((java.util.Collection)var39, (org.jsecurity.authc.AuthenticationToken)var40);
    org.jsecurity.session.UnknownSessionException var48 = new org.jsecurity.session.UnknownSessionException("dd\uFFFD", (java.io.Serializable)100.0f);
    org.jsecurity.subject.SubjectException var49 = new org.jsecurity.subject.SubjectException("dd\uFFFD", (java.lang.Throwable)var48);
    org.jsecurity.io.SerializationException var50 = new org.jsecurity.io.SerializationException("", (java.lang.Throwable)var49);
    java.lang.Throwable[] var51 = var49.getSuppressed();
    java.util.Set var52 = org.jsecurity.util.CollectionUtils.asSet((java.lang.Object[])var51);
    org.jsecurity.authc.SimpleAccount var53 = new org.jsecurity.authc.SimpleAccount((org.jsecurity.subject.PrincipalCollection)var34, (java.lang.Object)var39, var52);
    java.io.InputStream var55 = org.jsecurity.util.ClassUtils.getResourceAsStream("");
    java.lang.Object[] var56 = new java.lang.Object[] { var55};
    java.util.List var57 = org.jsecurity.util.CollectionUtils.asList(var56);
    org.jsecurity.authc.pam.ModularRealmAuthenticator var58 = new org.jsecurity.authc.pam.ModularRealmAuthenticator(var57);
    org.jsecurity.subject.SimplePrincipalCollection var60 = new org.jsecurity.subject.SimplePrincipalCollection((java.util.Collection)var57, "org.jsecurity.authz.UnauthorizedException: org.jsecurity.session.ExpiredSessionException: ");
    org.jsecurity.io.ResourceException var64 = new org.jsecurity.io.ResourceException("hi!");
    org.jsecurity.authc.UnknownAccountException var65 = new org.jsecurity.authc.UnknownAccountException((java.lang.Throwable)var64);
    org.jsecurity.session.StoppedSessionException var66 = new org.jsecurity.session.StoppedSessionException("dd\uFFFD", (java.io.Serializable)var64);
    org.jsecurity.session.UnknownSessionException var67 = new org.jsecurity.session.UnknownSessionException("org.jsecurity.authz.UnauthorizedException: org.jsecurity.session.ExpiredSessionException: ", (java.lang.Throwable)var64);
    boolean var68 = var60.equals((java.lang.Object)var64);
    var34.addAll((org.jsecurity.subject.PrincipalCollection)var60);
    org.jsecurity.session.UnknownSessionException var74 = new org.jsecurity.session.UnknownSessionException("dd\uFFFD", (java.io.Serializable)100.0f);
    org.jsecurity.subject.SubjectException var75 = new org.jsecurity.subject.SubjectException("dd\uFFFD", (java.lang.Throwable)var74);
    org.jsecurity.io.SerializationException var76 = new org.jsecurity.io.SerializationException("", (java.lang.Throwable)var75);
    java.lang.Throwable[] var77 = var75.getSuppressed();
    java.util.List var78 = org.jsecurity.util.CollectionUtils.asList((java.lang.Object[])var77);
    boolean var79 = var0.isPermittedAll((org.jsecurity.subject.PrincipalCollection)var34, (java.util.Collection)var78);
    char[] var81 = new char[] { };
    org.jsecurity.authc.UsernamePasswordToken var83 = new org.jsecurity.authc.UsernamePasswordToken("hi!", var81, true);
    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      org.jsecurity.authc.AuthenticationInfo var84 = var0.authenticate((org.jsecurity.authc.AuthenticationToken)var83);
      fail("Expected exception of type org.jsecurity.authc.AuthenticationException");
    } catch (org.jsecurity.authc.AuthenticationException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var2);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var3);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var4);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var12);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var13);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var14);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var26);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var38);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var39);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var41);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var42);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var43);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var51);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var52);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var55);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var56);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var57);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var68 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var77);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var78);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var79 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var81);

  }

  public void test318() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest0.test318");


    boolean var1 = org.jsecurity.util.ClassUtils.isAvailable("\u0000\u0000\u0000");
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var1 == false);

  }

  public void test319() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest0.test319");


    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      byte[] var1 = org.jsecurity.codec.Hex.decode("org.jsecurity.authc.CredentialsException: 783ccd31-48a8-42dd-890f-df885a7baaff");
      fail("Expected exception of type java.lang.IllegalArgumentException");
    } catch (java.lang.IllegalArgumentException e) {
      // Expected exception.
    }

  }

  public void test320() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest0.test320");


    org.jsecurity.config.ConfigurationException var1 = new org.jsecurity.config.ConfigurationException("a2b823b1e72eae2b727289df8a00a89df8a0bab6ad8a89c4c5c7a9b62a270000");

  }

  public void test321() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest0.test321");


    org.jsecurity.authz.SimpleRole var0 = new org.jsecurity.authz.SimpleRole();
    org.jsecurity.authz.SimpleAuthorizationInfo var1 = new org.jsecurity.authz.SimpleAuthorizationInfo();
    var1.addRole("a2b823b1e72eae2b727289df8a00a89df8a0bab6ad8a89c4c5c7a9b62a270000");
    org.jsecurity.session.UnknownSessionException var8 = new org.jsecurity.session.UnknownSessionException("dd\uFFFD", (java.io.Serializable)100.0f);
    org.jsecurity.subject.SubjectException var9 = new org.jsecurity.subject.SubjectException("dd\uFFFD", (java.lang.Throwable)var8);
    org.jsecurity.io.SerializationException var10 = new org.jsecurity.io.SerializationException("", (java.lang.Throwable)var9);
    java.lang.Throwable[] var11 = var9.getSuppressed();
    java.util.Set var12 = org.jsecurity.util.CollectionUtils.asSet((java.lang.Object[])var11);
    var1.addRoles((java.util.Collection)var12);
    var0.addAll((java.util.Collection)var12);
    org.jsecurity.authz.SimpleRole var15 = new org.jsecurity.authz.SimpleRole();
    org.jsecurity.authz.SimpleAuthorizationInfo var16 = new org.jsecurity.authz.SimpleAuthorizationInfo();
    var16.addRole("a2b823b1e72eae2b727289df8a00a89df8a0bab6ad8a89c4c5c7a9b62a270000");
    org.jsecurity.session.UnknownSessionException var23 = new org.jsecurity.session.UnknownSessionException("dd\uFFFD", (java.io.Serializable)100.0f);
    org.jsecurity.subject.SubjectException var24 = new org.jsecurity.subject.SubjectException("dd\uFFFD", (java.lang.Throwable)var23);
    org.jsecurity.io.SerializationException var25 = new org.jsecurity.io.SerializationException("", (java.lang.Throwable)var24);
    java.lang.Throwable[] var26 = var24.getSuppressed();
    java.util.Set var27 = org.jsecurity.util.CollectionUtils.asSet((java.lang.Object[])var26);
    var16.addRoles((java.util.Collection)var27);
    var15.addAll((java.util.Collection)var27);
    java.lang.String var30 = var15.getName();
    org.jsecurity.authz.permission.WildcardPermission var33 = new org.jsecurity.authz.permission.WildcardPermission("hi!", false);
    var15.add((org.jsecurity.authz.Permission)var33);
    var0.add((org.jsecurity.authz.Permission)var33);
    java.lang.String var36 = var0.toString();
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var11);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var12);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var26);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var27);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var30);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var36);

  }

  public void test322() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest0.test322");


    org.jsecurity.jndi.JndiTemplate var0 = new org.jsecurity.jndi.JndiTemplate();
    java.util.Properties var1 = var0.getEnvironment();
    org.jsecurity.session.UnknownSessionException var9 = new org.jsecurity.session.UnknownSessionException("dd\uFFFD", (java.io.Serializable)100.0f);
    org.jsecurity.config.ConfigurationException var10 = new org.jsecurity.config.ConfigurationException("dd\uFFFD", (java.lang.Throwable)var9);
    org.jsecurity.session.ExpiredSessionException var12 = new org.jsecurity.session.ExpiredSessionException("", (java.lang.Throwable)var10, (java.io.Serializable)true);
    org.jsecurity.authc.pam.UnsupportedTokenException var13 = new org.jsecurity.authc.pam.UnsupportedTokenException((java.lang.Throwable)var12);
    org.jsecurity.authc.AccountException var14 = new org.jsecurity.authc.AccountException((java.lang.Throwable)var13);
    org.jsecurity.authc.DisabledAccountException var15 = new org.jsecurity.authc.DisabledAccountException((java.lang.Throwable)var13);
    org.jsecurity.session.StoppedSessionException var16 = new org.jsecurity.session.StoppedSessionException("org.jsecurity.config.ConfigurationException: dd\uFFFD", (java.io.Serializable)var13);
    org.jsecurity.session.ExpiredSessionException var17 = new org.jsecurity.session.ExpiredSessionException("\u0000\u0000", (java.lang.Throwable)var16);
    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      var0.rebind("dd\uFFFD", (java.lang.Object)"\u0000\u0000");
      fail("Expected exception of type javax.naming.NoInitialContextException");
    } catch (javax.naming.NoInitialContextException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var1);

  }

  public void test323() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest0.test323");


    org.jsecurity.authz.SimpleRole var0 = new org.jsecurity.authz.SimpleRole();
    org.jsecurity.authz.SimpleAuthorizationInfo var1 = new org.jsecurity.authz.SimpleAuthorizationInfo();
    var1.addRole("a2b823b1e72eae2b727289df8a00a89df8a0bab6ad8a89c4c5c7a9b62a270000");
    org.jsecurity.session.UnknownSessionException var8 = new org.jsecurity.session.UnknownSessionException("dd\uFFFD", (java.io.Serializable)100.0f);
    org.jsecurity.subject.SubjectException var9 = new org.jsecurity.subject.SubjectException("dd\uFFFD", (java.lang.Throwable)var8);
    org.jsecurity.io.SerializationException var10 = new org.jsecurity.io.SerializationException("", (java.lang.Throwable)var9);
    java.lang.Throwable[] var11 = var9.getSuppressed();
    java.util.Set var12 = org.jsecurity.util.CollectionUtils.asSet((java.lang.Object[])var11);
    var1.addRoles((java.util.Collection)var12);
    var0.addAll((java.util.Collection)var12);
    org.jsecurity.authz.SimpleRole var16 = new org.jsecurity.authz.SimpleRole();
    org.jsecurity.authz.permission.WildcardPermission var19 = new org.jsecurity.authz.permission.WildcardPermission("hi!", false);
    boolean var20 = var16.isPermitted((org.jsecurity.authz.Permission)var19);
    org.jsecurity.session.InvalidSessionException var21 = new org.jsecurity.session.InvalidSessionException("org.jsecurity.config.ConfigurationException: dd\uFFFD", (java.io.Serializable)var19);
    org.jsecurity.authz.SimpleRole var22 = new org.jsecurity.authz.SimpleRole();
    org.jsecurity.authz.permission.WildcardPermission var25 = new org.jsecurity.authz.permission.WildcardPermission("hi!", false);
    boolean var26 = var22.isPermitted((org.jsecurity.authz.Permission)var25);
    boolean var27 = var19.implies((org.jsecurity.authz.Permission)var25);
    boolean var28 = var0.isPermitted((org.jsecurity.authz.Permission)var25);
    org.jsecurity.authz.SimpleAuthorizingAccount var29 = new org.jsecurity.authz.SimpleAuthorizingAccount();
    java.util.Set var30 = var29.getSimpleRoles();
    org.jsecurity.authz.SimpleRole var31 = new org.jsecurity.authz.SimpleRole();
    org.jsecurity.authz.SimpleAuthorizationInfo var32 = new org.jsecurity.authz.SimpleAuthorizationInfo();
    var32.addRole("a2b823b1e72eae2b727289df8a00a89df8a0bab6ad8a89c4c5c7a9b62a270000");
    org.jsecurity.session.UnknownSessionException var39 = new org.jsecurity.session.UnknownSessionException("dd\uFFFD", (java.io.Serializable)100.0f);
    org.jsecurity.subject.SubjectException var40 = new org.jsecurity.subject.SubjectException("dd\uFFFD", (java.lang.Throwable)var39);
    org.jsecurity.io.SerializationException var41 = new org.jsecurity.io.SerializationException("", (java.lang.Throwable)var40);
    java.lang.Throwable[] var42 = var40.getSuppressed();
    java.util.Set var43 = org.jsecurity.util.CollectionUtils.asSet((java.lang.Object[])var42);
    var32.addRoles((java.util.Collection)var43);
    var31.addAll((java.util.Collection)var43);
    org.jsecurity.authz.SimpleRole var47 = new org.jsecurity.authz.SimpleRole();
    org.jsecurity.authz.permission.WildcardPermission var50 = new org.jsecurity.authz.permission.WildcardPermission("hi!", false);
    boolean var51 = var47.isPermitted((org.jsecurity.authz.Permission)var50);
    org.jsecurity.session.InvalidSessionException var52 = new org.jsecurity.session.InvalidSessionException("org.jsecurity.config.ConfigurationException: dd\uFFFD", (java.io.Serializable)var50);
    org.jsecurity.authz.SimpleRole var53 = new org.jsecurity.authz.SimpleRole();
    org.jsecurity.authz.permission.WildcardPermission var56 = new org.jsecurity.authz.permission.WildcardPermission("hi!", false);
    boolean var57 = var53.isPermitted((org.jsecurity.authz.Permission)var56);
    boolean var58 = var50.implies((org.jsecurity.authz.Permission)var56);
    boolean var59 = var31.isPermitted((org.jsecurity.authz.Permission)var56);
    boolean var60 = var29.isPermitted((org.jsecurity.authz.Permission)var56);
    boolean var61 = var0.isPermitted((org.jsecurity.authz.Permission)var56);
    java.lang.String var62 = var0.toString();
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var11);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var12);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var20 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var26 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var27 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var28 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var30);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var42);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var43);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var51 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var57 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var58 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var59 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var60 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var61 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var62);

  }

  public void test324() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest0.test324");


    org.jsecurity.mgt.DefaultSecurityManager var0 = new org.jsecurity.mgt.DefaultSecurityManager();
    org.jsecurity.authz.permission.WildcardPermissionResolver var1 = new org.jsecurity.authz.permission.WildcardPermissionResolver();
    var0.setPermissionResolver((org.jsecurity.authz.permission.PermissionResolver)var1);
    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      var0.setRememberMeEncryptionCipherKeyBase64("org.jsecurity.config.ConfigurationException: dd\uFFFD");
      fail("Expected exception of type java.lang.IllegalStateException");
    } catch (java.lang.IllegalStateException e) {
      // Expected exception.
    }

  }

  public void test325() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest0.test325");


    org.jsecurity.realm.SimpleAccountRealm var1 = new org.jsecurity.realm.SimpleAccountRealm("hi!");
    java.lang.Class var2 = var1.getAuthenticationTokenClass();
    org.jsecurity.session.mgt.eis.MemorySessionDAO var3 = new org.jsecurity.session.mgt.eis.MemorySessionDAO();
    org.jsecurity.cache.Cache var4 = var3.getActiveSessionsCache();
    org.jsecurity.cache.CacheManager var5 = var3.getCacheManager();
    var1.setCacheManager(var5);
    java.lang.String var7 = var1.getAuthorizationCacheName();
    java.lang.String var8 = var1.getAuthorizationCacheName();
    var1.afterRoleCacheSet();
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var2);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var4);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var5);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var7 + "' != '" + "org.jsecurity.realm.SimpleAccountRealm-55-authorization"+ "'", var7.equals("org.jsecurity.realm.SimpleAccountRealm-55-authorization"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var8 + "' != '" + "org.jsecurity.realm.SimpleAccountRealm-55-authorization"+ "'", var8.equals("org.jsecurity.realm.SimpleAccountRealm-55-authorization"));

  }

  public void test326() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest0.test326");


    boolean var1 = org.jsecurity.util.ClassUtils.isAvailable("\uFFFD\uFFFD#\uFFFD\uFFFD.\uFFFD+r\uFFFD\u6959(\uFFFD\uFFFDW\uFFFDq\uFFFD.\uFFFD\uFFFD^jY\uFFFDj\uFFFDa\uFFFD\uFFFD\uFFFDj\u0628\u0000");
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var1 == false);

  }

  public void test327() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest0.test327");


    org.jsecurity.realm.activedirectory.ActiveDirectoryRealm var0 = new org.jsecurity.realm.activedirectory.ActiveDirectoryRealm();
    var0.init();
    var0.setSystemPassword("dd\uFFFD");
    var0.setPrincipalSuffix("a2b823b1e72eae2b727289df8a00a89df8a0bab6ad8a89c4c5c7a9b62a270000");

  }

  public void test328() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest0.test328");


    org.jsecurity.session.UnknownSessionException var5 = new org.jsecurity.session.UnknownSessionException("dd\uFFFD", (java.io.Serializable)100.0f);
    org.jsecurity.config.ConfigurationException var6 = new org.jsecurity.config.ConfigurationException("dd\uFFFD", (java.lang.Throwable)var5);
    org.jsecurity.session.ExpiredSessionException var8 = new org.jsecurity.session.ExpiredSessionException("", (java.lang.Throwable)var6, (java.io.Serializable)true);
    org.jsecurity.util.UnknownClassException var9 = new org.jsecurity.util.UnknownClassException("org.jsecurity.realm.SimpleAccountRealm-9-authorization", (java.lang.Throwable)var8);

  }

  public void test329() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest0.test329");


    org.jsecurity.authz.UnauthenticatedException var1 = new org.jsecurity.authz.UnauthenticatedException();
    org.jsecurity.config.UnresolveableReferenceException var2 = new org.jsecurity.config.UnresolveableReferenceException("", (java.lang.Throwable)var1);
    org.jsecurity.authc.AuthenticationException var3 = new org.jsecurity.authc.AuthenticationException((java.lang.Throwable)var1);

  }

  public void test330() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest0.test330");


    boolean var1 = org.jsecurity.io.ResourceUtils.resourceExists("\u0000\u0000\u0000");
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var1 == false);

  }

  public void test331() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest0.test331");


    org.jsecurity.crypto.BlowfishCipher var0 = new org.jsecurity.crypto.BlowfishCipher();
    byte[] var4 = new byte[] { (byte)100, (byte)100, (byte)(-1)};
    java.lang.String var5 = org.jsecurity.codec.CodecSupport.toString(var4);
    byte[] var6 = org.jsecurity.codec.Base64.encode(var4);
    char[] var7 = org.jsecurity.codec.CodecSupport.toChars(var6);
    byte[] var11 = new byte[] { (byte)100, (byte)100, (byte)(-1)};
    java.lang.String var12 = org.jsecurity.codec.CodecSupport.toString(var11);
    byte[] var14 = org.jsecurity.codec.Base64.encode(var11, false);
    byte[] var15 = var0.encrypt(var6, var11);
    java.io.InputStream var18 = org.jsecurity.util.ClassUtils.getResourceAsStream("");
    java.lang.Object[] var19 = new java.lang.Object[] { var18};
    java.util.List var20 = org.jsecurity.util.CollectionUtils.asList(var19);
    org.jsecurity.authc.pam.ModularRealmAuthenticator var21 = new org.jsecurity.authc.pam.ModularRealmAuthenticator(var20);
    org.jsecurity.authc.pam.AllSuccessfulModularAuthenticationStrategy var22 = new org.jsecurity.authc.pam.AllSuccessfulModularAuthenticationStrategy();
    var21.setModularAuthenticationStrategy((org.jsecurity.authc.pam.ModularAuthenticationStrategy)var22);
    org.jsecurity.authz.SimpleAuthorizationInfo var24 = new org.jsecurity.authz.SimpleAuthorizationInfo();
    var24.addStringPermission("hi!");
    java.io.InputStream var28 = org.jsecurity.util.ClassUtils.getResourceAsStream("");
    java.lang.Object[] var29 = new java.lang.Object[] { var28};
    java.util.List var30 = org.jsecurity.util.CollectionUtils.asList(var29);
    var24.addRoles((java.util.Collection)var30);
    var21.setAuthenticationListeners((java.util.Collection)var30);
    org.jsecurity.realm.activedirectory.ActiveDirectoryRealm var33 = new org.jsecurity.realm.activedirectory.ActiveDirectoryRealm();
    var33.setPrincipalSuffix("");
    var21.setRealm((org.jsecurity.realm.Realm)var33);
    org.jsecurity.authc.pam.FirstSuccessfulAuthenticationStrategy var37 = new org.jsecurity.authc.pam.FirstSuccessfulAuthenticationStrategy();
    org.jsecurity.authz.UnauthorizedException var39 = new org.jsecurity.authz.UnauthorizedException("org.jsecurity.config.ConfigurationException: dd\uFFFD");
    java.lang.Throwable[] var40 = var39.getSuppressed();
    java.util.List var41 = org.jsecurity.util.CollectionUtils.asList((java.lang.Object[])var40);
    org.jsecurity.authc.UsernamePasswordToken var42 = new org.jsecurity.authc.UsernamePasswordToken();
    java.lang.String var43 = var42.getUsername();
    java.net.InetAddress var44 = var42.getInetAddress();
    org.jsecurity.authc.AuthenticationInfo var45 = var37.beforeAllAttempts((java.util.Collection)var41, (org.jsecurity.authc.AuthenticationToken)var42);
    var21.setModularAuthenticationStrategy((org.jsecurity.authc.pam.ModularAuthenticationStrategy)var37);
    org.jsecurity.codec.CodecException var49 = new org.jsecurity.codec.CodecException("dd\uFFFD");
    org.jsecurity.authc.ConcurrentAccessException var50 = new org.jsecurity.authc.ConcurrentAccessException("org.jsecurity.authz.UnauthorizedException: org.jsecurity.session.ExpiredSessionException: ", (java.lang.Throwable)var49);
    org.jsecurity.subject.SimplePrincipalCollection var52 = new org.jsecurity.subject.SimplePrincipalCollection((java.lang.Object)var49, "");
    org.jsecurity.authc.pam.FirstSuccessfulAuthenticationStrategy var53 = new org.jsecurity.authc.pam.FirstSuccessfulAuthenticationStrategy();
    org.jsecurity.authz.UnauthorizedException var55 = new org.jsecurity.authz.UnauthorizedException("org.jsecurity.config.ConfigurationException: dd\uFFFD");
    java.lang.Throwable[] var56 = var55.getSuppressed();
    java.util.List var57 = org.jsecurity.util.CollectionUtils.asList((java.lang.Object[])var56);
    org.jsecurity.authc.UsernamePasswordToken var58 = new org.jsecurity.authc.UsernamePasswordToken();
    java.lang.String var59 = var58.getUsername();
    java.net.InetAddress var60 = var58.getInetAddress();
    org.jsecurity.authc.AuthenticationInfo var61 = var53.beforeAllAttempts((java.util.Collection)var57, (org.jsecurity.authc.AuthenticationToken)var58);
    org.jsecurity.session.UnknownSessionException var66 = new org.jsecurity.session.UnknownSessionException("dd\uFFFD", (java.io.Serializable)100.0f);
    org.jsecurity.subject.SubjectException var67 = new org.jsecurity.subject.SubjectException("dd\uFFFD", (java.lang.Throwable)var66);
    org.jsecurity.io.SerializationException var68 = new org.jsecurity.io.SerializationException("", (java.lang.Throwable)var67);
    java.lang.Throwable[] var69 = var67.getSuppressed();
    java.util.Set var70 = org.jsecurity.util.CollectionUtils.asSet((java.lang.Object[])var69);
    org.jsecurity.authc.SimpleAccount var71 = new org.jsecurity.authc.SimpleAccount((org.jsecurity.subject.PrincipalCollection)var52, (java.lang.Object)var57, var70);
    org.jsecurity.authc.pam.AllSuccessfulModularAuthenticationStrategy var72 = new org.jsecurity.authc.pam.AllSuccessfulModularAuthenticationStrategy();
    char[] var74 = new char[] { };
    org.jsecurity.authc.UsernamePasswordToken var76 = new org.jsecurity.authc.UsernamePasswordToken("hi!", var74, true);
    org.jsecurity.authc.SimpleAccount var77 = new org.jsecurity.authc.SimpleAccount();
    var77.setCredentialsExpired(false);
    boolean var80 = var77.isLocked();
    org.jsecurity.authc.AuthenticationInfo var81 = var72.afterAllAttempts((org.jsecurity.authc.AuthenticationToken)var76, (org.jsecurity.authc.AuthenticationInfo)var77);
    char[] var84 = new char[] { };
    org.jsecurity.authc.UsernamePasswordToken var86 = new org.jsecurity.authc.UsernamePasswordToken("hi!", var84, true);
    org.jsecurity.authc.UsernamePasswordToken var87 = new org.jsecurity.authc.UsernamePasswordToken("\u0000\u0000", var84);
    var76.setPassword(var84);
    org.jsecurity.authc.AuthenticationInfo var89 = var37.beforeAllAttempts((java.util.Collection)var57, (org.jsecurity.authc.AuthenticationToken)var76);
    char[] var90 = var76.getPassword();
    org.jsecurity.authc.UsernamePasswordToken var91 = new org.jsecurity.authc.UsernamePasswordToken("NfxhYN7ItBfRAmDBmprtU73ghfEEPpcDJrHPkZ06wiY=", var90);
    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      org.jsecurity.crypto.hash.Md2Hash var92 = new org.jsecurity.crypto.hash.Md2Hash((java.lang.Object)var15, (java.lang.Object)var91);
      fail("Expected exception of type org.jsecurity.codec.CodecException");
    } catch (org.jsecurity.codec.CodecException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var4);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var5 + "' != '" + "dd\uFFFD"+ "'", var5.equals("dd\uFFFD"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var6);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var7);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var11);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var12 + "' != '" + "dd\uFFFD"+ "'", var12.equals("dd\uFFFD"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var14);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var15);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var18);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var19);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var20);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var28);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var29);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var30);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var40);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var41);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var43);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var44);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var45);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var56);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var57);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var59);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var60);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var61);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var69);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var70);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var74);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var80 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var81);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var84);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var89);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var90);

  }

  public void test332() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest0.test332");


    org.jsecurity.realm.activedirectory.ActiveDirectoryRealm var0 = new org.jsecurity.realm.activedirectory.ActiveDirectoryRealm();
    var0.initAuthorizationCache();
    var0.setSearchBase("dd\uFFFD");
    org.jsecurity.authz.SimpleAuthorizationInfo var4 = new org.jsecurity.authz.SimpleAuthorizationInfo();
    var4.addRole("a2b823b1e72eae2b727289df8a00a89df8a0bab6ad8a89c4c5c7a9b62a270000");
    org.jsecurity.authz.SimpleAuthorizationInfo var7 = new org.jsecurity.authz.SimpleAuthorizationInfo();
    var7.addRole("a2b823b1e72eae2b727289df8a00a89df8a0bab6ad8a89c4c5c7a9b62a270000");
    org.jsecurity.session.UnknownSessionException var14 = new org.jsecurity.session.UnknownSessionException("dd\uFFFD", (java.io.Serializable)100.0f);
    org.jsecurity.subject.SubjectException var15 = new org.jsecurity.subject.SubjectException("dd\uFFFD", (java.lang.Throwable)var14);
    org.jsecurity.io.SerializationException var16 = new org.jsecurity.io.SerializationException("", (java.lang.Throwable)var15);
    java.lang.Throwable[] var17 = var15.getSuppressed();
    java.util.Set var18 = org.jsecurity.util.CollectionUtils.asSet((java.lang.Object[])var17);
    var7.addRoles((java.util.Collection)var18);
    var4.setObjectPermissions(var18);
    java.io.InputStream var22 = org.jsecurity.util.ClassUtils.getResourceAsStream("");
    java.lang.Object[] var23 = new java.lang.Object[] { var22};
    java.util.List var24 = org.jsecurity.util.CollectionUtils.asList(var23);
    org.jsecurity.authc.pam.ModularRealmAuthenticator var25 = new org.jsecurity.authc.pam.ModularRealmAuthenticator(var24);
    org.jsecurity.subject.SimplePrincipalCollection var27 = new org.jsecurity.subject.SimplePrincipalCollection((java.util.Collection)var24, "org.jsecurity.authz.UnauthorizedException: org.jsecurity.session.ExpiredSessionException: ");
    java.util.Set var28 = var27.getRealmNames();
    java.io.InputStream var30 = org.jsecurity.util.ClassUtils.getResourceAsStream("");
    java.lang.Object[] var31 = new java.lang.Object[] { var30};
    java.util.List var32 = org.jsecurity.util.CollectionUtils.asList(var31);
    org.jsecurity.authc.pam.ModularRealmAuthenticator var33 = new org.jsecurity.authc.pam.ModularRealmAuthenticator(var32);
    org.jsecurity.subject.SimplePrincipalCollection var35 = new org.jsecurity.subject.SimplePrincipalCollection((java.util.Collection)var32, "org.jsecurity.authz.UnauthorizedException: org.jsecurity.session.ExpiredSessionException: ");
    org.jsecurity.session.UnknownSessionException var40 = new org.jsecurity.session.UnknownSessionException("dd\uFFFD", (java.io.Serializable)100.0f);
    org.jsecurity.session.SessionException var42 = new org.jsecurity.session.SessionException("dd\uFFFD", (java.lang.Throwable)var40, (java.io.Serializable)0);
    org.jsecurity.session.SessionException var43 = new org.jsecurity.session.SessionException("dd\uFFFD", (java.lang.Throwable)var40);
    var35.add((java.lang.Object)var43, "org.jsecurity.config.ConfigurationException: dd\uFFFD");
    java.util.Set var46 = var35.asSet();
    var27.addAll((java.util.Collection)var46, "6464ff");
    var4.setStringPermissions(var46);
    org.jsecurity.subject.SimplePrincipalCollection var51 = new org.jsecurity.subject.SimplePrincipalCollection((java.util.Collection)var46, "\u0000\u0000");
    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      boolean var53 = var0.isPermitted((org.jsecurity.subject.PrincipalCollection)var51, "NfxhYN7ItBfRAmDBmprtU73ghfEEPpcDJrHPkZ06wiY=");
      fail("Expected exception of type java.util.NoSuchElementException");
    } catch (java.util.NoSuchElementException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var17);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var18);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var22);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var23);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var24);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var28);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var30);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var31);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var32);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var46);

  }

  public void test333() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest0.test333");


    org.jsecurity.realm.text.TextConfigurationRealm var0 = new org.jsecurity.realm.text.TextConfigurationRealm();
    org.jsecurity.realm.text.TextConfigurationRealm var1 = new org.jsecurity.realm.text.TextConfigurationRealm();
    java.io.InputStream var3 = org.jsecurity.util.ClassUtils.getResourceAsStream("");
    java.lang.Object[] var4 = new java.lang.Object[] { var3};
    java.util.List var5 = org.jsecurity.util.CollectionUtils.asList(var4);
    org.jsecurity.authc.pam.ModularRealmAuthenticator var6 = new org.jsecurity.authc.pam.ModularRealmAuthenticator(var5);
    org.jsecurity.subject.SimplePrincipalCollection var8 = new org.jsecurity.subject.SimplePrincipalCollection((java.util.Collection)var5, "org.jsecurity.authz.UnauthorizedException: org.jsecurity.session.ExpiredSessionException: ");
    org.jsecurity.session.UnknownSessionException var13 = new org.jsecurity.session.UnknownSessionException("dd\uFFFD", (java.io.Serializable)100.0f);
    org.jsecurity.session.SessionException var15 = new org.jsecurity.session.SessionException("dd\uFFFD", (java.lang.Throwable)var13, (java.io.Serializable)0);
    org.jsecurity.session.SessionException var16 = new org.jsecurity.session.SessionException("dd\uFFFD", (java.lang.Throwable)var13);
    var8.add((java.lang.Object)var16, "org.jsecurity.config.ConfigurationException: dd\uFFFD");
    var1.onLogout((org.jsecurity.subject.PrincipalCollection)var8);
    java.util.Collection var21 = var8.fromRealm("\u0000\u0000\u0000");
    var0.onLogout((org.jsecurity.subject.PrincipalCollection)var8);
    org.jsecurity.realm.text.TextConfigurationRealm var23 = new org.jsecurity.realm.text.TextConfigurationRealm();
    java.io.InputStream var25 = org.jsecurity.util.ClassUtils.getResourceAsStream("");
    java.lang.Object[] var26 = new java.lang.Object[] { var25};
    java.util.List var27 = org.jsecurity.util.CollectionUtils.asList(var26);
    org.jsecurity.authc.pam.ModularRealmAuthenticator var28 = new org.jsecurity.authc.pam.ModularRealmAuthenticator(var27);
    org.jsecurity.subject.SimplePrincipalCollection var30 = new org.jsecurity.subject.SimplePrincipalCollection((java.util.Collection)var27, "org.jsecurity.authz.UnauthorizedException: org.jsecurity.session.ExpiredSessionException: ");
    org.jsecurity.session.UnknownSessionException var35 = new org.jsecurity.session.UnknownSessionException("dd\uFFFD", (java.io.Serializable)100.0f);
    org.jsecurity.session.SessionException var37 = new org.jsecurity.session.SessionException("dd\uFFFD", (java.lang.Throwable)var35, (java.io.Serializable)0);
    org.jsecurity.session.SessionException var38 = new org.jsecurity.session.SessionException("dd\uFFFD", (java.lang.Throwable)var35);
    var30.add((java.lang.Object)var38, "org.jsecurity.config.ConfigurationException: dd\uFFFD");
    var23.onLogout((org.jsecurity.subject.PrincipalCollection)var30);
    org.jsecurity.authz.SimpleAuthorizationInfo var42 = new org.jsecurity.authz.SimpleAuthorizationInfo();
    var42.addRole("a2b823b1e72eae2b727289df8a00a89df8a0bab6ad8a89c4c5c7a9b62a270000");
    org.jsecurity.authz.SimpleAuthorizationInfo var45 = new org.jsecurity.authz.SimpleAuthorizationInfo();
    var45.addRole("a2b823b1e72eae2b727289df8a00a89df8a0bab6ad8a89c4c5c7a9b62a270000");
    org.jsecurity.session.UnknownSessionException var52 = new org.jsecurity.session.UnknownSessionException("dd\uFFFD", (java.io.Serializable)100.0f);
    org.jsecurity.subject.SubjectException var53 = new org.jsecurity.subject.SubjectException("dd\uFFFD", (java.lang.Throwable)var52);
    org.jsecurity.io.SerializationException var54 = new org.jsecurity.io.SerializationException("", (java.lang.Throwable)var53);
    java.lang.Throwable[] var55 = var53.getSuppressed();
    java.util.Set var56 = org.jsecurity.util.CollectionUtils.asSet((java.lang.Object[])var55);
    var45.addRoles((java.util.Collection)var56);
    var42.setObjectPermissions(var56);
    java.io.InputStream var60 = org.jsecurity.util.ClassUtils.getResourceAsStream("");
    java.lang.Object[] var61 = new java.lang.Object[] { var60};
    java.util.List var62 = org.jsecurity.util.CollectionUtils.asList(var61);
    org.jsecurity.authc.pam.ModularRealmAuthenticator var63 = new org.jsecurity.authc.pam.ModularRealmAuthenticator(var62);
    org.jsecurity.subject.SimplePrincipalCollection var65 = new org.jsecurity.subject.SimplePrincipalCollection((java.util.Collection)var62, "org.jsecurity.authz.UnauthorizedException: org.jsecurity.session.ExpiredSessionException: ");
    java.util.Set var66 = var65.getRealmNames();
    java.io.InputStream var68 = org.jsecurity.util.ClassUtils.getResourceAsStream("");
    java.lang.Object[] var69 = new java.lang.Object[] { var68};
    java.util.List var70 = org.jsecurity.util.CollectionUtils.asList(var69);
    org.jsecurity.authc.pam.ModularRealmAuthenticator var71 = new org.jsecurity.authc.pam.ModularRealmAuthenticator(var70);
    org.jsecurity.subject.SimplePrincipalCollection var73 = new org.jsecurity.subject.SimplePrincipalCollection((java.util.Collection)var70, "org.jsecurity.authz.UnauthorizedException: org.jsecurity.session.ExpiredSessionException: ");
    org.jsecurity.session.UnknownSessionException var78 = new org.jsecurity.session.UnknownSessionException("dd\uFFFD", (java.io.Serializable)100.0f);
    org.jsecurity.session.SessionException var80 = new org.jsecurity.session.SessionException("dd\uFFFD", (java.lang.Throwable)var78, (java.io.Serializable)0);
    org.jsecurity.session.SessionException var81 = new org.jsecurity.session.SessionException("dd\uFFFD", (java.lang.Throwable)var78);
    var73.add((java.lang.Object)var81, "org.jsecurity.config.ConfigurationException: dd\uFFFD");
    java.util.Set var84 = var73.asSet();
    var65.addAll((java.util.Collection)var84, "6464ff");
    var42.setStringPermissions(var84);
    org.jsecurity.subject.SimplePrincipalCollection var89 = new org.jsecurity.subject.SimplePrincipalCollection((java.util.Collection)var84, "\u0000\u0000");
    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      boolean var90 = var0.hasAllRoles((org.jsecurity.subject.PrincipalCollection)var30, (java.util.Collection)var84);
      fail("Expected exception of type java.util.NoSuchElementException");
    } catch (java.util.NoSuchElementException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var3);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var4);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var5);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var21);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var25);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var26);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var27);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var55);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var56);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var60);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var61);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var62);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var66);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var68);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var69);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var70);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var84);

  }

  public void test334() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest0.test334");


    org.jsecurity.mgt.DefaultSecurityManager var0 = new org.jsecurity.mgt.DefaultSecurityManager();
    java.io.InputStream var2 = org.jsecurity.util.ClassUtils.getResourceAsStream("");
    java.lang.Object[] var3 = new java.lang.Object[] { var2};
    java.util.List var4 = org.jsecurity.util.CollectionUtils.asList(var3);
    org.jsecurity.authc.pam.ModularRealmAuthenticator var5 = new org.jsecurity.authc.pam.ModularRealmAuthenticator(var4);
    org.jsecurity.authc.pam.AllSuccessfulModularAuthenticationStrategy var6 = new org.jsecurity.authc.pam.AllSuccessfulModularAuthenticationStrategy();
    var5.setModularAuthenticationStrategy((org.jsecurity.authc.pam.ModularAuthenticationStrategy)var6);
    org.jsecurity.authz.SimpleAuthorizationInfo var8 = new org.jsecurity.authz.SimpleAuthorizationInfo();
    var8.addStringPermission("hi!");
    java.io.InputStream var12 = org.jsecurity.util.ClassUtils.getResourceAsStream("");
    java.lang.Object[] var13 = new java.lang.Object[] { var12};
    java.util.List var14 = org.jsecurity.util.CollectionUtils.asList(var13);
    var8.addRoles((java.util.Collection)var14);
    var5.setAuthenticationListeners((java.util.Collection)var14);
    var0.setSessionListeners((java.util.Collection)var14);
    org.jsecurity.authc.pam.ModularRealmAuthenticator var18 = new org.jsecurity.authc.pam.ModularRealmAuthenticator();
    org.jsecurity.authz.permission.InvalidPermissionStringException var21 = new org.jsecurity.authz.permission.InvalidPermissionStringException("", "dd\uFFFD");
    org.jsecurity.JSecurityException var23 = new org.jsecurity.JSecurityException("");
    org.jsecurity.authc.SimpleAuthenticationInfo var25 = new org.jsecurity.authc.SimpleAuthenticationInfo((java.lang.Object)var21, (java.lang.Object)"", "org.jsecurity.authz.UnauthorizedException: org.jsecurity.session.ExpiredSessionException: ");
    org.jsecurity.subject.PrincipalCollection var26 = var25.getPrincipals();
    var18.onLogout(var26);
    var0.setAuthenticator((org.jsecurity.authc.Authenticator)var18);
    org.jsecurity.codec.CodecException var31 = new org.jsecurity.codec.CodecException("dd\uFFFD");
    org.jsecurity.authc.ConcurrentAccessException var32 = new org.jsecurity.authc.ConcurrentAccessException("org.jsecurity.authz.UnauthorizedException: org.jsecurity.session.ExpiredSessionException: ", (java.lang.Throwable)var31);
    org.jsecurity.subject.SimplePrincipalCollection var34 = new org.jsecurity.subject.SimplePrincipalCollection((java.lang.Object)var31, "");
    org.jsecurity.authc.pam.FirstSuccessfulAuthenticationStrategy var35 = new org.jsecurity.authc.pam.FirstSuccessfulAuthenticationStrategy();
    org.jsecurity.authz.UnauthorizedException var37 = new org.jsecurity.authz.UnauthorizedException("org.jsecurity.config.ConfigurationException: dd\uFFFD");
    java.lang.Throwable[] var38 = var37.getSuppressed();
    java.util.List var39 = org.jsecurity.util.CollectionUtils.asList((java.lang.Object[])var38);
    org.jsecurity.authc.UsernamePasswordToken var40 = new org.jsecurity.authc.UsernamePasswordToken();
    java.lang.String var41 = var40.getUsername();
    java.net.InetAddress var42 = var40.getInetAddress();
    org.jsecurity.authc.AuthenticationInfo var43 = var35.beforeAllAttempts((java.util.Collection)var39, (org.jsecurity.authc.AuthenticationToken)var40);
    org.jsecurity.session.UnknownSessionException var48 = new org.jsecurity.session.UnknownSessionException("dd\uFFFD", (java.io.Serializable)100.0f);
    org.jsecurity.subject.SubjectException var49 = new org.jsecurity.subject.SubjectException("dd\uFFFD", (java.lang.Throwable)var48);
    org.jsecurity.io.SerializationException var50 = new org.jsecurity.io.SerializationException("", (java.lang.Throwable)var49);
    java.lang.Throwable[] var51 = var49.getSuppressed();
    java.util.Set var52 = org.jsecurity.util.CollectionUtils.asSet((java.lang.Object[])var51);
    org.jsecurity.authc.SimpleAccount var53 = new org.jsecurity.authc.SimpleAccount((org.jsecurity.subject.PrincipalCollection)var34, (java.lang.Object)var39, var52);
    java.io.InputStream var55 = org.jsecurity.util.ClassUtils.getResourceAsStream("");
    java.lang.Object[] var56 = new java.lang.Object[] { var55};
    java.util.List var57 = org.jsecurity.util.CollectionUtils.asList(var56);
    org.jsecurity.authc.pam.ModularRealmAuthenticator var58 = new org.jsecurity.authc.pam.ModularRealmAuthenticator(var57);
    org.jsecurity.subject.SimplePrincipalCollection var60 = new org.jsecurity.subject.SimplePrincipalCollection((java.util.Collection)var57, "org.jsecurity.authz.UnauthorizedException: org.jsecurity.session.ExpiredSessionException: ");
    org.jsecurity.io.ResourceException var64 = new org.jsecurity.io.ResourceException("hi!");
    org.jsecurity.authc.UnknownAccountException var65 = new org.jsecurity.authc.UnknownAccountException((java.lang.Throwable)var64);
    org.jsecurity.session.StoppedSessionException var66 = new org.jsecurity.session.StoppedSessionException("dd\uFFFD", (java.io.Serializable)var64);
    org.jsecurity.session.UnknownSessionException var67 = new org.jsecurity.session.UnknownSessionException("org.jsecurity.authz.UnauthorizedException: org.jsecurity.session.ExpiredSessionException: ", (java.lang.Throwable)var64);
    boolean var68 = var60.equals((java.lang.Object)var64);
    var34.addAll((org.jsecurity.subject.PrincipalCollection)var60);
    org.jsecurity.session.UnknownSessionException var74 = new org.jsecurity.session.UnknownSessionException("dd\uFFFD", (java.io.Serializable)100.0f);
    org.jsecurity.subject.SubjectException var75 = new org.jsecurity.subject.SubjectException("dd\uFFFD", (java.lang.Throwable)var74);
    org.jsecurity.io.SerializationException var76 = new org.jsecurity.io.SerializationException("", (java.lang.Throwable)var75);
    java.lang.Throwable[] var77 = var75.getSuppressed();
    java.util.List var78 = org.jsecurity.util.CollectionUtils.asList((java.lang.Object[])var77);
    boolean var79 = var0.isPermittedAll((org.jsecurity.subject.PrincipalCollection)var34, (java.util.Collection)var78);
    org.jsecurity.subject.DelegatingSubject var80 = new org.jsecurity.subject.DelegatingSubject((org.jsecurity.mgt.SecurityManager)var0);
    var80.logout();
    org.jsecurity.authz.SimpleAuthorizationInfo var82 = new org.jsecurity.authz.SimpleAuthorizationInfo();
    var82.addStringPermission("hi!");
    org.jsecurity.authz.SimpleAuthorizationInfo var86 = new org.jsecurity.authz.SimpleAuthorizationInfo();
    org.jsecurity.session.UnknownSessionException var91 = new org.jsecurity.session.UnknownSessionException("dd\uFFFD", (java.io.Serializable)100.0f);
    org.jsecurity.subject.SubjectException var92 = new org.jsecurity.subject.SubjectException("dd\uFFFD", (java.lang.Throwable)var91);
    org.jsecurity.io.SerializationException var93 = new org.jsecurity.io.SerializationException("", (java.lang.Throwable)var92);
    java.lang.Throwable[] var94 = var92.getSuppressed();
    java.util.Set var95 = org.jsecurity.util.CollectionUtils.asSet((java.lang.Object[])var94);
    var86.setStringPermissions(var95);
    org.jsecurity.authz.SimpleRole var97 = new org.jsecurity.authz.SimpleRole("\u0000\u0000", var95);
    var82.setRoles(var95);
    boolean var99 = var80.isPermittedAll((java.util.Collection)var95);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var2);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var3);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var4);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var12);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var13);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var14);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var26);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var38);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var39);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var41);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var42);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var43);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var51);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var52);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var55);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var56);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var57);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var68 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var77);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var78);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var79 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var94);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var95);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var99 == false);

  }

  public void test335() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest0.test335");


    org.jsecurity.realm.SimpleAccountRealm var0 = new org.jsecurity.realm.SimpleAccountRealm();
    org.jsecurity.mgt.DefaultSecurityManager var1 = new org.jsecurity.mgt.DefaultSecurityManager();
    java.io.InputStream var3 = org.jsecurity.util.ClassUtils.getResourceAsStream("");
    java.lang.Object[] var4 = new java.lang.Object[] { var3};
    java.util.List var5 = org.jsecurity.util.CollectionUtils.asList(var4);
    org.jsecurity.authc.pam.ModularRealmAuthenticator var6 = new org.jsecurity.authc.pam.ModularRealmAuthenticator(var5);
    org.jsecurity.authc.pam.AllSuccessfulModularAuthenticationStrategy var7 = new org.jsecurity.authc.pam.AllSuccessfulModularAuthenticationStrategy();
    var6.setModularAuthenticationStrategy((org.jsecurity.authc.pam.ModularAuthenticationStrategy)var7);
    org.jsecurity.authz.SimpleAuthorizationInfo var9 = new org.jsecurity.authz.SimpleAuthorizationInfo();
    var9.addStringPermission("hi!");
    java.io.InputStream var13 = org.jsecurity.util.ClassUtils.getResourceAsStream("");
    java.lang.Object[] var14 = new java.lang.Object[] { var13};
    java.util.List var15 = org.jsecurity.util.CollectionUtils.asList(var14);
    var9.addRoles((java.util.Collection)var15);
    var6.setAuthenticationListeners((java.util.Collection)var15);
    var1.setSessionListeners((java.util.Collection)var15);
    org.jsecurity.realm.text.TextConfigurationRealm var19 = new org.jsecurity.realm.text.TextConfigurationRealm();
    java.io.InputStream var21 = org.jsecurity.util.ClassUtils.getResourceAsStream("");
    java.lang.Object[] var22 = new java.lang.Object[] { var21};
    java.util.List var23 = org.jsecurity.util.CollectionUtils.asList(var22);
    org.jsecurity.authc.pam.ModularRealmAuthenticator var24 = new org.jsecurity.authc.pam.ModularRealmAuthenticator(var23);
    org.jsecurity.subject.SimplePrincipalCollection var26 = new org.jsecurity.subject.SimplePrincipalCollection((java.util.Collection)var23, "org.jsecurity.authz.UnauthorizedException: org.jsecurity.session.ExpiredSessionException: ");
    org.jsecurity.session.UnknownSessionException var31 = new org.jsecurity.session.UnknownSessionException("dd\uFFFD", (java.io.Serializable)100.0f);
    org.jsecurity.session.SessionException var33 = new org.jsecurity.session.SessionException("dd\uFFFD", (java.lang.Throwable)var31, (java.io.Serializable)0);
    org.jsecurity.session.SessionException var34 = new org.jsecurity.session.SessionException("dd\uFFFD", (java.lang.Throwable)var31);
    var26.add((java.lang.Object)var34, "org.jsecurity.config.ConfigurationException: dd\uFFFD");
    var19.onLogout((org.jsecurity.subject.PrincipalCollection)var26);
    org.jsecurity.authc.pam.FirstSuccessfulAuthenticationStrategy var38 = new org.jsecurity.authc.pam.FirstSuccessfulAuthenticationStrategy();
    org.jsecurity.authz.UnauthorizedException var40 = new org.jsecurity.authz.UnauthorizedException("org.jsecurity.config.ConfigurationException: dd\uFFFD");
    java.lang.Throwable[] var41 = var40.getSuppressed();
    java.util.List var42 = org.jsecurity.util.CollectionUtils.asList((java.lang.Object[])var41);
    org.jsecurity.authc.UsernamePasswordToken var43 = new org.jsecurity.authc.UsernamePasswordToken();
    java.lang.String var44 = var43.getUsername();
    java.net.InetAddress var45 = var43.getInetAddress();
    org.jsecurity.authc.AuthenticationInfo var46 = var38.beforeAllAttempts((java.util.Collection)var42, (org.jsecurity.authc.AuthenticationToken)var43);
    boolean[] var47 = var1.hasRoles((org.jsecurity.subject.PrincipalCollection)var26, var42);
    boolean var48 = var26.isEmpty();
    java.io.InputStream var50 = org.jsecurity.util.ClassUtils.getResourceAsStream("");
    java.lang.Object[] var51 = new java.lang.Object[] { var50};
    java.util.List var52 = org.jsecurity.util.CollectionUtils.asList(var51);
    org.jsecurity.authc.pam.ModularRealmAuthenticator var53 = new org.jsecurity.authc.pam.ModularRealmAuthenticator(var52);
    org.jsecurity.subject.SimplePrincipalCollection var55 = new org.jsecurity.subject.SimplePrincipalCollection((java.util.Collection)var52, "org.jsecurity.authz.UnauthorizedException: org.jsecurity.session.ExpiredSessionException: ");
    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      var0.checkPermissions((org.jsecurity.subject.PrincipalCollection)var26, (java.util.Collection)var52);
      fail("Expected exception of type java.util.NoSuchElementException");
    } catch (java.util.NoSuchElementException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var3);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var4);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var5);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var13);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var14);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var15);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var21);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var22);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var23);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var41);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var42);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var44);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var45);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var46);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var47);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var48 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var50);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var51);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var52);

  }

  public void test336() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest0.test336");


    org.jsecurity.authz.SimpleAuthorizingAccount var0 = new org.jsecurity.authz.SimpleAuthorizingAccount();
    java.util.Set var1 = var0.getSimpleRoles();
    org.jsecurity.authz.SimpleRole var2 = new org.jsecurity.authz.SimpleRole();
    org.jsecurity.authz.SimpleAuthorizationInfo var3 = new org.jsecurity.authz.SimpleAuthorizationInfo();
    var3.addRole("a2b823b1e72eae2b727289df8a00a89df8a0bab6ad8a89c4c5c7a9b62a270000");
    org.jsecurity.session.UnknownSessionException var10 = new org.jsecurity.session.UnknownSessionException("dd\uFFFD", (java.io.Serializable)100.0f);
    org.jsecurity.subject.SubjectException var11 = new org.jsecurity.subject.SubjectException("dd\uFFFD", (java.lang.Throwable)var10);
    org.jsecurity.io.SerializationException var12 = new org.jsecurity.io.SerializationException("", (java.lang.Throwable)var11);
    java.lang.Throwable[] var13 = var11.getSuppressed();
    java.util.Set var14 = org.jsecurity.util.CollectionUtils.asSet((java.lang.Object[])var13);
    var3.addRoles((java.util.Collection)var14);
    var2.addAll((java.util.Collection)var14);
    org.jsecurity.authz.SimpleRole var18 = new org.jsecurity.authz.SimpleRole();
    org.jsecurity.authz.permission.WildcardPermission var21 = new org.jsecurity.authz.permission.WildcardPermission("hi!", false);
    boolean var22 = var18.isPermitted((org.jsecurity.authz.Permission)var21);
    org.jsecurity.session.InvalidSessionException var23 = new org.jsecurity.session.InvalidSessionException("org.jsecurity.config.ConfigurationException: dd\uFFFD", (java.io.Serializable)var21);
    org.jsecurity.authz.SimpleRole var24 = new org.jsecurity.authz.SimpleRole();
    org.jsecurity.authz.permission.WildcardPermission var27 = new org.jsecurity.authz.permission.WildcardPermission("hi!", false);
    boolean var28 = var24.isPermitted((org.jsecurity.authz.Permission)var27);
    boolean var29 = var21.implies((org.jsecurity.authz.Permission)var27);
    boolean var30 = var2.isPermitted((org.jsecurity.authz.Permission)var27);
    boolean var31 = var0.isPermitted((org.jsecurity.authz.Permission)var27);
    var0.addRole("org.jsecurity.authc.IncorrectCredentialsException: \u0000\u0000");
    org.jsecurity.authz.SimpleAuthorizationInfo var34 = new org.jsecurity.authz.SimpleAuthorizationInfo();
    var34.addRole("a2b823b1e72eae2b727289df8a00a89df8a0bab6ad8a89c4c5c7a9b62a270000");
    org.jsecurity.authz.SimpleAuthorizationInfo var37 = new org.jsecurity.authz.SimpleAuthorizationInfo();
    var37.addRole("a2b823b1e72eae2b727289df8a00a89df8a0bab6ad8a89c4c5c7a9b62a270000");
    org.jsecurity.session.UnknownSessionException var44 = new org.jsecurity.session.UnknownSessionException("dd\uFFFD", (java.io.Serializable)100.0f);
    org.jsecurity.subject.SubjectException var45 = new org.jsecurity.subject.SubjectException("dd\uFFFD", (java.lang.Throwable)var44);
    org.jsecurity.io.SerializationException var46 = new org.jsecurity.io.SerializationException("", (java.lang.Throwable)var45);
    java.lang.Throwable[] var47 = var45.getSuppressed();
    java.util.Set var48 = org.jsecurity.util.CollectionUtils.asSet((java.lang.Object[])var47);
    var37.addRoles((java.util.Collection)var48);
    var34.setObjectPermissions(var48);
    java.io.InputStream var52 = org.jsecurity.util.ClassUtils.getResourceAsStream("");
    java.lang.Object[] var53 = new java.lang.Object[] { var52};
    java.util.List var54 = org.jsecurity.util.CollectionUtils.asList(var53);
    org.jsecurity.authc.pam.ModularRealmAuthenticator var55 = new org.jsecurity.authc.pam.ModularRealmAuthenticator(var54);
    org.jsecurity.subject.SimplePrincipalCollection var57 = new org.jsecurity.subject.SimplePrincipalCollection((java.util.Collection)var54, "org.jsecurity.authz.UnauthorizedException: org.jsecurity.session.ExpiredSessionException: ");
    java.util.Set var58 = var57.getRealmNames();
    java.io.InputStream var60 = org.jsecurity.util.ClassUtils.getResourceAsStream("");
    java.lang.Object[] var61 = new java.lang.Object[] { var60};
    java.util.List var62 = org.jsecurity.util.CollectionUtils.asList(var61);
    org.jsecurity.authc.pam.ModularRealmAuthenticator var63 = new org.jsecurity.authc.pam.ModularRealmAuthenticator(var62);
    org.jsecurity.subject.SimplePrincipalCollection var65 = new org.jsecurity.subject.SimplePrincipalCollection((java.util.Collection)var62, "org.jsecurity.authz.UnauthorizedException: org.jsecurity.session.ExpiredSessionException: ");
    org.jsecurity.session.UnknownSessionException var70 = new org.jsecurity.session.UnknownSessionException("dd\uFFFD", (java.io.Serializable)100.0f);
    org.jsecurity.session.SessionException var72 = new org.jsecurity.session.SessionException("dd\uFFFD", (java.lang.Throwable)var70, (java.io.Serializable)0);
    org.jsecurity.session.SessionException var73 = new org.jsecurity.session.SessionException("dd\uFFFD", (java.lang.Throwable)var70);
    var65.add((java.lang.Object)var73, "org.jsecurity.config.ConfigurationException: dd\uFFFD");
    java.util.Set var76 = var65.asSet();
    var57.addAll((java.util.Collection)var76, "6464ff");
    var34.setStringPermissions(var76);
    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      boolean var80 = var0.hasAllRoles((java.util.Collection)var76);
      fail("Expected exception of type java.lang.ClassCastException");
    } catch (java.lang.ClassCastException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var1);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var13);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var14);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var22 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var28 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var29 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var30 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var31 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var47);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var48);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var52);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var53);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var54);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var58);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var60);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var61);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var62);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var76);

  }

  public void test337() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest0.test337");


    org.jsecurity.crypto.hash.Md2Hash var2 = org.jsecurity.crypto.hash.Md2Hash.fromBase64String("a2b823b1e72eae2b727289df8a00a89df8a0bab6ad8a89c4c5c7a9b62a270000");
    org.jsecurity.authc.credential.Md2CredentialsMatcher var3 = new org.jsecurity.authc.credential.Md2CredentialsMatcher();
    org.jsecurity.authz.SimpleAuthorizingAccount var5 = new org.jsecurity.authz.SimpleAuthorizingAccount((java.lang.Object)"a2b823b1e72eae2b727289df8a00a89df8a0bab6ad8a89c4c5c7a9b62a270000", (java.lang.Object)var3, "");
    org.jsecurity.session.SessionException var6 = new org.jsecurity.session.SessionException("org.jsecurity.realm.SimpleAccountRealm-9-authorization", (java.io.Serializable)var5);
    org.jsecurity.authz.SimpleAuthorizationInfo var7 = new org.jsecurity.authz.SimpleAuthorizationInfo();
    var7.addStringPermission("hi!");
    java.io.InputStream var11 = org.jsecurity.util.ClassUtils.getResourceAsStream("");
    java.lang.Object[] var12 = new java.lang.Object[] { var11};
    java.util.List var13 = org.jsecurity.util.CollectionUtils.asList(var12);
    var7.addRoles((java.util.Collection)var13);
    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      boolean[] var15 = var5.hasRoles(var13);
      fail("Expected exception of type java.lang.ClassCastException");
    } catch (java.lang.ClassCastException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var2);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var11);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var12);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var13);

  }

  public void test338() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest0.test338");


    org.jsecurity.crypto.hash.Sha512Hash var1 = org.jsecurity.crypto.hash.Sha512Hash.fromBase64String("5dd0c65d-1422-49c2-becb-9e8dca619ab3");
    org.jsecurity.session.UnknownSessionException var6 = new org.jsecurity.session.UnknownSessionException("dd\uFFFD", (java.io.Serializable)100.0f);
    org.jsecurity.subject.SubjectException var7 = new org.jsecurity.subject.SubjectException("dd\uFFFD", (java.lang.Throwable)var6);
    org.jsecurity.io.SerializationException var8 = new org.jsecurity.io.SerializationException("", (java.lang.Throwable)var7);
    java.lang.Throwable[] var9 = var7.getSuppressed();
    java.util.Set var10 = org.jsecurity.util.CollectionUtils.asSet((java.lang.Object[])var9);
    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      org.jsecurity.crypto.hash.Sha1Hash var12 = new org.jsecurity.crypto.hash.Sha1Hash((java.lang.Object)var1, (java.lang.Object)var10, 1);
      fail("Expected exception of type org.jsecurity.codec.CodecException");
    } catch (org.jsecurity.codec.CodecException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var1);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var9);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var10);

  }

  public void test339() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest0.test339");


    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      org.jsecurity.config.IniConfiguration var1 = new org.jsecurity.config.IniConfiguration("org.jsecurity.authz.UnauthorizedException: org.jsecurity.session.ExpiredSessionException: ");
      fail("Expected exception of type org.jsecurity.config.ConfigurationException");
    } catch (org.jsecurity.config.ConfigurationException e) {
      // Expected exception.
    }

  }

  public void test340() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest0.test340");


    org.jsecurity.mgt.DefaultSecurityManager var0 = new org.jsecurity.mgt.DefaultSecurityManager();
    java.io.InputStream var2 = org.jsecurity.util.ClassUtils.getResourceAsStream("");
    java.lang.Object[] var3 = new java.lang.Object[] { var2};
    java.util.List var4 = org.jsecurity.util.CollectionUtils.asList(var3);
    org.jsecurity.authc.pam.ModularRealmAuthenticator var5 = new org.jsecurity.authc.pam.ModularRealmAuthenticator(var4);
    org.jsecurity.authc.pam.AllSuccessfulModularAuthenticationStrategy var6 = new org.jsecurity.authc.pam.AllSuccessfulModularAuthenticationStrategy();
    var5.setModularAuthenticationStrategy((org.jsecurity.authc.pam.ModularAuthenticationStrategy)var6);
    org.jsecurity.authz.SimpleAuthorizationInfo var8 = new org.jsecurity.authz.SimpleAuthorizationInfo();
    var8.addStringPermission("hi!");
    java.io.InputStream var12 = org.jsecurity.util.ClassUtils.getResourceAsStream("");
    java.lang.Object[] var13 = new java.lang.Object[] { var12};
    java.util.List var14 = org.jsecurity.util.CollectionUtils.asList(var13);
    var8.addRoles((java.util.Collection)var14);
    var5.setAuthenticationListeners((java.util.Collection)var14);
    var0.setSessionListeners((java.util.Collection)var14);
    org.jsecurity.authc.Authenticator var18 = var0.getAuthenticator();
    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      var0.setRememberMeDecryptionCipherKeyHex("org.jsecurity.realm.SimpleAccountRealm-52-authorization");
      fail("Expected exception of type java.lang.IllegalStateException");
    } catch (java.lang.IllegalStateException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var2);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var3);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var4);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var12);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var13);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var14);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var18);

  }

  public void test341() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest0.test341");


    org.jsecurity.authz.HostUnauthorizedException var0 = new org.jsecurity.authz.HostUnauthorizedException();
    org.jsecurity.session.UnknownSessionException var1 = new org.jsecurity.session.UnknownSessionException((java.io.Serializable)var0);

  }

  public void test342() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest0.test342");


    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      byte[] var2 = org.jsecurity.codec.CodecSupport.toBytes("org.jsecurity.authc.IncorrectCredentialsException: \u0000\u0000", "\u0000\u0000");
      fail("Expected exception of type org.jsecurity.codec.CodecException");
    } catch (org.jsecurity.codec.CodecException e) {
      // Expected exception.
    }

  }

  public void test343() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest0.test343");


    org.jsecurity.mgt.DefaultSecurityManager var0 = new org.jsecurity.mgt.DefaultSecurityManager();
    java.io.InputStream var2 = org.jsecurity.util.ClassUtils.getResourceAsStream("");
    java.lang.Object[] var3 = new java.lang.Object[] { var2};
    java.util.List var4 = org.jsecurity.util.CollectionUtils.asList(var3);
    org.jsecurity.authc.pam.ModularRealmAuthenticator var5 = new org.jsecurity.authc.pam.ModularRealmAuthenticator(var4);
    org.jsecurity.authc.pam.AllSuccessfulModularAuthenticationStrategy var6 = new org.jsecurity.authc.pam.AllSuccessfulModularAuthenticationStrategy();
    var5.setModularAuthenticationStrategy((org.jsecurity.authc.pam.ModularAuthenticationStrategy)var6);
    org.jsecurity.authz.SimpleAuthorizationInfo var8 = new org.jsecurity.authz.SimpleAuthorizationInfo();
    var8.addStringPermission("hi!");
    java.io.InputStream var12 = org.jsecurity.util.ClassUtils.getResourceAsStream("");
    java.lang.Object[] var13 = new java.lang.Object[] { var12};
    java.util.List var14 = org.jsecurity.util.CollectionUtils.asList(var13);
    var8.addRoles((java.util.Collection)var14);
    var5.setAuthenticationListeners((java.util.Collection)var14);
    var0.setSessionListeners((java.util.Collection)var14);
    org.jsecurity.subject.Subject var18 = var0.getSubject();
    org.jsecurity.crypto.BlowfishCipher var19 = new org.jsecurity.crypto.BlowfishCipher();
    java.security.Key var20 = org.jsecurity.crypto.BlowfishCipher.generateNewKey();
    var19.setKey(var20);
    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      var0.setRememberMeCipher((org.jsecurity.crypto.Cipher)var19);
      fail("Expected exception of type java.lang.IllegalStateException");
    } catch (java.lang.IllegalStateException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var2);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var3);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var4);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var12);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var13);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var14);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var18);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var20);

  }

  public void test344() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest0.test344");


    org.jsecurity.session.ExpiredSessionException var1 = new org.jsecurity.session.ExpiredSessionException("\uFFFD\uFFFD#\uFFFD\uFFFD.\uFFFD+r\uFFFD\u6959(\uFFFD\uFFFDW\uFFFDq\uFFFD.\uFFFD\uFFFD^jY\uFFFDj\uFFFDa\uFFFD\uFFFD\uFFFDj\u0628\u0000");

  }

  public void test345() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest0.test345");


    org.jsecurity.realm.text.TextConfigurationRealm var0 = new org.jsecurity.realm.text.TextConfigurationRealm();
    org.jsecurity.realm.text.TextConfigurationRealm var1 = new org.jsecurity.realm.text.TextConfigurationRealm();
    java.io.InputStream var3 = org.jsecurity.util.ClassUtils.getResourceAsStream("");
    java.lang.Object[] var4 = new java.lang.Object[] { var3};
    java.util.List var5 = org.jsecurity.util.CollectionUtils.asList(var4);
    org.jsecurity.authc.pam.ModularRealmAuthenticator var6 = new org.jsecurity.authc.pam.ModularRealmAuthenticator(var5);
    org.jsecurity.subject.SimplePrincipalCollection var8 = new org.jsecurity.subject.SimplePrincipalCollection((java.util.Collection)var5, "org.jsecurity.authz.UnauthorizedException: org.jsecurity.session.ExpiredSessionException: ");
    org.jsecurity.session.UnknownSessionException var13 = new org.jsecurity.session.UnknownSessionException("dd\uFFFD", (java.io.Serializable)100.0f);
    org.jsecurity.session.SessionException var15 = new org.jsecurity.session.SessionException("dd\uFFFD", (java.lang.Throwable)var13, (java.io.Serializable)0);
    org.jsecurity.session.SessionException var16 = new org.jsecurity.session.SessionException("dd\uFFFD", (java.lang.Throwable)var13);
    var8.add((java.lang.Object)var16, "org.jsecurity.config.ConfigurationException: dd\uFFFD");
    var1.onLogout((org.jsecurity.subject.PrincipalCollection)var8);
    java.util.Collection var21 = var8.fromRealm("\u0000\u0000\u0000");
    var0.onLogout((org.jsecurity.subject.PrincipalCollection)var8);
    java.util.Set var23 = var8.asSet();
    org.jsecurity.authz.ModularRealmAuthorizer var24 = new org.jsecurity.authz.ModularRealmAuthorizer((java.util.Collection)var23);
    org.jsecurity.authz.permission.InvalidPermissionStringException var27 = new org.jsecurity.authz.permission.InvalidPermissionStringException("", "dd\uFFFD");
    org.jsecurity.JSecurityException var29 = new org.jsecurity.JSecurityException("");
    org.jsecurity.authc.SimpleAuthenticationInfo var31 = new org.jsecurity.authc.SimpleAuthenticationInfo((java.lang.Object)var27, (java.lang.Object)"", "org.jsecurity.authz.UnauthorizedException: org.jsecurity.session.ExpiredSessionException: ");
    org.jsecurity.subject.PrincipalCollection var32 = var31.getPrincipals();
    org.jsecurity.session.UnknownSessionException var36 = new org.jsecurity.session.UnknownSessionException("dd\uFFFD", (java.io.Serializable)100.0f);
    org.jsecurity.session.SessionException var38 = new org.jsecurity.session.SessionException("dd\uFFFD", (java.lang.Throwable)var36, (java.io.Serializable)0);
    org.jsecurity.authc.SimpleAccount var39 = new org.jsecurity.authc.SimpleAccount(var32, (java.lang.Object)var38);
    java.lang.String[] var44 = org.jsecurity.util.StringUtils.split("org.jsecurity.config.ConfigurationException: dd\uFFFD", '4', '4', '4');
    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      boolean[] var45 = var24.isPermitted(var32, var44);
      fail("Expected exception of type java.lang.ClassCastException");
    } catch (java.lang.ClassCastException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var3);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var4);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var5);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var21);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var23);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var32);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var44);

  }

  public void test346() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest0.test346");


    org.jsecurity.mgt.DefaultSecurityManager var0 = new org.jsecurity.mgt.DefaultSecurityManager();
    java.io.InputStream var2 = org.jsecurity.util.ClassUtils.getResourceAsStream("");
    java.lang.Object[] var3 = new java.lang.Object[] { var2};
    java.util.List var4 = org.jsecurity.util.CollectionUtils.asList(var3);
    org.jsecurity.authc.pam.ModularRealmAuthenticator var5 = new org.jsecurity.authc.pam.ModularRealmAuthenticator(var4);
    org.jsecurity.authc.pam.AllSuccessfulModularAuthenticationStrategy var6 = new org.jsecurity.authc.pam.AllSuccessfulModularAuthenticationStrategy();
    var5.setModularAuthenticationStrategy((org.jsecurity.authc.pam.ModularAuthenticationStrategy)var6);
    org.jsecurity.authz.SimpleAuthorizationInfo var8 = new org.jsecurity.authz.SimpleAuthorizationInfo();
    var8.addStringPermission("hi!");
    java.io.InputStream var12 = org.jsecurity.util.ClassUtils.getResourceAsStream("");
    java.lang.Object[] var13 = new java.lang.Object[] { var12};
    java.util.List var14 = org.jsecurity.util.CollectionUtils.asList(var13);
    var8.addRoles((java.util.Collection)var14);
    var5.setAuthenticationListeners((java.util.Collection)var14);
    var0.setSessionListeners((java.util.Collection)var14);
    org.jsecurity.authc.pam.ModularRealmAuthenticator var18 = new org.jsecurity.authc.pam.ModularRealmAuthenticator();
    org.jsecurity.authz.permission.InvalidPermissionStringException var21 = new org.jsecurity.authz.permission.InvalidPermissionStringException("", "dd\uFFFD");
    org.jsecurity.JSecurityException var23 = new org.jsecurity.JSecurityException("");
    org.jsecurity.authc.SimpleAuthenticationInfo var25 = new org.jsecurity.authc.SimpleAuthenticationInfo((java.lang.Object)var21, (java.lang.Object)"", "org.jsecurity.authz.UnauthorizedException: org.jsecurity.session.ExpiredSessionException: ");
    org.jsecurity.subject.PrincipalCollection var26 = var25.getPrincipals();
    var18.onLogout(var26);
    var0.setAuthenticator((org.jsecurity.authc.Authenticator)var18);
    org.jsecurity.codec.CodecException var31 = new org.jsecurity.codec.CodecException("dd\uFFFD");
    org.jsecurity.authc.ConcurrentAccessException var32 = new org.jsecurity.authc.ConcurrentAccessException("org.jsecurity.authz.UnauthorizedException: org.jsecurity.session.ExpiredSessionException: ", (java.lang.Throwable)var31);
    org.jsecurity.subject.SimplePrincipalCollection var34 = new org.jsecurity.subject.SimplePrincipalCollection((java.lang.Object)var31, "");
    org.jsecurity.authc.pam.FirstSuccessfulAuthenticationStrategy var35 = new org.jsecurity.authc.pam.FirstSuccessfulAuthenticationStrategy();
    org.jsecurity.authz.UnauthorizedException var37 = new org.jsecurity.authz.UnauthorizedException("org.jsecurity.config.ConfigurationException: dd\uFFFD");
    java.lang.Throwable[] var38 = var37.getSuppressed();
    java.util.List var39 = org.jsecurity.util.CollectionUtils.asList((java.lang.Object[])var38);
    org.jsecurity.authc.UsernamePasswordToken var40 = new org.jsecurity.authc.UsernamePasswordToken();
    java.lang.String var41 = var40.getUsername();
    java.net.InetAddress var42 = var40.getInetAddress();
    org.jsecurity.authc.AuthenticationInfo var43 = var35.beforeAllAttempts((java.util.Collection)var39, (org.jsecurity.authc.AuthenticationToken)var40);
    org.jsecurity.session.UnknownSessionException var48 = new org.jsecurity.session.UnknownSessionException("dd\uFFFD", (java.io.Serializable)100.0f);
    org.jsecurity.subject.SubjectException var49 = new org.jsecurity.subject.SubjectException("dd\uFFFD", (java.lang.Throwable)var48);
    org.jsecurity.io.SerializationException var50 = new org.jsecurity.io.SerializationException("", (java.lang.Throwable)var49);
    java.lang.Throwable[] var51 = var49.getSuppressed();
    java.util.Set var52 = org.jsecurity.util.CollectionUtils.asSet((java.lang.Object[])var51);
    org.jsecurity.authc.SimpleAccount var53 = new org.jsecurity.authc.SimpleAccount((org.jsecurity.subject.PrincipalCollection)var34, (java.lang.Object)var39, var52);
    java.io.InputStream var55 = org.jsecurity.util.ClassUtils.getResourceAsStream("");
    java.lang.Object[] var56 = new java.lang.Object[] { var55};
    java.util.List var57 = org.jsecurity.util.CollectionUtils.asList(var56);
    org.jsecurity.authc.pam.ModularRealmAuthenticator var58 = new org.jsecurity.authc.pam.ModularRealmAuthenticator(var57);
    org.jsecurity.subject.SimplePrincipalCollection var60 = new org.jsecurity.subject.SimplePrincipalCollection((java.util.Collection)var57, "org.jsecurity.authz.UnauthorizedException: org.jsecurity.session.ExpiredSessionException: ");
    org.jsecurity.io.ResourceException var64 = new org.jsecurity.io.ResourceException("hi!");
    org.jsecurity.authc.UnknownAccountException var65 = new org.jsecurity.authc.UnknownAccountException((java.lang.Throwable)var64);
    org.jsecurity.session.StoppedSessionException var66 = new org.jsecurity.session.StoppedSessionException("dd\uFFFD", (java.io.Serializable)var64);
    org.jsecurity.session.UnknownSessionException var67 = new org.jsecurity.session.UnknownSessionException("org.jsecurity.authz.UnauthorizedException: org.jsecurity.session.ExpiredSessionException: ", (java.lang.Throwable)var64);
    boolean var68 = var60.equals((java.lang.Object)var64);
    var34.addAll((org.jsecurity.subject.PrincipalCollection)var60);
    org.jsecurity.session.UnknownSessionException var74 = new org.jsecurity.session.UnknownSessionException("dd\uFFFD", (java.io.Serializable)100.0f);
    org.jsecurity.subject.SubjectException var75 = new org.jsecurity.subject.SubjectException("dd\uFFFD", (java.lang.Throwable)var74);
    org.jsecurity.io.SerializationException var76 = new org.jsecurity.io.SerializationException("", (java.lang.Throwable)var75);
    java.lang.Throwable[] var77 = var75.getSuppressed();
    java.util.List var78 = org.jsecurity.util.CollectionUtils.asList((java.lang.Object[])var77);
    boolean var79 = var0.isPermittedAll((org.jsecurity.subject.PrincipalCollection)var34, (java.util.Collection)var78);
    org.jsecurity.subject.DelegatingSubject var80 = new org.jsecurity.subject.DelegatingSubject((org.jsecurity.mgt.SecurityManager)var0);
    java.lang.String[] var83 = org.jsecurity.util.StringUtils.tokenizeToStringArray("hi!", "");
    boolean[] var84 = var80.isPermitted(var83);
    java.lang.String[] var86 = org.jsecurity.util.StringUtils.split("org.jsecurity.authz.UnauthorizedException: org.jsecurity.session.ExpiredSessionException: ");
    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      var80.checkPermissions(var86);
      fail("Expected exception of type org.jsecurity.authz.UnauthenticatedException");
    } catch (org.jsecurity.authz.UnauthenticatedException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var2);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var3);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var4);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var12);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var13);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var14);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var26);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var38);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var39);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var41);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var42);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var43);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var51);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var52);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var55);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var56);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var57);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var68 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var77);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var78);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var79 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var83);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var84);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var86);

  }

  public void test347() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest0.test347");


    java.lang.String var1 = org.jsecurity.codec.Base64.decodeToString("\uFFFD\uFFFD#\uFFFD\uFFFD.\uFFFD+r\uFFFD\u6959(\uFFFD\uFFFDW\uFFFDq\uFFFD.\uFFFD\uFFFD^jY\uFFFDj\uFFFDa\uFFFD\uFFFD\uFFFDj\u0628\u0000");
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var1 + "' != '" + "\uFFFD\uFFFD\u0000"+ "'", var1.equals("\uFFFD\uFFFD\u0000"));

  }

  public void test348() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest0.test348");


    org.jsecurity.authc.ConcurrentAccessException var1 = new org.jsecurity.authc.ConcurrentAccessException("dd\uFFFD");

  }

  public void test349() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest0.test349");


    org.jsecurity.authc.ConcurrentAccessException var1 = new org.jsecurity.authc.ConcurrentAccessException("org.jsecurity.realm.SimpleAccountRealm-55-authorization");

  }

  public void test350() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest0.test350");


    org.jsecurity.crypto.hash.Md5Hash var1 = org.jsecurity.crypto.hash.Md5Hash.fromBase64String("org.jsecurity.authc.CredentialsException: 783ccd31-48a8-42dd-890f-df885a7baaff");
    java.lang.String var2 = var1.toBase64();
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var2 + "' != '" + "orgjsecurityauthcCredentialsException783ccd3148a842dd890fdf885a7baafAA=="+ "'", var2.equals("orgjsecurityauthcCredentialsException783ccd3148a842dd890fdf885a7baafAA=="));

  }

  public void test351() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest0.test351");


    org.jsecurity.crypto.BlowfishCipher var0 = new org.jsecurity.crypto.BlowfishCipher();
    byte[] var4 = new byte[] { (byte)100, (byte)100, (byte)(-1)};
    java.lang.String var5 = org.jsecurity.codec.CodecSupport.toString(var4);
    byte[] var6 = org.jsecurity.codec.Base64.encode(var4);
    java.lang.String var7 = org.jsecurity.codec.Base64.decodeToString(var6);
    byte[] var11 = new byte[] { (byte)100, (byte)100, (byte)(-1)};
    java.lang.String var12 = org.jsecurity.codec.CodecSupport.toString(var11);
    byte[] var14 = org.jsecurity.codec.Base64.encode(var11, false);
    byte[] var15 = org.jsecurity.codec.Base64.decode(var11);
    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      byte[] var16 = var0.decrypt(var6, var11);
      fail("Expected exception of type java.lang.IllegalStateException");
    } catch (java.lang.IllegalStateException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var4);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var5 + "' != '" + "dd\uFFFD"+ "'", var5.equals("dd\uFFFD"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var6);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var7 + "' != '" + "dd\uFFFD"+ "'", var7.equals("dd\uFFFD"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var11);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var12 + "' != '" + "dd\uFFFD"+ "'", var12.equals("dd\uFFFD"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var14);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var15);

  }

  public void test352() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest0.test352");


    org.jsecurity.realm.activedirectory.ActiveDirectoryRealm var0 = new org.jsecurity.realm.activedirectory.ActiveDirectoryRealm();
    var0.init();
    var0.setSystemPassword("dd\uFFFD");
    org.jsecurity.authz.aop.GuestAnnotationHandler var4 = new org.jsecurity.authz.aop.GuestAnnotationHandler();
    java.lang.Class var5 = var4.getAnnotationClass();
    var0.setAuthenticationTokenClass(var5);
    org.jsecurity.mgt.DefaultSecurityManager var7 = new org.jsecurity.mgt.DefaultSecurityManager((org.jsecurity.realm.Realm)var0);
    org.jsecurity.mgt.DefaultSecurityManager var8 = new org.jsecurity.mgt.DefaultSecurityManager();
    java.io.InputStream var10 = org.jsecurity.util.ClassUtils.getResourceAsStream("");
    java.lang.Object[] var11 = new java.lang.Object[] { var10};
    java.util.List var12 = org.jsecurity.util.CollectionUtils.asList(var11);
    org.jsecurity.authc.pam.ModularRealmAuthenticator var13 = new org.jsecurity.authc.pam.ModularRealmAuthenticator(var12);
    org.jsecurity.authc.pam.AllSuccessfulModularAuthenticationStrategy var14 = new org.jsecurity.authc.pam.AllSuccessfulModularAuthenticationStrategy();
    var13.setModularAuthenticationStrategy((org.jsecurity.authc.pam.ModularAuthenticationStrategy)var14);
    org.jsecurity.authz.SimpleAuthorizationInfo var16 = new org.jsecurity.authz.SimpleAuthorizationInfo();
    var16.addStringPermission("hi!");
    java.io.InputStream var20 = org.jsecurity.util.ClassUtils.getResourceAsStream("");
    java.lang.Object[] var21 = new java.lang.Object[] { var20};
    java.util.List var22 = org.jsecurity.util.CollectionUtils.asList(var21);
    var16.addRoles((java.util.Collection)var22);
    var13.setAuthenticationListeners((java.util.Collection)var22);
    var8.setSessionListeners((java.util.Collection)var22);
    org.jsecurity.realm.text.TextConfigurationRealm var26 = new org.jsecurity.realm.text.TextConfigurationRealm();
    java.io.InputStream var28 = org.jsecurity.util.ClassUtils.getResourceAsStream("");
    java.lang.Object[] var29 = new java.lang.Object[] { var28};
    java.util.List var30 = org.jsecurity.util.CollectionUtils.asList(var29);
    org.jsecurity.authc.pam.ModularRealmAuthenticator var31 = new org.jsecurity.authc.pam.ModularRealmAuthenticator(var30);
    org.jsecurity.subject.SimplePrincipalCollection var33 = new org.jsecurity.subject.SimplePrincipalCollection((java.util.Collection)var30, "org.jsecurity.authz.UnauthorizedException: org.jsecurity.session.ExpiredSessionException: ");
    org.jsecurity.session.UnknownSessionException var38 = new org.jsecurity.session.UnknownSessionException("dd\uFFFD", (java.io.Serializable)100.0f);
    org.jsecurity.session.SessionException var40 = new org.jsecurity.session.SessionException("dd\uFFFD", (java.lang.Throwable)var38, (java.io.Serializable)0);
    org.jsecurity.session.SessionException var41 = new org.jsecurity.session.SessionException("dd\uFFFD", (java.lang.Throwable)var38);
    var33.add((java.lang.Object)var41, "org.jsecurity.config.ConfigurationException: dd\uFFFD");
    var26.onLogout((org.jsecurity.subject.PrincipalCollection)var33);
    org.jsecurity.authc.pam.FirstSuccessfulAuthenticationStrategy var45 = new org.jsecurity.authc.pam.FirstSuccessfulAuthenticationStrategy();
    org.jsecurity.authz.UnauthorizedException var47 = new org.jsecurity.authz.UnauthorizedException("org.jsecurity.config.ConfigurationException: dd\uFFFD");
    java.lang.Throwable[] var48 = var47.getSuppressed();
    java.util.List var49 = org.jsecurity.util.CollectionUtils.asList((java.lang.Object[])var48);
    org.jsecurity.authc.UsernamePasswordToken var50 = new org.jsecurity.authc.UsernamePasswordToken();
    java.lang.String var51 = var50.getUsername();
    java.net.InetAddress var52 = var50.getInetAddress();
    org.jsecurity.authc.AuthenticationInfo var53 = var45.beforeAllAttempts((java.util.Collection)var49, (org.jsecurity.authc.AuthenticationToken)var50);
    boolean[] var54 = var8.hasRoles((org.jsecurity.subject.PrincipalCollection)var33, var49);
    org.jsecurity.session.mgt.SessionManager var55 = var8.getSessionManager();
    var7.setSessionManager(var55);
    org.jsecurity.authz.permission.InvalidPermissionStringException var59 = new org.jsecurity.authz.permission.InvalidPermissionStringException("", "dd\uFFFD");
    org.jsecurity.JSecurityException var61 = new org.jsecurity.JSecurityException("");
    org.jsecurity.authc.SimpleAuthenticationInfo var63 = new org.jsecurity.authc.SimpleAuthenticationInfo((java.lang.Object)var59, (java.lang.Object)"", "org.jsecurity.authz.UnauthorizedException: org.jsecurity.session.ExpiredSessionException: ");
    org.jsecurity.subject.PrincipalCollection var64 = var63.getPrincipals();
    org.jsecurity.session.UnknownSessionException var68 = new org.jsecurity.session.UnknownSessionException("dd\uFFFD", (java.io.Serializable)100.0f);
    org.jsecurity.session.SessionException var70 = new org.jsecurity.session.SessionException("dd\uFFFD", (java.lang.Throwable)var68, (java.io.Serializable)0);
    org.jsecurity.authc.SimpleAccount var71 = new org.jsecurity.authc.SimpleAccount(var64, (java.lang.Object)var70);
    java.io.InputStream var73 = org.jsecurity.util.ClassUtils.getResourceAsStream("");
    java.lang.Object[] var74 = new java.lang.Object[] { var73};
    java.util.List var75 = org.jsecurity.util.CollectionUtils.asList(var74);
    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      boolean[] var76 = var7.isPermitted(var64, var75);
      fail("Expected exception of type java.lang.ClassCastException");
    } catch (java.lang.ClassCastException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var5);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var10);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var11);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var12);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var20);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var21);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var22);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var28);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var29);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var30);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var48);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var49);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var51);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var52);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var53);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var54);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var55);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var64);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var73);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var74);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var75);

  }

  public void test353() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest0.test353");


    org.jsecurity.mgt.DefaultSecurityManager var0 = new org.jsecurity.mgt.DefaultSecurityManager();
    java.io.InputStream var2 = org.jsecurity.util.ClassUtils.getResourceAsStream("");
    java.lang.Object[] var3 = new java.lang.Object[] { var2};
    java.util.List var4 = org.jsecurity.util.CollectionUtils.asList(var3);
    org.jsecurity.authc.pam.ModularRealmAuthenticator var5 = new org.jsecurity.authc.pam.ModularRealmAuthenticator(var4);
    org.jsecurity.authc.pam.AllSuccessfulModularAuthenticationStrategy var6 = new org.jsecurity.authc.pam.AllSuccessfulModularAuthenticationStrategy();
    var5.setModularAuthenticationStrategy((org.jsecurity.authc.pam.ModularAuthenticationStrategy)var6);
    org.jsecurity.authz.SimpleAuthorizationInfo var8 = new org.jsecurity.authz.SimpleAuthorizationInfo();
    var8.addStringPermission("hi!");
    java.io.InputStream var12 = org.jsecurity.util.ClassUtils.getResourceAsStream("");
    java.lang.Object[] var13 = new java.lang.Object[] { var12};
    java.util.List var14 = org.jsecurity.util.CollectionUtils.asList(var13);
    var8.addRoles((java.util.Collection)var14);
    var5.setAuthenticationListeners((java.util.Collection)var14);
    var0.setSessionListeners((java.util.Collection)var14);
    org.jsecurity.realm.text.TextConfigurationRealm var18 = new org.jsecurity.realm.text.TextConfigurationRealm();
    java.io.InputStream var20 = org.jsecurity.util.ClassUtils.getResourceAsStream("");
    java.lang.Object[] var21 = new java.lang.Object[] { var20};
    java.util.List var22 = org.jsecurity.util.CollectionUtils.asList(var21);
    org.jsecurity.authc.pam.ModularRealmAuthenticator var23 = new org.jsecurity.authc.pam.ModularRealmAuthenticator(var22);
    org.jsecurity.subject.SimplePrincipalCollection var25 = new org.jsecurity.subject.SimplePrincipalCollection((java.util.Collection)var22, "org.jsecurity.authz.UnauthorizedException: org.jsecurity.session.ExpiredSessionException: ");
    org.jsecurity.session.UnknownSessionException var30 = new org.jsecurity.session.UnknownSessionException("dd\uFFFD", (java.io.Serializable)100.0f);
    org.jsecurity.session.SessionException var32 = new org.jsecurity.session.SessionException("dd\uFFFD", (java.lang.Throwable)var30, (java.io.Serializable)0);
    org.jsecurity.session.SessionException var33 = new org.jsecurity.session.SessionException("dd\uFFFD", (java.lang.Throwable)var30);
    var25.add((java.lang.Object)var33, "org.jsecurity.config.ConfigurationException: dd\uFFFD");
    var18.onLogout((org.jsecurity.subject.PrincipalCollection)var25);
    org.jsecurity.authc.pam.FirstSuccessfulAuthenticationStrategy var37 = new org.jsecurity.authc.pam.FirstSuccessfulAuthenticationStrategy();
    org.jsecurity.authz.UnauthorizedException var39 = new org.jsecurity.authz.UnauthorizedException("org.jsecurity.config.ConfigurationException: dd\uFFFD");
    java.lang.Throwable[] var40 = var39.getSuppressed();
    java.util.List var41 = org.jsecurity.util.CollectionUtils.asList((java.lang.Object[])var40);
    org.jsecurity.authc.UsernamePasswordToken var42 = new org.jsecurity.authc.UsernamePasswordToken();
    java.lang.String var43 = var42.getUsername();
    java.net.InetAddress var44 = var42.getInetAddress();
    org.jsecurity.authc.AuthenticationInfo var45 = var37.beforeAllAttempts((java.util.Collection)var41, (org.jsecurity.authc.AuthenticationToken)var42);
    boolean[] var46 = var0.hasRoles((org.jsecurity.subject.PrincipalCollection)var25, var41);
    org.jsecurity.codec.CodecException var49 = new org.jsecurity.codec.CodecException("dd\uFFFD");
    org.jsecurity.authc.ConcurrentAccessException var50 = new org.jsecurity.authc.ConcurrentAccessException("org.jsecurity.authz.UnauthorizedException: org.jsecurity.session.ExpiredSessionException: ", (java.lang.Throwable)var49);
    org.jsecurity.subject.SimplePrincipalCollection var52 = new org.jsecurity.subject.SimplePrincipalCollection((java.lang.Object)var49, "");
    java.io.InputStream var54 = org.jsecurity.util.ClassUtils.getResourceAsStream("");
    java.lang.Object[] var55 = new java.lang.Object[] { var54};
    java.util.List var56 = org.jsecurity.util.CollectionUtils.asList(var55);
    org.jsecurity.authc.pam.ModularRealmAuthenticator var57 = new org.jsecurity.authc.pam.ModularRealmAuthenticator(var56);
    var52.addAll((java.util.Collection)var56, "\u0000\u0000");
    var0.setSessionListeners((java.util.Collection)var56);
    org.jsecurity.subject.Subject var61 = var0.getSubject();
    org.jsecurity.session.mgt.SimpleSession var62 = new org.jsecurity.session.mgt.SimpleSession();
    var62.setTimeout((-1L));
    org.jsecurity.session.mgt.SimpleSession var65 = new org.jsecurity.session.mgt.SimpleSession();
    java.util.Date var66 = var65.getLastAccessTime();
    var62.setLastAccessTime(var66);
    java.net.InetAddress var68 = var62.getHostAddress();
    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      org.jsecurity.session.Session var69 = var0.start(var68);
      fail("Expected exception of type java.lang.ClassCastException");
    } catch (java.lang.ClassCastException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var2);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var3);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var4);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var12);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var13);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var14);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var20);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var21);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var22);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var40);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var41);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var43);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var44);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var45);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var46);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var54);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var55);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var56);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var61);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var66);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var68);

  }

  public void test354() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest0.test354");


    org.jsecurity.realm.SimpleAccountRealm var1 = new org.jsecurity.realm.SimpleAccountRealm("hi!");
    java.lang.Class var2 = var1.getAuthenticationTokenClass();
    org.jsecurity.cache.Cache var3 = var1.getAuthorizationCache();
    org.jsecurity.authz.permission.InvalidPermissionStringException var6 = new org.jsecurity.authz.permission.InvalidPermissionStringException("", "dd\uFFFD");
    org.jsecurity.JSecurityException var8 = new org.jsecurity.JSecurityException("");
    org.jsecurity.authc.SimpleAuthenticationInfo var10 = new org.jsecurity.authc.SimpleAuthenticationInfo((java.lang.Object)var6, (java.lang.Object)"", "org.jsecurity.authz.UnauthorizedException: org.jsecurity.session.ExpiredSessionException: ");
    org.jsecurity.subject.PrincipalCollection var11 = var10.getPrincipals();
    org.jsecurity.session.UnknownSessionException var15 = new org.jsecurity.session.UnknownSessionException("dd\uFFFD", (java.io.Serializable)100.0f);
    org.jsecurity.session.SessionException var17 = new org.jsecurity.session.SessionException("dd\uFFFD", (java.lang.Throwable)var15, (java.io.Serializable)0);
    org.jsecurity.authc.SimpleAccount var18 = new org.jsecurity.authc.SimpleAccount(var11, (java.lang.Object)var17);
    org.jsecurity.authz.SimpleRole var19 = new org.jsecurity.authz.SimpleRole();
    org.jsecurity.authz.SimpleAuthorizationInfo var20 = new org.jsecurity.authz.SimpleAuthorizationInfo();
    var20.addRole("a2b823b1e72eae2b727289df8a00a89df8a0bab6ad8a89c4c5c7a9b62a270000");
    org.jsecurity.session.UnknownSessionException var27 = new org.jsecurity.session.UnknownSessionException("dd\uFFFD", (java.io.Serializable)100.0f);
    org.jsecurity.subject.SubjectException var28 = new org.jsecurity.subject.SubjectException("dd\uFFFD", (java.lang.Throwable)var27);
    org.jsecurity.io.SerializationException var29 = new org.jsecurity.io.SerializationException("", (java.lang.Throwable)var28);
    java.lang.Throwable[] var30 = var28.getSuppressed();
    java.util.Set var31 = org.jsecurity.util.CollectionUtils.asSet((java.lang.Object[])var30);
    var20.addRoles((java.util.Collection)var31);
    var19.addAll((java.util.Collection)var31);
    java.lang.String var34 = var19.getName();
    org.jsecurity.authz.permission.WildcardPermission var37 = new org.jsecurity.authz.permission.WildcardPermission("hi!", false);
    var19.add((org.jsecurity.authz.Permission)var37);
    org.jsecurity.authz.permission.WildcardPermission var41 = new org.jsecurity.authz.permission.WildcardPermission("hi!", false);
    var19.add((org.jsecurity.authz.Permission)var41);
    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      var1.checkPermission(var11, (org.jsecurity.authz.Permission)var41);
      fail("Expected exception of type java.util.NoSuchElementException");
    } catch (java.util.NoSuchElementException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var2);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var3);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var11);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var30);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var31);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var34);

  }

  public void test355() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest0.test355");


    org.jsecurity.authc.pam.AllSuccessfulModularAuthenticationStrategy var0 = new org.jsecurity.authc.pam.AllSuccessfulModularAuthenticationStrategy();
    org.jsecurity.authc.pam.AllSuccessfulModularAuthenticationStrategy var1 = new org.jsecurity.authc.pam.AllSuccessfulModularAuthenticationStrategy();
    char[] var3 = new char[] { };
    org.jsecurity.authc.UsernamePasswordToken var5 = new org.jsecurity.authc.UsernamePasswordToken("hi!", var3, true);
    org.jsecurity.authc.SimpleAccount var6 = new org.jsecurity.authc.SimpleAccount();
    var6.setCredentialsExpired(false);
    boolean var9 = var6.isLocked();
    org.jsecurity.authc.AuthenticationInfo var10 = var1.afterAllAttempts((org.jsecurity.authc.AuthenticationToken)var5, (org.jsecurity.authc.AuthenticationInfo)var6);
    char[] var14 = new char[] { '4', '#'};
    org.jsecurity.authc.UsernamePasswordToken var15 = new org.jsecurity.authc.UsernamePasswordToken("\u0000\u0000", var14);
    org.jsecurity.authc.SimpleAccount var16 = new org.jsecurity.authc.SimpleAccount();
    var16.setCredentialsExpired(false);
    var16.setCredentialsExpired(false);
    boolean var21 = var16.isCredentialsExpired();
    org.jsecurity.authc.AuthenticationInfo var22 = var1.afterAllAttempts((org.jsecurity.authc.AuthenticationToken)var15, (org.jsecurity.authc.AuthenticationInfo)var16);
    org.jsecurity.authz.UnauthenticatedException var26 = new org.jsecurity.authz.UnauthenticatedException();
    org.jsecurity.config.UnresolveableReferenceException var27 = new org.jsecurity.config.UnresolveableReferenceException("", (java.lang.Throwable)var26);
    org.jsecurity.cache.CacheException var28 = new org.jsecurity.cache.CacheException("org.jsecurity.config.ConfigurationException: dd\uFFFD", (java.lang.Throwable)var26);
    org.jsecurity.authc.SimpleAuthenticationInfo var30 = new org.jsecurity.authc.SimpleAuthenticationInfo((java.lang.Object)"org.jsecurity.config.ConfigurationException: dd\uFFFD", (java.lang.Object)var28, "a2b823b1e72eae2b727289df8a00a89df8a0bab6ad8a89c4c5c7a9b62a270000");
    org.jsecurity.subject.PrincipalCollection var31 = var30.getPrincipals();
    org.jsecurity.authc.AuthenticationInfo var32 = var0.afterAllAttempts((org.jsecurity.authc.AuthenticationToken)var15, (org.jsecurity.authc.AuthenticationInfo)var30);
    org.jsecurity.realm.activedirectory.ActiveDirectoryRealm var33 = new org.jsecurity.realm.activedirectory.ActiveDirectoryRealm();
    org.jsecurity.authc.credential.Sha256CredentialsMatcher var34 = new org.jsecurity.authc.credential.Sha256CredentialsMatcher();
    var33.setCredentialsMatcher((org.jsecurity.authc.credential.CredentialsMatcher)var34);
    java.lang.String var36 = var33.getAuthorizationCacheName();
    var33.setPrincipalSuffix("org.jsecurity.config.ConfigurationException: dd\uFFFD");
    org.jsecurity.authz.permission.PermissionResolver var39 = var33.getPermissionResolver();
    java.lang.Class var40 = var33.getAuthenticationTokenClass();
    char[] var43 = new char[] { };
    org.jsecurity.authc.UsernamePasswordToken var45 = new org.jsecurity.authc.UsernamePasswordToken("hi!", var43, true);
    org.jsecurity.authc.UsernamePasswordToken var46 = new org.jsecurity.authc.UsernamePasswordToken("\u0000\u0000", var43);
    org.jsecurity.session.UnknownSessionException var50 = new org.jsecurity.session.UnknownSessionException("dd\uFFFD", (java.io.Serializable)100.0f);
    org.jsecurity.session.SessionException var52 = new org.jsecurity.session.SessionException("dd\uFFFD", (java.lang.Throwable)var50, (java.io.Serializable)0);
    org.jsecurity.authc.SimpleAuthenticationInfo var55 = new org.jsecurity.authc.SimpleAuthenticationInfo((java.lang.Object)0, (java.lang.Object)10, "hi!");
    java.lang.Object var56 = var55.getCredentials();
    java.lang.String var57 = var55.toString();
    org.jsecurity.authz.SimpleAuthorizingAccount var58 = new org.jsecurity.authz.SimpleAuthorizingAccount();
    boolean var60 = var58.hasRole("\u0000\u0000\u0000");
    org.jsecurity.authc.ConcurrentAccessException var62 = new org.jsecurity.authc.ConcurrentAccessException();
    org.jsecurity.authz.HostUnauthorizedException var63 = new org.jsecurity.authz.HostUnauthorizedException("org.jsecurity.authc.CredentialsException: 783ccd31-48a8-42dd-890f-df885a7baaff", (java.lang.Throwable)var62);
    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      org.jsecurity.authc.AuthenticationInfo var64 = var0.afterAttempt((org.jsecurity.realm.Realm)var33, (org.jsecurity.authc.AuthenticationToken)var46, (org.jsecurity.authc.AuthenticationInfo)var55, (org.jsecurity.authc.AuthenticationInfo)var58, (java.lang.Throwable)var62);
      fail("Expected exception of type org.jsecurity.authc.ConcurrentAccessException");
    } catch (org.jsecurity.authc.ConcurrentAccessException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var3);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var9 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var10);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var14);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var21 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var22);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var31);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var32);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var36);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var39);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var40);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var43);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var56 + "' != '" + 10+ "'", var56.equals(10));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var60 == false);

  }

  public void test356() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest0.test356");


    org.jsecurity.config.IniConfiguration var0 = new org.jsecurity.config.IniConfiguration();
    java.lang.String var1 = var0.getConfig();
    var0.setConfig("\uFFFD\uFFFD#\uFFFD\uFFFD.\uFFFD+rr\uFFFD\u07CA\u0000\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\u01E9\uFFFD*'\u0000\u0000");
    java.io.InputStream var5 = org.jsecurity.util.ClassUtils.getResourceAsStream("");
    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      var0.load(var5);
      fail("Expected exception of type org.jsecurity.config.ConfigurationException");
    } catch (org.jsecurity.config.ConfigurationException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var1);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var5);

  }

  public void test357() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest0.test357");


    org.jsecurity.cache.CacheException var1 = new org.jsecurity.cache.CacheException("\uFFFD\uFFFD#\uFFFD\uFFFD.\uFFFD+r\uFFFD\u6959(\uFFFD\uFFFDW\uFFFDq\uFFFD.\uFFFD\uFFFD^jY\uFFFDj\uFFFDa\uFFFD\uFFFD\uFFFDj\u0628\u0000");

  }

  public void test358() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest0.test358");


    org.jsecurity.codec.CodecException var2 = new org.jsecurity.codec.CodecException("dd\uFFFD");
    org.jsecurity.authc.ConcurrentAccessException var3 = new org.jsecurity.authc.ConcurrentAccessException("org.jsecurity.authz.UnauthorizedException: org.jsecurity.session.ExpiredSessionException: ", (java.lang.Throwable)var2);
    org.jsecurity.subject.SimplePrincipalCollection var5 = new org.jsecurity.subject.SimplePrincipalCollection((java.lang.Object)var2, "");
    boolean var6 = var5.isEmpty();
    java.util.List var7 = var5.asList();
    org.jsecurity.authc.pam.ModularRealmAuthenticator var8 = new org.jsecurity.authc.pam.ModularRealmAuthenticator(var7);
    org.jsecurity.codec.CodecException var11 = new org.jsecurity.codec.CodecException("dd\uFFFD");
    org.jsecurity.authc.ConcurrentAccessException var12 = new org.jsecurity.authc.ConcurrentAccessException("org.jsecurity.authz.UnauthorizedException: org.jsecurity.session.ExpiredSessionException: ", (java.lang.Throwable)var11);
    org.jsecurity.subject.SimplePrincipalCollection var14 = new org.jsecurity.subject.SimplePrincipalCollection((java.lang.Object)var11, "");
    org.jsecurity.authc.pam.FirstSuccessfulAuthenticationStrategy var15 = new org.jsecurity.authc.pam.FirstSuccessfulAuthenticationStrategy();
    org.jsecurity.authz.UnauthorizedException var17 = new org.jsecurity.authz.UnauthorizedException("org.jsecurity.config.ConfigurationException: dd\uFFFD");
    java.lang.Throwable[] var18 = var17.getSuppressed();
    java.util.List var19 = org.jsecurity.util.CollectionUtils.asList((java.lang.Object[])var18);
    org.jsecurity.authc.UsernamePasswordToken var20 = new org.jsecurity.authc.UsernamePasswordToken();
    java.lang.String var21 = var20.getUsername();
    java.net.InetAddress var22 = var20.getInetAddress();
    org.jsecurity.authc.AuthenticationInfo var23 = var15.beforeAllAttempts((java.util.Collection)var19, (org.jsecurity.authc.AuthenticationToken)var20);
    org.jsecurity.session.UnknownSessionException var28 = new org.jsecurity.session.UnknownSessionException("dd\uFFFD", (java.io.Serializable)100.0f);
    org.jsecurity.subject.SubjectException var29 = new org.jsecurity.subject.SubjectException("dd\uFFFD", (java.lang.Throwable)var28);
    org.jsecurity.io.SerializationException var30 = new org.jsecurity.io.SerializationException("", (java.lang.Throwable)var29);
    java.lang.Throwable[] var31 = var29.getSuppressed();
    java.util.Set var32 = org.jsecurity.util.CollectionUtils.asSet((java.lang.Object[])var31);
    org.jsecurity.authc.SimpleAccount var33 = new org.jsecurity.authc.SimpleAccount((org.jsecurity.subject.PrincipalCollection)var14, (java.lang.Object)var19, var32);
    java.io.InputStream var35 = org.jsecurity.util.ClassUtils.getResourceAsStream("");
    java.lang.Object[] var36 = new java.lang.Object[] { var35};
    java.util.List var37 = org.jsecurity.util.CollectionUtils.asList(var36);
    org.jsecurity.authc.pam.ModularRealmAuthenticator var38 = new org.jsecurity.authc.pam.ModularRealmAuthenticator(var37);
    org.jsecurity.subject.SimplePrincipalCollection var40 = new org.jsecurity.subject.SimplePrincipalCollection((java.util.Collection)var37, "org.jsecurity.authz.UnauthorizedException: org.jsecurity.session.ExpiredSessionException: ");
    org.jsecurity.io.ResourceException var44 = new org.jsecurity.io.ResourceException("hi!");
    org.jsecurity.authc.UnknownAccountException var45 = new org.jsecurity.authc.UnknownAccountException((java.lang.Throwable)var44);
    org.jsecurity.session.StoppedSessionException var46 = new org.jsecurity.session.StoppedSessionException("dd\uFFFD", (java.io.Serializable)var44);
    org.jsecurity.session.UnknownSessionException var47 = new org.jsecurity.session.UnknownSessionException("org.jsecurity.authz.UnauthorizedException: org.jsecurity.session.ExpiredSessionException: ", (java.lang.Throwable)var44);
    boolean var48 = var40.equals((java.lang.Object)var44);
    var14.addAll((org.jsecurity.subject.PrincipalCollection)var40);
    boolean var50 = var14.isEmpty();
    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      var8.onLogout((org.jsecurity.subject.PrincipalCollection)var14);
      fail("Expected exception of type java.lang.ClassCastException");
    } catch (java.lang.ClassCastException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var6 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var7);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var18);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var19);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var21);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var22);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var23);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var31);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var32);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var35);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var36);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var37);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var48 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var50 == false);

  }

  public void test359() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest0.test359");


    org.jsecurity.authz.SimpleAuthorizationInfo var0 = new org.jsecurity.authz.SimpleAuthorizationInfo();
    org.jsecurity.session.UnknownSessionException var5 = new org.jsecurity.session.UnknownSessionException("dd\uFFFD", (java.io.Serializable)100.0f);
    org.jsecurity.subject.SubjectException var6 = new org.jsecurity.subject.SubjectException("dd\uFFFD", (java.lang.Throwable)var5);
    org.jsecurity.io.SerializationException var7 = new org.jsecurity.io.SerializationException("", (java.lang.Throwable)var6);
    java.lang.Throwable[] var8 = var6.getSuppressed();
    java.util.Set var9 = org.jsecurity.util.CollectionUtils.asSet((java.lang.Object[])var8);
    var0.setStringPermissions(var9);
    java.util.Set var11 = var0.getRoles();
    org.jsecurity.authz.SimpleAuthorizationInfo var12 = new org.jsecurity.authz.SimpleAuthorizationInfo();
    var12.addRole("a2b823b1e72eae2b727289df8a00a89df8a0bab6ad8a89c4c5c7a9b62a270000");
    org.jsecurity.session.UnknownSessionException var19 = new org.jsecurity.session.UnknownSessionException("dd\uFFFD", (java.io.Serializable)100.0f);
    org.jsecurity.subject.SubjectException var20 = new org.jsecurity.subject.SubjectException("dd\uFFFD", (java.lang.Throwable)var19);
    org.jsecurity.io.SerializationException var21 = new org.jsecurity.io.SerializationException("", (java.lang.Throwable)var20);
    java.lang.Throwable[] var22 = var20.getSuppressed();
    java.util.Set var23 = org.jsecurity.util.CollectionUtils.asSet((java.lang.Object[])var22);
    var12.addRoles((java.util.Collection)var23);
    var0.setRoles(var23);
    org.jsecurity.authz.SimpleAuthorizationInfo var26 = new org.jsecurity.authz.SimpleAuthorizationInfo();
    org.jsecurity.session.UnknownSessionException var31 = new org.jsecurity.session.UnknownSessionException("dd\uFFFD", (java.io.Serializable)100.0f);
    org.jsecurity.subject.SubjectException var32 = new org.jsecurity.subject.SubjectException("dd\uFFFD", (java.lang.Throwable)var31);
    org.jsecurity.io.SerializationException var33 = new org.jsecurity.io.SerializationException("", (java.lang.Throwable)var32);
    java.lang.Throwable[] var34 = var32.getSuppressed();
    java.util.Set var35 = org.jsecurity.util.CollectionUtils.asSet((java.lang.Object[])var34);
    var26.setStringPermissions(var35);
    java.util.Set var37 = var26.getRoles();
    org.jsecurity.authz.SimpleAuthorizationInfo var38 = new org.jsecurity.authz.SimpleAuthorizationInfo();
    var38.addRole("a2b823b1e72eae2b727289df8a00a89df8a0bab6ad8a89c4c5c7a9b62a270000");
    org.jsecurity.session.UnknownSessionException var45 = new org.jsecurity.session.UnknownSessionException("dd\uFFFD", (java.io.Serializable)100.0f);
    org.jsecurity.subject.SubjectException var46 = new org.jsecurity.subject.SubjectException("dd\uFFFD", (java.lang.Throwable)var45);
    org.jsecurity.io.SerializationException var47 = new org.jsecurity.io.SerializationException("", (java.lang.Throwable)var46);
    java.lang.Throwable[] var48 = var46.getSuppressed();
    java.util.Set var49 = org.jsecurity.util.CollectionUtils.asSet((java.lang.Object[])var48);
    var38.addRoles((java.util.Collection)var49);
    var26.setRoles(var49);
    var0.setRoles(var49);
    java.util.Set var53 = var0.getObjectPermissions();
    org.jsecurity.authz.SimpleRole var54 = new org.jsecurity.authz.SimpleRole();
    org.jsecurity.authz.SimpleAuthorizationInfo var55 = new org.jsecurity.authz.SimpleAuthorizationInfo();
    var55.addRole("a2b823b1e72eae2b727289df8a00a89df8a0bab6ad8a89c4c5c7a9b62a270000");
    org.jsecurity.session.UnknownSessionException var62 = new org.jsecurity.session.UnknownSessionException("dd\uFFFD", (java.io.Serializable)100.0f);
    org.jsecurity.subject.SubjectException var63 = new org.jsecurity.subject.SubjectException("dd\uFFFD", (java.lang.Throwable)var62);
    org.jsecurity.io.SerializationException var64 = new org.jsecurity.io.SerializationException("", (java.lang.Throwable)var63);
    java.lang.Throwable[] var65 = var63.getSuppressed();
    java.util.Set var66 = org.jsecurity.util.CollectionUtils.asSet((java.lang.Object[])var65);
    var55.addRoles((java.util.Collection)var66);
    var54.addAll((java.util.Collection)var66);
    java.lang.String var69 = var54.toString();
    org.jsecurity.authz.permission.AllPermission var70 = new org.jsecurity.authz.permission.AllPermission();
    org.jsecurity.authz.SimpleRole var72 = new org.jsecurity.authz.SimpleRole();
    org.jsecurity.authz.permission.WildcardPermission var75 = new org.jsecurity.authz.permission.WildcardPermission("hi!", false);
    boolean var76 = var72.isPermitted((org.jsecurity.authz.Permission)var75);
    org.jsecurity.session.InvalidSessionException var77 = new org.jsecurity.session.InvalidSessionException("org.jsecurity.config.ConfigurationException: dd\uFFFD", (java.io.Serializable)var75);
    org.jsecurity.authz.SimpleRole var78 = new org.jsecurity.authz.SimpleRole();
    org.jsecurity.authz.permission.WildcardPermission var81 = new org.jsecurity.authz.permission.WildcardPermission("hi!", false);
    boolean var82 = var78.isPermitted((org.jsecurity.authz.Permission)var81);
    boolean var83 = var75.implies((org.jsecurity.authz.Permission)var81);
    boolean var84 = var70.implies((org.jsecurity.authz.Permission)var81);
    boolean var85 = var54.isPermitted((org.jsecurity.authz.Permission)var81);
    var0.addObjectPermission((org.jsecurity.authz.Permission)var81);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var8);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var9);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var11);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var22);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var23);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var34);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var35);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var37);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var48);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var49);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var53);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var65);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var66);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var69);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var76 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var82 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var83 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var84 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var85 == false);

  }

  public void test360() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest0.test360");


    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      java.lang.String[] var1 = org.jsecurity.util.StringUtils.splitKeyValue("6464ff");
      fail("Expected exception of type java.text.ParseException");
    } catch (java.text.ParseException e) {
      // Expected exception.
    }

  }

  public void test361() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest0.test361");


    org.jsecurity.authz.SimpleAuthorizationInfo var0 = new org.jsecurity.authz.SimpleAuthorizationInfo();
    org.jsecurity.session.UnknownSessionException var5 = new org.jsecurity.session.UnknownSessionException("dd\uFFFD", (java.io.Serializable)100.0f);
    org.jsecurity.subject.SubjectException var6 = new org.jsecurity.subject.SubjectException("dd\uFFFD", (java.lang.Throwable)var5);
    org.jsecurity.io.SerializationException var7 = new org.jsecurity.io.SerializationException("", (java.lang.Throwable)var6);
    java.lang.Throwable[] var8 = var6.getSuppressed();
    java.util.Set var9 = org.jsecurity.util.CollectionUtils.asSet((java.lang.Object[])var8);
    var0.setStringPermissions(var9);
    java.util.Set var11 = var0.getRoles();
    org.jsecurity.authz.SimpleAuthorizationInfo var12 = new org.jsecurity.authz.SimpleAuthorizationInfo();
    var12.addRole("a2b823b1e72eae2b727289df8a00a89df8a0bab6ad8a89c4c5c7a9b62a270000");
    org.jsecurity.session.UnknownSessionException var19 = new org.jsecurity.session.UnknownSessionException("dd\uFFFD", (java.io.Serializable)100.0f);
    org.jsecurity.subject.SubjectException var20 = new org.jsecurity.subject.SubjectException("dd\uFFFD", (java.lang.Throwable)var19);
    org.jsecurity.io.SerializationException var21 = new org.jsecurity.io.SerializationException("", (java.lang.Throwable)var20);
    java.lang.Throwable[] var22 = var20.getSuppressed();
    java.util.Set var23 = org.jsecurity.util.CollectionUtils.asSet((java.lang.Object[])var22);
    var12.addRoles((java.util.Collection)var23);
    var0.setRoles(var23);
    org.jsecurity.authz.SimpleAuthorizationInfo var26 = new org.jsecurity.authz.SimpleAuthorizationInfo();
    org.jsecurity.session.UnknownSessionException var31 = new org.jsecurity.session.UnknownSessionException("dd\uFFFD", (java.io.Serializable)100.0f);
    org.jsecurity.subject.SubjectException var32 = new org.jsecurity.subject.SubjectException("dd\uFFFD", (java.lang.Throwable)var31);
    org.jsecurity.io.SerializationException var33 = new org.jsecurity.io.SerializationException("", (java.lang.Throwable)var32);
    java.lang.Throwable[] var34 = var32.getSuppressed();
    java.util.Set var35 = org.jsecurity.util.CollectionUtils.asSet((java.lang.Object[])var34);
    var26.setStringPermissions(var35);
    java.util.Set var37 = var26.getRoles();
    org.jsecurity.authz.SimpleAuthorizationInfo var38 = new org.jsecurity.authz.SimpleAuthorizationInfo();
    var38.addRole("a2b823b1e72eae2b727289df8a00a89df8a0bab6ad8a89c4c5c7a9b62a270000");
    org.jsecurity.session.UnknownSessionException var45 = new org.jsecurity.session.UnknownSessionException("dd\uFFFD", (java.io.Serializable)100.0f);
    org.jsecurity.subject.SubjectException var46 = new org.jsecurity.subject.SubjectException("dd\uFFFD", (java.lang.Throwable)var45);
    org.jsecurity.io.SerializationException var47 = new org.jsecurity.io.SerializationException("", (java.lang.Throwable)var46);
    java.lang.Throwable[] var48 = var46.getSuppressed();
    java.util.Set var49 = org.jsecurity.util.CollectionUtils.asSet((java.lang.Object[])var48);
    var38.addRoles((java.util.Collection)var49);
    var26.setRoles(var49);
    var0.setRoles(var49);
    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      var0.addStringPermission("6464ff");
      fail("Expected exception of type java.lang.UnsupportedOperationException");
    } catch (java.lang.UnsupportedOperationException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var8);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var9);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var11);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var22);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var23);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var34);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var35);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var37);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var48);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var49);

  }

  public void test362() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest0.test362");


    org.jsecurity.authc.ExcessiveAttemptsException var1 = new org.jsecurity.authc.ExcessiveAttemptsException("");
    org.jsecurity.crypto.hash.Sha256Hash var3 = new org.jsecurity.crypto.hash.Sha256Hash((java.lang.Object)"", (java.lang.Object)"\uFFFD\uFFFD\u0000");

  }

  public void test363() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest0.test363");


    java.lang.String var1 = org.jsecurity.codec.Base64.decodeToString("783ccd31-48a8-42dd-890f-df885a7baaff");
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var1 + "' != '" + "\uFFFD\uFFFD\uFFFDq\uFFFD\uFFFD\uFFFD\u01BC\uFFFDg]\uFFFD\uFFFD\u001Fu\uFFFD<\uFFFD\uFFFDi\uFFFD\uFFFD"+ "'", var1.equals("\uFFFD\uFFFD\uFFFDq\uFFFD\uFFFD\uFFFD\u01BC\uFFFDg]\uFFFD\uFFFD\u001Fu\uFFFD<\uFFFD\uFFFDi\uFFFD\uFFFD"));

  }

  public void test364() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest0.test364");


    org.jsecurity.authz.aop.GuestAnnotationHandler var0 = new org.jsecurity.authz.aop.GuestAnnotationHandler();
    java.lang.Class var1 = var0.getAnnotationClass();
    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      java.lang.Object var2 = org.jsecurity.util.ClassUtils.newInstance(var1);
      fail("Expected exception of type org.jsecurity.util.InstantiationException");
    } catch (org.jsecurity.util.InstantiationException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var1);

  }

  public void test365() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest0.test365");


    org.jsecurity.realm.text.PropertiesRealm var0 = new org.jsecurity.realm.text.PropertiesRealm();
    var0.setReloadIntervalSeconds(10);
    org.jsecurity.codec.CodecException var5 = new org.jsecurity.codec.CodecException("dd\uFFFD");
    org.jsecurity.authc.ConcurrentAccessException var6 = new org.jsecurity.authc.ConcurrentAccessException("org.jsecurity.authz.UnauthorizedException: org.jsecurity.session.ExpiredSessionException: ", (java.lang.Throwable)var5);
    org.jsecurity.subject.SimplePrincipalCollection var8 = new org.jsecurity.subject.SimplePrincipalCollection((java.lang.Object)var5, "");
    java.io.InputStream var10 = org.jsecurity.util.ClassUtils.getResourceAsStream("");
    java.lang.Object[] var11 = new java.lang.Object[] { var10};
    java.util.List var12 = org.jsecurity.util.CollectionUtils.asList(var11);
    org.jsecurity.authc.pam.ModularRealmAuthenticator var13 = new org.jsecurity.authc.pam.ModularRealmAuthenticator(var12);
    var8.addAll((java.util.Collection)var12, "\u0000\u0000");
    org.jsecurity.authz.SimpleRole var16 = new org.jsecurity.authz.SimpleRole();
    org.jsecurity.authz.permission.WildcardPermission var19 = new org.jsecurity.authz.permission.WildcardPermission("hi!", false);
    boolean var20 = var16.isPermitted((org.jsecurity.authz.Permission)var19);
    java.io.InputStream var22 = org.jsecurity.util.ClassUtils.getResourceAsStream("");
    java.lang.Object[] var23 = new java.lang.Object[] { var22};
    java.util.List var24 = org.jsecurity.util.CollectionUtils.asList(var23);
    var16.addAll((java.util.Collection)var24);
    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      var0.checkPermissions((org.jsecurity.subject.PrincipalCollection)var8, (java.util.Collection)var24);
      fail("Expected exception of type java.util.NoSuchElementException");
    } catch (java.util.NoSuchElementException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var10);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var11);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var12);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var20 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var22);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var23);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var24);

  }

  public void test366() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest0.test366");


    org.jsecurity.codec.CodecException var2 = new org.jsecurity.codec.CodecException("dd\uFFFD");
    org.jsecurity.authc.ConcurrentAccessException var3 = new org.jsecurity.authc.ConcurrentAccessException("org.jsecurity.authz.UnauthorizedException: org.jsecurity.session.ExpiredSessionException: ", (java.lang.Throwable)var2);
    org.jsecurity.subject.SimplePrincipalCollection var5 = new org.jsecurity.subject.SimplePrincipalCollection((java.lang.Object)var2, "");
    org.jsecurity.authc.pam.FirstSuccessfulAuthenticationStrategy var6 = new org.jsecurity.authc.pam.FirstSuccessfulAuthenticationStrategy();
    org.jsecurity.authz.UnauthorizedException var8 = new org.jsecurity.authz.UnauthorizedException("org.jsecurity.config.ConfigurationException: dd\uFFFD");
    java.lang.Throwable[] var9 = var8.getSuppressed();
    java.util.List var10 = org.jsecurity.util.CollectionUtils.asList((java.lang.Object[])var9);
    org.jsecurity.authc.UsernamePasswordToken var11 = new org.jsecurity.authc.UsernamePasswordToken();
    java.lang.String var12 = var11.getUsername();
    java.net.InetAddress var13 = var11.getInetAddress();
    org.jsecurity.authc.AuthenticationInfo var14 = var6.beforeAllAttempts((java.util.Collection)var10, (org.jsecurity.authc.AuthenticationToken)var11);
    org.jsecurity.session.UnknownSessionException var19 = new org.jsecurity.session.UnknownSessionException("dd\uFFFD", (java.io.Serializable)100.0f);
    org.jsecurity.subject.SubjectException var20 = new org.jsecurity.subject.SubjectException("dd\uFFFD", (java.lang.Throwable)var19);
    org.jsecurity.io.SerializationException var21 = new org.jsecurity.io.SerializationException("", (java.lang.Throwable)var20);
    java.lang.Throwable[] var22 = var20.getSuppressed();
    java.util.Set var23 = org.jsecurity.util.CollectionUtils.asSet((java.lang.Object[])var22);
    org.jsecurity.authc.SimpleAccount var24 = new org.jsecurity.authc.SimpleAccount((org.jsecurity.subject.PrincipalCollection)var5, (java.lang.Object)var10, var23);
    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      org.jsecurity.subject.SimplePrincipalCollection var26 = new org.jsecurity.subject.SimplePrincipalCollection((java.util.Collection)var23, "\uFFFD\uFFFD\uFFFDq\uFFFD\uFFFD\uFFFD\u01BC\uFFFDg]\uFFFD\uFFFD\u001Fu\uFFFD<\uFFFD\uFFFDi\uFFFD\uFFFD");
      fail("Expected exception of type java.lang.IllegalArgumentException");
    } catch (java.lang.IllegalArgumentException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var9);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var10);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var12);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var13);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var14);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var22);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var23);

  }

  public void test367() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest0.test367");


    char[] var2 = new char[] { };
    org.jsecurity.authc.UsernamePasswordToken var4 = new org.jsecurity.authc.UsernamePasswordToken("hi!", var2, true);
    org.jsecurity.authc.UsernamePasswordToken var5 = new org.jsecurity.authc.UsernamePasswordToken("\u0000\u0000", var2);
    java.lang.Object var6 = var5.getPrincipal();
    java.lang.String var7 = var5.toString();
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var2);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var6 + "' != '" + "\u0000\u0000"+ "'", var6.equals("\u0000\u0000"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var7 + "' != '" + "org.jsecurity.authc.UsernamePasswordToken - \u0000\u0000, rememberMe=false"+ "'", var7.equals("org.jsecurity.authc.UsernamePasswordToken - \u0000\u0000, rememberMe=false"));

  }

  public void test368() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest0.test368");


    org.jsecurity.session.UnknownSessionException var5 = new org.jsecurity.session.UnknownSessionException("dd\uFFFD", (java.io.Serializable)100.0f);
    org.jsecurity.subject.SubjectException var6 = new org.jsecurity.subject.SubjectException("dd\uFFFD", (java.lang.Throwable)var5);
    org.jsecurity.authc.pam.UnsupportedTokenException var7 = new org.jsecurity.authc.pam.UnsupportedTokenException("dd\uFFFD", (java.lang.Throwable)var5);
    org.jsecurity.session.StoppedSessionException var8 = new org.jsecurity.session.StoppedSessionException("org.jsecurity.config.ConfigurationException: dd\uFFFD", (java.lang.Throwable)var7);
    org.jsecurity.authc.credential.Md5CredentialsMatcher var9 = new org.jsecurity.authc.credential.Md5CredentialsMatcher();
    boolean var10 = var9.isHashSalted();
    boolean var11 = var9.isStoredCredentialsHexEncoded();
    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      org.jsecurity.crypto.hash.Md5Hash var13 = new org.jsecurity.crypto.hash.Md5Hash((java.lang.Object)"org.jsecurity.config.ConfigurationException: dd\uFFFD", (java.lang.Object)var9, (-1));
      fail("Expected exception of type org.jsecurity.codec.CodecException");
    } catch (org.jsecurity.codec.CodecException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var10 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var11 == true);

  }

  public void test369() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest0.test369");


    org.jsecurity.crypto.hash.Md2Hash var1 = org.jsecurity.crypto.hash.Md2Hash.fromBase64String("a2b823b1e72eae2b727289df8a00a89df8a0bab6ad8a89c4c5c7a9b62a270000");
    org.jsecurity.authc.credential.Md2CredentialsMatcher var2 = new org.jsecurity.authc.credential.Md2CredentialsMatcher();
    org.jsecurity.authz.SimpleAuthorizingAccount var4 = new org.jsecurity.authz.SimpleAuthorizingAccount((java.lang.Object)"a2b823b1e72eae2b727289df8a00a89df8a0bab6ad8a89c4c5c7a9b62a270000", (java.lang.Object)var2, "");
    org.jsecurity.authz.SimpleAuthorizationInfo var5 = new org.jsecurity.authz.SimpleAuthorizationInfo();
    java.util.Set var6 = var5.getStringPermissions();
    org.jsecurity.authz.SimpleAuthorizationInfo var8 = new org.jsecurity.authz.SimpleAuthorizationInfo();
    org.jsecurity.session.UnknownSessionException var13 = new org.jsecurity.session.UnknownSessionException("dd\uFFFD", (java.io.Serializable)100.0f);
    org.jsecurity.subject.SubjectException var14 = new org.jsecurity.subject.SubjectException("dd\uFFFD", (java.lang.Throwable)var13);
    org.jsecurity.io.SerializationException var15 = new org.jsecurity.io.SerializationException("", (java.lang.Throwable)var14);
    java.lang.Throwable[] var16 = var14.getSuppressed();
    java.util.Set var17 = org.jsecurity.util.CollectionUtils.asSet((java.lang.Object[])var16);
    var8.setStringPermissions(var17);
    java.util.Set var19 = var8.getRoles();
    org.jsecurity.authz.SimpleAuthorizationInfo var20 = new org.jsecurity.authz.SimpleAuthorizationInfo();
    var20.addRole("a2b823b1e72eae2b727289df8a00a89df8a0bab6ad8a89c4c5c7a9b62a270000");
    org.jsecurity.session.UnknownSessionException var27 = new org.jsecurity.session.UnknownSessionException("dd\uFFFD", (java.io.Serializable)100.0f);
    org.jsecurity.subject.SubjectException var28 = new org.jsecurity.subject.SubjectException("dd\uFFFD", (java.lang.Throwable)var27);
    org.jsecurity.io.SerializationException var29 = new org.jsecurity.io.SerializationException("", (java.lang.Throwable)var28);
    java.lang.Throwable[] var30 = var28.getSuppressed();
    java.util.Set var31 = org.jsecurity.util.CollectionUtils.asSet((java.lang.Object[])var30);
    var20.addRoles((java.util.Collection)var31);
    var8.setRoles(var31);
    org.jsecurity.authz.SimpleRole var34 = new org.jsecurity.authz.SimpleRole("org.jsecurity.authz.UnauthorizedException: org.jsecurity.session.ExpiredSessionException: ", var31);
    var5.addStringPermissions((java.util.Collection)var31);
    boolean var36 = var4.isPermittedAll((java.util.Collection)var31);
    boolean var37 = var4.isCredentialsExpired();
    org.jsecurity.codec.CodecException var40 = new org.jsecurity.codec.CodecException("dd\uFFFD");
    org.jsecurity.authc.ConcurrentAccessException var41 = new org.jsecurity.authc.ConcurrentAccessException("org.jsecurity.authz.UnauthorizedException: org.jsecurity.session.ExpiredSessionException: ", (java.lang.Throwable)var40);
    org.jsecurity.subject.SimplePrincipalCollection var43 = new org.jsecurity.subject.SimplePrincipalCollection((java.lang.Object)var40, "");
    boolean var44 = var43.isEmpty();
    java.util.List var45 = var43.asList();
    org.jsecurity.authc.pam.ModularRealmAuthenticator var46 = new org.jsecurity.authc.pam.ModularRealmAuthenticator(var45);
    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      var4.checkPermissions((java.util.Collection)var45);
      fail("Expected exception of type java.lang.ClassCastException");
    } catch (java.lang.ClassCastException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var1);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var6);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var16);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var17);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var19);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var30);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var31);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var36 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var37 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var44 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var45);

  }

  public void test370() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest0.test370");


    org.jsecurity.crypto.BlowfishCipher var0 = new org.jsecurity.crypto.BlowfishCipher();
    byte[] var4 = new byte[] { (byte)100, (byte)100, (byte)(-1)};
    java.lang.String var5 = org.jsecurity.codec.CodecSupport.toString(var4);
    byte[] var7 = org.jsecurity.codec.Base64.decode("hi!");
    byte[] var8 = var0.encrypt(var4, var7);
    byte[] var10 = org.jsecurity.codec.CodecSupport.toBytes("org.jsecurity.config.ConfigurationException: dd\uFFFD");
    byte[] var12 = org.jsecurity.codec.Hex.decode("");
    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      byte[] var13 = var0.encrypt(var10, var12);
      fail("Expected exception of type java.lang.IllegalArgumentException");
    } catch (java.lang.IllegalArgumentException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var4);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var5 + "' != '" + "dd\uFFFD"+ "'", var5.equals("dd\uFFFD"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var7);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var8);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var10);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var12);

  }

  public void test371() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest0.test371");


    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      org.jsecurity.crypto.hash.Sha512Hash var1 = org.jsecurity.crypto.hash.Sha512Hash.fromHexString("7edc3e5f-37f7-4a22-9779-4609545bccd8");
      fail("Expected exception of type java.lang.IllegalArgumentException");
    } catch (java.lang.IllegalArgumentException e) {
      // Expected exception.
    }

  }

  public void test372() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest0.test372");


    org.jsecurity.realm.text.TextConfigurationRealm var0 = new org.jsecurity.realm.text.TextConfigurationRealm();
    org.jsecurity.realm.text.TextConfigurationRealm var1 = new org.jsecurity.realm.text.TextConfigurationRealm();
    java.io.InputStream var3 = org.jsecurity.util.ClassUtils.getResourceAsStream("");
    java.lang.Object[] var4 = new java.lang.Object[] { var3};
    java.util.List var5 = org.jsecurity.util.CollectionUtils.asList(var4);
    org.jsecurity.authc.pam.ModularRealmAuthenticator var6 = new org.jsecurity.authc.pam.ModularRealmAuthenticator(var5);
    org.jsecurity.subject.SimplePrincipalCollection var8 = new org.jsecurity.subject.SimplePrincipalCollection((java.util.Collection)var5, "org.jsecurity.authz.UnauthorizedException: org.jsecurity.session.ExpiredSessionException: ");
    org.jsecurity.session.UnknownSessionException var13 = new org.jsecurity.session.UnknownSessionException("dd\uFFFD", (java.io.Serializable)100.0f);
    org.jsecurity.session.SessionException var15 = new org.jsecurity.session.SessionException("dd\uFFFD", (java.lang.Throwable)var13, (java.io.Serializable)0);
    org.jsecurity.session.SessionException var16 = new org.jsecurity.session.SessionException("dd\uFFFD", (java.lang.Throwable)var13);
    var8.add((java.lang.Object)var16, "org.jsecurity.config.ConfigurationException: dd\uFFFD");
    var1.onLogout((org.jsecurity.subject.PrincipalCollection)var8);
    java.util.Collection var21 = var8.fromRealm("\u0000\u0000\u0000");
    var0.onLogout((org.jsecurity.subject.PrincipalCollection)var8);
    java.util.Set var23 = var8.asSet();
    org.jsecurity.authz.ModularRealmAuthorizer var24 = new org.jsecurity.authz.ModularRealmAuthorizer((java.util.Collection)var23);
    org.jsecurity.authz.SimpleAuthorizationInfo var25 = new org.jsecurity.authz.SimpleAuthorizationInfo();
    var25.addRole("a2b823b1e72eae2b727289df8a00a89df8a0bab6ad8a89c4c5c7a9b62a270000");
    org.jsecurity.authz.SimpleAuthorizationInfo var28 = new org.jsecurity.authz.SimpleAuthorizationInfo();
    var28.addRole("a2b823b1e72eae2b727289df8a00a89df8a0bab6ad8a89c4c5c7a9b62a270000");
    org.jsecurity.session.UnknownSessionException var35 = new org.jsecurity.session.UnknownSessionException("dd\uFFFD", (java.io.Serializable)100.0f);
    org.jsecurity.subject.SubjectException var36 = new org.jsecurity.subject.SubjectException("dd\uFFFD", (java.lang.Throwable)var35);
    org.jsecurity.io.SerializationException var37 = new org.jsecurity.io.SerializationException("", (java.lang.Throwable)var36);
    java.lang.Throwable[] var38 = var36.getSuppressed();
    java.util.Set var39 = org.jsecurity.util.CollectionUtils.asSet((java.lang.Object[])var38);
    var28.addRoles((java.util.Collection)var39);
    var25.setObjectPermissions(var39);
    java.io.InputStream var43 = org.jsecurity.util.ClassUtils.getResourceAsStream("");
    java.lang.Object[] var44 = new java.lang.Object[] { var43};
    java.util.List var45 = org.jsecurity.util.CollectionUtils.asList(var44);
    org.jsecurity.authc.pam.ModularRealmAuthenticator var46 = new org.jsecurity.authc.pam.ModularRealmAuthenticator(var45);
    org.jsecurity.subject.SimplePrincipalCollection var48 = new org.jsecurity.subject.SimplePrincipalCollection((java.util.Collection)var45, "org.jsecurity.authz.UnauthorizedException: org.jsecurity.session.ExpiredSessionException: ");
    java.util.Set var49 = var48.getRealmNames();
    java.io.InputStream var51 = org.jsecurity.util.ClassUtils.getResourceAsStream("");
    java.lang.Object[] var52 = new java.lang.Object[] { var51};
    java.util.List var53 = org.jsecurity.util.CollectionUtils.asList(var52);
    org.jsecurity.authc.pam.ModularRealmAuthenticator var54 = new org.jsecurity.authc.pam.ModularRealmAuthenticator(var53);
    org.jsecurity.subject.SimplePrincipalCollection var56 = new org.jsecurity.subject.SimplePrincipalCollection((java.util.Collection)var53, "org.jsecurity.authz.UnauthorizedException: org.jsecurity.session.ExpiredSessionException: ");
    org.jsecurity.session.UnknownSessionException var61 = new org.jsecurity.session.UnknownSessionException("dd\uFFFD", (java.io.Serializable)100.0f);
    org.jsecurity.session.SessionException var63 = new org.jsecurity.session.SessionException("dd\uFFFD", (java.lang.Throwable)var61, (java.io.Serializable)0);
    org.jsecurity.session.SessionException var64 = new org.jsecurity.session.SessionException("dd\uFFFD", (java.lang.Throwable)var61);
    var56.add((java.lang.Object)var64, "org.jsecurity.config.ConfigurationException: dd\uFFFD");
    java.util.Set var67 = var56.asSet();
    var48.addAll((java.util.Collection)var67, "6464ff");
    var25.setStringPermissions(var67);
    org.jsecurity.subject.SimplePrincipalCollection var72 = new org.jsecurity.subject.SimplePrincipalCollection((java.util.Collection)var67, "\u0000\u0000");
    java.lang.String[] var77 = org.jsecurity.util.StringUtils.split("org.jsecurity.config.ConfigurationException: dd\uFFFD", '4', '4', '4');
    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      boolean[] var78 = var24.isPermitted((org.jsecurity.subject.PrincipalCollection)var72, var77);
      fail("Expected exception of type java.lang.ClassCastException");
    } catch (java.lang.ClassCastException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var3);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var4);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var5);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var21);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var23);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var38);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var39);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var43);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var44);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var45);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var49);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var51);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var52);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var53);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var67);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var77);

  }

  public void test373() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest0.test373");


    org.jsecurity.codec.CodecException var1 = new org.jsecurity.codec.CodecException("org.jsecurity.realm.SimpleAccountRealm-55-authorization");

  }

  public void test374() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest0.test374");


    java.io.InputStream var1 = org.jsecurity.util.ClassUtils.getResourceAsStream("");
    java.lang.Object[] var2 = new java.lang.Object[] { var1};
    java.util.List var3 = org.jsecurity.util.CollectionUtils.asList(var2);
    org.jsecurity.authc.pam.ModularRealmAuthenticator var4 = new org.jsecurity.authc.pam.ModularRealmAuthenticator(var3);
    org.jsecurity.authc.pam.AllSuccessfulModularAuthenticationStrategy var5 = new org.jsecurity.authc.pam.AllSuccessfulModularAuthenticationStrategy();
    var4.setModularAuthenticationStrategy((org.jsecurity.authc.pam.ModularAuthenticationStrategy)var5);
    org.jsecurity.authz.SimpleAuthorizationInfo var7 = new org.jsecurity.authz.SimpleAuthorizationInfo();
    var7.addStringPermission("hi!");
    java.io.InputStream var11 = org.jsecurity.util.ClassUtils.getResourceAsStream("");
    java.lang.Object[] var12 = new java.lang.Object[] { var11};
    java.util.List var13 = org.jsecurity.util.CollectionUtils.asList(var12);
    var7.addRoles((java.util.Collection)var13);
    var4.setAuthenticationListeners((java.util.Collection)var13);
    org.jsecurity.mgt.DefaultSecurityManager var16 = new org.jsecurity.mgt.DefaultSecurityManager();
    org.jsecurity.authc.pam.AllSuccessfulModularAuthenticationStrategy var17 = new org.jsecurity.authc.pam.AllSuccessfulModularAuthenticationStrategy();
    org.jsecurity.authc.pam.AllSuccessfulModularAuthenticationStrategy var18 = new org.jsecurity.authc.pam.AllSuccessfulModularAuthenticationStrategy();
    char[] var20 = new char[] { };
    org.jsecurity.authc.UsernamePasswordToken var22 = new org.jsecurity.authc.UsernamePasswordToken("hi!", var20, true);
    org.jsecurity.authc.SimpleAccount var23 = new org.jsecurity.authc.SimpleAccount();
    var23.setCredentialsExpired(false);
    boolean var26 = var23.isLocked();
    org.jsecurity.authc.AuthenticationInfo var27 = var18.afterAllAttempts((org.jsecurity.authc.AuthenticationToken)var22, (org.jsecurity.authc.AuthenticationInfo)var23);
    char[] var31 = new char[] { '4', '#'};
    org.jsecurity.authc.UsernamePasswordToken var32 = new org.jsecurity.authc.UsernamePasswordToken("\u0000\u0000", var31);
    org.jsecurity.authc.SimpleAccount var33 = new org.jsecurity.authc.SimpleAccount();
    var33.setCredentialsExpired(false);
    var33.setCredentialsExpired(false);
    boolean var38 = var33.isCredentialsExpired();
    org.jsecurity.authc.AuthenticationInfo var39 = var18.afterAllAttempts((org.jsecurity.authc.AuthenticationToken)var32, (org.jsecurity.authc.AuthenticationInfo)var33);
    org.jsecurity.authz.UnauthenticatedException var43 = new org.jsecurity.authz.UnauthenticatedException();
    org.jsecurity.config.UnresolveableReferenceException var44 = new org.jsecurity.config.UnresolveableReferenceException("", (java.lang.Throwable)var43);
    org.jsecurity.cache.CacheException var45 = new org.jsecurity.cache.CacheException("org.jsecurity.config.ConfigurationException: dd\uFFFD", (java.lang.Throwable)var43);
    org.jsecurity.authc.SimpleAuthenticationInfo var47 = new org.jsecurity.authc.SimpleAuthenticationInfo((java.lang.Object)"org.jsecurity.config.ConfigurationException: dd\uFFFD", (java.lang.Object)var45, "a2b823b1e72eae2b727289df8a00a89df8a0bab6ad8a89c4c5c7a9b62a270000");
    org.jsecurity.subject.PrincipalCollection var48 = var47.getPrincipals();
    org.jsecurity.authc.AuthenticationInfo var49 = var17.afterAllAttempts((org.jsecurity.authc.AuthenticationToken)var32, (org.jsecurity.authc.AuthenticationInfo)var47);
    var16.setModularAuthenticationStrategy((org.jsecurity.authc.pam.ModularAuthenticationStrategy)var17);
    org.jsecurity.subject.RememberMeManager var51 = var16.getRememberMeManager();
    org.jsecurity.authc.pam.ModularRealmAuthenticator var52 = new org.jsecurity.authc.pam.ModularRealmAuthenticator();
    var16.setAuthenticator((org.jsecurity.authc.Authenticator)var52);
    org.jsecurity.codec.CodecException var56 = new org.jsecurity.codec.CodecException("dd\uFFFD");
    org.jsecurity.authc.ConcurrentAccessException var57 = new org.jsecurity.authc.ConcurrentAccessException("org.jsecurity.authz.UnauthorizedException: org.jsecurity.session.ExpiredSessionException: ", (java.lang.Throwable)var56);
    org.jsecurity.subject.SimplePrincipalCollection var59 = new org.jsecurity.subject.SimplePrincipalCollection((java.lang.Object)var56, "");
    java.io.InputStream var61 = org.jsecurity.util.ClassUtils.getResourceAsStream("");
    java.lang.Object[] var62 = new java.lang.Object[] { var61};
    java.util.List var63 = org.jsecurity.util.CollectionUtils.asList(var62);
    org.jsecurity.authc.pam.ModularRealmAuthenticator var64 = new org.jsecurity.authc.pam.ModularRealmAuthenticator(var63);
    var59.addAll((java.util.Collection)var63, "\u0000\u0000");
    org.jsecurity.authc.pam.FirstSuccessfulAuthenticationStrategy var67 = new org.jsecurity.authc.pam.FirstSuccessfulAuthenticationStrategy();
    org.jsecurity.authz.UnauthorizedException var69 = new org.jsecurity.authz.UnauthorizedException("org.jsecurity.config.ConfigurationException: dd\uFFFD");
    java.lang.Throwable[] var70 = var69.getSuppressed();
    java.util.List var71 = org.jsecurity.util.CollectionUtils.asList((java.lang.Object[])var70);
    org.jsecurity.authc.UsernamePasswordToken var72 = new org.jsecurity.authc.UsernamePasswordToken();
    java.lang.String var73 = var72.getUsername();
    java.net.InetAddress var74 = var72.getInetAddress();
    org.jsecurity.authc.AuthenticationInfo var75 = var67.beforeAllAttempts((java.util.Collection)var71, (org.jsecurity.authc.AuthenticationToken)var72);
    var16.checkPermissions((org.jsecurity.subject.PrincipalCollection)var59, (java.util.Collection)var71);
    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      var4.onLogout((org.jsecurity.subject.PrincipalCollection)var59);
      fail("Expected exception of type java.lang.ClassCastException");
    } catch (java.lang.ClassCastException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var1);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var2);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var3);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var11);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var12);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var13);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var20);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var26 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var27);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var31);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var38 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var39);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var48);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var49);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var51);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var61);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var62);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var63);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var70);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var71);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var73);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var74);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var75);

  }

  public void test375() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest0.test375");


    org.jsecurity.mgt.DefaultSecurityManager var0 = new org.jsecurity.mgt.DefaultSecurityManager();
    java.io.InputStream var2 = org.jsecurity.util.ClassUtils.getResourceAsStream("");
    java.lang.Object[] var3 = new java.lang.Object[] { var2};
    java.util.List var4 = org.jsecurity.util.CollectionUtils.asList(var3);
    org.jsecurity.authc.pam.ModularRealmAuthenticator var5 = new org.jsecurity.authc.pam.ModularRealmAuthenticator(var4);
    org.jsecurity.authc.pam.AllSuccessfulModularAuthenticationStrategy var6 = new org.jsecurity.authc.pam.AllSuccessfulModularAuthenticationStrategy();
    var5.setModularAuthenticationStrategy((org.jsecurity.authc.pam.ModularAuthenticationStrategy)var6);
    org.jsecurity.authz.SimpleAuthorizationInfo var8 = new org.jsecurity.authz.SimpleAuthorizationInfo();
    var8.addStringPermission("hi!");
    java.io.InputStream var12 = org.jsecurity.util.ClassUtils.getResourceAsStream("");
    java.lang.Object[] var13 = new java.lang.Object[] { var12};
    java.util.List var14 = org.jsecurity.util.CollectionUtils.asList(var13);
    var8.addRoles((java.util.Collection)var14);
    var5.setAuthenticationListeners((java.util.Collection)var14);
    var0.setSessionListeners((java.util.Collection)var14);
    org.jsecurity.realm.text.TextConfigurationRealm var18 = new org.jsecurity.realm.text.TextConfigurationRealm();
    java.io.InputStream var20 = org.jsecurity.util.ClassUtils.getResourceAsStream("");
    java.lang.Object[] var21 = new java.lang.Object[] { var20};
    java.util.List var22 = org.jsecurity.util.CollectionUtils.asList(var21);
    org.jsecurity.authc.pam.ModularRealmAuthenticator var23 = new org.jsecurity.authc.pam.ModularRealmAuthenticator(var22);
    org.jsecurity.subject.SimplePrincipalCollection var25 = new org.jsecurity.subject.SimplePrincipalCollection((java.util.Collection)var22, "org.jsecurity.authz.UnauthorizedException: org.jsecurity.session.ExpiredSessionException: ");
    org.jsecurity.session.UnknownSessionException var30 = new org.jsecurity.session.UnknownSessionException("dd\uFFFD", (java.io.Serializable)100.0f);
    org.jsecurity.session.SessionException var32 = new org.jsecurity.session.SessionException("dd\uFFFD", (java.lang.Throwable)var30, (java.io.Serializable)0);
    org.jsecurity.session.SessionException var33 = new org.jsecurity.session.SessionException("dd\uFFFD", (java.lang.Throwable)var30);
    var25.add((java.lang.Object)var33, "org.jsecurity.config.ConfigurationException: dd\uFFFD");
    var18.onLogout((org.jsecurity.subject.PrincipalCollection)var25);
    org.jsecurity.authc.pam.FirstSuccessfulAuthenticationStrategy var37 = new org.jsecurity.authc.pam.FirstSuccessfulAuthenticationStrategy();
    org.jsecurity.authz.UnauthorizedException var39 = new org.jsecurity.authz.UnauthorizedException("org.jsecurity.config.ConfigurationException: dd\uFFFD");
    java.lang.Throwable[] var40 = var39.getSuppressed();
    java.util.List var41 = org.jsecurity.util.CollectionUtils.asList((java.lang.Object[])var40);
    org.jsecurity.authc.UsernamePasswordToken var42 = new org.jsecurity.authc.UsernamePasswordToken();
    java.lang.String var43 = var42.getUsername();
    java.net.InetAddress var44 = var42.getInetAddress();
    org.jsecurity.authc.AuthenticationInfo var45 = var37.beforeAllAttempts((java.util.Collection)var41, (org.jsecurity.authc.AuthenticationToken)var42);
    boolean[] var46 = var0.hasRoles((org.jsecurity.subject.PrincipalCollection)var25, var41);
    org.jsecurity.codec.CodecException var49 = new org.jsecurity.codec.CodecException("dd\uFFFD");
    org.jsecurity.authc.ConcurrentAccessException var50 = new org.jsecurity.authc.ConcurrentAccessException("org.jsecurity.authz.UnauthorizedException: org.jsecurity.session.ExpiredSessionException: ", (java.lang.Throwable)var49);
    org.jsecurity.subject.SimplePrincipalCollection var52 = new org.jsecurity.subject.SimplePrincipalCollection((java.lang.Object)var49, "");
    java.io.InputStream var54 = org.jsecurity.util.ClassUtils.getResourceAsStream("");
    java.lang.Object[] var55 = new java.lang.Object[] { var54};
    java.util.List var56 = org.jsecurity.util.CollectionUtils.asList(var55);
    org.jsecurity.authc.pam.ModularRealmAuthenticator var57 = new org.jsecurity.authc.pam.ModularRealmAuthenticator(var56);
    var52.addAll((java.util.Collection)var56, "\u0000\u0000");
    var0.setSessionListeners((java.util.Collection)var56);
    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      var0.setRememberMeCipherKeyHex("org.jsecurity.authz.UnauthorizedException: org.jsecurity.session.ExpiredSessionException: ");
      fail("Expected exception of type java.lang.IllegalStateException");
    } catch (java.lang.IllegalStateException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var2);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var3);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var4);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var12);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var13);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var14);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var20);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var21);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var22);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var40);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var41);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var43);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var44);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var45);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var46);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var54);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var55);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var56);

  }

  public void test376() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest0.test376");


    org.jsecurity.authc.ConcurrentAccessException var1 = new org.jsecurity.authc.ConcurrentAccessException("\uFFFD\uFFFD#\uFFFD\uFFFD.\uFFFD+rr\uFFFD\u07CA\u0000\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\u01E9\uFFFD*'\u0000\u0000");

  }

  public void test377() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest0.test377");


    org.jsecurity.io.ResourceException var3 = new org.jsecurity.io.ResourceException("hi!");
    org.jsecurity.codec.CodecException var4 = new org.jsecurity.codec.CodecException((java.lang.Throwable)var3);
    org.jsecurity.JSecurityException var5 = new org.jsecurity.JSecurityException("a2b823b1e72eae2b727289df8a00a89df8a0bab6ad8a89c4c5c7a9b62a270000", (java.lang.Throwable)var3);
    org.jsecurity.session.UnknownSessionException var6 = new org.jsecurity.session.UnknownSessionException((java.lang.Throwable)var5);
    org.jsecurity.authc.IncorrectCredentialsException var7 = new org.jsecurity.authc.IncorrectCredentialsException((java.lang.Throwable)var5);
    org.jsecurity.authz.AuthorizationException var8 = new org.jsecurity.authz.AuthorizationException("\u0000\u0000\u0000", (java.lang.Throwable)var5);
    org.jsecurity.authc.LockedAccountException var9 = new org.jsecurity.authc.LockedAccountException((java.lang.Throwable)var5);
    org.jsecurity.cache.CacheException var10 = new org.jsecurity.cache.CacheException((java.lang.Throwable)var9);

  }

  public void test378() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest0.test378");


    org.jsecurity.authz.SimpleAuthorizingAccount var0 = new org.jsecurity.authz.SimpleAuthorizingAccount();
    org.jsecurity.authz.permission.WildcardPermission var3 = new org.jsecurity.authz.permission.WildcardPermission("hi!", false);
    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      var0.checkPermission((org.jsecurity.authz.Permission)var3);
      fail("Expected exception of type org.jsecurity.authz.UnauthorizedException");
    } catch (org.jsecurity.authz.UnauthorizedException e) {
      // Expected exception.
    }

  }

  public void test379() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest0.test379");


    org.jsecurity.mgt.DefaultSecurityManager var0 = new org.jsecurity.mgt.DefaultSecurityManager();
    org.jsecurity.authc.pam.AllSuccessfulModularAuthenticationStrategy var1 = new org.jsecurity.authc.pam.AllSuccessfulModularAuthenticationStrategy();
    org.jsecurity.authc.pam.AllSuccessfulModularAuthenticationStrategy var2 = new org.jsecurity.authc.pam.AllSuccessfulModularAuthenticationStrategy();
    char[] var4 = new char[] { };
    org.jsecurity.authc.UsernamePasswordToken var6 = new org.jsecurity.authc.UsernamePasswordToken("hi!", var4, true);
    org.jsecurity.authc.SimpleAccount var7 = new org.jsecurity.authc.SimpleAccount();
    var7.setCredentialsExpired(false);
    boolean var10 = var7.isLocked();
    org.jsecurity.authc.AuthenticationInfo var11 = var2.afterAllAttempts((org.jsecurity.authc.AuthenticationToken)var6, (org.jsecurity.authc.AuthenticationInfo)var7);
    char[] var15 = new char[] { '4', '#'};
    org.jsecurity.authc.UsernamePasswordToken var16 = new org.jsecurity.authc.UsernamePasswordToken("\u0000\u0000", var15);
    org.jsecurity.authc.SimpleAccount var17 = new org.jsecurity.authc.SimpleAccount();
    var17.setCredentialsExpired(false);
    var17.setCredentialsExpired(false);
    boolean var22 = var17.isCredentialsExpired();
    org.jsecurity.authc.AuthenticationInfo var23 = var2.afterAllAttempts((org.jsecurity.authc.AuthenticationToken)var16, (org.jsecurity.authc.AuthenticationInfo)var17);
    org.jsecurity.authz.UnauthenticatedException var27 = new org.jsecurity.authz.UnauthenticatedException();
    org.jsecurity.config.UnresolveableReferenceException var28 = new org.jsecurity.config.UnresolveableReferenceException("", (java.lang.Throwable)var27);
    org.jsecurity.cache.CacheException var29 = new org.jsecurity.cache.CacheException("org.jsecurity.config.ConfigurationException: dd\uFFFD", (java.lang.Throwable)var27);
    org.jsecurity.authc.SimpleAuthenticationInfo var31 = new org.jsecurity.authc.SimpleAuthenticationInfo((java.lang.Object)"org.jsecurity.config.ConfigurationException: dd\uFFFD", (java.lang.Object)var29, "a2b823b1e72eae2b727289df8a00a89df8a0bab6ad8a89c4c5c7a9b62a270000");
    org.jsecurity.subject.PrincipalCollection var32 = var31.getPrincipals();
    org.jsecurity.authc.AuthenticationInfo var33 = var1.afterAllAttempts((org.jsecurity.authc.AuthenticationToken)var16, (org.jsecurity.authc.AuthenticationInfo)var31);
    var0.setModularAuthenticationStrategy((org.jsecurity.authc.pam.ModularAuthenticationStrategy)var1);
    org.jsecurity.session.mgt.SessionManager var35 = var0.getSessionManager();
    org.jsecurity.authz.SimpleAuthorizationInfo var36 = new org.jsecurity.authz.SimpleAuthorizationInfo();
    var36.addRole("a2b823b1e72eae2b727289df8a00a89df8a0bab6ad8a89c4c5c7a9b62a270000");
    org.jsecurity.authz.SimpleAuthorizationInfo var39 = new org.jsecurity.authz.SimpleAuthorizationInfo();
    var39.addRole("a2b823b1e72eae2b727289df8a00a89df8a0bab6ad8a89c4c5c7a9b62a270000");
    org.jsecurity.session.UnknownSessionException var46 = new org.jsecurity.session.UnknownSessionException("dd\uFFFD", (java.io.Serializable)100.0f);
    org.jsecurity.subject.SubjectException var47 = new org.jsecurity.subject.SubjectException("dd\uFFFD", (java.lang.Throwable)var46);
    org.jsecurity.io.SerializationException var48 = new org.jsecurity.io.SerializationException("", (java.lang.Throwable)var47);
    java.lang.Throwable[] var49 = var47.getSuppressed();
    java.util.Set var50 = org.jsecurity.util.CollectionUtils.asSet((java.lang.Object[])var49);
    var39.addRoles((java.util.Collection)var50);
    var36.setObjectPermissions(var50);
    java.io.InputStream var54 = org.jsecurity.util.ClassUtils.getResourceAsStream("");
    java.lang.Object[] var55 = new java.lang.Object[] { var54};
    java.util.List var56 = org.jsecurity.util.CollectionUtils.asList(var55);
    org.jsecurity.authc.pam.ModularRealmAuthenticator var57 = new org.jsecurity.authc.pam.ModularRealmAuthenticator(var56);
    org.jsecurity.subject.SimplePrincipalCollection var59 = new org.jsecurity.subject.SimplePrincipalCollection((java.util.Collection)var56, "org.jsecurity.authz.UnauthorizedException: org.jsecurity.session.ExpiredSessionException: ");
    java.util.Set var60 = var59.getRealmNames();
    java.io.InputStream var62 = org.jsecurity.util.ClassUtils.getResourceAsStream("");
    java.lang.Object[] var63 = new java.lang.Object[] { var62};
    java.util.List var64 = org.jsecurity.util.CollectionUtils.asList(var63);
    org.jsecurity.authc.pam.ModularRealmAuthenticator var65 = new org.jsecurity.authc.pam.ModularRealmAuthenticator(var64);
    org.jsecurity.subject.SimplePrincipalCollection var67 = new org.jsecurity.subject.SimplePrincipalCollection((java.util.Collection)var64, "org.jsecurity.authz.UnauthorizedException: org.jsecurity.session.ExpiredSessionException: ");
    org.jsecurity.session.UnknownSessionException var72 = new org.jsecurity.session.UnknownSessionException("dd\uFFFD", (java.io.Serializable)100.0f);
    org.jsecurity.session.SessionException var74 = new org.jsecurity.session.SessionException("dd\uFFFD", (java.lang.Throwable)var72, (java.io.Serializable)0);
    org.jsecurity.session.SessionException var75 = new org.jsecurity.session.SessionException("dd\uFFFD", (java.lang.Throwable)var72);
    var67.add((java.lang.Object)var75, "org.jsecurity.config.ConfigurationException: dd\uFFFD");
    java.util.Set var78 = var67.asSet();
    var59.addAll((java.util.Collection)var78, "6464ff");
    var36.setStringPermissions(var78);
    org.jsecurity.subject.SimplePrincipalCollection var83 = new org.jsecurity.subject.SimplePrincipalCollection((java.util.Collection)var78, "\u0000\u0000");
    var0.setSessionListeners((java.util.Collection)var78);
    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      var0.setRememberMeDecryptionCipherKeyHex("783ccd31-48a8-42dd-890f-df885a7baaff");
      fail("Expected exception of type java.lang.IllegalStateException");
    } catch (java.lang.IllegalStateException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var4);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var10 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var11);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var15);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var22 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var23);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var32);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var33);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var35);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var49);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var50);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var54);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var55);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var56);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var60);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var62);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var63);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var64);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var78);

  }

  public void test380() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest0.test380");


    java.lang.String var1 = org.jsecurity.util.StringUtils.clean("1f4da124-b55c-4be1-ae95-84c40eba1207");
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var1 + "' != '" + "1f4da124-b55c-4be1-ae95-84c40eba1207"+ "'", var1.equals("1f4da124-b55c-4be1-ae95-84c40eba1207"));

  }

  public void test381() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest0.test381");


    org.jsecurity.session.mgt.DefaultSessionManager var0 = new org.jsecurity.session.mgt.DefaultSessionManager();
    org.jsecurity.session.mgt.eis.MemorySessionDAO var1 = new org.jsecurity.session.mgt.eis.MemorySessionDAO();
    org.jsecurity.cache.Cache var2 = var1.getActiveSessionsCache();
    org.jsecurity.cache.CacheManager var3 = var1.getCacheManager();
    org.jsecurity.cache.HashtableCacheManager var4 = new org.jsecurity.cache.HashtableCacheManager();
    org.jsecurity.cache.Cache var6 = var4.getCache("\u0000\u0000");
    var1.setActiveSessionsCache(var6);
    java.io.InputStream var9 = org.jsecurity.util.ClassUtils.getResourceAsStream("");
    java.lang.Object[] var10 = new java.lang.Object[] { var9};
    java.util.List var11 = org.jsecurity.util.CollectionUtils.asList(var10);
    org.jsecurity.authc.pam.ModularRealmAuthenticator var12 = new org.jsecurity.authc.pam.ModularRealmAuthenticator(var11);
    org.jsecurity.authc.pam.AllSuccessfulModularAuthenticationStrategy var13 = new org.jsecurity.authc.pam.AllSuccessfulModularAuthenticationStrategy();
    var12.setModularAuthenticationStrategy((org.jsecurity.authc.pam.ModularAuthenticationStrategy)var13);
    org.jsecurity.authz.SimpleAuthorizationInfo var15 = new org.jsecurity.authz.SimpleAuthorizationInfo();
    var15.addStringPermission("hi!");
    java.io.InputStream var19 = org.jsecurity.util.ClassUtils.getResourceAsStream("");
    java.lang.Object[] var20 = new java.lang.Object[] { var19};
    java.util.List var21 = org.jsecurity.util.CollectionUtils.asList(var20);
    var15.addRoles((java.util.Collection)var21);
    var12.setAuthenticationListeners((java.util.Collection)var21);
    org.jsecurity.realm.activedirectory.ActiveDirectoryRealm var24 = new org.jsecurity.realm.activedirectory.ActiveDirectoryRealm();
    var24.setPrincipalSuffix("");
    var12.setRealm((org.jsecurity.realm.Realm)var24);
    org.jsecurity.cache.HashtableCacheManager var28 = new org.jsecurity.cache.HashtableCacheManager();
    org.jsecurity.cache.Cache var30 = var28.getCache("\u0000\u0000");
    var24.setAuthorizationCache(var30);
    var1.setActiveSessionsCache(var30);
    org.jsecurity.session.mgt.SimpleSession var33 = new org.jsecurity.session.mgt.SimpleSession();
    java.io.Serializable var34 = var1.create((org.jsecurity.session.Session)var33);
    var0.setSessionDAO((org.jsecurity.session.mgt.eis.SessionDAO)var1);
    org.jsecurity.authc.LockedAccountException var38 = new org.jsecurity.authc.LockedAccountException("5dd0c65d-1422-49c2-becb-9e8dca619ab3");
    org.jsecurity.session.InvalidSessionException var39 = new org.jsecurity.session.InvalidSessionException("hi!", (java.lang.Throwable)var38);
    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      var0.stop((java.io.Serializable)var39);
      fail("Expected exception of type org.jsecurity.session.UnknownSessionException");
    } catch (org.jsecurity.session.UnknownSessionException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var2);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var3);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var6);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var9);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var10);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var11);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var19);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var20);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var21);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var30);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var34 + "' != '" + "cee67b7c-1c07-4723-b054-69a23d11208b"+ "'", var34.equals("cee67b7c-1c07-4723-b054-69a23d11208b"));

  }

  public void test382() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest0.test382");


    org.jsecurity.authz.SimpleRole var0 = new org.jsecurity.authz.SimpleRole();
    org.jsecurity.authz.SimpleAuthorizationInfo var1 = new org.jsecurity.authz.SimpleAuthorizationInfo();
    var1.addRole("a2b823b1e72eae2b727289df8a00a89df8a0bab6ad8a89c4c5c7a9b62a270000");
    org.jsecurity.session.UnknownSessionException var8 = new org.jsecurity.session.UnknownSessionException("dd\uFFFD", (java.io.Serializable)100.0f);
    org.jsecurity.subject.SubjectException var9 = new org.jsecurity.subject.SubjectException("dd\uFFFD", (java.lang.Throwable)var8);
    org.jsecurity.io.SerializationException var10 = new org.jsecurity.io.SerializationException("", (java.lang.Throwable)var9);
    java.lang.Throwable[] var11 = var9.getSuppressed();
    java.util.Set var12 = org.jsecurity.util.CollectionUtils.asSet((java.lang.Object[])var11);
    var1.addRoles((java.util.Collection)var12);
    var0.addAll((java.util.Collection)var12);
    org.jsecurity.authz.SimpleRole var15 = new org.jsecurity.authz.SimpleRole();
    org.jsecurity.authz.SimpleAuthorizationInfo var16 = new org.jsecurity.authz.SimpleAuthorizationInfo();
    var16.addRole("a2b823b1e72eae2b727289df8a00a89df8a0bab6ad8a89c4c5c7a9b62a270000");
    org.jsecurity.session.UnknownSessionException var23 = new org.jsecurity.session.UnknownSessionException("dd\uFFFD", (java.io.Serializable)100.0f);
    org.jsecurity.subject.SubjectException var24 = new org.jsecurity.subject.SubjectException("dd\uFFFD", (java.lang.Throwable)var23);
    org.jsecurity.io.SerializationException var25 = new org.jsecurity.io.SerializationException("", (java.lang.Throwable)var24);
    java.lang.Throwable[] var26 = var24.getSuppressed();
    java.util.Set var27 = org.jsecurity.util.CollectionUtils.asSet((java.lang.Object[])var26);
    var16.addRoles((java.util.Collection)var27);
    var15.addAll((java.util.Collection)var27);
    java.lang.String var30 = var15.getName();
    org.jsecurity.authz.permission.WildcardPermission var33 = new org.jsecurity.authz.permission.WildcardPermission("hi!", false);
    var15.add((org.jsecurity.authz.Permission)var33);
    var0.add((org.jsecurity.authz.Permission)var33);
    org.jsecurity.authz.SimpleAuthorizationInfo var37 = new org.jsecurity.authz.SimpleAuthorizationInfo();
    org.jsecurity.session.UnknownSessionException var42 = new org.jsecurity.session.UnknownSessionException("dd\uFFFD", (java.io.Serializable)100.0f);
    org.jsecurity.subject.SubjectException var43 = new org.jsecurity.subject.SubjectException("dd\uFFFD", (java.lang.Throwable)var42);
    org.jsecurity.io.SerializationException var44 = new org.jsecurity.io.SerializationException("", (java.lang.Throwable)var43);
    java.lang.Throwable[] var45 = var43.getSuppressed();
    java.util.Set var46 = org.jsecurity.util.CollectionUtils.asSet((java.lang.Object[])var45);
    var37.setStringPermissions(var46);
    org.jsecurity.authz.SimpleRole var48 = new org.jsecurity.authz.SimpleRole("\u0000\u0000", var46);
    var0.setPermissions(var46);
    org.jsecurity.session.UnknownSessionException var54 = new org.jsecurity.session.UnknownSessionException("dd\uFFFD", (java.io.Serializable)100.0f);
    org.jsecurity.subject.SubjectException var55 = new org.jsecurity.subject.SubjectException("dd\uFFFD", (java.lang.Throwable)var54);
    org.jsecurity.io.SerializationException var56 = new org.jsecurity.io.SerializationException("", (java.lang.Throwable)var55);
    java.lang.Throwable[] var57 = var55.getSuppressed();
    java.util.List var58 = org.jsecurity.util.CollectionUtils.asList((java.lang.Object[])var57);
    org.jsecurity.authc.pam.ModularRealmAuthenticator var59 = new org.jsecurity.authc.pam.ModularRealmAuthenticator(var58);
    var0.addAll((java.util.Collection)var58);
    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      org.jsecurity.subject.SimplePrincipalCollection var62 = new org.jsecurity.subject.SimplePrincipalCollection((java.util.Collection)var58, "\u0000\u0000");
      fail("Expected exception of type java.lang.IllegalArgumentException");
    } catch (java.lang.IllegalArgumentException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var11);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var12);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var26);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var27);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var30);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var45);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var46);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var57);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var58);

  }

  public void test383() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest0.test383");


    org.jsecurity.mgt.DefaultSecurityManager var0 = new org.jsecurity.mgt.DefaultSecurityManager();
    java.io.InputStream var2 = org.jsecurity.util.ClassUtils.getResourceAsStream("");
    java.lang.Object[] var3 = new java.lang.Object[] { var2};
    java.util.List var4 = org.jsecurity.util.CollectionUtils.asList(var3);
    org.jsecurity.authc.pam.ModularRealmAuthenticator var5 = new org.jsecurity.authc.pam.ModularRealmAuthenticator(var4);
    org.jsecurity.authc.pam.AllSuccessfulModularAuthenticationStrategy var6 = new org.jsecurity.authc.pam.AllSuccessfulModularAuthenticationStrategy();
    var5.setModularAuthenticationStrategy((org.jsecurity.authc.pam.ModularAuthenticationStrategy)var6);
    org.jsecurity.authz.SimpleAuthorizationInfo var8 = new org.jsecurity.authz.SimpleAuthorizationInfo();
    var8.addStringPermission("hi!");
    java.io.InputStream var12 = org.jsecurity.util.ClassUtils.getResourceAsStream("");
    java.lang.Object[] var13 = new java.lang.Object[] { var12};
    java.util.List var14 = org.jsecurity.util.CollectionUtils.asList(var13);
    var8.addRoles((java.util.Collection)var14);
    var5.setAuthenticationListeners((java.util.Collection)var14);
    var0.setSessionListeners((java.util.Collection)var14);
    org.jsecurity.realm.text.TextConfigurationRealm var18 = new org.jsecurity.realm.text.TextConfigurationRealm();
    java.io.InputStream var20 = org.jsecurity.util.ClassUtils.getResourceAsStream("");
    java.lang.Object[] var21 = new java.lang.Object[] { var20};
    java.util.List var22 = org.jsecurity.util.CollectionUtils.asList(var21);
    org.jsecurity.authc.pam.ModularRealmAuthenticator var23 = new org.jsecurity.authc.pam.ModularRealmAuthenticator(var22);
    org.jsecurity.subject.SimplePrincipalCollection var25 = new org.jsecurity.subject.SimplePrincipalCollection((java.util.Collection)var22, "org.jsecurity.authz.UnauthorizedException: org.jsecurity.session.ExpiredSessionException: ");
    org.jsecurity.session.UnknownSessionException var30 = new org.jsecurity.session.UnknownSessionException("dd\uFFFD", (java.io.Serializable)100.0f);
    org.jsecurity.session.SessionException var32 = new org.jsecurity.session.SessionException("dd\uFFFD", (java.lang.Throwable)var30, (java.io.Serializable)0);
    org.jsecurity.session.SessionException var33 = new org.jsecurity.session.SessionException("dd\uFFFD", (java.lang.Throwable)var30);
    var25.add((java.lang.Object)var33, "org.jsecurity.config.ConfigurationException: dd\uFFFD");
    var18.onLogout((org.jsecurity.subject.PrincipalCollection)var25);
    org.jsecurity.authc.pam.FirstSuccessfulAuthenticationStrategy var37 = new org.jsecurity.authc.pam.FirstSuccessfulAuthenticationStrategy();
    org.jsecurity.authz.UnauthorizedException var39 = new org.jsecurity.authz.UnauthorizedException("org.jsecurity.config.ConfigurationException: dd\uFFFD");
    java.lang.Throwable[] var40 = var39.getSuppressed();
    java.util.List var41 = org.jsecurity.util.CollectionUtils.asList((java.lang.Object[])var40);
    org.jsecurity.authc.UsernamePasswordToken var42 = new org.jsecurity.authc.UsernamePasswordToken();
    java.lang.String var43 = var42.getUsername();
    java.net.InetAddress var44 = var42.getInetAddress();
    org.jsecurity.authc.AuthenticationInfo var45 = var37.beforeAllAttempts((java.util.Collection)var41, (org.jsecurity.authc.AuthenticationToken)var42);
    boolean[] var46 = var0.hasRoles((org.jsecurity.subject.PrincipalCollection)var25, var41);
    org.jsecurity.codec.CodecException var49 = new org.jsecurity.codec.CodecException("dd\uFFFD");
    org.jsecurity.authc.ConcurrentAccessException var50 = new org.jsecurity.authc.ConcurrentAccessException("org.jsecurity.authz.UnauthorizedException: org.jsecurity.session.ExpiredSessionException: ", (java.lang.Throwable)var49);
    org.jsecurity.subject.SimplePrincipalCollection var52 = new org.jsecurity.subject.SimplePrincipalCollection((java.lang.Object)var49, "");
    java.io.InputStream var54 = org.jsecurity.util.ClassUtils.getResourceAsStream("");
    java.lang.Object[] var55 = new java.lang.Object[] { var54};
    java.util.List var56 = org.jsecurity.util.CollectionUtils.asList(var55);
    org.jsecurity.authc.pam.ModularRealmAuthenticator var57 = new org.jsecurity.authc.pam.ModularRealmAuthenticator(var56);
    var52.addAll((java.util.Collection)var56, "\u0000\u0000");
    var0.setSessionListeners((java.util.Collection)var56);
    org.jsecurity.subject.RememberMeManager var61 = var0.getRememberMeManager();
    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      var0.setRememberMeEncryptionCipherKeyHex("org.jsecurity.authz.UnauthorizedException: org.jsecurity.session.ExpiredSessionException: ");
      fail("Expected exception of type java.lang.IllegalStateException");
    } catch (java.lang.IllegalStateException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var2);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var3);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var4);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var12);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var13);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var14);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var20);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var21);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var22);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var40);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var41);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var43);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var44);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var45);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var46);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var54);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var55);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var56);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var61);

  }

  public void test384() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest0.test384");


    byte[] var3 = new byte[] { (byte)100, (byte)100, (byte)(-1)};
    java.lang.String var4 = org.jsecurity.codec.CodecSupport.toString(var3);
    byte[] var6 = org.jsecurity.codec.Base64.encode(var3, false);
    byte[] var7 = org.jsecurity.codec.Base64.decode(var3);
    java.lang.String var8 = org.jsecurity.codec.CodecSupport.toString(var3);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var3);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var4 + "' != '" + "dd\uFFFD"+ "'", var4.equals("dd\uFFFD"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var6);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var7);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var8 + "' != '" + "dd\uFFFD"+ "'", var8.equals("dd\uFFFD"));

  }

  public void test385() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest0.test385");


    org.jsecurity.mgt.DefaultSecurityManager var0 = new org.jsecurity.mgt.DefaultSecurityManager();
    java.io.InputStream var2 = org.jsecurity.util.ClassUtils.getResourceAsStream("");
    java.lang.Object[] var3 = new java.lang.Object[] { var2};
    java.util.List var4 = org.jsecurity.util.CollectionUtils.asList(var3);
    org.jsecurity.authc.pam.ModularRealmAuthenticator var5 = new org.jsecurity.authc.pam.ModularRealmAuthenticator(var4);
    org.jsecurity.authc.pam.AllSuccessfulModularAuthenticationStrategy var6 = new org.jsecurity.authc.pam.AllSuccessfulModularAuthenticationStrategy();
    var5.setModularAuthenticationStrategy((org.jsecurity.authc.pam.ModularAuthenticationStrategy)var6);
    org.jsecurity.authz.SimpleAuthorizationInfo var8 = new org.jsecurity.authz.SimpleAuthorizationInfo();
    var8.addStringPermission("hi!");
    java.io.InputStream var12 = org.jsecurity.util.ClassUtils.getResourceAsStream("");
    java.lang.Object[] var13 = new java.lang.Object[] { var12};
    java.util.List var14 = org.jsecurity.util.CollectionUtils.asList(var13);
    var8.addRoles((java.util.Collection)var14);
    var5.setAuthenticationListeners((java.util.Collection)var14);
    var0.setSessionListeners((java.util.Collection)var14);
    org.jsecurity.realm.text.TextConfigurationRealm var18 = new org.jsecurity.realm.text.TextConfigurationRealm();
    java.io.InputStream var20 = org.jsecurity.util.ClassUtils.getResourceAsStream("");
    java.lang.Object[] var21 = new java.lang.Object[] { var20};
    java.util.List var22 = org.jsecurity.util.CollectionUtils.asList(var21);
    org.jsecurity.authc.pam.ModularRealmAuthenticator var23 = new org.jsecurity.authc.pam.ModularRealmAuthenticator(var22);
    org.jsecurity.subject.SimplePrincipalCollection var25 = new org.jsecurity.subject.SimplePrincipalCollection((java.util.Collection)var22, "org.jsecurity.authz.UnauthorizedException: org.jsecurity.session.ExpiredSessionException: ");
    org.jsecurity.session.UnknownSessionException var30 = new org.jsecurity.session.UnknownSessionException("dd\uFFFD", (java.io.Serializable)100.0f);
    org.jsecurity.session.SessionException var32 = new org.jsecurity.session.SessionException("dd\uFFFD", (java.lang.Throwable)var30, (java.io.Serializable)0);
    org.jsecurity.session.SessionException var33 = new org.jsecurity.session.SessionException("dd\uFFFD", (java.lang.Throwable)var30);
    var25.add((java.lang.Object)var33, "org.jsecurity.config.ConfigurationException: dd\uFFFD");
    var18.onLogout((org.jsecurity.subject.PrincipalCollection)var25);
    org.jsecurity.authc.pam.FirstSuccessfulAuthenticationStrategy var37 = new org.jsecurity.authc.pam.FirstSuccessfulAuthenticationStrategy();
    org.jsecurity.authz.UnauthorizedException var39 = new org.jsecurity.authz.UnauthorizedException("org.jsecurity.config.ConfigurationException: dd\uFFFD");
    java.lang.Throwable[] var40 = var39.getSuppressed();
    java.util.List var41 = org.jsecurity.util.CollectionUtils.asList((java.lang.Object[])var40);
    org.jsecurity.authc.UsernamePasswordToken var42 = new org.jsecurity.authc.UsernamePasswordToken();
    java.lang.String var43 = var42.getUsername();
    java.net.InetAddress var44 = var42.getInetAddress();
    org.jsecurity.authc.AuthenticationInfo var45 = var37.beforeAllAttempts((java.util.Collection)var41, (org.jsecurity.authc.AuthenticationToken)var42);
    boolean[] var46 = var0.hasRoles((org.jsecurity.subject.PrincipalCollection)var25, var41);
    org.jsecurity.authz.permission.WildcardPermissionResolver var47 = new org.jsecurity.authz.permission.WildcardPermissionResolver();
    org.jsecurity.authz.Permission var49 = var47.resolvePermission("hi!");
    org.jsecurity.authz.Permission var51 = var47.resolvePermission("hi!");
    var0.setPermissionResolver((org.jsecurity.authz.permission.PermissionResolver)var47);
    org.jsecurity.codec.CodecException var55 = new org.jsecurity.codec.CodecException("dd\uFFFD");
    org.jsecurity.authc.ConcurrentAccessException var56 = new org.jsecurity.authc.ConcurrentAccessException("org.jsecurity.authz.UnauthorizedException: org.jsecurity.session.ExpiredSessionException: ", (java.lang.Throwable)var55);
    org.jsecurity.subject.SimplePrincipalCollection var58 = new org.jsecurity.subject.SimplePrincipalCollection((java.lang.Object)var55, "");
    java.lang.String[] var61 = org.jsecurity.util.StringUtils.tokenizeToStringArray("org.jsecurity.authz.UnauthorizedException: org.jsecurity.session.ExpiredSessionException: ", "\u0000\u0000");
    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      boolean[] var62 = var0.isPermitted((org.jsecurity.subject.PrincipalCollection)var58, var61);
      fail("Expected exception of type java.util.NoSuchElementException");
    } catch (java.util.NoSuchElementException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var2);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var3);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var4);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var12);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var13);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var14);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var20);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var21);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var22);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var40);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var41);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var43);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var44);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var45);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var46);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var49);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var51);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var61);

  }

  public void test386() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest0.test386");


    org.jsecurity.authz.ModularRealmAuthorizer var0 = new org.jsecurity.authz.ModularRealmAuthorizer();
    java.io.InputStream var2 = org.jsecurity.util.ClassUtils.getResourceAsStream("");
    java.lang.Object[] var3 = new java.lang.Object[] { var2};
    java.util.List var4 = org.jsecurity.util.CollectionUtils.asList(var3);
    org.jsecurity.authc.pam.ModularRealmAuthenticator var5 = new org.jsecurity.authc.pam.ModularRealmAuthenticator(var4);
    org.jsecurity.subject.SimplePrincipalCollection var7 = new org.jsecurity.subject.SimplePrincipalCollection((java.util.Collection)var4, "org.jsecurity.authz.UnauthorizedException: org.jsecurity.session.ExpiredSessionException: ");
    org.jsecurity.session.UnknownSessionException var12 = new org.jsecurity.session.UnknownSessionException("dd\uFFFD", (java.io.Serializable)100.0f);
    org.jsecurity.session.SessionException var14 = new org.jsecurity.session.SessionException("dd\uFFFD", (java.lang.Throwable)var12, (java.io.Serializable)0);
    org.jsecurity.session.SessionException var15 = new org.jsecurity.session.SessionException("dd\uFFFD", (java.lang.Throwable)var12);
    var7.add((java.lang.Object)var15, "org.jsecurity.config.ConfigurationException: dd\uFFFD");
    java.util.Set var18 = var7.asSet();
    var0.setRealms((java.util.Collection)var18);
    java.util.Collection var20 = var0.getRealms();
    java.io.InputStream var22 = org.jsecurity.util.ClassUtils.getResourceAsStream("");
    java.lang.Object[] var23 = new java.lang.Object[] { var22};
    java.util.List var24 = org.jsecurity.util.CollectionUtils.asList(var23);
    org.jsecurity.authc.pam.ModularRealmAuthenticator var25 = new org.jsecurity.authc.pam.ModularRealmAuthenticator(var24);
    org.jsecurity.subject.SimplePrincipalCollection var27 = new org.jsecurity.subject.SimplePrincipalCollection((java.util.Collection)var24, "org.jsecurity.authz.UnauthorizedException: org.jsecurity.session.ExpiredSessionException: ");
    org.jsecurity.io.ResourceException var31 = new org.jsecurity.io.ResourceException("hi!");
    org.jsecurity.authc.UnknownAccountException var32 = new org.jsecurity.authc.UnknownAccountException((java.lang.Throwable)var31);
    org.jsecurity.session.StoppedSessionException var33 = new org.jsecurity.session.StoppedSessionException("dd\uFFFD", (java.io.Serializable)var31);
    org.jsecurity.session.UnknownSessionException var34 = new org.jsecurity.session.UnknownSessionException("org.jsecurity.authz.UnauthorizedException: org.jsecurity.session.ExpiredSessionException: ", (java.lang.Throwable)var31);
    boolean var35 = var27.equals((java.lang.Object)var31);
    org.jsecurity.authz.aop.RoleAnnotationMethodInterceptor var36 = new org.jsecurity.authz.aop.RoleAnnotationMethodInterceptor();
    org.jsecurity.aop.AnnotationHandler var37 = var36.getHandler();
    java.lang.Class var38 = var37.getAnnotationClass();
    java.lang.Object var39 = var27.oneByType(var38);
    boolean var40 = var27.isEmpty();
    org.jsecurity.authz.SimpleAuthorizationInfo var41 = new org.jsecurity.authz.SimpleAuthorizationInfo();
    org.jsecurity.session.UnknownSessionException var46 = new org.jsecurity.session.UnknownSessionException("dd\uFFFD", (java.io.Serializable)100.0f);
    org.jsecurity.subject.SubjectException var47 = new org.jsecurity.subject.SubjectException("dd\uFFFD", (java.lang.Throwable)var46);
    org.jsecurity.io.SerializationException var48 = new org.jsecurity.io.SerializationException("", (java.lang.Throwable)var47);
    java.lang.Throwable[] var49 = var47.getSuppressed();
    java.util.Set var50 = org.jsecurity.util.CollectionUtils.asSet((java.lang.Object[])var49);
    var41.setStringPermissions(var50);
    java.util.Set var52 = var41.getRoles();
    org.jsecurity.authz.SimpleAuthorizingAccount var53 = new org.jsecurity.authz.SimpleAuthorizingAccount();
    java.util.Set var54 = var53.getSimpleRoles();
    org.jsecurity.authz.SimpleRole var55 = new org.jsecurity.authz.SimpleRole();
    org.jsecurity.authz.SimpleAuthorizationInfo var56 = new org.jsecurity.authz.SimpleAuthorizationInfo();
    var56.addRole("a2b823b1e72eae2b727289df8a00a89df8a0bab6ad8a89c4c5c7a9b62a270000");
    org.jsecurity.session.UnknownSessionException var63 = new org.jsecurity.session.UnknownSessionException("dd\uFFFD", (java.io.Serializable)100.0f);
    org.jsecurity.subject.SubjectException var64 = new org.jsecurity.subject.SubjectException("dd\uFFFD", (java.lang.Throwable)var63);
    org.jsecurity.io.SerializationException var65 = new org.jsecurity.io.SerializationException("", (java.lang.Throwable)var64);
    java.lang.Throwable[] var66 = var64.getSuppressed();
    java.util.Set var67 = org.jsecurity.util.CollectionUtils.asSet((java.lang.Object[])var66);
    var56.addRoles((java.util.Collection)var67);
    var55.addAll((java.util.Collection)var67);
    org.jsecurity.authz.SimpleRole var71 = new org.jsecurity.authz.SimpleRole();
    org.jsecurity.authz.permission.WildcardPermission var74 = new org.jsecurity.authz.permission.WildcardPermission("hi!", false);
    boolean var75 = var71.isPermitted((org.jsecurity.authz.Permission)var74);
    org.jsecurity.session.InvalidSessionException var76 = new org.jsecurity.session.InvalidSessionException("org.jsecurity.config.ConfigurationException: dd\uFFFD", (java.io.Serializable)var74);
    org.jsecurity.authz.SimpleRole var77 = new org.jsecurity.authz.SimpleRole();
    org.jsecurity.authz.permission.WildcardPermission var80 = new org.jsecurity.authz.permission.WildcardPermission("hi!", false);
    boolean var81 = var77.isPermitted((org.jsecurity.authz.Permission)var80);
    boolean var82 = var74.implies((org.jsecurity.authz.Permission)var80);
    boolean var83 = var55.isPermitted((org.jsecurity.authz.Permission)var80);
    boolean var84 = var53.isPermitted((org.jsecurity.authz.Permission)var80);
    var41.addObjectPermission((org.jsecurity.authz.Permission)var80);
    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      var0.checkPermission((org.jsecurity.subject.PrincipalCollection)var27, (org.jsecurity.authz.Permission)var80);
      fail("Expected exception of type java.lang.ClassCastException");
    } catch (java.lang.ClassCastException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var2);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var3);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var4);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var18);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var20);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var22);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var23);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var24);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var35 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var37);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var38);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var39);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var40 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var49);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var50);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var52);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var54);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var66);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var67);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var75 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var81 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var82 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var83 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var84 == false);

  }

  public void test387() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest0.test387");


    org.jsecurity.mgt.DefaultSecurityManager var0 = new org.jsecurity.mgt.DefaultSecurityManager();
    java.io.InputStream var2 = org.jsecurity.util.ClassUtils.getResourceAsStream("");
    java.lang.Object[] var3 = new java.lang.Object[] { var2};
    java.util.List var4 = org.jsecurity.util.CollectionUtils.asList(var3);
    org.jsecurity.authc.pam.ModularRealmAuthenticator var5 = new org.jsecurity.authc.pam.ModularRealmAuthenticator(var4);
    org.jsecurity.authc.pam.AllSuccessfulModularAuthenticationStrategy var6 = new org.jsecurity.authc.pam.AllSuccessfulModularAuthenticationStrategy();
    var5.setModularAuthenticationStrategy((org.jsecurity.authc.pam.ModularAuthenticationStrategy)var6);
    org.jsecurity.authz.SimpleAuthorizationInfo var8 = new org.jsecurity.authz.SimpleAuthorizationInfo();
    var8.addStringPermission("hi!");
    java.io.InputStream var12 = org.jsecurity.util.ClassUtils.getResourceAsStream("");
    java.lang.Object[] var13 = new java.lang.Object[] { var12};
    java.util.List var14 = org.jsecurity.util.CollectionUtils.asList(var13);
    var8.addRoles((java.util.Collection)var14);
    var5.setAuthenticationListeners((java.util.Collection)var14);
    var0.setSessionListeners((java.util.Collection)var14);
    org.jsecurity.subject.Subject var18 = var0.getSubject();
    java.io.InputStream var20 = org.jsecurity.util.ClassUtils.getResourceAsStream("");
    java.lang.Object[] var21 = new java.lang.Object[] { var20};
    java.util.List var22 = org.jsecurity.util.CollectionUtils.asList(var21);
    org.jsecurity.authc.pam.ModularRealmAuthenticator var23 = new org.jsecurity.authc.pam.ModularRealmAuthenticator(var22);
    java.io.InputStream var25 = org.jsecurity.util.ClassUtils.getResourceAsStream("");
    java.lang.Object[] var26 = new java.lang.Object[] { var25};
    java.util.List var27 = org.jsecurity.util.CollectionUtils.asList(var26);
    org.jsecurity.authc.pam.ModularRealmAuthenticator var28 = new org.jsecurity.authc.pam.ModularRealmAuthenticator(var27);
    var23.setRealms((java.util.Collection)var27);
    org.jsecurity.subject.SimplePrincipalCollection var31 = new org.jsecurity.subject.SimplePrincipalCollection((java.util.Collection)var27, "org.jsecurity.realm.SimpleAccountRealm-9-authorization");
    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      var0.setRealms((java.util.Collection)var27);
      fail("Expected exception of type java.lang.ClassCastException");
    } catch (java.lang.ClassCastException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var2);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var3);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var4);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var12);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var13);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var14);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var18);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var20);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var21);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var22);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var25);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var26);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var27);

  }

  public void test388() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest0.test388");


    org.jsecurity.jndi.JndiTemplate var0 = new org.jsecurity.jndi.JndiTemplate();
    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      java.lang.Object var2 = var0.lookup("org.jsecurity.realm.SimpleAccountRealm-55-authorization");
      fail("Expected exception of type javax.naming.NoInitialContextException");
    } catch (javax.naming.NoInitialContextException e) {
      // Expected exception.
    }

  }

  public void test389() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest0.test389");


    org.jsecurity.authz.ModularRealmAuthorizer var0 = new org.jsecurity.authz.ModularRealmAuthorizer();
    java.io.InputStream var2 = org.jsecurity.util.ClassUtils.getResourceAsStream("");
    java.lang.Object[] var3 = new java.lang.Object[] { var2};
    java.util.List var4 = org.jsecurity.util.CollectionUtils.asList(var3);
    org.jsecurity.authc.pam.ModularRealmAuthenticator var5 = new org.jsecurity.authc.pam.ModularRealmAuthenticator(var4);
    org.jsecurity.subject.SimplePrincipalCollection var7 = new org.jsecurity.subject.SimplePrincipalCollection((java.util.Collection)var4, "org.jsecurity.authz.UnauthorizedException: org.jsecurity.session.ExpiredSessionException: ");
    org.jsecurity.session.UnknownSessionException var12 = new org.jsecurity.session.UnknownSessionException("dd\uFFFD", (java.io.Serializable)100.0f);
    org.jsecurity.session.SessionException var14 = new org.jsecurity.session.SessionException("dd\uFFFD", (java.lang.Throwable)var12, (java.io.Serializable)0);
    org.jsecurity.session.SessionException var15 = new org.jsecurity.session.SessionException("dd\uFFFD", (java.lang.Throwable)var12);
    var7.add((java.lang.Object)var15, "org.jsecurity.config.ConfigurationException: dd\uFFFD");
    java.util.Set var18 = var7.asSet();
    var0.setRealms((java.util.Collection)var18);
    org.jsecurity.authz.UnauthorizedException var21 = new org.jsecurity.authz.UnauthorizedException("org.jsecurity.config.ConfigurationException: dd\uFFFD");
    java.lang.Throwable[] var22 = var21.getSuppressed();
    java.util.Set var23 = org.jsecurity.util.CollectionUtils.asSet((java.lang.Object[])var22);
    var0.setRealms((java.util.Collection)var23);
    org.jsecurity.authz.SimpleAuthorizationInfo var25 = new org.jsecurity.authz.SimpleAuthorizationInfo();
    java.util.Set var26 = var25.getStringPermissions();
    java.util.Set var27 = var25.getRoles();
    var25.addStringPermission("hi!");
    org.jsecurity.subject.SimplePrincipalCollection var31 = new org.jsecurity.subject.SimplePrincipalCollection((java.lang.Object)"hi!", "5dd0c65d-1422-49c2-becb-9e8dca619ab3");
    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      boolean var33 = var0.hasRole((org.jsecurity.subject.PrincipalCollection)var31, "org.jsecurity.authc.IncorrectCredentialsException: \u0000\u0000");
      fail("Expected exception of type java.lang.IllegalStateException");
    } catch (java.lang.IllegalStateException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var2);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var3);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var4);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var18);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var22);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var23);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var26);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var27);

  }

  public void test390() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest0.test390");


    org.jsecurity.session.mgt.DefaultSessionManager var0 = new org.jsecurity.session.mgt.DefaultSessionManager();
    org.jsecurity.session.mgt.eis.MemorySessionDAO var1 = new org.jsecurity.session.mgt.eis.MemorySessionDAO();
    org.jsecurity.cache.Cache var2 = var1.getActiveSessionsCache();
    org.jsecurity.cache.CacheManager var3 = var1.getCacheManager();
    org.jsecurity.cache.HashtableCacheManager var4 = new org.jsecurity.cache.HashtableCacheManager();
    org.jsecurity.cache.Cache var6 = var4.getCache("\u0000\u0000");
    var1.setActiveSessionsCache(var6);
    java.io.InputStream var9 = org.jsecurity.util.ClassUtils.getResourceAsStream("");
    java.lang.Object[] var10 = new java.lang.Object[] { var9};
    java.util.List var11 = org.jsecurity.util.CollectionUtils.asList(var10);
    org.jsecurity.authc.pam.ModularRealmAuthenticator var12 = new org.jsecurity.authc.pam.ModularRealmAuthenticator(var11);
    org.jsecurity.authc.pam.AllSuccessfulModularAuthenticationStrategy var13 = new org.jsecurity.authc.pam.AllSuccessfulModularAuthenticationStrategy();
    var12.setModularAuthenticationStrategy((org.jsecurity.authc.pam.ModularAuthenticationStrategy)var13);
    org.jsecurity.authz.SimpleAuthorizationInfo var15 = new org.jsecurity.authz.SimpleAuthorizationInfo();
    var15.addStringPermission("hi!");
    java.io.InputStream var19 = org.jsecurity.util.ClassUtils.getResourceAsStream("");
    java.lang.Object[] var20 = new java.lang.Object[] { var19};
    java.util.List var21 = org.jsecurity.util.CollectionUtils.asList(var20);
    var15.addRoles((java.util.Collection)var21);
    var12.setAuthenticationListeners((java.util.Collection)var21);
    org.jsecurity.realm.activedirectory.ActiveDirectoryRealm var24 = new org.jsecurity.realm.activedirectory.ActiveDirectoryRealm();
    var24.setPrincipalSuffix("");
    var12.setRealm((org.jsecurity.realm.Realm)var24);
    org.jsecurity.cache.HashtableCacheManager var28 = new org.jsecurity.cache.HashtableCacheManager();
    org.jsecurity.cache.Cache var30 = var28.getCache("\u0000\u0000");
    var24.setAuthorizationCache(var30);
    var1.setActiveSessionsCache(var30);
    org.jsecurity.session.mgt.SimpleSession var33 = new org.jsecurity.session.mgt.SimpleSession();
    java.io.Serializable var34 = var1.create((org.jsecurity.session.Session)var33);
    var0.setSessionDAO((org.jsecurity.session.mgt.eis.SessionDAO)var1);
    org.jsecurity.session.mgt.eis.MemorySessionDAO var36 = new org.jsecurity.session.mgt.eis.MemorySessionDAO();
    org.jsecurity.cache.Cache var37 = var36.getActiveSessionsCache();
    org.jsecurity.cache.CacheManager var38 = var36.getCacheManager();
    org.jsecurity.cache.HashtableCacheManager var39 = new org.jsecurity.cache.HashtableCacheManager();
    org.jsecurity.cache.Cache var41 = var39.getCache("\u0000\u0000");
    var36.setActiveSessionsCache(var41);
    java.io.InputStream var44 = org.jsecurity.util.ClassUtils.getResourceAsStream("");
    java.lang.Object[] var45 = new java.lang.Object[] { var44};
    java.util.List var46 = org.jsecurity.util.CollectionUtils.asList(var45);
    org.jsecurity.authc.pam.ModularRealmAuthenticator var47 = new org.jsecurity.authc.pam.ModularRealmAuthenticator(var46);
    org.jsecurity.authc.pam.AllSuccessfulModularAuthenticationStrategy var48 = new org.jsecurity.authc.pam.AllSuccessfulModularAuthenticationStrategy();
    var47.setModularAuthenticationStrategy((org.jsecurity.authc.pam.ModularAuthenticationStrategy)var48);
    org.jsecurity.authz.SimpleAuthorizationInfo var50 = new org.jsecurity.authz.SimpleAuthorizationInfo();
    var50.addStringPermission("hi!");
    java.io.InputStream var54 = org.jsecurity.util.ClassUtils.getResourceAsStream("");
    java.lang.Object[] var55 = new java.lang.Object[] { var54};
    java.util.List var56 = org.jsecurity.util.CollectionUtils.asList(var55);
    var50.addRoles((java.util.Collection)var56);
    var47.setAuthenticationListeners((java.util.Collection)var56);
    org.jsecurity.realm.activedirectory.ActiveDirectoryRealm var59 = new org.jsecurity.realm.activedirectory.ActiveDirectoryRealm();
    var59.setPrincipalSuffix("");
    var47.setRealm((org.jsecurity.realm.Realm)var59);
    org.jsecurity.cache.HashtableCacheManager var63 = new org.jsecurity.cache.HashtableCacheManager();
    org.jsecurity.cache.Cache var65 = var63.getCache("\u0000\u0000");
    var59.setAuthorizationCache(var65);
    var36.setActiveSessionsCache(var65);
    org.jsecurity.session.mgt.SimpleSession var68 = new org.jsecurity.session.mgt.SimpleSession();
    java.io.Serializable var69 = var36.create((org.jsecurity.session.Session)var68);
    java.io.Serializable var70 = var68.getId();
    org.jsecurity.authc.credential.Md5CredentialsMatcher var71 = new org.jsecurity.authc.credential.Md5CredentialsMatcher();
    boolean var72 = var71.isHashSalted();
    boolean var73 = var71.isHashSalted();
    int var74 = var71.getHashIterations();
    java.lang.Object var75 = var68.removeAttribute((java.lang.Object)var71);
    org.jsecurity.session.mgt.SimpleSession var76 = new org.jsecurity.session.mgt.SimpleSession();
    java.util.Date var77 = var76.getLastAccessTime();
    var68.setStartTimestamp(var77);
    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      java.util.Date var79 = var0.getStartTimestamp((java.io.Serializable)var77);
      fail("Expected exception of type org.jsecurity.session.UnknownSessionException");
    } catch (org.jsecurity.session.UnknownSessionException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var2);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var3);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var6);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var9);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var10);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var11);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var19);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var20);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var21);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var30);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var34 + "' != '" + "162d1bdb-9983-41f9-b257-d0f27a742bab"+ "'", var34.equals("162d1bdb-9983-41f9-b257-d0f27a742bab"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var37);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var38);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var41);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var44);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var45);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var46);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var54);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var55);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var56);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var65);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var69 + "' != '" + "d8822334-2b88-4043-aefe-79387c311c23"+ "'", var69.equals("d8822334-2b88-4043-aefe-79387c311c23"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var70 + "' != '" + "d8822334-2b88-4043-aefe-79387c311c23"+ "'", var70.equals("d8822334-2b88-4043-aefe-79387c311c23"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var72 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var73 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var74 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var75);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var77);

  }

  public void test391() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest0.test391");


    org.jsecurity.mgt.DefaultSecurityManager var0 = new org.jsecurity.mgt.DefaultSecurityManager();
    java.io.InputStream var2 = org.jsecurity.util.ClassUtils.getResourceAsStream("");
    java.lang.Object[] var3 = new java.lang.Object[] { var2};
    java.util.List var4 = org.jsecurity.util.CollectionUtils.asList(var3);
    org.jsecurity.authc.pam.ModularRealmAuthenticator var5 = new org.jsecurity.authc.pam.ModularRealmAuthenticator(var4);
    org.jsecurity.authc.pam.AllSuccessfulModularAuthenticationStrategy var6 = new org.jsecurity.authc.pam.AllSuccessfulModularAuthenticationStrategy();
    var5.setModularAuthenticationStrategy((org.jsecurity.authc.pam.ModularAuthenticationStrategy)var6);
    org.jsecurity.authz.SimpleAuthorizationInfo var8 = new org.jsecurity.authz.SimpleAuthorizationInfo();
    var8.addStringPermission("hi!");
    java.io.InputStream var12 = org.jsecurity.util.ClassUtils.getResourceAsStream("");
    java.lang.Object[] var13 = new java.lang.Object[] { var12};
    java.util.List var14 = org.jsecurity.util.CollectionUtils.asList(var13);
    var8.addRoles((java.util.Collection)var14);
    var5.setAuthenticationListeners((java.util.Collection)var14);
    var0.setSessionListeners((java.util.Collection)var14);
    java.io.InputStream var19 = org.jsecurity.util.ClassUtils.getResourceAsStream("");
    java.lang.Object[] var20 = new java.lang.Object[] { var19};
    java.util.List var21 = org.jsecurity.util.CollectionUtils.asList(var20);
    org.jsecurity.authc.pam.ModularRealmAuthenticator var22 = new org.jsecurity.authc.pam.ModularRealmAuthenticator(var21);
    org.jsecurity.authc.pam.AllSuccessfulModularAuthenticationStrategy var23 = new org.jsecurity.authc.pam.AllSuccessfulModularAuthenticationStrategy();
    var22.setModularAuthenticationStrategy((org.jsecurity.authc.pam.ModularAuthenticationStrategy)var23);
    org.jsecurity.authz.SimpleAuthorizationInfo var25 = new org.jsecurity.authz.SimpleAuthorizationInfo();
    var25.addStringPermission("hi!");
    java.io.InputStream var29 = org.jsecurity.util.ClassUtils.getResourceAsStream("");
    java.lang.Object[] var30 = new java.lang.Object[] { var29};
    java.util.List var31 = org.jsecurity.util.CollectionUtils.asList(var30);
    var25.addRoles((java.util.Collection)var31);
    var22.setAuthenticationListeners((java.util.Collection)var31);
    org.jsecurity.realm.activedirectory.ActiveDirectoryRealm var34 = new org.jsecurity.realm.activedirectory.ActiveDirectoryRealm();
    var34.setPrincipalSuffix("");
    var22.setRealm((org.jsecurity.realm.Realm)var34);
    org.jsecurity.cache.HashtableCacheManager var38 = new org.jsecurity.cache.HashtableCacheManager();
    org.jsecurity.cache.Cache var40 = var38.getCache("\u0000\u0000");
    var34.setAuthorizationCache(var40);
    var0.setRealm((org.jsecurity.realm.Realm)var34);
    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      var0.setRememberMeEncryptionCipherKeyBase64("org.jsecurity.realm.SimpleAccountRealm-9-authorization");
      fail("Expected exception of type java.lang.IllegalStateException");
    } catch (java.lang.IllegalStateException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var2);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var3);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var4);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var12);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var13);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var14);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var19);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var20);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var21);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var29);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var30);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var31);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var40);

  }

  public void test392() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest0.test392");


    org.jsecurity.realm.jndi.JndiRealmFactory var0 = new org.jsecurity.realm.jndi.JndiRealmFactory();
    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      java.util.Collection var1 = var0.getRealms();
      fail("Expected exception of type java.lang.IllegalStateException");
    } catch (java.lang.IllegalStateException e) {
      // Expected exception.
    }

  }

  public void test393() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest0.test393");


    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      byte[] var2 = org.jsecurity.codec.CodecSupport.toBytes("9f00e408-27bf-467d-a45f-01bb47b51aa6", "org.jsecurity.authc.CredentialsException: 783ccd31-48a8-42dd-890f-df885a7baaff");
      fail("Expected exception of type org.jsecurity.codec.CodecException");
    } catch (org.jsecurity.codec.CodecException e) {
      // Expected exception.
    }

  }

  public void test394() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest0.test394");


    org.jsecurity.realm.text.TextConfigurationRealm var0 = new org.jsecurity.realm.text.TextConfigurationRealm();
    java.io.InputStream var2 = org.jsecurity.util.ClassUtils.getResourceAsStream("");
    java.lang.Object[] var3 = new java.lang.Object[] { var2};
    java.util.List var4 = org.jsecurity.util.CollectionUtils.asList(var3);
    org.jsecurity.authc.pam.ModularRealmAuthenticator var5 = new org.jsecurity.authc.pam.ModularRealmAuthenticator(var4);
    org.jsecurity.subject.SimplePrincipalCollection var7 = new org.jsecurity.subject.SimplePrincipalCollection((java.util.Collection)var4, "org.jsecurity.authz.UnauthorizedException: org.jsecurity.session.ExpiredSessionException: ");
    org.jsecurity.session.UnknownSessionException var12 = new org.jsecurity.session.UnknownSessionException("dd\uFFFD", (java.io.Serializable)100.0f);
    org.jsecurity.session.SessionException var14 = new org.jsecurity.session.SessionException("dd\uFFFD", (java.lang.Throwable)var12, (java.io.Serializable)0);
    org.jsecurity.session.SessionException var15 = new org.jsecurity.session.SessionException("dd\uFFFD", (java.lang.Throwable)var12);
    var7.add((java.lang.Object)var15, "org.jsecurity.config.ConfigurationException: dd\uFFFD");
    var0.onLogout((org.jsecurity.subject.PrincipalCollection)var7);
    java.util.Set var20 = org.jsecurity.util.PermissionUtils.toPermissionStrings("org.jsecurity.config.ConfigurationException: dd\uFFFD");
    org.jsecurity.authz.SimpleAuthorizationInfo var21 = new org.jsecurity.authz.SimpleAuthorizationInfo(var20);
    org.jsecurity.authz.SimpleAuthorizingAccount var22 = new org.jsecurity.authz.SimpleAuthorizingAccount((org.jsecurity.subject.PrincipalCollection)var7, (java.lang.Object)var20);
    org.jsecurity.realm.text.TextConfigurationRealm var23 = new org.jsecurity.realm.text.TextConfigurationRealm();
    java.io.InputStream var25 = org.jsecurity.util.ClassUtils.getResourceAsStream("");
    java.lang.Object[] var26 = new java.lang.Object[] { var25};
    java.util.List var27 = org.jsecurity.util.CollectionUtils.asList(var26);
    org.jsecurity.authc.pam.ModularRealmAuthenticator var28 = new org.jsecurity.authc.pam.ModularRealmAuthenticator(var27);
    org.jsecurity.subject.SimplePrincipalCollection var30 = new org.jsecurity.subject.SimplePrincipalCollection((java.util.Collection)var27, "org.jsecurity.authz.UnauthorizedException: org.jsecurity.session.ExpiredSessionException: ");
    org.jsecurity.session.UnknownSessionException var35 = new org.jsecurity.session.UnknownSessionException("dd\uFFFD", (java.io.Serializable)100.0f);
    org.jsecurity.session.SessionException var37 = new org.jsecurity.session.SessionException("dd\uFFFD", (java.lang.Throwable)var35, (java.io.Serializable)0);
    org.jsecurity.session.SessionException var38 = new org.jsecurity.session.SessionException("dd\uFFFD", (java.lang.Throwable)var35);
    var30.add((java.lang.Object)var38, "org.jsecurity.config.ConfigurationException: dd\uFFFD");
    var23.onLogout((org.jsecurity.subject.PrincipalCollection)var30);
    org.jsecurity.cache.HashtableCacheManager var42 = new org.jsecurity.cache.HashtableCacheManager();
    org.jsecurity.cache.Cache var44 = var42.getCache("\u0000\u0000");
    var23.setAuthorizationCache(var44);
    java.lang.String var46 = var23.getUserDefinitions();
    var23.init();
    var23.addRole("\uFFFD\uFFFD#\uFFFD\uFFFD.\uFFFD+rr\uFFFD\u07CA\u0000\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\u01E9\uFFFD*'\u0000\u0000");
    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      org.jsecurity.crypto.hash.Sha256Hash var50 = new org.jsecurity.crypto.hash.Sha256Hash((java.lang.Object)var20, (java.lang.Object)var23);
      fail("Expected exception of type org.jsecurity.codec.CodecException");
    } catch (org.jsecurity.codec.CodecException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var2);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var3);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var4);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var20);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var25);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var26);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var27);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var44);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var46);

  }

  public void test395() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest0.test395");


    org.jsecurity.authz.ModularRealmAuthorizer var0 = new org.jsecurity.authz.ModularRealmAuthorizer();
    java.io.InputStream var2 = org.jsecurity.util.ClassUtils.getResourceAsStream("");
    java.lang.Object[] var3 = new java.lang.Object[] { var2};
    java.util.List var4 = org.jsecurity.util.CollectionUtils.asList(var3);
    org.jsecurity.authc.pam.ModularRealmAuthenticator var5 = new org.jsecurity.authc.pam.ModularRealmAuthenticator(var4);
    org.jsecurity.subject.SimplePrincipalCollection var7 = new org.jsecurity.subject.SimplePrincipalCollection((java.util.Collection)var4, "org.jsecurity.authz.UnauthorizedException: org.jsecurity.session.ExpiredSessionException: ");
    org.jsecurity.session.UnknownSessionException var12 = new org.jsecurity.session.UnknownSessionException("dd\uFFFD", (java.io.Serializable)100.0f);
    org.jsecurity.session.SessionException var14 = new org.jsecurity.session.SessionException("dd\uFFFD", (java.lang.Throwable)var12, (java.io.Serializable)0);
    org.jsecurity.session.SessionException var15 = new org.jsecurity.session.SessionException("dd\uFFFD", (java.lang.Throwable)var12);
    var7.add((java.lang.Object)var15, "org.jsecurity.config.ConfigurationException: dd\uFFFD");
    java.util.Set var18 = var7.asSet();
    var0.setRealms((java.util.Collection)var18);
    org.jsecurity.authz.UnauthorizedException var21 = new org.jsecurity.authz.UnauthorizedException("org.jsecurity.config.ConfigurationException: dd\uFFFD");
    java.lang.Throwable[] var22 = var21.getSuppressed();
    java.util.Set var23 = org.jsecurity.util.CollectionUtils.asSet((java.lang.Object[])var22);
    var0.setRealms((java.util.Collection)var23);
    org.jsecurity.realm.text.TextConfigurationRealm var26 = new org.jsecurity.realm.text.TextConfigurationRealm();
    java.io.InputStream var28 = org.jsecurity.util.ClassUtils.getResourceAsStream("");
    java.lang.Object[] var29 = new java.lang.Object[] { var28};
    java.util.List var30 = org.jsecurity.util.CollectionUtils.asList(var29);
    org.jsecurity.authc.pam.ModularRealmAuthenticator var31 = new org.jsecurity.authc.pam.ModularRealmAuthenticator(var30);
    org.jsecurity.subject.SimplePrincipalCollection var33 = new org.jsecurity.subject.SimplePrincipalCollection((java.util.Collection)var30, "org.jsecurity.authz.UnauthorizedException: org.jsecurity.session.ExpiredSessionException: ");
    org.jsecurity.session.UnknownSessionException var38 = new org.jsecurity.session.UnknownSessionException("dd\uFFFD", (java.io.Serializable)100.0f);
    org.jsecurity.session.SessionException var40 = new org.jsecurity.session.SessionException("dd\uFFFD", (java.lang.Throwable)var38, (java.io.Serializable)0);
    org.jsecurity.session.SessionException var41 = new org.jsecurity.session.SessionException("dd\uFFFD", (java.lang.Throwable)var38);
    var33.add((java.lang.Object)var41, "org.jsecurity.config.ConfigurationException: dd\uFFFD");
    var26.onLogout((org.jsecurity.subject.PrincipalCollection)var33);
    java.util.Set var46 = org.jsecurity.util.PermissionUtils.toPermissionStrings("org.jsecurity.config.ConfigurationException: dd\uFFFD");
    org.jsecurity.authz.SimpleAuthorizationInfo var47 = new org.jsecurity.authz.SimpleAuthorizationInfo(var46);
    org.jsecurity.authz.SimpleAuthorizingAccount var48 = new org.jsecurity.authz.SimpleAuthorizingAccount((org.jsecurity.subject.PrincipalCollection)var33, (java.lang.Object)var46);
    org.jsecurity.session.StoppedSessionException var49 = new org.jsecurity.session.StoppedSessionException("org.jsecurity.realm.SimpleAccountRealm-55-authorization", (java.io.Serializable)var33);
    org.jsecurity.authz.SimpleAuthorizationInfo var50 = new org.jsecurity.authz.SimpleAuthorizationInfo();
    var50.addStringPermission("hi!");
    java.io.InputStream var54 = org.jsecurity.util.ClassUtils.getResourceAsStream("");
    java.lang.Object[] var55 = new java.lang.Object[] { var54};
    java.util.List var56 = org.jsecurity.util.CollectionUtils.asList(var55);
    var50.addRoles((java.util.Collection)var56);
    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      var0.checkRoles((org.jsecurity.subject.PrincipalCollection)var33, (java.util.Collection)var56);
      fail("Expected exception of type java.lang.ClassCastException");
    } catch (java.lang.ClassCastException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var2);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var3);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var4);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var18);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var22);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var23);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var28);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var29);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var30);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var46);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var54);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var55);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var56);

  }

  public void test396() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest0.test396");


    java.io.InputStream var1 = org.jsecurity.util.ClassUtils.getResourceAsStream("783ccd31-48a8-42dd-890f-df885a7baaff");
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var1);

  }

  public void test397() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest0.test397");


    org.jsecurity.mgt.DefaultSecurityManager var0 = new org.jsecurity.mgt.DefaultSecurityManager();
    java.io.InputStream var2 = org.jsecurity.util.ClassUtils.getResourceAsStream("");
    java.lang.Object[] var3 = new java.lang.Object[] { var2};
    java.util.List var4 = org.jsecurity.util.CollectionUtils.asList(var3);
    org.jsecurity.authc.pam.ModularRealmAuthenticator var5 = new org.jsecurity.authc.pam.ModularRealmAuthenticator(var4);
    org.jsecurity.authc.pam.AllSuccessfulModularAuthenticationStrategy var6 = new org.jsecurity.authc.pam.AllSuccessfulModularAuthenticationStrategy();
    var5.setModularAuthenticationStrategy((org.jsecurity.authc.pam.ModularAuthenticationStrategy)var6);
    org.jsecurity.authz.SimpleAuthorizationInfo var8 = new org.jsecurity.authz.SimpleAuthorizationInfo();
    var8.addStringPermission("hi!");
    java.io.InputStream var12 = org.jsecurity.util.ClassUtils.getResourceAsStream("");
    java.lang.Object[] var13 = new java.lang.Object[] { var12};
    java.util.List var14 = org.jsecurity.util.CollectionUtils.asList(var13);
    var8.addRoles((java.util.Collection)var14);
    var5.setAuthenticationListeners((java.util.Collection)var14);
    var0.setSessionListeners((java.util.Collection)var14);
    org.jsecurity.authc.pam.ModularRealmAuthenticator var18 = new org.jsecurity.authc.pam.ModularRealmAuthenticator();
    org.jsecurity.authz.permission.InvalidPermissionStringException var21 = new org.jsecurity.authz.permission.InvalidPermissionStringException("", "dd\uFFFD");
    org.jsecurity.JSecurityException var23 = new org.jsecurity.JSecurityException("");
    org.jsecurity.authc.SimpleAuthenticationInfo var25 = new org.jsecurity.authc.SimpleAuthenticationInfo((java.lang.Object)var21, (java.lang.Object)"", "org.jsecurity.authz.UnauthorizedException: org.jsecurity.session.ExpiredSessionException: ");
    org.jsecurity.subject.PrincipalCollection var26 = var25.getPrincipals();
    var18.onLogout(var26);
    var0.setAuthenticator((org.jsecurity.authc.Authenticator)var18);
    org.jsecurity.codec.CodecException var31 = new org.jsecurity.codec.CodecException("dd\uFFFD");
    org.jsecurity.authc.ConcurrentAccessException var32 = new org.jsecurity.authc.ConcurrentAccessException("org.jsecurity.authz.UnauthorizedException: org.jsecurity.session.ExpiredSessionException: ", (java.lang.Throwable)var31);
    org.jsecurity.subject.SimplePrincipalCollection var34 = new org.jsecurity.subject.SimplePrincipalCollection((java.lang.Object)var31, "");
    org.jsecurity.authc.pam.FirstSuccessfulAuthenticationStrategy var35 = new org.jsecurity.authc.pam.FirstSuccessfulAuthenticationStrategy();
    org.jsecurity.authz.UnauthorizedException var37 = new org.jsecurity.authz.UnauthorizedException("org.jsecurity.config.ConfigurationException: dd\uFFFD");
    java.lang.Throwable[] var38 = var37.getSuppressed();
    java.util.List var39 = org.jsecurity.util.CollectionUtils.asList((java.lang.Object[])var38);
    org.jsecurity.authc.UsernamePasswordToken var40 = new org.jsecurity.authc.UsernamePasswordToken();
    java.lang.String var41 = var40.getUsername();
    java.net.InetAddress var42 = var40.getInetAddress();
    org.jsecurity.authc.AuthenticationInfo var43 = var35.beforeAllAttempts((java.util.Collection)var39, (org.jsecurity.authc.AuthenticationToken)var40);
    org.jsecurity.session.UnknownSessionException var48 = new org.jsecurity.session.UnknownSessionException("dd\uFFFD", (java.io.Serializable)100.0f);
    org.jsecurity.subject.SubjectException var49 = new org.jsecurity.subject.SubjectException("dd\uFFFD", (java.lang.Throwable)var48);
    org.jsecurity.io.SerializationException var50 = new org.jsecurity.io.SerializationException("", (java.lang.Throwable)var49);
    java.lang.Throwable[] var51 = var49.getSuppressed();
    java.util.Set var52 = org.jsecurity.util.CollectionUtils.asSet((java.lang.Object[])var51);
    org.jsecurity.authc.SimpleAccount var53 = new org.jsecurity.authc.SimpleAccount((org.jsecurity.subject.PrincipalCollection)var34, (java.lang.Object)var39, var52);
    java.io.InputStream var55 = org.jsecurity.util.ClassUtils.getResourceAsStream("");
    java.lang.Object[] var56 = new java.lang.Object[] { var55};
    java.util.List var57 = org.jsecurity.util.CollectionUtils.asList(var56);
    org.jsecurity.authc.pam.ModularRealmAuthenticator var58 = new org.jsecurity.authc.pam.ModularRealmAuthenticator(var57);
    org.jsecurity.subject.SimplePrincipalCollection var60 = new org.jsecurity.subject.SimplePrincipalCollection((java.util.Collection)var57, "org.jsecurity.authz.UnauthorizedException: org.jsecurity.session.ExpiredSessionException: ");
    org.jsecurity.io.ResourceException var64 = new org.jsecurity.io.ResourceException("hi!");
    org.jsecurity.authc.UnknownAccountException var65 = new org.jsecurity.authc.UnknownAccountException((java.lang.Throwable)var64);
    org.jsecurity.session.StoppedSessionException var66 = new org.jsecurity.session.StoppedSessionException("dd\uFFFD", (java.io.Serializable)var64);
    org.jsecurity.session.UnknownSessionException var67 = new org.jsecurity.session.UnknownSessionException("org.jsecurity.authz.UnauthorizedException: org.jsecurity.session.ExpiredSessionException: ", (java.lang.Throwable)var64);
    boolean var68 = var60.equals((java.lang.Object)var64);
    var34.addAll((org.jsecurity.subject.PrincipalCollection)var60);
    org.jsecurity.session.UnknownSessionException var74 = new org.jsecurity.session.UnknownSessionException("dd\uFFFD", (java.io.Serializable)100.0f);
    org.jsecurity.subject.SubjectException var75 = new org.jsecurity.subject.SubjectException("dd\uFFFD", (java.lang.Throwable)var74);
    org.jsecurity.io.SerializationException var76 = new org.jsecurity.io.SerializationException("", (java.lang.Throwable)var75);
    java.lang.Throwable[] var77 = var75.getSuppressed();
    java.util.List var78 = org.jsecurity.util.CollectionUtils.asList((java.lang.Object[])var77);
    boolean var79 = var0.isPermittedAll((org.jsecurity.subject.PrincipalCollection)var34, (java.util.Collection)var78);
    org.jsecurity.subject.DelegatingSubject var80 = new org.jsecurity.subject.DelegatingSubject((org.jsecurity.mgt.SecurityManager)var0);
    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      var0.setRememberMeDecryptionCipherKeyBase64("orgjsecurityauthcCredentialsException783ccd3148a842dd890fdf885a7baafAA==");
      fail("Expected exception of type java.lang.IllegalStateException");
    } catch (java.lang.IllegalStateException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var2);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var3);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var4);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var12);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var13);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var14);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var26);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var38);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var39);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var41);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var42);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var43);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var51);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var52);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var55);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var56);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var57);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var68 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var77);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var78);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var79 == true);

  }

  public void test398() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest0.test398");


    byte[] var3 = new byte[] { (byte)100, (byte)100, (byte)(-1)};
    java.lang.String var4 = org.jsecurity.codec.CodecSupport.toString(var3);
    char[] var5 = org.jsecurity.codec.CodecSupport.toChars(var3);
    boolean var6 = org.jsecurity.codec.Base64.isBase64(var3);
    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      char[] var8 = org.jsecurity.codec.CodecSupport.toChars(var3, "b598ff3d-5685-4491-8ee6-585d37adb1db");
      fail("Expected exception of type org.jsecurity.codec.CodecException");
    } catch (org.jsecurity.codec.CodecException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var3);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var4 + "' != '" + "dd\uFFFD"+ "'", var4.equals("dd\uFFFD"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var5);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var6 == false);

  }

  public void test399() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest0.test399");


    org.jsecurity.authz.UnauthorizedException var1 = new org.jsecurity.authz.UnauthorizedException("org.jsecurity.config.ConfigurationException: dd\uFFFD");
    java.lang.Throwable[] var2 = var1.getSuppressed();
    org.jsecurity.session.SessionException var3 = new org.jsecurity.session.SessionException((java.lang.Throwable)var1);
    org.jsecurity.util.UnknownClassException var4 = new org.jsecurity.util.UnknownClassException((java.lang.Throwable)var1);
    org.jsecurity.util.UnavailableConstructorException var5 = new org.jsecurity.util.UnavailableConstructorException((java.lang.Throwable)var1);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var2);

  }

  public void test400() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest0.test400");


    org.jsecurity.authz.ModularRealmAuthorizer var0 = new org.jsecurity.authz.ModularRealmAuthorizer();
    org.jsecurity.authz.SimpleAuthorizationInfo var1 = new org.jsecurity.authz.SimpleAuthorizationInfo();
    var1.addRole("a2b823b1e72eae2b727289df8a00a89df8a0bab6ad8a89c4c5c7a9b62a270000");
    org.jsecurity.authz.SimpleAuthorizationInfo var4 = new org.jsecurity.authz.SimpleAuthorizationInfo();
    var4.addRole("a2b823b1e72eae2b727289df8a00a89df8a0bab6ad8a89c4c5c7a9b62a270000");
    org.jsecurity.session.UnknownSessionException var11 = new org.jsecurity.session.UnknownSessionException("dd\uFFFD", (java.io.Serializable)100.0f);
    org.jsecurity.subject.SubjectException var12 = new org.jsecurity.subject.SubjectException("dd\uFFFD", (java.lang.Throwable)var11);
    org.jsecurity.io.SerializationException var13 = new org.jsecurity.io.SerializationException("", (java.lang.Throwable)var12);
    java.lang.Throwable[] var14 = var12.getSuppressed();
    java.util.Set var15 = org.jsecurity.util.CollectionUtils.asSet((java.lang.Object[])var14);
    var4.addRoles((java.util.Collection)var15);
    var1.setObjectPermissions(var15);
    java.io.InputStream var19 = org.jsecurity.util.ClassUtils.getResourceAsStream("");
    java.lang.Object[] var20 = new java.lang.Object[] { var19};
    java.util.List var21 = org.jsecurity.util.CollectionUtils.asList(var20);
    org.jsecurity.authc.pam.ModularRealmAuthenticator var22 = new org.jsecurity.authc.pam.ModularRealmAuthenticator(var21);
    org.jsecurity.subject.SimplePrincipalCollection var24 = new org.jsecurity.subject.SimplePrincipalCollection((java.util.Collection)var21, "org.jsecurity.authz.UnauthorizedException: org.jsecurity.session.ExpiredSessionException: ");
    java.util.Set var25 = var24.getRealmNames();
    java.io.InputStream var27 = org.jsecurity.util.ClassUtils.getResourceAsStream("");
    java.lang.Object[] var28 = new java.lang.Object[] { var27};
    java.util.List var29 = org.jsecurity.util.CollectionUtils.asList(var28);
    org.jsecurity.authc.pam.ModularRealmAuthenticator var30 = new org.jsecurity.authc.pam.ModularRealmAuthenticator(var29);
    org.jsecurity.subject.SimplePrincipalCollection var32 = new org.jsecurity.subject.SimplePrincipalCollection((java.util.Collection)var29, "org.jsecurity.authz.UnauthorizedException: org.jsecurity.session.ExpiredSessionException: ");
    org.jsecurity.session.UnknownSessionException var37 = new org.jsecurity.session.UnknownSessionException("dd\uFFFD", (java.io.Serializable)100.0f);
    org.jsecurity.session.SessionException var39 = new org.jsecurity.session.SessionException("dd\uFFFD", (java.lang.Throwable)var37, (java.io.Serializable)0);
    org.jsecurity.session.SessionException var40 = new org.jsecurity.session.SessionException("dd\uFFFD", (java.lang.Throwable)var37);
    var32.add((java.lang.Object)var40, "org.jsecurity.config.ConfigurationException: dd\uFFFD");
    java.util.Set var43 = var32.asSet();
    var24.addAll((java.util.Collection)var43, "6464ff");
    var1.setStringPermissions(var43);
    org.jsecurity.subject.SimplePrincipalCollection var48 = new org.jsecurity.subject.SimplePrincipalCollection((java.util.Collection)var43, "\u0000\u0000");
    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      boolean var50 = var0.hasRole((org.jsecurity.subject.PrincipalCollection)var48, "org.jsecurity.realm.SimpleAccountRealm-52-authorization");
      fail("Expected exception of type java.lang.IllegalStateException");
    } catch (java.lang.IllegalStateException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var14);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var15);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var19);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var20);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var21);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var25);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var27);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var28);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var29);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var43);

  }

  public void test401() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest0.test401");


    org.jsecurity.io.XmlSerializer var0 = new org.jsecurity.io.XmlSerializer();
    org.jsecurity.io.ResourceException var2 = new org.jsecurity.io.ResourceException("hi!");
    org.jsecurity.codec.CodecException var3 = new org.jsecurity.codec.CodecException((java.lang.Throwable)var2);
    byte[] var4 = var0.serialize((java.lang.Object)var2);
    char[] var6 = new char[] { };
    org.jsecurity.authc.UsernamePasswordToken var8 = new org.jsecurity.authc.UsernamePasswordToken("hi!", var6, true);
    byte[] var9 = org.jsecurity.codec.Hex.decode(var6);
    byte[] var10 = org.jsecurity.codec.Hex.decode(var6);
    byte[] var12 = org.jsecurity.codec.Base64.encode(var10, true);
    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      java.lang.Object var13 = var0.deserialize(var10);
      fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException");
    } catch (java.lang.ArrayIndexOutOfBoundsException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var4);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var6);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var9);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var10);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var12);

  }

  public void test402() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest0.test402");


    org.jsecurity.authz.SimpleAuthorizationInfo var0 = new org.jsecurity.authz.SimpleAuthorizationInfo();
    var0.addStringPermission("hi!");
    org.jsecurity.authz.SimpleAuthorizationInfo var4 = new org.jsecurity.authz.SimpleAuthorizationInfo();
    org.jsecurity.session.UnknownSessionException var9 = new org.jsecurity.session.UnknownSessionException("dd\uFFFD", (java.io.Serializable)100.0f);
    org.jsecurity.subject.SubjectException var10 = new org.jsecurity.subject.SubjectException("dd\uFFFD", (java.lang.Throwable)var9);
    org.jsecurity.io.SerializationException var11 = new org.jsecurity.io.SerializationException("", (java.lang.Throwable)var10);
    java.lang.Throwable[] var12 = var10.getSuppressed();
    java.util.Set var13 = org.jsecurity.util.CollectionUtils.asSet((java.lang.Object[])var12);
    var4.setStringPermissions(var13);
    org.jsecurity.authz.SimpleRole var15 = new org.jsecurity.authz.SimpleRole("\u0000\u0000", var13);
    var0.setRoles(var13);
    char[] var20 = new char[] { ' ', ' '};
    org.jsecurity.authc.UsernamePasswordToken var21 = new org.jsecurity.authc.UsernamePasswordToken("hi!", var20);
    char[] var25 = new char[] { '4', '#'};
    org.jsecurity.authc.UsernamePasswordToken var26 = new org.jsecurity.authc.UsernamePasswordToken("\u0000\u0000", var25);
    var21.setPassword(var25);
    org.jsecurity.session.mgt.SimpleSession var28 = new org.jsecurity.session.mgt.SimpleSession();
    var28.setTimeout((-1L));
    org.jsecurity.session.mgt.SimpleSession var31 = new org.jsecurity.session.mgt.SimpleSession();
    java.util.Date var32 = var31.getLastAccessTime();
    var28.setLastAccessTime(var32);
    java.net.InetAddress var34 = var28.getHostAddress();
    var21.setInetAddress(var34);
    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      org.jsecurity.authc.SimpleAccount var37 = new org.jsecurity.authc.SimpleAccount((java.util.Collection)var13, (java.lang.Object)var34, "dd\uFFFD");
      fail("Expected exception of type java.lang.IllegalArgumentException");
    } catch (java.lang.IllegalArgumentException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var12);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var13);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var20);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var25);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var32);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var34);

  }

  public void test403() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest0.test403");


    org.jsecurity.authc.pam.UnsupportedTokenException var0 = new org.jsecurity.authc.pam.UnsupportedTokenException();
    org.jsecurity.authc.UnknownAccountException var1 = new org.jsecurity.authc.UnknownAccountException((java.lang.Throwable)var0);
    org.jsecurity.authc.AccountException var2 = new org.jsecurity.authc.AccountException((java.lang.Throwable)var1);
    org.jsecurity.mgt.DefaultSecurityManager var3 = new org.jsecurity.mgt.DefaultSecurityManager();
    java.io.InputStream var5 = org.jsecurity.util.ClassUtils.getResourceAsStream("");
    java.lang.Object[] var6 = new java.lang.Object[] { var5};
    java.util.List var7 = org.jsecurity.util.CollectionUtils.asList(var6);
    org.jsecurity.authc.pam.ModularRealmAuthenticator var8 = new org.jsecurity.authc.pam.ModularRealmAuthenticator(var7);
    org.jsecurity.authc.pam.AllSuccessfulModularAuthenticationStrategy var9 = new org.jsecurity.authc.pam.AllSuccessfulModularAuthenticationStrategy();
    var8.setModularAuthenticationStrategy((org.jsecurity.authc.pam.ModularAuthenticationStrategy)var9);
    org.jsecurity.authz.SimpleAuthorizationInfo var11 = new org.jsecurity.authz.SimpleAuthorizationInfo();
    var11.addStringPermission("hi!");
    java.io.InputStream var15 = org.jsecurity.util.ClassUtils.getResourceAsStream("");
    java.lang.Object[] var16 = new java.lang.Object[] { var15};
    java.util.List var17 = org.jsecurity.util.CollectionUtils.asList(var16);
    var11.addRoles((java.util.Collection)var17);
    var8.setAuthenticationListeners((java.util.Collection)var17);
    var3.setSessionListeners((java.util.Collection)var17);
    org.jsecurity.realm.text.TextConfigurationRealm var21 = new org.jsecurity.realm.text.TextConfigurationRealm();
    java.io.InputStream var23 = org.jsecurity.util.ClassUtils.getResourceAsStream("");
    java.lang.Object[] var24 = new java.lang.Object[] { var23};
    java.util.List var25 = org.jsecurity.util.CollectionUtils.asList(var24);
    org.jsecurity.authc.pam.ModularRealmAuthenticator var26 = new org.jsecurity.authc.pam.ModularRealmAuthenticator(var25);
    org.jsecurity.subject.SimplePrincipalCollection var28 = new org.jsecurity.subject.SimplePrincipalCollection((java.util.Collection)var25, "org.jsecurity.authz.UnauthorizedException: org.jsecurity.session.ExpiredSessionException: ");
    org.jsecurity.session.UnknownSessionException var33 = new org.jsecurity.session.UnknownSessionException("dd\uFFFD", (java.io.Serializable)100.0f);
    org.jsecurity.session.SessionException var35 = new org.jsecurity.session.SessionException("dd\uFFFD", (java.lang.Throwable)var33, (java.io.Serializable)0);
    org.jsecurity.session.SessionException var36 = new org.jsecurity.session.SessionException("dd\uFFFD", (java.lang.Throwable)var33);
    var28.add((java.lang.Object)var36, "org.jsecurity.config.ConfigurationException: dd\uFFFD");
    var21.onLogout((org.jsecurity.subject.PrincipalCollection)var28);
    org.jsecurity.authc.pam.FirstSuccessfulAuthenticationStrategy var40 = new org.jsecurity.authc.pam.FirstSuccessfulAuthenticationStrategy();
    org.jsecurity.authz.UnauthorizedException var42 = new org.jsecurity.authz.UnauthorizedException("org.jsecurity.config.ConfigurationException: dd\uFFFD");
    java.lang.Throwable[] var43 = var42.getSuppressed();
    java.util.List var44 = org.jsecurity.util.CollectionUtils.asList((java.lang.Object[])var43);
    org.jsecurity.authc.UsernamePasswordToken var45 = new org.jsecurity.authc.UsernamePasswordToken();
    java.lang.String var46 = var45.getUsername();
    java.net.InetAddress var47 = var45.getInetAddress();
    org.jsecurity.authc.AuthenticationInfo var48 = var40.beforeAllAttempts((java.util.Collection)var44, (org.jsecurity.authc.AuthenticationToken)var45);
    boolean[] var49 = var3.hasRoles((org.jsecurity.subject.PrincipalCollection)var28, var44);
    org.jsecurity.codec.CodecException var52 = new org.jsecurity.codec.CodecException("dd\uFFFD");
    org.jsecurity.authc.ConcurrentAccessException var53 = new org.jsecurity.authc.ConcurrentAccessException("org.jsecurity.authz.UnauthorizedException: org.jsecurity.session.ExpiredSessionException: ", (java.lang.Throwable)var52);
    org.jsecurity.subject.SimplePrincipalCollection var55 = new org.jsecurity.subject.SimplePrincipalCollection((java.lang.Object)var52, "");
    java.io.InputStream var57 = org.jsecurity.util.ClassUtils.getResourceAsStream("");
    java.lang.Object[] var58 = new java.lang.Object[] { var57};
    java.util.List var59 = org.jsecurity.util.CollectionUtils.asList(var58);
    org.jsecurity.authc.pam.ModularRealmAuthenticator var60 = new org.jsecurity.authc.pam.ModularRealmAuthenticator(var59);
    var55.addAll((java.util.Collection)var59, "\u0000\u0000");
    var3.setSessionListeners((java.util.Collection)var59);
    org.jsecurity.authc.SimpleAccount var65 = new org.jsecurity.authc.SimpleAccount((java.lang.Object)var2, (java.lang.Object)var3, "ZGT/");
    org.jsecurity.authc.pam.AllSuccessfulModularAuthenticationStrategy var66 = new org.jsecurity.authc.pam.AllSuccessfulModularAuthenticationStrategy();
    char[] var68 = new char[] { };
    org.jsecurity.authc.UsernamePasswordToken var70 = new org.jsecurity.authc.UsernamePasswordToken("hi!", var68, true);
    org.jsecurity.authc.SimpleAccount var71 = new org.jsecurity.authc.SimpleAccount();
    var71.setCredentialsExpired(false);
    boolean var74 = var71.isLocked();
    org.jsecurity.authc.AuthenticationInfo var75 = var66.afterAllAttempts((org.jsecurity.authc.AuthenticationToken)var70, (org.jsecurity.authc.AuthenticationInfo)var71);
    var70.clear();
    java.lang.Object var77 = var70.getPrincipal();
    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      org.jsecurity.subject.Subject var78 = var3.login((org.jsecurity.authc.AuthenticationToken)var70);
      fail("Expected exception of type org.jsecurity.authc.AuthenticationException");
    } catch (org.jsecurity.authc.AuthenticationException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var5);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var6);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var7);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var15);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var16);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var17);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var23);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var24);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var25);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var43);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var44);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var46);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var47);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var48);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var49);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var57);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var58);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var59);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var68);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var74 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var75);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var77);

  }

  public void test404() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest0.test404");


    java.io.InputStream var1 = org.jsecurity.util.ClassUtils.getResourceAsStream("org.jsecurity.realm.text.TextConfigurationRealm_389");
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var1);

  }

  public void test405() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest0.test405");


    org.jsecurity.authz.ModularRealmAuthorizer var0 = new org.jsecurity.authz.ModularRealmAuthorizer();
    java.io.InputStream var2 = org.jsecurity.util.ClassUtils.getResourceAsStream("");
    java.lang.Object[] var3 = new java.lang.Object[] { var2};
    java.util.List var4 = org.jsecurity.util.CollectionUtils.asList(var3);
    org.jsecurity.authc.pam.ModularRealmAuthenticator var5 = new org.jsecurity.authc.pam.ModularRealmAuthenticator(var4);
    org.jsecurity.subject.SimplePrincipalCollection var7 = new org.jsecurity.subject.SimplePrincipalCollection((java.util.Collection)var4, "org.jsecurity.authz.UnauthorizedException: org.jsecurity.session.ExpiredSessionException: ");
    org.jsecurity.session.UnknownSessionException var12 = new org.jsecurity.session.UnknownSessionException("dd\uFFFD", (java.io.Serializable)100.0f);
    org.jsecurity.session.SessionException var14 = new org.jsecurity.session.SessionException("dd\uFFFD", (java.lang.Throwable)var12, (java.io.Serializable)0);
    org.jsecurity.session.SessionException var15 = new org.jsecurity.session.SessionException("dd\uFFFD", (java.lang.Throwable)var12);
    var7.add((java.lang.Object)var15, "org.jsecurity.config.ConfigurationException: dd\uFFFD");
    java.util.Set var18 = var7.asSet();
    var0.setRealms((java.util.Collection)var18);
    org.jsecurity.realm.text.TextConfigurationRealm var20 = new org.jsecurity.realm.text.TextConfigurationRealm();
    java.io.InputStream var22 = org.jsecurity.util.ClassUtils.getResourceAsStream("");
    java.lang.Object[] var23 = new java.lang.Object[] { var22};
    java.util.List var24 = org.jsecurity.util.CollectionUtils.asList(var23);
    org.jsecurity.authc.pam.ModularRealmAuthenticator var25 = new org.jsecurity.authc.pam.ModularRealmAuthenticator(var24);
    org.jsecurity.subject.SimplePrincipalCollection var27 = new org.jsecurity.subject.SimplePrincipalCollection((java.util.Collection)var24, "org.jsecurity.authz.UnauthorizedException: org.jsecurity.session.ExpiredSessionException: ");
    org.jsecurity.session.UnknownSessionException var32 = new org.jsecurity.session.UnknownSessionException("dd\uFFFD", (java.io.Serializable)100.0f);
    org.jsecurity.session.SessionException var34 = new org.jsecurity.session.SessionException("dd\uFFFD", (java.lang.Throwable)var32, (java.io.Serializable)0);
    org.jsecurity.session.SessionException var35 = new org.jsecurity.session.SessionException("dd\uFFFD", (java.lang.Throwable)var32);
    var27.add((java.lang.Object)var35, "org.jsecurity.config.ConfigurationException: dd\uFFFD");
    var20.onLogout((org.jsecurity.subject.PrincipalCollection)var27);
    java.util.Set var40 = org.jsecurity.util.PermissionUtils.toPermissionStrings("org.jsecurity.config.ConfigurationException: dd\uFFFD");
    org.jsecurity.authz.SimpleAuthorizationInfo var41 = new org.jsecurity.authz.SimpleAuthorizationInfo(var40);
    org.jsecurity.authz.SimpleAuthorizingAccount var42 = new org.jsecurity.authz.SimpleAuthorizingAccount((org.jsecurity.subject.PrincipalCollection)var27, (java.lang.Object)var40);
    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      boolean var44 = var0.isPermitted((org.jsecurity.subject.PrincipalCollection)var27, "org.jsecurity.config.ConfigurationException: dd\uFFFD");
      fail("Expected exception of type java.lang.ClassCastException");
    } catch (java.lang.ClassCastException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var2);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var3);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var4);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var18);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var22);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var23);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var24);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var40);

  }

  public void test406() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest0.test406");


    org.jsecurity.realm.activedirectory.ActiveDirectoryRealm var0 = new org.jsecurity.realm.activedirectory.ActiveDirectoryRealm();
    org.jsecurity.authc.credential.Sha256CredentialsMatcher var1 = new org.jsecurity.authc.credential.Sha256CredentialsMatcher();
    var0.setCredentialsMatcher((org.jsecurity.authc.credential.CredentialsMatcher)var1);
    java.lang.String var3 = var0.getAuthorizationCacheName();
    var0.setSystemUsername("a2b823b1e72eae2b727289df8a00a89df8a0bab6ad8a89c4c5c7a9b62a270000");
    org.jsecurity.session.UnknownSessionException var9 = new org.jsecurity.session.UnknownSessionException("dd\uFFFD", (java.io.Serializable)100.0f);
    org.jsecurity.session.SessionException var11 = new org.jsecurity.session.SessionException("dd\uFFFD", (java.lang.Throwable)var9, (java.io.Serializable)0);
    org.jsecurity.authc.SimpleAuthenticationInfo var14 = new org.jsecurity.authc.SimpleAuthenticationInfo((java.lang.Object)0, (java.lang.Object)10, "hi!");
    org.jsecurity.codec.CodecException var17 = new org.jsecurity.codec.CodecException("dd\uFFFD");
    org.jsecurity.authc.ConcurrentAccessException var18 = new org.jsecurity.authc.ConcurrentAccessException("org.jsecurity.authz.UnauthorizedException: org.jsecurity.session.ExpiredSessionException: ", (java.lang.Throwable)var17);
    org.jsecurity.subject.SimplePrincipalCollection var20 = new org.jsecurity.subject.SimplePrincipalCollection((java.lang.Object)var17, "");
    org.jsecurity.authc.pam.FirstSuccessfulAuthenticationStrategy var21 = new org.jsecurity.authc.pam.FirstSuccessfulAuthenticationStrategy();
    org.jsecurity.authz.UnauthorizedException var23 = new org.jsecurity.authz.UnauthorizedException("org.jsecurity.config.ConfigurationException: dd\uFFFD");
    java.lang.Throwable[] var24 = var23.getSuppressed();
    java.util.List var25 = org.jsecurity.util.CollectionUtils.asList((java.lang.Object[])var24);
    org.jsecurity.authc.UsernamePasswordToken var26 = new org.jsecurity.authc.UsernamePasswordToken();
    java.lang.String var27 = var26.getUsername();
    java.net.InetAddress var28 = var26.getInetAddress();
    org.jsecurity.authc.AuthenticationInfo var29 = var21.beforeAllAttempts((java.util.Collection)var25, (org.jsecurity.authc.AuthenticationToken)var26);
    org.jsecurity.session.UnknownSessionException var34 = new org.jsecurity.session.UnknownSessionException("dd\uFFFD", (java.io.Serializable)100.0f);
    org.jsecurity.subject.SubjectException var35 = new org.jsecurity.subject.SubjectException("dd\uFFFD", (java.lang.Throwable)var34);
    org.jsecurity.io.SerializationException var36 = new org.jsecurity.io.SerializationException("", (java.lang.Throwable)var35);
    java.lang.Throwable[] var37 = var35.getSuppressed();
    java.util.Set var38 = org.jsecurity.util.CollectionUtils.asSet((java.lang.Object[])var37);
    org.jsecurity.authc.SimpleAccount var39 = new org.jsecurity.authc.SimpleAccount((org.jsecurity.subject.PrincipalCollection)var20, (java.lang.Object)var25, var38);
    var14.setPrincipals((org.jsecurity.subject.PrincipalCollection)var20);
    org.jsecurity.authz.SimpleAuthorizationInfo var41 = new org.jsecurity.authz.SimpleAuthorizationInfo();
    var41.addRole("a2b823b1e72eae2b727289df8a00a89df8a0bab6ad8a89c4c5c7a9b62a270000");
    org.jsecurity.session.UnknownSessionException var48 = new org.jsecurity.session.UnknownSessionException("dd\uFFFD", (java.io.Serializable)100.0f);
    org.jsecurity.subject.SubjectException var49 = new org.jsecurity.subject.SubjectException("dd\uFFFD", (java.lang.Throwable)var48);
    org.jsecurity.io.SerializationException var50 = new org.jsecurity.io.SerializationException("", (java.lang.Throwable)var49);
    java.lang.Throwable[] var51 = var49.getSuppressed();
    java.util.Set var52 = org.jsecurity.util.CollectionUtils.asSet((java.lang.Object[])var51);
    var41.addRoles((java.util.Collection)var52);
    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      boolean var54 = var0.isPermittedAll((org.jsecurity.subject.PrincipalCollection)var20, (java.util.Collection)var52);
      fail("Expected exception of type java.util.NoSuchElementException");
    } catch (java.util.NoSuchElementException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var3);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var24);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var25);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var27);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var28);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var29);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var37);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var38);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var51);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var52);

  }

  public void test407() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest0.test407");


    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      org.jsecurity.crypto.hash.Sha512Hash var1 = org.jsecurity.crypto.hash.Sha512Hash.fromHexString("NfxhYN7ItBfRAmDBmprtU73ghfEEPpcDJrHPkZ06wiY=");
      fail("Expected exception of type java.lang.IllegalArgumentException");
    } catch (java.lang.IllegalArgumentException e) {
      // Expected exception.
    }

  }

  public void test408() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest0.test408");


    org.jsecurity.authz.UnauthorizedException var1 = new org.jsecurity.authz.UnauthorizedException("org.jsecurity.authc.CredentialsException: 783ccd31-48a8-42dd-890f-df885a7baaff");

  }

  public void test409() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest0.test409");


    org.jsecurity.util.UnknownClassException var1 = new org.jsecurity.util.UnknownClassException("\u0000\u0000");

  }

  public void test410() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest0.test410");


    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      org.jsecurity.config.IniConfiguration var2 = new org.jsecurity.config.IniConfiguration("org.jsecurity.realm.SimpleAccountRealm-52-authorization", "b725e8cc-690c-495e-ac27-b1b425834793");
      fail("Expected exception of type org.jsecurity.config.ConfigurationException");
    } catch (org.jsecurity.config.ConfigurationException e) {
      // Expected exception.
    }

  }

  public void test411() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest0.test411");


    org.jsecurity.cache.ehcache.EhCacheManager var0 = new org.jsecurity.cache.ehcache.EhCacheManager();
    var0.init();
    var0.destroy();
    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      org.jsecurity.cache.Cache var4 = var0.getCache("classpath:org/jsecurity/cache/ehcache/ehcache.xml");
      fail("Expected exception of type java.lang.IllegalStateException");
    } catch (java.lang.IllegalStateException e) {
      // Expected exception.
    }

  }

  public void test412() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest0.test412");


    org.jsecurity.codec.CodecException var2 = new org.jsecurity.codec.CodecException("dd\uFFFD");
    org.jsecurity.authc.ConcurrentAccessException var3 = new org.jsecurity.authc.ConcurrentAccessException("org.jsecurity.authz.UnauthorizedException: org.jsecurity.session.ExpiredSessionException: ", (java.lang.Throwable)var2);
    org.jsecurity.subject.SimplePrincipalCollection var5 = new org.jsecurity.subject.SimplePrincipalCollection((java.lang.Object)var2, "");
    char[] var9 = new char[] { };
    org.jsecurity.authc.UsernamePasswordToken var11 = new org.jsecurity.authc.UsernamePasswordToken("hi!", var9, true);
    org.jsecurity.authc.UsernamePasswordToken var12 = new org.jsecurity.authc.UsernamePasswordToken("\u0000\u0000", var9);
    org.jsecurity.session.mgt.SimpleSession var13 = new org.jsecurity.session.mgt.SimpleSession();
    var13.setTimeout((-1L));
    org.jsecurity.session.mgt.SimpleSession var16 = new org.jsecurity.session.mgt.SimpleSession();
    java.util.Date var17 = var16.getLastAccessTime();
    var13.setLastAccessTime(var17);
    java.net.InetAddress var19 = var13.getHostAddress();
    var12.setInetAddress(var19);
    org.jsecurity.session.mgt.SimpleSession var21 = new org.jsecurity.session.mgt.SimpleSession();
    var21.setTimeout((-1L));
    org.jsecurity.session.mgt.SimpleSession var24 = new org.jsecurity.session.mgt.SimpleSession();
    java.util.Date var25 = var24.getLastAccessTime();
    var21.setLastAccessTime(var25);
    org.jsecurity.session.mgt.SimpleSession var27 = new org.jsecurity.session.mgt.SimpleSession();
    java.util.Date var28 = var27.getLastAccessTime();
    var21.setStopTimestamp(var28);
    org.jsecurity.mgt.DefaultSecurityManager var30 = new org.jsecurity.mgt.DefaultSecurityManager();
    org.jsecurity.authc.pam.AllSuccessfulModularAuthenticationStrategy var31 = new org.jsecurity.authc.pam.AllSuccessfulModularAuthenticationStrategy();
    org.jsecurity.authc.pam.AllSuccessfulModularAuthenticationStrategy var32 = new org.jsecurity.authc.pam.AllSuccessfulModularAuthenticationStrategy();
    char[] var34 = new char[] { };
    org.jsecurity.authc.UsernamePasswordToken var36 = new org.jsecurity.authc.UsernamePasswordToken("hi!", var34, true);
    org.jsecurity.authc.SimpleAccount var37 = new org.jsecurity.authc.SimpleAccount();
    var37.setCredentialsExpired(false);
    boolean var40 = var37.isLocked();
    org.jsecurity.authc.AuthenticationInfo var41 = var32.afterAllAttempts((org.jsecurity.authc.AuthenticationToken)var36, (org.jsecurity.authc.AuthenticationInfo)var37);
    char[] var45 = new char[] { '4', '#'};
    org.jsecurity.authc.UsernamePasswordToken var46 = new org.jsecurity.authc.UsernamePasswordToken("\u0000\u0000", var45);
    org.jsecurity.authc.SimpleAccount var47 = new org.jsecurity.authc.SimpleAccount();
    var47.setCredentialsExpired(false);
    var47.setCredentialsExpired(false);
    boolean var52 = var47.isCredentialsExpired();
    org.jsecurity.authc.AuthenticationInfo var53 = var32.afterAllAttempts((org.jsecurity.authc.AuthenticationToken)var46, (org.jsecurity.authc.AuthenticationInfo)var47);
    org.jsecurity.authz.UnauthenticatedException var57 = new org.jsecurity.authz.UnauthenticatedException();
    org.jsecurity.config.UnresolveableReferenceException var58 = new org.jsecurity.config.UnresolveableReferenceException("", (java.lang.Throwable)var57);
    org.jsecurity.cache.CacheException var59 = new org.jsecurity.cache.CacheException("org.jsecurity.config.ConfigurationException: dd\uFFFD", (java.lang.Throwable)var57);
    org.jsecurity.authc.SimpleAuthenticationInfo var61 = new org.jsecurity.authc.SimpleAuthenticationInfo((java.lang.Object)"org.jsecurity.config.ConfigurationException: dd\uFFFD", (java.lang.Object)var59, "a2b823b1e72eae2b727289df8a00a89df8a0bab6ad8a89c4c5c7a9b62a270000");
    org.jsecurity.subject.PrincipalCollection var62 = var61.getPrincipals();
    org.jsecurity.authc.AuthenticationInfo var63 = var31.afterAllAttempts((org.jsecurity.authc.AuthenticationToken)var46, (org.jsecurity.authc.AuthenticationInfo)var61);
    var30.setModularAuthenticationStrategy((org.jsecurity.authc.pam.ModularAuthenticationStrategy)var31);
    org.jsecurity.subject.RememberMeManager var65 = var30.getRememberMeManager();
    org.jsecurity.authc.pam.ModularRealmAuthenticator var66 = new org.jsecurity.authc.pam.ModularRealmAuthenticator();
    var30.setAuthenticator((org.jsecurity.authc.Authenticator)var66);
    org.jsecurity.codec.CodecException var70 = new org.jsecurity.codec.CodecException("dd\uFFFD");
    org.jsecurity.authc.ConcurrentAccessException var71 = new org.jsecurity.authc.ConcurrentAccessException("org.jsecurity.authz.UnauthorizedException: org.jsecurity.session.ExpiredSessionException: ", (java.lang.Throwable)var70);
    org.jsecurity.subject.SimplePrincipalCollection var73 = new org.jsecurity.subject.SimplePrincipalCollection((java.lang.Object)var70, "");
    java.io.InputStream var75 = org.jsecurity.util.ClassUtils.getResourceAsStream("");
    java.lang.Object[] var76 = new java.lang.Object[] { var75};
    java.util.List var77 = org.jsecurity.util.CollectionUtils.asList(var76);
    org.jsecurity.authc.pam.ModularRealmAuthenticator var78 = new org.jsecurity.authc.pam.ModularRealmAuthenticator(var77);
    var73.addAll((java.util.Collection)var77, "\u0000\u0000");
    org.jsecurity.authc.pam.FirstSuccessfulAuthenticationStrategy var81 = new org.jsecurity.authc.pam.FirstSuccessfulAuthenticationStrategy();
    org.jsecurity.authz.UnauthorizedException var83 = new org.jsecurity.authz.UnauthorizedException("org.jsecurity.config.ConfigurationException: dd\uFFFD");
    java.lang.Throwable[] var84 = var83.getSuppressed();
    java.util.List var85 = org.jsecurity.util.CollectionUtils.asList((java.lang.Object[])var84);
    org.jsecurity.authc.UsernamePasswordToken var86 = new org.jsecurity.authc.UsernamePasswordToken();
    java.lang.String var87 = var86.getUsername();
    java.net.InetAddress var88 = var86.getInetAddress();
    org.jsecurity.authc.AuthenticationInfo var89 = var81.beforeAllAttempts((java.util.Collection)var85, (org.jsecurity.authc.AuthenticationToken)var86);
    var30.checkPermissions((org.jsecurity.subject.PrincipalCollection)var73, (java.util.Collection)var85);
    org.jsecurity.subject.DelegatingSubject var91 = new org.jsecurity.subject.DelegatingSubject((org.jsecurity.subject.PrincipalCollection)var5, false, var19, (org.jsecurity.session.Session)var21, (org.jsecurity.mgt.SecurityManager)var30);
    java.lang.String[] var93 = org.jsecurity.util.StringUtils.split("org.jsecurity.config.ConfigurationException: dd\uFFFD");
    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      boolean[] var94 = var91.isPermitted(var93);
      fail("Expected exception of type java.util.NoSuchElementException");
    } catch (java.util.NoSuchElementException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var9);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var17);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var19);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var25);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var28);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var34);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var40 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var41);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var45);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var52 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var53);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var62);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var63);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var65);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var75);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var76);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var77);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var84);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var85);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var87);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var88);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var89);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var93);

  }

  public void test413() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest0.test413");


    org.jsecurity.mgt.DefaultSecurityManager var0 = new org.jsecurity.mgt.DefaultSecurityManager();
    java.io.InputStream var2 = org.jsecurity.util.ClassUtils.getResourceAsStream("");
    java.lang.Object[] var3 = new java.lang.Object[] { var2};
    java.util.List var4 = org.jsecurity.util.CollectionUtils.asList(var3);
    org.jsecurity.authc.pam.ModularRealmAuthenticator var5 = new org.jsecurity.authc.pam.ModularRealmAuthenticator(var4);
    org.jsecurity.authc.pam.AllSuccessfulModularAuthenticationStrategy var6 = new org.jsecurity.authc.pam.AllSuccessfulModularAuthenticationStrategy();
    var5.setModularAuthenticationStrategy((org.jsecurity.authc.pam.ModularAuthenticationStrategy)var6);
    org.jsecurity.authz.SimpleAuthorizationInfo var8 = new org.jsecurity.authz.SimpleAuthorizationInfo();
    var8.addStringPermission("hi!");
    java.io.InputStream var12 = org.jsecurity.util.ClassUtils.getResourceAsStream("");
    java.lang.Object[] var13 = new java.lang.Object[] { var12};
    java.util.List var14 = org.jsecurity.util.CollectionUtils.asList(var13);
    var8.addRoles((java.util.Collection)var14);
    var5.setAuthenticationListeners((java.util.Collection)var14);
    var0.setSessionListeners((java.util.Collection)var14);
    org.jsecurity.authc.pam.ModularRealmAuthenticator var18 = new org.jsecurity.authc.pam.ModularRealmAuthenticator();
    org.jsecurity.authz.permission.InvalidPermissionStringException var21 = new org.jsecurity.authz.permission.InvalidPermissionStringException("", "dd\uFFFD");
    org.jsecurity.JSecurityException var23 = new org.jsecurity.JSecurityException("");
    org.jsecurity.authc.SimpleAuthenticationInfo var25 = new org.jsecurity.authc.SimpleAuthenticationInfo((java.lang.Object)var21, (java.lang.Object)"", "org.jsecurity.authz.UnauthorizedException: org.jsecurity.session.ExpiredSessionException: ");
    org.jsecurity.subject.PrincipalCollection var26 = var25.getPrincipals();
    var18.onLogout(var26);
    var0.setAuthenticator((org.jsecurity.authc.Authenticator)var18);
    org.jsecurity.codec.CodecException var31 = new org.jsecurity.codec.CodecException("dd\uFFFD");
    org.jsecurity.authc.ConcurrentAccessException var32 = new org.jsecurity.authc.ConcurrentAccessException("org.jsecurity.authz.UnauthorizedException: org.jsecurity.session.ExpiredSessionException: ", (java.lang.Throwable)var31);
    org.jsecurity.subject.SimplePrincipalCollection var34 = new org.jsecurity.subject.SimplePrincipalCollection((java.lang.Object)var31, "");
    org.jsecurity.authc.pam.FirstSuccessfulAuthenticationStrategy var35 = new org.jsecurity.authc.pam.FirstSuccessfulAuthenticationStrategy();
    org.jsecurity.authz.UnauthorizedException var37 = new org.jsecurity.authz.UnauthorizedException("org.jsecurity.config.ConfigurationException: dd\uFFFD");
    java.lang.Throwable[] var38 = var37.getSuppressed();
    java.util.List var39 = org.jsecurity.util.CollectionUtils.asList((java.lang.Object[])var38);
    org.jsecurity.authc.UsernamePasswordToken var40 = new org.jsecurity.authc.UsernamePasswordToken();
    java.lang.String var41 = var40.getUsername();
    java.net.InetAddress var42 = var40.getInetAddress();
    org.jsecurity.authc.AuthenticationInfo var43 = var35.beforeAllAttempts((java.util.Collection)var39, (org.jsecurity.authc.AuthenticationToken)var40);
    org.jsecurity.session.UnknownSessionException var48 = new org.jsecurity.session.UnknownSessionException("dd\uFFFD", (java.io.Serializable)100.0f);
    org.jsecurity.subject.SubjectException var49 = new org.jsecurity.subject.SubjectException("dd\uFFFD", (java.lang.Throwable)var48);
    org.jsecurity.io.SerializationException var50 = new org.jsecurity.io.SerializationException("", (java.lang.Throwable)var49);
    java.lang.Throwable[] var51 = var49.getSuppressed();
    java.util.Set var52 = org.jsecurity.util.CollectionUtils.asSet((java.lang.Object[])var51);
    org.jsecurity.authc.SimpleAccount var53 = new org.jsecurity.authc.SimpleAccount((org.jsecurity.subject.PrincipalCollection)var34, (java.lang.Object)var39, var52);
    java.io.InputStream var55 = org.jsecurity.util.ClassUtils.getResourceAsStream("");
    java.lang.Object[] var56 = new java.lang.Object[] { var55};
    java.util.List var57 = org.jsecurity.util.CollectionUtils.asList(var56);
    org.jsecurity.authc.pam.ModularRealmAuthenticator var58 = new org.jsecurity.authc.pam.ModularRealmAuthenticator(var57);
    org.jsecurity.subject.SimplePrincipalCollection var60 = new org.jsecurity.subject.SimplePrincipalCollection((java.util.Collection)var57, "org.jsecurity.authz.UnauthorizedException: org.jsecurity.session.ExpiredSessionException: ");
    org.jsecurity.io.ResourceException var64 = new org.jsecurity.io.ResourceException("hi!");
    org.jsecurity.authc.UnknownAccountException var65 = new org.jsecurity.authc.UnknownAccountException((java.lang.Throwable)var64);
    org.jsecurity.session.StoppedSessionException var66 = new org.jsecurity.session.StoppedSessionException("dd\uFFFD", (java.io.Serializable)var64);
    org.jsecurity.session.UnknownSessionException var67 = new org.jsecurity.session.UnknownSessionException("org.jsecurity.authz.UnauthorizedException: org.jsecurity.session.ExpiredSessionException: ", (java.lang.Throwable)var64);
    boolean var68 = var60.equals((java.lang.Object)var64);
    var34.addAll((org.jsecurity.subject.PrincipalCollection)var60);
    org.jsecurity.session.UnknownSessionException var74 = new org.jsecurity.session.UnknownSessionException("dd\uFFFD", (java.io.Serializable)100.0f);
    org.jsecurity.subject.SubjectException var75 = new org.jsecurity.subject.SubjectException("dd\uFFFD", (java.lang.Throwable)var74);
    org.jsecurity.io.SerializationException var76 = new org.jsecurity.io.SerializationException("", (java.lang.Throwable)var75);
    java.lang.Throwable[] var77 = var75.getSuppressed();
    java.util.List var78 = org.jsecurity.util.CollectionUtils.asList((java.lang.Object[])var77);
    boolean var79 = var0.isPermittedAll((org.jsecurity.subject.PrincipalCollection)var34, (java.util.Collection)var78);
    org.jsecurity.subject.DelegatingSubject var80 = new org.jsecurity.subject.DelegatingSubject((org.jsecurity.mgt.SecurityManager)var0);
    var80.logout();
    java.lang.String[] var86 = org.jsecurity.util.StringUtils.split("org.jsecurity.config.ConfigurationException: dd\uFFFD", '4', '4', '4');
    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      var80.checkPermissions(var86);
      fail("Expected exception of type org.jsecurity.authz.UnauthenticatedException");
    } catch (org.jsecurity.authz.UnauthenticatedException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var2);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var3);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var4);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var12);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var13);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var14);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var26);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var38);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var39);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var41);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var42);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var43);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var51);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var52);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var55);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var56);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var57);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var68 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var77);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var78);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var79 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var86);

  }

  public void test414() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest0.test414");


    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      java.io.InputStream var1 = org.jsecurity.io.ResourceUtils.getInputStreamForPath("org.jsecurity.authc.IncorrectCredentialsException: \u0000\u0000");
      fail("Expected exception of type java.io.FileNotFoundException");
    } catch (java.io.FileNotFoundException e) {
      // Expected exception.
    }

  }

  public void test415() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest0.test415");


    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      org.jsecurity.crypto.hash.Md2Hash var1 = org.jsecurity.crypto.hash.Md2Hash.fromHexString("63bbad34-48e1-408f-9551-a8a0ca6e6734");
      fail("Expected exception of type java.lang.IllegalArgumentException");
    } catch (java.lang.IllegalArgumentException e) {
      // Expected exception.
    }

  }

  public void test416() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest0.test416");


    org.jsecurity.codec.CodecException var2 = new org.jsecurity.codec.CodecException("dd\uFFFD");
    org.jsecurity.authc.ConcurrentAccessException var3 = new org.jsecurity.authc.ConcurrentAccessException("org.jsecurity.authz.UnauthorizedException: org.jsecurity.session.ExpiredSessionException: ", (java.lang.Throwable)var2);
    org.jsecurity.subject.SimplePrincipalCollection var5 = new org.jsecurity.subject.SimplePrincipalCollection((java.lang.Object)var2, "");
    org.jsecurity.authc.pam.FirstSuccessfulAuthenticationStrategy var6 = new org.jsecurity.authc.pam.FirstSuccessfulAuthenticationStrategy();
    org.jsecurity.authz.UnauthorizedException var8 = new org.jsecurity.authz.UnauthorizedException("org.jsecurity.config.ConfigurationException: dd\uFFFD");
    java.lang.Throwable[] var9 = var8.getSuppressed();
    java.util.List var10 = org.jsecurity.util.CollectionUtils.asList((java.lang.Object[])var9);
    org.jsecurity.authc.UsernamePasswordToken var11 = new org.jsecurity.authc.UsernamePasswordToken();
    java.lang.String var12 = var11.getUsername();
    java.net.InetAddress var13 = var11.getInetAddress();
    org.jsecurity.authc.AuthenticationInfo var14 = var6.beforeAllAttempts((java.util.Collection)var10, (org.jsecurity.authc.AuthenticationToken)var11);
    org.jsecurity.session.UnknownSessionException var19 = new org.jsecurity.session.UnknownSessionException("dd\uFFFD", (java.io.Serializable)100.0f);
    org.jsecurity.subject.SubjectException var20 = new org.jsecurity.subject.SubjectException("dd\uFFFD", (java.lang.Throwable)var19);
    org.jsecurity.io.SerializationException var21 = new org.jsecurity.io.SerializationException("", (java.lang.Throwable)var20);
    java.lang.Throwable[] var22 = var20.getSuppressed();
    java.util.Set var23 = org.jsecurity.util.CollectionUtils.asSet((java.lang.Object[])var22);
    org.jsecurity.authc.SimpleAccount var24 = new org.jsecurity.authc.SimpleAccount((org.jsecurity.subject.PrincipalCollection)var5, (java.lang.Object)var10, var23);
    var24.addStringPermission("org.jsecurity.config.ConfigurationException: dd\uFFFD");
    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      var24.addRole("b725e8cc-690c-495e-ac27-b1b425834793");
      fail("Expected exception of type java.lang.UnsupportedOperationException");
    } catch (java.lang.UnsupportedOperationException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var9);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var10);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var12);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var13);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var14);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var22);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var23);

  }

  public void test417() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest0.test417");


    org.jsecurity.cache.HashtableCache var1 = new org.jsecurity.cache.HashtableCache("\u0000\u0000\u0000");
    org.jsecurity.realm.text.TextConfigurationRealm var2 = new org.jsecurity.realm.text.TextConfigurationRealm();
    java.io.InputStream var4 = org.jsecurity.util.ClassUtils.getResourceAsStream("");
    java.lang.Object[] var5 = new java.lang.Object[] { var4};
    java.util.List var6 = org.jsecurity.util.CollectionUtils.asList(var5);
    org.jsecurity.authc.pam.ModularRealmAuthenticator var7 = new org.jsecurity.authc.pam.ModularRealmAuthenticator(var6);
    org.jsecurity.subject.SimplePrincipalCollection var9 = new org.jsecurity.subject.SimplePrincipalCollection((java.util.Collection)var6, "org.jsecurity.authz.UnauthorizedException: org.jsecurity.session.ExpiredSessionException: ");
    org.jsecurity.session.UnknownSessionException var14 = new org.jsecurity.session.UnknownSessionException("dd\uFFFD", (java.io.Serializable)100.0f);
    org.jsecurity.session.SessionException var16 = new org.jsecurity.session.SessionException("dd\uFFFD", (java.lang.Throwable)var14, (java.io.Serializable)0);
    org.jsecurity.session.SessionException var17 = new org.jsecurity.session.SessionException("dd\uFFFD", (java.lang.Throwable)var14);
    var9.add((java.lang.Object)var17, "org.jsecurity.config.ConfigurationException: dd\uFFFD");
    var2.onLogout((org.jsecurity.subject.PrincipalCollection)var9);
    org.jsecurity.authc.ExpiredCredentialsException var22 = new org.jsecurity.authc.ExpiredCredentialsException();
    org.jsecurity.session.ExpiredSessionException var23 = new org.jsecurity.session.ExpiredSessionException("", (java.lang.Throwable)var22);
    java.lang.Throwable[] var24 = var23.getSuppressed();
    org.jsecurity.io.ResourceException var25 = new org.jsecurity.io.ResourceException((java.lang.Throwable)var23);
    org.jsecurity.authc.SimpleAuthenticationInfo var26 = new org.jsecurity.authc.SimpleAuthenticationInfo((org.jsecurity.subject.PrincipalCollection)var9, (java.lang.Object)var23);
    org.jsecurity.codec.CodecException var29 = new org.jsecurity.codec.CodecException("dd\uFFFD");
    org.jsecurity.authc.ConcurrentAccessException var30 = new org.jsecurity.authc.ConcurrentAccessException("org.jsecurity.authz.UnauthorizedException: org.jsecurity.session.ExpiredSessionException: ", (java.lang.Throwable)var29);
    org.jsecurity.subject.SimplePrincipalCollection var32 = new org.jsecurity.subject.SimplePrincipalCollection((java.lang.Object)var29, "");
    java.io.InputStream var34 = org.jsecurity.util.ClassUtils.getResourceAsStream("");
    java.lang.Object[] var35 = new java.lang.Object[] { var34};
    java.util.List var36 = org.jsecurity.util.CollectionUtils.asList(var35);
    org.jsecurity.authc.pam.ModularRealmAuthenticator var37 = new org.jsecurity.authc.pam.ModularRealmAuthenticator(var36);
    var32.addAll((java.util.Collection)var36, "\u0000\u0000");
    org.jsecurity.authz.UnauthorizedException var41 = new org.jsecurity.authz.UnauthorizedException();
    org.jsecurity.session.SessionException var43 = new org.jsecurity.session.SessionException("", (java.lang.Throwable)var41, (java.io.Serializable)"org.jsecurity.config.ConfigurationException: dd\uFFFD");
    org.jsecurity.crypto.hash.Sha1Hash var44 = new org.jsecurity.crypto.hash.Sha1Hash((java.lang.Object)"");
    org.jsecurity.session.UnknownSessionException var49 = new org.jsecurity.session.UnknownSessionException("dd\uFFFD", (java.io.Serializable)100.0f);
    org.jsecurity.subject.SubjectException var50 = new org.jsecurity.subject.SubjectException("dd\uFFFD", (java.lang.Throwable)var49);
    org.jsecurity.io.SerializationException var51 = new org.jsecurity.io.SerializationException("", (java.lang.Throwable)var50);
    java.lang.Throwable[] var52 = var50.getSuppressed();
    java.util.Set var53 = org.jsecurity.util.CollectionUtils.asSet((java.lang.Object[])var52);
    org.jsecurity.authz.SimpleAuthorizationInfo var55 = new org.jsecurity.authz.SimpleAuthorizationInfo();
    org.jsecurity.session.UnknownSessionException var60 = new org.jsecurity.session.UnknownSessionException("dd\uFFFD", (java.io.Serializable)100.0f);
    org.jsecurity.subject.SubjectException var61 = new org.jsecurity.subject.SubjectException("dd\uFFFD", (java.lang.Throwable)var60);
    org.jsecurity.io.SerializationException var62 = new org.jsecurity.io.SerializationException("", (java.lang.Throwable)var61);
    java.lang.Throwable[] var63 = var61.getSuppressed();
    java.util.Set var64 = org.jsecurity.util.CollectionUtils.asSet((java.lang.Object[])var63);
    var55.setStringPermissions(var64);
    java.util.Set var66 = var55.getRoles();
    org.jsecurity.authz.SimpleAuthorizationInfo var67 = new org.jsecurity.authz.SimpleAuthorizationInfo();
    var67.addRole("a2b823b1e72eae2b727289df8a00a89df8a0bab6ad8a89c4c5c7a9b62a270000");
    org.jsecurity.session.UnknownSessionException var74 = new org.jsecurity.session.UnknownSessionException("dd\uFFFD", (java.io.Serializable)100.0f);
    org.jsecurity.subject.SubjectException var75 = new org.jsecurity.subject.SubjectException("dd\uFFFD", (java.lang.Throwable)var74);
    org.jsecurity.io.SerializationException var76 = new org.jsecurity.io.SerializationException("", (java.lang.Throwable)var75);
    java.lang.Throwable[] var77 = var75.getSuppressed();
    java.util.Set var78 = org.jsecurity.util.CollectionUtils.asSet((java.lang.Object[])var77);
    var67.addRoles((java.util.Collection)var78);
    var55.setRoles(var78);
    org.jsecurity.authz.SimpleRole var81 = new org.jsecurity.authz.SimpleRole("org.jsecurity.authz.UnauthorizedException: org.jsecurity.session.ExpiredSessionException: ", var78);
    org.jsecurity.authc.SimpleAccount var82 = new org.jsecurity.authc.SimpleAccount((org.jsecurity.subject.PrincipalCollection)var32, (java.lang.Object)"", var53, var78);
    var26.setPrincipals((org.jsecurity.subject.PrincipalCollection)var32);
    java.lang.String[] var87 = org.jsecurity.util.StringUtils.split("dd\uFFFD", '4', 'a');
    var1.put((java.lang.Object)var32, (java.lang.Object)'a');
    org.jsecurity.util.UnavailableConstructorException var90 = new org.jsecurity.util.UnavailableConstructorException("org.jsecurity.authc.CredentialsException: 783ccd31-48a8-42dd-890f-df885a7baaff");
    org.jsecurity.authc.IncorrectCredentialsException var91 = new org.jsecurity.authc.IncorrectCredentialsException((java.lang.Throwable)var90);
    java.lang.Object var92 = var1.get((java.lang.Object)var90);
    org.jsecurity.session.mgt.eis.MemorySessionDAO var93 = new org.jsecurity.session.mgt.eis.MemorySessionDAO();
    org.jsecurity.cache.Cache var94 = var93.getActiveSessionsCache();
    org.jsecurity.cache.CacheManager var95 = var93.getCacheManager();
    var1.remove((java.lang.Object)var93);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var4);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var5);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var6);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var24);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var34);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var35);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var36);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var52);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var53);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var63);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var64);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var66);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var77);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var78);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var87);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var92);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var94);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var95);

  }

  public void test418() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest0.test418");


    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      java.lang.String[] var1 = org.jsecurity.util.StringUtils.splitKeyValue("7edc3e5f-37f7-4a22-9779-4609545bccd8");
      fail("Expected exception of type java.text.ParseException");
    } catch (java.text.ParseException e) {
      // Expected exception.
    }

  }

  public void test419() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest0.test419");


    org.jsecurity.crypto.hash.Md2Hash var1 = org.jsecurity.crypto.hash.Md2Hash.fromBase64String("a2b823b1e72eae2b727289df8a00a89df8a0bab6ad8a89c4c5c7a9b62a270000");
    org.jsecurity.authc.credential.Md2CredentialsMatcher var2 = new org.jsecurity.authc.credential.Md2CredentialsMatcher();
    org.jsecurity.authz.SimpleAuthorizingAccount var4 = new org.jsecurity.authz.SimpleAuthorizingAccount((java.lang.Object)"a2b823b1e72eae2b727289df8a00a89df8a0bab6ad8a89c4c5c7a9b62a270000", (java.lang.Object)var2, "");
    org.jsecurity.authz.SimpleAuthorizationInfo var5 = new org.jsecurity.authz.SimpleAuthorizationInfo();
    java.util.Set var6 = var5.getStringPermissions();
    org.jsecurity.authz.SimpleAuthorizationInfo var8 = new org.jsecurity.authz.SimpleAuthorizationInfo();
    org.jsecurity.session.UnknownSessionException var13 = new org.jsecurity.session.UnknownSessionException("dd\uFFFD", (java.io.Serializable)100.0f);
    org.jsecurity.subject.SubjectException var14 = new org.jsecurity.subject.SubjectException("dd\uFFFD", (java.lang.Throwable)var13);
    org.jsecurity.io.SerializationException var15 = new org.jsecurity.io.SerializationException("", (java.lang.Throwable)var14);
    java.lang.Throwable[] var16 = var14.getSuppressed();
    java.util.Set var17 = org.jsecurity.util.CollectionUtils.asSet((java.lang.Object[])var16);
    var8.setStringPermissions(var17);
    java.util.Set var19 = var8.getRoles();
    org.jsecurity.authz.SimpleAuthorizationInfo var20 = new org.jsecurity.authz.SimpleAuthorizationInfo();
    var20.addRole("a2b823b1e72eae2b727289df8a00a89df8a0bab6ad8a89c4c5c7a9b62a270000");
    org.jsecurity.session.UnknownSessionException var27 = new org.jsecurity.session.UnknownSessionException("dd\uFFFD", (java.io.Serializable)100.0f);
    org.jsecurity.subject.SubjectException var28 = new org.jsecurity.subject.SubjectException("dd\uFFFD", (java.lang.Throwable)var27);
    org.jsecurity.io.SerializationException var29 = new org.jsecurity.io.SerializationException("", (java.lang.Throwable)var28);
    java.lang.Throwable[] var30 = var28.getSuppressed();
    java.util.Set var31 = org.jsecurity.util.CollectionUtils.asSet((java.lang.Object[])var30);
    var20.addRoles((java.util.Collection)var31);
    var8.setRoles(var31);
    org.jsecurity.authz.SimpleRole var34 = new org.jsecurity.authz.SimpleRole("org.jsecurity.authz.UnauthorizedException: org.jsecurity.session.ExpiredSessionException: ", var31);
    var5.addStringPermissions((java.util.Collection)var31);
    boolean var36 = var4.isPermittedAll((java.util.Collection)var31);
    boolean var37 = var4.isCredentialsExpired();
    org.jsecurity.session.UnknownSessionException var42 = new org.jsecurity.session.UnknownSessionException("dd\uFFFD", (java.io.Serializable)100.0f);
    org.jsecurity.subject.SubjectException var43 = new org.jsecurity.subject.SubjectException("dd\uFFFD", (java.lang.Throwable)var42);
    org.jsecurity.io.SerializationException var44 = new org.jsecurity.io.SerializationException("", (java.lang.Throwable)var43);
    java.lang.Throwable[] var45 = var43.getSuppressed();
    java.lang.Throwable[] var46 = var43.getSuppressed();
    org.jsecurity.authz.SimpleAuthorizationInfo var49 = new org.jsecurity.authz.SimpleAuthorizationInfo();
    var49.addRole("a2b823b1e72eae2b727289df8a00a89df8a0bab6ad8a89c4c5c7a9b62a270000");
    org.jsecurity.session.UnknownSessionException var56 = new org.jsecurity.session.UnknownSessionException("dd\uFFFD", (java.io.Serializable)100.0f);
    org.jsecurity.subject.SubjectException var57 = new org.jsecurity.subject.SubjectException("dd\uFFFD", (java.lang.Throwable)var56);
    org.jsecurity.io.SerializationException var58 = new org.jsecurity.io.SerializationException("", (java.lang.Throwable)var57);
    java.lang.Throwable[] var59 = var57.getSuppressed();
    java.util.Set var60 = org.jsecurity.util.CollectionUtils.asSet((java.lang.Object[])var59);
    var49.addRoles((java.util.Collection)var60);
    java.io.InputStream var63 = org.jsecurity.util.ClassUtils.getResourceAsStream("");
    java.lang.Object[] var64 = new java.lang.Object[] { var63};
    java.util.List var65 = org.jsecurity.util.CollectionUtils.asList(var64);
    org.jsecurity.authc.pam.ModularRealmAuthenticator var66 = new org.jsecurity.authc.pam.ModularRealmAuthenticator(var65);
    org.jsecurity.subject.SimplePrincipalCollection var68 = new org.jsecurity.subject.SimplePrincipalCollection((java.util.Collection)var65, "org.jsecurity.authz.UnauthorizedException: org.jsecurity.session.ExpiredSessionException: ");
    org.jsecurity.session.UnknownSessionException var73 = new org.jsecurity.session.UnknownSessionException("dd\uFFFD", (java.io.Serializable)100.0f);
    org.jsecurity.session.SessionException var75 = new org.jsecurity.session.SessionException("dd\uFFFD", (java.lang.Throwable)var73, (java.io.Serializable)0);
    org.jsecurity.session.SessionException var76 = new org.jsecurity.session.SessionException("dd\uFFFD", (java.lang.Throwable)var73);
    var68.add((java.lang.Object)var76, "org.jsecurity.config.ConfigurationException: dd\uFFFD");
    java.util.Set var79 = var68.asSet();
    org.jsecurity.authz.SimpleAuthorizingAccount var80 = new org.jsecurity.authz.SimpleAuthorizingAccount((java.lang.Object)var46, (java.lang.Object)"\u0000\u0000\u0000", "\u0000\u0000\u0000", var60, var79);
    org.jsecurity.authz.SimpleRole var82 = var80.getRole("\u0000\u0000\u0000");
    java.util.Set var83 = var80.getPermissions();
    var4.addAll((java.util.Collection)var83);
    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      var4.checkRole("\u0000\u0000\u0000");
      fail("Expected exception of type java.lang.ClassCastException");
    } catch (java.lang.ClassCastException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var1);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var6);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var16);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var17);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var19);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var30);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var31);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var36 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var37 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var45);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var46);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var59);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var60);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var63);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var64);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var65);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var79);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var82);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var83);

  }

  public void test420() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest0.test420");


    org.jsecurity.authz.SimpleAuthorizationInfo var0 = new org.jsecurity.authz.SimpleAuthorizationInfo();
    var0.addRole("a2b823b1e72eae2b727289df8a00a89df8a0bab6ad8a89c4c5c7a9b62a270000");
    org.jsecurity.session.UnknownSessionException var7 = new org.jsecurity.session.UnknownSessionException("dd\uFFFD", (java.io.Serializable)100.0f);
    org.jsecurity.subject.SubjectException var8 = new org.jsecurity.subject.SubjectException("dd\uFFFD", (java.lang.Throwable)var7);
    org.jsecurity.io.SerializationException var9 = new org.jsecurity.io.SerializationException("", (java.lang.Throwable)var8);
    java.lang.Throwable[] var10 = var8.getSuppressed();
    java.util.Set var11 = org.jsecurity.util.CollectionUtils.asSet((java.lang.Object[])var10);
    var0.addRoles((java.util.Collection)var11);
    java.util.Set var13 = var0.getStringPermissions();
    org.jsecurity.mgt.DefaultSecurityManager var14 = new org.jsecurity.mgt.DefaultSecurityManager();
    org.jsecurity.authc.pam.AllSuccessfulModularAuthenticationStrategy var15 = new org.jsecurity.authc.pam.AllSuccessfulModularAuthenticationStrategy();
    org.jsecurity.authc.pam.AllSuccessfulModularAuthenticationStrategy var16 = new org.jsecurity.authc.pam.AllSuccessfulModularAuthenticationStrategy();
    char[] var18 = new char[] { };
    org.jsecurity.authc.UsernamePasswordToken var20 = new org.jsecurity.authc.UsernamePasswordToken("hi!", var18, true);
    org.jsecurity.authc.SimpleAccount var21 = new org.jsecurity.authc.SimpleAccount();
    var21.setCredentialsExpired(false);
    boolean var24 = var21.isLocked();
    org.jsecurity.authc.AuthenticationInfo var25 = var16.afterAllAttempts((org.jsecurity.authc.AuthenticationToken)var20, (org.jsecurity.authc.AuthenticationInfo)var21);
    char[] var29 = new char[] { '4', '#'};
    org.jsecurity.authc.UsernamePasswordToken var30 = new org.jsecurity.authc.UsernamePasswordToken("\u0000\u0000", var29);
    org.jsecurity.authc.SimpleAccount var31 = new org.jsecurity.authc.SimpleAccount();
    var31.setCredentialsExpired(false);
    var31.setCredentialsExpired(false);
    boolean var36 = var31.isCredentialsExpired();
    org.jsecurity.authc.AuthenticationInfo var37 = var16.afterAllAttempts((org.jsecurity.authc.AuthenticationToken)var30, (org.jsecurity.authc.AuthenticationInfo)var31);
    org.jsecurity.authz.UnauthenticatedException var41 = new org.jsecurity.authz.UnauthenticatedException();
    org.jsecurity.config.UnresolveableReferenceException var42 = new org.jsecurity.config.UnresolveableReferenceException("", (java.lang.Throwable)var41);
    org.jsecurity.cache.CacheException var43 = new org.jsecurity.cache.CacheException("org.jsecurity.config.ConfigurationException: dd\uFFFD", (java.lang.Throwable)var41);
    org.jsecurity.authc.SimpleAuthenticationInfo var45 = new org.jsecurity.authc.SimpleAuthenticationInfo((java.lang.Object)"org.jsecurity.config.ConfigurationException: dd\uFFFD", (java.lang.Object)var43, "a2b823b1e72eae2b727289df8a00a89df8a0bab6ad8a89c4c5c7a9b62a270000");
    org.jsecurity.subject.PrincipalCollection var46 = var45.getPrincipals();
    org.jsecurity.authc.AuthenticationInfo var47 = var15.afterAllAttempts((org.jsecurity.authc.AuthenticationToken)var30, (org.jsecurity.authc.AuthenticationInfo)var45);
    var14.setModularAuthenticationStrategy((org.jsecurity.authc.pam.ModularAuthenticationStrategy)var15);
    org.jsecurity.session.mgt.SessionManager var49 = var14.getSessionManager();
    org.jsecurity.authz.SimpleAuthorizationInfo var50 = new org.jsecurity.authz.SimpleAuthorizationInfo();
    var50.addRole("a2b823b1e72eae2b727289df8a00a89df8a0bab6ad8a89c4c5c7a9b62a270000");
    org.jsecurity.authz.SimpleAuthorizationInfo var53 = new org.jsecurity.authz.SimpleAuthorizationInfo();
    var53.addRole("a2b823b1e72eae2b727289df8a00a89df8a0bab6ad8a89c4c5c7a9b62a270000");
    org.jsecurity.session.UnknownSessionException var60 = new org.jsecurity.session.UnknownSessionException("dd\uFFFD", (java.io.Serializable)100.0f);
    org.jsecurity.subject.SubjectException var61 = new org.jsecurity.subject.SubjectException("dd\uFFFD", (java.lang.Throwable)var60);
    org.jsecurity.io.SerializationException var62 = new org.jsecurity.io.SerializationException("", (java.lang.Throwable)var61);
    java.lang.Throwable[] var63 = var61.getSuppressed();
    java.util.Set var64 = org.jsecurity.util.CollectionUtils.asSet((java.lang.Object[])var63);
    var53.addRoles((java.util.Collection)var64);
    var50.setObjectPermissions(var64);
    java.io.InputStream var68 = org.jsecurity.util.ClassUtils.getResourceAsStream("");
    java.lang.Object[] var69 = new java.lang.Object[] { var68};
    java.util.List var70 = org.jsecurity.util.CollectionUtils.asList(var69);
    org.jsecurity.authc.pam.ModularRealmAuthenticator var71 = new org.jsecurity.authc.pam.ModularRealmAuthenticator(var70);
    org.jsecurity.subject.SimplePrincipalCollection var73 = new org.jsecurity.subject.SimplePrincipalCollection((java.util.Collection)var70, "org.jsecurity.authz.UnauthorizedException: org.jsecurity.session.ExpiredSessionException: ");
    java.util.Set var74 = var73.getRealmNames();
    java.io.InputStream var76 = org.jsecurity.util.ClassUtils.getResourceAsStream("");
    java.lang.Object[] var77 = new java.lang.Object[] { var76};
    java.util.List var78 = org.jsecurity.util.CollectionUtils.asList(var77);
    org.jsecurity.authc.pam.ModularRealmAuthenticator var79 = new org.jsecurity.authc.pam.ModularRealmAuthenticator(var78);
    org.jsecurity.subject.SimplePrincipalCollection var81 = new org.jsecurity.subject.SimplePrincipalCollection((java.util.Collection)var78, "org.jsecurity.authz.UnauthorizedException: org.jsecurity.session.ExpiredSessionException: ");
    org.jsecurity.session.UnknownSessionException var86 = new org.jsecurity.session.UnknownSessionException("dd\uFFFD", (java.io.Serializable)100.0f);
    org.jsecurity.session.SessionException var88 = new org.jsecurity.session.SessionException("dd\uFFFD", (java.lang.Throwable)var86, (java.io.Serializable)0);
    org.jsecurity.session.SessionException var89 = new org.jsecurity.session.SessionException("dd\uFFFD", (java.lang.Throwable)var86);
    var81.add((java.lang.Object)var89, "org.jsecurity.config.ConfigurationException: dd\uFFFD");
    java.util.Set var92 = var81.asSet();
    var73.addAll((java.util.Collection)var92, "6464ff");
    var50.setStringPermissions(var92);
    org.jsecurity.subject.SimplePrincipalCollection var97 = new org.jsecurity.subject.SimplePrincipalCollection((java.util.Collection)var92, "\u0000\u0000");
    var14.setSessionListeners((java.util.Collection)var92);
    var0.addObjectPermissions((java.util.Collection)var92);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var10);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var11);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var13);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var18);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var24 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var25);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var29);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var36 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var37);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var46);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var47);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var49);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var63);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var64);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var68);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var69);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var70);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var74);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var76);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var77);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var78);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var92);

  }

  public void test421() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest0.test421");


    org.jsecurity.mgt.DefaultSecurityManager var0 = new org.jsecurity.mgt.DefaultSecurityManager();
    java.io.InputStream var2 = org.jsecurity.util.ClassUtils.getResourceAsStream("");
    java.lang.Object[] var3 = new java.lang.Object[] { var2};
    java.util.List var4 = org.jsecurity.util.CollectionUtils.asList(var3);
    org.jsecurity.authc.pam.ModularRealmAuthenticator var5 = new org.jsecurity.authc.pam.ModularRealmAuthenticator(var4);
    org.jsecurity.authc.pam.AllSuccessfulModularAuthenticationStrategy var6 = new org.jsecurity.authc.pam.AllSuccessfulModularAuthenticationStrategy();
    var5.setModularAuthenticationStrategy((org.jsecurity.authc.pam.ModularAuthenticationStrategy)var6);
    org.jsecurity.authz.SimpleAuthorizationInfo var8 = new org.jsecurity.authz.SimpleAuthorizationInfo();
    var8.addStringPermission("hi!");
    java.io.InputStream var12 = org.jsecurity.util.ClassUtils.getResourceAsStream("");
    java.lang.Object[] var13 = new java.lang.Object[] { var12};
    java.util.List var14 = org.jsecurity.util.CollectionUtils.asList(var13);
    var8.addRoles((java.util.Collection)var14);
    var5.setAuthenticationListeners((java.util.Collection)var14);
    var0.setSessionListeners((java.util.Collection)var14);
    java.io.InputStream var19 = org.jsecurity.util.ClassUtils.getResourceAsStream("");
    java.lang.Object[] var20 = new java.lang.Object[] { var19};
    java.util.List var21 = org.jsecurity.util.CollectionUtils.asList(var20);
    org.jsecurity.authc.pam.ModularRealmAuthenticator var22 = new org.jsecurity.authc.pam.ModularRealmAuthenticator(var21);
    org.jsecurity.authc.pam.AllSuccessfulModularAuthenticationStrategy var23 = new org.jsecurity.authc.pam.AllSuccessfulModularAuthenticationStrategy();
    var22.setModularAuthenticationStrategy((org.jsecurity.authc.pam.ModularAuthenticationStrategy)var23);
    org.jsecurity.authz.SimpleAuthorizationInfo var25 = new org.jsecurity.authz.SimpleAuthorizationInfo();
    var25.addStringPermission("hi!");
    java.io.InputStream var29 = org.jsecurity.util.ClassUtils.getResourceAsStream("");
    java.lang.Object[] var30 = new java.lang.Object[] { var29};
    java.util.List var31 = org.jsecurity.util.CollectionUtils.asList(var30);
    var25.addRoles((java.util.Collection)var31);
    var22.setAuthenticationListeners((java.util.Collection)var31);
    org.jsecurity.realm.activedirectory.ActiveDirectoryRealm var34 = new org.jsecurity.realm.activedirectory.ActiveDirectoryRealm();
    var34.setPrincipalSuffix("");
    var22.setRealm((org.jsecurity.realm.Realm)var34);
    org.jsecurity.cache.HashtableCacheManager var38 = new org.jsecurity.cache.HashtableCacheManager();
    org.jsecurity.cache.Cache var40 = var38.getCache("\u0000\u0000");
    var34.setAuthorizationCache(var40);
    var0.setRealm((org.jsecurity.realm.Realm)var34);
    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      var0.setRememberMeCipherKeyBase64("b598ff3d-5685-4491-8ee6-585d37adb1db");
      fail("Expected exception of type java.lang.IllegalStateException");
    } catch (java.lang.IllegalStateException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var2);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var3);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var4);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var12);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var13);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var14);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var19);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var20);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var21);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var29);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var30);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var31);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var40);

  }

  public void test422() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest0.test422");


    boolean var2 = org.jsecurity.util.StringUtils.startsWithIgnoreCase("org.jsecurity.authc.CredentialsException: 783ccd31-48a8-42dd-890f-df885a7baaff", "org.jsecurity.authc.AccountException: hi!");
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var2 == false);

  }

  public void test423() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest0.test423");


    org.jsecurity.session.UnknownSessionException var5 = new org.jsecurity.session.UnknownSessionException("dd\uFFFD", (java.io.Serializable)100.0f);
    org.jsecurity.subject.SubjectException var6 = new org.jsecurity.subject.SubjectException("dd\uFFFD", (java.lang.Throwable)var5);
    org.jsecurity.session.InvalidSessionException var7 = new org.jsecurity.session.InvalidSessionException("hi!", (java.lang.Throwable)var6);
    org.jsecurity.session.InvalidSessionException var8 = new org.jsecurity.session.InvalidSessionException((java.lang.Throwable)var7);
    org.jsecurity.session.StoppedSessionException var10 = new org.jsecurity.session.StoppedSessionException("org.jsecurity.authz.UnauthorizedException: org.jsecurity.session.ExpiredSessionException: ", (java.lang.Throwable)var8, (java.io.Serializable)(-1.0d));

  }

  public void test424() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest0.test424");


    org.jsecurity.realm.text.TextConfigurationRealm var0 = new org.jsecurity.realm.text.TextConfigurationRealm();
    org.jsecurity.realm.text.TextConfigurationRealm var1 = new org.jsecurity.realm.text.TextConfigurationRealm();
    java.io.InputStream var3 = org.jsecurity.util.ClassUtils.getResourceAsStream("");
    java.lang.Object[] var4 = new java.lang.Object[] { var3};
    java.util.List var5 = org.jsecurity.util.CollectionUtils.asList(var4);
    org.jsecurity.authc.pam.ModularRealmAuthenticator var6 = new org.jsecurity.authc.pam.ModularRealmAuthenticator(var5);
    org.jsecurity.subject.SimplePrincipalCollection var8 = new org.jsecurity.subject.SimplePrincipalCollection((java.util.Collection)var5, "org.jsecurity.authz.UnauthorizedException: org.jsecurity.session.ExpiredSessionException: ");
    org.jsecurity.session.UnknownSessionException var13 = new org.jsecurity.session.UnknownSessionException("dd\uFFFD", (java.io.Serializable)100.0f);
    org.jsecurity.session.SessionException var15 = new org.jsecurity.session.SessionException("dd\uFFFD", (java.lang.Throwable)var13, (java.io.Serializable)0);
    org.jsecurity.session.SessionException var16 = new org.jsecurity.session.SessionException("dd\uFFFD", (java.lang.Throwable)var13);
    var8.add((java.lang.Object)var16, "org.jsecurity.config.ConfigurationException: dd\uFFFD");
    var1.onLogout((org.jsecurity.subject.PrincipalCollection)var8);
    java.util.Collection var21 = var8.fromRealm("\u0000\u0000\u0000");
    var0.onLogout((org.jsecurity.subject.PrincipalCollection)var8);
    java.util.Set var23 = var8.asSet();
    org.jsecurity.authz.ModularRealmAuthorizer var24 = new org.jsecurity.authz.ModularRealmAuthorizer((java.util.Collection)var23);
    org.jsecurity.mgt.DefaultSecurityManager var25 = new org.jsecurity.mgt.DefaultSecurityManager();
    java.io.InputStream var27 = org.jsecurity.util.ClassUtils.getResourceAsStream("");
    java.lang.Object[] var28 = new java.lang.Object[] { var27};
    java.util.List var29 = org.jsecurity.util.CollectionUtils.asList(var28);
    org.jsecurity.authc.pam.ModularRealmAuthenticator var30 = new org.jsecurity.authc.pam.ModularRealmAuthenticator(var29);
    org.jsecurity.authc.pam.AllSuccessfulModularAuthenticationStrategy var31 = new org.jsecurity.authc.pam.AllSuccessfulModularAuthenticationStrategy();
    var30.setModularAuthenticationStrategy((org.jsecurity.authc.pam.ModularAuthenticationStrategy)var31);
    org.jsecurity.authz.SimpleAuthorizationInfo var33 = new org.jsecurity.authz.SimpleAuthorizationInfo();
    var33.addStringPermission("hi!");
    java.io.InputStream var37 = org.jsecurity.util.ClassUtils.getResourceAsStream("");
    java.lang.Object[] var38 = new java.lang.Object[] { var37};
    java.util.List var39 = org.jsecurity.util.CollectionUtils.asList(var38);
    var33.addRoles((java.util.Collection)var39);
    var30.setAuthenticationListeners((java.util.Collection)var39);
    var25.setSessionListeners((java.util.Collection)var39);
    org.jsecurity.realm.text.TextConfigurationRealm var43 = new org.jsecurity.realm.text.TextConfigurationRealm();
    java.io.InputStream var45 = org.jsecurity.util.ClassUtils.getResourceAsStream("");
    java.lang.Object[] var46 = new java.lang.Object[] { var45};
    java.util.List var47 = org.jsecurity.util.CollectionUtils.asList(var46);
    org.jsecurity.authc.pam.ModularRealmAuthenticator var48 = new org.jsecurity.authc.pam.ModularRealmAuthenticator(var47);
    org.jsecurity.subject.SimplePrincipalCollection var50 = new org.jsecurity.subject.SimplePrincipalCollection((java.util.Collection)var47, "org.jsecurity.authz.UnauthorizedException: org.jsecurity.session.ExpiredSessionException: ");
    org.jsecurity.session.UnknownSessionException var55 = new org.jsecurity.session.UnknownSessionException("dd\uFFFD", (java.io.Serializable)100.0f);
    org.jsecurity.session.SessionException var57 = new org.jsecurity.session.SessionException("dd\uFFFD", (java.lang.Throwable)var55, (java.io.Serializable)0);
    org.jsecurity.session.SessionException var58 = new org.jsecurity.session.SessionException("dd\uFFFD", (java.lang.Throwable)var55);
    var50.add((java.lang.Object)var58, "org.jsecurity.config.ConfigurationException: dd\uFFFD");
    var43.onLogout((org.jsecurity.subject.PrincipalCollection)var50);
    org.jsecurity.authc.pam.FirstSuccessfulAuthenticationStrategy var62 = new org.jsecurity.authc.pam.FirstSuccessfulAuthenticationStrategy();
    org.jsecurity.authz.UnauthorizedException var64 = new org.jsecurity.authz.UnauthorizedException("org.jsecurity.config.ConfigurationException: dd\uFFFD");
    java.lang.Throwable[] var65 = var64.getSuppressed();
    java.util.List var66 = org.jsecurity.util.CollectionUtils.asList((java.lang.Object[])var65);
    org.jsecurity.authc.UsernamePasswordToken var67 = new org.jsecurity.authc.UsernamePasswordToken();
    java.lang.String var68 = var67.getUsername();
    java.net.InetAddress var69 = var67.getInetAddress();
    org.jsecurity.authc.AuthenticationInfo var70 = var62.beforeAllAttempts((java.util.Collection)var66, (org.jsecurity.authc.AuthenticationToken)var67);
    boolean[] var71 = var25.hasRoles((org.jsecurity.subject.PrincipalCollection)var50, var66);
    boolean var72 = var50.isEmpty();
    java.lang.String[] var77 = org.jsecurity.util.StringUtils.split("ZGT/", '4', '#', '4');
    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      boolean[] var78 = var24.isPermitted((org.jsecurity.subject.PrincipalCollection)var50, var77);
      fail("Expected exception of type java.lang.ClassCastException");
    } catch (java.lang.ClassCastException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var3);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var4);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var5);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var21);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var23);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var27);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var28);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var29);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var37);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var38);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var39);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var45);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var46);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var47);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var65);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var66);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var68);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var69);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var70);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var71);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var72 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var77);

  }

  public void test425() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest0.test425");


    java.lang.String var1 = org.jsecurity.util.StringUtils.clean("\uFFFD\uFFFD#\uFFFD\uFFFD.\uFFFD+r\uFFFD\u6959(\uFFFD\uFFFDW\uFFFDq\uFFFD.\uFFFD\uFFFD^jY\uFFFDj\uFFFDa\uFFFD\uFFFD\uFFFDj\u0628\u0000");
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var1 + "' != '" + "\uFFFD\uFFFD#\uFFFD\uFFFD.\uFFFD+r\uFFFD\u6959(\uFFFD\uFFFDW\uFFFDq\uFFFD.\uFFFD\uFFFD^jY\uFFFDj\uFFFDa\uFFFD\uFFFD\uFFFDj\u0628"+ "'", var1.equals("\uFFFD\uFFFD#\uFFFD\uFFFD.\uFFFD+r\uFFFD\u6959(\uFFFD\uFFFDW\uFFFDq\uFFFD.\uFFFD\uFFFD^jY\uFFFDj\uFFFDa\uFFFD\uFFFD\uFFFDj\u0628"));

  }

  public void test426() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest0.test426");


    org.jsecurity.realm.text.TextConfigurationRealm var0 = new org.jsecurity.realm.text.TextConfigurationRealm();
    org.jsecurity.realm.text.TextConfigurationRealm var1 = new org.jsecurity.realm.text.TextConfigurationRealm();
    java.io.InputStream var3 = org.jsecurity.util.ClassUtils.getResourceAsStream("");
    java.lang.Object[] var4 = new java.lang.Object[] { var3};
    java.util.List var5 = org.jsecurity.util.CollectionUtils.asList(var4);
    org.jsecurity.authc.pam.ModularRealmAuthenticator var6 = new org.jsecurity.authc.pam.ModularRealmAuthenticator(var5);
    org.jsecurity.subject.SimplePrincipalCollection var8 = new org.jsecurity.subject.SimplePrincipalCollection((java.util.Collection)var5, "org.jsecurity.authz.UnauthorizedException: org.jsecurity.session.ExpiredSessionException: ");
    org.jsecurity.session.UnknownSessionException var13 = new org.jsecurity.session.UnknownSessionException("dd\uFFFD", (java.io.Serializable)100.0f);
    org.jsecurity.session.SessionException var15 = new org.jsecurity.session.SessionException("dd\uFFFD", (java.lang.Throwable)var13, (java.io.Serializable)0);
    org.jsecurity.session.SessionException var16 = new org.jsecurity.session.SessionException("dd\uFFFD", (java.lang.Throwable)var13);
    var8.add((java.lang.Object)var16, "org.jsecurity.config.ConfigurationException: dd\uFFFD");
    var1.onLogout((org.jsecurity.subject.PrincipalCollection)var8);
    java.util.Collection var21 = var8.fromRealm("\u0000\u0000\u0000");
    var0.onLogout((org.jsecurity.subject.PrincipalCollection)var8);
    java.util.Set var23 = var8.asSet();
    org.jsecurity.authz.ModularRealmAuthorizer var24 = new org.jsecurity.authz.ModularRealmAuthorizer((java.util.Collection)var23);
    java.io.InputStream var26 = org.jsecurity.util.ClassUtils.getResourceAsStream("");
    java.lang.Object[] var27 = new java.lang.Object[] { var26};
    java.util.List var28 = org.jsecurity.util.CollectionUtils.asList(var27);
    org.jsecurity.authc.pam.ModularRealmAuthenticator var29 = new org.jsecurity.authc.pam.ModularRealmAuthenticator(var28);
    org.jsecurity.subject.SimplePrincipalCollection var31 = new org.jsecurity.subject.SimplePrincipalCollection((java.util.Collection)var28, "org.jsecurity.authz.UnauthorizedException: org.jsecurity.session.ExpiredSessionException: ");
    org.jsecurity.io.ResourceException var35 = new org.jsecurity.io.ResourceException("hi!");
    org.jsecurity.authc.UnknownAccountException var36 = new org.jsecurity.authc.UnknownAccountException((java.lang.Throwable)var35);
    org.jsecurity.session.StoppedSessionException var37 = new org.jsecurity.session.StoppedSessionException("dd\uFFFD", (java.io.Serializable)var35);
    org.jsecurity.session.UnknownSessionException var38 = new org.jsecurity.session.UnknownSessionException("org.jsecurity.authz.UnauthorizedException: org.jsecurity.session.ExpiredSessionException: ", (java.lang.Throwable)var35);
    boolean var39 = var31.equals((java.lang.Object)var35);
    java.util.Set var41 = org.jsecurity.util.PermissionUtils.toPermissionStrings("org.jsecurity.config.ConfigurationException: dd\uFFFD");
    org.jsecurity.authz.SimpleAuthorizationInfo var42 = new org.jsecurity.authz.SimpleAuthorizationInfo(var41);
    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      var24.checkPermissions((org.jsecurity.subject.PrincipalCollection)var31, (java.util.Collection)var41);
      fail("Expected exception of type java.lang.ClassCastException");
    } catch (java.lang.ClassCastException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var3);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var4);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var5);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var21);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var23);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var26);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var27);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var28);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var39 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var41);

  }

  public void test427() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest0.test427");


    org.jsecurity.authc.pam.AllSuccessfulModularAuthenticationStrategy var0 = new org.jsecurity.authc.pam.AllSuccessfulModularAuthenticationStrategy();
    char[] var2 = new char[] { };
    org.jsecurity.authc.UsernamePasswordToken var4 = new org.jsecurity.authc.UsernamePasswordToken("hi!", var2, true);
    org.jsecurity.authc.SimpleAccount var5 = new org.jsecurity.authc.SimpleAccount();
    var5.setCredentialsExpired(false);
    boolean var8 = var5.isLocked();
    org.jsecurity.authc.AuthenticationInfo var9 = var0.afterAllAttempts((org.jsecurity.authc.AuthenticationToken)var4, (org.jsecurity.authc.AuthenticationInfo)var5);
    char[] var12 = new char[] { };
    org.jsecurity.authc.UsernamePasswordToken var14 = new org.jsecurity.authc.UsernamePasswordToken("hi!", var12, true);
    org.jsecurity.authc.UsernamePasswordToken var15 = new org.jsecurity.authc.UsernamePasswordToken("\u0000\u0000", var12);
    java.lang.Object var16 = var15.getPrincipal();
    org.jsecurity.authc.SimpleAccount var17 = new org.jsecurity.authc.SimpleAccount();
    var17.setCredentialsExpired(false);
    var17.setCredentialsExpired(false);
    boolean var22 = var17.isCredentialsExpired();
    org.jsecurity.authc.AuthenticationInfo var23 = var0.afterAllAttempts((org.jsecurity.authc.AuthenticationToken)var15, (org.jsecurity.authc.AuthenticationInfo)var17);
    org.jsecurity.realm.activedirectory.ActiveDirectoryRealm var24 = new org.jsecurity.realm.activedirectory.ActiveDirectoryRealm();
    org.jsecurity.authc.credential.Sha256CredentialsMatcher var25 = new org.jsecurity.authc.credential.Sha256CredentialsMatcher();
    var24.setCredentialsMatcher((org.jsecurity.authc.credential.CredentialsMatcher)var25);
    java.lang.String var27 = var24.getAuthorizationCacheName();
    var24.setPrincipalSuffix("org.jsecurity.config.ConfigurationException: dd\uFFFD");
    char[] var33 = new char[] { '4', '#'};
    org.jsecurity.authc.UsernamePasswordToken var34 = new org.jsecurity.authc.UsernamePasswordToken("\u0000\u0000", var33);
    org.jsecurity.authc.SimpleAccount var35 = new org.jsecurity.authc.SimpleAccount();
    var35.setCredentialsExpired(false);
    org.jsecurity.authc.AuthenticationInfo var38 = var0.beforeAttempt((org.jsecurity.realm.Realm)var24, (org.jsecurity.authc.AuthenticationToken)var34, (org.jsecurity.authc.AuthenticationInfo)var35);
    org.jsecurity.realm.text.TextConfigurationRealm var39 = new org.jsecurity.realm.text.TextConfigurationRealm();
    org.jsecurity.realm.text.TextConfigurationRealm var40 = new org.jsecurity.realm.text.TextConfigurationRealm();
    java.io.InputStream var42 = org.jsecurity.util.ClassUtils.getResourceAsStream("");
    java.lang.Object[] var43 = new java.lang.Object[] { var42};
    java.util.List var44 = org.jsecurity.util.CollectionUtils.asList(var43);
    org.jsecurity.authc.pam.ModularRealmAuthenticator var45 = new org.jsecurity.authc.pam.ModularRealmAuthenticator(var44);
    org.jsecurity.subject.SimplePrincipalCollection var47 = new org.jsecurity.subject.SimplePrincipalCollection((java.util.Collection)var44, "org.jsecurity.authz.UnauthorizedException: org.jsecurity.session.ExpiredSessionException: ");
    org.jsecurity.session.UnknownSessionException var52 = new org.jsecurity.session.UnknownSessionException("dd\uFFFD", (java.io.Serializable)100.0f);
    org.jsecurity.session.SessionException var54 = new org.jsecurity.session.SessionException("dd\uFFFD", (java.lang.Throwable)var52, (java.io.Serializable)0);
    org.jsecurity.session.SessionException var55 = new org.jsecurity.session.SessionException("dd\uFFFD", (java.lang.Throwable)var52);
    var47.add((java.lang.Object)var55, "org.jsecurity.config.ConfigurationException: dd\uFFFD");
    var40.onLogout((org.jsecurity.subject.PrincipalCollection)var47);
    java.util.Collection var60 = var47.fromRealm("\u0000\u0000\u0000");
    var39.onLogout((org.jsecurity.subject.PrincipalCollection)var47);
    org.jsecurity.authz.aop.RoleAnnotationMethodInterceptor var62 = new org.jsecurity.authz.aop.RoleAnnotationMethodInterceptor();
    org.jsecurity.aop.AnnotationHandler var63 = var62.getHandler();
    java.lang.Class var64 = var63.getAnnotationClass();
    java.util.Collection var65 = var47.byType(var64);
    org.jsecurity.authz.ModularRealmAuthorizer var66 = new org.jsecurity.authz.ModularRealmAuthorizer();
    java.io.InputStream var68 = org.jsecurity.util.ClassUtils.getResourceAsStream("");
    java.lang.Object[] var69 = new java.lang.Object[] { var68};
    java.util.List var70 = org.jsecurity.util.CollectionUtils.asList(var69);
    org.jsecurity.authc.pam.ModularRealmAuthenticator var71 = new org.jsecurity.authc.pam.ModularRealmAuthenticator(var70);
    org.jsecurity.subject.SimplePrincipalCollection var73 = new org.jsecurity.subject.SimplePrincipalCollection((java.util.Collection)var70, "org.jsecurity.authz.UnauthorizedException: org.jsecurity.session.ExpiredSessionException: ");
    org.jsecurity.session.UnknownSessionException var78 = new org.jsecurity.session.UnknownSessionException("dd\uFFFD", (java.io.Serializable)100.0f);
    org.jsecurity.session.SessionException var80 = new org.jsecurity.session.SessionException("dd\uFFFD", (java.lang.Throwable)var78, (java.io.Serializable)0);
    org.jsecurity.session.SessionException var81 = new org.jsecurity.session.SessionException("dd\uFFFD", (java.lang.Throwable)var78);
    var73.add((java.lang.Object)var81, "org.jsecurity.config.ConfigurationException: dd\uFFFD");
    java.util.Set var84 = var73.asSet();
    var66.setRealms((java.util.Collection)var84);
    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      boolean var86 = var24.hasAllRoles((org.jsecurity.subject.PrincipalCollection)var47, (java.util.Collection)var84);
      fail("Expected exception of type java.util.NoSuchElementException");
    } catch (java.util.NoSuchElementException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var2);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var8 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var9);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var12);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var16 + "' != '" + "\u0000\u0000"+ "'", var16.equals("\u0000\u0000"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var22 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var23);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var27);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var33);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var38);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var42);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var43);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var44);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var60);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var63);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var64);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var65);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var68);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var69);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var70);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var84);

  }

  public void test428() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest0.test428");


    org.jsecurity.util.AntPathMatcher var0 = new org.jsecurity.util.AntPathMatcher();
    boolean var3 = var0.matchStart("\uFFFD\uFFFD#\uFFFD\uFFFD.\uFFFD+rr\uFFFD\u07CA\u0000\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\u01E9\uFFFD*'\u0000\u0000", "ZGT/");
    boolean var6 = var0.matches("6464ff", "orgjsecurityauthcCredentialsException783ccd3148a842dd890fdf885a7baafAA==");
    boolean var9 = var0.matchStart("a3e14b98-1050-4bcc-8787-431663db8814", "6464ff");
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var3 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var6 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var9 == false);

  }

  public void test429() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest0.test429");


    org.jsecurity.authz.ModularRealmAuthorizer var0 = new org.jsecurity.authz.ModularRealmAuthorizer();
    java.io.InputStream var2 = org.jsecurity.util.ClassUtils.getResourceAsStream("");
    java.lang.Object[] var3 = new java.lang.Object[] { var2};
    java.util.List var4 = org.jsecurity.util.CollectionUtils.asList(var3);
    org.jsecurity.authc.pam.ModularRealmAuthenticator var5 = new org.jsecurity.authc.pam.ModularRealmAuthenticator(var4);
    org.jsecurity.subject.SimplePrincipalCollection var7 = new org.jsecurity.subject.SimplePrincipalCollection((java.util.Collection)var4, "org.jsecurity.authz.UnauthorizedException: org.jsecurity.session.ExpiredSessionException: ");
    org.jsecurity.session.UnknownSessionException var12 = new org.jsecurity.session.UnknownSessionException("dd\uFFFD", (java.io.Serializable)100.0f);
    org.jsecurity.session.SessionException var14 = new org.jsecurity.session.SessionException("dd\uFFFD", (java.lang.Throwable)var12, (java.io.Serializable)0);
    org.jsecurity.session.SessionException var15 = new org.jsecurity.session.SessionException("dd\uFFFD", (java.lang.Throwable)var12);
    var7.add((java.lang.Object)var15, "org.jsecurity.config.ConfigurationException: dd\uFFFD");
    java.util.Set var18 = var7.asSet();
    var0.setRealms((java.util.Collection)var18);
    org.jsecurity.authz.UnauthorizedException var21 = new org.jsecurity.authz.UnauthorizedException("org.jsecurity.config.ConfigurationException: dd\uFFFD");
    java.lang.Throwable[] var22 = var21.getSuppressed();
    java.util.Set var23 = org.jsecurity.util.CollectionUtils.asSet((java.lang.Object[])var22);
    var0.setRealms((java.util.Collection)var23);
    org.jsecurity.authz.permission.InvalidPermissionStringException var27 = new org.jsecurity.authz.permission.InvalidPermissionStringException("", "dd\uFFFD");
    org.jsecurity.JSecurityException var29 = new org.jsecurity.JSecurityException("");
    org.jsecurity.authc.SimpleAuthenticationInfo var31 = new org.jsecurity.authc.SimpleAuthenticationInfo((java.lang.Object)var27, (java.lang.Object)"", "org.jsecurity.authz.UnauthorizedException: org.jsecurity.session.ExpiredSessionException: ");
    org.jsecurity.subject.PrincipalCollection var32 = var31.getPrincipals();
    org.jsecurity.session.UnknownSessionException var36 = new org.jsecurity.session.UnknownSessionException("dd\uFFFD", (java.io.Serializable)100.0f);
    org.jsecurity.session.SessionException var38 = new org.jsecurity.session.SessionException("dd\uFFFD", (java.lang.Throwable)var36, (java.io.Serializable)0);
    org.jsecurity.authc.SimpleAccount var39 = new org.jsecurity.authc.SimpleAccount(var32, (java.lang.Object)var38);
    org.jsecurity.authz.SimpleRole var41 = new org.jsecurity.authz.SimpleRole();
    org.jsecurity.authz.permission.WildcardPermission var44 = new org.jsecurity.authz.permission.WildcardPermission("hi!", false);
    boolean var45 = var41.isPermitted((org.jsecurity.authz.Permission)var44);
    org.jsecurity.session.InvalidSessionException var46 = new org.jsecurity.session.InvalidSessionException("org.jsecurity.config.ConfigurationException: dd\uFFFD", (java.io.Serializable)var44);
    org.jsecurity.codec.CodecException var49 = new org.jsecurity.codec.CodecException("dd\uFFFD");
    org.jsecurity.authc.ConcurrentAccessException var50 = new org.jsecurity.authc.ConcurrentAccessException("org.jsecurity.authz.UnauthorizedException: org.jsecurity.session.ExpiredSessionException: ", (java.lang.Throwable)var49);
    org.jsecurity.subject.SimplePrincipalCollection var52 = new org.jsecurity.subject.SimplePrincipalCollection((java.lang.Object)var49, "");
    org.jsecurity.authc.pam.FirstSuccessfulAuthenticationStrategy var53 = new org.jsecurity.authc.pam.FirstSuccessfulAuthenticationStrategy();
    org.jsecurity.authz.UnauthorizedException var55 = new org.jsecurity.authz.UnauthorizedException("org.jsecurity.config.ConfigurationException: dd\uFFFD");
    java.lang.Throwable[] var56 = var55.getSuppressed();
    java.util.List var57 = org.jsecurity.util.CollectionUtils.asList((java.lang.Object[])var56);
    org.jsecurity.authc.UsernamePasswordToken var58 = new org.jsecurity.authc.UsernamePasswordToken();
    java.lang.String var59 = var58.getUsername();
    java.net.InetAddress var60 = var58.getInetAddress();
    org.jsecurity.authc.AuthenticationInfo var61 = var53.beforeAllAttempts((java.util.Collection)var57, (org.jsecurity.authc.AuthenticationToken)var58);
    org.jsecurity.session.UnknownSessionException var66 = new org.jsecurity.session.UnknownSessionException("dd\uFFFD", (java.io.Serializable)100.0f);
    org.jsecurity.subject.SubjectException var67 = new org.jsecurity.subject.SubjectException("dd\uFFFD", (java.lang.Throwable)var66);
    org.jsecurity.io.SerializationException var68 = new org.jsecurity.io.SerializationException("", (java.lang.Throwable)var67);
    java.lang.Throwable[] var69 = var67.getSuppressed();
    java.util.Set var70 = org.jsecurity.util.CollectionUtils.asSet((java.lang.Object[])var69);
    org.jsecurity.authc.SimpleAccount var71 = new org.jsecurity.authc.SimpleAccount((org.jsecurity.subject.PrincipalCollection)var52, (java.lang.Object)var57, var70);
    var71.addStringPermission("org.jsecurity.config.ConfigurationException: dd\uFFFD");
    org.jsecurity.authz.SimpleRole var74 = new org.jsecurity.authz.SimpleRole();
    org.jsecurity.authz.permission.WildcardPermission var77 = new org.jsecurity.authz.permission.WildcardPermission("hi!", false);
    boolean var78 = var74.isPermitted((org.jsecurity.authz.Permission)var77);
    var71.addObjectPermission((org.jsecurity.authz.Permission)var77);
    boolean var80 = var44.implies((org.jsecurity.authz.Permission)var77);
    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      var0.checkPermission(var32, (org.jsecurity.authz.Permission)var44);
      fail("Expected exception of type java.lang.IllegalStateException");
    } catch (java.lang.IllegalStateException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var2);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var3);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var4);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var18);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var22);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var23);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var32);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var45 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var56);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var57);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var59);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var60);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var61);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var69);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var70);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var78 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var80 == true);

  }

  public void test430() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest0.test430");


    org.jsecurity.mgt.DefaultSecurityManager var0 = new org.jsecurity.mgt.DefaultSecurityManager();
    java.io.InputStream var2 = org.jsecurity.util.ClassUtils.getResourceAsStream("");
    java.lang.Object[] var3 = new java.lang.Object[] { var2};
    java.util.List var4 = org.jsecurity.util.CollectionUtils.asList(var3);
    org.jsecurity.authc.pam.ModularRealmAuthenticator var5 = new org.jsecurity.authc.pam.ModularRealmAuthenticator(var4);
    org.jsecurity.authc.pam.AllSuccessfulModularAuthenticationStrategy var6 = new org.jsecurity.authc.pam.AllSuccessfulModularAuthenticationStrategy();
    var5.setModularAuthenticationStrategy((org.jsecurity.authc.pam.ModularAuthenticationStrategy)var6);
    org.jsecurity.authz.SimpleAuthorizationInfo var8 = new org.jsecurity.authz.SimpleAuthorizationInfo();
    var8.addStringPermission("hi!");
    java.io.InputStream var12 = org.jsecurity.util.ClassUtils.getResourceAsStream("");
    java.lang.Object[] var13 = new java.lang.Object[] { var12};
    java.util.List var14 = org.jsecurity.util.CollectionUtils.asList(var13);
    var8.addRoles((java.util.Collection)var14);
    var5.setAuthenticationListeners((java.util.Collection)var14);
    var0.setSessionListeners((java.util.Collection)var14);
    org.jsecurity.authc.pam.ModularRealmAuthenticator var18 = new org.jsecurity.authc.pam.ModularRealmAuthenticator();
    org.jsecurity.authz.permission.InvalidPermissionStringException var21 = new org.jsecurity.authz.permission.InvalidPermissionStringException("", "dd\uFFFD");
    org.jsecurity.JSecurityException var23 = new org.jsecurity.JSecurityException("");
    org.jsecurity.authc.SimpleAuthenticationInfo var25 = new org.jsecurity.authc.SimpleAuthenticationInfo((java.lang.Object)var21, (java.lang.Object)"", "org.jsecurity.authz.UnauthorizedException: org.jsecurity.session.ExpiredSessionException: ");
    org.jsecurity.subject.PrincipalCollection var26 = var25.getPrincipals();
    var18.onLogout(var26);
    var0.setAuthenticator((org.jsecurity.authc.Authenticator)var18);
    org.jsecurity.codec.CodecException var31 = new org.jsecurity.codec.CodecException("dd\uFFFD");
    org.jsecurity.authc.ConcurrentAccessException var32 = new org.jsecurity.authc.ConcurrentAccessException("org.jsecurity.authz.UnauthorizedException: org.jsecurity.session.ExpiredSessionException: ", (java.lang.Throwable)var31);
    org.jsecurity.subject.SimplePrincipalCollection var34 = new org.jsecurity.subject.SimplePrincipalCollection((java.lang.Object)var31, "");
    org.jsecurity.authc.pam.FirstSuccessfulAuthenticationStrategy var35 = new org.jsecurity.authc.pam.FirstSuccessfulAuthenticationStrategy();
    org.jsecurity.authz.UnauthorizedException var37 = new org.jsecurity.authz.UnauthorizedException("org.jsecurity.config.ConfigurationException: dd\uFFFD");
    java.lang.Throwable[] var38 = var37.getSuppressed();
    java.util.List var39 = org.jsecurity.util.CollectionUtils.asList((java.lang.Object[])var38);
    org.jsecurity.authc.UsernamePasswordToken var40 = new org.jsecurity.authc.UsernamePasswordToken();
    java.lang.String var41 = var40.getUsername();
    java.net.InetAddress var42 = var40.getInetAddress();
    org.jsecurity.authc.AuthenticationInfo var43 = var35.beforeAllAttempts((java.util.Collection)var39, (org.jsecurity.authc.AuthenticationToken)var40);
    org.jsecurity.session.UnknownSessionException var48 = new org.jsecurity.session.UnknownSessionException("dd\uFFFD", (java.io.Serializable)100.0f);
    org.jsecurity.subject.SubjectException var49 = new org.jsecurity.subject.SubjectException("dd\uFFFD", (java.lang.Throwable)var48);
    org.jsecurity.io.SerializationException var50 = new org.jsecurity.io.SerializationException("", (java.lang.Throwable)var49);
    java.lang.Throwable[] var51 = var49.getSuppressed();
    java.util.Set var52 = org.jsecurity.util.CollectionUtils.asSet((java.lang.Object[])var51);
    org.jsecurity.authc.SimpleAccount var53 = new org.jsecurity.authc.SimpleAccount((org.jsecurity.subject.PrincipalCollection)var34, (java.lang.Object)var39, var52);
    java.io.InputStream var55 = org.jsecurity.util.ClassUtils.getResourceAsStream("");
    java.lang.Object[] var56 = new java.lang.Object[] { var55};
    java.util.List var57 = org.jsecurity.util.CollectionUtils.asList(var56);
    org.jsecurity.authc.pam.ModularRealmAuthenticator var58 = new org.jsecurity.authc.pam.ModularRealmAuthenticator(var57);
    org.jsecurity.subject.SimplePrincipalCollection var60 = new org.jsecurity.subject.SimplePrincipalCollection((java.util.Collection)var57, "org.jsecurity.authz.UnauthorizedException: org.jsecurity.session.ExpiredSessionException: ");
    org.jsecurity.io.ResourceException var64 = new org.jsecurity.io.ResourceException("hi!");
    org.jsecurity.authc.UnknownAccountException var65 = new org.jsecurity.authc.UnknownAccountException((java.lang.Throwable)var64);
    org.jsecurity.session.StoppedSessionException var66 = new org.jsecurity.session.StoppedSessionException("dd\uFFFD", (java.io.Serializable)var64);
    org.jsecurity.session.UnknownSessionException var67 = new org.jsecurity.session.UnknownSessionException("org.jsecurity.authz.UnauthorizedException: org.jsecurity.session.ExpiredSessionException: ", (java.lang.Throwable)var64);
    boolean var68 = var60.equals((java.lang.Object)var64);
    var34.addAll((org.jsecurity.subject.PrincipalCollection)var60);
    org.jsecurity.session.UnknownSessionException var74 = new org.jsecurity.session.UnknownSessionException("dd\uFFFD", (java.io.Serializable)100.0f);
    org.jsecurity.subject.SubjectException var75 = new org.jsecurity.subject.SubjectException("dd\uFFFD", (java.lang.Throwable)var74);
    org.jsecurity.io.SerializationException var76 = new org.jsecurity.io.SerializationException("", (java.lang.Throwable)var75);
    java.lang.Throwable[] var77 = var75.getSuppressed();
    java.util.List var78 = org.jsecurity.util.CollectionUtils.asList((java.lang.Object[])var77);
    boolean var79 = var0.isPermittedAll((org.jsecurity.subject.PrincipalCollection)var34, (java.util.Collection)var78);
    org.jsecurity.subject.DelegatingSubject var80 = new org.jsecurity.subject.DelegatingSubject((org.jsecurity.mgt.SecurityManager)var0);
    org.jsecurity.authz.UnauthorizedException var82 = new org.jsecurity.authz.UnauthorizedException("org.jsecurity.config.ConfigurationException: dd\uFFFD");
    java.lang.Throwable[] var83 = var82.getSuppressed();
    java.util.List var84 = org.jsecurity.util.CollectionUtils.asList((java.lang.Object[])var83);
    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      var80.checkPermissions((java.util.Collection)var84);
      fail("Expected exception of type org.jsecurity.authz.UnauthenticatedException");
    } catch (org.jsecurity.authz.UnauthenticatedException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var2);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var3);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var4);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var12);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var13);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var14);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var26);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var38);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var39);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var41);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var42);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var43);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var51);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var52);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var55);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var56);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var57);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var68 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var77);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var78);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var79 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var83);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var84);

  }

  public void test431() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest0.test431");


    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      java.io.InputStream var1 = org.jsecurity.io.ResourceUtils.getInputStreamForPath("7edc3e5f-37f7-4a22-9779-4609545bccd8");
      fail("Expected exception of type java.io.FileNotFoundException");
    } catch (java.io.FileNotFoundException e) {
      // Expected exception.
    }

  }

  public void test432() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest0.test432");


    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      java.lang.Object var1 = org.jsecurity.util.ClassUtils.newInstance("org.jsecurity.config.ConfigurationException: dd\uFFFD");
      fail("Expected exception of type org.jsecurity.util.UnknownClassException");
    } catch (org.jsecurity.util.UnknownClassException e) {
      // Expected exception.
    }

  }

  public void test433() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest0.test433");


    org.jsecurity.session.mgt.DefaultSessionManager var0 = new org.jsecurity.session.mgt.DefaultSessionManager();
    org.jsecurity.mgt.DefaultSecurityManager var1 = new org.jsecurity.mgt.DefaultSecurityManager();
    org.jsecurity.authz.permission.WildcardPermissionResolver var2 = new org.jsecurity.authz.permission.WildcardPermissionResolver();
    var1.setPermissionResolver((org.jsecurity.authz.permission.PermissionResolver)var2);
    org.jsecurity.cache.CacheManager var4 = var1.getCacheManager();
    var0.setCacheManager(var4);
    org.jsecurity.io.IniResource var6 = new org.jsecurity.io.IniResource();
    java.lang.String var7 = var6.getCharsetName();
    org.jsecurity.config.ReflectionBuilder var8 = new org.jsecurity.config.ReflectionBuilder();
    org.jsecurity.io.IniResource var9 = new org.jsecurity.io.IniResource();
    var9.setCharsetName("org.jsecurity.authz.UnauthorizedException: org.jsecurity.session.ExpiredSessionException: ");
    java.util.Map var12 = var9.getSections();
    java.util.Map var13 = var8.buildObjects(var12);
    var6.setSections(var13);
    var6.setCharsetName("ZGT/");
    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      java.util.Date var17 = var0.getLastAccessTime((java.io.Serializable)var6);
      fail("Expected exception of type org.jsecurity.session.UnknownSessionException");
    } catch (org.jsecurity.session.UnknownSessionException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var4);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var7);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var12);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var13);

  }

  public void test434() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest0.test434");


    org.jsecurity.authc.pam.AllSuccessfulModularAuthenticationStrategy var0 = new org.jsecurity.authc.pam.AllSuccessfulModularAuthenticationStrategy();
    char[] var2 = new char[] { };
    org.jsecurity.authc.UsernamePasswordToken var4 = new org.jsecurity.authc.UsernamePasswordToken("hi!", var2, true);
    org.jsecurity.authc.SimpleAccount var5 = new org.jsecurity.authc.SimpleAccount();
    var5.setCredentialsExpired(false);
    boolean var8 = var5.isLocked();
    org.jsecurity.authc.AuthenticationInfo var9 = var0.afterAllAttempts((org.jsecurity.authc.AuthenticationToken)var4, (org.jsecurity.authc.AuthenticationInfo)var5);
    char[] var12 = new char[] { };
    org.jsecurity.authc.UsernamePasswordToken var14 = new org.jsecurity.authc.UsernamePasswordToken("hi!", var12, true);
    org.jsecurity.authc.UsernamePasswordToken var15 = new org.jsecurity.authc.UsernamePasswordToken("\u0000\u0000", var12);
    java.lang.Object var16 = var15.getPrincipal();
    org.jsecurity.authc.SimpleAccount var17 = new org.jsecurity.authc.SimpleAccount();
    var17.setCredentialsExpired(false);
    var17.setCredentialsExpired(false);
    boolean var22 = var17.isCredentialsExpired();
    org.jsecurity.authc.AuthenticationInfo var23 = var0.afterAllAttempts((org.jsecurity.authc.AuthenticationToken)var15, (org.jsecurity.authc.AuthenticationInfo)var17);
    org.jsecurity.realm.activedirectory.ActiveDirectoryRealm var24 = new org.jsecurity.realm.activedirectory.ActiveDirectoryRealm();
    org.jsecurity.authc.credential.Sha256CredentialsMatcher var25 = new org.jsecurity.authc.credential.Sha256CredentialsMatcher();
    var24.setCredentialsMatcher((org.jsecurity.authc.credential.CredentialsMatcher)var25);
    java.lang.String var27 = var24.getAuthorizationCacheName();
    var24.setPrincipalSuffix("org.jsecurity.config.ConfigurationException: dd\uFFFD");
    char[] var33 = new char[] { '4', '#'};
    org.jsecurity.authc.UsernamePasswordToken var34 = new org.jsecurity.authc.UsernamePasswordToken("\u0000\u0000", var33);
    org.jsecurity.authc.SimpleAccount var35 = new org.jsecurity.authc.SimpleAccount();
    var35.setCredentialsExpired(false);
    org.jsecurity.authc.AuthenticationInfo var38 = var0.beforeAttempt((org.jsecurity.realm.Realm)var24, (org.jsecurity.authc.AuthenticationToken)var34, (org.jsecurity.authc.AuthenticationInfo)var35);
    org.jsecurity.mgt.DefaultSecurityManager var39 = new org.jsecurity.mgt.DefaultSecurityManager();
    java.io.InputStream var41 = org.jsecurity.util.ClassUtils.getResourceAsStream("");
    java.lang.Object[] var42 = new java.lang.Object[] { var41};
    java.util.List var43 = org.jsecurity.util.CollectionUtils.asList(var42);
    org.jsecurity.authc.pam.ModularRealmAuthenticator var44 = new org.jsecurity.authc.pam.ModularRealmAuthenticator(var43);
    org.jsecurity.authc.pam.AllSuccessfulModularAuthenticationStrategy var45 = new org.jsecurity.authc.pam.AllSuccessfulModularAuthenticationStrategy();
    var44.setModularAuthenticationStrategy((org.jsecurity.authc.pam.ModularAuthenticationStrategy)var45);
    org.jsecurity.authz.SimpleAuthorizationInfo var47 = new org.jsecurity.authz.SimpleAuthorizationInfo();
    var47.addStringPermission("hi!");
    java.io.InputStream var51 = org.jsecurity.util.ClassUtils.getResourceAsStream("");
    java.lang.Object[] var52 = new java.lang.Object[] { var51};
    java.util.List var53 = org.jsecurity.util.CollectionUtils.asList(var52);
    var47.addRoles((java.util.Collection)var53);
    var44.setAuthenticationListeners((java.util.Collection)var53);
    var39.setSessionListeners((java.util.Collection)var53);
    java.io.InputStream var58 = org.jsecurity.util.ClassUtils.getResourceAsStream("");
    java.lang.Object[] var59 = new java.lang.Object[] { var58};
    java.util.List var60 = org.jsecurity.util.CollectionUtils.asList(var59);
    org.jsecurity.authc.pam.ModularRealmAuthenticator var61 = new org.jsecurity.authc.pam.ModularRealmAuthenticator(var60);
    org.jsecurity.authc.pam.AllSuccessfulModularAuthenticationStrategy var62 = new org.jsecurity.authc.pam.AllSuccessfulModularAuthenticationStrategy();
    var61.setModularAuthenticationStrategy((org.jsecurity.authc.pam.ModularAuthenticationStrategy)var62);
    org.jsecurity.authz.SimpleAuthorizationInfo var64 = new org.jsecurity.authz.SimpleAuthorizationInfo();
    var64.addStringPermission("hi!");
    java.io.InputStream var68 = org.jsecurity.util.ClassUtils.getResourceAsStream("");
    java.lang.Object[] var69 = new java.lang.Object[] { var68};
    java.util.List var70 = org.jsecurity.util.CollectionUtils.asList(var69);
    var64.addRoles((java.util.Collection)var70);
    var61.setAuthenticationListeners((java.util.Collection)var70);
    org.jsecurity.realm.activedirectory.ActiveDirectoryRealm var73 = new org.jsecurity.realm.activedirectory.ActiveDirectoryRealm();
    var73.setPrincipalSuffix("");
    var61.setRealm((org.jsecurity.realm.Realm)var73);
    org.jsecurity.cache.HashtableCacheManager var77 = new org.jsecurity.cache.HashtableCacheManager();
    org.jsecurity.cache.Cache var79 = var77.getCache("\u0000\u0000");
    var73.setAuthorizationCache(var79);
    var39.setRealm((org.jsecurity.realm.Realm)var73);
    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      org.jsecurity.crypto.hash.Sha256Hash var82 = new org.jsecurity.crypto.hash.Sha256Hash((java.lang.Object)var34, (java.lang.Object)var39);
      fail("Expected exception of type org.jsecurity.codec.CodecException");
    } catch (org.jsecurity.codec.CodecException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var2);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var8 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var9);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var12);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var16 + "' != '" + "\u0000\u0000"+ "'", var16.equals("\u0000\u0000"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var22 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var23);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var27);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var33);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var38);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var41);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var42);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var43);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var51);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var52);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var53);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var58);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var59);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var60);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var68);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var69);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var70);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var79);

  }

  public void test435() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest0.test435");


    org.jsecurity.realm.jdbc.JdbcRealm var0 = new org.jsecurity.realm.jdbc.JdbcRealm();
    org.jsecurity.codec.CodecException var3 = new org.jsecurity.codec.CodecException("dd\uFFFD");
    org.jsecurity.authc.ConcurrentAccessException var4 = new org.jsecurity.authc.ConcurrentAccessException("org.jsecurity.authz.UnauthorizedException: org.jsecurity.session.ExpiredSessionException: ", (java.lang.Throwable)var3);
    org.jsecurity.subject.SimplePrincipalCollection var6 = new org.jsecurity.subject.SimplePrincipalCollection((java.lang.Object)var3, "");
    org.jsecurity.authc.pam.FirstSuccessfulAuthenticationStrategy var7 = new org.jsecurity.authc.pam.FirstSuccessfulAuthenticationStrategy();
    org.jsecurity.authz.UnauthorizedException var9 = new org.jsecurity.authz.UnauthorizedException("org.jsecurity.config.ConfigurationException: dd\uFFFD");
    java.lang.Throwable[] var10 = var9.getSuppressed();
    java.util.List var11 = org.jsecurity.util.CollectionUtils.asList((java.lang.Object[])var10);
    org.jsecurity.authc.UsernamePasswordToken var12 = new org.jsecurity.authc.UsernamePasswordToken();
    java.lang.String var13 = var12.getUsername();
    java.net.InetAddress var14 = var12.getInetAddress();
    org.jsecurity.authc.AuthenticationInfo var15 = var7.beforeAllAttempts((java.util.Collection)var11, (org.jsecurity.authc.AuthenticationToken)var12);
    org.jsecurity.session.UnknownSessionException var20 = new org.jsecurity.session.UnknownSessionException("dd\uFFFD", (java.io.Serializable)100.0f);
    org.jsecurity.subject.SubjectException var21 = new org.jsecurity.subject.SubjectException("dd\uFFFD", (java.lang.Throwable)var20);
    org.jsecurity.io.SerializationException var22 = new org.jsecurity.io.SerializationException("", (java.lang.Throwable)var21);
    java.lang.Throwable[] var23 = var21.getSuppressed();
    java.util.Set var24 = org.jsecurity.util.CollectionUtils.asSet((java.lang.Object[])var23);
    org.jsecurity.authc.SimpleAccount var25 = new org.jsecurity.authc.SimpleAccount((org.jsecurity.subject.PrincipalCollection)var6, (java.lang.Object)var11, var24);
    java.io.InputStream var27 = org.jsecurity.util.ClassUtils.getResourceAsStream("");
    java.lang.Object[] var28 = new java.lang.Object[] { var27};
    java.util.List var29 = org.jsecurity.util.CollectionUtils.asList(var28);
    org.jsecurity.authc.pam.ModularRealmAuthenticator var30 = new org.jsecurity.authc.pam.ModularRealmAuthenticator(var29);
    org.jsecurity.subject.SimplePrincipalCollection var32 = new org.jsecurity.subject.SimplePrincipalCollection((java.util.Collection)var29, "org.jsecurity.authz.UnauthorizedException: org.jsecurity.session.ExpiredSessionException: ");
    org.jsecurity.io.ResourceException var36 = new org.jsecurity.io.ResourceException("hi!");
    org.jsecurity.authc.UnknownAccountException var37 = new org.jsecurity.authc.UnknownAccountException((java.lang.Throwable)var36);
    org.jsecurity.session.StoppedSessionException var38 = new org.jsecurity.session.StoppedSessionException("dd\uFFFD", (java.io.Serializable)var36);
    org.jsecurity.session.UnknownSessionException var39 = new org.jsecurity.session.UnknownSessionException("org.jsecurity.authz.UnauthorizedException: org.jsecurity.session.ExpiredSessionException: ", (java.lang.Throwable)var36);
    boolean var40 = var32.equals((java.lang.Object)var36);
    var6.addAll((org.jsecurity.subject.PrincipalCollection)var32);
    java.util.List var42 = var32.asList();
    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      org.jsecurity.authz.AuthorizationInfo var43 = var0.getAuthorizationInfo((org.jsecurity.subject.PrincipalCollection)var32);
      fail("Expected exception of type java.util.NoSuchElementException");
    } catch (java.util.NoSuchElementException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var10);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var11);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var13);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var14);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var15);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var23);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var24);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var27);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var28);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var29);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var40 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var42);

  }

  public void test436() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest0.test436");


    org.jsecurity.subject.SubjectException var0 = new org.jsecurity.subject.SubjectException();

  }

  public void test437() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest0.test437");


    org.jsecurity.authz.SimpleAuthorizingAccount var0 = new org.jsecurity.authz.SimpleAuthorizingAccount();
    java.util.Set var1 = var0.getSimpleRoles();
    org.jsecurity.authz.SimpleRole var2 = new org.jsecurity.authz.SimpleRole();
    org.jsecurity.authz.SimpleAuthorizationInfo var3 = new org.jsecurity.authz.SimpleAuthorizationInfo();
    var3.addRole("a2b823b1e72eae2b727289df8a00a89df8a0bab6ad8a89c4c5c7a9b62a270000");
    org.jsecurity.session.UnknownSessionException var10 = new org.jsecurity.session.UnknownSessionException("dd\uFFFD", (java.io.Serializable)100.0f);
    org.jsecurity.subject.SubjectException var11 = new org.jsecurity.subject.SubjectException("dd\uFFFD", (java.lang.Throwable)var10);
    org.jsecurity.io.SerializationException var12 = new org.jsecurity.io.SerializationException("", (java.lang.Throwable)var11);
    java.lang.Throwable[] var13 = var11.getSuppressed();
    java.util.Set var14 = org.jsecurity.util.CollectionUtils.asSet((java.lang.Object[])var13);
    var3.addRoles((java.util.Collection)var14);
    var2.addAll((java.util.Collection)var14);
    org.jsecurity.authz.SimpleRole var18 = new org.jsecurity.authz.SimpleRole();
    org.jsecurity.authz.permission.WildcardPermission var21 = new org.jsecurity.authz.permission.WildcardPermission("hi!", false);
    boolean var22 = var18.isPermitted((org.jsecurity.authz.Permission)var21);
    org.jsecurity.session.InvalidSessionException var23 = new org.jsecurity.session.InvalidSessionException("org.jsecurity.config.ConfigurationException: dd\uFFFD", (java.io.Serializable)var21);
    org.jsecurity.authz.SimpleRole var24 = new org.jsecurity.authz.SimpleRole();
    org.jsecurity.authz.permission.WildcardPermission var27 = new org.jsecurity.authz.permission.WildcardPermission("hi!", false);
    boolean var28 = var24.isPermitted((org.jsecurity.authz.Permission)var27);
    boolean var29 = var21.implies((org.jsecurity.authz.Permission)var27);
    boolean var30 = var2.isPermitted((org.jsecurity.authz.Permission)var27);
    boolean var31 = var0.isPermitted((org.jsecurity.authz.Permission)var27);
    var0.addRole("org.jsecurity.authc.IncorrectCredentialsException: \u0000\u0000");
    org.jsecurity.authz.permission.WildcardPermission var36 = new org.jsecurity.authz.permission.WildcardPermission("783ccd31-48a8-42dd-890f-df885a7baaff", false);
    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      var0.checkPermission((org.jsecurity.authz.Permission)var36);
      fail("Expected exception of type org.jsecurity.authz.UnauthorizedException");
    } catch (org.jsecurity.authz.UnauthorizedException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var1);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var13);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var14);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var22 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var28 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var29 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var30 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var31 == false);

  }

  public void test438() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest0.test438");


    org.jsecurity.jndi.JndiLocator var0 = new org.jsecurity.jndi.JndiLocator();
    java.util.Properties var1 = var0.getJndiEnvironment();
    org.jsecurity.jndi.JndiTemplate var2 = new org.jsecurity.jndi.JndiTemplate();
    java.util.Properties var3 = var2.getEnvironment();
    var0.setJndiTemplate(var2);
    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      var2.unbind("b598ff3d-5685-4491-8ee6-585d37adb1db");
      fail("Expected exception of type javax.naming.NoInitialContextException");
    } catch (javax.naming.NoInitialContextException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var1);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var3);

  }

  public void test439() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest0.test439");


    org.jsecurity.mgt.DefaultSecurityManager var0 = new org.jsecurity.mgt.DefaultSecurityManager();
    java.io.InputStream var2 = org.jsecurity.util.ClassUtils.getResourceAsStream("");
    java.lang.Object[] var3 = new java.lang.Object[] { var2};
    java.util.List var4 = org.jsecurity.util.CollectionUtils.asList(var3);
    org.jsecurity.authc.pam.ModularRealmAuthenticator var5 = new org.jsecurity.authc.pam.ModularRealmAuthenticator(var4);
    org.jsecurity.authc.pam.AllSuccessfulModularAuthenticationStrategy var6 = new org.jsecurity.authc.pam.AllSuccessfulModularAuthenticationStrategy();
    var5.setModularAuthenticationStrategy((org.jsecurity.authc.pam.ModularAuthenticationStrategy)var6);
    org.jsecurity.authz.SimpleAuthorizationInfo var8 = new org.jsecurity.authz.SimpleAuthorizationInfo();
    var8.addStringPermission("hi!");
    java.io.InputStream var12 = org.jsecurity.util.ClassUtils.getResourceAsStream("");
    java.lang.Object[] var13 = new java.lang.Object[] { var12};
    java.util.List var14 = org.jsecurity.util.CollectionUtils.asList(var13);
    var8.addRoles((java.util.Collection)var14);
    var5.setAuthenticationListeners((java.util.Collection)var14);
    var0.setSessionListeners((java.util.Collection)var14);
    java.io.InputStream var19 = org.jsecurity.util.ClassUtils.getResourceAsStream("");
    java.lang.Object[] var20 = new java.lang.Object[] { var19};
    java.util.List var21 = org.jsecurity.util.CollectionUtils.asList(var20);
    org.jsecurity.authc.pam.ModularRealmAuthenticator var22 = new org.jsecurity.authc.pam.ModularRealmAuthenticator(var21);
    org.jsecurity.authc.pam.AllSuccessfulModularAuthenticationStrategy var23 = new org.jsecurity.authc.pam.AllSuccessfulModularAuthenticationStrategy();
    var22.setModularAuthenticationStrategy((org.jsecurity.authc.pam.ModularAuthenticationStrategy)var23);
    org.jsecurity.authz.SimpleAuthorizationInfo var25 = new org.jsecurity.authz.SimpleAuthorizationInfo();
    var25.addStringPermission("hi!");
    java.io.InputStream var29 = org.jsecurity.util.ClassUtils.getResourceAsStream("");
    java.lang.Object[] var30 = new java.lang.Object[] { var29};
    java.util.List var31 = org.jsecurity.util.CollectionUtils.asList(var30);
    var25.addRoles((java.util.Collection)var31);
    var22.setAuthenticationListeners((java.util.Collection)var31);
    org.jsecurity.realm.activedirectory.ActiveDirectoryRealm var34 = new org.jsecurity.realm.activedirectory.ActiveDirectoryRealm();
    var34.setPrincipalSuffix("");
    var22.setRealm((org.jsecurity.realm.Realm)var34);
    org.jsecurity.cache.HashtableCacheManager var38 = new org.jsecurity.cache.HashtableCacheManager();
    org.jsecurity.cache.Cache var40 = var38.getCache("\u0000\u0000");
    var34.setAuthorizationCache(var40);
    var0.setRealm((org.jsecurity.realm.Realm)var34);
    org.jsecurity.subject.RememberMeManager var43 = var0.getRememberMeManager();
    org.jsecurity.codec.CodecException var46 = new org.jsecurity.codec.CodecException("dd\uFFFD");
    org.jsecurity.authc.ConcurrentAccessException var47 = new org.jsecurity.authc.ConcurrentAccessException("org.jsecurity.authz.UnauthorizedException: org.jsecurity.session.ExpiredSessionException: ", (java.lang.Throwable)var46);
    org.jsecurity.subject.SimplePrincipalCollection var49 = new org.jsecurity.subject.SimplePrincipalCollection((java.lang.Object)var46, "");
    boolean var50 = var49.isEmpty();
    java.util.List var51 = var49.asList();
    org.jsecurity.authc.pam.ModularRealmAuthenticator var52 = new org.jsecurity.authc.pam.ModularRealmAuthenticator(var51);
    var0.setAuthenticationListeners((java.util.Collection)var51);
    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      var0.setRememberMeEncryptionCipherKeyHex("org.jsecurity.authz.UnauthorizedException: org.jsecurity.session.ExpiredSessionException: ");
      fail("Expected exception of type java.lang.IllegalStateException");
    } catch (java.lang.IllegalStateException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var2);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var3);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var4);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var12);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var13);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var14);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var19);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var20);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var21);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var29);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var30);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var31);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var40);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var43);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var50 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var51);

  }

  public void test440() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest0.test440");


    org.jsecurity.mgt.DefaultSecurityManager var0 = new org.jsecurity.mgt.DefaultSecurityManager();
    java.io.InputStream var2 = org.jsecurity.util.ClassUtils.getResourceAsStream("");
    java.lang.Object[] var3 = new java.lang.Object[] { var2};
    java.util.List var4 = org.jsecurity.util.CollectionUtils.asList(var3);
    org.jsecurity.authc.pam.ModularRealmAuthenticator var5 = new org.jsecurity.authc.pam.ModularRealmAuthenticator(var4);
    org.jsecurity.authc.pam.AllSuccessfulModularAuthenticationStrategy var6 = new org.jsecurity.authc.pam.AllSuccessfulModularAuthenticationStrategy();
    var5.setModularAuthenticationStrategy((org.jsecurity.authc.pam.ModularAuthenticationStrategy)var6);
    org.jsecurity.authz.SimpleAuthorizationInfo var8 = new org.jsecurity.authz.SimpleAuthorizationInfo();
    var8.addStringPermission("hi!");
    java.io.InputStream var12 = org.jsecurity.util.ClassUtils.getResourceAsStream("");
    java.lang.Object[] var13 = new java.lang.Object[] { var12};
    java.util.List var14 = org.jsecurity.util.CollectionUtils.asList(var13);
    var8.addRoles((java.util.Collection)var14);
    var5.setAuthenticationListeners((java.util.Collection)var14);
    var0.setSessionListeners((java.util.Collection)var14);
    java.util.Collection var18 = var0.getRealms();
    org.jsecurity.authc.pam.FirstSuccessfulAuthenticationStrategy var19 = new org.jsecurity.authc.pam.FirstSuccessfulAuthenticationStrategy();
    org.jsecurity.authz.UnauthorizedException var21 = new org.jsecurity.authz.UnauthorizedException("org.jsecurity.config.ConfigurationException: dd\uFFFD");
    java.lang.Throwable[] var22 = var21.getSuppressed();
    java.util.List var23 = org.jsecurity.util.CollectionUtils.asList((java.lang.Object[])var22);
    org.jsecurity.authc.UsernamePasswordToken var24 = new org.jsecurity.authc.UsernamePasswordToken();
    java.lang.String var25 = var24.getUsername();
    java.net.InetAddress var26 = var24.getInetAddress();
    org.jsecurity.authc.AuthenticationInfo var27 = var19.beforeAllAttempts((java.util.Collection)var23, (org.jsecurity.authc.AuthenticationToken)var24);
    org.jsecurity.realm.SimpleAccountRealm var29 = new org.jsecurity.realm.SimpleAccountRealm("hi!");
    java.lang.Class var30 = var29.getAuthenticationTokenClass();
    java.util.Collection var31 = org.jsecurity.util.CollectionUtils.emptyCollection(var30);
    org.jsecurity.authc.pam.AllSuccessfulModularAuthenticationStrategy var32 = new org.jsecurity.authc.pam.AllSuccessfulModularAuthenticationStrategy();
    char[] var34 = new char[] { };
    org.jsecurity.authc.UsernamePasswordToken var36 = new org.jsecurity.authc.UsernamePasswordToken("hi!", var34, true);
    org.jsecurity.authc.SimpleAccount var37 = new org.jsecurity.authc.SimpleAccount();
    var37.setCredentialsExpired(false);
    boolean var40 = var37.isLocked();
    org.jsecurity.authc.AuthenticationInfo var41 = var32.afterAllAttempts((org.jsecurity.authc.AuthenticationToken)var36, (org.jsecurity.authc.AuthenticationInfo)var37);
    org.jsecurity.authc.AuthenticationInfo var42 = var19.beforeAllAttempts(var31, (org.jsecurity.authc.AuthenticationToken)var36);
    var0.setAuthenticationListeners(var31);
    org.jsecurity.crypto.hash.Md2Hash var45 = org.jsecurity.crypto.hash.Md2Hash.fromHexString("6464ff");
    java.lang.String var46 = var45.toString();
    byte[] var47 = var45.getBytes();
    byte[] var48 = var45.getBytes();
    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      var0.setRememberMeEncryptionCipherKey(var48);
      fail("Expected exception of type java.lang.IllegalStateException");
    } catch (java.lang.IllegalStateException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var2);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var3);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var4);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var12);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var13);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var14);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var18);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var22);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var23);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var25);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var26);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var27);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var30);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var31);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var34);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var40 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var41);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var42);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var45);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var46 + "' != '" + "6464ff"+ "'", var46.equals("6464ff"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var47);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var48);

  }

  public void test441() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest0.test441");


    org.jsecurity.authz.ModularRealmAuthorizer var0 = new org.jsecurity.authz.ModularRealmAuthorizer();
    java.io.InputStream var2 = org.jsecurity.util.ClassUtils.getResourceAsStream("");
    java.lang.Object[] var3 = new java.lang.Object[] { var2};
    java.util.List var4 = org.jsecurity.util.CollectionUtils.asList(var3);
    org.jsecurity.authc.pam.ModularRealmAuthenticator var5 = new org.jsecurity.authc.pam.ModularRealmAuthenticator(var4);
    org.jsecurity.subject.SimplePrincipalCollection var7 = new org.jsecurity.subject.SimplePrincipalCollection((java.util.Collection)var4, "org.jsecurity.authz.UnauthorizedException: org.jsecurity.session.ExpiredSessionException: ");
    org.jsecurity.session.UnknownSessionException var12 = new org.jsecurity.session.UnknownSessionException("dd\uFFFD", (java.io.Serializable)100.0f);
    org.jsecurity.session.SessionException var14 = new org.jsecurity.session.SessionException("dd\uFFFD", (java.lang.Throwable)var12, (java.io.Serializable)0);
    org.jsecurity.session.SessionException var15 = new org.jsecurity.session.SessionException("dd\uFFFD", (java.lang.Throwable)var12);
    var7.add((java.lang.Object)var15, "org.jsecurity.config.ConfigurationException: dd\uFFFD");
    java.util.Set var18 = var7.asSet();
    var0.setRealms((java.util.Collection)var18);
    org.jsecurity.authz.UnauthorizedException var21 = new org.jsecurity.authz.UnauthorizedException("org.jsecurity.config.ConfigurationException: dd\uFFFD");
    java.lang.Throwable[] var22 = var21.getSuppressed();
    java.util.Set var23 = org.jsecurity.util.CollectionUtils.asSet((java.lang.Object[])var22);
    var0.setRealms((java.util.Collection)var23);
    java.io.InputStream var26 = org.jsecurity.util.ClassUtils.getResourceAsStream("");
    java.lang.Object[] var27 = new java.lang.Object[] { var26};
    java.util.List var28 = org.jsecurity.util.CollectionUtils.asList(var27);
    org.jsecurity.authc.pam.ModularRealmAuthenticator var29 = new org.jsecurity.authc.pam.ModularRealmAuthenticator(var28);
    org.jsecurity.subject.SimplePrincipalCollection var31 = new org.jsecurity.subject.SimplePrincipalCollection((java.util.Collection)var28, "org.jsecurity.authz.UnauthorizedException: org.jsecurity.session.ExpiredSessionException: ");
    org.jsecurity.session.UnknownSessionException var36 = new org.jsecurity.session.UnknownSessionException("dd\uFFFD", (java.io.Serializable)100.0f);
    org.jsecurity.session.SessionException var38 = new org.jsecurity.session.SessionException("dd\uFFFD", (java.lang.Throwable)var36, (java.io.Serializable)0);
    org.jsecurity.session.SessionException var39 = new org.jsecurity.session.SessionException("dd\uFFFD", (java.lang.Throwable)var36);
    var31.add((java.lang.Object)var39, "org.jsecurity.config.ConfigurationException: dd\uFFFD");
    java.lang.String[] var43 = new java.lang.String[] { "\uFFFD\uFFFD\uFFFDq\uFFFD\uFFFD\uFFFD\u01BC\uFFFDg]\uFFFD\uFFFD\u001Fu\uFFFD<\uFFFD\uFFFDi\uFFFD\uFFFD"};
    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      var0.checkPermissions((org.jsecurity.subject.PrincipalCollection)var31, var43);
      fail("Expected exception of type java.lang.IllegalStateException");
    } catch (java.lang.IllegalStateException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var2);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var3);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var4);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var18);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var22);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var23);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var26);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var27);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var28);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var43);

  }

  public void test442() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest0.test442");


    org.jsecurity.authz.permission.WildcardPermissionResolver var1 = new org.jsecurity.authz.permission.WildcardPermissionResolver();
    java.util.Set var2 = org.jsecurity.util.PermissionUtils.resolveDelimitedPermissions("a2b823b1e72eae2b727289df8a00a89df8a0bab6ad8a89c4c5c7a9b62a270000", (org.jsecurity.authz.permission.PermissionResolver)var1);
    org.jsecurity.session.UnknownSessionException var9 = new org.jsecurity.session.UnknownSessionException("dd\uFFFD", (java.io.Serializable)100.0f);
    org.jsecurity.subject.SubjectException var10 = new org.jsecurity.subject.SubjectException("dd\uFFFD", (java.lang.Throwable)var9);
    org.jsecurity.io.SerializationException var11 = new org.jsecurity.io.SerializationException("", (java.lang.Throwable)var10);
    org.jsecurity.session.InvalidSessionException var12 = new org.jsecurity.session.InvalidSessionException("dd\uFFFD", (java.lang.Throwable)var10);
    org.jsecurity.authz.AuthorizationException var13 = new org.jsecurity.authz.AuthorizationException("a2b823b1e72eae2b727289df8a00a89df8a0bab6ad8a89c4c5c7a9b62a270000", (java.lang.Throwable)var12);
    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      org.jsecurity.crypto.hash.Sha384Hash var14 = new org.jsecurity.crypto.hash.Sha384Hash((java.lang.Object)var1, (java.lang.Object)var12);
      fail("Expected exception of type org.jsecurity.codec.CodecException");
    } catch (org.jsecurity.codec.CodecException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var2);

  }

  public void test443() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest0.test443");


    org.jsecurity.mgt.DefaultSecurityManager var0 = new org.jsecurity.mgt.DefaultSecurityManager();
    java.io.InputStream var2 = org.jsecurity.util.ClassUtils.getResourceAsStream("");
    java.lang.Object[] var3 = new java.lang.Object[] { var2};
    java.util.List var4 = org.jsecurity.util.CollectionUtils.asList(var3);
    org.jsecurity.authc.pam.ModularRealmAuthenticator var5 = new org.jsecurity.authc.pam.ModularRealmAuthenticator(var4);
    org.jsecurity.authc.pam.AllSuccessfulModularAuthenticationStrategy var6 = new org.jsecurity.authc.pam.AllSuccessfulModularAuthenticationStrategy();
    var5.setModularAuthenticationStrategy((org.jsecurity.authc.pam.ModularAuthenticationStrategy)var6);
    org.jsecurity.authz.SimpleAuthorizationInfo var8 = new org.jsecurity.authz.SimpleAuthorizationInfo();
    var8.addStringPermission("hi!");
    java.io.InputStream var12 = org.jsecurity.util.ClassUtils.getResourceAsStream("");
    java.lang.Object[] var13 = new java.lang.Object[] { var12};
    java.util.List var14 = org.jsecurity.util.CollectionUtils.asList(var13);
    var8.addRoles((java.util.Collection)var14);
    var5.setAuthenticationListeners((java.util.Collection)var14);
    var0.setSessionListeners((java.util.Collection)var14);
    org.jsecurity.realm.text.TextConfigurationRealm var18 = new org.jsecurity.realm.text.TextConfigurationRealm();
    java.io.InputStream var20 = org.jsecurity.util.ClassUtils.getResourceAsStream("");
    java.lang.Object[] var21 = new java.lang.Object[] { var20};
    java.util.List var22 = org.jsecurity.util.CollectionUtils.asList(var21);
    org.jsecurity.authc.pam.ModularRealmAuthenticator var23 = new org.jsecurity.authc.pam.ModularRealmAuthenticator(var22);
    org.jsecurity.subject.SimplePrincipalCollection var25 = new org.jsecurity.subject.SimplePrincipalCollection((java.util.Collection)var22, "org.jsecurity.authz.UnauthorizedException: org.jsecurity.session.ExpiredSessionException: ");
    org.jsecurity.session.UnknownSessionException var30 = new org.jsecurity.session.UnknownSessionException("dd\uFFFD", (java.io.Serializable)100.0f);
    org.jsecurity.session.SessionException var32 = new org.jsecurity.session.SessionException("dd\uFFFD", (java.lang.Throwable)var30, (java.io.Serializable)0);
    org.jsecurity.session.SessionException var33 = new org.jsecurity.session.SessionException("dd\uFFFD", (java.lang.Throwable)var30);
    var25.add((java.lang.Object)var33, "org.jsecurity.config.ConfigurationException: dd\uFFFD");
    var18.onLogout((org.jsecurity.subject.PrincipalCollection)var25);
    org.jsecurity.authc.pam.FirstSuccessfulAuthenticationStrategy var37 = new org.jsecurity.authc.pam.FirstSuccessfulAuthenticationStrategy();
    org.jsecurity.authz.UnauthorizedException var39 = new org.jsecurity.authz.UnauthorizedException("org.jsecurity.config.ConfigurationException: dd\uFFFD");
    java.lang.Throwable[] var40 = var39.getSuppressed();
    java.util.List var41 = org.jsecurity.util.CollectionUtils.asList((java.lang.Object[])var40);
    org.jsecurity.authc.UsernamePasswordToken var42 = new org.jsecurity.authc.UsernamePasswordToken();
    java.lang.String var43 = var42.getUsername();
    java.net.InetAddress var44 = var42.getInetAddress();
    org.jsecurity.authc.AuthenticationInfo var45 = var37.beforeAllAttempts((java.util.Collection)var41, (org.jsecurity.authc.AuthenticationToken)var42);
    boolean[] var46 = var0.hasRoles((org.jsecurity.subject.PrincipalCollection)var25, var41);
    org.jsecurity.codec.CodecException var49 = new org.jsecurity.codec.CodecException("dd\uFFFD");
    org.jsecurity.authc.ConcurrentAccessException var50 = new org.jsecurity.authc.ConcurrentAccessException("org.jsecurity.authz.UnauthorizedException: org.jsecurity.session.ExpiredSessionException: ", (java.lang.Throwable)var49);
    org.jsecurity.subject.SimplePrincipalCollection var52 = new org.jsecurity.subject.SimplePrincipalCollection((java.lang.Object)var49, "");
    java.io.InputStream var54 = org.jsecurity.util.ClassUtils.getResourceAsStream("");
    java.lang.Object[] var55 = new java.lang.Object[] { var54};
    java.util.List var56 = org.jsecurity.util.CollectionUtils.asList(var55);
    org.jsecurity.authc.pam.ModularRealmAuthenticator var57 = new org.jsecurity.authc.pam.ModularRealmAuthenticator(var56);
    var52.addAll((java.util.Collection)var56, "\u0000\u0000");
    var0.setSessionListeners((java.util.Collection)var56);
    org.jsecurity.subject.RememberMeManager var61 = var0.getRememberMeManager();
    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      var0.setRememberMeCipherKeyHex("orgjsecurityauthcCredentialsException783ccd3148a842dd890fdf885a7baafAA==");
      fail("Expected exception of type java.lang.IllegalStateException");
    } catch (java.lang.IllegalStateException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var2);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var3);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var4);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var12);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var13);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var14);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var20);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var21);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var22);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var40);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var41);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var43);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var44);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var45);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var46);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var54);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var55);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var56);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var61);

  }

  public void test444() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest0.test444");


    org.jsecurity.mgt.DefaultSecurityManager var0 = new org.jsecurity.mgt.DefaultSecurityManager();
    java.io.InputStream var2 = org.jsecurity.util.ClassUtils.getResourceAsStream("");
    java.lang.Object[] var3 = new java.lang.Object[] { var2};
    java.util.List var4 = org.jsecurity.util.CollectionUtils.asList(var3);
    org.jsecurity.authc.pam.ModularRealmAuthenticator var5 = new org.jsecurity.authc.pam.ModularRealmAuthenticator(var4);
    org.jsecurity.authc.pam.AllSuccessfulModularAuthenticationStrategy var6 = new org.jsecurity.authc.pam.AllSuccessfulModularAuthenticationStrategy();
    var5.setModularAuthenticationStrategy((org.jsecurity.authc.pam.ModularAuthenticationStrategy)var6);
    org.jsecurity.authz.SimpleAuthorizationInfo var8 = new org.jsecurity.authz.SimpleAuthorizationInfo();
    var8.addStringPermission("hi!");
    java.io.InputStream var12 = org.jsecurity.util.ClassUtils.getResourceAsStream("");
    java.lang.Object[] var13 = new java.lang.Object[] { var12};
    java.util.List var14 = org.jsecurity.util.CollectionUtils.asList(var13);
    var8.addRoles((java.util.Collection)var14);
    var5.setAuthenticationListeners((java.util.Collection)var14);
    var0.setSessionListeners((java.util.Collection)var14);
    org.jsecurity.authc.pam.ModularRealmAuthenticator var18 = new org.jsecurity.authc.pam.ModularRealmAuthenticator();
    org.jsecurity.authz.permission.InvalidPermissionStringException var21 = new org.jsecurity.authz.permission.InvalidPermissionStringException("", "dd\uFFFD");
    org.jsecurity.JSecurityException var23 = new org.jsecurity.JSecurityException("");
    org.jsecurity.authc.SimpleAuthenticationInfo var25 = new org.jsecurity.authc.SimpleAuthenticationInfo((java.lang.Object)var21, (java.lang.Object)"", "org.jsecurity.authz.UnauthorizedException: org.jsecurity.session.ExpiredSessionException: ");
    org.jsecurity.subject.PrincipalCollection var26 = var25.getPrincipals();
    var18.onLogout(var26);
    var0.setAuthenticator((org.jsecurity.authc.Authenticator)var18);
    org.jsecurity.codec.CodecException var31 = new org.jsecurity.codec.CodecException("dd\uFFFD");
    org.jsecurity.authc.ConcurrentAccessException var32 = new org.jsecurity.authc.ConcurrentAccessException("org.jsecurity.authz.UnauthorizedException: org.jsecurity.session.ExpiredSessionException: ", (java.lang.Throwable)var31);
    org.jsecurity.subject.SimplePrincipalCollection var34 = new org.jsecurity.subject.SimplePrincipalCollection((java.lang.Object)var31, "");
    java.io.InputStream var36 = org.jsecurity.util.ClassUtils.getResourceAsStream("");
    java.lang.Object[] var37 = new java.lang.Object[] { var36};
    java.util.List var38 = org.jsecurity.util.CollectionUtils.asList(var37);
    org.jsecurity.authc.pam.ModularRealmAuthenticator var39 = new org.jsecurity.authc.pam.ModularRealmAuthenticator(var38);
    org.jsecurity.authc.pam.AllSuccessfulModularAuthenticationStrategy var40 = new org.jsecurity.authc.pam.AllSuccessfulModularAuthenticationStrategy();
    var39.setModularAuthenticationStrategy((org.jsecurity.authc.pam.ModularAuthenticationStrategy)var40);
    org.jsecurity.authz.SimpleAuthorizationInfo var42 = new org.jsecurity.authz.SimpleAuthorizationInfo();
    var42.addStringPermission("hi!");
    java.io.InputStream var46 = org.jsecurity.util.ClassUtils.getResourceAsStream("");
    java.lang.Object[] var47 = new java.lang.Object[] { var46};
    java.util.List var48 = org.jsecurity.util.CollectionUtils.asList(var47);
    var42.addRoles((java.util.Collection)var48);
    var39.setAuthenticationListeners((java.util.Collection)var48);
    org.jsecurity.realm.activedirectory.ActiveDirectoryRealm var51 = new org.jsecurity.realm.activedirectory.ActiveDirectoryRealm();
    var51.setPrincipalSuffix("");
    var39.setRealm((org.jsecurity.realm.Realm)var51);
    org.jsecurity.authc.pam.FirstSuccessfulAuthenticationStrategy var55 = new org.jsecurity.authc.pam.FirstSuccessfulAuthenticationStrategy();
    org.jsecurity.authz.UnauthorizedException var57 = new org.jsecurity.authz.UnauthorizedException("org.jsecurity.config.ConfigurationException: dd\uFFFD");
    java.lang.Throwable[] var58 = var57.getSuppressed();
    java.util.List var59 = org.jsecurity.util.CollectionUtils.asList((java.lang.Object[])var58);
    org.jsecurity.authc.UsernamePasswordToken var60 = new org.jsecurity.authc.UsernamePasswordToken();
    java.lang.String var61 = var60.getUsername();
    java.net.InetAddress var62 = var60.getInetAddress();
    org.jsecurity.authc.AuthenticationInfo var63 = var55.beforeAllAttempts((java.util.Collection)var59, (org.jsecurity.authc.AuthenticationToken)var60);
    var39.setModularAuthenticationStrategy((org.jsecurity.authc.pam.ModularAuthenticationStrategy)var55);
    org.jsecurity.authc.SimpleAccount var65 = new org.jsecurity.authc.SimpleAccount((org.jsecurity.subject.PrincipalCollection)var34, (java.lang.Object)var39);
    var0.setAuthenticator((org.jsecurity.authc.Authenticator)var39);
    java.util.Collection var67 = var0.getRealms();
    org.jsecurity.realm.activedirectory.ActiveDirectoryRealm var70 = new org.jsecurity.realm.activedirectory.ActiveDirectoryRealm();
    org.jsecurity.authc.credential.Sha256CredentialsMatcher var71 = new org.jsecurity.authc.credential.Sha256CredentialsMatcher();
    var70.setCredentialsMatcher((org.jsecurity.authc.credential.CredentialsMatcher)var71);
    java.lang.String var73 = var70.getAuthorizationCacheName();
    var70.setPrincipalSuffix("org.jsecurity.config.ConfigurationException: dd\uFFFD");
    org.jsecurity.authz.permission.PermissionResolver var76 = var70.getPermissionResolver();
    java.util.Set var77 = org.jsecurity.util.PermissionUtils.resolveDelimitedPermissions("NfxhYN7ItBfRAmDBmprtU73ghfEEPpcDJrHPkZ06wiY=", var76);
    java.util.Set var78 = org.jsecurity.util.PermissionUtils.resolveDelimitedPermissions("\uFFFD\uFFFD#\uFFFD\uFFFD.\uFFFD+r\uFFFD\u6959(\uFFFD\uFFFDW\uFFFDq\uFFFD.\uFFFD\uFFFD^jY\uFFFDj\uFFFDa\uFFFD\uFFFD\uFFFDj\u0628\u0000", var76);
    var0.setPermissionResolver(var76);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var2);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var3);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var4);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var12);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var13);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var14);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var26);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var36);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var37);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var38);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var46);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var47);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var48);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var58);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var59);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var61);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var62);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var63);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var67);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var73);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var76);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var77);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var78);

  }

  public void test445() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest0.test445");


    org.jsecurity.realm.text.TextConfigurationRealm var0 = new org.jsecurity.realm.text.TextConfigurationRealm();
    org.jsecurity.session.UnknownSessionException var4 = new org.jsecurity.session.UnknownSessionException("dd\uFFFD", (java.io.Serializable)100.0f);
    org.jsecurity.session.SessionException var6 = new org.jsecurity.session.SessionException("dd\uFFFD", (java.lang.Throwable)var4, (java.io.Serializable)0);
    org.jsecurity.authc.SimpleAuthenticationInfo var9 = new org.jsecurity.authc.SimpleAuthenticationInfo((java.lang.Object)0, (java.lang.Object)10, "hi!");
    java.lang.Object var10 = var9.getCredentials();
    java.lang.String var11 = var9.toString();
    org.jsecurity.realm.text.TextConfigurationRealm var12 = new org.jsecurity.realm.text.TextConfigurationRealm();
    java.io.InputStream var14 = org.jsecurity.util.ClassUtils.getResourceAsStream("");
    java.lang.Object[] var15 = new java.lang.Object[] { var14};
    java.util.List var16 = org.jsecurity.util.CollectionUtils.asList(var15);
    org.jsecurity.authc.pam.ModularRealmAuthenticator var17 = new org.jsecurity.authc.pam.ModularRealmAuthenticator(var16);
    org.jsecurity.subject.SimplePrincipalCollection var19 = new org.jsecurity.subject.SimplePrincipalCollection((java.util.Collection)var16, "org.jsecurity.authz.UnauthorizedException: org.jsecurity.session.ExpiredSessionException: ");
    org.jsecurity.session.UnknownSessionException var24 = new org.jsecurity.session.UnknownSessionException("dd\uFFFD", (java.io.Serializable)100.0f);
    org.jsecurity.session.SessionException var26 = new org.jsecurity.session.SessionException("dd\uFFFD", (java.lang.Throwable)var24, (java.io.Serializable)0);
    org.jsecurity.session.SessionException var27 = new org.jsecurity.session.SessionException("dd\uFFFD", (java.lang.Throwable)var24);
    var19.add((java.lang.Object)var27, "org.jsecurity.config.ConfigurationException: dd\uFFFD");
    var12.onLogout((org.jsecurity.subject.PrincipalCollection)var19);
    org.jsecurity.cache.HashtableCacheManager var31 = new org.jsecurity.cache.HashtableCacheManager();
    org.jsecurity.cache.Cache var33 = var31.getCache("\u0000\u0000");
    var12.setAuthorizationCache(var33);
    org.jsecurity.codec.CodecException var37 = new org.jsecurity.codec.CodecException("dd\uFFFD");
    org.jsecurity.authc.ConcurrentAccessException var38 = new org.jsecurity.authc.ConcurrentAccessException("org.jsecurity.authz.UnauthorizedException: org.jsecurity.session.ExpiredSessionException: ", (java.lang.Throwable)var37);
    org.jsecurity.subject.SimplePrincipalCollection var40 = new org.jsecurity.subject.SimplePrincipalCollection((java.lang.Object)var37, "");
    var12.onLogout((org.jsecurity.subject.PrincipalCollection)var40);
    var9.setPrincipals((org.jsecurity.subject.PrincipalCollection)var40);
    org.jsecurity.authz.SimpleRole var43 = new org.jsecurity.authz.SimpleRole();
    org.jsecurity.authz.SimpleAuthorizationInfo var44 = new org.jsecurity.authz.SimpleAuthorizationInfo();
    var44.addRole("a2b823b1e72eae2b727289df8a00a89df8a0bab6ad8a89c4c5c7a9b62a270000");
    org.jsecurity.session.UnknownSessionException var51 = new org.jsecurity.session.UnknownSessionException("dd\uFFFD", (java.io.Serializable)100.0f);
    org.jsecurity.subject.SubjectException var52 = new org.jsecurity.subject.SubjectException("dd\uFFFD", (java.lang.Throwable)var51);
    org.jsecurity.io.SerializationException var53 = new org.jsecurity.io.SerializationException("", (java.lang.Throwable)var52);
    java.lang.Throwable[] var54 = var52.getSuppressed();
    java.util.Set var55 = org.jsecurity.util.CollectionUtils.asSet((java.lang.Object[])var54);
    var44.addRoles((java.util.Collection)var55);
    var43.addAll((java.util.Collection)var55);
    java.lang.String var58 = var43.getName();
    org.jsecurity.authz.permission.WildcardPermission var61 = new org.jsecurity.authz.permission.WildcardPermission("hi!", false);
    var43.add((org.jsecurity.authz.Permission)var61);
    org.jsecurity.authz.permission.WildcardPermission var65 = new org.jsecurity.authz.permission.WildcardPermission("hi!", false);
    var43.add((org.jsecurity.authz.Permission)var65);
    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      var0.checkPermission((org.jsecurity.subject.PrincipalCollection)var40, (org.jsecurity.authz.Permission)var65);
      fail("Expected exception of type java.util.NoSuchElementException");
    } catch (java.util.NoSuchElementException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var10 + "' != '" + 10+ "'", var10.equals(10));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var14);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var15);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var16);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var33);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var54);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var55);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var58);

  }

  public void test446() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest0.test446");


    org.jsecurity.authc.IncorrectCredentialsException var1 = new org.jsecurity.authc.IncorrectCredentialsException("\u0000\u0000");
    org.jsecurity.subject.SubjectException var2 = new org.jsecurity.subject.SubjectException((java.lang.Throwable)var1);

  }

  public void test447() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest0.test447");


    org.jsecurity.authc.credential.SimpleCredentialsMatcher var0 = new org.jsecurity.authc.credential.SimpleCredentialsMatcher();

  }

  public void test448() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest0.test448");


    java.util.Set var1 = org.jsecurity.util.PermissionUtils.toPermissionStrings("\u0000\u0000");
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var1);

  }

  public void test449() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest0.test449");


    org.jsecurity.mgt.DefaultSecurityManager var0 = new org.jsecurity.mgt.DefaultSecurityManager();
    java.io.InputStream var2 = org.jsecurity.util.ClassUtils.getResourceAsStream("");
    java.lang.Object[] var3 = new java.lang.Object[] { var2};
    java.util.List var4 = org.jsecurity.util.CollectionUtils.asList(var3);
    org.jsecurity.authc.pam.ModularRealmAuthenticator var5 = new org.jsecurity.authc.pam.ModularRealmAuthenticator(var4);
    org.jsecurity.authc.pam.AllSuccessfulModularAuthenticationStrategy var6 = new org.jsecurity.authc.pam.AllSuccessfulModularAuthenticationStrategy();
    var5.setModularAuthenticationStrategy((org.jsecurity.authc.pam.ModularAuthenticationStrategy)var6);
    org.jsecurity.authz.SimpleAuthorizationInfo var8 = new org.jsecurity.authz.SimpleAuthorizationInfo();
    var8.addStringPermission("hi!");
    java.io.InputStream var12 = org.jsecurity.util.ClassUtils.getResourceAsStream("");
    java.lang.Object[] var13 = new java.lang.Object[] { var12};
    java.util.List var14 = org.jsecurity.util.CollectionUtils.asList(var13);
    var8.addRoles((java.util.Collection)var14);
    var5.setAuthenticationListeners((java.util.Collection)var14);
    var0.setSessionListeners((java.util.Collection)var14);
    org.jsecurity.realm.text.TextConfigurationRealm var18 = new org.jsecurity.realm.text.TextConfigurationRealm();
    java.io.InputStream var20 = org.jsecurity.util.ClassUtils.getResourceAsStream("");
    java.lang.Object[] var21 = new java.lang.Object[] { var20};
    java.util.List var22 = org.jsecurity.util.CollectionUtils.asList(var21);
    org.jsecurity.authc.pam.ModularRealmAuthenticator var23 = new org.jsecurity.authc.pam.ModularRealmAuthenticator(var22);
    org.jsecurity.subject.SimplePrincipalCollection var25 = new org.jsecurity.subject.SimplePrincipalCollection((java.util.Collection)var22, "org.jsecurity.authz.UnauthorizedException: org.jsecurity.session.ExpiredSessionException: ");
    org.jsecurity.session.UnknownSessionException var30 = new org.jsecurity.session.UnknownSessionException("dd\uFFFD", (java.io.Serializable)100.0f);
    org.jsecurity.session.SessionException var32 = new org.jsecurity.session.SessionException("dd\uFFFD", (java.lang.Throwable)var30, (java.io.Serializable)0);
    org.jsecurity.session.SessionException var33 = new org.jsecurity.session.SessionException("dd\uFFFD", (java.lang.Throwable)var30);
    var25.add((java.lang.Object)var33, "org.jsecurity.config.ConfigurationException: dd\uFFFD");
    var18.onLogout((org.jsecurity.subject.PrincipalCollection)var25);
    org.jsecurity.authc.pam.FirstSuccessfulAuthenticationStrategy var37 = new org.jsecurity.authc.pam.FirstSuccessfulAuthenticationStrategy();
    org.jsecurity.authz.UnauthorizedException var39 = new org.jsecurity.authz.UnauthorizedException("org.jsecurity.config.ConfigurationException: dd\uFFFD");
    java.lang.Throwable[] var40 = var39.getSuppressed();
    java.util.List var41 = org.jsecurity.util.CollectionUtils.asList((java.lang.Object[])var40);
    org.jsecurity.authc.UsernamePasswordToken var42 = new org.jsecurity.authc.UsernamePasswordToken();
    java.lang.String var43 = var42.getUsername();
    java.net.InetAddress var44 = var42.getInetAddress();
    org.jsecurity.authc.AuthenticationInfo var45 = var37.beforeAllAttempts((java.util.Collection)var41, (org.jsecurity.authc.AuthenticationToken)var42);
    boolean[] var46 = var0.hasRoles((org.jsecurity.subject.PrincipalCollection)var25, var41);
    org.jsecurity.codec.CodecException var49 = new org.jsecurity.codec.CodecException("dd\uFFFD");
    org.jsecurity.authc.ConcurrentAccessException var50 = new org.jsecurity.authc.ConcurrentAccessException("org.jsecurity.authz.UnauthorizedException: org.jsecurity.session.ExpiredSessionException: ", (java.lang.Throwable)var49);
    org.jsecurity.subject.SimplePrincipalCollection var52 = new org.jsecurity.subject.SimplePrincipalCollection((java.lang.Object)var49, "");
    java.io.InputStream var54 = org.jsecurity.util.ClassUtils.getResourceAsStream("");
    java.lang.Object[] var55 = new java.lang.Object[] { var54};
    java.util.List var56 = org.jsecurity.util.CollectionUtils.asList(var55);
    org.jsecurity.authc.pam.ModularRealmAuthenticator var57 = new org.jsecurity.authc.pam.ModularRealmAuthenticator(var56);
    var52.addAll((java.util.Collection)var56, "\u0000\u0000");
    var0.setSessionListeners((java.util.Collection)var56);
    org.jsecurity.crypto.BlowfishCipher var61 = new org.jsecurity.crypto.BlowfishCipher();
    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      var0.setRememberMeCipher((org.jsecurity.crypto.Cipher)var61);
      fail("Expected exception of type java.lang.IllegalStateException");
    } catch (java.lang.IllegalStateException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var2);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var3);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var4);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var12);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var13);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var14);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var20);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var21);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var22);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var40);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var41);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var43);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var44);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var45);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var46);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var54);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var55);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var56);

  }

  public void test450() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest0.test450");


    org.jsecurity.cache.ehcache.EhCacheManager var0 = new org.jsecurity.cache.ehcache.EhCacheManager();
    var0.init();
    var0.destroy();
    java.lang.String var3 = var0.getCacheManagerConfigFile();
    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      org.jsecurity.realm.text.PropertiesRealm var4 = new org.jsecurity.realm.text.PropertiesRealm((org.jsecurity.cache.CacheManager)var0);
      fail("Expected exception of type java.lang.IllegalStateException");
    } catch (java.lang.IllegalStateException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var3 + "' != '" + "classpath:org/jsecurity/cache/ehcache/ehcache.xml"+ "'", var3.equals("classpath:org/jsecurity/cache/ehcache/ehcache.xml"));

  }

  public void test451() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest0.test451");


    byte[] var3 = new byte[] { (byte)100, (byte)100, (byte)(-1)};
    java.lang.String var4 = org.jsecurity.codec.CodecSupport.toString(var3);
    byte[] var5 = org.jsecurity.codec.Base64.encode(var3);
    byte[] var6 = org.jsecurity.codec.Base64.encode(var5);
    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      byte[] var7 = org.jsecurity.codec.Hex.decode(var6);
      fail("Expected exception of type java.lang.IllegalArgumentException");
    } catch (java.lang.IllegalArgumentException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var3);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var4 + "' != '" + "dd\uFFFD"+ "'", var4.equals("dd\uFFFD"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var5);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var6);

  }

  public void test452() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest0.test452");


    java.lang.String[] var5 = org.jsecurity.util.StringUtils.tokenizeToStringArray("orgjsecurityauthcCredentialsException783ccd3148a842dd890fdf885a7baafAA==", "", true, true);
    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      java.lang.Object var6 = org.jsecurity.util.ClassUtils.newInstance("6490c538-8530-4846-9179-12c067fd8651", (java.lang.Object[])var5);
      fail("Expected exception of type org.jsecurity.util.UnknownClassException");
    } catch (org.jsecurity.util.UnknownClassException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var5);

  }

  public void test453() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest0.test453");


    org.jsecurity.codec.CodecException var1 = new org.jsecurity.codec.CodecException("5dd0c65d-1422-49c2-becb-9e8dca619ab3");

  }

  public void test454() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest0.test454");


    java.lang.String var1 = org.jsecurity.util.StringUtils.clean("jsecurity-activeSessionCache");
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var1 + "' != '" + "jsecurity-activeSessionCache"+ "'", var1.equals("jsecurity-activeSessionCache"));

  }

  public void test455() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest0.test455");


    org.jsecurity.session.UnknownSessionException var5 = new org.jsecurity.session.UnknownSessionException("dd\uFFFD", (java.io.Serializable)100.0f);
    org.jsecurity.subject.SubjectException var6 = new org.jsecurity.subject.SubjectException("dd\uFFFD", (java.lang.Throwable)var5);
    org.jsecurity.authc.AccountException var7 = new org.jsecurity.authc.AccountException("hi!", (java.lang.Throwable)var6);
    org.jsecurity.session.StoppedSessionException var8 = new org.jsecurity.session.StoppedSessionException((java.lang.Throwable)var7);
    org.jsecurity.JSecurityException var9 = new org.jsecurity.JSecurityException((java.lang.Throwable)var7);
    org.jsecurity.authc.AuthenticationException var10 = new org.jsecurity.authc.AuthenticationException((java.lang.Throwable)var9);
    org.jsecurity.authc.ExpiredCredentialsException var11 = new org.jsecurity.authc.ExpiredCredentialsException("org.jsecurity.realm.SimpleAccountRealm-55-authorization", (java.lang.Throwable)var10);

  }

  public void test456() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest0.test456");


    org.jsecurity.realm.text.TextConfigurationRealm var0 = new org.jsecurity.realm.text.TextConfigurationRealm();
    org.jsecurity.realm.text.TextConfigurationRealm var1 = new org.jsecurity.realm.text.TextConfigurationRealm();
    org.jsecurity.realm.text.TextConfigurationRealm var2 = new org.jsecurity.realm.text.TextConfigurationRealm();
    java.io.InputStream var4 = org.jsecurity.util.ClassUtils.getResourceAsStream("");
    java.lang.Object[] var5 = new java.lang.Object[] { var4};
    java.util.List var6 = org.jsecurity.util.CollectionUtils.asList(var5);
    org.jsecurity.authc.pam.ModularRealmAuthenticator var7 = new org.jsecurity.authc.pam.ModularRealmAuthenticator(var6);
    org.jsecurity.subject.SimplePrincipalCollection var9 = new org.jsecurity.subject.SimplePrincipalCollection((java.util.Collection)var6, "org.jsecurity.authz.UnauthorizedException: org.jsecurity.session.ExpiredSessionException: ");
    org.jsecurity.session.UnknownSessionException var14 = new org.jsecurity.session.UnknownSessionException("dd\uFFFD", (java.io.Serializable)100.0f);
    org.jsecurity.session.SessionException var16 = new org.jsecurity.session.SessionException("dd\uFFFD", (java.lang.Throwable)var14, (java.io.Serializable)0);
    org.jsecurity.session.SessionException var17 = new org.jsecurity.session.SessionException("dd\uFFFD", (java.lang.Throwable)var14);
    var9.add((java.lang.Object)var17, "org.jsecurity.config.ConfigurationException: dd\uFFFD");
    var2.onLogout((org.jsecurity.subject.PrincipalCollection)var9);
    java.util.Collection var22 = var9.fromRealm("\u0000\u0000\u0000");
    var1.onLogout((org.jsecurity.subject.PrincipalCollection)var9);
    java.util.Set var24 = var9.asSet();
    var0.onLogout((org.jsecurity.subject.PrincipalCollection)var9);
    org.jsecurity.codec.CodecException var28 = new org.jsecurity.codec.CodecException("dd\uFFFD");
    org.jsecurity.authc.ConcurrentAccessException var29 = new org.jsecurity.authc.ConcurrentAccessException("org.jsecurity.authz.UnauthorizedException: org.jsecurity.session.ExpiredSessionException: ", (java.lang.Throwable)var28);
    org.jsecurity.subject.SimplePrincipalCollection var31 = new org.jsecurity.subject.SimplePrincipalCollection((java.lang.Object)var28, "");
    org.jsecurity.authc.pam.FirstSuccessfulAuthenticationStrategy var32 = new org.jsecurity.authc.pam.FirstSuccessfulAuthenticationStrategy();
    org.jsecurity.authz.UnauthorizedException var34 = new org.jsecurity.authz.UnauthorizedException("org.jsecurity.config.ConfigurationException: dd\uFFFD");
    java.lang.Throwable[] var35 = var34.getSuppressed();
    java.util.List var36 = org.jsecurity.util.CollectionUtils.asList((java.lang.Object[])var35);
    org.jsecurity.authc.UsernamePasswordToken var37 = new org.jsecurity.authc.UsernamePasswordToken();
    java.lang.String var38 = var37.getUsername();
    java.net.InetAddress var39 = var37.getInetAddress();
    org.jsecurity.authc.AuthenticationInfo var40 = var32.beforeAllAttempts((java.util.Collection)var36, (org.jsecurity.authc.AuthenticationToken)var37);
    org.jsecurity.session.UnknownSessionException var45 = new org.jsecurity.session.UnknownSessionException("dd\uFFFD", (java.io.Serializable)100.0f);
    org.jsecurity.subject.SubjectException var46 = new org.jsecurity.subject.SubjectException("dd\uFFFD", (java.lang.Throwable)var45);
    org.jsecurity.io.SerializationException var47 = new org.jsecurity.io.SerializationException("", (java.lang.Throwable)var46);
    java.lang.Throwable[] var48 = var46.getSuppressed();
    java.util.Set var49 = org.jsecurity.util.CollectionUtils.asSet((java.lang.Object[])var48);
    org.jsecurity.authc.SimpleAccount var50 = new org.jsecurity.authc.SimpleAccount((org.jsecurity.subject.PrincipalCollection)var31, (java.lang.Object)var36, var49);
    java.io.InputStream var52 = org.jsecurity.util.ClassUtils.getResourceAsStream("");
    java.lang.Object[] var53 = new java.lang.Object[] { var52};
    java.util.List var54 = org.jsecurity.util.CollectionUtils.asList(var53);
    org.jsecurity.authc.pam.ModularRealmAuthenticator var55 = new org.jsecurity.authc.pam.ModularRealmAuthenticator(var54);
    org.jsecurity.subject.SimplePrincipalCollection var57 = new org.jsecurity.subject.SimplePrincipalCollection((java.util.Collection)var54, "org.jsecurity.authz.UnauthorizedException: org.jsecurity.session.ExpiredSessionException: ");
    org.jsecurity.io.ResourceException var61 = new org.jsecurity.io.ResourceException("hi!");
    org.jsecurity.authc.UnknownAccountException var62 = new org.jsecurity.authc.UnknownAccountException((java.lang.Throwable)var61);
    org.jsecurity.session.StoppedSessionException var63 = new org.jsecurity.session.StoppedSessionException("dd\uFFFD", (java.io.Serializable)var61);
    org.jsecurity.session.UnknownSessionException var64 = new org.jsecurity.session.UnknownSessionException("org.jsecurity.authz.UnauthorizedException: org.jsecurity.session.ExpiredSessionException: ", (java.lang.Throwable)var61);
    boolean var65 = var57.equals((java.lang.Object)var61);
    var31.addAll((org.jsecurity.subject.PrincipalCollection)var57);
    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      boolean var68 = var0.hasRole((org.jsecurity.subject.PrincipalCollection)var31, "dd\uFFFD");
      fail("Expected exception of type java.util.NoSuchElementException");
    } catch (java.util.NoSuchElementException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var4);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var5);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var6);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var22);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var24);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var35);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var36);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var38);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var39);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var40);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var48);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var49);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var52);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var53);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var54);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var65 == false);

  }

  public void test457() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest0.test457");


    org.jsecurity.authz.permission.InvalidPermissionStringException var2 = new org.jsecurity.authz.permission.InvalidPermissionStringException("hi!", "\uFFFD\uFFFD#\uFFFD\uFFFD.\uFFFD+rr\uFFFD\u07CA\u0000\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\u01E9\uFFFD*'\u0000\u0000");
    org.jsecurity.authc.ExcessiveAttemptsException var3 = new org.jsecurity.authc.ExcessiveAttemptsException((java.lang.Throwable)var2);

  }

  public void test458() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest0.test458");


    org.jsecurity.mgt.DefaultSecurityManager var0 = new org.jsecurity.mgt.DefaultSecurityManager();
    java.io.InputStream var2 = org.jsecurity.util.ClassUtils.getResourceAsStream("");
    java.lang.Object[] var3 = new java.lang.Object[] { var2};
    java.util.List var4 = org.jsecurity.util.CollectionUtils.asList(var3);
    org.jsecurity.authc.pam.ModularRealmAuthenticator var5 = new org.jsecurity.authc.pam.ModularRealmAuthenticator(var4);
    org.jsecurity.authc.pam.AllSuccessfulModularAuthenticationStrategy var6 = new org.jsecurity.authc.pam.AllSuccessfulModularAuthenticationStrategy();
    var5.setModularAuthenticationStrategy((org.jsecurity.authc.pam.ModularAuthenticationStrategy)var6);
    org.jsecurity.authz.SimpleAuthorizationInfo var8 = new org.jsecurity.authz.SimpleAuthorizationInfo();
    var8.addStringPermission("hi!");
    java.io.InputStream var12 = org.jsecurity.util.ClassUtils.getResourceAsStream("");
    java.lang.Object[] var13 = new java.lang.Object[] { var12};
    java.util.List var14 = org.jsecurity.util.CollectionUtils.asList(var13);
    var8.addRoles((java.util.Collection)var14);
    var5.setAuthenticationListeners((java.util.Collection)var14);
    var0.setSessionListeners((java.util.Collection)var14);
    java.util.Collection var18 = var0.getRealms();
    org.jsecurity.authc.pam.FirstSuccessfulAuthenticationStrategy var19 = new org.jsecurity.authc.pam.FirstSuccessfulAuthenticationStrategy();
    org.jsecurity.authz.UnauthorizedException var21 = new org.jsecurity.authz.UnauthorizedException("org.jsecurity.config.ConfigurationException: dd\uFFFD");
    java.lang.Throwable[] var22 = var21.getSuppressed();
    java.util.List var23 = org.jsecurity.util.CollectionUtils.asList((java.lang.Object[])var22);
    org.jsecurity.authc.UsernamePasswordToken var24 = new org.jsecurity.authc.UsernamePasswordToken();
    java.lang.String var25 = var24.getUsername();
    java.net.InetAddress var26 = var24.getInetAddress();
    org.jsecurity.authc.AuthenticationInfo var27 = var19.beforeAllAttempts((java.util.Collection)var23, (org.jsecurity.authc.AuthenticationToken)var24);
    org.jsecurity.realm.SimpleAccountRealm var29 = new org.jsecurity.realm.SimpleAccountRealm("hi!");
    java.lang.Class var30 = var29.getAuthenticationTokenClass();
    java.util.Collection var31 = org.jsecurity.util.CollectionUtils.emptyCollection(var30);
    org.jsecurity.authc.pam.AllSuccessfulModularAuthenticationStrategy var32 = new org.jsecurity.authc.pam.AllSuccessfulModularAuthenticationStrategy();
    char[] var34 = new char[] { };
    org.jsecurity.authc.UsernamePasswordToken var36 = new org.jsecurity.authc.UsernamePasswordToken("hi!", var34, true);
    org.jsecurity.authc.SimpleAccount var37 = new org.jsecurity.authc.SimpleAccount();
    var37.setCredentialsExpired(false);
    boolean var40 = var37.isLocked();
    org.jsecurity.authc.AuthenticationInfo var41 = var32.afterAllAttempts((org.jsecurity.authc.AuthenticationToken)var36, (org.jsecurity.authc.AuthenticationInfo)var37);
    org.jsecurity.authc.AuthenticationInfo var42 = var19.beforeAllAttempts(var31, (org.jsecurity.authc.AuthenticationToken)var36);
    var0.setAuthenticationListeners(var31);
    org.jsecurity.crypto.hash.Md2Hash var45 = org.jsecurity.crypto.hash.Md2Hash.fromBase64String("a2b823b1e72eae2b727289df8a00a89df8a0bab6ad8a89c4c5c7a9b62a270000");
    org.jsecurity.crypto.BlowfishCipher var46 = new org.jsecurity.crypto.BlowfishCipher();
    byte[] var50 = new byte[] { (byte)100, (byte)100, (byte)(-1)};
    java.lang.String var51 = org.jsecurity.codec.CodecSupport.toString(var50);
    byte[] var53 = org.jsecurity.codec.Base64.decode("hi!");
    byte[] var54 = var46.encrypt(var50, var53);
    byte[] var56 = org.jsecurity.codec.Base64.encode(var53, false);
    var45.setBytes(var56);
    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      var0.setRememberMeCipherKey(var56);
      fail("Expected exception of type java.lang.IllegalStateException");
    } catch (java.lang.IllegalStateException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var2);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var3);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var4);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var12);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var13);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var14);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var18);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var22);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var23);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var25);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var26);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var27);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var30);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var31);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var34);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var40 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var41);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var42);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var45);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var50);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var51 + "' != '" + "dd\uFFFD"+ "'", var51.equals("dd\uFFFD"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var53);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var54);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var56);

  }

  public void test459() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest0.test459");


    org.jsecurity.mgt.DefaultSecurityManager var0 = new org.jsecurity.mgt.DefaultSecurityManager();
    org.jsecurity.authz.SimpleAuthorizationInfo var2 = new org.jsecurity.authz.SimpleAuthorizationInfo();
    org.jsecurity.session.UnknownSessionException var7 = new org.jsecurity.session.UnknownSessionException("dd\uFFFD", (java.io.Serializable)100.0f);
    org.jsecurity.subject.SubjectException var8 = new org.jsecurity.subject.SubjectException("dd\uFFFD", (java.lang.Throwable)var7);
    org.jsecurity.io.SerializationException var9 = new org.jsecurity.io.SerializationException("", (java.lang.Throwable)var8);
    java.lang.Throwable[] var10 = var8.getSuppressed();
    java.util.Set var11 = org.jsecurity.util.CollectionUtils.asSet((java.lang.Object[])var10);
    var2.setStringPermissions(var11);
    java.util.Set var13 = var2.getRoles();
    org.jsecurity.authz.SimpleAuthorizationInfo var14 = new org.jsecurity.authz.SimpleAuthorizationInfo();
    var14.addRole("a2b823b1e72eae2b727289df8a00a89df8a0bab6ad8a89c4c5c7a9b62a270000");
    org.jsecurity.session.UnknownSessionException var21 = new org.jsecurity.session.UnknownSessionException("dd\uFFFD", (java.io.Serializable)100.0f);
    org.jsecurity.subject.SubjectException var22 = new org.jsecurity.subject.SubjectException("dd\uFFFD", (java.lang.Throwable)var21);
    org.jsecurity.io.SerializationException var23 = new org.jsecurity.io.SerializationException("", (java.lang.Throwable)var22);
    java.lang.Throwable[] var24 = var22.getSuppressed();
    java.util.Set var25 = org.jsecurity.util.CollectionUtils.asSet((java.lang.Object[])var24);
    var14.addRoles((java.util.Collection)var25);
    var2.setRoles(var25);
    org.jsecurity.authz.SimpleRole var28 = new org.jsecurity.authz.SimpleRole("org.jsecurity.authz.UnauthorizedException: org.jsecurity.session.ExpiredSessionException: ", var25);
    var0.setSessionListeners((java.util.Collection)var25);
    org.jsecurity.authc.pam.AllSuccessfulModularAuthenticationStrategy var30 = new org.jsecurity.authc.pam.AllSuccessfulModularAuthenticationStrategy();
    org.jsecurity.authc.pam.AllSuccessfulModularAuthenticationStrategy var31 = new org.jsecurity.authc.pam.AllSuccessfulModularAuthenticationStrategy();
    char[] var33 = new char[] { };
    org.jsecurity.authc.UsernamePasswordToken var35 = new org.jsecurity.authc.UsernamePasswordToken("hi!", var33, true);
    org.jsecurity.authc.SimpleAccount var36 = new org.jsecurity.authc.SimpleAccount();
    var36.setCredentialsExpired(false);
    boolean var39 = var36.isLocked();
    org.jsecurity.authc.AuthenticationInfo var40 = var31.afterAllAttempts((org.jsecurity.authc.AuthenticationToken)var35, (org.jsecurity.authc.AuthenticationInfo)var36);
    char[] var44 = new char[] { '4', '#'};
    org.jsecurity.authc.UsernamePasswordToken var45 = new org.jsecurity.authc.UsernamePasswordToken("\u0000\u0000", var44);
    org.jsecurity.authc.SimpleAccount var46 = new org.jsecurity.authc.SimpleAccount();
    var46.setCredentialsExpired(false);
    var46.setCredentialsExpired(false);
    boolean var51 = var46.isCredentialsExpired();
    org.jsecurity.authc.AuthenticationInfo var52 = var31.afterAllAttempts((org.jsecurity.authc.AuthenticationToken)var45, (org.jsecurity.authc.AuthenticationInfo)var46);
    org.jsecurity.authz.UnauthenticatedException var56 = new org.jsecurity.authz.UnauthenticatedException();
    org.jsecurity.config.UnresolveableReferenceException var57 = new org.jsecurity.config.UnresolveableReferenceException("", (java.lang.Throwable)var56);
    org.jsecurity.cache.CacheException var58 = new org.jsecurity.cache.CacheException("org.jsecurity.config.ConfigurationException: dd\uFFFD", (java.lang.Throwable)var56);
    org.jsecurity.authc.SimpleAuthenticationInfo var60 = new org.jsecurity.authc.SimpleAuthenticationInfo((java.lang.Object)"org.jsecurity.config.ConfigurationException: dd\uFFFD", (java.lang.Object)var58, "a2b823b1e72eae2b727289df8a00a89df8a0bab6ad8a89c4c5c7a9b62a270000");
    org.jsecurity.subject.PrincipalCollection var61 = var60.getPrincipals();
    org.jsecurity.authc.AuthenticationInfo var62 = var30.afterAllAttempts((org.jsecurity.authc.AuthenticationToken)var45, (org.jsecurity.authc.AuthenticationInfo)var60);
    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      org.jsecurity.subject.Subject var63 = var0.login((org.jsecurity.authc.AuthenticationToken)var45);
      fail("Expected exception of type org.jsecurity.authc.AuthenticationException");
    } catch (org.jsecurity.authc.AuthenticationException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var10);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var11);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var13);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var24);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var25);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var33);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var39 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var40);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var44);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var51 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var52);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var61);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var62);

  }

  public void test460() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest0.test460");


    org.jsecurity.authc.ExpiredCredentialsException var1 = new org.jsecurity.authc.ExpiredCredentialsException("5dd0c65d-1422-49c2-becb-9e8dca619ab3");

  }

  public void test461() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest0.test461");


    org.jsecurity.realm.activedirectory.ActiveDirectoryRealm var0 = new org.jsecurity.realm.activedirectory.ActiveDirectoryRealm();
    org.jsecurity.authc.credential.Sha256CredentialsMatcher var1 = new org.jsecurity.authc.credential.Sha256CredentialsMatcher();
    var0.setCredentialsMatcher((org.jsecurity.authc.credential.CredentialsMatcher)var1);
    java.lang.String var3 = var0.getAuthorizationCacheName();
    var0.setUrl("hi!");
    org.jsecurity.realm.ldap.DefaultLdapContextFactory var6 = new org.jsecurity.realm.ldap.DefaultLdapContextFactory();
    var0.setLdapContextFactory((org.jsecurity.realm.ldap.LdapContextFactory)var6);
    var6.setAuthentication("dd\uFFFD");
    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      javax.naming.ldap.LdapContext var12 = var6.getLdapContext("org.jsecurity.realm.text.TextConfigurationRealm_389", "6490c538-8530-4846-9179-12c067fd8651");
      fail("Expected exception of type java.lang.IllegalStateException");
    } catch (java.lang.IllegalStateException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var3);

  }

  public void test462() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest0.test462");


    org.jsecurity.realm.text.TextConfigurationRealm var0 = new org.jsecurity.realm.text.TextConfigurationRealm();
    java.io.InputStream var2 = org.jsecurity.util.ClassUtils.getResourceAsStream("");
    java.lang.Object[] var3 = new java.lang.Object[] { var2};
    java.util.List var4 = org.jsecurity.util.CollectionUtils.asList(var3);
    org.jsecurity.authc.pam.ModularRealmAuthenticator var5 = new org.jsecurity.authc.pam.ModularRealmAuthenticator(var4);
    org.jsecurity.subject.SimplePrincipalCollection var7 = new org.jsecurity.subject.SimplePrincipalCollection((java.util.Collection)var4, "org.jsecurity.authz.UnauthorizedException: org.jsecurity.session.ExpiredSessionException: ");
    org.jsecurity.session.UnknownSessionException var12 = new org.jsecurity.session.UnknownSessionException("dd\uFFFD", (java.io.Serializable)100.0f);
    org.jsecurity.session.SessionException var14 = new org.jsecurity.session.SessionException("dd\uFFFD", (java.lang.Throwable)var12, (java.io.Serializable)0);
    org.jsecurity.session.SessionException var15 = new org.jsecurity.session.SessionException("dd\uFFFD", (java.lang.Throwable)var12);
    var7.add((java.lang.Object)var15, "org.jsecurity.config.ConfigurationException: dd\uFFFD");
    var0.onLogout((org.jsecurity.subject.PrincipalCollection)var7);
    org.jsecurity.cache.HashtableCacheManager var19 = new org.jsecurity.cache.HashtableCacheManager();
    org.jsecurity.cache.Cache var21 = var19.getCache("\u0000\u0000");
    var0.setAuthorizationCache(var21);
    org.jsecurity.codec.CodecException var25 = new org.jsecurity.codec.CodecException("dd\uFFFD");
    org.jsecurity.authc.ConcurrentAccessException var26 = new org.jsecurity.authc.ConcurrentAccessException("org.jsecurity.authz.UnauthorizedException: org.jsecurity.session.ExpiredSessionException: ", (java.lang.Throwable)var25);
    org.jsecurity.subject.SimplePrincipalCollection var28 = new org.jsecurity.subject.SimplePrincipalCollection((java.lang.Object)var25, "");
    var0.onLogout((org.jsecurity.subject.PrincipalCollection)var28);
    var0.setRoleDefinitions("hi!");
    org.jsecurity.authc.pam.AllSuccessfulModularAuthenticationStrategy var32 = new org.jsecurity.authc.pam.AllSuccessfulModularAuthenticationStrategy();
    char[] var34 = new char[] { };
    org.jsecurity.authc.UsernamePasswordToken var36 = new org.jsecurity.authc.UsernamePasswordToken("hi!", var34, true);
    org.jsecurity.authc.SimpleAccount var37 = new org.jsecurity.authc.SimpleAccount();
    var37.setCredentialsExpired(false);
    boolean var40 = var37.isLocked();
    org.jsecurity.authc.AuthenticationInfo var41 = var32.afterAllAttempts((org.jsecurity.authc.AuthenticationToken)var36, (org.jsecurity.authc.AuthenticationInfo)var37);
    boolean var42 = var0.supports((org.jsecurity.authc.AuthenticationToken)var36);
    java.io.InputStream var44 = org.jsecurity.util.ClassUtils.getResourceAsStream("");
    java.lang.Object[] var45 = new java.lang.Object[] { var44};
    java.util.List var46 = org.jsecurity.util.CollectionUtils.asList(var45);
    org.jsecurity.authc.pam.ModularRealmAuthenticator var47 = new org.jsecurity.authc.pam.ModularRealmAuthenticator(var46);
    org.jsecurity.subject.SimplePrincipalCollection var49 = new org.jsecurity.subject.SimplePrincipalCollection((java.util.Collection)var46, "org.jsecurity.authz.UnauthorizedException: org.jsecurity.session.ExpiredSessionException: ");
    org.jsecurity.io.ResourceException var53 = new org.jsecurity.io.ResourceException("hi!");
    org.jsecurity.authc.UnknownAccountException var54 = new org.jsecurity.authc.UnknownAccountException((java.lang.Throwable)var53);
    org.jsecurity.session.StoppedSessionException var55 = new org.jsecurity.session.StoppedSessionException("dd\uFFFD", (java.io.Serializable)var53);
    org.jsecurity.session.UnknownSessionException var56 = new org.jsecurity.session.UnknownSessionException("org.jsecurity.authz.UnauthorizedException: org.jsecurity.session.ExpiredSessionException: ", (java.lang.Throwable)var53);
    boolean var57 = var49.equals((java.lang.Object)var53);
    org.jsecurity.realm.activedirectory.ActiveDirectoryRealm var60 = new org.jsecurity.realm.activedirectory.ActiveDirectoryRealm();
    org.jsecurity.authc.credential.Sha256CredentialsMatcher var61 = new org.jsecurity.authc.credential.Sha256CredentialsMatcher();
    var60.setCredentialsMatcher((org.jsecurity.authc.credential.CredentialsMatcher)var61);
    java.lang.String var63 = var60.getAuthorizationCacheName();
    var60.setPrincipalSuffix("org.jsecurity.config.ConfigurationException: dd\uFFFD");
    org.jsecurity.authz.permission.PermissionResolver var66 = var60.getPermissionResolver();
    java.util.Set var67 = org.jsecurity.util.PermissionUtils.resolveDelimitedPermissions("NfxhYN7ItBfRAmDBmprtU73ghfEEPpcDJrHPkZ06wiY=", var66);
    java.util.Set var68 = org.jsecurity.util.PermissionUtils.resolveDelimitedPermissions("\uFFFD\uFFFD#\uFFFD\uFFFD.\uFFFD+r\uFFFD\u6959(\uFFFD\uFFFDW\uFFFDq\uFFFD.\uFFFD\uFFFD^jY\uFFFDj\uFFFDa\uFFFD\uFFFD\uFFFDj\u0628\u0000", var66);
    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      var0.checkRoles((org.jsecurity.subject.PrincipalCollection)var49, (java.util.Collection)var68);
      fail("Expected exception of type java.util.NoSuchElementException");
    } catch (java.util.NoSuchElementException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var2);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var3);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var4);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var21);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var34);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var40 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var41);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var42 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var44);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var45);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var46);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var57 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var63);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var66);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var67);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var68);

  }

  public void test463() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest0.test463");


    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      org.jsecurity.config.IniConfiguration var1 = new org.jsecurity.config.IniConfiguration("org.jsecurity.realm.SimpleAccountRealm-52-authorization");
      fail("Expected exception of type org.jsecurity.config.ConfigurationException");
    } catch (org.jsecurity.config.ConfigurationException e) {
      // Expected exception.
    }

  }

  public void test464() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest0.test464");


    org.jsecurity.codec.CodecException var2 = new org.jsecurity.codec.CodecException("dd\uFFFD");
    org.jsecurity.authc.ConcurrentAccessException var3 = new org.jsecurity.authc.ConcurrentAccessException("org.jsecurity.authz.UnauthorizedException: org.jsecurity.session.ExpiredSessionException: ", (java.lang.Throwable)var2);
    org.jsecurity.subject.SimplePrincipalCollection var5 = new org.jsecurity.subject.SimplePrincipalCollection((java.lang.Object)var2, "");
    org.jsecurity.authc.pam.FirstSuccessfulAuthenticationStrategy var6 = new org.jsecurity.authc.pam.FirstSuccessfulAuthenticationStrategy();
    org.jsecurity.authz.UnauthorizedException var8 = new org.jsecurity.authz.UnauthorizedException("org.jsecurity.config.ConfigurationException: dd\uFFFD");
    java.lang.Throwable[] var9 = var8.getSuppressed();
    java.util.List var10 = org.jsecurity.util.CollectionUtils.asList((java.lang.Object[])var9);
    org.jsecurity.authc.UsernamePasswordToken var11 = new org.jsecurity.authc.UsernamePasswordToken();
    java.lang.String var12 = var11.getUsername();
    java.net.InetAddress var13 = var11.getInetAddress();
    org.jsecurity.authc.AuthenticationInfo var14 = var6.beforeAllAttempts((java.util.Collection)var10, (org.jsecurity.authc.AuthenticationToken)var11);
    org.jsecurity.session.UnknownSessionException var19 = new org.jsecurity.session.UnknownSessionException("dd\uFFFD", (java.io.Serializable)100.0f);
    org.jsecurity.subject.SubjectException var20 = new org.jsecurity.subject.SubjectException("dd\uFFFD", (java.lang.Throwable)var19);
    org.jsecurity.io.SerializationException var21 = new org.jsecurity.io.SerializationException("", (java.lang.Throwable)var20);
    java.lang.Throwable[] var22 = var20.getSuppressed();
    java.util.Set var23 = org.jsecurity.util.CollectionUtils.asSet((java.lang.Object[])var22);
    org.jsecurity.authc.SimpleAccount var24 = new org.jsecurity.authc.SimpleAccount((org.jsecurity.subject.PrincipalCollection)var5, (java.lang.Object)var10, var23);
    java.io.InputStream var26 = org.jsecurity.util.ClassUtils.getResourceAsStream("");
    java.lang.Object[] var27 = new java.lang.Object[] { var26};
    java.util.List var28 = org.jsecurity.util.CollectionUtils.asList(var27);
    org.jsecurity.authc.pam.ModularRealmAuthenticator var29 = new org.jsecurity.authc.pam.ModularRealmAuthenticator(var28);
    org.jsecurity.subject.SimplePrincipalCollection var31 = new org.jsecurity.subject.SimplePrincipalCollection((java.util.Collection)var28, "org.jsecurity.authz.UnauthorizedException: org.jsecurity.session.ExpiredSessionException: ");
    org.jsecurity.io.ResourceException var35 = new org.jsecurity.io.ResourceException("hi!");
    org.jsecurity.authc.UnknownAccountException var36 = new org.jsecurity.authc.UnknownAccountException((java.lang.Throwable)var35);
    org.jsecurity.session.StoppedSessionException var37 = new org.jsecurity.session.StoppedSessionException("dd\uFFFD", (java.io.Serializable)var35);
    org.jsecurity.session.UnknownSessionException var38 = new org.jsecurity.session.UnknownSessionException("org.jsecurity.authz.UnauthorizedException: org.jsecurity.session.ExpiredSessionException: ", (java.lang.Throwable)var35);
    boolean var39 = var31.equals((java.lang.Object)var35);
    var5.addAll((org.jsecurity.subject.PrincipalCollection)var31);
    java.util.List var41 = var31.asList();
    org.jsecurity.authz.ModularRealmAuthorizer var42 = new org.jsecurity.authz.ModularRealmAuthorizer((java.util.Collection)var41);
    java.io.InputStream var44 = org.jsecurity.util.ClassUtils.getResourceAsStream("");
    java.lang.Object[] var45 = new java.lang.Object[] { var44};
    java.util.List var46 = org.jsecurity.util.CollectionUtils.asList(var45);
    org.jsecurity.authc.pam.ModularRealmAuthenticator var47 = new org.jsecurity.authc.pam.ModularRealmAuthenticator(var46);
    org.jsecurity.subject.SimplePrincipalCollection var49 = new org.jsecurity.subject.SimplePrincipalCollection((java.util.Collection)var46, "org.jsecurity.authz.UnauthorizedException: org.jsecurity.session.ExpiredSessionException: ");
    org.jsecurity.authz.permission.WildcardPermission var51 = new org.jsecurity.authz.permission.WildcardPermission("a2b823b1e72eae2b727289df8a00a89df8a0bab6ad8a89c4c5c7a9b62a270000");
    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      var42.checkPermission((org.jsecurity.subject.PrincipalCollection)var49, (org.jsecurity.authz.Permission)var51);
      fail("Expected exception of type java.lang.ClassCastException");
    } catch (java.lang.ClassCastException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var9);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var10);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var12);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var13);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var14);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var22);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var23);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var26);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var27);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var28);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var39 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var41);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var44);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var45);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var46);

  }

  public void test465() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest0.test465");


    org.jsecurity.realm.activedirectory.ActiveDirectoryRealm var0 = new org.jsecurity.realm.activedirectory.ActiveDirectoryRealm();
    org.jsecurity.authc.credential.Sha256CredentialsMatcher var1 = new org.jsecurity.authc.credential.Sha256CredentialsMatcher();
    var0.setCredentialsMatcher((org.jsecurity.authc.credential.CredentialsMatcher)var1);
    java.lang.String var3 = var0.getAuthorizationCacheName();
    org.jsecurity.authc.UsernamePasswordToken var4 = new org.jsecurity.authc.UsernamePasswordToken();
    java.lang.String var5 = var4.getUsername();
    java.lang.Object var6 = var4.getPrincipal();
    boolean var7 = var0.supports((org.jsecurity.authc.AuthenticationToken)var4);
    var0.setName("hi!");
    org.jsecurity.authz.SimpleAuthorizationInfo var10 = new org.jsecurity.authz.SimpleAuthorizationInfo();
    var10.addRole("a2b823b1e72eae2b727289df8a00a89df8a0bab6ad8a89c4c5c7a9b62a270000");
    org.jsecurity.authz.SimpleAuthorizationInfo var13 = new org.jsecurity.authz.SimpleAuthorizationInfo();
    var13.addRole("a2b823b1e72eae2b727289df8a00a89df8a0bab6ad8a89c4c5c7a9b62a270000");
    org.jsecurity.session.UnknownSessionException var20 = new org.jsecurity.session.UnknownSessionException("dd\uFFFD", (java.io.Serializable)100.0f);
    org.jsecurity.subject.SubjectException var21 = new org.jsecurity.subject.SubjectException("dd\uFFFD", (java.lang.Throwable)var20);
    org.jsecurity.io.SerializationException var22 = new org.jsecurity.io.SerializationException("", (java.lang.Throwable)var21);
    java.lang.Throwable[] var23 = var21.getSuppressed();
    java.util.Set var24 = org.jsecurity.util.CollectionUtils.asSet((java.lang.Object[])var23);
    var13.addRoles((java.util.Collection)var24);
    var10.setObjectPermissions(var24);
    java.io.InputStream var28 = org.jsecurity.util.ClassUtils.getResourceAsStream("");
    java.lang.Object[] var29 = new java.lang.Object[] { var28};
    java.util.List var30 = org.jsecurity.util.CollectionUtils.asList(var29);
    org.jsecurity.authc.pam.ModularRealmAuthenticator var31 = new org.jsecurity.authc.pam.ModularRealmAuthenticator(var30);
    org.jsecurity.subject.SimplePrincipalCollection var33 = new org.jsecurity.subject.SimplePrincipalCollection((java.util.Collection)var30, "org.jsecurity.authz.UnauthorizedException: org.jsecurity.session.ExpiredSessionException: ");
    java.util.Set var34 = var33.getRealmNames();
    java.io.InputStream var36 = org.jsecurity.util.ClassUtils.getResourceAsStream("");
    java.lang.Object[] var37 = new java.lang.Object[] { var36};
    java.util.List var38 = org.jsecurity.util.CollectionUtils.asList(var37);
    org.jsecurity.authc.pam.ModularRealmAuthenticator var39 = new org.jsecurity.authc.pam.ModularRealmAuthenticator(var38);
    org.jsecurity.subject.SimplePrincipalCollection var41 = new org.jsecurity.subject.SimplePrincipalCollection((java.util.Collection)var38, "org.jsecurity.authz.UnauthorizedException: org.jsecurity.session.ExpiredSessionException: ");
    org.jsecurity.session.UnknownSessionException var46 = new org.jsecurity.session.UnknownSessionException("dd\uFFFD", (java.io.Serializable)100.0f);
    org.jsecurity.session.SessionException var48 = new org.jsecurity.session.SessionException("dd\uFFFD", (java.lang.Throwable)var46, (java.io.Serializable)0);
    org.jsecurity.session.SessionException var49 = new org.jsecurity.session.SessionException("dd\uFFFD", (java.lang.Throwable)var46);
    var41.add((java.lang.Object)var49, "org.jsecurity.config.ConfigurationException: dd\uFFFD");
    java.util.Set var52 = var41.asSet();
    var33.addAll((java.util.Collection)var52, "6464ff");
    var10.setStringPermissions(var52);
    org.jsecurity.subject.SimplePrincipalCollection var57 = new org.jsecurity.subject.SimplePrincipalCollection((java.util.Collection)var52, "\u0000\u0000");
    java.lang.String[] var62 = org.jsecurity.util.StringUtils.split("ZGT/", '4', '#', '4');
    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      boolean var63 = var0.isPermittedAll((org.jsecurity.subject.PrincipalCollection)var57, var62);
      fail("Expected exception of type java.util.NoSuchElementException");
    } catch (java.util.NoSuchElementException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var3);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var5);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var6);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var7 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var23);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var24);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var28);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var29);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var30);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var34);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var36);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var37);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var38);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var52);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var62);

  }

  public void test466() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest0.test466");


    org.jsecurity.jndi.JndiLocator var0 = new org.jsecurity.jndi.JndiLocator();
    java.util.Properties var1 = var0.getJndiEnvironment();
    org.jsecurity.jndi.JndiTemplate var2 = new org.jsecurity.jndi.JndiTemplate();
    java.util.Properties var3 = var2.getEnvironment();
    var0.setJndiTemplate(var2);
    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      var2.unbind("eb8eb80000");
      fail("Expected exception of type javax.naming.NoInitialContextException");
    } catch (javax.naming.NoInitialContextException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var1);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var3);

  }

  public void test467() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest0.test467");


    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      java.security.Key var1 = org.jsecurity.crypto.BlowfishCipher.generateNewKey(100);
      fail("Expected exception of type java.security.InvalidParameterException");
    } catch (java.security.InvalidParameterException e) {
      // Expected exception.
    }

  }

  public void test468() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest0.test468");


    org.jsecurity.codec.CodecException var2 = new org.jsecurity.codec.CodecException("dd\uFFFD");
    org.jsecurity.authc.ConcurrentAccessException var3 = new org.jsecurity.authc.ConcurrentAccessException("org.jsecurity.authz.UnauthorizedException: org.jsecurity.session.ExpiredSessionException: ", (java.lang.Throwable)var2);
    org.jsecurity.subject.SimplePrincipalCollection var5 = new org.jsecurity.subject.SimplePrincipalCollection((java.lang.Object)var2, "");
    org.jsecurity.authc.pam.FirstSuccessfulAuthenticationStrategy var6 = new org.jsecurity.authc.pam.FirstSuccessfulAuthenticationStrategy();
    org.jsecurity.authz.UnauthorizedException var8 = new org.jsecurity.authz.UnauthorizedException("org.jsecurity.config.ConfigurationException: dd\uFFFD");
    java.lang.Throwable[] var9 = var8.getSuppressed();
    java.util.List var10 = org.jsecurity.util.CollectionUtils.asList((java.lang.Object[])var9);
    org.jsecurity.authc.UsernamePasswordToken var11 = new org.jsecurity.authc.UsernamePasswordToken();
    java.lang.String var12 = var11.getUsername();
    java.net.InetAddress var13 = var11.getInetAddress();
    org.jsecurity.authc.AuthenticationInfo var14 = var6.beforeAllAttempts((java.util.Collection)var10, (org.jsecurity.authc.AuthenticationToken)var11);
    org.jsecurity.session.UnknownSessionException var19 = new org.jsecurity.session.UnknownSessionException("dd\uFFFD", (java.io.Serializable)100.0f);
    org.jsecurity.subject.SubjectException var20 = new org.jsecurity.subject.SubjectException("dd\uFFFD", (java.lang.Throwable)var19);
    org.jsecurity.io.SerializationException var21 = new org.jsecurity.io.SerializationException("", (java.lang.Throwable)var20);
    java.lang.Throwable[] var22 = var20.getSuppressed();
    java.util.Set var23 = org.jsecurity.util.CollectionUtils.asSet((java.lang.Object[])var22);
    org.jsecurity.authc.SimpleAccount var24 = new org.jsecurity.authc.SimpleAccount((org.jsecurity.subject.PrincipalCollection)var5, (java.lang.Object)var10, var23);
    java.io.InputStream var26 = org.jsecurity.util.ClassUtils.getResourceAsStream("");
    java.lang.Object[] var27 = new java.lang.Object[] { var26};
    java.util.List var28 = org.jsecurity.util.CollectionUtils.asList(var27);
    org.jsecurity.authc.pam.ModularRealmAuthenticator var29 = new org.jsecurity.authc.pam.ModularRealmAuthenticator(var28);
    org.jsecurity.subject.SimplePrincipalCollection var31 = new org.jsecurity.subject.SimplePrincipalCollection((java.util.Collection)var28, "org.jsecurity.authz.UnauthorizedException: org.jsecurity.session.ExpiredSessionException: ");
    org.jsecurity.io.ResourceException var35 = new org.jsecurity.io.ResourceException("hi!");
    org.jsecurity.authc.UnknownAccountException var36 = new org.jsecurity.authc.UnknownAccountException((java.lang.Throwable)var35);
    org.jsecurity.session.StoppedSessionException var37 = new org.jsecurity.session.StoppedSessionException("dd\uFFFD", (java.io.Serializable)var35);
    org.jsecurity.session.UnknownSessionException var38 = new org.jsecurity.session.UnknownSessionException("org.jsecurity.authz.UnauthorizedException: org.jsecurity.session.ExpiredSessionException: ", (java.lang.Throwable)var35);
    boolean var39 = var31.equals((java.lang.Object)var35);
    var5.addAll((org.jsecurity.subject.PrincipalCollection)var31);
    java.util.List var41 = var31.asList();
    org.jsecurity.authz.ModularRealmAuthorizer var42 = new org.jsecurity.authz.ModularRealmAuthorizer((java.util.Collection)var41);
    java.io.InputStream var44 = org.jsecurity.util.ClassUtils.getResourceAsStream("");
    java.lang.Object[] var45 = new java.lang.Object[] { var44};
    java.util.List var46 = org.jsecurity.util.CollectionUtils.asList(var45);
    org.jsecurity.authc.pam.ModularRealmAuthenticator var47 = new org.jsecurity.authc.pam.ModularRealmAuthenticator(var46);
    org.jsecurity.subject.SimplePrincipalCollection var49 = new org.jsecurity.subject.SimplePrincipalCollection((java.util.Collection)var46, "org.jsecurity.authz.UnauthorizedException: org.jsecurity.session.ExpiredSessionException: ");
    org.jsecurity.io.ResourceException var53 = new org.jsecurity.io.ResourceException("hi!");
    org.jsecurity.authc.UnknownAccountException var54 = new org.jsecurity.authc.UnknownAccountException((java.lang.Throwable)var53);
    org.jsecurity.session.StoppedSessionException var55 = new org.jsecurity.session.StoppedSessionException("dd\uFFFD", (java.io.Serializable)var53);
    org.jsecurity.session.UnknownSessionException var56 = new org.jsecurity.session.UnknownSessionException("org.jsecurity.authz.UnauthorizedException: org.jsecurity.session.ExpiredSessionException: ", (java.lang.Throwable)var53);
    boolean var57 = var49.equals((java.lang.Object)var53);
    org.jsecurity.authz.aop.RoleAnnotationMethodInterceptor var58 = new org.jsecurity.authz.aop.RoleAnnotationMethodInterceptor();
    org.jsecurity.aop.AnnotationHandler var59 = var58.getHandler();
    java.lang.Class var60 = var59.getAnnotationClass();
    java.lang.Object var61 = var49.oneByType(var60);
    boolean var62 = var49.isEmpty();
    java.lang.String[] var65 = org.jsecurity.util.StringUtils.tokenizeToStringArray("hi!", "");
    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      var42.checkPermissions((org.jsecurity.subject.PrincipalCollection)var49, var65);
      fail("Expected exception of type java.lang.ClassCastException");
    } catch (java.lang.ClassCastException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var9);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var10);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var12);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var13);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var14);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var22);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var23);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var26);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var27);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var28);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var39 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var41);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var44);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var45);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var46);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var57 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var59);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var60);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var61);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var62 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var65);

  }

  public void test469() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest0.test469");


    org.jsecurity.mgt.DefaultSecurityManager var0 = new org.jsecurity.mgt.DefaultSecurityManager();
    java.io.InputStream var2 = org.jsecurity.util.ClassUtils.getResourceAsStream("");
    java.lang.Object[] var3 = new java.lang.Object[] { var2};
    java.util.List var4 = org.jsecurity.util.CollectionUtils.asList(var3);
    org.jsecurity.authc.pam.ModularRealmAuthenticator var5 = new org.jsecurity.authc.pam.ModularRealmAuthenticator(var4);
    org.jsecurity.authc.pam.AllSuccessfulModularAuthenticationStrategy var6 = new org.jsecurity.authc.pam.AllSuccessfulModularAuthenticationStrategy();
    var5.setModularAuthenticationStrategy((org.jsecurity.authc.pam.ModularAuthenticationStrategy)var6);
    org.jsecurity.authz.SimpleAuthorizationInfo var8 = new org.jsecurity.authz.SimpleAuthorizationInfo();
    var8.addStringPermission("hi!");
    java.io.InputStream var12 = org.jsecurity.util.ClassUtils.getResourceAsStream("");
    java.lang.Object[] var13 = new java.lang.Object[] { var12};
    java.util.List var14 = org.jsecurity.util.CollectionUtils.asList(var13);
    var8.addRoles((java.util.Collection)var14);
    var5.setAuthenticationListeners((java.util.Collection)var14);
    var0.setSessionListeners((java.util.Collection)var14);
    org.jsecurity.authc.pam.ModularRealmAuthenticator var18 = new org.jsecurity.authc.pam.ModularRealmAuthenticator();
    org.jsecurity.authz.permission.InvalidPermissionStringException var21 = new org.jsecurity.authz.permission.InvalidPermissionStringException("", "dd\uFFFD");
    org.jsecurity.JSecurityException var23 = new org.jsecurity.JSecurityException("");
    org.jsecurity.authc.SimpleAuthenticationInfo var25 = new org.jsecurity.authc.SimpleAuthenticationInfo((java.lang.Object)var21, (java.lang.Object)"", "org.jsecurity.authz.UnauthorizedException: org.jsecurity.session.ExpiredSessionException: ");
    org.jsecurity.subject.PrincipalCollection var26 = var25.getPrincipals();
    var18.onLogout(var26);
    var0.setAuthenticator((org.jsecurity.authc.Authenticator)var18);
    org.jsecurity.codec.CodecException var31 = new org.jsecurity.codec.CodecException("dd\uFFFD");
    org.jsecurity.authc.ConcurrentAccessException var32 = new org.jsecurity.authc.ConcurrentAccessException("org.jsecurity.authz.UnauthorizedException: org.jsecurity.session.ExpiredSessionException: ", (java.lang.Throwable)var31);
    org.jsecurity.subject.SimplePrincipalCollection var34 = new org.jsecurity.subject.SimplePrincipalCollection((java.lang.Object)var31, "");
    org.jsecurity.authc.pam.FirstSuccessfulAuthenticationStrategy var35 = new org.jsecurity.authc.pam.FirstSuccessfulAuthenticationStrategy();
    org.jsecurity.authz.UnauthorizedException var37 = new org.jsecurity.authz.UnauthorizedException("org.jsecurity.config.ConfigurationException: dd\uFFFD");
    java.lang.Throwable[] var38 = var37.getSuppressed();
    java.util.List var39 = org.jsecurity.util.CollectionUtils.asList((java.lang.Object[])var38);
    org.jsecurity.authc.UsernamePasswordToken var40 = new org.jsecurity.authc.UsernamePasswordToken();
    java.lang.String var41 = var40.getUsername();
    java.net.InetAddress var42 = var40.getInetAddress();
    org.jsecurity.authc.AuthenticationInfo var43 = var35.beforeAllAttempts((java.util.Collection)var39, (org.jsecurity.authc.AuthenticationToken)var40);
    org.jsecurity.session.UnknownSessionException var48 = new org.jsecurity.session.UnknownSessionException("dd\uFFFD", (java.io.Serializable)100.0f);
    org.jsecurity.subject.SubjectException var49 = new org.jsecurity.subject.SubjectException("dd\uFFFD", (java.lang.Throwable)var48);
    org.jsecurity.io.SerializationException var50 = new org.jsecurity.io.SerializationException("", (java.lang.Throwable)var49);
    java.lang.Throwable[] var51 = var49.getSuppressed();
    java.util.Set var52 = org.jsecurity.util.CollectionUtils.asSet((java.lang.Object[])var51);
    org.jsecurity.authc.SimpleAccount var53 = new org.jsecurity.authc.SimpleAccount((org.jsecurity.subject.PrincipalCollection)var34, (java.lang.Object)var39, var52);
    java.io.InputStream var55 = org.jsecurity.util.ClassUtils.getResourceAsStream("");
    java.lang.Object[] var56 = new java.lang.Object[] { var55};
    java.util.List var57 = org.jsecurity.util.CollectionUtils.asList(var56);
    org.jsecurity.authc.pam.ModularRealmAuthenticator var58 = new org.jsecurity.authc.pam.ModularRealmAuthenticator(var57);
    org.jsecurity.subject.SimplePrincipalCollection var60 = new org.jsecurity.subject.SimplePrincipalCollection((java.util.Collection)var57, "org.jsecurity.authz.UnauthorizedException: org.jsecurity.session.ExpiredSessionException: ");
    org.jsecurity.io.ResourceException var64 = new org.jsecurity.io.ResourceException("hi!");
    org.jsecurity.authc.UnknownAccountException var65 = new org.jsecurity.authc.UnknownAccountException((java.lang.Throwable)var64);
    org.jsecurity.session.StoppedSessionException var66 = new org.jsecurity.session.StoppedSessionException("dd\uFFFD", (java.io.Serializable)var64);
    org.jsecurity.session.UnknownSessionException var67 = new org.jsecurity.session.UnknownSessionException("org.jsecurity.authz.UnauthorizedException: org.jsecurity.session.ExpiredSessionException: ", (java.lang.Throwable)var64);
    boolean var68 = var60.equals((java.lang.Object)var64);
    var34.addAll((org.jsecurity.subject.PrincipalCollection)var60);
    org.jsecurity.session.UnknownSessionException var74 = new org.jsecurity.session.UnknownSessionException("dd\uFFFD", (java.io.Serializable)100.0f);
    org.jsecurity.subject.SubjectException var75 = new org.jsecurity.subject.SubjectException("dd\uFFFD", (java.lang.Throwable)var74);
    org.jsecurity.io.SerializationException var76 = new org.jsecurity.io.SerializationException("", (java.lang.Throwable)var75);
    java.lang.Throwable[] var77 = var75.getSuppressed();
    java.util.List var78 = org.jsecurity.util.CollectionUtils.asList((java.lang.Object[])var77);
    boolean var79 = var0.isPermittedAll((org.jsecurity.subject.PrincipalCollection)var34, (java.util.Collection)var78);
    org.jsecurity.session.UnknownSessionException var85 = new org.jsecurity.session.UnknownSessionException("dd\uFFFD", (java.io.Serializable)100.0f);
    org.jsecurity.subject.SubjectException var86 = new org.jsecurity.subject.SubjectException("dd\uFFFD", (java.lang.Throwable)var85);
    org.jsecurity.io.SerializationException var87 = new org.jsecurity.io.SerializationException("", (java.lang.Throwable)var86);
    org.jsecurity.authc.UnknownAccountException var88 = new org.jsecurity.authc.UnknownAccountException("org.jsecurity.authz.UnauthorizedException: org.jsecurity.session.ExpiredSessionException: ", (java.lang.Throwable)var86);
    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      org.jsecurity.session.Session var89 = var0.getSession((java.io.Serializable)var86);
      fail("Expected exception of type org.jsecurity.session.InvalidSessionException");
    } catch (org.jsecurity.session.InvalidSessionException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var2);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var3);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var4);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var12);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var13);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var14);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var26);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var38);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var39);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var41);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var42);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var43);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var51);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var52);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var55);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var56);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var57);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var68 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var77);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var78);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var79 == true);

  }

  public void test470() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest0.test470");


    org.jsecurity.realm.activedirectory.ActiveDirectoryRealm var0 = new org.jsecurity.realm.activedirectory.ActiveDirectoryRealm();
    var0.init();
    var0.setSystemPassword("dd\uFFFD");
    org.jsecurity.authz.aop.GuestAnnotationHandler var4 = new org.jsecurity.authz.aop.GuestAnnotationHandler();
    java.lang.Class var5 = var4.getAnnotationClass();
    var0.setAuthenticationTokenClass(var5);
    org.jsecurity.mgt.DefaultSecurityManager var7 = new org.jsecurity.mgt.DefaultSecurityManager((org.jsecurity.realm.Realm)var0);
    var0.setSystemPassword("e2100c27-e41d-4c80-964c-90268ef4a856");
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var5);

  }

  public void test471() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest0.test471");


    org.jsecurity.session.UnknownSessionException var6 = new org.jsecurity.session.UnknownSessionException("dd\uFFFD", (java.io.Serializable)100.0f);
    org.jsecurity.config.ConfigurationException var7 = new org.jsecurity.config.ConfigurationException("dd\uFFFD", (java.lang.Throwable)var6);
    org.jsecurity.session.ExpiredSessionException var9 = new org.jsecurity.session.ExpiredSessionException("", (java.lang.Throwable)var7, (java.io.Serializable)true);
    org.jsecurity.authc.pam.UnsupportedTokenException var10 = new org.jsecurity.authc.pam.UnsupportedTokenException((java.lang.Throwable)var9);
    org.jsecurity.authc.AccountException var11 = new org.jsecurity.authc.AccountException((java.lang.Throwable)var10);
    org.jsecurity.authz.UnauthorizedException var12 = new org.jsecurity.authz.UnauthorizedException("a2b823b1e72eae2b727289df8a00a89df8a0bab6ad8a89c4c5c7a9b62a270000", (java.lang.Throwable)var11);
    org.jsecurity.session.InvalidSessionException var13 = new org.jsecurity.session.InvalidSessionException((java.lang.Throwable)var11);
    org.jsecurity.util.UnavailableConstructorException var14 = new org.jsecurity.util.UnavailableConstructorException((java.lang.Throwable)var11);
    org.jsecurity.session.InvalidSessionException var15 = new org.jsecurity.session.InvalidSessionException((java.lang.Throwable)var14);
    org.jsecurity.authc.pam.UnsupportedTokenException var16 = new org.jsecurity.authc.pam.UnsupportedTokenException("jsecurity-activeSessionCache", (java.lang.Throwable)var15);

  }

  public void test472() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest0.test472");


    org.jsecurity.mgt.DefaultSecurityManager var0 = new org.jsecurity.mgt.DefaultSecurityManager();
    org.jsecurity.authz.permission.WildcardPermissionResolver var1 = new org.jsecurity.authz.permission.WildcardPermissionResolver();
    var0.setPermissionResolver((org.jsecurity.authz.permission.PermissionResolver)var1);
    org.jsecurity.cache.CacheManager var3 = var0.getCacheManager();
    org.jsecurity.codec.CodecException var6 = new org.jsecurity.codec.CodecException("dd\uFFFD");
    org.jsecurity.authc.ConcurrentAccessException var7 = new org.jsecurity.authc.ConcurrentAccessException("org.jsecurity.authz.UnauthorizedException: org.jsecurity.session.ExpiredSessionException: ", (java.lang.Throwable)var6);
    org.jsecurity.subject.SimplePrincipalCollection var9 = new org.jsecurity.subject.SimplePrincipalCollection((java.lang.Object)var6, "");
    boolean var10 = var9.isEmpty();
    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      boolean var12 = var0.isPermitted((org.jsecurity.subject.PrincipalCollection)var9, "eb8eb80000");
      fail("Expected exception of type java.util.NoSuchElementException");
    } catch (java.util.NoSuchElementException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var3);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var10 == false);

  }

  public void test473() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest0.test473");


    org.jsecurity.authz.UnauthorizedException var2 = new org.jsecurity.authz.UnauthorizedException();
    org.jsecurity.session.SessionException var4 = new org.jsecurity.session.SessionException("", (java.lang.Throwable)var2, (java.io.Serializable)"org.jsecurity.config.ConfigurationException: dd\uFFFD");
    org.jsecurity.util.InstantiationException var5 = new org.jsecurity.util.InstantiationException("\uFFFD\uFFFD#\uFFFD\uFFFD.\uFFFD+rr\uFFFD\u07CA\u0000\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\u01E9\uFFFD*'\u0000\u0000", (java.lang.Throwable)var2);

  }

  public void test474() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest0.test474");


    org.jsecurity.crypto.hash.Sha1Hash var1 = org.jsecurity.crypto.hash.Sha1Hash.fromBase64String("\u0000\u0000");
    java.lang.String var2 = var1.toBase64();
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var2 + "' != '" + ""+ "'", var2.equals(""));

  }

  public void test475() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest0.test475");


    org.jsecurity.mgt.DefaultSecurityManager var0 = new org.jsecurity.mgt.DefaultSecurityManager();
    org.jsecurity.authc.pam.AllSuccessfulModularAuthenticationStrategy var1 = new org.jsecurity.authc.pam.AllSuccessfulModularAuthenticationStrategy();
    org.jsecurity.authc.pam.AllSuccessfulModularAuthenticationStrategy var2 = new org.jsecurity.authc.pam.AllSuccessfulModularAuthenticationStrategy();
    char[] var4 = new char[] { };
    org.jsecurity.authc.UsernamePasswordToken var6 = new org.jsecurity.authc.UsernamePasswordToken("hi!", var4, true);
    org.jsecurity.authc.SimpleAccount var7 = new org.jsecurity.authc.SimpleAccount();
    var7.setCredentialsExpired(false);
    boolean var10 = var7.isLocked();
    org.jsecurity.authc.AuthenticationInfo var11 = var2.afterAllAttempts((org.jsecurity.authc.AuthenticationToken)var6, (org.jsecurity.authc.AuthenticationInfo)var7);
    char[] var15 = new char[] { '4', '#'};
    org.jsecurity.authc.UsernamePasswordToken var16 = new org.jsecurity.authc.UsernamePasswordToken("\u0000\u0000", var15);
    org.jsecurity.authc.SimpleAccount var17 = new org.jsecurity.authc.SimpleAccount();
    var17.setCredentialsExpired(false);
    var17.setCredentialsExpired(false);
    boolean var22 = var17.isCredentialsExpired();
    org.jsecurity.authc.AuthenticationInfo var23 = var2.afterAllAttempts((org.jsecurity.authc.AuthenticationToken)var16, (org.jsecurity.authc.AuthenticationInfo)var17);
    org.jsecurity.authz.UnauthenticatedException var27 = new org.jsecurity.authz.UnauthenticatedException();
    org.jsecurity.config.UnresolveableReferenceException var28 = new org.jsecurity.config.UnresolveableReferenceException("", (java.lang.Throwable)var27);
    org.jsecurity.cache.CacheException var29 = new org.jsecurity.cache.CacheException("org.jsecurity.config.ConfigurationException: dd\uFFFD", (java.lang.Throwable)var27);
    org.jsecurity.authc.SimpleAuthenticationInfo var31 = new org.jsecurity.authc.SimpleAuthenticationInfo((java.lang.Object)"org.jsecurity.config.ConfigurationException: dd\uFFFD", (java.lang.Object)var29, "a2b823b1e72eae2b727289df8a00a89df8a0bab6ad8a89c4c5c7a9b62a270000");
    org.jsecurity.subject.PrincipalCollection var32 = var31.getPrincipals();
    org.jsecurity.authc.AuthenticationInfo var33 = var1.afterAllAttempts((org.jsecurity.authc.AuthenticationToken)var16, (org.jsecurity.authc.AuthenticationInfo)var31);
    var0.setModularAuthenticationStrategy((org.jsecurity.authc.pam.ModularAuthenticationStrategy)var1);
    org.jsecurity.subject.RememberMeManager var35 = var0.getRememberMeManager();
    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      var0.setRememberMeDecryptionCipherKeyHex("\uFFFD\uFFFD\uFFFDq\uFFFD\uFFFD\uFFFD\u01BC\uFFFDg]\uFFFD\uFFFD\u001Fu\uFFFD<\uFFFD\uFFFDi\uFFFD\uFFFD");
      fail("Expected exception of type java.lang.IllegalStateException");
    } catch (java.lang.IllegalStateException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var4);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var10 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var11);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var15);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var22 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var23);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var32);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var33);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var35);

  }

  public void test476() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest0.test476");


    org.jsecurity.cache.ehcache.EhCacheManager var0 = new org.jsecurity.cache.ehcache.EhCacheManager();
    net.sf.ehcache.CacheManager var1 = var0.getCacheManager();
    var0.setCacheManagerConfigFile("org.jsecurity.authz.UnauthorizedException: org.jsecurity.session.ExpiredSessionException: ");
    java.lang.String var4 = var0.getCacheManagerConfigFile();
    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      var0.init();
      fail("Expected exception of type org.jsecurity.cache.CacheException");
    } catch (org.jsecurity.cache.CacheException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var4 + "' != '" + "org.jsecurity.authz.UnauthorizedException: org.jsecurity.session.ExpiredSessionException: "+ "'", var4.equals("org.jsecurity.authz.UnauthorizedException: org.jsecurity.session.ExpiredSessionException: "));

  }

  public void test477() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest0.test477");


    org.jsecurity.cache.HashtableCache var1 = new org.jsecurity.cache.HashtableCache("\u0000\u0000\u0000");
    org.jsecurity.session.mgt.SimpleSession var2 = new org.jsecurity.session.mgt.SimpleSession();
    var2.touch();
    org.jsecurity.authz.UnauthenticatedException var6 = new org.jsecurity.authz.UnauthenticatedException();
    org.jsecurity.config.UnresolveableReferenceException var7 = new org.jsecurity.config.UnresolveableReferenceException("", (java.lang.Throwable)var6);
    org.jsecurity.cache.CacheException var8 = new org.jsecurity.cache.CacheException("org.jsecurity.config.ConfigurationException: dd\uFFFD", (java.lang.Throwable)var6);
    java.lang.Object var9 = var2.removeAttribute((java.lang.Object)var8);
    org.jsecurity.mgt.DefaultSecurityManager var10 = new org.jsecurity.mgt.DefaultSecurityManager();
    org.jsecurity.authc.pam.AllSuccessfulModularAuthenticationStrategy var11 = new org.jsecurity.authc.pam.AllSuccessfulModularAuthenticationStrategy();
    org.jsecurity.authc.pam.AllSuccessfulModularAuthenticationStrategy var12 = new org.jsecurity.authc.pam.AllSuccessfulModularAuthenticationStrategy();
    char[] var14 = new char[] { };
    org.jsecurity.authc.UsernamePasswordToken var16 = new org.jsecurity.authc.UsernamePasswordToken("hi!", var14, true);
    org.jsecurity.authc.SimpleAccount var17 = new org.jsecurity.authc.SimpleAccount();
    var17.setCredentialsExpired(false);
    boolean var20 = var17.isLocked();
    org.jsecurity.authc.AuthenticationInfo var21 = var12.afterAllAttempts((org.jsecurity.authc.AuthenticationToken)var16, (org.jsecurity.authc.AuthenticationInfo)var17);
    char[] var25 = new char[] { '4', '#'};
    org.jsecurity.authc.UsernamePasswordToken var26 = new org.jsecurity.authc.UsernamePasswordToken("\u0000\u0000", var25);
    org.jsecurity.authc.SimpleAccount var27 = new org.jsecurity.authc.SimpleAccount();
    var27.setCredentialsExpired(false);
    var27.setCredentialsExpired(false);
    boolean var32 = var27.isCredentialsExpired();
    org.jsecurity.authc.AuthenticationInfo var33 = var12.afterAllAttempts((org.jsecurity.authc.AuthenticationToken)var26, (org.jsecurity.authc.AuthenticationInfo)var27);
    org.jsecurity.authz.UnauthenticatedException var37 = new org.jsecurity.authz.UnauthenticatedException();
    org.jsecurity.config.UnresolveableReferenceException var38 = new org.jsecurity.config.UnresolveableReferenceException("", (java.lang.Throwable)var37);
    org.jsecurity.cache.CacheException var39 = new org.jsecurity.cache.CacheException("org.jsecurity.config.ConfigurationException: dd\uFFFD", (java.lang.Throwable)var37);
    org.jsecurity.authc.SimpleAuthenticationInfo var41 = new org.jsecurity.authc.SimpleAuthenticationInfo((java.lang.Object)"org.jsecurity.config.ConfigurationException: dd\uFFFD", (java.lang.Object)var39, "a2b823b1e72eae2b727289df8a00a89df8a0bab6ad8a89c4c5c7a9b62a270000");
    org.jsecurity.subject.PrincipalCollection var42 = var41.getPrincipals();
    org.jsecurity.authc.AuthenticationInfo var43 = var11.afterAllAttempts((org.jsecurity.authc.AuthenticationToken)var26, (org.jsecurity.authc.AuthenticationInfo)var41);
    var10.setModularAuthenticationStrategy((org.jsecurity.authc.pam.ModularAuthenticationStrategy)var11);
    org.jsecurity.subject.RememberMeManager var45 = var10.getRememberMeManager();
    org.jsecurity.authc.pam.ModularRealmAuthenticator var46 = new org.jsecurity.authc.pam.ModularRealmAuthenticator();
    var10.setAuthenticator((org.jsecurity.authc.Authenticator)var46);
    var1.put((java.lang.Object)var2, (java.lang.Object)var46);
    org.jsecurity.session.mgt.ImmutableProxiedSession var49 = new org.jsecurity.session.mgt.ImmutableProxiedSession((org.jsecurity.session.Session)var2);
    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      var49.stop();
      fail("Expected exception of type org.jsecurity.session.InvalidSessionException");
    } catch (org.jsecurity.session.InvalidSessionException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var9);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var14);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var20 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var21);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var25);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var32 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var33);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var42);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var43);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var45);

  }

  public void test478() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest0.test478");


    org.jsecurity.session.mgt.DefaultSessionManager var0 = new org.jsecurity.session.mgt.DefaultSessionManager();
    org.jsecurity.session.mgt.SessionValidationScheduler var1 = var0.getSessionValidationScheduler();
    org.jsecurity.authz.permission.AllPermission var2 = new org.jsecurity.authz.permission.AllPermission();
    org.jsecurity.authz.SimpleRole var4 = new org.jsecurity.authz.SimpleRole();
    org.jsecurity.authz.permission.WildcardPermission var7 = new org.jsecurity.authz.permission.WildcardPermission("hi!", false);
    boolean var8 = var4.isPermitted((org.jsecurity.authz.Permission)var7);
    org.jsecurity.session.InvalidSessionException var9 = new org.jsecurity.session.InvalidSessionException("org.jsecurity.config.ConfigurationException: dd\uFFFD", (java.io.Serializable)var7);
    org.jsecurity.authz.SimpleRole var10 = new org.jsecurity.authz.SimpleRole();
    org.jsecurity.authz.permission.WildcardPermission var13 = new org.jsecurity.authz.permission.WildcardPermission("hi!", false);
    boolean var14 = var10.isPermitted((org.jsecurity.authz.Permission)var13);
    boolean var15 = var7.implies((org.jsecurity.authz.Permission)var13);
    boolean var16 = var2.implies((org.jsecurity.authz.Permission)var13);
    org.jsecurity.authz.SimpleRole var18 = new org.jsecurity.authz.SimpleRole();
    org.jsecurity.authz.permission.WildcardPermission var21 = new org.jsecurity.authz.permission.WildcardPermission("hi!", false);
    boolean var22 = var18.isPermitted((org.jsecurity.authz.Permission)var21);
    org.jsecurity.session.InvalidSessionException var23 = new org.jsecurity.session.InvalidSessionException("org.jsecurity.config.ConfigurationException: dd\uFFFD", (java.io.Serializable)var21);
    org.jsecurity.authz.SimpleRole var24 = new org.jsecurity.authz.SimpleRole();
    org.jsecurity.authz.permission.WildcardPermission var27 = new org.jsecurity.authz.permission.WildcardPermission("hi!", false);
    boolean var28 = var24.isPermitted((org.jsecurity.authz.Permission)var27);
    boolean var29 = var21.implies((org.jsecurity.authz.Permission)var27);
    boolean var30 = var2.implies((org.jsecurity.authz.Permission)var21);
    org.jsecurity.authz.SimpleAuthorizingAccount var31 = new org.jsecurity.authz.SimpleAuthorizingAccount();
    org.jsecurity.authz.SimpleAuthorizationInfo var32 = new org.jsecurity.authz.SimpleAuthorizationInfo();
    var32.addRole("a2b823b1e72eae2b727289df8a00a89df8a0bab6ad8a89c4c5c7a9b62a270000");
    org.jsecurity.authz.SimpleAuthorizationInfo var35 = new org.jsecurity.authz.SimpleAuthorizationInfo();
    var35.addRole("a2b823b1e72eae2b727289df8a00a89df8a0bab6ad8a89c4c5c7a9b62a270000");
    org.jsecurity.session.UnknownSessionException var42 = new org.jsecurity.session.UnknownSessionException("dd\uFFFD", (java.io.Serializable)100.0f);
    org.jsecurity.subject.SubjectException var43 = new org.jsecurity.subject.SubjectException("dd\uFFFD", (java.lang.Throwable)var42);
    org.jsecurity.io.SerializationException var44 = new org.jsecurity.io.SerializationException("", (java.lang.Throwable)var43);
    java.lang.Throwable[] var45 = var43.getSuppressed();
    java.util.Set var46 = org.jsecurity.util.CollectionUtils.asSet((java.lang.Object[])var45);
    var35.addRoles((java.util.Collection)var46);
    var32.setObjectPermissions(var46);
    var31.setSimpleRoles(var46);
    java.util.Set var50 = var31.getPermissions();
    org.jsecurity.authz.SimpleAuthorizationInfo var51 = new org.jsecurity.authz.SimpleAuthorizationInfo();
    var51.addRole("a2b823b1e72eae2b727289df8a00a89df8a0bab6ad8a89c4c5c7a9b62a270000");
    org.jsecurity.authz.SimpleAuthorizationInfo var54 = new org.jsecurity.authz.SimpleAuthorizationInfo();
    var54.addRole("a2b823b1e72eae2b727289df8a00a89df8a0bab6ad8a89c4c5c7a9b62a270000");
    org.jsecurity.session.UnknownSessionException var61 = new org.jsecurity.session.UnknownSessionException("dd\uFFFD", (java.io.Serializable)100.0f);
    org.jsecurity.subject.SubjectException var62 = new org.jsecurity.subject.SubjectException("dd\uFFFD", (java.lang.Throwable)var61);
    org.jsecurity.io.SerializationException var63 = new org.jsecurity.io.SerializationException("", (java.lang.Throwable)var62);
    java.lang.Throwable[] var64 = var62.getSuppressed();
    java.util.Set var65 = org.jsecurity.util.CollectionUtils.asSet((java.lang.Object[])var64);
    var54.addRoles((java.util.Collection)var65);
    var51.setObjectPermissions(var65);
    var31.checkRoles((java.util.Collection)var65);
    org.jsecurity.session.mgt.DefaultSessionManager var69 = new org.jsecurity.session.mgt.DefaultSessionManager();
    org.jsecurity.session.mgt.quartz.QuartzSessionValidationScheduler var70 = new org.jsecurity.session.mgt.quartz.QuartzSessionValidationScheduler();
    boolean var71 = var70.isEnabled();
    var70.enableSessionValidation();
    var69.setSessionValidationScheduler((org.jsecurity.session.mgt.SessionValidationScheduler)var70);
    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      var0.setAttribute((java.io.Serializable)var30, (java.lang.Object)var31, (java.lang.Object)var69);
      fail("Expected exception of type org.jsecurity.session.UnknownSessionException");
    } catch (org.jsecurity.session.UnknownSessionException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var8 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var14 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var15 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var16 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var22 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var28 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var29 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var30 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var45);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var46);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var50);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var64);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var65);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var71 == false);

  }

  public void test479() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest0.test479");


    org.jsecurity.authz.ModularRealmAuthorizer var0 = new org.jsecurity.authz.ModularRealmAuthorizer();
    java.io.InputStream var2 = org.jsecurity.util.ClassUtils.getResourceAsStream("");
    java.lang.Object[] var3 = new java.lang.Object[] { var2};
    java.util.List var4 = org.jsecurity.util.CollectionUtils.asList(var3);
    org.jsecurity.authc.pam.ModularRealmAuthenticator var5 = new org.jsecurity.authc.pam.ModularRealmAuthenticator(var4);
    org.jsecurity.subject.SimplePrincipalCollection var7 = new org.jsecurity.subject.SimplePrincipalCollection((java.util.Collection)var4, "org.jsecurity.authz.UnauthorizedException: org.jsecurity.session.ExpiredSessionException: ");
    org.jsecurity.session.UnknownSessionException var12 = new org.jsecurity.session.UnknownSessionException("dd\uFFFD", (java.io.Serializable)100.0f);
    org.jsecurity.session.SessionException var14 = new org.jsecurity.session.SessionException("dd\uFFFD", (java.lang.Throwable)var12, (java.io.Serializable)0);
    org.jsecurity.session.SessionException var15 = new org.jsecurity.session.SessionException("dd\uFFFD", (java.lang.Throwable)var12);
    var7.add((java.lang.Object)var15, "org.jsecurity.config.ConfigurationException: dd\uFFFD");
    java.util.Set var18 = var7.asSet();
    var0.setRealms((java.util.Collection)var18);
    java.util.Collection var20 = var0.getRealms();
    org.jsecurity.realm.text.TextConfigurationRealm var21 = new org.jsecurity.realm.text.TextConfigurationRealm();
    org.jsecurity.realm.text.TextConfigurationRealm var22 = new org.jsecurity.realm.text.TextConfigurationRealm();
    java.io.InputStream var24 = org.jsecurity.util.ClassUtils.getResourceAsStream("");
    java.lang.Object[] var25 = new java.lang.Object[] { var24};
    java.util.List var26 = org.jsecurity.util.CollectionUtils.asList(var25);
    org.jsecurity.authc.pam.ModularRealmAuthenticator var27 = new org.jsecurity.authc.pam.ModularRealmAuthenticator(var26);
    org.jsecurity.subject.SimplePrincipalCollection var29 = new org.jsecurity.subject.SimplePrincipalCollection((java.util.Collection)var26, "org.jsecurity.authz.UnauthorizedException: org.jsecurity.session.ExpiredSessionException: ");
    org.jsecurity.session.UnknownSessionException var34 = new org.jsecurity.session.UnknownSessionException("dd\uFFFD", (java.io.Serializable)100.0f);
    org.jsecurity.session.SessionException var36 = new org.jsecurity.session.SessionException("dd\uFFFD", (java.lang.Throwable)var34, (java.io.Serializable)0);
    org.jsecurity.session.SessionException var37 = new org.jsecurity.session.SessionException("dd\uFFFD", (java.lang.Throwable)var34);
    var29.add((java.lang.Object)var37, "org.jsecurity.config.ConfigurationException: dd\uFFFD");
    var22.onLogout((org.jsecurity.subject.PrincipalCollection)var29);
    java.util.Collection var42 = var29.fromRealm("\u0000\u0000\u0000");
    var21.onLogout((org.jsecurity.subject.PrincipalCollection)var29);
    java.util.Set var44 = var29.asSet();
    org.jsecurity.authz.SimpleRole var46 = new org.jsecurity.authz.SimpleRole();
    org.jsecurity.authz.permission.WildcardPermission var49 = new org.jsecurity.authz.permission.WildcardPermission("hi!", false);
    boolean var50 = var46.isPermitted((org.jsecurity.authz.Permission)var49);
    org.jsecurity.session.InvalidSessionException var51 = new org.jsecurity.session.InvalidSessionException("org.jsecurity.config.ConfigurationException: dd\uFFFD", (java.io.Serializable)var49);
    org.jsecurity.authz.SimpleRole var52 = new org.jsecurity.authz.SimpleRole();
    org.jsecurity.authz.permission.WildcardPermission var55 = new org.jsecurity.authz.permission.WildcardPermission("hi!", false);
    boolean var56 = var52.isPermitted((org.jsecurity.authz.Permission)var55);
    boolean var57 = var49.implies((org.jsecurity.authz.Permission)var55);
    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      var0.checkPermission((org.jsecurity.subject.PrincipalCollection)var29, (org.jsecurity.authz.Permission)var49);
      fail("Expected exception of type java.lang.ClassCastException");
    } catch (java.lang.ClassCastException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var2);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var3);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var4);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var18);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var20);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var24);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var25);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var26);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var42);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var44);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var50 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var56 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var57 == true);

  }

  public void test480() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest0.test480");


    org.jsecurity.io.SerializationException var1 = new org.jsecurity.io.SerializationException("org.jsecurity.realm.SimpleAccountRealm-52-authorization");

  }

  public void test481() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest0.test481");


    org.jsecurity.realm.activedirectory.ActiveDirectoryRealm var0 = new org.jsecurity.realm.activedirectory.ActiveDirectoryRealm();
    org.jsecurity.authc.credential.Sha256CredentialsMatcher var1 = new org.jsecurity.authc.credential.Sha256CredentialsMatcher();
    var0.setCredentialsMatcher((org.jsecurity.authc.credential.CredentialsMatcher)var1);
    java.lang.String var3 = var0.getAuthorizationCacheName();
    org.jsecurity.authc.UsernamePasswordToken var4 = new org.jsecurity.authc.UsernamePasswordToken();
    java.lang.String var5 = var4.getUsername();
    java.lang.Object var6 = var4.getPrincipal();
    boolean var7 = var0.supports((org.jsecurity.authc.AuthenticationToken)var4);
    var0.setName("hi!");
    org.jsecurity.codec.CodecException var12 = new org.jsecurity.codec.CodecException("dd\uFFFD");
    org.jsecurity.authc.ConcurrentAccessException var13 = new org.jsecurity.authc.ConcurrentAccessException("org.jsecurity.authz.UnauthorizedException: org.jsecurity.session.ExpiredSessionException: ", (java.lang.Throwable)var12);
    org.jsecurity.subject.SimplePrincipalCollection var15 = new org.jsecurity.subject.SimplePrincipalCollection((java.lang.Object)var12, "");
    org.jsecurity.authc.pam.FirstSuccessfulAuthenticationStrategy var16 = new org.jsecurity.authc.pam.FirstSuccessfulAuthenticationStrategy();
    org.jsecurity.authz.UnauthorizedException var18 = new org.jsecurity.authz.UnauthorizedException("org.jsecurity.config.ConfigurationException: dd\uFFFD");
    java.lang.Throwable[] var19 = var18.getSuppressed();
    java.util.List var20 = org.jsecurity.util.CollectionUtils.asList((java.lang.Object[])var19);
    org.jsecurity.authc.UsernamePasswordToken var21 = new org.jsecurity.authc.UsernamePasswordToken();
    java.lang.String var22 = var21.getUsername();
    java.net.InetAddress var23 = var21.getInetAddress();
    org.jsecurity.authc.AuthenticationInfo var24 = var16.beforeAllAttempts((java.util.Collection)var20, (org.jsecurity.authc.AuthenticationToken)var21);
    org.jsecurity.session.UnknownSessionException var29 = new org.jsecurity.session.UnknownSessionException("dd\uFFFD", (java.io.Serializable)100.0f);
    org.jsecurity.subject.SubjectException var30 = new org.jsecurity.subject.SubjectException("dd\uFFFD", (java.lang.Throwable)var29);
    org.jsecurity.io.SerializationException var31 = new org.jsecurity.io.SerializationException("", (java.lang.Throwable)var30);
    java.lang.Throwable[] var32 = var30.getSuppressed();
    java.util.Set var33 = org.jsecurity.util.CollectionUtils.asSet((java.lang.Object[])var32);
    org.jsecurity.authc.SimpleAccount var34 = new org.jsecurity.authc.SimpleAccount((org.jsecurity.subject.PrincipalCollection)var15, (java.lang.Object)var20, var33);
    java.io.InputStream var36 = org.jsecurity.util.ClassUtils.getResourceAsStream("");
    java.lang.Object[] var37 = new java.lang.Object[] { var36};
    java.util.List var38 = org.jsecurity.util.CollectionUtils.asList(var37);
    org.jsecurity.authc.pam.ModularRealmAuthenticator var39 = new org.jsecurity.authc.pam.ModularRealmAuthenticator(var38);
    org.jsecurity.subject.SimplePrincipalCollection var41 = new org.jsecurity.subject.SimplePrincipalCollection((java.util.Collection)var38, "org.jsecurity.authz.UnauthorizedException: org.jsecurity.session.ExpiredSessionException: ");
    org.jsecurity.io.ResourceException var45 = new org.jsecurity.io.ResourceException("hi!");
    org.jsecurity.authc.UnknownAccountException var46 = new org.jsecurity.authc.UnknownAccountException((java.lang.Throwable)var45);
    org.jsecurity.session.StoppedSessionException var47 = new org.jsecurity.session.StoppedSessionException("dd\uFFFD", (java.io.Serializable)var45);
    org.jsecurity.session.UnknownSessionException var48 = new org.jsecurity.session.UnknownSessionException("org.jsecurity.authz.UnauthorizedException: org.jsecurity.session.ExpiredSessionException: ", (java.lang.Throwable)var45);
    boolean var49 = var41.equals((java.lang.Object)var45);
    var15.addAll((org.jsecurity.subject.PrincipalCollection)var41);
    java.util.List var51 = var41.asList();
    org.jsecurity.authz.SimpleAuthorizationInfo var52 = new org.jsecurity.authz.SimpleAuthorizationInfo();
    var52.addStringPermission("hi!");
    java.io.InputStream var56 = org.jsecurity.util.ClassUtils.getResourceAsStream("");
    java.lang.Object[] var57 = new java.lang.Object[] { var56};
    java.util.List var58 = org.jsecurity.util.CollectionUtils.asList(var57);
    var52.addRoles((java.util.Collection)var58);
    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      boolean[] var60 = var0.hasRoles((org.jsecurity.subject.PrincipalCollection)var41, var58);
      fail("Expected exception of type java.util.NoSuchElementException");
    } catch (java.util.NoSuchElementException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var3);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var5);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var6);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var7 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var19);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var20);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var22);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var23);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var24);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var32);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var33);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var36);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var37);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var38);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var49 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var51);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var56);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var57);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var58);

  }

  public void test482() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest0.test482");


    org.jsecurity.codec.CodecException var2 = new org.jsecurity.codec.CodecException("dd\uFFFD");
    org.jsecurity.authc.ConcurrentAccessException var3 = new org.jsecurity.authc.ConcurrentAccessException("org.jsecurity.authz.UnauthorizedException: org.jsecurity.session.ExpiredSessionException: ", (java.lang.Throwable)var2);
    org.jsecurity.subject.SimplePrincipalCollection var5 = new org.jsecurity.subject.SimplePrincipalCollection((java.lang.Object)var2, "");
    org.jsecurity.authc.pam.FirstSuccessfulAuthenticationStrategy var6 = new org.jsecurity.authc.pam.FirstSuccessfulAuthenticationStrategy();
    org.jsecurity.authz.UnauthorizedException var8 = new org.jsecurity.authz.UnauthorizedException("org.jsecurity.config.ConfigurationException: dd\uFFFD");
    java.lang.Throwable[] var9 = var8.getSuppressed();
    java.util.List var10 = org.jsecurity.util.CollectionUtils.asList((java.lang.Object[])var9);
    org.jsecurity.authc.UsernamePasswordToken var11 = new org.jsecurity.authc.UsernamePasswordToken();
    java.lang.String var12 = var11.getUsername();
    java.net.InetAddress var13 = var11.getInetAddress();
    org.jsecurity.authc.AuthenticationInfo var14 = var6.beforeAllAttempts((java.util.Collection)var10, (org.jsecurity.authc.AuthenticationToken)var11);
    org.jsecurity.session.UnknownSessionException var19 = new org.jsecurity.session.UnknownSessionException("dd\uFFFD", (java.io.Serializable)100.0f);
    org.jsecurity.subject.SubjectException var20 = new org.jsecurity.subject.SubjectException("dd\uFFFD", (java.lang.Throwable)var19);
    org.jsecurity.io.SerializationException var21 = new org.jsecurity.io.SerializationException("", (java.lang.Throwable)var20);
    java.lang.Throwable[] var22 = var20.getSuppressed();
    java.util.Set var23 = org.jsecurity.util.CollectionUtils.asSet((java.lang.Object[])var22);
    org.jsecurity.authc.SimpleAccount var24 = new org.jsecurity.authc.SimpleAccount((org.jsecurity.subject.PrincipalCollection)var5, (java.lang.Object)var10, var23);
    java.util.Collection var25 = var24.getStringPermissions();
    org.jsecurity.codec.CodecException var28 = new org.jsecurity.codec.CodecException("dd\uFFFD");
    org.jsecurity.authc.ConcurrentAccessException var29 = new org.jsecurity.authc.ConcurrentAccessException("org.jsecurity.authz.UnauthorizedException: org.jsecurity.session.ExpiredSessionException: ", (java.lang.Throwable)var28);
    org.jsecurity.subject.SimplePrincipalCollection var31 = new org.jsecurity.subject.SimplePrincipalCollection((java.lang.Object)var28, "");
    java.io.InputStream var33 = org.jsecurity.util.ClassUtils.getResourceAsStream("");
    java.lang.Object[] var34 = new java.lang.Object[] { var33};
    java.util.List var35 = org.jsecurity.util.CollectionUtils.asList(var34);
    org.jsecurity.authc.pam.ModularRealmAuthenticator var36 = new org.jsecurity.authc.pam.ModularRealmAuthenticator(var35);
    var31.addAll((java.util.Collection)var35, "\u0000\u0000");
    org.jsecurity.authz.UnauthorizedException var40 = new org.jsecurity.authz.UnauthorizedException();
    org.jsecurity.session.SessionException var42 = new org.jsecurity.session.SessionException("", (java.lang.Throwable)var40, (java.io.Serializable)"org.jsecurity.config.ConfigurationException: dd\uFFFD");
    org.jsecurity.crypto.hash.Sha1Hash var43 = new org.jsecurity.crypto.hash.Sha1Hash((java.lang.Object)"");
    org.jsecurity.session.UnknownSessionException var48 = new org.jsecurity.session.UnknownSessionException("dd\uFFFD", (java.io.Serializable)100.0f);
    org.jsecurity.subject.SubjectException var49 = new org.jsecurity.subject.SubjectException("dd\uFFFD", (java.lang.Throwable)var48);
    org.jsecurity.io.SerializationException var50 = new org.jsecurity.io.SerializationException("", (java.lang.Throwable)var49);
    java.lang.Throwable[] var51 = var49.getSuppressed();
    java.util.Set var52 = org.jsecurity.util.CollectionUtils.asSet((java.lang.Object[])var51);
    org.jsecurity.authz.SimpleAuthorizationInfo var54 = new org.jsecurity.authz.SimpleAuthorizationInfo();
    org.jsecurity.session.UnknownSessionException var59 = new org.jsecurity.session.UnknownSessionException("dd\uFFFD", (java.io.Serializable)100.0f);
    org.jsecurity.subject.SubjectException var60 = new org.jsecurity.subject.SubjectException("dd\uFFFD", (java.lang.Throwable)var59);
    org.jsecurity.io.SerializationException var61 = new org.jsecurity.io.SerializationException("", (java.lang.Throwable)var60);
    java.lang.Throwable[] var62 = var60.getSuppressed();
    java.util.Set var63 = org.jsecurity.util.CollectionUtils.asSet((java.lang.Object[])var62);
    var54.setStringPermissions(var63);
    java.util.Set var65 = var54.getRoles();
    org.jsecurity.authz.SimpleAuthorizationInfo var66 = new org.jsecurity.authz.SimpleAuthorizationInfo();
    var66.addRole("a2b823b1e72eae2b727289df8a00a89df8a0bab6ad8a89c4c5c7a9b62a270000");
    org.jsecurity.session.UnknownSessionException var73 = new org.jsecurity.session.UnknownSessionException("dd\uFFFD", (java.io.Serializable)100.0f);
    org.jsecurity.subject.SubjectException var74 = new org.jsecurity.subject.SubjectException("dd\uFFFD", (java.lang.Throwable)var73);
    org.jsecurity.io.SerializationException var75 = new org.jsecurity.io.SerializationException("", (java.lang.Throwable)var74);
    java.lang.Throwable[] var76 = var74.getSuppressed();
    java.util.Set var77 = org.jsecurity.util.CollectionUtils.asSet((java.lang.Object[])var76);
    var66.addRoles((java.util.Collection)var77);
    var54.setRoles(var77);
    org.jsecurity.authz.SimpleRole var80 = new org.jsecurity.authz.SimpleRole("org.jsecurity.authz.UnauthorizedException: org.jsecurity.session.ExpiredSessionException: ", var77);
    org.jsecurity.authc.SimpleAccount var81 = new org.jsecurity.authc.SimpleAccount((org.jsecurity.subject.PrincipalCollection)var31, (java.lang.Object)"", var52, var77);
    var24.setStringPermissions(var52);
    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      var24.addStringPermission("org.jsecurity.authz.UnauthorizedException: org.jsecurity.session.ExpiredSessionException: ");
      fail("Expected exception of type java.lang.UnsupportedOperationException");
    } catch (java.lang.UnsupportedOperationException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var9);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var10);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var12);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var13);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var14);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var22);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var23);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var25);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var33);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var34);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var35);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var51);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var52);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var62);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var63);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var65);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var76);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var77);

  }

  public void test483() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest0.test483");


    org.jsecurity.session.UnknownSessionException var5 = new org.jsecurity.session.UnknownSessionException("dd\uFFFD", (java.io.Serializable)100.0f);
    org.jsecurity.config.ConfigurationException var6 = new org.jsecurity.config.ConfigurationException("dd\uFFFD", (java.lang.Throwable)var5);
    org.jsecurity.session.ExpiredSessionException var8 = new org.jsecurity.session.ExpiredSessionException("", (java.lang.Throwable)var6, (java.io.Serializable)true);
    org.jsecurity.authc.LockedAccountException var9 = new org.jsecurity.authc.LockedAccountException("", (java.lang.Throwable)var8);
    org.jsecurity.authc.AuthenticationException var10 = new org.jsecurity.authc.AuthenticationException((java.lang.Throwable)var9);

  }

  public void test484() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest0.test484");


    org.jsecurity.jndi.JndiTemplate var0 = new org.jsecurity.jndi.JndiTemplate();
    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      var0.unbind("6464ff");
      fail("Expected exception of type javax.naming.NoInitialContextException");
    } catch (javax.naming.NoInitialContextException e) {
      // Expected exception.
    }

  }

  public void test485() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest0.test485");


    org.jsecurity.crypto.hash.Md2Hash var1 = org.jsecurity.crypto.hash.Md2Hash.fromBase64String("a2b823b1e72eae2b727289df8a00a89df8a0bab6ad8a89c4c5c7a9b62a270000");
    org.jsecurity.crypto.BlowfishCipher var2 = new org.jsecurity.crypto.BlowfishCipher();
    byte[] var6 = new byte[] { (byte)100, (byte)100, (byte)(-1)};
    java.lang.String var7 = org.jsecurity.codec.CodecSupport.toString(var6);
    byte[] var9 = org.jsecurity.codec.Base64.decode("hi!");
    byte[] var10 = var2.encrypt(var6, var9);
    byte[] var12 = org.jsecurity.codec.Base64.encode(var9, false);
    var1.setBytes(var12);
    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      java.lang.String var15 = org.jsecurity.codec.CodecSupport.toString(var12, "org.jsecurity.realm.SimpleAccountRealm-52-authorization");
      fail("Expected exception of type org.jsecurity.codec.CodecException");
    } catch (org.jsecurity.codec.CodecException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var1);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var6);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var7 + "' != '" + "dd\uFFFD"+ "'", var7.equals("dd\uFFFD"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var9);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var10);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var12);

  }

  public void test486() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest0.test486");


    java.lang.String var1 = org.jsecurity.util.StringUtils.clean("hi!");
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var1 + "' != '" + "hi!"+ "'", var1.equals("hi!"));

  }

  public void test487() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest0.test487");


    boolean var1 = org.jsecurity.util.StringUtils.hasText("cff098b5-6d79-4f6d-93d3-148185d0b987");
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var1 == true);

  }

  public void test488() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest0.test488");


    org.jsecurity.io.IniResource var0 = new org.jsecurity.io.IniResource();
    java.util.Map var1 = var0.getSections();
    java.util.Map var2 = var0.getSections();
    java.io.InputStream var4 = org.jsecurity.util.ClassUtils.getResourceAsStream("");
    org.jsecurity.io.ResourceUtils.close(var4);
    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      var0.load(var4);
      fail("Expected exception of type org.jsecurity.io.ResourceException");
    } catch (org.jsecurity.io.ResourceException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var1);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var2);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var4);

  }

  public void test489() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest0.test489");


    org.jsecurity.config.IniConfiguration var0 = new org.jsecurity.config.IniConfiguration();
    java.lang.String var1 = var0.getConfig();
    var0.setConfig("\uFFFD\uFFFD#\uFFFD\uFFFD.\uFFFD+rr\uFFFD\u07CA\u0000\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\u01E9\uFFFD*'\u0000\u0000");
    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      var0.init();
      fail("Expected exception of type org.jsecurity.io.ResourceException");
    } catch (org.jsecurity.io.ResourceException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var1);

  }

  public void test490() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest0.test490");


    org.jsecurity.util.UnavailableConstructorException var1 = new org.jsecurity.util.UnavailableConstructorException("6464ff");

  }

  public void test491() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest0.test491");


    org.jsecurity.io.ResourceException var3 = new org.jsecurity.io.ResourceException("hi!");
    org.jsecurity.codec.CodecException var4 = new org.jsecurity.codec.CodecException((java.lang.Throwable)var3);
    org.jsecurity.JSecurityException var5 = new org.jsecurity.JSecurityException("a2b823b1e72eae2b727289df8a00a89df8a0bab6ad8a89c4c5c7a9b62a270000", (java.lang.Throwable)var3);
    org.jsecurity.session.UnknownSessionException var6 = new org.jsecurity.session.UnknownSessionException((java.lang.Throwable)var5);
    org.jsecurity.authc.IncorrectCredentialsException var7 = new org.jsecurity.authc.IncorrectCredentialsException((java.lang.Throwable)var5);
    org.jsecurity.authz.AuthorizationException var8 = new org.jsecurity.authz.AuthorizationException("\u0000\u0000\u0000", (java.lang.Throwable)var5);
    org.jsecurity.authc.AccountException var9 = new org.jsecurity.authc.AccountException((java.lang.Throwable)var8);
    org.jsecurity.session.ExpiredSessionException var10 = new org.jsecurity.session.ExpiredSessionException((java.lang.Throwable)var8);

  }

  public void test492() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest0.test492");


    org.jsecurity.mgt.DefaultSecurityManager var0 = new org.jsecurity.mgt.DefaultSecurityManager();
    java.io.InputStream var2 = org.jsecurity.util.ClassUtils.getResourceAsStream("");
    java.lang.Object[] var3 = new java.lang.Object[] { var2};
    java.util.List var4 = org.jsecurity.util.CollectionUtils.asList(var3);
    org.jsecurity.authc.pam.ModularRealmAuthenticator var5 = new org.jsecurity.authc.pam.ModularRealmAuthenticator(var4);
    org.jsecurity.authc.pam.AllSuccessfulModularAuthenticationStrategy var6 = new org.jsecurity.authc.pam.AllSuccessfulModularAuthenticationStrategy();
    var5.setModularAuthenticationStrategy((org.jsecurity.authc.pam.ModularAuthenticationStrategy)var6);
    org.jsecurity.authz.SimpleAuthorizationInfo var8 = new org.jsecurity.authz.SimpleAuthorizationInfo();
    var8.addStringPermission("hi!");
    java.io.InputStream var12 = org.jsecurity.util.ClassUtils.getResourceAsStream("");
    java.lang.Object[] var13 = new java.lang.Object[] { var12};
    java.util.List var14 = org.jsecurity.util.CollectionUtils.asList(var13);
    var8.addRoles((java.util.Collection)var14);
    var5.setAuthenticationListeners((java.util.Collection)var14);
    var0.setSessionListeners((java.util.Collection)var14);
    org.jsecurity.subject.Subject var18 = var0.getSubject();
    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      var0.setRememberMeEncryptionCipherKeyBase64("eb8eb80000");
      fail("Expected exception of type java.lang.IllegalStateException");
    } catch (java.lang.IllegalStateException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var2);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var3);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var4);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var12);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var13);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var14);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var18);

  }

  public void test493() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest0.test493");


    org.jsecurity.realm.jndi.JndiRealmFactory var0 = new org.jsecurity.realm.jndi.JndiRealmFactory();
    java.io.InputStream var2 = org.jsecurity.util.ClassUtils.getResourceAsStream("");
    java.lang.Object[] var3 = new java.lang.Object[] { var2};
    java.util.List var4 = org.jsecurity.util.CollectionUtils.asList(var3);
    var0.setJndiNames((java.util.Collection)var4);
    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      java.util.Collection var6 = var0.getRealms();
      fail("Expected exception of type java.lang.ClassCastException");
    } catch (java.lang.ClassCastException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var2);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var3);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var4);

  }

  public void test494() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest0.test494");


    org.jsecurity.session.mgt.eis.MemorySessionDAO var0 = new org.jsecurity.session.mgt.eis.MemorySessionDAO();
    org.jsecurity.cache.Cache var1 = var0.getActiveSessionsCache();
    org.jsecurity.session.mgt.SimpleSession var2 = new org.jsecurity.session.mgt.SimpleSession();
    var2.setTimeout((-1L));
    org.jsecurity.session.mgt.SimpleSession var5 = new org.jsecurity.session.mgt.SimpleSession();
    java.util.Date var6 = var5.getLastAccessTime();
    var2.setLastAccessTime(var6);
    var0.update((org.jsecurity.session.Session)var2);
    var0.setActiveSessionsCacheName("hi!");
    java.lang.String var11 = var0.getActiveSessionsCacheName();
    org.jsecurity.codec.CodecException var14 = new org.jsecurity.codec.CodecException("dd\uFFFD");
    org.jsecurity.authc.ConcurrentAccessException var15 = new org.jsecurity.authc.ConcurrentAccessException("org.jsecurity.authz.UnauthorizedException: org.jsecurity.session.ExpiredSessionException: ", (java.lang.Throwable)var14);
    org.jsecurity.subject.SimplePrincipalCollection var17 = new org.jsecurity.subject.SimplePrincipalCollection((java.lang.Object)var14, "");
    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      org.jsecurity.session.Session var18 = var0.readSession((java.io.Serializable)var17);
      fail("Expected exception of type org.jsecurity.session.UnknownSessionException");
    } catch (org.jsecurity.session.UnknownSessionException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var1);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var6);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var11 + "' != '" + "hi!"+ "'", var11.equals("hi!"));

  }

  public void test495() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest0.test495");


    org.jsecurity.codec.CodecException var4 = new org.jsecurity.codec.CodecException("dd\uFFFD");
    org.jsecurity.authc.ConcurrentAccessException var5 = new org.jsecurity.authc.ConcurrentAccessException("org.jsecurity.authz.UnauthorizedException: org.jsecurity.session.ExpiredSessionException: ", (java.lang.Throwable)var4);
    org.jsecurity.subject.SimplePrincipalCollection var7 = new org.jsecurity.subject.SimplePrincipalCollection((java.lang.Object)var4, "");
    char[] var11 = new char[] { };
    org.jsecurity.authc.UsernamePasswordToken var13 = new org.jsecurity.authc.UsernamePasswordToken("hi!", var11, true);
    org.jsecurity.authc.UsernamePasswordToken var14 = new org.jsecurity.authc.UsernamePasswordToken("\u0000\u0000", var11);
    org.jsecurity.session.mgt.SimpleSession var15 = new org.jsecurity.session.mgt.SimpleSession();
    var15.setTimeout((-1L));
    org.jsecurity.session.mgt.SimpleSession var18 = new org.jsecurity.session.mgt.SimpleSession();
    java.util.Date var19 = var18.getLastAccessTime();
    var15.setLastAccessTime(var19);
    java.net.InetAddress var21 = var15.getHostAddress();
    var14.setInetAddress(var21);
    org.jsecurity.session.mgt.SimpleSession var23 = new org.jsecurity.session.mgt.SimpleSession();
    var23.setTimeout((-1L));
    org.jsecurity.session.mgt.SimpleSession var26 = new org.jsecurity.session.mgt.SimpleSession();
    java.util.Date var27 = var26.getLastAccessTime();
    var23.setLastAccessTime(var27);
    org.jsecurity.session.mgt.SimpleSession var29 = new org.jsecurity.session.mgt.SimpleSession();
    java.util.Date var30 = var29.getLastAccessTime();
    var23.setStopTimestamp(var30);
    org.jsecurity.mgt.DefaultSecurityManager var32 = new org.jsecurity.mgt.DefaultSecurityManager();
    org.jsecurity.authc.pam.AllSuccessfulModularAuthenticationStrategy var33 = new org.jsecurity.authc.pam.AllSuccessfulModularAuthenticationStrategy();
    org.jsecurity.authc.pam.AllSuccessfulModularAuthenticationStrategy var34 = new org.jsecurity.authc.pam.AllSuccessfulModularAuthenticationStrategy();
    char[] var36 = new char[] { };
    org.jsecurity.authc.UsernamePasswordToken var38 = new org.jsecurity.authc.UsernamePasswordToken("hi!", var36, true);
    org.jsecurity.authc.SimpleAccount var39 = new org.jsecurity.authc.SimpleAccount();
    var39.setCredentialsExpired(false);
    boolean var42 = var39.isLocked();
    org.jsecurity.authc.AuthenticationInfo var43 = var34.afterAllAttempts((org.jsecurity.authc.AuthenticationToken)var38, (org.jsecurity.authc.AuthenticationInfo)var39);
    char[] var47 = new char[] { '4', '#'};
    org.jsecurity.authc.UsernamePasswordToken var48 = new org.jsecurity.authc.UsernamePasswordToken("\u0000\u0000", var47);
    org.jsecurity.authc.SimpleAccount var49 = new org.jsecurity.authc.SimpleAccount();
    var49.setCredentialsExpired(false);
    var49.setCredentialsExpired(false);
    boolean var54 = var49.isCredentialsExpired();
    org.jsecurity.authc.AuthenticationInfo var55 = var34.afterAllAttempts((org.jsecurity.authc.AuthenticationToken)var48, (org.jsecurity.authc.AuthenticationInfo)var49);
    org.jsecurity.authz.UnauthenticatedException var59 = new org.jsecurity.authz.UnauthenticatedException();
    org.jsecurity.config.UnresolveableReferenceException var60 = new org.jsecurity.config.UnresolveableReferenceException("", (java.lang.Throwable)var59);
    org.jsecurity.cache.CacheException var61 = new org.jsecurity.cache.CacheException("org.jsecurity.config.ConfigurationException: dd\uFFFD", (java.lang.Throwable)var59);
    org.jsecurity.authc.SimpleAuthenticationInfo var63 = new org.jsecurity.authc.SimpleAuthenticationInfo((java.lang.Object)"org.jsecurity.config.ConfigurationException: dd\uFFFD", (java.lang.Object)var61, "a2b823b1e72eae2b727289df8a00a89df8a0bab6ad8a89c4c5c7a9b62a270000");
    org.jsecurity.subject.PrincipalCollection var64 = var63.getPrincipals();
    org.jsecurity.authc.AuthenticationInfo var65 = var33.afterAllAttempts((org.jsecurity.authc.AuthenticationToken)var48, (org.jsecurity.authc.AuthenticationInfo)var63);
    var32.setModularAuthenticationStrategy((org.jsecurity.authc.pam.ModularAuthenticationStrategy)var33);
    org.jsecurity.subject.RememberMeManager var67 = var32.getRememberMeManager();
    org.jsecurity.authc.pam.ModularRealmAuthenticator var68 = new org.jsecurity.authc.pam.ModularRealmAuthenticator();
    var32.setAuthenticator((org.jsecurity.authc.Authenticator)var68);
    org.jsecurity.codec.CodecException var72 = new org.jsecurity.codec.CodecException("dd\uFFFD");
    org.jsecurity.authc.ConcurrentAccessException var73 = new org.jsecurity.authc.ConcurrentAccessException("org.jsecurity.authz.UnauthorizedException: org.jsecurity.session.ExpiredSessionException: ", (java.lang.Throwable)var72);
    org.jsecurity.subject.SimplePrincipalCollection var75 = new org.jsecurity.subject.SimplePrincipalCollection((java.lang.Object)var72, "");
    java.io.InputStream var77 = org.jsecurity.util.ClassUtils.getResourceAsStream("");
    java.lang.Object[] var78 = new java.lang.Object[] { var77};
    java.util.List var79 = org.jsecurity.util.CollectionUtils.asList(var78);
    org.jsecurity.authc.pam.ModularRealmAuthenticator var80 = new org.jsecurity.authc.pam.ModularRealmAuthenticator(var79);
    var75.addAll((java.util.Collection)var79, "\u0000\u0000");
    org.jsecurity.authc.pam.FirstSuccessfulAuthenticationStrategy var83 = new org.jsecurity.authc.pam.FirstSuccessfulAuthenticationStrategy();
    org.jsecurity.authz.UnauthorizedException var85 = new org.jsecurity.authz.UnauthorizedException("org.jsecurity.config.ConfigurationException: dd\uFFFD");
    java.lang.Throwable[] var86 = var85.getSuppressed();
    java.util.List var87 = org.jsecurity.util.CollectionUtils.asList((java.lang.Object[])var86);
    org.jsecurity.authc.UsernamePasswordToken var88 = new org.jsecurity.authc.UsernamePasswordToken();
    java.lang.String var89 = var88.getUsername();
    java.net.InetAddress var90 = var88.getInetAddress();
    org.jsecurity.authc.AuthenticationInfo var91 = var83.beforeAllAttempts((java.util.Collection)var87, (org.jsecurity.authc.AuthenticationToken)var88);
    var32.checkPermissions((org.jsecurity.subject.PrincipalCollection)var75, (java.util.Collection)var87);
    org.jsecurity.subject.DelegatingSubject var93 = new org.jsecurity.subject.DelegatingSubject((org.jsecurity.subject.PrincipalCollection)var7, false, var21, (org.jsecurity.session.Session)var23, (org.jsecurity.mgt.SecurityManager)var32);
    org.jsecurity.authc.UsernamePasswordToken var94 = new org.jsecurity.authc.UsernamePasswordToken("6464ff", "783ccd31-48a8-42dd-890f-df885a7baaff", var21);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var11);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var19);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var21);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var27);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var30);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var36);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var42 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var43);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var47);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var54 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var55);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var64);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var65);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var67);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var77);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var78);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var79);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var86);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var87);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var89);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var90);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var91);

  }

  public void test496() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest0.test496");


    org.jsecurity.crypto.hash.Md2Hash var2 = org.jsecurity.crypto.hash.Md2Hash.fromBase64String("a2b823b1e72eae2b727289df8a00a89df8a0bab6ad8a89c4c5c7a9b62a270000");
    org.jsecurity.authc.credential.Md2CredentialsMatcher var3 = new org.jsecurity.authc.credential.Md2CredentialsMatcher();
    org.jsecurity.authz.SimpleAuthorizingAccount var5 = new org.jsecurity.authz.SimpleAuthorizingAccount((java.lang.Object)"a2b823b1e72eae2b727289df8a00a89df8a0bab6ad8a89c4c5c7a9b62a270000", (java.lang.Object)var3, "");
    org.jsecurity.session.SessionException var6 = new org.jsecurity.session.SessionException("org.jsecurity.realm.SimpleAccountRealm-9-authorization", (java.io.Serializable)var5);
    java.io.InputStream var8 = org.jsecurity.util.ClassUtils.getResourceAsStream("");
    java.lang.Object[] var9 = new java.lang.Object[] { var8};
    java.util.List var10 = org.jsecurity.util.CollectionUtils.asList(var9);
    org.jsecurity.authc.pam.ModularRealmAuthenticator var11 = new org.jsecurity.authc.pam.ModularRealmAuthenticator(var10);
    org.jsecurity.subject.SimplePrincipalCollection var13 = new org.jsecurity.subject.SimplePrincipalCollection((java.util.Collection)var10, "org.jsecurity.authz.UnauthorizedException: org.jsecurity.session.ExpiredSessionException: ");
    java.util.Set var14 = var13.getRealmNames();
    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      var5.checkRoles((java.util.Collection)var14);
      fail("Expected exception of type org.jsecurity.authz.UnauthorizedException");
    } catch (org.jsecurity.authz.UnauthorizedException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var2);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var8);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var9);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var10);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var14);

  }

  public void test497() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest0.test497");


    org.jsecurity.authc.pam.UnsupportedTokenException var1 = new org.jsecurity.authc.pam.UnsupportedTokenException("b725e8cc-690c-495e-ac27-b1b425834793");

  }

  public void test498() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest0.test498");


    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      byte[] var1 = org.jsecurity.codec.Hex.decode("e23a02c5-2287-4daa-91c4-8efed2be0f73");
      fail("Expected exception of type java.lang.IllegalArgumentException");
    } catch (java.lang.IllegalArgumentException e) {
      // Expected exception.
    }

  }

  public void test499() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest0.test499");


    char[] var0 = new char[] { };
    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      byte[] var2 = org.jsecurity.codec.CodecSupport.toBytes(var0, "9f00e408-27bf-467d-a45f-01bb47b51aa6");
      fail("Expected exception of type org.jsecurity.codec.CodecException");
    } catch (org.jsecurity.codec.CodecException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var0);

  }

  public void test500() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest0.test500");


    org.jsecurity.realm.activedirectory.ActiveDirectoryRealm var0 = new org.jsecurity.realm.activedirectory.ActiveDirectoryRealm();
    var0.init();
    var0.setSystemPassword("dd\uFFFD");
    org.jsecurity.authz.aop.GuestAnnotationHandler var4 = new org.jsecurity.authz.aop.GuestAnnotationHandler();
    java.lang.Class var5 = var4.getAnnotationClass();
    var0.setAuthenticationTokenClass(var5);
    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      java.lang.Object var7 = org.jsecurity.util.ClassUtils.newInstance(var5);
      fail("Expected exception of type org.jsecurity.util.InstantiationException");
    } catch (org.jsecurity.util.InstantiationException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var5);

  }

}
