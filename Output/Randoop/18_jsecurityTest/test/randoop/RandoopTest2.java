package randoop;

import junit.framework.*;

public class RandoopTest2 extends TestCase {

  public static boolean debug = false;

  public void test1() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest2.test1");


    org.jsecurity.authc.LockedAccountException var1 = new org.jsecurity.authc.LockedAccountException("org.jsecurity.realm.SimpleAccountRealm-173-authorization");

  }

  public void test2() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest2.test2");


    org.jsecurity.authc.pam.UnsupportedTokenException var1 = new org.jsecurity.authc.pam.UnsupportedTokenException("\uFFFD\uFFFD#\uFFFD\uFFFD.\uFFFD+rr\uFFFD\u07CA\u0000\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\u01E9\uFFFD*'\u0000\u0000");

  }

  public void test3() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest2.test3");


    org.jsecurity.realm.text.PropertiesRealm var0 = new org.jsecurity.realm.text.PropertiesRealm();
    java.lang.String var1 = var0.getUserDefinitions();
    java.lang.String var2 = var0.getName();
    org.jsecurity.cache.HashtableCache var4 = new org.jsecurity.cache.HashtableCache("orgjsecurityauthcCredentialsException783ccd3148a842dd890fdf885a7baafAA==");
    org.jsecurity.realm.text.TextConfigurationRealm var5 = new org.jsecurity.realm.text.TextConfigurationRealm();
    java.io.InputStream var7 = org.jsecurity.util.ClassUtils.getResourceAsStream("");
    java.lang.Object[] var8 = new java.lang.Object[] { var7};
    java.util.List var9 = org.jsecurity.util.CollectionUtils.asList(var8);
    org.jsecurity.authc.pam.ModularRealmAuthenticator var10 = new org.jsecurity.authc.pam.ModularRealmAuthenticator(var9);
    org.jsecurity.subject.SimplePrincipalCollection var12 = new org.jsecurity.subject.SimplePrincipalCollection((java.util.Collection)var9, "org.jsecurity.authz.UnauthorizedException: org.jsecurity.session.ExpiredSessionException: ");
    org.jsecurity.session.UnknownSessionException var17 = new org.jsecurity.session.UnknownSessionException("dd\uFFFD", (java.io.Serializable)100.0f);
    org.jsecurity.session.SessionException var19 = new org.jsecurity.session.SessionException("dd\uFFFD", (java.lang.Throwable)var17, (java.io.Serializable)0);
    org.jsecurity.session.SessionException var20 = new org.jsecurity.session.SessionException("dd\uFFFD", (java.lang.Throwable)var17);
    var12.add((java.lang.Object)var20, "org.jsecurity.config.ConfigurationException: dd\uFFFD");
    var5.onLogout((org.jsecurity.subject.PrincipalCollection)var12);
    var4.remove((java.lang.Object)var12);
    org.jsecurity.subject.SimplePrincipalCollection var25 = new org.jsecurity.subject.SimplePrincipalCollection((org.jsecurity.subject.PrincipalCollection)var12);
    org.jsecurity.codec.CodecException var28 = new org.jsecurity.codec.CodecException("dd\uFFFD");
    org.jsecurity.authc.ConcurrentAccessException var29 = new org.jsecurity.authc.ConcurrentAccessException("org.jsecurity.authz.UnauthorizedException: org.jsecurity.session.ExpiredSessionException: ", (java.lang.Throwable)var28);
    org.jsecurity.subject.SimplePrincipalCollection var31 = new org.jsecurity.subject.SimplePrincipalCollection((java.lang.Object)var28, "");
    org.jsecurity.authc.pam.FirstSuccessfulAuthenticationStrategy var32 = new org.jsecurity.authc.pam.FirstSuccessfulAuthenticationStrategy();
    org.jsecurity.authz.UnauthorizedException var34 = new org.jsecurity.authz.UnauthorizedException("org.jsecurity.config.ConfigurationException: dd\uFFFD");
    java.lang.Throwable[] var35 = var34.getSuppressed();
    java.util.List var36 = org.jsecurity.util.CollectionUtils.asList((java.lang.Object[])var35);
    org.jsecurity.authc.UsernamePasswordToken var37 = new org.jsecurity.authc.UsernamePasswordToken();
    java.lang.String var38 = var37.getUsername();
    java.net.InetAddress var39 = var37.getInetAddress();
    org.jsecurity.authc.AuthenticationInfo var40 = var32.beforeAllAttempts((java.util.Collection)var36, (org.jsecurity.authc.AuthenticationToken)var37);
    org.jsecurity.session.UnknownSessionException var45 = new org.jsecurity.session.UnknownSessionException("dd\uFFFD", (java.io.Serializable)100.0f);
    org.jsecurity.subject.SubjectException var46 = new org.jsecurity.subject.SubjectException("dd\uFFFD", (java.lang.Throwable)var45);
    org.jsecurity.io.SerializationException var47 = new org.jsecurity.io.SerializationException("", (java.lang.Throwable)var46);
    java.lang.Throwable[] var48 = var46.getSuppressed();
    java.util.Set var49 = org.jsecurity.util.CollectionUtils.asSet((java.lang.Object[])var48);
    org.jsecurity.authc.SimpleAccount var50 = new org.jsecurity.authc.SimpleAccount((org.jsecurity.subject.PrincipalCollection)var31, (java.lang.Object)var36, var49);
    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      boolean[] var51 = var0.hasRoles((org.jsecurity.subject.PrincipalCollection)var12, var36);
      fail("Expected exception of type java.util.NoSuchElementException");
    } catch (java.util.NoSuchElementException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var2 + "' != '" + "org.jsecurity.realm.text.PropertiesRealm_1370"+ "'", var2.equals("org.jsecurity.realm.text.PropertiesRealm_1370"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var7);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var8);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var9);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var35);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var36);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var38);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var39);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var40);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var48);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var49);

  }

  public void test4() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest2.test4");


    org.jsecurity.session.mgt.DefaultSessionManager var0 = new org.jsecurity.session.mgt.DefaultSessionManager();
    var0.setGlobalSessionTimeout(1);
    var0.setSessionValidationInterval(10L);
    org.jsecurity.session.UnknownSessionException var8 = new org.jsecurity.session.UnknownSessionException("dd\uFFFD", (java.io.Serializable)100.0f);
    org.jsecurity.config.ConfigurationException var9 = new org.jsecurity.config.ConfigurationException("dd\uFFFD", (java.lang.Throwable)var8);
    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      var0.setTimeout((java.io.Serializable)var8, 1800000L);
      fail("Expected exception of type org.jsecurity.session.UnknownSessionException");
    } catch (org.jsecurity.session.UnknownSessionException e) {
      // Expected exception.
    }

  }

  public void test5() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest2.test5");


    org.jsecurity.realm.jndi.JndiRealmFactory var0 = new org.jsecurity.realm.jndi.JndiRealmFactory();
    java.util.Collection var1 = var0.getJndiNames();
    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      java.util.Collection var2 = var0.getRealms();
      fail("Expected exception of type java.lang.IllegalStateException");
    } catch (java.lang.IllegalStateException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var1);

  }

  public void test6() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest2.test6");


    org.jsecurity.session.UnknownSessionException var4 = new org.jsecurity.session.UnknownSessionException("dd\uFFFD", (java.io.Serializable)100.0f);
    org.jsecurity.subject.SubjectException var5 = new org.jsecurity.subject.SubjectException("dd\uFFFD", (java.lang.Throwable)var4);
    org.jsecurity.io.SerializationException var6 = new org.jsecurity.io.SerializationException("", (java.lang.Throwable)var5);
    java.lang.Throwable[] var7 = var5.getSuppressed();
    java.lang.Throwable[] var8 = var5.getSuppressed();
    org.jsecurity.authz.SimpleAuthorizationInfo var11 = new org.jsecurity.authz.SimpleAuthorizationInfo();
    var11.addRole("a2b823b1e72eae2b727289df8a00a89df8a0bab6ad8a89c4c5c7a9b62a270000");
    org.jsecurity.session.UnknownSessionException var18 = new org.jsecurity.session.UnknownSessionException("dd\uFFFD", (java.io.Serializable)100.0f);
    org.jsecurity.subject.SubjectException var19 = new org.jsecurity.subject.SubjectException("dd\uFFFD", (java.lang.Throwable)var18);
    org.jsecurity.io.SerializationException var20 = new org.jsecurity.io.SerializationException("", (java.lang.Throwable)var19);
    java.lang.Throwable[] var21 = var19.getSuppressed();
    java.util.Set var22 = org.jsecurity.util.CollectionUtils.asSet((java.lang.Object[])var21);
    var11.addRoles((java.util.Collection)var22);
    java.io.InputStream var25 = org.jsecurity.util.ClassUtils.getResourceAsStream("");
    java.lang.Object[] var26 = new java.lang.Object[] { var25};
    java.util.List var27 = org.jsecurity.util.CollectionUtils.asList(var26);
    org.jsecurity.authc.pam.ModularRealmAuthenticator var28 = new org.jsecurity.authc.pam.ModularRealmAuthenticator(var27);
    org.jsecurity.subject.SimplePrincipalCollection var30 = new org.jsecurity.subject.SimplePrincipalCollection((java.util.Collection)var27, "org.jsecurity.authz.UnauthorizedException: org.jsecurity.session.ExpiredSessionException: ");
    org.jsecurity.session.UnknownSessionException var35 = new org.jsecurity.session.UnknownSessionException("dd\uFFFD", (java.io.Serializable)100.0f);
    org.jsecurity.session.SessionException var37 = new org.jsecurity.session.SessionException("dd\uFFFD", (java.lang.Throwable)var35, (java.io.Serializable)0);
    org.jsecurity.session.SessionException var38 = new org.jsecurity.session.SessionException("dd\uFFFD", (java.lang.Throwable)var35);
    var30.add((java.lang.Object)var38, "org.jsecurity.config.ConfigurationException: dd\uFFFD");
    java.util.Set var41 = var30.asSet();
    org.jsecurity.authz.SimpleAuthorizingAccount var42 = new org.jsecurity.authz.SimpleAuthorizingAccount((java.lang.Object)var8, (java.lang.Object)"\u0000\u0000\u0000", "\u0000\u0000\u0000", var22, var41);
    org.jsecurity.authz.SimpleRole var44 = var42.getRole("\u0000\u0000\u0000");
    java.io.InputStream var46 = org.jsecurity.util.ClassUtils.getResourceAsStream("");
    java.lang.Object[] var47 = new java.lang.Object[] { var46};
    java.util.List var48 = org.jsecurity.util.CollectionUtils.asList(var47);
    org.jsecurity.authc.pam.ModularRealmAuthenticator var49 = new org.jsecurity.authc.pam.ModularRealmAuthenticator(var48);
    org.jsecurity.subject.SimplePrincipalCollection var51 = new org.jsecurity.subject.SimplePrincipalCollection((java.util.Collection)var48, "org.jsecurity.authz.UnauthorizedException: org.jsecurity.session.ExpiredSessionException: ");
    org.jsecurity.session.UnknownSessionException var56 = new org.jsecurity.session.UnknownSessionException("dd\uFFFD", (java.io.Serializable)100.0f);
    org.jsecurity.session.SessionException var58 = new org.jsecurity.session.SessionException("dd\uFFFD", (java.lang.Throwable)var56, (java.io.Serializable)0);
    org.jsecurity.session.SessionException var59 = new org.jsecurity.session.SessionException("dd\uFFFD", (java.lang.Throwable)var56);
    var51.add((java.lang.Object)var59, "org.jsecurity.config.ConfigurationException: dd\uFFFD");
    java.util.Set var62 = var51.asSet();
    var42.setStringPermissions(var62);
    java.util.Collection var64 = var42.getObjectPermissions();
    java.io.InputStream var66 = org.jsecurity.util.ClassUtils.getResourceAsStream("");
    java.lang.Object[] var67 = new java.lang.Object[] { var66};
    java.util.List var68 = org.jsecurity.util.CollectionUtils.asList(var67);
    org.jsecurity.authc.pam.ModularRealmAuthenticator var69 = new org.jsecurity.authc.pam.ModularRealmAuthenticator(var68);
    org.jsecurity.subject.SimplePrincipalCollection var71 = new org.jsecurity.subject.SimplePrincipalCollection((java.util.Collection)var68, "org.jsecurity.authz.UnauthorizedException: org.jsecurity.session.ExpiredSessionException: ");
    java.util.List var72 = var71.asList();
    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      boolean[] var73 = var42.isPermitted(var72);
      fail("Expected exception of type java.lang.ClassCastException");
    } catch (java.lang.ClassCastException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var7);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var8);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var21);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var22);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var25);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var26);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var27);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var41);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var44);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var46);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var47);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var48);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var62);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var64);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var66);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var67);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var68);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var72);

  }

  public void test7() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest2.test7");


    org.jsecurity.realm.text.TextConfigurationRealm var0 = new org.jsecurity.realm.text.TextConfigurationRealm();
    java.io.InputStream var2 = org.jsecurity.util.ClassUtils.getResourceAsStream("");
    java.lang.Object[] var3 = new java.lang.Object[] { var2};
    java.util.List var4 = org.jsecurity.util.CollectionUtils.asList(var3);
    org.jsecurity.authc.pam.ModularRealmAuthenticator var5 = new org.jsecurity.authc.pam.ModularRealmAuthenticator(var4);
    org.jsecurity.subject.SimplePrincipalCollection var7 = new org.jsecurity.subject.SimplePrincipalCollection((java.util.Collection)var4, "org.jsecurity.authz.UnauthorizedException: org.jsecurity.session.ExpiredSessionException: ");
    org.jsecurity.session.UnknownSessionException var12 = new org.jsecurity.session.UnknownSessionException("dd\uFFFD", (java.io.Serializable)100.0f);
    org.jsecurity.session.SessionException var14 = new org.jsecurity.session.SessionException("dd\uFFFD", (java.lang.Throwable)var12, (java.io.Serializable)0);
    org.jsecurity.session.SessionException var15 = new org.jsecurity.session.SessionException("dd\uFFFD", (java.lang.Throwable)var12);
    var7.add((java.lang.Object)var15, "org.jsecurity.config.ConfigurationException: dd\uFFFD");
    var0.onLogout((org.jsecurity.subject.PrincipalCollection)var7);
    org.jsecurity.cache.HashtableCache var20 = new org.jsecurity.cache.HashtableCache("\u0000\u0000\u0000");
    org.jsecurity.session.mgt.SimpleSession var21 = new org.jsecurity.session.mgt.SimpleSession();
    var21.touch();
    org.jsecurity.authz.UnauthenticatedException var25 = new org.jsecurity.authz.UnauthenticatedException();
    org.jsecurity.config.UnresolveableReferenceException var26 = new org.jsecurity.config.UnresolveableReferenceException("", (java.lang.Throwable)var25);
    org.jsecurity.cache.CacheException var27 = new org.jsecurity.cache.CacheException("org.jsecurity.config.ConfigurationException: dd\uFFFD", (java.lang.Throwable)var25);
    java.lang.Object var28 = var21.removeAttribute((java.lang.Object)var27);
    org.jsecurity.mgt.DefaultSecurityManager var29 = new org.jsecurity.mgt.DefaultSecurityManager();
    org.jsecurity.authc.pam.AllSuccessfulModularAuthenticationStrategy var30 = new org.jsecurity.authc.pam.AllSuccessfulModularAuthenticationStrategy();
    org.jsecurity.authc.pam.AllSuccessfulModularAuthenticationStrategy var31 = new org.jsecurity.authc.pam.AllSuccessfulModularAuthenticationStrategy();
    char[] var33 = new char[] { };
    org.jsecurity.authc.UsernamePasswordToken var35 = new org.jsecurity.authc.UsernamePasswordToken("hi!", var33, true);
    org.jsecurity.authc.SimpleAccount var36 = new org.jsecurity.authc.SimpleAccount();
    var36.setCredentialsExpired(false);
    boolean var39 = var36.isLocked();
    org.jsecurity.authc.AuthenticationInfo var40 = var31.afterAllAttempts((org.jsecurity.authc.AuthenticationToken)var35, (org.jsecurity.authc.AuthenticationInfo)var36);
    char[] var44 = new char[] { '4', '#'};
    org.jsecurity.authc.UsernamePasswordToken var45 = new org.jsecurity.authc.UsernamePasswordToken("\u0000\u0000", var44);
    org.jsecurity.authc.SimpleAccount var46 = new org.jsecurity.authc.SimpleAccount();
    var46.setCredentialsExpired(false);
    var46.setCredentialsExpired(false);
    boolean var51 = var46.isCredentialsExpired();
    org.jsecurity.authc.AuthenticationInfo var52 = var31.afterAllAttempts((org.jsecurity.authc.AuthenticationToken)var45, (org.jsecurity.authc.AuthenticationInfo)var46);
    org.jsecurity.authz.UnauthenticatedException var56 = new org.jsecurity.authz.UnauthenticatedException();
    org.jsecurity.config.UnresolveableReferenceException var57 = new org.jsecurity.config.UnresolveableReferenceException("", (java.lang.Throwable)var56);
    org.jsecurity.cache.CacheException var58 = new org.jsecurity.cache.CacheException("org.jsecurity.config.ConfigurationException: dd\uFFFD", (java.lang.Throwable)var56);
    org.jsecurity.authc.SimpleAuthenticationInfo var60 = new org.jsecurity.authc.SimpleAuthenticationInfo((java.lang.Object)"org.jsecurity.config.ConfigurationException: dd\uFFFD", (java.lang.Object)var58, "a2b823b1e72eae2b727289df8a00a89df8a0bab6ad8a89c4c5c7a9b62a270000");
    org.jsecurity.subject.PrincipalCollection var61 = var60.getPrincipals();
    org.jsecurity.authc.AuthenticationInfo var62 = var30.afterAllAttempts((org.jsecurity.authc.AuthenticationToken)var45, (org.jsecurity.authc.AuthenticationInfo)var60);
    var29.setModularAuthenticationStrategy((org.jsecurity.authc.pam.ModularAuthenticationStrategy)var30);
    org.jsecurity.subject.RememberMeManager var64 = var29.getRememberMeManager();
    org.jsecurity.authc.pam.ModularRealmAuthenticator var65 = new org.jsecurity.authc.pam.ModularRealmAuthenticator();
    var29.setAuthenticator((org.jsecurity.authc.Authenticator)var65);
    var20.put((java.lang.Object)var21, (java.lang.Object)var65);
    org.jsecurity.realm.activedirectory.ActiveDirectoryRealm var68 = new org.jsecurity.realm.activedirectory.ActiveDirectoryRealm();
    org.jsecurity.authc.credential.Sha256CredentialsMatcher var69 = new org.jsecurity.authc.credential.Sha256CredentialsMatcher();
    var68.setCredentialsMatcher((org.jsecurity.authc.credential.CredentialsMatcher)var69);
    var69.setHashSalted(false);
    org.jsecurity.authz.UnauthenticatedException var75 = new org.jsecurity.authz.UnauthenticatedException();
    org.jsecurity.config.UnresolveableReferenceException var76 = new org.jsecurity.config.UnresolveableReferenceException("", (java.lang.Throwable)var75);
    org.jsecurity.session.InvalidSessionException var77 = new org.jsecurity.session.InvalidSessionException((java.io.Serializable)var75);
    org.jsecurity.subject.InvalidSubjectException var78 = new org.jsecurity.subject.InvalidSubjectException("org.jsecurity.config.ConfigurationException: dd\uFFFD", (java.lang.Throwable)var75);
    var20.put((java.lang.Object)var69, (java.lang.Object)"org.jsecurity.config.ConfigurationException: dd\uFFFD");
    var69.setHashIterations(0);
    var0.setCredentialsMatcher((org.jsecurity.authc.credential.CredentialsMatcher)var69);
    java.lang.String var83 = var0.getRoleDefinitions();
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var2);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var3);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var4);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var28);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var33);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var39 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var40);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var44);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var51 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var52);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var61);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var62);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var64);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var83);

  }

  public void test8() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest2.test8");


    org.jsecurity.session.mgt.SimpleSession var0 = new org.jsecurity.session.mgt.SimpleSession();
    var0.setTimeout((-1L));
    org.jsecurity.session.mgt.SimpleSession var3 = new org.jsecurity.session.mgt.SimpleSession();
    java.util.Date var4 = var3.getLastAccessTime();
    var0.setLastAccessTime(var4);
    java.net.InetAddress var6 = var0.getHostAddress();
    org.jsecurity.authz.HostUnauthorizedException var7 = new org.jsecurity.authz.HostUnauthorizedException(var6);
    org.jsecurity.authz.HostUnauthorizedException var8 = new org.jsecurity.authz.HostUnauthorizedException(var6);
    org.jsecurity.authz.HostUnauthorizedException var9 = new org.jsecurity.authz.HostUnauthorizedException(var6);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var4);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var6);

  }

  public void test9() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest2.test9");


    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      java.io.InputStream var1 = org.jsecurity.io.ResourceUtils.getInputStreamForPath("3c88ea99-8ee7-47bc-94b1-7ac2b7eddf5e");
      fail("Expected exception of type java.io.FileNotFoundException");
    } catch (java.io.FileNotFoundException e) {
      // Expected exception.
    }

  }

  public void test10() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest2.test10");


    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      java.io.InputStream var1 = org.jsecurity.io.ResourceUtils.getInputStreamForPath("9479eb39-3103-4d6d-9ffc-fc2b99018653");
      fail("Expected exception of type java.io.FileNotFoundException");
    } catch (java.io.FileNotFoundException e) {
      // Expected exception.
    }

  }

  public void test11() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest2.test11");


    org.jsecurity.realm.text.TextConfigurationRealm var2 = new org.jsecurity.realm.text.TextConfigurationRealm();
    java.io.InputStream var4 = org.jsecurity.util.ClassUtils.getResourceAsStream("");
    java.lang.Object[] var5 = new java.lang.Object[] { var4};
    java.util.List var6 = org.jsecurity.util.CollectionUtils.asList(var5);
    org.jsecurity.authc.pam.ModularRealmAuthenticator var7 = new org.jsecurity.authc.pam.ModularRealmAuthenticator(var6);
    org.jsecurity.subject.SimplePrincipalCollection var9 = new org.jsecurity.subject.SimplePrincipalCollection((java.util.Collection)var6, "org.jsecurity.authz.UnauthorizedException: org.jsecurity.session.ExpiredSessionException: ");
    org.jsecurity.session.UnknownSessionException var14 = new org.jsecurity.session.UnknownSessionException("dd\uFFFD", (java.io.Serializable)100.0f);
    org.jsecurity.session.SessionException var16 = new org.jsecurity.session.SessionException("dd\uFFFD", (java.lang.Throwable)var14, (java.io.Serializable)0);
    org.jsecurity.session.SessionException var17 = new org.jsecurity.session.SessionException("dd\uFFFD", (java.lang.Throwable)var14);
    var9.add((java.lang.Object)var17, "org.jsecurity.config.ConfigurationException: dd\uFFFD");
    var2.onLogout((org.jsecurity.subject.PrincipalCollection)var9);
    org.jsecurity.authc.ExpiredCredentialsException var22 = new org.jsecurity.authc.ExpiredCredentialsException();
    org.jsecurity.session.ExpiredSessionException var23 = new org.jsecurity.session.ExpiredSessionException("", (java.lang.Throwable)var22);
    java.lang.Throwable[] var24 = var23.getSuppressed();
    org.jsecurity.io.ResourceException var25 = new org.jsecurity.io.ResourceException((java.lang.Throwable)var23);
    org.jsecurity.authc.SimpleAuthenticationInfo var26 = new org.jsecurity.authc.SimpleAuthenticationInfo((org.jsecurity.subject.PrincipalCollection)var9, (java.lang.Object)var23);
    org.jsecurity.util.InstantiationException var27 = new org.jsecurity.util.InstantiationException("ca73d1a4-706e-42e7-980f-896d3b153de8", (java.lang.Throwable)var23);
    org.jsecurity.authc.ConcurrentAccessException var28 = new org.jsecurity.authc.ConcurrentAccessException((java.lang.Throwable)var27);
    org.jsecurity.authc.CredentialsException var29 = new org.jsecurity.authc.CredentialsException("86c1a830-9c7d-4e10-bf92-010433390085", (java.lang.Throwable)var27);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var4);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var5);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var6);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var24);

  }

  public void test12() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest2.test12");


    org.jsecurity.subject.SubjectException var1 = new org.jsecurity.subject.SubjectException("org.jsecurity.realm.text.PropertiesRealm-209-authorization");

  }

  public void test13() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest2.test13");


    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      byte[] var1 = org.jsecurity.codec.Hex.decode("s\uFFFD\uFFFDkG\uFFFD\uFFFD\uFFFD4\uFFFDW\uFFFDi\uFFFD\uFFFDi\uFFFD\u067D\uFFFD{\uFFFD\u001F");
      fail("Expected exception of type java.lang.IllegalArgumentException");
    } catch (java.lang.IllegalArgumentException e) {
      // Expected exception.
    }

  }

  public void test14() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest2.test14");


    byte[] var1 = org.jsecurity.codec.Base64.decode("hi!");
    java.lang.String var2 = org.jsecurity.codec.Base64.decodeToString(var1);
    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      byte[] var3 = org.jsecurity.codec.Hex.decode(var1);
      fail("Expected exception of type java.lang.IllegalArgumentException");
    } catch (java.lang.IllegalArgumentException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var2 + "' != '" + ""+ "'", var2.equals(""));

  }

  public void test15() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest2.test15");


    org.jsecurity.authc.LockedAccountException var1 = new org.jsecurity.authc.LockedAccountException("HashtableCache [\u0000\u0000\u0000]");

  }

  public void test16() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest2.test16");


    org.jsecurity.authc.IncorrectCredentialsException var1 = new org.jsecurity.authc.IncorrectCredentialsException("org.jsecurity.realm.SimpleAccountRealm-52-authorization");
    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      org.jsecurity.crypto.hash.Sha1Hash var2 = new org.jsecurity.crypto.hash.Sha1Hash((java.lang.Object)var1);
      fail("Expected exception of type org.jsecurity.codec.CodecException");
    } catch (org.jsecurity.codec.CodecException e) {
      // Expected exception.
    }

  }

  public void test17() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest2.test17");


    org.jsecurity.realm.activedirectory.ActiveDirectoryRealm var0 = new org.jsecurity.realm.activedirectory.ActiveDirectoryRealm();
    org.jsecurity.authc.credential.Sha256CredentialsMatcher var1 = new org.jsecurity.authc.credential.Sha256CredentialsMatcher();
    var0.setCredentialsMatcher((org.jsecurity.authc.credential.CredentialsMatcher)var1);
    org.jsecurity.realm.activedirectory.ActiveDirectoryRealm var3 = new org.jsecurity.realm.activedirectory.ActiveDirectoryRealm();
    org.jsecurity.authc.credential.Sha256CredentialsMatcher var4 = new org.jsecurity.authc.credential.Sha256CredentialsMatcher();
    var3.setCredentialsMatcher((org.jsecurity.authc.credential.CredentialsMatcher)var4);
    java.lang.String var6 = var3.getAuthorizationCacheName();
    var3.setUrl("hi!");
    org.jsecurity.realm.ldap.DefaultLdapContextFactory var9 = new org.jsecurity.realm.ldap.DefaultLdapContextFactory();
    var3.setLdapContextFactory((org.jsecurity.realm.ldap.LdapContextFactory)var9);
    var9.setAuthentication("org.jsecurity.authz.UnauthorizedException: org.jsecurity.session.ExpiredSessionException: ");
    var0.setLdapContextFactory((org.jsecurity.realm.ldap.LdapContextFactory)var9);
    var9.setReferral("a2b823b1e72eae2b727289df8a00a89df8a0bab6ad8a89c4c5c7a9b62a270000");
    var9.setSystemPassword("\u0000\u0000\u0000");
    var9.setPrincipalSuffix("5dd0c65d-1422-49c2-becb-9e8dca619ab3");
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var6);

  }

  public void test18() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest2.test18");


    org.jsecurity.realm.SimpleAccountRealm var1 = new org.jsecurity.realm.SimpleAccountRealm("\uFFFD\uFFFD#\uFFFD\uFFFD.\uFFFD+rr\uFFFD\u07CA\u0000\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\u01E9\uFFFD*'\u0000\u0000");
    org.jsecurity.cache.HashtableCache var3 = new org.jsecurity.cache.HashtableCache("\u0000\u0000\u0000");
    org.jsecurity.session.mgt.SimpleSession var4 = new org.jsecurity.session.mgt.SimpleSession();
    var4.touch();
    org.jsecurity.authz.UnauthenticatedException var8 = new org.jsecurity.authz.UnauthenticatedException();
    org.jsecurity.config.UnresolveableReferenceException var9 = new org.jsecurity.config.UnresolveableReferenceException("", (java.lang.Throwable)var8);
    org.jsecurity.cache.CacheException var10 = new org.jsecurity.cache.CacheException("org.jsecurity.config.ConfigurationException: dd\uFFFD", (java.lang.Throwable)var8);
    java.lang.Object var11 = var4.removeAttribute((java.lang.Object)var10);
    org.jsecurity.mgt.DefaultSecurityManager var12 = new org.jsecurity.mgt.DefaultSecurityManager();
    org.jsecurity.authc.pam.AllSuccessfulModularAuthenticationStrategy var13 = new org.jsecurity.authc.pam.AllSuccessfulModularAuthenticationStrategy();
    org.jsecurity.authc.pam.AllSuccessfulModularAuthenticationStrategy var14 = new org.jsecurity.authc.pam.AllSuccessfulModularAuthenticationStrategy();
    char[] var16 = new char[] { };
    org.jsecurity.authc.UsernamePasswordToken var18 = new org.jsecurity.authc.UsernamePasswordToken("hi!", var16, true);
    org.jsecurity.authc.SimpleAccount var19 = new org.jsecurity.authc.SimpleAccount();
    var19.setCredentialsExpired(false);
    boolean var22 = var19.isLocked();
    org.jsecurity.authc.AuthenticationInfo var23 = var14.afterAllAttempts((org.jsecurity.authc.AuthenticationToken)var18, (org.jsecurity.authc.AuthenticationInfo)var19);
    char[] var27 = new char[] { '4', '#'};
    org.jsecurity.authc.UsernamePasswordToken var28 = new org.jsecurity.authc.UsernamePasswordToken("\u0000\u0000", var27);
    org.jsecurity.authc.SimpleAccount var29 = new org.jsecurity.authc.SimpleAccount();
    var29.setCredentialsExpired(false);
    var29.setCredentialsExpired(false);
    boolean var34 = var29.isCredentialsExpired();
    org.jsecurity.authc.AuthenticationInfo var35 = var14.afterAllAttempts((org.jsecurity.authc.AuthenticationToken)var28, (org.jsecurity.authc.AuthenticationInfo)var29);
    org.jsecurity.authz.UnauthenticatedException var39 = new org.jsecurity.authz.UnauthenticatedException();
    org.jsecurity.config.UnresolveableReferenceException var40 = new org.jsecurity.config.UnresolveableReferenceException("", (java.lang.Throwable)var39);
    org.jsecurity.cache.CacheException var41 = new org.jsecurity.cache.CacheException("org.jsecurity.config.ConfigurationException: dd\uFFFD", (java.lang.Throwable)var39);
    org.jsecurity.authc.SimpleAuthenticationInfo var43 = new org.jsecurity.authc.SimpleAuthenticationInfo((java.lang.Object)"org.jsecurity.config.ConfigurationException: dd\uFFFD", (java.lang.Object)var41, "a2b823b1e72eae2b727289df8a00a89df8a0bab6ad8a89c4c5c7a9b62a270000");
    org.jsecurity.subject.PrincipalCollection var44 = var43.getPrincipals();
    org.jsecurity.authc.AuthenticationInfo var45 = var13.afterAllAttempts((org.jsecurity.authc.AuthenticationToken)var28, (org.jsecurity.authc.AuthenticationInfo)var43);
    var12.setModularAuthenticationStrategy((org.jsecurity.authc.pam.ModularAuthenticationStrategy)var13);
    org.jsecurity.subject.RememberMeManager var47 = var12.getRememberMeManager();
    org.jsecurity.authc.pam.ModularRealmAuthenticator var48 = new org.jsecurity.authc.pam.ModularRealmAuthenticator();
    var12.setAuthenticator((org.jsecurity.authc.Authenticator)var48);
    var3.put((java.lang.Object)var4, (java.lang.Object)var48);
    java.lang.String var51 = var3.toString();
    org.jsecurity.mgt.DefaultSecurityManager var52 = new org.jsecurity.mgt.DefaultSecurityManager();
    org.jsecurity.authz.permission.WildcardPermissionResolver var53 = new org.jsecurity.authz.permission.WildcardPermissionResolver();
    var52.setPermissionResolver((org.jsecurity.authz.permission.PermissionResolver)var53);
    org.jsecurity.cache.CacheManager var55 = var52.getCacheManager();
    org.jsecurity.authc.Authenticator var56 = var52.getAuthenticator();
    var3.remove((java.lang.Object)var52);
    var1.setAuthorizationCache((org.jsecurity.cache.Cache)var3);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var11);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var16);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var22 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var23);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var27);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var34 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var35);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var44);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var45);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var47);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var51 + "' != '" + "HashtableCache [\u0000\u0000\u0000]"+ "'", var51.equals("HashtableCache [\u0000\u0000\u0000]"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var55);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var56);

  }

  public void test19() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest2.test19");


    char[] var1 = new char[] { };
    org.jsecurity.authc.UsernamePasswordToken var3 = new org.jsecurity.authc.UsernamePasswordToken("hi!", var1, true);
    byte[] var4 = org.jsecurity.codec.Hex.decode(var1);
    byte[] var5 = org.jsecurity.codec.Hex.decode(var1);
    byte[] var6 = org.jsecurity.codec.Base64.encode(var5);
    byte[] var7 = org.jsecurity.codec.Base64.decode(var5);
    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      char[] var9 = org.jsecurity.codec.CodecSupport.toChars(var5, "org.jsecurity.authc.UsernamePasswordToken - \u0000\u0000, rememberMe=false");
      fail("Expected exception of type org.jsecurity.codec.CodecException");
    } catch (org.jsecurity.codec.CodecException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var1);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var4);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var5);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var6);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var7);

  }

  public void test20() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest2.test20");


    java.lang.String[] var3 = org.jsecurity.util.StringUtils.split("o\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFDw8\u3B9A\uFFFDM\uFFFD\uFFFDg\uFFFD\uFFFD\u07BC\u059C", '4', '4');
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var3);

  }

  public void test21() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest2.test21");


    org.jsecurity.realm.activedirectory.ActiveDirectoryRealm var0 = new org.jsecurity.realm.activedirectory.ActiveDirectoryRealm();
    var0.init();
    var0.setSystemPassword("dd\uFFFD");
    org.jsecurity.authc.credential.Sha512CredentialsMatcher var4 = new org.jsecurity.authc.credential.Sha512CredentialsMatcher();
    var0.setCredentialsMatcher((org.jsecurity.authc.credential.CredentialsMatcher)var4);
    boolean var6 = var4.isStoredCredentialsHexEncoded();
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var6 == true);

  }

  public void test22() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest2.test22");


    org.jsecurity.crypto.BlowfishCipher var0 = new org.jsecurity.crypto.BlowfishCipher();
    java.security.Key var1 = org.jsecurity.crypto.BlowfishCipher.generateNewKey();
    var0.setKey(var1);
    java.security.Key var3 = org.jsecurity.crypto.BlowfishCipher.generateNewKey();
    var0.setKey(var3);
    byte[] var8 = new byte[] { (byte)100, (byte)100, (byte)(-1)};
    java.lang.String var9 = org.jsecurity.codec.CodecSupport.toString(var8);
    char[] var10 = org.jsecurity.codec.CodecSupport.toChars(var8);
    boolean var11 = org.jsecurity.codec.Base64.isBase64(var8);
    boolean var12 = org.jsecurity.codec.Base64.isBase64(var8);
    boolean var13 = org.jsecurity.codec.Base64.isBase64(var8);
    java.lang.String var14 = org.jsecurity.codec.Hex.encodeToString(var8);
    byte[] var18 = new byte[] { (byte)100, (byte)100, (byte)(-1)};
    java.lang.String var19 = org.jsecurity.codec.CodecSupport.toString(var18);
    char[] var20 = org.jsecurity.codec.CodecSupport.toChars(var18);
    boolean var21 = org.jsecurity.codec.Base64.isBase64(var18);
    boolean var22 = org.jsecurity.codec.Base64.isBase64(var18);
    boolean var23 = org.jsecurity.codec.Base64.isBase64(var18);
    java.lang.String var24 = org.jsecurity.codec.Base64.encodeToString(var18);
    byte[] var25 = var0.encrypt(var8, var18);
    java.lang.String var26 = org.jsecurity.codec.Base64.encodeToString(var8);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var1);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var3);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var8);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var9 + "' != '" + "dd\uFFFD"+ "'", var9.equals("dd\uFFFD"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var10);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var11 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var12 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var13 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var14 + "' != '" + "6464ff"+ "'", var14.equals("6464ff"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var18);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var19 + "' != '" + "dd\uFFFD"+ "'", var19.equals("dd\uFFFD"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var20);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var21 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var22 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var23 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var24 + "' != '" + "ZGT/"+ "'", var24.equals("ZGT/"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var25);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var26 + "' != '" + "ZGT/"+ "'", var26.equals("ZGT/"));

  }

  public void test23() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest2.test23");


    java.io.InputStream var1 = org.jsecurity.util.ClassUtils.getResourceAsStream("");
    java.lang.Object[] var2 = new java.lang.Object[] { var1};
    java.util.List var3 = org.jsecurity.util.CollectionUtils.asList(var2);
    org.jsecurity.authc.pam.ModularRealmAuthenticator var4 = new org.jsecurity.authc.pam.ModularRealmAuthenticator(var3);
    org.jsecurity.subject.SimplePrincipalCollection var6 = new org.jsecurity.subject.SimplePrincipalCollection((java.util.Collection)var3, "org.jsecurity.authz.UnauthorizedException: org.jsecurity.session.ExpiredSessionException: ");
    java.util.List var7 = var6.asList();
    org.jsecurity.realm.activedirectory.ActiveDirectoryRealm var9 = new org.jsecurity.realm.activedirectory.ActiveDirectoryRealm();
    org.jsecurity.authc.credential.Sha256CredentialsMatcher var10 = new org.jsecurity.authc.credential.Sha256CredentialsMatcher();
    var9.setCredentialsMatcher((org.jsecurity.authc.credential.CredentialsMatcher)var10);
    java.lang.String var12 = var9.getAuthorizationCacheName();
    var9.setPrincipalSuffix("org.jsecurity.config.ConfigurationException: dd\uFFFD");
    org.jsecurity.authz.permission.PermissionResolver var15 = var9.getPermissionResolver();
    java.util.Set var16 = org.jsecurity.util.PermissionUtils.resolveDelimitedPermissions("NfxhYN7ItBfRAmDBmprtU73ghfEEPpcDJrHPkZ06wiY=", var15);
    var6.addAll((java.util.Collection)var16, "cff098b5-6d79-4f6d-93d3-148185d0b987");
    org.jsecurity.authz.aop.GuestAnnotationHandler var19 = new org.jsecurity.authz.aop.GuestAnnotationHandler();
    java.lang.Class var20 = var19.getAnnotationClass();
    java.lang.Object var21 = var6.oneByType(var20);
    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      java.lang.Object var22 = org.jsecurity.util.ClassUtils.newInstance(var20);
      fail("Expected exception of type org.jsecurity.util.InstantiationException");
    } catch (org.jsecurity.util.InstantiationException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var1);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var2);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var3);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var7);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var12);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var15);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var16);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var20);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var21);

  }

  public void test24() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest2.test24");


    org.jsecurity.crypto.hash.Md2Hash var1 = org.jsecurity.crypto.hash.Md2Hash.fromHexString("6464ff");
    java.lang.String var2 = var1.toString();
    byte[] var3 = var1.getBytes();
    byte[] var7 = new byte[] { (byte)100, (byte)100, (byte)(-1)};
    java.lang.String var8 = org.jsecurity.codec.CodecSupport.toString(var7);
    byte[] var9 = org.jsecurity.codec.Base64.encode(var7);
    byte[] var10 = org.jsecurity.codec.Base64.encode(var9);
    var1.setBytes(var9);
    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      char[] var13 = org.jsecurity.codec.CodecSupport.toChars(var9, "3900277b-9328-4900-8254-f97def7b63e8");
      fail("Expected exception of type org.jsecurity.codec.CodecException");
    } catch (org.jsecurity.codec.CodecException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var2 + "' != '" + "6464ff"+ "'", var2.equals("6464ff"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var3);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var7);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var8 + "' != '" + "dd\uFFFD"+ "'", var8.equals("dd\uFFFD"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var9);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var10);

  }

  public void test25() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest2.test25");


    org.jsecurity.crypto.hash.Sha512Hash var1 = org.jsecurity.crypto.hash.Sha512Hash.fromBase64String("org.jsecurity.config.ConfigurationException: dd\uFFFD");
    byte[] var2 = var1.getBytes();
    java.lang.String var3 = org.jsecurity.codec.Base64.decodeToString(var2);
    byte[] var4 = org.jsecurity.codec.Base64.encodeChunked(var2);
    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      char[] var6 = org.jsecurity.codec.CodecSupport.toChars(var2, "cedd2a1f-3314-48a5-a4a5-a84437e5ec49");
      fail("Expected exception of type org.jsecurity.codec.CodecException");
    } catch (org.jsecurity.codec.CodecException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var1);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var2);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var3 + "' != '" + "\u0000\u0000\u0000"+ "'", var3.equals("\u0000\u0000\u0000"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var4);

  }

  public void test26() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest2.test26");


    org.jsecurity.config.UnresolveableReferenceException var1 = new org.jsecurity.config.UnresolveableReferenceException("4fc395ae-93c6-49c9-bcae-d836884b53a9");

  }

  public void test27() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest2.test27");


    org.jsecurity.session.mgt.eis.MemorySessionDAO var0 = new org.jsecurity.session.mgt.eis.MemorySessionDAO();
    org.jsecurity.cache.Cache var1 = var0.getActiveSessionsCache();
    org.jsecurity.cache.CacheManager var2 = var0.getCacheManager();
    org.jsecurity.cache.HashtableCacheManager var3 = new org.jsecurity.cache.HashtableCacheManager();
    org.jsecurity.cache.Cache var5 = var3.getCache("\u0000\u0000");
    var0.setActiveSessionsCache(var5);
    java.io.InputStream var8 = org.jsecurity.util.ClassUtils.getResourceAsStream("");
    java.lang.Object[] var9 = new java.lang.Object[] { var8};
    java.util.List var10 = org.jsecurity.util.CollectionUtils.asList(var9);
    org.jsecurity.authc.pam.ModularRealmAuthenticator var11 = new org.jsecurity.authc.pam.ModularRealmAuthenticator(var10);
    org.jsecurity.authc.pam.AllSuccessfulModularAuthenticationStrategy var12 = new org.jsecurity.authc.pam.AllSuccessfulModularAuthenticationStrategy();
    var11.setModularAuthenticationStrategy((org.jsecurity.authc.pam.ModularAuthenticationStrategy)var12);
    org.jsecurity.authz.SimpleAuthorizationInfo var14 = new org.jsecurity.authz.SimpleAuthorizationInfo();
    var14.addStringPermission("hi!");
    java.io.InputStream var18 = org.jsecurity.util.ClassUtils.getResourceAsStream("");
    java.lang.Object[] var19 = new java.lang.Object[] { var18};
    java.util.List var20 = org.jsecurity.util.CollectionUtils.asList(var19);
    var14.addRoles((java.util.Collection)var20);
    var11.setAuthenticationListeners((java.util.Collection)var20);
    org.jsecurity.realm.activedirectory.ActiveDirectoryRealm var23 = new org.jsecurity.realm.activedirectory.ActiveDirectoryRealm();
    var23.setPrincipalSuffix("");
    var11.setRealm((org.jsecurity.realm.Realm)var23);
    org.jsecurity.cache.HashtableCacheManager var27 = new org.jsecurity.cache.HashtableCacheManager();
    org.jsecurity.cache.Cache var29 = var27.getCache("\u0000\u0000");
    var23.setAuthorizationCache(var29);
    var0.setActiveSessionsCache(var29);
    org.jsecurity.session.mgt.SimpleSession var32 = new org.jsecurity.session.mgt.SimpleSession();
    java.io.Serializable var33 = var0.create((org.jsecurity.session.Session)var32);
    org.jsecurity.session.mgt.SimpleSession var34 = new org.jsecurity.session.mgt.SimpleSession();
    var34.touch();
    var34.validate();
    org.jsecurity.session.mgt.SimpleSession var37 = new org.jsecurity.session.mgt.SimpleSession();
    var37.setTimeout((-1L));
    org.jsecurity.session.mgt.SimpleSession var40 = new org.jsecurity.session.mgt.SimpleSession();
    java.util.Date var41 = var40.getLastAccessTime();
    var37.setLastAccessTime(var41);
    org.jsecurity.session.mgt.SimpleSession var43 = new org.jsecurity.session.mgt.SimpleSession();
    java.util.Date var44 = var43.getLastAccessTime();
    var37.setStopTimestamp(var44);
    var34.setLastAccessTime(var44);
    var32.setLastAccessTime(var44);
    org.jsecurity.session.mgt.ImmutableProxiedSession var48 = new org.jsecurity.session.mgt.ImmutableProxiedSession((org.jsecurity.session.Session)var32);
    java.util.Date var49 = var48.getLastAccessTime();
    java.io.Serializable var50 = var48.getId();
    org.jsecurity.session.UnknownSessionException var56 = new org.jsecurity.session.UnknownSessionException("dd\uFFFD", (java.io.Serializable)100.0f);
    org.jsecurity.config.ConfigurationException var57 = new org.jsecurity.config.ConfigurationException("dd\uFFFD", (java.lang.Throwable)var56);
    org.jsecurity.session.ExpiredSessionException var59 = new org.jsecurity.session.ExpiredSessionException("", (java.lang.Throwable)var57, (java.io.Serializable)true);
    org.jsecurity.authc.LockedAccountException var60 = new org.jsecurity.authc.LockedAccountException("", (java.lang.Throwable)var59);
    org.jsecurity.session.SessionException var61 = new org.jsecurity.session.SessionException((java.lang.Throwable)var60);
    org.jsecurity.session.SessionException var62 = new org.jsecurity.session.SessionException((java.lang.Throwable)var60);
    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      java.lang.Object var63 = var48.removeAttribute((java.lang.Object)var62);
      fail("Expected exception of type org.jsecurity.session.InvalidSessionException");
    } catch (org.jsecurity.session.InvalidSessionException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var1);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var2);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var5);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var8);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var9);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var10);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var18);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var19);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var20);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var29);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var33 + "' != '" + "0be1272c-8bf4-4d7d-af90-26e19a0a225a"+ "'", var33.equals("0be1272c-8bf4-4d7d-af90-26e19a0a225a"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var41);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var44);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var49);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var50 + "' != '" + "0be1272c-8bf4-4d7d-af90-26e19a0a225a"+ "'", var50.equals("0be1272c-8bf4-4d7d-af90-26e19a0a225a"));

  }

  public void test28() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest2.test28");


    org.jsecurity.codec.CodecException var2 = new org.jsecurity.codec.CodecException("dd\uFFFD");
    org.jsecurity.authc.ConcurrentAccessException var3 = new org.jsecurity.authc.ConcurrentAccessException("org.jsecurity.authz.UnauthorizedException: org.jsecurity.session.ExpiredSessionException: ", (java.lang.Throwable)var2);
    org.jsecurity.subject.SimplePrincipalCollection var5 = new org.jsecurity.subject.SimplePrincipalCollection((java.lang.Object)var2, "");
    boolean var6 = var5.isEmpty();
    java.util.List var7 = var5.asList();
    org.jsecurity.authc.pam.ModularRealmAuthenticator var8 = new org.jsecurity.authc.pam.ModularRealmAuthenticator(var7);
    org.jsecurity.authc.pam.AtLeastOneSuccessfulModularAuthenticationStrategy var9 = new org.jsecurity.authc.pam.AtLeastOneSuccessfulModularAuthenticationStrategy();
    org.jsecurity.authc.pam.AllSuccessfulModularAuthenticationStrategy var11 = new org.jsecurity.authc.pam.AllSuccessfulModularAuthenticationStrategy();
    char[] var13 = new char[] { };
    org.jsecurity.authc.UsernamePasswordToken var15 = new org.jsecurity.authc.UsernamePasswordToken("hi!", var13, true);
    org.jsecurity.authc.SimpleAccount var16 = new org.jsecurity.authc.SimpleAccount();
    var16.setCredentialsExpired(false);
    boolean var19 = var16.isLocked();
    org.jsecurity.authc.AuthenticationInfo var20 = var11.afterAllAttempts((org.jsecurity.authc.AuthenticationToken)var15, (org.jsecurity.authc.AuthenticationInfo)var16);
    char[] var23 = new char[] { };
    org.jsecurity.authc.UsernamePasswordToken var25 = new org.jsecurity.authc.UsernamePasswordToken("hi!", var23, true);
    org.jsecurity.authc.UsernamePasswordToken var26 = new org.jsecurity.authc.UsernamePasswordToken("\u0000\u0000", var23);
    var15.setPassword(var23);
    org.jsecurity.authc.UsernamePasswordToken var28 = new org.jsecurity.authc.UsernamePasswordToken("\u0000\u0000\u0000", var23);
    org.jsecurity.realm.text.TextConfigurationRealm var29 = new org.jsecurity.realm.text.TextConfigurationRealm();
    java.io.InputStream var31 = org.jsecurity.util.ClassUtils.getResourceAsStream("");
    java.lang.Object[] var32 = new java.lang.Object[] { var31};
    java.util.List var33 = org.jsecurity.util.CollectionUtils.asList(var32);
    org.jsecurity.authc.pam.ModularRealmAuthenticator var34 = new org.jsecurity.authc.pam.ModularRealmAuthenticator(var33);
    org.jsecurity.subject.SimplePrincipalCollection var36 = new org.jsecurity.subject.SimplePrincipalCollection((java.util.Collection)var33, "org.jsecurity.authz.UnauthorizedException: org.jsecurity.session.ExpiredSessionException: ");
    org.jsecurity.session.UnknownSessionException var41 = new org.jsecurity.session.UnknownSessionException("dd\uFFFD", (java.io.Serializable)100.0f);
    org.jsecurity.session.SessionException var43 = new org.jsecurity.session.SessionException("dd\uFFFD", (java.lang.Throwable)var41, (java.io.Serializable)0);
    org.jsecurity.session.SessionException var44 = new org.jsecurity.session.SessionException("dd\uFFFD", (java.lang.Throwable)var41);
    var36.add((java.lang.Object)var44, "org.jsecurity.config.ConfigurationException: dd\uFFFD");
    var29.onLogout((org.jsecurity.subject.PrincipalCollection)var36);
    org.jsecurity.authc.ExpiredCredentialsException var49 = new org.jsecurity.authc.ExpiredCredentialsException();
    org.jsecurity.session.ExpiredSessionException var50 = new org.jsecurity.session.ExpiredSessionException("", (java.lang.Throwable)var49);
    java.lang.Throwable[] var51 = var50.getSuppressed();
    org.jsecurity.io.ResourceException var52 = new org.jsecurity.io.ResourceException((java.lang.Throwable)var50);
    org.jsecurity.authc.SimpleAuthenticationInfo var53 = new org.jsecurity.authc.SimpleAuthenticationInfo((org.jsecurity.subject.PrincipalCollection)var36, (java.lang.Object)var50);
    org.jsecurity.authc.AuthenticationInfo var54 = var9.afterAllAttempts((org.jsecurity.authc.AuthenticationToken)var28, (org.jsecurity.authc.AuthenticationInfo)var53);
    org.jsecurity.authz.SimpleAuthorizingAccount var56 = new org.jsecurity.authz.SimpleAuthorizingAccount((java.util.Collection)var7, (java.lang.Object)var53, "org.jsecurity.config.ConfigurationException: dd\uFFFD-4org.jsecurity.config.ConfigurationException: dd\uFFFD02-8085-950org.jsecurity.config.ConfigurationException: dd\uFFFDbb026org.jsecurity.config.ConfigurationException: dd\uFFFD06");
    org.jsecurity.authc.pam.ModularRealmAuthenticator var57 = new org.jsecurity.authc.pam.ModularRealmAuthenticator(var7);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var6 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var7);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var13);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var19 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var20);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var23);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var31);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var32);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var33);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var51);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var54);

  }

  public void test29() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest2.test29");


    org.jsecurity.authz.ModularRealmAuthorizer var0 = new org.jsecurity.authz.ModularRealmAuthorizer();
    java.io.InputStream var2 = org.jsecurity.util.ClassUtils.getResourceAsStream("");
    java.lang.Object[] var3 = new java.lang.Object[] { var2};
    java.util.List var4 = org.jsecurity.util.CollectionUtils.asList(var3);
    org.jsecurity.authc.pam.ModularRealmAuthenticator var5 = new org.jsecurity.authc.pam.ModularRealmAuthenticator(var4);
    org.jsecurity.subject.SimplePrincipalCollection var7 = new org.jsecurity.subject.SimplePrincipalCollection((java.util.Collection)var4, "org.jsecurity.authz.UnauthorizedException: org.jsecurity.session.ExpiredSessionException: ");
    org.jsecurity.session.UnknownSessionException var12 = new org.jsecurity.session.UnknownSessionException("dd\uFFFD", (java.io.Serializable)100.0f);
    org.jsecurity.session.SessionException var14 = new org.jsecurity.session.SessionException("dd\uFFFD", (java.lang.Throwable)var12, (java.io.Serializable)0);
    org.jsecurity.session.SessionException var15 = new org.jsecurity.session.SessionException("dd\uFFFD", (java.lang.Throwable)var12);
    var7.add((java.lang.Object)var15, "org.jsecurity.config.ConfigurationException: dd\uFFFD");
    java.util.Set var18 = var7.asSet();
    var0.setRealms((java.util.Collection)var18);
    org.jsecurity.authz.UnauthorizedException var21 = new org.jsecurity.authz.UnauthorizedException("org.jsecurity.config.ConfigurationException: dd\uFFFD");
    java.lang.Throwable[] var22 = var21.getSuppressed();
    java.util.Set var23 = org.jsecurity.util.CollectionUtils.asSet((java.lang.Object[])var22);
    var0.setRealms((java.util.Collection)var23);
    java.util.Collection var25 = var0.getRealms();
    org.jsecurity.codec.CodecException var28 = new org.jsecurity.codec.CodecException("dd\uFFFD");
    org.jsecurity.authc.ConcurrentAccessException var29 = new org.jsecurity.authc.ConcurrentAccessException("org.jsecurity.authz.UnauthorizedException: org.jsecurity.session.ExpiredSessionException: ", (java.lang.Throwable)var28);
    org.jsecurity.subject.SimplePrincipalCollection var31 = new org.jsecurity.subject.SimplePrincipalCollection((java.lang.Object)var28, "");
    java.lang.String[] var33 = new java.lang.String[] { "orgjsecurityauthcCredentialsException783ccd3148a842dd890fdf885a7baafAA=="};
    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      boolean[] var34 = var0.isPermitted((org.jsecurity.subject.PrincipalCollection)var31, var33);
      fail("Expected exception of type java.lang.IllegalStateException");
    } catch (java.lang.IllegalStateException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var2);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var3);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var4);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var18);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var22);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var23);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var25);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var33);

  }

  public void test30() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest2.test30");


    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      org.jsecurity.crypto.hash.Md5Hash var1 = org.jsecurity.crypto.hash.Md5Hash.fromHexString("44126908-8346-4f1c-92de-726997ba95f5");
      fail("Expected exception of type java.lang.IllegalArgumentException");
    } catch (java.lang.IllegalArgumentException e) {
      // Expected exception.
    }

  }

  public void test31() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest2.test31");


    org.jsecurity.session.mgt.SimpleSession var0 = new org.jsecurity.session.mgt.SimpleSession();
    var0.touch();
    var0.validate();
    org.jsecurity.session.mgt.SimpleSession var3 = new org.jsecurity.session.mgt.SimpleSession();
    var3.setTimeout((-1L));
    org.jsecurity.session.mgt.SimpleSession var6 = new org.jsecurity.session.mgt.SimpleSession();
    java.util.Date var7 = var6.getLastAccessTime();
    var3.setLastAccessTime(var7);
    org.jsecurity.session.mgt.SimpleSession var9 = new org.jsecurity.session.mgt.SimpleSession();
    java.util.Date var10 = var9.getLastAccessTime();
    var3.setStopTimestamp(var10);
    var0.setLastAccessTime(var10);
    java.io.Serializable var13 = var0.getId();
    var0.stop();
    org.jsecurity.jndi.JndiLocator var15 = new org.jsecurity.jndi.JndiLocator();
    boolean var16 = var15.isResourceRef();
    java.lang.Object var17 = var0.getAttribute((java.lang.Object)var15);
    org.jsecurity.realm.jndi.JndiRealmFactory var18 = new org.jsecurity.realm.jndi.JndiRealmFactory();
    java.util.Collection var19 = var18.getJndiNames();
    org.jsecurity.jndi.JndiTemplate var20 = var18.getJndiTemplate();
    java.util.Properties var21 = var20.getEnvironment();
    var15.setJndiTemplate(var20);
    org.jsecurity.realm.activedirectory.ActiveDirectoryRealm var24 = new org.jsecurity.realm.activedirectory.ActiveDirectoryRealm();
    org.jsecurity.authc.credential.Sha256CredentialsMatcher var25 = new org.jsecurity.authc.credential.Sha256CredentialsMatcher();
    var24.setCredentialsMatcher((org.jsecurity.authc.credential.CredentialsMatcher)var25);
    org.jsecurity.realm.activedirectory.ActiveDirectoryRealm var27 = new org.jsecurity.realm.activedirectory.ActiveDirectoryRealm();
    org.jsecurity.authc.credential.Sha256CredentialsMatcher var28 = new org.jsecurity.authc.credential.Sha256CredentialsMatcher();
    var27.setCredentialsMatcher((org.jsecurity.authc.credential.CredentialsMatcher)var28);
    java.lang.String var30 = var27.getAuthorizationCacheName();
    var27.setUrl("hi!");
    org.jsecurity.realm.ldap.DefaultLdapContextFactory var33 = new org.jsecurity.realm.ldap.DefaultLdapContextFactory();
    var27.setLdapContextFactory((org.jsecurity.realm.ldap.LdapContextFactory)var33);
    var33.setAuthentication("org.jsecurity.authz.UnauthorizedException: org.jsecurity.session.ExpiredSessionException: ");
    var24.setLdapContextFactory((org.jsecurity.realm.ldap.LdapContextFactory)var33);
    org.jsecurity.mgt.DefaultSecurityManager var38 = new org.jsecurity.mgt.DefaultSecurityManager();
    java.io.InputStream var40 = org.jsecurity.util.ClassUtils.getResourceAsStream("");
    java.lang.Object[] var41 = new java.lang.Object[] { var40};
    java.util.List var42 = org.jsecurity.util.CollectionUtils.asList(var41);
    org.jsecurity.authc.pam.ModularRealmAuthenticator var43 = new org.jsecurity.authc.pam.ModularRealmAuthenticator(var42);
    org.jsecurity.authc.pam.AllSuccessfulModularAuthenticationStrategy var44 = new org.jsecurity.authc.pam.AllSuccessfulModularAuthenticationStrategy();
    var43.setModularAuthenticationStrategy((org.jsecurity.authc.pam.ModularAuthenticationStrategy)var44);
    org.jsecurity.authz.SimpleAuthorizationInfo var46 = new org.jsecurity.authz.SimpleAuthorizationInfo();
    var46.addStringPermission("hi!");
    java.io.InputStream var50 = org.jsecurity.util.ClassUtils.getResourceAsStream("");
    java.lang.Object[] var51 = new java.lang.Object[] { var50};
    java.util.List var52 = org.jsecurity.util.CollectionUtils.asList(var51);
    var46.addRoles((java.util.Collection)var52);
    var43.setAuthenticationListeners((java.util.Collection)var52);
    var38.setSessionListeners((java.util.Collection)var52);
    java.io.InputStream var57 = org.jsecurity.util.ClassUtils.getResourceAsStream("");
    java.lang.Object[] var58 = new java.lang.Object[] { var57};
    java.util.List var59 = org.jsecurity.util.CollectionUtils.asList(var58);
    org.jsecurity.authc.pam.ModularRealmAuthenticator var60 = new org.jsecurity.authc.pam.ModularRealmAuthenticator(var59);
    org.jsecurity.authc.pam.AllSuccessfulModularAuthenticationStrategy var61 = new org.jsecurity.authc.pam.AllSuccessfulModularAuthenticationStrategy();
    var60.setModularAuthenticationStrategy((org.jsecurity.authc.pam.ModularAuthenticationStrategy)var61);
    org.jsecurity.authz.SimpleAuthorizationInfo var63 = new org.jsecurity.authz.SimpleAuthorizationInfo();
    var63.addStringPermission("hi!");
    java.io.InputStream var67 = org.jsecurity.util.ClassUtils.getResourceAsStream("");
    java.lang.Object[] var68 = new java.lang.Object[] { var67};
    java.util.List var69 = org.jsecurity.util.CollectionUtils.asList(var68);
    var63.addRoles((java.util.Collection)var69);
    var60.setAuthenticationListeners((java.util.Collection)var69);
    org.jsecurity.realm.activedirectory.ActiveDirectoryRealm var72 = new org.jsecurity.realm.activedirectory.ActiveDirectoryRealm();
    var72.setPrincipalSuffix("");
    var60.setRealm((org.jsecurity.realm.Realm)var72);
    org.jsecurity.cache.HashtableCacheManager var76 = new org.jsecurity.cache.HashtableCacheManager();
    org.jsecurity.cache.Cache var78 = var76.getCache("\u0000\u0000");
    var72.setAuthorizationCache(var78);
    var38.setRealm((org.jsecurity.realm.Realm)var72);
    org.jsecurity.subject.RememberMeManager var81 = var38.getRememberMeManager();
    org.jsecurity.session.mgt.SessionManager var82 = var38.getSessionManager();
    org.jsecurity.authc.SimpleAccount var84 = new org.jsecurity.authc.SimpleAccount((java.lang.Object)var24, (java.lang.Object)var82, "HashtableCache [\u0000\u0000\u0000]");
    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      var20.rebind("4a0e5e90-249b-4eb3-a134-0b53851d6caf", (java.lang.Object)var82);
      fail("Expected exception of type javax.naming.NoInitialContextException");
    } catch (javax.naming.NoInitialContextException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var7);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var10);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var13);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var16 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var17);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var19);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var20);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var21);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var30);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var40);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var41);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var42);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var50);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var51);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var52);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var57);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var58);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var59);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var67);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var68);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var69);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var78);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var81);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var82);

  }

  public void test32() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest2.test32");


    org.jsecurity.realm.text.PropertiesRealm var2 = new org.jsecurity.realm.text.PropertiesRealm();
    org.jsecurity.realm.activedirectory.ActiveDirectoryRealm var3 = new org.jsecurity.realm.activedirectory.ActiveDirectoryRealm();
    org.jsecurity.authc.credential.Sha256CredentialsMatcher var4 = new org.jsecurity.authc.credential.Sha256CredentialsMatcher();
    var3.setCredentialsMatcher((org.jsecurity.authc.credential.CredentialsMatcher)var4);
    java.lang.String var6 = var3.getAuthorizationCacheName();
    var3.setPrincipalSuffix("org.jsecurity.config.ConfigurationException: dd\uFFFD");
    org.jsecurity.authz.permission.PermissionResolver var9 = var3.getPermissionResolver();
    var2.setPermissionResolver(var9);
    java.util.Set var11 = org.jsecurity.util.PermissionUtils.resolveDelimitedPermissions("\uFFFD\uFFFD#\uFFFD\uFFFD.\uFFFD+r\uFFFD\u6959(\uFFFD\uFFFDW\uFFFDq\uFFFD.\uFFFD\uFFFD^jY\uFFFDj\uFFFDa\uFFFD\uFFFD\uFFFDj\u0628", var9);
    org.jsecurity.authz.SimpleRole var12 = new org.jsecurity.authz.SimpleRole("e2497199-95f2-4373-8934-d742f09a6cb1", var11);
    var12.setName("020e4fd5-81c8-4cbc-9bbb-975c45ce39a3");
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var6);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var9);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var11);

  }

  public void test33() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest2.test33");


    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      java.lang.Object var1 = org.jsecurity.util.ClassUtils.newInstance("499413f2-ff78-44c6-b3f7-2030321675ed");
      fail("Expected exception of type org.jsecurity.util.UnknownClassException");
    } catch (org.jsecurity.util.UnknownClassException e) {
      // Expected exception.
    }

  }

  public void test34() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest2.test34");


    org.jsecurity.codec.CodecException var2 = new org.jsecurity.codec.CodecException("dd\uFFFD");
    org.jsecurity.authc.ConcurrentAccessException var3 = new org.jsecurity.authc.ConcurrentAccessException("org.jsecurity.authz.UnauthorizedException: org.jsecurity.session.ExpiredSessionException: ", (java.lang.Throwable)var2);
    org.jsecurity.subject.SimplePrincipalCollection var5 = new org.jsecurity.subject.SimplePrincipalCollection((java.lang.Object)var2, "");
    boolean var6 = var5.isEmpty();
    java.util.List var7 = var5.asList();
    org.jsecurity.authc.pam.ModularRealmAuthenticator var8 = new org.jsecurity.authc.pam.ModularRealmAuthenticator(var7);
    org.jsecurity.cache.HashtableCache var10 = new org.jsecurity.cache.HashtableCache("5dd0c65d-1422-49c2-becb-9e8dca619ab3");
    org.jsecurity.realm.text.TextConfigurationRealm var11 = new org.jsecurity.realm.text.TextConfigurationRealm();
    java.io.InputStream var13 = org.jsecurity.util.ClassUtils.getResourceAsStream("");
    java.lang.Object[] var14 = new java.lang.Object[] { var13};
    java.util.List var15 = org.jsecurity.util.CollectionUtils.asList(var14);
    org.jsecurity.authc.pam.ModularRealmAuthenticator var16 = new org.jsecurity.authc.pam.ModularRealmAuthenticator(var15);
    org.jsecurity.subject.SimplePrincipalCollection var18 = new org.jsecurity.subject.SimplePrincipalCollection((java.util.Collection)var15, "org.jsecurity.authz.UnauthorizedException: org.jsecurity.session.ExpiredSessionException: ");
    org.jsecurity.session.UnknownSessionException var23 = new org.jsecurity.session.UnknownSessionException("dd\uFFFD", (java.io.Serializable)100.0f);
    org.jsecurity.session.SessionException var25 = new org.jsecurity.session.SessionException("dd\uFFFD", (java.lang.Throwable)var23, (java.io.Serializable)0);
    org.jsecurity.session.SessionException var26 = new org.jsecurity.session.SessionException("dd\uFFFD", (java.lang.Throwable)var23);
    var18.add((java.lang.Object)var26, "org.jsecurity.config.ConfigurationException: dd\uFFFD");
    var11.onLogout((org.jsecurity.subject.PrincipalCollection)var18);
    org.jsecurity.cache.HashtableCacheManager var30 = new org.jsecurity.cache.HashtableCacheManager();
    org.jsecurity.cache.Cache var32 = var30.getCache("\u0000\u0000");
    var11.setAuthorizationCache(var32);
    org.jsecurity.authc.DisabledAccountException var36 = new org.jsecurity.authc.DisabledAccountException("org.jsecurity.authz.UnauthorizedException: org.jsecurity.session.ExpiredSessionException: ");
    org.jsecurity.session.UnknownSessionException var42 = new org.jsecurity.session.UnknownSessionException("dd\uFFFD", (java.io.Serializable)100.0f);
    org.jsecurity.subject.SubjectException var43 = new org.jsecurity.subject.SubjectException("dd\uFFFD", (java.lang.Throwable)var42);
    org.jsecurity.session.InvalidSessionException var44 = new org.jsecurity.session.InvalidSessionException("hi!", (java.lang.Throwable)var43);
    org.jsecurity.session.SessionException var45 = new org.jsecurity.session.SessionException("dd\uFFFD", (java.lang.Throwable)var43);
    org.jsecurity.session.SessionException var46 = new org.jsecurity.session.SessionException("hi!", (java.lang.Throwable)var36, (java.io.Serializable)var43);
    var10.put((java.lang.Object)var11, (java.lang.Object)var46);
    var8.setRealm((org.jsecurity.realm.Realm)var11);
    boolean var50 = var11.accountExists("org.jsecurity.realm.text.TextConfigurationRealm_445");
    var11.addAccount("7f459141-420b-4ce9-8486-8c578b9f7c7e", "org.jsecurity.realm.text.PropertiesRealm_1154");
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var6 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var7);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var13);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var14);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var15);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var32);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var50 == false);

  }

  public void test35() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest2.test35");


    org.jsecurity.authz.UnauthorizedException var2 = new org.jsecurity.authz.UnauthorizedException();
    org.jsecurity.session.SessionException var4 = new org.jsecurity.session.SessionException("", (java.lang.Throwable)var2, (java.io.Serializable)"org.jsecurity.config.ConfigurationException: dd\uFFFD");
    org.jsecurity.session.ExpiredSessionException var5 = new org.jsecurity.session.ExpiredSessionException("", (java.io.Serializable)"");
    org.jsecurity.authz.UnauthorizedException var6 = new org.jsecurity.authz.UnauthorizedException((java.lang.Throwable)var5);
    org.jsecurity.authz.AuthorizationException var7 = new org.jsecurity.authz.AuthorizationException((java.lang.Throwable)var5);
    org.jsecurity.authc.ConcurrentAccessException var8 = new org.jsecurity.authc.ConcurrentAccessException((java.lang.Throwable)var7);
    org.jsecurity.subject.InvalidSubjectException var9 = new org.jsecurity.subject.InvalidSubjectException((java.lang.Throwable)var8);
    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      org.jsecurity.crypto.hash.Sha256Hash var10 = new org.jsecurity.crypto.hash.Sha256Hash((java.lang.Object)var9);
      fail("Expected exception of type org.jsecurity.codec.CodecException");
    } catch (org.jsecurity.codec.CodecException e) {
      // Expected exception.
    }

  }

  public void test36() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest2.test36");


    org.jsecurity.realm.jdbc.JdbcRealm var0 = new org.jsecurity.realm.jdbc.JdbcRealm();
    var0.setPermissionsQuery("org.jsecurity.authz.UnauthorizedException: org.jsecurity.session.ExpiredSessionException: ");
    var0.setUserRolesQuery("3bf7038a-5bf9-4f69-b89b-6ea74272a097");

  }

  public void test37() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest2.test37");


    org.jsecurity.codec.CodecException var2 = new org.jsecurity.codec.CodecException("dd\uFFFD");
    org.jsecurity.authc.ConcurrentAccessException var3 = new org.jsecurity.authc.ConcurrentAccessException("org.jsecurity.authz.UnauthorizedException: org.jsecurity.session.ExpiredSessionException: ", (java.lang.Throwable)var2);
    org.jsecurity.subject.SimplePrincipalCollection var5 = new org.jsecurity.subject.SimplePrincipalCollection((java.lang.Object)var2, "");
    org.jsecurity.authc.pam.FirstSuccessfulAuthenticationStrategy var6 = new org.jsecurity.authc.pam.FirstSuccessfulAuthenticationStrategy();
    org.jsecurity.authz.UnauthorizedException var8 = new org.jsecurity.authz.UnauthorizedException("org.jsecurity.config.ConfigurationException: dd\uFFFD");
    java.lang.Throwable[] var9 = var8.getSuppressed();
    java.util.List var10 = org.jsecurity.util.CollectionUtils.asList((java.lang.Object[])var9);
    org.jsecurity.authc.UsernamePasswordToken var11 = new org.jsecurity.authc.UsernamePasswordToken();
    java.lang.String var12 = var11.getUsername();
    java.net.InetAddress var13 = var11.getInetAddress();
    org.jsecurity.authc.AuthenticationInfo var14 = var6.beforeAllAttempts((java.util.Collection)var10, (org.jsecurity.authc.AuthenticationToken)var11);
    org.jsecurity.session.UnknownSessionException var19 = new org.jsecurity.session.UnknownSessionException("dd\uFFFD", (java.io.Serializable)100.0f);
    org.jsecurity.subject.SubjectException var20 = new org.jsecurity.subject.SubjectException("dd\uFFFD", (java.lang.Throwable)var19);
    org.jsecurity.io.SerializationException var21 = new org.jsecurity.io.SerializationException("", (java.lang.Throwable)var20);
    java.lang.Throwable[] var22 = var20.getSuppressed();
    java.util.Set var23 = org.jsecurity.util.CollectionUtils.asSet((java.lang.Object[])var22);
    org.jsecurity.authc.SimpleAccount var24 = new org.jsecurity.authc.SimpleAccount((org.jsecurity.subject.PrincipalCollection)var5, (java.lang.Object)var10, var23);
    java.io.InputStream var26 = org.jsecurity.util.ClassUtils.getResourceAsStream("");
    java.lang.Object[] var27 = new java.lang.Object[] { var26};
    java.util.List var28 = org.jsecurity.util.CollectionUtils.asList(var27);
    org.jsecurity.authc.pam.ModularRealmAuthenticator var29 = new org.jsecurity.authc.pam.ModularRealmAuthenticator(var28);
    org.jsecurity.subject.SimplePrincipalCollection var31 = new org.jsecurity.subject.SimplePrincipalCollection((java.util.Collection)var28, "org.jsecurity.authz.UnauthorizedException: org.jsecurity.session.ExpiredSessionException: ");
    org.jsecurity.io.ResourceException var35 = new org.jsecurity.io.ResourceException("hi!");
    org.jsecurity.authc.UnknownAccountException var36 = new org.jsecurity.authc.UnknownAccountException((java.lang.Throwable)var35);
    org.jsecurity.session.StoppedSessionException var37 = new org.jsecurity.session.StoppedSessionException("dd\uFFFD", (java.io.Serializable)var35);
    org.jsecurity.session.UnknownSessionException var38 = new org.jsecurity.session.UnknownSessionException("org.jsecurity.authz.UnauthorizedException: org.jsecurity.session.ExpiredSessionException: ", (java.lang.Throwable)var35);
    boolean var39 = var31.equals((java.lang.Object)var35);
    var5.addAll((org.jsecurity.subject.PrincipalCollection)var31);
    java.util.List var41 = var31.asList();
    org.jsecurity.authz.ModularRealmAuthorizer var42 = new org.jsecurity.authz.ModularRealmAuthorizer((java.util.Collection)var41);
    java.io.InputStream var44 = org.jsecurity.util.ClassUtils.getResourceAsStream("");
    java.lang.Object[] var45 = new java.lang.Object[] { var44};
    java.util.List var46 = org.jsecurity.util.CollectionUtils.asList(var45);
    org.jsecurity.authc.pam.ModularRealmAuthenticator var47 = new org.jsecurity.authc.pam.ModularRealmAuthenticator(var46);
    org.jsecurity.subject.SimplePrincipalCollection var49 = new org.jsecurity.subject.SimplePrincipalCollection((java.util.Collection)var46, "org.jsecurity.authz.UnauthorizedException: org.jsecurity.session.ExpiredSessionException: ");
    java.util.List var50 = var49.asList();
    org.jsecurity.codec.CodecException var53 = new org.jsecurity.codec.CodecException("dd\uFFFD");
    org.jsecurity.authc.ConcurrentAccessException var54 = new org.jsecurity.authc.ConcurrentAccessException("org.jsecurity.authz.UnauthorizedException: org.jsecurity.session.ExpiredSessionException: ", (java.lang.Throwable)var53);
    org.jsecurity.subject.SimplePrincipalCollection var56 = new org.jsecurity.subject.SimplePrincipalCollection((java.lang.Object)var53, "");
    org.jsecurity.authc.pam.FirstSuccessfulAuthenticationStrategy var57 = new org.jsecurity.authc.pam.FirstSuccessfulAuthenticationStrategy();
    org.jsecurity.authz.UnauthorizedException var59 = new org.jsecurity.authz.UnauthorizedException("org.jsecurity.config.ConfigurationException: dd\uFFFD");
    java.lang.Throwable[] var60 = var59.getSuppressed();
    java.util.List var61 = org.jsecurity.util.CollectionUtils.asList((java.lang.Object[])var60);
    org.jsecurity.authc.UsernamePasswordToken var62 = new org.jsecurity.authc.UsernamePasswordToken();
    java.lang.String var63 = var62.getUsername();
    java.net.InetAddress var64 = var62.getInetAddress();
    org.jsecurity.authc.AuthenticationInfo var65 = var57.beforeAllAttempts((java.util.Collection)var61, (org.jsecurity.authc.AuthenticationToken)var62);
    org.jsecurity.session.UnknownSessionException var70 = new org.jsecurity.session.UnknownSessionException("dd\uFFFD", (java.io.Serializable)100.0f);
    org.jsecurity.subject.SubjectException var71 = new org.jsecurity.subject.SubjectException("dd\uFFFD", (java.lang.Throwable)var70);
    org.jsecurity.io.SerializationException var72 = new org.jsecurity.io.SerializationException("", (java.lang.Throwable)var71);
    java.lang.Throwable[] var73 = var71.getSuppressed();
    java.util.Set var74 = org.jsecurity.util.CollectionUtils.asSet((java.lang.Object[])var73);
    org.jsecurity.authc.SimpleAccount var75 = new org.jsecurity.authc.SimpleAccount((org.jsecurity.subject.PrincipalCollection)var56, (java.lang.Object)var61, var74);
    boolean[] var76 = var42.hasRoles((org.jsecurity.subject.PrincipalCollection)var49, var61);
    java.io.InputStream var78 = org.jsecurity.util.ClassUtils.getResourceAsStream("");
    java.lang.Object[] var79 = new java.lang.Object[] { var78};
    java.util.List var80 = org.jsecurity.util.CollectionUtils.asList(var79);
    org.jsecurity.authc.pam.ModularRealmAuthenticator var81 = new org.jsecurity.authc.pam.ModularRealmAuthenticator(var80);
    org.jsecurity.subject.SimplePrincipalCollection var83 = new org.jsecurity.subject.SimplePrincipalCollection((java.util.Collection)var80, "org.jsecurity.authz.UnauthorizedException: org.jsecurity.session.ExpiredSessionException: ");
    org.jsecurity.session.UnknownSessionException var88 = new org.jsecurity.session.UnknownSessionException("dd\uFFFD", (java.io.Serializable)100.0f);
    org.jsecurity.session.SessionException var90 = new org.jsecurity.session.SessionException("dd\uFFFD", (java.lang.Throwable)var88, (java.io.Serializable)0);
    org.jsecurity.session.SessionException var91 = new org.jsecurity.session.SessionException("dd\uFFFD", (java.lang.Throwable)var88);
    var83.add((java.lang.Object)var91, "org.jsecurity.config.ConfigurationException: dd\uFFFD");
    var83.clear();
    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      var42.checkRole((org.jsecurity.subject.PrincipalCollection)var83, "hi!");
      fail("Expected exception of type java.lang.ClassCastException");
    } catch (java.lang.ClassCastException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var9);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var10);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var12);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var13);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var14);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var22);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var23);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var26);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var27);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var28);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var39 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var41);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var44);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var45);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var46);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var50);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var60);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var61);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var63);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var64);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var65);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var73);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var74);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var76);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var78);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var79);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var80);

  }

  public void test38() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest2.test38");


    org.jsecurity.crypto.BlowfishCipher var0 = new org.jsecurity.crypto.BlowfishCipher();
    java.security.Key var1 = org.jsecurity.crypto.BlowfishCipher.generateNewKey();
    var0.setKey(var1);
    java.security.Key var3 = org.jsecurity.crypto.BlowfishCipher.generateNewKey();
    var0.setKey(var3);
    byte[] var8 = new byte[] { (byte)100, (byte)100, (byte)(-1)};
    java.lang.String var9 = org.jsecurity.codec.CodecSupport.toString(var8);
    char[] var10 = org.jsecurity.codec.CodecSupport.toChars(var8);
    boolean var11 = org.jsecurity.codec.Base64.isBase64(var8);
    boolean var12 = org.jsecurity.codec.Base64.isBase64(var8);
    boolean var13 = org.jsecurity.codec.Base64.isBase64(var8);
    java.lang.String var14 = org.jsecurity.codec.Hex.encodeToString(var8);
    byte[] var18 = new byte[] { (byte)100, (byte)100, (byte)(-1)};
    java.lang.String var19 = org.jsecurity.codec.CodecSupport.toString(var18);
    char[] var20 = org.jsecurity.codec.CodecSupport.toChars(var18);
    boolean var21 = org.jsecurity.codec.Base64.isBase64(var18);
    boolean var22 = org.jsecurity.codec.Base64.isBase64(var18);
    boolean var23 = org.jsecurity.codec.Base64.isBase64(var18);
    java.lang.String var24 = org.jsecurity.codec.Base64.encodeToString(var18);
    byte[] var25 = var0.encrypt(var8, var18);
    org.jsecurity.io.DefaultSerializer var26 = new org.jsecurity.io.DefaultSerializer();
    org.jsecurity.authz.SimpleRole var27 = new org.jsecurity.authz.SimpleRole();
    byte[] var28 = var26.serialize((java.lang.Object)var27);
    byte[] var32 = new byte[] { (byte)100, (byte)100, (byte)(-1)};
    java.lang.String var33 = org.jsecurity.codec.CodecSupport.toString(var32);
    char[] var34 = org.jsecurity.codec.CodecSupport.toChars(var32);
    boolean var35 = org.jsecurity.codec.Base64.isBase64(var32);
    boolean var36 = org.jsecurity.codec.Base64.isBase64(var32);
    boolean var37 = org.jsecurity.codec.Base64.isBase64(var32);
    byte[] var38 = var0.encrypt(var28, var32);
    char[] var40 = new char[] { };
    org.jsecurity.authc.UsernamePasswordToken var42 = new org.jsecurity.authc.UsernamePasswordToken("hi!", var40, true);
    byte[] var43 = org.jsecurity.codec.Hex.decode(var40);
    byte[] var44 = org.jsecurity.codec.Hex.decode(var40);
    byte[] var45 = org.jsecurity.codec.Base64.encode(var44);
    org.jsecurity.crypto.hash.Sha512Hash var47 = org.jsecurity.crypto.hash.Sha512Hash.fromBase64String("org.jsecurity.config.ConfigurationException: dd\uFFFD");
    byte[] var48 = var47.getBytes();
    java.lang.String var49 = org.jsecurity.codec.Base64.decodeToString(var48);
    byte[] var50 = org.jsecurity.codec.Base64.encodeChunked(var48);
    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      byte[] var51 = var0.decrypt(var44, var50);
      fail("Expected exception of type java.lang.IllegalStateException");
    } catch (java.lang.IllegalStateException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var1);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var3);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var8);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var9 + "' != '" + "dd\uFFFD"+ "'", var9.equals("dd\uFFFD"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var10);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var11 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var12 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var13 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var14 + "' != '" + "6464ff"+ "'", var14.equals("6464ff"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var18);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var19 + "' != '" + "dd\uFFFD"+ "'", var19.equals("dd\uFFFD"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var20);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var21 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var22 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var23 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var24 + "' != '" + "ZGT/"+ "'", var24.equals("ZGT/"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var25);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var28);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var32);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var33 + "' != '" + "dd\uFFFD"+ "'", var33.equals("dd\uFFFD"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var34);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var35 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var36 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var37 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var38);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var40);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var43);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var44);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var45);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var47);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var48);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var49 + "' != '" + "\u0000\u0000\u0000"+ "'", var49.equals("\u0000\u0000\u0000"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var50);

  }

  public void test39() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest2.test39");


    java.util.Set var1 = org.jsecurity.util.PermissionUtils.toPermissionStrings("org.jsecurity.config.ConfigurationException: dd\uFFFD");
    org.jsecurity.authz.SimpleAuthorizationInfo var2 = new org.jsecurity.authz.SimpleAuthorizationInfo(var1);
    var2.addStringPermission("b725e8cc-690c-495e-ac27-b1b425834793");
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var1);

  }

  public void test40() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest2.test40");


    org.jsecurity.cache.HashtableCache var1 = new org.jsecurity.cache.HashtableCache("\u0000\u0000\u0000");
    org.jsecurity.session.mgt.SimpleSession var2 = new org.jsecurity.session.mgt.SimpleSession();
    var2.touch();
    org.jsecurity.authz.UnauthenticatedException var6 = new org.jsecurity.authz.UnauthenticatedException();
    org.jsecurity.config.UnresolveableReferenceException var7 = new org.jsecurity.config.UnresolveableReferenceException("", (java.lang.Throwable)var6);
    org.jsecurity.cache.CacheException var8 = new org.jsecurity.cache.CacheException("org.jsecurity.config.ConfigurationException: dd\uFFFD", (java.lang.Throwable)var6);
    java.lang.Object var9 = var2.removeAttribute((java.lang.Object)var8);
    org.jsecurity.mgt.DefaultSecurityManager var10 = new org.jsecurity.mgt.DefaultSecurityManager();
    org.jsecurity.authc.pam.AllSuccessfulModularAuthenticationStrategy var11 = new org.jsecurity.authc.pam.AllSuccessfulModularAuthenticationStrategy();
    org.jsecurity.authc.pam.AllSuccessfulModularAuthenticationStrategy var12 = new org.jsecurity.authc.pam.AllSuccessfulModularAuthenticationStrategy();
    char[] var14 = new char[] { };
    org.jsecurity.authc.UsernamePasswordToken var16 = new org.jsecurity.authc.UsernamePasswordToken("hi!", var14, true);
    org.jsecurity.authc.SimpleAccount var17 = new org.jsecurity.authc.SimpleAccount();
    var17.setCredentialsExpired(false);
    boolean var20 = var17.isLocked();
    org.jsecurity.authc.AuthenticationInfo var21 = var12.afterAllAttempts((org.jsecurity.authc.AuthenticationToken)var16, (org.jsecurity.authc.AuthenticationInfo)var17);
    char[] var25 = new char[] { '4', '#'};
    org.jsecurity.authc.UsernamePasswordToken var26 = new org.jsecurity.authc.UsernamePasswordToken("\u0000\u0000", var25);
    org.jsecurity.authc.SimpleAccount var27 = new org.jsecurity.authc.SimpleAccount();
    var27.setCredentialsExpired(false);
    var27.setCredentialsExpired(false);
    boolean var32 = var27.isCredentialsExpired();
    org.jsecurity.authc.AuthenticationInfo var33 = var12.afterAllAttempts((org.jsecurity.authc.AuthenticationToken)var26, (org.jsecurity.authc.AuthenticationInfo)var27);
    org.jsecurity.authz.UnauthenticatedException var37 = new org.jsecurity.authz.UnauthenticatedException();
    org.jsecurity.config.UnresolveableReferenceException var38 = new org.jsecurity.config.UnresolveableReferenceException("", (java.lang.Throwable)var37);
    org.jsecurity.cache.CacheException var39 = new org.jsecurity.cache.CacheException("org.jsecurity.config.ConfigurationException: dd\uFFFD", (java.lang.Throwable)var37);
    org.jsecurity.authc.SimpleAuthenticationInfo var41 = new org.jsecurity.authc.SimpleAuthenticationInfo((java.lang.Object)"org.jsecurity.config.ConfigurationException: dd\uFFFD", (java.lang.Object)var39, "a2b823b1e72eae2b727289df8a00a89df8a0bab6ad8a89c4c5c7a9b62a270000");
    org.jsecurity.subject.PrincipalCollection var42 = var41.getPrincipals();
    org.jsecurity.authc.AuthenticationInfo var43 = var11.afterAllAttempts((org.jsecurity.authc.AuthenticationToken)var26, (org.jsecurity.authc.AuthenticationInfo)var41);
    var10.setModularAuthenticationStrategy((org.jsecurity.authc.pam.ModularAuthenticationStrategy)var11);
    org.jsecurity.subject.RememberMeManager var45 = var10.getRememberMeManager();
    org.jsecurity.authc.pam.ModularRealmAuthenticator var46 = new org.jsecurity.authc.pam.ModularRealmAuthenticator();
    var10.setAuthenticator((org.jsecurity.authc.Authenticator)var46);
    var1.put((java.lang.Object)var2, (java.lang.Object)var46);
    java.lang.String var49 = var1.toString();
    org.jsecurity.mgt.DefaultSecurityManager var50 = new org.jsecurity.mgt.DefaultSecurityManager();
    org.jsecurity.authz.permission.WildcardPermissionResolver var51 = new org.jsecurity.authz.permission.WildcardPermissionResolver();
    var50.setPermissionResolver((org.jsecurity.authz.permission.PermissionResolver)var51);
    org.jsecurity.cache.CacheManager var53 = var50.getCacheManager();
    org.jsecurity.authc.Authenticator var54 = var50.getAuthenticator();
    var1.remove((java.lang.Object)var50);
    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      org.jsecurity.crypto.hash.Md2Hash var56 = new org.jsecurity.crypto.hash.Md2Hash((java.lang.Object)var50);
      fail("Expected exception of type org.jsecurity.codec.CodecException");
    } catch (org.jsecurity.codec.CodecException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var9);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var14);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var20 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var21);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var25);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var32 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var33);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var42);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var43);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var45);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var49 + "' != '" + "HashtableCache [\u0000\u0000\u0000]"+ "'", var49.equals("HashtableCache [\u0000\u0000\u0000]"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var53);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var54);

  }

  public void test41() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest2.test41");


    org.jsecurity.authc.DisabledAccountException var2 = new org.jsecurity.authc.DisabledAccountException("hi!");
    org.jsecurity.session.InvalidSessionException var3 = new org.jsecurity.session.InvalidSessionException("\uFFFD\uFFFD#\uFFFD\uFFFD.\uFFFD+r\uFFFD\u6959(\uFFFD\uFFFDW\uFFFDq\uFFFD.\uFFFD\uFFFD^jY\uFFFDj\uFFFDa\uFFFD\uFFFD\uFFFDj\u0628\u0000", (java.io.Serializable)"hi!");

  }

  public void test42() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest2.test42");


    org.jsecurity.mgt.DefaultSecurityManager var0 = new org.jsecurity.mgt.DefaultSecurityManager();
    java.io.InputStream var2 = org.jsecurity.util.ClassUtils.getResourceAsStream("");
    java.lang.Object[] var3 = new java.lang.Object[] { var2};
    java.util.List var4 = org.jsecurity.util.CollectionUtils.asList(var3);
    org.jsecurity.authc.pam.ModularRealmAuthenticator var5 = new org.jsecurity.authc.pam.ModularRealmAuthenticator(var4);
    org.jsecurity.authc.pam.AllSuccessfulModularAuthenticationStrategy var6 = new org.jsecurity.authc.pam.AllSuccessfulModularAuthenticationStrategy();
    var5.setModularAuthenticationStrategy((org.jsecurity.authc.pam.ModularAuthenticationStrategy)var6);
    org.jsecurity.authz.SimpleAuthorizationInfo var8 = new org.jsecurity.authz.SimpleAuthorizationInfo();
    var8.addStringPermission("hi!");
    java.io.InputStream var12 = org.jsecurity.util.ClassUtils.getResourceAsStream("");
    java.lang.Object[] var13 = new java.lang.Object[] { var12};
    java.util.List var14 = org.jsecurity.util.CollectionUtils.asList(var13);
    var8.addRoles((java.util.Collection)var14);
    var5.setAuthenticationListeners((java.util.Collection)var14);
    var0.setSessionListeners((java.util.Collection)var14);
    java.io.InputStream var19 = org.jsecurity.util.ClassUtils.getResourceAsStream("");
    java.lang.Object[] var20 = new java.lang.Object[] { var19};
    java.util.List var21 = org.jsecurity.util.CollectionUtils.asList(var20);
    org.jsecurity.authc.pam.ModularRealmAuthenticator var22 = new org.jsecurity.authc.pam.ModularRealmAuthenticator(var21);
    org.jsecurity.authc.pam.AllSuccessfulModularAuthenticationStrategy var23 = new org.jsecurity.authc.pam.AllSuccessfulModularAuthenticationStrategy();
    var22.setModularAuthenticationStrategy((org.jsecurity.authc.pam.ModularAuthenticationStrategy)var23);
    org.jsecurity.authz.SimpleAuthorizationInfo var25 = new org.jsecurity.authz.SimpleAuthorizationInfo();
    var25.addStringPermission("hi!");
    java.io.InputStream var29 = org.jsecurity.util.ClassUtils.getResourceAsStream("");
    java.lang.Object[] var30 = new java.lang.Object[] { var29};
    java.util.List var31 = org.jsecurity.util.CollectionUtils.asList(var30);
    var25.addRoles((java.util.Collection)var31);
    var22.setAuthenticationListeners((java.util.Collection)var31);
    org.jsecurity.realm.activedirectory.ActiveDirectoryRealm var34 = new org.jsecurity.realm.activedirectory.ActiveDirectoryRealm();
    var34.setPrincipalSuffix("");
    var22.setRealm((org.jsecurity.realm.Realm)var34);
    org.jsecurity.cache.HashtableCacheManager var38 = new org.jsecurity.cache.HashtableCacheManager();
    org.jsecurity.cache.Cache var40 = var38.getCache("\u0000\u0000");
    var34.setAuthorizationCache(var40);
    var0.setRealm((org.jsecurity.realm.Realm)var34);
    org.jsecurity.subject.RememberMeManager var43 = var0.getRememberMeManager();
    java.io.InputStream var45 = org.jsecurity.util.ClassUtils.getResourceAsStream("");
    java.lang.Object[] var46 = new java.lang.Object[] { var45};
    java.util.List var47 = org.jsecurity.util.CollectionUtils.asList(var46);
    org.jsecurity.authc.pam.ModularRealmAuthenticator var48 = new org.jsecurity.authc.pam.ModularRealmAuthenticator(var47);
    org.jsecurity.authc.pam.FirstSuccessfulAuthenticationStrategy var49 = new org.jsecurity.authc.pam.FirstSuccessfulAuthenticationStrategy();
    org.jsecurity.authz.UnauthorizedException var51 = new org.jsecurity.authz.UnauthorizedException("org.jsecurity.config.ConfigurationException: dd\uFFFD");
    java.lang.Throwable[] var52 = var51.getSuppressed();
    java.util.List var53 = org.jsecurity.util.CollectionUtils.asList((java.lang.Object[])var52);
    org.jsecurity.authc.UsernamePasswordToken var54 = new org.jsecurity.authc.UsernamePasswordToken();
    java.lang.String var55 = var54.getUsername();
    java.net.InetAddress var56 = var54.getInetAddress();
    org.jsecurity.authc.AuthenticationInfo var57 = var49.beforeAllAttempts((java.util.Collection)var53, (org.jsecurity.authc.AuthenticationToken)var54);
    org.jsecurity.realm.SimpleAccountRealm var59 = new org.jsecurity.realm.SimpleAccountRealm("hi!");
    java.lang.Class var60 = var59.getAuthenticationTokenClass();
    java.util.Collection var61 = org.jsecurity.util.CollectionUtils.emptyCollection(var60);
    org.jsecurity.authc.pam.AllSuccessfulModularAuthenticationStrategy var62 = new org.jsecurity.authc.pam.AllSuccessfulModularAuthenticationStrategy();
    char[] var64 = new char[] { };
    org.jsecurity.authc.UsernamePasswordToken var66 = new org.jsecurity.authc.UsernamePasswordToken("hi!", var64, true);
    org.jsecurity.authc.SimpleAccount var67 = new org.jsecurity.authc.SimpleAccount();
    var67.setCredentialsExpired(false);
    boolean var70 = var67.isLocked();
    org.jsecurity.authc.AuthenticationInfo var71 = var62.afterAllAttempts((org.jsecurity.authc.AuthenticationToken)var66, (org.jsecurity.authc.AuthenticationInfo)var67);
    org.jsecurity.authc.AuthenticationInfo var72 = var49.beforeAllAttempts(var61, (org.jsecurity.authc.AuthenticationToken)var66);
    var48.setModularAuthenticationStrategy((org.jsecurity.authc.pam.ModularAuthenticationStrategy)var49);
    var0.setModularAuthenticationStrategy((org.jsecurity.authc.pam.ModularAuthenticationStrategy)var49);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var2);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var3);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var4);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var12);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var13);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var14);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var19);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var20);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var21);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var29);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var30);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var31);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var40);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var43);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var45);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var46);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var47);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var52);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var53);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var55);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var56);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var57);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var60);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var61);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var64);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var70 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var71);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var72);

  }

  public void test43() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest2.test43");


    org.jsecurity.session.UnknownSessionException var5 = new org.jsecurity.session.UnknownSessionException("dd\uFFFD", (java.io.Serializable)100.0f);
    org.jsecurity.subject.SubjectException var6 = new org.jsecurity.subject.SubjectException("dd\uFFFD", (java.lang.Throwable)var5);
    org.jsecurity.io.SerializationException var7 = new org.jsecurity.io.SerializationException("", (java.lang.Throwable)var6);
    org.jsecurity.session.InvalidSessionException var8 = new org.jsecurity.session.InvalidSessionException("dd\uFFFD", (java.lang.Throwable)var6);
    org.jsecurity.authz.permission.InvalidPermissionStringException var11 = new org.jsecurity.authz.permission.InvalidPermissionStringException("hi!", "dd\uFFFD");
    org.jsecurity.crypto.hash.Sha384Hash var12 = new org.jsecurity.crypto.hash.Sha384Hash((java.lang.Object)"dd\uFFFD", (java.lang.Object)"hi!");
    java.lang.String var13 = var12.toBase64();
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var13 + "' != '" + "QzXpDZSfjjJUpGJc6nnkGQp4loZSAnOxZJSu5IzgpmrfcDFf8bzV/5XmrcPMyQXV"+ "'", var13.equals("QzXpDZSfjjJUpGJc6nnkGQp4loZSAnOxZJSu5IzgpmrfcDFf8bzV/5XmrcPMyQXV"));

  }

  public void test44() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest2.test44");


    org.jsecurity.mgt.DefaultSecurityManager var0 = new org.jsecurity.mgt.DefaultSecurityManager();
    java.io.InputStream var2 = org.jsecurity.util.ClassUtils.getResourceAsStream("");
    java.lang.Object[] var3 = new java.lang.Object[] { var2};
    java.util.List var4 = org.jsecurity.util.CollectionUtils.asList(var3);
    org.jsecurity.authc.pam.ModularRealmAuthenticator var5 = new org.jsecurity.authc.pam.ModularRealmAuthenticator(var4);
    org.jsecurity.authc.pam.AllSuccessfulModularAuthenticationStrategy var6 = new org.jsecurity.authc.pam.AllSuccessfulModularAuthenticationStrategy();
    var5.setModularAuthenticationStrategy((org.jsecurity.authc.pam.ModularAuthenticationStrategy)var6);
    org.jsecurity.authz.SimpleAuthorizationInfo var8 = new org.jsecurity.authz.SimpleAuthorizationInfo();
    var8.addStringPermission("hi!");
    java.io.InputStream var12 = org.jsecurity.util.ClassUtils.getResourceAsStream("");
    java.lang.Object[] var13 = new java.lang.Object[] { var12};
    java.util.List var14 = org.jsecurity.util.CollectionUtils.asList(var13);
    var8.addRoles((java.util.Collection)var14);
    var5.setAuthenticationListeners((java.util.Collection)var14);
    var0.setSessionListeners((java.util.Collection)var14);
    org.jsecurity.authc.pam.ModularRealmAuthenticator var18 = new org.jsecurity.authc.pam.ModularRealmAuthenticator();
    org.jsecurity.authz.permission.InvalidPermissionStringException var21 = new org.jsecurity.authz.permission.InvalidPermissionStringException("", "dd\uFFFD");
    org.jsecurity.JSecurityException var23 = new org.jsecurity.JSecurityException("");
    org.jsecurity.authc.SimpleAuthenticationInfo var25 = new org.jsecurity.authc.SimpleAuthenticationInfo((java.lang.Object)var21, (java.lang.Object)"", "org.jsecurity.authz.UnauthorizedException: org.jsecurity.session.ExpiredSessionException: ");
    org.jsecurity.subject.PrincipalCollection var26 = var25.getPrincipals();
    var18.onLogout(var26);
    var0.setAuthenticator((org.jsecurity.authc.Authenticator)var18);
    org.jsecurity.codec.CodecException var31 = new org.jsecurity.codec.CodecException("dd\uFFFD");
    org.jsecurity.authc.ConcurrentAccessException var32 = new org.jsecurity.authc.ConcurrentAccessException("org.jsecurity.authz.UnauthorizedException: org.jsecurity.session.ExpiredSessionException: ", (java.lang.Throwable)var31);
    org.jsecurity.subject.SimplePrincipalCollection var34 = new org.jsecurity.subject.SimplePrincipalCollection((java.lang.Object)var31, "");
    org.jsecurity.authc.pam.FirstSuccessfulAuthenticationStrategy var35 = new org.jsecurity.authc.pam.FirstSuccessfulAuthenticationStrategy();
    org.jsecurity.authz.UnauthorizedException var37 = new org.jsecurity.authz.UnauthorizedException("org.jsecurity.config.ConfigurationException: dd\uFFFD");
    java.lang.Throwable[] var38 = var37.getSuppressed();
    java.util.List var39 = org.jsecurity.util.CollectionUtils.asList((java.lang.Object[])var38);
    org.jsecurity.authc.UsernamePasswordToken var40 = new org.jsecurity.authc.UsernamePasswordToken();
    java.lang.String var41 = var40.getUsername();
    java.net.InetAddress var42 = var40.getInetAddress();
    org.jsecurity.authc.AuthenticationInfo var43 = var35.beforeAllAttempts((java.util.Collection)var39, (org.jsecurity.authc.AuthenticationToken)var40);
    org.jsecurity.session.UnknownSessionException var48 = new org.jsecurity.session.UnknownSessionException("dd\uFFFD", (java.io.Serializable)100.0f);
    org.jsecurity.subject.SubjectException var49 = new org.jsecurity.subject.SubjectException("dd\uFFFD", (java.lang.Throwable)var48);
    org.jsecurity.io.SerializationException var50 = new org.jsecurity.io.SerializationException("", (java.lang.Throwable)var49);
    java.lang.Throwable[] var51 = var49.getSuppressed();
    java.util.Set var52 = org.jsecurity.util.CollectionUtils.asSet((java.lang.Object[])var51);
    org.jsecurity.authc.SimpleAccount var53 = new org.jsecurity.authc.SimpleAccount((org.jsecurity.subject.PrincipalCollection)var34, (java.lang.Object)var39, var52);
    java.io.InputStream var55 = org.jsecurity.util.ClassUtils.getResourceAsStream("");
    java.lang.Object[] var56 = new java.lang.Object[] { var55};
    java.util.List var57 = org.jsecurity.util.CollectionUtils.asList(var56);
    org.jsecurity.authc.pam.ModularRealmAuthenticator var58 = new org.jsecurity.authc.pam.ModularRealmAuthenticator(var57);
    org.jsecurity.subject.SimplePrincipalCollection var60 = new org.jsecurity.subject.SimplePrincipalCollection((java.util.Collection)var57, "org.jsecurity.authz.UnauthorizedException: org.jsecurity.session.ExpiredSessionException: ");
    org.jsecurity.io.ResourceException var64 = new org.jsecurity.io.ResourceException("hi!");
    org.jsecurity.authc.UnknownAccountException var65 = new org.jsecurity.authc.UnknownAccountException((java.lang.Throwable)var64);
    org.jsecurity.session.StoppedSessionException var66 = new org.jsecurity.session.StoppedSessionException("dd\uFFFD", (java.io.Serializable)var64);
    org.jsecurity.session.UnknownSessionException var67 = new org.jsecurity.session.UnknownSessionException("org.jsecurity.authz.UnauthorizedException: org.jsecurity.session.ExpiredSessionException: ", (java.lang.Throwable)var64);
    boolean var68 = var60.equals((java.lang.Object)var64);
    var34.addAll((org.jsecurity.subject.PrincipalCollection)var60);
    org.jsecurity.session.UnknownSessionException var74 = new org.jsecurity.session.UnknownSessionException("dd\uFFFD", (java.io.Serializable)100.0f);
    org.jsecurity.subject.SubjectException var75 = new org.jsecurity.subject.SubjectException("dd\uFFFD", (java.lang.Throwable)var74);
    org.jsecurity.io.SerializationException var76 = new org.jsecurity.io.SerializationException("", (java.lang.Throwable)var75);
    java.lang.Throwable[] var77 = var75.getSuppressed();
    java.util.List var78 = org.jsecurity.util.CollectionUtils.asList((java.lang.Object[])var77);
    boolean var79 = var0.isPermittedAll((org.jsecurity.subject.PrincipalCollection)var34, (java.util.Collection)var78);
    org.jsecurity.session.mgt.SessionManager var80 = var0.getSessionManager();
    org.jsecurity.subject.DelegatingSubject var81 = new org.jsecurity.subject.DelegatingSubject((org.jsecurity.mgt.SecurityManager)var0);
    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      var81.checkRole("QzXpDZSfjjJUpGJc6nnkGQp4loZSAnOxZJSu5IzgpmrfcDFf8bzV/5XmrcPMyQXV");
      fail("Expected exception of type org.jsecurity.authz.UnauthenticatedException");
    } catch (org.jsecurity.authz.UnauthenticatedException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var2);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var3);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var4);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var12);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var13);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var14);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var26);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var38);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var39);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var41);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var42);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var43);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var51);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var52);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var55);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var56);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var57);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var68 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var77);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var78);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var79 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var80);

  }

  public void test45() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest2.test45");


    org.jsecurity.realm.text.TextConfigurationRealm var0 = new org.jsecurity.realm.text.TextConfigurationRealm();
    java.io.InputStream var2 = org.jsecurity.util.ClassUtils.getResourceAsStream("");
    java.lang.Object[] var3 = new java.lang.Object[] { var2};
    java.util.List var4 = org.jsecurity.util.CollectionUtils.asList(var3);
    org.jsecurity.authc.pam.ModularRealmAuthenticator var5 = new org.jsecurity.authc.pam.ModularRealmAuthenticator(var4);
    org.jsecurity.subject.SimplePrincipalCollection var7 = new org.jsecurity.subject.SimplePrincipalCollection((java.util.Collection)var4, "org.jsecurity.authz.UnauthorizedException: org.jsecurity.session.ExpiredSessionException: ");
    org.jsecurity.session.UnknownSessionException var12 = new org.jsecurity.session.UnknownSessionException("dd\uFFFD", (java.io.Serializable)100.0f);
    org.jsecurity.session.SessionException var14 = new org.jsecurity.session.SessionException("dd\uFFFD", (java.lang.Throwable)var12, (java.io.Serializable)0);
    org.jsecurity.session.SessionException var15 = new org.jsecurity.session.SessionException("dd\uFFFD", (java.lang.Throwable)var12);
    var7.add((java.lang.Object)var15, "org.jsecurity.config.ConfigurationException: dd\uFFFD");
    var0.onLogout((org.jsecurity.subject.PrincipalCollection)var7);
    org.jsecurity.authc.ExpiredCredentialsException var20 = new org.jsecurity.authc.ExpiredCredentialsException();
    org.jsecurity.session.ExpiredSessionException var21 = new org.jsecurity.session.ExpiredSessionException("", (java.lang.Throwable)var20);
    java.lang.Throwable[] var22 = var21.getSuppressed();
    org.jsecurity.io.ResourceException var23 = new org.jsecurity.io.ResourceException((java.lang.Throwable)var21);
    org.jsecurity.authc.SimpleAuthenticationInfo var24 = new org.jsecurity.authc.SimpleAuthenticationInfo((org.jsecurity.subject.PrincipalCollection)var7, (java.lang.Object)var21);
    org.jsecurity.codec.CodecException var27 = new org.jsecurity.codec.CodecException("dd\uFFFD");
    org.jsecurity.authc.ConcurrentAccessException var28 = new org.jsecurity.authc.ConcurrentAccessException("org.jsecurity.authz.UnauthorizedException: org.jsecurity.session.ExpiredSessionException: ", (java.lang.Throwable)var27);
    org.jsecurity.subject.SimplePrincipalCollection var30 = new org.jsecurity.subject.SimplePrincipalCollection((java.lang.Object)var27, "");
    java.io.InputStream var32 = org.jsecurity.util.ClassUtils.getResourceAsStream("");
    java.lang.Object[] var33 = new java.lang.Object[] { var32};
    java.util.List var34 = org.jsecurity.util.CollectionUtils.asList(var33);
    org.jsecurity.authc.pam.ModularRealmAuthenticator var35 = new org.jsecurity.authc.pam.ModularRealmAuthenticator(var34);
    var30.addAll((java.util.Collection)var34, "\u0000\u0000");
    org.jsecurity.authz.UnauthorizedException var39 = new org.jsecurity.authz.UnauthorizedException();
    org.jsecurity.session.SessionException var41 = new org.jsecurity.session.SessionException("", (java.lang.Throwable)var39, (java.io.Serializable)"org.jsecurity.config.ConfigurationException: dd\uFFFD");
    org.jsecurity.crypto.hash.Sha1Hash var42 = new org.jsecurity.crypto.hash.Sha1Hash((java.lang.Object)"");
    org.jsecurity.session.UnknownSessionException var47 = new org.jsecurity.session.UnknownSessionException("dd\uFFFD", (java.io.Serializable)100.0f);
    org.jsecurity.subject.SubjectException var48 = new org.jsecurity.subject.SubjectException("dd\uFFFD", (java.lang.Throwable)var47);
    org.jsecurity.io.SerializationException var49 = new org.jsecurity.io.SerializationException("", (java.lang.Throwable)var48);
    java.lang.Throwable[] var50 = var48.getSuppressed();
    java.util.Set var51 = org.jsecurity.util.CollectionUtils.asSet((java.lang.Object[])var50);
    org.jsecurity.authz.SimpleAuthorizationInfo var53 = new org.jsecurity.authz.SimpleAuthorizationInfo();
    org.jsecurity.session.UnknownSessionException var58 = new org.jsecurity.session.UnknownSessionException("dd\uFFFD", (java.io.Serializable)100.0f);
    org.jsecurity.subject.SubjectException var59 = new org.jsecurity.subject.SubjectException("dd\uFFFD", (java.lang.Throwable)var58);
    org.jsecurity.io.SerializationException var60 = new org.jsecurity.io.SerializationException("", (java.lang.Throwable)var59);
    java.lang.Throwable[] var61 = var59.getSuppressed();
    java.util.Set var62 = org.jsecurity.util.CollectionUtils.asSet((java.lang.Object[])var61);
    var53.setStringPermissions(var62);
    java.util.Set var64 = var53.getRoles();
    org.jsecurity.authz.SimpleAuthorizationInfo var65 = new org.jsecurity.authz.SimpleAuthorizationInfo();
    var65.addRole("a2b823b1e72eae2b727289df8a00a89df8a0bab6ad8a89c4c5c7a9b62a270000");
    org.jsecurity.session.UnknownSessionException var72 = new org.jsecurity.session.UnknownSessionException("dd\uFFFD", (java.io.Serializable)100.0f);
    org.jsecurity.subject.SubjectException var73 = new org.jsecurity.subject.SubjectException("dd\uFFFD", (java.lang.Throwable)var72);
    org.jsecurity.io.SerializationException var74 = new org.jsecurity.io.SerializationException("", (java.lang.Throwable)var73);
    java.lang.Throwable[] var75 = var73.getSuppressed();
    java.util.Set var76 = org.jsecurity.util.CollectionUtils.asSet((java.lang.Object[])var75);
    var65.addRoles((java.util.Collection)var76);
    var53.setRoles(var76);
    org.jsecurity.authz.SimpleRole var79 = new org.jsecurity.authz.SimpleRole("org.jsecurity.authz.UnauthorizedException: org.jsecurity.session.ExpiredSessionException: ", var76);
    org.jsecurity.authc.SimpleAccount var80 = new org.jsecurity.authc.SimpleAccount((org.jsecurity.subject.PrincipalCollection)var30, (java.lang.Object)"", var51, var76);
    var24.setPrincipals((org.jsecurity.subject.PrincipalCollection)var30);
    java.lang.String var82 = var24.toString();
    java.lang.String var83 = var24.toString();
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var2);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var3);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var4);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var22);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var32);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var33);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var34);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var50);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var51);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var61);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var62);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var64);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var75);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var76);

  }

  public void test46() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest2.test46");


    org.jsecurity.session.mgt.eis.MemorySessionDAO var0 = new org.jsecurity.session.mgt.eis.MemorySessionDAO();
    org.jsecurity.cache.Cache var1 = var0.getActiveSessionsCache();
    org.jsecurity.cache.CacheManager var2 = var0.getCacheManager();
    org.jsecurity.cache.HashtableCacheManager var3 = new org.jsecurity.cache.HashtableCacheManager();
    org.jsecurity.cache.Cache var5 = var3.getCache("\u0000\u0000");
    var0.setActiveSessionsCache(var5);
    java.io.InputStream var8 = org.jsecurity.util.ClassUtils.getResourceAsStream("");
    java.lang.Object[] var9 = new java.lang.Object[] { var8};
    java.util.List var10 = org.jsecurity.util.CollectionUtils.asList(var9);
    org.jsecurity.authc.pam.ModularRealmAuthenticator var11 = new org.jsecurity.authc.pam.ModularRealmAuthenticator(var10);
    org.jsecurity.authc.pam.AllSuccessfulModularAuthenticationStrategy var12 = new org.jsecurity.authc.pam.AllSuccessfulModularAuthenticationStrategy();
    var11.setModularAuthenticationStrategy((org.jsecurity.authc.pam.ModularAuthenticationStrategy)var12);
    org.jsecurity.authz.SimpleAuthorizationInfo var14 = new org.jsecurity.authz.SimpleAuthorizationInfo();
    var14.addStringPermission("hi!");
    java.io.InputStream var18 = org.jsecurity.util.ClassUtils.getResourceAsStream("");
    java.lang.Object[] var19 = new java.lang.Object[] { var18};
    java.util.List var20 = org.jsecurity.util.CollectionUtils.asList(var19);
    var14.addRoles((java.util.Collection)var20);
    var11.setAuthenticationListeners((java.util.Collection)var20);
    org.jsecurity.realm.activedirectory.ActiveDirectoryRealm var23 = new org.jsecurity.realm.activedirectory.ActiveDirectoryRealm();
    var23.setPrincipalSuffix("");
    var11.setRealm((org.jsecurity.realm.Realm)var23);
    org.jsecurity.cache.HashtableCacheManager var27 = new org.jsecurity.cache.HashtableCacheManager();
    org.jsecurity.cache.Cache var29 = var27.getCache("\u0000\u0000");
    var23.setAuthorizationCache(var29);
    var0.setActiveSessionsCache(var29);
    org.jsecurity.session.mgt.SimpleSession var32 = new org.jsecurity.session.mgt.SimpleSession();
    java.io.Serializable var33 = var0.create((org.jsecurity.session.Session)var32);
    org.jsecurity.session.mgt.SimpleSession var34 = new org.jsecurity.session.mgt.SimpleSession();
    var34.touch();
    var34.validate();
    org.jsecurity.session.mgt.SimpleSession var37 = new org.jsecurity.session.mgt.SimpleSession();
    var37.setTimeout((-1L));
    org.jsecurity.session.mgt.SimpleSession var40 = new org.jsecurity.session.mgt.SimpleSession();
    java.util.Date var41 = var40.getLastAccessTime();
    var37.setLastAccessTime(var41);
    org.jsecurity.session.mgt.SimpleSession var43 = new org.jsecurity.session.mgt.SimpleSession();
    java.util.Date var44 = var43.getLastAccessTime();
    var37.setStopTimestamp(var44);
    var34.setLastAccessTime(var44);
    var32.setLastAccessTime(var44);
    org.jsecurity.session.mgt.ImmutableProxiedSession var48 = new org.jsecurity.session.mgt.ImmutableProxiedSession((org.jsecurity.session.Session)var32);
    java.util.Date var49 = var48.getStartTimestamp();
    java.util.Date var50 = var48.getStartTimestamp();
    java.io.Serializable var51 = var48.getId();
    long var52 = var48.getTimeout();
    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      var48.touch();
      fail("Expected exception of type org.jsecurity.session.InvalidSessionException");
    } catch (org.jsecurity.session.InvalidSessionException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var1);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var2);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var5);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var8);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var9);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var10);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var18);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var19);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var20);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var29);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var33 + "' != '" + "8efce960-793f-4953-938a-698f28303bac"+ "'", var33.equals("8efce960-793f-4953-938a-698f28303bac"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var41);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var44);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var49);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var50);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var51 + "' != '" + "8efce960-793f-4953-938a-698f28303bac"+ "'", var51.equals("8efce960-793f-4953-938a-698f28303bac"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var52 == 1800000L);

  }

  public void test47() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest2.test47");


    org.jsecurity.session.SessionException var1 = new org.jsecurity.session.SessionException("96fe6e53-b302-476e-93c9-0dc51d66e5e0");

  }

  public void test48() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest2.test48");


    org.jsecurity.session.SessionException var1 = new org.jsecurity.session.SessionException("org.jsecurity.realm.text.PropertiesRealm_1154");

  }

  public void test49() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest2.test49");


    org.jsecurity.realm.activedirectory.ActiveDirectoryRealm var0 = new org.jsecurity.realm.activedirectory.ActiveDirectoryRealm();
    var0.init();
    var0.setSystemPassword("dd\uFFFD");
    var0.setSystemPassword("9f00e408-27bf-467d-a45f-01bb47b51aa6");
    var0.setUrl("\uFFFD\uFFFD\uFFFDq\uFFFD\uFFFD\uFFFD\u01BC\uFFFDg]\uFFFD\uFFFD\u001Fu\uFFFD<\uFFFD\uFFFDi\uFFFD\uFFFD");

  }

  public void test50() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest2.test50");


    org.jsecurity.util.UnknownClassException var1 = new org.jsecurity.util.UnknownClassException("7dd9d095-6c41-447c-a2f6-e2c6c8807c11");

  }

  public void test51() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest2.test51");


    org.jsecurity.authc.credential.AllowAllCredentialsMatcher var0 = new org.jsecurity.authc.credential.AllowAllCredentialsMatcher();
    org.jsecurity.authc.UsernamePasswordToken var1 = new org.jsecurity.authc.UsernamePasswordToken();
    java.lang.String var2 = var1.getUsername();
    org.jsecurity.authc.SimpleAccount var3 = new org.jsecurity.authc.SimpleAccount();
    var3.setCredentialsExpired(false);
    var3.setCredentialsExpired(false);
    boolean var8 = var0.doCredentialsMatch((org.jsecurity.authc.AuthenticationToken)var1, (org.jsecurity.authc.AuthenticationInfo)var3);
    var1.setUsername("org.jsecurity.realm.SimpleAccountRealm-284-authorization");
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var2);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var8 == true);

  }

  public void test52() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest2.test52");


    org.jsecurity.session.ExpiredSessionException var2 = new org.jsecurity.session.ExpiredSessionException((java.io.Serializable)0.0f);
    org.jsecurity.session.UnknownSessionException var3 = new org.jsecurity.session.UnknownSessionException("NfxhYN7ItBfRAmDBmprtU73ghfEEPpcDJrHPkZ06wiY=", (java.io.Serializable)var2);
    java.io.Serializable var4 = var3.getSessionId();
    org.jsecurity.authc.AccountException var5 = new org.jsecurity.authc.AccountException((java.lang.Throwable)var3);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var4);

  }

  public void test53() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest2.test53");


    org.jsecurity.realm.SimpleAccountRealm var1 = new org.jsecurity.realm.SimpleAccountRealm("hi!");
    java.lang.Class var2 = var1.getAuthenticationTokenClass();
    org.jsecurity.session.mgt.eis.MemorySessionDAO var3 = new org.jsecurity.session.mgt.eis.MemorySessionDAO();
    org.jsecurity.cache.Cache var4 = var3.getActiveSessionsCache();
    org.jsecurity.cache.CacheManager var5 = var3.getCacheManager();
    var1.setCacheManager(var5);
    org.jsecurity.cache.Cache var7 = var1.getAuthorizationCache();
    boolean var9 = var1.accountExists("a2b823b1e72eae2b727289df8a00a89df8a0bab6ad8a89c4c5c7a9b62a270000");
    org.jsecurity.mgt.DefaultSecurityManager var10 = new org.jsecurity.mgt.DefaultSecurityManager((org.jsecurity.realm.Realm)var1);
    org.jsecurity.authc.pam.FirstSuccessfulAuthenticationStrategy var11 = new org.jsecurity.authc.pam.FirstSuccessfulAuthenticationStrategy();
    var10.setModularAuthenticationStrategy((org.jsecurity.authc.pam.ModularAuthenticationStrategy)var11);
    org.jsecurity.codec.CodecException var15 = new org.jsecurity.codec.CodecException("dd\uFFFD");
    org.jsecurity.authc.ConcurrentAccessException var16 = new org.jsecurity.authc.ConcurrentAccessException("org.jsecurity.authz.UnauthorizedException: org.jsecurity.session.ExpiredSessionException: ", (java.lang.Throwable)var15);
    org.jsecurity.subject.SimplePrincipalCollection var18 = new org.jsecurity.subject.SimplePrincipalCollection((java.lang.Object)var15, "");
    java.io.InputStream var20 = org.jsecurity.util.ClassUtils.getResourceAsStream("");
    java.lang.Object[] var21 = new java.lang.Object[] { var20};
    java.util.List var22 = org.jsecurity.util.CollectionUtils.asList(var21);
    org.jsecurity.authc.pam.ModularRealmAuthenticator var23 = new org.jsecurity.authc.pam.ModularRealmAuthenticator(var22);
    var18.addAll((java.util.Collection)var22, "\u0000\u0000");
    java.io.InputStream var27 = org.jsecurity.util.ClassUtils.getResourceAsStream("");
    java.lang.Object[] var28 = new java.lang.Object[] { var27};
    java.util.List var29 = org.jsecurity.util.CollectionUtils.asList(var28);
    org.jsecurity.authc.pam.ModularRealmAuthenticator var30 = new org.jsecurity.authc.pam.ModularRealmAuthenticator(var29);
    var18.addAll((java.util.Collection)var29, "\u0000\u0000");
    org.jsecurity.authc.pam.AllSuccessfulModularAuthenticationStrategy var33 = new org.jsecurity.authc.pam.AllSuccessfulModularAuthenticationStrategy();
    char[] var35 = new char[] { };
    org.jsecurity.authc.UsernamePasswordToken var37 = new org.jsecurity.authc.UsernamePasswordToken("hi!", var35, true);
    org.jsecurity.authc.SimpleAccount var38 = new org.jsecurity.authc.SimpleAccount();
    var38.setCredentialsExpired(false);
    boolean var41 = var38.isLocked();
    org.jsecurity.authc.AuthenticationInfo var42 = var33.afterAllAttempts((org.jsecurity.authc.AuthenticationToken)var37, (org.jsecurity.authc.AuthenticationInfo)var38);
    var37.clear();
    java.lang.Object var44 = var37.getPrincipal();
    var37.setUsername("\u0000\u0000\u0000");
    org.jsecurity.authc.AuthenticationInfo var47 = var11.beforeAllAttempts((java.util.Collection)var29, (org.jsecurity.authc.AuthenticationToken)var37);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var2);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var4);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var5);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var7);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var9 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var20);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var21);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var22);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var27);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var28);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var29);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var35);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var41 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var42);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var44);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var47);

  }

  public void test54() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest2.test54");


    org.jsecurity.session.mgt.DefaultSessionManager var0 = new org.jsecurity.session.mgt.DefaultSessionManager();
    var0.setGlobalSessionTimeout(1);
    var0.setSessionValidationInterval(10L);
    org.jsecurity.mgt.DefaultSecurityManager var5 = new org.jsecurity.mgt.DefaultSecurityManager();
    java.io.InputStream var7 = org.jsecurity.util.ClassUtils.getResourceAsStream("");
    java.lang.Object[] var8 = new java.lang.Object[] { var7};
    java.util.List var9 = org.jsecurity.util.CollectionUtils.asList(var8);
    org.jsecurity.authc.pam.ModularRealmAuthenticator var10 = new org.jsecurity.authc.pam.ModularRealmAuthenticator(var9);
    org.jsecurity.authc.pam.AllSuccessfulModularAuthenticationStrategy var11 = new org.jsecurity.authc.pam.AllSuccessfulModularAuthenticationStrategy();
    var10.setModularAuthenticationStrategy((org.jsecurity.authc.pam.ModularAuthenticationStrategy)var11);
    org.jsecurity.authz.SimpleAuthorizationInfo var13 = new org.jsecurity.authz.SimpleAuthorizationInfo();
    var13.addStringPermission("hi!");
    java.io.InputStream var17 = org.jsecurity.util.ClassUtils.getResourceAsStream("");
    java.lang.Object[] var18 = new java.lang.Object[] { var17};
    java.util.List var19 = org.jsecurity.util.CollectionUtils.asList(var18);
    var13.addRoles((java.util.Collection)var19);
    var10.setAuthenticationListeners((java.util.Collection)var19);
    var5.setSessionListeners((java.util.Collection)var19);
    org.jsecurity.authc.pam.ModularRealmAuthenticator var23 = new org.jsecurity.authc.pam.ModularRealmAuthenticator();
    org.jsecurity.authz.permission.InvalidPermissionStringException var26 = new org.jsecurity.authz.permission.InvalidPermissionStringException("", "dd\uFFFD");
    org.jsecurity.JSecurityException var28 = new org.jsecurity.JSecurityException("");
    org.jsecurity.authc.SimpleAuthenticationInfo var30 = new org.jsecurity.authc.SimpleAuthenticationInfo((java.lang.Object)var26, (java.lang.Object)"", "org.jsecurity.authz.UnauthorizedException: org.jsecurity.session.ExpiredSessionException: ");
    org.jsecurity.subject.PrincipalCollection var31 = var30.getPrincipals();
    var23.onLogout(var31);
    var5.setAuthenticator((org.jsecurity.authc.Authenticator)var23);
    org.jsecurity.codec.CodecException var36 = new org.jsecurity.codec.CodecException("dd\uFFFD");
    org.jsecurity.authc.ConcurrentAccessException var37 = new org.jsecurity.authc.ConcurrentAccessException("org.jsecurity.authz.UnauthorizedException: org.jsecurity.session.ExpiredSessionException: ", (java.lang.Throwable)var36);
    org.jsecurity.subject.SimplePrincipalCollection var39 = new org.jsecurity.subject.SimplePrincipalCollection((java.lang.Object)var36, "");
    org.jsecurity.authc.pam.FirstSuccessfulAuthenticationStrategy var40 = new org.jsecurity.authc.pam.FirstSuccessfulAuthenticationStrategy();
    org.jsecurity.authz.UnauthorizedException var42 = new org.jsecurity.authz.UnauthorizedException("org.jsecurity.config.ConfigurationException: dd\uFFFD");
    java.lang.Throwable[] var43 = var42.getSuppressed();
    java.util.List var44 = org.jsecurity.util.CollectionUtils.asList((java.lang.Object[])var43);
    org.jsecurity.authc.UsernamePasswordToken var45 = new org.jsecurity.authc.UsernamePasswordToken();
    java.lang.String var46 = var45.getUsername();
    java.net.InetAddress var47 = var45.getInetAddress();
    org.jsecurity.authc.AuthenticationInfo var48 = var40.beforeAllAttempts((java.util.Collection)var44, (org.jsecurity.authc.AuthenticationToken)var45);
    org.jsecurity.session.UnknownSessionException var53 = new org.jsecurity.session.UnknownSessionException("dd\uFFFD", (java.io.Serializable)100.0f);
    org.jsecurity.subject.SubjectException var54 = new org.jsecurity.subject.SubjectException("dd\uFFFD", (java.lang.Throwable)var53);
    org.jsecurity.io.SerializationException var55 = new org.jsecurity.io.SerializationException("", (java.lang.Throwable)var54);
    java.lang.Throwable[] var56 = var54.getSuppressed();
    java.util.Set var57 = org.jsecurity.util.CollectionUtils.asSet((java.lang.Object[])var56);
    org.jsecurity.authc.SimpleAccount var58 = new org.jsecurity.authc.SimpleAccount((org.jsecurity.subject.PrincipalCollection)var39, (java.lang.Object)var44, var57);
    java.io.InputStream var60 = org.jsecurity.util.ClassUtils.getResourceAsStream("");
    java.lang.Object[] var61 = new java.lang.Object[] { var60};
    java.util.List var62 = org.jsecurity.util.CollectionUtils.asList(var61);
    org.jsecurity.authc.pam.ModularRealmAuthenticator var63 = new org.jsecurity.authc.pam.ModularRealmAuthenticator(var62);
    org.jsecurity.subject.SimplePrincipalCollection var65 = new org.jsecurity.subject.SimplePrincipalCollection((java.util.Collection)var62, "org.jsecurity.authz.UnauthorizedException: org.jsecurity.session.ExpiredSessionException: ");
    org.jsecurity.io.ResourceException var69 = new org.jsecurity.io.ResourceException("hi!");
    org.jsecurity.authc.UnknownAccountException var70 = new org.jsecurity.authc.UnknownAccountException((java.lang.Throwable)var69);
    org.jsecurity.session.StoppedSessionException var71 = new org.jsecurity.session.StoppedSessionException("dd\uFFFD", (java.io.Serializable)var69);
    org.jsecurity.session.UnknownSessionException var72 = new org.jsecurity.session.UnknownSessionException("org.jsecurity.authz.UnauthorizedException: org.jsecurity.session.ExpiredSessionException: ", (java.lang.Throwable)var69);
    boolean var73 = var65.equals((java.lang.Object)var69);
    var39.addAll((org.jsecurity.subject.PrincipalCollection)var65);
    org.jsecurity.session.UnknownSessionException var79 = new org.jsecurity.session.UnknownSessionException("dd\uFFFD", (java.io.Serializable)100.0f);
    org.jsecurity.subject.SubjectException var80 = new org.jsecurity.subject.SubjectException("dd\uFFFD", (java.lang.Throwable)var79);
    org.jsecurity.io.SerializationException var81 = new org.jsecurity.io.SerializationException("", (java.lang.Throwable)var80);
    java.lang.Throwable[] var82 = var80.getSuppressed();
    java.util.List var83 = org.jsecurity.util.CollectionUtils.asList((java.lang.Object[])var82);
    boolean var84 = var5.isPermittedAll((org.jsecurity.subject.PrincipalCollection)var39, (java.util.Collection)var83);
    org.jsecurity.subject.DelegatingSubject var85 = new org.jsecurity.subject.DelegatingSubject((org.jsecurity.mgt.SecurityManager)var5);
    boolean var87 = var85.hasRole("org.jsecurity.authc.IncorrectCredentialsException: \u0000\u0000");
    java.net.InetAddress var88 = var85.getInetAddress();
    java.io.Serializable var89 = var0.start(var88);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var7);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var8);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var9);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var17);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var18);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var19);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var31);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var43);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var44);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var46);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var47);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var48);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var56);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var57);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var60);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var61);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var62);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var73 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var82);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var83);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var84 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var87 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var88);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var89 + "' != '" + "ba5781b5-1678-43a0-a046-6d887f34f2e4"+ "'", var89.equals("ba5781b5-1678-43a0-a046-6d887f34f2e4"));

  }

  public void test55() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest2.test55");


    char[] var2 = new char[] { };
    org.jsecurity.authc.UsernamePasswordToken var4 = new org.jsecurity.authc.UsernamePasswordToken("hi!", var2, true);
    byte[] var5 = org.jsecurity.codec.Hex.decode(var2);
    byte[] var6 = org.jsecurity.codec.Hex.decode(var2);
    org.jsecurity.authc.UsernamePasswordToken var8 = new org.jsecurity.authc.UsernamePasswordToken("ZGT/", var2, false);
    byte[] var9 = org.jsecurity.codec.Hex.decode(var2);
    org.jsecurity.mgt.DefaultSecurityManager var10 = new org.jsecurity.mgt.DefaultSecurityManager();
    org.jsecurity.authz.SimpleAuthorizationInfo var12 = new org.jsecurity.authz.SimpleAuthorizationInfo();
    org.jsecurity.session.UnknownSessionException var17 = new org.jsecurity.session.UnknownSessionException("dd\uFFFD", (java.io.Serializable)100.0f);
    org.jsecurity.subject.SubjectException var18 = new org.jsecurity.subject.SubjectException("dd\uFFFD", (java.lang.Throwable)var17);
    org.jsecurity.io.SerializationException var19 = new org.jsecurity.io.SerializationException("", (java.lang.Throwable)var18);
    java.lang.Throwable[] var20 = var18.getSuppressed();
    java.util.Set var21 = org.jsecurity.util.CollectionUtils.asSet((java.lang.Object[])var20);
    var12.setStringPermissions(var21);
    java.util.Set var23 = var12.getRoles();
    org.jsecurity.authz.SimpleAuthorizationInfo var24 = new org.jsecurity.authz.SimpleAuthorizationInfo();
    var24.addRole("a2b823b1e72eae2b727289df8a00a89df8a0bab6ad8a89c4c5c7a9b62a270000");
    org.jsecurity.session.UnknownSessionException var31 = new org.jsecurity.session.UnknownSessionException("dd\uFFFD", (java.io.Serializable)100.0f);
    org.jsecurity.subject.SubjectException var32 = new org.jsecurity.subject.SubjectException("dd\uFFFD", (java.lang.Throwable)var31);
    org.jsecurity.io.SerializationException var33 = new org.jsecurity.io.SerializationException("", (java.lang.Throwable)var32);
    java.lang.Throwable[] var34 = var32.getSuppressed();
    java.util.Set var35 = org.jsecurity.util.CollectionUtils.asSet((java.lang.Object[])var34);
    var24.addRoles((java.util.Collection)var35);
    var12.setRoles(var35);
    org.jsecurity.authz.SimpleRole var38 = new org.jsecurity.authz.SimpleRole("org.jsecurity.authz.UnauthorizedException: org.jsecurity.session.ExpiredSessionException: ", var35);
    var10.setSessionListeners((java.util.Collection)var35);
    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      org.jsecurity.crypto.hash.Md2Hash var40 = new org.jsecurity.crypto.hash.Md2Hash((java.lang.Object)var2, (java.lang.Object)var35);
      fail("Expected exception of type org.jsecurity.codec.CodecException");
    } catch (org.jsecurity.codec.CodecException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var2);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var5);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var6);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var9);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var20);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var21);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var23);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var34);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var35);

  }

  public void test56() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest2.test56");


    org.jsecurity.mgt.DefaultSecurityManager var0 = new org.jsecurity.mgt.DefaultSecurityManager();
    java.io.InputStream var2 = org.jsecurity.util.ClassUtils.getResourceAsStream("");
    java.lang.Object[] var3 = new java.lang.Object[] { var2};
    java.util.List var4 = org.jsecurity.util.CollectionUtils.asList(var3);
    org.jsecurity.authc.pam.ModularRealmAuthenticator var5 = new org.jsecurity.authc.pam.ModularRealmAuthenticator(var4);
    org.jsecurity.authc.pam.AllSuccessfulModularAuthenticationStrategy var6 = new org.jsecurity.authc.pam.AllSuccessfulModularAuthenticationStrategy();
    var5.setModularAuthenticationStrategy((org.jsecurity.authc.pam.ModularAuthenticationStrategy)var6);
    org.jsecurity.authz.SimpleAuthorizationInfo var8 = new org.jsecurity.authz.SimpleAuthorizationInfo();
    var8.addStringPermission("hi!");
    java.io.InputStream var12 = org.jsecurity.util.ClassUtils.getResourceAsStream("");
    java.lang.Object[] var13 = new java.lang.Object[] { var12};
    java.util.List var14 = org.jsecurity.util.CollectionUtils.asList(var13);
    var8.addRoles((java.util.Collection)var14);
    var5.setAuthenticationListeners((java.util.Collection)var14);
    var0.setSessionListeners((java.util.Collection)var14);
    org.jsecurity.authc.pam.ModularRealmAuthenticator var18 = new org.jsecurity.authc.pam.ModularRealmAuthenticator();
    org.jsecurity.authz.permission.InvalidPermissionStringException var21 = new org.jsecurity.authz.permission.InvalidPermissionStringException("", "dd\uFFFD");
    org.jsecurity.JSecurityException var23 = new org.jsecurity.JSecurityException("");
    org.jsecurity.authc.SimpleAuthenticationInfo var25 = new org.jsecurity.authc.SimpleAuthenticationInfo((java.lang.Object)var21, (java.lang.Object)"", "org.jsecurity.authz.UnauthorizedException: org.jsecurity.session.ExpiredSessionException: ");
    org.jsecurity.subject.PrincipalCollection var26 = var25.getPrincipals();
    var18.onLogout(var26);
    var0.setAuthenticator((org.jsecurity.authc.Authenticator)var18);
    org.jsecurity.codec.CodecException var31 = new org.jsecurity.codec.CodecException("dd\uFFFD");
    org.jsecurity.authc.ConcurrentAccessException var32 = new org.jsecurity.authc.ConcurrentAccessException("org.jsecurity.authz.UnauthorizedException: org.jsecurity.session.ExpiredSessionException: ", (java.lang.Throwable)var31);
    org.jsecurity.subject.SimplePrincipalCollection var34 = new org.jsecurity.subject.SimplePrincipalCollection((java.lang.Object)var31, "");
    java.io.InputStream var36 = org.jsecurity.util.ClassUtils.getResourceAsStream("");
    java.lang.Object[] var37 = new java.lang.Object[] { var36};
    java.util.List var38 = org.jsecurity.util.CollectionUtils.asList(var37);
    org.jsecurity.authc.pam.ModularRealmAuthenticator var39 = new org.jsecurity.authc.pam.ModularRealmAuthenticator(var38);
    org.jsecurity.authc.pam.AllSuccessfulModularAuthenticationStrategy var40 = new org.jsecurity.authc.pam.AllSuccessfulModularAuthenticationStrategy();
    var39.setModularAuthenticationStrategy((org.jsecurity.authc.pam.ModularAuthenticationStrategy)var40);
    org.jsecurity.authz.SimpleAuthorizationInfo var42 = new org.jsecurity.authz.SimpleAuthorizationInfo();
    var42.addStringPermission("hi!");
    java.io.InputStream var46 = org.jsecurity.util.ClassUtils.getResourceAsStream("");
    java.lang.Object[] var47 = new java.lang.Object[] { var46};
    java.util.List var48 = org.jsecurity.util.CollectionUtils.asList(var47);
    var42.addRoles((java.util.Collection)var48);
    var39.setAuthenticationListeners((java.util.Collection)var48);
    org.jsecurity.realm.activedirectory.ActiveDirectoryRealm var51 = new org.jsecurity.realm.activedirectory.ActiveDirectoryRealm();
    var51.setPrincipalSuffix("");
    var39.setRealm((org.jsecurity.realm.Realm)var51);
    org.jsecurity.authc.pam.FirstSuccessfulAuthenticationStrategy var55 = new org.jsecurity.authc.pam.FirstSuccessfulAuthenticationStrategy();
    org.jsecurity.authz.UnauthorizedException var57 = new org.jsecurity.authz.UnauthorizedException("org.jsecurity.config.ConfigurationException: dd\uFFFD");
    java.lang.Throwable[] var58 = var57.getSuppressed();
    java.util.List var59 = org.jsecurity.util.CollectionUtils.asList((java.lang.Object[])var58);
    org.jsecurity.authc.UsernamePasswordToken var60 = new org.jsecurity.authc.UsernamePasswordToken();
    java.lang.String var61 = var60.getUsername();
    java.net.InetAddress var62 = var60.getInetAddress();
    org.jsecurity.authc.AuthenticationInfo var63 = var55.beforeAllAttempts((java.util.Collection)var59, (org.jsecurity.authc.AuthenticationToken)var60);
    var39.setModularAuthenticationStrategy((org.jsecurity.authc.pam.ModularAuthenticationStrategy)var55);
    org.jsecurity.authc.SimpleAccount var65 = new org.jsecurity.authc.SimpleAccount((org.jsecurity.subject.PrincipalCollection)var34, (java.lang.Object)var39);
    var0.setAuthenticator((org.jsecurity.authc.Authenticator)var39);
    org.jsecurity.authz.Authorizer var67 = var0.getAuthorizer();
    org.jsecurity.realm.activedirectory.ActiveDirectoryRealm var69 = new org.jsecurity.realm.activedirectory.ActiveDirectoryRealm();
    var69.init();
    var69.setSystemPassword("dd\uFFFD");
    org.jsecurity.authz.aop.GuestAnnotationHandler var73 = new org.jsecurity.authz.aop.GuestAnnotationHandler();
    java.lang.Class var74 = var73.getAnnotationClass();
    var69.setAuthenticationTokenClass(var74);
    org.jsecurity.authz.permission.WildcardPermissionResolver var76 = new org.jsecurity.authz.permission.WildcardPermissionResolver();
    org.jsecurity.authz.Permission var78 = var76.resolvePermission("hi!");
    var69.setPermissionResolver((org.jsecurity.authz.permission.PermissionResolver)var76);
    java.util.Set var80 = org.jsecurity.util.PermissionUtils.resolveDelimitedPermissions("\uFFFD\uFFFD#\uFFFD\uFFFD.\uFFFD+r\uFFFD\u6959(\uFFFD\uFFFDW\uFFFDq\uFFFD.\uFFFD\uFFFD^jY\uFFFDj\uFFFDa\uFFFD\uFFFD\uFFFDj\u0628", (org.jsecurity.authz.permission.PermissionResolver)var76);
    var0.setAuthenticationListeners((java.util.Collection)var80);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var2);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var3);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var4);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var12);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var13);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var14);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var26);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var36);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var37);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var38);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var46);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var47);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var48);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var58);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var59);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var61);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var62);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var63);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var67);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var74);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var78);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var80);

  }

  public void test57() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest2.test57");


    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      java.lang.Object var1 = org.jsecurity.util.ClassUtils.newInstance("orgjsecurityconfigConfigurationExceptionAAA=\r\n");
      fail("Expected exception of type org.jsecurity.util.UnknownClassException");
    } catch (org.jsecurity.util.UnknownClassException e) {
      // Expected exception.
    }

  }

  public void test58() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest2.test58");


    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      byte[] var1 = org.jsecurity.codec.Hex.decode("020e4fd5-81c8-4cbc-9bbb-975c45ce39a3");
      fail("Expected exception of type java.lang.IllegalArgumentException");
    } catch (java.lang.IllegalArgumentException e) {
      // Expected exception.
    }

  }

  public void test59() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest2.test59");


    org.jsecurity.authz.SimpleAuthorizationInfo var0 = new org.jsecurity.authz.SimpleAuthorizationInfo();
    java.util.Set var1 = var0.getStringPermissions();
    java.util.Set var2 = var0.getRoles();
    org.jsecurity.authz.SimpleAuthorizationInfo var3 = new org.jsecurity.authz.SimpleAuthorizationInfo();
    java.util.Set var4 = var3.getStringPermissions();
    org.jsecurity.authz.SimpleAuthorizationInfo var6 = new org.jsecurity.authz.SimpleAuthorizationInfo();
    org.jsecurity.session.UnknownSessionException var11 = new org.jsecurity.session.UnknownSessionException("dd\uFFFD", (java.io.Serializable)100.0f);
    org.jsecurity.subject.SubjectException var12 = new org.jsecurity.subject.SubjectException("dd\uFFFD", (java.lang.Throwable)var11);
    org.jsecurity.io.SerializationException var13 = new org.jsecurity.io.SerializationException("", (java.lang.Throwable)var12);
    java.lang.Throwable[] var14 = var12.getSuppressed();
    java.util.Set var15 = org.jsecurity.util.CollectionUtils.asSet((java.lang.Object[])var14);
    var6.setStringPermissions(var15);
    java.util.Set var17 = var6.getRoles();
    org.jsecurity.authz.SimpleAuthorizationInfo var18 = new org.jsecurity.authz.SimpleAuthorizationInfo();
    var18.addRole("a2b823b1e72eae2b727289df8a00a89df8a0bab6ad8a89c4c5c7a9b62a270000");
    org.jsecurity.session.UnknownSessionException var25 = new org.jsecurity.session.UnknownSessionException("dd\uFFFD", (java.io.Serializable)100.0f);
    org.jsecurity.subject.SubjectException var26 = new org.jsecurity.subject.SubjectException("dd\uFFFD", (java.lang.Throwable)var25);
    org.jsecurity.io.SerializationException var27 = new org.jsecurity.io.SerializationException("", (java.lang.Throwable)var26);
    java.lang.Throwable[] var28 = var26.getSuppressed();
    java.util.Set var29 = org.jsecurity.util.CollectionUtils.asSet((java.lang.Object[])var28);
    var18.addRoles((java.util.Collection)var29);
    var6.setRoles(var29);
    org.jsecurity.authz.SimpleRole var32 = new org.jsecurity.authz.SimpleRole("org.jsecurity.authz.UnauthorizedException: org.jsecurity.session.ExpiredSessionException: ", var29);
    var3.addStringPermissions((java.util.Collection)var29);
    org.jsecurity.authz.SimpleAuthorizationInfo var34 = new org.jsecurity.authz.SimpleAuthorizationInfo();
    var34.addStringPermission("hi!");
    org.jsecurity.authz.SimpleAuthorizationInfo var38 = new org.jsecurity.authz.SimpleAuthorizationInfo();
    org.jsecurity.session.UnknownSessionException var43 = new org.jsecurity.session.UnknownSessionException("dd\uFFFD", (java.io.Serializable)100.0f);
    org.jsecurity.subject.SubjectException var44 = new org.jsecurity.subject.SubjectException("dd\uFFFD", (java.lang.Throwable)var43);
    org.jsecurity.io.SerializationException var45 = new org.jsecurity.io.SerializationException("", (java.lang.Throwable)var44);
    java.lang.Throwable[] var46 = var44.getSuppressed();
    java.util.Set var47 = org.jsecurity.util.CollectionUtils.asSet((java.lang.Object[])var46);
    var38.setStringPermissions(var47);
    org.jsecurity.authz.SimpleRole var49 = new org.jsecurity.authz.SimpleRole("\u0000\u0000", var47);
    var34.setRoles(var47);
    var3.setObjectPermissions(var47);
    var3.addRole("org.jsecurity.realm.text.TextConfigurationRealm_389");
    var3.addStringPermission("ecd29e3a-c551-4fce-8683-2e49992d04b8");
    java.util.Set var56 = var3.getObjectPermissions();
    var0.addObjectPermissions((java.util.Collection)var56);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var1);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var2);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var4);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var14);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var15);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var17);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var28);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var29);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var46);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var47);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var56);

  }

  public void test60() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest2.test60");


    org.jsecurity.session.UnknownSessionException var6 = new org.jsecurity.session.UnknownSessionException("dd\uFFFD", (java.io.Serializable)100.0f);
    org.jsecurity.config.ConfigurationException var7 = new org.jsecurity.config.ConfigurationException("dd\uFFFD", (java.lang.Throwable)var6);
    org.jsecurity.session.ExpiredSessionException var9 = new org.jsecurity.session.ExpiredSessionException("", (java.lang.Throwable)var7, (java.io.Serializable)true);
    org.jsecurity.authc.pam.UnsupportedTokenException var10 = new org.jsecurity.authc.pam.UnsupportedTokenException((java.lang.Throwable)var9);
    org.jsecurity.authc.AccountException var11 = new org.jsecurity.authc.AccountException((java.lang.Throwable)var10);
    org.jsecurity.authc.DisabledAccountException var12 = new org.jsecurity.authc.DisabledAccountException((java.lang.Throwable)var10);
    org.jsecurity.session.ExpiredSessionException var13 = new org.jsecurity.session.ExpiredSessionException("dd\uFFFD", (java.io.Serializable)var10);
    org.jsecurity.session.UnknownSessionException var14 = new org.jsecurity.session.UnknownSessionException("o\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFDw8\u3B9A\uFFFDM\uFFFD\uFFFDg\uFFFD\uFFFD\u07BC\u059C", (java.lang.Throwable)var13);

  }

  public void test61() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest2.test61");


    org.jsecurity.authz.SimpleAuthorizationInfo var0 = new org.jsecurity.authz.SimpleAuthorizationInfo();
    var0.addRole("a2b823b1e72eae2b727289df8a00a89df8a0bab6ad8a89c4c5c7a9b62a270000");
    org.jsecurity.session.UnknownSessionException var7 = new org.jsecurity.session.UnknownSessionException("dd\uFFFD", (java.io.Serializable)100.0f);
    org.jsecurity.subject.SubjectException var8 = new org.jsecurity.subject.SubjectException("dd\uFFFD", (java.lang.Throwable)var7);
    org.jsecurity.io.SerializationException var9 = new org.jsecurity.io.SerializationException("", (java.lang.Throwable)var8);
    java.lang.Throwable[] var10 = var8.getSuppressed();
    java.util.Set var11 = org.jsecurity.util.CollectionUtils.asSet((java.lang.Object[])var10);
    var0.addRoles((java.util.Collection)var11);
    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      org.jsecurity.crypto.hash.Sha384Hash var13 = new org.jsecurity.crypto.hash.Sha384Hash((java.lang.Object)var11);
      fail("Expected exception of type org.jsecurity.codec.CodecException");
    } catch (org.jsecurity.codec.CodecException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var10);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var11);

  }

  public void test62() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest2.test62");


    org.jsecurity.authc.credential.AllowAllCredentialsMatcher var0 = new org.jsecurity.authc.credential.AllowAllCredentialsMatcher();
    org.jsecurity.authc.UsernamePasswordToken var1 = new org.jsecurity.authc.UsernamePasswordToken();
    org.jsecurity.codec.CodecException var4 = new org.jsecurity.codec.CodecException("dd\uFFFD");
    org.jsecurity.authc.ConcurrentAccessException var5 = new org.jsecurity.authc.ConcurrentAccessException("org.jsecurity.authz.UnauthorizedException: org.jsecurity.session.ExpiredSessionException: ", (java.lang.Throwable)var4);
    org.jsecurity.subject.SimplePrincipalCollection var7 = new org.jsecurity.subject.SimplePrincipalCollection((java.lang.Object)var4, "");
    org.jsecurity.authc.pam.FirstSuccessfulAuthenticationStrategy var8 = new org.jsecurity.authc.pam.FirstSuccessfulAuthenticationStrategy();
    org.jsecurity.authz.UnauthorizedException var10 = new org.jsecurity.authz.UnauthorizedException("org.jsecurity.config.ConfigurationException: dd\uFFFD");
    java.lang.Throwable[] var11 = var10.getSuppressed();
    java.util.List var12 = org.jsecurity.util.CollectionUtils.asList((java.lang.Object[])var11);
    org.jsecurity.authc.UsernamePasswordToken var13 = new org.jsecurity.authc.UsernamePasswordToken();
    java.lang.String var14 = var13.getUsername();
    java.net.InetAddress var15 = var13.getInetAddress();
    org.jsecurity.authc.AuthenticationInfo var16 = var8.beforeAllAttempts((java.util.Collection)var12, (org.jsecurity.authc.AuthenticationToken)var13);
    org.jsecurity.session.UnknownSessionException var21 = new org.jsecurity.session.UnknownSessionException("dd\uFFFD", (java.io.Serializable)100.0f);
    org.jsecurity.subject.SubjectException var22 = new org.jsecurity.subject.SubjectException("dd\uFFFD", (java.lang.Throwable)var21);
    org.jsecurity.io.SerializationException var23 = new org.jsecurity.io.SerializationException("", (java.lang.Throwable)var22);
    java.lang.Throwable[] var24 = var22.getSuppressed();
    java.util.Set var25 = org.jsecurity.util.CollectionUtils.asSet((java.lang.Object[])var24);
    org.jsecurity.authc.SimpleAccount var26 = new org.jsecurity.authc.SimpleAccount((org.jsecurity.subject.PrincipalCollection)var7, (java.lang.Object)var12, var25);
    var26.addStringPermission("org.jsecurity.config.ConfigurationException: dd\uFFFD");
    org.jsecurity.authz.SimpleRole var29 = new org.jsecurity.authz.SimpleRole();
    org.jsecurity.authz.permission.WildcardPermission var32 = new org.jsecurity.authz.permission.WildcardPermission("hi!", false);
    boolean var33 = var29.isPermitted((org.jsecurity.authz.Permission)var32);
    var26.addObjectPermission((org.jsecurity.authz.Permission)var32);
    boolean var35 = var0.doCredentialsMatch((org.jsecurity.authc.AuthenticationToken)var1, (org.jsecurity.authc.AuthenticationInfo)var26);
    java.lang.String var36 = var26.toString();
    org.jsecurity.mgt.DefaultSecurityManager var37 = new org.jsecurity.mgt.DefaultSecurityManager();
    java.io.InputStream var39 = org.jsecurity.util.ClassUtils.getResourceAsStream("");
    java.lang.Object[] var40 = new java.lang.Object[] { var39};
    java.util.List var41 = org.jsecurity.util.CollectionUtils.asList(var40);
    org.jsecurity.authc.pam.ModularRealmAuthenticator var42 = new org.jsecurity.authc.pam.ModularRealmAuthenticator(var41);
    org.jsecurity.authc.pam.AllSuccessfulModularAuthenticationStrategy var43 = new org.jsecurity.authc.pam.AllSuccessfulModularAuthenticationStrategy();
    var42.setModularAuthenticationStrategy((org.jsecurity.authc.pam.ModularAuthenticationStrategy)var43);
    org.jsecurity.authz.SimpleAuthorizationInfo var45 = new org.jsecurity.authz.SimpleAuthorizationInfo();
    var45.addStringPermission("hi!");
    java.io.InputStream var49 = org.jsecurity.util.ClassUtils.getResourceAsStream("");
    java.lang.Object[] var50 = new java.lang.Object[] { var49};
    java.util.List var51 = org.jsecurity.util.CollectionUtils.asList(var50);
    var45.addRoles((java.util.Collection)var51);
    var42.setAuthenticationListeners((java.util.Collection)var51);
    var37.setSessionListeners((java.util.Collection)var51);
    var26.addObjectPermissions((java.util.Collection)var51);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var11);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var12);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var14);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var15);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var16);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var24);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var25);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var33 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var35 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var39);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var40);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var41);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var49);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var50);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var51);

  }

  public void test63() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest2.test63");


    org.jsecurity.session.UnknownSessionException var2 = new org.jsecurity.session.UnknownSessionException("dd\uFFFD", (java.io.Serializable)100.0f);
    org.jsecurity.session.StoppedSessionException var3 = new org.jsecurity.session.StoppedSessionException((java.lang.Throwable)var2);

  }

  public void test64() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest2.test64");


    org.jsecurity.session.mgt.quartz.QuartzSessionValidationScheduler var0 = new org.jsecurity.session.mgt.quartz.QuartzSessionValidationScheduler();
    org.jsecurity.session.mgt.DefaultSessionManager var1 = new org.jsecurity.session.mgt.DefaultSessionManager();
    org.jsecurity.mgt.DefaultSecurityManager var2 = new org.jsecurity.mgt.DefaultSecurityManager();
    org.jsecurity.authz.permission.WildcardPermissionResolver var3 = new org.jsecurity.authz.permission.WildcardPermissionResolver();
    var2.setPermissionResolver((org.jsecurity.authz.permission.PermissionResolver)var3);
    org.jsecurity.cache.CacheManager var5 = var2.getCacheManager();
    var1.setCacheManager(var5);
    var0.setSessionManager((org.jsecurity.session.mgt.ValidatingSessionManager)var1);
    var0.enableSessionValidation();
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var5);

  }

  public void test65() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest2.test65");


    org.jsecurity.authc.UsernamePasswordToken var3 = new org.jsecurity.authc.UsernamePasswordToken("", "b017e95a-a08d-4f3a-bab8-cc9b39ef5331", false);
    java.lang.String var4 = var3.getUsername();
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var4 + "' != '" + ""+ "'", var4.equals(""));

  }

  public void test66() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest2.test66");


    org.jsecurity.authc.pam.AllSuccessfulModularAuthenticationStrategy var0 = new org.jsecurity.authc.pam.AllSuccessfulModularAuthenticationStrategy();
    char[] var2 = new char[] { };
    org.jsecurity.authc.UsernamePasswordToken var4 = new org.jsecurity.authc.UsernamePasswordToken("hi!", var2, true);
    org.jsecurity.authc.SimpleAccount var5 = new org.jsecurity.authc.SimpleAccount();
    var5.setCredentialsExpired(false);
    boolean var8 = var5.isLocked();
    org.jsecurity.authc.AuthenticationInfo var9 = var0.afterAllAttempts((org.jsecurity.authc.AuthenticationToken)var4, (org.jsecurity.authc.AuthenticationInfo)var5);
    char[] var13 = new char[] { '4', '#'};
    org.jsecurity.authc.UsernamePasswordToken var14 = new org.jsecurity.authc.UsernamePasswordToken("\u0000\u0000", var13);
    org.jsecurity.authc.SimpleAccount var15 = new org.jsecurity.authc.SimpleAccount();
    var15.setCredentialsExpired(false);
    var15.setCredentialsExpired(false);
    boolean var20 = var15.isCredentialsExpired();
    org.jsecurity.authc.AuthenticationInfo var21 = var0.afterAllAttempts((org.jsecurity.authc.AuthenticationToken)var14, (org.jsecurity.authc.AuthenticationInfo)var15);
    java.net.InetAddress var22 = var14.getInetAddress();
    org.jsecurity.session.mgt.eis.MemorySessionDAO var23 = new org.jsecurity.session.mgt.eis.MemorySessionDAO();
    org.jsecurity.cache.Cache var24 = var23.getActiveSessionsCache();
    org.jsecurity.cache.CacheManager var25 = var23.getCacheManager();
    org.jsecurity.cache.HashtableCacheManager var26 = new org.jsecurity.cache.HashtableCacheManager();
    org.jsecurity.cache.Cache var28 = var26.getCache("\u0000\u0000");
    var23.setActiveSessionsCache(var28);
    java.io.InputStream var31 = org.jsecurity.util.ClassUtils.getResourceAsStream("");
    java.lang.Object[] var32 = new java.lang.Object[] { var31};
    java.util.List var33 = org.jsecurity.util.CollectionUtils.asList(var32);
    org.jsecurity.authc.pam.ModularRealmAuthenticator var34 = new org.jsecurity.authc.pam.ModularRealmAuthenticator(var33);
    org.jsecurity.authc.pam.AllSuccessfulModularAuthenticationStrategy var35 = new org.jsecurity.authc.pam.AllSuccessfulModularAuthenticationStrategy();
    var34.setModularAuthenticationStrategy((org.jsecurity.authc.pam.ModularAuthenticationStrategy)var35);
    org.jsecurity.authz.SimpleAuthorizationInfo var37 = new org.jsecurity.authz.SimpleAuthorizationInfo();
    var37.addStringPermission("hi!");
    java.io.InputStream var41 = org.jsecurity.util.ClassUtils.getResourceAsStream("");
    java.lang.Object[] var42 = new java.lang.Object[] { var41};
    java.util.List var43 = org.jsecurity.util.CollectionUtils.asList(var42);
    var37.addRoles((java.util.Collection)var43);
    var34.setAuthenticationListeners((java.util.Collection)var43);
    org.jsecurity.realm.activedirectory.ActiveDirectoryRealm var46 = new org.jsecurity.realm.activedirectory.ActiveDirectoryRealm();
    var46.setPrincipalSuffix("");
    var34.setRealm((org.jsecurity.realm.Realm)var46);
    org.jsecurity.cache.HashtableCacheManager var50 = new org.jsecurity.cache.HashtableCacheManager();
    org.jsecurity.cache.Cache var52 = var50.getCache("\u0000\u0000");
    var46.setAuthorizationCache(var52);
    var23.setActiveSessionsCache(var52);
    org.jsecurity.session.mgt.SimpleSession var55 = new org.jsecurity.session.mgt.SimpleSession();
    java.io.Serializable var56 = var23.create((org.jsecurity.session.Session)var55);
    org.jsecurity.session.mgt.SimpleSession var57 = new org.jsecurity.session.mgt.SimpleSession();
    var57.touch();
    var57.validate();
    org.jsecurity.session.mgt.SimpleSession var60 = new org.jsecurity.session.mgt.SimpleSession();
    var60.setTimeout((-1L));
    org.jsecurity.session.mgt.SimpleSession var63 = new org.jsecurity.session.mgt.SimpleSession();
    java.util.Date var64 = var63.getLastAccessTime();
    var60.setLastAccessTime(var64);
    org.jsecurity.session.mgt.SimpleSession var66 = new org.jsecurity.session.mgt.SimpleSession();
    java.util.Date var67 = var66.getLastAccessTime();
    var60.setStopTimestamp(var67);
    var57.setLastAccessTime(var67);
    var55.setLastAccessTime(var67);
    org.jsecurity.session.mgt.ImmutableProxiedSession var71 = new org.jsecurity.session.mgt.ImmutableProxiedSession((org.jsecurity.session.Session)var55);
    java.util.Date var72 = var71.getLastAccessTime();
    java.net.InetAddress var73 = var71.getHostAddress();
    var14.setInetAddress(var73);
    java.lang.String var75 = var14.toString();
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var2);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var8 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var9);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var13);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var20 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var21);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var22);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var24);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var25);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var28);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var31);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var32);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var33);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var41);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var42);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var43);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var52);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var56 + "' != '" + "c100a0dc-e80a-4d5c-baea-453d05633754"+ "'", var56.equals("c100a0dc-e80a-4d5c-baea-453d05633754"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var64);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var67);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var72);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var73);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var75 + "' != '" + "org.jsecurity.authc.UsernamePasswordToken - \u0000\u0000, rememberMe=false (Jeshs-iMac.local/192.168.2.1)"+ "'", var75.equals("org.jsecurity.authc.UsernamePasswordToken - \u0000\u0000, rememberMe=false (Jeshs-iMac.local/192.168.2.1)"));

  }

  public void test67() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest2.test67");


    org.jsecurity.session.mgt.DefaultSessionManager var0 = new org.jsecurity.session.mgt.DefaultSessionManager();
    org.jsecurity.session.mgt.eis.MemorySessionDAO var1 = new org.jsecurity.session.mgt.eis.MemorySessionDAO();
    org.jsecurity.cache.Cache var2 = var1.getActiveSessionsCache();
    org.jsecurity.cache.CacheManager var3 = var1.getCacheManager();
    org.jsecurity.cache.HashtableCacheManager var4 = new org.jsecurity.cache.HashtableCacheManager();
    org.jsecurity.cache.Cache var6 = var4.getCache("\u0000\u0000");
    var1.setActiveSessionsCache(var6);
    java.io.InputStream var9 = org.jsecurity.util.ClassUtils.getResourceAsStream("");
    java.lang.Object[] var10 = new java.lang.Object[] { var9};
    java.util.List var11 = org.jsecurity.util.CollectionUtils.asList(var10);
    org.jsecurity.authc.pam.ModularRealmAuthenticator var12 = new org.jsecurity.authc.pam.ModularRealmAuthenticator(var11);
    org.jsecurity.authc.pam.AllSuccessfulModularAuthenticationStrategy var13 = new org.jsecurity.authc.pam.AllSuccessfulModularAuthenticationStrategy();
    var12.setModularAuthenticationStrategy((org.jsecurity.authc.pam.ModularAuthenticationStrategy)var13);
    org.jsecurity.authz.SimpleAuthorizationInfo var15 = new org.jsecurity.authz.SimpleAuthorizationInfo();
    var15.addStringPermission("hi!");
    java.io.InputStream var19 = org.jsecurity.util.ClassUtils.getResourceAsStream("");
    java.lang.Object[] var20 = new java.lang.Object[] { var19};
    java.util.List var21 = org.jsecurity.util.CollectionUtils.asList(var20);
    var15.addRoles((java.util.Collection)var21);
    var12.setAuthenticationListeners((java.util.Collection)var21);
    org.jsecurity.realm.activedirectory.ActiveDirectoryRealm var24 = new org.jsecurity.realm.activedirectory.ActiveDirectoryRealm();
    var24.setPrincipalSuffix("");
    var12.setRealm((org.jsecurity.realm.Realm)var24);
    org.jsecurity.cache.HashtableCacheManager var28 = new org.jsecurity.cache.HashtableCacheManager();
    org.jsecurity.cache.Cache var30 = var28.getCache("\u0000\u0000");
    var24.setAuthorizationCache(var30);
    var1.setActiveSessionsCache(var30);
    org.jsecurity.session.mgt.SimpleSession var33 = new org.jsecurity.session.mgt.SimpleSession();
    java.io.Serializable var34 = var1.create((org.jsecurity.session.Session)var33);
    var0.setSessionDAO((org.jsecurity.session.mgt.eis.SessionDAO)var1);
    org.jsecurity.authc.pam.AllSuccessfulModularAuthenticationStrategy var36 = new org.jsecurity.authc.pam.AllSuccessfulModularAuthenticationStrategy();
    char[] var38 = new char[] { };
    org.jsecurity.authc.UsernamePasswordToken var40 = new org.jsecurity.authc.UsernamePasswordToken("hi!", var38, true);
    org.jsecurity.authc.SimpleAccount var41 = new org.jsecurity.authc.SimpleAccount();
    var41.setCredentialsExpired(false);
    boolean var44 = var41.isLocked();
    org.jsecurity.authc.AuthenticationInfo var45 = var36.afterAllAttempts((org.jsecurity.authc.AuthenticationToken)var40, (org.jsecurity.authc.AuthenticationInfo)var41);
    char[] var49 = new char[] { '4', '#'};
    org.jsecurity.authc.UsernamePasswordToken var50 = new org.jsecurity.authc.UsernamePasswordToken("\u0000\u0000", var49);
    org.jsecurity.authc.SimpleAccount var51 = new org.jsecurity.authc.SimpleAccount();
    var51.setCredentialsExpired(false);
    var51.setCredentialsExpired(false);
    boolean var56 = var51.isCredentialsExpired();
    org.jsecurity.authc.AuthenticationInfo var57 = var36.afterAllAttempts((org.jsecurity.authc.AuthenticationToken)var50, (org.jsecurity.authc.AuthenticationInfo)var51);
    org.jsecurity.realm.activedirectory.ActiveDirectoryRealm var58 = new org.jsecurity.realm.activedirectory.ActiveDirectoryRealm();
    org.jsecurity.authc.credential.Sha256CredentialsMatcher var59 = new org.jsecurity.authc.credential.Sha256CredentialsMatcher();
    var58.setCredentialsMatcher((org.jsecurity.authc.credential.CredentialsMatcher)var59);
    java.lang.String var61 = var58.getAuthorizationCacheName();
    org.jsecurity.authc.UsernamePasswordToken var62 = new org.jsecurity.authc.UsernamePasswordToken();
    java.lang.String var63 = var62.getUsername();
    java.lang.Object var64 = var62.getPrincipal();
    boolean var65 = var58.supports((org.jsecurity.authc.AuthenticationToken)var62);
    org.jsecurity.session.UnknownSessionException var69 = new org.jsecurity.session.UnknownSessionException("dd\uFFFD", (java.io.Serializable)100.0f);
    org.jsecurity.session.SessionException var71 = new org.jsecurity.session.SessionException("dd\uFFFD", (java.lang.Throwable)var69, (java.io.Serializable)0);
    org.jsecurity.authc.SimpleAuthenticationInfo var74 = new org.jsecurity.authc.SimpleAuthenticationInfo((java.lang.Object)0, (java.lang.Object)10, "hi!");
    java.lang.Object var75 = var74.getCredentials();
    java.lang.String var76 = var74.toString();
    org.jsecurity.authc.AuthenticationInfo var77 = var36.afterAllAttempts((org.jsecurity.authc.AuthenticationToken)var62, (org.jsecurity.authc.AuthenticationInfo)var74);
    org.jsecurity.session.mgt.eis.MemorySessionDAO var78 = new org.jsecurity.session.mgt.eis.MemorySessionDAO();
    org.jsecurity.cache.Cache var79 = var78.getActiveSessionsCache();
    var78.setActiveSessionsCacheName("dd\uFFFD");
    var74.setCredentials((java.lang.Object)var78);
    var0.setSessionDAO((org.jsecurity.session.mgt.eis.SessionDAO)var78);
    org.jsecurity.session.mgt.ExecutorServiceSessionValidationScheduler var84 = new org.jsecurity.session.mgt.ExecutorServiceSessionValidationScheduler((org.jsecurity.session.mgt.ValidatingSessionManager)var0);
    var84.run();
    org.jsecurity.session.mgt.ValidatingSessionManager var86 = var84.getSessionManager();
    var84.enableSessionValidation();
    var84.disableSessionValidation();
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var2);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var3);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var6);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var9);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var10);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var11);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var19);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var20);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var21);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var30);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var34 + "' != '" + "64f92a6a-b899-4b53-a1ff-969d49769088"+ "'", var34.equals("64f92a6a-b899-4b53-a1ff-969d49769088"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var38);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var44 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var45);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var49);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var56 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var57);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var61);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var63);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var64);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var65 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var75 + "' != '" + 10+ "'", var75.equals(10));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var77);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var79);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var86);

  }

  public void test68() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest2.test68");


    org.jsecurity.cache.HashtableCache var1 = new org.jsecurity.cache.HashtableCache("5dd0c65d-1422-49c2-becb-9e8dca619ab3");
    var1.clear();
    org.jsecurity.mgt.DefaultSecurityManager var3 = new org.jsecurity.mgt.DefaultSecurityManager();
    java.io.InputStream var5 = org.jsecurity.util.ClassUtils.getResourceAsStream("");
    java.lang.Object[] var6 = new java.lang.Object[] { var5};
    java.util.List var7 = org.jsecurity.util.CollectionUtils.asList(var6);
    org.jsecurity.authc.pam.ModularRealmAuthenticator var8 = new org.jsecurity.authc.pam.ModularRealmAuthenticator(var7);
    org.jsecurity.authc.pam.AllSuccessfulModularAuthenticationStrategy var9 = new org.jsecurity.authc.pam.AllSuccessfulModularAuthenticationStrategy();
    var8.setModularAuthenticationStrategy((org.jsecurity.authc.pam.ModularAuthenticationStrategy)var9);
    org.jsecurity.authz.SimpleAuthorizationInfo var11 = new org.jsecurity.authz.SimpleAuthorizationInfo();
    var11.addStringPermission("hi!");
    java.io.InputStream var15 = org.jsecurity.util.ClassUtils.getResourceAsStream("");
    java.lang.Object[] var16 = new java.lang.Object[] { var15};
    java.util.List var17 = org.jsecurity.util.CollectionUtils.asList(var16);
    var11.addRoles((java.util.Collection)var17);
    var8.setAuthenticationListeners((java.util.Collection)var17);
    var3.setSessionListeners((java.util.Collection)var17);
    org.jsecurity.realm.text.TextConfigurationRealm var21 = new org.jsecurity.realm.text.TextConfigurationRealm();
    java.io.InputStream var23 = org.jsecurity.util.ClassUtils.getResourceAsStream("");
    java.lang.Object[] var24 = new java.lang.Object[] { var23};
    java.util.List var25 = org.jsecurity.util.CollectionUtils.asList(var24);
    org.jsecurity.authc.pam.ModularRealmAuthenticator var26 = new org.jsecurity.authc.pam.ModularRealmAuthenticator(var25);
    org.jsecurity.subject.SimplePrincipalCollection var28 = new org.jsecurity.subject.SimplePrincipalCollection((java.util.Collection)var25, "org.jsecurity.authz.UnauthorizedException: org.jsecurity.session.ExpiredSessionException: ");
    org.jsecurity.session.UnknownSessionException var33 = new org.jsecurity.session.UnknownSessionException("dd\uFFFD", (java.io.Serializable)100.0f);
    org.jsecurity.session.SessionException var35 = new org.jsecurity.session.SessionException("dd\uFFFD", (java.lang.Throwable)var33, (java.io.Serializable)0);
    org.jsecurity.session.SessionException var36 = new org.jsecurity.session.SessionException("dd\uFFFD", (java.lang.Throwable)var33);
    var28.add((java.lang.Object)var36, "org.jsecurity.config.ConfigurationException: dd\uFFFD");
    var21.onLogout((org.jsecurity.subject.PrincipalCollection)var28);
    org.jsecurity.authc.pam.FirstSuccessfulAuthenticationStrategy var40 = new org.jsecurity.authc.pam.FirstSuccessfulAuthenticationStrategy();
    org.jsecurity.authz.UnauthorizedException var42 = new org.jsecurity.authz.UnauthorizedException("org.jsecurity.config.ConfigurationException: dd\uFFFD");
    java.lang.Throwable[] var43 = var42.getSuppressed();
    java.util.List var44 = org.jsecurity.util.CollectionUtils.asList((java.lang.Object[])var43);
    org.jsecurity.authc.UsernamePasswordToken var45 = new org.jsecurity.authc.UsernamePasswordToken();
    java.lang.String var46 = var45.getUsername();
    java.net.InetAddress var47 = var45.getInetAddress();
    org.jsecurity.authc.AuthenticationInfo var48 = var40.beforeAllAttempts((java.util.Collection)var44, (org.jsecurity.authc.AuthenticationToken)var45);
    boolean[] var49 = var3.hasRoles((org.jsecurity.subject.PrincipalCollection)var28, var44);
    org.jsecurity.session.mgt.SessionManager var50 = var3.getSessionManager();
    var1.remove((java.lang.Object)var3);
    org.jsecurity.cache.CacheManager var52 = var3.getCacheManager();
    java.io.InputStream var54 = org.jsecurity.util.ClassUtils.getResourceAsStream("");
    java.lang.Object[] var55 = new java.lang.Object[] { var54};
    java.util.List var56 = org.jsecurity.util.CollectionUtils.asList(var55);
    org.jsecurity.authc.pam.ModularRealmAuthenticator var57 = new org.jsecurity.authc.pam.ModularRealmAuthenticator(var56);
    org.jsecurity.subject.SimplePrincipalCollection var59 = new org.jsecurity.subject.SimplePrincipalCollection((java.util.Collection)var56, "org.jsecurity.authz.UnauthorizedException: org.jsecurity.session.ExpiredSessionException: ");
    org.jsecurity.io.ResourceException var63 = new org.jsecurity.io.ResourceException("hi!");
    org.jsecurity.authc.UnknownAccountException var64 = new org.jsecurity.authc.UnknownAccountException((java.lang.Throwable)var63);
    org.jsecurity.session.StoppedSessionException var65 = new org.jsecurity.session.StoppedSessionException("dd\uFFFD", (java.io.Serializable)var63);
    org.jsecurity.session.UnknownSessionException var66 = new org.jsecurity.session.UnknownSessionException("org.jsecurity.authz.UnauthorizedException: org.jsecurity.session.ExpiredSessionException: ", (java.lang.Throwable)var63);
    boolean var67 = var59.equals((java.lang.Object)var63);
    org.jsecurity.authz.aop.RoleAnnotationMethodInterceptor var68 = new org.jsecurity.authz.aop.RoleAnnotationMethodInterceptor();
    org.jsecurity.aop.AnnotationHandler var69 = var68.getHandler();
    java.lang.Class var70 = var69.getAnnotationClass();
    java.lang.Object var71 = var59.oneByType(var70);
    boolean var72 = var59.isEmpty();
    java.lang.String[] var76 = org.jsecurity.util.StringUtils.split("dd\uFFFD", '4', 'a');
    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      boolean var77 = var3.isPermittedAll((org.jsecurity.subject.PrincipalCollection)var59, var76);
      fail("Expected exception of type java.util.NoSuchElementException");
    } catch (java.util.NoSuchElementException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var5);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var6);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var7);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var15);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var16);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var17);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var23);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var24);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var25);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var43);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var44);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var46);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var47);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var48);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var49);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var50);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var52);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var54);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var55);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var56);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var67 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var69);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var70);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var71);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var72 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var76);

  }

  public void test69() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest2.test69");


    org.jsecurity.session.UnknownSessionException var4 = new org.jsecurity.session.UnknownSessionException("dd\uFFFD", (java.io.Serializable)100.0f);
    org.jsecurity.subject.SubjectException var5 = new org.jsecurity.subject.SubjectException("dd\uFFFD", (java.lang.Throwable)var4);
    org.jsecurity.io.SerializationException var6 = new org.jsecurity.io.SerializationException("", (java.lang.Throwable)var5);
    java.lang.Throwable[] var7 = var5.getSuppressed();
    java.lang.Throwable[] var8 = var5.getSuppressed();
    org.jsecurity.authz.SimpleAuthorizationInfo var11 = new org.jsecurity.authz.SimpleAuthorizationInfo();
    var11.addRole("a2b823b1e72eae2b727289df8a00a89df8a0bab6ad8a89c4c5c7a9b62a270000");
    org.jsecurity.session.UnknownSessionException var18 = new org.jsecurity.session.UnknownSessionException("dd\uFFFD", (java.io.Serializable)100.0f);
    org.jsecurity.subject.SubjectException var19 = new org.jsecurity.subject.SubjectException("dd\uFFFD", (java.lang.Throwable)var18);
    org.jsecurity.io.SerializationException var20 = new org.jsecurity.io.SerializationException("", (java.lang.Throwable)var19);
    java.lang.Throwable[] var21 = var19.getSuppressed();
    java.util.Set var22 = org.jsecurity.util.CollectionUtils.asSet((java.lang.Object[])var21);
    var11.addRoles((java.util.Collection)var22);
    java.io.InputStream var25 = org.jsecurity.util.ClassUtils.getResourceAsStream("");
    java.lang.Object[] var26 = new java.lang.Object[] { var25};
    java.util.List var27 = org.jsecurity.util.CollectionUtils.asList(var26);
    org.jsecurity.authc.pam.ModularRealmAuthenticator var28 = new org.jsecurity.authc.pam.ModularRealmAuthenticator(var27);
    org.jsecurity.subject.SimplePrincipalCollection var30 = new org.jsecurity.subject.SimplePrincipalCollection((java.util.Collection)var27, "org.jsecurity.authz.UnauthorizedException: org.jsecurity.session.ExpiredSessionException: ");
    org.jsecurity.session.UnknownSessionException var35 = new org.jsecurity.session.UnknownSessionException("dd\uFFFD", (java.io.Serializable)100.0f);
    org.jsecurity.session.SessionException var37 = new org.jsecurity.session.SessionException("dd\uFFFD", (java.lang.Throwable)var35, (java.io.Serializable)0);
    org.jsecurity.session.SessionException var38 = new org.jsecurity.session.SessionException("dd\uFFFD", (java.lang.Throwable)var35);
    var30.add((java.lang.Object)var38, "org.jsecurity.config.ConfigurationException: dd\uFFFD");
    java.util.Set var41 = var30.asSet();
    org.jsecurity.authz.SimpleAuthorizingAccount var42 = new org.jsecurity.authz.SimpleAuthorizingAccount((java.lang.Object)var8, (java.lang.Object)"\u0000\u0000\u0000", "\u0000\u0000\u0000", var22, var41);
    org.jsecurity.authz.SimpleRole var44 = var42.getRole("\u0000\u0000\u0000");
    java.util.Set var45 = var42.getPermissions();
    org.jsecurity.authz.permission.WildcardPermissionResolver var47 = new org.jsecurity.authz.permission.WildcardPermissionResolver();
    java.util.Set var48 = org.jsecurity.util.PermissionUtils.resolveDelimitedPermissions("a2b823b1e72eae2b727289df8a00a89df8a0bab6ad8a89c4c5c7a9b62a270000", (org.jsecurity.authz.permission.PermissionResolver)var47);
    org.jsecurity.authz.Permission var50 = var47.resolvePermission("6f8b35fd-0848-49a4-9560-659760616ad8");
    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      var42.checkPermission(var50);
      fail("Expected exception of type java.lang.ClassCastException");
    } catch (java.lang.ClassCastException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var7);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var8);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var21);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var22);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var25);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var26);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var27);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var41);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var44);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var45);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var48);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var50);

  }

  public void test70() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest2.test70");


    org.jsecurity.mgt.DefaultSecurityManager var0 = new org.jsecurity.mgt.DefaultSecurityManager();
    java.io.InputStream var2 = org.jsecurity.util.ClassUtils.getResourceAsStream("");
    java.lang.Object[] var3 = new java.lang.Object[] { var2};
    java.util.List var4 = org.jsecurity.util.CollectionUtils.asList(var3);
    org.jsecurity.authc.pam.ModularRealmAuthenticator var5 = new org.jsecurity.authc.pam.ModularRealmAuthenticator(var4);
    org.jsecurity.authc.pam.AllSuccessfulModularAuthenticationStrategy var6 = new org.jsecurity.authc.pam.AllSuccessfulModularAuthenticationStrategy();
    var5.setModularAuthenticationStrategy((org.jsecurity.authc.pam.ModularAuthenticationStrategy)var6);
    org.jsecurity.authz.SimpleAuthorizationInfo var8 = new org.jsecurity.authz.SimpleAuthorizationInfo();
    var8.addStringPermission("hi!");
    java.io.InputStream var12 = org.jsecurity.util.ClassUtils.getResourceAsStream("");
    java.lang.Object[] var13 = new java.lang.Object[] { var12};
    java.util.List var14 = org.jsecurity.util.CollectionUtils.asList(var13);
    var8.addRoles((java.util.Collection)var14);
    var5.setAuthenticationListeners((java.util.Collection)var14);
    var0.setSessionListeners((java.util.Collection)var14);
    java.util.Collection var18 = var0.getRealms();
    org.jsecurity.codec.CodecException var21 = new org.jsecurity.codec.CodecException("dd\uFFFD");
    org.jsecurity.authc.ConcurrentAccessException var22 = new org.jsecurity.authc.ConcurrentAccessException("org.jsecurity.authz.UnauthorizedException: org.jsecurity.session.ExpiredSessionException: ", (java.lang.Throwable)var21);
    org.jsecurity.subject.SimplePrincipalCollection var24 = new org.jsecurity.subject.SimplePrincipalCollection((java.lang.Object)var21, "");
    java.io.InputStream var26 = org.jsecurity.util.ClassUtils.getResourceAsStream("");
    java.lang.Object[] var27 = new java.lang.Object[] { var26};
    java.util.List var28 = org.jsecurity.util.CollectionUtils.asList(var27);
    org.jsecurity.authc.pam.ModularRealmAuthenticator var29 = new org.jsecurity.authc.pam.ModularRealmAuthenticator(var28);
    var24.addAll((java.util.Collection)var28, "\u0000\u0000");
    org.jsecurity.authz.UnauthorizedException var33 = new org.jsecurity.authz.UnauthorizedException();
    org.jsecurity.session.SessionException var35 = new org.jsecurity.session.SessionException("", (java.lang.Throwable)var33, (java.io.Serializable)"org.jsecurity.config.ConfigurationException: dd\uFFFD");
    org.jsecurity.crypto.hash.Sha1Hash var36 = new org.jsecurity.crypto.hash.Sha1Hash((java.lang.Object)"");
    org.jsecurity.session.UnknownSessionException var41 = new org.jsecurity.session.UnknownSessionException("dd\uFFFD", (java.io.Serializable)100.0f);
    org.jsecurity.subject.SubjectException var42 = new org.jsecurity.subject.SubjectException("dd\uFFFD", (java.lang.Throwable)var41);
    org.jsecurity.io.SerializationException var43 = new org.jsecurity.io.SerializationException("", (java.lang.Throwable)var42);
    java.lang.Throwable[] var44 = var42.getSuppressed();
    java.util.Set var45 = org.jsecurity.util.CollectionUtils.asSet((java.lang.Object[])var44);
    org.jsecurity.authz.SimpleAuthorizationInfo var47 = new org.jsecurity.authz.SimpleAuthorizationInfo();
    org.jsecurity.session.UnknownSessionException var52 = new org.jsecurity.session.UnknownSessionException("dd\uFFFD", (java.io.Serializable)100.0f);
    org.jsecurity.subject.SubjectException var53 = new org.jsecurity.subject.SubjectException("dd\uFFFD", (java.lang.Throwable)var52);
    org.jsecurity.io.SerializationException var54 = new org.jsecurity.io.SerializationException("", (java.lang.Throwable)var53);
    java.lang.Throwable[] var55 = var53.getSuppressed();
    java.util.Set var56 = org.jsecurity.util.CollectionUtils.asSet((java.lang.Object[])var55);
    var47.setStringPermissions(var56);
    java.util.Set var58 = var47.getRoles();
    org.jsecurity.authz.SimpleAuthorizationInfo var59 = new org.jsecurity.authz.SimpleAuthorizationInfo();
    var59.addRole("a2b823b1e72eae2b727289df8a00a89df8a0bab6ad8a89c4c5c7a9b62a270000");
    org.jsecurity.session.UnknownSessionException var66 = new org.jsecurity.session.UnknownSessionException("dd\uFFFD", (java.io.Serializable)100.0f);
    org.jsecurity.subject.SubjectException var67 = new org.jsecurity.subject.SubjectException("dd\uFFFD", (java.lang.Throwable)var66);
    org.jsecurity.io.SerializationException var68 = new org.jsecurity.io.SerializationException("", (java.lang.Throwable)var67);
    java.lang.Throwable[] var69 = var67.getSuppressed();
    java.util.Set var70 = org.jsecurity.util.CollectionUtils.asSet((java.lang.Object[])var69);
    var59.addRoles((java.util.Collection)var70);
    var47.setRoles(var70);
    org.jsecurity.authz.SimpleRole var73 = new org.jsecurity.authz.SimpleRole("org.jsecurity.authz.UnauthorizedException: org.jsecurity.session.ExpiredSessionException: ", var70);
    org.jsecurity.authc.SimpleAccount var74 = new org.jsecurity.authc.SimpleAccount((org.jsecurity.subject.PrincipalCollection)var24, (java.lang.Object)"", var45, var70);
    org.jsecurity.authz.SimpleAuthorizationInfo var75 = new org.jsecurity.authz.SimpleAuthorizationInfo();
    var75.addStringPermission("hi!");
    org.jsecurity.authz.SimpleAuthorizationInfo var79 = new org.jsecurity.authz.SimpleAuthorizationInfo();
    org.jsecurity.session.UnknownSessionException var84 = new org.jsecurity.session.UnknownSessionException("dd\uFFFD", (java.io.Serializable)100.0f);
    org.jsecurity.subject.SubjectException var85 = new org.jsecurity.subject.SubjectException("dd\uFFFD", (java.lang.Throwable)var84);
    org.jsecurity.io.SerializationException var86 = new org.jsecurity.io.SerializationException("", (java.lang.Throwable)var85);
    java.lang.Throwable[] var87 = var85.getSuppressed();
    java.util.Set var88 = org.jsecurity.util.CollectionUtils.asSet((java.lang.Object[])var87);
    var79.setStringPermissions(var88);
    org.jsecurity.authz.SimpleRole var90 = new org.jsecurity.authz.SimpleRole("\u0000\u0000", var88);
    var75.setRoles(var88);
    boolean var92 = var0.isPermittedAll((org.jsecurity.subject.PrincipalCollection)var24, (java.util.Collection)var88);
    org.jsecurity.authz.permission.WildcardPermissionResolver var93 = new org.jsecurity.authz.permission.WildcardPermissionResolver();
    org.jsecurity.authz.Permission var95 = var93.resolvePermission("hi!");
    org.jsecurity.authz.Permission var97 = var93.resolvePermission("hi!");
    var0.setPermissionResolver((org.jsecurity.authz.permission.PermissionResolver)var93);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var2);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var3);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var4);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var12);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var13);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var14);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var18);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var26);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var27);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var28);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var44);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var45);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var55);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var56);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var58);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var69);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var70);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var87);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var88);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var92 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var95);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var97);

  }

  public void test71() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest2.test71");


    org.jsecurity.session.SessionException var1 = new org.jsecurity.session.SessionException("a2b823b1e72eae2b727289df8a00a89df8a0bab6ad8a89c4c5c7a9b62a270000");
    org.jsecurity.session.ExpiredSessionException var3 = new org.jsecurity.session.ExpiredSessionException((java.io.Serializable)(-1));
    org.jsecurity.authc.DisabledAccountException var4 = new org.jsecurity.authc.DisabledAccountException((java.lang.Throwable)var3);
    var1.addSuppressed((java.lang.Throwable)var4);
    org.jsecurity.cache.CacheException var6 = new org.jsecurity.cache.CacheException((java.lang.Throwable)var1);
    org.jsecurity.authc.AuthenticationException var7 = new org.jsecurity.authc.AuthenticationException((java.lang.Throwable)var1);
    org.jsecurity.session.UnknownSessionException var8 = new org.jsecurity.session.UnknownSessionException((java.io.Serializable)var1);

  }

  public void test72() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest2.test72");


    org.jsecurity.session.mgt.SimpleSession var0 = new org.jsecurity.session.mgt.SimpleSession();
    var0.touch();
    var0.validate();
    org.jsecurity.session.mgt.SimpleSession var3 = new org.jsecurity.session.mgt.SimpleSession();
    var3.setTimeout((-1L));
    org.jsecurity.session.mgt.SimpleSession var6 = new org.jsecurity.session.mgt.SimpleSession();
    java.util.Date var7 = var6.getLastAccessTime();
    var3.setLastAccessTime(var7);
    org.jsecurity.session.mgt.SimpleSession var9 = new org.jsecurity.session.mgt.SimpleSession();
    java.util.Date var10 = var9.getLastAccessTime();
    var3.setStopTimestamp(var10);
    var0.setLastAccessTime(var10);
    java.io.Serializable var13 = var0.getId();
    var0.stop();
    org.jsecurity.jndi.JndiLocator var15 = new org.jsecurity.jndi.JndiLocator();
    boolean var16 = var15.isResourceRef();
    java.lang.Object var17 = var0.getAttribute((java.lang.Object)var15);
    java.util.Date var18 = var0.getLastAccessTime();
    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      var0.validate();
      fail("Expected exception of type org.jsecurity.session.StoppedSessionException");
    } catch (org.jsecurity.session.StoppedSessionException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var7);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var10);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var13);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var16 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var17);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var18);

  }

  public void test73() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest2.test73");


    org.jsecurity.io.IniResource var0 = new org.jsecurity.io.IniResource();
    java.lang.String var1 = var0.getCharsetName();
    org.jsecurity.config.ReflectionBuilder var2 = new org.jsecurity.config.ReflectionBuilder();
    org.jsecurity.io.IniResource var3 = new org.jsecurity.io.IniResource();
    var3.setCharsetName("org.jsecurity.authz.UnauthorizedException: org.jsecurity.session.ExpiredSessionException: ");
    java.util.Map var6 = var3.getSections();
    java.util.Map var7 = var2.buildObjects(var6);
    org.jsecurity.config.ReflectionBuilder var8 = new org.jsecurity.config.ReflectionBuilder();
    org.jsecurity.io.IniResource var9 = new org.jsecurity.io.IniResource();
    var9.setCharsetName("org.jsecurity.authz.UnauthorizedException: org.jsecurity.session.ExpiredSessionException: ");
    java.util.Map var12 = var9.getSections();
    java.util.Map var13 = var8.buildObjects(var12);
    java.util.Map var14 = var2.buildObjects(var13);
    java.util.Map var15 = var2.getObjects();
    org.jsecurity.realm.activedirectory.ActiveDirectoryRealm var16 = new org.jsecurity.realm.activedirectory.ActiveDirectoryRealm();
    org.jsecurity.authc.credential.Sha256CredentialsMatcher var17 = new org.jsecurity.authc.credential.Sha256CredentialsMatcher();
    var16.setCredentialsMatcher((org.jsecurity.authc.credential.CredentialsMatcher)var17);
    java.lang.String var19 = var16.getAuthorizationCacheName();
    var16.setUrl("hi!");
    org.jsecurity.realm.ldap.DefaultLdapContextFactory var22 = new org.jsecurity.realm.ldap.DefaultLdapContextFactory();
    var16.setLdapContextFactory((org.jsecurity.realm.ldap.LdapContextFactory)var22);
    org.jsecurity.config.ReflectionBuilder var24 = new org.jsecurity.config.ReflectionBuilder();
    org.jsecurity.io.IniResource var25 = new org.jsecurity.io.IniResource();
    var25.setCharsetName("org.jsecurity.authz.UnauthorizedException: org.jsecurity.session.ExpiredSessionException: ");
    java.util.Map var28 = var25.getSections();
    java.util.Map var29 = var24.buildObjects(var28);
    org.jsecurity.config.ReflectionBuilder var30 = new org.jsecurity.config.ReflectionBuilder();
    org.jsecurity.io.IniResource var31 = new org.jsecurity.io.IniResource();
    var31.setCharsetName("org.jsecurity.authz.UnauthorizedException: org.jsecurity.session.ExpiredSessionException: ");
    java.util.Map var34 = var31.getSections();
    java.util.Map var35 = var30.buildObjects(var34);
    java.util.Map var36 = var24.buildObjects(var35);
    java.util.Map var37 = var24.getObjects();
    var22.setAdditionalEnvironment(var37);
    var2.setObjects(var37);
    var0.setSections(var37);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var1);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var6);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var7);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var12);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var13);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var14);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var15);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var19);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var28);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var29);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var34);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var35);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var36);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var37);

  }

  public void test74() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest2.test74");


    org.jsecurity.io.XmlSerializer var0 = new org.jsecurity.io.XmlSerializer();
    org.jsecurity.session.mgt.quartz.QuartzSessionValidationScheduler var1 = new org.jsecurity.session.mgt.quartz.QuartzSessionValidationScheduler();
    var1.disableSessionValidation();
    byte[] var3 = var0.serialize((java.lang.Object)var1);
    byte[] var5 = var0.serialize((java.lang.Object)1);
    org.jsecurity.session.mgt.eis.MemorySessionDAO var6 = new org.jsecurity.session.mgt.eis.MemorySessionDAO();
    org.jsecurity.cache.Cache var7 = var6.getActiveSessionsCache();
    org.jsecurity.cache.CacheManager var8 = var6.getCacheManager();
    org.jsecurity.cache.HashtableCacheManager var9 = new org.jsecurity.cache.HashtableCacheManager();
    org.jsecurity.cache.Cache var11 = var9.getCache("\u0000\u0000");
    var6.setActiveSessionsCache(var11);
    java.io.InputStream var14 = org.jsecurity.util.ClassUtils.getResourceAsStream("");
    java.lang.Object[] var15 = new java.lang.Object[] { var14};
    java.util.List var16 = org.jsecurity.util.CollectionUtils.asList(var15);
    org.jsecurity.authc.pam.ModularRealmAuthenticator var17 = new org.jsecurity.authc.pam.ModularRealmAuthenticator(var16);
    org.jsecurity.authc.pam.AllSuccessfulModularAuthenticationStrategy var18 = new org.jsecurity.authc.pam.AllSuccessfulModularAuthenticationStrategy();
    var17.setModularAuthenticationStrategy((org.jsecurity.authc.pam.ModularAuthenticationStrategy)var18);
    org.jsecurity.authz.SimpleAuthorizationInfo var20 = new org.jsecurity.authz.SimpleAuthorizationInfo();
    var20.addStringPermission("hi!");
    java.io.InputStream var24 = org.jsecurity.util.ClassUtils.getResourceAsStream("");
    java.lang.Object[] var25 = new java.lang.Object[] { var24};
    java.util.List var26 = org.jsecurity.util.CollectionUtils.asList(var25);
    var20.addRoles((java.util.Collection)var26);
    var17.setAuthenticationListeners((java.util.Collection)var26);
    org.jsecurity.realm.activedirectory.ActiveDirectoryRealm var29 = new org.jsecurity.realm.activedirectory.ActiveDirectoryRealm();
    var29.setPrincipalSuffix("");
    var17.setRealm((org.jsecurity.realm.Realm)var29);
    org.jsecurity.cache.HashtableCacheManager var33 = new org.jsecurity.cache.HashtableCacheManager();
    org.jsecurity.cache.Cache var35 = var33.getCache("\u0000\u0000");
    var29.setAuthorizationCache(var35);
    var6.setActiveSessionsCache(var35);
    org.jsecurity.session.mgt.SimpleSession var38 = new org.jsecurity.session.mgt.SimpleSession();
    java.io.Serializable var39 = var6.create((org.jsecurity.session.Session)var38);
    org.jsecurity.cache.Cache var40 = var6.getActiveSessionsCache();
    var6.setActiveSessionsCacheName("0220fc2d-2559-421b-822b-6ed559f96c25");
    var6.setActiveSessionsCacheName("a2b823b1e72eae2b727289df8a00a89df8a0bab6ad8a89c4c5c7a9b62a270000");
    java.util.Collection var45 = var6.getActiveSessions();
    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      org.jsecurity.crypto.hash.Md2Hash var46 = new org.jsecurity.crypto.hash.Md2Hash((java.lang.Object)var0, (java.lang.Object)var6);
      fail("Expected exception of type org.jsecurity.codec.CodecException");
    } catch (org.jsecurity.codec.CodecException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var3);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var5);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var7);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var8);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var11);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var14);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var15);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var16);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var24);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var25);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var26);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var35);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var39 + "' != '" + "2ae7f0d3-f7c0-4737-9857-399d98b92f9b"+ "'", var39.equals("2ae7f0d3-f7c0-4737-9857-399d98b92f9b"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var40);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var45);

  }

  public void test75() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest2.test75");


    java.lang.String var1 = org.jsecurity.util.StringUtils.clean("5642a434-0d22-4b09-92db-5a40904768c2");
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var1 + "' != '" + "5642a434-0d22-4b09-92db-5a40904768c2"+ "'", var1.equals("5642a434-0d22-4b09-92db-5a40904768c2"));

  }

  public void test76() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest2.test76");


    org.jsecurity.authz.AuthorizationException var1 = new org.jsecurity.authz.AuthorizationException();
    org.jsecurity.util.InstantiationException var2 = new org.jsecurity.util.InstantiationException("c07dcc1f-69d1-439f-8202-c1ed75146e6e", (java.lang.Throwable)var1);

  }

  public void test77() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest2.test77");


    org.jsecurity.realm.activedirectory.ActiveDirectoryRealm var0 = new org.jsecurity.realm.activedirectory.ActiveDirectoryRealm();
    var0.initAuthorizationCache();
    var0.setSearchBase("dd\uFFFD");
    var0.setSystemUsername("");
    org.jsecurity.realm.text.TextConfigurationRealm var6 = new org.jsecurity.realm.text.TextConfigurationRealm();
    java.io.InputStream var8 = org.jsecurity.util.ClassUtils.getResourceAsStream("");
    java.lang.Object[] var9 = new java.lang.Object[] { var8};
    java.util.List var10 = org.jsecurity.util.CollectionUtils.asList(var9);
    org.jsecurity.authc.pam.ModularRealmAuthenticator var11 = new org.jsecurity.authc.pam.ModularRealmAuthenticator(var10);
    org.jsecurity.subject.SimplePrincipalCollection var13 = new org.jsecurity.subject.SimplePrincipalCollection((java.util.Collection)var10, "org.jsecurity.authz.UnauthorizedException: org.jsecurity.session.ExpiredSessionException: ");
    org.jsecurity.session.UnknownSessionException var18 = new org.jsecurity.session.UnknownSessionException("dd\uFFFD", (java.io.Serializable)100.0f);
    org.jsecurity.session.SessionException var20 = new org.jsecurity.session.SessionException("dd\uFFFD", (java.lang.Throwable)var18, (java.io.Serializable)0);
    org.jsecurity.session.SessionException var21 = new org.jsecurity.session.SessionException("dd\uFFFD", (java.lang.Throwable)var18);
    var13.add((java.lang.Object)var21, "org.jsecurity.config.ConfigurationException: dd\uFFFD");
    var6.onLogout((org.jsecurity.subject.PrincipalCollection)var13);
    org.jsecurity.cache.HashtableCacheManager var25 = new org.jsecurity.cache.HashtableCacheManager();
    org.jsecurity.cache.Cache var27 = var25.getCache("\u0000\u0000");
    var6.setAuthorizationCache(var27);
    org.jsecurity.codec.CodecException var31 = new org.jsecurity.codec.CodecException("dd\uFFFD");
    org.jsecurity.authc.ConcurrentAccessException var32 = new org.jsecurity.authc.ConcurrentAccessException("org.jsecurity.authz.UnauthorizedException: org.jsecurity.session.ExpiredSessionException: ", (java.lang.Throwable)var31);
    org.jsecurity.subject.SimplePrincipalCollection var34 = new org.jsecurity.subject.SimplePrincipalCollection((java.lang.Object)var31, "");
    var6.onLogout((org.jsecurity.subject.PrincipalCollection)var34);
    boolean var36 = var34.isEmpty();
    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      var0.checkPermission((org.jsecurity.subject.PrincipalCollection)var34, "0220fc2d-2559-421b-822b-6ed559f96c25");
      fail("Expected exception of type java.util.NoSuchElementException");
    } catch (java.util.NoSuchElementException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var8);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var9);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var10);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var27);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var36 == false);

  }

  public void test78() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest2.test78");


    org.jsecurity.config.ConfigurationException var1 = new org.jsecurity.config.ConfigurationException("Y2E3M2QxYTQtNzA2ZS00MmU3LTk4MGYtODk2ZDNiMTUzZGU4");

  }

  public void test79() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest2.test79");


    org.jsecurity.authz.UnauthorizedException var1 = new org.jsecurity.authz.UnauthorizedException("944eaa9e-a16a-40cf-bdfa-a6f7f9bf6e53");

  }

  public void test80() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest2.test80");


    byte[] var3 = new byte[] { (byte)100, (byte)100, (byte)(-1)};
    java.lang.String var4 = org.jsecurity.codec.CodecSupport.toString(var3);
    byte[] var6 = org.jsecurity.codec.Base64.encode(var3, false);
    byte[] var7 = org.jsecurity.codec.Base64.decode(var3);
    boolean var8 = org.jsecurity.codec.Base64.isBase64(var3);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var3);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var4 + "' != '" + "dd\uFFFD"+ "'", var4.equals("dd\uFFFD"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var6);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var7);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var8 == false);

  }

  public void test81() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest2.test81");


    org.jsecurity.codec.CodecException var2 = new org.jsecurity.codec.CodecException("dd\uFFFD");
    org.jsecurity.authc.ConcurrentAccessException var3 = new org.jsecurity.authc.ConcurrentAccessException("org.jsecurity.authz.UnauthorizedException: org.jsecurity.session.ExpiredSessionException: ", (java.lang.Throwable)var2);
    org.jsecurity.subject.SimplePrincipalCollection var5 = new org.jsecurity.subject.SimplePrincipalCollection((java.lang.Object)var2, "");
    org.jsecurity.authc.pam.FirstSuccessfulAuthenticationStrategy var6 = new org.jsecurity.authc.pam.FirstSuccessfulAuthenticationStrategy();
    org.jsecurity.authz.UnauthorizedException var8 = new org.jsecurity.authz.UnauthorizedException("org.jsecurity.config.ConfigurationException: dd\uFFFD");
    java.lang.Throwable[] var9 = var8.getSuppressed();
    java.util.List var10 = org.jsecurity.util.CollectionUtils.asList((java.lang.Object[])var9);
    org.jsecurity.authc.UsernamePasswordToken var11 = new org.jsecurity.authc.UsernamePasswordToken();
    java.lang.String var12 = var11.getUsername();
    java.net.InetAddress var13 = var11.getInetAddress();
    org.jsecurity.authc.AuthenticationInfo var14 = var6.beforeAllAttempts((java.util.Collection)var10, (org.jsecurity.authc.AuthenticationToken)var11);
    org.jsecurity.session.UnknownSessionException var19 = new org.jsecurity.session.UnknownSessionException("dd\uFFFD", (java.io.Serializable)100.0f);
    org.jsecurity.subject.SubjectException var20 = new org.jsecurity.subject.SubjectException("dd\uFFFD", (java.lang.Throwable)var19);
    org.jsecurity.io.SerializationException var21 = new org.jsecurity.io.SerializationException("", (java.lang.Throwable)var20);
    java.lang.Throwable[] var22 = var20.getSuppressed();
    java.util.Set var23 = org.jsecurity.util.CollectionUtils.asSet((java.lang.Object[])var22);
    org.jsecurity.authc.SimpleAccount var24 = new org.jsecurity.authc.SimpleAccount((org.jsecurity.subject.PrincipalCollection)var5, (java.lang.Object)var10, var23);
    var24.addStringPermission("org.jsecurity.config.ConfigurationException: dd\uFFFD");
    org.jsecurity.crypto.hash.Sha256Hash var29 = new org.jsecurity.crypto.hash.Sha256Hash((java.lang.Object)"org.jsecurity.config.ConfigurationException: dd\uFFFD", (java.lang.Object)"org.jsecurity.authz.UnauthorizedException: org.jsecurity.session.ExpiredSessionException: ", 1);
    java.lang.String var30 = var29.toBase64();
    byte[] var32 = org.jsecurity.codec.CodecSupport.toBytes("ca73d1a4-706e-42e7-980f-896d3b153de8");
    var29.setBytes(var32);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var9);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var10);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var12);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var13);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var14);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var22);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var23);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var30 + "' != '" + "NfxhYN7ItBfRAmDBmprtU73ghfEEPpcDJrHPkZ06wiY="+ "'", var30.equals("NfxhYN7ItBfRAmDBmprtU73ghfEEPpcDJrHPkZ06wiY="));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var32);

  }

  public void test82() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest2.test82");


    org.jsecurity.session.UnknownSessionException var5 = new org.jsecurity.session.UnknownSessionException("dd\uFFFD", (java.io.Serializable)100.0f);
    org.jsecurity.subject.SubjectException var6 = new org.jsecurity.subject.SubjectException("dd\uFFFD", (java.lang.Throwable)var5);
    org.jsecurity.session.InvalidSessionException var7 = new org.jsecurity.session.InvalidSessionException("hi!", (java.lang.Throwable)var6);
    org.jsecurity.JSecurityException var8 = new org.jsecurity.JSecurityException("ZGT/", (java.lang.Throwable)var7);
    java.io.Serializable var9 = var7.getSessionId();
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var9);

  }

  public void test83() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest2.test83");


    org.jsecurity.cache.HashtableCache var1 = new org.jsecurity.cache.HashtableCache("783ccd31-48a8-42dd-890f-df885a7baaff");
    java.lang.String var2 = var1.toString();
    java.util.Set var3 = var1.values();
    int var4 = var1.size();
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var2 + "' != '" + "HashtableCache [783ccd31-48a8-42dd-890f-df885a7baaff]"+ "'", var2.equals("HashtableCache [783ccd31-48a8-42dd-890f-df885a7baaff]"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var3);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var4 == 0);

  }

  public void test84() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest2.test84");


    org.jsecurity.mgt.DefaultSecurityManager var0 = new org.jsecurity.mgt.DefaultSecurityManager();
    java.io.InputStream var2 = org.jsecurity.util.ClassUtils.getResourceAsStream("");
    java.lang.Object[] var3 = new java.lang.Object[] { var2};
    java.util.List var4 = org.jsecurity.util.CollectionUtils.asList(var3);
    org.jsecurity.authc.pam.ModularRealmAuthenticator var5 = new org.jsecurity.authc.pam.ModularRealmAuthenticator(var4);
    org.jsecurity.authc.pam.AllSuccessfulModularAuthenticationStrategy var6 = new org.jsecurity.authc.pam.AllSuccessfulModularAuthenticationStrategy();
    var5.setModularAuthenticationStrategy((org.jsecurity.authc.pam.ModularAuthenticationStrategy)var6);
    org.jsecurity.authz.SimpleAuthorizationInfo var8 = new org.jsecurity.authz.SimpleAuthorizationInfo();
    var8.addStringPermission("hi!");
    java.io.InputStream var12 = org.jsecurity.util.ClassUtils.getResourceAsStream("");
    java.lang.Object[] var13 = new java.lang.Object[] { var12};
    java.util.List var14 = org.jsecurity.util.CollectionUtils.asList(var13);
    var8.addRoles((java.util.Collection)var14);
    var5.setAuthenticationListeners((java.util.Collection)var14);
    var0.setSessionListeners((java.util.Collection)var14);
    org.jsecurity.authc.pam.ModularRealmAuthenticator var18 = new org.jsecurity.authc.pam.ModularRealmAuthenticator();
    org.jsecurity.authz.permission.InvalidPermissionStringException var21 = new org.jsecurity.authz.permission.InvalidPermissionStringException("", "dd\uFFFD");
    org.jsecurity.JSecurityException var23 = new org.jsecurity.JSecurityException("");
    org.jsecurity.authc.SimpleAuthenticationInfo var25 = new org.jsecurity.authc.SimpleAuthenticationInfo((java.lang.Object)var21, (java.lang.Object)"", "org.jsecurity.authz.UnauthorizedException: org.jsecurity.session.ExpiredSessionException: ");
    org.jsecurity.subject.PrincipalCollection var26 = var25.getPrincipals();
    var18.onLogout(var26);
    var0.setAuthenticator((org.jsecurity.authc.Authenticator)var18);
    org.jsecurity.io.IniResource var31 = new org.jsecurity.io.IniResource();
    java.lang.String var32 = var31.getCharsetName();
    org.jsecurity.session.UnknownSessionException var33 = new org.jsecurity.session.UnknownSessionException("", (java.io.Serializable)var31);
    org.jsecurity.authz.UnauthorizedException var34 = new org.jsecurity.authz.UnauthorizedException("org.jsecurity.config.ConfigurationException: dd\uFFFD", (java.lang.Throwable)var33);
    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      org.jsecurity.session.Session var35 = var0.getSession((java.io.Serializable)var33);
      fail("Expected exception of type org.jsecurity.session.InvalidSessionException");
    } catch (org.jsecurity.session.InvalidSessionException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var2);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var3);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var4);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var12);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var13);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var14);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var26);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var32);

  }

  public void test85() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest2.test85");


    char[] var2 = new char[] { };
    org.jsecurity.authc.UsernamePasswordToken var4 = new org.jsecurity.authc.UsernamePasswordToken("hi!", var2, true);
    byte[] var5 = org.jsecurity.codec.Hex.decode(var2);
    byte[] var6 = org.jsecurity.codec.Hex.decode(var2);
    org.jsecurity.authc.UsernamePasswordToken var8 = new org.jsecurity.authc.UsernamePasswordToken("ZGT/", var2, false);
    var8.setUsername("ff1bb54d-80f9-4308-a260-ff3ddf1355e9");
    boolean var11 = var8.isRememberMe();
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var2);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var5);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var6);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var11 == false);

  }

  public void test86() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest2.test86");


    org.jsecurity.io.IniResource var0 = new org.jsecurity.io.IniResource();
    java.util.Map var1 = var0.getSections();
    java.util.Map var2 = var0.getSections();
    java.lang.String var3 = var0.getCharsetName();
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var1);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var2);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var3);

  }

  public void test87() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest2.test87");


    org.jsecurity.config.IniConfiguration var0 = new org.jsecurity.config.IniConfiguration();
    var0.setConfigUrl("hi!");
    var0.setConfig("org.jsecurity.realm.SimpleAccountRealm-52-authorization");
    org.jsecurity.mgt.SecurityManager var5 = var0.getSecurityManager();
    org.jsecurity.mgt.SecurityManager var6 = var0.getSecurityManager();
    java.io.InputStream var8 = org.jsecurity.util.ClassUtils.getResourceAsStream("");
    org.jsecurity.io.ResourceUtils.close(var8);
    org.jsecurity.io.ResourceUtils.close(var8);
    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      var0.load(var8);
      fail("Expected exception of type org.jsecurity.config.ConfigurationException");
    } catch (org.jsecurity.config.ConfigurationException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var5);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var6);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var8);

  }

  public void test88() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest2.test88");


    org.jsecurity.realm.SimpleAccountRealm var1 = new org.jsecurity.realm.SimpleAccountRealm("hi!");
    java.lang.Class var2 = var1.getAuthenticationTokenClass();
    org.jsecurity.session.mgt.eis.MemorySessionDAO var3 = new org.jsecurity.session.mgt.eis.MemorySessionDAO();
    org.jsecurity.cache.Cache var4 = var3.getActiveSessionsCache();
    org.jsecurity.cache.CacheManager var5 = var3.getCacheManager();
    var1.setCacheManager(var5);
    org.jsecurity.cache.Cache var7 = var1.getAuthorizationCache();
    boolean var9 = var1.accountExists("a2b823b1e72eae2b727289df8a00a89df8a0bab6ad8a89c4c5c7a9b62a270000");
    org.jsecurity.mgt.DefaultSecurityManager var10 = new org.jsecurity.mgt.DefaultSecurityManager((org.jsecurity.realm.Realm)var1);
    org.jsecurity.authc.pam.FirstSuccessfulAuthenticationStrategy var11 = new org.jsecurity.authc.pam.FirstSuccessfulAuthenticationStrategy();
    var10.setModularAuthenticationStrategy((org.jsecurity.authc.pam.ModularAuthenticationStrategy)var11);
    org.jsecurity.authz.Authorizer var13 = var10.getAuthorizer();
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var2);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var4);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var5);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var7);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var9 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var13);

  }

  public void test89() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest2.test89");


    org.jsecurity.session.mgt.DefaultSessionManager var0 = new org.jsecurity.session.mgt.DefaultSessionManager();
    org.jsecurity.mgt.DefaultSecurityManager var1 = new org.jsecurity.mgt.DefaultSecurityManager();
    org.jsecurity.authz.permission.WildcardPermissionResolver var2 = new org.jsecurity.authz.permission.WildcardPermissionResolver();
    var1.setPermissionResolver((org.jsecurity.authz.permission.PermissionResolver)var2);
    org.jsecurity.cache.CacheManager var4 = var1.getCacheManager();
    var0.setCacheManager(var4);
    long var6 = var0.getSessionValidationInterval();
    boolean var7 = var0.isSessionValidationSchedulerEnabled();
    var0.destroy();
    org.jsecurity.session.mgt.SimpleSession var9 = new org.jsecurity.session.mgt.SimpleSession();
    org.jsecurity.io.SerializationException var12 = new org.jsecurity.io.SerializationException("org.jsecurity.config.ConfigurationException: dd\uFFFD");
    org.jsecurity.authc.AccountException var13 = new org.jsecurity.authc.AccountException("a2b823b1e72eae2b727289df8a00a89df8a0bab6ad8a89c4c5c7a9b62a270000", (java.lang.Throwable)var12);
    var9.setId((java.io.Serializable)"a2b823b1e72eae2b727289df8a00a89df8a0bab6ad8a89c4c5c7a9b62a270000");
    org.jsecurity.config.ReflectionBuilder var15 = new org.jsecurity.config.ReflectionBuilder();
    org.jsecurity.config.ReflectionBuilder var16 = new org.jsecurity.config.ReflectionBuilder();
    org.jsecurity.io.IniResource var17 = new org.jsecurity.io.IniResource();
    var17.setCharsetName("org.jsecurity.authz.UnauthorizedException: org.jsecurity.session.ExpiredSessionException: ");
    java.util.Map var20 = var17.getSections();
    java.util.Map var21 = var16.buildObjects(var20);
    org.jsecurity.config.ReflectionBuilder var22 = new org.jsecurity.config.ReflectionBuilder();
    org.jsecurity.io.IniResource var23 = new org.jsecurity.io.IniResource();
    var23.setCharsetName("org.jsecurity.authz.UnauthorizedException: org.jsecurity.session.ExpiredSessionException: ");
    java.util.Map var26 = var23.getSections();
    java.util.Map var27 = var22.buildObjects(var26);
    java.util.Map var28 = var16.buildObjects(var27);
    java.util.Map var29 = var15.buildObjects(var28);
    var9.setAttributes(var29);
    java.net.InetAddress var31 = var9.getHostAddress();
    java.io.Serializable var32 = var0.start(var31);
    org.jsecurity.codec.CodecException var35 = new org.jsecurity.codec.CodecException("dd\uFFFD");
    org.jsecurity.authc.ConcurrentAccessException var36 = new org.jsecurity.authc.ConcurrentAccessException("org.jsecurity.authz.UnauthorizedException: org.jsecurity.session.ExpiredSessionException: ", (java.lang.Throwable)var35);
    org.jsecurity.subject.SimplePrincipalCollection var38 = new org.jsecurity.subject.SimplePrincipalCollection((java.lang.Object)var35, "");
    java.io.InputStream var40 = org.jsecurity.util.ClassUtils.getResourceAsStream("");
    java.lang.Object[] var41 = new java.lang.Object[] { var40};
    java.util.List var42 = org.jsecurity.util.CollectionUtils.asList(var41);
    org.jsecurity.authc.pam.ModularRealmAuthenticator var43 = new org.jsecurity.authc.pam.ModularRealmAuthenticator(var42);
    var38.addAll((java.util.Collection)var42, "\u0000\u0000");
    java.io.InputStream var47 = org.jsecurity.util.ClassUtils.getResourceAsStream("");
    java.lang.Object[] var48 = new java.lang.Object[] { var47};
    java.util.List var49 = org.jsecurity.util.CollectionUtils.asList(var48);
    org.jsecurity.authc.pam.ModularRealmAuthenticator var50 = new org.jsecurity.authc.pam.ModularRealmAuthenticator(var49);
    var38.addAll((java.util.Collection)var49, "\u0000\u0000");
    org.jsecurity.realm.SimpleAccountRealm var54 = new org.jsecurity.realm.SimpleAccountRealm("hi!");
    java.lang.Class var55 = var54.getAuthenticationTokenClass();
    java.util.Collection var56 = org.jsecurity.util.CollectionUtils.emptyCollection(var55);
    java.lang.Object var57 = org.jsecurity.util.ClassUtils.newInstance(var55);
    java.util.Collection var58 = var38.byType(var55);
    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      java.util.Date var59 = var0.getStartTimestamp((java.io.Serializable)var38);
      fail("Expected exception of type org.jsecurity.session.UnknownSessionException");
    } catch (org.jsecurity.session.UnknownSessionException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var4);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var6 == 3600000L);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var7 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var20);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var21);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var26);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var27);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var28);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var29);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var31);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var32 + "' != '" + "c117286e-14f1-488e-aeeb-fd627a81563a"+ "'", var32.equals("c117286e-14f1-488e-aeeb-fd627a81563a"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var40);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var41);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var42);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var47);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var48);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var49);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var55);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var56);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var57);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var58);

  }

  public void test90() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest2.test90");


    org.jsecurity.session.mgt.eis.MemorySessionDAO var0 = new org.jsecurity.session.mgt.eis.MemorySessionDAO();
    org.jsecurity.cache.Cache var1 = var0.getActiveSessionsCache();
    org.jsecurity.cache.CacheManager var2 = var0.getCacheManager();
    org.jsecurity.cache.HashtableCacheManager var3 = new org.jsecurity.cache.HashtableCacheManager();
    org.jsecurity.cache.Cache var5 = var3.getCache("\u0000\u0000");
    var0.setActiveSessionsCache(var5);
    java.io.InputStream var8 = org.jsecurity.util.ClassUtils.getResourceAsStream("");
    java.lang.Object[] var9 = new java.lang.Object[] { var8};
    java.util.List var10 = org.jsecurity.util.CollectionUtils.asList(var9);
    org.jsecurity.authc.pam.ModularRealmAuthenticator var11 = new org.jsecurity.authc.pam.ModularRealmAuthenticator(var10);
    org.jsecurity.authc.pam.AllSuccessfulModularAuthenticationStrategy var12 = new org.jsecurity.authc.pam.AllSuccessfulModularAuthenticationStrategy();
    var11.setModularAuthenticationStrategy((org.jsecurity.authc.pam.ModularAuthenticationStrategy)var12);
    org.jsecurity.authz.SimpleAuthorizationInfo var14 = new org.jsecurity.authz.SimpleAuthorizationInfo();
    var14.addStringPermission("hi!");
    java.io.InputStream var18 = org.jsecurity.util.ClassUtils.getResourceAsStream("");
    java.lang.Object[] var19 = new java.lang.Object[] { var18};
    java.util.List var20 = org.jsecurity.util.CollectionUtils.asList(var19);
    var14.addRoles((java.util.Collection)var20);
    var11.setAuthenticationListeners((java.util.Collection)var20);
    org.jsecurity.realm.activedirectory.ActiveDirectoryRealm var23 = new org.jsecurity.realm.activedirectory.ActiveDirectoryRealm();
    var23.setPrincipalSuffix("");
    var11.setRealm((org.jsecurity.realm.Realm)var23);
    org.jsecurity.cache.HashtableCacheManager var27 = new org.jsecurity.cache.HashtableCacheManager();
    org.jsecurity.cache.Cache var29 = var27.getCache("\u0000\u0000");
    var23.setAuthorizationCache(var29);
    var0.setActiveSessionsCache(var29);
    org.jsecurity.session.mgt.SimpleSession var32 = new org.jsecurity.session.mgt.SimpleSession();
    java.io.Serializable var33 = var0.create((org.jsecurity.session.Session)var32);
    org.jsecurity.session.mgt.SimpleSession var34 = new org.jsecurity.session.mgt.SimpleSession();
    var34.touch();
    var34.validate();
    org.jsecurity.session.mgt.SimpleSession var37 = new org.jsecurity.session.mgt.SimpleSession();
    var37.setTimeout((-1L));
    org.jsecurity.session.mgt.SimpleSession var40 = new org.jsecurity.session.mgt.SimpleSession();
    java.util.Date var41 = var40.getLastAccessTime();
    var37.setLastAccessTime(var41);
    org.jsecurity.session.mgt.SimpleSession var43 = new org.jsecurity.session.mgt.SimpleSession();
    java.util.Date var44 = var43.getLastAccessTime();
    var37.setStopTimestamp(var44);
    var34.setLastAccessTime(var44);
    var32.setLastAccessTime(var44);
    org.jsecurity.session.mgt.ImmutableProxiedSession var48 = new org.jsecurity.session.mgt.ImmutableProxiedSession((org.jsecurity.session.Session)var32);
    java.util.Date var49 = var48.getStartTimestamp();
    java.util.Date var50 = var48.getStartTimestamp();
    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      var48.touch();
      fail("Expected exception of type org.jsecurity.session.InvalidSessionException");
    } catch (org.jsecurity.session.InvalidSessionException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var1);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var2);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var5);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var8);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var9);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var10);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var18);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var19);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var20);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var29);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var33 + "' != '" + "fe5a23dd-e203-4e07-9d9f-52702a4e207e"+ "'", var33.equals("fe5a23dd-e203-4e07-9d9f-52702a4e207e"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var41);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var44);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var49);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var50);

  }

  public void test91() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest2.test91");


    org.jsecurity.session.mgt.DefaultSessionManager var0 = new org.jsecurity.session.mgt.DefaultSessionManager();
    org.jsecurity.session.mgt.SessionValidationScheduler var1 = var0.getSessionValidationScheduler();
    long var2 = var0.getGlobalSessionTimeout();
    org.jsecurity.authz.SimpleAuthorizingAccount var3 = new org.jsecurity.authz.SimpleAuthorizingAccount();
    org.jsecurity.authz.SimpleAuthorizationInfo var4 = new org.jsecurity.authz.SimpleAuthorizationInfo();
    var4.addRole("a2b823b1e72eae2b727289df8a00a89df8a0bab6ad8a89c4c5c7a9b62a270000");
    org.jsecurity.authz.SimpleAuthorizationInfo var7 = new org.jsecurity.authz.SimpleAuthorizationInfo();
    var7.addRole("a2b823b1e72eae2b727289df8a00a89df8a0bab6ad8a89c4c5c7a9b62a270000");
    org.jsecurity.session.UnknownSessionException var14 = new org.jsecurity.session.UnknownSessionException("dd\uFFFD", (java.io.Serializable)100.0f);
    org.jsecurity.subject.SubjectException var15 = new org.jsecurity.subject.SubjectException("dd\uFFFD", (java.lang.Throwable)var14);
    org.jsecurity.io.SerializationException var16 = new org.jsecurity.io.SerializationException("", (java.lang.Throwable)var15);
    java.lang.Throwable[] var17 = var15.getSuppressed();
    java.util.Set var18 = org.jsecurity.util.CollectionUtils.asSet((java.lang.Object[])var17);
    var7.addRoles((java.util.Collection)var18);
    var4.setObjectPermissions(var18);
    var3.setSimpleRoles(var18);
    java.util.Set var22 = var3.getPermissions();
    org.jsecurity.authz.SimpleAuthorizationInfo var23 = new org.jsecurity.authz.SimpleAuthorizationInfo();
    var23.addRole("a2b823b1e72eae2b727289df8a00a89df8a0bab6ad8a89c4c5c7a9b62a270000");
    org.jsecurity.authz.SimpleAuthorizationInfo var26 = new org.jsecurity.authz.SimpleAuthorizationInfo();
    var26.addRole("a2b823b1e72eae2b727289df8a00a89df8a0bab6ad8a89c4c5c7a9b62a270000");
    org.jsecurity.session.UnknownSessionException var33 = new org.jsecurity.session.UnknownSessionException("dd\uFFFD", (java.io.Serializable)100.0f);
    org.jsecurity.subject.SubjectException var34 = new org.jsecurity.subject.SubjectException("dd\uFFFD", (java.lang.Throwable)var33);
    org.jsecurity.io.SerializationException var35 = new org.jsecurity.io.SerializationException("", (java.lang.Throwable)var34);
    java.lang.Throwable[] var36 = var34.getSuppressed();
    java.util.Set var37 = org.jsecurity.util.CollectionUtils.asSet((java.lang.Object[])var36);
    var26.addRoles((java.util.Collection)var37);
    var23.setObjectPermissions(var37);
    var3.checkRoles((java.util.Collection)var37);
    org.jsecurity.realm.text.PropertiesRealm var41 = new org.jsecurity.realm.text.PropertiesRealm();
    org.jsecurity.realm.activedirectory.ActiveDirectoryRealm var42 = new org.jsecurity.realm.activedirectory.ActiveDirectoryRealm();
    org.jsecurity.authc.credential.Sha256CredentialsMatcher var43 = new org.jsecurity.authc.credential.Sha256CredentialsMatcher();
    var42.setCredentialsMatcher((org.jsecurity.authc.credential.CredentialsMatcher)var43);
    java.lang.String var45 = var42.getAuthorizationCacheName();
    var42.setPrincipalSuffix("org.jsecurity.config.ConfigurationException: dd\uFFFD");
    org.jsecurity.authz.permission.PermissionResolver var48 = var42.getPermissionResolver();
    var41.setPermissionResolver(var48);
    java.util.Set var50 = org.jsecurity.util.PermissionUtils.resolvePermissions((java.util.Collection)var37, var48);
    var0.setSessionListeners((java.util.Collection)var37);
    boolean var52 = var0.isSessionValidationSchedulerEnabled();
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var2 == 1800000L);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var17);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var18);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var22);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var36);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var37);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var45);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var48);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var50);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var52 == true);

  }

  public void test92() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest2.test92");


    org.jsecurity.authz.UnauthorizedException var2 = new org.jsecurity.authz.UnauthorizedException("ZGT/");
    org.jsecurity.session.UnknownSessionException var3 = new org.jsecurity.session.UnknownSessionException("64d6fb04-9396-4bf8-b814-b9a28f011122", (java.io.Serializable)var2);

  }

  public void test93() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest2.test93");


    org.jsecurity.mgt.DefaultSecurityManager var0 = new org.jsecurity.mgt.DefaultSecurityManager();
    java.io.InputStream var2 = org.jsecurity.util.ClassUtils.getResourceAsStream("");
    java.lang.Object[] var3 = new java.lang.Object[] { var2};
    java.util.List var4 = org.jsecurity.util.CollectionUtils.asList(var3);
    org.jsecurity.authc.pam.ModularRealmAuthenticator var5 = new org.jsecurity.authc.pam.ModularRealmAuthenticator(var4);
    org.jsecurity.authc.pam.AllSuccessfulModularAuthenticationStrategy var6 = new org.jsecurity.authc.pam.AllSuccessfulModularAuthenticationStrategy();
    var5.setModularAuthenticationStrategy((org.jsecurity.authc.pam.ModularAuthenticationStrategy)var6);
    org.jsecurity.authz.SimpleAuthorizationInfo var8 = new org.jsecurity.authz.SimpleAuthorizationInfo();
    var8.addStringPermission("hi!");
    java.io.InputStream var12 = org.jsecurity.util.ClassUtils.getResourceAsStream("");
    java.lang.Object[] var13 = new java.lang.Object[] { var12};
    java.util.List var14 = org.jsecurity.util.CollectionUtils.asList(var13);
    var8.addRoles((java.util.Collection)var14);
    var5.setAuthenticationListeners((java.util.Collection)var14);
    var0.setSessionListeners((java.util.Collection)var14);
    org.jsecurity.authc.pam.ModularRealmAuthenticator var18 = new org.jsecurity.authc.pam.ModularRealmAuthenticator();
    org.jsecurity.authz.permission.InvalidPermissionStringException var21 = new org.jsecurity.authz.permission.InvalidPermissionStringException("", "dd\uFFFD");
    org.jsecurity.JSecurityException var23 = new org.jsecurity.JSecurityException("");
    org.jsecurity.authc.SimpleAuthenticationInfo var25 = new org.jsecurity.authc.SimpleAuthenticationInfo((java.lang.Object)var21, (java.lang.Object)"", "org.jsecurity.authz.UnauthorizedException: org.jsecurity.session.ExpiredSessionException: ");
    org.jsecurity.subject.PrincipalCollection var26 = var25.getPrincipals();
    var18.onLogout(var26);
    var0.setAuthenticator((org.jsecurity.authc.Authenticator)var18);
    org.jsecurity.realm.activedirectory.ActiveDirectoryRealm var29 = new org.jsecurity.realm.activedirectory.ActiveDirectoryRealm();
    var29.init();
    var29.setSystemPassword("dd\uFFFD");
    org.jsecurity.authz.aop.GuestAnnotationHandler var33 = new org.jsecurity.authz.aop.GuestAnnotationHandler();
    java.lang.Class var34 = var33.getAnnotationClass();
    var29.setAuthenticationTokenClass(var34);
    org.jsecurity.mgt.DefaultSecurityManager var36 = new org.jsecurity.mgt.DefaultSecurityManager((org.jsecurity.realm.Realm)var29);
    org.jsecurity.cache.CacheManager var37 = var29.getCacheManager();
    org.jsecurity.realm.text.PropertiesRealm var38 = new org.jsecurity.realm.text.PropertiesRealm(var37);
    var0.setRealm((org.jsecurity.realm.Realm)var38);
    org.jsecurity.authc.pam.FirstSuccessfulAuthenticationStrategy var40 = new org.jsecurity.authc.pam.FirstSuccessfulAuthenticationStrategy();
    org.jsecurity.authz.UnauthorizedException var42 = new org.jsecurity.authz.UnauthorizedException("org.jsecurity.config.ConfigurationException: dd\uFFFD");
    java.lang.Throwable[] var43 = var42.getSuppressed();
    java.util.List var44 = org.jsecurity.util.CollectionUtils.asList((java.lang.Object[])var43);
    org.jsecurity.authc.UsernamePasswordToken var45 = new org.jsecurity.authc.UsernamePasswordToken();
    java.lang.String var46 = var45.getUsername();
    java.net.InetAddress var47 = var45.getInetAddress();
    org.jsecurity.authc.AuthenticationInfo var48 = var40.beforeAllAttempts((java.util.Collection)var44, (org.jsecurity.authc.AuthenticationToken)var45);
    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      org.jsecurity.subject.Subject var49 = var0.login((org.jsecurity.authc.AuthenticationToken)var45);
      fail("Expected exception of type org.jsecurity.authc.AuthenticationException");
    } catch (org.jsecurity.authc.AuthenticationException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var2);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var3);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var4);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var12);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var13);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var14);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var26);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var34);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var37);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var43);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var44);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var46);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var47);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var48);

  }

  public void test94() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest2.test94");


    org.jsecurity.session.UnknownSessionException var4 = new org.jsecurity.session.UnknownSessionException("dd\uFFFD", (java.io.Serializable)100.0f);
    org.jsecurity.subject.SubjectException var5 = new org.jsecurity.subject.SubjectException("dd\uFFFD", (java.lang.Throwable)var4);
    org.jsecurity.io.SerializationException var6 = new org.jsecurity.io.SerializationException("", (java.lang.Throwable)var5);
    org.jsecurity.authc.AccountException var7 = new org.jsecurity.authc.AccountException((java.lang.Throwable)var5);

  }

  public void test95() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest2.test95");


    org.jsecurity.realm.activedirectory.ActiveDirectoryRealm var0 = new org.jsecurity.realm.activedirectory.ActiveDirectoryRealm();
    org.jsecurity.authc.credential.Sha256CredentialsMatcher var1 = new org.jsecurity.authc.credential.Sha256CredentialsMatcher();
    var0.setCredentialsMatcher((org.jsecurity.authc.credential.CredentialsMatcher)var1);
    java.lang.String var3 = var0.getAuthorizationCacheName();
    var0.setUrl("hi!");
    org.jsecurity.realm.ldap.DefaultLdapContextFactory var6 = new org.jsecurity.realm.ldap.DefaultLdapContextFactory();
    var0.setLdapContextFactory((org.jsecurity.realm.ldap.LdapContextFactory)var6);
    org.jsecurity.config.ReflectionBuilder var8 = new org.jsecurity.config.ReflectionBuilder();
    org.jsecurity.io.IniResource var9 = new org.jsecurity.io.IniResource();
    var9.setCharsetName("org.jsecurity.authz.UnauthorizedException: org.jsecurity.session.ExpiredSessionException: ");
    java.util.Map var12 = var9.getSections();
    java.util.Map var13 = var8.buildObjects(var12);
    org.jsecurity.config.ReflectionBuilder var14 = new org.jsecurity.config.ReflectionBuilder();
    org.jsecurity.io.IniResource var15 = new org.jsecurity.io.IniResource();
    var15.setCharsetName("org.jsecurity.authz.UnauthorizedException: org.jsecurity.session.ExpiredSessionException: ");
    java.util.Map var18 = var15.getSections();
    java.util.Map var19 = var14.buildObjects(var18);
    java.util.Map var20 = var8.buildObjects(var19);
    java.util.Map var21 = var8.getObjects();
    var6.setAdditionalEnvironment(var21);
    var6.setSystemUsername("ff9f2014-649d-414b-8132-f4962e7ca4d7");
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var3);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var12);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var13);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var18);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var19);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var20);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var21);

  }

  public void test96() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest2.test96");


    byte[] var1 = org.jsecurity.codec.Base64.decode("hi!");
    java.lang.String var2 = org.jsecurity.codec.Base64.encodeToString(var1);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var2 + "' != '" + "AAA="+ "'", var2.equals("AAA="));

  }

  public void test97() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest2.test97");


    org.jsecurity.crypto.hash.Md5Hash var1 = org.jsecurity.crypto.hash.Md5Hash.fromBase64String("6464ff");
    org.jsecurity.crypto.BlowfishCipher var2 = new org.jsecurity.crypto.BlowfishCipher();
    java.security.Key var3 = org.jsecurity.crypto.BlowfishCipher.generateNewKey();
    var2.setKey(var3);
    java.security.Key var5 = org.jsecurity.crypto.BlowfishCipher.generateNewKey();
    var2.setKey(var5);
    byte[] var10 = new byte[] { (byte)100, (byte)100, (byte)(-1)};
    java.lang.String var11 = org.jsecurity.codec.CodecSupport.toString(var10);
    char[] var12 = org.jsecurity.codec.CodecSupport.toChars(var10);
    boolean var13 = org.jsecurity.codec.Base64.isBase64(var10);
    boolean var14 = org.jsecurity.codec.Base64.isBase64(var10);
    boolean var15 = org.jsecurity.codec.Base64.isBase64(var10);
    java.lang.String var16 = org.jsecurity.codec.Hex.encodeToString(var10);
    byte[] var20 = new byte[] { (byte)100, (byte)100, (byte)(-1)};
    java.lang.String var21 = org.jsecurity.codec.CodecSupport.toString(var20);
    char[] var22 = org.jsecurity.codec.CodecSupport.toChars(var20);
    boolean var23 = org.jsecurity.codec.Base64.isBase64(var20);
    boolean var24 = org.jsecurity.codec.Base64.isBase64(var20);
    boolean var25 = org.jsecurity.codec.Base64.isBase64(var20);
    java.lang.String var26 = org.jsecurity.codec.Base64.encodeToString(var20);
    byte[] var27 = var2.encrypt(var10, var20);
    org.jsecurity.io.DefaultSerializer var28 = new org.jsecurity.io.DefaultSerializer();
    org.jsecurity.authz.SimpleRole var29 = new org.jsecurity.authz.SimpleRole();
    byte[] var30 = var28.serialize((java.lang.Object)var29);
    byte[] var34 = new byte[] { (byte)100, (byte)100, (byte)(-1)};
    java.lang.String var35 = org.jsecurity.codec.CodecSupport.toString(var34);
    char[] var36 = org.jsecurity.codec.CodecSupport.toChars(var34);
    boolean var37 = org.jsecurity.codec.Base64.isBase64(var34);
    boolean var38 = org.jsecurity.codec.Base64.isBase64(var34);
    boolean var39 = org.jsecurity.codec.Base64.isBase64(var34);
    byte[] var40 = var2.encrypt(var30, var34);
    var1.setBytes(var30);
    org.jsecurity.authz.UnauthorizedException var43 = new org.jsecurity.authz.UnauthorizedException("org.jsecurity.config.ConfigurationException: dd\uFFFD");
    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      org.jsecurity.crypto.hash.Md2Hash var45 = new org.jsecurity.crypto.hash.Md2Hash((java.lang.Object)var1, (java.lang.Object)var43, 0);
      fail("Expected exception of type org.jsecurity.codec.CodecException");
    } catch (org.jsecurity.codec.CodecException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var1);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var3);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var5);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var10);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var11 + "' != '" + "dd\uFFFD"+ "'", var11.equals("dd\uFFFD"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var12);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var13 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var14 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var15 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var16 + "' != '" + "6464ff"+ "'", var16.equals("6464ff"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var20);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var21 + "' != '" + "dd\uFFFD"+ "'", var21.equals("dd\uFFFD"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var22);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var23 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var24 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var25 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var26 + "' != '" + "ZGT/"+ "'", var26.equals("ZGT/"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var27);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var30);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var34);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var35 + "' != '" + "dd\uFFFD"+ "'", var35.equals("dd\uFFFD"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var36);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var37 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var38 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var39 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var40);

  }

  public void test98() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest2.test98");


    org.jsecurity.mgt.DefaultSecurityManager var0 = new org.jsecurity.mgt.DefaultSecurityManager();
    java.io.InputStream var2 = org.jsecurity.util.ClassUtils.getResourceAsStream("");
    java.lang.Object[] var3 = new java.lang.Object[] { var2};
    java.util.List var4 = org.jsecurity.util.CollectionUtils.asList(var3);
    org.jsecurity.authc.pam.ModularRealmAuthenticator var5 = new org.jsecurity.authc.pam.ModularRealmAuthenticator(var4);
    org.jsecurity.authc.pam.AllSuccessfulModularAuthenticationStrategy var6 = new org.jsecurity.authc.pam.AllSuccessfulModularAuthenticationStrategy();
    var5.setModularAuthenticationStrategy((org.jsecurity.authc.pam.ModularAuthenticationStrategy)var6);
    org.jsecurity.authz.SimpleAuthorizationInfo var8 = new org.jsecurity.authz.SimpleAuthorizationInfo();
    var8.addStringPermission("hi!");
    java.io.InputStream var12 = org.jsecurity.util.ClassUtils.getResourceAsStream("");
    java.lang.Object[] var13 = new java.lang.Object[] { var12};
    java.util.List var14 = org.jsecurity.util.CollectionUtils.asList(var13);
    var8.addRoles((java.util.Collection)var14);
    var5.setAuthenticationListeners((java.util.Collection)var14);
    var0.setSessionListeners((java.util.Collection)var14);
    org.jsecurity.authc.pam.ModularRealmAuthenticator var18 = new org.jsecurity.authc.pam.ModularRealmAuthenticator();
    org.jsecurity.authz.permission.InvalidPermissionStringException var21 = new org.jsecurity.authz.permission.InvalidPermissionStringException("", "dd\uFFFD");
    org.jsecurity.JSecurityException var23 = new org.jsecurity.JSecurityException("");
    org.jsecurity.authc.SimpleAuthenticationInfo var25 = new org.jsecurity.authc.SimpleAuthenticationInfo((java.lang.Object)var21, (java.lang.Object)"", "org.jsecurity.authz.UnauthorizedException: org.jsecurity.session.ExpiredSessionException: ");
    org.jsecurity.subject.PrincipalCollection var26 = var25.getPrincipals();
    var18.onLogout(var26);
    var0.setAuthenticator((org.jsecurity.authc.Authenticator)var18);
    org.jsecurity.codec.CodecException var31 = new org.jsecurity.codec.CodecException("dd\uFFFD");
    org.jsecurity.authc.ConcurrentAccessException var32 = new org.jsecurity.authc.ConcurrentAccessException("org.jsecurity.authz.UnauthorizedException: org.jsecurity.session.ExpiredSessionException: ", (java.lang.Throwable)var31);
    org.jsecurity.subject.SimplePrincipalCollection var34 = new org.jsecurity.subject.SimplePrincipalCollection((java.lang.Object)var31, "");
    org.jsecurity.authc.pam.FirstSuccessfulAuthenticationStrategy var35 = new org.jsecurity.authc.pam.FirstSuccessfulAuthenticationStrategy();
    org.jsecurity.authz.UnauthorizedException var37 = new org.jsecurity.authz.UnauthorizedException("org.jsecurity.config.ConfigurationException: dd\uFFFD");
    java.lang.Throwable[] var38 = var37.getSuppressed();
    java.util.List var39 = org.jsecurity.util.CollectionUtils.asList((java.lang.Object[])var38);
    org.jsecurity.authc.UsernamePasswordToken var40 = new org.jsecurity.authc.UsernamePasswordToken();
    java.lang.String var41 = var40.getUsername();
    java.net.InetAddress var42 = var40.getInetAddress();
    org.jsecurity.authc.AuthenticationInfo var43 = var35.beforeAllAttempts((java.util.Collection)var39, (org.jsecurity.authc.AuthenticationToken)var40);
    org.jsecurity.session.UnknownSessionException var48 = new org.jsecurity.session.UnknownSessionException("dd\uFFFD", (java.io.Serializable)100.0f);
    org.jsecurity.subject.SubjectException var49 = new org.jsecurity.subject.SubjectException("dd\uFFFD", (java.lang.Throwable)var48);
    org.jsecurity.io.SerializationException var50 = new org.jsecurity.io.SerializationException("", (java.lang.Throwable)var49);
    java.lang.Throwable[] var51 = var49.getSuppressed();
    java.util.Set var52 = org.jsecurity.util.CollectionUtils.asSet((java.lang.Object[])var51);
    org.jsecurity.authc.SimpleAccount var53 = new org.jsecurity.authc.SimpleAccount((org.jsecurity.subject.PrincipalCollection)var34, (java.lang.Object)var39, var52);
    java.io.InputStream var55 = org.jsecurity.util.ClassUtils.getResourceAsStream("");
    java.lang.Object[] var56 = new java.lang.Object[] { var55};
    java.util.List var57 = org.jsecurity.util.CollectionUtils.asList(var56);
    org.jsecurity.authc.pam.ModularRealmAuthenticator var58 = new org.jsecurity.authc.pam.ModularRealmAuthenticator(var57);
    org.jsecurity.subject.SimplePrincipalCollection var60 = new org.jsecurity.subject.SimplePrincipalCollection((java.util.Collection)var57, "org.jsecurity.authz.UnauthorizedException: org.jsecurity.session.ExpiredSessionException: ");
    org.jsecurity.io.ResourceException var64 = new org.jsecurity.io.ResourceException("hi!");
    org.jsecurity.authc.UnknownAccountException var65 = new org.jsecurity.authc.UnknownAccountException((java.lang.Throwable)var64);
    org.jsecurity.session.StoppedSessionException var66 = new org.jsecurity.session.StoppedSessionException("dd\uFFFD", (java.io.Serializable)var64);
    org.jsecurity.session.UnknownSessionException var67 = new org.jsecurity.session.UnknownSessionException("org.jsecurity.authz.UnauthorizedException: org.jsecurity.session.ExpiredSessionException: ", (java.lang.Throwable)var64);
    boolean var68 = var60.equals((java.lang.Object)var64);
    var34.addAll((org.jsecurity.subject.PrincipalCollection)var60);
    org.jsecurity.session.UnknownSessionException var74 = new org.jsecurity.session.UnknownSessionException("dd\uFFFD", (java.io.Serializable)100.0f);
    org.jsecurity.subject.SubjectException var75 = new org.jsecurity.subject.SubjectException("dd\uFFFD", (java.lang.Throwable)var74);
    org.jsecurity.io.SerializationException var76 = new org.jsecurity.io.SerializationException("", (java.lang.Throwable)var75);
    java.lang.Throwable[] var77 = var75.getSuppressed();
    java.util.List var78 = org.jsecurity.util.CollectionUtils.asList((java.lang.Object[])var77);
    boolean var79 = var0.isPermittedAll((org.jsecurity.subject.PrincipalCollection)var34, (java.util.Collection)var78);
    org.jsecurity.session.mgt.SessionManager var80 = var0.getSessionManager();
    org.jsecurity.subject.DelegatingSubject var81 = new org.jsecurity.subject.DelegatingSubject((org.jsecurity.mgt.SecurityManager)var0);
    java.lang.Object var82 = var81.getPrincipal();
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var2);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var3);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var4);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var12);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var13);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var14);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var26);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var38);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var39);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var41);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var42);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var43);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var51);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var52);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var55);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var56);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var57);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var68 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var77);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var78);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var79 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var80);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var82);

  }

  public void test99() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest2.test99");


    org.jsecurity.session.UnknownSessionException var4 = new org.jsecurity.session.UnknownSessionException("dd\uFFFD", (java.io.Serializable)100.0f);
    org.jsecurity.subject.SubjectException var5 = new org.jsecurity.subject.SubjectException("dd\uFFFD", (java.lang.Throwable)var4);
    org.jsecurity.io.SerializationException var6 = new org.jsecurity.io.SerializationException("", (java.lang.Throwable)var5);
    java.lang.Throwable[] var7 = var5.getSuppressed();
    java.lang.Throwable[] var8 = var5.getSuppressed();
    org.jsecurity.authz.SimpleAuthorizationInfo var11 = new org.jsecurity.authz.SimpleAuthorizationInfo();
    var11.addRole("a2b823b1e72eae2b727289df8a00a89df8a0bab6ad8a89c4c5c7a9b62a270000");
    org.jsecurity.session.UnknownSessionException var18 = new org.jsecurity.session.UnknownSessionException("dd\uFFFD", (java.io.Serializable)100.0f);
    org.jsecurity.subject.SubjectException var19 = new org.jsecurity.subject.SubjectException("dd\uFFFD", (java.lang.Throwable)var18);
    org.jsecurity.io.SerializationException var20 = new org.jsecurity.io.SerializationException("", (java.lang.Throwable)var19);
    java.lang.Throwable[] var21 = var19.getSuppressed();
    java.util.Set var22 = org.jsecurity.util.CollectionUtils.asSet((java.lang.Object[])var21);
    var11.addRoles((java.util.Collection)var22);
    java.io.InputStream var25 = org.jsecurity.util.ClassUtils.getResourceAsStream("");
    java.lang.Object[] var26 = new java.lang.Object[] { var25};
    java.util.List var27 = org.jsecurity.util.CollectionUtils.asList(var26);
    org.jsecurity.authc.pam.ModularRealmAuthenticator var28 = new org.jsecurity.authc.pam.ModularRealmAuthenticator(var27);
    org.jsecurity.subject.SimplePrincipalCollection var30 = new org.jsecurity.subject.SimplePrincipalCollection((java.util.Collection)var27, "org.jsecurity.authz.UnauthorizedException: org.jsecurity.session.ExpiredSessionException: ");
    org.jsecurity.session.UnknownSessionException var35 = new org.jsecurity.session.UnknownSessionException("dd\uFFFD", (java.io.Serializable)100.0f);
    org.jsecurity.session.SessionException var37 = new org.jsecurity.session.SessionException("dd\uFFFD", (java.lang.Throwable)var35, (java.io.Serializable)0);
    org.jsecurity.session.SessionException var38 = new org.jsecurity.session.SessionException("dd\uFFFD", (java.lang.Throwable)var35);
    var30.add((java.lang.Object)var38, "org.jsecurity.config.ConfigurationException: dd\uFFFD");
    java.util.Set var41 = var30.asSet();
    org.jsecurity.authz.SimpleAuthorizingAccount var42 = new org.jsecurity.authz.SimpleAuthorizingAccount((java.lang.Object)var8, (java.lang.Object)"\u0000\u0000\u0000", "\u0000\u0000\u0000", var22, var41);
    org.jsecurity.authz.SimpleRole var44 = var42.getRole("\u0000\u0000\u0000");
    org.jsecurity.realm.text.PropertiesRealm var46 = new org.jsecurity.realm.text.PropertiesRealm();
    org.jsecurity.realm.activedirectory.ActiveDirectoryRealm var47 = new org.jsecurity.realm.activedirectory.ActiveDirectoryRealm();
    org.jsecurity.authc.credential.Sha256CredentialsMatcher var48 = new org.jsecurity.authc.credential.Sha256CredentialsMatcher();
    var47.setCredentialsMatcher((org.jsecurity.authc.credential.CredentialsMatcher)var48);
    java.lang.String var50 = var47.getAuthorizationCacheName();
    var47.setPrincipalSuffix("org.jsecurity.config.ConfigurationException: dd\uFFFD");
    org.jsecurity.authz.permission.PermissionResolver var53 = var47.getPermissionResolver();
    var46.setPermissionResolver(var53);
    java.util.Set var55 = org.jsecurity.util.PermissionUtils.resolveDelimitedPermissions("\uFFFD\uFFFD#\uFFFD\uFFFD.\uFFFD+r\uFFFD\u6959(\uFFFD\uFFFDW\uFFFDq\uFFFD.\uFFFD\uFFFD^jY\uFFFDj\uFFFDa\uFFFD\uFFFD\uFFFDj\u0628", var53);
    var42.setSimpleRoles(var55);
    boolean var57 = var42.isCredentialsExpired();
    java.io.InputStream var59 = org.jsecurity.util.ClassUtils.getResourceAsStream("");
    java.lang.Object[] var60 = new java.lang.Object[] { var59};
    java.util.List var61 = org.jsecurity.util.CollectionUtils.asList(var60);
    org.jsecurity.authc.pam.ModularRealmAuthenticator var62 = new org.jsecurity.authc.pam.ModularRealmAuthenticator(var61);
    org.jsecurity.subject.SimplePrincipalCollection var64 = new org.jsecurity.subject.SimplePrincipalCollection((java.util.Collection)var61, "org.jsecurity.authz.UnauthorizedException: org.jsecurity.session.ExpiredSessionException: ");
    java.util.List var65 = var64.asList();
    org.jsecurity.realm.activedirectory.ActiveDirectoryRealm var67 = new org.jsecurity.realm.activedirectory.ActiveDirectoryRealm();
    org.jsecurity.authc.credential.Sha256CredentialsMatcher var68 = new org.jsecurity.authc.credential.Sha256CredentialsMatcher();
    var67.setCredentialsMatcher((org.jsecurity.authc.credential.CredentialsMatcher)var68);
    java.lang.String var70 = var67.getAuthorizationCacheName();
    var67.setPrincipalSuffix("org.jsecurity.config.ConfigurationException: dd\uFFFD");
    org.jsecurity.authz.permission.PermissionResolver var73 = var67.getPermissionResolver();
    java.util.Set var74 = org.jsecurity.util.PermissionUtils.resolveDelimitedPermissions("NfxhYN7ItBfRAmDBmprtU73ghfEEPpcDJrHPkZ06wiY=", var73);
    var64.addAll((java.util.Collection)var74, "cff098b5-6d79-4f6d-93d3-148185d0b987");
    var42.setPrincipals((org.jsecurity.subject.PrincipalCollection)var64);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var7);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var8);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var21);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var22);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var25);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var26);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var27);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var41);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var44);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var50);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var53);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var55);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var57 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var59);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var60);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var61);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var65);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var70);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var73);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var74);

  }

  public void test100() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest2.test100");


    org.jsecurity.io.IniResource var1 = new org.jsecurity.io.IniResource();
    java.lang.String var2 = var1.getCharsetName();
    org.jsecurity.session.UnknownSessionException var3 = new org.jsecurity.session.UnknownSessionException("", (java.io.Serializable)var1);
    java.lang.String var4 = var1.getCharsetName();
    java.lang.String var5 = var1.getCharsetName();
    java.io.InputStream var7 = org.jsecurity.util.ClassUtils.getResourceAsStream("");
    org.jsecurity.io.ResourceUtils.close(var7);
    org.jsecurity.io.ResourceUtils.close(var7);
    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      var1.load(var7);
      fail("Expected exception of type org.jsecurity.io.ResourceException");
    } catch (org.jsecurity.io.ResourceException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var2);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var4);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var5);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var7);

  }

  public void test101() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest2.test101");


    org.jsecurity.session.mgt.DefaultSessionManager var0 = new org.jsecurity.session.mgt.DefaultSessionManager();
    org.jsecurity.session.mgt.eis.MemorySessionDAO var1 = new org.jsecurity.session.mgt.eis.MemorySessionDAO();
    org.jsecurity.cache.Cache var2 = var1.getActiveSessionsCache();
    org.jsecurity.cache.CacheManager var3 = var1.getCacheManager();
    org.jsecurity.cache.HashtableCacheManager var4 = new org.jsecurity.cache.HashtableCacheManager();
    org.jsecurity.cache.Cache var6 = var4.getCache("\u0000\u0000");
    var1.setActiveSessionsCache(var6);
    java.io.InputStream var9 = org.jsecurity.util.ClassUtils.getResourceAsStream("");
    java.lang.Object[] var10 = new java.lang.Object[] { var9};
    java.util.List var11 = org.jsecurity.util.CollectionUtils.asList(var10);
    org.jsecurity.authc.pam.ModularRealmAuthenticator var12 = new org.jsecurity.authc.pam.ModularRealmAuthenticator(var11);
    org.jsecurity.authc.pam.AllSuccessfulModularAuthenticationStrategy var13 = new org.jsecurity.authc.pam.AllSuccessfulModularAuthenticationStrategy();
    var12.setModularAuthenticationStrategy((org.jsecurity.authc.pam.ModularAuthenticationStrategy)var13);
    org.jsecurity.authz.SimpleAuthorizationInfo var15 = new org.jsecurity.authz.SimpleAuthorizationInfo();
    var15.addStringPermission("hi!");
    java.io.InputStream var19 = org.jsecurity.util.ClassUtils.getResourceAsStream("");
    java.lang.Object[] var20 = new java.lang.Object[] { var19};
    java.util.List var21 = org.jsecurity.util.CollectionUtils.asList(var20);
    var15.addRoles((java.util.Collection)var21);
    var12.setAuthenticationListeners((java.util.Collection)var21);
    org.jsecurity.realm.activedirectory.ActiveDirectoryRealm var24 = new org.jsecurity.realm.activedirectory.ActiveDirectoryRealm();
    var24.setPrincipalSuffix("");
    var12.setRealm((org.jsecurity.realm.Realm)var24);
    org.jsecurity.cache.HashtableCacheManager var28 = new org.jsecurity.cache.HashtableCacheManager();
    org.jsecurity.cache.Cache var30 = var28.getCache("\u0000\u0000");
    var24.setAuthorizationCache(var30);
    var1.setActiveSessionsCache(var30);
    org.jsecurity.session.mgt.SimpleSession var33 = new org.jsecurity.session.mgt.SimpleSession();
    java.io.Serializable var34 = var1.create((org.jsecurity.session.Session)var33);
    var0.setSessionDAO((org.jsecurity.session.mgt.eis.SessionDAO)var1);
    org.jsecurity.authc.pam.AllSuccessfulModularAuthenticationStrategy var36 = new org.jsecurity.authc.pam.AllSuccessfulModularAuthenticationStrategy();
    char[] var38 = new char[] { };
    org.jsecurity.authc.UsernamePasswordToken var40 = new org.jsecurity.authc.UsernamePasswordToken("hi!", var38, true);
    org.jsecurity.authc.SimpleAccount var41 = new org.jsecurity.authc.SimpleAccount();
    var41.setCredentialsExpired(false);
    boolean var44 = var41.isLocked();
    org.jsecurity.authc.AuthenticationInfo var45 = var36.afterAllAttempts((org.jsecurity.authc.AuthenticationToken)var40, (org.jsecurity.authc.AuthenticationInfo)var41);
    char[] var49 = new char[] { '4', '#'};
    org.jsecurity.authc.UsernamePasswordToken var50 = new org.jsecurity.authc.UsernamePasswordToken("\u0000\u0000", var49);
    org.jsecurity.authc.SimpleAccount var51 = new org.jsecurity.authc.SimpleAccount();
    var51.setCredentialsExpired(false);
    var51.setCredentialsExpired(false);
    boolean var56 = var51.isCredentialsExpired();
    org.jsecurity.authc.AuthenticationInfo var57 = var36.afterAllAttempts((org.jsecurity.authc.AuthenticationToken)var50, (org.jsecurity.authc.AuthenticationInfo)var51);
    org.jsecurity.realm.activedirectory.ActiveDirectoryRealm var58 = new org.jsecurity.realm.activedirectory.ActiveDirectoryRealm();
    org.jsecurity.authc.credential.Sha256CredentialsMatcher var59 = new org.jsecurity.authc.credential.Sha256CredentialsMatcher();
    var58.setCredentialsMatcher((org.jsecurity.authc.credential.CredentialsMatcher)var59);
    java.lang.String var61 = var58.getAuthorizationCacheName();
    org.jsecurity.authc.UsernamePasswordToken var62 = new org.jsecurity.authc.UsernamePasswordToken();
    java.lang.String var63 = var62.getUsername();
    java.lang.Object var64 = var62.getPrincipal();
    boolean var65 = var58.supports((org.jsecurity.authc.AuthenticationToken)var62);
    org.jsecurity.session.UnknownSessionException var69 = new org.jsecurity.session.UnknownSessionException("dd\uFFFD", (java.io.Serializable)100.0f);
    org.jsecurity.session.SessionException var71 = new org.jsecurity.session.SessionException("dd\uFFFD", (java.lang.Throwable)var69, (java.io.Serializable)0);
    org.jsecurity.authc.SimpleAuthenticationInfo var74 = new org.jsecurity.authc.SimpleAuthenticationInfo((java.lang.Object)0, (java.lang.Object)10, "hi!");
    java.lang.Object var75 = var74.getCredentials();
    java.lang.String var76 = var74.toString();
    org.jsecurity.authc.AuthenticationInfo var77 = var36.afterAllAttempts((org.jsecurity.authc.AuthenticationToken)var62, (org.jsecurity.authc.AuthenticationInfo)var74);
    org.jsecurity.session.mgt.eis.MemorySessionDAO var78 = new org.jsecurity.session.mgt.eis.MemorySessionDAO();
    org.jsecurity.cache.Cache var79 = var78.getActiveSessionsCache();
    var78.setActiveSessionsCacheName("dd\uFFFD");
    var74.setCredentials((java.lang.Object)var78);
    var0.setSessionDAO((org.jsecurity.session.mgt.eis.SessionDAO)var78);
    org.jsecurity.session.mgt.ExecutorServiceSessionValidationScheduler var84 = new org.jsecurity.session.mgt.ExecutorServiceSessionValidationScheduler((org.jsecurity.session.mgt.ValidatingSessionManager)var0);
    var84.run();
    var84.enableSessionValidation();
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var2);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var3);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var6);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var9);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var10);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var11);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var19);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var20);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var21);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var30);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var34 + "' != '" + "f9548f9e-497e-41ec-97ca-89ede08e20b0"+ "'", var34.equals("f9548f9e-497e-41ec-97ca-89ede08e20b0"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var38);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var44 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var45);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var49);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var56 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var57);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var61);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var63);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var64);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var65 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var75 + "' != '" + 10+ "'", var75.equals(10));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var77);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var79);

  }

  public void test102() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest2.test102");


    org.jsecurity.session.mgt.SimpleSession var0 = new org.jsecurity.session.mgt.SimpleSession();
    var0.touch();
    var0.validate();
    org.jsecurity.session.mgt.SimpleSession var3 = new org.jsecurity.session.mgt.SimpleSession();
    var3.setTimeout((-1L));
    org.jsecurity.session.mgt.SimpleSession var6 = new org.jsecurity.session.mgt.SimpleSession();
    java.util.Date var7 = var6.getLastAccessTime();
    var3.setLastAccessTime(var7);
    org.jsecurity.session.mgt.SimpleSession var9 = new org.jsecurity.session.mgt.SimpleSession();
    java.util.Date var10 = var9.getLastAccessTime();
    var3.setStopTimestamp(var10);
    var0.setLastAccessTime(var10);
    java.io.Serializable var13 = var0.getId();
    var0.stop();
    org.jsecurity.jndi.JndiLocator var15 = new org.jsecurity.jndi.JndiLocator();
    boolean var16 = var15.isResourceRef();
    java.lang.Object var17 = var0.getAttribute((java.lang.Object)var15);
    org.jsecurity.realm.jndi.JndiRealmFactory var18 = new org.jsecurity.realm.jndi.JndiRealmFactory();
    java.util.Collection var19 = var18.getJndiNames();
    org.jsecurity.jndi.JndiTemplate var20 = var18.getJndiTemplate();
    java.util.Properties var21 = var20.getEnvironment();
    var15.setJndiTemplate(var20);
    org.jsecurity.realm.text.TextConfigurationRealm var25 = new org.jsecurity.realm.text.TextConfigurationRealm();
    java.io.InputStream var27 = org.jsecurity.util.ClassUtils.getResourceAsStream("");
    java.lang.Object[] var28 = new java.lang.Object[] { var27};
    java.util.List var29 = org.jsecurity.util.CollectionUtils.asList(var28);
    org.jsecurity.authc.pam.ModularRealmAuthenticator var30 = new org.jsecurity.authc.pam.ModularRealmAuthenticator(var29);
    org.jsecurity.subject.SimplePrincipalCollection var32 = new org.jsecurity.subject.SimplePrincipalCollection((java.util.Collection)var29, "org.jsecurity.authz.UnauthorizedException: org.jsecurity.session.ExpiredSessionException: ");
    org.jsecurity.session.UnknownSessionException var37 = new org.jsecurity.session.UnknownSessionException("dd\uFFFD", (java.io.Serializable)100.0f);
    org.jsecurity.session.SessionException var39 = new org.jsecurity.session.SessionException("dd\uFFFD", (java.lang.Throwable)var37, (java.io.Serializable)0);
    org.jsecurity.session.SessionException var40 = new org.jsecurity.session.SessionException("dd\uFFFD", (java.lang.Throwable)var37);
    var32.add((java.lang.Object)var40, "org.jsecurity.config.ConfigurationException: dd\uFFFD");
    var25.onLogout((org.jsecurity.subject.PrincipalCollection)var32);
    java.util.Set var45 = org.jsecurity.util.PermissionUtils.toPermissionStrings("org.jsecurity.config.ConfigurationException: dd\uFFFD");
    org.jsecurity.authz.SimpleAuthorizationInfo var46 = new org.jsecurity.authz.SimpleAuthorizationInfo(var45);
    org.jsecurity.authz.SimpleAuthorizingAccount var47 = new org.jsecurity.authz.SimpleAuthorizingAccount((org.jsecurity.subject.PrincipalCollection)var32, (java.lang.Object)var45);
    org.jsecurity.session.StoppedSessionException var48 = new org.jsecurity.session.StoppedSessionException("org.jsecurity.realm.SimpleAccountRealm-55-authorization", (java.io.Serializable)var32);
    org.jsecurity.realm.activedirectory.ActiveDirectoryRealm var49 = new org.jsecurity.realm.activedirectory.ActiveDirectoryRealm();
    var49.init();
    var49.setSystemPassword("dd\uFFFD");
    org.jsecurity.authz.aop.GuestAnnotationHandler var53 = new org.jsecurity.authz.aop.GuestAnnotationHandler();
    java.lang.Class var54 = var53.getAnnotationClass();
    var49.setAuthenticationTokenClass(var54);
    java.util.Collection var56 = var32.byType(var54);
    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      java.lang.Object var57 = var20.lookup("orgjsecurityconfigConfigurationExceptionAAA=\r\n", var54);
      fail("Expected exception of type javax.naming.NoInitialContextException");
    } catch (javax.naming.NoInitialContextException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var7);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var10);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var13);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var16 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var17);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var19);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var20);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var21);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var27);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var28);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var29);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var45);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var54);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var56);

  }

  public void test103() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest2.test103");


    org.jsecurity.realm.activedirectory.ActiveDirectoryRealm var0 = new org.jsecurity.realm.activedirectory.ActiveDirectoryRealm();
    var0.init();
    var0.init();
    org.jsecurity.realm.activedirectory.ActiveDirectoryRealm var3 = new org.jsecurity.realm.activedirectory.ActiveDirectoryRealm();
    org.jsecurity.authc.credential.Sha256CredentialsMatcher var4 = new org.jsecurity.authc.credential.Sha256CredentialsMatcher();
    var3.setCredentialsMatcher((org.jsecurity.authc.credential.CredentialsMatcher)var4);
    java.lang.String var6 = var3.getAuthorizationCacheName();
    var3.setUrl("hi!");
    org.jsecurity.realm.ldap.DefaultLdapContextFactory var9 = new org.jsecurity.realm.ldap.DefaultLdapContextFactory();
    var3.setLdapContextFactory((org.jsecurity.realm.ldap.LdapContextFactory)var9);
    var9.setAuthentication("dd\uFFFD");
    var0.setLdapContextFactory((org.jsecurity.realm.ldap.LdapContextFactory)var9);
    org.jsecurity.realm.text.PropertiesRealm var14 = new org.jsecurity.realm.text.PropertiesRealm();
    java.lang.String var15 = var14.getUserDefinitions();
    org.jsecurity.codec.CodecException var18 = new org.jsecurity.codec.CodecException("dd\uFFFD");
    org.jsecurity.authc.ConcurrentAccessException var19 = new org.jsecurity.authc.ConcurrentAccessException("org.jsecurity.authz.UnauthorizedException: org.jsecurity.session.ExpiredSessionException: ", (java.lang.Throwable)var18);
    org.jsecurity.subject.SimplePrincipalCollection var21 = new org.jsecurity.subject.SimplePrincipalCollection((java.lang.Object)var18, "");
    java.io.InputStream var23 = org.jsecurity.util.ClassUtils.getResourceAsStream("");
    java.lang.Object[] var24 = new java.lang.Object[] { var23};
    java.util.List var25 = org.jsecurity.util.CollectionUtils.asList(var24);
    org.jsecurity.authc.pam.ModularRealmAuthenticator var26 = new org.jsecurity.authc.pam.ModularRealmAuthenticator(var25);
    var21.addAll((java.util.Collection)var25, "\u0000\u0000");
    java.io.InputStream var30 = org.jsecurity.util.ClassUtils.getResourceAsStream("");
    java.lang.Object[] var31 = new java.lang.Object[] { var30};
    java.util.List var32 = org.jsecurity.util.CollectionUtils.asList(var31);
    org.jsecurity.authc.pam.ModularRealmAuthenticator var33 = new org.jsecurity.authc.pam.ModularRealmAuthenticator(var32);
    var21.addAll((java.util.Collection)var32, "\u0000\u0000");
    var14.onLogout((org.jsecurity.subject.PrincipalCollection)var21);
    java.util.Set var37 = var21.getRealmNames();
    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      org.jsecurity.crypto.hash.Md5Hash var38 = new org.jsecurity.crypto.hash.Md5Hash((java.lang.Object)var0, (java.lang.Object)var21);
      fail("Expected exception of type org.jsecurity.codec.CodecException");
    } catch (org.jsecurity.codec.CodecException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var6);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var15);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var23);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var24);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var25);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var30);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var31);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var32);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var37);

  }

  public void test104() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest2.test104");


    org.jsecurity.jndi.JndiLocator var0 = new org.jsecurity.jndi.JndiLocator();
    java.util.Properties var1 = var0.getJndiEnvironment();
    org.jsecurity.jndi.JndiTemplate var2 = new org.jsecurity.jndi.JndiTemplate();
    java.util.Properties var3 = var2.getEnvironment();
    var0.setJndiTemplate(var2);
    org.jsecurity.jndi.JndiTemplate var5 = var0.getJndiTemplate();
    org.jsecurity.jndi.JndiTemplate var6 = var0.getJndiTemplate();
    org.jsecurity.session.mgt.DefaultSessionManager var8 = new org.jsecurity.session.mgt.DefaultSessionManager();
    org.jsecurity.session.mgt.quartz.QuartzSessionValidationScheduler var9 = new org.jsecurity.session.mgt.quartz.QuartzSessionValidationScheduler();
    boolean var10 = var9.isEnabled();
    var9.enableSessionValidation();
    var8.setSessionValidationScheduler((org.jsecurity.session.mgt.SessionValidationScheduler)var9);
    org.jsecurity.session.mgt.SessionValidationScheduler var13 = var8.getSessionValidationScheduler();
    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      var6.bind("944eaa9e-a16a-40cf-bdfa-a6f7f9bf6e53", (java.lang.Object)var13);
      fail("Expected exception of type javax.naming.NoInitialContextException");
    } catch (javax.naming.NoInitialContextException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var1);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var3);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var5);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var6);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var10 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var13);

  }

  public void test105() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest2.test105");


    org.jsecurity.realm.activedirectory.ActiveDirectoryRealm var0 = new org.jsecurity.realm.activedirectory.ActiveDirectoryRealm();
    org.jsecurity.authc.credential.Sha256CredentialsMatcher var1 = new org.jsecurity.authc.credential.Sha256CredentialsMatcher();
    var0.setCredentialsMatcher((org.jsecurity.authc.credential.CredentialsMatcher)var1);
    java.lang.String var3 = var0.getAuthorizationCacheName();
    var0.setUrl("hi!");
    var0.setAuthorizationCacheName("8ec85ffa-ab28-4808-9fcc-2d60518e27db");
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var3);

  }

  public void test106() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest2.test106");


    org.jsecurity.realm.text.PropertiesRealm var0 = new org.jsecurity.realm.text.PropertiesRealm();
    var0.setRoleDefinitions("5dd0c65d-1422-49c2-becb-9e8dca619ab3");
    java.lang.String var3 = var0.getUserDefinitions();
    var0.setName("e23a02c5-2287-4daa-91c4-8efed2be0f73");
    var0.setResourcePath("69d3a52f-a464-4f98-8253-2a105929a356");
    org.jsecurity.realm.text.TextConfigurationRealm var8 = new org.jsecurity.realm.text.TextConfigurationRealm();
    java.io.InputStream var10 = org.jsecurity.util.ClassUtils.getResourceAsStream("");
    java.lang.Object[] var11 = new java.lang.Object[] { var10};
    java.util.List var12 = org.jsecurity.util.CollectionUtils.asList(var11);
    org.jsecurity.authc.pam.ModularRealmAuthenticator var13 = new org.jsecurity.authc.pam.ModularRealmAuthenticator(var12);
    org.jsecurity.subject.SimplePrincipalCollection var15 = new org.jsecurity.subject.SimplePrincipalCollection((java.util.Collection)var12, "org.jsecurity.authz.UnauthorizedException: org.jsecurity.session.ExpiredSessionException: ");
    org.jsecurity.session.UnknownSessionException var20 = new org.jsecurity.session.UnknownSessionException("dd\uFFFD", (java.io.Serializable)100.0f);
    org.jsecurity.session.SessionException var22 = new org.jsecurity.session.SessionException("dd\uFFFD", (java.lang.Throwable)var20, (java.io.Serializable)0);
    org.jsecurity.session.SessionException var23 = new org.jsecurity.session.SessionException("dd\uFFFD", (java.lang.Throwable)var20);
    var15.add((java.lang.Object)var23, "org.jsecurity.config.ConfigurationException: dd\uFFFD");
    var8.onLogout((org.jsecurity.subject.PrincipalCollection)var15);
    org.jsecurity.authz.HostUnauthorizedException var27 = new org.jsecurity.authz.HostUnauthorizedException();
    org.jsecurity.authz.permission.WildcardPermission var30 = new org.jsecurity.authz.permission.WildcardPermission("org.jsecurity.authc.AccountException: hi!", true);
    org.jsecurity.authz.SimpleAuthorizationInfo var32 = new org.jsecurity.authz.SimpleAuthorizationInfo();
    java.util.Set var33 = var32.getStringPermissions();
    java.util.Set var34 = var32.getRoles();
    var32.addStringPermission("hi!");
    java.util.Set var37 = var32.getStringPermissions();
    org.jsecurity.session.UnknownSessionException var42 = new org.jsecurity.session.UnknownSessionException("dd\uFFFD", (java.io.Serializable)100.0f);
    org.jsecurity.subject.SubjectException var43 = new org.jsecurity.subject.SubjectException("dd\uFFFD", (java.lang.Throwable)var42);
    org.jsecurity.io.SerializationException var44 = new org.jsecurity.io.SerializationException("", (java.lang.Throwable)var43);
    java.lang.Throwable[] var45 = var43.getSuppressed();
    java.lang.Throwable[] var46 = var43.getSuppressed();
    org.jsecurity.authz.SimpleAuthorizationInfo var49 = new org.jsecurity.authz.SimpleAuthorizationInfo();
    var49.addRole("a2b823b1e72eae2b727289df8a00a89df8a0bab6ad8a89c4c5c7a9b62a270000");
    org.jsecurity.session.UnknownSessionException var56 = new org.jsecurity.session.UnknownSessionException("dd\uFFFD", (java.io.Serializable)100.0f);
    org.jsecurity.subject.SubjectException var57 = new org.jsecurity.subject.SubjectException("dd\uFFFD", (java.lang.Throwable)var56);
    org.jsecurity.io.SerializationException var58 = new org.jsecurity.io.SerializationException("", (java.lang.Throwable)var57);
    java.lang.Throwable[] var59 = var57.getSuppressed();
    java.util.Set var60 = org.jsecurity.util.CollectionUtils.asSet((java.lang.Object[])var59);
    var49.addRoles((java.util.Collection)var60);
    java.io.InputStream var63 = org.jsecurity.util.ClassUtils.getResourceAsStream("");
    java.lang.Object[] var64 = new java.lang.Object[] { var63};
    java.util.List var65 = org.jsecurity.util.CollectionUtils.asList(var64);
    org.jsecurity.authc.pam.ModularRealmAuthenticator var66 = new org.jsecurity.authc.pam.ModularRealmAuthenticator(var65);
    org.jsecurity.subject.SimplePrincipalCollection var68 = new org.jsecurity.subject.SimplePrincipalCollection((java.util.Collection)var65, "org.jsecurity.authz.UnauthorizedException: org.jsecurity.session.ExpiredSessionException: ");
    org.jsecurity.session.UnknownSessionException var73 = new org.jsecurity.session.UnknownSessionException("dd\uFFFD", (java.io.Serializable)100.0f);
    org.jsecurity.session.SessionException var75 = new org.jsecurity.session.SessionException("dd\uFFFD", (java.lang.Throwable)var73, (java.io.Serializable)0);
    org.jsecurity.session.SessionException var76 = new org.jsecurity.session.SessionException("dd\uFFFD", (java.lang.Throwable)var73);
    var68.add((java.lang.Object)var76, "org.jsecurity.config.ConfigurationException: dd\uFFFD");
    java.util.Set var79 = var68.asSet();
    org.jsecurity.authz.SimpleAuthorizingAccount var80 = new org.jsecurity.authz.SimpleAuthorizingAccount((java.lang.Object)var46, (java.lang.Object)"\u0000\u0000\u0000", "\u0000\u0000\u0000", var60, var79);
    org.jsecurity.authz.SimpleRole var82 = var80.getRole("\u0000\u0000\u0000");
    java.util.Set var83 = var80.getPermissions();
    boolean var84 = var80.isLocked();
    java.io.InputStream var86 = org.jsecurity.util.ClassUtils.getResourceAsStream("");
    java.lang.Object[] var87 = new java.lang.Object[] { var86};
    java.util.List var88 = org.jsecurity.util.CollectionUtils.asList(var87);
    org.jsecurity.authc.pam.ModularRealmAuthenticator var89 = new org.jsecurity.authc.pam.ModularRealmAuthenticator(var88);
    org.jsecurity.subject.SimplePrincipalCollection var91 = new org.jsecurity.subject.SimplePrincipalCollection((java.util.Collection)var88, "org.jsecurity.authz.UnauthorizedException: org.jsecurity.session.ExpiredSessionException: ");
    java.util.Set var92 = var91.getRealmNames();
    var80.addStringPermissions((java.util.Collection)var92);
    org.jsecurity.authz.SimpleAuthorizingAccount var94 = new org.jsecurity.authz.SimpleAuthorizingAccount((java.lang.Object)var27, (java.lang.Object)var30, "d8d550ee-3a8c-48f0-8061-1d82c827f505", var37, var92);
    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      var0.checkPermission((org.jsecurity.subject.PrincipalCollection)var15, (org.jsecurity.authz.Permission)var30);
      fail("Expected exception of type java.util.NoSuchElementException");
    } catch (java.util.NoSuchElementException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var3);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var10);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var11);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var12);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var33);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var34);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var37);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var45);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var46);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var59);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var60);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var63);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var64);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var65);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var79);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var82);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var83);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var84 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var86);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var87);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var88);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var92);

  }

  public void test107() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest2.test107");


    org.jsecurity.authz.SimpleAuthorizationInfo var0 = new org.jsecurity.authz.SimpleAuthorizationInfo();
    org.jsecurity.session.UnknownSessionException var5 = new org.jsecurity.session.UnknownSessionException("dd\uFFFD", (java.io.Serializable)100.0f);
    org.jsecurity.subject.SubjectException var6 = new org.jsecurity.subject.SubjectException("dd\uFFFD", (java.lang.Throwable)var5);
    org.jsecurity.io.SerializationException var7 = new org.jsecurity.io.SerializationException("", (java.lang.Throwable)var6);
    java.lang.Throwable[] var8 = var6.getSuppressed();
    java.util.Set var9 = org.jsecurity.util.CollectionUtils.asSet((java.lang.Object[])var8);
    var0.setStringPermissions(var9);
    java.util.Set var11 = var0.getRoles();
    org.jsecurity.authz.SimpleAuthorizationInfo var12 = new org.jsecurity.authz.SimpleAuthorizationInfo();
    var12.addRole("a2b823b1e72eae2b727289df8a00a89df8a0bab6ad8a89c4c5c7a9b62a270000");
    org.jsecurity.session.UnknownSessionException var19 = new org.jsecurity.session.UnknownSessionException("dd\uFFFD", (java.io.Serializable)100.0f);
    org.jsecurity.subject.SubjectException var20 = new org.jsecurity.subject.SubjectException("dd\uFFFD", (java.lang.Throwable)var19);
    org.jsecurity.io.SerializationException var21 = new org.jsecurity.io.SerializationException("", (java.lang.Throwable)var20);
    java.lang.Throwable[] var22 = var20.getSuppressed();
    java.util.Set var23 = org.jsecurity.util.CollectionUtils.asSet((java.lang.Object[])var22);
    var12.addRoles((java.util.Collection)var23);
    var0.setRoles(var23);
    org.jsecurity.authz.SimpleAuthorizationInfo var26 = new org.jsecurity.authz.SimpleAuthorizationInfo();
    org.jsecurity.session.UnknownSessionException var31 = new org.jsecurity.session.UnknownSessionException("dd\uFFFD", (java.io.Serializable)100.0f);
    org.jsecurity.subject.SubjectException var32 = new org.jsecurity.subject.SubjectException("dd\uFFFD", (java.lang.Throwable)var31);
    org.jsecurity.io.SerializationException var33 = new org.jsecurity.io.SerializationException("", (java.lang.Throwable)var32);
    java.lang.Throwable[] var34 = var32.getSuppressed();
    java.util.Set var35 = org.jsecurity.util.CollectionUtils.asSet((java.lang.Object[])var34);
    var26.setStringPermissions(var35);
    java.util.Set var37 = var26.getRoles();
    org.jsecurity.authz.SimpleAuthorizationInfo var38 = new org.jsecurity.authz.SimpleAuthorizationInfo();
    var38.addRole("a2b823b1e72eae2b727289df8a00a89df8a0bab6ad8a89c4c5c7a9b62a270000");
    org.jsecurity.session.UnknownSessionException var45 = new org.jsecurity.session.UnknownSessionException("dd\uFFFD", (java.io.Serializable)100.0f);
    org.jsecurity.subject.SubjectException var46 = new org.jsecurity.subject.SubjectException("dd\uFFFD", (java.lang.Throwable)var45);
    org.jsecurity.io.SerializationException var47 = new org.jsecurity.io.SerializationException("", (java.lang.Throwable)var46);
    java.lang.Throwable[] var48 = var46.getSuppressed();
    java.util.Set var49 = org.jsecurity.util.CollectionUtils.asSet((java.lang.Object[])var48);
    var38.addRoles((java.util.Collection)var49);
    var26.setRoles(var49);
    var0.setRoles(var49);
    org.jsecurity.authz.ModularRealmAuthorizer var53 = new org.jsecurity.authz.ModularRealmAuthorizer((java.util.Collection)var49);
    org.jsecurity.realm.text.TextConfigurationRealm var54 = new org.jsecurity.realm.text.TextConfigurationRealm();
    org.jsecurity.realm.text.TextConfigurationRealm var55 = new org.jsecurity.realm.text.TextConfigurationRealm();
    java.io.InputStream var57 = org.jsecurity.util.ClassUtils.getResourceAsStream("");
    java.lang.Object[] var58 = new java.lang.Object[] { var57};
    java.util.List var59 = org.jsecurity.util.CollectionUtils.asList(var58);
    org.jsecurity.authc.pam.ModularRealmAuthenticator var60 = new org.jsecurity.authc.pam.ModularRealmAuthenticator(var59);
    org.jsecurity.subject.SimplePrincipalCollection var62 = new org.jsecurity.subject.SimplePrincipalCollection((java.util.Collection)var59, "org.jsecurity.authz.UnauthorizedException: org.jsecurity.session.ExpiredSessionException: ");
    org.jsecurity.session.UnknownSessionException var67 = new org.jsecurity.session.UnknownSessionException("dd\uFFFD", (java.io.Serializable)100.0f);
    org.jsecurity.session.SessionException var69 = new org.jsecurity.session.SessionException("dd\uFFFD", (java.lang.Throwable)var67, (java.io.Serializable)0);
    org.jsecurity.session.SessionException var70 = new org.jsecurity.session.SessionException("dd\uFFFD", (java.lang.Throwable)var67);
    var62.add((java.lang.Object)var70, "org.jsecurity.config.ConfigurationException: dd\uFFFD");
    var55.onLogout((org.jsecurity.subject.PrincipalCollection)var62);
    java.util.Collection var75 = var62.fromRealm("\u0000\u0000\u0000");
    var54.onLogout((org.jsecurity.subject.PrincipalCollection)var62);
    org.jsecurity.authz.aop.RoleAnnotationMethodInterceptor var77 = new org.jsecurity.authz.aop.RoleAnnotationMethodInterceptor();
    org.jsecurity.aop.AnnotationHandler var78 = var77.getHandler();
    java.lang.Class var79 = var78.getAnnotationClass();
    java.util.Collection var80 = var62.byType(var79);
    var53.setRealms(var80);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var8);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var9);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var11);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var22);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var23);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var34);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var35);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var37);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var48);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var49);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var57);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var58);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var59);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var75);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var78);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var79);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var80);

  }

  public void test108() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest2.test108");


    org.jsecurity.config.UnresolveableReferenceException var1 = new org.jsecurity.config.UnresolveableReferenceException("org.jsecurity.realm.text.TextConfigurationRealm_1105");

  }

  public void test109() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest2.test109");


    org.jsecurity.realm.SimpleAccountRealm var1 = new org.jsecurity.realm.SimpleAccountRealm("e7e879cb-1172-4cea-8bca-f370fbe1f08c");
    org.jsecurity.authz.UnauthenticatedException var5 = new org.jsecurity.authz.UnauthenticatedException();
    org.jsecurity.config.UnresolveableReferenceException var6 = new org.jsecurity.config.UnresolveableReferenceException("", (java.lang.Throwable)var5);
    org.jsecurity.cache.CacheException var7 = new org.jsecurity.cache.CacheException("org.jsecurity.config.ConfigurationException: dd\uFFFD", (java.lang.Throwable)var5);
    org.jsecurity.authc.SimpleAuthenticationInfo var9 = new org.jsecurity.authc.SimpleAuthenticationInfo((java.lang.Object)"org.jsecurity.config.ConfigurationException: dd\uFFFD", (java.lang.Object)var7, "a2b823b1e72eae2b727289df8a00a89df8a0bab6ad8a89c4c5c7a9b62a270000");
    org.jsecurity.realm.text.TextConfigurationRealm var10 = new org.jsecurity.realm.text.TextConfigurationRealm();
    java.io.InputStream var12 = org.jsecurity.util.ClassUtils.getResourceAsStream("");
    java.lang.Object[] var13 = new java.lang.Object[] { var12};
    java.util.List var14 = org.jsecurity.util.CollectionUtils.asList(var13);
    org.jsecurity.authc.pam.ModularRealmAuthenticator var15 = new org.jsecurity.authc.pam.ModularRealmAuthenticator(var14);
    org.jsecurity.subject.SimplePrincipalCollection var17 = new org.jsecurity.subject.SimplePrincipalCollection((java.util.Collection)var14, "org.jsecurity.authz.UnauthorizedException: org.jsecurity.session.ExpiredSessionException: ");
    org.jsecurity.session.UnknownSessionException var22 = new org.jsecurity.session.UnknownSessionException("dd\uFFFD", (java.io.Serializable)100.0f);
    org.jsecurity.session.SessionException var24 = new org.jsecurity.session.SessionException("dd\uFFFD", (java.lang.Throwable)var22, (java.io.Serializable)0);
    org.jsecurity.session.SessionException var25 = new org.jsecurity.session.SessionException("dd\uFFFD", (java.lang.Throwable)var22);
    var17.add((java.lang.Object)var25, "org.jsecurity.config.ConfigurationException: dd\uFFFD");
    var10.onLogout((org.jsecurity.subject.PrincipalCollection)var17);
    org.jsecurity.authc.ExpiredCredentialsException var30 = new org.jsecurity.authc.ExpiredCredentialsException();
    org.jsecurity.session.ExpiredSessionException var31 = new org.jsecurity.session.ExpiredSessionException("", (java.lang.Throwable)var30);
    java.lang.Throwable[] var32 = var31.getSuppressed();
    org.jsecurity.io.ResourceException var33 = new org.jsecurity.io.ResourceException((java.lang.Throwable)var31);
    org.jsecurity.authc.SimpleAuthenticationInfo var34 = new org.jsecurity.authc.SimpleAuthenticationInfo((org.jsecurity.subject.PrincipalCollection)var17, (java.lang.Object)var31);
    var9.merge((org.jsecurity.authc.AuthenticationInfo)var34);
    org.jsecurity.subject.PrincipalCollection var36 = var34.getPrincipals();
    org.jsecurity.codec.CodecException var39 = new org.jsecurity.codec.CodecException("dd\uFFFD");
    org.jsecurity.authc.ConcurrentAccessException var40 = new org.jsecurity.authc.ConcurrentAccessException("org.jsecurity.authz.UnauthorizedException: org.jsecurity.session.ExpiredSessionException: ", (java.lang.Throwable)var39);
    org.jsecurity.subject.SimplePrincipalCollection var42 = new org.jsecurity.subject.SimplePrincipalCollection((java.lang.Object)var39, "");
    org.jsecurity.authc.pam.FirstSuccessfulAuthenticationStrategy var43 = new org.jsecurity.authc.pam.FirstSuccessfulAuthenticationStrategy();
    org.jsecurity.authz.UnauthorizedException var45 = new org.jsecurity.authz.UnauthorizedException("org.jsecurity.config.ConfigurationException: dd\uFFFD");
    java.lang.Throwable[] var46 = var45.getSuppressed();
    java.util.List var47 = org.jsecurity.util.CollectionUtils.asList((java.lang.Object[])var46);
    org.jsecurity.authc.UsernamePasswordToken var48 = new org.jsecurity.authc.UsernamePasswordToken();
    java.lang.String var49 = var48.getUsername();
    java.net.InetAddress var50 = var48.getInetAddress();
    org.jsecurity.authc.AuthenticationInfo var51 = var43.beforeAllAttempts((java.util.Collection)var47, (org.jsecurity.authc.AuthenticationToken)var48);
    org.jsecurity.session.UnknownSessionException var56 = new org.jsecurity.session.UnknownSessionException("dd\uFFFD", (java.io.Serializable)100.0f);
    org.jsecurity.subject.SubjectException var57 = new org.jsecurity.subject.SubjectException("dd\uFFFD", (java.lang.Throwable)var56);
    org.jsecurity.io.SerializationException var58 = new org.jsecurity.io.SerializationException("", (java.lang.Throwable)var57);
    java.lang.Throwable[] var59 = var57.getSuppressed();
    java.util.Set var60 = org.jsecurity.util.CollectionUtils.asSet((java.lang.Object[])var59);
    org.jsecurity.authc.SimpleAccount var61 = new org.jsecurity.authc.SimpleAccount((org.jsecurity.subject.PrincipalCollection)var42, (java.lang.Object)var47, var60);
    java.io.InputStream var63 = org.jsecurity.util.ClassUtils.getResourceAsStream("");
    java.lang.Object[] var64 = new java.lang.Object[] { var63};
    java.util.List var65 = org.jsecurity.util.CollectionUtils.asList(var64);
    org.jsecurity.authc.pam.ModularRealmAuthenticator var66 = new org.jsecurity.authc.pam.ModularRealmAuthenticator(var65);
    org.jsecurity.subject.SimplePrincipalCollection var68 = new org.jsecurity.subject.SimplePrincipalCollection((java.util.Collection)var65, "org.jsecurity.authz.UnauthorizedException: org.jsecurity.session.ExpiredSessionException: ");
    org.jsecurity.io.ResourceException var72 = new org.jsecurity.io.ResourceException("hi!");
    org.jsecurity.authc.UnknownAccountException var73 = new org.jsecurity.authc.UnknownAccountException((java.lang.Throwable)var72);
    org.jsecurity.session.StoppedSessionException var74 = new org.jsecurity.session.StoppedSessionException("dd\uFFFD", (java.io.Serializable)var72);
    org.jsecurity.session.UnknownSessionException var75 = new org.jsecurity.session.UnknownSessionException("org.jsecurity.authz.UnauthorizedException: org.jsecurity.session.ExpiredSessionException: ", (java.lang.Throwable)var72);
    boolean var76 = var68.equals((java.lang.Object)var72);
    var42.addAll((org.jsecurity.subject.PrincipalCollection)var68);
    java.util.List var78 = var68.asList();
    org.jsecurity.authz.ModularRealmAuthorizer var79 = new org.jsecurity.authz.ModularRealmAuthorizer((java.util.Collection)var78);
    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      boolean[] var80 = var1.isPermitted(var36, var78);
      fail("Expected exception of type java.util.NoSuchElementException");
    } catch (java.util.NoSuchElementException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var12);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var13);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var14);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var32);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var36);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var46);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var47);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var49);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var50);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var51);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var59);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var60);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var63);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var64);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var65);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var76 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var78);

  }

  public void test110() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest2.test110");


    org.jsecurity.session.mgt.SimpleSession var0 = new org.jsecurity.session.mgt.SimpleSession();
    org.jsecurity.io.SerializationException var3 = new org.jsecurity.io.SerializationException("org.jsecurity.config.ConfigurationException: dd\uFFFD");
    org.jsecurity.authc.AccountException var4 = new org.jsecurity.authc.AccountException("a2b823b1e72eae2b727289df8a00a89df8a0bab6ad8a89c4c5c7a9b62a270000", (java.lang.Throwable)var3);
    var0.setId((java.io.Serializable)"a2b823b1e72eae2b727289df8a00a89df8a0bab6ad8a89c4c5c7a9b62a270000");
    var0.stop();
    org.jsecurity.session.mgt.eis.MemorySessionDAO var7 = new org.jsecurity.session.mgt.eis.MemorySessionDAO();
    org.jsecurity.cache.Cache var8 = var7.getActiveSessionsCache();
    org.jsecurity.cache.CacheManager var9 = var7.getCacheManager();
    org.jsecurity.cache.HashtableCacheManager var10 = new org.jsecurity.cache.HashtableCacheManager();
    org.jsecurity.cache.Cache var12 = var10.getCache("\u0000\u0000");
    var7.setActiveSessionsCache(var12);
    java.io.InputStream var15 = org.jsecurity.util.ClassUtils.getResourceAsStream("");
    java.lang.Object[] var16 = new java.lang.Object[] { var15};
    java.util.List var17 = org.jsecurity.util.CollectionUtils.asList(var16);
    org.jsecurity.authc.pam.ModularRealmAuthenticator var18 = new org.jsecurity.authc.pam.ModularRealmAuthenticator(var17);
    org.jsecurity.authc.pam.AllSuccessfulModularAuthenticationStrategy var19 = new org.jsecurity.authc.pam.AllSuccessfulModularAuthenticationStrategy();
    var18.setModularAuthenticationStrategy((org.jsecurity.authc.pam.ModularAuthenticationStrategy)var19);
    org.jsecurity.authz.SimpleAuthorizationInfo var21 = new org.jsecurity.authz.SimpleAuthorizationInfo();
    var21.addStringPermission("hi!");
    java.io.InputStream var25 = org.jsecurity.util.ClassUtils.getResourceAsStream("");
    java.lang.Object[] var26 = new java.lang.Object[] { var25};
    java.util.List var27 = org.jsecurity.util.CollectionUtils.asList(var26);
    var21.addRoles((java.util.Collection)var27);
    var18.setAuthenticationListeners((java.util.Collection)var27);
    org.jsecurity.realm.activedirectory.ActiveDirectoryRealm var30 = new org.jsecurity.realm.activedirectory.ActiveDirectoryRealm();
    var30.setPrincipalSuffix("");
    var18.setRealm((org.jsecurity.realm.Realm)var30);
    org.jsecurity.cache.HashtableCacheManager var34 = new org.jsecurity.cache.HashtableCacheManager();
    org.jsecurity.cache.Cache var36 = var34.getCache("\u0000\u0000");
    var30.setAuthorizationCache(var36);
    var7.setActiveSessionsCache(var36);
    org.jsecurity.session.mgt.SimpleSession var39 = new org.jsecurity.session.mgt.SimpleSession();
    java.io.Serializable var40 = var7.create((org.jsecurity.session.Session)var39);
    org.jsecurity.session.mgt.SimpleSession var41 = new org.jsecurity.session.mgt.SimpleSession();
    var41.touch();
    var41.validate();
    org.jsecurity.session.mgt.SimpleSession var44 = new org.jsecurity.session.mgt.SimpleSession();
    var44.setTimeout((-1L));
    org.jsecurity.session.mgt.SimpleSession var47 = new org.jsecurity.session.mgt.SimpleSession();
    java.util.Date var48 = var47.getLastAccessTime();
    var44.setLastAccessTime(var48);
    org.jsecurity.session.mgt.SimpleSession var50 = new org.jsecurity.session.mgt.SimpleSession();
    java.util.Date var51 = var50.getLastAccessTime();
    var44.setStopTimestamp(var51);
    var41.setLastAccessTime(var51);
    var39.setLastAccessTime(var51);
    org.jsecurity.session.mgt.ImmutableProxiedSession var55 = new org.jsecurity.session.mgt.ImmutableProxiedSession((org.jsecurity.session.Session)var39);
    org.jsecurity.session.ProxiedSession var56 = new org.jsecurity.session.ProxiedSession((org.jsecurity.session.Session)var39);
    java.util.Date var57 = var56.getStartTimestamp();
    var0.setStartTimestamp(var57);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var8);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var9);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var12);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var15);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var16);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var17);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var25);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var26);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var27);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var36);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var40 + "' != '" + "70bf5f29-b0cb-4666-b31a-f1e98e2371a0"+ "'", var40.equals("70bf5f29-b0cb-4666-b31a-f1e98e2371a0"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var48);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var51);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var57);

  }

  public void test111() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest2.test111");


    org.jsecurity.codec.CodecException var2 = new org.jsecurity.codec.CodecException("dd\uFFFD");
    org.jsecurity.authc.ConcurrentAccessException var3 = new org.jsecurity.authc.ConcurrentAccessException("org.jsecurity.authz.UnauthorizedException: org.jsecurity.session.ExpiredSessionException: ", (java.lang.Throwable)var2);
    org.jsecurity.subject.SimplePrincipalCollection var5 = new org.jsecurity.subject.SimplePrincipalCollection((java.lang.Object)var2, "");
    org.jsecurity.authc.pam.FirstSuccessfulAuthenticationStrategy var6 = new org.jsecurity.authc.pam.FirstSuccessfulAuthenticationStrategy();
    org.jsecurity.authz.UnauthorizedException var8 = new org.jsecurity.authz.UnauthorizedException("org.jsecurity.config.ConfigurationException: dd\uFFFD");
    java.lang.Throwable[] var9 = var8.getSuppressed();
    java.util.List var10 = org.jsecurity.util.CollectionUtils.asList((java.lang.Object[])var9);
    org.jsecurity.authc.UsernamePasswordToken var11 = new org.jsecurity.authc.UsernamePasswordToken();
    java.lang.String var12 = var11.getUsername();
    java.net.InetAddress var13 = var11.getInetAddress();
    org.jsecurity.authc.AuthenticationInfo var14 = var6.beforeAllAttempts((java.util.Collection)var10, (org.jsecurity.authc.AuthenticationToken)var11);
    org.jsecurity.session.UnknownSessionException var19 = new org.jsecurity.session.UnknownSessionException("dd\uFFFD", (java.io.Serializable)100.0f);
    org.jsecurity.subject.SubjectException var20 = new org.jsecurity.subject.SubjectException("dd\uFFFD", (java.lang.Throwable)var19);
    org.jsecurity.io.SerializationException var21 = new org.jsecurity.io.SerializationException("", (java.lang.Throwable)var20);
    java.lang.Throwable[] var22 = var20.getSuppressed();
    java.util.Set var23 = org.jsecurity.util.CollectionUtils.asSet((java.lang.Object[])var22);
    org.jsecurity.authc.SimpleAccount var24 = new org.jsecurity.authc.SimpleAccount((org.jsecurity.subject.PrincipalCollection)var5, (java.lang.Object)var10, var23);
    java.io.InputStream var26 = org.jsecurity.util.ClassUtils.getResourceAsStream("");
    java.lang.Object[] var27 = new java.lang.Object[] { var26};
    java.util.List var28 = org.jsecurity.util.CollectionUtils.asList(var27);
    org.jsecurity.authc.pam.ModularRealmAuthenticator var29 = new org.jsecurity.authc.pam.ModularRealmAuthenticator(var28);
    org.jsecurity.subject.SimplePrincipalCollection var31 = new org.jsecurity.subject.SimplePrincipalCollection((java.util.Collection)var28, "org.jsecurity.authz.UnauthorizedException: org.jsecurity.session.ExpiredSessionException: ");
    org.jsecurity.io.ResourceException var35 = new org.jsecurity.io.ResourceException("hi!");
    org.jsecurity.authc.UnknownAccountException var36 = new org.jsecurity.authc.UnknownAccountException((java.lang.Throwable)var35);
    org.jsecurity.session.StoppedSessionException var37 = new org.jsecurity.session.StoppedSessionException("dd\uFFFD", (java.io.Serializable)var35);
    org.jsecurity.session.UnknownSessionException var38 = new org.jsecurity.session.UnknownSessionException("org.jsecurity.authz.UnauthorizedException: org.jsecurity.session.ExpiredSessionException: ", (java.lang.Throwable)var35);
    boolean var39 = var31.equals((java.lang.Object)var35);
    var5.addAll((org.jsecurity.subject.PrincipalCollection)var31);
    java.util.List var41 = var31.asList();
    org.jsecurity.authz.ModularRealmAuthorizer var42 = new org.jsecurity.authz.ModularRealmAuthorizer((java.util.Collection)var41);
    org.jsecurity.realm.text.TextConfigurationRealm var43 = new org.jsecurity.realm.text.TextConfigurationRealm();
    java.io.InputStream var45 = org.jsecurity.util.ClassUtils.getResourceAsStream("");
    java.lang.Object[] var46 = new java.lang.Object[] { var45};
    java.util.List var47 = org.jsecurity.util.CollectionUtils.asList(var46);
    org.jsecurity.authc.pam.ModularRealmAuthenticator var48 = new org.jsecurity.authc.pam.ModularRealmAuthenticator(var47);
    org.jsecurity.subject.SimplePrincipalCollection var50 = new org.jsecurity.subject.SimplePrincipalCollection((java.util.Collection)var47, "org.jsecurity.authz.UnauthorizedException: org.jsecurity.session.ExpiredSessionException: ");
    org.jsecurity.session.UnknownSessionException var55 = new org.jsecurity.session.UnknownSessionException("dd\uFFFD", (java.io.Serializable)100.0f);
    org.jsecurity.session.SessionException var57 = new org.jsecurity.session.SessionException("dd\uFFFD", (java.lang.Throwable)var55, (java.io.Serializable)0);
    org.jsecurity.session.SessionException var58 = new org.jsecurity.session.SessionException("dd\uFFFD", (java.lang.Throwable)var55);
    var50.add((java.lang.Object)var58, "org.jsecurity.config.ConfigurationException: dd\uFFFD");
    var43.onLogout((org.jsecurity.subject.PrincipalCollection)var50);
    org.jsecurity.authc.ExpiredCredentialsException var63 = new org.jsecurity.authc.ExpiredCredentialsException();
    org.jsecurity.session.ExpiredSessionException var64 = new org.jsecurity.session.ExpiredSessionException("", (java.lang.Throwable)var63);
    java.lang.Throwable[] var65 = var64.getSuppressed();
    org.jsecurity.io.ResourceException var66 = new org.jsecurity.io.ResourceException((java.lang.Throwable)var64);
    org.jsecurity.authc.SimpleAuthenticationInfo var67 = new org.jsecurity.authc.SimpleAuthenticationInfo((org.jsecurity.subject.PrincipalCollection)var50, (java.lang.Object)var64);
    java.util.Set var68 = var50.getRealmNames();
    boolean var69 = var50.isEmpty();
    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      boolean var71 = var42.hasRole((org.jsecurity.subject.PrincipalCollection)var50, "e8e5d499-33c0-418e-93f9-76a51372c414");
      fail("Expected exception of type java.lang.ClassCastException");
    } catch (java.lang.ClassCastException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var9);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var10);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var12);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var13);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var14);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var22);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var23);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var26);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var27);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var28);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var39 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var41);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var45);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var46);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var47);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var65);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var68);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var69 == false);

  }

  public void test112() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest2.test112");


    org.jsecurity.util.UnknownClassException var1 = new org.jsecurity.util.UnknownClassException("\uFFFD\uFFFD#\uFFFD\uFFFD.\uFFFD+rr\uFFFD\u07CA\u0000\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\u01E9\uFFFD*'\u0000\u0000");
    org.jsecurity.session.UnknownSessionException var2 = new org.jsecurity.session.UnknownSessionException((java.lang.Throwable)var1);

  }

  public void test113() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest2.test113");


    org.jsecurity.authz.SimpleAuthorizingAccount var0 = new org.jsecurity.authz.SimpleAuthorizingAccount();
    java.util.Set var1 = var0.getSimpleRoles();
    java.util.Set var2 = var0.getSimpleRoles();
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var1);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var2);

  }

  public void test114() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest2.test114");


    org.jsecurity.session.mgt.SimpleSession var0 = new org.jsecurity.session.mgt.SimpleSession();
    java.util.Date var1 = var0.getLastAccessTime();
    org.jsecurity.session.mgt.eis.MemorySessionDAO var2 = new org.jsecurity.session.mgt.eis.MemorySessionDAO();
    org.jsecurity.cache.Cache var3 = var2.getActiveSessionsCache();
    org.jsecurity.cache.CacheManager var4 = var2.getCacheManager();
    org.jsecurity.cache.HashtableCacheManager var5 = new org.jsecurity.cache.HashtableCacheManager();
    org.jsecurity.cache.Cache var7 = var5.getCache("\u0000\u0000");
    var2.setActiveSessionsCache(var7);
    java.io.InputStream var10 = org.jsecurity.util.ClassUtils.getResourceAsStream("");
    java.lang.Object[] var11 = new java.lang.Object[] { var10};
    java.util.List var12 = org.jsecurity.util.CollectionUtils.asList(var11);
    org.jsecurity.authc.pam.ModularRealmAuthenticator var13 = new org.jsecurity.authc.pam.ModularRealmAuthenticator(var12);
    org.jsecurity.authc.pam.AllSuccessfulModularAuthenticationStrategy var14 = new org.jsecurity.authc.pam.AllSuccessfulModularAuthenticationStrategy();
    var13.setModularAuthenticationStrategy((org.jsecurity.authc.pam.ModularAuthenticationStrategy)var14);
    org.jsecurity.authz.SimpleAuthorizationInfo var16 = new org.jsecurity.authz.SimpleAuthorizationInfo();
    var16.addStringPermission("hi!");
    java.io.InputStream var20 = org.jsecurity.util.ClassUtils.getResourceAsStream("");
    java.lang.Object[] var21 = new java.lang.Object[] { var20};
    java.util.List var22 = org.jsecurity.util.CollectionUtils.asList(var21);
    var16.addRoles((java.util.Collection)var22);
    var13.setAuthenticationListeners((java.util.Collection)var22);
    org.jsecurity.realm.activedirectory.ActiveDirectoryRealm var25 = new org.jsecurity.realm.activedirectory.ActiveDirectoryRealm();
    var25.setPrincipalSuffix("");
    var13.setRealm((org.jsecurity.realm.Realm)var25);
    org.jsecurity.cache.HashtableCacheManager var29 = new org.jsecurity.cache.HashtableCacheManager();
    org.jsecurity.cache.Cache var31 = var29.getCache("\u0000\u0000");
    var25.setAuthorizationCache(var31);
    var2.setActiveSessionsCache(var31);
    org.jsecurity.session.mgt.SimpleSession var34 = new org.jsecurity.session.mgt.SimpleSession();
    java.io.Serializable var35 = var2.create((org.jsecurity.session.Session)var34);
    java.io.Serializable var36 = var34.getId();
    org.jsecurity.session.mgt.SimpleSession var37 = new org.jsecurity.session.mgt.SimpleSession();
    var37.touch();
    var37.validate();
    org.jsecurity.session.mgt.SimpleSession var40 = new org.jsecurity.session.mgt.SimpleSession();
    var40.setTimeout((-1L));
    org.jsecurity.session.mgt.SimpleSession var43 = new org.jsecurity.session.mgt.SimpleSession();
    java.util.Date var44 = var43.getLastAccessTime();
    var40.setLastAccessTime(var44);
    org.jsecurity.session.mgt.SimpleSession var46 = new org.jsecurity.session.mgt.SimpleSession();
    java.util.Date var47 = var46.getLastAccessTime();
    var40.setStopTimestamp(var47);
    var37.setLastAccessTime(var47);
    var34.setStartTimestamp(var47);
    var0.setLastAccessTime(var47);
    org.jsecurity.io.ResourceException var54 = new org.jsecurity.io.ResourceException("hi!");
    org.jsecurity.codec.CodecException var55 = new org.jsecurity.codec.CodecException((java.lang.Throwable)var54);
    org.jsecurity.JSecurityException var56 = new org.jsecurity.JSecurityException("a2b823b1e72eae2b727289df8a00a89df8a0bab6ad8a89c4c5c7a9b62a270000", (java.lang.Throwable)var54);
    org.jsecurity.util.UnavailableConstructorException var57 = new org.jsecurity.util.UnavailableConstructorException((java.lang.Throwable)var56);
    org.jsecurity.authc.DisabledAccountException var58 = new org.jsecurity.authc.DisabledAccountException((java.lang.Throwable)var57);
    java.lang.Object var59 = var0.removeAttribute((java.lang.Object)var57);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var1);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var3);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var4);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var7);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var10);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var11);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var12);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var20);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var21);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var22);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var31);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var35 + "' != '" + "d0ddeefd-5576-4906-99f8-93b892e0c773"+ "'", var35.equals("d0ddeefd-5576-4906-99f8-93b892e0c773"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var36 + "' != '" + "d0ddeefd-5576-4906-99f8-93b892e0c773"+ "'", var36.equals("d0ddeefd-5576-4906-99f8-93b892e0c773"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var44);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var47);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var59);

  }

  public void test115() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest2.test115");


    org.jsecurity.mgt.DefaultSecurityManager var0 = new org.jsecurity.mgt.DefaultSecurityManager();
    java.io.InputStream var2 = org.jsecurity.util.ClassUtils.getResourceAsStream("");
    java.lang.Object[] var3 = new java.lang.Object[] { var2};
    java.util.List var4 = org.jsecurity.util.CollectionUtils.asList(var3);
    org.jsecurity.authc.pam.ModularRealmAuthenticator var5 = new org.jsecurity.authc.pam.ModularRealmAuthenticator(var4);
    org.jsecurity.authc.pam.AllSuccessfulModularAuthenticationStrategy var6 = new org.jsecurity.authc.pam.AllSuccessfulModularAuthenticationStrategy();
    var5.setModularAuthenticationStrategy((org.jsecurity.authc.pam.ModularAuthenticationStrategy)var6);
    org.jsecurity.authz.SimpleAuthorizationInfo var8 = new org.jsecurity.authz.SimpleAuthorizationInfo();
    var8.addStringPermission("hi!");
    java.io.InputStream var12 = org.jsecurity.util.ClassUtils.getResourceAsStream("");
    java.lang.Object[] var13 = new java.lang.Object[] { var12};
    java.util.List var14 = org.jsecurity.util.CollectionUtils.asList(var13);
    var8.addRoles((java.util.Collection)var14);
    var5.setAuthenticationListeners((java.util.Collection)var14);
    var0.setSessionListeners((java.util.Collection)var14);
    java.io.InputStream var19 = org.jsecurity.util.ClassUtils.getResourceAsStream("");
    java.lang.Object[] var20 = new java.lang.Object[] { var19};
    java.util.List var21 = org.jsecurity.util.CollectionUtils.asList(var20);
    org.jsecurity.authc.pam.ModularRealmAuthenticator var22 = new org.jsecurity.authc.pam.ModularRealmAuthenticator(var21);
    org.jsecurity.authc.pam.AllSuccessfulModularAuthenticationStrategy var23 = new org.jsecurity.authc.pam.AllSuccessfulModularAuthenticationStrategy();
    var22.setModularAuthenticationStrategy((org.jsecurity.authc.pam.ModularAuthenticationStrategy)var23);
    org.jsecurity.authz.SimpleAuthorizationInfo var25 = new org.jsecurity.authz.SimpleAuthorizationInfo();
    var25.addStringPermission("hi!");
    java.io.InputStream var29 = org.jsecurity.util.ClassUtils.getResourceAsStream("");
    java.lang.Object[] var30 = new java.lang.Object[] { var29};
    java.util.List var31 = org.jsecurity.util.CollectionUtils.asList(var30);
    var25.addRoles((java.util.Collection)var31);
    var22.setAuthenticationListeners((java.util.Collection)var31);
    org.jsecurity.realm.activedirectory.ActiveDirectoryRealm var34 = new org.jsecurity.realm.activedirectory.ActiveDirectoryRealm();
    var34.setPrincipalSuffix("");
    var22.setRealm((org.jsecurity.realm.Realm)var34);
    org.jsecurity.cache.HashtableCacheManager var38 = new org.jsecurity.cache.HashtableCacheManager();
    org.jsecurity.cache.Cache var40 = var38.getCache("\u0000\u0000");
    var34.setAuthorizationCache(var40);
    var0.setRealm((org.jsecurity.realm.Realm)var34);
    org.jsecurity.subject.RememberMeManager var43 = var0.getRememberMeManager();
    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      var0.setRememberMeCipherKeyBase64("c90601ac-cfac-4c24-b18f-498fb061e4c8");
      fail("Expected exception of type java.lang.IllegalStateException");
    } catch (java.lang.IllegalStateException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var2);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var3);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var4);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var12);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var13);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var14);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var19);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var20);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var21);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var29);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var30);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var31);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var40);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var43);

  }

  public void test116() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest2.test116");


    org.jsecurity.authc.ConcurrentAccessException var1 = new org.jsecurity.authc.ConcurrentAccessException("783ccd31-48a8-42dd-890f-df885a7baaff");

  }

  public void test117() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest2.test117");


    org.jsecurity.realm.text.TextConfigurationRealm var0 = new org.jsecurity.realm.text.TextConfigurationRealm();
    org.jsecurity.realm.text.TextConfigurationRealm var1 = new org.jsecurity.realm.text.TextConfigurationRealm();
    java.io.InputStream var3 = org.jsecurity.util.ClassUtils.getResourceAsStream("");
    java.lang.Object[] var4 = new java.lang.Object[] { var3};
    java.util.List var5 = org.jsecurity.util.CollectionUtils.asList(var4);
    org.jsecurity.authc.pam.ModularRealmAuthenticator var6 = new org.jsecurity.authc.pam.ModularRealmAuthenticator(var5);
    org.jsecurity.subject.SimplePrincipalCollection var8 = new org.jsecurity.subject.SimplePrincipalCollection((java.util.Collection)var5, "org.jsecurity.authz.UnauthorizedException: org.jsecurity.session.ExpiredSessionException: ");
    org.jsecurity.session.UnknownSessionException var13 = new org.jsecurity.session.UnknownSessionException("dd\uFFFD", (java.io.Serializable)100.0f);
    org.jsecurity.session.SessionException var15 = new org.jsecurity.session.SessionException("dd\uFFFD", (java.lang.Throwable)var13, (java.io.Serializable)0);
    org.jsecurity.session.SessionException var16 = new org.jsecurity.session.SessionException("dd\uFFFD", (java.lang.Throwable)var13);
    var8.add((java.lang.Object)var16, "org.jsecurity.config.ConfigurationException: dd\uFFFD");
    var1.onLogout((org.jsecurity.subject.PrincipalCollection)var8);
    java.util.Collection var21 = var8.fromRealm("\u0000\u0000\u0000");
    var0.onLogout((org.jsecurity.subject.PrincipalCollection)var8);
    org.jsecurity.subject.SimplePrincipalCollection var23 = new org.jsecurity.subject.SimplePrincipalCollection();
    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      org.jsecurity.authz.AuthorizationInfo var24 = var0.getAuthorizationInfo((org.jsecurity.subject.PrincipalCollection)var23);
      fail("Expected exception of type java.util.NoSuchElementException");
    } catch (java.util.NoSuchElementException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var3);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var4);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var5);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var21);

  }

  public void test118() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest2.test118");


    org.jsecurity.crypto.hash.Md2Hash var1 = org.jsecurity.crypto.hash.Md2Hash.fromBase64String("a2b823b1e72eae2b727289df8a00a89df8a0bab6ad8a89c4c5c7a9b62a270000");
    org.jsecurity.authc.credential.Md2CredentialsMatcher var2 = new org.jsecurity.authc.credential.Md2CredentialsMatcher();
    org.jsecurity.authz.SimpleAuthorizingAccount var4 = new org.jsecurity.authz.SimpleAuthorizingAccount((java.lang.Object)"a2b823b1e72eae2b727289df8a00a89df8a0bab6ad8a89c4c5c7a9b62a270000", (java.lang.Object)var2, "");
    org.jsecurity.authz.SimpleRole var6 = new org.jsecurity.authz.SimpleRole("\u0000\u0000");
    java.util.Set var7 = var6.getPermissions();
    var4.add(var6);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var1);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var7);

  }

  public void test119() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest2.test119");


    org.jsecurity.cache.HashtableCache var1 = new org.jsecurity.cache.HashtableCache("\u0000\u0000\u0000");
    org.jsecurity.session.mgt.SimpleSession var2 = new org.jsecurity.session.mgt.SimpleSession();
    var2.touch();
    org.jsecurity.authz.UnauthenticatedException var6 = new org.jsecurity.authz.UnauthenticatedException();
    org.jsecurity.config.UnresolveableReferenceException var7 = new org.jsecurity.config.UnresolveableReferenceException("", (java.lang.Throwable)var6);
    org.jsecurity.cache.CacheException var8 = new org.jsecurity.cache.CacheException("org.jsecurity.config.ConfigurationException: dd\uFFFD", (java.lang.Throwable)var6);
    java.lang.Object var9 = var2.removeAttribute((java.lang.Object)var8);
    org.jsecurity.mgt.DefaultSecurityManager var10 = new org.jsecurity.mgt.DefaultSecurityManager();
    org.jsecurity.authc.pam.AllSuccessfulModularAuthenticationStrategy var11 = new org.jsecurity.authc.pam.AllSuccessfulModularAuthenticationStrategy();
    org.jsecurity.authc.pam.AllSuccessfulModularAuthenticationStrategy var12 = new org.jsecurity.authc.pam.AllSuccessfulModularAuthenticationStrategy();
    char[] var14 = new char[] { };
    org.jsecurity.authc.UsernamePasswordToken var16 = new org.jsecurity.authc.UsernamePasswordToken("hi!", var14, true);
    org.jsecurity.authc.SimpleAccount var17 = new org.jsecurity.authc.SimpleAccount();
    var17.setCredentialsExpired(false);
    boolean var20 = var17.isLocked();
    org.jsecurity.authc.AuthenticationInfo var21 = var12.afterAllAttempts((org.jsecurity.authc.AuthenticationToken)var16, (org.jsecurity.authc.AuthenticationInfo)var17);
    char[] var25 = new char[] { '4', '#'};
    org.jsecurity.authc.UsernamePasswordToken var26 = new org.jsecurity.authc.UsernamePasswordToken("\u0000\u0000", var25);
    org.jsecurity.authc.SimpleAccount var27 = new org.jsecurity.authc.SimpleAccount();
    var27.setCredentialsExpired(false);
    var27.setCredentialsExpired(false);
    boolean var32 = var27.isCredentialsExpired();
    org.jsecurity.authc.AuthenticationInfo var33 = var12.afterAllAttempts((org.jsecurity.authc.AuthenticationToken)var26, (org.jsecurity.authc.AuthenticationInfo)var27);
    org.jsecurity.authz.UnauthenticatedException var37 = new org.jsecurity.authz.UnauthenticatedException();
    org.jsecurity.config.UnresolveableReferenceException var38 = new org.jsecurity.config.UnresolveableReferenceException("", (java.lang.Throwable)var37);
    org.jsecurity.cache.CacheException var39 = new org.jsecurity.cache.CacheException("org.jsecurity.config.ConfigurationException: dd\uFFFD", (java.lang.Throwable)var37);
    org.jsecurity.authc.SimpleAuthenticationInfo var41 = new org.jsecurity.authc.SimpleAuthenticationInfo((java.lang.Object)"org.jsecurity.config.ConfigurationException: dd\uFFFD", (java.lang.Object)var39, "a2b823b1e72eae2b727289df8a00a89df8a0bab6ad8a89c4c5c7a9b62a270000");
    org.jsecurity.subject.PrincipalCollection var42 = var41.getPrincipals();
    org.jsecurity.authc.AuthenticationInfo var43 = var11.afterAllAttempts((org.jsecurity.authc.AuthenticationToken)var26, (org.jsecurity.authc.AuthenticationInfo)var41);
    var10.setModularAuthenticationStrategy((org.jsecurity.authc.pam.ModularAuthenticationStrategy)var11);
    org.jsecurity.subject.RememberMeManager var45 = var10.getRememberMeManager();
    org.jsecurity.authc.pam.ModularRealmAuthenticator var46 = new org.jsecurity.authc.pam.ModularRealmAuthenticator();
    var10.setAuthenticator((org.jsecurity.authc.Authenticator)var46);
    var1.put((java.lang.Object)var2, (java.lang.Object)var46);
    java.lang.String var49 = var1.toString();
    org.jsecurity.mgt.DefaultSecurityManager var50 = new org.jsecurity.mgt.DefaultSecurityManager();
    org.jsecurity.authz.permission.WildcardPermissionResolver var51 = new org.jsecurity.authz.permission.WildcardPermissionResolver();
    var50.setPermissionResolver((org.jsecurity.authz.permission.PermissionResolver)var51);
    org.jsecurity.cache.CacheManager var53 = var50.getCacheManager();
    org.jsecurity.authc.Authenticator var54 = var50.getAuthenticator();
    var1.remove((java.lang.Object)var50);
    var50.destroy();
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var9);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var14);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var20 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var21);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var25);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var32 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var33);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var42);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var43);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var45);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var49 + "' != '" + "HashtableCache [\u0000\u0000\u0000]"+ "'", var49.equals("HashtableCache [\u0000\u0000\u0000]"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var53);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var54);

  }

  public void test120() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest2.test120");


    org.jsecurity.io.XmlSerializer var1 = new org.jsecurity.io.XmlSerializer();
    org.jsecurity.io.ResourceException var3 = new org.jsecurity.io.ResourceException("hi!");
    org.jsecurity.codec.CodecException var4 = new org.jsecurity.codec.CodecException((java.lang.Throwable)var3);
    byte[] var5 = var1.serialize((java.lang.Object)var3);
    org.jsecurity.session.UnknownSessionException var12 = new org.jsecurity.session.UnknownSessionException("dd\uFFFD", (java.io.Serializable)100.0f);
    org.jsecurity.config.ConfigurationException var13 = new org.jsecurity.config.ConfigurationException("dd\uFFFD", (java.lang.Throwable)var12);
    org.jsecurity.session.ExpiredSessionException var15 = new org.jsecurity.session.ExpiredSessionException("", (java.lang.Throwable)var13, (java.io.Serializable)true);
    org.jsecurity.authc.pam.UnsupportedTokenException var16 = new org.jsecurity.authc.pam.UnsupportedTokenException((java.lang.Throwable)var15);
    org.jsecurity.authc.AccountException var17 = new org.jsecurity.authc.AccountException((java.lang.Throwable)var16);
    org.jsecurity.authz.UnauthorizedException var18 = new org.jsecurity.authz.UnauthorizedException("a2b823b1e72eae2b727289df8a00a89df8a0bab6ad8a89c4c5c7a9b62a270000", (java.lang.Throwable)var17);
    org.jsecurity.codec.CodecException var21 = new org.jsecurity.codec.CodecException("dd\uFFFD");
    org.jsecurity.authc.ConcurrentAccessException var22 = new org.jsecurity.authc.ConcurrentAccessException("org.jsecurity.authz.UnauthorizedException: org.jsecurity.session.ExpiredSessionException: ", (java.lang.Throwable)var21);
    org.jsecurity.subject.SimplePrincipalCollection var24 = new org.jsecurity.subject.SimplePrincipalCollection((java.lang.Object)var21, "");
    java.io.InputStream var26 = org.jsecurity.util.ClassUtils.getResourceAsStream("");
    java.lang.Object[] var27 = new java.lang.Object[] { var26};
    java.util.List var28 = org.jsecurity.util.CollectionUtils.asList(var27);
    org.jsecurity.authc.pam.ModularRealmAuthenticator var29 = new org.jsecurity.authc.pam.ModularRealmAuthenticator(var28);
    org.jsecurity.authc.pam.AllSuccessfulModularAuthenticationStrategy var30 = new org.jsecurity.authc.pam.AllSuccessfulModularAuthenticationStrategy();
    var29.setModularAuthenticationStrategy((org.jsecurity.authc.pam.ModularAuthenticationStrategy)var30);
    org.jsecurity.authz.SimpleAuthorizationInfo var32 = new org.jsecurity.authz.SimpleAuthorizationInfo();
    var32.addStringPermission("hi!");
    java.io.InputStream var36 = org.jsecurity.util.ClassUtils.getResourceAsStream("");
    java.lang.Object[] var37 = new java.lang.Object[] { var36};
    java.util.List var38 = org.jsecurity.util.CollectionUtils.asList(var37);
    var32.addRoles((java.util.Collection)var38);
    var29.setAuthenticationListeners((java.util.Collection)var38);
    org.jsecurity.realm.activedirectory.ActiveDirectoryRealm var41 = new org.jsecurity.realm.activedirectory.ActiveDirectoryRealm();
    var41.setPrincipalSuffix("");
    var29.setRealm((org.jsecurity.realm.Realm)var41);
    org.jsecurity.authc.pam.FirstSuccessfulAuthenticationStrategy var45 = new org.jsecurity.authc.pam.FirstSuccessfulAuthenticationStrategy();
    org.jsecurity.authz.UnauthorizedException var47 = new org.jsecurity.authz.UnauthorizedException("org.jsecurity.config.ConfigurationException: dd\uFFFD");
    java.lang.Throwable[] var48 = var47.getSuppressed();
    java.util.List var49 = org.jsecurity.util.CollectionUtils.asList((java.lang.Object[])var48);
    org.jsecurity.authc.UsernamePasswordToken var50 = new org.jsecurity.authc.UsernamePasswordToken();
    java.lang.String var51 = var50.getUsername();
    java.net.InetAddress var52 = var50.getInetAddress();
    org.jsecurity.authc.AuthenticationInfo var53 = var45.beforeAllAttempts((java.util.Collection)var49, (org.jsecurity.authc.AuthenticationToken)var50);
    var29.setModularAuthenticationStrategy((org.jsecurity.authc.pam.ModularAuthenticationStrategy)var45);
    org.jsecurity.authc.SimpleAccount var55 = new org.jsecurity.authc.SimpleAccount((org.jsecurity.subject.PrincipalCollection)var24, (java.lang.Object)var29);
    java.util.Collection var56 = var55.getObjectPermissions();
    java.util.Collection var57 = var55.getObjectPermissions();
    org.jsecurity.codec.CodecException var60 = new org.jsecurity.codec.CodecException("dd\uFFFD");
    org.jsecurity.authc.ConcurrentAccessException var61 = new org.jsecurity.authc.ConcurrentAccessException("org.jsecurity.authz.UnauthorizedException: org.jsecurity.session.ExpiredSessionException: ", (java.lang.Throwable)var60);
    org.jsecurity.subject.SimplePrincipalCollection var63 = new org.jsecurity.subject.SimplePrincipalCollection((java.lang.Object)var60, "");
    org.jsecurity.authc.pam.FirstSuccessfulAuthenticationStrategy var64 = new org.jsecurity.authc.pam.FirstSuccessfulAuthenticationStrategy();
    org.jsecurity.authz.UnauthorizedException var66 = new org.jsecurity.authz.UnauthorizedException("org.jsecurity.config.ConfigurationException: dd\uFFFD");
    java.lang.Throwable[] var67 = var66.getSuppressed();
    java.util.List var68 = org.jsecurity.util.CollectionUtils.asList((java.lang.Object[])var67);
    org.jsecurity.authc.UsernamePasswordToken var69 = new org.jsecurity.authc.UsernamePasswordToken();
    java.lang.String var70 = var69.getUsername();
    java.net.InetAddress var71 = var69.getInetAddress();
    org.jsecurity.authc.AuthenticationInfo var72 = var64.beforeAllAttempts((java.util.Collection)var68, (org.jsecurity.authc.AuthenticationToken)var69);
    org.jsecurity.session.UnknownSessionException var77 = new org.jsecurity.session.UnknownSessionException("dd\uFFFD", (java.io.Serializable)100.0f);
    org.jsecurity.subject.SubjectException var78 = new org.jsecurity.subject.SubjectException("dd\uFFFD", (java.lang.Throwable)var77);
    org.jsecurity.io.SerializationException var79 = new org.jsecurity.io.SerializationException("", (java.lang.Throwable)var78);
    java.lang.Throwable[] var80 = var78.getSuppressed();
    java.util.Set var81 = org.jsecurity.util.CollectionUtils.asSet((java.lang.Object[])var80);
    org.jsecurity.authc.SimpleAccount var82 = new org.jsecurity.authc.SimpleAccount((org.jsecurity.subject.PrincipalCollection)var63, (java.lang.Object)var68, var81);
    var55.setObjectPermissions(var81);
    org.jsecurity.session.UnknownSessionException var84 = new org.jsecurity.session.UnknownSessionException("b598ff3d-5685-4491-8ee6-585d37adb1db", (java.lang.Throwable)var18, (java.io.Serializable)var55);
    boolean var85 = var55.isCredentialsExpired();
    org.jsecurity.subject.PrincipalCollection var86 = var55.getPrincipals();
    org.jsecurity.session.UnknownSessionException var87 = new org.jsecurity.session.UnknownSessionException("6ef0ea81-df08-48cf-af25-ca783616684e", (java.lang.Throwable)var3, (java.io.Serializable)var86);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var5);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var26);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var27);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var28);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var36);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var37);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var38);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var48);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var49);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var51);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var52);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var53);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var56);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var57);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var67);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var68);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var70);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var71);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var72);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var80);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var81);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var85 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var86);

  }

  public void test121() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest2.test121");


    byte[] var3 = new byte[] { (byte)10, (byte)(-1), (byte)(-1)};
    byte[] var4 = org.jsecurity.codec.Base64.encode(var3);
    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      char[] var6 = org.jsecurity.codec.CodecSupport.toChars(var3, "org.jsecurity.authc.UsernamePasswordToken - hi!, rememberMe=false");
      fail("Expected exception of type org.jsecurity.codec.CodecException");
    } catch (org.jsecurity.codec.CodecException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var3);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var4);

  }

  public void test122() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest2.test122");


    org.jsecurity.session.UnknownSessionException var5 = new org.jsecurity.session.UnknownSessionException("dd\uFFFD", (java.io.Serializable)100.0f);
    org.jsecurity.session.SessionException var7 = new org.jsecurity.session.SessionException("dd\uFFFD", (java.lang.Throwable)var5, (java.io.Serializable)0);
    org.jsecurity.session.SessionException var8 = new org.jsecurity.session.SessionException("dd\uFFFD", (java.lang.Throwable)var5);
    java.io.Serializable var9 = var8.getSessionId();
    org.jsecurity.authc.AccountException var10 = new org.jsecurity.authc.AccountException("a2b823b1e72eae2b727289df8a00a89df8a0bab6ad8a89c4c5c7a9b62a270000", (java.lang.Throwable)var8);
    org.jsecurity.session.SessionException var11 = new org.jsecurity.session.SessionException((java.lang.Throwable)var10);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var9);

  }

  public void test123() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest2.test123");


    java.lang.String[] var3 = org.jsecurity.util.StringUtils.tokenizeToStringArray("a2b823b1e72eae2b727289df8a00a89df8a0bab6ad8a89c4c5c7a9b62a270000", "NfxhYN7ItBfRAmDBmprtU73ghfEEPpcDJrHPkZ06wiY=");
    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      java.lang.Object var4 = org.jsecurity.util.ClassUtils.newInstance("10f5b491-38ac-4c02-8085-950abb026a06", (java.lang.Object[])var3);
      fail("Expected exception of type org.jsecurity.util.UnknownClassException");
    } catch (org.jsecurity.util.UnknownClassException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var3);

  }

  public void test124() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest2.test124");


    org.jsecurity.authz.SimpleRole var0 = new org.jsecurity.authz.SimpleRole();
    org.jsecurity.authz.SimpleAuthorizationInfo var1 = new org.jsecurity.authz.SimpleAuthorizationInfo();
    var1.addRole("a2b823b1e72eae2b727289df8a00a89df8a0bab6ad8a89c4c5c7a9b62a270000");
    org.jsecurity.session.UnknownSessionException var8 = new org.jsecurity.session.UnknownSessionException("dd\uFFFD", (java.io.Serializable)100.0f);
    org.jsecurity.subject.SubjectException var9 = new org.jsecurity.subject.SubjectException("dd\uFFFD", (java.lang.Throwable)var8);
    org.jsecurity.io.SerializationException var10 = new org.jsecurity.io.SerializationException("", (java.lang.Throwable)var9);
    java.lang.Throwable[] var11 = var9.getSuppressed();
    java.util.Set var12 = org.jsecurity.util.CollectionUtils.asSet((java.lang.Object[])var11);
    var1.addRoles((java.util.Collection)var12);
    var0.addAll((java.util.Collection)var12);
    org.jsecurity.authz.SimpleAuthorizationInfo var15 = new org.jsecurity.authz.SimpleAuthorizationInfo();
    org.jsecurity.session.UnknownSessionException var20 = new org.jsecurity.session.UnknownSessionException("dd\uFFFD", (java.io.Serializable)100.0f);
    org.jsecurity.subject.SubjectException var21 = new org.jsecurity.subject.SubjectException("dd\uFFFD", (java.lang.Throwable)var20);
    org.jsecurity.io.SerializationException var22 = new org.jsecurity.io.SerializationException("", (java.lang.Throwable)var21);
    java.lang.Throwable[] var23 = var21.getSuppressed();
    java.util.Set var24 = org.jsecurity.util.CollectionUtils.asSet((java.lang.Object[])var23);
    var15.setStringPermissions(var24);
    org.jsecurity.authz.permission.WildcardPermissionResolver var26 = new org.jsecurity.authz.permission.WildcardPermissionResolver();
    org.jsecurity.authz.Permission var28 = var26.resolvePermission("hi!");
    var15.addObjectPermission(var28);
    var0.add(var28);
    java.lang.String var31 = var0.getName();
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var11);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var12);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var23);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var24);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var28);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var31);

  }

  public void test125() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest2.test125");


    org.jsecurity.crypto.hash.Md2Hash var1 = org.jsecurity.crypto.hash.Md2Hash.fromBase64String("a2b823b1e72eae2b727289df8a00a89df8a0bab6ad8a89c4c5c7a9b62a270000");
    org.jsecurity.authc.credential.Md2CredentialsMatcher var2 = new org.jsecurity.authc.credential.Md2CredentialsMatcher();
    org.jsecurity.authz.SimpleAuthorizingAccount var4 = new org.jsecurity.authz.SimpleAuthorizingAccount((java.lang.Object)"a2b823b1e72eae2b727289df8a00a89df8a0bab6ad8a89c4c5c7a9b62a270000", (java.lang.Object)var2, "");
    org.jsecurity.authz.SimpleAuthorizationInfo var5 = new org.jsecurity.authz.SimpleAuthorizationInfo();
    java.util.Set var6 = var5.getStringPermissions();
    org.jsecurity.authz.SimpleAuthorizationInfo var8 = new org.jsecurity.authz.SimpleAuthorizationInfo();
    org.jsecurity.session.UnknownSessionException var13 = new org.jsecurity.session.UnknownSessionException("dd\uFFFD", (java.io.Serializable)100.0f);
    org.jsecurity.subject.SubjectException var14 = new org.jsecurity.subject.SubjectException("dd\uFFFD", (java.lang.Throwable)var13);
    org.jsecurity.io.SerializationException var15 = new org.jsecurity.io.SerializationException("", (java.lang.Throwable)var14);
    java.lang.Throwable[] var16 = var14.getSuppressed();
    java.util.Set var17 = org.jsecurity.util.CollectionUtils.asSet((java.lang.Object[])var16);
    var8.setStringPermissions(var17);
    java.util.Set var19 = var8.getRoles();
    org.jsecurity.authz.SimpleAuthorizationInfo var20 = new org.jsecurity.authz.SimpleAuthorizationInfo();
    var20.addRole("a2b823b1e72eae2b727289df8a00a89df8a0bab6ad8a89c4c5c7a9b62a270000");
    org.jsecurity.session.UnknownSessionException var27 = new org.jsecurity.session.UnknownSessionException("dd\uFFFD", (java.io.Serializable)100.0f);
    org.jsecurity.subject.SubjectException var28 = new org.jsecurity.subject.SubjectException("dd\uFFFD", (java.lang.Throwable)var27);
    org.jsecurity.io.SerializationException var29 = new org.jsecurity.io.SerializationException("", (java.lang.Throwable)var28);
    java.lang.Throwable[] var30 = var28.getSuppressed();
    java.util.Set var31 = org.jsecurity.util.CollectionUtils.asSet((java.lang.Object[])var30);
    var20.addRoles((java.util.Collection)var31);
    var8.setRoles(var31);
    org.jsecurity.authz.SimpleRole var34 = new org.jsecurity.authz.SimpleRole("org.jsecurity.authz.UnauthorizedException: org.jsecurity.session.ExpiredSessionException: ", var31);
    var5.addStringPermissions((java.util.Collection)var31);
    boolean var36 = var4.isPermittedAll((java.util.Collection)var31);
    boolean var37 = var4.isCredentialsExpired();
    org.jsecurity.session.UnknownSessionException var42 = new org.jsecurity.session.UnknownSessionException("dd\uFFFD", (java.io.Serializable)100.0f);
    org.jsecurity.subject.SubjectException var43 = new org.jsecurity.subject.SubjectException("dd\uFFFD", (java.lang.Throwable)var42);
    org.jsecurity.io.SerializationException var44 = new org.jsecurity.io.SerializationException("", (java.lang.Throwable)var43);
    java.lang.Throwable[] var45 = var43.getSuppressed();
    java.lang.Throwable[] var46 = var43.getSuppressed();
    org.jsecurity.authz.SimpleAuthorizationInfo var49 = new org.jsecurity.authz.SimpleAuthorizationInfo();
    var49.addRole("a2b823b1e72eae2b727289df8a00a89df8a0bab6ad8a89c4c5c7a9b62a270000");
    org.jsecurity.session.UnknownSessionException var56 = new org.jsecurity.session.UnknownSessionException("dd\uFFFD", (java.io.Serializable)100.0f);
    org.jsecurity.subject.SubjectException var57 = new org.jsecurity.subject.SubjectException("dd\uFFFD", (java.lang.Throwable)var56);
    org.jsecurity.io.SerializationException var58 = new org.jsecurity.io.SerializationException("", (java.lang.Throwable)var57);
    java.lang.Throwable[] var59 = var57.getSuppressed();
    java.util.Set var60 = org.jsecurity.util.CollectionUtils.asSet((java.lang.Object[])var59);
    var49.addRoles((java.util.Collection)var60);
    java.io.InputStream var63 = org.jsecurity.util.ClassUtils.getResourceAsStream("");
    java.lang.Object[] var64 = new java.lang.Object[] { var63};
    java.util.List var65 = org.jsecurity.util.CollectionUtils.asList(var64);
    org.jsecurity.authc.pam.ModularRealmAuthenticator var66 = new org.jsecurity.authc.pam.ModularRealmAuthenticator(var65);
    org.jsecurity.subject.SimplePrincipalCollection var68 = new org.jsecurity.subject.SimplePrincipalCollection((java.util.Collection)var65, "org.jsecurity.authz.UnauthorizedException: org.jsecurity.session.ExpiredSessionException: ");
    org.jsecurity.session.UnknownSessionException var73 = new org.jsecurity.session.UnknownSessionException("dd\uFFFD", (java.io.Serializable)100.0f);
    org.jsecurity.session.SessionException var75 = new org.jsecurity.session.SessionException("dd\uFFFD", (java.lang.Throwable)var73, (java.io.Serializable)0);
    org.jsecurity.session.SessionException var76 = new org.jsecurity.session.SessionException("dd\uFFFD", (java.lang.Throwable)var73);
    var68.add((java.lang.Object)var76, "org.jsecurity.config.ConfigurationException: dd\uFFFD");
    java.util.Set var79 = var68.asSet();
    org.jsecurity.authz.SimpleAuthorizingAccount var80 = new org.jsecurity.authz.SimpleAuthorizingAccount((java.lang.Object)var46, (java.lang.Object)"\u0000\u0000\u0000", "\u0000\u0000\u0000", var60, var79);
    org.jsecurity.authz.SimpleRole var82 = var80.getRole("\u0000\u0000\u0000");
    java.util.Set var83 = var80.getPermissions();
    var4.addAll((java.util.Collection)var83);
    org.jsecurity.subject.PrincipalCollection var85 = var4.getPrincipals();
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var1);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var6);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var16);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var17);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var19);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var30);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var31);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var36 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var37 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var45);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var46);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var59);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var60);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var63);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var64);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var65);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var79);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var82);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var83);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var85);

  }

  public void test126() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest2.test126");


    java.lang.String[] var4 = org.jsecurity.util.StringUtils.tokenizeToStringArray("506595c4-cb43-4717-aa8e-dee65fecaada", "b6a77f71-73c4-466a-903e-72fc5968f9ac", true, false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var4);

  }

  public void test127() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest2.test127");


    org.jsecurity.mgt.DefaultSecurityManager var0 = new org.jsecurity.mgt.DefaultSecurityManager();
    org.jsecurity.authc.pam.AllSuccessfulModularAuthenticationStrategy var1 = new org.jsecurity.authc.pam.AllSuccessfulModularAuthenticationStrategy();
    org.jsecurity.authc.pam.AllSuccessfulModularAuthenticationStrategy var2 = new org.jsecurity.authc.pam.AllSuccessfulModularAuthenticationStrategy();
    char[] var4 = new char[] { };
    org.jsecurity.authc.UsernamePasswordToken var6 = new org.jsecurity.authc.UsernamePasswordToken("hi!", var4, true);
    org.jsecurity.authc.SimpleAccount var7 = new org.jsecurity.authc.SimpleAccount();
    var7.setCredentialsExpired(false);
    boolean var10 = var7.isLocked();
    org.jsecurity.authc.AuthenticationInfo var11 = var2.afterAllAttempts((org.jsecurity.authc.AuthenticationToken)var6, (org.jsecurity.authc.AuthenticationInfo)var7);
    char[] var15 = new char[] { '4', '#'};
    org.jsecurity.authc.UsernamePasswordToken var16 = new org.jsecurity.authc.UsernamePasswordToken("\u0000\u0000", var15);
    org.jsecurity.authc.SimpleAccount var17 = new org.jsecurity.authc.SimpleAccount();
    var17.setCredentialsExpired(false);
    var17.setCredentialsExpired(false);
    boolean var22 = var17.isCredentialsExpired();
    org.jsecurity.authc.AuthenticationInfo var23 = var2.afterAllAttempts((org.jsecurity.authc.AuthenticationToken)var16, (org.jsecurity.authc.AuthenticationInfo)var17);
    org.jsecurity.authz.UnauthenticatedException var27 = new org.jsecurity.authz.UnauthenticatedException();
    org.jsecurity.config.UnresolveableReferenceException var28 = new org.jsecurity.config.UnresolveableReferenceException("", (java.lang.Throwable)var27);
    org.jsecurity.cache.CacheException var29 = new org.jsecurity.cache.CacheException("org.jsecurity.config.ConfigurationException: dd\uFFFD", (java.lang.Throwable)var27);
    org.jsecurity.authc.SimpleAuthenticationInfo var31 = new org.jsecurity.authc.SimpleAuthenticationInfo((java.lang.Object)"org.jsecurity.config.ConfigurationException: dd\uFFFD", (java.lang.Object)var29, "a2b823b1e72eae2b727289df8a00a89df8a0bab6ad8a89c4c5c7a9b62a270000");
    org.jsecurity.subject.PrincipalCollection var32 = var31.getPrincipals();
    org.jsecurity.authc.AuthenticationInfo var33 = var1.afterAllAttempts((org.jsecurity.authc.AuthenticationToken)var16, (org.jsecurity.authc.AuthenticationInfo)var31);
    var0.setModularAuthenticationStrategy((org.jsecurity.authc.pam.ModularAuthenticationStrategy)var1);
    org.jsecurity.subject.RememberMeManager var35 = var0.getRememberMeManager();
    byte[] var39 = new byte[] { (byte)100, (byte)100, (byte)(-1)};
    java.lang.String var40 = org.jsecurity.codec.CodecSupport.toString(var39);
    char[] var41 = org.jsecurity.codec.CodecSupport.toChars(var39);
    boolean var42 = org.jsecurity.codec.Base64.isBase64(var39);
    boolean var43 = org.jsecurity.codec.Base64.isBase64(var39);
    boolean var44 = org.jsecurity.codec.Base64.isBase64(var39);
    char[] var45 = org.jsecurity.codec.CodecSupport.toChars(var39);
    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      var0.setRememberMeDecryptionCipherKey(var39);
      fail("Expected exception of type java.lang.IllegalStateException");
    } catch (java.lang.IllegalStateException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var4);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var10 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var11);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var15);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var22 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var23);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var32);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var33);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var35);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var39);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var40 + "' != '" + "dd\uFFFD"+ "'", var40.equals("dd\uFFFD"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var41);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var42 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var43 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var44 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var45);

  }

  public void test128() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest2.test128");


    org.jsecurity.session.mgt.eis.MemorySessionDAO var0 = new org.jsecurity.session.mgt.eis.MemorySessionDAO();
    org.jsecurity.cache.Cache var1 = var0.getActiveSessionsCache();
    org.jsecurity.cache.CacheManager var2 = var0.getCacheManager();
    org.jsecurity.cache.HashtableCacheManager var3 = new org.jsecurity.cache.HashtableCacheManager();
    org.jsecurity.cache.Cache var5 = var3.getCache("\u0000\u0000");
    var0.setActiveSessionsCache(var5);
    java.io.InputStream var8 = org.jsecurity.util.ClassUtils.getResourceAsStream("");
    java.lang.Object[] var9 = new java.lang.Object[] { var8};
    java.util.List var10 = org.jsecurity.util.CollectionUtils.asList(var9);
    org.jsecurity.authc.pam.ModularRealmAuthenticator var11 = new org.jsecurity.authc.pam.ModularRealmAuthenticator(var10);
    org.jsecurity.authc.pam.AllSuccessfulModularAuthenticationStrategy var12 = new org.jsecurity.authc.pam.AllSuccessfulModularAuthenticationStrategy();
    var11.setModularAuthenticationStrategy((org.jsecurity.authc.pam.ModularAuthenticationStrategy)var12);
    org.jsecurity.authz.SimpleAuthorizationInfo var14 = new org.jsecurity.authz.SimpleAuthorizationInfo();
    var14.addStringPermission("hi!");
    java.io.InputStream var18 = org.jsecurity.util.ClassUtils.getResourceAsStream("");
    java.lang.Object[] var19 = new java.lang.Object[] { var18};
    java.util.List var20 = org.jsecurity.util.CollectionUtils.asList(var19);
    var14.addRoles((java.util.Collection)var20);
    var11.setAuthenticationListeners((java.util.Collection)var20);
    org.jsecurity.realm.activedirectory.ActiveDirectoryRealm var23 = new org.jsecurity.realm.activedirectory.ActiveDirectoryRealm();
    var23.setPrincipalSuffix("");
    var11.setRealm((org.jsecurity.realm.Realm)var23);
    org.jsecurity.cache.HashtableCacheManager var27 = new org.jsecurity.cache.HashtableCacheManager();
    org.jsecurity.cache.Cache var29 = var27.getCache("\u0000\u0000");
    var23.setAuthorizationCache(var29);
    var0.setActiveSessionsCache(var29);
    org.jsecurity.session.mgt.SimpleSession var32 = new org.jsecurity.session.mgt.SimpleSession();
    java.io.Serializable var33 = var0.create((org.jsecurity.session.Session)var32);
    java.io.Serializable var34 = var32.getId();
    var32.validate();
    org.jsecurity.mgt.DefaultSecurityManager var36 = new org.jsecurity.mgt.DefaultSecurityManager();
    java.io.InputStream var38 = org.jsecurity.util.ClassUtils.getResourceAsStream("");
    java.lang.Object[] var39 = new java.lang.Object[] { var38};
    java.util.List var40 = org.jsecurity.util.CollectionUtils.asList(var39);
    org.jsecurity.authc.pam.ModularRealmAuthenticator var41 = new org.jsecurity.authc.pam.ModularRealmAuthenticator(var40);
    org.jsecurity.authc.pam.AllSuccessfulModularAuthenticationStrategy var42 = new org.jsecurity.authc.pam.AllSuccessfulModularAuthenticationStrategy();
    var41.setModularAuthenticationStrategy((org.jsecurity.authc.pam.ModularAuthenticationStrategy)var42);
    org.jsecurity.authz.SimpleAuthorizationInfo var44 = new org.jsecurity.authz.SimpleAuthorizationInfo();
    var44.addStringPermission("hi!");
    java.io.InputStream var48 = org.jsecurity.util.ClassUtils.getResourceAsStream("");
    java.lang.Object[] var49 = new java.lang.Object[] { var48};
    java.util.List var50 = org.jsecurity.util.CollectionUtils.asList(var49);
    var44.addRoles((java.util.Collection)var50);
    var41.setAuthenticationListeners((java.util.Collection)var50);
    var36.setSessionListeners((java.util.Collection)var50);
    org.jsecurity.authz.UnauthenticatedException var57 = new org.jsecurity.authz.UnauthenticatedException();
    org.jsecurity.config.UnresolveableReferenceException var58 = new org.jsecurity.config.UnresolveableReferenceException("", (java.lang.Throwable)var57);
    org.jsecurity.cache.CacheException var59 = new org.jsecurity.cache.CacheException("org.jsecurity.config.ConfigurationException: dd\uFFFD", (java.lang.Throwable)var57);
    org.jsecurity.authc.SimpleAuthenticationInfo var61 = new org.jsecurity.authc.SimpleAuthenticationInfo((java.lang.Object)"org.jsecurity.config.ConfigurationException: dd\uFFFD", (java.lang.Object)var59, "a2b823b1e72eae2b727289df8a00a89df8a0bab6ad8a89c4c5c7a9b62a270000");
    org.jsecurity.realm.text.TextConfigurationRealm var62 = new org.jsecurity.realm.text.TextConfigurationRealm();
    java.io.InputStream var64 = org.jsecurity.util.ClassUtils.getResourceAsStream("");
    java.lang.Object[] var65 = new java.lang.Object[] { var64};
    java.util.List var66 = org.jsecurity.util.CollectionUtils.asList(var65);
    org.jsecurity.authc.pam.ModularRealmAuthenticator var67 = new org.jsecurity.authc.pam.ModularRealmAuthenticator(var66);
    org.jsecurity.subject.SimplePrincipalCollection var69 = new org.jsecurity.subject.SimplePrincipalCollection((java.util.Collection)var66, "org.jsecurity.authz.UnauthorizedException: org.jsecurity.session.ExpiredSessionException: ");
    org.jsecurity.session.UnknownSessionException var74 = new org.jsecurity.session.UnknownSessionException("dd\uFFFD", (java.io.Serializable)100.0f);
    org.jsecurity.session.SessionException var76 = new org.jsecurity.session.SessionException("dd\uFFFD", (java.lang.Throwable)var74, (java.io.Serializable)0);
    org.jsecurity.session.SessionException var77 = new org.jsecurity.session.SessionException("dd\uFFFD", (java.lang.Throwable)var74);
    var69.add((java.lang.Object)var77, "org.jsecurity.config.ConfigurationException: dd\uFFFD");
    var62.onLogout((org.jsecurity.subject.PrincipalCollection)var69);
    org.jsecurity.authc.ExpiredCredentialsException var82 = new org.jsecurity.authc.ExpiredCredentialsException();
    org.jsecurity.session.ExpiredSessionException var83 = new org.jsecurity.session.ExpiredSessionException("", (java.lang.Throwable)var82);
    java.lang.Throwable[] var84 = var83.getSuppressed();
    org.jsecurity.io.ResourceException var85 = new org.jsecurity.io.ResourceException((java.lang.Throwable)var83);
    org.jsecurity.authc.SimpleAuthenticationInfo var86 = new org.jsecurity.authc.SimpleAuthenticationInfo((org.jsecurity.subject.PrincipalCollection)var69, (java.lang.Object)var83);
    var61.merge((org.jsecurity.authc.AuthenticationInfo)var86);
    org.jsecurity.subject.PrincipalCollection var88 = var86.getPrincipals();
    org.jsecurity.authz.SimpleAuthorizingAccount var90 = new org.jsecurity.authz.SimpleAuthorizingAccount((java.util.Collection)var50, (java.lang.Object)var88, "org.jsecurity.realm.text.TextConfigurationRealm_445");
    java.lang.Object var91 = var32.getAttribute((java.lang.Object)var90);
    org.jsecurity.authz.SimpleRole var93 = new org.jsecurity.authz.SimpleRole("9370bad8-7774-4f3f-9431-c39c9f6aa37d");
    org.jsecurity.authz.permission.WildcardPermission var96 = new org.jsecurity.authz.permission.WildcardPermission("6ef0ea81-df08-48cf-af25-ca783616684e", true);
    boolean var97 = var93.isPermitted((org.jsecurity.authz.Permission)var96);
    boolean var98 = var90.isPermitted((org.jsecurity.authz.Permission)var96);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var1);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var2);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var5);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var8);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var9);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var10);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var18);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var19);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var20);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var29);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var33 + "' != '" + "4b9d6c81-4edd-4863-940c-d095dff54756"+ "'", var33.equals("4b9d6c81-4edd-4863-940c-d095dff54756"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var34 + "' != '" + "4b9d6c81-4edd-4863-940c-d095dff54756"+ "'", var34.equals("4b9d6c81-4edd-4863-940c-d095dff54756"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var38);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var39);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var40);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var48);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var49);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var50);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var64);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var65);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var66);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var84);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var88);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var91);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var97 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var98 == false);

  }

  public void test129() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest2.test129");


    org.jsecurity.authc.LockedAccountException var1 = new org.jsecurity.authc.LockedAccountException("3aaa5efd-5a5b-4a04-b3d7-42cd5249d0e9");

  }

  public void test130() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest2.test130");


    org.jsecurity.realm.SimpleAccountRealm var1 = new org.jsecurity.realm.SimpleAccountRealm("hi!");
    char[] var4 = new char[] { };
    org.jsecurity.authc.UsernamePasswordToken var6 = new org.jsecurity.authc.UsernamePasswordToken("hi!", var4, true);
    org.jsecurity.authc.UsernamePasswordToken var7 = new org.jsecurity.authc.UsernamePasswordToken("\u0000\u0000", var4);
    java.lang.Object var8 = var7.getPrincipal();
    boolean var9 = var1.supports((org.jsecurity.authc.AuthenticationToken)var7);
    org.jsecurity.mgt.DefaultSecurityManager var10 = new org.jsecurity.mgt.DefaultSecurityManager();
    java.io.InputStream var12 = org.jsecurity.util.ClassUtils.getResourceAsStream("");
    java.lang.Object[] var13 = new java.lang.Object[] { var12};
    java.util.List var14 = org.jsecurity.util.CollectionUtils.asList(var13);
    org.jsecurity.authc.pam.ModularRealmAuthenticator var15 = new org.jsecurity.authc.pam.ModularRealmAuthenticator(var14);
    org.jsecurity.authc.pam.AllSuccessfulModularAuthenticationStrategy var16 = new org.jsecurity.authc.pam.AllSuccessfulModularAuthenticationStrategy();
    var15.setModularAuthenticationStrategy((org.jsecurity.authc.pam.ModularAuthenticationStrategy)var16);
    org.jsecurity.authz.SimpleAuthorizationInfo var18 = new org.jsecurity.authz.SimpleAuthorizationInfo();
    var18.addStringPermission("hi!");
    java.io.InputStream var22 = org.jsecurity.util.ClassUtils.getResourceAsStream("");
    java.lang.Object[] var23 = new java.lang.Object[] { var22};
    java.util.List var24 = org.jsecurity.util.CollectionUtils.asList(var23);
    var18.addRoles((java.util.Collection)var24);
    var15.setAuthenticationListeners((java.util.Collection)var24);
    var10.setSessionListeners((java.util.Collection)var24);
    org.jsecurity.realm.text.TextConfigurationRealm var28 = new org.jsecurity.realm.text.TextConfigurationRealm();
    java.io.InputStream var30 = org.jsecurity.util.ClassUtils.getResourceAsStream("");
    java.lang.Object[] var31 = new java.lang.Object[] { var30};
    java.util.List var32 = org.jsecurity.util.CollectionUtils.asList(var31);
    org.jsecurity.authc.pam.ModularRealmAuthenticator var33 = new org.jsecurity.authc.pam.ModularRealmAuthenticator(var32);
    org.jsecurity.subject.SimplePrincipalCollection var35 = new org.jsecurity.subject.SimplePrincipalCollection((java.util.Collection)var32, "org.jsecurity.authz.UnauthorizedException: org.jsecurity.session.ExpiredSessionException: ");
    org.jsecurity.session.UnknownSessionException var40 = new org.jsecurity.session.UnknownSessionException("dd\uFFFD", (java.io.Serializable)100.0f);
    org.jsecurity.session.SessionException var42 = new org.jsecurity.session.SessionException("dd\uFFFD", (java.lang.Throwable)var40, (java.io.Serializable)0);
    org.jsecurity.session.SessionException var43 = new org.jsecurity.session.SessionException("dd\uFFFD", (java.lang.Throwable)var40);
    var35.add((java.lang.Object)var43, "org.jsecurity.config.ConfigurationException: dd\uFFFD");
    var28.onLogout((org.jsecurity.subject.PrincipalCollection)var35);
    org.jsecurity.authc.pam.FirstSuccessfulAuthenticationStrategy var47 = new org.jsecurity.authc.pam.FirstSuccessfulAuthenticationStrategy();
    org.jsecurity.authz.UnauthorizedException var49 = new org.jsecurity.authz.UnauthorizedException("org.jsecurity.config.ConfigurationException: dd\uFFFD");
    java.lang.Throwable[] var50 = var49.getSuppressed();
    java.util.List var51 = org.jsecurity.util.CollectionUtils.asList((java.lang.Object[])var50);
    org.jsecurity.authc.UsernamePasswordToken var52 = new org.jsecurity.authc.UsernamePasswordToken();
    java.lang.String var53 = var52.getUsername();
    java.net.InetAddress var54 = var52.getInetAddress();
    org.jsecurity.authc.AuthenticationInfo var55 = var47.beforeAllAttempts((java.util.Collection)var51, (org.jsecurity.authc.AuthenticationToken)var52);
    boolean[] var56 = var10.hasRoles((org.jsecurity.subject.PrincipalCollection)var35, var51);
    boolean var57 = var35.isEmpty();
    org.jsecurity.authz.SimpleAuthorizationInfo var58 = new org.jsecurity.authz.SimpleAuthorizationInfo();
    var58.addRole("a2b823b1e72eae2b727289df8a00a89df8a0bab6ad8a89c4c5c7a9b62a270000");
    org.jsecurity.session.UnknownSessionException var65 = new org.jsecurity.session.UnknownSessionException("dd\uFFFD", (java.io.Serializable)100.0f);
    org.jsecurity.subject.SubjectException var66 = new org.jsecurity.subject.SubjectException("dd\uFFFD", (java.lang.Throwable)var65);
    org.jsecurity.io.SerializationException var67 = new org.jsecurity.io.SerializationException("", (java.lang.Throwable)var66);
    java.lang.Throwable[] var68 = var66.getSuppressed();
    java.util.Set var69 = org.jsecurity.util.CollectionUtils.asSet((java.lang.Object[])var68);
    var58.addRoles((java.util.Collection)var69);
    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      boolean var71 = var1.isPermittedAll((org.jsecurity.subject.PrincipalCollection)var35, (java.util.Collection)var69);
      fail("Expected exception of type java.util.NoSuchElementException");
    } catch (java.util.NoSuchElementException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var4);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var8 + "' != '" + "\u0000\u0000"+ "'", var8.equals("\u0000\u0000"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var9 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var12);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var13);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var14);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var22);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var23);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var24);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var30);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var31);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var32);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var50);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var51);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var53);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var54);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var55);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var56);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var57 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var68);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var69);

  }

  public void test131() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest2.test131");


    org.jsecurity.authc.AccountException var1 = new org.jsecurity.authc.AccountException("org.jsecurity.authc.UsernamePasswordToken - \u0000\u0000, rememberMe=false (Jeshs-iMac.local/192.168.2.1)");

  }

  public void test132() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest2.test132");


    org.jsecurity.authc.pam.AllSuccessfulModularAuthenticationStrategy var1 = new org.jsecurity.authc.pam.AllSuccessfulModularAuthenticationStrategy();
    org.jsecurity.authc.pam.AllSuccessfulModularAuthenticationStrategy var2 = new org.jsecurity.authc.pam.AllSuccessfulModularAuthenticationStrategy();
    char[] var4 = new char[] { };
    org.jsecurity.authc.UsernamePasswordToken var6 = new org.jsecurity.authc.UsernamePasswordToken("hi!", var4, true);
    org.jsecurity.authc.SimpleAccount var7 = new org.jsecurity.authc.SimpleAccount();
    var7.setCredentialsExpired(false);
    boolean var10 = var7.isLocked();
    org.jsecurity.authc.AuthenticationInfo var11 = var2.afterAllAttempts((org.jsecurity.authc.AuthenticationToken)var6, (org.jsecurity.authc.AuthenticationInfo)var7);
    char[] var15 = new char[] { '4', '#'};
    org.jsecurity.authc.UsernamePasswordToken var16 = new org.jsecurity.authc.UsernamePasswordToken("\u0000\u0000", var15);
    org.jsecurity.authc.SimpleAccount var17 = new org.jsecurity.authc.SimpleAccount();
    var17.setCredentialsExpired(false);
    var17.setCredentialsExpired(false);
    boolean var22 = var17.isCredentialsExpired();
    org.jsecurity.authc.AuthenticationInfo var23 = var2.afterAllAttempts((org.jsecurity.authc.AuthenticationToken)var16, (org.jsecurity.authc.AuthenticationInfo)var17);
    org.jsecurity.authz.UnauthenticatedException var27 = new org.jsecurity.authz.UnauthenticatedException();
    org.jsecurity.config.UnresolveableReferenceException var28 = new org.jsecurity.config.UnresolveableReferenceException("", (java.lang.Throwable)var27);
    org.jsecurity.cache.CacheException var29 = new org.jsecurity.cache.CacheException("org.jsecurity.config.ConfigurationException: dd\uFFFD", (java.lang.Throwable)var27);
    org.jsecurity.authc.SimpleAuthenticationInfo var31 = new org.jsecurity.authc.SimpleAuthenticationInfo((java.lang.Object)"org.jsecurity.config.ConfigurationException: dd\uFFFD", (java.lang.Object)var29, "a2b823b1e72eae2b727289df8a00a89df8a0bab6ad8a89c4c5c7a9b62a270000");
    org.jsecurity.subject.PrincipalCollection var32 = var31.getPrincipals();
    org.jsecurity.authc.AuthenticationInfo var33 = var1.afterAllAttempts((org.jsecurity.authc.AuthenticationToken)var16, (org.jsecurity.authc.AuthenticationInfo)var31);
    org.jsecurity.session.UnknownSessionException var37 = new org.jsecurity.session.UnknownSessionException("dd\uFFFD", (java.io.Serializable)100.0f);
    org.jsecurity.session.SessionException var39 = new org.jsecurity.session.SessionException("dd\uFFFD", (java.lang.Throwable)var37, (java.io.Serializable)0);
    var31.setCredentials((java.lang.Object)var37);
    org.jsecurity.util.UnavailableConstructorException var41 = new org.jsecurity.util.UnavailableConstructorException((java.lang.Throwable)var37);
    org.jsecurity.authz.UnauthorizedException var42 = new org.jsecurity.authz.UnauthorizedException((java.lang.Throwable)var37);
    org.jsecurity.authc.ConcurrentAccessException var43 = new org.jsecurity.authc.ConcurrentAccessException("b6a77f71-73c4-466a-903e-72fc5968f9ac", (java.lang.Throwable)var37);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var4);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var10 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var11);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var15);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var22 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var23);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var32);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var33);

  }

  public void test133() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest2.test133");


    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      org.jsecurity.crypto.hash.Md5Hash var1 = org.jsecurity.crypto.hash.Md5Hash.fromHexString("org.jsecurity.authc.UsernamePasswordToken - \u0000\u0000, rememberMe=false");
      fail("Expected exception of type java.lang.IllegalArgumentException");
    } catch (java.lang.IllegalArgumentException e) {
      // Expected exception.
    }

  }

  public void test134() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest2.test134");


    org.jsecurity.cache.HashtableCache var1 = new org.jsecurity.cache.HashtableCache("\u0000\u0000\u0000");
    org.jsecurity.session.mgt.SimpleSession var2 = new org.jsecurity.session.mgt.SimpleSession();
    var2.touch();
    org.jsecurity.authz.UnauthenticatedException var6 = new org.jsecurity.authz.UnauthenticatedException();
    org.jsecurity.config.UnresolveableReferenceException var7 = new org.jsecurity.config.UnresolveableReferenceException("", (java.lang.Throwable)var6);
    org.jsecurity.cache.CacheException var8 = new org.jsecurity.cache.CacheException("org.jsecurity.config.ConfigurationException: dd\uFFFD", (java.lang.Throwable)var6);
    java.lang.Object var9 = var2.removeAttribute((java.lang.Object)var8);
    org.jsecurity.mgt.DefaultSecurityManager var10 = new org.jsecurity.mgt.DefaultSecurityManager();
    org.jsecurity.authc.pam.AllSuccessfulModularAuthenticationStrategy var11 = new org.jsecurity.authc.pam.AllSuccessfulModularAuthenticationStrategy();
    org.jsecurity.authc.pam.AllSuccessfulModularAuthenticationStrategy var12 = new org.jsecurity.authc.pam.AllSuccessfulModularAuthenticationStrategy();
    char[] var14 = new char[] { };
    org.jsecurity.authc.UsernamePasswordToken var16 = new org.jsecurity.authc.UsernamePasswordToken("hi!", var14, true);
    org.jsecurity.authc.SimpleAccount var17 = new org.jsecurity.authc.SimpleAccount();
    var17.setCredentialsExpired(false);
    boolean var20 = var17.isLocked();
    org.jsecurity.authc.AuthenticationInfo var21 = var12.afterAllAttempts((org.jsecurity.authc.AuthenticationToken)var16, (org.jsecurity.authc.AuthenticationInfo)var17);
    char[] var25 = new char[] { '4', '#'};
    org.jsecurity.authc.UsernamePasswordToken var26 = new org.jsecurity.authc.UsernamePasswordToken("\u0000\u0000", var25);
    org.jsecurity.authc.SimpleAccount var27 = new org.jsecurity.authc.SimpleAccount();
    var27.setCredentialsExpired(false);
    var27.setCredentialsExpired(false);
    boolean var32 = var27.isCredentialsExpired();
    org.jsecurity.authc.AuthenticationInfo var33 = var12.afterAllAttempts((org.jsecurity.authc.AuthenticationToken)var26, (org.jsecurity.authc.AuthenticationInfo)var27);
    org.jsecurity.authz.UnauthenticatedException var37 = new org.jsecurity.authz.UnauthenticatedException();
    org.jsecurity.config.UnresolveableReferenceException var38 = new org.jsecurity.config.UnresolveableReferenceException("", (java.lang.Throwable)var37);
    org.jsecurity.cache.CacheException var39 = new org.jsecurity.cache.CacheException("org.jsecurity.config.ConfigurationException: dd\uFFFD", (java.lang.Throwable)var37);
    org.jsecurity.authc.SimpleAuthenticationInfo var41 = new org.jsecurity.authc.SimpleAuthenticationInfo((java.lang.Object)"org.jsecurity.config.ConfigurationException: dd\uFFFD", (java.lang.Object)var39, "a2b823b1e72eae2b727289df8a00a89df8a0bab6ad8a89c4c5c7a9b62a270000");
    org.jsecurity.subject.PrincipalCollection var42 = var41.getPrincipals();
    org.jsecurity.authc.AuthenticationInfo var43 = var11.afterAllAttempts((org.jsecurity.authc.AuthenticationToken)var26, (org.jsecurity.authc.AuthenticationInfo)var41);
    var10.setModularAuthenticationStrategy((org.jsecurity.authc.pam.ModularAuthenticationStrategy)var11);
    org.jsecurity.subject.RememberMeManager var45 = var10.getRememberMeManager();
    org.jsecurity.authc.pam.ModularRealmAuthenticator var46 = new org.jsecurity.authc.pam.ModularRealmAuthenticator();
    var10.setAuthenticator((org.jsecurity.authc.Authenticator)var46);
    var1.put((java.lang.Object)var2, (java.lang.Object)var46);
    org.jsecurity.session.mgt.ImmutableProxiedSession var49 = new org.jsecurity.session.mgt.ImmutableProxiedSession((org.jsecurity.session.Session)var2);
    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      var49.touch();
      fail("Expected exception of type org.jsecurity.session.InvalidSessionException");
    } catch (org.jsecurity.session.InvalidSessionException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var9);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var14);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var20 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var21);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var25);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var32 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var33);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var42);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var43);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var45);

  }

  public void test135() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest2.test135");


    org.jsecurity.crypto.hash.Md5Hash var1 = org.jsecurity.crypto.hash.Md5Hash.fromBase64String("a2b823b1e72eae2b727289df8a00a89df8a0bab6ad8a89c4c5c7a9b62a270000");
    org.jsecurity.util.AntPathMatcher var2 = new org.jsecurity.util.AntPathMatcher();
    boolean var5 = var2.matchStart("\uFFFD\uFFFD#\uFFFD\uFFFD.\uFFFD+rr\uFFFD\u07CA\u0000\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\u01E9\uFFFD*'\u0000\u0000", "ZGT/");
    boolean var8 = var2.matches("6464ff", "orgjsecurityauthcCredentialsException783ccd3148a842dd890fdf885a7baafAA==");
    boolean var9 = var1.equals((java.lang.Object)var8);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var5 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var8 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var9 == false);

  }

  public void test136() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest2.test136");


    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      java.io.InputStream var1 = org.jsecurity.io.ResourceUtils.getInputStreamForPath("69d3a52f-a464-4f98-8253-2a105929a356");
      fail("Expected exception of type java.io.FileNotFoundException");
    } catch (java.io.FileNotFoundException e) {
      // Expected exception.
    }

  }

  public void test137() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest2.test137");


    org.jsecurity.realm.activedirectory.ActiveDirectoryRealm var0 = new org.jsecurity.realm.activedirectory.ActiveDirectoryRealm();
    var0.init();
    var0.setSystemPassword("dd\uFFFD");
    org.jsecurity.authz.aop.GuestAnnotationHandler var4 = new org.jsecurity.authz.aop.GuestAnnotationHandler();
    java.lang.Class var5 = var4.getAnnotationClass();
    var0.setAuthenticationTokenClass(var5);
    org.jsecurity.mgt.DefaultSecurityManager var7 = new org.jsecurity.mgt.DefaultSecurityManager((org.jsecurity.realm.Realm)var0);
    org.jsecurity.cache.CacheManager var8 = var0.getCacheManager();
    org.jsecurity.realm.text.PropertiesRealm var9 = new org.jsecurity.realm.text.PropertiesRealm(var8);
    var9.run();
    var9.afterAuthorizationCacheSet();
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var5);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var8);

  }

  public void test138() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest2.test138");


    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      org.jsecurity.io.IniResource var2 = new org.jsecurity.io.IniResource("ca73d1a4-706e-42e7-980f-896d3b153de8", "534d81de-ee39-466d-b839-49671dee6c25");
      fail("Expected exception of type org.jsecurity.io.ResourceException");
    } catch (org.jsecurity.io.ResourceException e) {
      // Expected exception.
    }

  }

  public void test139() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest2.test139");


    org.jsecurity.config.IniConfiguration var0 = new org.jsecurity.config.IniConfiguration();
    java.lang.String var1 = var0.getConfig();
    var0.setConfig("\uFFFD\uFFFD#\uFFFD\uFFFD.\uFFFD+rr\uFFFD\u07CA\u0000\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\u01E9\uFFFD*'\u0000\u0000");
    var0.setConfig("ff1bb54d-80f9-4308-a260-ff3ddf1355e9");
    org.jsecurity.realm.text.TextConfigurationRealm var6 = new org.jsecurity.realm.text.TextConfigurationRealm();
    java.io.InputStream var8 = org.jsecurity.util.ClassUtils.getResourceAsStream("");
    java.lang.Object[] var9 = new java.lang.Object[] { var8};
    java.util.List var10 = org.jsecurity.util.CollectionUtils.asList(var9);
    org.jsecurity.authc.pam.ModularRealmAuthenticator var11 = new org.jsecurity.authc.pam.ModularRealmAuthenticator(var10);
    org.jsecurity.subject.SimplePrincipalCollection var13 = new org.jsecurity.subject.SimplePrincipalCollection((java.util.Collection)var10, "org.jsecurity.authz.UnauthorizedException: org.jsecurity.session.ExpiredSessionException: ");
    org.jsecurity.session.UnknownSessionException var18 = new org.jsecurity.session.UnknownSessionException("dd\uFFFD", (java.io.Serializable)100.0f);
    org.jsecurity.session.SessionException var20 = new org.jsecurity.session.SessionException("dd\uFFFD", (java.lang.Throwable)var18, (java.io.Serializable)0);
    org.jsecurity.session.SessionException var21 = new org.jsecurity.session.SessionException("dd\uFFFD", (java.lang.Throwable)var18);
    var13.add((java.lang.Object)var21, "org.jsecurity.config.ConfigurationException: dd\uFFFD");
    var6.onLogout((org.jsecurity.subject.PrincipalCollection)var13);
    java.util.Collection var26 = var13.fromRealm("\u0000\u0000\u0000");
    org.jsecurity.session.mgt.eis.MemorySessionDAO var27 = new org.jsecurity.session.mgt.eis.MemorySessionDAO();
    org.jsecurity.authc.SimpleAuthenticationInfo var28 = new org.jsecurity.authc.SimpleAuthenticationInfo((org.jsecurity.subject.PrincipalCollection)var13, (java.lang.Object)var27);
    org.jsecurity.authz.SimpleAuthorizingAccount var30 = new org.jsecurity.authz.SimpleAuthorizingAccount((java.lang.Object)"ff1bb54d-80f9-4308-a260-ff3ddf1355e9", (java.lang.Object)var27, "330a41fd-f404-4b7f-8f3c-bc52c3f67c3e");
    org.jsecurity.mgt.DefaultSecurityManager var31 = new org.jsecurity.mgt.DefaultSecurityManager();
    java.io.InputStream var33 = org.jsecurity.util.ClassUtils.getResourceAsStream("");
    java.lang.Object[] var34 = new java.lang.Object[] { var33};
    java.util.List var35 = org.jsecurity.util.CollectionUtils.asList(var34);
    org.jsecurity.authc.pam.ModularRealmAuthenticator var36 = new org.jsecurity.authc.pam.ModularRealmAuthenticator(var35);
    org.jsecurity.authc.pam.AllSuccessfulModularAuthenticationStrategy var37 = new org.jsecurity.authc.pam.AllSuccessfulModularAuthenticationStrategy();
    var36.setModularAuthenticationStrategy((org.jsecurity.authc.pam.ModularAuthenticationStrategy)var37);
    org.jsecurity.authz.SimpleAuthorizationInfo var39 = new org.jsecurity.authz.SimpleAuthorizationInfo();
    var39.addStringPermission("hi!");
    java.io.InputStream var43 = org.jsecurity.util.ClassUtils.getResourceAsStream("");
    java.lang.Object[] var44 = new java.lang.Object[] { var43};
    java.util.List var45 = org.jsecurity.util.CollectionUtils.asList(var44);
    var39.addRoles((java.util.Collection)var45);
    var36.setAuthenticationListeners((java.util.Collection)var45);
    var31.setSessionListeners((java.util.Collection)var45);
    org.jsecurity.authc.pam.ModularRealmAuthenticator var49 = new org.jsecurity.authc.pam.ModularRealmAuthenticator();
    org.jsecurity.authz.permission.InvalidPermissionStringException var52 = new org.jsecurity.authz.permission.InvalidPermissionStringException("", "dd\uFFFD");
    org.jsecurity.JSecurityException var54 = new org.jsecurity.JSecurityException("");
    org.jsecurity.authc.SimpleAuthenticationInfo var56 = new org.jsecurity.authc.SimpleAuthenticationInfo((java.lang.Object)var52, (java.lang.Object)"", "org.jsecurity.authz.UnauthorizedException: org.jsecurity.session.ExpiredSessionException: ");
    org.jsecurity.subject.PrincipalCollection var57 = var56.getPrincipals();
    var49.onLogout(var57);
    var31.setAuthenticator((org.jsecurity.authc.Authenticator)var49);
    org.jsecurity.cache.CacheManager var60 = var31.getCacheManager();
    org.jsecurity.authc.Authenticator var61 = var31.getAuthenticator();
    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      org.jsecurity.crypto.hash.Sha512Hash var62 = new org.jsecurity.crypto.hash.Sha512Hash((java.lang.Object)"330a41fd-f404-4b7f-8f3c-bc52c3f67c3e", (java.lang.Object)var61);
      fail("Expected exception of type org.jsecurity.codec.CodecException");
    } catch (org.jsecurity.codec.CodecException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var1);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var8);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var9);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var10);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var26);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var33);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var34);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var35);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var43);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var44);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var45);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var57);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var60);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var61);

  }

  public void test140() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest2.test140");


    org.jsecurity.session.UnknownSessionException var5 = new org.jsecurity.session.UnknownSessionException("dd\uFFFD", (java.io.Serializable)100.0f);
    org.jsecurity.subject.SubjectException var6 = new org.jsecurity.subject.SubjectException("dd\uFFFD", (java.lang.Throwable)var5);
    org.jsecurity.authc.AccountException var7 = new org.jsecurity.authc.AccountException("hi!", (java.lang.Throwable)var6);
    org.jsecurity.session.StoppedSessionException var8 = new org.jsecurity.session.StoppedSessionException((java.lang.Throwable)var7);
    org.jsecurity.session.SessionException var9 = new org.jsecurity.session.SessionException("hi!", (java.lang.Throwable)var7);
    org.jsecurity.config.UnresolveableReferenceException var10 = new org.jsecurity.config.UnresolveableReferenceException((java.lang.Throwable)var7);

  }

  public void test141() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest2.test141");


    org.jsecurity.mgt.DefaultSecurityManager var0 = new org.jsecurity.mgt.DefaultSecurityManager();
    java.io.InputStream var2 = org.jsecurity.util.ClassUtils.getResourceAsStream("");
    java.lang.Object[] var3 = new java.lang.Object[] { var2};
    java.util.List var4 = org.jsecurity.util.CollectionUtils.asList(var3);
    org.jsecurity.authc.pam.ModularRealmAuthenticator var5 = new org.jsecurity.authc.pam.ModularRealmAuthenticator(var4);
    org.jsecurity.authc.pam.AllSuccessfulModularAuthenticationStrategy var6 = new org.jsecurity.authc.pam.AllSuccessfulModularAuthenticationStrategy();
    var5.setModularAuthenticationStrategy((org.jsecurity.authc.pam.ModularAuthenticationStrategy)var6);
    org.jsecurity.authz.SimpleAuthorizationInfo var8 = new org.jsecurity.authz.SimpleAuthorizationInfo();
    var8.addStringPermission("hi!");
    java.io.InputStream var12 = org.jsecurity.util.ClassUtils.getResourceAsStream("");
    java.lang.Object[] var13 = new java.lang.Object[] { var12};
    java.util.List var14 = org.jsecurity.util.CollectionUtils.asList(var13);
    var8.addRoles((java.util.Collection)var14);
    var5.setAuthenticationListeners((java.util.Collection)var14);
    var0.setSessionListeners((java.util.Collection)var14);
    org.jsecurity.realm.text.TextConfigurationRealm var18 = new org.jsecurity.realm.text.TextConfigurationRealm();
    java.io.InputStream var20 = org.jsecurity.util.ClassUtils.getResourceAsStream("");
    java.lang.Object[] var21 = new java.lang.Object[] { var20};
    java.util.List var22 = org.jsecurity.util.CollectionUtils.asList(var21);
    org.jsecurity.authc.pam.ModularRealmAuthenticator var23 = new org.jsecurity.authc.pam.ModularRealmAuthenticator(var22);
    org.jsecurity.subject.SimplePrincipalCollection var25 = new org.jsecurity.subject.SimplePrincipalCollection((java.util.Collection)var22, "org.jsecurity.authz.UnauthorizedException: org.jsecurity.session.ExpiredSessionException: ");
    org.jsecurity.session.UnknownSessionException var30 = new org.jsecurity.session.UnknownSessionException("dd\uFFFD", (java.io.Serializable)100.0f);
    org.jsecurity.session.SessionException var32 = new org.jsecurity.session.SessionException("dd\uFFFD", (java.lang.Throwable)var30, (java.io.Serializable)0);
    org.jsecurity.session.SessionException var33 = new org.jsecurity.session.SessionException("dd\uFFFD", (java.lang.Throwable)var30);
    var25.add((java.lang.Object)var33, "org.jsecurity.config.ConfigurationException: dd\uFFFD");
    var18.onLogout((org.jsecurity.subject.PrincipalCollection)var25);
    org.jsecurity.authc.pam.FirstSuccessfulAuthenticationStrategy var37 = new org.jsecurity.authc.pam.FirstSuccessfulAuthenticationStrategy();
    org.jsecurity.authz.UnauthorizedException var39 = new org.jsecurity.authz.UnauthorizedException("org.jsecurity.config.ConfigurationException: dd\uFFFD");
    java.lang.Throwable[] var40 = var39.getSuppressed();
    java.util.List var41 = org.jsecurity.util.CollectionUtils.asList((java.lang.Object[])var40);
    org.jsecurity.authc.UsernamePasswordToken var42 = new org.jsecurity.authc.UsernamePasswordToken();
    java.lang.String var43 = var42.getUsername();
    java.net.InetAddress var44 = var42.getInetAddress();
    org.jsecurity.authc.AuthenticationInfo var45 = var37.beforeAllAttempts((java.util.Collection)var41, (org.jsecurity.authc.AuthenticationToken)var42);
    boolean[] var46 = var0.hasRoles((org.jsecurity.subject.PrincipalCollection)var25, var41);
    org.jsecurity.session.mgt.SessionManager var47 = var0.getSessionManager();
    org.jsecurity.io.XmlSerializer var48 = new org.jsecurity.io.XmlSerializer();
    org.jsecurity.session.mgt.quartz.QuartzSessionValidationScheduler var49 = new org.jsecurity.session.mgt.quartz.QuartzSessionValidationScheduler();
    var49.disableSessionValidation();
    byte[] var51 = var48.serialize((java.lang.Object)var49);
    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      var0.setRememberMeCipherKey(var51);
      fail("Expected exception of type java.lang.IllegalStateException");
    } catch (java.lang.IllegalStateException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var2);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var3);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var4);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var12);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var13);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var14);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var20);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var21);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var22);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var40);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var41);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var43);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var44);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var45);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var46);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var47);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var51);

  }

  public void test142() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest2.test142");


    org.jsecurity.session.mgt.DefaultSessionManager var0 = new org.jsecurity.session.mgt.DefaultSessionManager();
    var0.setGlobalSessionTimeout(1);
    var0.validateSessions();
    org.jsecurity.subject.InvalidSubjectException var5 = new org.jsecurity.subject.InvalidSubjectException("org.jsecurity.realm.text.TextConfigurationRealm_1021");
    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      java.util.Date var6 = var0.getStartTimestamp((java.io.Serializable)var5);
      fail("Expected exception of type org.jsecurity.session.UnknownSessionException");
    } catch (org.jsecurity.session.UnknownSessionException e) {
      // Expected exception.
    }

  }

  public void test143() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest2.test143");


    org.jsecurity.realm.jndi.JndiRealmFactory var0 = new org.jsecurity.realm.jndi.JndiRealmFactory();
    java.io.InputStream var2 = org.jsecurity.util.ClassUtils.getResourceAsStream("");
    java.lang.Object[] var3 = new java.lang.Object[] { var2};
    java.util.List var4 = org.jsecurity.util.CollectionUtils.asList(var3);
    var0.setJndiNames((java.util.Collection)var4);
    var0.setJndiNames("e23a02c5-2287-4daa-91c4-8efed2be0f73");
    java.util.Collection var8 = var0.getJndiNames();
    org.jsecurity.authz.SimpleAuthorizationInfo var9 = new org.jsecurity.authz.SimpleAuthorizationInfo();
    org.jsecurity.session.UnknownSessionException var14 = new org.jsecurity.session.UnknownSessionException("dd\uFFFD", (java.io.Serializable)100.0f);
    org.jsecurity.subject.SubjectException var15 = new org.jsecurity.subject.SubjectException("dd\uFFFD", (java.lang.Throwable)var14);
    org.jsecurity.io.SerializationException var16 = new org.jsecurity.io.SerializationException("", (java.lang.Throwable)var15);
    java.lang.Throwable[] var17 = var15.getSuppressed();
    java.util.Set var18 = org.jsecurity.util.CollectionUtils.asSet((java.lang.Object[])var17);
    var9.setStringPermissions(var18);
    var0.setJndiNames((java.util.Collection)var18);
    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      org.jsecurity.crypto.hash.Sha512Hash var21 = new org.jsecurity.crypto.hash.Sha512Hash((java.lang.Object)var18);
      fail("Expected exception of type org.jsecurity.codec.CodecException");
    } catch (org.jsecurity.codec.CodecException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var2);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var3);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var4);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var8);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var17);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var18);

  }

  public void test144() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest2.test144");


    org.jsecurity.cache.ehcache.EhCacheManager var0 = new org.jsecurity.cache.ehcache.EhCacheManager();
    var0.init();
    var0.setCacheManagerConfigFile("b6a77f71-73c4-466a-903e-72fc5968f9ac");
    org.jsecurity.realm.text.PropertiesRealm var4 = new org.jsecurity.realm.text.PropertiesRealm((org.jsecurity.cache.CacheManager)var0);
    var4.addRole("1f4da124-b55c-4be1-ae95-84c40eba1207");

  }

  public void test145() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest2.test145");


    org.jsecurity.session.mgt.eis.MemorySessionDAO var0 = new org.jsecurity.session.mgt.eis.MemorySessionDAO();
    org.jsecurity.cache.Cache var1 = var0.getActiveSessionsCache();
    org.jsecurity.cache.CacheManager var2 = var0.getCacheManager();
    org.jsecurity.cache.HashtableCacheManager var3 = new org.jsecurity.cache.HashtableCacheManager();
    org.jsecurity.cache.Cache var5 = var3.getCache("\u0000\u0000");
    var0.setActiveSessionsCache(var5);
    java.io.InputStream var8 = org.jsecurity.util.ClassUtils.getResourceAsStream("");
    java.lang.Object[] var9 = new java.lang.Object[] { var8};
    java.util.List var10 = org.jsecurity.util.CollectionUtils.asList(var9);
    org.jsecurity.authc.pam.ModularRealmAuthenticator var11 = new org.jsecurity.authc.pam.ModularRealmAuthenticator(var10);
    org.jsecurity.authc.pam.AllSuccessfulModularAuthenticationStrategy var12 = new org.jsecurity.authc.pam.AllSuccessfulModularAuthenticationStrategy();
    var11.setModularAuthenticationStrategy((org.jsecurity.authc.pam.ModularAuthenticationStrategy)var12);
    org.jsecurity.authz.SimpleAuthorizationInfo var14 = new org.jsecurity.authz.SimpleAuthorizationInfo();
    var14.addStringPermission("hi!");
    java.io.InputStream var18 = org.jsecurity.util.ClassUtils.getResourceAsStream("");
    java.lang.Object[] var19 = new java.lang.Object[] { var18};
    java.util.List var20 = org.jsecurity.util.CollectionUtils.asList(var19);
    var14.addRoles((java.util.Collection)var20);
    var11.setAuthenticationListeners((java.util.Collection)var20);
    org.jsecurity.realm.activedirectory.ActiveDirectoryRealm var23 = new org.jsecurity.realm.activedirectory.ActiveDirectoryRealm();
    var23.setPrincipalSuffix("");
    var11.setRealm((org.jsecurity.realm.Realm)var23);
    org.jsecurity.cache.HashtableCacheManager var27 = new org.jsecurity.cache.HashtableCacheManager();
    org.jsecurity.cache.Cache var29 = var27.getCache("\u0000\u0000");
    var23.setAuthorizationCache(var29);
    var0.setActiveSessionsCache(var29);
    org.jsecurity.session.mgt.SimpleSession var32 = new org.jsecurity.session.mgt.SimpleSession();
    java.io.Serializable var33 = var0.create((org.jsecurity.session.Session)var32);
    org.jsecurity.session.mgt.SimpleSession var34 = new org.jsecurity.session.mgt.SimpleSession();
    var34.touch();
    var34.validate();
    org.jsecurity.session.mgt.SimpleSession var37 = new org.jsecurity.session.mgt.SimpleSession();
    var37.setTimeout((-1L));
    org.jsecurity.session.mgt.SimpleSession var40 = new org.jsecurity.session.mgt.SimpleSession();
    java.util.Date var41 = var40.getLastAccessTime();
    var37.setLastAccessTime(var41);
    org.jsecurity.session.mgt.SimpleSession var43 = new org.jsecurity.session.mgt.SimpleSession();
    java.util.Date var44 = var43.getLastAccessTime();
    var37.setStopTimestamp(var44);
    var34.setLastAccessTime(var44);
    var32.setLastAccessTime(var44);
    org.jsecurity.session.mgt.ImmutableProxiedSession var48 = new org.jsecurity.session.mgt.ImmutableProxiedSession((org.jsecurity.session.Session)var32);
    java.io.Serializable var49 = var48.getId();
    org.jsecurity.authc.IncorrectCredentialsException var52 = new org.jsecurity.authc.IncorrectCredentialsException("\u0000\u0000");
    org.jsecurity.codec.CodecException var55 = new org.jsecurity.codec.CodecException("dd\uFFFD");
    org.jsecurity.authc.ConcurrentAccessException var56 = new org.jsecurity.authc.ConcurrentAccessException("org.jsecurity.authz.UnauthorizedException: org.jsecurity.session.ExpiredSessionException: ", (java.lang.Throwable)var55);
    org.jsecurity.subject.SimplePrincipalCollection var58 = new org.jsecurity.subject.SimplePrincipalCollection((java.lang.Object)var55, "");
    java.io.InputStream var60 = org.jsecurity.util.ClassUtils.getResourceAsStream("");
    java.lang.Object[] var61 = new java.lang.Object[] { var60};
    java.util.List var62 = org.jsecurity.util.CollectionUtils.asList(var61);
    org.jsecurity.authc.pam.ModularRealmAuthenticator var63 = new org.jsecurity.authc.pam.ModularRealmAuthenticator(var62);
    org.jsecurity.authc.pam.AllSuccessfulModularAuthenticationStrategy var64 = new org.jsecurity.authc.pam.AllSuccessfulModularAuthenticationStrategy();
    var63.setModularAuthenticationStrategy((org.jsecurity.authc.pam.ModularAuthenticationStrategy)var64);
    org.jsecurity.authz.SimpleAuthorizationInfo var66 = new org.jsecurity.authz.SimpleAuthorizationInfo();
    var66.addStringPermission("hi!");
    java.io.InputStream var70 = org.jsecurity.util.ClassUtils.getResourceAsStream("");
    java.lang.Object[] var71 = new java.lang.Object[] { var70};
    java.util.List var72 = org.jsecurity.util.CollectionUtils.asList(var71);
    var66.addRoles((java.util.Collection)var72);
    var63.setAuthenticationListeners((java.util.Collection)var72);
    org.jsecurity.realm.activedirectory.ActiveDirectoryRealm var75 = new org.jsecurity.realm.activedirectory.ActiveDirectoryRealm();
    var75.setPrincipalSuffix("");
    var63.setRealm((org.jsecurity.realm.Realm)var75);
    org.jsecurity.authc.pam.FirstSuccessfulAuthenticationStrategy var79 = new org.jsecurity.authc.pam.FirstSuccessfulAuthenticationStrategy();
    org.jsecurity.authz.UnauthorizedException var81 = new org.jsecurity.authz.UnauthorizedException("org.jsecurity.config.ConfigurationException: dd\uFFFD");
    java.lang.Throwable[] var82 = var81.getSuppressed();
    java.util.List var83 = org.jsecurity.util.CollectionUtils.asList((java.lang.Object[])var82);
    org.jsecurity.authc.UsernamePasswordToken var84 = new org.jsecurity.authc.UsernamePasswordToken();
    java.lang.String var85 = var84.getUsername();
    java.net.InetAddress var86 = var84.getInetAddress();
    org.jsecurity.authc.AuthenticationInfo var87 = var79.beforeAllAttempts((java.util.Collection)var83, (org.jsecurity.authc.AuthenticationToken)var84);
    var63.setModularAuthenticationStrategy((org.jsecurity.authc.pam.ModularAuthenticationStrategy)var79);
    org.jsecurity.authc.SimpleAccount var89 = new org.jsecurity.authc.SimpleAccount((org.jsecurity.subject.PrincipalCollection)var58, (java.lang.Object)var63);
    org.jsecurity.session.StoppedSessionException var90 = new org.jsecurity.session.StoppedSessionException("org.jsecurity.authz.UnauthorizedException: org.jsecurity.session.ExpiredSessionException: ", (java.lang.Throwable)var52, (java.io.Serializable)var89);
    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      java.lang.Object var91 = var48.removeAttribute((java.lang.Object)"org.jsecurity.authz.UnauthorizedException: org.jsecurity.session.ExpiredSessionException: ");
      fail("Expected exception of type org.jsecurity.session.InvalidSessionException");
    } catch (org.jsecurity.session.InvalidSessionException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var1);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var2);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var5);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var8);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var9);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var10);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var18);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var19);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var20);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var29);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var33 + "' != '" + "6256c67a-0fb7-4095-9c41-8a3a99f35dc1"+ "'", var33.equals("6256c67a-0fb7-4095-9c41-8a3a99f35dc1"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var41);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var44);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var49 + "' != '" + "6256c67a-0fb7-4095-9c41-8a3a99f35dc1"+ "'", var49.equals("6256c67a-0fb7-4095-9c41-8a3a99f35dc1"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var60);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var61);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var62);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var70);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var71);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var72);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var82);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var83);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var85);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var86);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var87);

  }

  public void test146() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest2.test146");


    org.jsecurity.session.mgt.eis.MemorySessionDAO var0 = new org.jsecurity.session.mgt.eis.MemorySessionDAO();
    org.jsecurity.cache.Cache var1 = var0.getActiveSessionsCache();
    org.jsecurity.cache.CacheManager var2 = var0.getCacheManager();
    org.jsecurity.cache.HashtableCacheManager var3 = new org.jsecurity.cache.HashtableCacheManager();
    org.jsecurity.cache.Cache var5 = var3.getCache("\u0000\u0000");
    var0.setActiveSessionsCache(var5);
    java.io.InputStream var8 = org.jsecurity.util.ClassUtils.getResourceAsStream("");
    java.lang.Object[] var9 = new java.lang.Object[] { var8};
    java.util.List var10 = org.jsecurity.util.CollectionUtils.asList(var9);
    org.jsecurity.authc.pam.ModularRealmAuthenticator var11 = new org.jsecurity.authc.pam.ModularRealmAuthenticator(var10);
    org.jsecurity.authc.pam.AllSuccessfulModularAuthenticationStrategy var12 = new org.jsecurity.authc.pam.AllSuccessfulModularAuthenticationStrategy();
    var11.setModularAuthenticationStrategy((org.jsecurity.authc.pam.ModularAuthenticationStrategy)var12);
    org.jsecurity.authz.SimpleAuthorizationInfo var14 = new org.jsecurity.authz.SimpleAuthorizationInfo();
    var14.addStringPermission("hi!");
    java.io.InputStream var18 = org.jsecurity.util.ClassUtils.getResourceAsStream("");
    java.lang.Object[] var19 = new java.lang.Object[] { var18};
    java.util.List var20 = org.jsecurity.util.CollectionUtils.asList(var19);
    var14.addRoles((java.util.Collection)var20);
    var11.setAuthenticationListeners((java.util.Collection)var20);
    org.jsecurity.realm.activedirectory.ActiveDirectoryRealm var23 = new org.jsecurity.realm.activedirectory.ActiveDirectoryRealm();
    var23.setPrincipalSuffix("");
    var11.setRealm((org.jsecurity.realm.Realm)var23);
    org.jsecurity.cache.HashtableCacheManager var27 = new org.jsecurity.cache.HashtableCacheManager();
    org.jsecurity.cache.Cache var29 = var27.getCache("\u0000\u0000");
    var23.setAuthorizationCache(var29);
    var0.setActiveSessionsCache(var29);
    org.jsecurity.session.mgt.SimpleSession var32 = new org.jsecurity.session.mgt.SimpleSession();
    java.io.Serializable var33 = var0.create((org.jsecurity.session.Session)var32);
    java.io.Serializable var34 = var32.getId();
    var32.validate();
    org.jsecurity.mgt.DefaultSecurityManager var36 = new org.jsecurity.mgt.DefaultSecurityManager();
    java.io.InputStream var38 = org.jsecurity.util.ClassUtils.getResourceAsStream("");
    java.lang.Object[] var39 = new java.lang.Object[] { var38};
    java.util.List var40 = org.jsecurity.util.CollectionUtils.asList(var39);
    org.jsecurity.authc.pam.ModularRealmAuthenticator var41 = new org.jsecurity.authc.pam.ModularRealmAuthenticator(var40);
    org.jsecurity.authc.pam.AllSuccessfulModularAuthenticationStrategy var42 = new org.jsecurity.authc.pam.AllSuccessfulModularAuthenticationStrategy();
    var41.setModularAuthenticationStrategy((org.jsecurity.authc.pam.ModularAuthenticationStrategy)var42);
    org.jsecurity.authz.SimpleAuthorizationInfo var44 = new org.jsecurity.authz.SimpleAuthorizationInfo();
    var44.addStringPermission("hi!");
    java.io.InputStream var48 = org.jsecurity.util.ClassUtils.getResourceAsStream("");
    java.lang.Object[] var49 = new java.lang.Object[] { var48};
    java.util.List var50 = org.jsecurity.util.CollectionUtils.asList(var49);
    var44.addRoles((java.util.Collection)var50);
    var41.setAuthenticationListeners((java.util.Collection)var50);
    var36.setSessionListeners((java.util.Collection)var50);
    org.jsecurity.authz.UnauthenticatedException var57 = new org.jsecurity.authz.UnauthenticatedException();
    org.jsecurity.config.UnresolveableReferenceException var58 = new org.jsecurity.config.UnresolveableReferenceException("", (java.lang.Throwable)var57);
    org.jsecurity.cache.CacheException var59 = new org.jsecurity.cache.CacheException("org.jsecurity.config.ConfigurationException: dd\uFFFD", (java.lang.Throwable)var57);
    org.jsecurity.authc.SimpleAuthenticationInfo var61 = new org.jsecurity.authc.SimpleAuthenticationInfo((java.lang.Object)"org.jsecurity.config.ConfigurationException: dd\uFFFD", (java.lang.Object)var59, "a2b823b1e72eae2b727289df8a00a89df8a0bab6ad8a89c4c5c7a9b62a270000");
    org.jsecurity.realm.text.TextConfigurationRealm var62 = new org.jsecurity.realm.text.TextConfigurationRealm();
    java.io.InputStream var64 = org.jsecurity.util.ClassUtils.getResourceAsStream("");
    java.lang.Object[] var65 = new java.lang.Object[] { var64};
    java.util.List var66 = org.jsecurity.util.CollectionUtils.asList(var65);
    org.jsecurity.authc.pam.ModularRealmAuthenticator var67 = new org.jsecurity.authc.pam.ModularRealmAuthenticator(var66);
    org.jsecurity.subject.SimplePrincipalCollection var69 = new org.jsecurity.subject.SimplePrincipalCollection((java.util.Collection)var66, "org.jsecurity.authz.UnauthorizedException: org.jsecurity.session.ExpiredSessionException: ");
    org.jsecurity.session.UnknownSessionException var74 = new org.jsecurity.session.UnknownSessionException("dd\uFFFD", (java.io.Serializable)100.0f);
    org.jsecurity.session.SessionException var76 = new org.jsecurity.session.SessionException("dd\uFFFD", (java.lang.Throwable)var74, (java.io.Serializable)0);
    org.jsecurity.session.SessionException var77 = new org.jsecurity.session.SessionException("dd\uFFFD", (java.lang.Throwable)var74);
    var69.add((java.lang.Object)var77, "org.jsecurity.config.ConfigurationException: dd\uFFFD");
    var62.onLogout((org.jsecurity.subject.PrincipalCollection)var69);
    org.jsecurity.authc.ExpiredCredentialsException var82 = new org.jsecurity.authc.ExpiredCredentialsException();
    org.jsecurity.session.ExpiredSessionException var83 = new org.jsecurity.session.ExpiredSessionException("", (java.lang.Throwable)var82);
    java.lang.Throwable[] var84 = var83.getSuppressed();
    org.jsecurity.io.ResourceException var85 = new org.jsecurity.io.ResourceException((java.lang.Throwable)var83);
    org.jsecurity.authc.SimpleAuthenticationInfo var86 = new org.jsecurity.authc.SimpleAuthenticationInfo((org.jsecurity.subject.PrincipalCollection)var69, (java.lang.Object)var83);
    var61.merge((org.jsecurity.authc.AuthenticationInfo)var86);
    org.jsecurity.subject.PrincipalCollection var88 = var86.getPrincipals();
    org.jsecurity.authz.SimpleAuthorizingAccount var90 = new org.jsecurity.authz.SimpleAuthorizingAccount((java.util.Collection)var50, (java.lang.Object)var88, "org.jsecurity.realm.text.TextConfigurationRealm_445");
    java.lang.Object var91 = var32.getAttribute((java.lang.Object)var90);
    java.util.Collection var92 = var90.getStringPermissions();
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var1);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var2);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var5);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var8);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var9);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var10);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var18);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var19);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var20);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var29);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var33 + "' != '" + "ff68c978-9c6a-4e92-8f51-9959805afd36"+ "'", var33.equals("ff68c978-9c6a-4e92-8f51-9959805afd36"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var34 + "' != '" + "ff68c978-9c6a-4e92-8f51-9959805afd36"+ "'", var34.equals("ff68c978-9c6a-4e92-8f51-9959805afd36"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var38);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var39);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var40);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var48);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var49);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var50);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var64);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var65);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var66);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var84);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var88);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var91);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var92);

  }

  public void test147() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest2.test147");


    org.jsecurity.authc.DisabledAccountException var1 = new org.jsecurity.authc.DisabledAccountException("dd\uFFFD");

  }

  public void test148() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest2.test148");


    org.jsecurity.authz.SimpleAuthorizationInfo var0 = new org.jsecurity.authz.SimpleAuthorizationInfo();
    org.jsecurity.session.UnknownSessionException var5 = new org.jsecurity.session.UnknownSessionException("dd\uFFFD", (java.io.Serializable)100.0f);
    org.jsecurity.subject.SubjectException var6 = new org.jsecurity.subject.SubjectException("dd\uFFFD", (java.lang.Throwable)var5);
    org.jsecurity.io.SerializationException var7 = new org.jsecurity.io.SerializationException("", (java.lang.Throwable)var6);
    java.lang.Throwable[] var8 = var6.getSuppressed();
    java.util.Set var9 = org.jsecurity.util.CollectionUtils.asSet((java.lang.Object[])var8);
    var0.setStringPermissions(var9);
    java.util.Set var11 = var0.getRoles();
    org.jsecurity.authz.SimpleAuthorizationInfo var12 = new org.jsecurity.authz.SimpleAuthorizationInfo();
    var12.addRole("a2b823b1e72eae2b727289df8a00a89df8a0bab6ad8a89c4c5c7a9b62a270000");
    org.jsecurity.session.UnknownSessionException var19 = new org.jsecurity.session.UnknownSessionException("dd\uFFFD", (java.io.Serializable)100.0f);
    org.jsecurity.subject.SubjectException var20 = new org.jsecurity.subject.SubjectException("dd\uFFFD", (java.lang.Throwable)var19);
    org.jsecurity.io.SerializationException var21 = new org.jsecurity.io.SerializationException("", (java.lang.Throwable)var20);
    java.lang.Throwable[] var22 = var20.getSuppressed();
    java.util.Set var23 = org.jsecurity.util.CollectionUtils.asSet((java.lang.Object[])var22);
    var12.addRoles((java.util.Collection)var23);
    var0.setRoles(var23);
    org.jsecurity.authz.SimpleAuthorizationInfo var26 = new org.jsecurity.authz.SimpleAuthorizationInfo();
    org.jsecurity.session.UnknownSessionException var31 = new org.jsecurity.session.UnknownSessionException("dd\uFFFD", (java.io.Serializable)100.0f);
    org.jsecurity.subject.SubjectException var32 = new org.jsecurity.subject.SubjectException("dd\uFFFD", (java.lang.Throwable)var31);
    org.jsecurity.io.SerializationException var33 = new org.jsecurity.io.SerializationException("", (java.lang.Throwable)var32);
    java.lang.Throwable[] var34 = var32.getSuppressed();
    java.util.Set var35 = org.jsecurity.util.CollectionUtils.asSet((java.lang.Object[])var34);
    var26.setStringPermissions(var35);
    java.util.Set var37 = var26.getRoles();
    org.jsecurity.authz.SimpleAuthorizationInfo var38 = new org.jsecurity.authz.SimpleAuthorizationInfo();
    var38.addRole("a2b823b1e72eae2b727289df8a00a89df8a0bab6ad8a89c4c5c7a9b62a270000");
    org.jsecurity.session.UnknownSessionException var45 = new org.jsecurity.session.UnknownSessionException("dd\uFFFD", (java.io.Serializable)100.0f);
    org.jsecurity.subject.SubjectException var46 = new org.jsecurity.subject.SubjectException("dd\uFFFD", (java.lang.Throwable)var45);
    org.jsecurity.io.SerializationException var47 = new org.jsecurity.io.SerializationException("", (java.lang.Throwable)var46);
    java.lang.Throwable[] var48 = var46.getSuppressed();
    java.util.Set var49 = org.jsecurity.util.CollectionUtils.asSet((java.lang.Object[])var48);
    var38.addRoles((java.util.Collection)var49);
    var26.setRoles(var49);
    var0.setRoles(var49);
    org.jsecurity.authz.ModularRealmAuthorizer var53 = new org.jsecurity.authz.ModularRealmAuthorizer((java.util.Collection)var49);
    java.util.Collection var54 = var53.getRealms();
    java.io.InputStream var56 = org.jsecurity.util.ClassUtils.getResourceAsStream("");
    java.lang.Object[] var57 = new java.lang.Object[] { var56};
    java.util.List var58 = org.jsecurity.util.CollectionUtils.asList(var57);
    org.jsecurity.authc.pam.ModularRealmAuthenticator var59 = new org.jsecurity.authc.pam.ModularRealmAuthenticator(var58);
    org.jsecurity.subject.SimplePrincipalCollection var61 = new org.jsecurity.subject.SimplePrincipalCollection((java.util.Collection)var58, "org.jsecurity.authz.UnauthorizedException: org.jsecurity.session.ExpiredSessionException: ");
    org.jsecurity.io.ResourceException var65 = new org.jsecurity.io.ResourceException("hi!");
    org.jsecurity.authc.UnknownAccountException var66 = new org.jsecurity.authc.UnknownAccountException((java.lang.Throwable)var65);
    org.jsecurity.session.StoppedSessionException var67 = new org.jsecurity.session.StoppedSessionException("dd\uFFFD", (java.io.Serializable)var65);
    org.jsecurity.session.UnknownSessionException var68 = new org.jsecurity.session.UnknownSessionException("org.jsecurity.authz.UnauthorizedException: org.jsecurity.session.ExpiredSessionException: ", (java.lang.Throwable)var65);
    boolean var69 = var61.equals((java.lang.Object)var65);
    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      boolean var71 = var53.isPermitted((org.jsecurity.subject.PrincipalCollection)var61, "orgjsecurityauthcCredentialsException783ccd3148a842dd890fdf885a7baafAA==");
      fail("Expected exception of type java.lang.IllegalStateException");
    } catch (java.lang.IllegalStateException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var8);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var9);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var11);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var22);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var23);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var34);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var35);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var37);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var48);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var49);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var54);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var56);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var57);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var58);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var69 == false);

  }

  public void test149() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest2.test149");


    byte[] var3 = new byte[] { (byte)100, (byte)100, (byte)(-1)};
    java.lang.String var4 = org.jsecurity.codec.CodecSupport.toString(var3);
    byte[] var6 = org.jsecurity.codec.Base64.encode(var3, false);
    byte[] var7 = org.jsecurity.codec.Base64.decode(var3);
    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      java.lang.String var9 = org.jsecurity.codec.CodecSupport.toString(var7, "89cdaca6-d2c0-42a2-81eb-a9d65c3413e1");
      fail("Expected exception of type org.jsecurity.codec.CodecException");
    } catch (org.jsecurity.codec.CodecException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var3);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var4 + "' != '" + "dd\uFFFD"+ "'", var4.equals("dd\uFFFD"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var6);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var7);

  }

  public void test150() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest2.test150");


    org.jsecurity.cache.HashtableCache var1 = new org.jsecurity.cache.HashtableCache("\u0000\u0000\u0000");
    org.jsecurity.session.mgt.SimpleSession var2 = new org.jsecurity.session.mgt.SimpleSession();
    var2.touch();
    org.jsecurity.authz.UnauthenticatedException var6 = new org.jsecurity.authz.UnauthenticatedException();
    org.jsecurity.config.UnresolveableReferenceException var7 = new org.jsecurity.config.UnresolveableReferenceException("", (java.lang.Throwable)var6);
    org.jsecurity.cache.CacheException var8 = new org.jsecurity.cache.CacheException("org.jsecurity.config.ConfigurationException: dd\uFFFD", (java.lang.Throwable)var6);
    java.lang.Object var9 = var2.removeAttribute((java.lang.Object)var8);
    org.jsecurity.mgt.DefaultSecurityManager var10 = new org.jsecurity.mgt.DefaultSecurityManager();
    org.jsecurity.authc.pam.AllSuccessfulModularAuthenticationStrategy var11 = new org.jsecurity.authc.pam.AllSuccessfulModularAuthenticationStrategy();
    org.jsecurity.authc.pam.AllSuccessfulModularAuthenticationStrategy var12 = new org.jsecurity.authc.pam.AllSuccessfulModularAuthenticationStrategy();
    char[] var14 = new char[] { };
    org.jsecurity.authc.UsernamePasswordToken var16 = new org.jsecurity.authc.UsernamePasswordToken("hi!", var14, true);
    org.jsecurity.authc.SimpleAccount var17 = new org.jsecurity.authc.SimpleAccount();
    var17.setCredentialsExpired(false);
    boolean var20 = var17.isLocked();
    org.jsecurity.authc.AuthenticationInfo var21 = var12.afterAllAttempts((org.jsecurity.authc.AuthenticationToken)var16, (org.jsecurity.authc.AuthenticationInfo)var17);
    char[] var25 = new char[] { '4', '#'};
    org.jsecurity.authc.UsernamePasswordToken var26 = new org.jsecurity.authc.UsernamePasswordToken("\u0000\u0000", var25);
    org.jsecurity.authc.SimpleAccount var27 = new org.jsecurity.authc.SimpleAccount();
    var27.setCredentialsExpired(false);
    var27.setCredentialsExpired(false);
    boolean var32 = var27.isCredentialsExpired();
    org.jsecurity.authc.AuthenticationInfo var33 = var12.afterAllAttempts((org.jsecurity.authc.AuthenticationToken)var26, (org.jsecurity.authc.AuthenticationInfo)var27);
    org.jsecurity.authz.UnauthenticatedException var37 = new org.jsecurity.authz.UnauthenticatedException();
    org.jsecurity.config.UnresolveableReferenceException var38 = new org.jsecurity.config.UnresolveableReferenceException("", (java.lang.Throwable)var37);
    org.jsecurity.cache.CacheException var39 = new org.jsecurity.cache.CacheException("org.jsecurity.config.ConfigurationException: dd\uFFFD", (java.lang.Throwable)var37);
    org.jsecurity.authc.SimpleAuthenticationInfo var41 = new org.jsecurity.authc.SimpleAuthenticationInfo((java.lang.Object)"org.jsecurity.config.ConfigurationException: dd\uFFFD", (java.lang.Object)var39, "a2b823b1e72eae2b727289df8a00a89df8a0bab6ad8a89c4c5c7a9b62a270000");
    org.jsecurity.subject.PrincipalCollection var42 = var41.getPrincipals();
    org.jsecurity.authc.AuthenticationInfo var43 = var11.afterAllAttempts((org.jsecurity.authc.AuthenticationToken)var26, (org.jsecurity.authc.AuthenticationInfo)var41);
    var10.setModularAuthenticationStrategy((org.jsecurity.authc.pam.ModularAuthenticationStrategy)var11);
    org.jsecurity.subject.RememberMeManager var45 = var10.getRememberMeManager();
    org.jsecurity.authc.pam.ModularRealmAuthenticator var46 = new org.jsecurity.authc.pam.ModularRealmAuthenticator();
    var10.setAuthenticator((org.jsecurity.authc.Authenticator)var46);
    var1.put((java.lang.Object)var2, (java.lang.Object)var46);
    java.lang.String var49 = var1.toString();
    org.jsecurity.mgt.DefaultSecurityManager var50 = new org.jsecurity.mgt.DefaultSecurityManager();
    org.jsecurity.authz.permission.WildcardPermissionResolver var51 = new org.jsecurity.authz.permission.WildcardPermissionResolver();
    var50.setPermissionResolver((org.jsecurity.authz.permission.PermissionResolver)var51);
    org.jsecurity.cache.CacheManager var53 = var50.getCacheManager();
    org.jsecurity.authc.Authenticator var54 = var50.getAuthenticator();
    var1.remove((java.lang.Object)var50);
    org.jsecurity.cache.CacheManager var56 = var50.getCacheManager();
    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      var50.setRememberMeDecryptionCipherKeyHex("org.jsecurity.authc.UsernamePasswordToken - \u0000\u0000, rememberMe=false (Jeshs-iMac.local/192.168.2.1)");
      fail("Expected exception of type java.lang.IllegalStateException");
    } catch (java.lang.IllegalStateException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var9);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var14);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var20 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var21);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var25);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var32 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var33);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var42);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var43);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var45);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var49 + "' != '" + "HashtableCache [\u0000\u0000\u0000]"+ "'", var49.equals("HashtableCache [\u0000\u0000\u0000]"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var53);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var54);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var56);

  }

  public void test151() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest2.test151");


    org.jsecurity.authc.credential.Sha512CredentialsMatcher var0 = new org.jsecurity.authc.credential.Sha512CredentialsMatcher();
    var0.setStoredCredentialsHexEncoded(true);
    var0.setStoredCredentialsHexEncoded(false);

  }

  public void test152() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest2.test152");


    org.jsecurity.session.mgt.SimpleSession var0 = new org.jsecurity.session.mgt.SimpleSession();
    org.jsecurity.session.UnknownSessionException var4 = new org.jsecurity.session.UnknownSessionException("dd\uFFFD", (java.io.Serializable)100.0f);
    org.jsecurity.session.SessionException var6 = new org.jsecurity.session.SessionException("dd\uFFFD", (java.lang.Throwable)var4, (java.io.Serializable)0);
    org.jsecurity.authc.AccountException var7 = new org.jsecurity.authc.AccountException((java.lang.Throwable)var4);
    var0.setId((java.io.Serializable)var4);
    var0.setTimeout((-1L));
    org.jsecurity.mgt.DefaultSecurityManager var11 = new org.jsecurity.mgt.DefaultSecurityManager();
    java.io.InputStream var13 = org.jsecurity.util.ClassUtils.getResourceAsStream("");
    java.lang.Object[] var14 = new java.lang.Object[] { var13};
    java.util.List var15 = org.jsecurity.util.CollectionUtils.asList(var14);
    org.jsecurity.authc.pam.ModularRealmAuthenticator var16 = new org.jsecurity.authc.pam.ModularRealmAuthenticator(var15);
    org.jsecurity.authc.pam.AllSuccessfulModularAuthenticationStrategy var17 = new org.jsecurity.authc.pam.AllSuccessfulModularAuthenticationStrategy();
    var16.setModularAuthenticationStrategy((org.jsecurity.authc.pam.ModularAuthenticationStrategy)var17);
    org.jsecurity.authz.SimpleAuthorizationInfo var19 = new org.jsecurity.authz.SimpleAuthorizationInfo();
    var19.addStringPermission("hi!");
    java.io.InputStream var23 = org.jsecurity.util.ClassUtils.getResourceAsStream("");
    java.lang.Object[] var24 = new java.lang.Object[] { var23};
    java.util.List var25 = org.jsecurity.util.CollectionUtils.asList(var24);
    var19.addRoles((java.util.Collection)var25);
    var16.setAuthenticationListeners((java.util.Collection)var25);
    var11.setSessionListeners((java.util.Collection)var25);
    org.jsecurity.authc.pam.ModularRealmAuthenticator var29 = new org.jsecurity.authc.pam.ModularRealmAuthenticator();
    org.jsecurity.authz.permission.InvalidPermissionStringException var32 = new org.jsecurity.authz.permission.InvalidPermissionStringException("", "dd\uFFFD");
    org.jsecurity.JSecurityException var34 = new org.jsecurity.JSecurityException("");
    org.jsecurity.authc.SimpleAuthenticationInfo var36 = new org.jsecurity.authc.SimpleAuthenticationInfo((java.lang.Object)var32, (java.lang.Object)"", "org.jsecurity.authz.UnauthorizedException: org.jsecurity.session.ExpiredSessionException: ");
    org.jsecurity.subject.PrincipalCollection var37 = var36.getPrincipals();
    var29.onLogout(var37);
    var11.setAuthenticator((org.jsecurity.authc.Authenticator)var29);
    org.jsecurity.authc.pam.ModularAuthenticationStrategy var40 = var29.getModularAuthenticationStrategy();
    java.lang.Object var41 = var0.getAttribute((java.lang.Object)var29);
    org.jsecurity.authc.pam.ModularAuthenticationStrategy var42 = var29.getModularAuthenticationStrategy();
    org.jsecurity.session.UnknownSessionException var47 = new org.jsecurity.session.UnknownSessionException("dd\uFFFD", (java.io.Serializable)100.0f);
    org.jsecurity.config.ConfigurationException var48 = new org.jsecurity.config.ConfigurationException("dd\uFFFD", (java.lang.Throwable)var47);
    org.jsecurity.session.ExpiredSessionException var50 = new org.jsecurity.session.ExpiredSessionException("", (java.lang.Throwable)var48, (java.io.Serializable)true);
    org.jsecurity.authc.pam.UnsupportedTokenException var51 = new org.jsecurity.authc.pam.UnsupportedTokenException((java.lang.Throwable)var50);
    org.jsecurity.authc.LockedAccountException var52 = new org.jsecurity.authc.LockedAccountException((java.lang.Throwable)var50);
    org.jsecurity.realm.text.TextConfigurationRealm var53 = new org.jsecurity.realm.text.TextConfigurationRealm();
    java.io.InputStream var55 = org.jsecurity.util.ClassUtils.getResourceAsStream("");
    java.lang.Object[] var56 = new java.lang.Object[] { var55};
    java.util.List var57 = org.jsecurity.util.CollectionUtils.asList(var56);
    org.jsecurity.authc.pam.ModularRealmAuthenticator var58 = new org.jsecurity.authc.pam.ModularRealmAuthenticator(var57);
    org.jsecurity.subject.SimplePrincipalCollection var60 = new org.jsecurity.subject.SimplePrincipalCollection((java.util.Collection)var57, "org.jsecurity.authz.UnauthorizedException: org.jsecurity.session.ExpiredSessionException: ");
    org.jsecurity.session.UnknownSessionException var65 = new org.jsecurity.session.UnknownSessionException("dd\uFFFD", (java.io.Serializable)100.0f);
    org.jsecurity.session.SessionException var67 = new org.jsecurity.session.SessionException("dd\uFFFD", (java.lang.Throwable)var65, (java.io.Serializable)0);
    org.jsecurity.session.SessionException var68 = new org.jsecurity.session.SessionException("dd\uFFFD", (java.lang.Throwable)var65);
    var60.add((java.lang.Object)var68, "org.jsecurity.config.ConfigurationException: dd\uFFFD");
    var53.onLogout((org.jsecurity.subject.PrincipalCollection)var60);
    java.util.Collection var73 = var60.fromRealm("\u0000\u0000\u0000");
    org.jsecurity.session.mgt.eis.MemorySessionDAO var74 = new org.jsecurity.session.mgt.eis.MemorySessionDAO();
    org.jsecurity.authc.SimpleAuthenticationInfo var75 = new org.jsecurity.authc.SimpleAuthenticationInfo((org.jsecurity.subject.PrincipalCollection)var60, (java.lang.Object)var74);
    var50.setSessionId((java.io.Serializable)var60);
    var29.onLogout((org.jsecurity.subject.PrincipalCollection)var60);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var13);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var14);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var15);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var23);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var24);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var25);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var37);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var40);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var41);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var42);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var55);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var56);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var57);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var73);

  }

  public void test153() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest2.test153");


    org.jsecurity.authz.ModularRealmAuthorizer var0 = new org.jsecurity.authz.ModularRealmAuthorizer();
    java.io.InputStream var2 = org.jsecurity.util.ClassUtils.getResourceAsStream("");
    java.lang.Object[] var3 = new java.lang.Object[] { var2};
    java.util.List var4 = org.jsecurity.util.CollectionUtils.asList(var3);
    org.jsecurity.authc.pam.ModularRealmAuthenticator var5 = new org.jsecurity.authc.pam.ModularRealmAuthenticator(var4);
    org.jsecurity.subject.SimplePrincipalCollection var7 = new org.jsecurity.subject.SimplePrincipalCollection((java.util.Collection)var4, "org.jsecurity.authz.UnauthorizedException: org.jsecurity.session.ExpiredSessionException: ");
    org.jsecurity.session.UnknownSessionException var12 = new org.jsecurity.session.UnknownSessionException("dd\uFFFD", (java.io.Serializable)100.0f);
    org.jsecurity.session.SessionException var14 = new org.jsecurity.session.SessionException("dd\uFFFD", (java.lang.Throwable)var12, (java.io.Serializable)0);
    org.jsecurity.session.SessionException var15 = new org.jsecurity.session.SessionException("dd\uFFFD", (java.lang.Throwable)var12);
    var7.add((java.lang.Object)var15, "org.jsecurity.config.ConfigurationException: dd\uFFFD");
    java.util.Set var18 = var7.asSet();
    var0.setRealms((java.util.Collection)var18);
    org.jsecurity.cache.HashtableCache var21 = new org.jsecurity.cache.HashtableCache("orgjsecurityauthcCredentialsException783ccd3148a842dd890fdf885a7baafAA==");
    org.jsecurity.realm.text.TextConfigurationRealm var22 = new org.jsecurity.realm.text.TextConfigurationRealm();
    java.io.InputStream var24 = org.jsecurity.util.ClassUtils.getResourceAsStream("");
    java.lang.Object[] var25 = new java.lang.Object[] { var24};
    java.util.List var26 = org.jsecurity.util.CollectionUtils.asList(var25);
    org.jsecurity.authc.pam.ModularRealmAuthenticator var27 = new org.jsecurity.authc.pam.ModularRealmAuthenticator(var26);
    org.jsecurity.subject.SimplePrincipalCollection var29 = new org.jsecurity.subject.SimplePrincipalCollection((java.util.Collection)var26, "org.jsecurity.authz.UnauthorizedException: org.jsecurity.session.ExpiredSessionException: ");
    org.jsecurity.session.UnknownSessionException var34 = new org.jsecurity.session.UnknownSessionException("dd\uFFFD", (java.io.Serializable)100.0f);
    org.jsecurity.session.SessionException var36 = new org.jsecurity.session.SessionException("dd\uFFFD", (java.lang.Throwable)var34, (java.io.Serializable)0);
    org.jsecurity.session.SessionException var37 = new org.jsecurity.session.SessionException("dd\uFFFD", (java.lang.Throwable)var34);
    var29.add((java.lang.Object)var37, "org.jsecurity.config.ConfigurationException: dd\uFFFD");
    var22.onLogout((org.jsecurity.subject.PrincipalCollection)var29);
    var21.remove((java.lang.Object)var29);
    org.jsecurity.subject.SimplePrincipalCollection var42 = new org.jsecurity.subject.SimplePrincipalCollection((org.jsecurity.subject.PrincipalCollection)var29);
    org.jsecurity.authc.pam.FirstSuccessfulAuthenticationStrategy var43 = new org.jsecurity.authc.pam.FirstSuccessfulAuthenticationStrategy();
    org.jsecurity.authz.UnauthorizedException var45 = new org.jsecurity.authz.UnauthorizedException("org.jsecurity.config.ConfigurationException: dd\uFFFD");
    java.lang.Throwable[] var46 = var45.getSuppressed();
    java.util.List var47 = org.jsecurity.util.CollectionUtils.asList((java.lang.Object[])var46);
    org.jsecurity.authc.UsernamePasswordToken var48 = new org.jsecurity.authc.UsernamePasswordToken();
    java.lang.String var49 = var48.getUsername();
    java.net.InetAddress var50 = var48.getInetAddress();
    org.jsecurity.authc.AuthenticationInfo var51 = var43.beforeAllAttempts((java.util.Collection)var47, (org.jsecurity.authc.AuthenticationToken)var48);
    boolean[] var52 = var0.isPermitted((org.jsecurity.subject.PrincipalCollection)var42, var47);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var2);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var3);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var4);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var18);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var24);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var25);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var26);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var46);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var47);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var49);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var50);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var51);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var52);

  }

  public void test154() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest2.test154");


    java.io.InputStream var1 = org.jsecurity.util.ClassUtils.getResourceAsStream("");
    java.lang.Object[] var2 = new java.lang.Object[] { var1};
    java.util.List var3 = org.jsecurity.util.CollectionUtils.asList(var2);
    org.jsecurity.authc.pam.ModularRealmAuthenticator var4 = new org.jsecurity.authc.pam.ModularRealmAuthenticator(var3);
    org.jsecurity.realm.text.TextConfigurationRealm var5 = new org.jsecurity.realm.text.TextConfigurationRealm();
    java.io.InputStream var7 = org.jsecurity.util.ClassUtils.getResourceAsStream("");
    java.lang.Object[] var8 = new java.lang.Object[] { var7};
    java.util.List var9 = org.jsecurity.util.CollectionUtils.asList(var8);
    org.jsecurity.authc.pam.ModularRealmAuthenticator var10 = new org.jsecurity.authc.pam.ModularRealmAuthenticator(var9);
    org.jsecurity.subject.SimplePrincipalCollection var12 = new org.jsecurity.subject.SimplePrincipalCollection((java.util.Collection)var9, "org.jsecurity.authz.UnauthorizedException: org.jsecurity.session.ExpiredSessionException: ");
    org.jsecurity.session.UnknownSessionException var17 = new org.jsecurity.session.UnknownSessionException("dd\uFFFD", (java.io.Serializable)100.0f);
    org.jsecurity.session.SessionException var19 = new org.jsecurity.session.SessionException("dd\uFFFD", (java.lang.Throwable)var17, (java.io.Serializable)0);
    org.jsecurity.session.SessionException var20 = new org.jsecurity.session.SessionException("dd\uFFFD", (java.lang.Throwable)var17);
    var12.add((java.lang.Object)var20, "org.jsecurity.config.ConfigurationException: dd\uFFFD");
    var5.onLogout((org.jsecurity.subject.PrincipalCollection)var12);
    org.jsecurity.cache.HashtableCacheManager var24 = new org.jsecurity.cache.HashtableCacheManager();
    org.jsecurity.cache.Cache var26 = var24.getCache("\u0000\u0000");
    var5.setAuthorizationCache(var26);
    org.jsecurity.codec.CodecException var30 = new org.jsecurity.codec.CodecException("dd\uFFFD");
    org.jsecurity.authc.ConcurrentAccessException var31 = new org.jsecurity.authc.ConcurrentAccessException("org.jsecurity.authz.UnauthorizedException: org.jsecurity.session.ExpiredSessionException: ", (java.lang.Throwable)var30);
    org.jsecurity.subject.SimplePrincipalCollection var33 = new org.jsecurity.subject.SimplePrincipalCollection((java.lang.Object)var30, "");
    var5.onLogout((org.jsecurity.subject.PrincipalCollection)var33);
    var4.setRealm((org.jsecurity.realm.Realm)var5);
    java.io.InputStream var37 = org.jsecurity.util.ClassUtils.getResourceAsStream("");
    java.lang.Object[] var38 = new java.lang.Object[] { var37};
    java.util.List var39 = org.jsecurity.util.CollectionUtils.asList(var38);
    org.jsecurity.authc.pam.ModularRealmAuthenticator var40 = new org.jsecurity.authc.pam.ModularRealmAuthenticator(var39);
    org.jsecurity.authc.pam.AllSuccessfulModularAuthenticationStrategy var41 = new org.jsecurity.authc.pam.AllSuccessfulModularAuthenticationStrategy();
    var40.setModularAuthenticationStrategy((org.jsecurity.authc.pam.ModularAuthenticationStrategy)var41);
    org.jsecurity.authz.SimpleAuthorizationInfo var43 = new org.jsecurity.authz.SimpleAuthorizationInfo();
    var43.addStringPermission("hi!");
    java.io.InputStream var47 = org.jsecurity.util.ClassUtils.getResourceAsStream("");
    java.lang.Object[] var48 = new java.lang.Object[] { var47};
    java.util.List var49 = org.jsecurity.util.CollectionUtils.asList(var48);
    var43.addRoles((java.util.Collection)var49);
    var40.setAuthenticationListeners((java.util.Collection)var49);
    org.jsecurity.realm.activedirectory.ActiveDirectoryRealm var52 = new org.jsecurity.realm.activedirectory.ActiveDirectoryRealm();
    var52.setPrincipalSuffix("");
    var40.setRealm((org.jsecurity.realm.Realm)var52);
    var4.setRealm((org.jsecurity.realm.Realm)var52);
    org.jsecurity.authc.pam.ModularRealmAuthenticator var57 = new org.jsecurity.authc.pam.ModularRealmAuthenticator((org.jsecurity.realm.Realm)var52);
    org.jsecurity.authc.pam.ModularRealmAuthenticator var58 = new org.jsecurity.authc.pam.ModularRealmAuthenticator();
    org.jsecurity.authc.pam.AtLeastOneSuccessfulModularAuthenticationStrategy var59 = new org.jsecurity.authc.pam.AtLeastOneSuccessfulModularAuthenticationStrategy();
    var58.setModularAuthenticationStrategy((org.jsecurity.authc.pam.ModularAuthenticationStrategy)var59);
    var57.setModularAuthenticationStrategy((org.jsecurity.authc.pam.ModularAuthenticationStrategy)var59);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var1);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var2);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var3);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var7);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var8);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var9);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var26);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var37);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var38);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var39);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var47);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var48);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var49);

  }

  public void test155() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest2.test155");


    org.jsecurity.authz.SimpleRole var0 = new org.jsecurity.authz.SimpleRole();
    java.lang.String var1 = var0.getName();
    org.jsecurity.session.UnknownSessionException var6 = new org.jsecurity.session.UnknownSessionException("dd\uFFFD", (java.io.Serializable)100.0f);
    org.jsecurity.subject.SubjectException var7 = new org.jsecurity.subject.SubjectException("dd\uFFFD", (java.lang.Throwable)var6);
    org.jsecurity.io.SerializationException var8 = new org.jsecurity.io.SerializationException("", (java.lang.Throwable)var7);
    java.lang.Throwable[] var9 = var7.getSuppressed();
    java.util.Set var10 = org.jsecurity.util.CollectionUtils.asSet((java.lang.Object[])var9);
    var0.setPermissions(var10);
    boolean var13 = var0.equals((java.lang.Object)"bcd88f91-36fc-4824-97c3-1a752a1a4e71");
    var0.setName("6f8b35fd-0848-49a4-9560-659760616ad8");
    java.lang.String var16 = var0.toString();
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var1);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var9);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var10);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var13 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var16 + "' != '" + "6f8b35fd-0848-49a4-9560-659760616ad8"+ "'", var16.equals("6f8b35fd-0848-49a4-9560-659760616ad8"));

  }

  public void test156() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest2.test156");


    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      org.jsecurity.io.IniResource var2 = new org.jsecurity.io.IniResource("ba5781b5-1678-43a0-a046-6d887f34f2e4", "1bda1aac-168a-4284-8541-abc425cc1ca7");
      fail("Expected exception of type org.jsecurity.io.ResourceException");
    } catch (org.jsecurity.io.ResourceException e) {
      // Expected exception.
    }

  }

  public void test157() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest2.test157");


    org.jsecurity.realm.text.TextConfigurationRealm var0 = new org.jsecurity.realm.text.TextConfigurationRealm();
    java.io.InputStream var2 = org.jsecurity.util.ClassUtils.getResourceAsStream("");
    java.lang.Object[] var3 = new java.lang.Object[] { var2};
    java.util.List var4 = org.jsecurity.util.CollectionUtils.asList(var3);
    org.jsecurity.authc.pam.ModularRealmAuthenticator var5 = new org.jsecurity.authc.pam.ModularRealmAuthenticator(var4);
    org.jsecurity.subject.SimplePrincipalCollection var7 = new org.jsecurity.subject.SimplePrincipalCollection((java.util.Collection)var4, "org.jsecurity.authz.UnauthorizedException: org.jsecurity.session.ExpiredSessionException: ");
    org.jsecurity.session.UnknownSessionException var12 = new org.jsecurity.session.UnknownSessionException("dd\uFFFD", (java.io.Serializable)100.0f);
    org.jsecurity.session.SessionException var14 = new org.jsecurity.session.SessionException("dd\uFFFD", (java.lang.Throwable)var12, (java.io.Serializable)0);
    org.jsecurity.session.SessionException var15 = new org.jsecurity.session.SessionException("dd\uFFFD", (java.lang.Throwable)var12);
    var7.add((java.lang.Object)var15, "org.jsecurity.config.ConfigurationException: dd\uFFFD");
    var0.onLogout((org.jsecurity.subject.PrincipalCollection)var7);
    org.jsecurity.authc.ExpiredCredentialsException var20 = new org.jsecurity.authc.ExpiredCredentialsException();
    org.jsecurity.session.ExpiredSessionException var21 = new org.jsecurity.session.ExpiredSessionException("", (java.lang.Throwable)var20);
    java.lang.Throwable[] var22 = var21.getSuppressed();
    org.jsecurity.io.ResourceException var23 = new org.jsecurity.io.ResourceException((java.lang.Throwable)var21);
    org.jsecurity.authc.SimpleAuthenticationInfo var24 = new org.jsecurity.authc.SimpleAuthenticationInfo((org.jsecurity.subject.PrincipalCollection)var7, (java.lang.Object)var21);
    org.jsecurity.cache.CacheException var25 = new org.jsecurity.cache.CacheException((java.lang.Throwable)var21);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var2);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var3);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var4);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var22);

  }

  public void test158() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest2.test158");


    org.jsecurity.authc.ExpiredCredentialsException var1 = new org.jsecurity.authc.ExpiredCredentialsException("6f8b35fd-0848-49a4-9560-659760616ad8");
    org.jsecurity.codec.CodecException var4 = new org.jsecurity.codec.CodecException("dd\uFFFD");
    org.jsecurity.authc.ConcurrentAccessException var5 = new org.jsecurity.authc.ConcurrentAccessException("org.jsecurity.authz.UnauthorizedException: org.jsecurity.session.ExpiredSessionException: ", (java.lang.Throwable)var4);
    org.jsecurity.subject.SimplePrincipalCollection var7 = new org.jsecurity.subject.SimplePrincipalCollection((java.lang.Object)var4, "");
    org.jsecurity.authc.pam.FirstSuccessfulAuthenticationStrategy var8 = new org.jsecurity.authc.pam.FirstSuccessfulAuthenticationStrategy();
    org.jsecurity.authz.UnauthorizedException var10 = new org.jsecurity.authz.UnauthorizedException("org.jsecurity.config.ConfigurationException: dd\uFFFD");
    java.lang.Throwable[] var11 = var10.getSuppressed();
    java.util.List var12 = org.jsecurity.util.CollectionUtils.asList((java.lang.Object[])var11);
    org.jsecurity.authc.UsernamePasswordToken var13 = new org.jsecurity.authc.UsernamePasswordToken();
    java.lang.String var14 = var13.getUsername();
    java.net.InetAddress var15 = var13.getInetAddress();
    org.jsecurity.authc.AuthenticationInfo var16 = var8.beforeAllAttempts((java.util.Collection)var12, (org.jsecurity.authc.AuthenticationToken)var13);
    org.jsecurity.session.UnknownSessionException var21 = new org.jsecurity.session.UnknownSessionException("dd\uFFFD", (java.io.Serializable)100.0f);
    org.jsecurity.subject.SubjectException var22 = new org.jsecurity.subject.SubjectException("dd\uFFFD", (java.lang.Throwable)var21);
    org.jsecurity.io.SerializationException var23 = new org.jsecurity.io.SerializationException("", (java.lang.Throwable)var22);
    java.lang.Throwable[] var24 = var22.getSuppressed();
    java.util.Set var25 = org.jsecurity.util.CollectionUtils.asSet((java.lang.Object[])var24);
    org.jsecurity.authc.SimpleAccount var26 = new org.jsecurity.authc.SimpleAccount((org.jsecurity.subject.PrincipalCollection)var7, (java.lang.Object)var12, var25);
    var26.addStringPermission("org.jsecurity.config.ConfigurationException: dd\uFFFD");
    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      org.jsecurity.crypto.hash.Sha512Hash var29 = new org.jsecurity.crypto.hash.Sha512Hash((java.lang.Object)var1, (java.lang.Object)"org.jsecurity.config.ConfigurationException: dd\uFFFD");
      fail("Expected exception of type org.jsecurity.codec.CodecException");
    } catch (org.jsecurity.codec.CodecException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var11);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var12);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var14);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var15);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var16);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var24);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var25);

  }

  public void test159() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest2.test159");


    org.jsecurity.mgt.DefaultSecurityManager var0 = new org.jsecurity.mgt.DefaultSecurityManager();
    java.io.InputStream var2 = org.jsecurity.util.ClassUtils.getResourceAsStream("");
    java.lang.Object[] var3 = new java.lang.Object[] { var2};
    java.util.List var4 = org.jsecurity.util.CollectionUtils.asList(var3);
    org.jsecurity.authc.pam.ModularRealmAuthenticator var5 = new org.jsecurity.authc.pam.ModularRealmAuthenticator(var4);
    org.jsecurity.authc.pam.AllSuccessfulModularAuthenticationStrategy var6 = new org.jsecurity.authc.pam.AllSuccessfulModularAuthenticationStrategy();
    var5.setModularAuthenticationStrategy((org.jsecurity.authc.pam.ModularAuthenticationStrategy)var6);
    org.jsecurity.authz.SimpleAuthorizationInfo var8 = new org.jsecurity.authz.SimpleAuthorizationInfo();
    var8.addStringPermission("hi!");
    java.io.InputStream var12 = org.jsecurity.util.ClassUtils.getResourceAsStream("");
    java.lang.Object[] var13 = new java.lang.Object[] { var12};
    java.util.List var14 = org.jsecurity.util.CollectionUtils.asList(var13);
    var8.addRoles((java.util.Collection)var14);
    var5.setAuthenticationListeners((java.util.Collection)var14);
    var0.setSessionListeners((java.util.Collection)var14);
    org.jsecurity.subject.Subject var18 = var0.getSubject();
    org.jsecurity.authz.permission.WildcardPermissionResolver var19 = new org.jsecurity.authz.permission.WildcardPermissionResolver();
    var0.setPermissionResolver((org.jsecurity.authz.permission.PermissionResolver)var19);
    char[] var24 = new char[] { ' ', ' '};
    org.jsecurity.authc.UsernamePasswordToken var25 = new org.jsecurity.authc.UsernamePasswordToken("hi!", var24);
    org.jsecurity.authc.pam.AllSuccessfulModularAuthenticationStrategy var26 = new org.jsecurity.authc.pam.AllSuccessfulModularAuthenticationStrategy();
    char[] var28 = new char[] { };
    org.jsecurity.authc.UsernamePasswordToken var30 = new org.jsecurity.authc.UsernamePasswordToken("hi!", var28, true);
    org.jsecurity.authc.SimpleAccount var31 = new org.jsecurity.authc.SimpleAccount();
    var31.setCredentialsExpired(false);
    boolean var34 = var31.isLocked();
    org.jsecurity.authc.AuthenticationInfo var35 = var26.afterAllAttempts((org.jsecurity.authc.AuthenticationToken)var30, (org.jsecurity.authc.AuthenticationInfo)var31);
    char[] var38 = new char[] { };
    org.jsecurity.authc.UsernamePasswordToken var40 = new org.jsecurity.authc.UsernamePasswordToken("hi!", var38, true);
    org.jsecurity.authc.UsernamePasswordToken var41 = new org.jsecurity.authc.UsernamePasswordToken("\u0000\u0000", var38);
    var30.setPassword(var38);
    byte[] var43 = org.jsecurity.codec.Hex.decode(var38);
    var25.setPassword(var38);
    byte[] var45 = org.jsecurity.codec.Hex.decode(var38);
    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      var0.setRememberMeCipherKey(var45);
      fail("Expected exception of type java.lang.IllegalStateException");
    } catch (java.lang.IllegalStateException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var2);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var3);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var4);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var12);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var13);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var14);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var18);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var24);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var28);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var34 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var35);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var38);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var43);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var45);

  }

  public void test160() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest2.test160");


    org.jsecurity.mgt.DefaultSecurityManager var0 = new org.jsecurity.mgt.DefaultSecurityManager();
    java.io.InputStream var2 = org.jsecurity.util.ClassUtils.getResourceAsStream("");
    java.lang.Object[] var3 = new java.lang.Object[] { var2};
    java.util.List var4 = org.jsecurity.util.CollectionUtils.asList(var3);
    org.jsecurity.authc.pam.ModularRealmAuthenticator var5 = new org.jsecurity.authc.pam.ModularRealmAuthenticator(var4);
    org.jsecurity.authc.pam.AllSuccessfulModularAuthenticationStrategy var6 = new org.jsecurity.authc.pam.AllSuccessfulModularAuthenticationStrategy();
    var5.setModularAuthenticationStrategy((org.jsecurity.authc.pam.ModularAuthenticationStrategy)var6);
    org.jsecurity.authz.SimpleAuthorizationInfo var8 = new org.jsecurity.authz.SimpleAuthorizationInfo();
    var8.addStringPermission("hi!");
    java.io.InputStream var12 = org.jsecurity.util.ClassUtils.getResourceAsStream("");
    java.lang.Object[] var13 = new java.lang.Object[] { var12};
    java.util.List var14 = org.jsecurity.util.CollectionUtils.asList(var13);
    var8.addRoles((java.util.Collection)var14);
    var5.setAuthenticationListeners((java.util.Collection)var14);
    var0.setSessionListeners((java.util.Collection)var14);
    org.jsecurity.realm.text.TextConfigurationRealm var18 = new org.jsecurity.realm.text.TextConfigurationRealm();
    java.io.InputStream var20 = org.jsecurity.util.ClassUtils.getResourceAsStream("");
    java.lang.Object[] var21 = new java.lang.Object[] { var20};
    java.util.List var22 = org.jsecurity.util.CollectionUtils.asList(var21);
    org.jsecurity.authc.pam.ModularRealmAuthenticator var23 = new org.jsecurity.authc.pam.ModularRealmAuthenticator(var22);
    org.jsecurity.subject.SimplePrincipalCollection var25 = new org.jsecurity.subject.SimplePrincipalCollection((java.util.Collection)var22, "org.jsecurity.authz.UnauthorizedException: org.jsecurity.session.ExpiredSessionException: ");
    org.jsecurity.session.UnknownSessionException var30 = new org.jsecurity.session.UnknownSessionException("dd\uFFFD", (java.io.Serializable)100.0f);
    org.jsecurity.session.SessionException var32 = new org.jsecurity.session.SessionException("dd\uFFFD", (java.lang.Throwable)var30, (java.io.Serializable)0);
    org.jsecurity.session.SessionException var33 = new org.jsecurity.session.SessionException("dd\uFFFD", (java.lang.Throwable)var30);
    var25.add((java.lang.Object)var33, "org.jsecurity.config.ConfigurationException: dd\uFFFD");
    var18.onLogout((org.jsecurity.subject.PrincipalCollection)var25);
    org.jsecurity.authc.pam.FirstSuccessfulAuthenticationStrategy var37 = new org.jsecurity.authc.pam.FirstSuccessfulAuthenticationStrategy();
    org.jsecurity.authz.UnauthorizedException var39 = new org.jsecurity.authz.UnauthorizedException("org.jsecurity.config.ConfigurationException: dd\uFFFD");
    java.lang.Throwable[] var40 = var39.getSuppressed();
    java.util.List var41 = org.jsecurity.util.CollectionUtils.asList((java.lang.Object[])var40);
    org.jsecurity.authc.UsernamePasswordToken var42 = new org.jsecurity.authc.UsernamePasswordToken();
    java.lang.String var43 = var42.getUsername();
    java.net.InetAddress var44 = var42.getInetAddress();
    org.jsecurity.authc.AuthenticationInfo var45 = var37.beforeAllAttempts((java.util.Collection)var41, (org.jsecurity.authc.AuthenticationToken)var42);
    boolean[] var46 = var0.hasRoles((org.jsecurity.subject.PrincipalCollection)var25, var41);
    org.jsecurity.authz.permission.WildcardPermissionResolver var47 = new org.jsecurity.authz.permission.WildcardPermissionResolver();
    org.jsecurity.authz.Permission var49 = var47.resolvePermission("hi!");
    org.jsecurity.authz.Permission var51 = var47.resolvePermission("hi!");
    var0.setPermissionResolver((org.jsecurity.authz.permission.PermissionResolver)var47);
    org.jsecurity.session.mgt.DefaultSessionManager var53 = new org.jsecurity.session.mgt.DefaultSessionManager();
    org.jsecurity.mgt.DefaultSecurityManager var54 = new org.jsecurity.mgt.DefaultSecurityManager();
    org.jsecurity.authz.permission.WildcardPermissionResolver var55 = new org.jsecurity.authz.permission.WildcardPermissionResolver();
    var54.setPermissionResolver((org.jsecurity.authz.permission.PermissionResolver)var55);
    org.jsecurity.cache.CacheManager var57 = var54.getCacheManager();
    var53.setCacheManager(var57);
    long var59 = var53.getSessionValidationInterval();
    boolean var60 = var53.isSessionValidationSchedulerEnabled();
    var0.setSessionManager((org.jsecurity.session.mgt.SessionManager)var53);
    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      var0.setRememberMeDecryptionCipherKeyHex("b74f4674-5868-4e94-a7d5-832b6ef0fcdb");
      fail("Expected exception of type java.lang.IllegalStateException");
    } catch (java.lang.IllegalStateException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var2);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var3);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var4);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var12);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var13);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var14);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var20);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var21);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var22);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var40);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var41);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var43);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var44);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var45);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var46);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var49);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var51);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var57);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var59 == 3600000L);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var60 == true);

  }

  public void test161() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest2.test161");


    org.jsecurity.realm.SimpleAccountRealm var1 = new org.jsecurity.realm.SimpleAccountRealm("hi!");
    java.lang.Class var2 = var1.getAuthenticationTokenClass();
    org.jsecurity.session.mgt.eis.MemorySessionDAO var3 = new org.jsecurity.session.mgt.eis.MemorySessionDAO();
    org.jsecurity.cache.Cache var4 = var3.getActiveSessionsCache();
    org.jsecurity.cache.CacheManager var5 = var3.getCacheManager();
    var1.setCacheManager(var5);
    org.jsecurity.cache.Cache var7 = var1.getAuthorizationCache();
    boolean var9 = var1.accountExists("a2b823b1e72eae2b727289df8a00a89df8a0bab6ad8a89c4c5c7a9b62a270000");
    org.jsecurity.mgt.DefaultSecurityManager var10 = new org.jsecurity.mgt.DefaultSecurityManager((org.jsecurity.realm.Realm)var1);
    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      var10.setRememberMeEncryptionCipherKeyBase64("06806f7c-0e04-458c-8103-c50ec68511d3");
      fail("Expected exception of type java.lang.IllegalStateException");
    } catch (java.lang.IllegalStateException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var2);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var4);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var5);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var7);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var9 == false);

  }

  public void test162() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest2.test162");


    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      org.jsecurity.config.IniConfiguration var1 = new org.jsecurity.config.IniConfiguration("\u0000\u0000");
      fail("Expected exception of type org.jsecurity.config.ConfigurationException");
    } catch (org.jsecurity.config.ConfigurationException e) {
      // Expected exception.
    }

  }

  public void test163() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest2.test163");


    org.jsecurity.realm.activedirectory.ActiveDirectoryRealm var0 = new org.jsecurity.realm.activedirectory.ActiveDirectoryRealm();
    org.jsecurity.authc.credential.Sha256CredentialsMatcher var1 = new org.jsecurity.authc.credential.Sha256CredentialsMatcher();
    var0.setCredentialsMatcher((org.jsecurity.authc.credential.CredentialsMatcher)var1);
    org.jsecurity.realm.activedirectory.ActiveDirectoryRealm var3 = new org.jsecurity.realm.activedirectory.ActiveDirectoryRealm();
    org.jsecurity.authc.credential.Sha256CredentialsMatcher var4 = new org.jsecurity.authc.credential.Sha256CredentialsMatcher();
    var3.setCredentialsMatcher((org.jsecurity.authc.credential.CredentialsMatcher)var4);
    java.lang.String var6 = var3.getAuthorizationCacheName();
    var3.setUrl("hi!");
    org.jsecurity.realm.ldap.DefaultLdapContextFactory var9 = new org.jsecurity.realm.ldap.DefaultLdapContextFactory();
    var3.setLdapContextFactory((org.jsecurity.realm.ldap.LdapContextFactory)var9);
    var9.setAuthentication("org.jsecurity.authz.UnauthorizedException: org.jsecurity.session.ExpiredSessionException: ");
    var0.setLdapContextFactory((org.jsecurity.realm.ldap.LdapContextFactory)var9);
    var9.setReferral("a2b823b1e72eae2b727289df8a00a89df8a0bab6ad8a89c4c5c7a9b62a270000");
    var9.setUrl("\u0000\u0000");
    var9.setContextFactoryClassName("org.jsecurity.authc.UsernamePasswordToken - \u0000\u0000, rememberMe=false");
    var9.setReferral("?\u0238\u0018@\uFFFD");
    var9.setReferral("hi!");
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var6);

  }

  public void test164() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest2.test164");


    org.jsecurity.session.mgt.DefaultSessionManager var0 = new org.jsecurity.session.mgt.DefaultSessionManager();
    org.jsecurity.mgt.DefaultSecurityManager var1 = new org.jsecurity.mgt.DefaultSecurityManager();
    org.jsecurity.authz.permission.WildcardPermissionResolver var2 = new org.jsecurity.authz.permission.WildcardPermissionResolver();
    var1.setPermissionResolver((org.jsecurity.authz.permission.PermissionResolver)var2);
    org.jsecurity.cache.CacheManager var4 = var1.getCacheManager();
    var0.setCacheManager(var4);
    long var6 = var0.getSessionValidationInterval();
    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      var0.touch((java.io.Serializable)"orgjsecurityauthcCredentialsException783ccd3148a842dd890fdf885a7baafAA==");
      fail("Expected exception of type org.jsecurity.session.UnknownSessionException");
    } catch (org.jsecurity.session.UnknownSessionException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var4);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var6 == 3600000L);

  }

  public void test165() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest2.test165");


    org.jsecurity.authc.AccountException var3 = new org.jsecurity.authc.AccountException("hi!");
    org.jsecurity.authc.IncorrectCredentialsException var4 = new org.jsecurity.authc.IncorrectCredentialsException((java.lang.Throwable)var3);
    org.jsecurity.session.ExpiredSessionException var5 = new org.jsecurity.session.ExpiredSessionException("org.jsecurity.authz.UnauthorizedException: org.jsecurity.session.ExpiredSessionException: ", (java.io.Serializable)var3);
    org.jsecurity.session.InvalidSessionException var6 = new org.jsecurity.session.InvalidSessionException("a2b823b1e72eae2b727289df8a00a89df8a0bab6ad8a89c4c5c7a9b62a270000", (java.lang.Throwable)var3);
    org.jsecurity.authc.IncorrectCredentialsException var7 = new org.jsecurity.authc.IncorrectCredentialsException((java.lang.Throwable)var6);

  }

  public void test166() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest2.test166");


    org.jsecurity.crypto.hash.Md2Hash var2 = org.jsecurity.crypto.hash.Md2Hash.fromBase64String("a2b823b1e72eae2b727289df8a00a89df8a0bab6ad8a89c4c5c7a9b62a270000");
    org.jsecurity.authc.credential.Md2CredentialsMatcher var3 = new org.jsecurity.authc.credential.Md2CredentialsMatcher();
    org.jsecurity.authz.SimpleAuthorizingAccount var5 = new org.jsecurity.authz.SimpleAuthorizingAccount((java.lang.Object)"a2b823b1e72eae2b727289df8a00a89df8a0bab6ad8a89c4c5c7a9b62a270000", (java.lang.Object)var3, "");
    org.jsecurity.session.SessionException var6 = new org.jsecurity.session.SessionException("org.jsecurity.realm.SimpleAccountRealm-9-authorization", (java.io.Serializable)var5);
    org.jsecurity.authz.SimpleRole var8 = new org.jsecurity.authz.SimpleRole();
    org.jsecurity.authz.permission.WildcardPermission var11 = new org.jsecurity.authz.permission.WildcardPermission("hi!", false);
    boolean var12 = var8.isPermitted((org.jsecurity.authz.Permission)var11);
    org.jsecurity.session.InvalidSessionException var13 = new org.jsecurity.session.InvalidSessionException("org.jsecurity.config.ConfigurationException: dd\uFFFD", (java.io.Serializable)var11);
    org.jsecurity.authz.SimpleRole var14 = new org.jsecurity.authz.SimpleRole();
    org.jsecurity.authz.permission.WildcardPermission var17 = new org.jsecurity.authz.permission.WildcardPermission("hi!", false);
    boolean var18 = var14.isPermitted((org.jsecurity.authz.Permission)var17);
    boolean var19 = var11.implies((org.jsecurity.authz.Permission)var17);
    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      var5.checkPermission((org.jsecurity.authz.Permission)var11);
      fail("Expected exception of type org.jsecurity.authz.UnauthorizedException");
    } catch (org.jsecurity.authz.UnauthorizedException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var2);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var12 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var18 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var19 == true);

  }

  public void test167() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest2.test167");


    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      org.jsecurity.io.IniResource var2 = new org.jsecurity.io.IniResource("9370bad8-7774-4f3f-9431-c39c9f6aa37d", "f3cec280-b0d4-4d1e-9ce8-a8b745fa003b");
      fail("Expected exception of type org.jsecurity.io.ResourceException");
    } catch (org.jsecurity.io.ResourceException e) {
      // Expected exception.
    }

  }

  public void test168() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest2.test168");


    org.jsecurity.codec.CodecException var1 = new org.jsecurity.codec.CodecException("ZGT/");

  }

  public void test169() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest2.test169");


    java.lang.String var1 = org.jsecurity.util.StringUtils.clean("6490c538-8530-4846-9179-12c067fd8651");
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var1 + "' != '" + "6490c538-8530-4846-9179-12c067fd8651"+ "'", var1.equals("6490c538-8530-4846-9179-12c067fd8651"));

  }

  public void test170() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest2.test170");


    org.jsecurity.realm.text.PropertiesRealm var0 = new org.jsecurity.realm.text.PropertiesRealm();
    var0.setUseXmlFormat(true);
    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      var0.afterRoleCacheSet();
      fail("Expected exception of type org.jsecurity.JSecurityException");
    } catch (org.jsecurity.JSecurityException e) {
      // Expected exception.
    }

  }

  public void test171() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest2.test171");


    org.jsecurity.subject.InvalidSubjectException var3 = new org.jsecurity.subject.InvalidSubjectException("dd\uFFFD");
    org.jsecurity.session.ExpiredSessionException var4 = new org.jsecurity.session.ExpiredSessionException("org.jsecurity.config.ConfigurationException: dd\uFFFD", (java.io.Serializable)var3);
    org.jsecurity.session.SessionException var5 = new org.jsecurity.session.SessionException((java.lang.Throwable)var4);
    org.jsecurity.io.ResourceException var6 = new org.jsecurity.io.ResourceException((java.lang.Throwable)var5);
    org.jsecurity.util.InstantiationException var7 = new org.jsecurity.util.InstantiationException("ff68c978-9c6a-4e92-8f51-9959805afd36", (java.lang.Throwable)var5);

  }

  public void test172() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest2.test172");


    org.jsecurity.session.mgt.SimpleSession var0 = new org.jsecurity.session.mgt.SimpleSession();
    var0.setTimeout((-1L));
    org.jsecurity.session.mgt.SimpleSession var3 = new org.jsecurity.session.mgt.SimpleSession();
    java.util.Date var4 = var3.getLastAccessTime();
    var0.setLastAccessTime(var4);
    java.net.InetAddress var6 = var0.getHostAddress();
    org.jsecurity.authz.HostUnauthorizedException var7 = new org.jsecurity.authz.HostUnauthorizedException(var6);
    java.lang.Throwable[] var8 = var7.getSuppressed();
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var4);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var6);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var8);

  }

  public void test173() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest2.test173");


    org.jsecurity.session.UnknownSessionException var5 = new org.jsecurity.session.UnknownSessionException("dd\uFFFD", (java.io.Serializable)100.0f);
    org.jsecurity.subject.SubjectException var6 = new org.jsecurity.subject.SubjectException("dd\uFFFD", (java.lang.Throwable)var5);
    org.jsecurity.authc.AccountException var7 = new org.jsecurity.authc.AccountException("hi!", (java.lang.Throwable)var6);
    org.jsecurity.session.UnknownSessionException var8 = new org.jsecurity.session.UnknownSessionException((java.lang.Throwable)var6);
    org.jsecurity.codec.CodecException var9 = new org.jsecurity.codec.CodecException((java.lang.Throwable)var6);
    org.jsecurity.subject.SubjectException var10 = new org.jsecurity.subject.SubjectException("10f5b491-38ac-4c02-8085-950abb026a06", (java.lang.Throwable)var6);

  }

  public void test174() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest2.test174");


    org.jsecurity.authz.SimpleRole var0 = new org.jsecurity.authz.SimpleRole();
    org.jsecurity.authz.SimpleAuthorizationInfo var1 = new org.jsecurity.authz.SimpleAuthorizationInfo();
    var1.addRole("a2b823b1e72eae2b727289df8a00a89df8a0bab6ad8a89c4c5c7a9b62a270000");
    org.jsecurity.session.UnknownSessionException var8 = new org.jsecurity.session.UnknownSessionException("dd\uFFFD", (java.io.Serializable)100.0f);
    org.jsecurity.subject.SubjectException var9 = new org.jsecurity.subject.SubjectException("dd\uFFFD", (java.lang.Throwable)var8);
    org.jsecurity.io.SerializationException var10 = new org.jsecurity.io.SerializationException("", (java.lang.Throwable)var9);
    java.lang.Throwable[] var11 = var9.getSuppressed();
    java.util.Set var12 = org.jsecurity.util.CollectionUtils.asSet((java.lang.Object[])var11);
    var1.addRoles((java.util.Collection)var12);
    var0.addAll((java.util.Collection)var12);
    org.jsecurity.authz.SimpleRole var16 = new org.jsecurity.authz.SimpleRole();
    org.jsecurity.authz.permission.WildcardPermission var19 = new org.jsecurity.authz.permission.WildcardPermission("hi!", false);
    boolean var20 = var16.isPermitted((org.jsecurity.authz.Permission)var19);
    org.jsecurity.session.InvalidSessionException var21 = new org.jsecurity.session.InvalidSessionException("org.jsecurity.config.ConfigurationException: dd\uFFFD", (java.io.Serializable)var19);
    org.jsecurity.authz.SimpleRole var22 = new org.jsecurity.authz.SimpleRole();
    org.jsecurity.authz.permission.WildcardPermission var25 = new org.jsecurity.authz.permission.WildcardPermission("hi!", false);
    boolean var26 = var22.isPermitted((org.jsecurity.authz.Permission)var25);
    boolean var27 = var19.implies((org.jsecurity.authz.Permission)var25);
    boolean var28 = var0.isPermitted((org.jsecurity.authz.Permission)var25);
    org.jsecurity.authz.SimpleAuthorizingAccount var29 = new org.jsecurity.authz.SimpleAuthorizingAccount();
    java.util.Set var30 = var29.getSimpleRoles();
    org.jsecurity.authz.SimpleRole var31 = new org.jsecurity.authz.SimpleRole();
    org.jsecurity.authz.SimpleAuthorizationInfo var32 = new org.jsecurity.authz.SimpleAuthorizationInfo();
    var32.addRole("a2b823b1e72eae2b727289df8a00a89df8a0bab6ad8a89c4c5c7a9b62a270000");
    org.jsecurity.session.UnknownSessionException var39 = new org.jsecurity.session.UnknownSessionException("dd\uFFFD", (java.io.Serializable)100.0f);
    org.jsecurity.subject.SubjectException var40 = new org.jsecurity.subject.SubjectException("dd\uFFFD", (java.lang.Throwable)var39);
    org.jsecurity.io.SerializationException var41 = new org.jsecurity.io.SerializationException("", (java.lang.Throwable)var40);
    java.lang.Throwable[] var42 = var40.getSuppressed();
    java.util.Set var43 = org.jsecurity.util.CollectionUtils.asSet((java.lang.Object[])var42);
    var32.addRoles((java.util.Collection)var43);
    var31.addAll((java.util.Collection)var43);
    org.jsecurity.authz.SimpleRole var47 = new org.jsecurity.authz.SimpleRole();
    org.jsecurity.authz.permission.WildcardPermission var50 = new org.jsecurity.authz.permission.WildcardPermission("hi!", false);
    boolean var51 = var47.isPermitted((org.jsecurity.authz.Permission)var50);
    org.jsecurity.session.InvalidSessionException var52 = new org.jsecurity.session.InvalidSessionException("org.jsecurity.config.ConfigurationException: dd\uFFFD", (java.io.Serializable)var50);
    org.jsecurity.authz.SimpleRole var53 = new org.jsecurity.authz.SimpleRole();
    org.jsecurity.authz.permission.WildcardPermission var56 = new org.jsecurity.authz.permission.WildcardPermission("hi!", false);
    boolean var57 = var53.isPermitted((org.jsecurity.authz.Permission)var56);
    boolean var58 = var50.implies((org.jsecurity.authz.Permission)var56);
    boolean var59 = var31.isPermitted((org.jsecurity.authz.Permission)var56);
    boolean var60 = var29.isPermitted((org.jsecurity.authz.Permission)var56);
    boolean var61 = var0.isPermitted((org.jsecurity.authz.Permission)var56);
    var0.setName("d24e20a8-12f0-4e12-814e-d6450a4b8fd6");
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var11);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var12);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var20 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var26 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var27 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var28 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var30);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var42);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var43);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var51 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var57 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var58 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var59 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var60 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var61 == false);

  }

  public void test175() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest2.test175");


    org.jsecurity.session.UnknownSessionException var5 = new org.jsecurity.session.UnknownSessionException("dd\uFFFD", (java.io.Serializable)100.0f);
    org.jsecurity.session.SessionException var7 = new org.jsecurity.session.SessionException("dd\uFFFD", (java.lang.Throwable)var5, (java.io.Serializable)0);
    org.jsecurity.session.SessionException var8 = new org.jsecurity.session.SessionException("dd\uFFFD", (java.lang.Throwable)var5);
    org.jsecurity.cache.CacheException var9 = new org.jsecurity.cache.CacheException("534d81de-ee39-466d-b839-49671dee6c25", (java.lang.Throwable)var5);

  }

  public void test176() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest2.test176");


    byte[] var4 = new byte[] { (byte)100, (byte)100, (byte)(-1)};
    java.lang.String var5 = org.jsecurity.codec.CodecSupport.toString(var4);
    byte[] var6 = org.jsecurity.codec.Base64.encode(var4);
    char[] var7 = org.jsecurity.codec.CodecSupport.toChars(var6);
    org.jsecurity.authc.UsernamePasswordToken var9 = new org.jsecurity.authc.UsernamePasswordToken("org.jsecurity.realm.SimpleAccountRealm-55-authorization", var7, false);
    char[] var10 = var9.getPassword();
    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      byte[] var11 = org.jsecurity.codec.Hex.decode(var10);
      fail("Expected exception of type java.lang.IllegalArgumentException");
    } catch (java.lang.IllegalArgumentException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var4);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var5 + "' != '" + "dd\uFFFD"+ "'", var5.equals("dd\uFFFD"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var6);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var7);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var10);

  }

  public void test177() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest2.test177");


    org.jsecurity.crypto.hash.Sha512Hash var1 = org.jsecurity.crypto.hash.Sha512Hash.fromBase64String("org.jsecurity.config.ConfigurationException: dd\uFFFD-4org.jsecurity.config.ConfigurationException: dd\uFFFD02-8085-950org.jsecurity.config.ConfigurationException: dd\uFFFDbb026org.jsecurity.config.ConfigurationException: dd\uFFFD06");
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var1);

  }

  public void test178() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest2.test178");


    org.jsecurity.authc.ExpiredCredentialsException var1 = new org.jsecurity.authc.ExpiredCredentialsException();
    org.jsecurity.session.ExpiredSessionException var2 = new org.jsecurity.session.ExpiredSessionException("", (java.lang.Throwable)var1);
    org.jsecurity.authc.LockedAccountException var3 = new org.jsecurity.authc.LockedAccountException((java.lang.Throwable)var2);

  }

  public void test179() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest2.test179");


    org.jsecurity.authc.pam.AllSuccessfulModularAuthenticationStrategy var0 = new org.jsecurity.authc.pam.AllSuccessfulModularAuthenticationStrategy();
    char[] var2 = new char[] { };
    org.jsecurity.authc.UsernamePasswordToken var4 = new org.jsecurity.authc.UsernamePasswordToken("hi!", var2, true);
    org.jsecurity.authc.SimpleAccount var5 = new org.jsecurity.authc.SimpleAccount();
    var5.setCredentialsExpired(false);
    boolean var8 = var5.isLocked();
    org.jsecurity.authc.AuthenticationInfo var9 = var0.afterAllAttempts((org.jsecurity.authc.AuthenticationToken)var4, (org.jsecurity.authc.AuthenticationInfo)var5);
    char[] var12 = new char[] { };
    org.jsecurity.authc.UsernamePasswordToken var14 = new org.jsecurity.authc.UsernamePasswordToken("hi!", var12, true);
    org.jsecurity.authc.UsernamePasswordToken var15 = new org.jsecurity.authc.UsernamePasswordToken("\u0000\u0000", var12);
    java.lang.Object var16 = var15.getPrincipal();
    org.jsecurity.authc.SimpleAccount var17 = new org.jsecurity.authc.SimpleAccount();
    var17.setCredentialsExpired(false);
    var17.setCredentialsExpired(false);
    boolean var22 = var17.isCredentialsExpired();
    org.jsecurity.authc.AuthenticationInfo var23 = var0.afterAllAttempts((org.jsecurity.authc.AuthenticationToken)var15, (org.jsecurity.authc.AuthenticationInfo)var17);
    byte[] var27 = new byte[] { (byte)100, (byte)100, (byte)(-1)};
    java.lang.String var28 = org.jsecurity.codec.CodecSupport.toString(var27);
    byte[] var29 = org.jsecurity.codec.Base64.encode(var27);
    char[] var30 = org.jsecurity.codec.CodecSupport.toChars(var29);
    var15.setPassword(var30);
    org.jsecurity.authz.ModularRealmAuthorizer var32 = new org.jsecurity.authz.ModularRealmAuthorizer();
    java.io.InputStream var34 = org.jsecurity.util.ClassUtils.getResourceAsStream("");
    java.lang.Object[] var35 = new java.lang.Object[] { var34};
    java.util.List var36 = org.jsecurity.util.CollectionUtils.asList(var35);
    org.jsecurity.authc.pam.ModularRealmAuthenticator var37 = new org.jsecurity.authc.pam.ModularRealmAuthenticator(var36);
    org.jsecurity.subject.SimplePrincipalCollection var39 = new org.jsecurity.subject.SimplePrincipalCollection((java.util.Collection)var36, "org.jsecurity.authz.UnauthorizedException: org.jsecurity.session.ExpiredSessionException: ");
    org.jsecurity.session.UnknownSessionException var44 = new org.jsecurity.session.UnknownSessionException("dd\uFFFD", (java.io.Serializable)100.0f);
    org.jsecurity.session.SessionException var46 = new org.jsecurity.session.SessionException("dd\uFFFD", (java.lang.Throwable)var44, (java.io.Serializable)0);
    org.jsecurity.session.SessionException var47 = new org.jsecurity.session.SessionException("dd\uFFFD", (java.lang.Throwable)var44);
    var39.add((java.lang.Object)var47, "org.jsecurity.config.ConfigurationException: dd\uFFFD");
    java.util.Set var50 = var39.asSet();
    var32.setRealms((java.util.Collection)var50);
    org.jsecurity.authz.UnauthorizedException var53 = new org.jsecurity.authz.UnauthorizedException("org.jsecurity.config.ConfigurationException: dd\uFFFD");
    java.lang.Throwable[] var54 = var53.getSuppressed();
    java.util.Set var55 = org.jsecurity.util.CollectionUtils.asSet((java.lang.Object[])var54);
    var32.setRealms((java.util.Collection)var55);
    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      org.jsecurity.crypto.hash.Sha384Hash var57 = new org.jsecurity.crypto.hash.Sha384Hash((java.lang.Object)var30, (java.lang.Object)var32);
      fail("Expected exception of type org.jsecurity.codec.CodecException");
    } catch (org.jsecurity.codec.CodecException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var2);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var8 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var9);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var12);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var16 + "' != '" + "\u0000\u0000"+ "'", var16.equals("\u0000\u0000"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var22 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var23);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var27);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var28 + "' != '" + "dd\uFFFD"+ "'", var28.equals("dd\uFFFD"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var29);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var30);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var34);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var35);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var36);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var50);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var54);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var55);

  }

  public void test180() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest2.test180");


    org.jsecurity.mgt.DefaultSecurityManager var0 = new org.jsecurity.mgt.DefaultSecurityManager();
    java.io.InputStream var2 = org.jsecurity.util.ClassUtils.getResourceAsStream("");
    java.lang.Object[] var3 = new java.lang.Object[] { var2};
    java.util.List var4 = org.jsecurity.util.CollectionUtils.asList(var3);
    org.jsecurity.authc.pam.ModularRealmAuthenticator var5 = new org.jsecurity.authc.pam.ModularRealmAuthenticator(var4);
    org.jsecurity.authc.pam.AllSuccessfulModularAuthenticationStrategy var6 = new org.jsecurity.authc.pam.AllSuccessfulModularAuthenticationStrategy();
    var5.setModularAuthenticationStrategy((org.jsecurity.authc.pam.ModularAuthenticationStrategy)var6);
    org.jsecurity.authz.SimpleAuthorizationInfo var8 = new org.jsecurity.authz.SimpleAuthorizationInfo();
    var8.addStringPermission("hi!");
    java.io.InputStream var12 = org.jsecurity.util.ClassUtils.getResourceAsStream("");
    java.lang.Object[] var13 = new java.lang.Object[] { var12};
    java.util.List var14 = org.jsecurity.util.CollectionUtils.asList(var13);
    var8.addRoles((java.util.Collection)var14);
    var5.setAuthenticationListeners((java.util.Collection)var14);
    var0.setSessionListeners((java.util.Collection)var14);
    org.jsecurity.authc.pam.ModularRealmAuthenticator var18 = new org.jsecurity.authc.pam.ModularRealmAuthenticator();
    org.jsecurity.authz.permission.InvalidPermissionStringException var21 = new org.jsecurity.authz.permission.InvalidPermissionStringException("", "dd\uFFFD");
    org.jsecurity.JSecurityException var23 = new org.jsecurity.JSecurityException("");
    org.jsecurity.authc.SimpleAuthenticationInfo var25 = new org.jsecurity.authc.SimpleAuthenticationInfo((java.lang.Object)var21, (java.lang.Object)"", "org.jsecurity.authz.UnauthorizedException: org.jsecurity.session.ExpiredSessionException: ");
    org.jsecurity.subject.PrincipalCollection var26 = var25.getPrincipals();
    var18.onLogout(var26);
    var0.setAuthenticator((org.jsecurity.authc.Authenticator)var18);
    org.jsecurity.codec.CodecException var31 = new org.jsecurity.codec.CodecException("dd\uFFFD");
    org.jsecurity.authc.ConcurrentAccessException var32 = new org.jsecurity.authc.ConcurrentAccessException("org.jsecurity.authz.UnauthorizedException: org.jsecurity.session.ExpiredSessionException: ", (java.lang.Throwable)var31);
    org.jsecurity.subject.SimplePrincipalCollection var34 = new org.jsecurity.subject.SimplePrincipalCollection((java.lang.Object)var31, "");
    java.io.InputStream var36 = org.jsecurity.util.ClassUtils.getResourceAsStream("");
    java.lang.Object[] var37 = new java.lang.Object[] { var36};
    java.util.List var38 = org.jsecurity.util.CollectionUtils.asList(var37);
    org.jsecurity.authc.pam.ModularRealmAuthenticator var39 = new org.jsecurity.authc.pam.ModularRealmAuthenticator(var38);
    org.jsecurity.authc.pam.AllSuccessfulModularAuthenticationStrategy var40 = new org.jsecurity.authc.pam.AllSuccessfulModularAuthenticationStrategy();
    var39.setModularAuthenticationStrategy((org.jsecurity.authc.pam.ModularAuthenticationStrategy)var40);
    org.jsecurity.authz.SimpleAuthorizationInfo var42 = new org.jsecurity.authz.SimpleAuthorizationInfo();
    var42.addStringPermission("hi!");
    java.io.InputStream var46 = org.jsecurity.util.ClassUtils.getResourceAsStream("");
    java.lang.Object[] var47 = new java.lang.Object[] { var46};
    java.util.List var48 = org.jsecurity.util.CollectionUtils.asList(var47);
    var42.addRoles((java.util.Collection)var48);
    var39.setAuthenticationListeners((java.util.Collection)var48);
    org.jsecurity.realm.activedirectory.ActiveDirectoryRealm var51 = new org.jsecurity.realm.activedirectory.ActiveDirectoryRealm();
    var51.setPrincipalSuffix("");
    var39.setRealm((org.jsecurity.realm.Realm)var51);
    org.jsecurity.authc.pam.FirstSuccessfulAuthenticationStrategy var55 = new org.jsecurity.authc.pam.FirstSuccessfulAuthenticationStrategy();
    org.jsecurity.authz.UnauthorizedException var57 = new org.jsecurity.authz.UnauthorizedException("org.jsecurity.config.ConfigurationException: dd\uFFFD");
    java.lang.Throwable[] var58 = var57.getSuppressed();
    java.util.List var59 = org.jsecurity.util.CollectionUtils.asList((java.lang.Object[])var58);
    org.jsecurity.authc.UsernamePasswordToken var60 = new org.jsecurity.authc.UsernamePasswordToken();
    java.lang.String var61 = var60.getUsername();
    java.net.InetAddress var62 = var60.getInetAddress();
    org.jsecurity.authc.AuthenticationInfo var63 = var55.beforeAllAttempts((java.util.Collection)var59, (org.jsecurity.authc.AuthenticationToken)var60);
    var39.setModularAuthenticationStrategy((org.jsecurity.authc.pam.ModularAuthenticationStrategy)var55);
    org.jsecurity.authc.SimpleAccount var65 = new org.jsecurity.authc.SimpleAccount((org.jsecurity.subject.PrincipalCollection)var34, (java.lang.Object)var39);
    var0.setAuthenticator((org.jsecurity.authc.Authenticator)var39);
    org.jsecurity.authz.Authorizer var67 = var0.getAuthorizer();
    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      var0.setRememberMeCipherKeyBase64("Y2E3M2QxYTQtNzA2ZS00MmU3LTk4MGYtODk2ZDNiMTUzZGU4");
      fail("Expected exception of type java.lang.IllegalStateException");
    } catch (java.lang.IllegalStateException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var2);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var3);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var4);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var12);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var13);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var14);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var26);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var36);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var37);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var38);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var46);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var47);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var48);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var58);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var59);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var61);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var62);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var63);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var67);

  }

  public void test181() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest2.test181");


    org.jsecurity.session.mgt.quartz.QuartzSessionValidationScheduler var0 = new org.jsecurity.session.mgt.quartz.QuartzSessionValidationScheduler();
    var0.disableSessionValidation();
    var0.enableSessionValidation();
    var0.enableSessionValidation();
    var0.disableSessionValidation();
    var0.disableSessionValidation();

  }

  public void test182() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest2.test182");


    org.jsecurity.authc.ExpiredCredentialsException var1 = new org.jsecurity.authc.ExpiredCredentialsException();
    org.jsecurity.session.ExpiredSessionException var2 = new org.jsecurity.session.ExpiredSessionException("", (java.lang.Throwable)var1);
    org.jsecurity.authz.UnauthorizedException var3 = new org.jsecurity.authz.UnauthorizedException((java.lang.Throwable)var2);
    org.jsecurity.authc.ExcessiveAttemptsException var4 = new org.jsecurity.authc.ExcessiveAttemptsException((java.lang.Throwable)var3);
    org.jsecurity.subject.InvalidSubjectException var5 = new org.jsecurity.subject.InvalidSubjectException((java.lang.Throwable)var4);
    org.jsecurity.authc.ExpiredCredentialsException var6 = new org.jsecurity.authc.ExpiredCredentialsException((java.lang.Throwable)var4);

  }

  public void test183() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest2.test183");


    java.util.Set var1 = org.jsecurity.util.PermissionUtils.toPermissionStrings("org.jsecurity.config.ConfigurationException: dd\uFFFD");
    org.jsecurity.authz.SimpleAuthorizationInfo var2 = new org.jsecurity.authz.SimpleAuthorizationInfo(var1);
    java.util.Set var3 = var2.getStringPermissions();
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var1);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var3);

  }

  public void test184() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest2.test184");


    org.jsecurity.mgt.DefaultSecurityManager var0 = new org.jsecurity.mgt.DefaultSecurityManager();
    java.io.InputStream var2 = org.jsecurity.util.ClassUtils.getResourceAsStream("");
    java.lang.Object[] var3 = new java.lang.Object[] { var2};
    java.util.List var4 = org.jsecurity.util.CollectionUtils.asList(var3);
    org.jsecurity.authc.pam.ModularRealmAuthenticator var5 = new org.jsecurity.authc.pam.ModularRealmAuthenticator(var4);
    org.jsecurity.authc.pam.AllSuccessfulModularAuthenticationStrategy var6 = new org.jsecurity.authc.pam.AllSuccessfulModularAuthenticationStrategy();
    var5.setModularAuthenticationStrategy((org.jsecurity.authc.pam.ModularAuthenticationStrategy)var6);
    org.jsecurity.authz.SimpleAuthorizationInfo var8 = new org.jsecurity.authz.SimpleAuthorizationInfo();
    var8.addStringPermission("hi!");
    java.io.InputStream var12 = org.jsecurity.util.ClassUtils.getResourceAsStream("");
    java.lang.Object[] var13 = new java.lang.Object[] { var12};
    java.util.List var14 = org.jsecurity.util.CollectionUtils.asList(var13);
    var8.addRoles((java.util.Collection)var14);
    var5.setAuthenticationListeners((java.util.Collection)var14);
    var0.setSessionListeners((java.util.Collection)var14);
    org.jsecurity.authc.pam.ModularRealmAuthenticator var18 = new org.jsecurity.authc.pam.ModularRealmAuthenticator();
    org.jsecurity.authz.permission.InvalidPermissionStringException var21 = new org.jsecurity.authz.permission.InvalidPermissionStringException("", "dd\uFFFD");
    org.jsecurity.JSecurityException var23 = new org.jsecurity.JSecurityException("");
    org.jsecurity.authc.SimpleAuthenticationInfo var25 = new org.jsecurity.authc.SimpleAuthenticationInfo((java.lang.Object)var21, (java.lang.Object)"", "org.jsecurity.authz.UnauthorizedException: org.jsecurity.session.ExpiredSessionException: ");
    org.jsecurity.subject.PrincipalCollection var26 = var25.getPrincipals();
    var18.onLogout(var26);
    var0.setAuthenticator((org.jsecurity.authc.Authenticator)var18);
    org.jsecurity.codec.CodecException var31 = new org.jsecurity.codec.CodecException("dd\uFFFD");
    org.jsecurity.authc.ConcurrentAccessException var32 = new org.jsecurity.authc.ConcurrentAccessException("org.jsecurity.authz.UnauthorizedException: org.jsecurity.session.ExpiredSessionException: ", (java.lang.Throwable)var31);
    org.jsecurity.subject.SimplePrincipalCollection var34 = new org.jsecurity.subject.SimplePrincipalCollection((java.lang.Object)var31, "");
    org.jsecurity.authc.pam.FirstSuccessfulAuthenticationStrategy var35 = new org.jsecurity.authc.pam.FirstSuccessfulAuthenticationStrategy();
    org.jsecurity.authz.UnauthorizedException var37 = new org.jsecurity.authz.UnauthorizedException("org.jsecurity.config.ConfigurationException: dd\uFFFD");
    java.lang.Throwable[] var38 = var37.getSuppressed();
    java.util.List var39 = org.jsecurity.util.CollectionUtils.asList((java.lang.Object[])var38);
    org.jsecurity.authc.UsernamePasswordToken var40 = new org.jsecurity.authc.UsernamePasswordToken();
    java.lang.String var41 = var40.getUsername();
    java.net.InetAddress var42 = var40.getInetAddress();
    org.jsecurity.authc.AuthenticationInfo var43 = var35.beforeAllAttempts((java.util.Collection)var39, (org.jsecurity.authc.AuthenticationToken)var40);
    org.jsecurity.session.UnknownSessionException var48 = new org.jsecurity.session.UnknownSessionException("dd\uFFFD", (java.io.Serializable)100.0f);
    org.jsecurity.subject.SubjectException var49 = new org.jsecurity.subject.SubjectException("dd\uFFFD", (java.lang.Throwable)var48);
    org.jsecurity.io.SerializationException var50 = new org.jsecurity.io.SerializationException("", (java.lang.Throwable)var49);
    java.lang.Throwable[] var51 = var49.getSuppressed();
    java.util.Set var52 = org.jsecurity.util.CollectionUtils.asSet((java.lang.Object[])var51);
    org.jsecurity.authc.SimpleAccount var53 = new org.jsecurity.authc.SimpleAccount((org.jsecurity.subject.PrincipalCollection)var34, (java.lang.Object)var39, var52);
    java.io.InputStream var55 = org.jsecurity.util.ClassUtils.getResourceAsStream("");
    java.lang.Object[] var56 = new java.lang.Object[] { var55};
    java.util.List var57 = org.jsecurity.util.CollectionUtils.asList(var56);
    org.jsecurity.authc.pam.ModularRealmAuthenticator var58 = new org.jsecurity.authc.pam.ModularRealmAuthenticator(var57);
    org.jsecurity.subject.SimplePrincipalCollection var60 = new org.jsecurity.subject.SimplePrincipalCollection((java.util.Collection)var57, "org.jsecurity.authz.UnauthorizedException: org.jsecurity.session.ExpiredSessionException: ");
    org.jsecurity.io.ResourceException var64 = new org.jsecurity.io.ResourceException("hi!");
    org.jsecurity.authc.UnknownAccountException var65 = new org.jsecurity.authc.UnknownAccountException((java.lang.Throwable)var64);
    org.jsecurity.session.StoppedSessionException var66 = new org.jsecurity.session.StoppedSessionException("dd\uFFFD", (java.io.Serializable)var64);
    org.jsecurity.session.UnknownSessionException var67 = new org.jsecurity.session.UnknownSessionException("org.jsecurity.authz.UnauthorizedException: org.jsecurity.session.ExpiredSessionException: ", (java.lang.Throwable)var64);
    boolean var68 = var60.equals((java.lang.Object)var64);
    var34.addAll((org.jsecurity.subject.PrincipalCollection)var60);
    org.jsecurity.session.UnknownSessionException var74 = new org.jsecurity.session.UnknownSessionException("dd\uFFFD", (java.io.Serializable)100.0f);
    org.jsecurity.subject.SubjectException var75 = new org.jsecurity.subject.SubjectException("dd\uFFFD", (java.lang.Throwable)var74);
    org.jsecurity.io.SerializationException var76 = new org.jsecurity.io.SerializationException("", (java.lang.Throwable)var75);
    java.lang.Throwable[] var77 = var75.getSuppressed();
    java.util.List var78 = org.jsecurity.util.CollectionUtils.asList((java.lang.Object[])var77);
    boolean var79 = var0.isPermittedAll((org.jsecurity.subject.PrincipalCollection)var34, (java.util.Collection)var78);
    org.jsecurity.subject.DelegatingSubject var80 = new org.jsecurity.subject.DelegatingSubject((org.jsecurity.mgt.SecurityManager)var0);
    boolean var82 = var80.hasRole("org.jsecurity.authc.IncorrectCredentialsException: \u0000\u0000");
    java.net.InetAddress var83 = var80.getInetAddress();
    org.jsecurity.authz.SimpleRole var84 = new org.jsecurity.authz.SimpleRole();
    org.jsecurity.authz.permission.WildcardPermission var87 = new org.jsecurity.authz.permission.WildcardPermission("hi!", false);
    boolean var88 = var84.isPermitted((org.jsecurity.authz.Permission)var87);
    java.io.InputStream var90 = org.jsecurity.util.ClassUtils.getResourceAsStream("");
    java.lang.Object[] var91 = new java.lang.Object[] { var90};
    java.util.List var92 = org.jsecurity.util.CollectionUtils.asList(var91);
    var84.addAll((java.util.Collection)var92);
    boolean var94 = var80.hasAllRoles((java.util.Collection)var92);
    boolean var95 = var80.isAuthenticated();
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var2);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var3);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var4);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var12);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var13);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var14);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var26);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var38);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var39);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var41);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var42);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var43);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var51);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var52);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var55);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var56);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var57);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var68 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var77);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var78);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var79 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var82 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var83);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var88 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var90);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var91);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var92);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var94 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var95 == false);

  }

  public void test185() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest2.test185");


    org.jsecurity.mgt.DefaultSecurityManager var0 = new org.jsecurity.mgt.DefaultSecurityManager();
    java.io.InputStream var2 = org.jsecurity.util.ClassUtils.getResourceAsStream("");
    java.lang.Object[] var3 = new java.lang.Object[] { var2};
    java.util.List var4 = org.jsecurity.util.CollectionUtils.asList(var3);
    org.jsecurity.authc.pam.ModularRealmAuthenticator var5 = new org.jsecurity.authc.pam.ModularRealmAuthenticator(var4);
    org.jsecurity.authc.pam.AllSuccessfulModularAuthenticationStrategy var6 = new org.jsecurity.authc.pam.AllSuccessfulModularAuthenticationStrategy();
    var5.setModularAuthenticationStrategy((org.jsecurity.authc.pam.ModularAuthenticationStrategy)var6);
    org.jsecurity.authz.SimpleAuthorizationInfo var8 = new org.jsecurity.authz.SimpleAuthorizationInfo();
    var8.addStringPermission("hi!");
    java.io.InputStream var12 = org.jsecurity.util.ClassUtils.getResourceAsStream("");
    java.lang.Object[] var13 = new java.lang.Object[] { var12};
    java.util.List var14 = org.jsecurity.util.CollectionUtils.asList(var13);
    var8.addRoles((java.util.Collection)var14);
    var5.setAuthenticationListeners((java.util.Collection)var14);
    var0.setSessionListeners((java.util.Collection)var14);
    org.jsecurity.realm.text.TextConfigurationRealm var18 = new org.jsecurity.realm.text.TextConfigurationRealm();
    java.io.InputStream var20 = org.jsecurity.util.ClassUtils.getResourceAsStream("");
    java.lang.Object[] var21 = new java.lang.Object[] { var20};
    java.util.List var22 = org.jsecurity.util.CollectionUtils.asList(var21);
    org.jsecurity.authc.pam.ModularRealmAuthenticator var23 = new org.jsecurity.authc.pam.ModularRealmAuthenticator(var22);
    org.jsecurity.subject.SimplePrincipalCollection var25 = new org.jsecurity.subject.SimplePrincipalCollection((java.util.Collection)var22, "org.jsecurity.authz.UnauthorizedException: org.jsecurity.session.ExpiredSessionException: ");
    org.jsecurity.session.UnknownSessionException var30 = new org.jsecurity.session.UnknownSessionException("dd\uFFFD", (java.io.Serializable)100.0f);
    org.jsecurity.session.SessionException var32 = new org.jsecurity.session.SessionException("dd\uFFFD", (java.lang.Throwable)var30, (java.io.Serializable)0);
    org.jsecurity.session.SessionException var33 = new org.jsecurity.session.SessionException("dd\uFFFD", (java.lang.Throwable)var30);
    var25.add((java.lang.Object)var33, "org.jsecurity.config.ConfigurationException: dd\uFFFD");
    var18.onLogout((org.jsecurity.subject.PrincipalCollection)var25);
    org.jsecurity.authc.pam.FirstSuccessfulAuthenticationStrategy var37 = new org.jsecurity.authc.pam.FirstSuccessfulAuthenticationStrategy();
    org.jsecurity.authz.UnauthorizedException var39 = new org.jsecurity.authz.UnauthorizedException("org.jsecurity.config.ConfigurationException: dd\uFFFD");
    java.lang.Throwable[] var40 = var39.getSuppressed();
    java.util.List var41 = org.jsecurity.util.CollectionUtils.asList((java.lang.Object[])var40);
    org.jsecurity.authc.UsernamePasswordToken var42 = new org.jsecurity.authc.UsernamePasswordToken();
    java.lang.String var43 = var42.getUsername();
    java.net.InetAddress var44 = var42.getInetAddress();
    org.jsecurity.authc.AuthenticationInfo var45 = var37.beforeAllAttempts((java.util.Collection)var41, (org.jsecurity.authc.AuthenticationToken)var42);
    boolean[] var46 = var0.hasRoles((org.jsecurity.subject.PrincipalCollection)var25, var41);
    org.jsecurity.subject.Subject var47 = var0.getSubject();
    org.jsecurity.realm.text.TextConfigurationRealm var49 = new org.jsecurity.realm.text.TextConfigurationRealm();
    java.io.InputStream var51 = org.jsecurity.util.ClassUtils.getResourceAsStream("");
    java.lang.Object[] var52 = new java.lang.Object[] { var51};
    java.util.List var53 = org.jsecurity.util.CollectionUtils.asList(var52);
    org.jsecurity.authc.pam.ModularRealmAuthenticator var54 = new org.jsecurity.authc.pam.ModularRealmAuthenticator(var53);
    org.jsecurity.subject.SimplePrincipalCollection var56 = new org.jsecurity.subject.SimplePrincipalCollection((java.util.Collection)var53, "org.jsecurity.authz.UnauthorizedException: org.jsecurity.session.ExpiredSessionException: ");
    org.jsecurity.session.UnknownSessionException var61 = new org.jsecurity.session.UnknownSessionException("dd\uFFFD", (java.io.Serializable)100.0f);
    org.jsecurity.session.SessionException var63 = new org.jsecurity.session.SessionException("dd\uFFFD", (java.lang.Throwable)var61, (java.io.Serializable)0);
    org.jsecurity.session.SessionException var64 = new org.jsecurity.session.SessionException("dd\uFFFD", (java.lang.Throwable)var61);
    var56.add((java.lang.Object)var64, "org.jsecurity.config.ConfigurationException: dd\uFFFD");
    var49.onLogout((org.jsecurity.subject.PrincipalCollection)var56);
    java.util.Set var69 = org.jsecurity.util.PermissionUtils.toPermissionStrings("org.jsecurity.config.ConfigurationException: dd\uFFFD");
    org.jsecurity.authz.SimpleAuthorizationInfo var70 = new org.jsecurity.authz.SimpleAuthorizationInfo(var69);
    org.jsecurity.authz.SimpleAuthorizingAccount var71 = new org.jsecurity.authz.SimpleAuthorizingAccount((org.jsecurity.subject.PrincipalCollection)var56, (java.lang.Object)var69);
    org.jsecurity.session.StoppedSessionException var72 = new org.jsecurity.session.StoppedSessionException("org.jsecurity.realm.SimpleAccountRealm-55-authorization", (java.io.Serializable)var56);
    var0.logout((org.jsecurity.subject.PrincipalCollection)var56);
    java.io.InputStream var75 = org.jsecurity.util.ClassUtils.getResourceAsStream("");
    java.lang.Object[] var76 = new java.lang.Object[] { var75};
    java.util.List var77 = org.jsecurity.util.CollectionUtils.asList(var76);
    org.jsecurity.authc.pam.ModularRealmAuthenticator var78 = new org.jsecurity.authc.pam.ModularRealmAuthenticator(var77);
    org.jsecurity.subject.SimplePrincipalCollection var80 = new org.jsecurity.subject.SimplePrincipalCollection((java.util.Collection)var77, "org.jsecurity.authz.UnauthorizedException: org.jsecurity.session.ExpiredSessionException: ");
    org.jsecurity.session.UnknownSessionException var85 = new org.jsecurity.session.UnknownSessionException("dd\uFFFD", (java.io.Serializable)100.0f);
    org.jsecurity.session.SessionException var87 = new org.jsecurity.session.SessionException("dd\uFFFD", (java.lang.Throwable)var85, (java.io.Serializable)0);
    org.jsecurity.session.SessionException var88 = new org.jsecurity.session.SessionException("dd\uFFFD", (java.lang.Throwable)var85);
    var80.add((java.lang.Object)var88, "org.jsecurity.config.ConfigurationException: dd\uFFFD");
    var80.clear();
    var56.addAll((org.jsecurity.subject.PrincipalCollection)var80);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var2);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var3);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var4);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var12);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var13);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var14);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var20);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var21);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var22);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var40);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var41);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var43);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var44);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var45);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var46);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var47);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var51);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var52);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var53);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var69);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var75);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var76);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var77);

  }

  public void test186() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest2.test186");


    org.jsecurity.config.IniConfiguration var0 = new org.jsecurity.config.IniConfiguration();
    java.lang.String var1 = var0.getConfig();
    var0.setConfigUrl("cff098b5-6d79-4f6d-93d3-148185d0b987");
    var0.setConfigUrl("\u0000\u0000");
    java.io.InputStream var7 = org.jsecurity.util.ClassUtils.getResourceAsStream("");
    org.jsecurity.io.ResourceUtils.close(var7);
    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      var0.load(var7);
      fail("Expected exception of type org.jsecurity.config.ConfigurationException");
    } catch (org.jsecurity.config.ConfigurationException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var1);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var7);

  }

  public void test187() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest2.test187");


    char[] var2 = new char[] { };
    org.jsecurity.authc.UsernamePasswordToken var4 = new org.jsecurity.authc.UsernamePasswordToken("hi!", var2, true);
    org.jsecurity.authc.UsernamePasswordToken var5 = new org.jsecurity.authc.UsernamePasswordToken("\u0000\u0000", var2);
    org.jsecurity.session.mgt.SimpleSession var6 = new org.jsecurity.session.mgt.SimpleSession();
    var6.setTimeout((-1L));
    org.jsecurity.session.mgt.SimpleSession var9 = new org.jsecurity.session.mgt.SimpleSession();
    java.util.Date var10 = var9.getLastAccessTime();
    var6.setLastAccessTime(var10);
    java.net.InetAddress var12 = var6.getHostAddress();
    var5.setInetAddress(var12);
    org.jsecurity.session.mgt.SimpleSession var14 = new org.jsecurity.session.mgt.SimpleSession(var12);
    org.jsecurity.session.mgt.SimpleSession var15 = new org.jsecurity.session.mgt.SimpleSession(var12);
    java.util.Map var16 = var15.getAttributes();
    long var17 = var15.getTimeout();
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var2);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var10);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var12);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var16);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var17 == 1800000L);

  }

  public void test188() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest2.test188");


    org.jsecurity.realm.activedirectory.ActiveDirectoryRealm var0 = new org.jsecurity.realm.activedirectory.ActiveDirectoryRealm();
    var0.init();
    var0.setSystemPassword("dd\uFFFD");
    org.jsecurity.authz.aop.GuestAnnotationHandler var4 = new org.jsecurity.authz.aop.GuestAnnotationHandler();
    java.lang.Class var5 = var4.getAnnotationClass();
    var0.setAuthenticationTokenClass(var5);
    java.io.InputStream var8 = org.jsecurity.util.ClassUtils.getResourceAsStream("");
    java.lang.Object[] var9 = new java.lang.Object[] { var8};
    java.util.List var10 = org.jsecurity.util.CollectionUtils.asList(var9);
    org.jsecurity.authc.pam.ModularRealmAuthenticator var11 = new org.jsecurity.authc.pam.ModularRealmAuthenticator(var10);
    org.jsecurity.subject.SimplePrincipalCollection var13 = new org.jsecurity.subject.SimplePrincipalCollection((java.util.Collection)var10, "org.jsecurity.authz.UnauthorizedException: org.jsecurity.session.ExpiredSessionException: ");
    org.jsecurity.session.UnknownSessionException var18 = new org.jsecurity.session.UnknownSessionException("dd\uFFFD", (java.io.Serializable)100.0f);
    org.jsecurity.session.SessionException var20 = new org.jsecurity.session.SessionException("dd\uFFFD", (java.lang.Throwable)var18, (java.io.Serializable)0);
    org.jsecurity.session.SessionException var21 = new org.jsecurity.session.SessionException("dd\uFFFD", (java.lang.Throwable)var18);
    var13.add((java.lang.Object)var21, "org.jsecurity.config.ConfigurationException: dd\uFFFD");
    java.util.Set var24 = var13.asSet();
    boolean var25 = var13.isEmpty();
    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      boolean var27 = var0.hasRole((org.jsecurity.subject.PrincipalCollection)var13, "c237631f-f5b6-4602-ad39-91738c85cc84");
      fail("Expected exception of type java.util.NoSuchElementException");
    } catch (java.util.NoSuchElementException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var5);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var8);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var9);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var10);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var24);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var25 == false);

  }

  public void test189() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest2.test189");


    org.jsecurity.session.mgt.DelegatingSession var0 = new org.jsecurity.session.mgt.DelegatingSession();
    org.jsecurity.session.mgt.DefaultSessionManager var1 = new org.jsecurity.session.mgt.DefaultSessionManager();
    org.jsecurity.session.mgt.eis.MemorySessionDAO var2 = new org.jsecurity.session.mgt.eis.MemorySessionDAO();
    org.jsecurity.cache.Cache var3 = var2.getActiveSessionsCache();
    org.jsecurity.cache.CacheManager var4 = var2.getCacheManager();
    org.jsecurity.cache.HashtableCacheManager var5 = new org.jsecurity.cache.HashtableCacheManager();
    org.jsecurity.cache.Cache var7 = var5.getCache("\u0000\u0000");
    var2.setActiveSessionsCache(var7);
    java.io.InputStream var10 = org.jsecurity.util.ClassUtils.getResourceAsStream("");
    java.lang.Object[] var11 = new java.lang.Object[] { var10};
    java.util.List var12 = org.jsecurity.util.CollectionUtils.asList(var11);
    org.jsecurity.authc.pam.ModularRealmAuthenticator var13 = new org.jsecurity.authc.pam.ModularRealmAuthenticator(var12);
    org.jsecurity.authc.pam.AllSuccessfulModularAuthenticationStrategy var14 = new org.jsecurity.authc.pam.AllSuccessfulModularAuthenticationStrategy();
    var13.setModularAuthenticationStrategy((org.jsecurity.authc.pam.ModularAuthenticationStrategy)var14);
    org.jsecurity.authz.SimpleAuthorizationInfo var16 = new org.jsecurity.authz.SimpleAuthorizationInfo();
    var16.addStringPermission("hi!");
    java.io.InputStream var20 = org.jsecurity.util.ClassUtils.getResourceAsStream("");
    java.lang.Object[] var21 = new java.lang.Object[] { var20};
    java.util.List var22 = org.jsecurity.util.CollectionUtils.asList(var21);
    var16.addRoles((java.util.Collection)var22);
    var13.setAuthenticationListeners((java.util.Collection)var22);
    org.jsecurity.realm.activedirectory.ActiveDirectoryRealm var25 = new org.jsecurity.realm.activedirectory.ActiveDirectoryRealm();
    var25.setPrincipalSuffix("");
    var13.setRealm((org.jsecurity.realm.Realm)var25);
    org.jsecurity.cache.HashtableCacheManager var29 = new org.jsecurity.cache.HashtableCacheManager();
    org.jsecurity.cache.Cache var31 = var29.getCache("\u0000\u0000");
    var25.setAuthorizationCache(var31);
    var2.setActiveSessionsCache(var31);
    org.jsecurity.session.mgt.SimpleSession var34 = new org.jsecurity.session.mgt.SimpleSession();
    java.io.Serializable var35 = var2.create((org.jsecurity.session.Session)var34);
    var1.setSessionDAO((org.jsecurity.session.mgt.eis.SessionDAO)var2);
    var0.setSessionManager((org.jsecurity.session.mgt.SessionManager)var1);
    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      org.jsecurity.crypto.hash.Sha1Hash var38 = new org.jsecurity.crypto.hash.Sha1Hash((java.lang.Object)var0);
      fail("Expected exception of type org.jsecurity.codec.CodecException");
    } catch (org.jsecurity.codec.CodecException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var3);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var4);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var7);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var10);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var11);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var12);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var20);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var21);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var22);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var31);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var35 + "' != '" + "da9224e5-5e91-4d4d-9f2d-f407affc7a60"+ "'", var35.equals("da9224e5-5e91-4d4d-9f2d-f407affc7a60"));

  }

  public void test190() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest2.test190");


    org.jsecurity.crypto.hash.Sha512Hash var1 = org.jsecurity.crypto.hash.Sha512Hash.fromBase64String("org.jsecurity.config.ConfigurationException: dd\uFFFD");
    byte[] var2 = var1.getBytes();
    java.lang.String var3 = var1.toString();
    byte[] var4 = var1.getBytes();
    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      char[] var6 = org.jsecurity.codec.CodecSupport.toChars(var4, "org.jsecurity.realm.SimpleAccountRealm-52-authorization");
      fail("Expected exception of type org.jsecurity.codec.CodecException");
    } catch (org.jsecurity.codec.CodecException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var1);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var2);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var3 + "' != '" + "a2b823b1e72eae2b727289df8a00a89df8a0bab6ad8a89c4c5c7a9b62a270000"+ "'", var3.equals("a2b823b1e72eae2b727289df8a00a89df8a0bab6ad8a89c4c5c7a9b62a270000"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var4);

  }

  public void test191() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest2.test191");


    org.jsecurity.authz.HostUnauthorizedException var1 = new org.jsecurity.authz.HostUnauthorizedException("9370bad8-7774-4f3f-9431-c39c9f6aa37d");

  }

  public void test192() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest2.test192");


    org.jsecurity.authz.SimpleAuthorizationInfo var0 = new org.jsecurity.authz.SimpleAuthorizationInfo();
    org.jsecurity.realm.jndi.JndiRealmFactory var1 = new org.jsecurity.realm.jndi.JndiRealmFactory();
    java.io.InputStream var3 = org.jsecurity.util.ClassUtils.getResourceAsStream("");
    java.lang.Object[] var4 = new java.lang.Object[] { var3};
    java.util.List var5 = org.jsecurity.util.CollectionUtils.asList(var4);
    var1.setJndiNames((java.util.Collection)var5);
    org.jsecurity.authz.SimpleRole var7 = new org.jsecurity.authz.SimpleRole();
    org.jsecurity.authz.SimpleAuthorizationInfo var8 = new org.jsecurity.authz.SimpleAuthorizationInfo();
    var8.addRole("a2b823b1e72eae2b727289df8a00a89df8a0bab6ad8a89c4c5c7a9b62a270000");
    org.jsecurity.session.UnknownSessionException var15 = new org.jsecurity.session.UnknownSessionException("dd\uFFFD", (java.io.Serializable)100.0f);
    org.jsecurity.subject.SubjectException var16 = new org.jsecurity.subject.SubjectException("dd\uFFFD", (java.lang.Throwable)var15);
    org.jsecurity.io.SerializationException var17 = new org.jsecurity.io.SerializationException("", (java.lang.Throwable)var16);
    java.lang.Throwable[] var18 = var16.getSuppressed();
    java.util.Set var19 = org.jsecurity.util.CollectionUtils.asSet((java.lang.Object[])var18);
    var8.addRoles((java.util.Collection)var19);
    var7.addAll((java.util.Collection)var19);
    var1.setJndiNames((java.util.Collection)var19);
    var0.setStringPermissions(var19);
    org.jsecurity.config.ConfigurationException var25 = new org.jsecurity.config.ConfigurationException("org.jsecurity.realm.SimpleAccountRealm-173-authorization");
    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      org.jsecurity.crypto.hash.Sha256Hash var27 = new org.jsecurity.crypto.hash.Sha256Hash((java.lang.Object)var0, (java.lang.Object)var25, 100);
      fail("Expected exception of type org.jsecurity.codec.CodecException");
    } catch (org.jsecurity.codec.CodecException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var3);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var4);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var5);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var18);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var19);

  }

  public void test193() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest2.test193");


    org.jsecurity.mgt.DefaultSecurityManager var0 = new org.jsecurity.mgt.DefaultSecurityManager();
    java.io.InputStream var2 = org.jsecurity.util.ClassUtils.getResourceAsStream("");
    java.lang.Object[] var3 = new java.lang.Object[] { var2};
    java.util.List var4 = org.jsecurity.util.CollectionUtils.asList(var3);
    org.jsecurity.authc.pam.ModularRealmAuthenticator var5 = new org.jsecurity.authc.pam.ModularRealmAuthenticator(var4);
    org.jsecurity.authc.pam.AllSuccessfulModularAuthenticationStrategy var6 = new org.jsecurity.authc.pam.AllSuccessfulModularAuthenticationStrategy();
    var5.setModularAuthenticationStrategy((org.jsecurity.authc.pam.ModularAuthenticationStrategy)var6);
    org.jsecurity.authz.SimpleAuthorizationInfo var8 = new org.jsecurity.authz.SimpleAuthorizationInfo();
    var8.addStringPermission("hi!");
    java.io.InputStream var12 = org.jsecurity.util.ClassUtils.getResourceAsStream("");
    java.lang.Object[] var13 = new java.lang.Object[] { var12};
    java.util.List var14 = org.jsecurity.util.CollectionUtils.asList(var13);
    var8.addRoles((java.util.Collection)var14);
    var5.setAuthenticationListeners((java.util.Collection)var14);
    var0.setSessionListeners((java.util.Collection)var14);
    org.jsecurity.authc.pam.ModularRealmAuthenticator var18 = new org.jsecurity.authc.pam.ModularRealmAuthenticator();
    org.jsecurity.authz.permission.InvalidPermissionStringException var21 = new org.jsecurity.authz.permission.InvalidPermissionStringException("", "dd\uFFFD");
    org.jsecurity.JSecurityException var23 = new org.jsecurity.JSecurityException("");
    org.jsecurity.authc.SimpleAuthenticationInfo var25 = new org.jsecurity.authc.SimpleAuthenticationInfo((java.lang.Object)var21, (java.lang.Object)"", "org.jsecurity.authz.UnauthorizedException: org.jsecurity.session.ExpiredSessionException: ");
    org.jsecurity.subject.PrincipalCollection var26 = var25.getPrincipals();
    var18.onLogout(var26);
    var0.setAuthenticator((org.jsecurity.authc.Authenticator)var18);
    org.jsecurity.crypto.BlowfishCipher var29 = new org.jsecurity.crypto.BlowfishCipher();
    byte[] var33 = new byte[] { (byte)100, (byte)100, (byte)(-1)};
    java.lang.String var34 = org.jsecurity.codec.CodecSupport.toString(var33);
    byte[] var36 = org.jsecurity.codec.Base64.decode("hi!");
    byte[] var37 = var29.encrypt(var33, var36);
    java.lang.String var38 = org.jsecurity.codec.Base64.decodeToString(var33);
    byte[] var39 = org.jsecurity.codec.Base64.encode(var33);
    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      var0.setRememberMeDecryptionCipherKey(var33);
      fail("Expected exception of type java.lang.IllegalStateException");
    } catch (java.lang.IllegalStateException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var2);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var3);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var4);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var12);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var13);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var14);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var26);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var33);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var34 + "' != '" + "dd\uFFFD"+ "'", var34.equals("dd\uFFFD"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var36);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var37);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var38 + "' != '" + "\u0000\u0000"+ "'", var38.equals("\u0000\u0000"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var39);

  }

  public void test194() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest2.test194");


    org.jsecurity.realm.text.TextConfigurationRealm var0 = new org.jsecurity.realm.text.TextConfigurationRealm();
    java.io.InputStream var2 = org.jsecurity.util.ClassUtils.getResourceAsStream("");
    java.lang.Object[] var3 = new java.lang.Object[] { var2};
    java.util.List var4 = org.jsecurity.util.CollectionUtils.asList(var3);
    org.jsecurity.authc.pam.ModularRealmAuthenticator var5 = new org.jsecurity.authc.pam.ModularRealmAuthenticator(var4);
    org.jsecurity.subject.SimplePrincipalCollection var7 = new org.jsecurity.subject.SimplePrincipalCollection((java.util.Collection)var4, "org.jsecurity.authz.UnauthorizedException: org.jsecurity.session.ExpiredSessionException: ");
    org.jsecurity.session.UnknownSessionException var12 = new org.jsecurity.session.UnknownSessionException("dd\uFFFD", (java.io.Serializable)100.0f);
    org.jsecurity.session.SessionException var14 = new org.jsecurity.session.SessionException("dd\uFFFD", (java.lang.Throwable)var12, (java.io.Serializable)0);
    org.jsecurity.session.SessionException var15 = new org.jsecurity.session.SessionException("dd\uFFFD", (java.lang.Throwable)var12);
    var7.add((java.lang.Object)var15, "org.jsecurity.config.ConfigurationException: dd\uFFFD");
    var0.onLogout((org.jsecurity.subject.PrincipalCollection)var7);
    org.jsecurity.cache.HashtableCacheManager var19 = new org.jsecurity.cache.HashtableCacheManager();
    org.jsecurity.cache.Cache var21 = var19.getCache("\u0000\u0000");
    var0.setAuthorizationCache(var21);
    java.lang.String[] var27 = org.jsecurity.util.StringUtils.split("org.jsecurity.config.ConfigurationException: dd\uFFFD", '#');
    var0.addAccount("020e4fd5-81c8-4cbc-9bbb-975c45ce39a3", "6464ff", var27);
    java.io.InputStream var30 = org.jsecurity.util.ClassUtils.getResourceAsStream("");
    java.lang.Object[] var31 = new java.lang.Object[] { var30};
    java.util.List var32 = org.jsecurity.util.CollectionUtils.asList(var31);
    org.jsecurity.authc.pam.ModularRealmAuthenticator var33 = new org.jsecurity.authc.pam.ModularRealmAuthenticator(var32);
    org.jsecurity.subject.SimplePrincipalCollection var35 = new org.jsecurity.subject.SimplePrincipalCollection((java.util.Collection)var32, "org.jsecurity.authz.UnauthorizedException: org.jsecurity.session.ExpiredSessionException: ");
    org.jsecurity.session.UnknownSessionException var40 = new org.jsecurity.session.UnknownSessionException("dd\uFFFD", (java.io.Serializable)100.0f);
    org.jsecurity.session.SessionException var42 = new org.jsecurity.session.SessionException("dd\uFFFD", (java.lang.Throwable)var40, (java.io.Serializable)0);
    org.jsecurity.session.SessionException var43 = new org.jsecurity.session.SessionException("dd\uFFFD", (java.lang.Throwable)var40);
    var35.add((java.lang.Object)var43, "org.jsecurity.config.ConfigurationException: dd\uFFFD");
    java.util.Set var46 = var35.asSet();
    java.util.List var47 = var35.asList();
    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      var0.checkPermission((org.jsecurity.subject.PrincipalCollection)var35, "f4578b3a-1e8a-4019-b058-920d7e36ff9e");
      fail("Expected exception of type java.util.NoSuchElementException");
    } catch (java.util.NoSuchElementException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var2);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var3);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var4);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var21);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var27);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var30);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var31);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var32);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var46);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var47);

  }

  public void test195() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest2.test195");


    org.jsecurity.session.UnknownSessionException var1 = new org.jsecurity.session.UnknownSessionException("org.jsecurity.realm.SimpleAccountRealm-9-authorization");
    org.jsecurity.authc.AuthenticationException var2 = new org.jsecurity.authc.AuthenticationException((java.lang.Throwable)var1);
    org.jsecurity.authc.ConcurrentAccessException var3 = new org.jsecurity.authc.ConcurrentAccessException((java.lang.Throwable)var2);

  }

  public void test196() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest2.test196");


    org.jsecurity.jndi.JndiTemplate var0 = new org.jsecurity.jndi.JndiTemplate();
    java.util.Properties var1 = var0.getEnvironment();
    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      java.lang.Object var3 = var0.lookup("dade3937-164f-46fa-a082-f5f54b3b44e1");
      fail("Expected exception of type javax.naming.NoInitialContextException");
    } catch (javax.naming.NoInitialContextException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var1);

  }

  public void test197() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest2.test197");


    org.jsecurity.mgt.DefaultSecurityManager var0 = new org.jsecurity.mgt.DefaultSecurityManager();
    java.io.InputStream var2 = org.jsecurity.util.ClassUtils.getResourceAsStream("");
    java.lang.Object[] var3 = new java.lang.Object[] { var2};
    java.util.List var4 = org.jsecurity.util.CollectionUtils.asList(var3);
    org.jsecurity.authc.pam.ModularRealmAuthenticator var5 = new org.jsecurity.authc.pam.ModularRealmAuthenticator(var4);
    org.jsecurity.authc.pam.AllSuccessfulModularAuthenticationStrategy var6 = new org.jsecurity.authc.pam.AllSuccessfulModularAuthenticationStrategy();
    var5.setModularAuthenticationStrategy((org.jsecurity.authc.pam.ModularAuthenticationStrategy)var6);
    org.jsecurity.authz.SimpleAuthorizationInfo var8 = new org.jsecurity.authz.SimpleAuthorizationInfo();
    var8.addStringPermission("hi!");
    java.io.InputStream var12 = org.jsecurity.util.ClassUtils.getResourceAsStream("");
    java.lang.Object[] var13 = new java.lang.Object[] { var12};
    java.util.List var14 = org.jsecurity.util.CollectionUtils.asList(var13);
    var8.addRoles((java.util.Collection)var14);
    var5.setAuthenticationListeners((java.util.Collection)var14);
    var0.setSessionListeners((java.util.Collection)var14);
    org.jsecurity.realm.text.TextConfigurationRealm var18 = new org.jsecurity.realm.text.TextConfigurationRealm();
    java.io.InputStream var20 = org.jsecurity.util.ClassUtils.getResourceAsStream("");
    java.lang.Object[] var21 = new java.lang.Object[] { var20};
    java.util.List var22 = org.jsecurity.util.CollectionUtils.asList(var21);
    org.jsecurity.authc.pam.ModularRealmAuthenticator var23 = new org.jsecurity.authc.pam.ModularRealmAuthenticator(var22);
    org.jsecurity.subject.SimplePrincipalCollection var25 = new org.jsecurity.subject.SimplePrincipalCollection((java.util.Collection)var22, "org.jsecurity.authz.UnauthorizedException: org.jsecurity.session.ExpiredSessionException: ");
    org.jsecurity.session.UnknownSessionException var30 = new org.jsecurity.session.UnknownSessionException("dd\uFFFD", (java.io.Serializable)100.0f);
    org.jsecurity.session.SessionException var32 = new org.jsecurity.session.SessionException("dd\uFFFD", (java.lang.Throwable)var30, (java.io.Serializable)0);
    org.jsecurity.session.SessionException var33 = new org.jsecurity.session.SessionException("dd\uFFFD", (java.lang.Throwable)var30);
    var25.add((java.lang.Object)var33, "org.jsecurity.config.ConfigurationException: dd\uFFFD");
    var18.onLogout((org.jsecurity.subject.PrincipalCollection)var25);
    org.jsecurity.authc.pam.FirstSuccessfulAuthenticationStrategy var37 = new org.jsecurity.authc.pam.FirstSuccessfulAuthenticationStrategy();
    org.jsecurity.authz.UnauthorizedException var39 = new org.jsecurity.authz.UnauthorizedException("org.jsecurity.config.ConfigurationException: dd\uFFFD");
    java.lang.Throwable[] var40 = var39.getSuppressed();
    java.util.List var41 = org.jsecurity.util.CollectionUtils.asList((java.lang.Object[])var40);
    org.jsecurity.authc.UsernamePasswordToken var42 = new org.jsecurity.authc.UsernamePasswordToken();
    java.lang.String var43 = var42.getUsername();
    java.net.InetAddress var44 = var42.getInetAddress();
    org.jsecurity.authc.AuthenticationInfo var45 = var37.beforeAllAttempts((java.util.Collection)var41, (org.jsecurity.authc.AuthenticationToken)var42);
    boolean[] var46 = var0.hasRoles((org.jsecurity.subject.PrincipalCollection)var25, var41);
    org.jsecurity.codec.CodecException var49 = new org.jsecurity.codec.CodecException("dd\uFFFD");
    org.jsecurity.authc.ConcurrentAccessException var50 = new org.jsecurity.authc.ConcurrentAccessException("org.jsecurity.authz.UnauthorizedException: org.jsecurity.session.ExpiredSessionException: ", (java.lang.Throwable)var49);
    org.jsecurity.subject.SimplePrincipalCollection var52 = new org.jsecurity.subject.SimplePrincipalCollection((java.lang.Object)var49, "");
    java.io.InputStream var54 = org.jsecurity.util.ClassUtils.getResourceAsStream("");
    java.lang.Object[] var55 = new java.lang.Object[] { var54};
    java.util.List var56 = org.jsecurity.util.CollectionUtils.asList(var55);
    org.jsecurity.authc.pam.ModularRealmAuthenticator var57 = new org.jsecurity.authc.pam.ModularRealmAuthenticator(var56);
    var52.addAll((java.util.Collection)var56, "\u0000\u0000");
    var0.setSessionListeners((java.util.Collection)var56);
    org.jsecurity.subject.RememberMeManager var61 = var0.getRememberMeManager();
    org.jsecurity.io.ResourceException var65 = new org.jsecurity.io.ResourceException("hi!");
    org.jsecurity.codec.CodecException var66 = new org.jsecurity.codec.CodecException((java.lang.Throwable)var65);
    org.jsecurity.JSecurityException var67 = new org.jsecurity.JSecurityException("a2b823b1e72eae2b727289df8a00a89df8a0bab6ad8a89c4c5c7a9b62a270000", (java.lang.Throwable)var65);
    org.jsecurity.session.UnknownSessionException var68 = new org.jsecurity.session.UnknownSessionException((java.lang.Throwable)var67);
    org.jsecurity.authc.IncorrectCredentialsException var69 = new org.jsecurity.authc.IncorrectCredentialsException((java.lang.Throwable)var67);
    org.jsecurity.authz.AuthorizationException var70 = new org.jsecurity.authz.AuthorizationException("\u0000\u0000\u0000", (java.lang.Throwable)var67);
    org.jsecurity.authc.AccountException var71 = new org.jsecurity.authc.AccountException((java.lang.Throwable)var70);
    org.jsecurity.subject.SimplePrincipalCollection var73 = new org.jsecurity.subject.SimplePrincipalCollection((java.lang.Object)var71, "org.jsecurity.authz.UnauthorizedException: org.jsecurity.session.ExpiredSessionException: ");
    org.jsecurity.mgt.DefaultSecurityManager var74 = new org.jsecurity.mgt.DefaultSecurityManager();
    java.io.InputStream var76 = org.jsecurity.util.ClassUtils.getResourceAsStream("");
    java.lang.Object[] var77 = new java.lang.Object[] { var76};
    java.util.List var78 = org.jsecurity.util.CollectionUtils.asList(var77);
    org.jsecurity.authc.pam.ModularRealmAuthenticator var79 = new org.jsecurity.authc.pam.ModularRealmAuthenticator(var78);
    org.jsecurity.authc.pam.AllSuccessfulModularAuthenticationStrategy var80 = new org.jsecurity.authc.pam.AllSuccessfulModularAuthenticationStrategy();
    var79.setModularAuthenticationStrategy((org.jsecurity.authc.pam.ModularAuthenticationStrategy)var80);
    org.jsecurity.authz.SimpleAuthorizationInfo var82 = new org.jsecurity.authz.SimpleAuthorizationInfo();
    var82.addStringPermission("hi!");
    java.io.InputStream var86 = org.jsecurity.util.ClassUtils.getResourceAsStream("");
    java.lang.Object[] var87 = new java.lang.Object[] { var86};
    java.util.List var88 = org.jsecurity.util.CollectionUtils.asList(var87);
    var82.addRoles((java.util.Collection)var88);
    var79.setAuthenticationListeners((java.util.Collection)var88);
    var74.setSessionListeners((java.util.Collection)var88);
    org.jsecurity.subject.Subject var92 = var74.getSubject();
    org.jsecurity.authz.permission.WildcardPermissionResolver var93 = new org.jsecurity.authz.permission.WildcardPermissionResolver();
    var74.setPermissionResolver((org.jsecurity.authz.permission.PermissionResolver)var93);
    boolean var95 = var73.equals((java.lang.Object)var74);
    var0.setAuthenticator((org.jsecurity.authc.Authenticator)var74);
    org.jsecurity.subject.Subject var97 = var74.getSubject();
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var2);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var3);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var4);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var12);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var13);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var14);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var20);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var21);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var22);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var40);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var41);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var43);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var44);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var45);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var46);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var54);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var55);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var56);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var61);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var76);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var77);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var78);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var86);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var87);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var88);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var92);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var95 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var97);

  }

  public void test198() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest2.test198");


    char[] var3 = new char[] { ' ', ' '};
    org.jsecurity.authc.UsernamePasswordToken var4 = new org.jsecurity.authc.UsernamePasswordToken("hi!", var3);
    char[] var8 = new char[] { '4', '#'};
    org.jsecurity.authc.UsernamePasswordToken var9 = new org.jsecurity.authc.UsernamePasswordToken("\u0000\u0000", var8);
    var4.setPassword(var8);
    byte[] var15 = new byte[] { (byte)100, (byte)100, (byte)(-1)};
    java.lang.String var16 = org.jsecurity.codec.CodecSupport.toString(var15);
    char[] var17 = org.jsecurity.codec.CodecSupport.toChars(var15);
    boolean var18 = org.jsecurity.codec.Base64.isBase64(var15);
    boolean var19 = org.jsecurity.codec.Base64.isBase64(var15);
    boolean var20 = org.jsecurity.codec.Base64.isBase64(var15);
    char[] var21 = org.jsecurity.codec.CodecSupport.toChars(var15);
    org.jsecurity.session.mgt.SimpleSession var22 = new org.jsecurity.session.mgt.SimpleSession();
    var22.setTimeout((-1L));
    org.jsecurity.session.mgt.SimpleSession var25 = new org.jsecurity.session.mgt.SimpleSession();
    java.util.Date var26 = var25.getLastAccessTime();
    var22.setLastAccessTime(var26);
    java.net.InetAddress var28 = var22.getHostAddress();
    org.jsecurity.authz.HostUnauthorizedException var29 = new org.jsecurity.authz.HostUnauthorizedException(var28);
    org.jsecurity.authc.UsernamePasswordToken var30 = new org.jsecurity.authc.UsernamePasswordToken("b725e8cc-690c-495e-ac27-b1b425834793", var21, var28);
    var4.setPassword(var21);
    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      byte[] var33 = org.jsecurity.codec.CodecSupport.toBytes(var21, "506595c4-cb43-4717-aa8e-dee65fecaada");
      fail("Expected exception of type org.jsecurity.codec.CodecException");
    } catch (org.jsecurity.codec.CodecException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var3);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var8);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var15);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var16 + "' != '" + "dd\uFFFD"+ "'", var16.equals("dd\uFFFD"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var17);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var18 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var19 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var20 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var21);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var26);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var28);

  }

  public void test199() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest2.test199");


    org.jsecurity.realm.text.TextConfigurationRealm var0 = new org.jsecurity.realm.text.TextConfigurationRealm();
    org.jsecurity.realm.text.TextConfigurationRealm var1 = new org.jsecurity.realm.text.TextConfigurationRealm();
    java.io.InputStream var3 = org.jsecurity.util.ClassUtils.getResourceAsStream("");
    java.lang.Object[] var4 = new java.lang.Object[] { var3};
    java.util.List var5 = org.jsecurity.util.CollectionUtils.asList(var4);
    org.jsecurity.authc.pam.ModularRealmAuthenticator var6 = new org.jsecurity.authc.pam.ModularRealmAuthenticator(var5);
    org.jsecurity.subject.SimplePrincipalCollection var8 = new org.jsecurity.subject.SimplePrincipalCollection((java.util.Collection)var5, "org.jsecurity.authz.UnauthorizedException: org.jsecurity.session.ExpiredSessionException: ");
    org.jsecurity.session.UnknownSessionException var13 = new org.jsecurity.session.UnknownSessionException("dd\uFFFD", (java.io.Serializable)100.0f);
    org.jsecurity.session.SessionException var15 = new org.jsecurity.session.SessionException("dd\uFFFD", (java.lang.Throwable)var13, (java.io.Serializable)0);
    org.jsecurity.session.SessionException var16 = new org.jsecurity.session.SessionException("dd\uFFFD", (java.lang.Throwable)var13);
    var8.add((java.lang.Object)var16, "org.jsecurity.config.ConfigurationException: dd\uFFFD");
    var1.onLogout((org.jsecurity.subject.PrincipalCollection)var8);
    java.util.Collection var21 = var8.fromRealm("\u0000\u0000\u0000");
    var0.onLogout((org.jsecurity.subject.PrincipalCollection)var8);
    java.util.Set var23 = var8.asSet();
    org.jsecurity.authz.ModularRealmAuthorizer var24 = new org.jsecurity.authz.ModularRealmAuthorizer((java.util.Collection)var23);
    java.io.InputStream var26 = org.jsecurity.util.ClassUtils.getResourceAsStream("");
    java.lang.Object[] var27 = new java.lang.Object[] { var26};
    java.util.List var28 = org.jsecurity.util.CollectionUtils.asList(var27);
    org.jsecurity.authc.pam.ModularRealmAuthenticator var29 = new org.jsecurity.authc.pam.ModularRealmAuthenticator(var28);
    org.jsecurity.subject.SimplePrincipalCollection var31 = new org.jsecurity.subject.SimplePrincipalCollection((java.util.Collection)var28, "org.jsecurity.authz.UnauthorizedException: org.jsecurity.session.ExpiredSessionException: ");
    org.jsecurity.io.ResourceException var35 = new org.jsecurity.io.ResourceException("hi!");
    org.jsecurity.authc.UnknownAccountException var36 = new org.jsecurity.authc.UnknownAccountException((java.lang.Throwable)var35);
    org.jsecurity.session.StoppedSessionException var37 = new org.jsecurity.session.StoppedSessionException("dd\uFFFD", (java.io.Serializable)var35);
    org.jsecurity.session.UnknownSessionException var38 = new org.jsecurity.session.UnknownSessionException("org.jsecurity.authz.UnauthorizedException: org.jsecurity.session.ExpiredSessionException: ", (java.lang.Throwable)var35);
    boolean var39 = var31.equals((java.lang.Object)var35);
    org.jsecurity.subject.SimplePrincipalCollection var40 = new org.jsecurity.subject.SimplePrincipalCollection((org.jsecurity.subject.PrincipalCollection)var31);
    org.jsecurity.authz.permission.AllPermission var41 = new org.jsecurity.authz.permission.AllPermission();
    org.jsecurity.authz.SimpleRole var43 = new org.jsecurity.authz.SimpleRole();
    org.jsecurity.authz.permission.WildcardPermission var46 = new org.jsecurity.authz.permission.WildcardPermission("hi!", false);
    boolean var47 = var43.isPermitted((org.jsecurity.authz.Permission)var46);
    org.jsecurity.session.InvalidSessionException var48 = new org.jsecurity.session.InvalidSessionException("org.jsecurity.config.ConfigurationException: dd\uFFFD", (java.io.Serializable)var46);
    org.jsecurity.authz.SimpleRole var49 = new org.jsecurity.authz.SimpleRole();
    org.jsecurity.authz.permission.WildcardPermission var52 = new org.jsecurity.authz.permission.WildcardPermission("hi!", false);
    boolean var53 = var49.isPermitted((org.jsecurity.authz.Permission)var52);
    boolean var54 = var46.implies((org.jsecurity.authz.Permission)var52);
    boolean var55 = var41.implies((org.jsecurity.authz.Permission)var52);
    org.jsecurity.authz.SimpleRole var57 = new org.jsecurity.authz.SimpleRole();
    org.jsecurity.authz.permission.WildcardPermission var60 = new org.jsecurity.authz.permission.WildcardPermission("hi!", false);
    boolean var61 = var57.isPermitted((org.jsecurity.authz.Permission)var60);
    org.jsecurity.session.InvalidSessionException var62 = new org.jsecurity.session.InvalidSessionException("org.jsecurity.config.ConfigurationException: dd\uFFFD", (java.io.Serializable)var60);
    org.jsecurity.authz.SimpleRole var63 = new org.jsecurity.authz.SimpleRole();
    org.jsecurity.authz.permission.WildcardPermission var66 = new org.jsecurity.authz.permission.WildcardPermission("hi!", false);
    boolean var67 = var63.isPermitted((org.jsecurity.authz.Permission)var66);
    boolean var68 = var60.implies((org.jsecurity.authz.Permission)var66);
    boolean var69 = var41.implies((org.jsecurity.authz.Permission)var60);
    org.jsecurity.authz.permission.WildcardPermission var72 = new org.jsecurity.authz.permission.WildcardPermission("6464ff", false);
    boolean var73 = var41.implies((org.jsecurity.authz.Permission)var72);
    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      boolean var74 = var24.isPermitted((org.jsecurity.subject.PrincipalCollection)var31, (org.jsecurity.authz.Permission)var41);
      fail("Expected exception of type java.lang.ClassCastException");
    } catch (java.lang.ClassCastException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var3);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var4);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var5);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var21);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var23);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var26);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var27);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var28);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var39 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var47 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var53 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var54 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var55 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var61 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var67 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var68 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var69 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var73 == true);

  }

  public void test200() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest2.test200");


    org.jsecurity.authc.pam.ModularRealmAuthenticator var1 = new org.jsecurity.authc.pam.ModularRealmAuthenticator();
    org.jsecurity.authz.permission.InvalidPermissionStringException var4 = new org.jsecurity.authz.permission.InvalidPermissionStringException("", "dd\uFFFD");
    org.jsecurity.JSecurityException var6 = new org.jsecurity.JSecurityException("");
    org.jsecurity.authc.SimpleAuthenticationInfo var8 = new org.jsecurity.authc.SimpleAuthenticationInfo((java.lang.Object)var4, (java.lang.Object)"", "org.jsecurity.authz.UnauthorizedException: org.jsecurity.session.ExpiredSessionException: ");
    org.jsecurity.subject.PrincipalCollection var9 = var8.getPrincipals();
    var1.onLogout(var9);
    org.jsecurity.session.SessionException var11 = new org.jsecurity.session.SessionException("\uFFFD\uFFFD#\uFFFD\uFFFD.\uFFFD+rr\uFFFD\u07CA\u0000\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\u01E9\uFFFD*'\u0000\u0000", (java.io.Serializable)var9);
    org.jsecurity.session.ExpiredSessionException var12 = new org.jsecurity.session.ExpiredSessionException((java.lang.Throwable)var11);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var9);

  }

  public void test201() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest2.test201");


    org.jsecurity.mgt.DefaultSecurityManager var0 = new org.jsecurity.mgt.DefaultSecurityManager();
    org.jsecurity.authz.SimpleAuthorizationInfo var2 = new org.jsecurity.authz.SimpleAuthorizationInfo();
    org.jsecurity.session.UnknownSessionException var7 = new org.jsecurity.session.UnknownSessionException("dd\uFFFD", (java.io.Serializable)100.0f);
    org.jsecurity.subject.SubjectException var8 = new org.jsecurity.subject.SubjectException("dd\uFFFD", (java.lang.Throwable)var7);
    org.jsecurity.io.SerializationException var9 = new org.jsecurity.io.SerializationException("", (java.lang.Throwable)var8);
    java.lang.Throwable[] var10 = var8.getSuppressed();
    java.util.Set var11 = org.jsecurity.util.CollectionUtils.asSet((java.lang.Object[])var10);
    var2.setStringPermissions(var11);
    java.util.Set var13 = var2.getRoles();
    org.jsecurity.authz.SimpleAuthorizationInfo var14 = new org.jsecurity.authz.SimpleAuthorizationInfo();
    var14.addRole("a2b823b1e72eae2b727289df8a00a89df8a0bab6ad8a89c4c5c7a9b62a270000");
    org.jsecurity.session.UnknownSessionException var21 = new org.jsecurity.session.UnknownSessionException("dd\uFFFD", (java.io.Serializable)100.0f);
    org.jsecurity.subject.SubjectException var22 = new org.jsecurity.subject.SubjectException("dd\uFFFD", (java.lang.Throwable)var21);
    org.jsecurity.io.SerializationException var23 = new org.jsecurity.io.SerializationException("", (java.lang.Throwable)var22);
    java.lang.Throwable[] var24 = var22.getSuppressed();
    java.util.Set var25 = org.jsecurity.util.CollectionUtils.asSet((java.lang.Object[])var24);
    var14.addRoles((java.util.Collection)var25);
    var2.setRoles(var25);
    org.jsecurity.authz.SimpleRole var28 = new org.jsecurity.authz.SimpleRole("org.jsecurity.authz.UnauthorizedException: org.jsecurity.session.ExpiredSessionException: ", var25);
    var0.setSessionListeners((java.util.Collection)var25);
    org.jsecurity.subject.Subject var30 = var0.getSubject();
    org.jsecurity.authz.SimpleAuthorizationInfo var31 = new org.jsecurity.authz.SimpleAuthorizationInfo();
    var31.addRole("a2b823b1e72eae2b727289df8a00a89df8a0bab6ad8a89c4c5c7a9b62a270000");
    org.jsecurity.authz.SimpleAuthorizationInfo var34 = new org.jsecurity.authz.SimpleAuthorizationInfo();
    var34.addRole("a2b823b1e72eae2b727289df8a00a89df8a0bab6ad8a89c4c5c7a9b62a270000");
    org.jsecurity.session.UnknownSessionException var41 = new org.jsecurity.session.UnknownSessionException("dd\uFFFD", (java.io.Serializable)100.0f);
    org.jsecurity.subject.SubjectException var42 = new org.jsecurity.subject.SubjectException("dd\uFFFD", (java.lang.Throwable)var41);
    org.jsecurity.io.SerializationException var43 = new org.jsecurity.io.SerializationException("", (java.lang.Throwable)var42);
    java.lang.Throwable[] var44 = var42.getSuppressed();
    java.util.Set var45 = org.jsecurity.util.CollectionUtils.asSet((java.lang.Object[])var44);
    var34.addRoles((java.util.Collection)var45);
    var31.setObjectPermissions(var45);
    java.io.InputStream var49 = org.jsecurity.util.ClassUtils.getResourceAsStream("");
    java.lang.Object[] var50 = new java.lang.Object[] { var49};
    java.util.List var51 = org.jsecurity.util.CollectionUtils.asList(var50);
    org.jsecurity.authc.pam.ModularRealmAuthenticator var52 = new org.jsecurity.authc.pam.ModularRealmAuthenticator(var51);
    org.jsecurity.subject.SimplePrincipalCollection var54 = new org.jsecurity.subject.SimplePrincipalCollection((java.util.Collection)var51, "org.jsecurity.authz.UnauthorizedException: org.jsecurity.session.ExpiredSessionException: ");
    java.util.Set var55 = var54.getRealmNames();
    java.io.InputStream var57 = org.jsecurity.util.ClassUtils.getResourceAsStream("");
    java.lang.Object[] var58 = new java.lang.Object[] { var57};
    java.util.List var59 = org.jsecurity.util.CollectionUtils.asList(var58);
    org.jsecurity.authc.pam.ModularRealmAuthenticator var60 = new org.jsecurity.authc.pam.ModularRealmAuthenticator(var59);
    org.jsecurity.subject.SimplePrincipalCollection var62 = new org.jsecurity.subject.SimplePrincipalCollection((java.util.Collection)var59, "org.jsecurity.authz.UnauthorizedException: org.jsecurity.session.ExpiredSessionException: ");
    org.jsecurity.session.UnknownSessionException var67 = new org.jsecurity.session.UnknownSessionException("dd\uFFFD", (java.io.Serializable)100.0f);
    org.jsecurity.session.SessionException var69 = new org.jsecurity.session.SessionException("dd\uFFFD", (java.lang.Throwable)var67, (java.io.Serializable)0);
    org.jsecurity.session.SessionException var70 = new org.jsecurity.session.SessionException("dd\uFFFD", (java.lang.Throwable)var67);
    var62.add((java.lang.Object)var70, "org.jsecurity.config.ConfigurationException: dd\uFFFD");
    java.util.Set var73 = var62.asSet();
    var54.addAll((java.util.Collection)var73, "6464ff");
    var31.setStringPermissions(var73);
    org.jsecurity.subject.SimplePrincipalCollection var78 = new org.jsecurity.subject.SimplePrincipalCollection((java.util.Collection)var73, "\u0000\u0000");
    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      boolean var80 = var0.isPermitted((org.jsecurity.subject.PrincipalCollection)var78, "org.jsecurity.authc.UsernamePasswordToken - hi!, rememberMe=false");
      fail("Expected exception of type java.util.NoSuchElementException");
    } catch (java.util.NoSuchElementException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var10);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var11);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var13);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var24);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var25);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var30);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var44);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var45);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var49);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var50);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var51);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var55);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var57);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var58);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var59);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var73);

  }

  public void test202() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest2.test202");


    byte[] var5 = new byte[] { (byte)100, (byte)100, (byte)(-1)};
    java.lang.String var6 = org.jsecurity.codec.CodecSupport.toString(var5);
    byte[] var7 = org.jsecurity.codec.Base64.encode(var5);
    char[] var8 = org.jsecurity.codec.CodecSupport.toChars(var7);
    org.jsecurity.authc.UsernamePasswordToken var10 = new org.jsecurity.authc.UsernamePasswordToken("org.jsecurity.realm.SimpleAccountRealm-55-authorization", var8, false);
    char[] var11 = var10.getPassword();
    org.jsecurity.session.mgt.SimpleSession var13 = new org.jsecurity.session.mgt.SimpleSession();
    var13.setTimeout((-1L));
    org.jsecurity.session.mgt.SimpleSession var16 = new org.jsecurity.session.mgt.SimpleSession();
    java.util.Date var17 = var16.getLastAccessTime();
    var13.setLastAccessTime(var17);
    java.net.InetAddress var19 = var13.getHostAddress();
    org.jsecurity.authc.UsernamePasswordToken var20 = new org.jsecurity.authc.UsernamePasswordToken("classpath:org/jsecurity/cache/ehcache/ehcache.xml", var11, false, var19);
    org.jsecurity.session.mgt.SimpleSession var21 = new org.jsecurity.session.mgt.SimpleSession(var19);
    org.jsecurity.session.mgt.SimpleSession var22 = new org.jsecurity.session.mgt.SimpleSession(var19);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var5);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var6 + "' != '" + "dd\uFFFD"+ "'", var6.equals("dd\uFFFD"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var7);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var8);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var11);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var17);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var19);

  }

  public void test203() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest2.test203");


    org.jsecurity.mgt.DefaultSecurityManager var0 = new org.jsecurity.mgt.DefaultSecurityManager();
    org.jsecurity.authz.permission.WildcardPermissionResolver var1 = new org.jsecurity.authz.permission.WildcardPermissionResolver();
    var0.setPermissionResolver((org.jsecurity.authz.permission.PermissionResolver)var1);
    org.jsecurity.authc.Authenticator var3 = var0.getAuthenticator();
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var3);

  }

  public void test204() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest2.test204");


    org.jsecurity.cache.CacheException var1 = new org.jsecurity.cache.CacheException("4b9d6c81-4edd-4863-940c-d095dff54756");

  }

  public void test205() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest2.test205");


    org.jsecurity.realm.text.TextConfigurationRealm var0 = new org.jsecurity.realm.text.TextConfigurationRealm();
    java.io.InputStream var2 = org.jsecurity.util.ClassUtils.getResourceAsStream("");
    java.lang.Object[] var3 = new java.lang.Object[] { var2};
    java.util.List var4 = org.jsecurity.util.CollectionUtils.asList(var3);
    org.jsecurity.authc.pam.ModularRealmAuthenticator var5 = new org.jsecurity.authc.pam.ModularRealmAuthenticator(var4);
    org.jsecurity.subject.SimplePrincipalCollection var7 = new org.jsecurity.subject.SimplePrincipalCollection((java.util.Collection)var4, "org.jsecurity.authz.UnauthorizedException: org.jsecurity.session.ExpiredSessionException: ");
    org.jsecurity.session.UnknownSessionException var12 = new org.jsecurity.session.UnknownSessionException("dd\uFFFD", (java.io.Serializable)100.0f);
    org.jsecurity.session.SessionException var14 = new org.jsecurity.session.SessionException("dd\uFFFD", (java.lang.Throwable)var12, (java.io.Serializable)0);
    org.jsecurity.session.SessionException var15 = new org.jsecurity.session.SessionException("dd\uFFFD", (java.lang.Throwable)var12);
    var7.add((java.lang.Object)var15, "org.jsecurity.config.ConfigurationException: dd\uFFFD");
    var0.onLogout((org.jsecurity.subject.PrincipalCollection)var7);
    java.util.Collection var20 = var7.fromRealm("\u0000\u0000\u0000");
    org.jsecurity.session.mgt.eis.MemorySessionDAO var21 = new org.jsecurity.session.mgt.eis.MemorySessionDAO();
    org.jsecurity.authc.SimpleAuthenticationInfo var22 = new org.jsecurity.authc.SimpleAuthenticationInfo((org.jsecurity.subject.PrincipalCollection)var7, (java.lang.Object)var21);
    java.util.Collection var23 = var21.getActiveSessions();
    org.jsecurity.authz.SimpleRole var24 = new org.jsecurity.authz.SimpleRole();
    org.jsecurity.authz.SimpleAuthorizationInfo var25 = new org.jsecurity.authz.SimpleAuthorizationInfo();
    var25.addRole("a2b823b1e72eae2b727289df8a00a89df8a0bab6ad8a89c4c5c7a9b62a270000");
    org.jsecurity.session.UnknownSessionException var32 = new org.jsecurity.session.UnknownSessionException("dd\uFFFD", (java.io.Serializable)100.0f);
    org.jsecurity.subject.SubjectException var33 = new org.jsecurity.subject.SubjectException("dd\uFFFD", (java.lang.Throwable)var32);
    org.jsecurity.io.SerializationException var34 = new org.jsecurity.io.SerializationException("", (java.lang.Throwable)var33);
    java.lang.Throwable[] var35 = var33.getSuppressed();
    java.util.Set var36 = org.jsecurity.util.CollectionUtils.asSet((java.lang.Object[])var35);
    var25.addRoles((java.util.Collection)var36);
    var24.addAll((java.util.Collection)var36);
    java.lang.String var39 = var24.getName();
    org.jsecurity.authz.SimpleRole var40 = new org.jsecurity.authz.SimpleRole();
    org.jsecurity.authz.permission.WildcardPermission var43 = new org.jsecurity.authz.permission.WildcardPermission("hi!", false);
    boolean var44 = var40.isPermitted((org.jsecurity.authz.Permission)var43);
    boolean var45 = var24.isPermitted((org.jsecurity.authz.Permission)var43);
    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      org.jsecurity.session.Session var46 = var21.readSession((java.io.Serializable)var24);
      fail("Expected exception of type org.jsecurity.session.UnknownSessionException");
    } catch (org.jsecurity.session.UnknownSessionException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var2);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var3);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var4);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var20);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var23);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var35);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var36);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var39);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var44 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var45 == false);

  }

  public void test206() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest2.test206");


    org.jsecurity.authz.ModularRealmAuthorizer var0 = new org.jsecurity.authz.ModularRealmAuthorizer();
    org.jsecurity.codec.CodecException var3 = new org.jsecurity.codec.CodecException("dd\uFFFD");
    org.jsecurity.authc.ConcurrentAccessException var4 = new org.jsecurity.authc.ConcurrentAccessException("org.jsecurity.authz.UnauthorizedException: org.jsecurity.session.ExpiredSessionException: ", (java.lang.Throwable)var3);
    org.jsecurity.subject.SimplePrincipalCollection var6 = new org.jsecurity.subject.SimplePrincipalCollection((java.lang.Object)var3, "");
    org.jsecurity.authc.pam.FirstSuccessfulAuthenticationStrategy var7 = new org.jsecurity.authc.pam.FirstSuccessfulAuthenticationStrategy();
    org.jsecurity.authz.UnauthorizedException var9 = new org.jsecurity.authz.UnauthorizedException("org.jsecurity.config.ConfigurationException: dd\uFFFD");
    java.lang.Throwable[] var10 = var9.getSuppressed();
    java.util.List var11 = org.jsecurity.util.CollectionUtils.asList((java.lang.Object[])var10);
    org.jsecurity.authc.UsernamePasswordToken var12 = new org.jsecurity.authc.UsernamePasswordToken();
    java.lang.String var13 = var12.getUsername();
    java.net.InetAddress var14 = var12.getInetAddress();
    org.jsecurity.authc.AuthenticationInfo var15 = var7.beforeAllAttempts((java.util.Collection)var11, (org.jsecurity.authc.AuthenticationToken)var12);
    org.jsecurity.session.UnknownSessionException var20 = new org.jsecurity.session.UnknownSessionException("dd\uFFFD", (java.io.Serializable)100.0f);
    org.jsecurity.subject.SubjectException var21 = new org.jsecurity.subject.SubjectException("dd\uFFFD", (java.lang.Throwable)var20);
    org.jsecurity.io.SerializationException var22 = new org.jsecurity.io.SerializationException("", (java.lang.Throwable)var21);
    java.lang.Throwable[] var23 = var21.getSuppressed();
    java.util.Set var24 = org.jsecurity.util.CollectionUtils.asSet((java.lang.Object[])var23);
    org.jsecurity.authc.SimpleAccount var25 = new org.jsecurity.authc.SimpleAccount((org.jsecurity.subject.PrincipalCollection)var6, (java.lang.Object)var11, var24);
    org.jsecurity.authc.pam.FirstSuccessfulAuthenticationStrategy var26 = new org.jsecurity.authc.pam.FirstSuccessfulAuthenticationStrategy();
    org.jsecurity.authz.UnauthorizedException var28 = new org.jsecurity.authz.UnauthorizedException("org.jsecurity.config.ConfigurationException: dd\uFFFD");
    java.lang.Throwable[] var29 = var28.getSuppressed();
    java.util.List var30 = org.jsecurity.util.CollectionUtils.asList((java.lang.Object[])var29);
    org.jsecurity.authc.UsernamePasswordToken var31 = new org.jsecurity.authc.UsernamePasswordToken();
    java.lang.String var32 = var31.getUsername();
    java.net.InetAddress var33 = var31.getInetAddress();
    org.jsecurity.authc.AuthenticationInfo var34 = var26.beforeAllAttempts((java.util.Collection)var30, (org.jsecurity.authc.AuthenticationToken)var31);
    org.jsecurity.realm.SimpleAccountRealm var36 = new org.jsecurity.realm.SimpleAccountRealm("hi!");
    java.lang.Class var37 = var36.getAuthenticationTokenClass();
    java.util.Collection var38 = org.jsecurity.util.CollectionUtils.emptyCollection(var37);
    org.jsecurity.authc.pam.AllSuccessfulModularAuthenticationStrategy var39 = new org.jsecurity.authc.pam.AllSuccessfulModularAuthenticationStrategy();
    char[] var41 = new char[] { };
    org.jsecurity.authc.UsernamePasswordToken var43 = new org.jsecurity.authc.UsernamePasswordToken("hi!", var41, true);
    org.jsecurity.authc.SimpleAccount var44 = new org.jsecurity.authc.SimpleAccount();
    var44.setCredentialsExpired(false);
    boolean var47 = var44.isLocked();
    org.jsecurity.authc.AuthenticationInfo var48 = var39.afterAllAttempts((org.jsecurity.authc.AuthenticationToken)var43, (org.jsecurity.authc.AuthenticationInfo)var44);
    org.jsecurity.authc.AuthenticationInfo var49 = var26.beforeAllAttempts(var38, (org.jsecurity.authc.AuthenticationToken)var43);
    boolean var50 = var0.isPermittedAll((org.jsecurity.subject.PrincipalCollection)var6, var38);
    org.jsecurity.realm.text.PropertiesRealm var51 = new org.jsecurity.realm.text.PropertiesRealm();
    java.lang.String var52 = var51.getUserDefinitions();
    org.jsecurity.codec.CodecException var55 = new org.jsecurity.codec.CodecException("dd\uFFFD");
    org.jsecurity.authc.ConcurrentAccessException var56 = new org.jsecurity.authc.ConcurrentAccessException("org.jsecurity.authz.UnauthorizedException: org.jsecurity.session.ExpiredSessionException: ", (java.lang.Throwable)var55);
    org.jsecurity.subject.SimplePrincipalCollection var58 = new org.jsecurity.subject.SimplePrincipalCollection((java.lang.Object)var55, "");
    java.io.InputStream var60 = org.jsecurity.util.ClassUtils.getResourceAsStream("");
    java.lang.Object[] var61 = new java.lang.Object[] { var60};
    java.util.List var62 = org.jsecurity.util.CollectionUtils.asList(var61);
    org.jsecurity.authc.pam.ModularRealmAuthenticator var63 = new org.jsecurity.authc.pam.ModularRealmAuthenticator(var62);
    var58.addAll((java.util.Collection)var62, "\u0000\u0000");
    java.io.InputStream var67 = org.jsecurity.util.ClassUtils.getResourceAsStream("");
    java.lang.Object[] var68 = new java.lang.Object[] { var67};
    java.util.List var69 = org.jsecurity.util.CollectionUtils.asList(var68);
    org.jsecurity.authc.pam.ModularRealmAuthenticator var70 = new org.jsecurity.authc.pam.ModularRealmAuthenticator(var69);
    var58.addAll((java.util.Collection)var69, "\u0000\u0000");
    var51.onLogout((org.jsecurity.subject.PrincipalCollection)var58);
    java.lang.String[] var76 = org.jsecurity.util.StringUtils.split("e02035fb-9560-4cf8-a9b2-0050cc0f1ad7", 'a');
    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      boolean[] var77 = var0.isPermitted((org.jsecurity.subject.PrincipalCollection)var58, var76);
      fail("Expected exception of type java.lang.IllegalStateException");
    } catch (java.lang.IllegalStateException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var10);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var11);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var13);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var14);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var15);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var23);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var24);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var29);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var30);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var32);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var33);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var34);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var37);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var38);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var41);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var47 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var48);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var49);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var50 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var52);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var60);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var61);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var62);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var67);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var68);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var69);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var76);

  }

  public void test207() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest2.test207");


    org.jsecurity.cache.HashtableCache var1 = new org.jsecurity.cache.HashtableCache("\u0000\u0000\u0000");
    org.jsecurity.session.mgt.SimpleSession var2 = new org.jsecurity.session.mgt.SimpleSession();
    var2.touch();
    org.jsecurity.authz.UnauthenticatedException var6 = new org.jsecurity.authz.UnauthenticatedException();
    org.jsecurity.config.UnresolveableReferenceException var7 = new org.jsecurity.config.UnresolveableReferenceException("", (java.lang.Throwable)var6);
    org.jsecurity.cache.CacheException var8 = new org.jsecurity.cache.CacheException("org.jsecurity.config.ConfigurationException: dd\uFFFD", (java.lang.Throwable)var6);
    java.lang.Object var9 = var2.removeAttribute((java.lang.Object)var8);
    org.jsecurity.mgt.DefaultSecurityManager var10 = new org.jsecurity.mgt.DefaultSecurityManager();
    org.jsecurity.authc.pam.AllSuccessfulModularAuthenticationStrategy var11 = new org.jsecurity.authc.pam.AllSuccessfulModularAuthenticationStrategy();
    org.jsecurity.authc.pam.AllSuccessfulModularAuthenticationStrategy var12 = new org.jsecurity.authc.pam.AllSuccessfulModularAuthenticationStrategy();
    char[] var14 = new char[] { };
    org.jsecurity.authc.UsernamePasswordToken var16 = new org.jsecurity.authc.UsernamePasswordToken("hi!", var14, true);
    org.jsecurity.authc.SimpleAccount var17 = new org.jsecurity.authc.SimpleAccount();
    var17.setCredentialsExpired(false);
    boolean var20 = var17.isLocked();
    org.jsecurity.authc.AuthenticationInfo var21 = var12.afterAllAttempts((org.jsecurity.authc.AuthenticationToken)var16, (org.jsecurity.authc.AuthenticationInfo)var17);
    char[] var25 = new char[] { '4', '#'};
    org.jsecurity.authc.UsernamePasswordToken var26 = new org.jsecurity.authc.UsernamePasswordToken("\u0000\u0000", var25);
    org.jsecurity.authc.SimpleAccount var27 = new org.jsecurity.authc.SimpleAccount();
    var27.setCredentialsExpired(false);
    var27.setCredentialsExpired(false);
    boolean var32 = var27.isCredentialsExpired();
    org.jsecurity.authc.AuthenticationInfo var33 = var12.afterAllAttempts((org.jsecurity.authc.AuthenticationToken)var26, (org.jsecurity.authc.AuthenticationInfo)var27);
    org.jsecurity.authz.UnauthenticatedException var37 = new org.jsecurity.authz.UnauthenticatedException();
    org.jsecurity.config.UnresolveableReferenceException var38 = new org.jsecurity.config.UnresolveableReferenceException("", (java.lang.Throwable)var37);
    org.jsecurity.cache.CacheException var39 = new org.jsecurity.cache.CacheException("org.jsecurity.config.ConfigurationException: dd\uFFFD", (java.lang.Throwable)var37);
    org.jsecurity.authc.SimpleAuthenticationInfo var41 = new org.jsecurity.authc.SimpleAuthenticationInfo((java.lang.Object)"org.jsecurity.config.ConfigurationException: dd\uFFFD", (java.lang.Object)var39, "a2b823b1e72eae2b727289df8a00a89df8a0bab6ad8a89c4c5c7a9b62a270000");
    org.jsecurity.subject.PrincipalCollection var42 = var41.getPrincipals();
    org.jsecurity.authc.AuthenticationInfo var43 = var11.afterAllAttempts((org.jsecurity.authc.AuthenticationToken)var26, (org.jsecurity.authc.AuthenticationInfo)var41);
    var10.setModularAuthenticationStrategy((org.jsecurity.authc.pam.ModularAuthenticationStrategy)var11);
    org.jsecurity.subject.RememberMeManager var45 = var10.getRememberMeManager();
    org.jsecurity.authc.pam.ModularRealmAuthenticator var46 = new org.jsecurity.authc.pam.ModularRealmAuthenticator();
    var10.setAuthenticator((org.jsecurity.authc.Authenticator)var46);
    var1.put((java.lang.Object)var2, (java.lang.Object)var46);
    java.lang.String var49 = var1.toString();
    org.jsecurity.mgt.DefaultSecurityManager var50 = new org.jsecurity.mgt.DefaultSecurityManager();
    org.jsecurity.authz.permission.WildcardPermissionResolver var51 = new org.jsecurity.authz.permission.WildcardPermissionResolver();
    var50.setPermissionResolver((org.jsecurity.authz.permission.PermissionResolver)var51);
    org.jsecurity.cache.CacheManager var53 = var50.getCacheManager();
    org.jsecurity.authc.Authenticator var54 = var50.getAuthenticator();
    var1.remove((java.lang.Object)var50);
    org.jsecurity.cache.HashtableCache var57 = new org.jsecurity.cache.HashtableCache("orgjsecurityauthcCredentialsException783ccd3148a842dd890fdf885a7baafAA==");
    int var58 = var57.size();
    org.jsecurity.session.UnknownSessionException var63 = new org.jsecurity.session.UnknownSessionException("dd\uFFFD", (java.io.Serializable)100.0f);
    org.jsecurity.subject.SubjectException var64 = new org.jsecurity.subject.SubjectException("dd\uFFFD", (java.lang.Throwable)var63);
    org.jsecurity.authc.AccountException var65 = new org.jsecurity.authc.AccountException("hi!", (java.lang.Throwable)var64);
    org.jsecurity.session.UnknownSessionException var66 = new org.jsecurity.session.UnknownSessionException((java.lang.Throwable)var64);
    org.jsecurity.codec.CodecException var67 = new org.jsecurity.codec.CodecException((java.lang.Throwable)var64);
    org.jsecurity.config.UnresolveableReferenceException var68 = new org.jsecurity.config.UnresolveableReferenceException((java.lang.Throwable)var64);
    char[] var72 = new char[] { ' ', ' '};
    org.jsecurity.authc.UsernamePasswordToken var73 = new org.jsecurity.authc.UsernamePasswordToken("hi!", var72);
    char[] var77 = new char[] { '4', '#'};
    org.jsecurity.authc.UsernamePasswordToken var78 = new org.jsecurity.authc.UsernamePasswordToken("\u0000\u0000", var77);
    var73.setPassword(var77);
    var57.put((java.lang.Object)var64, (java.lang.Object)var77);
    byte[] var81 = org.jsecurity.codec.CodecSupport.toBytes(var77);
    char[] var82 = org.jsecurity.codec.CodecSupport.toChars(var81);
    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      var50.setRememberMeDecryptionCipherKey(var81);
      fail("Expected exception of type java.lang.IllegalStateException");
    } catch (java.lang.IllegalStateException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var9);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var14);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var20 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var21);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var25);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var32 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var33);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var42);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var43);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var45);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var49 + "' != '" + "HashtableCache [\u0000\u0000\u0000]"+ "'", var49.equals("HashtableCache [\u0000\u0000\u0000]"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var53);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var54);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var58 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var72);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var77);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var81);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var82);

  }

  public void test208() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest2.test208");


    org.jsecurity.crypto.hash.Md2Hash var1 = org.jsecurity.crypto.hash.Md2Hash.fromBase64String("d3fa87cd-8796-41a3-ba2f-3a76bbfaab05");
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var1);

  }

  public void test209() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest2.test209");


    org.jsecurity.mgt.DefaultSecurityManager var0 = new org.jsecurity.mgt.DefaultSecurityManager();
    java.io.InputStream var2 = org.jsecurity.util.ClassUtils.getResourceAsStream("");
    java.lang.Object[] var3 = new java.lang.Object[] { var2};
    java.util.List var4 = org.jsecurity.util.CollectionUtils.asList(var3);
    org.jsecurity.authc.pam.ModularRealmAuthenticator var5 = new org.jsecurity.authc.pam.ModularRealmAuthenticator(var4);
    org.jsecurity.authc.pam.AllSuccessfulModularAuthenticationStrategy var6 = new org.jsecurity.authc.pam.AllSuccessfulModularAuthenticationStrategy();
    var5.setModularAuthenticationStrategy((org.jsecurity.authc.pam.ModularAuthenticationStrategy)var6);
    org.jsecurity.authz.SimpleAuthorizationInfo var8 = new org.jsecurity.authz.SimpleAuthorizationInfo();
    var8.addStringPermission("hi!");
    java.io.InputStream var12 = org.jsecurity.util.ClassUtils.getResourceAsStream("");
    java.lang.Object[] var13 = new java.lang.Object[] { var12};
    java.util.List var14 = org.jsecurity.util.CollectionUtils.asList(var13);
    var8.addRoles((java.util.Collection)var14);
    var5.setAuthenticationListeners((java.util.Collection)var14);
    var0.setSessionListeners((java.util.Collection)var14);
    java.util.Collection var18 = var0.getRealms();
    org.jsecurity.authc.pam.FirstSuccessfulAuthenticationStrategy var19 = new org.jsecurity.authc.pam.FirstSuccessfulAuthenticationStrategy();
    org.jsecurity.authz.UnauthorizedException var21 = new org.jsecurity.authz.UnauthorizedException("org.jsecurity.config.ConfigurationException: dd\uFFFD");
    java.lang.Throwable[] var22 = var21.getSuppressed();
    java.util.List var23 = org.jsecurity.util.CollectionUtils.asList((java.lang.Object[])var22);
    org.jsecurity.authc.UsernamePasswordToken var24 = new org.jsecurity.authc.UsernamePasswordToken();
    java.lang.String var25 = var24.getUsername();
    java.net.InetAddress var26 = var24.getInetAddress();
    org.jsecurity.authc.AuthenticationInfo var27 = var19.beforeAllAttempts((java.util.Collection)var23, (org.jsecurity.authc.AuthenticationToken)var24);
    org.jsecurity.realm.SimpleAccountRealm var29 = new org.jsecurity.realm.SimpleAccountRealm("hi!");
    java.lang.Class var30 = var29.getAuthenticationTokenClass();
    java.util.Collection var31 = org.jsecurity.util.CollectionUtils.emptyCollection(var30);
    org.jsecurity.authc.pam.AllSuccessfulModularAuthenticationStrategy var32 = new org.jsecurity.authc.pam.AllSuccessfulModularAuthenticationStrategy();
    char[] var34 = new char[] { };
    org.jsecurity.authc.UsernamePasswordToken var36 = new org.jsecurity.authc.UsernamePasswordToken("hi!", var34, true);
    org.jsecurity.authc.SimpleAccount var37 = new org.jsecurity.authc.SimpleAccount();
    var37.setCredentialsExpired(false);
    boolean var40 = var37.isLocked();
    org.jsecurity.authc.AuthenticationInfo var41 = var32.afterAllAttempts((org.jsecurity.authc.AuthenticationToken)var36, (org.jsecurity.authc.AuthenticationInfo)var37);
    org.jsecurity.authc.AuthenticationInfo var42 = var19.beforeAllAttempts(var31, (org.jsecurity.authc.AuthenticationToken)var36);
    var0.setAuthenticationListeners(var31);
    org.jsecurity.authz.Authorizer var44 = var0.getAuthorizer();
    org.jsecurity.session.mgt.SimpleSession var47 = new org.jsecurity.session.mgt.SimpleSession();
    var47.setTimeout((-1L));
    org.jsecurity.session.mgt.SimpleSession var50 = new org.jsecurity.session.mgt.SimpleSession();
    java.util.Date var51 = var50.getLastAccessTime();
    var47.setLastAccessTime(var51);
    java.net.InetAddress var53 = var47.getHostAddress();
    org.jsecurity.authc.UsernamePasswordToken var54 = new org.jsecurity.authc.UsernamePasswordToken("10f5b491-38ac-4c02-8085-950abb026a06", "NfxhYN7ItBfRAmDBmprtU73ghfEEPpcDJrHPkZ06wiY=", var53);
    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      org.jsecurity.subject.Subject var55 = var0.login((org.jsecurity.authc.AuthenticationToken)var54);
      fail("Expected exception of type org.jsecurity.authc.AuthenticationException");
    } catch (org.jsecurity.authc.AuthenticationException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var2);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var3);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var4);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var12);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var13);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var14);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var18);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var22);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var23);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var25);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var26);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var27);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var30);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var31);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var34);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var40 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var41);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var42);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var44);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var51);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var53);

  }

  public void test210() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest2.test210");


    org.jsecurity.session.UnknownSessionException var4 = new org.jsecurity.session.UnknownSessionException("dd\uFFFD", (java.io.Serializable)100.0f);
    org.jsecurity.subject.SubjectException var5 = new org.jsecurity.subject.SubjectException("dd\uFFFD", (java.lang.Throwable)var4);
    org.jsecurity.io.SerializationException var6 = new org.jsecurity.io.SerializationException("", (java.lang.Throwable)var5);
    java.lang.Throwable[] var7 = var5.getSuppressed();
    java.lang.Throwable[] var8 = var5.getSuppressed();
    org.jsecurity.authz.SimpleAuthorizationInfo var11 = new org.jsecurity.authz.SimpleAuthorizationInfo();
    var11.addRole("a2b823b1e72eae2b727289df8a00a89df8a0bab6ad8a89c4c5c7a9b62a270000");
    org.jsecurity.session.UnknownSessionException var18 = new org.jsecurity.session.UnknownSessionException("dd\uFFFD", (java.io.Serializable)100.0f);
    org.jsecurity.subject.SubjectException var19 = new org.jsecurity.subject.SubjectException("dd\uFFFD", (java.lang.Throwable)var18);
    org.jsecurity.io.SerializationException var20 = new org.jsecurity.io.SerializationException("", (java.lang.Throwable)var19);
    java.lang.Throwable[] var21 = var19.getSuppressed();
    java.util.Set var22 = org.jsecurity.util.CollectionUtils.asSet((java.lang.Object[])var21);
    var11.addRoles((java.util.Collection)var22);
    java.io.InputStream var25 = org.jsecurity.util.ClassUtils.getResourceAsStream("");
    java.lang.Object[] var26 = new java.lang.Object[] { var25};
    java.util.List var27 = org.jsecurity.util.CollectionUtils.asList(var26);
    org.jsecurity.authc.pam.ModularRealmAuthenticator var28 = new org.jsecurity.authc.pam.ModularRealmAuthenticator(var27);
    org.jsecurity.subject.SimplePrincipalCollection var30 = new org.jsecurity.subject.SimplePrincipalCollection((java.util.Collection)var27, "org.jsecurity.authz.UnauthorizedException: org.jsecurity.session.ExpiredSessionException: ");
    org.jsecurity.session.UnknownSessionException var35 = new org.jsecurity.session.UnknownSessionException("dd\uFFFD", (java.io.Serializable)100.0f);
    org.jsecurity.session.SessionException var37 = new org.jsecurity.session.SessionException("dd\uFFFD", (java.lang.Throwable)var35, (java.io.Serializable)0);
    org.jsecurity.session.SessionException var38 = new org.jsecurity.session.SessionException("dd\uFFFD", (java.lang.Throwable)var35);
    var30.add((java.lang.Object)var38, "org.jsecurity.config.ConfigurationException: dd\uFFFD");
    java.util.Set var41 = var30.asSet();
    org.jsecurity.authz.SimpleAuthorizingAccount var42 = new org.jsecurity.authz.SimpleAuthorizingAccount((java.lang.Object)var8, (java.lang.Object)"\u0000\u0000\u0000", "\u0000\u0000\u0000", var22, var41);
    org.jsecurity.session.UnknownSessionException var47 = new org.jsecurity.session.UnknownSessionException("dd\uFFFD", (java.io.Serializable)100.0f);
    org.jsecurity.subject.SubjectException var48 = new org.jsecurity.subject.SubjectException("dd\uFFFD", (java.lang.Throwable)var47);
    org.jsecurity.io.SerializationException var49 = new org.jsecurity.io.SerializationException("", (java.lang.Throwable)var48);
    java.lang.Throwable[] var50 = var48.getSuppressed();
    java.lang.Throwable[] var51 = var48.getSuppressed();
    java.util.Set var52 = org.jsecurity.util.CollectionUtils.asSet((java.lang.Object[])var51);
    var42.setStringPermissions(var52);
    org.jsecurity.codec.CodecException var56 = new org.jsecurity.codec.CodecException("dd\uFFFD");
    org.jsecurity.authc.ConcurrentAccessException var57 = new org.jsecurity.authc.ConcurrentAccessException("org.jsecurity.authz.UnauthorizedException: org.jsecurity.session.ExpiredSessionException: ", (java.lang.Throwable)var56);
    org.jsecurity.subject.SimplePrincipalCollection var59 = new org.jsecurity.subject.SimplePrincipalCollection((java.lang.Object)var56, "");
    java.io.InputStream var61 = org.jsecurity.util.ClassUtils.getResourceAsStream("");
    java.lang.Object[] var62 = new java.lang.Object[] { var61};
    java.util.List var63 = org.jsecurity.util.CollectionUtils.asList(var62);
    org.jsecurity.authc.pam.ModularRealmAuthenticator var64 = new org.jsecurity.authc.pam.ModularRealmAuthenticator(var63);
    org.jsecurity.authc.pam.AllSuccessfulModularAuthenticationStrategy var65 = new org.jsecurity.authc.pam.AllSuccessfulModularAuthenticationStrategy();
    var64.setModularAuthenticationStrategy((org.jsecurity.authc.pam.ModularAuthenticationStrategy)var65);
    org.jsecurity.authz.SimpleAuthorizationInfo var67 = new org.jsecurity.authz.SimpleAuthorizationInfo();
    var67.addStringPermission("hi!");
    java.io.InputStream var71 = org.jsecurity.util.ClassUtils.getResourceAsStream("");
    java.lang.Object[] var72 = new java.lang.Object[] { var71};
    java.util.List var73 = org.jsecurity.util.CollectionUtils.asList(var72);
    var67.addRoles((java.util.Collection)var73);
    var64.setAuthenticationListeners((java.util.Collection)var73);
    org.jsecurity.realm.activedirectory.ActiveDirectoryRealm var76 = new org.jsecurity.realm.activedirectory.ActiveDirectoryRealm();
    var76.setPrincipalSuffix("");
    var64.setRealm((org.jsecurity.realm.Realm)var76);
    org.jsecurity.authc.pam.FirstSuccessfulAuthenticationStrategy var80 = new org.jsecurity.authc.pam.FirstSuccessfulAuthenticationStrategy();
    org.jsecurity.authz.UnauthorizedException var82 = new org.jsecurity.authz.UnauthorizedException("org.jsecurity.config.ConfigurationException: dd\uFFFD");
    java.lang.Throwable[] var83 = var82.getSuppressed();
    java.util.List var84 = org.jsecurity.util.CollectionUtils.asList((java.lang.Object[])var83);
    org.jsecurity.authc.UsernamePasswordToken var85 = new org.jsecurity.authc.UsernamePasswordToken();
    java.lang.String var86 = var85.getUsername();
    java.net.InetAddress var87 = var85.getInetAddress();
    org.jsecurity.authc.AuthenticationInfo var88 = var80.beforeAllAttempts((java.util.Collection)var84, (org.jsecurity.authc.AuthenticationToken)var85);
    var64.setModularAuthenticationStrategy((org.jsecurity.authc.pam.ModularAuthenticationStrategy)var80);
    org.jsecurity.authc.SimpleAccount var90 = new org.jsecurity.authc.SimpleAccount((org.jsecurity.subject.PrincipalCollection)var59, (java.lang.Object)var64);
    java.util.Collection var91 = var90.getObjectPermissions();
    java.util.Collection var92 = var90.getObjectPermissions();
    java.util.Set var94 = org.jsecurity.util.PermissionUtils.toPermissionStrings("org.jsecurity.config.ConfigurationException: dd\uFFFD");
    var90.setRoles(var94);
    var42.setObjectPermissions(var94);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var7);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var8);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var21);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var22);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var25);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var26);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var27);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var41);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var50);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var51);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var52);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var61);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var62);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var63);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var71);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var72);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var73);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var83);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var84);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var86);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var87);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var88);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var91);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var92);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var94);

  }

  public void test211() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest2.test211");


    org.jsecurity.realm.activedirectory.ActiveDirectoryRealm var0 = new org.jsecurity.realm.activedirectory.ActiveDirectoryRealm();
    org.jsecurity.authc.credential.Sha256CredentialsMatcher var1 = new org.jsecurity.authc.credential.Sha256CredentialsMatcher();
    var0.setCredentialsMatcher((org.jsecurity.authc.credential.CredentialsMatcher)var1);
    java.lang.String var3 = var0.getAuthorizationCacheName();
    var0.setUrl("hi!");
    org.jsecurity.realm.ldap.DefaultLdapContextFactory var6 = new org.jsecurity.realm.ldap.DefaultLdapContextFactory();
    var0.setLdapContextFactory((org.jsecurity.realm.ldap.LdapContextFactory)var6);
    org.jsecurity.config.ReflectionBuilder var8 = new org.jsecurity.config.ReflectionBuilder();
    org.jsecurity.io.IniResource var9 = new org.jsecurity.io.IniResource();
    var9.setCharsetName("org.jsecurity.authz.UnauthorizedException: org.jsecurity.session.ExpiredSessionException: ");
    java.util.Map var12 = var9.getSections();
    java.util.Map var13 = var8.buildObjects(var12);
    org.jsecurity.config.ReflectionBuilder var14 = new org.jsecurity.config.ReflectionBuilder();
    org.jsecurity.io.IniResource var15 = new org.jsecurity.io.IniResource();
    var15.setCharsetName("org.jsecurity.authz.UnauthorizedException: org.jsecurity.session.ExpiredSessionException: ");
    java.util.Map var18 = var15.getSections();
    java.util.Map var19 = var14.buildObjects(var18);
    java.util.Map var20 = var8.buildObjects(var19);
    java.util.Map var21 = var8.getObjects();
    var6.setAdditionalEnvironment(var21);
    org.jsecurity.config.ReflectionBuilder var23 = new org.jsecurity.config.ReflectionBuilder();
    org.jsecurity.io.IniResource var24 = new org.jsecurity.io.IniResource();
    java.util.Map var25 = var24.getSections();
    var23.setObjects(var25);
    org.jsecurity.realm.activedirectory.ActiveDirectoryRealm var27 = new org.jsecurity.realm.activedirectory.ActiveDirectoryRealm();
    var27.init();
    var27.init();
    org.jsecurity.config.ReflectionBuilder var30 = new org.jsecurity.config.ReflectionBuilder();
    org.jsecurity.config.ReflectionBuilder var31 = new org.jsecurity.config.ReflectionBuilder();
    org.jsecurity.io.IniResource var32 = new org.jsecurity.io.IniResource();
    var32.setCharsetName("org.jsecurity.authz.UnauthorizedException: org.jsecurity.session.ExpiredSessionException: ");
    java.util.Map var35 = var32.getSections();
    java.util.Map var36 = var31.buildObjects(var35);
    org.jsecurity.config.ReflectionBuilder var37 = new org.jsecurity.config.ReflectionBuilder();
    org.jsecurity.io.IniResource var38 = new org.jsecurity.io.IniResource();
    var38.setCharsetName("org.jsecurity.authz.UnauthorizedException: org.jsecurity.session.ExpiredSessionException: ");
    java.util.Map var41 = var38.getSections();
    java.util.Map var42 = var37.buildObjects(var41);
    java.util.Map var43 = var31.buildObjects(var42);
    java.util.Map var44 = var30.buildObjects(var43);
    var27.setGroupRolesMap(var44);
    var23.setObjects(var44);
    org.jsecurity.config.ReflectionBuilder var47 = new org.jsecurity.config.ReflectionBuilder(var44);
    var6.setAdditionalEnvironment(var44);
    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      javax.naming.ldap.LdapContext var51 = var6.getLdapContext("guest = guest,guest\npresidentskroob = 12345,president\ndarkhelmet = ludicrousspeed,darklord,schwartz\nroot = secret,root\nlonestarr = vespa,goodguy,schwartz\n", "org.jsecurity.realm.SimpleAccountRealm-284-authorization");
      fail("Expected exception of type java.lang.IllegalStateException");
    } catch (java.lang.IllegalStateException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var3);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var12);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var13);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var18);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var19);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var20);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var21);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var25);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var35);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var36);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var41);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var42);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var43);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var44);

  }

  public void test212() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest2.test212");


    org.jsecurity.realm.activedirectory.ActiveDirectoryRealm var0 = new org.jsecurity.realm.activedirectory.ActiveDirectoryRealm();
    org.jsecurity.authc.credential.Sha256CredentialsMatcher var1 = new org.jsecurity.authc.credential.Sha256CredentialsMatcher();
    var0.setCredentialsMatcher((org.jsecurity.authc.credential.CredentialsMatcher)var1);
    java.lang.String var3 = var0.getAuthorizationCacheName();
    var0.setPrincipalSuffix("org.jsecurity.config.ConfigurationException: dd\uFFFD");
    org.jsecurity.realm.text.TextConfigurationRealm var6 = new org.jsecurity.realm.text.TextConfigurationRealm();
    java.io.InputStream var8 = org.jsecurity.util.ClassUtils.getResourceAsStream("");
    java.lang.Object[] var9 = new java.lang.Object[] { var8};
    java.util.List var10 = org.jsecurity.util.CollectionUtils.asList(var9);
    org.jsecurity.authc.pam.ModularRealmAuthenticator var11 = new org.jsecurity.authc.pam.ModularRealmAuthenticator(var10);
    org.jsecurity.subject.SimplePrincipalCollection var13 = new org.jsecurity.subject.SimplePrincipalCollection((java.util.Collection)var10, "org.jsecurity.authz.UnauthorizedException: org.jsecurity.session.ExpiredSessionException: ");
    org.jsecurity.session.UnknownSessionException var18 = new org.jsecurity.session.UnknownSessionException("dd\uFFFD", (java.io.Serializable)100.0f);
    org.jsecurity.session.SessionException var20 = new org.jsecurity.session.SessionException("dd\uFFFD", (java.lang.Throwable)var18, (java.io.Serializable)0);
    org.jsecurity.session.SessionException var21 = new org.jsecurity.session.SessionException("dd\uFFFD", (java.lang.Throwable)var18);
    var13.add((java.lang.Object)var21, "org.jsecurity.config.ConfigurationException: dd\uFFFD");
    var6.onLogout((org.jsecurity.subject.PrincipalCollection)var13);
    var0.onLogout((org.jsecurity.subject.PrincipalCollection)var13);
    org.jsecurity.realm.text.TextConfigurationRealm var26 = new org.jsecurity.realm.text.TextConfigurationRealm();
    java.io.InputStream var28 = org.jsecurity.util.ClassUtils.getResourceAsStream("");
    java.lang.Object[] var29 = new java.lang.Object[] { var28};
    java.util.List var30 = org.jsecurity.util.CollectionUtils.asList(var29);
    org.jsecurity.authc.pam.ModularRealmAuthenticator var31 = new org.jsecurity.authc.pam.ModularRealmAuthenticator(var30);
    org.jsecurity.subject.SimplePrincipalCollection var33 = new org.jsecurity.subject.SimplePrincipalCollection((java.util.Collection)var30, "org.jsecurity.authz.UnauthorizedException: org.jsecurity.session.ExpiredSessionException: ");
    org.jsecurity.session.UnknownSessionException var38 = new org.jsecurity.session.UnknownSessionException("dd\uFFFD", (java.io.Serializable)100.0f);
    org.jsecurity.session.SessionException var40 = new org.jsecurity.session.SessionException("dd\uFFFD", (java.lang.Throwable)var38, (java.io.Serializable)0);
    org.jsecurity.session.SessionException var41 = new org.jsecurity.session.SessionException("dd\uFFFD", (java.lang.Throwable)var38);
    var33.add((java.lang.Object)var41, "org.jsecurity.config.ConfigurationException: dd\uFFFD");
    var26.onLogout((org.jsecurity.subject.PrincipalCollection)var33);
    java.util.Set var46 = org.jsecurity.util.PermissionUtils.toPermissionStrings("org.jsecurity.config.ConfigurationException: dd\uFFFD");
    org.jsecurity.authz.SimpleAuthorizationInfo var47 = new org.jsecurity.authz.SimpleAuthorizationInfo(var46);
    org.jsecurity.authz.SimpleAuthorizingAccount var48 = new org.jsecurity.authz.SimpleAuthorizingAccount((org.jsecurity.subject.PrincipalCollection)var33, (java.lang.Object)var46);
    org.jsecurity.authz.SimpleAuthorizationInfo var49 = new org.jsecurity.authz.SimpleAuthorizationInfo();
    var49.addRole("a2b823b1e72eae2b727289df8a00a89df8a0bab6ad8a89c4c5c7a9b62a270000");
    org.jsecurity.session.UnknownSessionException var56 = new org.jsecurity.session.UnknownSessionException("dd\uFFFD", (java.io.Serializable)100.0f);
    org.jsecurity.subject.SubjectException var57 = new org.jsecurity.subject.SubjectException("dd\uFFFD", (java.lang.Throwable)var56);
    org.jsecurity.io.SerializationException var58 = new org.jsecurity.io.SerializationException("", (java.lang.Throwable)var57);
    java.lang.Throwable[] var59 = var57.getSuppressed();
    java.util.Set var60 = org.jsecurity.util.CollectionUtils.asSet((java.lang.Object[])var59);
    var49.addRoles((java.util.Collection)var60);
    var48.checkPermissions((java.util.Collection)var60);
    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      var13.addAll((java.util.Collection)var60, "\u0000\u0000\u0000");
      fail("Expected exception of type java.lang.IllegalArgumentException");
    } catch (java.lang.IllegalArgumentException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var3);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var8);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var9);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var10);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var28);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var29);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var30);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var46);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var59);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var60);

  }

  public void test213() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest2.test213");


    org.jsecurity.authc.pam.UnsupportedTokenException var0 = new org.jsecurity.authc.pam.UnsupportedTokenException();
    org.jsecurity.authc.UnknownAccountException var1 = new org.jsecurity.authc.UnknownAccountException((java.lang.Throwable)var0);
    org.jsecurity.subject.InvalidSubjectException var2 = new org.jsecurity.subject.InvalidSubjectException((java.lang.Throwable)var0);
    org.jsecurity.cache.CacheException var3 = new org.jsecurity.cache.CacheException((java.lang.Throwable)var2);

  }

  public void test214() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest2.test214");


    org.jsecurity.realm.activedirectory.ActiveDirectoryRealm var0 = new org.jsecurity.realm.activedirectory.ActiveDirectoryRealm();
    org.jsecurity.authc.credential.Sha256CredentialsMatcher var1 = new org.jsecurity.authc.credential.Sha256CredentialsMatcher();
    var0.setCredentialsMatcher((org.jsecurity.authc.credential.CredentialsMatcher)var1);
    org.jsecurity.realm.activedirectory.ActiveDirectoryRealm var3 = new org.jsecurity.realm.activedirectory.ActiveDirectoryRealm();
    org.jsecurity.authc.credential.Sha256CredentialsMatcher var4 = new org.jsecurity.authc.credential.Sha256CredentialsMatcher();
    var3.setCredentialsMatcher((org.jsecurity.authc.credential.CredentialsMatcher)var4);
    java.lang.String var6 = var3.getAuthorizationCacheName();
    var3.setUrl("hi!");
    org.jsecurity.realm.ldap.DefaultLdapContextFactory var9 = new org.jsecurity.realm.ldap.DefaultLdapContextFactory();
    var3.setLdapContextFactory((org.jsecurity.realm.ldap.LdapContextFactory)var9);
    var9.setAuthentication("org.jsecurity.authz.UnauthorizedException: org.jsecurity.session.ExpiredSessionException: ");
    var0.setLdapContextFactory((org.jsecurity.realm.ldap.LdapContextFactory)var9);
    var9.setReferral("a2b823b1e72eae2b727289df8a00a89df8a0bab6ad8a89c4c5c7a9b62a270000");
    var9.setUrl("\u0000\u0000");
    var9.setSystemUsername("2e460aa1-7db8-4a99-ad7a-a5b2ab41638e");
    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      javax.naming.ldap.LdapContext var20 = var9.getSystemLdapContext();
      fail("Expected exception of type java.lang.IllegalStateException");
    } catch (java.lang.IllegalStateException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var6);

  }

  public void test215() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest2.test215");


    org.jsecurity.realm.SimpleAccountRealm var1 = new org.jsecurity.realm.SimpleAccountRealm("6b66fcdb76f57bbd9e69ed9bef6ef6f3d75ff1ad346bcf5d7fc6b46da6fa69df1af3d73873973b6bd6fad9adbbd34d34");

  }

  public void test216() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest2.test216");


    org.jsecurity.crypto.hash.Md2Hash var1 = org.jsecurity.crypto.hash.Md2Hash.fromBase64String("a2b823b1e72eae2b727289df8a00a89df8a0bab6ad8a89c4c5c7a9b62a270000");
    org.jsecurity.authc.credential.Md2CredentialsMatcher var2 = new org.jsecurity.authc.credential.Md2CredentialsMatcher();
    org.jsecurity.authz.SimpleAuthorizingAccount var4 = new org.jsecurity.authz.SimpleAuthorizingAccount((java.lang.Object)"a2b823b1e72eae2b727289df8a00a89df8a0bab6ad8a89c4c5c7a9b62a270000", (java.lang.Object)var2, "");
    org.jsecurity.authz.SimpleAuthorizationInfo var5 = new org.jsecurity.authz.SimpleAuthorizationInfo();
    java.util.Set var6 = var5.getStringPermissions();
    org.jsecurity.authz.SimpleAuthorizationInfo var8 = new org.jsecurity.authz.SimpleAuthorizationInfo();
    org.jsecurity.session.UnknownSessionException var13 = new org.jsecurity.session.UnknownSessionException("dd\uFFFD", (java.io.Serializable)100.0f);
    org.jsecurity.subject.SubjectException var14 = new org.jsecurity.subject.SubjectException("dd\uFFFD", (java.lang.Throwable)var13);
    org.jsecurity.io.SerializationException var15 = new org.jsecurity.io.SerializationException("", (java.lang.Throwable)var14);
    java.lang.Throwable[] var16 = var14.getSuppressed();
    java.util.Set var17 = org.jsecurity.util.CollectionUtils.asSet((java.lang.Object[])var16);
    var8.setStringPermissions(var17);
    java.util.Set var19 = var8.getRoles();
    org.jsecurity.authz.SimpleAuthorizationInfo var20 = new org.jsecurity.authz.SimpleAuthorizationInfo();
    var20.addRole("a2b823b1e72eae2b727289df8a00a89df8a0bab6ad8a89c4c5c7a9b62a270000");
    org.jsecurity.session.UnknownSessionException var27 = new org.jsecurity.session.UnknownSessionException("dd\uFFFD", (java.io.Serializable)100.0f);
    org.jsecurity.subject.SubjectException var28 = new org.jsecurity.subject.SubjectException("dd\uFFFD", (java.lang.Throwable)var27);
    org.jsecurity.io.SerializationException var29 = new org.jsecurity.io.SerializationException("", (java.lang.Throwable)var28);
    java.lang.Throwable[] var30 = var28.getSuppressed();
    java.util.Set var31 = org.jsecurity.util.CollectionUtils.asSet((java.lang.Object[])var30);
    var20.addRoles((java.util.Collection)var31);
    var8.setRoles(var31);
    org.jsecurity.authz.SimpleRole var34 = new org.jsecurity.authz.SimpleRole("org.jsecurity.authz.UnauthorizedException: org.jsecurity.session.ExpiredSessionException: ", var31);
    var5.addStringPermissions((java.util.Collection)var31);
    boolean var36 = var4.isPermittedAll((java.util.Collection)var31);
    boolean var37 = var4.isCredentialsExpired();
    org.jsecurity.session.UnknownSessionException var42 = new org.jsecurity.session.UnknownSessionException("dd\uFFFD", (java.io.Serializable)100.0f);
    org.jsecurity.subject.SubjectException var43 = new org.jsecurity.subject.SubjectException("dd\uFFFD", (java.lang.Throwable)var42);
    org.jsecurity.io.SerializationException var44 = new org.jsecurity.io.SerializationException("", (java.lang.Throwable)var43);
    java.lang.Throwable[] var45 = var43.getSuppressed();
    java.lang.Throwable[] var46 = var43.getSuppressed();
    org.jsecurity.authz.SimpleAuthorizationInfo var49 = new org.jsecurity.authz.SimpleAuthorizationInfo();
    var49.addRole("a2b823b1e72eae2b727289df8a00a89df8a0bab6ad8a89c4c5c7a9b62a270000");
    org.jsecurity.session.UnknownSessionException var56 = new org.jsecurity.session.UnknownSessionException("dd\uFFFD", (java.io.Serializable)100.0f);
    org.jsecurity.subject.SubjectException var57 = new org.jsecurity.subject.SubjectException("dd\uFFFD", (java.lang.Throwable)var56);
    org.jsecurity.io.SerializationException var58 = new org.jsecurity.io.SerializationException("", (java.lang.Throwable)var57);
    java.lang.Throwable[] var59 = var57.getSuppressed();
    java.util.Set var60 = org.jsecurity.util.CollectionUtils.asSet((java.lang.Object[])var59);
    var49.addRoles((java.util.Collection)var60);
    java.io.InputStream var63 = org.jsecurity.util.ClassUtils.getResourceAsStream("");
    java.lang.Object[] var64 = new java.lang.Object[] { var63};
    java.util.List var65 = org.jsecurity.util.CollectionUtils.asList(var64);
    org.jsecurity.authc.pam.ModularRealmAuthenticator var66 = new org.jsecurity.authc.pam.ModularRealmAuthenticator(var65);
    org.jsecurity.subject.SimplePrincipalCollection var68 = new org.jsecurity.subject.SimplePrincipalCollection((java.util.Collection)var65, "org.jsecurity.authz.UnauthorizedException: org.jsecurity.session.ExpiredSessionException: ");
    org.jsecurity.session.UnknownSessionException var73 = new org.jsecurity.session.UnknownSessionException("dd\uFFFD", (java.io.Serializable)100.0f);
    org.jsecurity.session.SessionException var75 = new org.jsecurity.session.SessionException("dd\uFFFD", (java.lang.Throwable)var73, (java.io.Serializable)0);
    org.jsecurity.session.SessionException var76 = new org.jsecurity.session.SessionException("dd\uFFFD", (java.lang.Throwable)var73);
    var68.add((java.lang.Object)var76, "org.jsecurity.config.ConfigurationException: dd\uFFFD");
    java.util.Set var79 = var68.asSet();
    org.jsecurity.authz.SimpleAuthorizingAccount var80 = new org.jsecurity.authz.SimpleAuthorizingAccount((java.lang.Object)var46, (java.lang.Object)"\u0000\u0000\u0000", "\u0000\u0000\u0000", var60, var79);
    org.jsecurity.authz.SimpleRole var82 = var80.getRole("\u0000\u0000\u0000");
    java.util.Set var83 = var80.getPermissions();
    var4.addAll((java.util.Collection)var83);
    java.util.Collection var85 = var4.getStringPermissions();
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var1);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var6);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var16);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var17);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var19);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var30);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var31);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var36 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var37 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var45);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var46);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var59);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var60);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var63);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var64);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var65);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var79);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var82);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var83);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var85);

  }

  public void test217() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest2.test217");


    org.jsecurity.authz.SimpleAuthorizationInfo var2 = new org.jsecurity.authz.SimpleAuthorizationInfo();
    org.jsecurity.session.UnknownSessionException var7 = new org.jsecurity.session.UnknownSessionException("dd\uFFFD", (java.io.Serializable)100.0f);
    org.jsecurity.subject.SubjectException var8 = new org.jsecurity.subject.SubjectException("dd\uFFFD", (java.lang.Throwable)var7);
    org.jsecurity.io.SerializationException var9 = new org.jsecurity.io.SerializationException("", (java.lang.Throwable)var8);
    java.lang.Throwable[] var10 = var8.getSuppressed();
    java.util.Set var11 = org.jsecurity.util.CollectionUtils.asSet((java.lang.Object[])var10);
    var2.setStringPermissions(var11);
    org.jsecurity.authz.SimpleRole var13 = new org.jsecurity.authz.SimpleRole("\u0000\u0000", var11);
    org.jsecurity.crypto.hash.Md5Hash var15 = new org.jsecurity.crypto.hash.Md5Hash((java.lang.Object)"1bda1aac-168a-4284-8541-abc425cc1ca7", (java.lang.Object)"\u0000\u0000", 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var10);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var11);

  }

  public void test218() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest2.test218");


    org.jsecurity.realm.text.TextConfigurationRealm var1 = new org.jsecurity.realm.text.TextConfigurationRealm();
    java.io.InputStream var3 = org.jsecurity.util.ClassUtils.getResourceAsStream("");
    java.lang.Object[] var4 = new java.lang.Object[] { var3};
    java.util.List var5 = org.jsecurity.util.CollectionUtils.asList(var4);
    org.jsecurity.authc.pam.ModularRealmAuthenticator var6 = new org.jsecurity.authc.pam.ModularRealmAuthenticator(var5);
    org.jsecurity.subject.SimplePrincipalCollection var8 = new org.jsecurity.subject.SimplePrincipalCollection((java.util.Collection)var5, "org.jsecurity.authz.UnauthorizedException: org.jsecurity.session.ExpiredSessionException: ");
    org.jsecurity.session.UnknownSessionException var13 = new org.jsecurity.session.UnknownSessionException("dd\uFFFD", (java.io.Serializable)100.0f);
    org.jsecurity.session.SessionException var15 = new org.jsecurity.session.SessionException("dd\uFFFD", (java.lang.Throwable)var13, (java.io.Serializable)0);
    org.jsecurity.session.SessionException var16 = new org.jsecurity.session.SessionException("dd\uFFFD", (java.lang.Throwable)var13);
    var8.add((java.lang.Object)var16, "org.jsecurity.config.ConfigurationException: dd\uFFFD");
    var1.onLogout((org.jsecurity.subject.PrincipalCollection)var8);
    java.util.Set var21 = org.jsecurity.util.PermissionUtils.toPermissionStrings("org.jsecurity.config.ConfigurationException: dd\uFFFD");
    org.jsecurity.authz.SimpleAuthorizationInfo var22 = new org.jsecurity.authz.SimpleAuthorizationInfo(var21);
    org.jsecurity.authz.SimpleAuthorizingAccount var23 = new org.jsecurity.authz.SimpleAuthorizingAccount((org.jsecurity.subject.PrincipalCollection)var8, (java.lang.Object)var21);
    org.jsecurity.session.StoppedSessionException var24 = new org.jsecurity.session.StoppedSessionException("org.jsecurity.realm.SimpleAccountRealm-55-authorization", (java.io.Serializable)var8);
    byte[] var30 = new byte[] { (byte)100, (byte)100, (byte)(-1)};
    java.lang.String var31 = org.jsecurity.codec.CodecSupport.toString(var30);
    byte[] var32 = org.jsecurity.codec.Base64.encode(var30);
    char[] var33 = org.jsecurity.codec.CodecSupport.toChars(var32);
    org.jsecurity.authc.UsernamePasswordToken var35 = new org.jsecurity.authc.UsernamePasswordToken("org.jsecurity.realm.SimpleAccountRealm-55-authorization", var33, false);
    char[] var36 = var35.getPassword();
    org.jsecurity.session.mgt.SimpleSession var38 = new org.jsecurity.session.mgt.SimpleSession();
    var38.setTimeout((-1L));
    org.jsecurity.session.mgt.SimpleSession var41 = new org.jsecurity.session.mgt.SimpleSession();
    java.util.Date var42 = var41.getLastAccessTime();
    var38.setLastAccessTime(var42);
    java.net.InetAddress var44 = var38.getHostAddress();
    org.jsecurity.authc.UsernamePasswordToken var45 = new org.jsecurity.authc.UsernamePasswordToken("classpath:org/jsecurity/cache/ehcache/ehcache.xml", var36, false, var44);
    boolean var46 = var8.equals((java.lang.Object)var44);
    org.jsecurity.subject.SimplePrincipalCollection var47 = new org.jsecurity.subject.SimplePrincipalCollection((org.jsecurity.subject.PrincipalCollection)var8);
    org.jsecurity.realm.text.TextConfigurationRealm var48 = new org.jsecurity.realm.text.TextConfigurationRealm();
    org.jsecurity.realm.text.TextConfigurationRealm var49 = new org.jsecurity.realm.text.TextConfigurationRealm();
    java.io.InputStream var51 = org.jsecurity.util.ClassUtils.getResourceAsStream("");
    java.lang.Object[] var52 = new java.lang.Object[] { var51};
    java.util.List var53 = org.jsecurity.util.CollectionUtils.asList(var52);
    org.jsecurity.authc.pam.ModularRealmAuthenticator var54 = new org.jsecurity.authc.pam.ModularRealmAuthenticator(var53);
    org.jsecurity.subject.SimplePrincipalCollection var56 = new org.jsecurity.subject.SimplePrincipalCollection((java.util.Collection)var53, "org.jsecurity.authz.UnauthorizedException: org.jsecurity.session.ExpiredSessionException: ");
    org.jsecurity.session.UnknownSessionException var61 = new org.jsecurity.session.UnknownSessionException("dd\uFFFD", (java.io.Serializable)100.0f);
    org.jsecurity.session.SessionException var63 = new org.jsecurity.session.SessionException("dd\uFFFD", (java.lang.Throwable)var61, (java.io.Serializable)0);
    org.jsecurity.session.SessionException var64 = new org.jsecurity.session.SessionException("dd\uFFFD", (java.lang.Throwable)var61);
    var56.add((java.lang.Object)var64, "org.jsecurity.config.ConfigurationException: dd\uFFFD");
    var49.onLogout((org.jsecurity.subject.PrincipalCollection)var56);
    java.util.Collection var69 = var56.fromRealm("\u0000\u0000\u0000");
    var48.onLogout((org.jsecurity.subject.PrincipalCollection)var56);
    org.jsecurity.authz.aop.RoleAnnotationMethodInterceptor var71 = new org.jsecurity.authz.aop.RoleAnnotationMethodInterceptor();
    org.jsecurity.aop.AnnotationHandler var72 = var71.getHandler();
    java.lang.Class var73 = var72.getAnnotationClass();
    java.util.Collection var74 = var56.byType(var73);
    java.util.Collection var75 = var8.byType(var73);
    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      java.lang.Object var76 = org.jsecurity.util.ClassUtils.newInstance(var73);
      fail("Expected exception of type org.jsecurity.util.InstantiationException");
    } catch (org.jsecurity.util.InstantiationException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var3);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var4);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var5);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var21);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var30);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var31 + "' != '" + "dd\uFFFD"+ "'", var31.equals("dd\uFFFD"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var32);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var33);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var36);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var42);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var44);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var46 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var51);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var52);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var53);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var69);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var72);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var73);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var74);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var75);

  }

  public void test219() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest2.test219");


    org.jsecurity.authz.permission.InvalidPermissionStringException var2 = new org.jsecurity.authz.permission.InvalidPermissionStringException("", "dd\uFFFD");
    org.jsecurity.JSecurityException var4 = new org.jsecurity.JSecurityException("");
    org.jsecurity.authc.SimpleAuthenticationInfo var6 = new org.jsecurity.authc.SimpleAuthenticationInfo((java.lang.Object)var2, (java.lang.Object)"", "org.jsecurity.authz.UnauthorizedException: org.jsecurity.session.ExpiredSessionException: ");
    org.jsecurity.subject.PrincipalCollection var7 = var6.getPrincipals();
    org.jsecurity.session.UnknownSessionException var11 = new org.jsecurity.session.UnknownSessionException("dd\uFFFD", (java.io.Serializable)100.0f);
    org.jsecurity.session.SessionException var13 = new org.jsecurity.session.SessionException("dd\uFFFD", (java.lang.Throwable)var11, (java.io.Serializable)0);
    org.jsecurity.authc.SimpleAccount var14 = new org.jsecurity.authc.SimpleAccount(var7, (java.lang.Object)var13);
    org.jsecurity.realm.jndi.JndiRealmFactory var15 = new org.jsecurity.realm.jndi.JndiRealmFactory();
    java.util.Collection var16 = var15.getJndiNames();
    org.jsecurity.jndi.JndiTemplate var17 = var15.getJndiTemplate();
    var15.setResourceRef(false);
    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      org.jsecurity.crypto.hash.Sha1Hash var21 = new org.jsecurity.crypto.hash.Sha1Hash((java.lang.Object)var14, (java.lang.Object)false, 100);
      fail("Expected exception of type org.jsecurity.codec.CodecException");
    } catch (org.jsecurity.codec.CodecException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var7);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var16);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var17);

  }

  public void test220() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest2.test220");


    org.jsecurity.authc.pam.AllSuccessfulModularAuthenticationStrategy var0 = new org.jsecurity.authc.pam.AllSuccessfulModularAuthenticationStrategy();
    char[] var2 = new char[] { };
    org.jsecurity.authc.UsernamePasswordToken var4 = new org.jsecurity.authc.UsernamePasswordToken("hi!", var2, true);
    org.jsecurity.authc.SimpleAccount var5 = new org.jsecurity.authc.SimpleAccount();
    var5.setCredentialsExpired(false);
    boolean var8 = var5.isLocked();
    org.jsecurity.authc.AuthenticationInfo var9 = var0.afterAllAttempts((org.jsecurity.authc.AuthenticationToken)var4, (org.jsecurity.authc.AuthenticationInfo)var5);
    char[] var11 = new char[] { };
    org.jsecurity.authc.UsernamePasswordToken var13 = new org.jsecurity.authc.UsernamePasswordToken("hi!", var11, true);
    byte[] var14 = org.jsecurity.codec.Hex.decode(var11);
    byte[] var15 = org.jsecurity.codec.Hex.decode(var11);
    var4.setPassword(var11);
    var4.setUsername("c66ea0fc-9ec0-41f7-adb2-af232b25e84f");
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var2);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var8 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var9);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var11);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var14);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var15);

  }

  public void test221() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest2.test221");


    org.jsecurity.authz.SimpleAuthorizationInfo var0 = new org.jsecurity.authz.SimpleAuthorizationInfo();
    var0.addStringPermission("hi!");
    java.io.InputStream var4 = org.jsecurity.util.ClassUtils.getResourceAsStream("");
    java.lang.Object[] var5 = new java.lang.Object[] { var4};
    java.util.List var6 = org.jsecurity.util.CollectionUtils.asList(var5);
    var0.addRoles((java.util.Collection)var6);
    java.util.Set var8 = var0.getRoles();
    java.util.Set var9 = var0.getStringPermissions();
    org.jsecurity.session.UnknownSessionException var14 = new org.jsecurity.session.UnknownSessionException("dd\uFFFD", (java.io.Serializable)100.0f);
    org.jsecurity.subject.SubjectException var15 = new org.jsecurity.subject.SubjectException("dd\uFFFD", (java.lang.Throwable)var14);
    org.jsecurity.io.SerializationException var16 = new org.jsecurity.io.SerializationException("", (java.lang.Throwable)var15);
    java.lang.Throwable[] var17 = var15.getSuppressed();
    java.lang.Throwable[] var18 = var15.getSuppressed();
    org.jsecurity.authz.SimpleAuthorizationInfo var21 = new org.jsecurity.authz.SimpleAuthorizationInfo();
    var21.addRole("a2b823b1e72eae2b727289df8a00a89df8a0bab6ad8a89c4c5c7a9b62a270000");
    org.jsecurity.session.UnknownSessionException var28 = new org.jsecurity.session.UnknownSessionException("dd\uFFFD", (java.io.Serializable)100.0f);
    org.jsecurity.subject.SubjectException var29 = new org.jsecurity.subject.SubjectException("dd\uFFFD", (java.lang.Throwable)var28);
    org.jsecurity.io.SerializationException var30 = new org.jsecurity.io.SerializationException("", (java.lang.Throwable)var29);
    java.lang.Throwable[] var31 = var29.getSuppressed();
    java.util.Set var32 = org.jsecurity.util.CollectionUtils.asSet((java.lang.Object[])var31);
    var21.addRoles((java.util.Collection)var32);
    java.io.InputStream var35 = org.jsecurity.util.ClassUtils.getResourceAsStream("");
    java.lang.Object[] var36 = new java.lang.Object[] { var35};
    java.util.List var37 = org.jsecurity.util.CollectionUtils.asList(var36);
    org.jsecurity.authc.pam.ModularRealmAuthenticator var38 = new org.jsecurity.authc.pam.ModularRealmAuthenticator(var37);
    org.jsecurity.subject.SimplePrincipalCollection var40 = new org.jsecurity.subject.SimplePrincipalCollection((java.util.Collection)var37, "org.jsecurity.authz.UnauthorizedException: org.jsecurity.session.ExpiredSessionException: ");
    org.jsecurity.session.UnknownSessionException var45 = new org.jsecurity.session.UnknownSessionException("dd\uFFFD", (java.io.Serializable)100.0f);
    org.jsecurity.session.SessionException var47 = new org.jsecurity.session.SessionException("dd\uFFFD", (java.lang.Throwable)var45, (java.io.Serializable)0);
    org.jsecurity.session.SessionException var48 = new org.jsecurity.session.SessionException("dd\uFFFD", (java.lang.Throwable)var45);
    var40.add((java.lang.Object)var48, "org.jsecurity.config.ConfigurationException: dd\uFFFD");
    java.util.Set var51 = var40.asSet();
    org.jsecurity.authz.SimpleAuthorizingAccount var52 = new org.jsecurity.authz.SimpleAuthorizingAccount((java.lang.Object)var18, (java.lang.Object)"\u0000\u0000\u0000", "\u0000\u0000\u0000", var32, var51);
    org.jsecurity.authz.SimpleRole var54 = var52.getRole("\u0000\u0000\u0000");
    java.util.Set var55 = var52.getPermissions();
    boolean var56 = var52.isLocked();
    java.io.InputStream var58 = org.jsecurity.util.ClassUtils.getResourceAsStream("");
    java.lang.Object[] var59 = new java.lang.Object[] { var58};
    java.util.List var60 = org.jsecurity.util.CollectionUtils.asList(var59);
    org.jsecurity.authc.pam.ModularRealmAuthenticator var61 = new org.jsecurity.authc.pam.ModularRealmAuthenticator(var60);
    org.jsecurity.subject.SimplePrincipalCollection var63 = new org.jsecurity.subject.SimplePrincipalCollection((java.util.Collection)var60, "org.jsecurity.authz.UnauthorizedException: org.jsecurity.session.ExpiredSessionException: ");
    java.util.Set var64 = var63.getRealmNames();
    var52.addStringPermissions((java.util.Collection)var64);
    var0.addObjectPermissions((java.util.Collection)var64);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var4);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var5);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var6);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var8);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var9);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var17);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var18);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var31);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var32);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var35);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var36);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var37);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var51);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var54);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var55);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var56 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var58);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var59);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var60);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var64);

  }

  public void test222() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest2.test222");


    org.jsecurity.authc.ExpiredCredentialsException var1 = new org.jsecurity.authc.ExpiredCredentialsException();
    org.jsecurity.session.ExpiredSessionException var2 = new org.jsecurity.session.ExpiredSessionException("", (java.lang.Throwable)var1);
    org.jsecurity.authc.DisabledAccountException var3 = new org.jsecurity.authc.DisabledAccountException((java.lang.Throwable)var1);

  }

  public void test223() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest2.test223");


    org.jsecurity.util.UnknownClassException var1 = new org.jsecurity.util.UnknownClassException("29c07e0a-d8fa-4305-a944-e1e754c73175");

  }

  public void test224() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest2.test224");


    org.jsecurity.realm.SimpleAccountRealm var1 = new org.jsecurity.realm.SimpleAccountRealm("hi!");
    char[] var4 = new char[] { };
    org.jsecurity.authc.UsernamePasswordToken var6 = new org.jsecurity.authc.UsernamePasswordToken("hi!", var4, true);
    org.jsecurity.authc.UsernamePasswordToken var7 = new org.jsecurity.authc.UsernamePasswordToken("\u0000\u0000", var4);
    java.lang.Object var8 = var7.getPrincipal();
    boolean var9 = var1.supports((org.jsecurity.authc.AuthenticationToken)var7);
    org.jsecurity.realm.activedirectory.ActiveDirectoryRealm var10 = new org.jsecurity.realm.activedirectory.ActiveDirectoryRealm();
    org.jsecurity.authc.credential.Sha256CredentialsMatcher var11 = new org.jsecurity.authc.credential.Sha256CredentialsMatcher();
    var10.setCredentialsMatcher((org.jsecurity.authc.credential.CredentialsMatcher)var11);
    java.lang.String var13 = var10.getAuthorizationCacheName();
    var10.setPrincipalSuffix("org.jsecurity.config.ConfigurationException: dd\uFFFD");
    org.jsecurity.realm.text.TextConfigurationRealm var16 = new org.jsecurity.realm.text.TextConfigurationRealm();
    java.io.InputStream var18 = org.jsecurity.util.ClassUtils.getResourceAsStream("");
    java.lang.Object[] var19 = new java.lang.Object[] { var18};
    java.util.List var20 = org.jsecurity.util.CollectionUtils.asList(var19);
    org.jsecurity.authc.pam.ModularRealmAuthenticator var21 = new org.jsecurity.authc.pam.ModularRealmAuthenticator(var20);
    org.jsecurity.subject.SimplePrincipalCollection var23 = new org.jsecurity.subject.SimplePrincipalCollection((java.util.Collection)var20, "org.jsecurity.authz.UnauthorizedException: org.jsecurity.session.ExpiredSessionException: ");
    org.jsecurity.session.UnknownSessionException var28 = new org.jsecurity.session.UnknownSessionException("dd\uFFFD", (java.io.Serializable)100.0f);
    org.jsecurity.session.SessionException var30 = new org.jsecurity.session.SessionException("dd\uFFFD", (java.lang.Throwable)var28, (java.io.Serializable)0);
    org.jsecurity.session.SessionException var31 = new org.jsecurity.session.SessionException("dd\uFFFD", (java.lang.Throwable)var28);
    var23.add((java.lang.Object)var31, "org.jsecurity.config.ConfigurationException: dd\uFFFD");
    var16.onLogout((org.jsecurity.subject.PrincipalCollection)var23);
    var10.onLogout((org.jsecurity.subject.PrincipalCollection)var23);
    org.jsecurity.realm.SimpleAccountRealm var37 = new org.jsecurity.realm.SimpleAccountRealm("hi!");
    java.lang.Class var38 = var37.getAuthenticationTokenClass();
    java.util.Collection var39 = org.jsecurity.util.CollectionUtils.emptyCollection(var38);
    java.util.Collection var40 = var23.byType(var38);
    org.jsecurity.authz.SimpleRole var41 = new org.jsecurity.authz.SimpleRole();
    org.jsecurity.authz.SimpleAuthorizationInfo var42 = new org.jsecurity.authz.SimpleAuthorizationInfo();
    var42.addRole("a2b823b1e72eae2b727289df8a00a89df8a0bab6ad8a89c4c5c7a9b62a270000");
    org.jsecurity.session.UnknownSessionException var49 = new org.jsecurity.session.UnknownSessionException("dd\uFFFD", (java.io.Serializable)100.0f);
    org.jsecurity.subject.SubjectException var50 = new org.jsecurity.subject.SubjectException("dd\uFFFD", (java.lang.Throwable)var49);
    org.jsecurity.io.SerializationException var51 = new org.jsecurity.io.SerializationException("", (java.lang.Throwable)var50);
    java.lang.Throwable[] var52 = var50.getSuppressed();
    java.util.Set var53 = org.jsecurity.util.CollectionUtils.asSet((java.lang.Object[])var52);
    var42.addRoles((java.util.Collection)var53);
    var41.addAll((java.util.Collection)var53);
    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      var1.checkPermissions((org.jsecurity.subject.PrincipalCollection)var23, (java.util.Collection)var53);
      fail("Expected exception of type java.util.NoSuchElementException");
    } catch (java.util.NoSuchElementException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var4);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var8 + "' != '" + "\u0000\u0000"+ "'", var8.equals("\u0000\u0000"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var9 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var13);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var18);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var19);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var20);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var38);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var39);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var40);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var52);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var53);

  }

  public void test225() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest2.test225");


    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      org.jsecurity.crypto.hash.Sha512Hash var1 = org.jsecurity.crypto.hash.Sha512Hash.fromHexString("c07dcc1f-69d1-439f-8202-c1ed75146e6e");
      fail("Expected exception of type java.lang.IllegalArgumentException");
    } catch (java.lang.IllegalArgumentException e) {
      // Expected exception.
    }

  }

  public void test226() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest2.test226");


    org.jsecurity.session.UnknownSessionException var4 = new org.jsecurity.session.UnknownSessionException("dd\uFFFD", (java.io.Serializable)100.0f);
    org.jsecurity.subject.SubjectException var5 = new org.jsecurity.subject.SubjectException("dd\uFFFD", (java.lang.Throwable)var4);
    org.jsecurity.io.SerializationException var6 = new org.jsecurity.io.SerializationException("", (java.lang.Throwable)var5);
    java.lang.Throwable[] var7 = var5.getSuppressed();
    java.lang.Throwable[] var8 = var5.getSuppressed();
    org.jsecurity.authz.SimpleAuthorizationInfo var11 = new org.jsecurity.authz.SimpleAuthorizationInfo();
    var11.addRole("a2b823b1e72eae2b727289df8a00a89df8a0bab6ad8a89c4c5c7a9b62a270000");
    org.jsecurity.session.UnknownSessionException var18 = new org.jsecurity.session.UnknownSessionException("dd\uFFFD", (java.io.Serializable)100.0f);
    org.jsecurity.subject.SubjectException var19 = new org.jsecurity.subject.SubjectException("dd\uFFFD", (java.lang.Throwable)var18);
    org.jsecurity.io.SerializationException var20 = new org.jsecurity.io.SerializationException("", (java.lang.Throwable)var19);
    java.lang.Throwable[] var21 = var19.getSuppressed();
    java.util.Set var22 = org.jsecurity.util.CollectionUtils.asSet((java.lang.Object[])var21);
    var11.addRoles((java.util.Collection)var22);
    java.io.InputStream var25 = org.jsecurity.util.ClassUtils.getResourceAsStream("");
    java.lang.Object[] var26 = new java.lang.Object[] { var25};
    java.util.List var27 = org.jsecurity.util.CollectionUtils.asList(var26);
    org.jsecurity.authc.pam.ModularRealmAuthenticator var28 = new org.jsecurity.authc.pam.ModularRealmAuthenticator(var27);
    org.jsecurity.subject.SimplePrincipalCollection var30 = new org.jsecurity.subject.SimplePrincipalCollection((java.util.Collection)var27, "org.jsecurity.authz.UnauthorizedException: org.jsecurity.session.ExpiredSessionException: ");
    org.jsecurity.session.UnknownSessionException var35 = new org.jsecurity.session.UnknownSessionException("dd\uFFFD", (java.io.Serializable)100.0f);
    org.jsecurity.session.SessionException var37 = new org.jsecurity.session.SessionException("dd\uFFFD", (java.lang.Throwable)var35, (java.io.Serializable)0);
    org.jsecurity.session.SessionException var38 = new org.jsecurity.session.SessionException("dd\uFFFD", (java.lang.Throwable)var35);
    var30.add((java.lang.Object)var38, "org.jsecurity.config.ConfigurationException: dd\uFFFD");
    java.util.Set var41 = var30.asSet();
    org.jsecurity.authz.SimpleAuthorizingAccount var42 = new org.jsecurity.authz.SimpleAuthorizingAccount((java.lang.Object)var8, (java.lang.Object)"\u0000\u0000\u0000", "\u0000\u0000\u0000", var22, var41);
    org.jsecurity.authz.SimpleRole var43 = new org.jsecurity.authz.SimpleRole();
    org.jsecurity.authz.SimpleAuthorizationInfo var44 = new org.jsecurity.authz.SimpleAuthorizationInfo();
    var44.addRole("a2b823b1e72eae2b727289df8a00a89df8a0bab6ad8a89c4c5c7a9b62a270000");
    org.jsecurity.session.UnknownSessionException var51 = new org.jsecurity.session.UnknownSessionException("dd\uFFFD", (java.io.Serializable)100.0f);
    org.jsecurity.subject.SubjectException var52 = new org.jsecurity.subject.SubjectException("dd\uFFFD", (java.lang.Throwable)var51);
    org.jsecurity.io.SerializationException var53 = new org.jsecurity.io.SerializationException("", (java.lang.Throwable)var52);
    java.lang.Throwable[] var54 = var52.getSuppressed();
    java.util.Set var55 = org.jsecurity.util.CollectionUtils.asSet((java.lang.Object[])var54);
    var44.addRoles((java.util.Collection)var55);
    var43.addAll((java.util.Collection)var55);
    var42.addObjectPermissions((java.util.Collection)var55);
    var42.addRole("6f8b35fd-0848-49a4-9560-659760616ad8");
    java.io.InputStream var62 = org.jsecurity.util.ClassUtils.getResourceAsStream("");
    java.lang.Object[] var63 = new java.lang.Object[] { var62};
    java.util.List var64 = org.jsecurity.util.CollectionUtils.asList(var63);
    org.jsecurity.authc.pam.ModularRealmAuthenticator var65 = new org.jsecurity.authc.pam.ModularRealmAuthenticator(var64);
    org.jsecurity.subject.SimplePrincipalCollection var67 = new org.jsecurity.subject.SimplePrincipalCollection((java.util.Collection)var64, "org.jsecurity.authz.UnauthorizedException: org.jsecurity.session.ExpiredSessionException: ");
    org.jsecurity.session.UnknownSessionException var72 = new org.jsecurity.session.UnknownSessionException("dd\uFFFD", (java.io.Serializable)100.0f);
    org.jsecurity.session.SessionException var74 = new org.jsecurity.session.SessionException("dd\uFFFD", (java.lang.Throwable)var72, (java.io.Serializable)0);
    org.jsecurity.session.SessionException var75 = new org.jsecurity.session.SessionException("dd\uFFFD", (java.lang.Throwable)var72);
    var67.add((java.lang.Object)var75, "org.jsecurity.config.ConfigurationException: dd\uFFFD");
    java.util.Set var78 = var67.asSet();
    org.jsecurity.authz.SimpleAuthorizationInfo var79 = new org.jsecurity.authz.SimpleAuthorizationInfo(var78);
    java.util.Set var80 = var79.getRoles();
    var42.setStringPermissions(var80);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var7);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var8);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var21);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var22);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var25);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var26);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var27);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var41);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var54);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var55);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var62);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var63);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var64);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var78);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var80);

  }

  public void test227() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest2.test227");


    java.io.InputStream var1 = org.jsecurity.util.ClassUtils.getResourceAsStream("");
    java.lang.Object[] var2 = new java.lang.Object[] { var1};
    java.util.List var3 = org.jsecurity.util.CollectionUtils.asList(var2);
    org.jsecurity.authc.pam.ModularRealmAuthenticator var4 = new org.jsecurity.authc.pam.ModularRealmAuthenticator(var3);
    org.jsecurity.authc.pam.AllSuccessfulModularAuthenticationStrategy var5 = new org.jsecurity.authc.pam.AllSuccessfulModularAuthenticationStrategy();
    var4.setModularAuthenticationStrategy((org.jsecurity.authc.pam.ModularAuthenticationStrategy)var5);
    org.jsecurity.authz.SimpleAuthorizationInfo var7 = new org.jsecurity.authz.SimpleAuthorizationInfo();
    var7.addStringPermission("hi!");
    java.io.InputStream var11 = org.jsecurity.util.ClassUtils.getResourceAsStream("");
    java.lang.Object[] var12 = new java.lang.Object[] { var11};
    java.util.List var13 = org.jsecurity.util.CollectionUtils.asList(var12);
    var7.addRoles((java.util.Collection)var13);
    var4.setAuthenticationListeners((java.util.Collection)var13);
    org.jsecurity.realm.activedirectory.ActiveDirectoryRealm var16 = new org.jsecurity.realm.activedirectory.ActiveDirectoryRealm();
    var16.setPrincipalSuffix("");
    var4.setRealm((org.jsecurity.realm.Realm)var16);
    org.jsecurity.authc.pam.FirstSuccessfulAuthenticationStrategy var20 = new org.jsecurity.authc.pam.FirstSuccessfulAuthenticationStrategy();
    org.jsecurity.authz.UnauthorizedException var22 = new org.jsecurity.authz.UnauthorizedException("org.jsecurity.config.ConfigurationException: dd\uFFFD");
    java.lang.Throwable[] var23 = var22.getSuppressed();
    java.util.List var24 = org.jsecurity.util.CollectionUtils.asList((java.lang.Object[])var23);
    org.jsecurity.authc.UsernamePasswordToken var25 = new org.jsecurity.authc.UsernamePasswordToken();
    java.lang.String var26 = var25.getUsername();
    java.net.InetAddress var27 = var25.getInetAddress();
    org.jsecurity.authc.AuthenticationInfo var28 = var20.beforeAllAttempts((java.util.Collection)var24, (org.jsecurity.authc.AuthenticationToken)var25);
    var4.setModularAuthenticationStrategy((org.jsecurity.authc.pam.ModularAuthenticationStrategy)var20);
    org.jsecurity.realm.text.PropertiesRealm var30 = new org.jsecurity.realm.text.PropertiesRealm();
    java.lang.String var31 = var30.getUserDefinitions();
    var30.destroy();
    var4.setRealm((org.jsecurity.realm.Realm)var30);
    var30.setUseXmlFormat(false);
    java.lang.String var36 = var30.getRoleDefinitions();
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var1);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var2);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var3);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var11);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var12);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var13);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var23);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var24);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var26);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var27);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var28);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var31);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var36);

  }

  public void test228() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest2.test228");


    org.jsecurity.config.UnresolveableReferenceException var2 = new org.jsecurity.config.UnresolveableReferenceException("org.jsecurity.config.ConfigurationException: dd\uFFFD");
    org.jsecurity.authz.UnauthorizedException var3 = new org.jsecurity.authz.UnauthorizedException("4ef713cf-5dcd-4003-b930-c7cb38661a43", (java.lang.Throwable)var2);

  }

  public void test229() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest2.test229");


    java.io.InputStream var1 = org.jsecurity.util.ClassUtils.getResourceAsStream("b725e8cc-690c-495e-ac27-b1b425834793");
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var1);

  }

  public void test230() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest2.test230");


    org.jsecurity.session.UnknownSessionException var1 = new org.jsecurity.session.UnknownSessionException("ce09e5a8-f60d-4790-96b2-e4cb301de6f0");

  }

  public void test231() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest2.test231");


    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      java.io.InputStream var1 = org.jsecurity.io.ResourceUtils.getInputStreamForPath("c237631f-f5b6-4602-ad39-91738c85cc84");
      fail("Expected exception of type java.io.FileNotFoundException");
    } catch (java.io.FileNotFoundException e) {
      // Expected exception.
    }

  }

  public void test232() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest2.test232");


    org.jsecurity.io.IniResource var0 = new org.jsecurity.io.IniResource();
    var0.setCharsetName("org.jsecurity.authz.UnauthorizedException: org.jsecurity.session.ExpiredSessionException: ");
    var0.setCharsetName("a2b823b1e72eae2b727289df8a00a89df8a0bab6ad8a89c4c5c7a9b62a270000");
    java.io.InputStream var6 = org.jsecurity.util.ClassUtils.getResourceAsStream("");
    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      var0.load(var6);
      fail("Expected exception of type org.jsecurity.io.ResourceException");
    } catch (org.jsecurity.io.ResourceException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var6);

  }

  public void test233() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest2.test233");


    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      org.jsecurity.io.IniResource var2 = new org.jsecurity.io.IniResource("org.jsecurity.realm.text.TextConfigurationRealm_389", "6ef0ea81-df08-48cf-af25-ca783616684e");
      fail("Expected exception of type org.jsecurity.io.ResourceException");
    } catch (org.jsecurity.io.ResourceException e) {
      // Expected exception.
    }

  }

  public void test234() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest2.test234");


    org.jsecurity.session.mgt.SimpleSession var0 = new org.jsecurity.session.mgt.SimpleSession();
    var0.touch();
    org.jsecurity.authz.UnauthenticatedException var4 = new org.jsecurity.authz.UnauthenticatedException();
    org.jsecurity.config.UnresolveableReferenceException var5 = new org.jsecurity.config.UnresolveableReferenceException("", (java.lang.Throwable)var4);
    org.jsecurity.cache.CacheException var6 = new org.jsecurity.cache.CacheException("org.jsecurity.config.ConfigurationException: dd\uFFFD", (java.lang.Throwable)var4);
    java.lang.Object var7 = var0.removeAttribute((java.lang.Object)var6);
    java.util.Map var8 = var0.getAttributes();
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var7);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var8);

  }

  public void test235() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest2.test235");


    org.jsecurity.codec.CodecException var1 = new org.jsecurity.codec.CodecException("jsecurity-activeSessionCache");

  }

  public void test236() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest2.test236");


    java.lang.String[] var3 = org.jsecurity.util.StringUtils.split("org.jsecurity.config.ConfigurationException: dd\uFFFD", '#', '4');
    org.jsecurity.session.UnknownSessionException var8 = new org.jsecurity.session.UnknownSessionException("dd\uFFFD", (java.io.Serializable)100.0f);
    org.jsecurity.subject.SubjectException var9 = new org.jsecurity.subject.SubjectException("dd\uFFFD", (java.lang.Throwable)var8);
    org.jsecurity.io.SerializationException var10 = new org.jsecurity.io.SerializationException("", (java.lang.Throwable)var9);
    java.lang.Throwable[] var11 = var9.getSuppressed();
    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      org.jsecurity.crypto.hash.Md2Hash var12 = new org.jsecurity.crypto.hash.Md2Hash((java.lang.Object)'#', (java.lang.Object)var11);
      fail("Expected exception of type org.jsecurity.codec.CodecException");
    } catch (org.jsecurity.codec.CodecException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var3);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var11);

  }

  public void test237() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest2.test237");


    org.jsecurity.session.mgt.eis.MemorySessionDAO var0 = new org.jsecurity.session.mgt.eis.MemorySessionDAO();
    org.jsecurity.cache.Cache var1 = var0.getActiveSessionsCache();
    org.jsecurity.cache.CacheManager var2 = var0.getCacheManager();
    org.jsecurity.cache.HashtableCacheManager var3 = new org.jsecurity.cache.HashtableCacheManager();
    org.jsecurity.cache.Cache var5 = var3.getCache("\u0000\u0000");
    var0.setActiveSessionsCache(var5);
    java.io.InputStream var8 = org.jsecurity.util.ClassUtils.getResourceAsStream("");
    java.lang.Object[] var9 = new java.lang.Object[] { var8};
    java.util.List var10 = org.jsecurity.util.CollectionUtils.asList(var9);
    org.jsecurity.authc.pam.ModularRealmAuthenticator var11 = new org.jsecurity.authc.pam.ModularRealmAuthenticator(var10);
    org.jsecurity.authc.pam.AllSuccessfulModularAuthenticationStrategy var12 = new org.jsecurity.authc.pam.AllSuccessfulModularAuthenticationStrategy();
    var11.setModularAuthenticationStrategy((org.jsecurity.authc.pam.ModularAuthenticationStrategy)var12);
    org.jsecurity.authz.SimpleAuthorizationInfo var14 = new org.jsecurity.authz.SimpleAuthorizationInfo();
    var14.addStringPermission("hi!");
    java.io.InputStream var18 = org.jsecurity.util.ClassUtils.getResourceAsStream("");
    java.lang.Object[] var19 = new java.lang.Object[] { var18};
    java.util.List var20 = org.jsecurity.util.CollectionUtils.asList(var19);
    var14.addRoles((java.util.Collection)var20);
    var11.setAuthenticationListeners((java.util.Collection)var20);
    org.jsecurity.realm.activedirectory.ActiveDirectoryRealm var23 = new org.jsecurity.realm.activedirectory.ActiveDirectoryRealm();
    var23.setPrincipalSuffix("");
    var11.setRealm((org.jsecurity.realm.Realm)var23);
    org.jsecurity.cache.HashtableCacheManager var27 = new org.jsecurity.cache.HashtableCacheManager();
    org.jsecurity.cache.Cache var29 = var27.getCache("\u0000\u0000");
    var23.setAuthorizationCache(var29);
    var0.setActiveSessionsCache(var29);
    org.jsecurity.session.mgt.SimpleSession var32 = new org.jsecurity.session.mgt.SimpleSession();
    java.io.Serializable var33 = var0.create((org.jsecurity.session.Session)var32);
    org.jsecurity.session.mgt.SimpleSession var34 = new org.jsecurity.session.mgt.SimpleSession();
    var34.touch();
    var34.validate();
    org.jsecurity.session.mgt.SimpleSession var37 = new org.jsecurity.session.mgt.SimpleSession();
    var37.setTimeout((-1L));
    org.jsecurity.session.mgt.SimpleSession var40 = new org.jsecurity.session.mgt.SimpleSession();
    java.util.Date var41 = var40.getLastAccessTime();
    var37.setLastAccessTime(var41);
    org.jsecurity.session.mgt.SimpleSession var43 = new org.jsecurity.session.mgt.SimpleSession();
    java.util.Date var44 = var43.getLastAccessTime();
    var37.setStopTimestamp(var44);
    var34.setLastAccessTime(var44);
    var32.setLastAccessTime(var44);
    org.jsecurity.session.mgt.ImmutableProxiedSession var48 = new org.jsecurity.session.mgt.ImmutableProxiedSession((org.jsecurity.session.Session)var32);
    java.util.Date var49 = var48.getLastAccessTime();
    java.io.Serializable var50 = var48.getId();
    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      var48.setTimeout(1800000L);
      fail("Expected exception of type org.jsecurity.session.InvalidSessionException");
    } catch (org.jsecurity.session.InvalidSessionException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var1);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var2);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var5);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var8);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var9);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var10);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var18);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var19);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var20);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var29);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var33 + "' != '" + "f4da13c7-21ac-4b2d-8fc6-21330a09e949"+ "'", var33.equals("f4da13c7-21ac-4b2d-8fc6-21330a09e949"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var41);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var44);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var49);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var50 + "' != '" + "f4da13c7-21ac-4b2d-8fc6-21330a09e949"+ "'", var50.equals("f4da13c7-21ac-4b2d-8fc6-21330a09e949"));

  }

  public void test238() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest2.test238");


    org.jsecurity.session.mgt.DefaultSessionManager var0 = new org.jsecurity.session.mgt.DefaultSessionManager();
    org.jsecurity.session.mgt.SessionValidationScheduler var1 = var0.getSessionValidationScheduler();
    long var2 = var0.getGlobalSessionTimeout();
    org.jsecurity.codec.CodecException var5 = new org.jsecurity.codec.CodecException("dd\uFFFD");
    org.jsecurity.authc.ConcurrentAccessException var6 = new org.jsecurity.authc.ConcurrentAccessException("org.jsecurity.authz.UnauthorizedException: org.jsecurity.session.ExpiredSessionException: ", (java.lang.Throwable)var5);
    org.jsecurity.subject.SimplePrincipalCollection var8 = new org.jsecurity.subject.SimplePrincipalCollection((java.lang.Object)var5, "");
    char[] var12 = new char[] { };
    org.jsecurity.authc.UsernamePasswordToken var14 = new org.jsecurity.authc.UsernamePasswordToken("hi!", var12, true);
    org.jsecurity.authc.UsernamePasswordToken var15 = new org.jsecurity.authc.UsernamePasswordToken("\u0000\u0000", var12);
    org.jsecurity.session.mgt.SimpleSession var16 = new org.jsecurity.session.mgt.SimpleSession();
    var16.setTimeout((-1L));
    org.jsecurity.session.mgt.SimpleSession var19 = new org.jsecurity.session.mgt.SimpleSession();
    java.util.Date var20 = var19.getLastAccessTime();
    var16.setLastAccessTime(var20);
    java.net.InetAddress var22 = var16.getHostAddress();
    var15.setInetAddress(var22);
    org.jsecurity.session.mgt.SimpleSession var24 = new org.jsecurity.session.mgt.SimpleSession();
    var24.setTimeout((-1L));
    org.jsecurity.session.mgt.SimpleSession var27 = new org.jsecurity.session.mgt.SimpleSession();
    java.util.Date var28 = var27.getLastAccessTime();
    var24.setLastAccessTime(var28);
    org.jsecurity.session.mgt.SimpleSession var30 = new org.jsecurity.session.mgt.SimpleSession();
    java.util.Date var31 = var30.getLastAccessTime();
    var24.setStopTimestamp(var31);
    org.jsecurity.mgt.DefaultSecurityManager var33 = new org.jsecurity.mgt.DefaultSecurityManager();
    org.jsecurity.authc.pam.AllSuccessfulModularAuthenticationStrategy var34 = new org.jsecurity.authc.pam.AllSuccessfulModularAuthenticationStrategy();
    org.jsecurity.authc.pam.AllSuccessfulModularAuthenticationStrategy var35 = new org.jsecurity.authc.pam.AllSuccessfulModularAuthenticationStrategy();
    char[] var37 = new char[] { };
    org.jsecurity.authc.UsernamePasswordToken var39 = new org.jsecurity.authc.UsernamePasswordToken("hi!", var37, true);
    org.jsecurity.authc.SimpleAccount var40 = new org.jsecurity.authc.SimpleAccount();
    var40.setCredentialsExpired(false);
    boolean var43 = var40.isLocked();
    org.jsecurity.authc.AuthenticationInfo var44 = var35.afterAllAttempts((org.jsecurity.authc.AuthenticationToken)var39, (org.jsecurity.authc.AuthenticationInfo)var40);
    char[] var48 = new char[] { '4', '#'};
    org.jsecurity.authc.UsernamePasswordToken var49 = new org.jsecurity.authc.UsernamePasswordToken("\u0000\u0000", var48);
    org.jsecurity.authc.SimpleAccount var50 = new org.jsecurity.authc.SimpleAccount();
    var50.setCredentialsExpired(false);
    var50.setCredentialsExpired(false);
    boolean var55 = var50.isCredentialsExpired();
    org.jsecurity.authc.AuthenticationInfo var56 = var35.afterAllAttempts((org.jsecurity.authc.AuthenticationToken)var49, (org.jsecurity.authc.AuthenticationInfo)var50);
    org.jsecurity.authz.UnauthenticatedException var60 = new org.jsecurity.authz.UnauthenticatedException();
    org.jsecurity.config.UnresolveableReferenceException var61 = new org.jsecurity.config.UnresolveableReferenceException("", (java.lang.Throwable)var60);
    org.jsecurity.cache.CacheException var62 = new org.jsecurity.cache.CacheException("org.jsecurity.config.ConfigurationException: dd\uFFFD", (java.lang.Throwable)var60);
    org.jsecurity.authc.SimpleAuthenticationInfo var64 = new org.jsecurity.authc.SimpleAuthenticationInfo((java.lang.Object)"org.jsecurity.config.ConfigurationException: dd\uFFFD", (java.lang.Object)var62, "a2b823b1e72eae2b727289df8a00a89df8a0bab6ad8a89c4c5c7a9b62a270000");
    org.jsecurity.subject.PrincipalCollection var65 = var64.getPrincipals();
    org.jsecurity.authc.AuthenticationInfo var66 = var34.afterAllAttempts((org.jsecurity.authc.AuthenticationToken)var49, (org.jsecurity.authc.AuthenticationInfo)var64);
    var33.setModularAuthenticationStrategy((org.jsecurity.authc.pam.ModularAuthenticationStrategy)var34);
    org.jsecurity.subject.RememberMeManager var68 = var33.getRememberMeManager();
    org.jsecurity.authc.pam.ModularRealmAuthenticator var69 = new org.jsecurity.authc.pam.ModularRealmAuthenticator();
    var33.setAuthenticator((org.jsecurity.authc.Authenticator)var69);
    org.jsecurity.codec.CodecException var73 = new org.jsecurity.codec.CodecException("dd\uFFFD");
    org.jsecurity.authc.ConcurrentAccessException var74 = new org.jsecurity.authc.ConcurrentAccessException("org.jsecurity.authz.UnauthorizedException: org.jsecurity.session.ExpiredSessionException: ", (java.lang.Throwable)var73);
    org.jsecurity.subject.SimplePrincipalCollection var76 = new org.jsecurity.subject.SimplePrincipalCollection((java.lang.Object)var73, "");
    java.io.InputStream var78 = org.jsecurity.util.ClassUtils.getResourceAsStream("");
    java.lang.Object[] var79 = new java.lang.Object[] { var78};
    java.util.List var80 = org.jsecurity.util.CollectionUtils.asList(var79);
    org.jsecurity.authc.pam.ModularRealmAuthenticator var81 = new org.jsecurity.authc.pam.ModularRealmAuthenticator(var80);
    var76.addAll((java.util.Collection)var80, "\u0000\u0000");
    org.jsecurity.authc.pam.FirstSuccessfulAuthenticationStrategy var84 = new org.jsecurity.authc.pam.FirstSuccessfulAuthenticationStrategy();
    org.jsecurity.authz.UnauthorizedException var86 = new org.jsecurity.authz.UnauthorizedException("org.jsecurity.config.ConfigurationException: dd\uFFFD");
    java.lang.Throwable[] var87 = var86.getSuppressed();
    java.util.List var88 = org.jsecurity.util.CollectionUtils.asList((java.lang.Object[])var87);
    org.jsecurity.authc.UsernamePasswordToken var89 = new org.jsecurity.authc.UsernamePasswordToken();
    java.lang.String var90 = var89.getUsername();
    java.net.InetAddress var91 = var89.getInetAddress();
    org.jsecurity.authc.AuthenticationInfo var92 = var84.beforeAllAttempts((java.util.Collection)var88, (org.jsecurity.authc.AuthenticationToken)var89);
    var33.checkPermissions((org.jsecurity.subject.PrincipalCollection)var76, (java.util.Collection)var88);
    org.jsecurity.subject.DelegatingSubject var94 = new org.jsecurity.subject.DelegatingSubject((org.jsecurity.subject.PrincipalCollection)var8, false, var22, (org.jsecurity.session.Session)var24, (org.jsecurity.mgt.SecurityManager)var33);
    java.io.Serializable var95 = var0.start(var22);
    org.jsecurity.session.mgt.ExecutorServiceSessionValidationScheduler var96 = new org.jsecurity.session.mgt.ExecutorServiceSessionValidationScheduler((org.jsecurity.session.mgt.ValidatingSessionManager)var0);
    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      var0.validateSession((java.io.Serializable)"NfxhYN7ItBfRAmDBmprtU73ghfEEPpcDJrHPkZ06wiY=");
      fail("Expected exception of type org.jsecurity.session.UnknownSessionException");
    } catch (org.jsecurity.session.UnknownSessionException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var2 == 1800000L);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var12);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var20);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var22);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var28);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var31);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var37);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var43 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var44);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var48);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var55 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var56);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var65);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var66);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var68);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var78);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var79);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var80);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var87);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var88);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var90);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var91);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var92);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var95 + "' != '" + "2463f02a-8538-46ae-86a9-739b1eb7bdd3"+ "'", var95.equals("2463f02a-8538-46ae-86a9-739b1eb7bdd3"));

  }

  public void test239() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest2.test239");


    org.jsecurity.realm.activedirectory.ActiveDirectoryRealm var0 = new org.jsecurity.realm.activedirectory.ActiveDirectoryRealm();
    var0.init();
    var0.setSystemPassword("dd\uFFFD");
    org.jsecurity.authz.aop.GuestAnnotationHandler var4 = new org.jsecurity.authz.aop.GuestAnnotationHandler();
    java.lang.Class var5 = var4.getAnnotationClass();
    var0.setAuthenticationTokenClass(var5);
    org.jsecurity.mgt.DefaultSecurityManager var7 = new org.jsecurity.mgt.DefaultSecurityManager((org.jsecurity.realm.Realm)var0);
    org.jsecurity.authz.UnauthenticatedException var11 = new org.jsecurity.authz.UnauthenticatedException();
    org.jsecurity.config.UnresolveableReferenceException var12 = new org.jsecurity.config.UnresolveableReferenceException("", (java.lang.Throwable)var11);
    org.jsecurity.cache.CacheException var13 = new org.jsecurity.cache.CacheException("org.jsecurity.config.ConfigurationException: dd\uFFFD", (java.lang.Throwable)var11);
    org.jsecurity.authc.SimpleAuthenticationInfo var15 = new org.jsecurity.authc.SimpleAuthenticationInfo((java.lang.Object)"org.jsecurity.config.ConfigurationException: dd\uFFFD", (java.lang.Object)var13, "a2b823b1e72eae2b727289df8a00a89df8a0bab6ad8a89c4c5c7a9b62a270000");
    org.jsecurity.subject.PrincipalCollection var16 = var15.getPrincipals();
    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      boolean var18 = var7.isPermitted(var16, "org.jsecurity.authc.UsernamePasswordToken - \u0000\u0000, rememberMe=false");
      fail("Expected exception of type java.util.NoSuchElementException");
    } catch (java.util.NoSuchElementException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var5);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var16);

  }

  public void test240() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest2.test240");


    org.jsecurity.session.ExpiredSessionException var1 = new org.jsecurity.session.ExpiredSessionException("9479eb39-3103-4d6d-9ffc-fc2b99018653");

  }

  public void test241() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest2.test241");


    org.jsecurity.authz.SimpleRole var0 = new org.jsecurity.authz.SimpleRole();
    java.lang.String var1 = var0.getName();
    java.io.InputStream var3 = org.jsecurity.util.ClassUtils.getResourceAsStream("");
    boolean var4 = var0.equals((java.lang.Object)"");
    var0.setName("org.jsecurity.realm.SimpleAccountRealm-173-authorization");
    java.util.Set var7 = var0.getPermissions();
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var1);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var3);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var4 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var7);

  }

  public void test242() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest2.test242");


    org.jsecurity.JSecurityException var1 = new org.jsecurity.JSecurityException();
    org.jsecurity.authz.UnauthorizedException var2 = new org.jsecurity.authz.UnauthorizedException((java.lang.Throwable)var1);
    org.jsecurity.authc.ExpiredCredentialsException var3 = new org.jsecurity.authc.ExpiredCredentialsException("0220fc2d-2559-421b-822b-6ed559f96c25", (java.lang.Throwable)var2);

  }

  public void test243() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest2.test243");


    org.jsecurity.authc.ExcessiveAttemptsException var1 = new org.jsecurity.authc.ExcessiveAttemptsException("75c873c8-19df-476a-b82e-72a1eddf7e4b");

  }

  public void test244() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest2.test244");


    java.io.InputStream var1 = org.jsecurity.util.ClassUtils.getResourceAsStream("");
    java.lang.Object[] var2 = new java.lang.Object[] { var1};
    java.util.List var3 = org.jsecurity.util.CollectionUtils.asList(var2);
    org.jsecurity.authc.pam.ModularRealmAuthenticator var4 = new org.jsecurity.authc.pam.ModularRealmAuthenticator(var3);
    org.jsecurity.subject.SimplePrincipalCollection var6 = new org.jsecurity.subject.SimplePrincipalCollection((java.util.Collection)var3, "org.jsecurity.authz.UnauthorizedException: org.jsecurity.session.ExpiredSessionException: ");
    org.jsecurity.io.ResourceException var10 = new org.jsecurity.io.ResourceException("hi!");
    org.jsecurity.authc.UnknownAccountException var11 = new org.jsecurity.authc.UnknownAccountException((java.lang.Throwable)var10);
    org.jsecurity.session.StoppedSessionException var12 = new org.jsecurity.session.StoppedSessionException("dd\uFFFD", (java.io.Serializable)var10);
    org.jsecurity.session.UnknownSessionException var13 = new org.jsecurity.session.UnknownSessionException("org.jsecurity.authz.UnauthorizedException: org.jsecurity.session.ExpiredSessionException: ", (java.lang.Throwable)var10);
    boolean var14 = var6.equals((java.lang.Object)var10);
    org.jsecurity.authz.SimpleAuthorizationInfo var15 = new org.jsecurity.authz.SimpleAuthorizationInfo();
    var15.addRole("a2b823b1e72eae2b727289df8a00a89df8a0bab6ad8a89c4c5c7a9b62a270000");
    org.jsecurity.authz.SimpleAuthorizationInfo var18 = new org.jsecurity.authz.SimpleAuthorizationInfo();
    var18.addRole("a2b823b1e72eae2b727289df8a00a89df8a0bab6ad8a89c4c5c7a9b62a270000");
    org.jsecurity.session.UnknownSessionException var25 = new org.jsecurity.session.UnknownSessionException("dd\uFFFD", (java.io.Serializable)100.0f);
    org.jsecurity.subject.SubjectException var26 = new org.jsecurity.subject.SubjectException("dd\uFFFD", (java.lang.Throwable)var25);
    org.jsecurity.io.SerializationException var27 = new org.jsecurity.io.SerializationException("", (java.lang.Throwable)var26);
    java.lang.Throwable[] var28 = var26.getSuppressed();
    java.util.Set var29 = org.jsecurity.util.CollectionUtils.asSet((java.lang.Object[])var28);
    var18.addRoles((java.util.Collection)var29);
    var15.setObjectPermissions(var29);
    java.io.InputStream var33 = org.jsecurity.util.ClassUtils.getResourceAsStream("");
    java.lang.Object[] var34 = new java.lang.Object[] { var33};
    java.util.List var35 = org.jsecurity.util.CollectionUtils.asList(var34);
    org.jsecurity.authc.pam.ModularRealmAuthenticator var36 = new org.jsecurity.authc.pam.ModularRealmAuthenticator(var35);
    org.jsecurity.subject.SimplePrincipalCollection var38 = new org.jsecurity.subject.SimplePrincipalCollection((java.util.Collection)var35, "org.jsecurity.authz.UnauthorizedException: org.jsecurity.session.ExpiredSessionException: ");
    java.util.Set var39 = var38.getRealmNames();
    java.io.InputStream var41 = org.jsecurity.util.ClassUtils.getResourceAsStream("");
    java.lang.Object[] var42 = new java.lang.Object[] { var41};
    java.util.List var43 = org.jsecurity.util.CollectionUtils.asList(var42);
    org.jsecurity.authc.pam.ModularRealmAuthenticator var44 = new org.jsecurity.authc.pam.ModularRealmAuthenticator(var43);
    org.jsecurity.subject.SimplePrincipalCollection var46 = new org.jsecurity.subject.SimplePrincipalCollection((java.util.Collection)var43, "org.jsecurity.authz.UnauthorizedException: org.jsecurity.session.ExpiredSessionException: ");
    org.jsecurity.session.UnknownSessionException var51 = new org.jsecurity.session.UnknownSessionException("dd\uFFFD", (java.io.Serializable)100.0f);
    org.jsecurity.session.SessionException var53 = new org.jsecurity.session.SessionException("dd\uFFFD", (java.lang.Throwable)var51, (java.io.Serializable)0);
    org.jsecurity.session.SessionException var54 = new org.jsecurity.session.SessionException("dd\uFFFD", (java.lang.Throwable)var51);
    var46.add((java.lang.Object)var54, "org.jsecurity.config.ConfigurationException: dd\uFFFD");
    java.util.Set var57 = var46.asSet();
    var38.addAll((java.util.Collection)var57, "6464ff");
    var15.setStringPermissions(var57);
    var6.addAll((java.util.Collection)var57, "\uFFFD\uFFFD#\uFFFD\uFFFD.\uFFFD+r\uFFFD\u6959(\uFFFD\uFFFDW\uFFFDq\uFFFD.\uFFFD\uFFFD^jY\uFFFDj\uFFFDa\uFFFD\uFFFD\uFFFDj\u0628\u0000");
    org.jsecurity.subject.SimplePrincipalCollection var64 = new org.jsecurity.subject.SimplePrincipalCollection((java.lang.Object)var57, "d5807a18-6407-48b2-9fe3-106a1ef9f432");
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var1);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var2);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var3);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var14 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var28);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var29);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var33);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var34);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var35);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var39);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var41);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var42);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var43);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var57);

  }

  public void test245() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest2.test245");


    org.jsecurity.realm.activedirectory.ActiveDirectoryRealm var0 = new org.jsecurity.realm.activedirectory.ActiveDirectoryRealm();
    var0.init();
    var0.setSystemPassword("dd\uFFFD");
    org.jsecurity.authz.aop.GuestAnnotationHandler var4 = new org.jsecurity.authz.aop.GuestAnnotationHandler();
    java.lang.Class var5 = var4.getAnnotationClass();
    var0.setAuthenticationTokenClass(var5);
    org.jsecurity.mgt.DefaultSecurityManager var7 = new org.jsecurity.mgt.DefaultSecurityManager((org.jsecurity.realm.Realm)var0);
    org.jsecurity.cache.CacheManager var8 = var0.getCacheManager();
    org.jsecurity.realm.text.PropertiesRealm var9 = new org.jsecurity.realm.text.PropertiesRealm(var8);
    var9.setResourcePath("?\u0238\u0018@\uFFFD");
    var9.afterRoleCacheSet();
    var9.destroy();
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var5);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var8);

  }

  public void test246() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest2.test246");


    org.jsecurity.cache.HashtableCache var1 = new org.jsecurity.cache.HashtableCache("\u0000\u0000\u0000");
    org.jsecurity.session.mgt.SimpleSession var2 = new org.jsecurity.session.mgt.SimpleSession();
    var2.touch();
    org.jsecurity.authz.UnauthenticatedException var6 = new org.jsecurity.authz.UnauthenticatedException();
    org.jsecurity.config.UnresolveableReferenceException var7 = new org.jsecurity.config.UnresolveableReferenceException("", (java.lang.Throwable)var6);
    org.jsecurity.cache.CacheException var8 = new org.jsecurity.cache.CacheException("org.jsecurity.config.ConfigurationException: dd\uFFFD", (java.lang.Throwable)var6);
    java.lang.Object var9 = var2.removeAttribute((java.lang.Object)var8);
    org.jsecurity.mgt.DefaultSecurityManager var10 = new org.jsecurity.mgt.DefaultSecurityManager();
    org.jsecurity.authc.pam.AllSuccessfulModularAuthenticationStrategy var11 = new org.jsecurity.authc.pam.AllSuccessfulModularAuthenticationStrategy();
    org.jsecurity.authc.pam.AllSuccessfulModularAuthenticationStrategy var12 = new org.jsecurity.authc.pam.AllSuccessfulModularAuthenticationStrategy();
    char[] var14 = new char[] { };
    org.jsecurity.authc.UsernamePasswordToken var16 = new org.jsecurity.authc.UsernamePasswordToken("hi!", var14, true);
    org.jsecurity.authc.SimpleAccount var17 = new org.jsecurity.authc.SimpleAccount();
    var17.setCredentialsExpired(false);
    boolean var20 = var17.isLocked();
    org.jsecurity.authc.AuthenticationInfo var21 = var12.afterAllAttempts((org.jsecurity.authc.AuthenticationToken)var16, (org.jsecurity.authc.AuthenticationInfo)var17);
    char[] var25 = new char[] { '4', '#'};
    org.jsecurity.authc.UsernamePasswordToken var26 = new org.jsecurity.authc.UsernamePasswordToken("\u0000\u0000", var25);
    org.jsecurity.authc.SimpleAccount var27 = new org.jsecurity.authc.SimpleAccount();
    var27.setCredentialsExpired(false);
    var27.setCredentialsExpired(false);
    boolean var32 = var27.isCredentialsExpired();
    org.jsecurity.authc.AuthenticationInfo var33 = var12.afterAllAttempts((org.jsecurity.authc.AuthenticationToken)var26, (org.jsecurity.authc.AuthenticationInfo)var27);
    org.jsecurity.authz.UnauthenticatedException var37 = new org.jsecurity.authz.UnauthenticatedException();
    org.jsecurity.config.UnresolveableReferenceException var38 = new org.jsecurity.config.UnresolveableReferenceException("", (java.lang.Throwable)var37);
    org.jsecurity.cache.CacheException var39 = new org.jsecurity.cache.CacheException("org.jsecurity.config.ConfigurationException: dd\uFFFD", (java.lang.Throwable)var37);
    org.jsecurity.authc.SimpleAuthenticationInfo var41 = new org.jsecurity.authc.SimpleAuthenticationInfo((java.lang.Object)"org.jsecurity.config.ConfigurationException: dd\uFFFD", (java.lang.Object)var39, "a2b823b1e72eae2b727289df8a00a89df8a0bab6ad8a89c4c5c7a9b62a270000");
    org.jsecurity.subject.PrincipalCollection var42 = var41.getPrincipals();
    org.jsecurity.authc.AuthenticationInfo var43 = var11.afterAllAttempts((org.jsecurity.authc.AuthenticationToken)var26, (org.jsecurity.authc.AuthenticationInfo)var41);
    var10.setModularAuthenticationStrategy((org.jsecurity.authc.pam.ModularAuthenticationStrategy)var11);
    org.jsecurity.subject.RememberMeManager var45 = var10.getRememberMeManager();
    org.jsecurity.authc.pam.ModularRealmAuthenticator var46 = new org.jsecurity.authc.pam.ModularRealmAuthenticator();
    var10.setAuthenticator((org.jsecurity.authc.Authenticator)var46);
    var1.put((java.lang.Object)var2, (java.lang.Object)var46);
    org.jsecurity.realm.activedirectory.ActiveDirectoryRealm var49 = new org.jsecurity.realm.activedirectory.ActiveDirectoryRealm();
    org.jsecurity.authc.credential.Sha256CredentialsMatcher var50 = new org.jsecurity.authc.credential.Sha256CredentialsMatcher();
    var49.setCredentialsMatcher((org.jsecurity.authc.credential.CredentialsMatcher)var50);
    java.lang.String var52 = var49.getAuthorizationCacheName();
    var49.setUrl("hi!");
    org.jsecurity.realm.ldap.DefaultLdapContextFactory var55 = new org.jsecurity.realm.ldap.DefaultLdapContextFactory();
    var49.setLdapContextFactory((org.jsecurity.realm.ldap.LdapContextFactory)var55);
    var55.setAuthentication("dd\uFFFD");
    var55.setSystemPassword("hi!");
    org.jsecurity.config.ReflectionBuilder var61 = new org.jsecurity.config.ReflectionBuilder();
    org.jsecurity.io.IniResource var62 = new org.jsecurity.io.IniResource();
    java.util.Map var63 = var62.getSections();
    var61.setObjects(var63);
    org.jsecurity.realm.activedirectory.ActiveDirectoryRealm var65 = new org.jsecurity.realm.activedirectory.ActiveDirectoryRealm();
    var65.init();
    var65.init();
    org.jsecurity.config.ReflectionBuilder var68 = new org.jsecurity.config.ReflectionBuilder();
    org.jsecurity.config.ReflectionBuilder var69 = new org.jsecurity.config.ReflectionBuilder();
    org.jsecurity.io.IniResource var70 = new org.jsecurity.io.IniResource();
    var70.setCharsetName("org.jsecurity.authz.UnauthorizedException: org.jsecurity.session.ExpiredSessionException: ");
    java.util.Map var73 = var70.getSections();
    java.util.Map var74 = var69.buildObjects(var73);
    org.jsecurity.config.ReflectionBuilder var75 = new org.jsecurity.config.ReflectionBuilder();
    org.jsecurity.io.IniResource var76 = new org.jsecurity.io.IniResource();
    var76.setCharsetName("org.jsecurity.authz.UnauthorizedException: org.jsecurity.session.ExpiredSessionException: ");
    java.util.Map var79 = var76.getSections();
    java.util.Map var80 = var75.buildObjects(var79);
    java.util.Map var81 = var69.buildObjects(var80);
    java.util.Map var82 = var68.buildObjects(var81);
    var65.setGroupRolesMap(var82);
    var61.setObjects(var82);
    org.jsecurity.config.ReflectionBuilder var85 = new org.jsecurity.config.ReflectionBuilder(var82);
    var55.setAdditionalEnvironment(var82);
    var2.setAttributes(var82);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var9);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var14);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var20 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var21);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var25);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var32 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var33);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var42);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var43);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var45);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var52);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var63);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var73);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var74);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var79);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var80);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var81);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var82);

  }

  public void test247() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest2.test247");


    org.jsecurity.cache.HashtableCache var1 = new org.jsecurity.cache.HashtableCache("\u0000\u0000\u0000");
    org.jsecurity.session.mgt.SimpleSession var2 = new org.jsecurity.session.mgt.SimpleSession();
    var2.touch();
    org.jsecurity.authz.UnauthenticatedException var6 = new org.jsecurity.authz.UnauthenticatedException();
    org.jsecurity.config.UnresolveableReferenceException var7 = new org.jsecurity.config.UnresolveableReferenceException("", (java.lang.Throwable)var6);
    org.jsecurity.cache.CacheException var8 = new org.jsecurity.cache.CacheException("org.jsecurity.config.ConfigurationException: dd\uFFFD", (java.lang.Throwable)var6);
    java.lang.Object var9 = var2.removeAttribute((java.lang.Object)var8);
    org.jsecurity.mgt.DefaultSecurityManager var10 = new org.jsecurity.mgt.DefaultSecurityManager();
    org.jsecurity.authc.pam.AllSuccessfulModularAuthenticationStrategy var11 = new org.jsecurity.authc.pam.AllSuccessfulModularAuthenticationStrategy();
    org.jsecurity.authc.pam.AllSuccessfulModularAuthenticationStrategy var12 = new org.jsecurity.authc.pam.AllSuccessfulModularAuthenticationStrategy();
    char[] var14 = new char[] { };
    org.jsecurity.authc.UsernamePasswordToken var16 = new org.jsecurity.authc.UsernamePasswordToken("hi!", var14, true);
    org.jsecurity.authc.SimpleAccount var17 = new org.jsecurity.authc.SimpleAccount();
    var17.setCredentialsExpired(false);
    boolean var20 = var17.isLocked();
    org.jsecurity.authc.AuthenticationInfo var21 = var12.afterAllAttempts((org.jsecurity.authc.AuthenticationToken)var16, (org.jsecurity.authc.AuthenticationInfo)var17);
    char[] var25 = new char[] { '4', '#'};
    org.jsecurity.authc.UsernamePasswordToken var26 = new org.jsecurity.authc.UsernamePasswordToken("\u0000\u0000", var25);
    org.jsecurity.authc.SimpleAccount var27 = new org.jsecurity.authc.SimpleAccount();
    var27.setCredentialsExpired(false);
    var27.setCredentialsExpired(false);
    boolean var32 = var27.isCredentialsExpired();
    org.jsecurity.authc.AuthenticationInfo var33 = var12.afterAllAttempts((org.jsecurity.authc.AuthenticationToken)var26, (org.jsecurity.authc.AuthenticationInfo)var27);
    org.jsecurity.authz.UnauthenticatedException var37 = new org.jsecurity.authz.UnauthenticatedException();
    org.jsecurity.config.UnresolveableReferenceException var38 = new org.jsecurity.config.UnresolveableReferenceException("", (java.lang.Throwable)var37);
    org.jsecurity.cache.CacheException var39 = new org.jsecurity.cache.CacheException("org.jsecurity.config.ConfigurationException: dd\uFFFD", (java.lang.Throwable)var37);
    org.jsecurity.authc.SimpleAuthenticationInfo var41 = new org.jsecurity.authc.SimpleAuthenticationInfo((java.lang.Object)"org.jsecurity.config.ConfigurationException: dd\uFFFD", (java.lang.Object)var39, "a2b823b1e72eae2b727289df8a00a89df8a0bab6ad8a89c4c5c7a9b62a270000");
    org.jsecurity.subject.PrincipalCollection var42 = var41.getPrincipals();
    org.jsecurity.authc.AuthenticationInfo var43 = var11.afterAllAttempts((org.jsecurity.authc.AuthenticationToken)var26, (org.jsecurity.authc.AuthenticationInfo)var41);
    var10.setModularAuthenticationStrategy((org.jsecurity.authc.pam.ModularAuthenticationStrategy)var11);
    org.jsecurity.subject.RememberMeManager var45 = var10.getRememberMeManager();
    org.jsecurity.authc.pam.ModularRealmAuthenticator var46 = new org.jsecurity.authc.pam.ModularRealmAuthenticator();
    var10.setAuthenticator((org.jsecurity.authc.Authenticator)var46);
    var1.put((java.lang.Object)var2, (java.lang.Object)var46);
    org.jsecurity.session.mgt.ImmutableProxiedSession var49 = new org.jsecurity.session.mgt.ImmutableProxiedSession((org.jsecurity.session.Session)var2);
    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      var49.stop();
      fail("Expected exception of type org.jsecurity.session.InvalidSessionException");
    } catch (org.jsecurity.session.InvalidSessionException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var9);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var14);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var20 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var21);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var25);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var32 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var33);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var42);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var43);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var45);

  }

  public void test248() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest2.test248");


    org.jsecurity.session.InvalidSessionException var1 = new org.jsecurity.session.InvalidSessionException("3c88ea99-8ee7-47bc-94b1-7ac2b7eddf5e");

  }

  public void test249() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest2.test249");


    org.jsecurity.mgt.DefaultSecurityManager var0 = new org.jsecurity.mgt.DefaultSecurityManager();
    java.io.InputStream var2 = org.jsecurity.util.ClassUtils.getResourceAsStream("");
    java.lang.Object[] var3 = new java.lang.Object[] { var2};
    java.util.List var4 = org.jsecurity.util.CollectionUtils.asList(var3);
    org.jsecurity.authc.pam.ModularRealmAuthenticator var5 = new org.jsecurity.authc.pam.ModularRealmAuthenticator(var4);
    org.jsecurity.authc.pam.AllSuccessfulModularAuthenticationStrategy var6 = new org.jsecurity.authc.pam.AllSuccessfulModularAuthenticationStrategy();
    var5.setModularAuthenticationStrategy((org.jsecurity.authc.pam.ModularAuthenticationStrategy)var6);
    org.jsecurity.authz.SimpleAuthorizationInfo var8 = new org.jsecurity.authz.SimpleAuthorizationInfo();
    var8.addStringPermission("hi!");
    java.io.InputStream var12 = org.jsecurity.util.ClassUtils.getResourceAsStream("");
    java.lang.Object[] var13 = new java.lang.Object[] { var12};
    java.util.List var14 = org.jsecurity.util.CollectionUtils.asList(var13);
    var8.addRoles((java.util.Collection)var14);
    var5.setAuthenticationListeners((java.util.Collection)var14);
    var0.setSessionListeners((java.util.Collection)var14);
    org.jsecurity.authc.pam.ModularRealmAuthenticator var18 = new org.jsecurity.authc.pam.ModularRealmAuthenticator();
    org.jsecurity.authz.permission.InvalidPermissionStringException var21 = new org.jsecurity.authz.permission.InvalidPermissionStringException("", "dd\uFFFD");
    org.jsecurity.JSecurityException var23 = new org.jsecurity.JSecurityException("");
    org.jsecurity.authc.SimpleAuthenticationInfo var25 = new org.jsecurity.authc.SimpleAuthenticationInfo((java.lang.Object)var21, (java.lang.Object)"", "org.jsecurity.authz.UnauthorizedException: org.jsecurity.session.ExpiredSessionException: ");
    org.jsecurity.subject.PrincipalCollection var26 = var25.getPrincipals();
    var18.onLogout(var26);
    var0.setAuthenticator((org.jsecurity.authc.Authenticator)var18);
    org.jsecurity.codec.CodecException var31 = new org.jsecurity.codec.CodecException("dd\uFFFD");
    org.jsecurity.authc.ConcurrentAccessException var32 = new org.jsecurity.authc.ConcurrentAccessException("org.jsecurity.authz.UnauthorizedException: org.jsecurity.session.ExpiredSessionException: ", (java.lang.Throwable)var31);
    org.jsecurity.subject.SimplePrincipalCollection var34 = new org.jsecurity.subject.SimplePrincipalCollection((java.lang.Object)var31, "");
    org.jsecurity.authc.pam.FirstSuccessfulAuthenticationStrategy var35 = new org.jsecurity.authc.pam.FirstSuccessfulAuthenticationStrategy();
    org.jsecurity.authz.UnauthorizedException var37 = new org.jsecurity.authz.UnauthorizedException("org.jsecurity.config.ConfigurationException: dd\uFFFD");
    java.lang.Throwable[] var38 = var37.getSuppressed();
    java.util.List var39 = org.jsecurity.util.CollectionUtils.asList((java.lang.Object[])var38);
    org.jsecurity.authc.UsernamePasswordToken var40 = new org.jsecurity.authc.UsernamePasswordToken();
    java.lang.String var41 = var40.getUsername();
    java.net.InetAddress var42 = var40.getInetAddress();
    org.jsecurity.authc.AuthenticationInfo var43 = var35.beforeAllAttempts((java.util.Collection)var39, (org.jsecurity.authc.AuthenticationToken)var40);
    org.jsecurity.session.UnknownSessionException var48 = new org.jsecurity.session.UnknownSessionException("dd\uFFFD", (java.io.Serializable)100.0f);
    org.jsecurity.subject.SubjectException var49 = new org.jsecurity.subject.SubjectException("dd\uFFFD", (java.lang.Throwable)var48);
    org.jsecurity.io.SerializationException var50 = new org.jsecurity.io.SerializationException("", (java.lang.Throwable)var49);
    java.lang.Throwable[] var51 = var49.getSuppressed();
    java.util.Set var52 = org.jsecurity.util.CollectionUtils.asSet((java.lang.Object[])var51);
    org.jsecurity.authc.SimpleAccount var53 = new org.jsecurity.authc.SimpleAccount((org.jsecurity.subject.PrincipalCollection)var34, (java.lang.Object)var39, var52);
    java.io.InputStream var55 = org.jsecurity.util.ClassUtils.getResourceAsStream("");
    java.lang.Object[] var56 = new java.lang.Object[] { var55};
    java.util.List var57 = org.jsecurity.util.CollectionUtils.asList(var56);
    org.jsecurity.authc.pam.ModularRealmAuthenticator var58 = new org.jsecurity.authc.pam.ModularRealmAuthenticator(var57);
    org.jsecurity.subject.SimplePrincipalCollection var60 = new org.jsecurity.subject.SimplePrincipalCollection((java.util.Collection)var57, "org.jsecurity.authz.UnauthorizedException: org.jsecurity.session.ExpiredSessionException: ");
    org.jsecurity.io.ResourceException var64 = new org.jsecurity.io.ResourceException("hi!");
    org.jsecurity.authc.UnknownAccountException var65 = new org.jsecurity.authc.UnknownAccountException((java.lang.Throwable)var64);
    org.jsecurity.session.StoppedSessionException var66 = new org.jsecurity.session.StoppedSessionException("dd\uFFFD", (java.io.Serializable)var64);
    org.jsecurity.session.UnknownSessionException var67 = new org.jsecurity.session.UnknownSessionException("org.jsecurity.authz.UnauthorizedException: org.jsecurity.session.ExpiredSessionException: ", (java.lang.Throwable)var64);
    boolean var68 = var60.equals((java.lang.Object)var64);
    var34.addAll((org.jsecurity.subject.PrincipalCollection)var60);
    org.jsecurity.session.UnknownSessionException var74 = new org.jsecurity.session.UnknownSessionException("dd\uFFFD", (java.io.Serializable)100.0f);
    org.jsecurity.subject.SubjectException var75 = new org.jsecurity.subject.SubjectException("dd\uFFFD", (java.lang.Throwable)var74);
    org.jsecurity.io.SerializationException var76 = new org.jsecurity.io.SerializationException("", (java.lang.Throwable)var75);
    java.lang.Throwable[] var77 = var75.getSuppressed();
    java.util.List var78 = org.jsecurity.util.CollectionUtils.asList((java.lang.Object[])var77);
    boolean var79 = var0.isPermittedAll((org.jsecurity.subject.PrincipalCollection)var34, (java.util.Collection)var78);
    org.jsecurity.subject.DelegatingSubject var80 = new org.jsecurity.subject.DelegatingSubject((org.jsecurity.mgt.SecurityManager)var0);
    var80.logout();
    java.lang.String[] var86 = org.jsecurity.util.StringUtils.split("org.jsecurity.config.ConfigurationException: dd\uFFFD", '4', '4', '4');
    boolean[] var87 = var80.isPermitted(var86);
    java.lang.Object var88 = var80.getPrincipal();
    java.lang.String[] var93 = org.jsecurity.util.StringUtils.split("org.jsecurity.config.ConfigurationException: dd\uFFFD", '4', '4', '4');
    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      var80.checkPermissions(var93);
      fail("Expected exception of type org.jsecurity.authz.UnauthenticatedException");
    } catch (org.jsecurity.authz.UnauthenticatedException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var2);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var3);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var4);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var12);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var13);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var14);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var26);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var38);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var39);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var41);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var42);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var43);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var51);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var52);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var55);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var56);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var57);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var68 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var77);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var78);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var79 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var86);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var87);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var88);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var93);

  }

  public void test250() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest2.test250");


    org.jsecurity.authz.SimpleAuthorizationInfo var0 = new org.jsecurity.authz.SimpleAuthorizationInfo();
    org.jsecurity.session.UnknownSessionException var5 = new org.jsecurity.session.UnknownSessionException("dd\uFFFD", (java.io.Serializable)100.0f);
    org.jsecurity.subject.SubjectException var6 = new org.jsecurity.subject.SubjectException("dd\uFFFD", (java.lang.Throwable)var5);
    org.jsecurity.io.SerializationException var7 = new org.jsecurity.io.SerializationException("", (java.lang.Throwable)var6);
    java.lang.Throwable[] var8 = var6.getSuppressed();
    java.util.Set var9 = org.jsecurity.util.CollectionUtils.asSet((java.lang.Object[])var8);
    var0.setStringPermissions(var9);
    java.util.Set var11 = var0.getRoles();
    org.jsecurity.authz.SimpleAuthorizingAccount var12 = new org.jsecurity.authz.SimpleAuthorizingAccount();
    java.util.Set var13 = var12.getSimpleRoles();
    org.jsecurity.authz.SimpleRole var14 = new org.jsecurity.authz.SimpleRole();
    org.jsecurity.authz.SimpleAuthorizationInfo var15 = new org.jsecurity.authz.SimpleAuthorizationInfo();
    var15.addRole("a2b823b1e72eae2b727289df8a00a89df8a0bab6ad8a89c4c5c7a9b62a270000");
    org.jsecurity.session.UnknownSessionException var22 = new org.jsecurity.session.UnknownSessionException("dd\uFFFD", (java.io.Serializable)100.0f);
    org.jsecurity.subject.SubjectException var23 = new org.jsecurity.subject.SubjectException("dd\uFFFD", (java.lang.Throwable)var22);
    org.jsecurity.io.SerializationException var24 = new org.jsecurity.io.SerializationException("", (java.lang.Throwable)var23);
    java.lang.Throwable[] var25 = var23.getSuppressed();
    java.util.Set var26 = org.jsecurity.util.CollectionUtils.asSet((java.lang.Object[])var25);
    var15.addRoles((java.util.Collection)var26);
    var14.addAll((java.util.Collection)var26);
    org.jsecurity.authz.SimpleRole var30 = new org.jsecurity.authz.SimpleRole();
    org.jsecurity.authz.permission.WildcardPermission var33 = new org.jsecurity.authz.permission.WildcardPermission("hi!", false);
    boolean var34 = var30.isPermitted((org.jsecurity.authz.Permission)var33);
    org.jsecurity.session.InvalidSessionException var35 = new org.jsecurity.session.InvalidSessionException("org.jsecurity.config.ConfigurationException: dd\uFFFD", (java.io.Serializable)var33);
    org.jsecurity.authz.SimpleRole var36 = new org.jsecurity.authz.SimpleRole();
    org.jsecurity.authz.permission.WildcardPermission var39 = new org.jsecurity.authz.permission.WildcardPermission("hi!", false);
    boolean var40 = var36.isPermitted((org.jsecurity.authz.Permission)var39);
    boolean var41 = var33.implies((org.jsecurity.authz.Permission)var39);
    boolean var42 = var14.isPermitted((org.jsecurity.authz.Permission)var39);
    boolean var43 = var12.isPermitted((org.jsecurity.authz.Permission)var39);
    var0.addObjectPermission((org.jsecurity.authz.Permission)var39);
    org.jsecurity.authz.aop.GuestAnnotationHandler var45 = new org.jsecurity.authz.aop.GuestAnnotationHandler();
    java.lang.Class var46 = var45.getAnnotationClass();
    java.util.Collection var47 = org.jsecurity.util.CollectionUtils.emptyCollection(var46);
    var0.addRoles(var47);
    org.jsecurity.cache.HashtableCache var50 = new org.jsecurity.cache.HashtableCache("783ccd31-48a8-42dd-890f-df885a7baaff");
    java.lang.String var51 = var50.toString();
    java.util.Set var52 = var50.values();
    var0.setRoles(var52);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var8);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var9);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var11);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var13);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var25);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var26);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var34 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var40 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var41 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var42 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var43 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var46);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var47);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var51 + "' != '" + "HashtableCache [783ccd31-48a8-42dd-890f-df885a7baaff]"+ "'", var51.equals("HashtableCache [783ccd31-48a8-42dd-890f-df885a7baaff]"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var52);

  }

  public void test251() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest2.test251");


    org.jsecurity.crypto.BlowfishCipher var0 = new org.jsecurity.crypto.BlowfishCipher();
    byte[] var4 = new byte[] { (byte)100, (byte)100, (byte)(-1)};
    java.lang.String var5 = org.jsecurity.codec.CodecSupport.toString(var4);
    byte[] var7 = org.jsecurity.codec.Base64.decode("hi!");
    byte[] var8 = var0.encrypt(var4, var7);
    org.jsecurity.crypto.BlowfishCipher var9 = new org.jsecurity.crypto.BlowfishCipher();
    byte[] var13 = new byte[] { (byte)100, (byte)100, (byte)(-1)};
    java.lang.String var14 = org.jsecurity.codec.CodecSupport.toString(var13);
    byte[] var16 = org.jsecurity.codec.Base64.decode("hi!");
    byte[] var17 = var9.encrypt(var13, var16);
    org.jsecurity.crypto.BlowfishCipher var18 = new org.jsecurity.crypto.BlowfishCipher();
    java.security.Key var19 = var18.getKey();
    java.security.Key var20 = var18.getKey();
    var9.setKey(var20);
    var0.setKey(var20);
    byte[] var26 = new byte[] { (byte)100, (byte)100, (byte)(-1)};
    java.lang.String var27 = org.jsecurity.codec.CodecSupport.toString(var26);
    byte[] var29 = org.jsecurity.codec.Base64.encode(var26, false);
    java.lang.String var30 = org.jsecurity.codec.CodecSupport.toString(var29);
    org.jsecurity.crypto.hash.Sha512Hash var32 = org.jsecurity.crypto.hash.Sha512Hash.fromBase64String("org.jsecurity.config.ConfigurationException: dd\uFFFD");
    byte[] var33 = var32.getBytes();
    java.lang.String var34 = var32.toString();
    byte[] var35 = var32.getBytes();
    org.jsecurity.crypto.hash.Md2Hash var37 = org.jsecurity.crypto.hash.Md2Hash.fromHexString("6464ff");
    java.lang.String var38 = var37.toString();
    byte[] var39 = var37.getBytes();
    byte[] var40 = var37.getBytes();
    var32.setBytes(var40);
    java.lang.String var42 = org.jsecurity.codec.CodecSupport.toString(var40);
    byte[] var43 = var0.encrypt(var29, var40);
    org.jsecurity.crypto.BlowfishCipher var44 = new org.jsecurity.crypto.BlowfishCipher();
    java.security.Key var45 = org.jsecurity.crypto.BlowfishCipher.generateNewKey();
    var44.setKey(var45);
    java.security.Key var47 = org.jsecurity.crypto.BlowfishCipher.generateNewKey();
    var44.setKey(var47);
    var0.setKey(var47);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var4);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var5 + "' != '" + "dd\uFFFD"+ "'", var5.equals("dd\uFFFD"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var7);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var8);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var13);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var14 + "' != '" + "dd\uFFFD"+ "'", var14.equals("dd\uFFFD"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var16);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var17);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var19);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var20);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var26);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var27 + "' != '" + "dd\uFFFD"+ "'", var27.equals("dd\uFFFD"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var29);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var30 + "' != '" + "ZGT/"+ "'", var30.equals("ZGT/"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var32);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var33);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var34 + "' != '" + "a2b823b1e72eae2b727289df8a00a89df8a0bab6ad8a89c4c5c7a9b62a270000"+ "'", var34.equals("a2b823b1e72eae2b727289df8a00a89df8a0bab6ad8a89c4c5c7a9b62a270000"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var35);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var37);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var38 + "' != '" + "6464ff"+ "'", var38.equals("6464ff"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var39);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var40);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var42 + "' != '" + "dd\uFFFD"+ "'", var42.equals("dd\uFFFD"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var43);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var45);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var47);

  }

  public void test252() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest2.test252");


    org.jsecurity.authz.permission.InvalidPermissionStringException var2 = new org.jsecurity.authz.permission.InvalidPermissionStringException("", "dd\uFFFD");
    org.jsecurity.JSecurityException var4 = new org.jsecurity.JSecurityException("");
    org.jsecurity.authc.SimpleAuthenticationInfo var6 = new org.jsecurity.authc.SimpleAuthenticationInfo((java.lang.Object)var2, (java.lang.Object)"", "org.jsecurity.authz.UnauthorizedException: org.jsecurity.session.ExpiredSessionException: ");
    org.jsecurity.subject.PrincipalCollection var7 = var6.getPrincipals();
    org.jsecurity.session.UnknownSessionException var11 = new org.jsecurity.session.UnknownSessionException("dd\uFFFD", (java.io.Serializable)100.0f);
    org.jsecurity.session.SessionException var13 = new org.jsecurity.session.SessionException("dd\uFFFD", (java.lang.Throwable)var11, (java.io.Serializable)0);
    org.jsecurity.authc.SimpleAccount var14 = new org.jsecurity.authc.SimpleAccount(var7, (java.lang.Object)var13);
    org.jsecurity.session.UnknownSessionException var18 = new org.jsecurity.session.UnknownSessionException("dd\uFFFD", (java.io.Serializable)100.0f);
    org.jsecurity.session.SessionException var20 = new org.jsecurity.session.SessionException("dd\uFFFD", (java.lang.Throwable)var18, (java.io.Serializable)0);
    org.jsecurity.authc.SimpleAuthenticationInfo var23 = new org.jsecurity.authc.SimpleAuthenticationInfo((java.lang.Object)0, (java.lang.Object)10, "hi!");
    java.lang.Object var24 = var23.getCredentials();
    java.lang.String var25 = var23.toString();
    org.jsecurity.realm.text.TextConfigurationRealm var26 = new org.jsecurity.realm.text.TextConfigurationRealm();
    java.io.InputStream var28 = org.jsecurity.util.ClassUtils.getResourceAsStream("");
    java.lang.Object[] var29 = new java.lang.Object[] { var28};
    java.util.List var30 = org.jsecurity.util.CollectionUtils.asList(var29);
    org.jsecurity.authc.pam.ModularRealmAuthenticator var31 = new org.jsecurity.authc.pam.ModularRealmAuthenticator(var30);
    org.jsecurity.subject.SimplePrincipalCollection var33 = new org.jsecurity.subject.SimplePrincipalCollection((java.util.Collection)var30, "org.jsecurity.authz.UnauthorizedException: org.jsecurity.session.ExpiredSessionException: ");
    org.jsecurity.session.UnknownSessionException var38 = new org.jsecurity.session.UnknownSessionException("dd\uFFFD", (java.io.Serializable)100.0f);
    org.jsecurity.session.SessionException var40 = new org.jsecurity.session.SessionException("dd\uFFFD", (java.lang.Throwable)var38, (java.io.Serializable)0);
    org.jsecurity.session.SessionException var41 = new org.jsecurity.session.SessionException("dd\uFFFD", (java.lang.Throwable)var38);
    var33.add((java.lang.Object)var41, "org.jsecurity.config.ConfigurationException: dd\uFFFD");
    var26.onLogout((org.jsecurity.subject.PrincipalCollection)var33);
    org.jsecurity.cache.HashtableCacheManager var45 = new org.jsecurity.cache.HashtableCacheManager();
    org.jsecurity.cache.Cache var47 = var45.getCache("\u0000\u0000");
    var26.setAuthorizationCache(var47);
    org.jsecurity.codec.CodecException var51 = new org.jsecurity.codec.CodecException("dd\uFFFD");
    org.jsecurity.authc.ConcurrentAccessException var52 = new org.jsecurity.authc.ConcurrentAccessException("org.jsecurity.authz.UnauthorizedException: org.jsecurity.session.ExpiredSessionException: ", (java.lang.Throwable)var51);
    org.jsecurity.subject.SimplePrincipalCollection var54 = new org.jsecurity.subject.SimplePrincipalCollection((java.lang.Object)var51, "");
    var26.onLogout((org.jsecurity.subject.PrincipalCollection)var54);
    var23.setPrincipals((org.jsecurity.subject.PrincipalCollection)var54);
    org.jsecurity.realm.activedirectory.ActiveDirectoryRealm var57 = new org.jsecurity.realm.activedirectory.ActiveDirectoryRealm();
    org.jsecurity.authc.credential.Sha256CredentialsMatcher var58 = new org.jsecurity.authc.credential.Sha256CredentialsMatcher();
    var57.setCredentialsMatcher((org.jsecurity.authc.credential.CredentialsMatcher)var58);
    org.jsecurity.realm.activedirectory.ActiveDirectoryRealm var60 = new org.jsecurity.realm.activedirectory.ActiveDirectoryRealm();
    org.jsecurity.authc.credential.Sha256CredentialsMatcher var61 = new org.jsecurity.authc.credential.Sha256CredentialsMatcher();
    var60.setCredentialsMatcher((org.jsecurity.authc.credential.CredentialsMatcher)var61);
    java.lang.String var63 = var60.getAuthorizationCacheName();
    var60.setUrl("hi!");
    org.jsecurity.realm.ldap.DefaultLdapContextFactory var66 = new org.jsecurity.realm.ldap.DefaultLdapContextFactory();
    var60.setLdapContextFactory((org.jsecurity.realm.ldap.LdapContextFactory)var66);
    var66.setAuthentication("org.jsecurity.authz.UnauthorizedException: org.jsecurity.session.ExpiredSessionException: ");
    var57.setLdapContextFactory((org.jsecurity.realm.ldap.LdapContextFactory)var66);
    var66.setReferral("a2b823b1e72eae2b727289df8a00a89df8a0bab6ad8a89c4c5c7a9b62a270000");
    var66.setUrl("\u0000\u0000");
    java.util.Set var77 = org.jsecurity.util.PermissionUtils.toPermissionStrings("org.jsecurity.config.ConfigurationException: dd\uFFFD");
    org.jsecurity.authz.SimpleAuthorizationInfo var78 = new org.jsecurity.authz.SimpleAuthorizationInfo(var77);
    org.jsecurity.authz.SimpleRole var79 = new org.jsecurity.authz.SimpleRole();
    java.lang.String var80 = var79.getName();
    org.jsecurity.session.UnknownSessionException var85 = new org.jsecurity.session.UnknownSessionException("dd\uFFFD", (java.io.Serializable)100.0f);
    org.jsecurity.subject.SubjectException var86 = new org.jsecurity.subject.SubjectException("dd\uFFFD", (java.lang.Throwable)var85);
    org.jsecurity.io.SerializationException var87 = new org.jsecurity.io.SerializationException("", (java.lang.Throwable)var86);
    java.lang.Throwable[] var88 = var86.getSuppressed();
    java.util.Set var89 = org.jsecurity.util.CollectionUtils.asSet((java.lang.Object[])var88);
    var79.setPermissions(var89);
    org.jsecurity.authz.SimpleAuthorizingAccount var91 = new org.jsecurity.authz.SimpleAuthorizingAccount((org.jsecurity.subject.PrincipalCollection)var54, (java.lang.Object)"\u0000\u0000", "org.jsecurity.authc.AccountException: hi!", var77, var89);
    org.jsecurity.authz.SimpleAuthorizationInfo var92 = new org.jsecurity.authz.SimpleAuthorizationInfo(var89);
    var14.addRole((java.util.Collection)var89);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var7);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var24 + "' != '" + 10+ "'", var24.equals(10));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var28);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var29);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var30);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var47);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var63);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var77);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var80);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var88);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var89);

  }

  public void test253() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest2.test253");


    org.jsecurity.session.mgt.eis.MemorySessionDAO var0 = new org.jsecurity.session.mgt.eis.MemorySessionDAO();
    org.jsecurity.cache.HashtableCache var2 = new org.jsecurity.cache.HashtableCache("b017e95a-a08d-4f3a-bab8-cc9b39ef5331");
    var0.setActiveSessionsCache((org.jsecurity.cache.Cache)var2);
    org.jsecurity.realm.text.TextConfigurationRealm var4 = new org.jsecurity.realm.text.TextConfigurationRealm();
    org.jsecurity.cache.HashtableCache var6 = new org.jsecurity.cache.HashtableCache("orgjsecurityauthcCredentialsException783ccd3148a842dd890fdf885a7baafAA==");
    int var7 = var6.size();
    org.jsecurity.session.UnknownSessionException var12 = new org.jsecurity.session.UnknownSessionException("dd\uFFFD", (java.io.Serializable)100.0f);
    org.jsecurity.subject.SubjectException var13 = new org.jsecurity.subject.SubjectException("dd\uFFFD", (java.lang.Throwable)var12);
    org.jsecurity.authc.AccountException var14 = new org.jsecurity.authc.AccountException("hi!", (java.lang.Throwable)var13);
    org.jsecurity.session.UnknownSessionException var15 = new org.jsecurity.session.UnknownSessionException((java.lang.Throwable)var13);
    org.jsecurity.codec.CodecException var16 = new org.jsecurity.codec.CodecException((java.lang.Throwable)var13);
    org.jsecurity.config.UnresolveableReferenceException var17 = new org.jsecurity.config.UnresolveableReferenceException((java.lang.Throwable)var13);
    char[] var21 = new char[] { ' ', ' '};
    org.jsecurity.authc.UsernamePasswordToken var22 = new org.jsecurity.authc.UsernamePasswordToken("hi!", var21);
    char[] var26 = new char[] { '4', '#'};
    org.jsecurity.authc.UsernamePasswordToken var27 = new org.jsecurity.authc.UsernamePasswordToken("\u0000\u0000", var26);
    var22.setPassword(var26);
    var6.put((java.lang.Object)var13, (java.lang.Object)var26);
    var4.setAuthorizationCache((org.jsecurity.cache.Cache)var6);
    var0.setActiveSessionsCache((org.jsecurity.cache.Cache)var6);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var7 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var21);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var26);

  }

  public void test254() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest2.test254");


    org.jsecurity.authz.SimpleAuthorizationInfo var0 = new org.jsecurity.authz.SimpleAuthorizationInfo();
    var0.addRole("a2b823b1e72eae2b727289df8a00a89df8a0bab6ad8a89c4c5c7a9b62a270000");
    org.jsecurity.authz.SimpleAuthorizationInfo var3 = new org.jsecurity.authz.SimpleAuthorizationInfo();
    var3.addRole("a2b823b1e72eae2b727289df8a00a89df8a0bab6ad8a89c4c5c7a9b62a270000");
    org.jsecurity.session.UnknownSessionException var10 = new org.jsecurity.session.UnknownSessionException("dd\uFFFD", (java.io.Serializable)100.0f);
    org.jsecurity.subject.SubjectException var11 = new org.jsecurity.subject.SubjectException("dd\uFFFD", (java.lang.Throwable)var10);
    org.jsecurity.io.SerializationException var12 = new org.jsecurity.io.SerializationException("", (java.lang.Throwable)var11);
    java.lang.Throwable[] var13 = var11.getSuppressed();
    java.util.Set var14 = org.jsecurity.util.CollectionUtils.asSet((java.lang.Object[])var13);
    var3.addRoles((java.util.Collection)var14);
    var0.setObjectPermissions(var14);
    java.io.InputStream var18 = org.jsecurity.util.ClassUtils.getResourceAsStream("");
    java.lang.Object[] var19 = new java.lang.Object[] { var18};
    java.util.List var20 = org.jsecurity.util.CollectionUtils.asList(var19);
    org.jsecurity.authc.pam.ModularRealmAuthenticator var21 = new org.jsecurity.authc.pam.ModularRealmAuthenticator(var20);
    org.jsecurity.subject.SimplePrincipalCollection var23 = new org.jsecurity.subject.SimplePrincipalCollection((java.util.Collection)var20, "org.jsecurity.authz.UnauthorizedException: org.jsecurity.session.ExpiredSessionException: ");
    java.util.Set var24 = var23.getRealmNames();
    java.io.InputStream var26 = org.jsecurity.util.ClassUtils.getResourceAsStream("");
    java.lang.Object[] var27 = new java.lang.Object[] { var26};
    java.util.List var28 = org.jsecurity.util.CollectionUtils.asList(var27);
    org.jsecurity.authc.pam.ModularRealmAuthenticator var29 = new org.jsecurity.authc.pam.ModularRealmAuthenticator(var28);
    org.jsecurity.subject.SimplePrincipalCollection var31 = new org.jsecurity.subject.SimplePrincipalCollection((java.util.Collection)var28, "org.jsecurity.authz.UnauthorizedException: org.jsecurity.session.ExpiredSessionException: ");
    org.jsecurity.session.UnknownSessionException var36 = new org.jsecurity.session.UnknownSessionException("dd\uFFFD", (java.io.Serializable)100.0f);
    org.jsecurity.session.SessionException var38 = new org.jsecurity.session.SessionException("dd\uFFFD", (java.lang.Throwable)var36, (java.io.Serializable)0);
    org.jsecurity.session.SessionException var39 = new org.jsecurity.session.SessionException("dd\uFFFD", (java.lang.Throwable)var36);
    var31.add((java.lang.Object)var39, "org.jsecurity.config.ConfigurationException: dd\uFFFD");
    java.util.Set var42 = var31.asSet();
    var23.addAll((java.util.Collection)var42, "6464ff");
    var0.setStringPermissions(var42);
    org.jsecurity.authz.permission.WildcardPermissionResolver var47 = new org.jsecurity.authz.permission.WildcardPermissionResolver();
    java.util.Set var48 = org.jsecurity.util.PermissionUtils.resolveDelimitedPermissions("7edc3e5f-37f7-4a22-9779-4609545bccd8", (org.jsecurity.authz.permission.PermissionResolver)var47);
    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      var0.addStringPermissions((java.util.Collection)var48);
      fail("Expected exception of type java.lang.UnsupportedOperationException");
    } catch (java.lang.UnsupportedOperationException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var13);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var14);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var18);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var19);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var20);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var24);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var26);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var27);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var28);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var42);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var48);

  }

  public void test255() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest2.test255");


    org.jsecurity.session.mgt.quartz.QuartzSessionValidationScheduler var0 = new org.jsecurity.session.mgt.quartz.QuartzSessionValidationScheduler();
    boolean var1 = var0.isEnabled();
    var0.enableSessionValidation();
    boolean var3 = var0.isEnabled();
    boolean var4 = var0.isEnabled();
    boolean var5 = var0.isEnabled();
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var1 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var3 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var4 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var5 == false);

  }

  public void test256() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest2.test256");


    org.jsecurity.session.mgt.DefaultSessionManager var0 = new org.jsecurity.session.mgt.DefaultSessionManager();
    org.jsecurity.session.mgt.eis.MemorySessionDAO var1 = new org.jsecurity.session.mgt.eis.MemorySessionDAO();
    org.jsecurity.cache.Cache var2 = var1.getActiveSessionsCache();
    org.jsecurity.cache.CacheManager var3 = var1.getCacheManager();
    org.jsecurity.cache.HashtableCacheManager var4 = new org.jsecurity.cache.HashtableCacheManager();
    org.jsecurity.cache.Cache var6 = var4.getCache("\u0000\u0000");
    var1.setActiveSessionsCache(var6);
    java.io.InputStream var9 = org.jsecurity.util.ClassUtils.getResourceAsStream("");
    java.lang.Object[] var10 = new java.lang.Object[] { var9};
    java.util.List var11 = org.jsecurity.util.CollectionUtils.asList(var10);
    org.jsecurity.authc.pam.ModularRealmAuthenticator var12 = new org.jsecurity.authc.pam.ModularRealmAuthenticator(var11);
    org.jsecurity.authc.pam.AllSuccessfulModularAuthenticationStrategy var13 = new org.jsecurity.authc.pam.AllSuccessfulModularAuthenticationStrategy();
    var12.setModularAuthenticationStrategy((org.jsecurity.authc.pam.ModularAuthenticationStrategy)var13);
    org.jsecurity.authz.SimpleAuthorizationInfo var15 = new org.jsecurity.authz.SimpleAuthorizationInfo();
    var15.addStringPermission("hi!");
    java.io.InputStream var19 = org.jsecurity.util.ClassUtils.getResourceAsStream("");
    java.lang.Object[] var20 = new java.lang.Object[] { var19};
    java.util.List var21 = org.jsecurity.util.CollectionUtils.asList(var20);
    var15.addRoles((java.util.Collection)var21);
    var12.setAuthenticationListeners((java.util.Collection)var21);
    org.jsecurity.realm.activedirectory.ActiveDirectoryRealm var24 = new org.jsecurity.realm.activedirectory.ActiveDirectoryRealm();
    var24.setPrincipalSuffix("");
    var12.setRealm((org.jsecurity.realm.Realm)var24);
    org.jsecurity.cache.HashtableCacheManager var28 = new org.jsecurity.cache.HashtableCacheManager();
    org.jsecurity.cache.Cache var30 = var28.getCache("\u0000\u0000");
    var24.setAuthorizationCache(var30);
    var1.setActiveSessionsCache(var30);
    org.jsecurity.session.mgt.SimpleSession var33 = new org.jsecurity.session.mgt.SimpleSession();
    java.io.Serializable var34 = var1.create((org.jsecurity.session.Session)var33);
    var0.setSessionDAO((org.jsecurity.session.mgt.eis.SessionDAO)var1);
    org.jsecurity.authc.pam.AllSuccessfulModularAuthenticationStrategy var36 = new org.jsecurity.authc.pam.AllSuccessfulModularAuthenticationStrategy();
    char[] var38 = new char[] { };
    org.jsecurity.authc.UsernamePasswordToken var40 = new org.jsecurity.authc.UsernamePasswordToken("hi!", var38, true);
    org.jsecurity.authc.SimpleAccount var41 = new org.jsecurity.authc.SimpleAccount();
    var41.setCredentialsExpired(false);
    boolean var44 = var41.isLocked();
    org.jsecurity.authc.AuthenticationInfo var45 = var36.afterAllAttempts((org.jsecurity.authc.AuthenticationToken)var40, (org.jsecurity.authc.AuthenticationInfo)var41);
    char[] var49 = new char[] { '4', '#'};
    org.jsecurity.authc.UsernamePasswordToken var50 = new org.jsecurity.authc.UsernamePasswordToken("\u0000\u0000", var49);
    org.jsecurity.authc.SimpleAccount var51 = new org.jsecurity.authc.SimpleAccount();
    var51.setCredentialsExpired(false);
    var51.setCredentialsExpired(false);
    boolean var56 = var51.isCredentialsExpired();
    org.jsecurity.authc.AuthenticationInfo var57 = var36.afterAllAttempts((org.jsecurity.authc.AuthenticationToken)var50, (org.jsecurity.authc.AuthenticationInfo)var51);
    org.jsecurity.realm.activedirectory.ActiveDirectoryRealm var58 = new org.jsecurity.realm.activedirectory.ActiveDirectoryRealm();
    org.jsecurity.authc.credential.Sha256CredentialsMatcher var59 = new org.jsecurity.authc.credential.Sha256CredentialsMatcher();
    var58.setCredentialsMatcher((org.jsecurity.authc.credential.CredentialsMatcher)var59);
    java.lang.String var61 = var58.getAuthorizationCacheName();
    org.jsecurity.authc.UsernamePasswordToken var62 = new org.jsecurity.authc.UsernamePasswordToken();
    java.lang.String var63 = var62.getUsername();
    java.lang.Object var64 = var62.getPrincipal();
    boolean var65 = var58.supports((org.jsecurity.authc.AuthenticationToken)var62);
    org.jsecurity.session.UnknownSessionException var69 = new org.jsecurity.session.UnknownSessionException("dd\uFFFD", (java.io.Serializable)100.0f);
    org.jsecurity.session.SessionException var71 = new org.jsecurity.session.SessionException("dd\uFFFD", (java.lang.Throwable)var69, (java.io.Serializable)0);
    org.jsecurity.authc.SimpleAuthenticationInfo var74 = new org.jsecurity.authc.SimpleAuthenticationInfo((java.lang.Object)0, (java.lang.Object)10, "hi!");
    java.lang.Object var75 = var74.getCredentials();
    java.lang.String var76 = var74.toString();
    org.jsecurity.authc.AuthenticationInfo var77 = var36.afterAllAttempts((org.jsecurity.authc.AuthenticationToken)var62, (org.jsecurity.authc.AuthenticationInfo)var74);
    org.jsecurity.session.mgt.eis.MemorySessionDAO var78 = new org.jsecurity.session.mgt.eis.MemorySessionDAO();
    org.jsecurity.cache.Cache var79 = var78.getActiveSessionsCache();
    var78.setActiveSessionsCacheName("dd\uFFFD");
    var74.setCredentials((java.lang.Object)var78);
    var0.setSessionDAO((org.jsecurity.session.mgt.eis.SessionDAO)var78);
    org.jsecurity.session.mgt.ExecutorServiceSessionValidationScheduler var84 = new org.jsecurity.session.mgt.ExecutorServiceSessionValidationScheduler((org.jsecurity.session.mgt.ValidatingSessionManager)var0);
    var84.run();
    org.jsecurity.session.mgt.ValidatingSessionManager var86 = var84.getSessionManager();
    boolean var87 = var84.isEnabled();
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var2);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var3);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var6);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var9);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var10);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var11);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var19);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var20);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var21);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var30);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var34 + "' != '" + "f7b61ae8-4a38-47b6-912d-22bfe8ae3866"+ "'", var34.equals("f7b61ae8-4a38-47b6-912d-22bfe8ae3866"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var38);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var44 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var45);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var49);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var56 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var57);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var61);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var63);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var64);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var65 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var75 + "' != '" + 10+ "'", var75.equals(10));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var77);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var79);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var86);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var87 == false);

  }

  public void test257() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest2.test257");


    org.jsecurity.authz.SimpleRole var0 = new org.jsecurity.authz.SimpleRole();
    java.lang.String var1 = var0.getName();
    java.io.InputStream var3 = org.jsecurity.util.ClassUtils.getResourceAsStream("");
    boolean var4 = var0.equals((java.lang.Object)"");
    var0.setName("org.jsecurity.realm.SimpleAccountRealm-173-authorization");
    java.lang.String var7 = var0.toString();
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var1);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var3);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var4 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var7 + "' != '" + "org.jsecurity.realm.SimpleAccountRealm-173-authorization"+ "'", var7.equals("org.jsecurity.realm.SimpleAccountRealm-173-authorization"));

  }

  public void test258() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest2.test258");


    java.io.InputStream var1 = org.jsecurity.util.ClassUtils.getResourceAsStream("");
    java.lang.Object[] var2 = new java.lang.Object[] { var1};
    java.util.List var3 = org.jsecurity.util.CollectionUtils.asList(var2);
    org.jsecurity.authc.pam.ModularRealmAuthenticator var4 = new org.jsecurity.authc.pam.ModularRealmAuthenticator(var3);
    org.jsecurity.realm.text.TextConfigurationRealm var5 = new org.jsecurity.realm.text.TextConfigurationRealm();
    java.io.InputStream var7 = org.jsecurity.util.ClassUtils.getResourceAsStream("");
    java.lang.Object[] var8 = new java.lang.Object[] { var7};
    java.util.List var9 = org.jsecurity.util.CollectionUtils.asList(var8);
    org.jsecurity.authc.pam.ModularRealmAuthenticator var10 = new org.jsecurity.authc.pam.ModularRealmAuthenticator(var9);
    org.jsecurity.subject.SimplePrincipalCollection var12 = new org.jsecurity.subject.SimplePrincipalCollection((java.util.Collection)var9, "org.jsecurity.authz.UnauthorizedException: org.jsecurity.session.ExpiredSessionException: ");
    org.jsecurity.session.UnknownSessionException var17 = new org.jsecurity.session.UnknownSessionException("dd\uFFFD", (java.io.Serializable)100.0f);
    org.jsecurity.session.SessionException var19 = new org.jsecurity.session.SessionException("dd\uFFFD", (java.lang.Throwable)var17, (java.io.Serializable)0);
    org.jsecurity.session.SessionException var20 = new org.jsecurity.session.SessionException("dd\uFFFD", (java.lang.Throwable)var17);
    var12.add((java.lang.Object)var20, "org.jsecurity.config.ConfigurationException: dd\uFFFD");
    var5.onLogout((org.jsecurity.subject.PrincipalCollection)var12);
    org.jsecurity.cache.HashtableCacheManager var24 = new org.jsecurity.cache.HashtableCacheManager();
    org.jsecurity.cache.Cache var26 = var24.getCache("\u0000\u0000");
    var5.setAuthorizationCache(var26);
    org.jsecurity.codec.CodecException var30 = new org.jsecurity.codec.CodecException("dd\uFFFD");
    org.jsecurity.authc.ConcurrentAccessException var31 = new org.jsecurity.authc.ConcurrentAccessException("org.jsecurity.authz.UnauthorizedException: org.jsecurity.session.ExpiredSessionException: ", (java.lang.Throwable)var30);
    org.jsecurity.subject.SimplePrincipalCollection var33 = new org.jsecurity.subject.SimplePrincipalCollection((java.lang.Object)var30, "");
    var5.onLogout((org.jsecurity.subject.PrincipalCollection)var33);
    var4.setRealm((org.jsecurity.realm.Realm)var5);
    org.jsecurity.authc.credential.Sha512CredentialsMatcher var36 = new org.jsecurity.authc.credential.Sha512CredentialsMatcher();
    var36.setHashIterations(1);
    var5.setCredentialsMatcher((org.jsecurity.authc.credential.CredentialsMatcher)var36);
    org.jsecurity.mgt.DefaultSecurityManager var40 = new org.jsecurity.mgt.DefaultSecurityManager();
    java.io.InputStream var42 = org.jsecurity.util.ClassUtils.getResourceAsStream("");
    java.lang.Object[] var43 = new java.lang.Object[] { var42};
    java.util.List var44 = org.jsecurity.util.CollectionUtils.asList(var43);
    org.jsecurity.authc.pam.ModularRealmAuthenticator var45 = new org.jsecurity.authc.pam.ModularRealmAuthenticator(var44);
    org.jsecurity.authc.pam.AllSuccessfulModularAuthenticationStrategy var46 = new org.jsecurity.authc.pam.AllSuccessfulModularAuthenticationStrategy();
    var45.setModularAuthenticationStrategy((org.jsecurity.authc.pam.ModularAuthenticationStrategy)var46);
    org.jsecurity.authz.SimpleAuthorizationInfo var48 = new org.jsecurity.authz.SimpleAuthorizationInfo();
    var48.addStringPermission("hi!");
    java.io.InputStream var52 = org.jsecurity.util.ClassUtils.getResourceAsStream("");
    java.lang.Object[] var53 = new java.lang.Object[] { var52};
    java.util.List var54 = org.jsecurity.util.CollectionUtils.asList(var53);
    var48.addRoles((java.util.Collection)var54);
    var45.setAuthenticationListeners((java.util.Collection)var54);
    var40.setSessionListeners((java.util.Collection)var54);
    org.jsecurity.realm.text.TextConfigurationRealm var58 = new org.jsecurity.realm.text.TextConfigurationRealm();
    java.io.InputStream var60 = org.jsecurity.util.ClassUtils.getResourceAsStream("");
    java.lang.Object[] var61 = new java.lang.Object[] { var60};
    java.util.List var62 = org.jsecurity.util.CollectionUtils.asList(var61);
    org.jsecurity.authc.pam.ModularRealmAuthenticator var63 = new org.jsecurity.authc.pam.ModularRealmAuthenticator(var62);
    org.jsecurity.subject.SimplePrincipalCollection var65 = new org.jsecurity.subject.SimplePrincipalCollection((java.util.Collection)var62, "org.jsecurity.authz.UnauthorizedException: org.jsecurity.session.ExpiredSessionException: ");
    org.jsecurity.session.UnknownSessionException var70 = new org.jsecurity.session.UnknownSessionException("dd\uFFFD", (java.io.Serializable)100.0f);
    org.jsecurity.session.SessionException var72 = new org.jsecurity.session.SessionException("dd\uFFFD", (java.lang.Throwable)var70, (java.io.Serializable)0);
    org.jsecurity.session.SessionException var73 = new org.jsecurity.session.SessionException("dd\uFFFD", (java.lang.Throwable)var70);
    var65.add((java.lang.Object)var73, "org.jsecurity.config.ConfigurationException: dd\uFFFD");
    var58.onLogout((org.jsecurity.subject.PrincipalCollection)var65);
    org.jsecurity.authc.pam.FirstSuccessfulAuthenticationStrategy var77 = new org.jsecurity.authc.pam.FirstSuccessfulAuthenticationStrategy();
    org.jsecurity.authz.UnauthorizedException var79 = new org.jsecurity.authz.UnauthorizedException("org.jsecurity.config.ConfigurationException: dd\uFFFD");
    java.lang.Throwable[] var80 = var79.getSuppressed();
    java.util.List var81 = org.jsecurity.util.CollectionUtils.asList((java.lang.Object[])var80);
    org.jsecurity.authc.UsernamePasswordToken var82 = new org.jsecurity.authc.UsernamePasswordToken();
    java.lang.String var83 = var82.getUsername();
    java.net.InetAddress var84 = var82.getInetAddress();
    org.jsecurity.authc.AuthenticationInfo var85 = var77.beforeAllAttempts((java.util.Collection)var81, (org.jsecurity.authc.AuthenticationToken)var82);
    boolean[] var86 = var40.hasRoles((org.jsecurity.subject.PrincipalCollection)var65, var81);
    boolean var87 = var65.isEmpty();
    java.util.Iterator var88 = var65.iterator();
    var5.onLogout((org.jsecurity.subject.PrincipalCollection)var65);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var1);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var2);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var3);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var7);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var8);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var9);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var26);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var42);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var43);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var44);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var52);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var53);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var54);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var60);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var61);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var62);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var80);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var81);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var83);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var84);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var85);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var86);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var87 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var88);

  }

  public void test259() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest2.test259");


    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      org.jsecurity.config.IniConfiguration var2 = new org.jsecurity.config.IniConfiguration("ecd29e3a-c551-4fce-8683-2e49992d04b8", "70bf5f29-b0cb-4666-b31a-f1e98e2371a0");
      fail("Expected exception of type org.jsecurity.config.ConfigurationException");
    } catch (org.jsecurity.config.ConfigurationException e) {
      // Expected exception.
    }

  }

  public void test260() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest2.test260");


    org.jsecurity.mgt.DefaultSecurityManager var1 = new org.jsecurity.mgt.DefaultSecurityManager();
    java.io.InputStream var3 = org.jsecurity.util.ClassUtils.getResourceAsStream("");
    java.lang.Object[] var4 = new java.lang.Object[] { var3};
    java.util.List var5 = org.jsecurity.util.CollectionUtils.asList(var4);
    org.jsecurity.authc.pam.ModularRealmAuthenticator var6 = new org.jsecurity.authc.pam.ModularRealmAuthenticator(var5);
    org.jsecurity.authc.pam.AllSuccessfulModularAuthenticationStrategy var7 = new org.jsecurity.authc.pam.AllSuccessfulModularAuthenticationStrategy();
    var6.setModularAuthenticationStrategy((org.jsecurity.authc.pam.ModularAuthenticationStrategy)var7);
    org.jsecurity.authz.SimpleAuthorizationInfo var9 = new org.jsecurity.authz.SimpleAuthorizationInfo();
    var9.addStringPermission("hi!");
    java.io.InputStream var13 = org.jsecurity.util.ClassUtils.getResourceAsStream("");
    java.lang.Object[] var14 = new java.lang.Object[] { var13};
    java.util.List var15 = org.jsecurity.util.CollectionUtils.asList(var14);
    var9.addRoles((java.util.Collection)var15);
    var6.setAuthenticationListeners((java.util.Collection)var15);
    var1.setSessionListeners((java.util.Collection)var15);
    org.jsecurity.authc.pam.ModularRealmAuthenticator var19 = new org.jsecurity.authc.pam.ModularRealmAuthenticator();
    org.jsecurity.authz.permission.InvalidPermissionStringException var22 = new org.jsecurity.authz.permission.InvalidPermissionStringException("", "dd\uFFFD");
    org.jsecurity.JSecurityException var24 = new org.jsecurity.JSecurityException("");
    org.jsecurity.authc.SimpleAuthenticationInfo var26 = new org.jsecurity.authc.SimpleAuthenticationInfo((java.lang.Object)var22, (java.lang.Object)"", "org.jsecurity.authz.UnauthorizedException: org.jsecurity.session.ExpiredSessionException: ");
    org.jsecurity.subject.PrincipalCollection var27 = var26.getPrincipals();
    var19.onLogout(var27);
    var1.setAuthenticator((org.jsecurity.authc.Authenticator)var19);
    org.jsecurity.codec.CodecException var32 = new org.jsecurity.codec.CodecException("dd\uFFFD");
    org.jsecurity.authc.ConcurrentAccessException var33 = new org.jsecurity.authc.ConcurrentAccessException("org.jsecurity.authz.UnauthorizedException: org.jsecurity.session.ExpiredSessionException: ", (java.lang.Throwable)var32);
    org.jsecurity.subject.SimplePrincipalCollection var35 = new org.jsecurity.subject.SimplePrincipalCollection((java.lang.Object)var32, "");
    org.jsecurity.authc.pam.FirstSuccessfulAuthenticationStrategy var36 = new org.jsecurity.authc.pam.FirstSuccessfulAuthenticationStrategy();
    org.jsecurity.authz.UnauthorizedException var38 = new org.jsecurity.authz.UnauthorizedException("org.jsecurity.config.ConfigurationException: dd\uFFFD");
    java.lang.Throwable[] var39 = var38.getSuppressed();
    java.util.List var40 = org.jsecurity.util.CollectionUtils.asList((java.lang.Object[])var39);
    org.jsecurity.authc.UsernamePasswordToken var41 = new org.jsecurity.authc.UsernamePasswordToken();
    java.lang.String var42 = var41.getUsername();
    java.net.InetAddress var43 = var41.getInetAddress();
    org.jsecurity.authc.AuthenticationInfo var44 = var36.beforeAllAttempts((java.util.Collection)var40, (org.jsecurity.authc.AuthenticationToken)var41);
    org.jsecurity.session.UnknownSessionException var49 = new org.jsecurity.session.UnknownSessionException("dd\uFFFD", (java.io.Serializable)100.0f);
    org.jsecurity.subject.SubjectException var50 = new org.jsecurity.subject.SubjectException("dd\uFFFD", (java.lang.Throwable)var49);
    org.jsecurity.io.SerializationException var51 = new org.jsecurity.io.SerializationException("", (java.lang.Throwable)var50);
    java.lang.Throwable[] var52 = var50.getSuppressed();
    java.util.Set var53 = org.jsecurity.util.CollectionUtils.asSet((java.lang.Object[])var52);
    org.jsecurity.authc.SimpleAccount var54 = new org.jsecurity.authc.SimpleAccount((org.jsecurity.subject.PrincipalCollection)var35, (java.lang.Object)var40, var53);
    java.io.InputStream var56 = org.jsecurity.util.ClassUtils.getResourceAsStream("");
    java.lang.Object[] var57 = new java.lang.Object[] { var56};
    java.util.List var58 = org.jsecurity.util.CollectionUtils.asList(var57);
    org.jsecurity.authc.pam.ModularRealmAuthenticator var59 = new org.jsecurity.authc.pam.ModularRealmAuthenticator(var58);
    org.jsecurity.subject.SimplePrincipalCollection var61 = new org.jsecurity.subject.SimplePrincipalCollection((java.util.Collection)var58, "org.jsecurity.authz.UnauthorizedException: org.jsecurity.session.ExpiredSessionException: ");
    org.jsecurity.io.ResourceException var65 = new org.jsecurity.io.ResourceException("hi!");
    org.jsecurity.authc.UnknownAccountException var66 = new org.jsecurity.authc.UnknownAccountException((java.lang.Throwable)var65);
    org.jsecurity.session.StoppedSessionException var67 = new org.jsecurity.session.StoppedSessionException("dd\uFFFD", (java.io.Serializable)var65);
    org.jsecurity.session.UnknownSessionException var68 = new org.jsecurity.session.UnknownSessionException("org.jsecurity.authz.UnauthorizedException: org.jsecurity.session.ExpiredSessionException: ", (java.lang.Throwable)var65);
    boolean var69 = var61.equals((java.lang.Object)var65);
    var35.addAll((org.jsecurity.subject.PrincipalCollection)var61);
    org.jsecurity.session.UnknownSessionException var75 = new org.jsecurity.session.UnknownSessionException("dd\uFFFD", (java.io.Serializable)100.0f);
    org.jsecurity.subject.SubjectException var76 = new org.jsecurity.subject.SubjectException("dd\uFFFD", (java.lang.Throwable)var75);
    org.jsecurity.io.SerializationException var77 = new org.jsecurity.io.SerializationException("", (java.lang.Throwable)var76);
    java.lang.Throwable[] var78 = var76.getSuppressed();
    java.util.List var79 = org.jsecurity.util.CollectionUtils.asList((java.lang.Object[])var78);
    boolean var80 = var1.isPermittedAll((org.jsecurity.subject.PrincipalCollection)var35, (java.util.Collection)var79);
    org.jsecurity.session.mgt.SessionManager var81 = var1.getSessionManager();
    org.jsecurity.subject.DelegatingSubject var82 = new org.jsecurity.subject.DelegatingSubject((org.jsecurity.mgt.SecurityManager)var1);
    boolean var84 = var82.isPermitted("c07dcc1f-69d1-439f-8202-c1ed75146e6e");
    java.lang.String[] var89 = org.jsecurity.util.StringUtils.tokenizeToStringArray("783ccd31-48a8-42dd-890f-df885a7baaff", "e2100c27-e41d-4c80-964c-90268ef4a856", true, true);
    boolean var90 = var82.isPermittedAll(var89);
    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      java.lang.Object var91 = org.jsecurity.util.ClassUtils.newInstance("d0ddeefd-5576-4906-99f8-93b892e0c773", (java.lang.Object[])var89);
      fail("Expected exception of type org.jsecurity.util.UnknownClassException");
    } catch (org.jsecurity.util.UnknownClassException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var3);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var4);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var5);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var13);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var14);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var15);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var27);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var39);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var40);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var42);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var43);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var44);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var52);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var53);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var56);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var57);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var58);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var69 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var78);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var79);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var80 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var81);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var84 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var89);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var90 == false);

  }

  public void test261() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest2.test261");


    org.jsecurity.config.IniConfiguration var0 = new org.jsecurity.config.IniConfiguration();
    java.lang.String var1 = var0.getConfig();
    var0.setConfigUrl("cff098b5-6d79-4f6d-93d3-148185d0b987");
    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      var0.init();
      fail("Expected exception of type org.jsecurity.config.ConfigurationException");
    } catch (org.jsecurity.config.ConfigurationException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var1);

  }

  public void test262() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest2.test262");


    org.jsecurity.session.mgt.SimpleSession var0 = new org.jsecurity.session.mgt.SimpleSession();
    org.jsecurity.io.SerializationException var3 = new org.jsecurity.io.SerializationException("org.jsecurity.config.ConfigurationException: dd\uFFFD");
    org.jsecurity.authc.AccountException var4 = new org.jsecurity.authc.AccountException("a2b823b1e72eae2b727289df8a00a89df8a0bab6ad8a89c4c5c7a9b62a270000", (java.lang.Throwable)var3);
    var0.setId((java.io.Serializable)"a2b823b1e72eae2b727289df8a00a89df8a0bab6ad8a89c4c5c7a9b62a270000");
    org.jsecurity.config.ReflectionBuilder var6 = new org.jsecurity.config.ReflectionBuilder();
    org.jsecurity.config.ReflectionBuilder var7 = new org.jsecurity.config.ReflectionBuilder();
    org.jsecurity.io.IniResource var8 = new org.jsecurity.io.IniResource();
    var8.setCharsetName("org.jsecurity.authz.UnauthorizedException: org.jsecurity.session.ExpiredSessionException: ");
    java.util.Map var11 = var8.getSections();
    java.util.Map var12 = var7.buildObjects(var11);
    org.jsecurity.config.ReflectionBuilder var13 = new org.jsecurity.config.ReflectionBuilder();
    org.jsecurity.io.IniResource var14 = new org.jsecurity.io.IniResource();
    var14.setCharsetName("org.jsecurity.authz.UnauthorizedException: org.jsecurity.session.ExpiredSessionException: ");
    java.util.Map var17 = var14.getSections();
    java.util.Map var18 = var13.buildObjects(var17);
    java.util.Map var19 = var7.buildObjects(var18);
    java.util.Map var20 = var6.buildObjects(var19);
    var0.setAttributes(var20);
    org.jsecurity.session.mgt.ImmutableProxiedSession var22 = new org.jsecurity.session.mgt.ImmutableProxiedSession((org.jsecurity.session.Session)var0);
    org.jsecurity.util.UnavailableConstructorException var25 = new org.jsecurity.util.UnavailableConstructorException("org.jsecurity.authz.UnauthorizedException: org.jsecurity.session.ExpiredSessionException: ");
    org.jsecurity.authc.AuthenticationException var26 = new org.jsecurity.authc.AuthenticationException("5642a434-0d22-4b09-92db-5a40904768c2", (java.lang.Throwable)var25);
    org.jsecurity.crypto.hash.Md5Hash var28 = org.jsecurity.crypto.hash.Md5Hash.fromBase64String("6464ff");
    java.lang.String var29 = var28.toHex();
    org.jsecurity.authz.SimpleRole var30 = new org.jsecurity.authz.SimpleRole();
    org.jsecurity.authz.SimpleAuthorizationInfo var31 = new org.jsecurity.authz.SimpleAuthorizationInfo();
    var31.addRole("a2b823b1e72eae2b727289df8a00a89df8a0bab6ad8a89c4c5c7a9b62a270000");
    org.jsecurity.session.UnknownSessionException var38 = new org.jsecurity.session.UnknownSessionException("dd\uFFFD", (java.io.Serializable)100.0f);
    org.jsecurity.subject.SubjectException var39 = new org.jsecurity.subject.SubjectException("dd\uFFFD", (java.lang.Throwable)var38);
    org.jsecurity.io.SerializationException var40 = new org.jsecurity.io.SerializationException("", (java.lang.Throwable)var39);
    java.lang.Throwable[] var41 = var39.getSuppressed();
    java.util.Set var42 = org.jsecurity.util.CollectionUtils.asSet((java.lang.Object[])var41);
    var31.addRoles((java.util.Collection)var42);
    var30.addAll((java.util.Collection)var42);
    org.jsecurity.authz.SimpleRole var46 = new org.jsecurity.authz.SimpleRole();
    org.jsecurity.authz.permission.WildcardPermission var49 = new org.jsecurity.authz.permission.WildcardPermission("hi!", false);
    boolean var50 = var46.isPermitted((org.jsecurity.authz.Permission)var49);
    org.jsecurity.session.InvalidSessionException var51 = new org.jsecurity.session.InvalidSessionException("org.jsecurity.config.ConfigurationException: dd\uFFFD", (java.io.Serializable)var49);
    org.jsecurity.authz.SimpleRole var52 = new org.jsecurity.authz.SimpleRole();
    org.jsecurity.authz.permission.WildcardPermission var55 = new org.jsecurity.authz.permission.WildcardPermission("hi!", false);
    boolean var56 = var52.isPermitted((org.jsecurity.authz.Permission)var55);
    boolean var57 = var49.implies((org.jsecurity.authz.Permission)var55);
    boolean var58 = var30.isPermitted((org.jsecurity.authz.Permission)var55);
    org.jsecurity.authz.SimpleAuthorizingAccount var59 = new org.jsecurity.authz.SimpleAuthorizingAccount();
    java.util.Set var60 = var59.getSimpleRoles();
    org.jsecurity.authz.SimpleRole var61 = new org.jsecurity.authz.SimpleRole();
    org.jsecurity.authz.SimpleAuthorizationInfo var62 = new org.jsecurity.authz.SimpleAuthorizationInfo();
    var62.addRole("a2b823b1e72eae2b727289df8a00a89df8a0bab6ad8a89c4c5c7a9b62a270000");
    org.jsecurity.session.UnknownSessionException var69 = new org.jsecurity.session.UnknownSessionException("dd\uFFFD", (java.io.Serializable)100.0f);
    org.jsecurity.subject.SubjectException var70 = new org.jsecurity.subject.SubjectException("dd\uFFFD", (java.lang.Throwable)var69);
    org.jsecurity.io.SerializationException var71 = new org.jsecurity.io.SerializationException("", (java.lang.Throwable)var70);
    java.lang.Throwable[] var72 = var70.getSuppressed();
    java.util.Set var73 = org.jsecurity.util.CollectionUtils.asSet((java.lang.Object[])var72);
    var62.addRoles((java.util.Collection)var73);
    var61.addAll((java.util.Collection)var73);
    org.jsecurity.authz.SimpleRole var77 = new org.jsecurity.authz.SimpleRole();
    org.jsecurity.authz.permission.WildcardPermission var80 = new org.jsecurity.authz.permission.WildcardPermission("hi!", false);
    boolean var81 = var77.isPermitted((org.jsecurity.authz.Permission)var80);
    org.jsecurity.session.InvalidSessionException var82 = new org.jsecurity.session.InvalidSessionException("org.jsecurity.config.ConfigurationException: dd\uFFFD", (java.io.Serializable)var80);
    org.jsecurity.authz.SimpleRole var83 = new org.jsecurity.authz.SimpleRole();
    org.jsecurity.authz.permission.WildcardPermission var86 = new org.jsecurity.authz.permission.WildcardPermission("hi!", false);
    boolean var87 = var83.isPermitted((org.jsecurity.authz.Permission)var86);
    boolean var88 = var80.implies((org.jsecurity.authz.Permission)var86);
    boolean var89 = var61.isPermitted((org.jsecurity.authz.Permission)var86);
    boolean var90 = var59.isPermitted((org.jsecurity.authz.Permission)var86);
    boolean var91 = var30.isPermitted((org.jsecurity.authz.Permission)var86);
    boolean var92 = var28.equals((java.lang.Object)var30);
    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      var22.setAttribute((java.lang.Object)var26, (java.lang.Object)var28);
      fail("Expected exception of type org.jsecurity.session.InvalidSessionException");
    } catch (org.jsecurity.session.InvalidSessionException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var11);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var12);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var17);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var18);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var19);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var20);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var28);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var29 + "' != '" + "eb8eb80000"+ "'", var29.equals("eb8eb80000"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var41);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var42);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var50 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var56 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var57 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var58 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var60);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var72);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var73);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var81 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var87 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var88 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var89 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var90 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var91 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var92 == false);

  }

  public void test263() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest2.test263");


    org.jsecurity.session.mgt.DefaultSessionManager var0 = new org.jsecurity.session.mgt.DefaultSessionManager();
    org.jsecurity.session.mgt.eis.MemorySessionDAO var1 = new org.jsecurity.session.mgt.eis.MemorySessionDAO();
    org.jsecurity.cache.Cache var2 = var1.getActiveSessionsCache();
    org.jsecurity.cache.CacheManager var3 = var1.getCacheManager();
    org.jsecurity.cache.HashtableCacheManager var4 = new org.jsecurity.cache.HashtableCacheManager();
    org.jsecurity.cache.Cache var6 = var4.getCache("\u0000\u0000");
    var1.setActiveSessionsCache(var6);
    java.io.InputStream var9 = org.jsecurity.util.ClassUtils.getResourceAsStream("");
    java.lang.Object[] var10 = new java.lang.Object[] { var9};
    java.util.List var11 = org.jsecurity.util.CollectionUtils.asList(var10);
    org.jsecurity.authc.pam.ModularRealmAuthenticator var12 = new org.jsecurity.authc.pam.ModularRealmAuthenticator(var11);
    org.jsecurity.authc.pam.AllSuccessfulModularAuthenticationStrategy var13 = new org.jsecurity.authc.pam.AllSuccessfulModularAuthenticationStrategy();
    var12.setModularAuthenticationStrategy((org.jsecurity.authc.pam.ModularAuthenticationStrategy)var13);
    org.jsecurity.authz.SimpleAuthorizationInfo var15 = new org.jsecurity.authz.SimpleAuthorizationInfo();
    var15.addStringPermission("hi!");
    java.io.InputStream var19 = org.jsecurity.util.ClassUtils.getResourceAsStream("");
    java.lang.Object[] var20 = new java.lang.Object[] { var19};
    java.util.List var21 = org.jsecurity.util.CollectionUtils.asList(var20);
    var15.addRoles((java.util.Collection)var21);
    var12.setAuthenticationListeners((java.util.Collection)var21);
    org.jsecurity.realm.activedirectory.ActiveDirectoryRealm var24 = new org.jsecurity.realm.activedirectory.ActiveDirectoryRealm();
    var24.setPrincipalSuffix("");
    var12.setRealm((org.jsecurity.realm.Realm)var24);
    org.jsecurity.cache.HashtableCacheManager var28 = new org.jsecurity.cache.HashtableCacheManager();
    org.jsecurity.cache.Cache var30 = var28.getCache("\u0000\u0000");
    var24.setAuthorizationCache(var30);
    var1.setActiveSessionsCache(var30);
    org.jsecurity.session.mgt.SimpleSession var33 = new org.jsecurity.session.mgt.SimpleSession();
    java.io.Serializable var34 = var1.create((org.jsecurity.session.Session)var33);
    var0.setSessionDAO((org.jsecurity.session.mgt.eis.SessionDAO)var1);
    long var36 = var0.getSessionValidationInterval();
    long var37 = var0.getSessionValidationInterval();
    var0.setGlobalSessionTimeout(1);
    org.jsecurity.authz.SimpleAuthorizationInfo var40 = new org.jsecurity.authz.SimpleAuthorizationInfo();
    var40.addRole("a2b823b1e72eae2b727289df8a00a89df8a0bab6ad8a89c4c5c7a9b62a270000");
    org.jsecurity.authz.SimpleAuthorizationInfo var43 = new org.jsecurity.authz.SimpleAuthorizationInfo();
    var43.addRole("a2b823b1e72eae2b727289df8a00a89df8a0bab6ad8a89c4c5c7a9b62a270000");
    org.jsecurity.session.UnknownSessionException var50 = new org.jsecurity.session.UnknownSessionException("dd\uFFFD", (java.io.Serializable)100.0f);
    org.jsecurity.subject.SubjectException var51 = new org.jsecurity.subject.SubjectException("dd\uFFFD", (java.lang.Throwable)var50);
    org.jsecurity.io.SerializationException var52 = new org.jsecurity.io.SerializationException("", (java.lang.Throwable)var51);
    java.lang.Throwable[] var53 = var51.getSuppressed();
    java.util.Set var54 = org.jsecurity.util.CollectionUtils.asSet((java.lang.Object[])var53);
    var43.addRoles((java.util.Collection)var54);
    var40.setObjectPermissions(var54);
    java.io.InputStream var58 = org.jsecurity.util.ClassUtils.getResourceAsStream("");
    java.lang.Object[] var59 = new java.lang.Object[] { var58};
    java.util.List var60 = org.jsecurity.util.CollectionUtils.asList(var59);
    org.jsecurity.authc.pam.ModularRealmAuthenticator var61 = new org.jsecurity.authc.pam.ModularRealmAuthenticator(var60);
    org.jsecurity.subject.SimplePrincipalCollection var63 = new org.jsecurity.subject.SimplePrincipalCollection((java.util.Collection)var60, "org.jsecurity.authz.UnauthorizedException: org.jsecurity.session.ExpiredSessionException: ");
    java.util.Set var64 = var63.getRealmNames();
    java.io.InputStream var66 = org.jsecurity.util.ClassUtils.getResourceAsStream("");
    java.lang.Object[] var67 = new java.lang.Object[] { var66};
    java.util.List var68 = org.jsecurity.util.CollectionUtils.asList(var67);
    org.jsecurity.authc.pam.ModularRealmAuthenticator var69 = new org.jsecurity.authc.pam.ModularRealmAuthenticator(var68);
    org.jsecurity.subject.SimplePrincipalCollection var71 = new org.jsecurity.subject.SimplePrincipalCollection((java.util.Collection)var68, "org.jsecurity.authz.UnauthorizedException: org.jsecurity.session.ExpiredSessionException: ");
    org.jsecurity.session.UnknownSessionException var76 = new org.jsecurity.session.UnknownSessionException("dd\uFFFD", (java.io.Serializable)100.0f);
    org.jsecurity.session.SessionException var78 = new org.jsecurity.session.SessionException("dd\uFFFD", (java.lang.Throwable)var76, (java.io.Serializable)0);
    org.jsecurity.session.SessionException var79 = new org.jsecurity.session.SessionException("dd\uFFFD", (java.lang.Throwable)var76);
    var71.add((java.lang.Object)var79, "org.jsecurity.config.ConfigurationException: dd\uFFFD");
    java.util.Set var82 = var71.asSet();
    var63.addAll((java.util.Collection)var82, "6464ff");
    var40.setStringPermissions(var82);
    org.jsecurity.subject.SimplePrincipalCollection var87 = new org.jsecurity.subject.SimplePrincipalCollection((java.util.Collection)var82, "\u0000\u0000");
    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      java.util.Date var88 = var0.getStartTimestamp((java.io.Serializable)var87);
      fail("Expected exception of type org.jsecurity.session.UnknownSessionException");
    } catch (org.jsecurity.session.UnknownSessionException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var2);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var3);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var6);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var9);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var10);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var11);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var19);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var20);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var21);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var30);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var34 + "' != '" + "a6c10492-3812-4c5f-9634-a84588bfa6bb"+ "'", var34.equals("a6c10492-3812-4c5f-9634-a84588bfa6bb"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var36 == 3600000L);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var37 == 3600000L);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var53);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var54);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var58);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var59);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var60);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var64);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var66);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var67);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var68);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var82);

  }

  public void test264() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest2.test264");


    org.jsecurity.session.UnknownSessionException var3 = new org.jsecurity.session.UnknownSessionException("dd\uFFFD", (java.io.Serializable)100.0f);
    org.jsecurity.session.SessionException var5 = new org.jsecurity.session.SessionException("dd\uFFFD", (java.lang.Throwable)var3, (java.io.Serializable)0);
    org.jsecurity.authc.SimpleAuthenticationInfo var8 = new org.jsecurity.authc.SimpleAuthenticationInfo((java.lang.Object)0, (java.lang.Object)10, "hi!");
    java.lang.Object var9 = var8.getCredentials();
    java.lang.String var10 = var8.toString();
    org.jsecurity.realm.text.TextConfigurationRealm var11 = new org.jsecurity.realm.text.TextConfigurationRealm();
    java.io.InputStream var13 = org.jsecurity.util.ClassUtils.getResourceAsStream("");
    java.lang.Object[] var14 = new java.lang.Object[] { var13};
    java.util.List var15 = org.jsecurity.util.CollectionUtils.asList(var14);
    org.jsecurity.authc.pam.ModularRealmAuthenticator var16 = new org.jsecurity.authc.pam.ModularRealmAuthenticator(var15);
    org.jsecurity.subject.SimplePrincipalCollection var18 = new org.jsecurity.subject.SimplePrincipalCollection((java.util.Collection)var15, "org.jsecurity.authz.UnauthorizedException: org.jsecurity.session.ExpiredSessionException: ");
    org.jsecurity.session.UnknownSessionException var23 = new org.jsecurity.session.UnknownSessionException("dd\uFFFD", (java.io.Serializable)100.0f);
    org.jsecurity.session.SessionException var25 = new org.jsecurity.session.SessionException("dd\uFFFD", (java.lang.Throwable)var23, (java.io.Serializable)0);
    org.jsecurity.session.SessionException var26 = new org.jsecurity.session.SessionException("dd\uFFFD", (java.lang.Throwable)var23);
    var18.add((java.lang.Object)var26, "org.jsecurity.config.ConfigurationException: dd\uFFFD");
    var11.onLogout((org.jsecurity.subject.PrincipalCollection)var18);
    org.jsecurity.cache.HashtableCacheManager var30 = new org.jsecurity.cache.HashtableCacheManager();
    org.jsecurity.cache.Cache var32 = var30.getCache("\u0000\u0000");
    var11.setAuthorizationCache(var32);
    org.jsecurity.codec.CodecException var36 = new org.jsecurity.codec.CodecException("dd\uFFFD");
    org.jsecurity.authc.ConcurrentAccessException var37 = new org.jsecurity.authc.ConcurrentAccessException("org.jsecurity.authz.UnauthorizedException: org.jsecurity.session.ExpiredSessionException: ", (java.lang.Throwable)var36);
    org.jsecurity.subject.SimplePrincipalCollection var39 = new org.jsecurity.subject.SimplePrincipalCollection((java.lang.Object)var36, "");
    var11.onLogout((org.jsecurity.subject.PrincipalCollection)var39);
    var8.setPrincipals((org.jsecurity.subject.PrincipalCollection)var39);
    org.jsecurity.realm.activedirectory.ActiveDirectoryRealm var42 = new org.jsecurity.realm.activedirectory.ActiveDirectoryRealm();
    org.jsecurity.authc.credential.Sha256CredentialsMatcher var43 = new org.jsecurity.authc.credential.Sha256CredentialsMatcher();
    var42.setCredentialsMatcher((org.jsecurity.authc.credential.CredentialsMatcher)var43);
    org.jsecurity.realm.activedirectory.ActiveDirectoryRealm var45 = new org.jsecurity.realm.activedirectory.ActiveDirectoryRealm();
    org.jsecurity.authc.credential.Sha256CredentialsMatcher var46 = new org.jsecurity.authc.credential.Sha256CredentialsMatcher();
    var45.setCredentialsMatcher((org.jsecurity.authc.credential.CredentialsMatcher)var46);
    java.lang.String var48 = var45.getAuthorizationCacheName();
    var45.setUrl("hi!");
    org.jsecurity.realm.ldap.DefaultLdapContextFactory var51 = new org.jsecurity.realm.ldap.DefaultLdapContextFactory();
    var45.setLdapContextFactory((org.jsecurity.realm.ldap.LdapContextFactory)var51);
    var51.setAuthentication("org.jsecurity.authz.UnauthorizedException: org.jsecurity.session.ExpiredSessionException: ");
    var42.setLdapContextFactory((org.jsecurity.realm.ldap.LdapContextFactory)var51);
    var51.setReferral("a2b823b1e72eae2b727289df8a00a89df8a0bab6ad8a89c4c5c7a9b62a270000");
    var51.setUrl("\u0000\u0000");
    java.util.Set var62 = org.jsecurity.util.PermissionUtils.toPermissionStrings("org.jsecurity.config.ConfigurationException: dd\uFFFD");
    org.jsecurity.authz.SimpleAuthorizationInfo var63 = new org.jsecurity.authz.SimpleAuthorizationInfo(var62);
    org.jsecurity.authz.SimpleRole var64 = new org.jsecurity.authz.SimpleRole();
    java.lang.String var65 = var64.getName();
    org.jsecurity.session.UnknownSessionException var70 = new org.jsecurity.session.UnknownSessionException("dd\uFFFD", (java.io.Serializable)100.0f);
    org.jsecurity.subject.SubjectException var71 = new org.jsecurity.subject.SubjectException("dd\uFFFD", (java.lang.Throwable)var70);
    org.jsecurity.io.SerializationException var72 = new org.jsecurity.io.SerializationException("", (java.lang.Throwable)var71);
    java.lang.Throwable[] var73 = var71.getSuppressed();
    java.util.Set var74 = org.jsecurity.util.CollectionUtils.asSet((java.lang.Object[])var73);
    var64.setPermissions(var74);
    org.jsecurity.authz.SimpleAuthorizingAccount var76 = new org.jsecurity.authz.SimpleAuthorizingAccount((org.jsecurity.subject.PrincipalCollection)var39, (java.lang.Object)"\u0000\u0000", "org.jsecurity.authc.AccountException: hi!", var62, var74);
    var76.setCredentialsExpired(true);
    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      var76.checkRole("e716326a-0211-4284-b9e0-793cdfa5d7a1");
      fail("Expected exception of type org.jsecurity.authz.UnauthorizedException");
    } catch (org.jsecurity.authz.UnauthorizedException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var9 + "' != '" + 10+ "'", var9.equals(10));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var13);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var14);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var15);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var32);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var48);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var62);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var65);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var73);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var74);

  }

  public void test265() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest2.test265");


    org.jsecurity.io.ResourceException var1 = new org.jsecurity.io.ResourceException("6c9a3d8a-dfcf-4bc4-9aad-6adc8cd8bee3");

  }

  public void test266() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest2.test266");


    org.jsecurity.authz.UnauthorizedException var1 = new org.jsecurity.authz.UnauthorizedException("ce09e5a8-f60d-4790-96b2-e4cb301de6f0");

  }

  public void test267() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest2.test267");


    org.jsecurity.authc.AccountException var1 = new org.jsecurity.authc.AccountException("org.jsecurity.realm.text.PropertiesRealm_772");

  }

  public void test268() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest2.test268");


    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      org.jsecurity.crypto.hash.Sha512Hash var1 = org.jsecurity.crypto.hash.Sha512Hash.fromHexString("b598ff3d-5685-4491-8ee6-585d37adb1db");
      fail("Expected exception of type java.lang.IllegalArgumentException");
    } catch (java.lang.IllegalArgumentException e) {
      // Expected exception.
    }

  }

  public void test269() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest2.test269");


    org.jsecurity.io.ResourceException var4 = new org.jsecurity.io.ResourceException("hi!");
    org.jsecurity.codec.CodecException var5 = new org.jsecurity.codec.CodecException((java.lang.Throwable)var4);
    org.jsecurity.JSecurityException var6 = new org.jsecurity.JSecurityException("a2b823b1e72eae2b727289df8a00a89df8a0bab6ad8a89c4c5c7a9b62a270000", (java.lang.Throwable)var4);
    org.jsecurity.session.UnknownSessionException var7 = new org.jsecurity.session.UnknownSessionException((java.lang.Throwable)var6);
    org.jsecurity.authc.IncorrectCredentialsException var8 = new org.jsecurity.authc.IncorrectCredentialsException((java.lang.Throwable)var6);
    org.jsecurity.authz.AuthorizationException var9 = new org.jsecurity.authz.AuthorizationException("\u0000\u0000\u0000", (java.lang.Throwable)var6);
    org.jsecurity.authc.AccountException var10 = new org.jsecurity.authc.AccountException((java.lang.Throwable)var9);
    org.jsecurity.io.ResourceException var11 = new org.jsecurity.io.ResourceException("\uFFFD\uFFFD#\uFFFD\uFFFD.\uFFFD+rr\uFFFD\u07CA\u0000\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\u01E9\uFFFD*'\u0000\u0000", (java.lang.Throwable)var9);
    org.jsecurity.authc.LockedAccountException var12 = new org.jsecurity.authc.LockedAccountException((java.lang.Throwable)var9);

  }

  public void test270() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest2.test270");


    org.jsecurity.authz.HostUnauthorizedException var2 = new org.jsecurity.authz.HostUnauthorizedException("hi!");
    org.jsecurity.authc.CredentialsException var3 = new org.jsecurity.authc.CredentialsException("\uFFFD\uFFFD#\uFFFD\uFFFD.\uFFFD+r\uFFFD\u6959(\uFFFD\uFFFDW\uFFFDq\uFFFD.\uFFFD\uFFFD^jY\uFFFDj\uFFFDa\uFFFD\uFFFD\uFFFDj\u0628", (java.lang.Throwable)var2);
    org.jsecurity.session.mgt.SimpleSession var4 = new org.jsecurity.session.mgt.SimpleSession();
    var4.setTimeout((-1L));
    org.jsecurity.session.mgt.SimpleSession var7 = new org.jsecurity.session.mgt.SimpleSession();
    java.util.Date var8 = var7.getLastAccessTime();
    var4.setLastAccessTime(var8);
    java.net.InetAddress var10 = var4.getHostAddress();
    org.jsecurity.authz.HostUnauthorizedException var11 = new org.jsecurity.authz.HostUnauthorizedException(var10);
    org.jsecurity.authz.HostUnauthorizedException var12 = new org.jsecurity.authz.HostUnauthorizedException(var10);
    var2.setHostAddress(var10);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var8);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var10);

  }

  public void test271() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest2.test271");


    org.jsecurity.codec.CodecException var3 = new org.jsecurity.codec.CodecException("dd\uFFFD");
    org.jsecurity.authc.ConcurrentAccessException var4 = new org.jsecurity.authc.ConcurrentAccessException("org.jsecurity.authz.UnauthorizedException: org.jsecurity.session.ExpiredSessionException: ", (java.lang.Throwable)var3);
    org.jsecurity.authz.AuthorizationException var5 = new org.jsecurity.authz.AuthorizationException("\uFFFD\uFFFD#\uFFFD\uFFFD.\uFFFD+r\uFFFD\u6959(\uFFFD\uFFFDW\uFFFDq\uFFFD.\uFFFD\uFFFD^jY\uFFFDj\uFFFDa\uFFFD\uFFFD\uFFFDj\u0628\u0000", (java.lang.Throwable)var3);
    org.jsecurity.authc.AccountException var6 = new org.jsecurity.authc.AccountException((java.lang.Throwable)var3);

  }

  public void test272() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest2.test272");


    org.jsecurity.authz.UnauthenticatedException var4 = new org.jsecurity.authz.UnauthenticatedException();
    org.jsecurity.config.UnresolveableReferenceException var5 = new org.jsecurity.config.UnresolveableReferenceException("", (java.lang.Throwable)var4);
    org.jsecurity.authz.HostUnauthorizedException var6 = new org.jsecurity.authz.HostUnauthorizedException("org.jsecurity.config.ConfigurationException: dd\uFFFD", (java.lang.Throwable)var5);
    org.jsecurity.authc.UnknownAccountException var7 = new org.jsecurity.authc.UnknownAccountException("hi!", (java.lang.Throwable)var6);
    org.jsecurity.subject.InvalidSubjectException var8 = new org.jsecurity.subject.InvalidSubjectException("54796a53-cb9a-42d1-a889-ef2a5a9adae9", (java.lang.Throwable)var6);

  }

  public void test273() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest2.test273");


    org.jsecurity.config.IniConfiguration var0 = new org.jsecurity.config.IniConfiguration();
    java.lang.String var1 = var0.getConfig();
    var0.setConfig("\uFFFD\uFFFD#\uFFFD\uFFFD.\uFFFD+rr\uFFFD\u07CA\u0000\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\u01E9\uFFFD*'\u0000\u0000");
    var0.setConfig("3c0f8cd0-07d8-4de6-8030-3e8afad05e07");
    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      var0.load("e8e5d499-33c0-418e-93f9-76a51372c414");
      fail("Expected exception of type org.jsecurity.config.ConfigurationException");
    } catch (org.jsecurity.config.ConfigurationException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var1);

  }

  public void test274() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest2.test274");


    org.jsecurity.authc.CredentialsException var1 = new org.jsecurity.authc.CredentialsException("org.jsecurity.authz.UnauthorizedException: org.jsecurity.session.ExpiredSessionException: ");
    org.jsecurity.authc.IncorrectCredentialsException var2 = new org.jsecurity.authc.IncorrectCredentialsException((java.lang.Throwable)var1);
    org.jsecurity.util.InstantiationException var3 = new org.jsecurity.util.InstantiationException((java.lang.Throwable)var2);
    org.jsecurity.authc.IncorrectCredentialsException var6 = new org.jsecurity.authc.IncorrectCredentialsException("\u0000\u0000");
    org.jsecurity.codec.CodecException var9 = new org.jsecurity.codec.CodecException("dd\uFFFD");
    org.jsecurity.authc.ConcurrentAccessException var10 = new org.jsecurity.authc.ConcurrentAccessException("org.jsecurity.authz.UnauthorizedException: org.jsecurity.session.ExpiredSessionException: ", (java.lang.Throwable)var9);
    org.jsecurity.subject.SimplePrincipalCollection var12 = new org.jsecurity.subject.SimplePrincipalCollection((java.lang.Object)var9, "");
    java.io.InputStream var14 = org.jsecurity.util.ClassUtils.getResourceAsStream("");
    java.lang.Object[] var15 = new java.lang.Object[] { var14};
    java.util.List var16 = org.jsecurity.util.CollectionUtils.asList(var15);
    org.jsecurity.authc.pam.ModularRealmAuthenticator var17 = new org.jsecurity.authc.pam.ModularRealmAuthenticator(var16);
    org.jsecurity.authc.pam.AllSuccessfulModularAuthenticationStrategy var18 = new org.jsecurity.authc.pam.AllSuccessfulModularAuthenticationStrategy();
    var17.setModularAuthenticationStrategy((org.jsecurity.authc.pam.ModularAuthenticationStrategy)var18);
    org.jsecurity.authz.SimpleAuthorizationInfo var20 = new org.jsecurity.authz.SimpleAuthorizationInfo();
    var20.addStringPermission("hi!");
    java.io.InputStream var24 = org.jsecurity.util.ClassUtils.getResourceAsStream("");
    java.lang.Object[] var25 = new java.lang.Object[] { var24};
    java.util.List var26 = org.jsecurity.util.CollectionUtils.asList(var25);
    var20.addRoles((java.util.Collection)var26);
    var17.setAuthenticationListeners((java.util.Collection)var26);
    org.jsecurity.realm.activedirectory.ActiveDirectoryRealm var29 = new org.jsecurity.realm.activedirectory.ActiveDirectoryRealm();
    var29.setPrincipalSuffix("");
    var17.setRealm((org.jsecurity.realm.Realm)var29);
    org.jsecurity.authc.pam.FirstSuccessfulAuthenticationStrategy var33 = new org.jsecurity.authc.pam.FirstSuccessfulAuthenticationStrategy();
    org.jsecurity.authz.UnauthorizedException var35 = new org.jsecurity.authz.UnauthorizedException("org.jsecurity.config.ConfigurationException: dd\uFFFD");
    java.lang.Throwable[] var36 = var35.getSuppressed();
    java.util.List var37 = org.jsecurity.util.CollectionUtils.asList((java.lang.Object[])var36);
    org.jsecurity.authc.UsernamePasswordToken var38 = new org.jsecurity.authc.UsernamePasswordToken();
    java.lang.String var39 = var38.getUsername();
    java.net.InetAddress var40 = var38.getInetAddress();
    org.jsecurity.authc.AuthenticationInfo var41 = var33.beforeAllAttempts((java.util.Collection)var37, (org.jsecurity.authc.AuthenticationToken)var38);
    var17.setModularAuthenticationStrategy((org.jsecurity.authc.pam.ModularAuthenticationStrategy)var33);
    org.jsecurity.authc.SimpleAccount var43 = new org.jsecurity.authc.SimpleAccount((org.jsecurity.subject.PrincipalCollection)var12, (java.lang.Object)var17);
    org.jsecurity.session.StoppedSessionException var44 = new org.jsecurity.session.StoppedSessionException("org.jsecurity.authz.UnauthorizedException: org.jsecurity.session.ExpiredSessionException: ", (java.lang.Throwable)var6, (java.io.Serializable)var43);
    java.lang.String var45 = var6.toString();
    var2.addSuppressed((java.lang.Throwable)var6);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var14);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var15);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var16);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var24);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var25);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var26);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var36);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var37);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var39);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var40);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var41);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var45 + "' != '" + "org.jsecurity.authc.IncorrectCredentialsException: \u0000\u0000"+ "'", var45.equals("org.jsecurity.authc.IncorrectCredentialsException: \u0000\u0000"));

  }

  public void test275() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest2.test275");


    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      org.jsecurity.config.IniConfiguration var1 = new org.jsecurity.config.IniConfiguration("6f8b35fd-0848-49a4-9560-659760616ad8");
      fail("Expected exception of type org.jsecurity.config.ConfigurationException");
    } catch (org.jsecurity.config.ConfigurationException e) {
      // Expected exception.
    }

  }

  public void test276() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest2.test276");


    org.jsecurity.realm.jndi.JndiRealmFactory var0 = new org.jsecurity.realm.jndi.JndiRealmFactory();
    java.io.InputStream var2 = org.jsecurity.util.ClassUtils.getResourceAsStream("");
    java.lang.Object[] var3 = new java.lang.Object[] { var2};
    java.util.List var4 = org.jsecurity.util.CollectionUtils.asList(var3);
    var0.setJndiNames((java.util.Collection)var4);
    var0.setJndiNames("e23a02c5-2287-4daa-91c4-8efed2be0f73");
    java.util.Collection var8 = var0.getJndiNames();
    org.jsecurity.authz.SimpleAuthorizationInfo var9 = new org.jsecurity.authz.SimpleAuthorizationInfo();
    org.jsecurity.session.UnknownSessionException var14 = new org.jsecurity.session.UnknownSessionException("dd\uFFFD", (java.io.Serializable)100.0f);
    org.jsecurity.subject.SubjectException var15 = new org.jsecurity.subject.SubjectException("dd\uFFFD", (java.lang.Throwable)var14);
    org.jsecurity.io.SerializationException var16 = new org.jsecurity.io.SerializationException("", (java.lang.Throwable)var15);
    java.lang.Throwable[] var17 = var15.getSuppressed();
    java.util.Set var18 = org.jsecurity.util.CollectionUtils.asSet((java.lang.Object[])var17);
    var9.setStringPermissions(var18);
    var0.setJndiNames((java.util.Collection)var18);
    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      java.util.Collection var21 = var0.getRealms();
      fail("Expected exception of type java.lang.IllegalStateException");
    } catch (java.lang.IllegalStateException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var2);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var3);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var4);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var8);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var17);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var18);

  }

  public void test277() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest2.test277");


    org.jsecurity.realm.text.TextConfigurationRealm var0 = new org.jsecurity.realm.text.TextConfigurationRealm();
    java.io.InputStream var2 = org.jsecurity.util.ClassUtils.getResourceAsStream("");
    java.lang.Object[] var3 = new java.lang.Object[] { var2};
    java.util.List var4 = org.jsecurity.util.CollectionUtils.asList(var3);
    org.jsecurity.authc.pam.ModularRealmAuthenticator var5 = new org.jsecurity.authc.pam.ModularRealmAuthenticator(var4);
    org.jsecurity.subject.SimplePrincipalCollection var7 = new org.jsecurity.subject.SimplePrincipalCollection((java.util.Collection)var4, "org.jsecurity.authz.UnauthorizedException: org.jsecurity.session.ExpiredSessionException: ");
    org.jsecurity.session.UnknownSessionException var12 = new org.jsecurity.session.UnknownSessionException("dd\uFFFD", (java.io.Serializable)100.0f);
    org.jsecurity.session.SessionException var14 = new org.jsecurity.session.SessionException("dd\uFFFD", (java.lang.Throwable)var12, (java.io.Serializable)0);
    org.jsecurity.session.SessionException var15 = new org.jsecurity.session.SessionException("dd\uFFFD", (java.lang.Throwable)var12);
    var7.add((java.lang.Object)var15, "org.jsecurity.config.ConfigurationException: dd\uFFFD");
    var0.onLogout((org.jsecurity.subject.PrincipalCollection)var7);
    org.jsecurity.cache.HashtableCacheManager var19 = new org.jsecurity.cache.HashtableCacheManager();
    org.jsecurity.cache.Cache var21 = var19.getCache("\u0000\u0000");
    var0.setAuthorizationCache(var21);
    org.jsecurity.authc.UsernamePasswordToken var23 = new org.jsecurity.authc.UsernamePasswordToken();
    java.lang.String var24 = var23.getUsername();
    java.lang.Object var25 = var23.getPrincipal();
    var23.setUsername("hi!");
    java.lang.Object var28 = var23.getCredentials();
    boolean var29 = var0.supports((org.jsecurity.authc.AuthenticationToken)var23);
    boolean var30 = var23.isRememberMe();
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var2);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var3);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var4);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var21);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var24);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var25);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var28);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var29 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var30 == false);

  }

  public void test278() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest2.test278");


    org.jsecurity.io.ResourceException var4 = new org.jsecurity.io.ResourceException("hi!");
    org.jsecurity.authc.UnknownAccountException var5 = new org.jsecurity.authc.UnknownAccountException((java.lang.Throwable)var4);
    org.jsecurity.session.StoppedSessionException var6 = new org.jsecurity.session.StoppedSessionException("dd\uFFFD", (java.io.Serializable)var4);
    org.jsecurity.authc.pam.UnsupportedTokenException var8 = new org.jsecurity.authc.pam.UnsupportedTokenException("a2b823b1e72eae2b727289df8a00a89df8a0bab6ad8a89c4c5c7a9b62a270000");
    org.jsecurity.session.ExpiredSessionException var9 = new org.jsecurity.session.ExpiredSessionException("org.jsecurity.authz.UnauthorizedException: org.jsecurity.session.ExpiredSessionException: ", (java.lang.Throwable)var6, (java.io.Serializable)"a2b823b1e72eae2b727289df8a00a89df8a0bab6ad8a89c4c5c7a9b62a270000");
    org.jsecurity.config.ConfigurationException var10 = new org.jsecurity.config.ConfigurationException("org.jsecurity.realm.SimpleAccountRealm-9-authorization", (java.lang.Throwable)var9);

  }

  public void test279() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest2.test279");


    org.jsecurity.session.InvalidSessionException var1 = new org.jsecurity.session.InvalidSessionException("\uFFFD\uFFFD#\uFFFD\uFFFD.\uFFFD+r\uFFFD\u6959(\uFFFD\uFFFDW\uFFFDq\uFFFD.\uFFFD\uFFFD^jY\uFFFDj\uFFFDa\uFFFD\uFFFD\uFFFDj\u0628\u0000");

  }

  public void test280() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest2.test280");


    org.jsecurity.authz.UnauthorizedException var1 = new org.jsecurity.authz.UnauthorizedException("dd\uFFFD");
    org.jsecurity.subject.InvalidSubjectException var2 = new org.jsecurity.subject.InvalidSubjectException((java.lang.Throwable)var1);

  }

  public void test281() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest2.test281");


    org.jsecurity.io.IniResource var0 = new org.jsecurity.io.IniResource();
    java.util.Map var1 = var0.getSections();
    java.lang.String var2 = var0.getCharsetName();
    org.jsecurity.config.ReflectionBuilder var3 = new org.jsecurity.config.ReflectionBuilder();
    org.jsecurity.io.IniResource var4 = new org.jsecurity.io.IniResource();
    java.util.Map var5 = var4.getSections();
    var3.setObjects(var5);
    org.jsecurity.io.IniResource var7 = new org.jsecurity.io.IniResource();
    java.util.Map var8 = var7.getSections();
    java.util.Map var9 = var3.buildObjects(var8);
    var0.setSections(var9);
    java.lang.String var11 = var0.getCharsetName();
    java.util.Map var12 = var0.getSections();
    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      var0.load("499413f2-ff78-44c6-b3f7-2030321675ed");
      fail("Expected exception of type org.jsecurity.io.ResourceException");
    } catch (org.jsecurity.io.ResourceException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var1);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var2);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var5);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var8);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var9);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var11);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var12);

  }

  public void test282() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest2.test282");


    org.jsecurity.authc.ExpiredCredentialsException var1 = new org.jsecurity.authc.ExpiredCredentialsException();
    org.jsecurity.session.ExpiredSessionException var2 = new org.jsecurity.session.ExpiredSessionException("", (java.lang.Throwable)var1);
    org.jsecurity.authz.UnauthorizedException var3 = new org.jsecurity.authz.UnauthorizedException((java.lang.Throwable)var2);
    org.jsecurity.authc.ExcessiveAttemptsException var4 = new org.jsecurity.authc.ExcessiveAttemptsException((java.lang.Throwable)var3);
    org.jsecurity.subject.InvalidSubjectException var5 = new org.jsecurity.subject.InvalidSubjectException((java.lang.Throwable)var4);
    org.jsecurity.io.SerializationException var6 = new org.jsecurity.io.SerializationException((java.lang.Throwable)var5);

  }

  public void test283() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest2.test283");


    org.jsecurity.authc.pam.AllSuccessfulModularAuthenticationStrategy var2 = new org.jsecurity.authc.pam.AllSuccessfulModularAuthenticationStrategy();
    char[] var4 = new char[] { };
    org.jsecurity.authc.UsernamePasswordToken var6 = new org.jsecurity.authc.UsernamePasswordToken("hi!", var4, true);
    org.jsecurity.authc.SimpleAccount var7 = new org.jsecurity.authc.SimpleAccount();
    var7.setCredentialsExpired(false);
    boolean var10 = var7.isLocked();
    org.jsecurity.authc.AuthenticationInfo var11 = var2.afterAllAttempts((org.jsecurity.authc.AuthenticationToken)var6, (org.jsecurity.authc.AuthenticationInfo)var7);
    char[] var15 = new char[] { '4', '#'};
    org.jsecurity.authc.UsernamePasswordToken var16 = new org.jsecurity.authc.UsernamePasswordToken("\u0000\u0000", var15);
    org.jsecurity.authc.SimpleAccount var17 = new org.jsecurity.authc.SimpleAccount();
    var17.setCredentialsExpired(false);
    var17.setCredentialsExpired(false);
    boolean var22 = var17.isCredentialsExpired();
    org.jsecurity.authc.AuthenticationInfo var23 = var2.afterAllAttempts((org.jsecurity.authc.AuthenticationToken)var16, (org.jsecurity.authc.AuthenticationInfo)var17);
    java.net.InetAddress var24 = var16.getInetAddress();
    org.jsecurity.session.mgt.eis.MemorySessionDAO var25 = new org.jsecurity.session.mgt.eis.MemorySessionDAO();
    org.jsecurity.cache.Cache var26 = var25.getActiveSessionsCache();
    org.jsecurity.cache.CacheManager var27 = var25.getCacheManager();
    org.jsecurity.cache.HashtableCacheManager var28 = new org.jsecurity.cache.HashtableCacheManager();
    org.jsecurity.cache.Cache var30 = var28.getCache("\u0000\u0000");
    var25.setActiveSessionsCache(var30);
    java.io.InputStream var33 = org.jsecurity.util.ClassUtils.getResourceAsStream("");
    java.lang.Object[] var34 = new java.lang.Object[] { var33};
    java.util.List var35 = org.jsecurity.util.CollectionUtils.asList(var34);
    org.jsecurity.authc.pam.ModularRealmAuthenticator var36 = new org.jsecurity.authc.pam.ModularRealmAuthenticator(var35);
    org.jsecurity.authc.pam.AllSuccessfulModularAuthenticationStrategy var37 = new org.jsecurity.authc.pam.AllSuccessfulModularAuthenticationStrategy();
    var36.setModularAuthenticationStrategy((org.jsecurity.authc.pam.ModularAuthenticationStrategy)var37);
    org.jsecurity.authz.SimpleAuthorizationInfo var39 = new org.jsecurity.authz.SimpleAuthorizationInfo();
    var39.addStringPermission("hi!");
    java.io.InputStream var43 = org.jsecurity.util.ClassUtils.getResourceAsStream("");
    java.lang.Object[] var44 = new java.lang.Object[] { var43};
    java.util.List var45 = org.jsecurity.util.CollectionUtils.asList(var44);
    var39.addRoles((java.util.Collection)var45);
    var36.setAuthenticationListeners((java.util.Collection)var45);
    org.jsecurity.realm.activedirectory.ActiveDirectoryRealm var48 = new org.jsecurity.realm.activedirectory.ActiveDirectoryRealm();
    var48.setPrincipalSuffix("");
    var36.setRealm((org.jsecurity.realm.Realm)var48);
    org.jsecurity.cache.HashtableCacheManager var52 = new org.jsecurity.cache.HashtableCacheManager();
    org.jsecurity.cache.Cache var54 = var52.getCache("\u0000\u0000");
    var48.setAuthorizationCache(var54);
    var25.setActiveSessionsCache(var54);
    org.jsecurity.session.mgt.SimpleSession var57 = new org.jsecurity.session.mgt.SimpleSession();
    java.io.Serializable var58 = var25.create((org.jsecurity.session.Session)var57);
    org.jsecurity.session.mgt.SimpleSession var59 = new org.jsecurity.session.mgt.SimpleSession();
    var59.touch();
    var59.validate();
    org.jsecurity.session.mgt.SimpleSession var62 = new org.jsecurity.session.mgt.SimpleSession();
    var62.setTimeout((-1L));
    org.jsecurity.session.mgt.SimpleSession var65 = new org.jsecurity.session.mgt.SimpleSession();
    java.util.Date var66 = var65.getLastAccessTime();
    var62.setLastAccessTime(var66);
    org.jsecurity.session.mgt.SimpleSession var68 = new org.jsecurity.session.mgt.SimpleSession();
    java.util.Date var69 = var68.getLastAccessTime();
    var62.setStopTimestamp(var69);
    var59.setLastAccessTime(var69);
    var57.setLastAccessTime(var69);
    org.jsecurity.session.mgt.ImmutableProxiedSession var73 = new org.jsecurity.session.mgt.ImmutableProxiedSession((org.jsecurity.session.Session)var57);
    java.util.Date var74 = var73.getLastAccessTime();
    java.net.InetAddress var75 = var73.getHostAddress();
    var16.setInetAddress(var75);
    org.jsecurity.authc.UsernamePasswordToken var77 = new org.jsecurity.authc.UsernamePasswordToken("3008602b-f37d-459d-973e-0453ee1d8c4b", "10f5b491-38ac-4c02-8085-950abb026a06", var75);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var4);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var10 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var11);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var15);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var22 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var23);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var24);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var26);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var27);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var30);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var33);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var34);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var35);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var43);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var44);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var45);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var54);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var58 + "' != '" + "69b91d50-ee90-487b-8ebd-dd7f4a239e5e"+ "'", var58.equals("69b91d50-ee90-487b-8ebd-dd7f4a239e5e"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var66);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var69);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var74);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var75);

  }

  public void test284() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest2.test284");


    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      java.security.Key var1 = org.jsecurity.crypto.BlowfishCipher.generateNewKey((-1));
      fail("Expected exception of type java.security.InvalidParameterException");
    } catch (java.security.InvalidParameterException e) {
      // Expected exception.
    }

  }

  public void test285() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest2.test285");


    boolean var1 = org.jsecurity.io.ResourceUtils.resourceExists("org.jsecurity.config.ConfigurationException: dd\uFFFD-4org.jsecurity.config.ConfigurationException: dd\uFFFD02-8085-950org.jsecurity.config.ConfigurationException: dd\uFFFDbb026org.jsecurity.config.ConfigurationException: dd\uFFFD06");
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var1 == false);

  }

  public void test286() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest2.test286");


    org.jsecurity.cache.HashtableCache var1 = new org.jsecurity.cache.HashtableCache("783ccd31-48a8-42dd-890f-df885a7baaff");
    var1.clear();

  }

  public void test287() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest2.test287");


    org.jsecurity.realm.activedirectory.ActiveDirectoryRealm var0 = new org.jsecurity.realm.activedirectory.ActiveDirectoryRealm();
    var0.init();
    var0.setSystemPassword("dd\uFFFD");
    org.jsecurity.authz.aop.GuestAnnotationHandler var4 = new org.jsecurity.authz.aop.GuestAnnotationHandler();
    java.lang.Class var5 = var4.getAnnotationClass();
    var0.setAuthenticationTokenClass(var5);
    org.jsecurity.mgt.DefaultSecurityManager var7 = new org.jsecurity.mgt.DefaultSecurityManager((org.jsecurity.realm.Realm)var0);
    org.jsecurity.cache.CacheManager var8 = var0.getCacheManager();
    org.jsecurity.realm.text.PropertiesRealm var9 = new org.jsecurity.realm.text.PropertiesRealm(var8);
    var9.setResourcePath("?\u0238\u0018@\uFFFD");
    java.lang.String var12 = var9.getAuthorizationCacheName();
    org.jsecurity.mgt.DefaultSecurityManager var13 = new org.jsecurity.mgt.DefaultSecurityManager((org.jsecurity.realm.Realm)var9);
    byte[] var18 = new byte[] { (byte)100, (byte)100, (byte)(-1)};
    java.lang.String var19 = org.jsecurity.codec.CodecSupport.toString(var18);
    byte[] var20 = org.jsecurity.codec.Base64.encode(var18);
    char[] var21 = org.jsecurity.codec.CodecSupport.toChars(var20);
    org.jsecurity.authc.UsernamePasswordToken var23 = new org.jsecurity.authc.UsernamePasswordToken("org.jsecurity.realm.SimpleAccountRealm-55-authorization", var21, false);
    char[] var24 = var23.getPassword();
    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      org.jsecurity.subject.Subject var25 = var13.login((org.jsecurity.authc.AuthenticationToken)var23);
      fail("Expected exception of type org.jsecurity.authc.AuthenticationException");
    } catch (org.jsecurity.authc.AuthenticationException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var5);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var8);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var12 + "' != '" + "org.jsecurity.realm.text.PropertiesRealm-352-authorization"+ "'", var12.equals("org.jsecurity.realm.text.PropertiesRealm-352-authorization"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var18);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var19 + "' != '" + "dd\uFFFD"+ "'", var19.equals("dd\uFFFD"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var20);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var21);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var24);

  }

  public void test288() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest2.test288");


    org.jsecurity.jndi.JndiLocator var0 = new org.jsecurity.jndi.JndiLocator();
    java.util.Properties var1 = var0.getJndiEnvironment();
    boolean var2 = var0.isResourceRef();
    var0.setResourceRef(true);
    java.util.Properties var5 = var0.getJndiEnvironment();
    org.jsecurity.jndi.JndiTemplate var6 = new org.jsecurity.jndi.JndiTemplate();
    java.util.Properties var7 = var6.getEnvironment();
    java.util.Properties var8 = var6.getEnvironment();
    var0.setJndiTemplate(var6);
    org.jsecurity.authz.SimpleAuthorizationInfo var11 = new org.jsecurity.authz.SimpleAuthorizationInfo();
    var11.addRole("a2b823b1e72eae2b727289df8a00a89df8a0bab6ad8a89c4c5c7a9b62a270000");
    org.jsecurity.authz.SimpleAuthorizationInfo var14 = new org.jsecurity.authz.SimpleAuthorizationInfo();
    var14.addRole("a2b823b1e72eae2b727289df8a00a89df8a0bab6ad8a89c4c5c7a9b62a270000");
    org.jsecurity.session.UnknownSessionException var21 = new org.jsecurity.session.UnknownSessionException("dd\uFFFD", (java.io.Serializable)100.0f);
    org.jsecurity.subject.SubjectException var22 = new org.jsecurity.subject.SubjectException("dd\uFFFD", (java.lang.Throwable)var21);
    org.jsecurity.io.SerializationException var23 = new org.jsecurity.io.SerializationException("", (java.lang.Throwable)var22);
    java.lang.Throwable[] var24 = var22.getSuppressed();
    java.util.Set var25 = org.jsecurity.util.CollectionUtils.asSet((java.lang.Object[])var24);
    var14.addRoles((java.util.Collection)var25);
    var11.setObjectPermissions(var25);
    org.jsecurity.authz.SimpleAuthorizationInfo var28 = new org.jsecurity.authz.SimpleAuthorizationInfo();
    var28.addRole("a2b823b1e72eae2b727289df8a00a89df8a0bab6ad8a89c4c5c7a9b62a270000");
    org.jsecurity.authz.SimpleAuthorizationInfo var31 = new org.jsecurity.authz.SimpleAuthorizationInfo();
    var31.addRole("a2b823b1e72eae2b727289df8a00a89df8a0bab6ad8a89c4c5c7a9b62a270000");
    org.jsecurity.session.UnknownSessionException var38 = new org.jsecurity.session.UnknownSessionException("dd\uFFFD", (java.io.Serializable)100.0f);
    org.jsecurity.subject.SubjectException var39 = new org.jsecurity.subject.SubjectException("dd\uFFFD", (java.lang.Throwable)var38);
    org.jsecurity.io.SerializationException var40 = new org.jsecurity.io.SerializationException("", (java.lang.Throwable)var39);
    java.lang.Throwable[] var41 = var39.getSuppressed();
    java.util.Set var42 = org.jsecurity.util.CollectionUtils.asSet((java.lang.Object[])var41);
    var31.addRoles((java.util.Collection)var42);
    var28.setObjectPermissions(var42);
    java.io.InputStream var46 = org.jsecurity.util.ClassUtils.getResourceAsStream("");
    java.lang.Object[] var47 = new java.lang.Object[] { var46};
    java.util.List var48 = org.jsecurity.util.CollectionUtils.asList(var47);
    org.jsecurity.authc.pam.ModularRealmAuthenticator var49 = new org.jsecurity.authc.pam.ModularRealmAuthenticator(var48);
    org.jsecurity.subject.SimplePrincipalCollection var51 = new org.jsecurity.subject.SimplePrincipalCollection((java.util.Collection)var48, "org.jsecurity.authz.UnauthorizedException: org.jsecurity.session.ExpiredSessionException: ");
    java.util.Set var52 = var51.getRealmNames();
    java.io.InputStream var54 = org.jsecurity.util.ClassUtils.getResourceAsStream("");
    java.lang.Object[] var55 = new java.lang.Object[] { var54};
    java.util.List var56 = org.jsecurity.util.CollectionUtils.asList(var55);
    org.jsecurity.authc.pam.ModularRealmAuthenticator var57 = new org.jsecurity.authc.pam.ModularRealmAuthenticator(var56);
    org.jsecurity.subject.SimplePrincipalCollection var59 = new org.jsecurity.subject.SimplePrincipalCollection((java.util.Collection)var56, "org.jsecurity.authz.UnauthorizedException: org.jsecurity.session.ExpiredSessionException: ");
    org.jsecurity.session.UnknownSessionException var64 = new org.jsecurity.session.UnknownSessionException("dd\uFFFD", (java.io.Serializable)100.0f);
    org.jsecurity.session.SessionException var66 = new org.jsecurity.session.SessionException("dd\uFFFD", (java.lang.Throwable)var64, (java.io.Serializable)0);
    org.jsecurity.session.SessionException var67 = new org.jsecurity.session.SessionException("dd\uFFFD", (java.lang.Throwable)var64);
    var59.add((java.lang.Object)var67, "org.jsecurity.config.ConfigurationException: dd\uFFFD");
    java.util.Set var70 = var59.asSet();
    var51.addAll((java.util.Collection)var70, "6464ff");
    var28.setStringPermissions(var70);
    org.jsecurity.subject.SimplePrincipalCollection var75 = new org.jsecurity.subject.SimplePrincipalCollection((java.util.Collection)var70, "\u0000\u0000");
    var11.addRoles((java.util.Collection)var70);
    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      var6.rebind("86c1a830-9c7d-4e10-bf92-010433390085", (java.lang.Object)var70);
      fail("Expected exception of type javax.naming.NoInitialContextException");
    } catch (javax.naming.NoInitialContextException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var2 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var5);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var7);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var8);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var24);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var25);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var41);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var42);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var46);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var47);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var48);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var52);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var54);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var55);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var56);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var70);

  }

  public void test289() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest2.test289");


    org.jsecurity.realm.jndi.JndiRealmFactory var0 = new org.jsecurity.realm.jndi.JndiRealmFactory();
    java.io.InputStream var2 = org.jsecurity.util.ClassUtils.getResourceAsStream("");
    java.lang.Object[] var3 = new java.lang.Object[] { var2};
    java.util.List var4 = org.jsecurity.util.CollectionUtils.asList(var3);
    org.jsecurity.authc.pam.ModularRealmAuthenticator var5 = new org.jsecurity.authc.pam.ModularRealmAuthenticator(var4);
    org.jsecurity.authc.pam.AllSuccessfulModularAuthenticationStrategy var6 = new org.jsecurity.authc.pam.AllSuccessfulModularAuthenticationStrategy();
    var5.setModularAuthenticationStrategy((org.jsecurity.authc.pam.ModularAuthenticationStrategy)var6);
    org.jsecurity.authz.SimpleAuthorizationInfo var8 = new org.jsecurity.authz.SimpleAuthorizationInfo();
    var8.addStringPermission("hi!");
    java.io.InputStream var12 = org.jsecurity.util.ClassUtils.getResourceAsStream("");
    java.lang.Object[] var13 = new java.lang.Object[] { var12};
    java.util.List var14 = org.jsecurity.util.CollectionUtils.asList(var13);
    var8.addRoles((java.util.Collection)var14);
    var5.setAuthenticationListeners((java.util.Collection)var14);
    org.jsecurity.realm.activedirectory.ActiveDirectoryRealm var17 = new org.jsecurity.realm.activedirectory.ActiveDirectoryRealm();
    var17.setPrincipalSuffix("");
    var5.setRealm((org.jsecurity.realm.Realm)var17);
    org.jsecurity.authc.pam.FirstSuccessfulAuthenticationStrategy var21 = new org.jsecurity.authc.pam.FirstSuccessfulAuthenticationStrategy();
    org.jsecurity.authz.UnauthorizedException var23 = new org.jsecurity.authz.UnauthorizedException("org.jsecurity.config.ConfigurationException: dd\uFFFD");
    java.lang.Throwable[] var24 = var23.getSuppressed();
    java.util.List var25 = org.jsecurity.util.CollectionUtils.asList((java.lang.Object[])var24);
    org.jsecurity.authc.UsernamePasswordToken var26 = new org.jsecurity.authc.UsernamePasswordToken();
    java.lang.String var27 = var26.getUsername();
    java.net.InetAddress var28 = var26.getInetAddress();
    org.jsecurity.authc.AuthenticationInfo var29 = var21.beforeAllAttempts((java.util.Collection)var25, (org.jsecurity.authc.AuthenticationToken)var26);
    var5.setModularAuthenticationStrategy((org.jsecurity.authc.pam.ModularAuthenticationStrategy)var21);
    org.jsecurity.codec.CodecException var33 = new org.jsecurity.codec.CodecException("dd\uFFFD");
    org.jsecurity.authc.ConcurrentAccessException var34 = new org.jsecurity.authc.ConcurrentAccessException("org.jsecurity.authz.UnauthorizedException: org.jsecurity.session.ExpiredSessionException: ", (java.lang.Throwable)var33);
    org.jsecurity.subject.SimplePrincipalCollection var36 = new org.jsecurity.subject.SimplePrincipalCollection((java.lang.Object)var33, "");
    org.jsecurity.authc.pam.FirstSuccessfulAuthenticationStrategy var37 = new org.jsecurity.authc.pam.FirstSuccessfulAuthenticationStrategy();
    org.jsecurity.authz.UnauthorizedException var39 = new org.jsecurity.authz.UnauthorizedException("org.jsecurity.config.ConfigurationException: dd\uFFFD");
    java.lang.Throwable[] var40 = var39.getSuppressed();
    java.util.List var41 = org.jsecurity.util.CollectionUtils.asList((java.lang.Object[])var40);
    org.jsecurity.authc.UsernamePasswordToken var42 = new org.jsecurity.authc.UsernamePasswordToken();
    java.lang.String var43 = var42.getUsername();
    java.net.InetAddress var44 = var42.getInetAddress();
    org.jsecurity.authc.AuthenticationInfo var45 = var37.beforeAllAttempts((java.util.Collection)var41, (org.jsecurity.authc.AuthenticationToken)var42);
    org.jsecurity.session.UnknownSessionException var50 = new org.jsecurity.session.UnknownSessionException("dd\uFFFD", (java.io.Serializable)100.0f);
    org.jsecurity.subject.SubjectException var51 = new org.jsecurity.subject.SubjectException("dd\uFFFD", (java.lang.Throwable)var50);
    org.jsecurity.io.SerializationException var52 = new org.jsecurity.io.SerializationException("", (java.lang.Throwable)var51);
    java.lang.Throwable[] var53 = var51.getSuppressed();
    java.util.Set var54 = org.jsecurity.util.CollectionUtils.asSet((java.lang.Object[])var53);
    org.jsecurity.authc.SimpleAccount var55 = new org.jsecurity.authc.SimpleAccount((org.jsecurity.subject.PrincipalCollection)var36, (java.lang.Object)var41, var54);
    org.jsecurity.authc.pam.AllSuccessfulModularAuthenticationStrategy var56 = new org.jsecurity.authc.pam.AllSuccessfulModularAuthenticationStrategy();
    char[] var58 = new char[] { };
    org.jsecurity.authc.UsernamePasswordToken var60 = new org.jsecurity.authc.UsernamePasswordToken("hi!", var58, true);
    org.jsecurity.authc.SimpleAccount var61 = new org.jsecurity.authc.SimpleAccount();
    var61.setCredentialsExpired(false);
    boolean var64 = var61.isLocked();
    org.jsecurity.authc.AuthenticationInfo var65 = var56.afterAllAttempts((org.jsecurity.authc.AuthenticationToken)var60, (org.jsecurity.authc.AuthenticationInfo)var61);
    char[] var68 = new char[] { };
    org.jsecurity.authc.UsernamePasswordToken var70 = new org.jsecurity.authc.UsernamePasswordToken("hi!", var68, true);
    org.jsecurity.authc.UsernamePasswordToken var71 = new org.jsecurity.authc.UsernamePasswordToken("\u0000\u0000", var68);
    var60.setPassword(var68);
    org.jsecurity.authc.AuthenticationInfo var73 = var21.beforeAllAttempts((java.util.Collection)var41, (org.jsecurity.authc.AuthenticationToken)var60);
    org.jsecurity.authz.permission.WildcardPermissionResolver var74 = new org.jsecurity.authz.permission.WildcardPermissionResolver();
    org.jsecurity.authz.Permission var76 = var74.resolvePermission("hi!");
    org.jsecurity.authz.Permission var78 = var74.resolvePermission("hi!");
    java.util.Set var79 = org.jsecurity.util.PermissionUtils.resolvePermissions((java.util.Collection)var41, (org.jsecurity.authz.permission.PermissionResolver)var74);
    var0.setJndiNames((java.util.Collection)var79);
    org.jsecurity.realm.activedirectory.ActiveDirectoryRealm var81 = new org.jsecurity.realm.activedirectory.ActiveDirectoryRealm();
    org.jsecurity.authc.credential.Sha256CredentialsMatcher var82 = new org.jsecurity.authc.credential.Sha256CredentialsMatcher();
    var81.setCredentialsMatcher((org.jsecurity.authc.credential.CredentialsMatcher)var82);
    java.lang.String var84 = var81.getAuthorizationCacheName();
    var81.setUrl("hi!");
    org.jsecurity.realm.ldap.DefaultLdapContextFactory var87 = new org.jsecurity.realm.ldap.DefaultLdapContextFactory();
    var81.setLdapContextFactory((org.jsecurity.realm.ldap.LdapContextFactory)var87);
    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      org.jsecurity.authc.SimpleAccount var90 = new org.jsecurity.authc.SimpleAccount((java.util.Collection)var79, (java.lang.Object)var87, "c1011819-6bf2-4dab-9482-1d3562bebb3d");
      fail("Expected exception of type java.lang.IllegalArgumentException");
    } catch (java.lang.IllegalArgumentException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var2);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var3);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var4);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var12);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var13);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var14);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var24);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var25);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var27);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var28);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var29);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var40);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var41);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var43);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var44);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var45);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var53);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var54);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var58);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var64 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var65);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var68);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var73);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var76);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var78);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var79);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var84);

  }

  public void test290() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest2.test290");


    boolean var1 = org.jsecurity.io.ResourceUtils.hasResourcePrefix("944eaa9e-a16a-40cf-bdfa-a6f7f9bf6e53");
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var1 == false);

  }

  public void test291() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest2.test291");


    org.jsecurity.mgt.DefaultSecurityManager var0 = new org.jsecurity.mgt.DefaultSecurityManager();
    java.io.InputStream var2 = org.jsecurity.util.ClassUtils.getResourceAsStream("");
    java.lang.Object[] var3 = new java.lang.Object[] { var2};
    java.util.List var4 = org.jsecurity.util.CollectionUtils.asList(var3);
    org.jsecurity.authc.pam.ModularRealmAuthenticator var5 = new org.jsecurity.authc.pam.ModularRealmAuthenticator(var4);
    org.jsecurity.authc.pam.AllSuccessfulModularAuthenticationStrategy var6 = new org.jsecurity.authc.pam.AllSuccessfulModularAuthenticationStrategy();
    var5.setModularAuthenticationStrategy((org.jsecurity.authc.pam.ModularAuthenticationStrategy)var6);
    org.jsecurity.authz.SimpleAuthorizationInfo var8 = new org.jsecurity.authz.SimpleAuthorizationInfo();
    var8.addStringPermission("hi!");
    java.io.InputStream var12 = org.jsecurity.util.ClassUtils.getResourceAsStream("");
    java.lang.Object[] var13 = new java.lang.Object[] { var12};
    java.util.List var14 = org.jsecurity.util.CollectionUtils.asList(var13);
    var8.addRoles((java.util.Collection)var14);
    var5.setAuthenticationListeners((java.util.Collection)var14);
    var0.setSessionListeners((java.util.Collection)var14);
    org.jsecurity.authc.pam.ModularRealmAuthenticator var18 = new org.jsecurity.authc.pam.ModularRealmAuthenticator();
    org.jsecurity.authz.permission.InvalidPermissionStringException var21 = new org.jsecurity.authz.permission.InvalidPermissionStringException("", "dd\uFFFD");
    org.jsecurity.JSecurityException var23 = new org.jsecurity.JSecurityException("");
    org.jsecurity.authc.SimpleAuthenticationInfo var25 = new org.jsecurity.authc.SimpleAuthenticationInfo((java.lang.Object)var21, (java.lang.Object)"", "org.jsecurity.authz.UnauthorizedException: org.jsecurity.session.ExpiredSessionException: ");
    org.jsecurity.subject.PrincipalCollection var26 = var25.getPrincipals();
    var18.onLogout(var26);
    var0.setAuthenticator((org.jsecurity.authc.Authenticator)var18);
    org.jsecurity.codec.CodecException var31 = new org.jsecurity.codec.CodecException("dd\uFFFD");
    org.jsecurity.authc.ConcurrentAccessException var32 = new org.jsecurity.authc.ConcurrentAccessException("org.jsecurity.authz.UnauthorizedException: org.jsecurity.session.ExpiredSessionException: ", (java.lang.Throwable)var31);
    org.jsecurity.subject.SimplePrincipalCollection var34 = new org.jsecurity.subject.SimplePrincipalCollection((java.lang.Object)var31, "");
    org.jsecurity.authc.pam.FirstSuccessfulAuthenticationStrategy var35 = new org.jsecurity.authc.pam.FirstSuccessfulAuthenticationStrategy();
    org.jsecurity.authz.UnauthorizedException var37 = new org.jsecurity.authz.UnauthorizedException("org.jsecurity.config.ConfigurationException: dd\uFFFD");
    java.lang.Throwable[] var38 = var37.getSuppressed();
    java.util.List var39 = org.jsecurity.util.CollectionUtils.asList((java.lang.Object[])var38);
    org.jsecurity.authc.UsernamePasswordToken var40 = new org.jsecurity.authc.UsernamePasswordToken();
    java.lang.String var41 = var40.getUsername();
    java.net.InetAddress var42 = var40.getInetAddress();
    org.jsecurity.authc.AuthenticationInfo var43 = var35.beforeAllAttempts((java.util.Collection)var39, (org.jsecurity.authc.AuthenticationToken)var40);
    org.jsecurity.session.UnknownSessionException var48 = new org.jsecurity.session.UnknownSessionException("dd\uFFFD", (java.io.Serializable)100.0f);
    org.jsecurity.subject.SubjectException var49 = new org.jsecurity.subject.SubjectException("dd\uFFFD", (java.lang.Throwable)var48);
    org.jsecurity.io.SerializationException var50 = new org.jsecurity.io.SerializationException("", (java.lang.Throwable)var49);
    java.lang.Throwable[] var51 = var49.getSuppressed();
    java.util.Set var52 = org.jsecurity.util.CollectionUtils.asSet((java.lang.Object[])var51);
    org.jsecurity.authc.SimpleAccount var53 = new org.jsecurity.authc.SimpleAccount((org.jsecurity.subject.PrincipalCollection)var34, (java.lang.Object)var39, var52);
    java.io.InputStream var55 = org.jsecurity.util.ClassUtils.getResourceAsStream("");
    java.lang.Object[] var56 = new java.lang.Object[] { var55};
    java.util.List var57 = org.jsecurity.util.CollectionUtils.asList(var56);
    org.jsecurity.authc.pam.ModularRealmAuthenticator var58 = new org.jsecurity.authc.pam.ModularRealmAuthenticator(var57);
    org.jsecurity.subject.SimplePrincipalCollection var60 = new org.jsecurity.subject.SimplePrincipalCollection((java.util.Collection)var57, "org.jsecurity.authz.UnauthorizedException: org.jsecurity.session.ExpiredSessionException: ");
    org.jsecurity.io.ResourceException var64 = new org.jsecurity.io.ResourceException("hi!");
    org.jsecurity.authc.UnknownAccountException var65 = new org.jsecurity.authc.UnknownAccountException((java.lang.Throwable)var64);
    org.jsecurity.session.StoppedSessionException var66 = new org.jsecurity.session.StoppedSessionException("dd\uFFFD", (java.io.Serializable)var64);
    org.jsecurity.session.UnknownSessionException var67 = new org.jsecurity.session.UnknownSessionException("org.jsecurity.authz.UnauthorizedException: org.jsecurity.session.ExpiredSessionException: ", (java.lang.Throwable)var64);
    boolean var68 = var60.equals((java.lang.Object)var64);
    var34.addAll((org.jsecurity.subject.PrincipalCollection)var60);
    org.jsecurity.session.UnknownSessionException var74 = new org.jsecurity.session.UnknownSessionException("dd\uFFFD", (java.io.Serializable)100.0f);
    org.jsecurity.subject.SubjectException var75 = new org.jsecurity.subject.SubjectException("dd\uFFFD", (java.lang.Throwable)var74);
    org.jsecurity.io.SerializationException var76 = new org.jsecurity.io.SerializationException("", (java.lang.Throwable)var75);
    java.lang.Throwable[] var77 = var75.getSuppressed();
    java.util.List var78 = org.jsecurity.util.CollectionUtils.asList((java.lang.Object[])var77);
    boolean var79 = var0.isPermittedAll((org.jsecurity.subject.PrincipalCollection)var34, (java.util.Collection)var78);
    org.jsecurity.subject.DelegatingSubject var80 = new org.jsecurity.subject.DelegatingSubject((org.jsecurity.mgt.SecurityManager)var0);
    boolean var82 = var80.hasRole("org.jsecurity.authc.IncorrectCredentialsException: \u0000\u0000");
    java.net.InetAddress var83 = var80.getInetAddress();
    org.jsecurity.authc.ExpiredCredentialsException var88 = new org.jsecurity.authc.ExpiredCredentialsException();
    org.jsecurity.session.ExpiredSessionException var89 = new org.jsecurity.session.ExpiredSessionException("", (java.lang.Throwable)var88);
    org.jsecurity.subject.InvalidSubjectException var90 = new org.jsecurity.subject.InvalidSubjectException("org.jsecurity.authc.AccountException: hi!", (java.lang.Throwable)var88);
    org.jsecurity.subject.SubjectException var91 = new org.jsecurity.subject.SubjectException("51683bf6-3418-4d98-b15a-6e3f3f2f8eb9", (java.lang.Throwable)var90);
    org.jsecurity.authc.DisabledAccountException var92 = new org.jsecurity.authc.DisabledAccountException("c66ea0fc-9ec0-41f7-adb2-af232b25e84f", (java.lang.Throwable)var90);
    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      org.jsecurity.crypto.hash.Md5Hash var93 = new org.jsecurity.crypto.hash.Md5Hash((java.lang.Object)var83, (java.lang.Object)"c66ea0fc-9ec0-41f7-adb2-af232b25e84f");
      fail("Expected exception of type org.jsecurity.codec.CodecException");
    } catch (org.jsecurity.codec.CodecException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var2);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var3);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var4);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var12);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var13);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var14);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var26);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var38);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var39);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var41);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var42);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var43);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var51);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var52);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var55);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var56);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var57);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var68 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var77);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var78);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var79 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var82 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var83);

  }

  public void test292() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest2.test292");


    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      byte[] var2 = org.jsecurity.codec.CodecSupport.toBytes("bcd88f91-36fc-4824-97c3-1a752a1a4e71", "162a4550-2475-4cc9-b393-3917de249d8e");
      fail("Expected exception of type org.jsecurity.codec.CodecException");
    } catch (org.jsecurity.codec.CodecException e) {
      // Expected exception.
    }

  }

  public void test293() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest2.test293");


    org.jsecurity.authz.UnauthorizedException var2 = new org.jsecurity.authz.UnauthorizedException();
    org.jsecurity.session.SessionException var4 = new org.jsecurity.session.SessionException("", (java.lang.Throwable)var2, (java.io.Serializable)"org.jsecurity.config.ConfigurationException: dd\uFFFD");
    org.jsecurity.util.InstantiationException var5 = new org.jsecurity.util.InstantiationException("ca73d1a4-706e-42e7-980f-896d3b153de8", (java.lang.Throwable)var4);
    org.jsecurity.authc.ConcurrentAccessException var6 = new org.jsecurity.authc.ConcurrentAccessException((java.lang.Throwable)var5);

  }

  public void test294() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest2.test294");


    boolean var2 = org.jsecurity.util.StringUtils.startsWithIgnoreCase("0310766d-27fe-4aa3-9ad6-3a25c0be6154", "7ef36680-c8d0-4ff6-a301-9038bb416b9d");
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var2 == false);

  }

  public void test295() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest2.test295");


    org.jsecurity.crypto.BlowfishCipher var0 = new org.jsecurity.crypto.BlowfishCipher();
    java.security.Key var1 = org.jsecurity.crypto.BlowfishCipher.generateNewKey();
    var0.setKey(var1);
    java.security.Key var3 = org.jsecurity.crypto.BlowfishCipher.generateNewKey();
    var0.setKey(var3);
    byte[] var8 = new byte[] { (byte)100, (byte)100, (byte)(-1)};
    java.lang.String var9 = org.jsecurity.codec.CodecSupport.toString(var8);
    char[] var10 = org.jsecurity.codec.CodecSupport.toChars(var8);
    boolean var11 = org.jsecurity.codec.Base64.isBase64(var8);
    boolean var12 = org.jsecurity.codec.Base64.isBase64(var8);
    boolean var13 = org.jsecurity.codec.Base64.isBase64(var8);
    java.lang.String var14 = org.jsecurity.codec.Hex.encodeToString(var8);
    byte[] var18 = new byte[] { (byte)100, (byte)100, (byte)(-1)};
    java.lang.String var19 = org.jsecurity.codec.CodecSupport.toString(var18);
    char[] var20 = org.jsecurity.codec.CodecSupport.toChars(var18);
    boolean var21 = org.jsecurity.codec.Base64.isBase64(var18);
    boolean var22 = org.jsecurity.codec.Base64.isBase64(var18);
    boolean var23 = org.jsecurity.codec.Base64.isBase64(var18);
    java.lang.String var24 = org.jsecurity.codec.Base64.encodeToString(var18);
    byte[] var25 = var0.encrypt(var8, var18);
    org.jsecurity.io.DefaultSerializer var26 = new org.jsecurity.io.DefaultSerializer();
    org.jsecurity.authz.SimpleRole var27 = new org.jsecurity.authz.SimpleRole();
    byte[] var28 = var26.serialize((java.lang.Object)var27);
    byte[] var32 = new byte[] { (byte)100, (byte)100, (byte)(-1)};
    java.lang.String var33 = org.jsecurity.codec.CodecSupport.toString(var32);
    char[] var34 = org.jsecurity.codec.CodecSupport.toChars(var32);
    boolean var35 = org.jsecurity.codec.Base64.isBase64(var32);
    boolean var36 = org.jsecurity.codec.Base64.isBase64(var32);
    boolean var37 = org.jsecurity.codec.Base64.isBase64(var32);
    byte[] var38 = var0.encrypt(var28, var32);
    char[] var39 = org.jsecurity.codec.CodecSupport.toChars(var32);
    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      byte[] var41 = org.jsecurity.codec.CodecSupport.toBytes(var39, "orgjsecurityconfigConfigurationExceptionAAA=");
      fail("Expected exception of type org.jsecurity.codec.CodecException");
    } catch (org.jsecurity.codec.CodecException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var1);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var3);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var8);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var9 + "' != '" + "dd\uFFFD"+ "'", var9.equals("dd\uFFFD"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var10);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var11 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var12 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var13 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var14 + "' != '" + "6464ff"+ "'", var14.equals("6464ff"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var18);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var19 + "' != '" + "dd\uFFFD"+ "'", var19.equals("dd\uFFFD"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var20);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var21 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var22 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var23 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var24 + "' != '" + "ZGT/"+ "'", var24.equals("ZGT/"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var25);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var28);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var32);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var33 + "' != '" + "dd\uFFFD"+ "'", var33.equals("dd\uFFFD"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var34);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var35 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var36 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var37 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var38);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var39);

  }

  public void test296() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest2.test296");


    org.jsecurity.util.UnavailableConstructorException var1 = new org.jsecurity.util.UnavailableConstructorException("jsecurity-activeSessionCache");

  }

  public void test297() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest2.test297");


    org.jsecurity.session.UnknownSessionException var6 = new org.jsecurity.session.UnknownSessionException("dd\uFFFD", (java.io.Serializable)100.0f);
    org.jsecurity.config.ConfigurationException var7 = new org.jsecurity.config.ConfigurationException("dd\uFFFD", (java.lang.Throwable)var6);
    org.jsecurity.session.ExpiredSessionException var9 = new org.jsecurity.session.ExpiredSessionException("", (java.lang.Throwable)var7, (java.io.Serializable)true);
    org.jsecurity.authc.pam.UnsupportedTokenException var10 = new org.jsecurity.authc.pam.UnsupportedTokenException((java.lang.Throwable)var9);
    org.jsecurity.authc.LockedAccountException var11 = new org.jsecurity.authc.LockedAccountException((java.lang.Throwable)var9);
    org.jsecurity.authc.IncorrectCredentialsException var12 = new org.jsecurity.authc.IncorrectCredentialsException("org.jsecurity.realm.text.TextConfigurationRealm_389", (java.lang.Throwable)var11);
    org.jsecurity.session.StoppedSessionException var13 = new org.jsecurity.session.StoppedSessionException("506595c4-cb43-4717-aa8e-dee65fecaada", (java.lang.Throwable)var11);

  }

  public void test298() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest2.test298");


    org.jsecurity.io.ResourceException var3 = new org.jsecurity.io.ResourceException("hi!");
    org.jsecurity.codec.CodecException var4 = new org.jsecurity.codec.CodecException((java.lang.Throwable)var3);
    org.jsecurity.JSecurityException var5 = new org.jsecurity.JSecurityException("a2b823b1e72eae2b727289df8a00a89df8a0bab6ad8a89c4c5c7a9b62a270000", (java.lang.Throwable)var3);
    org.jsecurity.authc.ExcessiveAttemptsException var6 = new org.jsecurity.authc.ExcessiveAttemptsException((java.lang.Throwable)var5);
    org.jsecurity.session.StoppedSessionException var7 = new org.jsecurity.session.StoppedSessionException((java.lang.Throwable)var5);
    org.jsecurity.authc.AccountException var8 = new org.jsecurity.authc.AccountException("org.jsecurity.authz.UnauthorizedException: org.jsecurity.session.ExpiredSessionException: ", (java.lang.Throwable)var7);
    org.jsecurity.crypto.hash.Sha384Hash var9 = new org.jsecurity.crypto.hash.Sha384Hash((java.lang.Object)"org.jsecurity.authz.UnauthorizedException: org.jsecurity.session.ExpiredSessionException: ");
    java.lang.String var10 = var9.toString();
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var10 + "' != '" + "0255045c88137c0931c8de29ba1d8543d70c1a38b9302278f24b4669aa2bb96d6957d039bde80e0a872bb2bd542d3f74"+ "'", var10.equals("0255045c88137c0931c8de29ba1d8543d70c1a38b9302278f24b4669aa2bb96d6957d039bde80e0a872bb2bd542d3f74"));

  }

  public void test299() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest2.test299");


    boolean var1 = org.jsecurity.util.ClassUtils.isAvailable("e9f887e9-5a0f-4c10-a504-0e788ce2df31");
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var1 == false);

  }

  public void test300() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest2.test300");


    org.jsecurity.session.UnknownSessionException var4 = new org.jsecurity.session.UnknownSessionException("dd\uFFFD", (java.io.Serializable)100.0f);
    org.jsecurity.subject.SubjectException var5 = new org.jsecurity.subject.SubjectException("dd\uFFFD", (java.lang.Throwable)var4);
    org.jsecurity.io.SerializationException var6 = new org.jsecurity.io.SerializationException("", (java.lang.Throwable)var5);
    java.lang.Throwable[] var7 = var5.getSuppressed();
    java.lang.Throwable[] var8 = var5.getSuppressed();
    org.jsecurity.authz.SimpleAuthorizationInfo var11 = new org.jsecurity.authz.SimpleAuthorizationInfo();
    var11.addRole("a2b823b1e72eae2b727289df8a00a89df8a0bab6ad8a89c4c5c7a9b62a270000");
    org.jsecurity.session.UnknownSessionException var18 = new org.jsecurity.session.UnknownSessionException("dd\uFFFD", (java.io.Serializable)100.0f);
    org.jsecurity.subject.SubjectException var19 = new org.jsecurity.subject.SubjectException("dd\uFFFD", (java.lang.Throwable)var18);
    org.jsecurity.io.SerializationException var20 = new org.jsecurity.io.SerializationException("", (java.lang.Throwable)var19);
    java.lang.Throwable[] var21 = var19.getSuppressed();
    java.util.Set var22 = org.jsecurity.util.CollectionUtils.asSet((java.lang.Object[])var21);
    var11.addRoles((java.util.Collection)var22);
    java.io.InputStream var25 = org.jsecurity.util.ClassUtils.getResourceAsStream("");
    java.lang.Object[] var26 = new java.lang.Object[] { var25};
    java.util.List var27 = org.jsecurity.util.CollectionUtils.asList(var26);
    org.jsecurity.authc.pam.ModularRealmAuthenticator var28 = new org.jsecurity.authc.pam.ModularRealmAuthenticator(var27);
    org.jsecurity.subject.SimplePrincipalCollection var30 = new org.jsecurity.subject.SimplePrincipalCollection((java.util.Collection)var27, "org.jsecurity.authz.UnauthorizedException: org.jsecurity.session.ExpiredSessionException: ");
    org.jsecurity.session.UnknownSessionException var35 = new org.jsecurity.session.UnknownSessionException("dd\uFFFD", (java.io.Serializable)100.0f);
    org.jsecurity.session.SessionException var37 = new org.jsecurity.session.SessionException("dd\uFFFD", (java.lang.Throwable)var35, (java.io.Serializable)0);
    org.jsecurity.session.SessionException var38 = new org.jsecurity.session.SessionException("dd\uFFFD", (java.lang.Throwable)var35);
    var30.add((java.lang.Object)var38, "org.jsecurity.config.ConfigurationException: dd\uFFFD");
    java.util.Set var41 = var30.asSet();
    org.jsecurity.authz.SimpleAuthorizingAccount var42 = new org.jsecurity.authz.SimpleAuthorizingAccount((java.lang.Object)var8, (java.lang.Object)"\u0000\u0000\u0000", "\u0000\u0000\u0000", var22, var41);
    org.jsecurity.authz.SimpleRole var43 = new org.jsecurity.authz.SimpleRole();
    org.jsecurity.authz.SimpleAuthorizationInfo var44 = new org.jsecurity.authz.SimpleAuthorizationInfo();
    var44.addRole("a2b823b1e72eae2b727289df8a00a89df8a0bab6ad8a89c4c5c7a9b62a270000");
    org.jsecurity.session.UnknownSessionException var51 = new org.jsecurity.session.UnknownSessionException("dd\uFFFD", (java.io.Serializable)100.0f);
    org.jsecurity.subject.SubjectException var52 = new org.jsecurity.subject.SubjectException("dd\uFFFD", (java.lang.Throwable)var51);
    org.jsecurity.io.SerializationException var53 = new org.jsecurity.io.SerializationException("", (java.lang.Throwable)var52);
    java.lang.Throwable[] var54 = var52.getSuppressed();
    java.util.Set var55 = org.jsecurity.util.CollectionUtils.asSet((java.lang.Object[])var54);
    var44.addRoles((java.util.Collection)var55);
    var43.addAll((java.util.Collection)var55);
    var42.addObjectPermissions((java.util.Collection)var55);
    var42.addRole("6f8b35fd-0848-49a4-9560-659760616ad8");
    java.util.Collection var61 = var42.getObjectPermissions();
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var7);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var8);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var21);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var22);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var25);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var26);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var27);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var41);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var54);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var55);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var61);

  }

  public void test301() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest2.test301");


    org.jsecurity.authz.SimpleAuthorizationInfo var0 = new org.jsecurity.authz.SimpleAuthorizationInfo();
    var0.addRole("a2b823b1e72eae2b727289df8a00a89df8a0bab6ad8a89c4c5c7a9b62a270000");
    org.jsecurity.authz.SimpleAuthorizationInfo var3 = new org.jsecurity.authz.SimpleAuthorizationInfo();
    var3.addRole("a2b823b1e72eae2b727289df8a00a89df8a0bab6ad8a89c4c5c7a9b62a270000");
    org.jsecurity.session.UnknownSessionException var10 = new org.jsecurity.session.UnknownSessionException("dd\uFFFD", (java.io.Serializable)100.0f);
    org.jsecurity.subject.SubjectException var11 = new org.jsecurity.subject.SubjectException("dd\uFFFD", (java.lang.Throwable)var10);
    org.jsecurity.io.SerializationException var12 = new org.jsecurity.io.SerializationException("", (java.lang.Throwable)var11);
    java.lang.Throwable[] var13 = var11.getSuppressed();
    java.util.Set var14 = org.jsecurity.util.CollectionUtils.asSet((java.lang.Object[])var13);
    var3.addRoles((java.util.Collection)var14);
    var0.setObjectPermissions(var14);
    java.lang.String[] var21 = org.jsecurity.util.StringUtils.split("org.jsecurity.realm.text.TextConfigurationRealm_445", 'a', ' ', ' ');
    java.util.Set var22 = org.jsecurity.util.CollectionUtils.asSet((java.lang.Object[])var21);
    var0.setStringPermissions(var22);
    var0.addStringPermission("b598ff3d-5685-4491-8ee6-585d37adb1db");
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var13);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var14);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var21);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var22);

  }

  public void test302() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest2.test302");


    byte[] var3 = new byte[] { (byte)100, (byte)100, (byte)(-1)};
    java.lang.String var4 = org.jsecurity.codec.CodecSupport.toString(var3);
    char[] var5 = org.jsecurity.codec.CodecSupport.toChars(var3);
    boolean var6 = org.jsecurity.codec.Base64.isBase64(var3);
    char[] var7 = org.jsecurity.codec.CodecSupport.toChars(var3);
    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      byte[] var8 = org.jsecurity.codec.Hex.decode(var7);
      fail("Expected exception of type java.lang.IllegalArgumentException");
    } catch (java.lang.IllegalArgumentException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var3);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var4 + "' != '" + "dd\uFFFD"+ "'", var4.equals("dd\uFFFD"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var5);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var6 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var7);

  }

  public void test303() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest2.test303");


    org.jsecurity.session.mgt.DefaultSessionManager var0 = new org.jsecurity.session.mgt.DefaultSessionManager();
    var0.setGlobalSessionTimeout(1);
    boolean var4 = var0.isValid((java.io.Serializable)"org.jsecurity.realm.SimpleAccountRealm-173-authorization");
    org.jsecurity.session.mgt.quartz.QuartzSessionValidationScheduler var5 = new org.jsecurity.session.mgt.quartz.QuartzSessionValidationScheduler();
    var5.disableSessionValidation();
    var5.enableSessionValidation();
    var5.enableSessionValidation();
    var5.setSessionValidationInterval((-1L));
    var0.setSessionValidationScheduler((org.jsecurity.session.mgt.SessionValidationScheduler)var5);
    long var12 = var0.getSessionValidationInterval();
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var4 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var12 == 3600000L);

  }

  public void test304() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest2.test304");


    org.jsecurity.mgt.DefaultSecurityManager var0 = new org.jsecurity.mgt.DefaultSecurityManager();
    java.io.InputStream var2 = org.jsecurity.util.ClassUtils.getResourceAsStream("");
    java.lang.Object[] var3 = new java.lang.Object[] { var2};
    java.util.List var4 = org.jsecurity.util.CollectionUtils.asList(var3);
    org.jsecurity.authc.pam.ModularRealmAuthenticator var5 = new org.jsecurity.authc.pam.ModularRealmAuthenticator(var4);
    org.jsecurity.authc.pam.AllSuccessfulModularAuthenticationStrategy var6 = new org.jsecurity.authc.pam.AllSuccessfulModularAuthenticationStrategy();
    var5.setModularAuthenticationStrategy((org.jsecurity.authc.pam.ModularAuthenticationStrategy)var6);
    org.jsecurity.authz.SimpleAuthorizationInfo var8 = new org.jsecurity.authz.SimpleAuthorizationInfo();
    var8.addStringPermission("hi!");
    java.io.InputStream var12 = org.jsecurity.util.ClassUtils.getResourceAsStream("");
    java.lang.Object[] var13 = new java.lang.Object[] { var12};
    java.util.List var14 = org.jsecurity.util.CollectionUtils.asList(var13);
    var8.addRoles((java.util.Collection)var14);
    var5.setAuthenticationListeners((java.util.Collection)var14);
    var0.setSessionListeners((java.util.Collection)var14);
    org.jsecurity.authc.pam.ModularRealmAuthenticator var18 = new org.jsecurity.authc.pam.ModularRealmAuthenticator();
    org.jsecurity.authz.permission.InvalidPermissionStringException var21 = new org.jsecurity.authz.permission.InvalidPermissionStringException("", "dd\uFFFD");
    org.jsecurity.JSecurityException var23 = new org.jsecurity.JSecurityException("");
    org.jsecurity.authc.SimpleAuthenticationInfo var25 = new org.jsecurity.authc.SimpleAuthenticationInfo((java.lang.Object)var21, (java.lang.Object)"", "org.jsecurity.authz.UnauthorizedException: org.jsecurity.session.ExpiredSessionException: ");
    org.jsecurity.subject.PrincipalCollection var26 = var25.getPrincipals();
    var18.onLogout(var26);
    var0.setAuthenticator((org.jsecurity.authc.Authenticator)var18);
    org.jsecurity.codec.CodecException var31 = new org.jsecurity.codec.CodecException("dd\uFFFD");
    org.jsecurity.authc.ConcurrentAccessException var32 = new org.jsecurity.authc.ConcurrentAccessException("org.jsecurity.authz.UnauthorizedException: org.jsecurity.session.ExpiredSessionException: ", (java.lang.Throwable)var31);
    org.jsecurity.subject.SimplePrincipalCollection var34 = new org.jsecurity.subject.SimplePrincipalCollection((java.lang.Object)var31, "");
    org.jsecurity.authc.pam.FirstSuccessfulAuthenticationStrategy var35 = new org.jsecurity.authc.pam.FirstSuccessfulAuthenticationStrategy();
    org.jsecurity.authz.UnauthorizedException var37 = new org.jsecurity.authz.UnauthorizedException("org.jsecurity.config.ConfigurationException: dd\uFFFD");
    java.lang.Throwable[] var38 = var37.getSuppressed();
    java.util.List var39 = org.jsecurity.util.CollectionUtils.asList((java.lang.Object[])var38);
    org.jsecurity.authc.UsernamePasswordToken var40 = new org.jsecurity.authc.UsernamePasswordToken();
    java.lang.String var41 = var40.getUsername();
    java.net.InetAddress var42 = var40.getInetAddress();
    org.jsecurity.authc.AuthenticationInfo var43 = var35.beforeAllAttempts((java.util.Collection)var39, (org.jsecurity.authc.AuthenticationToken)var40);
    org.jsecurity.session.UnknownSessionException var48 = new org.jsecurity.session.UnknownSessionException("dd\uFFFD", (java.io.Serializable)100.0f);
    org.jsecurity.subject.SubjectException var49 = new org.jsecurity.subject.SubjectException("dd\uFFFD", (java.lang.Throwable)var48);
    org.jsecurity.io.SerializationException var50 = new org.jsecurity.io.SerializationException("", (java.lang.Throwable)var49);
    java.lang.Throwable[] var51 = var49.getSuppressed();
    java.util.Set var52 = org.jsecurity.util.CollectionUtils.asSet((java.lang.Object[])var51);
    org.jsecurity.authc.SimpleAccount var53 = new org.jsecurity.authc.SimpleAccount((org.jsecurity.subject.PrincipalCollection)var34, (java.lang.Object)var39, var52);
    java.io.InputStream var55 = org.jsecurity.util.ClassUtils.getResourceAsStream("");
    java.lang.Object[] var56 = new java.lang.Object[] { var55};
    java.util.List var57 = org.jsecurity.util.CollectionUtils.asList(var56);
    org.jsecurity.authc.pam.ModularRealmAuthenticator var58 = new org.jsecurity.authc.pam.ModularRealmAuthenticator(var57);
    org.jsecurity.subject.SimplePrincipalCollection var60 = new org.jsecurity.subject.SimplePrincipalCollection((java.util.Collection)var57, "org.jsecurity.authz.UnauthorizedException: org.jsecurity.session.ExpiredSessionException: ");
    org.jsecurity.io.ResourceException var64 = new org.jsecurity.io.ResourceException("hi!");
    org.jsecurity.authc.UnknownAccountException var65 = new org.jsecurity.authc.UnknownAccountException((java.lang.Throwable)var64);
    org.jsecurity.session.StoppedSessionException var66 = new org.jsecurity.session.StoppedSessionException("dd\uFFFD", (java.io.Serializable)var64);
    org.jsecurity.session.UnknownSessionException var67 = new org.jsecurity.session.UnknownSessionException("org.jsecurity.authz.UnauthorizedException: org.jsecurity.session.ExpiredSessionException: ", (java.lang.Throwable)var64);
    boolean var68 = var60.equals((java.lang.Object)var64);
    var34.addAll((org.jsecurity.subject.PrincipalCollection)var60);
    org.jsecurity.session.UnknownSessionException var74 = new org.jsecurity.session.UnknownSessionException("dd\uFFFD", (java.io.Serializable)100.0f);
    org.jsecurity.subject.SubjectException var75 = new org.jsecurity.subject.SubjectException("dd\uFFFD", (java.lang.Throwable)var74);
    org.jsecurity.io.SerializationException var76 = new org.jsecurity.io.SerializationException("", (java.lang.Throwable)var75);
    java.lang.Throwable[] var77 = var75.getSuppressed();
    java.util.List var78 = org.jsecurity.util.CollectionUtils.asList((java.lang.Object[])var77);
    boolean var79 = var0.isPermittedAll((org.jsecurity.subject.PrincipalCollection)var34, (java.util.Collection)var78);
    org.jsecurity.subject.DelegatingSubject var80 = new org.jsecurity.subject.DelegatingSubject((org.jsecurity.mgt.SecurityManager)var0);
    java.lang.String[] var83 = org.jsecurity.util.StringUtils.tokenizeToStringArray("hi!", "");
    boolean[] var84 = var80.isPermitted(var83);
    boolean var85 = var80.isAuthenticated();
    org.jsecurity.realm.activedirectory.ActiveDirectoryRealm var87 = new org.jsecurity.realm.activedirectory.ActiveDirectoryRealm();
    var87.init();
    var87.setSystemPassword("dd\uFFFD");
    org.jsecurity.authz.aop.GuestAnnotationHandler var91 = new org.jsecurity.authz.aop.GuestAnnotationHandler();
    java.lang.Class var92 = var91.getAnnotationClass();
    var87.setAuthenticationTokenClass(var92);
    org.jsecurity.authz.permission.WildcardPermissionResolver var94 = new org.jsecurity.authz.permission.WildcardPermissionResolver();
    org.jsecurity.authz.Permission var96 = var94.resolvePermission("hi!");
    var87.setPermissionResolver((org.jsecurity.authz.permission.PermissionResolver)var94);
    java.util.Set var98 = org.jsecurity.util.PermissionUtils.resolveDelimitedPermissions("ZGT/", (org.jsecurity.authz.permission.PermissionResolver)var94);
    boolean var99 = var80.isPermittedAll((java.util.Collection)var98);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var2);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var3);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var4);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var12);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var13);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var14);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var26);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var38);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var39);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var41);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var42);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var43);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var51);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var52);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var55);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var56);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var57);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var68 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var77);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var78);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var79 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var83);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var84);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var85 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var92);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var96);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var98);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var99 == false);

  }

  public void test305() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest2.test305");


    org.jsecurity.JSecurityException var2 = new org.jsecurity.JSecurityException();
    org.jsecurity.authc.LockedAccountException var3 = new org.jsecurity.authc.LockedAccountException("org.jsecurity.config.ConfigurationException: dd\uFFFD", (java.lang.Throwable)var2);
    org.jsecurity.authc.UnknownAccountException var4 = new org.jsecurity.authc.UnknownAccountException("a2b823b1e72eae2b727289df8a00a89df8a0bab6ad8a89c4c5c7a9b62a270000", (java.lang.Throwable)var2);
    org.jsecurity.realm.jdbc.JdbcRealm var5 = new org.jsecurity.realm.jdbc.JdbcRealm();
    var5.setPermissionsQuery("org.jsecurity.realm.text.TextConfigurationRealm_445");
    var5.setUserRolesQuery("6464ff");
    var5.setPermissionsLookupEnabled(false);
    org.jsecurity.realm.activedirectory.ActiveDirectoryRealm var14 = new org.jsecurity.realm.activedirectory.ActiveDirectoryRealm();
    org.jsecurity.authc.credential.Sha256CredentialsMatcher var15 = new org.jsecurity.authc.credential.Sha256CredentialsMatcher();
    var14.setCredentialsMatcher((org.jsecurity.authc.credential.CredentialsMatcher)var15);
    java.lang.String var17 = var14.getAuthorizationCacheName();
    var14.setPrincipalSuffix("org.jsecurity.config.ConfigurationException: dd\uFFFD");
    org.jsecurity.authz.permission.PermissionResolver var20 = var14.getPermissionResolver();
    java.util.Set var21 = org.jsecurity.util.PermissionUtils.resolveDelimitedPermissions("NfxhYN7ItBfRAmDBmprtU73ghfEEPpcDJrHPkZ06wiY=", var20);
    org.jsecurity.session.UnknownSessionException var25 = new org.jsecurity.session.UnknownSessionException("dd\uFFFD", (java.io.Serializable)100.0f);
    org.jsecurity.session.SessionException var27 = new org.jsecurity.session.SessionException("dd\uFFFD", (java.lang.Throwable)var25, (java.io.Serializable)0);
    org.jsecurity.authc.SimpleAuthenticationInfo var30 = new org.jsecurity.authc.SimpleAuthenticationInfo((java.lang.Object)0, (java.lang.Object)10, "hi!");
    java.lang.Object var31 = var30.getCredentials();
    java.lang.String var32 = var30.toString();
    org.jsecurity.realm.text.TextConfigurationRealm var33 = new org.jsecurity.realm.text.TextConfigurationRealm();
    java.io.InputStream var35 = org.jsecurity.util.ClassUtils.getResourceAsStream("");
    java.lang.Object[] var36 = new java.lang.Object[] { var35};
    java.util.List var37 = org.jsecurity.util.CollectionUtils.asList(var36);
    org.jsecurity.authc.pam.ModularRealmAuthenticator var38 = new org.jsecurity.authc.pam.ModularRealmAuthenticator(var37);
    org.jsecurity.subject.SimplePrincipalCollection var40 = new org.jsecurity.subject.SimplePrincipalCollection((java.util.Collection)var37, "org.jsecurity.authz.UnauthorizedException: org.jsecurity.session.ExpiredSessionException: ");
    org.jsecurity.session.UnknownSessionException var45 = new org.jsecurity.session.UnknownSessionException("dd\uFFFD", (java.io.Serializable)100.0f);
    org.jsecurity.session.SessionException var47 = new org.jsecurity.session.SessionException("dd\uFFFD", (java.lang.Throwable)var45, (java.io.Serializable)0);
    org.jsecurity.session.SessionException var48 = new org.jsecurity.session.SessionException("dd\uFFFD", (java.lang.Throwable)var45);
    var40.add((java.lang.Object)var48, "org.jsecurity.config.ConfigurationException: dd\uFFFD");
    var33.onLogout((org.jsecurity.subject.PrincipalCollection)var40);
    org.jsecurity.cache.HashtableCacheManager var52 = new org.jsecurity.cache.HashtableCacheManager();
    org.jsecurity.cache.Cache var54 = var52.getCache("\u0000\u0000");
    var33.setAuthorizationCache(var54);
    org.jsecurity.codec.CodecException var58 = new org.jsecurity.codec.CodecException("dd\uFFFD");
    org.jsecurity.authc.ConcurrentAccessException var59 = new org.jsecurity.authc.ConcurrentAccessException("org.jsecurity.authz.UnauthorizedException: org.jsecurity.session.ExpiredSessionException: ", (java.lang.Throwable)var58);
    org.jsecurity.subject.SimplePrincipalCollection var61 = new org.jsecurity.subject.SimplePrincipalCollection((java.lang.Object)var58, "");
    var33.onLogout((org.jsecurity.subject.PrincipalCollection)var61);
    var30.setPrincipals((org.jsecurity.subject.PrincipalCollection)var61);
    org.jsecurity.realm.activedirectory.ActiveDirectoryRealm var64 = new org.jsecurity.realm.activedirectory.ActiveDirectoryRealm();
    org.jsecurity.authc.credential.Sha256CredentialsMatcher var65 = new org.jsecurity.authc.credential.Sha256CredentialsMatcher();
    var64.setCredentialsMatcher((org.jsecurity.authc.credential.CredentialsMatcher)var65);
    org.jsecurity.realm.activedirectory.ActiveDirectoryRealm var67 = new org.jsecurity.realm.activedirectory.ActiveDirectoryRealm();
    org.jsecurity.authc.credential.Sha256CredentialsMatcher var68 = new org.jsecurity.authc.credential.Sha256CredentialsMatcher();
    var67.setCredentialsMatcher((org.jsecurity.authc.credential.CredentialsMatcher)var68);
    java.lang.String var70 = var67.getAuthorizationCacheName();
    var67.setUrl("hi!");
    org.jsecurity.realm.ldap.DefaultLdapContextFactory var73 = new org.jsecurity.realm.ldap.DefaultLdapContextFactory();
    var67.setLdapContextFactory((org.jsecurity.realm.ldap.LdapContextFactory)var73);
    var73.setAuthentication("org.jsecurity.authz.UnauthorizedException: org.jsecurity.session.ExpiredSessionException: ");
    var64.setLdapContextFactory((org.jsecurity.realm.ldap.LdapContextFactory)var73);
    var73.setReferral("a2b823b1e72eae2b727289df8a00a89df8a0bab6ad8a89c4c5c7a9b62a270000");
    var73.setUrl("\u0000\u0000");
    java.util.Set var84 = org.jsecurity.util.PermissionUtils.toPermissionStrings("org.jsecurity.config.ConfigurationException: dd\uFFFD");
    org.jsecurity.authz.SimpleAuthorizationInfo var85 = new org.jsecurity.authz.SimpleAuthorizationInfo(var84);
    org.jsecurity.authz.SimpleRole var86 = new org.jsecurity.authz.SimpleRole();
    java.lang.String var87 = var86.getName();
    org.jsecurity.session.UnknownSessionException var92 = new org.jsecurity.session.UnknownSessionException("dd\uFFFD", (java.io.Serializable)100.0f);
    org.jsecurity.subject.SubjectException var93 = new org.jsecurity.subject.SubjectException("dd\uFFFD", (java.lang.Throwable)var92);
    org.jsecurity.io.SerializationException var94 = new org.jsecurity.io.SerializationException("", (java.lang.Throwable)var93);
    java.lang.Throwable[] var95 = var93.getSuppressed();
    java.util.Set var96 = org.jsecurity.util.CollectionUtils.asSet((java.lang.Object[])var95);
    var86.setPermissions(var96);
    org.jsecurity.authz.SimpleAuthorizingAccount var98 = new org.jsecurity.authz.SimpleAuthorizingAccount((org.jsecurity.subject.PrincipalCollection)var61, (java.lang.Object)"\u0000\u0000", "org.jsecurity.authc.AccountException: hi!", var84, var96);
    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      org.jsecurity.authz.SimpleAuthorizingAccount var99 = new org.jsecurity.authz.SimpleAuthorizingAccount((java.lang.Object)"a2b823b1e72eae2b727289df8a00a89df8a0bab6ad8a89c4c5c7a9b62a270000", (java.lang.Object)false, "0a4dfd98-4ec1-476c-a8b7-0ade4d007ab7", var21, var84);
      fail("Expected exception of type java.lang.ClassCastException");
    } catch (java.lang.ClassCastException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var17);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var20);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var21);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var31 + "' != '" + 10+ "'", var31.equals(10));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var35);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var36);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var37);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var54);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var70);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var84);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var87);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var95);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var96);

  }

  public void test306() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest2.test306");


    org.jsecurity.crypto.BlowfishCipher var0 = new org.jsecurity.crypto.BlowfishCipher();
    byte[] var4 = new byte[] { (byte)100, (byte)100, (byte)(-1)};
    java.lang.String var5 = org.jsecurity.codec.CodecSupport.toString(var4);
    byte[] var6 = org.jsecurity.codec.Base64.encode(var4);
    char[] var7 = org.jsecurity.codec.CodecSupport.toChars(var6);
    byte[] var11 = new byte[] { (byte)100, (byte)100, (byte)(-1)};
    java.lang.String var12 = org.jsecurity.codec.CodecSupport.toString(var11);
    byte[] var14 = org.jsecurity.codec.Base64.encode(var11, false);
    byte[] var15 = var0.encrypt(var6, var11);
    byte[] var19 = new byte[] { (byte)10, (byte)0, (byte)1};
    byte[] var21 = org.jsecurity.codec.Base64.encode(var19, false);
    org.jsecurity.crypto.hash.Md2Hash var23 = org.jsecurity.crypto.hash.Md2Hash.fromHexString("6464ff");
    java.lang.String var24 = var23.toString();
    byte[] var25 = var23.getBytes();
    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      byte[] var26 = var0.decrypt(var19, var25);
      fail("Expected exception of type java.lang.IllegalStateException");
    } catch (java.lang.IllegalStateException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var4);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var5 + "' != '" + "dd\uFFFD"+ "'", var5.equals("dd\uFFFD"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var6);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var7);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var11);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var12 + "' != '" + "dd\uFFFD"+ "'", var12.equals("dd\uFFFD"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var14);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var15);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var19);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var21);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var23);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var24 + "' != '" + "6464ff"+ "'", var24.equals("6464ff"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var25);

  }

  public void test307() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest2.test307");


    org.jsecurity.session.UnknownSessionException var5 = new org.jsecurity.session.UnknownSessionException("dd\uFFFD", (java.io.Serializable)100.0f);
    org.jsecurity.subject.SubjectException var6 = new org.jsecurity.subject.SubjectException("dd\uFFFD", (java.lang.Throwable)var5);
    org.jsecurity.authc.pam.UnsupportedTokenException var7 = new org.jsecurity.authc.pam.UnsupportedTokenException("dd\uFFFD", (java.lang.Throwable)var5);
    org.jsecurity.session.StoppedSessionException var8 = new org.jsecurity.session.StoppedSessionException("org.jsecurity.config.ConfigurationException: dd\uFFFD", (java.lang.Throwable)var7);
    org.jsecurity.JSecurityException var9 = new org.jsecurity.JSecurityException((java.lang.Throwable)var8);
    org.jsecurity.cache.CacheException var10 = new org.jsecurity.cache.CacheException((java.lang.Throwable)var8);
    org.jsecurity.authc.IncorrectCredentialsException var11 = new org.jsecurity.authc.IncorrectCredentialsException((java.lang.Throwable)var10);

  }

  public void test308() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest2.test308");


    org.jsecurity.authc.IncorrectCredentialsException var1 = new org.jsecurity.authc.IncorrectCredentialsException("9d388eff-106e-47d9-8180-843fdfd13dce");
    org.jsecurity.authc.IncorrectCredentialsException var2 = new org.jsecurity.authc.IncorrectCredentialsException((java.lang.Throwable)var1);
    org.jsecurity.cache.CacheException var3 = new org.jsecurity.cache.CacheException((java.lang.Throwable)var2);

  }

  public void test309() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest2.test309");


    org.jsecurity.crypto.hash.Md5Hash var0 = new org.jsecurity.crypto.hash.Md5Hash();
    org.jsecurity.authz.SimpleAuthorizationInfo var1 = new org.jsecurity.authz.SimpleAuthorizationInfo();
    var1.addRole("a2b823b1e72eae2b727289df8a00a89df8a0bab6ad8a89c4c5c7a9b62a270000");
    org.jsecurity.session.UnknownSessionException var8 = new org.jsecurity.session.UnknownSessionException("dd\uFFFD", (java.io.Serializable)100.0f);
    org.jsecurity.subject.SubjectException var9 = new org.jsecurity.subject.SubjectException("dd\uFFFD", (java.lang.Throwable)var8);
    org.jsecurity.io.SerializationException var10 = new org.jsecurity.io.SerializationException("", (java.lang.Throwable)var9);
    java.lang.Throwable[] var11 = var9.getSuppressed();
    java.util.Set var12 = org.jsecurity.util.CollectionUtils.asSet((java.lang.Object[])var11);
    var1.addRoles((java.util.Collection)var12);
    java.util.Set var14 = var1.getObjectPermissions();
    var1.addStringPermission("783ccd31-48a8-42dd-890f-df885a7baaff");
    boolean var17 = var0.equals((java.lang.Object)var1);
    org.jsecurity.authz.SimpleAuthorizationInfo var20 = new org.jsecurity.authz.SimpleAuthorizationInfo();
    var20.addRole("a2b823b1e72eae2b727289df8a00a89df8a0bab6ad8a89c4c5c7a9b62a270000");
    org.jsecurity.session.UnknownSessionException var27 = new org.jsecurity.session.UnknownSessionException("dd\uFFFD", (java.io.Serializable)100.0f);
    org.jsecurity.subject.SubjectException var28 = new org.jsecurity.subject.SubjectException("dd\uFFFD", (java.lang.Throwable)var27);
    org.jsecurity.io.SerializationException var29 = new org.jsecurity.io.SerializationException("", (java.lang.Throwable)var28);
    java.lang.Throwable[] var30 = var28.getSuppressed();
    java.util.Set var31 = org.jsecurity.util.CollectionUtils.asSet((java.lang.Object[])var30);
    var20.addRoles((java.util.Collection)var31);
    org.jsecurity.authz.SimpleRole var33 = new org.jsecurity.authz.SimpleRole("dd\uFFFD", var31);
    org.jsecurity.authz.SimpleRole var34 = new org.jsecurity.authz.SimpleRole("org.jsecurity.config.ConfigurationException: dd\uFFFD-4org.jsecurity.config.ConfigurationException: dd\uFFFD02-8085-950org.jsecurity.config.ConfigurationException: dd\uFFFDbb026org.jsecurity.config.ConfigurationException: dd\uFFFD06", var31);
    var1.setStringPermissions(var31);
    java.io.InputStream var37 = org.jsecurity.util.ClassUtils.getResourceAsStream("");
    java.lang.Object[] var38 = new java.lang.Object[] { var37};
    java.util.List var39 = org.jsecurity.util.CollectionUtils.asList(var38);
    org.jsecurity.authc.pam.ModularRealmAuthenticator var40 = new org.jsecurity.authc.pam.ModularRealmAuthenticator(var39);
    org.jsecurity.subject.SimplePrincipalCollection var42 = new org.jsecurity.subject.SimplePrincipalCollection((java.util.Collection)var39, "org.jsecurity.authz.UnauthorizedException: org.jsecurity.session.ExpiredSessionException: ");
    org.jsecurity.session.UnknownSessionException var47 = new org.jsecurity.session.UnknownSessionException("dd\uFFFD", (java.io.Serializable)100.0f);
    org.jsecurity.session.SessionException var49 = new org.jsecurity.session.SessionException("dd\uFFFD", (java.lang.Throwable)var47, (java.io.Serializable)0);
    org.jsecurity.session.SessionException var50 = new org.jsecurity.session.SessionException("dd\uFFFD", (java.lang.Throwable)var47);
    var42.add((java.lang.Object)var50, "org.jsecurity.config.ConfigurationException: dd\uFFFD");
    java.util.Set var53 = var42.asSet();
    org.jsecurity.authz.SimpleAuthorizationInfo var54 = new org.jsecurity.authz.SimpleAuthorizationInfo(var53);
    var1.addRoles((java.util.Collection)var53);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var11);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var12);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var14);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var17 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var30);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var31);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var37);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var38);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var39);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var53);

  }

  public void test310() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest2.test310");


    org.jsecurity.authc.UnknownAccountException var1 = new org.jsecurity.authc.UnknownAccountException("77ddc2f7-9066-46c8-b5f2-b99b8caec0fa");

  }

  public void test311() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest2.test311");


    org.jsecurity.realm.text.TextConfigurationRealm var0 = new org.jsecurity.realm.text.TextConfigurationRealm();
    org.jsecurity.realm.text.TextConfigurationRealm var1 = new org.jsecurity.realm.text.TextConfigurationRealm();
    java.io.InputStream var3 = org.jsecurity.util.ClassUtils.getResourceAsStream("");
    java.lang.Object[] var4 = new java.lang.Object[] { var3};
    java.util.List var5 = org.jsecurity.util.CollectionUtils.asList(var4);
    org.jsecurity.authc.pam.ModularRealmAuthenticator var6 = new org.jsecurity.authc.pam.ModularRealmAuthenticator(var5);
    org.jsecurity.subject.SimplePrincipalCollection var8 = new org.jsecurity.subject.SimplePrincipalCollection((java.util.Collection)var5, "org.jsecurity.authz.UnauthorizedException: org.jsecurity.session.ExpiredSessionException: ");
    org.jsecurity.session.UnknownSessionException var13 = new org.jsecurity.session.UnknownSessionException("dd\uFFFD", (java.io.Serializable)100.0f);
    org.jsecurity.session.SessionException var15 = new org.jsecurity.session.SessionException("dd\uFFFD", (java.lang.Throwable)var13, (java.io.Serializable)0);
    org.jsecurity.session.SessionException var16 = new org.jsecurity.session.SessionException("dd\uFFFD", (java.lang.Throwable)var13);
    var8.add((java.lang.Object)var16, "org.jsecurity.config.ConfigurationException: dd\uFFFD");
    var1.onLogout((org.jsecurity.subject.PrincipalCollection)var8);
    java.util.Collection var21 = var8.fromRealm("\u0000\u0000\u0000");
    var0.onLogout((org.jsecurity.subject.PrincipalCollection)var8);
    java.util.Set var23 = var8.asSet();
    org.jsecurity.authz.ModularRealmAuthorizer var24 = new org.jsecurity.authz.ModularRealmAuthorizer((java.util.Collection)var23);
    org.jsecurity.authc.pam.ModularRealmAuthenticator var26 = new org.jsecurity.authc.pam.ModularRealmAuthenticator();
    org.jsecurity.authz.permission.InvalidPermissionStringException var29 = new org.jsecurity.authz.permission.InvalidPermissionStringException("", "dd\uFFFD");
    org.jsecurity.JSecurityException var31 = new org.jsecurity.JSecurityException("");
    org.jsecurity.authc.SimpleAuthenticationInfo var33 = new org.jsecurity.authc.SimpleAuthenticationInfo((java.lang.Object)var29, (java.lang.Object)"", "org.jsecurity.authz.UnauthorizedException: org.jsecurity.session.ExpiredSessionException: ");
    org.jsecurity.subject.PrincipalCollection var34 = var33.getPrincipals();
    var26.onLogout(var34);
    org.jsecurity.session.SessionException var36 = new org.jsecurity.session.SessionException("\uFFFD\uFFFD#\uFFFD\uFFFD.\uFFFD+rr\uFFFD\u07CA\u0000\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\u01E9\uFFFD*'\u0000\u0000", (java.io.Serializable)var34);
    org.jsecurity.session.UnknownSessionException var41 = new org.jsecurity.session.UnknownSessionException("dd\uFFFD", (java.io.Serializable)100.0f);
    org.jsecurity.subject.SubjectException var42 = new org.jsecurity.subject.SubjectException("dd\uFFFD", (java.lang.Throwable)var41);
    org.jsecurity.io.SerializationException var43 = new org.jsecurity.io.SerializationException("", (java.lang.Throwable)var42);
    java.lang.Throwable[] var44 = var42.getSuppressed();
    java.util.List var45 = org.jsecurity.util.CollectionUtils.asList((java.lang.Object[])var44);
    var24.checkPermissions(var34, (java.util.Collection)var45);
    org.jsecurity.authz.permission.WildcardPermissionResolver var48 = new org.jsecurity.authz.permission.WildcardPermissionResolver();
    java.util.Set var49 = org.jsecurity.util.PermissionUtils.resolveDelimitedPermissions("a2b823b1e72eae2b727289df8a00a89df8a0bab6ad8a89c4c5c7a9b62a270000", (org.jsecurity.authz.permission.PermissionResolver)var48);
    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      var24.setPermissionResolver((org.jsecurity.authz.permission.PermissionResolver)var48);
      fail("Expected exception of type java.lang.ClassCastException");
    } catch (java.lang.ClassCastException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var3);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var4);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var5);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var21);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var23);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var34);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var44);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var45);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var49);

  }

  public void test312() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest2.test312");


    org.jsecurity.authc.ExpiredCredentialsException var1 = new org.jsecurity.authc.ExpiredCredentialsException("HashtableCache [\u0000\u0000\u0000]");

  }

  public void test313() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest2.test313");


    org.jsecurity.realm.text.PropertiesRealm var0 = new org.jsecurity.realm.text.PropertiesRealm();
    var0.setUseXmlFormat(true);
    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      var0.afterRoleCacheSet();
      fail("Expected exception of type org.jsecurity.JSecurityException");
    } catch (org.jsecurity.JSecurityException e) {
      // Expected exception.
    }

  }

  public void test314() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest2.test314");


    org.jsecurity.realm.text.TextConfigurationRealm var0 = new org.jsecurity.realm.text.TextConfigurationRealm();
    java.io.InputStream var2 = org.jsecurity.util.ClassUtils.getResourceAsStream("");
    java.lang.Object[] var3 = new java.lang.Object[] { var2};
    java.util.List var4 = org.jsecurity.util.CollectionUtils.asList(var3);
    org.jsecurity.authc.pam.ModularRealmAuthenticator var5 = new org.jsecurity.authc.pam.ModularRealmAuthenticator(var4);
    org.jsecurity.subject.SimplePrincipalCollection var7 = new org.jsecurity.subject.SimplePrincipalCollection((java.util.Collection)var4, "org.jsecurity.authz.UnauthorizedException: org.jsecurity.session.ExpiredSessionException: ");
    org.jsecurity.session.UnknownSessionException var12 = new org.jsecurity.session.UnknownSessionException("dd\uFFFD", (java.io.Serializable)100.0f);
    org.jsecurity.session.SessionException var14 = new org.jsecurity.session.SessionException("dd\uFFFD", (java.lang.Throwable)var12, (java.io.Serializable)0);
    org.jsecurity.session.SessionException var15 = new org.jsecurity.session.SessionException("dd\uFFFD", (java.lang.Throwable)var12);
    var7.add((java.lang.Object)var15, "org.jsecurity.config.ConfigurationException: dd\uFFFD");
    var0.onLogout((org.jsecurity.subject.PrincipalCollection)var7);
    org.jsecurity.cache.HashtableCacheManager var19 = new org.jsecurity.cache.HashtableCacheManager();
    org.jsecurity.cache.Cache var21 = var19.getCache("\u0000\u0000");
    var0.setAuthorizationCache(var21);
    java.lang.String var23 = var0.getUserDefinitions();
    var0.init();
    var0.addRole("\uFFFD\uFFFD#\uFFFD\uFFFD.\uFFFD+rr\uFFFD\u07CA\u0000\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\u01E9\uFFFD*'\u0000\u0000");
    var0.addRole("b725e8cc-690c-495e-ac27-b1b425834793");
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var2);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var3);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var4);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var21);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var23);

  }

  public void test315() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest2.test315");


    org.jsecurity.session.mgt.eis.MemorySessionDAO var0 = new org.jsecurity.session.mgt.eis.MemorySessionDAO();
    org.jsecurity.cache.Cache var1 = var0.getActiveSessionsCache();
    org.jsecurity.cache.CacheManager var2 = var0.getCacheManager();
    org.jsecurity.cache.HashtableCacheManager var3 = new org.jsecurity.cache.HashtableCacheManager();
    org.jsecurity.cache.Cache var5 = var3.getCache("\u0000\u0000");
    var0.setActiveSessionsCache(var5);
    java.io.InputStream var8 = org.jsecurity.util.ClassUtils.getResourceAsStream("");
    java.lang.Object[] var9 = new java.lang.Object[] { var8};
    java.util.List var10 = org.jsecurity.util.CollectionUtils.asList(var9);
    org.jsecurity.authc.pam.ModularRealmAuthenticator var11 = new org.jsecurity.authc.pam.ModularRealmAuthenticator(var10);
    org.jsecurity.authc.pam.AllSuccessfulModularAuthenticationStrategy var12 = new org.jsecurity.authc.pam.AllSuccessfulModularAuthenticationStrategy();
    var11.setModularAuthenticationStrategy((org.jsecurity.authc.pam.ModularAuthenticationStrategy)var12);
    org.jsecurity.authz.SimpleAuthorizationInfo var14 = new org.jsecurity.authz.SimpleAuthorizationInfo();
    var14.addStringPermission("hi!");
    java.io.InputStream var18 = org.jsecurity.util.ClassUtils.getResourceAsStream("");
    java.lang.Object[] var19 = new java.lang.Object[] { var18};
    java.util.List var20 = org.jsecurity.util.CollectionUtils.asList(var19);
    var14.addRoles((java.util.Collection)var20);
    var11.setAuthenticationListeners((java.util.Collection)var20);
    org.jsecurity.realm.activedirectory.ActiveDirectoryRealm var23 = new org.jsecurity.realm.activedirectory.ActiveDirectoryRealm();
    var23.setPrincipalSuffix("");
    var11.setRealm((org.jsecurity.realm.Realm)var23);
    org.jsecurity.cache.HashtableCacheManager var27 = new org.jsecurity.cache.HashtableCacheManager();
    org.jsecurity.cache.Cache var29 = var27.getCache("\u0000\u0000");
    var23.setAuthorizationCache(var29);
    var0.setActiveSessionsCache(var29);
    org.jsecurity.session.mgt.SimpleSession var32 = new org.jsecurity.session.mgt.SimpleSession();
    java.io.Serializable var33 = var0.create((org.jsecurity.session.Session)var32);
    org.jsecurity.cache.Cache var34 = var0.getActiveSessionsCache();
    var0.setActiveSessionsCacheName("0220fc2d-2559-421b-822b-6ed559f96c25");
    var0.setActiveSessionsCacheName("a2b823b1e72eae2b727289df8a00a89df8a0bab6ad8a89c4c5c7a9b62a270000");
    java.util.Collection var39 = var0.getActiveSessions();
    org.jsecurity.authc.ConcurrentAccessException var41 = new org.jsecurity.authc.ConcurrentAccessException("org.jsecurity.authz.UnauthorizedException: org.jsecurity.session.ExpiredSessionException: ");
    org.jsecurity.authc.DisabledAccountException var42 = new org.jsecurity.authc.DisabledAccountException((java.lang.Throwable)var41);
    org.jsecurity.authc.SimpleAccount var44 = new org.jsecurity.authc.SimpleAccount(var39, (java.lang.Object)var41, "79436e99-d45a-4bcc-9cbf-0fddb7998f7c");
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var1);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var2);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var5);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var8);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var9);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var10);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var18);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var19);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var20);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var29);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var33 + "' != '" + "c25a1a23-4e04-4c16-9dcf-f5ed49ed2b3c"+ "'", var33.equals("c25a1a23-4e04-4c16-9dcf-f5ed49ed2b3c"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var34);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var39);

  }

  public void test316() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest2.test316");


    org.jsecurity.io.XmlSerializer var0 = new org.jsecurity.io.XmlSerializer();
    org.jsecurity.session.mgt.quartz.QuartzSessionValidationScheduler var1 = new org.jsecurity.session.mgt.quartz.QuartzSessionValidationScheduler();
    var1.disableSessionValidation();
    byte[] var3 = var0.serialize((java.lang.Object)var1);
    org.jsecurity.authc.ExpiredCredentialsException var6 = new org.jsecurity.authc.ExpiredCredentialsException();
    org.jsecurity.session.ExpiredSessionException var7 = new org.jsecurity.session.ExpiredSessionException("", (java.lang.Throwable)var6);
    org.jsecurity.authz.UnauthorizedException var8 = new org.jsecurity.authz.UnauthorizedException((java.lang.Throwable)var7);
    org.jsecurity.session.ExpiredSessionException var9 = new org.jsecurity.session.ExpiredSessionException("?\u0238\u0018@\uFFFD", (java.lang.Throwable)var7);
    byte[] var10 = var0.serialize((java.lang.Object)var9);
    byte[] var14 = new byte[] { (byte)100, (byte)100, (byte)(-1)};
    java.lang.String var15 = org.jsecurity.codec.CodecSupport.toString(var14);
    char[] var16 = org.jsecurity.codec.CodecSupport.toChars(var14);
    boolean var17 = org.jsecurity.codec.Base64.isBase64(var14);
    boolean var18 = org.jsecurity.codec.Base64.isBase64(var14);
    boolean var19 = org.jsecurity.codec.Base64.isBase64(var14);
    java.lang.String var20 = org.jsecurity.codec.Hex.encodeToString(var14);
    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      java.lang.Object var21 = var0.deserialize(var14);
      fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException");
    } catch (java.lang.ArrayIndexOutOfBoundsException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var3);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var10);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var14);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var15 + "' != '" + "dd\uFFFD"+ "'", var15.equals("dd\uFFFD"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var16);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var17 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var18 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var19 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var20 + "' != '" + "6464ff"+ "'", var20.equals("6464ff"));

  }

  public void test317() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest2.test317");


    org.jsecurity.mgt.DefaultSecurityManager var0 = new org.jsecurity.mgt.DefaultSecurityManager();
    java.io.InputStream var2 = org.jsecurity.util.ClassUtils.getResourceAsStream("");
    java.lang.Object[] var3 = new java.lang.Object[] { var2};
    java.util.List var4 = org.jsecurity.util.CollectionUtils.asList(var3);
    org.jsecurity.authc.pam.ModularRealmAuthenticator var5 = new org.jsecurity.authc.pam.ModularRealmAuthenticator(var4);
    org.jsecurity.authc.pam.AllSuccessfulModularAuthenticationStrategy var6 = new org.jsecurity.authc.pam.AllSuccessfulModularAuthenticationStrategy();
    var5.setModularAuthenticationStrategy((org.jsecurity.authc.pam.ModularAuthenticationStrategy)var6);
    org.jsecurity.authz.SimpleAuthorizationInfo var8 = new org.jsecurity.authz.SimpleAuthorizationInfo();
    var8.addStringPermission("hi!");
    java.io.InputStream var12 = org.jsecurity.util.ClassUtils.getResourceAsStream("");
    java.lang.Object[] var13 = new java.lang.Object[] { var12};
    java.util.List var14 = org.jsecurity.util.CollectionUtils.asList(var13);
    var8.addRoles((java.util.Collection)var14);
    var5.setAuthenticationListeners((java.util.Collection)var14);
    var0.setSessionListeners((java.util.Collection)var14);
    org.jsecurity.authc.pam.ModularRealmAuthenticator var18 = new org.jsecurity.authc.pam.ModularRealmAuthenticator();
    org.jsecurity.authz.permission.InvalidPermissionStringException var21 = new org.jsecurity.authz.permission.InvalidPermissionStringException("", "dd\uFFFD");
    org.jsecurity.JSecurityException var23 = new org.jsecurity.JSecurityException("");
    org.jsecurity.authc.SimpleAuthenticationInfo var25 = new org.jsecurity.authc.SimpleAuthenticationInfo((java.lang.Object)var21, (java.lang.Object)"", "org.jsecurity.authz.UnauthorizedException: org.jsecurity.session.ExpiredSessionException: ");
    org.jsecurity.subject.PrincipalCollection var26 = var25.getPrincipals();
    var18.onLogout(var26);
    var0.setAuthenticator((org.jsecurity.authc.Authenticator)var18);
    org.jsecurity.codec.CodecException var31 = new org.jsecurity.codec.CodecException("dd\uFFFD");
    org.jsecurity.authc.ConcurrentAccessException var32 = new org.jsecurity.authc.ConcurrentAccessException("org.jsecurity.authz.UnauthorizedException: org.jsecurity.session.ExpiredSessionException: ", (java.lang.Throwable)var31);
    org.jsecurity.subject.SimplePrincipalCollection var34 = new org.jsecurity.subject.SimplePrincipalCollection((java.lang.Object)var31, "");
    org.jsecurity.authc.pam.FirstSuccessfulAuthenticationStrategy var35 = new org.jsecurity.authc.pam.FirstSuccessfulAuthenticationStrategy();
    org.jsecurity.authz.UnauthorizedException var37 = new org.jsecurity.authz.UnauthorizedException("org.jsecurity.config.ConfigurationException: dd\uFFFD");
    java.lang.Throwable[] var38 = var37.getSuppressed();
    java.util.List var39 = org.jsecurity.util.CollectionUtils.asList((java.lang.Object[])var38);
    org.jsecurity.authc.UsernamePasswordToken var40 = new org.jsecurity.authc.UsernamePasswordToken();
    java.lang.String var41 = var40.getUsername();
    java.net.InetAddress var42 = var40.getInetAddress();
    org.jsecurity.authc.AuthenticationInfo var43 = var35.beforeAllAttempts((java.util.Collection)var39, (org.jsecurity.authc.AuthenticationToken)var40);
    org.jsecurity.session.UnknownSessionException var48 = new org.jsecurity.session.UnknownSessionException("dd\uFFFD", (java.io.Serializable)100.0f);
    org.jsecurity.subject.SubjectException var49 = new org.jsecurity.subject.SubjectException("dd\uFFFD", (java.lang.Throwable)var48);
    org.jsecurity.io.SerializationException var50 = new org.jsecurity.io.SerializationException("", (java.lang.Throwable)var49);
    java.lang.Throwable[] var51 = var49.getSuppressed();
    java.util.Set var52 = org.jsecurity.util.CollectionUtils.asSet((java.lang.Object[])var51);
    org.jsecurity.authc.SimpleAccount var53 = new org.jsecurity.authc.SimpleAccount((org.jsecurity.subject.PrincipalCollection)var34, (java.lang.Object)var39, var52);
    java.io.InputStream var55 = org.jsecurity.util.ClassUtils.getResourceAsStream("");
    java.lang.Object[] var56 = new java.lang.Object[] { var55};
    java.util.List var57 = org.jsecurity.util.CollectionUtils.asList(var56);
    org.jsecurity.authc.pam.ModularRealmAuthenticator var58 = new org.jsecurity.authc.pam.ModularRealmAuthenticator(var57);
    org.jsecurity.subject.SimplePrincipalCollection var60 = new org.jsecurity.subject.SimplePrincipalCollection((java.util.Collection)var57, "org.jsecurity.authz.UnauthorizedException: org.jsecurity.session.ExpiredSessionException: ");
    org.jsecurity.io.ResourceException var64 = new org.jsecurity.io.ResourceException("hi!");
    org.jsecurity.authc.UnknownAccountException var65 = new org.jsecurity.authc.UnknownAccountException((java.lang.Throwable)var64);
    org.jsecurity.session.StoppedSessionException var66 = new org.jsecurity.session.StoppedSessionException("dd\uFFFD", (java.io.Serializable)var64);
    org.jsecurity.session.UnknownSessionException var67 = new org.jsecurity.session.UnknownSessionException("org.jsecurity.authz.UnauthorizedException: org.jsecurity.session.ExpiredSessionException: ", (java.lang.Throwable)var64);
    boolean var68 = var60.equals((java.lang.Object)var64);
    var34.addAll((org.jsecurity.subject.PrincipalCollection)var60);
    org.jsecurity.session.UnknownSessionException var74 = new org.jsecurity.session.UnknownSessionException("dd\uFFFD", (java.io.Serializable)100.0f);
    org.jsecurity.subject.SubjectException var75 = new org.jsecurity.subject.SubjectException("dd\uFFFD", (java.lang.Throwable)var74);
    org.jsecurity.io.SerializationException var76 = new org.jsecurity.io.SerializationException("", (java.lang.Throwable)var75);
    java.lang.Throwable[] var77 = var75.getSuppressed();
    java.util.List var78 = org.jsecurity.util.CollectionUtils.asList((java.lang.Object[])var77);
    boolean var79 = var0.isPermittedAll((org.jsecurity.subject.PrincipalCollection)var34, (java.util.Collection)var78);
    org.jsecurity.subject.DelegatingSubject var80 = new org.jsecurity.subject.DelegatingSubject((org.jsecurity.mgt.SecurityManager)var0);
    var80.logout();
    java.lang.String[] var86 = org.jsecurity.util.StringUtils.split("org.jsecurity.config.ConfigurationException: dd\uFFFD", '4', '4', '4');
    boolean[] var87 = var80.isPermitted(var86);
    java.lang.Object var88 = var80.getPrincipal();
    java.net.InetAddress var89 = var80.getInetAddress();
    java.lang.String[] var91 = org.jsecurity.util.StringUtils.split("ca73d1a4-706e-42e7-980f-896d3b153de8");
    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      var80.checkPermissions(var91);
      fail("Expected exception of type org.jsecurity.authz.UnauthenticatedException");
    } catch (org.jsecurity.authz.UnauthenticatedException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var2);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var3);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var4);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var12);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var13);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var14);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var26);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var38);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var39);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var41);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var42);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var43);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var51);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var52);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var55);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var56);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var57);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var68 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var77);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var78);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var79 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var86);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var87);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var88);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var89);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var91);

  }

  public void test318() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest2.test318");


    java.io.InputStream var2 = org.jsecurity.util.ClassUtils.getResourceAsStream("");
    java.lang.Object[] var3 = new java.lang.Object[] { var2};
    java.util.List var4 = org.jsecurity.util.CollectionUtils.asList(var3);
    org.jsecurity.authc.pam.ModularRealmAuthenticator var5 = new org.jsecurity.authc.pam.ModularRealmAuthenticator(var4);
    org.jsecurity.authc.pam.AllSuccessfulModularAuthenticationStrategy var6 = new org.jsecurity.authc.pam.AllSuccessfulModularAuthenticationStrategy();
    var5.setModularAuthenticationStrategy((org.jsecurity.authc.pam.ModularAuthenticationStrategy)var6);
    org.jsecurity.authz.SimpleAuthorizationInfo var8 = new org.jsecurity.authz.SimpleAuthorizationInfo();
    var8.addStringPermission("hi!");
    java.io.InputStream var12 = org.jsecurity.util.ClassUtils.getResourceAsStream("");
    java.lang.Object[] var13 = new java.lang.Object[] { var12};
    java.util.List var14 = org.jsecurity.util.CollectionUtils.asList(var13);
    var8.addRoles((java.util.Collection)var14);
    var5.setAuthenticationListeners((java.util.Collection)var14);
    org.jsecurity.realm.activedirectory.ActiveDirectoryRealm var17 = new org.jsecurity.realm.activedirectory.ActiveDirectoryRealm();
    var17.setPrincipalSuffix("");
    var5.setRealm((org.jsecurity.realm.Realm)var17);
    org.jsecurity.authc.pam.FirstSuccessfulAuthenticationStrategy var21 = new org.jsecurity.authc.pam.FirstSuccessfulAuthenticationStrategy();
    org.jsecurity.authz.UnauthorizedException var23 = new org.jsecurity.authz.UnauthorizedException("org.jsecurity.config.ConfigurationException: dd\uFFFD");
    java.lang.Throwable[] var24 = var23.getSuppressed();
    java.util.List var25 = org.jsecurity.util.CollectionUtils.asList((java.lang.Object[])var24);
    org.jsecurity.authc.UsernamePasswordToken var26 = new org.jsecurity.authc.UsernamePasswordToken();
    java.lang.String var27 = var26.getUsername();
    java.net.InetAddress var28 = var26.getInetAddress();
    org.jsecurity.authc.AuthenticationInfo var29 = var21.beforeAllAttempts((java.util.Collection)var25, (org.jsecurity.authc.AuthenticationToken)var26);
    var5.setModularAuthenticationStrategy((org.jsecurity.authc.pam.ModularAuthenticationStrategy)var21);
    org.jsecurity.codec.CodecException var33 = new org.jsecurity.codec.CodecException("dd\uFFFD");
    org.jsecurity.authc.ConcurrentAccessException var34 = new org.jsecurity.authc.ConcurrentAccessException("org.jsecurity.authz.UnauthorizedException: org.jsecurity.session.ExpiredSessionException: ", (java.lang.Throwable)var33);
    org.jsecurity.subject.SimplePrincipalCollection var36 = new org.jsecurity.subject.SimplePrincipalCollection((java.lang.Object)var33, "");
    org.jsecurity.authc.pam.FirstSuccessfulAuthenticationStrategy var37 = new org.jsecurity.authc.pam.FirstSuccessfulAuthenticationStrategy();
    org.jsecurity.authz.UnauthorizedException var39 = new org.jsecurity.authz.UnauthorizedException("org.jsecurity.config.ConfigurationException: dd\uFFFD");
    java.lang.Throwable[] var40 = var39.getSuppressed();
    java.util.List var41 = org.jsecurity.util.CollectionUtils.asList((java.lang.Object[])var40);
    org.jsecurity.authc.UsernamePasswordToken var42 = new org.jsecurity.authc.UsernamePasswordToken();
    java.lang.String var43 = var42.getUsername();
    java.net.InetAddress var44 = var42.getInetAddress();
    org.jsecurity.authc.AuthenticationInfo var45 = var37.beforeAllAttempts((java.util.Collection)var41, (org.jsecurity.authc.AuthenticationToken)var42);
    org.jsecurity.session.UnknownSessionException var50 = new org.jsecurity.session.UnknownSessionException("dd\uFFFD", (java.io.Serializable)100.0f);
    org.jsecurity.subject.SubjectException var51 = new org.jsecurity.subject.SubjectException("dd\uFFFD", (java.lang.Throwable)var50);
    org.jsecurity.io.SerializationException var52 = new org.jsecurity.io.SerializationException("", (java.lang.Throwable)var51);
    java.lang.Throwable[] var53 = var51.getSuppressed();
    java.util.Set var54 = org.jsecurity.util.CollectionUtils.asSet((java.lang.Object[])var53);
    org.jsecurity.authc.SimpleAccount var55 = new org.jsecurity.authc.SimpleAccount((org.jsecurity.subject.PrincipalCollection)var36, (java.lang.Object)var41, var54);
    org.jsecurity.authc.pam.AllSuccessfulModularAuthenticationStrategy var56 = new org.jsecurity.authc.pam.AllSuccessfulModularAuthenticationStrategy();
    char[] var58 = new char[] { };
    org.jsecurity.authc.UsernamePasswordToken var60 = new org.jsecurity.authc.UsernamePasswordToken("hi!", var58, true);
    org.jsecurity.authc.SimpleAccount var61 = new org.jsecurity.authc.SimpleAccount();
    var61.setCredentialsExpired(false);
    boolean var64 = var61.isLocked();
    org.jsecurity.authc.AuthenticationInfo var65 = var56.afterAllAttempts((org.jsecurity.authc.AuthenticationToken)var60, (org.jsecurity.authc.AuthenticationInfo)var61);
    char[] var68 = new char[] { };
    org.jsecurity.authc.UsernamePasswordToken var70 = new org.jsecurity.authc.UsernamePasswordToken("hi!", var68, true);
    org.jsecurity.authc.UsernamePasswordToken var71 = new org.jsecurity.authc.UsernamePasswordToken("\u0000\u0000", var68);
    var60.setPassword(var68);
    org.jsecurity.authc.AuthenticationInfo var73 = var21.beforeAllAttempts((java.util.Collection)var41, (org.jsecurity.authc.AuthenticationToken)var60);
    char[] var74 = var60.getPassword();
    org.jsecurity.authc.UsernamePasswordToken var75 = new org.jsecurity.authc.UsernamePasswordToken("7aaa0eff-7052-4953-955a-cd6cddd8c21c", var74);
    char[] var76 = var75.getPassword();
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var2);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var3);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var4);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var12);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var13);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var14);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var24);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var25);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var27);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var28);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var29);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var40);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var41);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var43);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var44);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var45);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var53);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var54);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var58);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var64 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var65);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var68);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var73);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var74);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var76);

  }

  public void test319() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest2.test319");


    org.jsecurity.session.mgt.SimpleSession var1 = new org.jsecurity.session.mgt.SimpleSession();
    var1.touch();
    org.jsecurity.authz.UnauthenticatedException var5 = new org.jsecurity.authz.UnauthenticatedException();
    org.jsecurity.config.UnresolveableReferenceException var6 = new org.jsecurity.config.UnresolveableReferenceException("", (java.lang.Throwable)var5);
    org.jsecurity.cache.CacheException var7 = new org.jsecurity.cache.CacheException("org.jsecurity.config.ConfigurationException: dd\uFFFD", (java.lang.Throwable)var5);
    java.lang.Object var8 = var1.removeAttribute((java.lang.Object)var7);
    org.jsecurity.session.mgt.eis.MemorySessionDAO var9 = new org.jsecurity.session.mgt.eis.MemorySessionDAO();
    org.jsecurity.cache.Cache var10 = var9.getActiveSessionsCache();
    org.jsecurity.cache.CacheManager var11 = var9.getCacheManager();
    org.jsecurity.cache.HashtableCacheManager var12 = new org.jsecurity.cache.HashtableCacheManager();
    org.jsecurity.cache.Cache var14 = var12.getCache("\u0000\u0000");
    var9.setActiveSessionsCache(var14);
    java.io.InputStream var17 = org.jsecurity.util.ClassUtils.getResourceAsStream("");
    java.lang.Object[] var18 = new java.lang.Object[] { var17};
    java.util.List var19 = org.jsecurity.util.CollectionUtils.asList(var18);
    org.jsecurity.authc.pam.ModularRealmAuthenticator var20 = new org.jsecurity.authc.pam.ModularRealmAuthenticator(var19);
    org.jsecurity.authc.pam.AllSuccessfulModularAuthenticationStrategy var21 = new org.jsecurity.authc.pam.AllSuccessfulModularAuthenticationStrategy();
    var20.setModularAuthenticationStrategy((org.jsecurity.authc.pam.ModularAuthenticationStrategy)var21);
    org.jsecurity.authz.SimpleAuthorizationInfo var23 = new org.jsecurity.authz.SimpleAuthorizationInfo();
    var23.addStringPermission("hi!");
    java.io.InputStream var27 = org.jsecurity.util.ClassUtils.getResourceAsStream("");
    java.lang.Object[] var28 = new java.lang.Object[] { var27};
    java.util.List var29 = org.jsecurity.util.CollectionUtils.asList(var28);
    var23.addRoles((java.util.Collection)var29);
    var20.setAuthenticationListeners((java.util.Collection)var29);
    org.jsecurity.realm.activedirectory.ActiveDirectoryRealm var32 = new org.jsecurity.realm.activedirectory.ActiveDirectoryRealm();
    var32.setPrincipalSuffix("");
    var20.setRealm((org.jsecurity.realm.Realm)var32);
    org.jsecurity.cache.HashtableCacheManager var36 = new org.jsecurity.cache.HashtableCacheManager();
    org.jsecurity.cache.Cache var38 = var36.getCache("\u0000\u0000");
    var32.setAuthorizationCache(var38);
    var9.setActiveSessionsCache(var38);
    org.jsecurity.session.mgt.SimpleSession var41 = new org.jsecurity.session.mgt.SimpleSession();
    java.io.Serializable var42 = var9.create((org.jsecurity.session.Session)var41);
    java.io.Serializable var43 = var41.getId();
    org.jsecurity.session.mgt.SimpleSession var44 = new org.jsecurity.session.mgt.SimpleSession();
    var44.touch();
    var44.validate();
    org.jsecurity.session.mgt.SimpleSession var47 = new org.jsecurity.session.mgt.SimpleSession();
    var47.setTimeout((-1L));
    org.jsecurity.session.mgt.SimpleSession var50 = new org.jsecurity.session.mgt.SimpleSession();
    java.util.Date var51 = var50.getLastAccessTime();
    var47.setLastAccessTime(var51);
    org.jsecurity.session.mgt.SimpleSession var53 = new org.jsecurity.session.mgt.SimpleSession();
    java.util.Date var54 = var53.getLastAccessTime();
    var47.setStopTimestamp(var54);
    var44.setLastAccessTime(var54);
    var41.setStartTimestamp(var54);
    var1.setStartTimestamp(var54);
    var1.validate();
    org.jsecurity.session.UnknownSessionException var60 = new org.jsecurity.session.UnknownSessionException("6f8b35fd-0848-49a4-9560-659760616ad8", (java.io.Serializable)var1);
    org.jsecurity.util.InstantiationException var61 = new org.jsecurity.util.InstantiationException((java.lang.Throwable)var60);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var8);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var10);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var11);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var14);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var17);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var18);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var19);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var27);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var28);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var29);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var38);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var42 + "' != '" + "11ec0f48-38d4-4429-ba1d-6a4035d60891"+ "'", var42.equals("11ec0f48-38d4-4429-ba1d-6a4035d60891"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var43 + "' != '" + "11ec0f48-38d4-4429-ba1d-6a4035d60891"+ "'", var43.equals("11ec0f48-38d4-4429-ba1d-6a4035d60891"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var51);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var54);

  }

  public void test320() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest2.test320");


    org.jsecurity.crypto.hash.Sha384Hash var1 = org.jsecurity.crypto.hash.Sha384Hash.fromHexString("6464ff");
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var1);

  }

  public void test321() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest2.test321");


    org.jsecurity.mgt.DefaultSecurityManager var0 = new org.jsecurity.mgt.DefaultSecurityManager();
    org.jsecurity.authc.pam.AllSuccessfulModularAuthenticationStrategy var1 = new org.jsecurity.authc.pam.AllSuccessfulModularAuthenticationStrategy();
    org.jsecurity.authc.pam.AllSuccessfulModularAuthenticationStrategy var2 = new org.jsecurity.authc.pam.AllSuccessfulModularAuthenticationStrategy();
    char[] var4 = new char[] { };
    org.jsecurity.authc.UsernamePasswordToken var6 = new org.jsecurity.authc.UsernamePasswordToken("hi!", var4, true);
    org.jsecurity.authc.SimpleAccount var7 = new org.jsecurity.authc.SimpleAccount();
    var7.setCredentialsExpired(false);
    boolean var10 = var7.isLocked();
    org.jsecurity.authc.AuthenticationInfo var11 = var2.afterAllAttempts((org.jsecurity.authc.AuthenticationToken)var6, (org.jsecurity.authc.AuthenticationInfo)var7);
    char[] var15 = new char[] { '4', '#'};
    org.jsecurity.authc.UsernamePasswordToken var16 = new org.jsecurity.authc.UsernamePasswordToken("\u0000\u0000", var15);
    org.jsecurity.authc.SimpleAccount var17 = new org.jsecurity.authc.SimpleAccount();
    var17.setCredentialsExpired(false);
    var17.setCredentialsExpired(false);
    boolean var22 = var17.isCredentialsExpired();
    org.jsecurity.authc.AuthenticationInfo var23 = var2.afterAllAttempts((org.jsecurity.authc.AuthenticationToken)var16, (org.jsecurity.authc.AuthenticationInfo)var17);
    org.jsecurity.authz.UnauthenticatedException var27 = new org.jsecurity.authz.UnauthenticatedException();
    org.jsecurity.config.UnresolveableReferenceException var28 = new org.jsecurity.config.UnresolveableReferenceException("", (java.lang.Throwable)var27);
    org.jsecurity.cache.CacheException var29 = new org.jsecurity.cache.CacheException("org.jsecurity.config.ConfigurationException: dd\uFFFD", (java.lang.Throwable)var27);
    org.jsecurity.authc.SimpleAuthenticationInfo var31 = new org.jsecurity.authc.SimpleAuthenticationInfo((java.lang.Object)"org.jsecurity.config.ConfigurationException: dd\uFFFD", (java.lang.Object)var29, "a2b823b1e72eae2b727289df8a00a89df8a0bab6ad8a89c4c5c7a9b62a270000");
    org.jsecurity.subject.PrincipalCollection var32 = var31.getPrincipals();
    org.jsecurity.authc.AuthenticationInfo var33 = var1.afterAllAttempts((org.jsecurity.authc.AuthenticationToken)var16, (org.jsecurity.authc.AuthenticationInfo)var31);
    var0.setModularAuthenticationStrategy((org.jsecurity.authc.pam.ModularAuthenticationStrategy)var1);
    org.jsecurity.subject.RememberMeManager var35 = var0.getRememberMeManager();
    org.jsecurity.authc.pam.ModularRealmAuthenticator var36 = new org.jsecurity.authc.pam.ModularRealmAuthenticator();
    var0.setAuthenticator((org.jsecurity.authc.Authenticator)var36);
    org.jsecurity.codec.CodecException var40 = new org.jsecurity.codec.CodecException("dd\uFFFD");
    org.jsecurity.authc.ConcurrentAccessException var41 = new org.jsecurity.authc.ConcurrentAccessException("org.jsecurity.authz.UnauthorizedException: org.jsecurity.session.ExpiredSessionException: ", (java.lang.Throwable)var40);
    org.jsecurity.subject.SimplePrincipalCollection var43 = new org.jsecurity.subject.SimplePrincipalCollection((java.lang.Object)var40, "");
    java.io.InputStream var45 = org.jsecurity.util.ClassUtils.getResourceAsStream("");
    java.lang.Object[] var46 = new java.lang.Object[] { var45};
    java.util.List var47 = org.jsecurity.util.CollectionUtils.asList(var46);
    org.jsecurity.authc.pam.ModularRealmAuthenticator var48 = new org.jsecurity.authc.pam.ModularRealmAuthenticator(var47);
    var43.addAll((java.util.Collection)var47, "\u0000\u0000");
    org.jsecurity.authc.pam.FirstSuccessfulAuthenticationStrategy var51 = new org.jsecurity.authc.pam.FirstSuccessfulAuthenticationStrategy();
    org.jsecurity.authz.UnauthorizedException var53 = new org.jsecurity.authz.UnauthorizedException("org.jsecurity.config.ConfigurationException: dd\uFFFD");
    java.lang.Throwable[] var54 = var53.getSuppressed();
    java.util.List var55 = org.jsecurity.util.CollectionUtils.asList((java.lang.Object[])var54);
    org.jsecurity.authc.UsernamePasswordToken var56 = new org.jsecurity.authc.UsernamePasswordToken();
    java.lang.String var57 = var56.getUsername();
    java.net.InetAddress var58 = var56.getInetAddress();
    org.jsecurity.authc.AuthenticationInfo var59 = var51.beforeAllAttempts((java.util.Collection)var55, (org.jsecurity.authc.AuthenticationToken)var56);
    var0.checkPermissions((org.jsecurity.subject.PrincipalCollection)var43, (java.util.Collection)var55);
    org.jsecurity.authz.aop.RoleAnnotationMethodInterceptor var61 = new org.jsecurity.authz.aop.RoleAnnotationMethodInterceptor();
    org.jsecurity.aop.AnnotationHandler var62 = var61.getHandler();
    java.lang.Class var63 = var62.getAnnotationClass();
    java.lang.Object var64 = var43.oneByType(var63);
    var43.clear();
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var4);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var10 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var11);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var15);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var22 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var23);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var32);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var33);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var35);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var45);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var46);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var47);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var54);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var55);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var57);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var58);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var59);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var62);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var63);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var64);

  }

  public void test322() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest2.test322");


    java.io.InputStream var1 = org.jsecurity.util.ClassUtils.getResourceAsStream("");
    java.lang.Object[] var2 = new java.lang.Object[] { var1};
    java.util.List var3 = org.jsecurity.util.CollectionUtils.asList(var2);
    org.jsecurity.authc.pam.ModularRealmAuthenticator var4 = new org.jsecurity.authc.pam.ModularRealmAuthenticator(var3);
    org.jsecurity.realm.text.TextConfigurationRealm var5 = new org.jsecurity.realm.text.TextConfigurationRealm();
    java.io.InputStream var7 = org.jsecurity.util.ClassUtils.getResourceAsStream("");
    java.lang.Object[] var8 = new java.lang.Object[] { var7};
    java.util.List var9 = org.jsecurity.util.CollectionUtils.asList(var8);
    org.jsecurity.authc.pam.ModularRealmAuthenticator var10 = new org.jsecurity.authc.pam.ModularRealmAuthenticator(var9);
    org.jsecurity.subject.SimplePrincipalCollection var12 = new org.jsecurity.subject.SimplePrincipalCollection((java.util.Collection)var9, "org.jsecurity.authz.UnauthorizedException: org.jsecurity.session.ExpiredSessionException: ");
    org.jsecurity.session.UnknownSessionException var17 = new org.jsecurity.session.UnknownSessionException("dd\uFFFD", (java.io.Serializable)100.0f);
    org.jsecurity.session.SessionException var19 = new org.jsecurity.session.SessionException("dd\uFFFD", (java.lang.Throwable)var17, (java.io.Serializable)0);
    org.jsecurity.session.SessionException var20 = new org.jsecurity.session.SessionException("dd\uFFFD", (java.lang.Throwable)var17);
    var12.add((java.lang.Object)var20, "org.jsecurity.config.ConfigurationException: dd\uFFFD");
    var5.onLogout((org.jsecurity.subject.PrincipalCollection)var12);
    org.jsecurity.cache.HashtableCacheManager var24 = new org.jsecurity.cache.HashtableCacheManager();
    org.jsecurity.cache.Cache var26 = var24.getCache("\u0000\u0000");
    var5.setAuthorizationCache(var26);
    org.jsecurity.codec.CodecException var30 = new org.jsecurity.codec.CodecException("dd\uFFFD");
    org.jsecurity.authc.ConcurrentAccessException var31 = new org.jsecurity.authc.ConcurrentAccessException("org.jsecurity.authz.UnauthorizedException: org.jsecurity.session.ExpiredSessionException: ", (java.lang.Throwable)var30);
    org.jsecurity.subject.SimplePrincipalCollection var33 = new org.jsecurity.subject.SimplePrincipalCollection((java.lang.Object)var30, "");
    var5.onLogout((org.jsecurity.subject.PrincipalCollection)var33);
    var4.setRealm((org.jsecurity.realm.Realm)var5);
    java.io.InputStream var37 = org.jsecurity.util.ClassUtils.getResourceAsStream("");
    java.lang.Object[] var38 = new java.lang.Object[] { var37};
    java.util.List var39 = org.jsecurity.util.CollectionUtils.asList(var38);
    org.jsecurity.authc.pam.ModularRealmAuthenticator var40 = new org.jsecurity.authc.pam.ModularRealmAuthenticator(var39);
    org.jsecurity.authc.pam.AllSuccessfulModularAuthenticationStrategy var41 = new org.jsecurity.authc.pam.AllSuccessfulModularAuthenticationStrategy();
    var40.setModularAuthenticationStrategy((org.jsecurity.authc.pam.ModularAuthenticationStrategy)var41);
    org.jsecurity.authz.SimpleAuthorizationInfo var43 = new org.jsecurity.authz.SimpleAuthorizationInfo();
    var43.addStringPermission("hi!");
    java.io.InputStream var47 = org.jsecurity.util.ClassUtils.getResourceAsStream("");
    java.lang.Object[] var48 = new java.lang.Object[] { var47};
    java.util.List var49 = org.jsecurity.util.CollectionUtils.asList(var48);
    var43.addRoles((java.util.Collection)var49);
    var40.setAuthenticationListeners((java.util.Collection)var49);
    org.jsecurity.realm.activedirectory.ActiveDirectoryRealm var52 = new org.jsecurity.realm.activedirectory.ActiveDirectoryRealm();
    var52.setPrincipalSuffix("");
    var40.setRealm((org.jsecurity.realm.Realm)var52);
    var4.setRealm((org.jsecurity.realm.Realm)var52);
    byte[] var61 = new byte[] { (byte)100, (byte)100, (byte)(-1)};
    java.lang.String var62 = org.jsecurity.codec.CodecSupport.toString(var61);
    char[] var63 = org.jsecurity.codec.CodecSupport.toChars(var61);
    boolean var64 = org.jsecurity.codec.Base64.isBase64(var61);
    boolean var65 = org.jsecurity.codec.Base64.isBase64(var61);
    boolean var66 = org.jsecurity.codec.Base64.isBase64(var61);
    char[] var67 = org.jsecurity.codec.CodecSupport.toChars(var61);
    org.jsecurity.session.mgt.SimpleSession var68 = new org.jsecurity.session.mgt.SimpleSession();
    var68.setTimeout((-1L));
    org.jsecurity.session.mgt.SimpleSession var71 = new org.jsecurity.session.mgt.SimpleSession();
    java.util.Date var72 = var71.getLastAccessTime();
    var68.setLastAccessTime(var72);
    java.net.InetAddress var74 = var68.getHostAddress();
    org.jsecurity.authz.HostUnauthorizedException var75 = new org.jsecurity.authz.HostUnauthorizedException(var74);
    org.jsecurity.authc.UsernamePasswordToken var76 = new org.jsecurity.authc.UsernamePasswordToken("b725e8cc-690c-495e-ac27-b1b425834793", var67, var74);
    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      org.jsecurity.authc.AuthenticationInfo var77 = var4.authenticate((org.jsecurity.authc.AuthenticationToken)var76);
      fail("Expected exception of type org.jsecurity.authc.AuthenticationException");
    } catch (org.jsecurity.authc.AuthenticationException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var1);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var2);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var3);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var7);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var8);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var9);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var26);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var37);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var38);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var39);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var47);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var48);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var49);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var61);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var62 + "' != '" + "dd\uFFFD"+ "'", var62.equals("dd\uFFFD"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var63);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var64 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var65 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var66 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var67);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var72);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var74);

  }

  public void test323() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest2.test323");


    org.jsecurity.session.mgt.eis.MemorySessionDAO var0 = new org.jsecurity.session.mgt.eis.MemorySessionDAO();
    org.jsecurity.cache.Cache var1 = var0.getActiveSessionsCache();
    org.jsecurity.cache.CacheManager var2 = var0.getCacheManager();
    org.jsecurity.cache.HashtableCacheManager var3 = new org.jsecurity.cache.HashtableCacheManager();
    org.jsecurity.cache.Cache var5 = var3.getCache("\u0000\u0000");
    var0.setActiveSessionsCache(var5);
    java.io.InputStream var8 = org.jsecurity.util.ClassUtils.getResourceAsStream("");
    java.lang.Object[] var9 = new java.lang.Object[] { var8};
    java.util.List var10 = org.jsecurity.util.CollectionUtils.asList(var9);
    org.jsecurity.authc.pam.ModularRealmAuthenticator var11 = new org.jsecurity.authc.pam.ModularRealmAuthenticator(var10);
    org.jsecurity.authc.pam.AllSuccessfulModularAuthenticationStrategy var12 = new org.jsecurity.authc.pam.AllSuccessfulModularAuthenticationStrategy();
    var11.setModularAuthenticationStrategy((org.jsecurity.authc.pam.ModularAuthenticationStrategy)var12);
    org.jsecurity.authz.SimpleAuthorizationInfo var14 = new org.jsecurity.authz.SimpleAuthorizationInfo();
    var14.addStringPermission("hi!");
    java.io.InputStream var18 = org.jsecurity.util.ClassUtils.getResourceAsStream("");
    java.lang.Object[] var19 = new java.lang.Object[] { var18};
    java.util.List var20 = org.jsecurity.util.CollectionUtils.asList(var19);
    var14.addRoles((java.util.Collection)var20);
    var11.setAuthenticationListeners((java.util.Collection)var20);
    org.jsecurity.realm.activedirectory.ActiveDirectoryRealm var23 = new org.jsecurity.realm.activedirectory.ActiveDirectoryRealm();
    var23.setPrincipalSuffix("");
    var11.setRealm((org.jsecurity.realm.Realm)var23);
    org.jsecurity.cache.HashtableCacheManager var27 = new org.jsecurity.cache.HashtableCacheManager();
    org.jsecurity.cache.Cache var29 = var27.getCache("\u0000\u0000");
    var23.setAuthorizationCache(var29);
    var0.setActiveSessionsCache(var29);
    org.jsecurity.session.mgt.SimpleSession var32 = new org.jsecurity.session.mgt.SimpleSession();
    java.io.Serializable var33 = var0.create((org.jsecurity.session.Session)var32);
    java.io.Serializable var34 = var32.getId();
    org.jsecurity.authc.credential.Md5CredentialsMatcher var35 = new org.jsecurity.authc.credential.Md5CredentialsMatcher();
    boolean var36 = var35.isHashSalted();
    boolean var37 = var35.isHashSalted();
    int var38 = var35.getHashIterations();
    java.lang.Object var39 = var32.removeAttribute((java.lang.Object)var35);
    boolean var40 = var35.isStoredCredentialsHexEncoded();
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var1);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var2);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var5);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var8);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var9);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var10);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var18);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var19);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var20);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var29);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var33 + "' != '" + "a90fad7f-7d5f-46a8-a669-ef1c9ffd25bf"+ "'", var33.equals("a90fad7f-7d5f-46a8-a669-ef1c9ffd25bf"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var34 + "' != '" + "a90fad7f-7d5f-46a8-a669-ef1c9ffd25bf"+ "'", var34.equals("a90fad7f-7d5f-46a8-a669-ef1c9ffd25bf"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var36 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var37 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var38 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var39);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var40 == true);

  }

  public void test324() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest2.test324");


    org.jsecurity.session.mgt.DelegatingSession var0 = new org.jsecurity.session.mgt.DelegatingSession();
    org.jsecurity.session.mgt.DefaultSessionManager var1 = new org.jsecurity.session.mgt.DefaultSessionManager();
    org.jsecurity.session.mgt.eis.MemorySessionDAO var2 = new org.jsecurity.session.mgt.eis.MemorySessionDAO();
    org.jsecurity.cache.Cache var3 = var2.getActiveSessionsCache();
    org.jsecurity.cache.CacheManager var4 = var2.getCacheManager();
    org.jsecurity.cache.HashtableCacheManager var5 = new org.jsecurity.cache.HashtableCacheManager();
    org.jsecurity.cache.Cache var7 = var5.getCache("\u0000\u0000");
    var2.setActiveSessionsCache(var7);
    java.io.InputStream var10 = org.jsecurity.util.ClassUtils.getResourceAsStream("");
    java.lang.Object[] var11 = new java.lang.Object[] { var10};
    java.util.List var12 = org.jsecurity.util.CollectionUtils.asList(var11);
    org.jsecurity.authc.pam.ModularRealmAuthenticator var13 = new org.jsecurity.authc.pam.ModularRealmAuthenticator(var12);
    org.jsecurity.authc.pam.AllSuccessfulModularAuthenticationStrategy var14 = new org.jsecurity.authc.pam.AllSuccessfulModularAuthenticationStrategy();
    var13.setModularAuthenticationStrategy((org.jsecurity.authc.pam.ModularAuthenticationStrategy)var14);
    org.jsecurity.authz.SimpleAuthorizationInfo var16 = new org.jsecurity.authz.SimpleAuthorizationInfo();
    var16.addStringPermission("hi!");
    java.io.InputStream var20 = org.jsecurity.util.ClassUtils.getResourceAsStream("");
    java.lang.Object[] var21 = new java.lang.Object[] { var20};
    java.util.List var22 = org.jsecurity.util.CollectionUtils.asList(var21);
    var16.addRoles((java.util.Collection)var22);
    var13.setAuthenticationListeners((java.util.Collection)var22);
    org.jsecurity.realm.activedirectory.ActiveDirectoryRealm var25 = new org.jsecurity.realm.activedirectory.ActiveDirectoryRealm();
    var25.setPrincipalSuffix("");
    var13.setRealm((org.jsecurity.realm.Realm)var25);
    org.jsecurity.cache.HashtableCacheManager var29 = new org.jsecurity.cache.HashtableCacheManager();
    org.jsecurity.cache.Cache var31 = var29.getCache("\u0000\u0000");
    var25.setAuthorizationCache(var31);
    var2.setActiveSessionsCache(var31);
    org.jsecurity.session.mgt.SimpleSession var34 = new org.jsecurity.session.mgt.SimpleSession();
    java.io.Serializable var35 = var2.create((org.jsecurity.session.Session)var34);
    var1.setSessionDAO((org.jsecurity.session.mgt.eis.SessionDAO)var2);
    var0.setSessionManager((org.jsecurity.session.mgt.SessionManager)var1);
    org.jsecurity.io.IniResource var38 = new org.jsecurity.io.IniResource();
    java.lang.String var39 = var38.getCharsetName();
    org.jsecurity.config.ReflectionBuilder var40 = new org.jsecurity.config.ReflectionBuilder();
    org.jsecurity.io.IniResource var41 = new org.jsecurity.io.IniResource();
    var41.setCharsetName("org.jsecurity.authz.UnauthorizedException: org.jsecurity.session.ExpiredSessionException: ");
    java.util.Map var44 = var41.getSections();
    java.util.Map var45 = var40.buildObjects(var44);
    var38.setSections(var45);
    org.jsecurity.realm.text.TextConfigurationRealm var47 = new org.jsecurity.realm.text.TextConfigurationRealm();
    java.io.InputStream var49 = org.jsecurity.util.ClassUtils.getResourceAsStream("");
    java.lang.Object[] var50 = new java.lang.Object[] { var49};
    java.util.List var51 = org.jsecurity.util.CollectionUtils.asList(var50);
    org.jsecurity.authc.pam.ModularRealmAuthenticator var52 = new org.jsecurity.authc.pam.ModularRealmAuthenticator(var51);
    org.jsecurity.subject.SimplePrincipalCollection var54 = new org.jsecurity.subject.SimplePrincipalCollection((java.util.Collection)var51, "org.jsecurity.authz.UnauthorizedException: org.jsecurity.session.ExpiredSessionException: ");
    org.jsecurity.session.UnknownSessionException var59 = new org.jsecurity.session.UnknownSessionException("dd\uFFFD", (java.io.Serializable)100.0f);
    org.jsecurity.session.SessionException var61 = new org.jsecurity.session.SessionException("dd\uFFFD", (java.lang.Throwable)var59, (java.io.Serializable)0);
    org.jsecurity.session.SessionException var62 = new org.jsecurity.session.SessionException("dd\uFFFD", (java.lang.Throwable)var59);
    var54.add((java.lang.Object)var62, "org.jsecurity.config.ConfigurationException: dd\uFFFD");
    var47.onLogout((org.jsecurity.subject.PrincipalCollection)var54);
    byte[] var68 = org.jsecurity.codec.Base64.decode("hi!");
    org.jsecurity.authc.CredentialsException var70 = new org.jsecurity.authc.CredentialsException("org.jsecurity.authz.UnauthorizedException: org.jsecurity.session.ExpiredSessionException: ");
    org.jsecurity.authc.SimpleAuthenticationInfo var72 = new org.jsecurity.authc.SimpleAuthenticationInfo((java.lang.Object)"hi!", (java.lang.Object)var70, "org.jsecurity.config.ConfigurationException: dd\uFFFD");
    org.jsecurity.session.SessionException var73 = new org.jsecurity.session.SessionException("a2b823b1e72eae2b727289df8a00a89df8a0bab6ad8a89c4c5c7a9b62a270000", (java.io.Serializable)"org.jsecurity.config.ConfigurationException: dd\uFFFD");
    org.jsecurity.authc.SimpleAccount var75 = new org.jsecurity.authc.SimpleAccount((java.lang.Object)var47, (java.lang.Object)"a2b823b1e72eae2b727289df8a00a89df8a0bab6ad8a89c4c5c7a9b62a270000", "7edc3e5f-37f7-4a22-9779-4609545bccd8");
    org.jsecurity.authz.SimpleRole var77 = new org.jsecurity.authz.SimpleRole();
    org.jsecurity.authz.permission.WildcardPermission var80 = new org.jsecurity.authz.permission.WildcardPermission("hi!", false);
    boolean var81 = var77.isPermitted((org.jsecurity.authz.Permission)var80);
    org.jsecurity.session.InvalidSessionException var82 = new org.jsecurity.session.InvalidSessionException("org.jsecurity.config.ConfigurationException: dd\uFFFD", (java.io.Serializable)var80);
    org.jsecurity.authz.SimpleRole var83 = new org.jsecurity.authz.SimpleRole();
    org.jsecurity.authz.permission.WildcardPermission var86 = new org.jsecurity.authz.permission.WildcardPermission("hi!", false);
    boolean var87 = var83.isPermitted((org.jsecurity.authz.Permission)var86);
    boolean var88 = var80.implies((org.jsecurity.authz.Permission)var86);
    var75.addObjectPermission((org.jsecurity.authz.Permission)var80);
    org.jsecurity.authz.UnauthenticatedException var91 = new org.jsecurity.authz.UnauthenticatedException("\uFFFD\uFFFD\uFFFDq\uFFFD\uFFFD\uFFFD\u01BC\uFFFDg]\uFFFD\uFFFD\u001Fu\uFFFD<\uFFFD\uFFFDi\uFFFD\uFFFD");
    boolean var92 = var75.equals((java.lang.Object)var91);
    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      var0.setAttribute((java.lang.Object)var45, (java.lang.Object)var92);
      fail("Expected exception of type org.jsecurity.session.UnknownSessionException");
    } catch (org.jsecurity.session.UnknownSessionException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var3);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var4);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var7);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var10);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var11);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var12);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var20);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var21);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var22);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var31);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var35 + "' != '" + "9afe881c-5179-4a90-9bc3-4afe59e894b2"+ "'", var35.equals("9afe881c-5179-4a90-9bc3-4afe59e894b2"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var39);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var44);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var45);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var49);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var50);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var51);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var68);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var81 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var87 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var88 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var92 == false);

  }

  public void test325() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest2.test325");


    org.jsecurity.session.ExpiredSessionException var1 = new org.jsecurity.session.ExpiredSessionException((java.io.Serializable)(-1));
    org.jsecurity.authc.DisabledAccountException var2 = new org.jsecurity.authc.DisabledAccountException((java.lang.Throwable)var1);
    org.jsecurity.authc.pam.UnsupportedTokenException var3 = new org.jsecurity.authc.pam.UnsupportedTokenException();
    org.jsecurity.authc.UnknownAccountException var4 = new org.jsecurity.authc.UnknownAccountException((java.lang.Throwable)var3);
    org.jsecurity.authc.AccountException var5 = new org.jsecurity.authc.AccountException((java.lang.Throwable)var4);
    var1.setSessionId((java.io.Serializable)var5);

  }

  public void test326() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest2.test326");


    org.jsecurity.crypto.hash.Sha512Hash var1 = new org.jsecurity.crypto.hash.Sha512Hash((java.lang.Object)"c100a0dc-e80a-4d5c-baea-453d05633754");

  }

  public void test327() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest2.test327");


    org.jsecurity.mgt.DefaultSecurityManager var0 = new org.jsecurity.mgt.DefaultSecurityManager();
    java.io.InputStream var2 = org.jsecurity.util.ClassUtils.getResourceAsStream("");
    java.lang.Object[] var3 = new java.lang.Object[] { var2};
    java.util.List var4 = org.jsecurity.util.CollectionUtils.asList(var3);
    org.jsecurity.authc.pam.ModularRealmAuthenticator var5 = new org.jsecurity.authc.pam.ModularRealmAuthenticator(var4);
    org.jsecurity.authc.pam.AllSuccessfulModularAuthenticationStrategy var6 = new org.jsecurity.authc.pam.AllSuccessfulModularAuthenticationStrategy();
    var5.setModularAuthenticationStrategy((org.jsecurity.authc.pam.ModularAuthenticationStrategy)var6);
    org.jsecurity.authz.SimpleAuthorizationInfo var8 = new org.jsecurity.authz.SimpleAuthorizationInfo();
    var8.addStringPermission("hi!");
    java.io.InputStream var12 = org.jsecurity.util.ClassUtils.getResourceAsStream("");
    java.lang.Object[] var13 = new java.lang.Object[] { var12};
    java.util.List var14 = org.jsecurity.util.CollectionUtils.asList(var13);
    var8.addRoles((java.util.Collection)var14);
    var5.setAuthenticationListeners((java.util.Collection)var14);
    var0.setSessionListeners((java.util.Collection)var14);
    org.jsecurity.authc.pam.ModularRealmAuthenticator var18 = new org.jsecurity.authc.pam.ModularRealmAuthenticator();
    org.jsecurity.authz.permission.InvalidPermissionStringException var21 = new org.jsecurity.authz.permission.InvalidPermissionStringException("", "dd\uFFFD");
    org.jsecurity.JSecurityException var23 = new org.jsecurity.JSecurityException("");
    org.jsecurity.authc.SimpleAuthenticationInfo var25 = new org.jsecurity.authc.SimpleAuthenticationInfo((java.lang.Object)var21, (java.lang.Object)"", "org.jsecurity.authz.UnauthorizedException: org.jsecurity.session.ExpiredSessionException: ");
    org.jsecurity.subject.PrincipalCollection var26 = var25.getPrincipals();
    var18.onLogout(var26);
    var0.setAuthenticator((org.jsecurity.authc.Authenticator)var18);
    org.jsecurity.codec.CodecException var31 = new org.jsecurity.codec.CodecException("dd\uFFFD");
    org.jsecurity.authc.ConcurrentAccessException var32 = new org.jsecurity.authc.ConcurrentAccessException("org.jsecurity.authz.UnauthorizedException: org.jsecurity.session.ExpiredSessionException: ", (java.lang.Throwable)var31);
    org.jsecurity.subject.SimplePrincipalCollection var34 = new org.jsecurity.subject.SimplePrincipalCollection((java.lang.Object)var31, "");
    org.jsecurity.authc.pam.FirstSuccessfulAuthenticationStrategy var35 = new org.jsecurity.authc.pam.FirstSuccessfulAuthenticationStrategy();
    org.jsecurity.authz.UnauthorizedException var37 = new org.jsecurity.authz.UnauthorizedException("org.jsecurity.config.ConfigurationException: dd\uFFFD");
    java.lang.Throwable[] var38 = var37.getSuppressed();
    java.util.List var39 = org.jsecurity.util.CollectionUtils.asList((java.lang.Object[])var38);
    org.jsecurity.authc.UsernamePasswordToken var40 = new org.jsecurity.authc.UsernamePasswordToken();
    java.lang.String var41 = var40.getUsername();
    java.net.InetAddress var42 = var40.getInetAddress();
    org.jsecurity.authc.AuthenticationInfo var43 = var35.beforeAllAttempts((java.util.Collection)var39, (org.jsecurity.authc.AuthenticationToken)var40);
    org.jsecurity.session.UnknownSessionException var48 = new org.jsecurity.session.UnknownSessionException("dd\uFFFD", (java.io.Serializable)100.0f);
    org.jsecurity.subject.SubjectException var49 = new org.jsecurity.subject.SubjectException("dd\uFFFD", (java.lang.Throwable)var48);
    org.jsecurity.io.SerializationException var50 = new org.jsecurity.io.SerializationException("", (java.lang.Throwable)var49);
    java.lang.Throwable[] var51 = var49.getSuppressed();
    java.util.Set var52 = org.jsecurity.util.CollectionUtils.asSet((java.lang.Object[])var51);
    org.jsecurity.authc.SimpleAccount var53 = new org.jsecurity.authc.SimpleAccount((org.jsecurity.subject.PrincipalCollection)var34, (java.lang.Object)var39, var52);
    java.io.InputStream var55 = org.jsecurity.util.ClassUtils.getResourceAsStream("");
    java.lang.Object[] var56 = new java.lang.Object[] { var55};
    java.util.List var57 = org.jsecurity.util.CollectionUtils.asList(var56);
    org.jsecurity.authc.pam.ModularRealmAuthenticator var58 = new org.jsecurity.authc.pam.ModularRealmAuthenticator(var57);
    org.jsecurity.subject.SimplePrincipalCollection var60 = new org.jsecurity.subject.SimplePrincipalCollection((java.util.Collection)var57, "org.jsecurity.authz.UnauthorizedException: org.jsecurity.session.ExpiredSessionException: ");
    org.jsecurity.io.ResourceException var64 = new org.jsecurity.io.ResourceException("hi!");
    org.jsecurity.authc.UnknownAccountException var65 = new org.jsecurity.authc.UnknownAccountException((java.lang.Throwable)var64);
    org.jsecurity.session.StoppedSessionException var66 = new org.jsecurity.session.StoppedSessionException("dd\uFFFD", (java.io.Serializable)var64);
    org.jsecurity.session.UnknownSessionException var67 = new org.jsecurity.session.UnknownSessionException("org.jsecurity.authz.UnauthorizedException: org.jsecurity.session.ExpiredSessionException: ", (java.lang.Throwable)var64);
    boolean var68 = var60.equals((java.lang.Object)var64);
    var34.addAll((org.jsecurity.subject.PrincipalCollection)var60);
    org.jsecurity.session.UnknownSessionException var74 = new org.jsecurity.session.UnknownSessionException("dd\uFFFD", (java.io.Serializable)100.0f);
    org.jsecurity.subject.SubjectException var75 = new org.jsecurity.subject.SubjectException("dd\uFFFD", (java.lang.Throwable)var74);
    org.jsecurity.io.SerializationException var76 = new org.jsecurity.io.SerializationException("", (java.lang.Throwable)var75);
    java.lang.Throwable[] var77 = var75.getSuppressed();
    java.util.List var78 = org.jsecurity.util.CollectionUtils.asList((java.lang.Object[])var77);
    boolean var79 = var0.isPermittedAll((org.jsecurity.subject.PrincipalCollection)var34, (java.util.Collection)var78);
    org.jsecurity.subject.DelegatingSubject var80 = new org.jsecurity.subject.DelegatingSubject((org.jsecurity.mgt.SecurityManager)var0);
    org.jsecurity.authc.Authenticator var81 = var0.getAuthenticator();
    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      var0.setRememberMeDecryptionCipherKeyHex("5e8a13e5-9407-4da8-a0bf-f6368dff7e1a");
      fail("Expected exception of type java.lang.IllegalStateException");
    } catch (java.lang.IllegalStateException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var2);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var3);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var4);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var12);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var13);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var14);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var26);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var38);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var39);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var41);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var42);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var43);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var51);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var52);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var55);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var56);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var57);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var68 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var77);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var78);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var79 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var81);

  }

  public void test328() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest2.test328");


    org.jsecurity.authz.SimpleAuthorizationInfo var0 = new org.jsecurity.authz.SimpleAuthorizationInfo();
    var0.addStringPermission("hi!");
    java.io.InputStream var4 = org.jsecurity.util.ClassUtils.getResourceAsStream("");
    java.lang.Object[] var5 = new java.lang.Object[] { var4};
    java.util.List var6 = org.jsecurity.util.CollectionUtils.asList(var5);
    var0.addRoles((java.util.Collection)var6);
    java.util.Set var8 = var0.getObjectPermissions();
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var4);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var5);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var6);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var8);

  }

  public void test329() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest2.test329");


    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      org.jsecurity.config.IniConfiguration var1 = new org.jsecurity.config.IniConfiguration("a2b823b1e72eae2b727289df8a00a89df8a0bab6ad8a89c4c5c7a9b62a270000");
      fail("Expected exception of type org.jsecurity.config.ConfigurationException");
    } catch (org.jsecurity.config.ConfigurationException e) {
      // Expected exception.
    }

  }

  public void test330() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest2.test330");


    org.jsecurity.authz.ModularRealmAuthorizer var0 = new org.jsecurity.authz.ModularRealmAuthorizer();
    org.jsecurity.realm.text.PropertiesRealm var1 = new org.jsecurity.realm.text.PropertiesRealm();
    java.lang.String var2 = var1.getUserDefinitions();
    org.jsecurity.codec.CodecException var5 = new org.jsecurity.codec.CodecException("dd\uFFFD");
    org.jsecurity.authc.ConcurrentAccessException var6 = new org.jsecurity.authc.ConcurrentAccessException("org.jsecurity.authz.UnauthorizedException: org.jsecurity.session.ExpiredSessionException: ", (java.lang.Throwable)var5);
    org.jsecurity.subject.SimplePrincipalCollection var8 = new org.jsecurity.subject.SimplePrincipalCollection((java.lang.Object)var5, "");
    java.io.InputStream var10 = org.jsecurity.util.ClassUtils.getResourceAsStream("");
    java.lang.Object[] var11 = new java.lang.Object[] { var10};
    java.util.List var12 = org.jsecurity.util.CollectionUtils.asList(var11);
    org.jsecurity.authc.pam.ModularRealmAuthenticator var13 = new org.jsecurity.authc.pam.ModularRealmAuthenticator(var12);
    var8.addAll((java.util.Collection)var12, "\u0000\u0000");
    java.io.InputStream var17 = org.jsecurity.util.ClassUtils.getResourceAsStream("");
    java.lang.Object[] var18 = new java.lang.Object[] { var17};
    java.util.List var19 = org.jsecurity.util.CollectionUtils.asList(var18);
    org.jsecurity.authc.pam.ModularRealmAuthenticator var20 = new org.jsecurity.authc.pam.ModularRealmAuthenticator(var19);
    var8.addAll((java.util.Collection)var19, "\u0000\u0000");
    var1.onLogout((org.jsecurity.subject.PrincipalCollection)var8);
    java.util.Set var24 = var8.getRealmNames();
    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      var0.checkRole((org.jsecurity.subject.PrincipalCollection)var8, "2d374600-c283-4ac5-a0ef-0886aa4852ec");
      fail("Expected exception of type java.lang.IllegalStateException");
    } catch (java.lang.IllegalStateException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var2);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var10);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var11);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var12);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var17);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var18);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var19);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var24);

  }

  public void test331() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest2.test331");


    org.jsecurity.session.mgt.eis.MemorySessionDAO var0 = new org.jsecurity.session.mgt.eis.MemorySessionDAO();
    org.jsecurity.cache.Cache var1 = var0.getActiveSessionsCache();
    org.jsecurity.cache.CacheManager var2 = var0.getCacheManager();
    org.jsecurity.cache.HashtableCacheManager var3 = new org.jsecurity.cache.HashtableCacheManager();
    org.jsecurity.cache.Cache var5 = var3.getCache("\u0000\u0000");
    var0.setActiveSessionsCache(var5);
    java.io.InputStream var8 = org.jsecurity.util.ClassUtils.getResourceAsStream("");
    java.lang.Object[] var9 = new java.lang.Object[] { var8};
    java.util.List var10 = org.jsecurity.util.CollectionUtils.asList(var9);
    org.jsecurity.authc.pam.ModularRealmAuthenticator var11 = new org.jsecurity.authc.pam.ModularRealmAuthenticator(var10);
    org.jsecurity.authc.pam.AllSuccessfulModularAuthenticationStrategy var12 = new org.jsecurity.authc.pam.AllSuccessfulModularAuthenticationStrategy();
    var11.setModularAuthenticationStrategy((org.jsecurity.authc.pam.ModularAuthenticationStrategy)var12);
    org.jsecurity.authz.SimpleAuthorizationInfo var14 = new org.jsecurity.authz.SimpleAuthorizationInfo();
    var14.addStringPermission("hi!");
    java.io.InputStream var18 = org.jsecurity.util.ClassUtils.getResourceAsStream("");
    java.lang.Object[] var19 = new java.lang.Object[] { var18};
    java.util.List var20 = org.jsecurity.util.CollectionUtils.asList(var19);
    var14.addRoles((java.util.Collection)var20);
    var11.setAuthenticationListeners((java.util.Collection)var20);
    org.jsecurity.realm.activedirectory.ActiveDirectoryRealm var23 = new org.jsecurity.realm.activedirectory.ActiveDirectoryRealm();
    var23.setPrincipalSuffix("");
    var11.setRealm((org.jsecurity.realm.Realm)var23);
    org.jsecurity.cache.HashtableCacheManager var27 = new org.jsecurity.cache.HashtableCacheManager();
    org.jsecurity.cache.Cache var29 = var27.getCache("\u0000\u0000");
    var23.setAuthorizationCache(var29);
    var0.setActiveSessionsCache(var29);
    org.jsecurity.session.mgt.SimpleSession var32 = new org.jsecurity.session.mgt.SimpleSession();
    java.io.Serializable var33 = var0.create((org.jsecurity.session.Session)var32);
    org.jsecurity.session.mgt.SimpleSession var34 = new org.jsecurity.session.mgt.SimpleSession();
    var34.touch();
    var34.validate();
    org.jsecurity.session.mgt.SimpleSession var37 = new org.jsecurity.session.mgt.SimpleSession();
    var37.setTimeout((-1L));
    org.jsecurity.session.mgt.SimpleSession var40 = new org.jsecurity.session.mgt.SimpleSession();
    java.util.Date var41 = var40.getLastAccessTime();
    var37.setLastAccessTime(var41);
    org.jsecurity.session.mgt.SimpleSession var43 = new org.jsecurity.session.mgt.SimpleSession();
    java.util.Date var44 = var43.getLastAccessTime();
    var37.setStopTimestamp(var44);
    var34.setLastAccessTime(var44);
    var32.setLastAccessTime(var44);
    org.jsecurity.session.mgt.ImmutableProxiedSession var48 = new org.jsecurity.session.mgt.ImmutableProxiedSession((org.jsecurity.session.Session)var32);
    org.jsecurity.session.ProxiedSession var49 = new org.jsecurity.session.ProxiedSession((org.jsecurity.session.Session)var32);
    org.jsecurity.realm.jdbc.JdbcRealm var50 = new org.jsecurity.realm.jdbc.JdbcRealm();
    var50.setPermissionsQuery("org.jsecurity.realm.text.TextConfigurationRealm_445");
    var50.setUserRolesQuery("6464ff");
    org.jsecurity.crypto.BlowfishCipher var55 = new org.jsecurity.crypto.BlowfishCipher();
    java.security.Key var56 = org.jsecurity.crypto.BlowfishCipher.generateNewKey();
    var55.setKey(var56);
    java.security.Key var58 = org.jsecurity.crypto.BlowfishCipher.generateNewKey();
    var55.setKey(var58);
    byte[] var63 = new byte[] { (byte)100, (byte)100, (byte)(-1)};
    java.lang.String var64 = org.jsecurity.codec.CodecSupport.toString(var63);
    char[] var65 = org.jsecurity.codec.CodecSupport.toChars(var63);
    boolean var66 = org.jsecurity.codec.Base64.isBase64(var63);
    boolean var67 = org.jsecurity.codec.Base64.isBase64(var63);
    boolean var68 = org.jsecurity.codec.Base64.isBase64(var63);
    java.lang.String var69 = org.jsecurity.codec.Hex.encodeToString(var63);
    byte[] var73 = new byte[] { (byte)100, (byte)100, (byte)(-1)};
    java.lang.String var74 = org.jsecurity.codec.CodecSupport.toString(var73);
    char[] var75 = org.jsecurity.codec.CodecSupport.toChars(var73);
    boolean var76 = org.jsecurity.codec.Base64.isBase64(var73);
    boolean var77 = org.jsecurity.codec.Base64.isBase64(var73);
    boolean var78 = org.jsecurity.codec.Base64.isBase64(var73);
    java.lang.String var79 = org.jsecurity.codec.Base64.encodeToString(var73);
    byte[] var80 = var55.encrypt(var63, var73);
    var49.setAttribute((java.lang.Object)"6464ff", (java.lang.Object)var73);
    var49.touch();
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var1);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var2);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var5);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var8);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var9);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var10);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var18);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var19);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var20);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var29);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var33 + "' != '" + "be750ca9-d7fd-4bd0-a0ae-e908c938eb8d"+ "'", var33.equals("be750ca9-d7fd-4bd0-a0ae-e908c938eb8d"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var41);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var44);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var56);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var58);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var63);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var64 + "' != '" + "dd\uFFFD"+ "'", var64.equals("dd\uFFFD"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var65);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var66 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var67 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var68 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var69 + "' != '" + "6464ff"+ "'", var69.equals("6464ff"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var73);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var74 + "' != '" + "dd\uFFFD"+ "'", var74.equals("dd\uFFFD"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var75);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var76 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var77 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var78 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var79 + "' != '" + "ZGT/"+ "'", var79.equals("ZGT/"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var80);

  }

  public void test332() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest2.test332");


    org.jsecurity.session.InvalidSessionException var1 = new org.jsecurity.session.InvalidSessionException("hi!");
    org.jsecurity.util.UnavailableConstructorException var2 = new org.jsecurity.util.UnavailableConstructorException((java.lang.Throwable)var1);

  }

  public void test333() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest2.test333");


    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      java.lang.String[] var1 = org.jsecurity.util.StringUtils.splitKeyValue("d3fa87cd-8796-41a3-ba2f-3a76bbfaab05");
      fail("Expected exception of type java.text.ParseException");
    } catch (java.text.ParseException e) {
      // Expected exception.
    }

  }

  public void test334() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest2.test334");


    org.jsecurity.mgt.DefaultSecurityManager var0 = new org.jsecurity.mgt.DefaultSecurityManager();
    java.io.InputStream var2 = org.jsecurity.util.ClassUtils.getResourceAsStream("");
    java.lang.Object[] var3 = new java.lang.Object[] { var2};
    java.util.List var4 = org.jsecurity.util.CollectionUtils.asList(var3);
    org.jsecurity.authc.pam.ModularRealmAuthenticator var5 = new org.jsecurity.authc.pam.ModularRealmAuthenticator(var4);
    org.jsecurity.authc.pam.AllSuccessfulModularAuthenticationStrategy var6 = new org.jsecurity.authc.pam.AllSuccessfulModularAuthenticationStrategy();
    var5.setModularAuthenticationStrategy((org.jsecurity.authc.pam.ModularAuthenticationStrategy)var6);
    org.jsecurity.authz.SimpleAuthorizationInfo var8 = new org.jsecurity.authz.SimpleAuthorizationInfo();
    var8.addStringPermission("hi!");
    java.io.InputStream var12 = org.jsecurity.util.ClassUtils.getResourceAsStream("");
    java.lang.Object[] var13 = new java.lang.Object[] { var12};
    java.util.List var14 = org.jsecurity.util.CollectionUtils.asList(var13);
    var8.addRoles((java.util.Collection)var14);
    var5.setAuthenticationListeners((java.util.Collection)var14);
    var0.setSessionListeners((java.util.Collection)var14);
    org.jsecurity.authc.pam.ModularRealmAuthenticator var18 = new org.jsecurity.authc.pam.ModularRealmAuthenticator();
    org.jsecurity.authz.permission.InvalidPermissionStringException var21 = new org.jsecurity.authz.permission.InvalidPermissionStringException("", "dd\uFFFD");
    org.jsecurity.JSecurityException var23 = new org.jsecurity.JSecurityException("");
    org.jsecurity.authc.SimpleAuthenticationInfo var25 = new org.jsecurity.authc.SimpleAuthenticationInfo((java.lang.Object)var21, (java.lang.Object)"", "org.jsecurity.authz.UnauthorizedException: org.jsecurity.session.ExpiredSessionException: ");
    org.jsecurity.subject.PrincipalCollection var26 = var25.getPrincipals();
    var18.onLogout(var26);
    var0.setAuthenticator((org.jsecurity.authc.Authenticator)var18);
    org.jsecurity.codec.CodecException var31 = new org.jsecurity.codec.CodecException("dd\uFFFD");
    org.jsecurity.authc.ConcurrentAccessException var32 = new org.jsecurity.authc.ConcurrentAccessException("org.jsecurity.authz.UnauthorizedException: org.jsecurity.session.ExpiredSessionException: ", (java.lang.Throwable)var31);
    org.jsecurity.subject.SimplePrincipalCollection var34 = new org.jsecurity.subject.SimplePrincipalCollection((java.lang.Object)var31, "");
    org.jsecurity.authc.pam.FirstSuccessfulAuthenticationStrategy var35 = new org.jsecurity.authc.pam.FirstSuccessfulAuthenticationStrategy();
    org.jsecurity.authz.UnauthorizedException var37 = new org.jsecurity.authz.UnauthorizedException("org.jsecurity.config.ConfigurationException: dd\uFFFD");
    java.lang.Throwable[] var38 = var37.getSuppressed();
    java.util.List var39 = org.jsecurity.util.CollectionUtils.asList((java.lang.Object[])var38);
    org.jsecurity.authc.UsernamePasswordToken var40 = new org.jsecurity.authc.UsernamePasswordToken();
    java.lang.String var41 = var40.getUsername();
    java.net.InetAddress var42 = var40.getInetAddress();
    org.jsecurity.authc.AuthenticationInfo var43 = var35.beforeAllAttempts((java.util.Collection)var39, (org.jsecurity.authc.AuthenticationToken)var40);
    org.jsecurity.session.UnknownSessionException var48 = new org.jsecurity.session.UnknownSessionException("dd\uFFFD", (java.io.Serializable)100.0f);
    org.jsecurity.subject.SubjectException var49 = new org.jsecurity.subject.SubjectException("dd\uFFFD", (java.lang.Throwable)var48);
    org.jsecurity.io.SerializationException var50 = new org.jsecurity.io.SerializationException("", (java.lang.Throwable)var49);
    java.lang.Throwable[] var51 = var49.getSuppressed();
    java.util.Set var52 = org.jsecurity.util.CollectionUtils.asSet((java.lang.Object[])var51);
    org.jsecurity.authc.SimpleAccount var53 = new org.jsecurity.authc.SimpleAccount((org.jsecurity.subject.PrincipalCollection)var34, (java.lang.Object)var39, var52);
    java.io.InputStream var55 = org.jsecurity.util.ClassUtils.getResourceAsStream("");
    java.lang.Object[] var56 = new java.lang.Object[] { var55};
    java.util.List var57 = org.jsecurity.util.CollectionUtils.asList(var56);
    org.jsecurity.authc.pam.ModularRealmAuthenticator var58 = new org.jsecurity.authc.pam.ModularRealmAuthenticator(var57);
    org.jsecurity.subject.SimplePrincipalCollection var60 = new org.jsecurity.subject.SimplePrincipalCollection((java.util.Collection)var57, "org.jsecurity.authz.UnauthorizedException: org.jsecurity.session.ExpiredSessionException: ");
    org.jsecurity.io.ResourceException var64 = new org.jsecurity.io.ResourceException("hi!");
    org.jsecurity.authc.UnknownAccountException var65 = new org.jsecurity.authc.UnknownAccountException((java.lang.Throwable)var64);
    org.jsecurity.session.StoppedSessionException var66 = new org.jsecurity.session.StoppedSessionException("dd\uFFFD", (java.io.Serializable)var64);
    org.jsecurity.session.UnknownSessionException var67 = new org.jsecurity.session.UnknownSessionException("org.jsecurity.authz.UnauthorizedException: org.jsecurity.session.ExpiredSessionException: ", (java.lang.Throwable)var64);
    boolean var68 = var60.equals((java.lang.Object)var64);
    var34.addAll((org.jsecurity.subject.PrincipalCollection)var60);
    org.jsecurity.session.UnknownSessionException var74 = new org.jsecurity.session.UnknownSessionException("dd\uFFFD", (java.io.Serializable)100.0f);
    org.jsecurity.subject.SubjectException var75 = new org.jsecurity.subject.SubjectException("dd\uFFFD", (java.lang.Throwable)var74);
    org.jsecurity.io.SerializationException var76 = new org.jsecurity.io.SerializationException("", (java.lang.Throwable)var75);
    java.lang.Throwable[] var77 = var75.getSuppressed();
    java.util.List var78 = org.jsecurity.util.CollectionUtils.asList((java.lang.Object[])var77);
    boolean var79 = var0.isPermittedAll((org.jsecurity.subject.PrincipalCollection)var34, (java.util.Collection)var78);
    org.jsecurity.realm.text.PropertiesRealm var80 = new org.jsecurity.realm.text.PropertiesRealm();
    var0.setRealm((org.jsecurity.realm.Realm)var80);
    boolean var83 = var80.accountExists("e2100c27-e41d-4c80-964c-90268ef4a856");
    boolean var85 = var80.accountExists("3d3a8192-1e92-477d-8aa6-fc837cbc6148");
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var2);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var3);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var4);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var12);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var13);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var14);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var26);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var38);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var39);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var41);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var42);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var43);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var51);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var52);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var55);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var56);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var57);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var68 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var77);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var78);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var79 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var83 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var85 == false);

  }

  public void test335() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest2.test335");


    org.jsecurity.codec.CodecException var2 = new org.jsecurity.codec.CodecException("dd\uFFFD");
    org.jsecurity.authc.ConcurrentAccessException var3 = new org.jsecurity.authc.ConcurrentAccessException("org.jsecurity.authz.UnauthorizedException: org.jsecurity.session.ExpiredSessionException: ", (java.lang.Throwable)var2);
    org.jsecurity.subject.SimplePrincipalCollection var5 = new org.jsecurity.subject.SimplePrincipalCollection((java.lang.Object)var2, "");
    java.io.InputStream var7 = org.jsecurity.util.ClassUtils.getResourceAsStream("");
    java.lang.Object[] var8 = new java.lang.Object[] { var7};
    java.util.List var9 = org.jsecurity.util.CollectionUtils.asList(var8);
    org.jsecurity.authc.pam.ModularRealmAuthenticator var10 = new org.jsecurity.authc.pam.ModularRealmAuthenticator(var9);
    org.jsecurity.authc.pam.AllSuccessfulModularAuthenticationStrategy var11 = new org.jsecurity.authc.pam.AllSuccessfulModularAuthenticationStrategy();
    var10.setModularAuthenticationStrategy((org.jsecurity.authc.pam.ModularAuthenticationStrategy)var11);
    org.jsecurity.authz.SimpleAuthorizationInfo var13 = new org.jsecurity.authz.SimpleAuthorizationInfo();
    var13.addStringPermission("hi!");
    java.io.InputStream var17 = org.jsecurity.util.ClassUtils.getResourceAsStream("");
    java.lang.Object[] var18 = new java.lang.Object[] { var17};
    java.util.List var19 = org.jsecurity.util.CollectionUtils.asList(var18);
    var13.addRoles((java.util.Collection)var19);
    var10.setAuthenticationListeners((java.util.Collection)var19);
    org.jsecurity.realm.activedirectory.ActiveDirectoryRealm var22 = new org.jsecurity.realm.activedirectory.ActiveDirectoryRealm();
    var22.setPrincipalSuffix("");
    var10.setRealm((org.jsecurity.realm.Realm)var22);
    org.jsecurity.authc.pam.FirstSuccessfulAuthenticationStrategy var26 = new org.jsecurity.authc.pam.FirstSuccessfulAuthenticationStrategy();
    org.jsecurity.authz.UnauthorizedException var28 = new org.jsecurity.authz.UnauthorizedException("org.jsecurity.config.ConfigurationException: dd\uFFFD");
    java.lang.Throwable[] var29 = var28.getSuppressed();
    java.util.List var30 = org.jsecurity.util.CollectionUtils.asList((java.lang.Object[])var29);
    org.jsecurity.authc.UsernamePasswordToken var31 = new org.jsecurity.authc.UsernamePasswordToken();
    java.lang.String var32 = var31.getUsername();
    java.net.InetAddress var33 = var31.getInetAddress();
    org.jsecurity.authc.AuthenticationInfo var34 = var26.beforeAllAttempts((java.util.Collection)var30, (org.jsecurity.authc.AuthenticationToken)var31);
    var10.setModularAuthenticationStrategy((org.jsecurity.authc.pam.ModularAuthenticationStrategy)var26);
    org.jsecurity.authc.SimpleAccount var36 = new org.jsecurity.authc.SimpleAccount((org.jsecurity.subject.PrincipalCollection)var5, (java.lang.Object)var10);
    org.jsecurity.session.UnknownSessionException var42 = new org.jsecurity.session.UnknownSessionException("dd\uFFFD", (java.io.Serializable)100.0f);
    org.jsecurity.subject.SubjectException var43 = new org.jsecurity.subject.SubjectException("dd\uFFFD", (java.lang.Throwable)var42);
    org.jsecurity.authc.pam.UnsupportedTokenException var44 = new org.jsecurity.authc.pam.UnsupportedTokenException("dd\uFFFD", (java.lang.Throwable)var42);
    org.jsecurity.session.StoppedSessionException var45 = new org.jsecurity.session.StoppedSessionException("org.jsecurity.config.ConfigurationException: dd\uFFFD", (java.lang.Throwable)var44);
    org.jsecurity.JSecurityException var46 = new org.jsecurity.JSecurityException((java.lang.Throwable)var45);
    boolean var47 = var36.equals((java.lang.Object)var45);
    var36.setCredentialsExpired(true);
    org.jsecurity.authc.AuthenticationException var51 = new org.jsecurity.authc.AuthenticationException("org.jsecurity.realm.text.PropertiesRealm-209-authorization");
    org.jsecurity.authc.SimpleAccount var53 = new org.jsecurity.authc.SimpleAccount((java.lang.Object)true, (java.lang.Object)"org.jsecurity.realm.text.PropertiesRealm-209-authorization", "e716326a-0211-4284-b9e0-793cdfa5d7a1");
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var7);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var8);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var9);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var17);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var18);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var19);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var29);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var30);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var32);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var33);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var34);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var47 == false);

  }

  public void test336() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest2.test336");


    org.jsecurity.authz.SimpleAuthorizationInfo var0 = new org.jsecurity.authz.SimpleAuthorizationInfo();
    java.util.Set var1 = var0.getStringPermissions();
    java.util.Set var2 = var0.getRoles();
    var0.addStringPermission("hi!");
    java.util.Set var5 = var0.getStringPermissions();
    var0.addRole("5e8ae759-0aee-439c-94b7-0d29d950b35b");
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var1);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var2);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var5);

  }

  public void test337() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest2.test337");


    org.jsecurity.codec.CodecException var2 = new org.jsecurity.codec.CodecException("dd\uFFFD");
    org.jsecurity.authc.ConcurrentAccessException var3 = new org.jsecurity.authc.ConcurrentAccessException("org.jsecurity.authz.UnauthorizedException: org.jsecurity.session.ExpiredSessionException: ", (java.lang.Throwable)var2);
    org.jsecurity.subject.SimplePrincipalCollection var5 = new org.jsecurity.subject.SimplePrincipalCollection((java.lang.Object)var2, "");
    java.io.InputStream var7 = org.jsecurity.util.ClassUtils.getResourceAsStream("");
    java.lang.Object[] var8 = new java.lang.Object[] { var7};
    java.util.List var9 = org.jsecurity.util.CollectionUtils.asList(var8);
    org.jsecurity.authc.pam.ModularRealmAuthenticator var10 = new org.jsecurity.authc.pam.ModularRealmAuthenticator(var9);
    var5.addAll((java.util.Collection)var9, "\u0000\u0000");
    org.jsecurity.authz.UnauthorizedException var14 = new org.jsecurity.authz.UnauthorizedException();
    org.jsecurity.session.SessionException var16 = new org.jsecurity.session.SessionException("", (java.lang.Throwable)var14, (java.io.Serializable)"org.jsecurity.config.ConfigurationException: dd\uFFFD");
    org.jsecurity.crypto.hash.Sha1Hash var17 = new org.jsecurity.crypto.hash.Sha1Hash((java.lang.Object)"");
    org.jsecurity.session.UnknownSessionException var22 = new org.jsecurity.session.UnknownSessionException("dd\uFFFD", (java.io.Serializable)100.0f);
    org.jsecurity.subject.SubjectException var23 = new org.jsecurity.subject.SubjectException("dd\uFFFD", (java.lang.Throwable)var22);
    org.jsecurity.io.SerializationException var24 = new org.jsecurity.io.SerializationException("", (java.lang.Throwable)var23);
    java.lang.Throwable[] var25 = var23.getSuppressed();
    java.util.Set var26 = org.jsecurity.util.CollectionUtils.asSet((java.lang.Object[])var25);
    org.jsecurity.authz.SimpleAuthorizationInfo var28 = new org.jsecurity.authz.SimpleAuthorizationInfo();
    org.jsecurity.session.UnknownSessionException var33 = new org.jsecurity.session.UnknownSessionException("dd\uFFFD", (java.io.Serializable)100.0f);
    org.jsecurity.subject.SubjectException var34 = new org.jsecurity.subject.SubjectException("dd\uFFFD", (java.lang.Throwable)var33);
    org.jsecurity.io.SerializationException var35 = new org.jsecurity.io.SerializationException("", (java.lang.Throwable)var34);
    java.lang.Throwable[] var36 = var34.getSuppressed();
    java.util.Set var37 = org.jsecurity.util.CollectionUtils.asSet((java.lang.Object[])var36);
    var28.setStringPermissions(var37);
    java.util.Set var39 = var28.getRoles();
    org.jsecurity.authz.SimpleAuthorizationInfo var40 = new org.jsecurity.authz.SimpleAuthorizationInfo();
    var40.addRole("a2b823b1e72eae2b727289df8a00a89df8a0bab6ad8a89c4c5c7a9b62a270000");
    org.jsecurity.session.UnknownSessionException var47 = new org.jsecurity.session.UnknownSessionException("dd\uFFFD", (java.io.Serializable)100.0f);
    org.jsecurity.subject.SubjectException var48 = new org.jsecurity.subject.SubjectException("dd\uFFFD", (java.lang.Throwable)var47);
    org.jsecurity.io.SerializationException var49 = new org.jsecurity.io.SerializationException("", (java.lang.Throwable)var48);
    java.lang.Throwable[] var50 = var48.getSuppressed();
    java.util.Set var51 = org.jsecurity.util.CollectionUtils.asSet((java.lang.Object[])var50);
    var40.addRoles((java.util.Collection)var51);
    var28.setRoles(var51);
    org.jsecurity.authz.SimpleRole var54 = new org.jsecurity.authz.SimpleRole("org.jsecurity.authz.UnauthorizedException: org.jsecurity.session.ExpiredSessionException: ", var51);
    org.jsecurity.authc.SimpleAccount var55 = new org.jsecurity.authc.SimpleAccount((org.jsecurity.subject.PrincipalCollection)var5, (java.lang.Object)"", var26, var51);
    org.jsecurity.realm.jndi.JndiRealmFactory var56 = new org.jsecurity.realm.jndi.JndiRealmFactory();
    java.io.InputStream var58 = org.jsecurity.util.ClassUtils.getResourceAsStream("");
    java.lang.Object[] var59 = new java.lang.Object[] { var58};
    java.util.List var60 = org.jsecurity.util.CollectionUtils.asList(var59);
    var56.setJndiNames((java.util.Collection)var60);
    org.jsecurity.authz.SimpleRole var62 = new org.jsecurity.authz.SimpleRole();
    org.jsecurity.authz.SimpleAuthorizationInfo var63 = new org.jsecurity.authz.SimpleAuthorizationInfo();
    var63.addRole("a2b823b1e72eae2b727289df8a00a89df8a0bab6ad8a89c4c5c7a9b62a270000");
    org.jsecurity.session.UnknownSessionException var70 = new org.jsecurity.session.UnknownSessionException("dd\uFFFD", (java.io.Serializable)100.0f);
    org.jsecurity.subject.SubjectException var71 = new org.jsecurity.subject.SubjectException("dd\uFFFD", (java.lang.Throwable)var70);
    org.jsecurity.io.SerializationException var72 = new org.jsecurity.io.SerializationException("", (java.lang.Throwable)var71);
    java.lang.Throwable[] var73 = var71.getSuppressed();
    java.util.Set var74 = org.jsecurity.util.CollectionUtils.asSet((java.lang.Object[])var73);
    var63.addRoles((java.util.Collection)var74);
    var62.addAll((java.util.Collection)var74);
    var56.setJndiNames((java.util.Collection)var74);
    var55.setObjectPermissions(var74);
    java.util.Collection var79 = var55.getStringPermissions();
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var7);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var8);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var9);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var25);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var26);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var36);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var37);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var39);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var50);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var51);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var58);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var59);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var60);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var73);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var74);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var79);

  }

  public void test338() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest2.test338");


    org.jsecurity.mgt.DefaultSecurityManager var0 = new org.jsecurity.mgt.DefaultSecurityManager();
    java.io.InputStream var2 = org.jsecurity.util.ClassUtils.getResourceAsStream("");
    java.lang.Object[] var3 = new java.lang.Object[] { var2};
    java.util.List var4 = org.jsecurity.util.CollectionUtils.asList(var3);
    org.jsecurity.authc.pam.ModularRealmAuthenticator var5 = new org.jsecurity.authc.pam.ModularRealmAuthenticator(var4);
    org.jsecurity.authc.pam.AllSuccessfulModularAuthenticationStrategy var6 = new org.jsecurity.authc.pam.AllSuccessfulModularAuthenticationStrategy();
    var5.setModularAuthenticationStrategy((org.jsecurity.authc.pam.ModularAuthenticationStrategy)var6);
    org.jsecurity.authz.SimpleAuthorizationInfo var8 = new org.jsecurity.authz.SimpleAuthorizationInfo();
    var8.addStringPermission("hi!");
    java.io.InputStream var12 = org.jsecurity.util.ClassUtils.getResourceAsStream("");
    java.lang.Object[] var13 = new java.lang.Object[] { var12};
    java.util.List var14 = org.jsecurity.util.CollectionUtils.asList(var13);
    var8.addRoles((java.util.Collection)var14);
    var5.setAuthenticationListeners((java.util.Collection)var14);
    var0.setSessionListeners((java.util.Collection)var14);
    org.jsecurity.authc.pam.ModularRealmAuthenticator var18 = new org.jsecurity.authc.pam.ModularRealmAuthenticator();
    org.jsecurity.authz.permission.InvalidPermissionStringException var21 = new org.jsecurity.authz.permission.InvalidPermissionStringException("", "dd\uFFFD");
    org.jsecurity.JSecurityException var23 = new org.jsecurity.JSecurityException("");
    org.jsecurity.authc.SimpleAuthenticationInfo var25 = new org.jsecurity.authc.SimpleAuthenticationInfo((java.lang.Object)var21, (java.lang.Object)"", "org.jsecurity.authz.UnauthorizedException: org.jsecurity.session.ExpiredSessionException: ");
    org.jsecurity.subject.PrincipalCollection var26 = var25.getPrincipals();
    var18.onLogout(var26);
    var0.setAuthenticator((org.jsecurity.authc.Authenticator)var18);
    org.jsecurity.codec.CodecException var31 = new org.jsecurity.codec.CodecException("dd\uFFFD");
    org.jsecurity.authc.ConcurrentAccessException var32 = new org.jsecurity.authc.ConcurrentAccessException("org.jsecurity.authz.UnauthorizedException: org.jsecurity.session.ExpiredSessionException: ", (java.lang.Throwable)var31);
    org.jsecurity.subject.SimplePrincipalCollection var34 = new org.jsecurity.subject.SimplePrincipalCollection((java.lang.Object)var31, "");
    org.jsecurity.authc.pam.FirstSuccessfulAuthenticationStrategy var35 = new org.jsecurity.authc.pam.FirstSuccessfulAuthenticationStrategy();
    org.jsecurity.authz.UnauthorizedException var37 = new org.jsecurity.authz.UnauthorizedException("org.jsecurity.config.ConfigurationException: dd\uFFFD");
    java.lang.Throwable[] var38 = var37.getSuppressed();
    java.util.List var39 = org.jsecurity.util.CollectionUtils.asList((java.lang.Object[])var38);
    org.jsecurity.authc.UsernamePasswordToken var40 = new org.jsecurity.authc.UsernamePasswordToken();
    java.lang.String var41 = var40.getUsername();
    java.net.InetAddress var42 = var40.getInetAddress();
    org.jsecurity.authc.AuthenticationInfo var43 = var35.beforeAllAttempts((java.util.Collection)var39, (org.jsecurity.authc.AuthenticationToken)var40);
    org.jsecurity.session.UnknownSessionException var48 = new org.jsecurity.session.UnknownSessionException("dd\uFFFD", (java.io.Serializable)100.0f);
    org.jsecurity.subject.SubjectException var49 = new org.jsecurity.subject.SubjectException("dd\uFFFD", (java.lang.Throwable)var48);
    org.jsecurity.io.SerializationException var50 = new org.jsecurity.io.SerializationException("", (java.lang.Throwable)var49);
    java.lang.Throwable[] var51 = var49.getSuppressed();
    java.util.Set var52 = org.jsecurity.util.CollectionUtils.asSet((java.lang.Object[])var51);
    org.jsecurity.authc.SimpleAccount var53 = new org.jsecurity.authc.SimpleAccount((org.jsecurity.subject.PrincipalCollection)var34, (java.lang.Object)var39, var52);
    java.io.InputStream var55 = org.jsecurity.util.ClassUtils.getResourceAsStream("");
    java.lang.Object[] var56 = new java.lang.Object[] { var55};
    java.util.List var57 = org.jsecurity.util.CollectionUtils.asList(var56);
    org.jsecurity.authc.pam.ModularRealmAuthenticator var58 = new org.jsecurity.authc.pam.ModularRealmAuthenticator(var57);
    org.jsecurity.subject.SimplePrincipalCollection var60 = new org.jsecurity.subject.SimplePrincipalCollection((java.util.Collection)var57, "org.jsecurity.authz.UnauthorizedException: org.jsecurity.session.ExpiredSessionException: ");
    org.jsecurity.io.ResourceException var64 = new org.jsecurity.io.ResourceException("hi!");
    org.jsecurity.authc.UnknownAccountException var65 = new org.jsecurity.authc.UnknownAccountException((java.lang.Throwable)var64);
    org.jsecurity.session.StoppedSessionException var66 = new org.jsecurity.session.StoppedSessionException("dd\uFFFD", (java.io.Serializable)var64);
    org.jsecurity.session.UnknownSessionException var67 = new org.jsecurity.session.UnknownSessionException("org.jsecurity.authz.UnauthorizedException: org.jsecurity.session.ExpiredSessionException: ", (java.lang.Throwable)var64);
    boolean var68 = var60.equals((java.lang.Object)var64);
    var34.addAll((org.jsecurity.subject.PrincipalCollection)var60);
    org.jsecurity.session.UnknownSessionException var74 = new org.jsecurity.session.UnknownSessionException("dd\uFFFD", (java.io.Serializable)100.0f);
    org.jsecurity.subject.SubjectException var75 = new org.jsecurity.subject.SubjectException("dd\uFFFD", (java.lang.Throwable)var74);
    org.jsecurity.io.SerializationException var76 = new org.jsecurity.io.SerializationException("", (java.lang.Throwable)var75);
    java.lang.Throwable[] var77 = var75.getSuppressed();
    java.util.List var78 = org.jsecurity.util.CollectionUtils.asList((java.lang.Object[])var77);
    boolean var79 = var0.isPermittedAll((org.jsecurity.subject.PrincipalCollection)var34, (java.util.Collection)var78);
    org.jsecurity.subject.DelegatingSubject var80 = new org.jsecurity.subject.DelegatingSubject((org.jsecurity.mgt.SecurityManager)var0);
    boolean var82 = var80.hasRole("org.jsecurity.authc.IncorrectCredentialsException: \u0000\u0000");
    java.net.InetAddress var83 = var80.getInetAddress();
    org.jsecurity.authz.SimpleRole var84 = new org.jsecurity.authz.SimpleRole();
    org.jsecurity.authz.permission.WildcardPermission var87 = new org.jsecurity.authz.permission.WildcardPermission("hi!", false);
    boolean var88 = var84.isPermitted((org.jsecurity.authz.Permission)var87);
    java.io.InputStream var90 = org.jsecurity.util.ClassUtils.getResourceAsStream("");
    java.lang.Object[] var91 = new java.lang.Object[] { var90};
    java.util.List var92 = org.jsecurity.util.CollectionUtils.asList(var91);
    var84.addAll((java.util.Collection)var92);
    boolean var94 = var80.hasAllRoles((java.util.Collection)var92);
    org.jsecurity.authz.permission.WildcardPermission var97 = new org.jsecurity.authz.permission.WildcardPermission("1a1fe717-b2f7-4a28-9cfa-6f3955b8b913", false);
    boolean var98 = var80.isPermitted((org.jsecurity.authz.Permission)var97);
    java.lang.Object var99 = var80.getPrincipal();
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var2);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var3);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var4);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var12);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var13);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var14);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var26);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var38);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var39);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var41);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var42);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var43);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var51);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var52);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var55);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var56);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var57);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var68 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var77);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var78);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var79 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var82 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var83);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var88 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var90);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var91);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var92);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var94 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var98 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var99);

  }

  public void test339() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest2.test339");


    org.jsecurity.realm.activedirectory.ActiveDirectoryRealm var0 = new org.jsecurity.realm.activedirectory.ActiveDirectoryRealm();
    var0.setPrincipalSuffix("");
    org.jsecurity.codec.CodecException var5 = new org.jsecurity.codec.CodecException("dd\uFFFD");
    org.jsecurity.authc.ConcurrentAccessException var6 = new org.jsecurity.authc.ConcurrentAccessException("org.jsecurity.authz.UnauthorizedException: org.jsecurity.session.ExpiredSessionException: ", (java.lang.Throwable)var5);
    org.jsecurity.subject.SimplePrincipalCollection var8 = new org.jsecurity.subject.SimplePrincipalCollection((java.lang.Object)var5, "");
    java.io.InputStream var10 = org.jsecurity.util.ClassUtils.getResourceAsStream("");
    java.lang.Object[] var11 = new java.lang.Object[] { var10};
    java.util.List var12 = org.jsecurity.util.CollectionUtils.asList(var11);
    org.jsecurity.authc.pam.ModularRealmAuthenticator var13 = new org.jsecurity.authc.pam.ModularRealmAuthenticator(var12);
    org.jsecurity.authc.pam.AllSuccessfulModularAuthenticationStrategy var14 = new org.jsecurity.authc.pam.AllSuccessfulModularAuthenticationStrategy();
    var13.setModularAuthenticationStrategy((org.jsecurity.authc.pam.ModularAuthenticationStrategy)var14);
    org.jsecurity.authz.SimpleAuthorizationInfo var16 = new org.jsecurity.authz.SimpleAuthorizationInfo();
    var16.addStringPermission("hi!");
    java.io.InputStream var20 = org.jsecurity.util.ClassUtils.getResourceAsStream("");
    java.lang.Object[] var21 = new java.lang.Object[] { var20};
    java.util.List var22 = org.jsecurity.util.CollectionUtils.asList(var21);
    var16.addRoles((java.util.Collection)var22);
    var13.setAuthenticationListeners((java.util.Collection)var22);
    org.jsecurity.realm.activedirectory.ActiveDirectoryRealm var25 = new org.jsecurity.realm.activedirectory.ActiveDirectoryRealm();
    var25.setPrincipalSuffix("");
    var13.setRealm((org.jsecurity.realm.Realm)var25);
    org.jsecurity.authc.pam.FirstSuccessfulAuthenticationStrategy var29 = new org.jsecurity.authc.pam.FirstSuccessfulAuthenticationStrategy();
    org.jsecurity.authz.UnauthorizedException var31 = new org.jsecurity.authz.UnauthorizedException("org.jsecurity.config.ConfigurationException: dd\uFFFD");
    java.lang.Throwable[] var32 = var31.getSuppressed();
    java.util.List var33 = org.jsecurity.util.CollectionUtils.asList((java.lang.Object[])var32);
    org.jsecurity.authc.UsernamePasswordToken var34 = new org.jsecurity.authc.UsernamePasswordToken();
    java.lang.String var35 = var34.getUsername();
    java.net.InetAddress var36 = var34.getInetAddress();
    org.jsecurity.authc.AuthenticationInfo var37 = var29.beforeAllAttempts((java.util.Collection)var33, (org.jsecurity.authc.AuthenticationToken)var34);
    var13.setModularAuthenticationStrategy((org.jsecurity.authc.pam.ModularAuthenticationStrategy)var29);
    org.jsecurity.authc.SimpleAccount var39 = new org.jsecurity.authc.SimpleAccount((org.jsecurity.subject.PrincipalCollection)var8, (java.lang.Object)var13);
    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      org.jsecurity.authz.AuthorizationInfo var40 = var0.getAuthorizationInfo((org.jsecurity.subject.PrincipalCollection)var8);
      fail("Expected exception of type java.util.NoSuchElementException");
    } catch (java.util.NoSuchElementException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var10);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var11);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var12);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var20);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var21);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var22);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var32);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var33);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var35);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var36);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var37);

  }

  public void test340() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest2.test340");


    org.jsecurity.realm.text.PropertiesRealm var0 = new org.jsecurity.realm.text.PropertiesRealm();
    var0.setReloadIntervalSeconds(10);
    java.lang.String var3 = var0.getUserDefinitions();
    var0.setReloadIntervalSeconds((-1));
    var0.destroy();
    org.jsecurity.mgt.DefaultSecurityManager var7 = new org.jsecurity.mgt.DefaultSecurityManager();
    java.io.InputStream var9 = org.jsecurity.util.ClassUtils.getResourceAsStream("");
    java.lang.Object[] var10 = new java.lang.Object[] { var9};
    java.util.List var11 = org.jsecurity.util.CollectionUtils.asList(var10);
    org.jsecurity.authc.pam.ModularRealmAuthenticator var12 = new org.jsecurity.authc.pam.ModularRealmAuthenticator(var11);
    org.jsecurity.authc.pam.AllSuccessfulModularAuthenticationStrategy var13 = new org.jsecurity.authc.pam.AllSuccessfulModularAuthenticationStrategy();
    var12.setModularAuthenticationStrategy((org.jsecurity.authc.pam.ModularAuthenticationStrategy)var13);
    org.jsecurity.authz.SimpleAuthorizationInfo var15 = new org.jsecurity.authz.SimpleAuthorizationInfo();
    var15.addStringPermission("hi!");
    java.io.InputStream var19 = org.jsecurity.util.ClassUtils.getResourceAsStream("");
    java.lang.Object[] var20 = new java.lang.Object[] { var19};
    java.util.List var21 = org.jsecurity.util.CollectionUtils.asList(var20);
    var15.addRoles((java.util.Collection)var21);
    var12.setAuthenticationListeners((java.util.Collection)var21);
    var7.setSessionListeners((java.util.Collection)var21);
    org.jsecurity.realm.text.TextConfigurationRealm var25 = new org.jsecurity.realm.text.TextConfigurationRealm();
    java.io.InputStream var27 = org.jsecurity.util.ClassUtils.getResourceAsStream("");
    java.lang.Object[] var28 = new java.lang.Object[] { var27};
    java.util.List var29 = org.jsecurity.util.CollectionUtils.asList(var28);
    org.jsecurity.authc.pam.ModularRealmAuthenticator var30 = new org.jsecurity.authc.pam.ModularRealmAuthenticator(var29);
    org.jsecurity.subject.SimplePrincipalCollection var32 = new org.jsecurity.subject.SimplePrincipalCollection((java.util.Collection)var29, "org.jsecurity.authz.UnauthorizedException: org.jsecurity.session.ExpiredSessionException: ");
    org.jsecurity.session.UnknownSessionException var37 = new org.jsecurity.session.UnknownSessionException("dd\uFFFD", (java.io.Serializable)100.0f);
    org.jsecurity.session.SessionException var39 = new org.jsecurity.session.SessionException("dd\uFFFD", (java.lang.Throwable)var37, (java.io.Serializable)0);
    org.jsecurity.session.SessionException var40 = new org.jsecurity.session.SessionException("dd\uFFFD", (java.lang.Throwable)var37);
    var32.add((java.lang.Object)var40, "org.jsecurity.config.ConfigurationException: dd\uFFFD");
    var25.onLogout((org.jsecurity.subject.PrincipalCollection)var32);
    org.jsecurity.authc.pam.FirstSuccessfulAuthenticationStrategy var44 = new org.jsecurity.authc.pam.FirstSuccessfulAuthenticationStrategy();
    org.jsecurity.authz.UnauthorizedException var46 = new org.jsecurity.authz.UnauthorizedException("org.jsecurity.config.ConfigurationException: dd\uFFFD");
    java.lang.Throwable[] var47 = var46.getSuppressed();
    java.util.List var48 = org.jsecurity.util.CollectionUtils.asList((java.lang.Object[])var47);
    org.jsecurity.authc.UsernamePasswordToken var49 = new org.jsecurity.authc.UsernamePasswordToken();
    java.lang.String var50 = var49.getUsername();
    java.net.InetAddress var51 = var49.getInetAddress();
    org.jsecurity.authc.AuthenticationInfo var52 = var44.beforeAllAttempts((java.util.Collection)var48, (org.jsecurity.authc.AuthenticationToken)var49);
    boolean[] var53 = var7.hasRoles((org.jsecurity.subject.PrincipalCollection)var32, var48);
    org.jsecurity.authz.aop.GuestAnnotationHandler var54 = new org.jsecurity.authz.aop.GuestAnnotationHandler();
    java.lang.Class var55 = var54.getAnnotationClass();
    java.util.Collection var56 = var32.byType(var55);
    java.lang.String[] var59 = org.jsecurity.util.StringUtils.tokenizeToStringArray("", "org.jsecurity.realm.SimpleAccountRealm-55-authorization");
    boolean var60 = var0.isPermittedAll((org.jsecurity.subject.PrincipalCollection)var32, var59);
    var32.clear();
    var32.clear();
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var3);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var9);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var10);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var11);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var19);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var20);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var21);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var27);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var28);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var29);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var47);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var48);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var50);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var51);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var52);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var53);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var55);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var56);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var59);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var60 == false);

  }

  public void test341() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest2.test341");


    org.jsecurity.io.ResourceException var3 = new org.jsecurity.io.ResourceException("hi!");
    org.jsecurity.codec.CodecException var4 = new org.jsecurity.codec.CodecException((java.lang.Throwable)var3);
    org.jsecurity.JSecurityException var5 = new org.jsecurity.JSecurityException("a2b823b1e72eae2b727289df8a00a89df8a0bab6ad8a89c4c5c7a9b62a270000", (java.lang.Throwable)var3);
    org.jsecurity.authc.ExcessiveAttemptsException var6 = new org.jsecurity.authc.ExcessiveAttemptsException((java.lang.Throwable)var5);
    org.jsecurity.session.StoppedSessionException var7 = new org.jsecurity.session.StoppedSessionException((java.lang.Throwable)var5);
    org.jsecurity.authc.AccountException var8 = new org.jsecurity.authc.AccountException("org.jsecurity.authz.UnauthorizedException: org.jsecurity.session.ExpiredSessionException: ", (java.lang.Throwable)var7);
    org.jsecurity.config.ConfigurationException var9 = new org.jsecurity.config.ConfigurationException((java.lang.Throwable)var8);

  }

  public void test342() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest2.test342");


    org.jsecurity.realm.jdbc.JdbcRealm var0 = new org.jsecurity.realm.jdbc.JdbcRealm();
    var0.setPermissionsQuery("org.jsecurity.authz.UnauthorizedException: org.jsecurity.session.ExpiredSessionException: ");
    var0.setAuthenticationQuery("");
    org.jsecurity.codec.CodecException var7 = new org.jsecurity.codec.CodecException("dd\uFFFD");
    org.jsecurity.authc.ConcurrentAccessException var8 = new org.jsecurity.authc.ConcurrentAccessException("org.jsecurity.authz.UnauthorizedException: org.jsecurity.session.ExpiredSessionException: ", (java.lang.Throwable)var7);
    org.jsecurity.subject.SimplePrincipalCollection var10 = new org.jsecurity.subject.SimplePrincipalCollection((java.lang.Object)var7, "");
    java.io.InputStream var12 = org.jsecurity.util.ClassUtils.getResourceAsStream("");
    java.lang.Object[] var13 = new java.lang.Object[] { var12};
    java.util.List var14 = org.jsecurity.util.CollectionUtils.asList(var13);
    org.jsecurity.authc.pam.ModularRealmAuthenticator var15 = new org.jsecurity.authc.pam.ModularRealmAuthenticator(var14);
    org.jsecurity.authc.pam.AllSuccessfulModularAuthenticationStrategy var16 = new org.jsecurity.authc.pam.AllSuccessfulModularAuthenticationStrategy();
    var15.setModularAuthenticationStrategy((org.jsecurity.authc.pam.ModularAuthenticationStrategy)var16);
    org.jsecurity.authz.SimpleAuthorizationInfo var18 = new org.jsecurity.authz.SimpleAuthorizationInfo();
    var18.addStringPermission("hi!");
    java.io.InputStream var22 = org.jsecurity.util.ClassUtils.getResourceAsStream("");
    java.lang.Object[] var23 = new java.lang.Object[] { var22};
    java.util.List var24 = org.jsecurity.util.CollectionUtils.asList(var23);
    var18.addRoles((java.util.Collection)var24);
    var15.setAuthenticationListeners((java.util.Collection)var24);
    org.jsecurity.realm.activedirectory.ActiveDirectoryRealm var27 = new org.jsecurity.realm.activedirectory.ActiveDirectoryRealm();
    var27.setPrincipalSuffix("");
    var15.setRealm((org.jsecurity.realm.Realm)var27);
    org.jsecurity.authc.pam.FirstSuccessfulAuthenticationStrategy var31 = new org.jsecurity.authc.pam.FirstSuccessfulAuthenticationStrategy();
    org.jsecurity.authz.UnauthorizedException var33 = new org.jsecurity.authz.UnauthorizedException("org.jsecurity.config.ConfigurationException: dd\uFFFD");
    java.lang.Throwable[] var34 = var33.getSuppressed();
    java.util.List var35 = org.jsecurity.util.CollectionUtils.asList((java.lang.Object[])var34);
    org.jsecurity.authc.UsernamePasswordToken var36 = new org.jsecurity.authc.UsernamePasswordToken();
    java.lang.String var37 = var36.getUsername();
    java.net.InetAddress var38 = var36.getInetAddress();
    org.jsecurity.authc.AuthenticationInfo var39 = var31.beforeAllAttempts((java.util.Collection)var35, (org.jsecurity.authc.AuthenticationToken)var36);
    var15.setModularAuthenticationStrategy((org.jsecurity.authc.pam.ModularAuthenticationStrategy)var31);
    org.jsecurity.authc.SimpleAccount var41 = new org.jsecurity.authc.SimpleAccount((org.jsecurity.subject.PrincipalCollection)var10, (java.lang.Object)var15);
    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      var0.checkPermission((org.jsecurity.subject.PrincipalCollection)var10, "3bf7038a-5bf9-4f69-b89b-6ea74272a097");
      fail("Expected exception of type java.util.NoSuchElementException");
    } catch (java.util.NoSuchElementException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var12);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var13);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var14);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var22);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var23);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var24);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var34);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var35);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var37);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var38);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var39);

  }

  public void test343() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest2.test343");


    org.jsecurity.session.UnknownSessionException var5 = new org.jsecurity.session.UnknownSessionException("dd\uFFFD", (java.io.Serializable)100.0f);
    org.jsecurity.session.SessionException var7 = new org.jsecurity.session.SessionException("dd\uFFFD", (java.lang.Throwable)var5, (java.io.Serializable)0);
    org.jsecurity.session.SessionException var8 = new org.jsecurity.session.SessionException("dd\uFFFD", (java.lang.Throwable)var5);
    java.io.Serializable var9 = var8.getSessionId();
    org.jsecurity.subject.InvalidSubjectException var10 = new org.jsecurity.subject.InvalidSubjectException((java.lang.Throwable)var8);
    org.jsecurity.JSecurityException var11 = new org.jsecurity.JSecurityException("22ab7faf-fab8-4d8b-9c43-096f2af17960", (java.lang.Throwable)var10);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var9);

  }

  public void test344() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest2.test344");


    org.jsecurity.io.DefaultSerializer var0 = new org.jsecurity.io.DefaultSerializer();
    org.jsecurity.authz.SimpleRole var1 = new org.jsecurity.authz.SimpleRole();
    byte[] var2 = var0.serialize((java.lang.Object)var1);
    byte[] var4 = var0.serialize((java.lang.Object)"org.jsecurity.realm.text.PropertiesRealm-263-authorization");
    byte[] var8 = new byte[] { (byte)100, (byte)100, (byte)(-1)};
    java.lang.String var9 = org.jsecurity.codec.CodecSupport.toString(var8);
    char[] var10 = org.jsecurity.codec.CodecSupport.toChars(var8);
    boolean var11 = org.jsecurity.codec.Base64.isBase64(var8);
    boolean var12 = org.jsecurity.codec.Base64.isBase64(var8);
    boolean var13 = org.jsecurity.codec.Base64.isBase64(var8);
    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      java.lang.Object var14 = var0.deserialize(var8);
      fail("Expected exception of type org.jsecurity.io.SerializationException");
    } catch (org.jsecurity.io.SerializationException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var2);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var4);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var8);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var9 + "' != '" + "dd\uFFFD"+ "'", var9.equals("dd\uFFFD"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var10);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var11 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var12 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var13 == false);

  }

  public void test345() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest2.test345");


    org.jsecurity.session.mgt.DelegatingSession var0 = new org.jsecurity.session.mgt.DelegatingSession();
    org.jsecurity.session.mgt.DefaultSessionManager var1 = new org.jsecurity.session.mgt.DefaultSessionManager();
    org.jsecurity.session.mgt.eis.MemorySessionDAO var2 = new org.jsecurity.session.mgt.eis.MemorySessionDAO();
    org.jsecurity.cache.Cache var3 = var2.getActiveSessionsCache();
    org.jsecurity.cache.CacheManager var4 = var2.getCacheManager();
    org.jsecurity.cache.HashtableCacheManager var5 = new org.jsecurity.cache.HashtableCacheManager();
    org.jsecurity.cache.Cache var7 = var5.getCache("\u0000\u0000");
    var2.setActiveSessionsCache(var7);
    java.io.InputStream var10 = org.jsecurity.util.ClassUtils.getResourceAsStream("");
    java.lang.Object[] var11 = new java.lang.Object[] { var10};
    java.util.List var12 = org.jsecurity.util.CollectionUtils.asList(var11);
    org.jsecurity.authc.pam.ModularRealmAuthenticator var13 = new org.jsecurity.authc.pam.ModularRealmAuthenticator(var12);
    org.jsecurity.authc.pam.AllSuccessfulModularAuthenticationStrategy var14 = new org.jsecurity.authc.pam.AllSuccessfulModularAuthenticationStrategy();
    var13.setModularAuthenticationStrategy((org.jsecurity.authc.pam.ModularAuthenticationStrategy)var14);
    org.jsecurity.authz.SimpleAuthorizationInfo var16 = new org.jsecurity.authz.SimpleAuthorizationInfo();
    var16.addStringPermission("hi!");
    java.io.InputStream var20 = org.jsecurity.util.ClassUtils.getResourceAsStream("");
    java.lang.Object[] var21 = new java.lang.Object[] { var20};
    java.util.List var22 = org.jsecurity.util.CollectionUtils.asList(var21);
    var16.addRoles((java.util.Collection)var22);
    var13.setAuthenticationListeners((java.util.Collection)var22);
    org.jsecurity.realm.activedirectory.ActiveDirectoryRealm var25 = new org.jsecurity.realm.activedirectory.ActiveDirectoryRealm();
    var25.setPrincipalSuffix("");
    var13.setRealm((org.jsecurity.realm.Realm)var25);
    org.jsecurity.cache.HashtableCacheManager var29 = new org.jsecurity.cache.HashtableCacheManager();
    org.jsecurity.cache.Cache var31 = var29.getCache("\u0000\u0000");
    var25.setAuthorizationCache(var31);
    var2.setActiveSessionsCache(var31);
    org.jsecurity.session.mgt.SimpleSession var34 = new org.jsecurity.session.mgt.SimpleSession();
    java.io.Serializable var35 = var2.create((org.jsecurity.session.Session)var34);
    var1.setSessionDAO((org.jsecurity.session.mgt.eis.SessionDAO)var2);
    var0.setSessionManager((org.jsecurity.session.mgt.SessionManager)var1);
    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      java.net.InetAddress var38 = var0.getHostAddress();
      fail("Expected exception of type org.jsecurity.session.UnknownSessionException");
    } catch (org.jsecurity.session.UnknownSessionException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var3);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var4);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var7);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var10);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var11);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var12);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var20);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var21);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var22);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var31);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var35 + "' != '" + "70f969c9-a6fe-4fa1-b24d-3560315afef4"+ "'", var35.equals("70f969c9-a6fe-4fa1-b24d-3560315afef4"));

  }

  public void test346() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest2.test346");


    org.jsecurity.util.UnavailableConstructorException var2 = new org.jsecurity.util.UnavailableConstructorException("3c0f8cd0-07d8-4de6-8030-3e8afad05e07");
    org.jsecurity.config.ConfigurationException var3 = new org.jsecurity.config.ConfigurationException("3ea0b55f-199e-4289-aeec-f7716cc7356a", (java.lang.Throwable)var2);

  }

  public void test347() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest2.test347");


    org.jsecurity.authz.SimpleAuthorizationInfo var0 = new org.jsecurity.authz.SimpleAuthorizationInfo();
    var0.addRole("a2b823b1e72eae2b727289df8a00a89df8a0bab6ad8a89c4c5c7a9b62a270000");
    org.jsecurity.session.UnknownSessionException var7 = new org.jsecurity.session.UnknownSessionException("dd\uFFFD", (java.io.Serializable)100.0f);
    org.jsecurity.subject.SubjectException var8 = new org.jsecurity.subject.SubjectException("dd\uFFFD", (java.lang.Throwable)var7);
    org.jsecurity.io.SerializationException var9 = new org.jsecurity.io.SerializationException("", (java.lang.Throwable)var8);
    java.lang.Throwable[] var10 = var8.getSuppressed();
    java.util.Set var11 = org.jsecurity.util.CollectionUtils.asSet((java.lang.Object[])var10);
    var0.addRoles((java.util.Collection)var11);
    java.util.Set var13 = var0.getObjectPermissions();
    var0.addStringPermission("783ccd31-48a8-42dd-890f-df885a7baaff");
    var0.addStringPermission("75c873c8-19df-476a-b82e-72a1eddf7e4b");
    org.jsecurity.authz.SimpleRole var18 = new org.jsecurity.authz.SimpleRole();
    org.jsecurity.authz.SimpleAuthorizationInfo var19 = new org.jsecurity.authz.SimpleAuthorizationInfo();
    var19.addRole("a2b823b1e72eae2b727289df8a00a89df8a0bab6ad8a89c4c5c7a9b62a270000");
    org.jsecurity.session.UnknownSessionException var26 = new org.jsecurity.session.UnknownSessionException("dd\uFFFD", (java.io.Serializable)100.0f);
    org.jsecurity.subject.SubjectException var27 = new org.jsecurity.subject.SubjectException("dd\uFFFD", (java.lang.Throwable)var26);
    org.jsecurity.io.SerializationException var28 = new org.jsecurity.io.SerializationException("", (java.lang.Throwable)var27);
    java.lang.Throwable[] var29 = var27.getSuppressed();
    java.util.Set var30 = org.jsecurity.util.CollectionUtils.asSet((java.lang.Object[])var29);
    var19.addRoles((java.util.Collection)var30);
    var18.addAll((java.util.Collection)var30);
    org.jsecurity.authz.SimpleRole var33 = new org.jsecurity.authz.SimpleRole();
    org.jsecurity.authz.SimpleAuthorizationInfo var34 = new org.jsecurity.authz.SimpleAuthorizationInfo();
    var34.addRole("a2b823b1e72eae2b727289df8a00a89df8a0bab6ad8a89c4c5c7a9b62a270000");
    org.jsecurity.session.UnknownSessionException var41 = new org.jsecurity.session.UnknownSessionException("dd\uFFFD", (java.io.Serializable)100.0f);
    org.jsecurity.subject.SubjectException var42 = new org.jsecurity.subject.SubjectException("dd\uFFFD", (java.lang.Throwable)var41);
    org.jsecurity.io.SerializationException var43 = new org.jsecurity.io.SerializationException("", (java.lang.Throwable)var42);
    java.lang.Throwable[] var44 = var42.getSuppressed();
    java.util.Set var45 = org.jsecurity.util.CollectionUtils.asSet((java.lang.Object[])var44);
    var34.addRoles((java.util.Collection)var45);
    var33.addAll((java.util.Collection)var45);
    java.lang.String var48 = var33.getName();
    org.jsecurity.authz.permission.WildcardPermission var51 = new org.jsecurity.authz.permission.WildcardPermission("hi!", false);
    var33.add((org.jsecurity.authz.Permission)var51);
    var18.add((org.jsecurity.authz.Permission)var51);
    org.jsecurity.authz.SimpleAuthorizationInfo var55 = new org.jsecurity.authz.SimpleAuthorizationInfo();
    var55.addRole("a2b823b1e72eae2b727289df8a00a89df8a0bab6ad8a89c4c5c7a9b62a270000");
    org.jsecurity.session.UnknownSessionException var62 = new org.jsecurity.session.UnknownSessionException("dd\uFFFD", (java.io.Serializable)100.0f);
    org.jsecurity.subject.SubjectException var63 = new org.jsecurity.subject.SubjectException("dd\uFFFD", (java.lang.Throwable)var62);
    org.jsecurity.io.SerializationException var64 = new org.jsecurity.io.SerializationException("", (java.lang.Throwable)var63);
    java.lang.Throwable[] var65 = var63.getSuppressed();
    java.util.Set var66 = org.jsecurity.util.CollectionUtils.asSet((java.lang.Object[])var65);
    var55.addRoles((java.util.Collection)var66);
    org.jsecurity.authz.SimpleRole var68 = new org.jsecurity.authz.SimpleRole("dd\uFFFD", var66);
    var18.setPermissions(var66);
    org.jsecurity.authz.SimpleAuthorizationInfo var70 = new org.jsecurity.authz.SimpleAuthorizationInfo(var66);
    var0.setObjectPermissions(var66);
    org.jsecurity.authz.ModularRealmAuthorizer var72 = new org.jsecurity.authz.ModularRealmAuthorizer((java.util.Collection)var66);
    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      org.jsecurity.subject.SimplePrincipalCollection var74 = new org.jsecurity.subject.SimplePrincipalCollection((java.util.Collection)var66, "5e8ae759-0aee-439c-94b7-0d29d950b35b");
      fail("Expected exception of type java.lang.IllegalArgumentException");
    } catch (java.lang.IllegalArgumentException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var10);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var11);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var13);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var29);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var30);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var44);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var45);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var48);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var65);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var66);

  }

  public void test348() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest2.test348");


    org.jsecurity.authc.UsernamePasswordToken var2 = new org.jsecurity.authc.UsernamePasswordToken("b725e8cc-690c-495e-ac27-b1b425834793", "7ef36680-c8d0-4ff6-a301-9038bb416b9d");

  }

  public void test349() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest2.test349");


    org.jsecurity.subject.SubjectException var1 = new org.jsecurity.subject.SubjectException("089f152f-387d-4d70-9992-addb94aecba0");

  }

  public void test350() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest2.test350");


    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      org.jsecurity.crypto.hash.Sha256Hash var1 = org.jsecurity.crypto.hash.Sha256Hash.fromHexString("7fc15b23-d5a7-46fa-afed-9cd42a82c334");
      fail("Expected exception of type java.lang.IllegalArgumentException");
    } catch (java.lang.IllegalArgumentException e) {
      // Expected exception.
    }

  }

  public void test351() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest2.test351");


    java.util.Set var1 = org.jsecurity.util.PermissionUtils.toPermissionStrings("org.jsecurity.realm.text.TextConfigurationRealm_819");
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var1);

  }

  public void test352() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest2.test352");


    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      java.lang.String[] var1 = org.jsecurity.util.StringUtils.splitKeyValue("162a4550-2475-4cc9-b393-3917de249d8e");
      fail("Expected exception of type java.text.ParseException");
    } catch (java.text.ParseException e) {
      // Expected exception.
    }

  }

  public void test353() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest2.test353");


    org.jsecurity.jndi.JndiLocator var0 = new org.jsecurity.jndi.JndiLocator();
    boolean var1 = var0.isResourceRef();
    org.jsecurity.jndi.JndiTemplate var2 = var0.getJndiTemplate();
    org.jsecurity.authc.pam.AllSuccessfulModularAuthenticationStrategy var5 = new org.jsecurity.authc.pam.AllSuccessfulModularAuthenticationStrategy();
    char[] var7 = new char[] { };
    org.jsecurity.authc.UsernamePasswordToken var9 = new org.jsecurity.authc.UsernamePasswordToken("hi!", var7, true);
    org.jsecurity.authc.SimpleAccount var10 = new org.jsecurity.authc.SimpleAccount();
    var10.setCredentialsExpired(false);
    boolean var13 = var10.isLocked();
    org.jsecurity.authc.AuthenticationInfo var14 = var5.afterAllAttempts((org.jsecurity.authc.AuthenticationToken)var9, (org.jsecurity.authc.AuthenticationInfo)var10);
    org.jsecurity.realm.activedirectory.ActiveDirectoryRealm var15 = new org.jsecurity.realm.activedirectory.ActiveDirectoryRealm();
    org.jsecurity.authc.credential.Sha256CredentialsMatcher var16 = new org.jsecurity.authc.credential.Sha256CredentialsMatcher();
    var15.setCredentialsMatcher((org.jsecurity.authc.credential.CredentialsMatcher)var16);
    java.lang.String var18 = var15.getAuthorizationCacheName();
    var15.setUrl("hi!");
    org.jsecurity.io.IniResource var21 = new org.jsecurity.io.IniResource();
    java.util.Map var22 = var21.getSections();
    java.util.Map var23 = var21.getSections();
    var15.setGroupRolesMap(var23);
    org.jsecurity.authc.UsernamePasswordToken var28 = new org.jsecurity.authc.UsernamePasswordToken("ZGT/", "org.jsecurity.config.ConfigurationException: dd\uFFFD", true);
    org.jsecurity.session.UnknownSessionException var33 = new org.jsecurity.session.UnknownSessionException("dd\uFFFD", (java.io.Serializable)100.0f);
    org.jsecurity.subject.SubjectException var34 = new org.jsecurity.subject.SubjectException("dd\uFFFD", (java.lang.Throwable)var33);
    org.jsecurity.io.SerializationException var35 = new org.jsecurity.io.SerializationException("", (java.lang.Throwable)var34);
    java.lang.Throwable[] var36 = var34.getSuppressed();
    java.lang.Throwable[] var37 = var34.getSuppressed();
    org.jsecurity.authz.SimpleAuthorizationInfo var40 = new org.jsecurity.authz.SimpleAuthorizationInfo();
    var40.addRole("a2b823b1e72eae2b727289df8a00a89df8a0bab6ad8a89c4c5c7a9b62a270000");
    org.jsecurity.session.UnknownSessionException var47 = new org.jsecurity.session.UnknownSessionException("dd\uFFFD", (java.io.Serializable)100.0f);
    org.jsecurity.subject.SubjectException var48 = new org.jsecurity.subject.SubjectException("dd\uFFFD", (java.lang.Throwable)var47);
    org.jsecurity.io.SerializationException var49 = new org.jsecurity.io.SerializationException("", (java.lang.Throwable)var48);
    java.lang.Throwable[] var50 = var48.getSuppressed();
    java.util.Set var51 = org.jsecurity.util.CollectionUtils.asSet((java.lang.Object[])var50);
    var40.addRoles((java.util.Collection)var51);
    java.io.InputStream var54 = org.jsecurity.util.ClassUtils.getResourceAsStream("");
    java.lang.Object[] var55 = new java.lang.Object[] { var54};
    java.util.List var56 = org.jsecurity.util.CollectionUtils.asList(var55);
    org.jsecurity.authc.pam.ModularRealmAuthenticator var57 = new org.jsecurity.authc.pam.ModularRealmAuthenticator(var56);
    org.jsecurity.subject.SimplePrincipalCollection var59 = new org.jsecurity.subject.SimplePrincipalCollection((java.util.Collection)var56, "org.jsecurity.authz.UnauthorizedException: org.jsecurity.session.ExpiredSessionException: ");
    org.jsecurity.session.UnknownSessionException var64 = new org.jsecurity.session.UnknownSessionException("dd\uFFFD", (java.io.Serializable)100.0f);
    org.jsecurity.session.SessionException var66 = new org.jsecurity.session.SessionException("dd\uFFFD", (java.lang.Throwable)var64, (java.io.Serializable)0);
    org.jsecurity.session.SessionException var67 = new org.jsecurity.session.SessionException("dd\uFFFD", (java.lang.Throwable)var64);
    var59.add((java.lang.Object)var67, "org.jsecurity.config.ConfigurationException: dd\uFFFD");
    java.util.Set var70 = var59.asSet();
    org.jsecurity.authz.SimpleAuthorizingAccount var71 = new org.jsecurity.authz.SimpleAuthorizingAccount((java.lang.Object)var37, (java.lang.Object)"\u0000\u0000\u0000", "\u0000\u0000\u0000", var51, var70);
    org.jsecurity.authz.SimpleRole var73 = var71.getRole("\u0000\u0000\u0000");
    java.io.InputStream var75 = org.jsecurity.util.ClassUtils.getResourceAsStream("");
    java.lang.Object[] var76 = new java.lang.Object[] { var75};
    java.util.List var77 = org.jsecurity.util.CollectionUtils.asList(var76);
    org.jsecurity.authc.pam.ModularRealmAuthenticator var78 = new org.jsecurity.authc.pam.ModularRealmAuthenticator(var77);
    org.jsecurity.subject.SimplePrincipalCollection var80 = new org.jsecurity.subject.SimplePrincipalCollection((java.util.Collection)var77, "org.jsecurity.authz.UnauthorizedException: org.jsecurity.session.ExpiredSessionException: ");
    org.jsecurity.session.UnknownSessionException var85 = new org.jsecurity.session.UnknownSessionException("dd\uFFFD", (java.io.Serializable)100.0f);
    org.jsecurity.session.SessionException var87 = new org.jsecurity.session.SessionException("dd\uFFFD", (java.lang.Throwable)var85, (java.io.Serializable)0);
    org.jsecurity.session.SessionException var88 = new org.jsecurity.session.SessionException("dd\uFFFD", (java.lang.Throwable)var85);
    var80.add((java.lang.Object)var88, "org.jsecurity.config.ConfigurationException: dd\uFFFD");
    java.util.Set var91 = var80.asSet();
    var71.setStringPermissions(var91);
    org.jsecurity.authc.AuthenticationInfo var93 = var5.beforeAttempt((org.jsecurity.realm.Realm)var15, (org.jsecurity.authc.AuthenticationToken)var28, (org.jsecurity.authc.AuthenticationInfo)var71);
    char[] var94 = var28.getPassword();
    org.jsecurity.authc.UsernamePasswordToken var95 = new org.jsecurity.authc.UsernamePasswordToken("70bf5f29-b0cb-4666-b31a-f1e98e2371a0", var94);
    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      var2.rebind("7fc15b23-d5a7-46fa-afed-9cd42a82c334", (java.lang.Object)var95);
      fail("Expected exception of type javax.naming.NoInitialContextException");
    } catch (javax.naming.NoInitialContextException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var1 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var2);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var7);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var13 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var14);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var18);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var22);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var23);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var36);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var37);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var50);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var51);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var54);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var55);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var56);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var70);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var73);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var75);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var76);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var77);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var91);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var93);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var94);

  }

  public void test354() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest2.test354");


    org.jsecurity.session.mgt.DefaultSessionManager var0 = new org.jsecurity.session.mgt.DefaultSessionManager();
    org.jsecurity.session.mgt.quartz.QuartzSessionValidationScheduler var1 = new org.jsecurity.session.mgt.quartz.QuartzSessionValidationScheduler();
    boolean var2 = var1.isEnabled();
    var1.enableSessionValidation();
    var0.setSessionValidationScheduler((org.jsecurity.session.mgt.SessionValidationScheduler)var1);
    org.jsecurity.authz.SimpleRole var5 = new org.jsecurity.authz.SimpleRole();
    org.jsecurity.authz.SimpleAuthorizationInfo var6 = new org.jsecurity.authz.SimpleAuthorizationInfo();
    var6.addRole("a2b823b1e72eae2b727289df8a00a89df8a0bab6ad8a89c4c5c7a9b62a270000");
    org.jsecurity.session.UnknownSessionException var13 = new org.jsecurity.session.UnknownSessionException("dd\uFFFD", (java.io.Serializable)100.0f);
    org.jsecurity.subject.SubjectException var14 = new org.jsecurity.subject.SubjectException("dd\uFFFD", (java.lang.Throwable)var13);
    org.jsecurity.io.SerializationException var15 = new org.jsecurity.io.SerializationException("", (java.lang.Throwable)var14);
    java.lang.Throwable[] var16 = var14.getSuppressed();
    java.util.Set var17 = org.jsecurity.util.CollectionUtils.asSet((java.lang.Object[])var16);
    var6.addRoles((java.util.Collection)var17);
    var5.addAll((java.util.Collection)var17);
    java.lang.String var20 = var5.getName();
    org.jsecurity.authz.permission.WildcardPermission var23 = new org.jsecurity.authz.permission.WildcardPermission("hi!", false);
    var5.add((org.jsecurity.authz.Permission)var23);
    org.jsecurity.authz.permission.WildcardPermission var27 = new org.jsecurity.authz.permission.WildcardPermission("hi!", false);
    var5.add((org.jsecurity.authz.Permission)var27);
    org.jsecurity.authz.SimpleAuthorizingAccount var29 = new org.jsecurity.authz.SimpleAuthorizingAccount();
    org.jsecurity.authz.SimpleAuthorizationInfo var30 = new org.jsecurity.authz.SimpleAuthorizationInfo();
    var30.addRole("a2b823b1e72eae2b727289df8a00a89df8a0bab6ad8a89c4c5c7a9b62a270000");
    org.jsecurity.authz.SimpleAuthorizationInfo var33 = new org.jsecurity.authz.SimpleAuthorizationInfo();
    var33.addRole("a2b823b1e72eae2b727289df8a00a89df8a0bab6ad8a89c4c5c7a9b62a270000");
    org.jsecurity.session.UnknownSessionException var40 = new org.jsecurity.session.UnknownSessionException("dd\uFFFD", (java.io.Serializable)100.0f);
    org.jsecurity.subject.SubjectException var41 = new org.jsecurity.subject.SubjectException("dd\uFFFD", (java.lang.Throwable)var40);
    org.jsecurity.io.SerializationException var42 = new org.jsecurity.io.SerializationException("", (java.lang.Throwable)var41);
    java.lang.Throwable[] var43 = var41.getSuppressed();
    java.util.Set var44 = org.jsecurity.util.CollectionUtils.asSet((java.lang.Object[])var43);
    var33.addRoles((java.util.Collection)var44);
    var30.setObjectPermissions(var44);
    var29.setSimpleRoles(var44);
    var5.addAll((java.util.Collection)var44);
    java.util.Set var49 = var5.getPermissions();
    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      var0.stop((java.io.Serializable)var5);
      fail("Expected exception of type org.jsecurity.session.UnknownSessionException");
    } catch (org.jsecurity.session.UnknownSessionException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var2 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var16);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var17);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var20);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var43);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var44);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var49);

  }

  public void test355() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest2.test355");


    org.jsecurity.mgt.DefaultSecurityManager var0 = new org.jsecurity.mgt.DefaultSecurityManager();
    org.jsecurity.authc.pam.AllSuccessfulModularAuthenticationStrategy var1 = new org.jsecurity.authc.pam.AllSuccessfulModularAuthenticationStrategy();
    org.jsecurity.authc.pam.AllSuccessfulModularAuthenticationStrategy var2 = new org.jsecurity.authc.pam.AllSuccessfulModularAuthenticationStrategy();
    char[] var4 = new char[] { };
    org.jsecurity.authc.UsernamePasswordToken var6 = new org.jsecurity.authc.UsernamePasswordToken("hi!", var4, true);
    org.jsecurity.authc.SimpleAccount var7 = new org.jsecurity.authc.SimpleAccount();
    var7.setCredentialsExpired(false);
    boolean var10 = var7.isLocked();
    org.jsecurity.authc.AuthenticationInfo var11 = var2.afterAllAttempts((org.jsecurity.authc.AuthenticationToken)var6, (org.jsecurity.authc.AuthenticationInfo)var7);
    char[] var15 = new char[] { '4', '#'};
    org.jsecurity.authc.UsernamePasswordToken var16 = new org.jsecurity.authc.UsernamePasswordToken("\u0000\u0000", var15);
    org.jsecurity.authc.SimpleAccount var17 = new org.jsecurity.authc.SimpleAccount();
    var17.setCredentialsExpired(false);
    var17.setCredentialsExpired(false);
    boolean var22 = var17.isCredentialsExpired();
    org.jsecurity.authc.AuthenticationInfo var23 = var2.afterAllAttempts((org.jsecurity.authc.AuthenticationToken)var16, (org.jsecurity.authc.AuthenticationInfo)var17);
    org.jsecurity.authz.UnauthenticatedException var27 = new org.jsecurity.authz.UnauthenticatedException();
    org.jsecurity.config.UnresolveableReferenceException var28 = new org.jsecurity.config.UnresolveableReferenceException("", (java.lang.Throwable)var27);
    org.jsecurity.cache.CacheException var29 = new org.jsecurity.cache.CacheException("org.jsecurity.config.ConfigurationException: dd\uFFFD", (java.lang.Throwable)var27);
    org.jsecurity.authc.SimpleAuthenticationInfo var31 = new org.jsecurity.authc.SimpleAuthenticationInfo((java.lang.Object)"org.jsecurity.config.ConfigurationException: dd\uFFFD", (java.lang.Object)var29, "a2b823b1e72eae2b727289df8a00a89df8a0bab6ad8a89c4c5c7a9b62a270000");
    org.jsecurity.subject.PrincipalCollection var32 = var31.getPrincipals();
    org.jsecurity.authc.AuthenticationInfo var33 = var1.afterAllAttempts((org.jsecurity.authc.AuthenticationToken)var16, (org.jsecurity.authc.AuthenticationInfo)var31);
    var0.setModularAuthenticationStrategy((org.jsecurity.authc.pam.ModularAuthenticationStrategy)var1);
    org.jsecurity.subject.RememberMeManager var35 = var0.getRememberMeManager();
    java.io.InputStream var37 = org.jsecurity.util.ClassUtils.getResourceAsStream("");
    java.lang.Object[] var38 = new java.lang.Object[] { var37};
    java.util.List var39 = org.jsecurity.util.CollectionUtils.asList(var38);
    org.jsecurity.authc.pam.ModularRealmAuthenticator var40 = new org.jsecurity.authc.pam.ModularRealmAuthenticator(var39);
    org.jsecurity.subject.SimplePrincipalCollection var42 = new org.jsecurity.subject.SimplePrincipalCollection((java.util.Collection)var39, "org.jsecurity.authz.UnauthorizedException: org.jsecurity.session.ExpiredSessionException: ");
    java.util.List var43 = var42.asList();
    org.jsecurity.authz.SimpleAuthorizationInfo var44 = new org.jsecurity.authz.SimpleAuthorizationInfo();
    var44.addRole("a2b823b1e72eae2b727289df8a00a89df8a0bab6ad8a89c4c5c7a9b62a270000");
    org.jsecurity.session.UnknownSessionException var51 = new org.jsecurity.session.UnknownSessionException("dd\uFFFD", (java.io.Serializable)100.0f);
    org.jsecurity.subject.SubjectException var52 = new org.jsecurity.subject.SubjectException("dd\uFFFD", (java.lang.Throwable)var51);
    org.jsecurity.io.SerializationException var53 = new org.jsecurity.io.SerializationException("", (java.lang.Throwable)var52);
    java.lang.Throwable[] var54 = var52.getSuppressed();
    java.util.Set var55 = org.jsecurity.util.CollectionUtils.asSet((java.lang.Object[])var54);
    var44.addRoles((java.util.Collection)var55);
    var0.checkRoles((org.jsecurity.subject.PrincipalCollection)var42, (java.util.Collection)var55);
    var0.destroy();
    org.jsecurity.session.mgt.DefaultSessionManager var59 = new org.jsecurity.session.mgt.DefaultSessionManager();
    org.jsecurity.session.mgt.SessionValidationScheduler var60 = var59.getSessionValidationScheduler();
    long var61 = var59.getGlobalSessionTimeout();
    var0.setSessionManager((org.jsecurity.session.mgt.SessionManager)var59);
    org.jsecurity.io.ResourceException var65 = new org.jsecurity.io.ResourceException("hi!");
    org.jsecurity.codec.CodecException var66 = new org.jsecurity.codec.CodecException((java.lang.Throwable)var65);
    org.jsecurity.JSecurityException var67 = new org.jsecurity.JSecurityException("a2b823b1e72eae2b727289df8a00a89df8a0bab6ad8a89c4c5c7a9b62a270000", (java.lang.Throwable)var65);
    org.jsecurity.util.UnavailableConstructorException var68 = new org.jsecurity.util.UnavailableConstructorException((java.lang.Throwable)var67);
    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      long var69 = var59.getTimeout((java.io.Serializable)var68);
      fail("Expected exception of type org.jsecurity.session.UnknownSessionException");
    } catch (org.jsecurity.session.UnknownSessionException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var4);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var10 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var11);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var15);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var22 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var23);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var32);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var33);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var35);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var37);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var38);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var39);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var43);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var54);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var55);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var60);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var61 == 1800000L);

  }

  public void test356() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest2.test356");


    org.jsecurity.mgt.DefaultSecurityManager var0 = new org.jsecurity.mgt.DefaultSecurityManager();
    java.io.InputStream var2 = org.jsecurity.util.ClassUtils.getResourceAsStream("");
    java.lang.Object[] var3 = new java.lang.Object[] { var2};
    java.util.List var4 = org.jsecurity.util.CollectionUtils.asList(var3);
    org.jsecurity.authc.pam.ModularRealmAuthenticator var5 = new org.jsecurity.authc.pam.ModularRealmAuthenticator(var4);
    org.jsecurity.authc.pam.AllSuccessfulModularAuthenticationStrategy var6 = new org.jsecurity.authc.pam.AllSuccessfulModularAuthenticationStrategy();
    var5.setModularAuthenticationStrategy((org.jsecurity.authc.pam.ModularAuthenticationStrategy)var6);
    org.jsecurity.authz.SimpleAuthorizationInfo var8 = new org.jsecurity.authz.SimpleAuthorizationInfo();
    var8.addStringPermission("hi!");
    java.io.InputStream var12 = org.jsecurity.util.ClassUtils.getResourceAsStream("");
    java.lang.Object[] var13 = new java.lang.Object[] { var12};
    java.util.List var14 = org.jsecurity.util.CollectionUtils.asList(var13);
    var8.addRoles((java.util.Collection)var14);
    var5.setAuthenticationListeners((java.util.Collection)var14);
    var0.setSessionListeners((java.util.Collection)var14);
    org.jsecurity.realm.text.TextConfigurationRealm var18 = new org.jsecurity.realm.text.TextConfigurationRealm();
    java.io.InputStream var20 = org.jsecurity.util.ClassUtils.getResourceAsStream("");
    java.lang.Object[] var21 = new java.lang.Object[] { var20};
    java.util.List var22 = org.jsecurity.util.CollectionUtils.asList(var21);
    org.jsecurity.authc.pam.ModularRealmAuthenticator var23 = new org.jsecurity.authc.pam.ModularRealmAuthenticator(var22);
    org.jsecurity.subject.SimplePrincipalCollection var25 = new org.jsecurity.subject.SimplePrincipalCollection((java.util.Collection)var22, "org.jsecurity.authz.UnauthorizedException: org.jsecurity.session.ExpiredSessionException: ");
    org.jsecurity.session.UnknownSessionException var30 = new org.jsecurity.session.UnknownSessionException("dd\uFFFD", (java.io.Serializable)100.0f);
    org.jsecurity.session.SessionException var32 = new org.jsecurity.session.SessionException("dd\uFFFD", (java.lang.Throwable)var30, (java.io.Serializable)0);
    org.jsecurity.session.SessionException var33 = new org.jsecurity.session.SessionException("dd\uFFFD", (java.lang.Throwable)var30);
    var25.add((java.lang.Object)var33, "org.jsecurity.config.ConfigurationException: dd\uFFFD");
    var18.onLogout((org.jsecurity.subject.PrincipalCollection)var25);
    org.jsecurity.authc.pam.FirstSuccessfulAuthenticationStrategy var37 = new org.jsecurity.authc.pam.FirstSuccessfulAuthenticationStrategy();
    org.jsecurity.authz.UnauthorizedException var39 = new org.jsecurity.authz.UnauthorizedException("org.jsecurity.config.ConfigurationException: dd\uFFFD");
    java.lang.Throwable[] var40 = var39.getSuppressed();
    java.util.List var41 = org.jsecurity.util.CollectionUtils.asList((java.lang.Object[])var40);
    org.jsecurity.authc.UsernamePasswordToken var42 = new org.jsecurity.authc.UsernamePasswordToken();
    java.lang.String var43 = var42.getUsername();
    java.net.InetAddress var44 = var42.getInetAddress();
    org.jsecurity.authc.AuthenticationInfo var45 = var37.beforeAllAttempts((java.util.Collection)var41, (org.jsecurity.authc.AuthenticationToken)var42);
    boolean[] var46 = var0.hasRoles((org.jsecurity.subject.PrincipalCollection)var25, var41);
    org.jsecurity.codec.CodecException var49 = new org.jsecurity.codec.CodecException("dd\uFFFD");
    org.jsecurity.authc.ConcurrentAccessException var50 = new org.jsecurity.authc.ConcurrentAccessException("org.jsecurity.authz.UnauthorizedException: org.jsecurity.session.ExpiredSessionException: ", (java.lang.Throwable)var49);
    org.jsecurity.subject.SimplePrincipalCollection var52 = new org.jsecurity.subject.SimplePrincipalCollection((java.lang.Object)var49, "");
    java.io.InputStream var54 = org.jsecurity.util.ClassUtils.getResourceAsStream("");
    java.lang.Object[] var55 = new java.lang.Object[] { var54};
    java.util.List var56 = org.jsecurity.util.CollectionUtils.asList(var55);
    org.jsecurity.authc.pam.ModularRealmAuthenticator var57 = new org.jsecurity.authc.pam.ModularRealmAuthenticator(var56);
    var52.addAll((java.util.Collection)var56, "\u0000\u0000");
    var0.setSessionListeners((java.util.Collection)var56);
    org.jsecurity.subject.Subject var61 = var0.getSubject();
    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      var0.setRememberMeEncryptionCipherKeyBase64("d0ddeefd-5576-4906-99f8-93b892e0c773");
      fail("Expected exception of type java.lang.IllegalStateException");
    } catch (java.lang.IllegalStateException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var2);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var3);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var4);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var12);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var13);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var14);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var20);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var21);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var22);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var40);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var41);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var43);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var44);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var45);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var46);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var54);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var55);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var56);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var61);

  }

  public void test357() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest2.test357");


    java.lang.String[] var3 = org.jsecurity.util.StringUtils.split("783ccd31-48a8-42dd-890f-df885a7baaff", '#', ' ');
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var3);

  }

  public void test358() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest2.test358");


    java.lang.String[] var2 = org.jsecurity.util.StringUtils.tokenizeToStringArray("hi!", "");
    java.util.List var3 = org.jsecurity.util.CollectionUtils.asList((java.lang.Object[])var2);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var2);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var3);

  }

  public void test359() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest2.test359");


    org.jsecurity.session.SessionException var1 = new org.jsecurity.session.SessionException("s\uFFFD\uFFFDkG\uFFFD\uFFFD\uFFFD4\uFFFDW\uFFFDi\uFFFD\uFFFDi\uFFFD\u067D\uFFFD{\uFFFD\u001F");

  }

  public void test360() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest2.test360");


    org.jsecurity.realm.SimpleAccountRealm var0 = new org.jsecurity.realm.SimpleAccountRealm();
    java.io.InputStream var2 = org.jsecurity.util.ClassUtils.getResourceAsStream("");
    java.lang.Object[] var3 = new java.lang.Object[] { var2};
    java.util.List var4 = org.jsecurity.util.CollectionUtils.asList(var3);
    org.jsecurity.authc.pam.ModularRealmAuthenticator var5 = new org.jsecurity.authc.pam.ModularRealmAuthenticator(var4);
    org.jsecurity.subject.SimplePrincipalCollection var7 = new org.jsecurity.subject.SimplePrincipalCollection((java.util.Collection)var4, "org.jsecurity.authz.UnauthorizedException: org.jsecurity.session.ExpiredSessionException: ");
    org.jsecurity.io.ResourceException var11 = new org.jsecurity.io.ResourceException("hi!");
    org.jsecurity.authc.UnknownAccountException var12 = new org.jsecurity.authc.UnknownAccountException((java.lang.Throwable)var11);
    org.jsecurity.session.StoppedSessionException var13 = new org.jsecurity.session.StoppedSessionException("dd\uFFFD", (java.io.Serializable)var11);
    org.jsecurity.session.UnknownSessionException var14 = new org.jsecurity.session.UnknownSessionException("org.jsecurity.authz.UnauthorizedException: org.jsecurity.session.ExpiredSessionException: ", (java.lang.Throwable)var11);
    boolean var15 = var7.equals((java.lang.Object)var11);
    org.jsecurity.authz.aop.RoleAnnotationMethodInterceptor var16 = new org.jsecurity.authz.aop.RoleAnnotationMethodInterceptor();
    org.jsecurity.aop.AnnotationHandler var17 = var16.getHandler();
    java.lang.Class var18 = var17.getAnnotationClass();
    java.lang.Object var19 = var7.oneByType(var18);
    boolean var20 = var7.isEmpty();
    org.jsecurity.codec.CodecException var23 = new org.jsecurity.codec.CodecException("dd\uFFFD");
    org.jsecurity.authc.ConcurrentAccessException var24 = new org.jsecurity.authc.ConcurrentAccessException("org.jsecurity.authz.UnauthorizedException: org.jsecurity.session.ExpiredSessionException: ", (java.lang.Throwable)var23);
    org.jsecurity.subject.SimplePrincipalCollection var26 = new org.jsecurity.subject.SimplePrincipalCollection((java.lang.Object)var23, "");
    java.io.InputStream var28 = org.jsecurity.util.ClassUtils.getResourceAsStream("");
    java.lang.Object[] var29 = new java.lang.Object[] { var28};
    java.util.List var30 = org.jsecurity.util.CollectionUtils.asList(var29);
    org.jsecurity.authc.pam.ModularRealmAuthenticator var31 = new org.jsecurity.authc.pam.ModularRealmAuthenticator(var30);
    var26.addAll((java.util.Collection)var30, "\u0000\u0000");
    org.jsecurity.authz.UnauthorizedException var35 = new org.jsecurity.authz.UnauthorizedException();
    org.jsecurity.session.SessionException var37 = new org.jsecurity.session.SessionException("", (java.lang.Throwable)var35, (java.io.Serializable)"org.jsecurity.config.ConfigurationException: dd\uFFFD");
    org.jsecurity.crypto.hash.Sha1Hash var38 = new org.jsecurity.crypto.hash.Sha1Hash((java.lang.Object)"");
    org.jsecurity.session.UnknownSessionException var43 = new org.jsecurity.session.UnknownSessionException("dd\uFFFD", (java.io.Serializable)100.0f);
    org.jsecurity.subject.SubjectException var44 = new org.jsecurity.subject.SubjectException("dd\uFFFD", (java.lang.Throwable)var43);
    org.jsecurity.io.SerializationException var45 = new org.jsecurity.io.SerializationException("", (java.lang.Throwable)var44);
    java.lang.Throwable[] var46 = var44.getSuppressed();
    java.util.Set var47 = org.jsecurity.util.CollectionUtils.asSet((java.lang.Object[])var46);
    org.jsecurity.authz.SimpleAuthorizationInfo var49 = new org.jsecurity.authz.SimpleAuthorizationInfo();
    org.jsecurity.session.UnknownSessionException var54 = new org.jsecurity.session.UnknownSessionException("dd\uFFFD", (java.io.Serializable)100.0f);
    org.jsecurity.subject.SubjectException var55 = new org.jsecurity.subject.SubjectException("dd\uFFFD", (java.lang.Throwable)var54);
    org.jsecurity.io.SerializationException var56 = new org.jsecurity.io.SerializationException("", (java.lang.Throwable)var55);
    java.lang.Throwable[] var57 = var55.getSuppressed();
    java.util.Set var58 = org.jsecurity.util.CollectionUtils.asSet((java.lang.Object[])var57);
    var49.setStringPermissions(var58);
    java.util.Set var60 = var49.getRoles();
    org.jsecurity.authz.SimpleAuthorizationInfo var61 = new org.jsecurity.authz.SimpleAuthorizationInfo();
    var61.addRole("a2b823b1e72eae2b727289df8a00a89df8a0bab6ad8a89c4c5c7a9b62a270000");
    org.jsecurity.session.UnknownSessionException var68 = new org.jsecurity.session.UnknownSessionException("dd\uFFFD", (java.io.Serializable)100.0f);
    org.jsecurity.subject.SubjectException var69 = new org.jsecurity.subject.SubjectException("dd\uFFFD", (java.lang.Throwable)var68);
    org.jsecurity.io.SerializationException var70 = new org.jsecurity.io.SerializationException("", (java.lang.Throwable)var69);
    java.lang.Throwable[] var71 = var69.getSuppressed();
    java.util.Set var72 = org.jsecurity.util.CollectionUtils.asSet((java.lang.Object[])var71);
    var61.addRoles((java.util.Collection)var72);
    var49.setRoles(var72);
    org.jsecurity.authz.SimpleRole var75 = new org.jsecurity.authz.SimpleRole("org.jsecurity.authz.UnauthorizedException: org.jsecurity.session.ExpiredSessionException: ", var72);
    org.jsecurity.authc.SimpleAccount var76 = new org.jsecurity.authc.SimpleAccount((org.jsecurity.subject.PrincipalCollection)var26, (java.lang.Object)"", var47, var72);
    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      var0.checkPermissions((org.jsecurity.subject.PrincipalCollection)var7, (java.util.Collection)var47);
      fail("Expected exception of type java.util.NoSuchElementException");
    } catch (java.util.NoSuchElementException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var2);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var3);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var4);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var15 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var17);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var18);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var19);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var20 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var28);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var29);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var30);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var46);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var47);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var57);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var58);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var60);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var71);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var72);

  }

  public void test361() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest2.test361");


    org.jsecurity.config.IniConfiguration var0 = new org.jsecurity.config.IniConfiguration();
    var0.setConfigUrl("hi!");
    var0.setConfig("org.jsecurity.realm.SimpleAccountRealm-52-authorization");
    org.jsecurity.mgt.SecurityManager var5 = var0.getSecurityManager();
    org.jsecurity.mgt.SecurityManager var6 = var0.getSecurityManager();
    var0.setConfigUrl("7dd9d095-6c41-447c-a2f6-e2c6c8807c11");
    var0.setConfigUrl("f3cec280-b0d4-4d1e-9ce8-a8b745fa003b");
    var0.setConfigUrl("\uFFFD\uFFFD#\uFFFD\uFFFD.\uFFFD+r\uFFFD\u6959(\uFFFD\uFFFDW\uFFFDq\uFFFD.\uFFFD\uFFFD^jY\uFFFDj\uFFFDa\uFFFD\uFFFD\uFFFDj\u0628");
    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      var0.load("4f79d01b-a90a-4319-b7ab-e8e15489bc6e");
      fail("Expected exception of type org.jsecurity.config.ConfigurationException");
    } catch (org.jsecurity.config.ConfigurationException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var5);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var6);

  }

  public void test362() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest2.test362");


    org.jsecurity.realm.text.TextConfigurationRealm var0 = new org.jsecurity.realm.text.TextConfigurationRealm();
    org.jsecurity.realm.text.TextConfigurationRealm var1 = new org.jsecurity.realm.text.TextConfigurationRealm();
    java.io.InputStream var3 = org.jsecurity.util.ClassUtils.getResourceAsStream("");
    java.lang.Object[] var4 = new java.lang.Object[] { var3};
    java.util.List var5 = org.jsecurity.util.CollectionUtils.asList(var4);
    org.jsecurity.authc.pam.ModularRealmAuthenticator var6 = new org.jsecurity.authc.pam.ModularRealmAuthenticator(var5);
    org.jsecurity.subject.SimplePrincipalCollection var8 = new org.jsecurity.subject.SimplePrincipalCollection((java.util.Collection)var5, "org.jsecurity.authz.UnauthorizedException: org.jsecurity.session.ExpiredSessionException: ");
    org.jsecurity.session.UnknownSessionException var13 = new org.jsecurity.session.UnknownSessionException("dd\uFFFD", (java.io.Serializable)100.0f);
    org.jsecurity.session.SessionException var15 = new org.jsecurity.session.SessionException("dd\uFFFD", (java.lang.Throwable)var13, (java.io.Serializable)0);
    org.jsecurity.session.SessionException var16 = new org.jsecurity.session.SessionException("dd\uFFFD", (java.lang.Throwable)var13);
    var8.add((java.lang.Object)var16, "org.jsecurity.config.ConfigurationException: dd\uFFFD");
    var1.onLogout((org.jsecurity.subject.PrincipalCollection)var8);
    java.util.Collection var21 = var8.fromRealm("\u0000\u0000\u0000");
    var0.onLogout((org.jsecurity.subject.PrincipalCollection)var8);
    java.util.Set var23 = var8.asSet();
    org.jsecurity.authz.ModularRealmAuthorizer var24 = new org.jsecurity.authz.ModularRealmAuthorizer((java.util.Collection)var23);
    org.jsecurity.realm.text.PropertiesRealm var25 = new org.jsecurity.realm.text.PropertiesRealm();
    var25.setRoleDefinitions("5dd0c65d-1422-49c2-becb-9e8dca619ab3");
    var25.setUseXmlFormat(true);
    var25.setResourcePath("b6a77f71-73c4-466a-903e-72fc5968f9ac");
    org.jsecurity.mgt.DefaultSecurityManager var32 = new org.jsecurity.mgt.DefaultSecurityManager();
    java.io.InputStream var34 = org.jsecurity.util.ClassUtils.getResourceAsStream("");
    java.lang.Object[] var35 = new java.lang.Object[] { var34};
    java.util.List var36 = org.jsecurity.util.CollectionUtils.asList(var35);
    org.jsecurity.authc.pam.ModularRealmAuthenticator var37 = new org.jsecurity.authc.pam.ModularRealmAuthenticator(var36);
    org.jsecurity.authc.pam.AllSuccessfulModularAuthenticationStrategy var38 = new org.jsecurity.authc.pam.AllSuccessfulModularAuthenticationStrategy();
    var37.setModularAuthenticationStrategy((org.jsecurity.authc.pam.ModularAuthenticationStrategy)var38);
    org.jsecurity.authz.SimpleAuthorizationInfo var40 = new org.jsecurity.authz.SimpleAuthorizationInfo();
    var40.addStringPermission("hi!");
    java.io.InputStream var44 = org.jsecurity.util.ClassUtils.getResourceAsStream("");
    java.lang.Object[] var45 = new java.lang.Object[] { var44};
    java.util.List var46 = org.jsecurity.util.CollectionUtils.asList(var45);
    var40.addRoles((java.util.Collection)var46);
    var37.setAuthenticationListeners((java.util.Collection)var46);
    var32.setSessionListeners((java.util.Collection)var46);
    org.jsecurity.realm.text.TextConfigurationRealm var50 = new org.jsecurity.realm.text.TextConfigurationRealm();
    java.io.InputStream var52 = org.jsecurity.util.ClassUtils.getResourceAsStream("");
    java.lang.Object[] var53 = new java.lang.Object[] { var52};
    java.util.List var54 = org.jsecurity.util.CollectionUtils.asList(var53);
    org.jsecurity.authc.pam.ModularRealmAuthenticator var55 = new org.jsecurity.authc.pam.ModularRealmAuthenticator(var54);
    org.jsecurity.subject.SimplePrincipalCollection var57 = new org.jsecurity.subject.SimplePrincipalCollection((java.util.Collection)var54, "org.jsecurity.authz.UnauthorizedException: org.jsecurity.session.ExpiredSessionException: ");
    org.jsecurity.session.UnknownSessionException var62 = new org.jsecurity.session.UnknownSessionException("dd\uFFFD", (java.io.Serializable)100.0f);
    org.jsecurity.session.SessionException var64 = new org.jsecurity.session.SessionException("dd\uFFFD", (java.lang.Throwable)var62, (java.io.Serializable)0);
    org.jsecurity.session.SessionException var65 = new org.jsecurity.session.SessionException("dd\uFFFD", (java.lang.Throwable)var62);
    var57.add((java.lang.Object)var65, "org.jsecurity.config.ConfigurationException: dd\uFFFD");
    var50.onLogout((org.jsecurity.subject.PrincipalCollection)var57);
    org.jsecurity.authc.pam.FirstSuccessfulAuthenticationStrategy var69 = new org.jsecurity.authc.pam.FirstSuccessfulAuthenticationStrategy();
    org.jsecurity.authz.UnauthorizedException var71 = new org.jsecurity.authz.UnauthorizedException("org.jsecurity.config.ConfigurationException: dd\uFFFD");
    java.lang.Throwable[] var72 = var71.getSuppressed();
    java.util.List var73 = org.jsecurity.util.CollectionUtils.asList((java.lang.Object[])var72);
    org.jsecurity.authc.UsernamePasswordToken var74 = new org.jsecurity.authc.UsernamePasswordToken();
    java.lang.String var75 = var74.getUsername();
    java.net.InetAddress var76 = var74.getInetAddress();
    org.jsecurity.authc.AuthenticationInfo var77 = var69.beforeAllAttempts((java.util.Collection)var73, (org.jsecurity.authc.AuthenticationToken)var74);
    boolean[] var78 = var32.hasRoles((org.jsecurity.subject.PrincipalCollection)var57, var73);
    org.jsecurity.authz.permission.WildcardPermissionResolver var79 = new org.jsecurity.authz.permission.WildcardPermissionResolver();
    org.jsecurity.authz.Permission var81 = var79.resolvePermission("hi!");
    org.jsecurity.authz.Permission var83 = var79.resolvePermission("hi!");
    var32.setPermissionResolver((org.jsecurity.authz.permission.PermissionResolver)var79);
    var25.setPermissionResolver((org.jsecurity.authz.permission.PermissionResolver)var79);
    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      var24.setPermissionResolver((org.jsecurity.authz.permission.PermissionResolver)var79);
      fail("Expected exception of type java.lang.ClassCastException");
    } catch (java.lang.ClassCastException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var3);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var4);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var5);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var21);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var23);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var34);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var35);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var36);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var44);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var45);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var46);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var52);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var53);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var54);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var72);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var73);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var75);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var76);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var77);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var78);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var81);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var83);

  }

  public void test363() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest2.test363");


    org.jsecurity.realm.activedirectory.ActiveDirectoryRealm var0 = new org.jsecurity.realm.activedirectory.ActiveDirectoryRealm();
    var0.setPrincipalSuffix("");
    java.io.InputStream var4 = org.jsecurity.util.ClassUtils.getResourceAsStream("");
    java.lang.Object[] var5 = new java.lang.Object[] { var4};
    java.util.List var6 = org.jsecurity.util.CollectionUtils.asList(var5);
    org.jsecurity.authc.pam.ModularRealmAuthenticator var7 = new org.jsecurity.authc.pam.ModularRealmAuthenticator(var6);
    org.jsecurity.subject.SimplePrincipalCollection var9 = new org.jsecurity.subject.SimplePrincipalCollection((java.util.Collection)var6, "org.jsecurity.authz.UnauthorizedException: org.jsecurity.session.ExpiredSessionException: ");
    org.jsecurity.session.UnknownSessionException var14 = new org.jsecurity.session.UnknownSessionException("dd\uFFFD", (java.io.Serializable)100.0f);
    org.jsecurity.session.SessionException var16 = new org.jsecurity.session.SessionException("dd\uFFFD", (java.lang.Throwable)var14, (java.io.Serializable)0);
    org.jsecurity.session.SessionException var17 = new org.jsecurity.session.SessionException("dd\uFFFD", (java.lang.Throwable)var14);
    var9.add((java.lang.Object)var17, "org.jsecurity.config.ConfigurationException: dd\uFFFD");
    java.util.Set var20 = var9.asSet();
    boolean var21 = var9.isEmpty();
    org.jsecurity.codec.CodecException var24 = new org.jsecurity.codec.CodecException("dd\uFFFD");
    org.jsecurity.authc.ConcurrentAccessException var25 = new org.jsecurity.authc.ConcurrentAccessException("org.jsecurity.authz.UnauthorizedException: org.jsecurity.session.ExpiredSessionException: ", (java.lang.Throwable)var24);
    org.jsecurity.subject.SimplePrincipalCollection var27 = new org.jsecurity.subject.SimplePrincipalCollection((java.lang.Object)var24, "");
    boolean var28 = var27.isEmpty();
    java.util.List var29 = var27.asList();
    org.jsecurity.authc.pam.ModularRealmAuthenticator var30 = new org.jsecurity.authc.pam.ModularRealmAuthenticator(var29);
    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      var0.checkRoles((org.jsecurity.subject.PrincipalCollection)var9, (java.util.Collection)var29);
      fail("Expected exception of type java.util.NoSuchElementException");
    } catch (java.util.NoSuchElementException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var4);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var5);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var6);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var20);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var21 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var28 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var29);

  }

  public void test364() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest2.test364");


    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      org.jsecurity.crypto.hash.Md2Hash var1 = org.jsecurity.crypto.hash.Md2Hash.fromHexString("b74f4674-5868-4e94-a7d5-832b6ef0fcdb");
      fail("Expected exception of type java.lang.IllegalArgumentException");
    } catch (java.lang.IllegalArgumentException e) {
      // Expected exception.
    }

  }

  public void test365() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest2.test365");


    org.jsecurity.authc.ConcurrentAccessException var1 = new org.jsecurity.authc.ConcurrentAccessException();
    org.jsecurity.authz.HostUnauthorizedException var2 = new org.jsecurity.authz.HostUnauthorizedException("org.jsecurity.authc.CredentialsException: 783ccd31-48a8-42dd-890f-df885a7baaff", (java.lang.Throwable)var1);
    org.jsecurity.authz.UnauthenticatedException var3 = new org.jsecurity.authz.UnauthenticatedException((java.lang.Throwable)var2);

  }

  public void test366() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest2.test366");


    org.jsecurity.realm.SimpleAccountRealm var1 = new org.jsecurity.realm.SimpleAccountRealm("hi!");
    java.lang.Class var2 = var1.getAuthenticationTokenClass();
    org.jsecurity.session.mgt.eis.MemorySessionDAO var3 = new org.jsecurity.session.mgt.eis.MemorySessionDAO();
    org.jsecurity.cache.Cache var4 = var3.getActiveSessionsCache();
    org.jsecurity.cache.CacheManager var5 = var3.getCacheManager();
    var1.setCacheManager(var5);
    var1.addAccount("a2b823b1e72eae2b727289df8a00a89df8a0bab6ad8a89c4c5c7a9b62a270000", "org.jsecurity.config.ConfigurationException: dd\uFFFD");
    java.lang.String var10 = var1.getAuthorizationCacheName();
    var1.afterAuthorizationCacheSet();
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var2);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var4);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var5);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var10 + "' != '" + "org.jsecurity.realm.SimpleAccountRealm-370-authorization"+ "'", var10.equals("org.jsecurity.realm.SimpleAccountRealm-370-authorization"));

  }

  public void test367() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest2.test367");


    org.jsecurity.session.mgt.DefaultSessionManager var0 = new org.jsecurity.session.mgt.DefaultSessionManager();
    org.jsecurity.session.mgt.eis.MemorySessionDAO var1 = new org.jsecurity.session.mgt.eis.MemorySessionDAO();
    org.jsecurity.cache.Cache var2 = var1.getActiveSessionsCache();
    org.jsecurity.cache.CacheManager var3 = var1.getCacheManager();
    org.jsecurity.cache.HashtableCacheManager var4 = new org.jsecurity.cache.HashtableCacheManager();
    org.jsecurity.cache.Cache var6 = var4.getCache("\u0000\u0000");
    var1.setActiveSessionsCache(var6);
    java.io.InputStream var9 = org.jsecurity.util.ClassUtils.getResourceAsStream("");
    java.lang.Object[] var10 = new java.lang.Object[] { var9};
    java.util.List var11 = org.jsecurity.util.CollectionUtils.asList(var10);
    org.jsecurity.authc.pam.ModularRealmAuthenticator var12 = new org.jsecurity.authc.pam.ModularRealmAuthenticator(var11);
    org.jsecurity.authc.pam.AllSuccessfulModularAuthenticationStrategy var13 = new org.jsecurity.authc.pam.AllSuccessfulModularAuthenticationStrategy();
    var12.setModularAuthenticationStrategy((org.jsecurity.authc.pam.ModularAuthenticationStrategy)var13);
    org.jsecurity.authz.SimpleAuthorizationInfo var15 = new org.jsecurity.authz.SimpleAuthorizationInfo();
    var15.addStringPermission("hi!");
    java.io.InputStream var19 = org.jsecurity.util.ClassUtils.getResourceAsStream("");
    java.lang.Object[] var20 = new java.lang.Object[] { var19};
    java.util.List var21 = org.jsecurity.util.CollectionUtils.asList(var20);
    var15.addRoles((java.util.Collection)var21);
    var12.setAuthenticationListeners((java.util.Collection)var21);
    org.jsecurity.realm.activedirectory.ActiveDirectoryRealm var24 = new org.jsecurity.realm.activedirectory.ActiveDirectoryRealm();
    var24.setPrincipalSuffix("");
    var12.setRealm((org.jsecurity.realm.Realm)var24);
    org.jsecurity.cache.HashtableCacheManager var28 = new org.jsecurity.cache.HashtableCacheManager();
    org.jsecurity.cache.Cache var30 = var28.getCache("\u0000\u0000");
    var24.setAuthorizationCache(var30);
    var1.setActiveSessionsCache(var30);
    org.jsecurity.session.mgt.SimpleSession var33 = new org.jsecurity.session.mgt.SimpleSession();
    java.io.Serializable var34 = var1.create((org.jsecurity.session.Session)var33);
    var0.setSessionDAO((org.jsecurity.session.mgt.eis.SessionDAO)var1);
    org.jsecurity.authc.pam.AllSuccessfulModularAuthenticationStrategy var36 = new org.jsecurity.authc.pam.AllSuccessfulModularAuthenticationStrategy();
    char[] var38 = new char[] { };
    org.jsecurity.authc.UsernamePasswordToken var40 = new org.jsecurity.authc.UsernamePasswordToken("hi!", var38, true);
    org.jsecurity.authc.SimpleAccount var41 = new org.jsecurity.authc.SimpleAccount();
    var41.setCredentialsExpired(false);
    boolean var44 = var41.isLocked();
    org.jsecurity.authc.AuthenticationInfo var45 = var36.afterAllAttempts((org.jsecurity.authc.AuthenticationToken)var40, (org.jsecurity.authc.AuthenticationInfo)var41);
    char[] var49 = new char[] { '4', '#'};
    org.jsecurity.authc.UsernamePasswordToken var50 = new org.jsecurity.authc.UsernamePasswordToken("\u0000\u0000", var49);
    org.jsecurity.authc.SimpleAccount var51 = new org.jsecurity.authc.SimpleAccount();
    var51.setCredentialsExpired(false);
    var51.setCredentialsExpired(false);
    boolean var56 = var51.isCredentialsExpired();
    org.jsecurity.authc.AuthenticationInfo var57 = var36.afterAllAttempts((org.jsecurity.authc.AuthenticationToken)var50, (org.jsecurity.authc.AuthenticationInfo)var51);
    org.jsecurity.realm.activedirectory.ActiveDirectoryRealm var58 = new org.jsecurity.realm.activedirectory.ActiveDirectoryRealm();
    org.jsecurity.authc.credential.Sha256CredentialsMatcher var59 = new org.jsecurity.authc.credential.Sha256CredentialsMatcher();
    var58.setCredentialsMatcher((org.jsecurity.authc.credential.CredentialsMatcher)var59);
    java.lang.String var61 = var58.getAuthorizationCacheName();
    org.jsecurity.authc.UsernamePasswordToken var62 = new org.jsecurity.authc.UsernamePasswordToken();
    java.lang.String var63 = var62.getUsername();
    java.lang.Object var64 = var62.getPrincipal();
    boolean var65 = var58.supports((org.jsecurity.authc.AuthenticationToken)var62);
    org.jsecurity.session.UnknownSessionException var69 = new org.jsecurity.session.UnknownSessionException("dd\uFFFD", (java.io.Serializable)100.0f);
    org.jsecurity.session.SessionException var71 = new org.jsecurity.session.SessionException("dd\uFFFD", (java.lang.Throwable)var69, (java.io.Serializable)0);
    org.jsecurity.authc.SimpleAuthenticationInfo var74 = new org.jsecurity.authc.SimpleAuthenticationInfo((java.lang.Object)0, (java.lang.Object)10, "hi!");
    java.lang.Object var75 = var74.getCredentials();
    java.lang.String var76 = var74.toString();
    org.jsecurity.authc.AuthenticationInfo var77 = var36.afterAllAttempts((org.jsecurity.authc.AuthenticationToken)var62, (org.jsecurity.authc.AuthenticationInfo)var74);
    org.jsecurity.session.mgt.eis.MemorySessionDAO var78 = new org.jsecurity.session.mgt.eis.MemorySessionDAO();
    org.jsecurity.cache.Cache var79 = var78.getActiveSessionsCache();
    var78.setActiveSessionsCacheName("dd\uFFFD");
    var74.setCredentials((java.lang.Object)var78);
    var0.setSessionDAO((org.jsecurity.session.mgt.eis.SessionDAO)var78);
    org.jsecurity.session.mgt.quartz.QuartzSessionValidationScheduler var84 = new org.jsecurity.session.mgt.quartz.QuartzSessionValidationScheduler();
    var0.setSessionValidationScheduler((org.jsecurity.session.mgt.SessionValidationScheduler)var84);
    org.jsecurity.cache.ehcache.EhCacheManager var86 = new org.jsecurity.cache.ehcache.EhCacheManager();
    net.sf.ehcache.CacheManager var87 = var86.getCacheManager();
    net.sf.ehcache.CacheManager var88 = var86.getCacheManager();
    var0.setCacheManager((org.jsecurity.cache.CacheManager)var86);
    org.jsecurity.session.mgt.eis.SessionDAO var90 = var0.getSessionDAO();
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var2);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var3);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var6);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var9);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var10);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var11);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var19);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var20);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var21);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var30);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var34 + "' != '" + "b3705370-219a-4544-a93f-b155451c1af5"+ "'", var34.equals("b3705370-219a-4544-a93f-b155451c1af5"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var38);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var44 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var45);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var49);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var56 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var57);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var61);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var63);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var64);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var65 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var75 + "' != '" + 10+ "'", var75.equals(10));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var77);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var79);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var87);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var88);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var90);

  }

  public void test368() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest2.test368");


    org.jsecurity.session.mgt.SimpleSession var0 = new org.jsecurity.session.mgt.SimpleSession();
    var0.touch();
    var0.validate();
    org.jsecurity.session.mgt.SimpleSession var3 = new org.jsecurity.session.mgt.SimpleSession();
    var3.setTimeout((-1L));
    org.jsecurity.session.mgt.SimpleSession var6 = new org.jsecurity.session.mgt.SimpleSession();
    java.util.Date var7 = var6.getLastAccessTime();
    var3.setLastAccessTime(var7);
    org.jsecurity.session.mgt.SimpleSession var9 = new org.jsecurity.session.mgt.SimpleSession();
    java.util.Date var10 = var9.getLastAccessTime();
    var3.setStopTimestamp(var10);
    var0.setLastAccessTime(var10);
    java.io.Serializable var13 = var0.getId();
    org.jsecurity.authc.ConcurrentAccessException var15 = new org.jsecurity.authc.ConcurrentAccessException("");
    org.jsecurity.authc.pam.UnsupportedTokenException var16 = new org.jsecurity.authc.pam.UnsupportedTokenException();
    var15.addSuppressed((java.lang.Throwable)var16);
    java.lang.Object var18 = var0.removeAttribute((java.lang.Object)var16);
    boolean var19 = var0.isValid();
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var7);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var10);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var13);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var18);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var19 == true);

  }

  public void test369() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest2.test369");


    boolean var1 = org.jsecurity.util.ClassUtils.isAvailable("5e8a13e5-9407-4da8-a0bf-f6368dff7e1a");
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var1 == false);

  }

  public void test370() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest2.test370");


    org.jsecurity.subject.InvalidSubjectException var2 = new org.jsecurity.subject.InvalidSubjectException("dd\uFFFD");
    org.jsecurity.session.ExpiredSessionException var3 = new org.jsecurity.session.ExpiredSessionException("org.jsecurity.config.ConfigurationException: dd\uFFFD", (java.io.Serializable)var2);
    org.jsecurity.session.SessionException var4 = new org.jsecurity.session.SessionException((java.lang.Throwable)var3);
    org.jsecurity.session.InvalidSessionException var5 = new org.jsecurity.session.InvalidSessionException((java.lang.Throwable)var3);

  }

  public void test371() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest2.test371");


    org.jsecurity.mgt.DefaultSecurityManager var0 = new org.jsecurity.mgt.DefaultSecurityManager();
    java.io.InputStream var2 = org.jsecurity.util.ClassUtils.getResourceAsStream("");
    java.lang.Object[] var3 = new java.lang.Object[] { var2};
    java.util.List var4 = org.jsecurity.util.CollectionUtils.asList(var3);
    org.jsecurity.authc.pam.ModularRealmAuthenticator var5 = new org.jsecurity.authc.pam.ModularRealmAuthenticator(var4);
    org.jsecurity.authc.pam.AllSuccessfulModularAuthenticationStrategy var6 = new org.jsecurity.authc.pam.AllSuccessfulModularAuthenticationStrategy();
    var5.setModularAuthenticationStrategy((org.jsecurity.authc.pam.ModularAuthenticationStrategy)var6);
    org.jsecurity.authz.SimpleAuthorizationInfo var8 = new org.jsecurity.authz.SimpleAuthorizationInfo();
    var8.addStringPermission("hi!");
    java.io.InputStream var12 = org.jsecurity.util.ClassUtils.getResourceAsStream("");
    java.lang.Object[] var13 = new java.lang.Object[] { var12};
    java.util.List var14 = org.jsecurity.util.CollectionUtils.asList(var13);
    var8.addRoles((java.util.Collection)var14);
    var5.setAuthenticationListeners((java.util.Collection)var14);
    var0.setSessionListeners((java.util.Collection)var14);
    java.util.Collection var18 = var0.getRealms();
    org.jsecurity.authc.pam.FirstSuccessfulAuthenticationStrategy var19 = new org.jsecurity.authc.pam.FirstSuccessfulAuthenticationStrategy();
    org.jsecurity.authz.UnauthorizedException var21 = new org.jsecurity.authz.UnauthorizedException("org.jsecurity.config.ConfigurationException: dd\uFFFD");
    java.lang.Throwable[] var22 = var21.getSuppressed();
    java.util.List var23 = org.jsecurity.util.CollectionUtils.asList((java.lang.Object[])var22);
    org.jsecurity.authc.UsernamePasswordToken var24 = new org.jsecurity.authc.UsernamePasswordToken();
    java.lang.String var25 = var24.getUsername();
    java.net.InetAddress var26 = var24.getInetAddress();
    org.jsecurity.authc.AuthenticationInfo var27 = var19.beforeAllAttempts((java.util.Collection)var23, (org.jsecurity.authc.AuthenticationToken)var24);
    org.jsecurity.realm.SimpleAccountRealm var29 = new org.jsecurity.realm.SimpleAccountRealm("hi!");
    java.lang.Class var30 = var29.getAuthenticationTokenClass();
    java.util.Collection var31 = org.jsecurity.util.CollectionUtils.emptyCollection(var30);
    org.jsecurity.authc.pam.AllSuccessfulModularAuthenticationStrategy var32 = new org.jsecurity.authc.pam.AllSuccessfulModularAuthenticationStrategy();
    char[] var34 = new char[] { };
    org.jsecurity.authc.UsernamePasswordToken var36 = new org.jsecurity.authc.UsernamePasswordToken("hi!", var34, true);
    org.jsecurity.authc.SimpleAccount var37 = new org.jsecurity.authc.SimpleAccount();
    var37.setCredentialsExpired(false);
    boolean var40 = var37.isLocked();
    org.jsecurity.authc.AuthenticationInfo var41 = var32.afterAllAttempts((org.jsecurity.authc.AuthenticationToken)var36, (org.jsecurity.authc.AuthenticationInfo)var37);
    org.jsecurity.authc.AuthenticationInfo var42 = var19.beforeAllAttempts(var31, (org.jsecurity.authc.AuthenticationToken)var36);
    var0.setAuthenticationListeners(var31);
    org.jsecurity.authz.Authorizer var44 = var0.getAuthorizer();
    byte[] var48 = new byte[] { (byte)100, (byte)100, (byte)(-1)};
    java.lang.String var49 = org.jsecurity.codec.CodecSupport.toString(var48);
    char[] var50 = org.jsecurity.codec.CodecSupport.toChars(var48);
    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      var0.setRememberMeCipherKey(var48);
      fail("Expected exception of type java.lang.IllegalStateException");
    } catch (java.lang.IllegalStateException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var2);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var3);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var4);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var12);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var13);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var14);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var18);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var22);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var23);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var25);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var26);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var27);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var30);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var31);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var34);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var40 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var41);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var42);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var44);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var48);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var49 + "' != '" + "dd\uFFFD"+ "'", var49.equals("dd\uFFFD"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var50);

  }

  public void test372() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest2.test372");


    org.jsecurity.session.mgt.SimpleSession var0 = new org.jsecurity.session.mgt.SimpleSession();
    var0.touch();
    var0.validate();
    org.jsecurity.session.mgt.SimpleSession var3 = new org.jsecurity.session.mgt.SimpleSession();
    var3.setTimeout((-1L));
    org.jsecurity.session.mgt.SimpleSession var6 = new org.jsecurity.session.mgt.SimpleSession();
    java.util.Date var7 = var6.getLastAccessTime();
    var3.setLastAccessTime(var7);
    org.jsecurity.session.mgt.SimpleSession var9 = new org.jsecurity.session.mgt.SimpleSession();
    java.util.Date var10 = var9.getLastAccessTime();
    var3.setStopTimestamp(var10);
    var0.setLastAccessTime(var10);
    java.io.Serializable var13 = var0.getId();
    java.util.Date var14 = var0.getStopTimestamp();
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var7);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var10);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var13);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var14);

  }

  public void test373() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest2.test373");


    org.jsecurity.realm.ldap.DefaultLdapContextFactory var0 = new org.jsecurity.realm.ldap.DefaultLdapContextFactory();
    var0.setSystemUsername("org.jsecurity.authz.UnauthorizedException: org.jsecurity.session.ExpiredSessionException: ");
    org.jsecurity.authz.SimpleAuthorizationInfo var3 = new org.jsecurity.authz.SimpleAuthorizationInfo();
    org.jsecurity.session.UnknownSessionException var8 = new org.jsecurity.session.UnknownSessionException("dd\uFFFD", (java.io.Serializable)100.0f);
    org.jsecurity.subject.SubjectException var9 = new org.jsecurity.subject.SubjectException("dd\uFFFD", (java.lang.Throwable)var8);
    org.jsecurity.io.SerializationException var10 = new org.jsecurity.io.SerializationException("", (java.lang.Throwable)var9);
    java.lang.Throwable[] var11 = var9.getSuppressed();
    java.util.Set var12 = org.jsecurity.util.CollectionUtils.asSet((java.lang.Object[])var11);
    var3.setStringPermissions(var12);
    java.util.Set var14 = var3.getRoles();
    org.jsecurity.authz.SimpleAuthorizationInfo var15 = new org.jsecurity.authz.SimpleAuthorizationInfo();
    var15.addRole("a2b823b1e72eae2b727289df8a00a89df8a0bab6ad8a89c4c5c7a9b62a270000");
    org.jsecurity.session.UnknownSessionException var22 = new org.jsecurity.session.UnknownSessionException("dd\uFFFD", (java.io.Serializable)100.0f);
    org.jsecurity.subject.SubjectException var23 = new org.jsecurity.subject.SubjectException("dd\uFFFD", (java.lang.Throwable)var22);
    org.jsecurity.io.SerializationException var24 = new org.jsecurity.io.SerializationException("", (java.lang.Throwable)var23);
    java.lang.Throwable[] var25 = var23.getSuppressed();
    java.util.Set var26 = org.jsecurity.util.CollectionUtils.asSet((java.lang.Object[])var25);
    var15.addRoles((java.util.Collection)var26);
    var3.setRoles(var26);
    org.jsecurity.authz.SimpleAuthorizationInfo var29 = new org.jsecurity.authz.SimpleAuthorizationInfo();
    org.jsecurity.session.UnknownSessionException var34 = new org.jsecurity.session.UnknownSessionException("dd\uFFFD", (java.io.Serializable)100.0f);
    org.jsecurity.subject.SubjectException var35 = new org.jsecurity.subject.SubjectException("dd\uFFFD", (java.lang.Throwable)var34);
    org.jsecurity.io.SerializationException var36 = new org.jsecurity.io.SerializationException("", (java.lang.Throwable)var35);
    java.lang.Throwable[] var37 = var35.getSuppressed();
    java.util.Set var38 = org.jsecurity.util.CollectionUtils.asSet((java.lang.Object[])var37);
    var29.setStringPermissions(var38);
    java.util.Set var40 = var29.getRoles();
    org.jsecurity.authz.SimpleAuthorizationInfo var41 = new org.jsecurity.authz.SimpleAuthorizationInfo();
    var41.addRole("a2b823b1e72eae2b727289df8a00a89df8a0bab6ad8a89c4c5c7a9b62a270000");
    org.jsecurity.session.UnknownSessionException var48 = new org.jsecurity.session.UnknownSessionException("dd\uFFFD", (java.io.Serializable)100.0f);
    org.jsecurity.subject.SubjectException var49 = new org.jsecurity.subject.SubjectException("dd\uFFFD", (java.lang.Throwable)var48);
    org.jsecurity.io.SerializationException var50 = new org.jsecurity.io.SerializationException("", (java.lang.Throwable)var49);
    java.lang.Throwable[] var51 = var49.getSuppressed();
    java.util.Set var52 = org.jsecurity.util.CollectionUtils.asSet((java.lang.Object[])var51);
    var41.addRoles((java.util.Collection)var52);
    var29.setRoles(var52);
    var3.setRoles(var52);
    org.jsecurity.authz.ModularRealmAuthorizer var56 = new org.jsecurity.authz.ModularRealmAuthorizer((java.util.Collection)var52);
    org.jsecurity.realm.activedirectory.ActiveDirectoryRealm var59 = new org.jsecurity.realm.activedirectory.ActiveDirectoryRealm();
    org.jsecurity.authc.credential.Sha256CredentialsMatcher var60 = new org.jsecurity.authc.credential.Sha256CredentialsMatcher();
    var59.setCredentialsMatcher((org.jsecurity.authc.credential.CredentialsMatcher)var60);
    java.lang.String var62 = var59.getAuthorizationCacheName();
    var59.setPrincipalSuffix("org.jsecurity.config.ConfigurationException: dd\uFFFD");
    org.jsecurity.authz.permission.PermissionResolver var65 = var59.getPermissionResolver();
    java.util.Set var66 = org.jsecurity.util.PermissionUtils.resolveDelimitedPermissions("NfxhYN7ItBfRAmDBmprtU73ghfEEPpcDJrHPkZ06wiY=", var65);
    org.jsecurity.realm.text.TextConfigurationRealm var67 = new org.jsecurity.realm.text.TextConfigurationRealm();
    java.io.InputStream var69 = org.jsecurity.util.ClassUtils.getResourceAsStream("");
    java.lang.Object[] var70 = new java.lang.Object[] { var69};
    java.util.List var71 = org.jsecurity.util.CollectionUtils.asList(var70);
    org.jsecurity.authc.pam.ModularRealmAuthenticator var72 = new org.jsecurity.authc.pam.ModularRealmAuthenticator(var71);
    org.jsecurity.subject.SimplePrincipalCollection var74 = new org.jsecurity.subject.SimplePrincipalCollection((java.util.Collection)var71, "org.jsecurity.authz.UnauthorizedException: org.jsecurity.session.ExpiredSessionException: ");
    org.jsecurity.session.UnknownSessionException var79 = new org.jsecurity.session.UnknownSessionException("dd\uFFFD", (java.io.Serializable)100.0f);
    org.jsecurity.session.SessionException var81 = new org.jsecurity.session.SessionException("dd\uFFFD", (java.lang.Throwable)var79, (java.io.Serializable)0);
    org.jsecurity.session.SessionException var82 = new org.jsecurity.session.SessionException("dd\uFFFD", (java.lang.Throwable)var79);
    var74.add((java.lang.Object)var82, "org.jsecurity.config.ConfigurationException: dd\uFFFD");
    var67.onLogout((org.jsecurity.subject.PrincipalCollection)var74);
    java.util.Set var87 = org.jsecurity.util.PermissionUtils.toPermissionStrings("org.jsecurity.config.ConfigurationException: dd\uFFFD");
    org.jsecurity.authz.SimpleAuthorizationInfo var88 = new org.jsecurity.authz.SimpleAuthorizationInfo(var87);
    org.jsecurity.authz.SimpleAuthorizingAccount var89 = new org.jsecurity.authz.SimpleAuthorizingAccount((org.jsecurity.subject.PrincipalCollection)var74, (java.lang.Object)var87);
    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      org.jsecurity.authz.SimpleAuthorizingAccount var90 = new org.jsecurity.authz.SimpleAuthorizingAccount((java.lang.Object)"org.jsecurity.authz.UnauthorizedException: org.jsecurity.session.ExpiredSessionException: ", (java.lang.Object)var56, "ff1bb54d-80f9-4308-a260-ff3ddf1355e9", var66, var87);
      fail("Expected exception of type java.lang.ClassCastException");
    } catch (java.lang.ClassCastException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var11);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var12);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var14);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var25);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var26);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var37);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var38);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var40);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var51);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var52);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var62);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var65);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var66);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var69);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var70);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var71);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var87);

  }

  public void test374() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest2.test374");


    org.jsecurity.jndi.JndiTemplate var0 = new org.jsecurity.jndi.JndiTemplate();
    java.util.Properties var1 = var0.getEnvironment();
    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      java.lang.Object var3 = var0.lookup("s\uFFFD\uFFFDkG\uFFFD\uFFFD\uFFFD4\uFFFDW\uFFFDi\uFFFD\uFFFDi\uFFFD\u067D\uFFFD{\uFFFD\u001F");
      fail("Expected exception of type javax.naming.NoInitialContextException");
    } catch (javax.naming.NoInitialContextException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var1);

  }

  public void test375() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest2.test375");


    java.lang.String[] var4 = org.jsecurity.util.StringUtils.split("\u0000\u0000", '4', '4', 'a');
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var4);

  }

  public void test376() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest2.test376");


    org.jsecurity.realm.SimpleAccountRealm var0 = new org.jsecurity.realm.SimpleAccountRealm();
    org.jsecurity.session.UnknownSessionException var4 = new org.jsecurity.session.UnknownSessionException("dd\uFFFD", (java.io.Serializable)100.0f);
    org.jsecurity.session.SessionException var6 = new org.jsecurity.session.SessionException("dd\uFFFD", (java.lang.Throwable)var4, (java.io.Serializable)0);
    org.jsecurity.authc.SimpleAuthenticationInfo var9 = new org.jsecurity.authc.SimpleAuthenticationInfo((java.lang.Object)0, (java.lang.Object)10, "hi!");
    java.lang.Object var10 = var9.getCredentials();
    java.lang.String var11 = var9.toString();
    org.jsecurity.realm.text.TextConfigurationRealm var12 = new org.jsecurity.realm.text.TextConfigurationRealm();
    java.io.InputStream var14 = org.jsecurity.util.ClassUtils.getResourceAsStream("");
    java.lang.Object[] var15 = new java.lang.Object[] { var14};
    java.util.List var16 = org.jsecurity.util.CollectionUtils.asList(var15);
    org.jsecurity.authc.pam.ModularRealmAuthenticator var17 = new org.jsecurity.authc.pam.ModularRealmAuthenticator(var16);
    org.jsecurity.subject.SimplePrincipalCollection var19 = new org.jsecurity.subject.SimplePrincipalCollection((java.util.Collection)var16, "org.jsecurity.authz.UnauthorizedException: org.jsecurity.session.ExpiredSessionException: ");
    org.jsecurity.session.UnknownSessionException var24 = new org.jsecurity.session.UnknownSessionException("dd\uFFFD", (java.io.Serializable)100.0f);
    org.jsecurity.session.SessionException var26 = new org.jsecurity.session.SessionException("dd\uFFFD", (java.lang.Throwable)var24, (java.io.Serializable)0);
    org.jsecurity.session.SessionException var27 = new org.jsecurity.session.SessionException("dd\uFFFD", (java.lang.Throwable)var24);
    var19.add((java.lang.Object)var27, "org.jsecurity.config.ConfigurationException: dd\uFFFD");
    var12.onLogout((org.jsecurity.subject.PrincipalCollection)var19);
    org.jsecurity.cache.HashtableCacheManager var31 = new org.jsecurity.cache.HashtableCacheManager();
    org.jsecurity.cache.Cache var33 = var31.getCache("\u0000\u0000");
    var12.setAuthorizationCache(var33);
    org.jsecurity.codec.CodecException var37 = new org.jsecurity.codec.CodecException("dd\uFFFD");
    org.jsecurity.authc.ConcurrentAccessException var38 = new org.jsecurity.authc.ConcurrentAccessException("org.jsecurity.authz.UnauthorizedException: org.jsecurity.session.ExpiredSessionException: ", (java.lang.Throwable)var37);
    org.jsecurity.subject.SimplePrincipalCollection var40 = new org.jsecurity.subject.SimplePrincipalCollection((java.lang.Object)var37, "");
    var12.onLogout((org.jsecurity.subject.PrincipalCollection)var40);
    var9.setPrincipals((org.jsecurity.subject.PrincipalCollection)var40);
    java.util.Collection var44 = var40.fromRealm("6464ff");
    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      org.jsecurity.authz.AuthorizationInfo var45 = var0.getAuthorizationInfo((org.jsecurity.subject.PrincipalCollection)var40);
      fail("Expected exception of type java.util.NoSuchElementException");
    } catch (java.util.NoSuchElementException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var10 + "' != '" + 10+ "'", var10.equals(10));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var14);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var15);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var16);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var33);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var44);

  }

  public void test377() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest2.test377");


    org.jsecurity.io.IniResource var0 = new org.jsecurity.io.IniResource();
    java.util.Map var1 = var0.getSections();
    var0.setCharsetName("0220fc2d-2559-421b-822b-6ed559f96c25");
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var1);

  }

  public void test378() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest2.test378");


    org.jsecurity.mgt.DefaultSecurityManager var0 = new org.jsecurity.mgt.DefaultSecurityManager();
    java.io.InputStream var2 = org.jsecurity.util.ClassUtils.getResourceAsStream("");
    java.lang.Object[] var3 = new java.lang.Object[] { var2};
    java.util.List var4 = org.jsecurity.util.CollectionUtils.asList(var3);
    org.jsecurity.authc.pam.ModularRealmAuthenticator var5 = new org.jsecurity.authc.pam.ModularRealmAuthenticator(var4);
    org.jsecurity.authc.pam.AllSuccessfulModularAuthenticationStrategy var6 = new org.jsecurity.authc.pam.AllSuccessfulModularAuthenticationStrategy();
    var5.setModularAuthenticationStrategy((org.jsecurity.authc.pam.ModularAuthenticationStrategy)var6);
    org.jsecurity.authz.SimpleAuthorizationInfo var8 = new org.jsecurity.authz.SimpleAuthorizationInfo();
    var8.addStringPermission("hi!");
    java.io.InputStream var12 = org.jsecurity.util.ClassUtils.getResourceAsStream("");
    java.lang.Object[] var13 = new java.lang.Object[] { var12};
    java.util.List var14 = org.jsecurity.util.CollectionUtils.asList(var13);
    var8.addRoles((java.util.Collection)var14);
    var5.setAuthenticationListeners((java.util.Collection)var14);
    var0.setSessionListeners((java.util.Collection)var14);
    org.jsecurity.realm.text.TextConfigurationRealm var18 = new org.jsecurity.realm.text.TextConfigurationRealm();
    java.io.InputStream var20 = org.jsecurity.util.ClassUtils.getResourceAsStream("");
    java.lang.Object[] var21 = new java.lang.Object[] { var20};
    java.util.List var22 = org.jsecurity.util.CollectionUtils.asList(var21);
    org.jsecurity.authc.pam.ModularRealmAuthenticator var23 = new org.jsecurity.authc.pam.ModularRealmAuthenticator(var22);
    org.jsecurity.subject.SimplePrincipalCollection var25 = new org.jsecurity.subject.SimplePrincipalCollection((java.util.Collection)var22, "org.jsecurity.authz.UnauthorizedException: org.jsecurity.session.ExpiredSessionException: ");
    org.jsecurity.session.UnknownSessionException var30 = new org.jsecurity.session.UnknownSessionException("dd\uFFFD", (java.io.Serializable)100.0f);
    org.jsecurity.session.SessionException var32 = new org.jsecurity.session.SessionException("dd\uFFFD", (java.lang.Throwable)var30, (java.io.Serializable)0);
    org.jsecurity.session.SessionException var33 = new org.jsecurity.session.SessionException("dd\uFFFD", (java.lang.Throwable)var30);
    var25.add((java.lang.Object)var33, "org.jsecurity.config.ConfigurationException: dd\uFFFD");
    var18.onLogout((org.jsecurity.subject.PrincipalCollection)var25);
    org.jsecurity.authc.pam.FirstSuccessfulAuthenticationStrategy var37 = new org.jsecurity.authc.pam.FirstSuccessfulAuthenticationStrategy();
    org.jsecurity.authz.UnauthorizedException var39 = new org.jsecurity.authz.UnauthorizedException("org.jsecurity.config.ConfigurationException: dd\uFFFD");
    java.lang.Throwable[] var40 = var39.getSuppressed();
    java.util.List var41 = org.jsecurity.util.CollectionUtils.asList((java.lang.Object[])var40);
    org.jsecurity.authc.UsernamePasswordToken var42 = new org.jsecurity.authc.UsernamePasswordToken();
    java.lang.String var43 = var42.getUsername();
    java.net.InetAddress var44 = var42.getInetAddress();
    org.jsecurity.authc.AuthenticationInfo var45 = var37.beforeAllAttempts((java.util.Collection)var41, (org.jsecurity.authc.AuthenticationToken)var42);
    boolean[] var46 = var0.hasRoles((org.jsecurity.subject.PrincipalCollection)var25, var41);
    org.jsecurity.codec.CodecException var49 = new org.jsecurity.codec.CodecException("dd\uFFFD");
    org.jsecurity.authc.ConcurrentAccessException var50 = new org.jsecurity.authc.ConcurrentAccessException("org.jsecurity.authz.UnauthorizedException: org.jsecurity.session.ExpiredSessionException: ", (java.lang.Throwable)var49);
    org.jsecurity.subject.SimplePrincipalCollection var52 = new org.jsecurity.subject.SimplePrincipalCollection((java.lang.Object)var49, "");
    java.io.InputStream var54 = org.jsecurity.util.ClassUtils.getResourceAsStream("");
    java.lang.Object[] var55 = new java.lang.Object[] { var54};
    java.util.List var56 = org.jsecurity.util.CollectionUtils.asList(var55);
    org.jsecurity.authc.pam.ModularRealmAuthenticator var57 = new org.jsecurity.authc.pam.ModularRealmAuthenticator(var56);
    var52.addAll((java.util.Collection)var56, "\u0000\u0000");
    var0.setSessionListeners((java.util.Collection)var56);
    org.jsecurity.crypto.BlowfishCipher var61 = new org.jsecurity.crypto.BlowfishCipher();
    byte[] var65 = new byte[] { (byte)100, (byte)100, (byte)(-1)};
    java.lang.String var66 = org.jsecurity.codec.CodecSupport.toString(var65);
    byte[] var68 = org.jsecurity.codec.Base64.decode("hi!");
    byte[] var69 = var61.encrypt(var65, var68);
    org.jsecurity.crypto.BlowfishCipher var70 = new org.jsecurity.crypto.BlowfishCipher();
    java.security.Key var71 = var70.getKey();
    java.security.Key var72 = var70.getKey();
    var61.setKey(var72);
    java.security.Key var74 = var61.getKey();
    byte[] var76 = org.jsecurity.codec.CodecSupport.toBytes("5dd0c65d-1422-49c2-becb-9e8dca619ab3");
    byte[] var78 = org.jsecurity.codec.Base64.encode(var76, false);
    byte[] var82 = new byte[] { (byte)100, (byte)100, (byte)(-1)};
    java.lang.String var83 = org.jsecurity.codec.CodecSupport.toString(var82);
    byte[] var85 = org.jsecurity.codec.Base64.encode(var82, false);
    byte[] var86 = org.jsecurity.codec.Base64.decode(var82);
    byte[] var87 = var61.encrypt(var76, var82);
    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      var0.setRememberMeDecryptionCipherKey(var82);
      fail("Expected exception of type java.lang.IllegalStateException");
    } catch (java.lang.IllegalStateException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var2);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var3);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var4);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var12);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var13);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var14);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var20);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var21);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var22);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var40);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var41);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var43);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var44);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var45);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var46);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var54);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var55);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var56);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var65);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var66 + "' != '" + "dd\uFFFD"+ "'", var66.equals("dd\uFFFD"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var68);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var69);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var71);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var72);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var74);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var76);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var78);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var82);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var83 + "' != '" + "dd\uFFFD"+ "'", var83.equals("dd\uFFFD"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var85);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var86);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var87);

  }

  public void test379() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest2.test379");


    org.jsecurity.session.StoppedSessionException var1 = new org.jsecurity.session.StoppedSessionException("e00f87fa-0543-46d5-b69b-14e41add033e");

  }

  public void test380() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest2.test380");


    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      org.jsecurity.crypto.hash.Md2Hash var1 = org.jsecurity.crypto.hash.Md2Hash.fromHexString("org.jsecurity.realm.text.PropertiesRealm-263-authorization");
      fail("Expected exception of type java.lang.IllegalArgumentException");
    } catch (java.lang.IllegalArgumentException e) {
      // Expected exception.
    }

  }

  public void test381() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest2.test381");


    org.jsecurity.realm.activedirectory.ActiveDirectoryRealm var0 = new org.jsecurity.realm.activedirectory.ActiveDirectoryRealm();
    var0.initAuthorizationCache();
    var0.setSearchBase("dd\uFFFD");
    var0.setUrl("guest = guest,guest\npresidentskroob = 12345,president\ndarkhelmet = ludicrousspeed,darklord,schwartz\nroot = secret,root\nlonestarr = vespa,goodguy,schwartz\n");
    org.jsecurity.cache.HashtableCache var7 = new org.jsecurity.cache.HashtableCache("b017e95a-a08d-4f3a-bab8-cc9b39ef5331");
    var0.setAuthorizationCache((org.jsecurity.cache.Cache)var7);
    org.jsecurity.session.UnknownSessionException var12 = new org.jsecurity.session.UnknownSessionException("dd\uFFFD", (java.io.Serializable)100.0f);
    org.jsecurity.session.SessionException var14 = new org.jsecurity.session.SessionException("dd\uFFFD", (java.lang.Throwable)var12, (java.io.Serializable)0);
    java.lang.Object var15 = var7.get((java.lang.Object)var14);
    org.jsecurity.util.UnknownClassException var16 = new org.jsecurity.util.UnknownClassException((java.lang.Throwable)var14);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var15);

  }

  public void test382() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest2.test382");


    java.lang.String[] var4 = org.jsecurity.util.StringUtils.split("a1bc3336-1b74-45f8-abc3-c5b4ddcead75", '#', '4', '#');
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var4);

  }

  public void test383() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest2.test383");


    org.jsecurity.realm.text.TextConfigurationRealm var0 = new org.jsecurity.realm.text.TextConfigurationRealm();
    java.io.InputStream var2 = org.jsecurity.util.ClassUtils.getResourceAsStream("");
    java.lang.Object[] var3 = new java.lang.Object[] { var2};
    java.util.List var4 = org.jsecurity.util.CollectionUtils.asList(var3);
    org.jsecurity.authc.pam.ModularRealmAuthenticator var5 = new org.jsecurity.authc.pam.ModularRealmAuthenticator(var4);
    org.jsecurity.subject.SimplePrincipalCollection var7 = new org.jsecurity.subject.SimplePrincipalCollection((java.util.Collection)var4, "org.jsecurity.authz.UnauthorizedException: org.jsecurity.session.ExpiredSessionException: ");
    org.jsecurity.session.UnknownSessionException var12 = new org.jsecurity.session.UnknownSessionException("dd\uFFFD", (java.io.Serializable)100.0f);
    org.jsecurity.session.SessionException var14 = new org.jsecurity.session.SessionException("dd\uFFFD", (java.lang.Throwable)var12, (java.io.Serializable)0);
    org.jsecurity.session.SessionException var15 = new org.jsecurity.session.SessionException("dd\uFFFD", (java.lang.Throwable)var12);
    var7.add((java.lang.Object)var15, "org.jsecurity.config.ConfigurationException: dd\uFFFD");
    var0.onLogout((org.jsecurity.subject.PrincipalCollection)var7);
    org.jsecurity.cache.HashtableCacheManager var19 = new org.jsecurity.cache.HashtableCacheManager();
    org.jsecurity.cache.Cache var21 = var19.getCache("\u0000\u0000");
    var0.setAuthorizationCache(var21);
    java.lang.String var23 = var0.getUserDefinitions();
    java.lang.String var24 = var0.getUserDefinitions();
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var2);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var3);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var4);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var21);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var23);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var24);

  }

  public void test384() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest2.test384");


    org.jsecurity.authc.CredentialsException var1 = new org.jsecurity.authc.CredentialsException("5e8ae759-0aee-439c-94b7-0d29d950b35b");

  }

  public void test385() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest2.test385");


    org.jsecurity.mgt.DefaultSecurityManager var0 = new org.jsecurity.mgt.DefaultSecurityManager();
    java.io.InputStream var2 = org.jsecurity.util.ClassUtils.getResourceAsStream("");
    java.lang.Object[] var3 = new java.lang.Object[] { var2};
    java.util.List var4 = org.jsecurity.util.CollectionUtils.asList(var3);
    org.jsecurity.authc.pam.ModularRealmAuthenticator var5 = new org.jsecurity.authc.pam.ModularRealmAuthenticator(var4);
    org.jsecurity.authc.pam.AllSuccessfulModularAuthenticationStrategy var6 = new org.jsecurity.authc.pam.AllSuccessfulModularAuthenticationStrategy();
    var5.setModularAuthenticationStrategy((org.jsecurity.authc.pam.ModularAuthenticationStrategy)var6);
    org.jsecurity.authz.SimpleAuthorizationInfo var8 = new org.jsecurity.authz.SimpleAuthorizationInfo();
    var8.addStringPermission("hi!");
    java.io.InputStream var12 = org.jsecurity.util.ClassUtils.getResourceAsStream("");
    java.lang.Object[] var13 = new java.lang.Object[] { var12};
    java.util.List var14 = org.jsecurity.util.CollectionUtils.asList(var13);
    var8.addRoles((java.util.Collection)var14);
    var5.setAuthenticationListeners((java.util.Collection)var14);
    var0.setSessionListeners((java.util.Collection)var14);
    org.jsecurity.realm.text.TextConfigurationRealm var18 = new org.jsecurity.realm.text.TextConfigurationRealm();
    java.io.InputStream var20 = org.jsecurity.util.ClassUtils.getResourceAsStream("");
    java.lang.Object[] var21 = new java.lang.Object[] { var20};
    java.util.List var22 = org.jsecurity.util.CollectionUtils.asList(var21);
    org.jsecurity.authc.pam.ModularRealmAuthenticator var23 = new org.jsecurity.authc.pam.ModularRealmAuthenticator(var22);
    org.jsecurity.subject.SimplePrincipalCollection var25 = new org.jsecurity.subject.SimplePrincipalCollection((java.util.Collection)var22, "org.jsecurity.authz.UnauthorizedException: org.jsecurity.session.ExpiredSessionException: ");
    org.jsecurity.session.UnknownSessionException var30 = new org.jsecurity.session.UnknownSessionException("dd\uFFFD", (java.io.Serializable)100.0f);
    org.jsecurity.session.SessionException var32 = new org.jsecurity.session.SessionException("dd\uFFFD", (java.lang.Throwable)var30, (java.io.Serializable)0);
    org.jsecurity.session.SessionException var33 = new org.jsecurity.session.SessionException("dd\uFFFD", (java.lang.Throwable)var30);
    var25.add((java.lang.Object)var33, "org.jsecurity.config.ConfigurationException: dd\uFFFD");
    var18.onLogout((org.jsecurity.subject.PrincipalCollection)var25);
    org.jsecurity.authc.pam.FirstSuccessfulAuthenticationStrategy var37 = new org.jsecurity.authc.pam.FirstSuccessfulAuthenticationStrategy();
    org.jsecurity.authz.UnauthorizedException var39 = new org.jsecurity.authz.UnauthorizedException("org.jsecurity.config.ConfigurationException: dd\uFFFD");
    java.lang.Throwable[] var40 = var39.getSuppressed();
    java.util.List var41 = org.jsecurity.util.CollectionUtils.asList((java.lang.Object[])var40);
    org.jsecurity.authc.UsernamePasswordToken var42 = new org.jsecurity.authc.UsernamePasswordToken();
    java.lang.String var43 = var42.getUsername();
    java.net.InetAddress var44 = var42.getInetAddress();
    org.jsecurity.authc.AuthenticationInfo var45 = var37.beforeAllAttempts((java.util.Collection)var41, (org.jsecurity.authc.AuthenticationToken)var42);
    boolean[] var46 = var0.hasRoles((org.jsecurity.subject.PrincipalCollection)var25, var41);
    org.jsecurity.authz.permission.WildcardPermissionResolver var47 = new org.jsecurity.authz.permission.WildcardPermissionResolver();
    org.jsecurity.authz.Permission var49 = var47.resolvePermission("hi!");
    org.jsecurity.authz.Permission var51 = var47.resolvePermission("hi!");
    var0.setPermissionResolver((org.jsecurity.authz.permission.PermissionResolver)var47);
    org.jsecurity.session.mgt.DefaultSessionManager var53 = new org.jsecurity.session.mgt.DefaultSessionManager();
    org.jsecurity.mgt.DefaultSecurityManager var54 = new org.jsecurity.mgt.DefaultSecurityManager();
    org.jsecurity.authz.permission.WildcardPermissionResolver var55 = new org.jsecurity.authz.permission.WildcardPermissionResolver();
    var54.setPermissionResolver((org.jsecurity.authz.permission.PermissionResolver)var55);
    org.jsecurity.cache.CacheManager var57 = var54.getCacheManager();
    var53.setCacheManager(var57);
    long var59 = var53.getSessionValidationInterval();
    boolean var60 = var53.isSessionValidationSchedulerEnabled();
    var0.setSessionManager((org.jsecurity.session.mgt.SessionManager)var53);
    var53.validateSessions();
    org.jsecurity.io.ResourceException var65 = new org.jsecurity.io.ResourceException("hi!");
    org.jsecurity.codec.CodecException var66 = new org.jsecurity.codec.CodecException((java.lang.Throwable)var65);
    org.jsecurity.JSecurityException var67 = new org.jsecurity.JSecurityException("a2b823b1e72eae2b727289df8a00a89df8a0bab6ad8a89c4c5c7a9b62a270000", (java.lang.Throwable)var65);
    org.jsecurity.authc.ExcessiveAttemptsException var68 = new org.jsecurity.authc.ExcessiveAttemptsException((java.lang.Throwable)var67);
    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      var53.setTimeout((java.io.Serializable)var68, 1800000L);
      fail("Expected exception of type org.jsecurity.session.UnknownSessionException");
    } catch (org.jsecurity.session.UnknownSessionException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var2);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var3);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var4);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var12);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var13);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var14);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var20);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var21);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var22);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var40);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var41);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var43);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var44);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var45);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var46);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var49);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var51);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var57);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var59 == 3600000L);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var60 == true);

  }

  public void test386() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest2.test386");


    org.jsecurity.authc.pam.AllSuccessfulModularAuthenticationStrategy var1 = new org.jsecurity.authc.pam.AllSuccessfulModularAuthenticationStrategy();
    char[] var3 = new char[] { };
    org.jsecurity.authc.UsernamePasswordToken var5 = new org.jsecurity.authc.UsernamePasswordToken("hi!", var3, true);
    org.jsecurity.authc.SimpleAccount var6 = new org.jsecurity.authc.SimpleAccount();
    var6.setCredentialsExpired(false);
    boolean var9 = var6.isLocked();
    org.jsecurity.authc.AuthenticationInfo var10 = var1.afterAllAttempts((org.jsecurity.authc.AuthenticationToken)var5, (org.jsecurity.authc.AuthenticationInfo)var6);
    char[] var14 = new char[] { '4', '#'};
    org.jsecurity.authc.UsernamePasswordToken var15 = new org.jsecurity.authc.UsernamePasswordToken("\u0000\u0000", var14);
    org.jsecurity.authc.SimpleAccount var16 = new org.jsecurity.authc.SimpleAccount();
    var16.setCredentialsExpired(false);
    var16.setCredentialsExpired(false);
    boolean var21 = var16.isCredentialsExpired();
    org.jsecurity.authc.AuthenticationInfo var22 = var1.afterAllAttempts((org.jsecurity.authc.AuthenticationToken)var15, (org.jsecurity.authc.AuthenticationInfo)var16);
    org.jsecurity.session.InvalidSessionException var23 = new org.jsecurity.session.InvalidSessionException("ZGT/", (java.io.Serializable)var15);
    org.jsecurity.authc.SimpleAuthenticationInfo var26 = new org.jsecurity.authc.SimpleAuthenticationInfo((java.lang.Object)var23, (java.lang.Object)"5642a434-0d22-4b09-92db-5a40904768c2", "\uFFFD\uFFFD#\uFFFD\uFFFD.\uFFFD+r\uFFFD\u6959(\uFFFD\uFFFDW\uFFFDq\uFFFD.\uFFFD\uFFFD^jY\uFFFDj\uFFFDa\uFFFD\uFFFD\uFFFDj\u0628\u0000");
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var3);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var9 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var10);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var14);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var21 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var22);

  }

  public void test387() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest2.test387");


    org.jsecurity.session.mgt.eis.MemorySessionDAO var0 = new org.jsecurity.session.mgt.eis.MemorySessionDAO();
    org.jsecurity.cache.Cache var1 = var0.getActiveSessionsCache();
    org.jsecurity.cache.CacheManager var2 = var0.getCacheManager();
    org.jsecurity.cache.HashtableCacheManager var3 = new org.jsecurity.cache.HashtableCacheManager();
    org.jsecurity.cache.Cache var5 = var3.getCache("\u0000\u0000");
    var0.setActiveSessionsCache(var5);
    java.io.InputStream var8 = org.jsecurity.util.ClassUtils.getResourceAsStream("");
    java.lang.Object[] var9 = new java.lang.Object[] { var8};
    java.util.List var10 = org.jsecurity.util.CollectionUtils.asList(var9);
    org.jsecurity.authc.pam.ModularRealmAuthenticator var11 = new org.jsecurity.authc.pam.ModularRealmAuthenticator(var10);
    org.jsecurity.authc.pam.AllSuccessfulModularAuthenticationStrategy var12 = new org.jsecurity.authc.pam.AllSuccessfulModularAuthenticationStrategy();
    var11.setModularAuthenticationStrategy((org.jsecurity.authc.pam.ModularAuthenticationStrategy)var12);
    org.jsecurity.authz.SimpleAuthorizationInfo var14 = new org.jsecurity.authz.SimpleAuthorizationInfo();
    var14.addStringPermission("hi!");
    java.io.InputStream var18 = org.jsecurity.util.ClassUtils.getResourceAsStream("");
    java.lang.Object[] var19 = new java.lang.Object[] { var18};
    java.util.List var20 = org.jsecurity.util.CollectionUtils.asList(var19);
    var14.addRoles((java.util.Collection)var20);
    var11.setAuthenticationListeners((java.util.Collection)var20);
    org.jsecurity.realm.activedirectory.ActiveDirectoryRealm var23 = new org.jsecurity.realm.activedirectory.ActiveDirectoryRealm();
    var23.setPrincipalSuffix("");
    var11.setRealm((org.jsecurity.realm.Realm)var23);
    org.jsecurity.cache.HashtableCacheManager var27 = new org.jsecurity.cache.HashtableCacheManager();
    org.jsecurity.cache.Cache var29 = var27.getCache("\u0000\u0000");
    var23.setAuthorizationCache(var29);
    var0.setActiveSessionsCache(var29);
    org.jsecurity.session.mgt.SimpleSession var32 = new org.jsecurity.session.mgt.SimpleSession();
    java.io.Serializable var33 = var0.create((org.jsecurity.session.Session)var32);
    org.jsecurity.session.mgt.SimpleSession var34 = new org.jsecurity.session.mgt.SimpleSession();
    var34.touch();
    var34.validate();
    org.jsecurity.session.mgt.SimpleSession var37 = new org.jsecurity.session.mgt.SimpleSession();
    var37.setTimeout((-1L));
    org.jsecurity.session.mgt.SimpleSession var40 = new org.jsecurity.session.mgt.SimpleSession();
    java.util.Date var41 = var40.getLastAccessTime();
    var37.setLastAccessTime(var41);
    org.jsecurity.session.mgt.SimpleSession var43 = new org.jsecurity.session.mgt.SimpleSession();
    java.util.Date var44 = var43.getLastAccessTime();
    var37.setStopTimestamp(var44);
    var34.setLastAccessTime(var44);
    var32.setLastAccessTime(var44);
    org.jsecurity.session.mgt.ImmutableProxiedSession var48 = new org.jsecurity.session.mgt.ImmutableProxiedSession((org.jsecurity.session.Session)var32);
    java.util.Date var49 = var48.getStartTimestamp();
    java.io.Serializable var50 = var48.getId();
    java.util.Date var51 = var48.getStartTimestamp();
    java.util.Date var52 = var48.getLastAccessTime();
    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      var48.touch();
      fail("Expected exception of type org.jsecurity.session.InvalidSessionException");
    } catch (org.jsecurity.session.InvalidSessionException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var1);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var2);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var5);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var8);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var9);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var10);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var18);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var19);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var20);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var29);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var33 + "' != '" + "bc2fae45-4703-4a66-9583-af04ae8fa06a"+ "'", var33.equals("bc2fae45-4703-4a66-9583-af04ae8fa06a"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var41);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var44);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var49);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var50 + "' != '" + "bc2fae45-4703-4a66-9583-af04ae8fa06a"+ "'", var50.equals("bc2fae45-4703-4a66-9583-af04ae8fa06a"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var51);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var52);

  }

  public void test388() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest2.test388");


    org.jsecurity.io.SerializationException var1 = new org.jsecurity.io.SerializationException("9d388eff-106e-47d9-8180-843fdfd13dce");

  }

  public void test389() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest2.test389");


    org.jsecurity.crypto.hash.Sha384Hash var1 = org.jsecurity.crypto.hash.Sha384Hash.fromBase64String("org.jsecurity.realm.text.PropertiesRealm_1748");
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var1);

  }

  public void test390() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest2.test390");


    org.jsecurity.session.mgt.eis.MemorySessionDAO var0 = new org.jsecurity.session.mgt.eis.MemorySessionDAO();
    org.jsecurity.cache.Cache var1 = var0.getActiveSessionsCache();
    org.jsecurity.cache.CacheManager var2 = var0.getCacheManager();
    org.jsecurity.cache.HashtableCacheManager var3 = new org.jsecurity.cache.HashtableCacheManager();
    org.jsecurity.cache.Cache var5 = var3.getCache("\u0000\u0000");
    var0.setActiveSessionsCache(var5);
    java.io.InputStream var8 = org.jsecurity.util.ClassUtils.getResourceAsStream("");
    java.lang.Object[] var9 = new java.lang.Object[] { var8};
    java.util.List var10 = org.jsecurity.util.CollectionUtils.asList(var9);
    org.jsecurity.authc.pam.ModularRealmAuthenticator var11 = new org.jsecurity.authc.pam.ModularRealmAuthenticator(var10);
    org.jsecurity.authc.pam.AllSuccessfulModularAuthenticationStrategy var12 = new org.jsecurity.authc.pam.AllSuccessfulModularAuthenticationStrategy();
    var11.setModularAuthenticationStrategy((org.jsecurity.authc.pam.ModularAuthenticationStrategy)var12);
    org.jsecurity.authz.SimpleAuthorizationInfo var14 = new org.jsecurity.authz.SimpleAuthorizationInfo();
    var14.addStringPermission("hi!");
    java.io.InputStream var18 = org.jsecurity.util.ClassUtils.getResourceAsStream("");
    java.lang.Object[] var19 = new java.lang.Object[] { var18};
    java.util.List var20 = org.jsecurity.util.CollectionUtils.asList(var19);
    var14.addRoles((java.util.Collection)var20);
    var11.setAuthenticationListeners((java.util.Collection)var20);
    org.jsecurity.realm.activedirectory.ActiveDirectoryRealm var23 = new org.jsecurity.realm.activedirectory.ActiveDirectoryRealm();
    var23.setPrincipalSuffix("");
    var11.setRealm((org.jsecurity.realm.Realm)var23);
    org.jsecurity.cache.HashtableCacheManager var27 = new org.jsecurity.cache.HashtableCacheManager();
    org.jsecurity.cache.Cache var29 = var27.getCache("\u0000\u0000");
    var23.setAuthorizationCache(var29);
    var0.setActiveSessionsCache(var29);
    org.jsecurity.session.mgt.SimpleSession var32 = new org.jsecurity.session.mgt.SimpleSession();
    java.io.Serializable var33 = var0.create((org.jsecurity.session.Session)var32);
    java.io.Serializable var34 = var32.getId();
    org.jsecurity.session.mgt.SimpleSession var35 = new org.jsecurity.session.mgt.SimpleSession();
    var35.touch();
    var35.validate();
    org.jsecurity.session.mgt.SimpleSession var38 = new org.jsecurity.session.mgt.SimpleSession();
    var38.setTimeout((-1L));
    org.jsecurity.session.mgt.SimpleSession var41 = new org.jsecurity.session.mgt.SimpleSession();
    java.util.Date var42 = var41.getLastAccessTime();
    var38.setLastAccessTime(var42);
    org.jsecurity.session.mgt.SimpleSession var44 = new org.jsecurity.session.mgt.SimpleSession();
    java.util.Date var45 = var44.getLastAccessTime();
    var38.setStopTimestamp(var45);
    var35.setLastAccessTime(var45);
    var32.setStartTimestamp(var45);
    org.jsecurity.session.mgt.ImmutableProxiedSession var49 = new org.jsecurity.session.mgt.ImmutableProxiedSession((org.jsecurity.session.Session)var32);
    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      var49.setTimeout(3600000L);
      fail("Expected exception of type org.jsecurity.session.InvalidSessionException");
    } catch (org.jsecurity.session.InvalidSessionException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var1);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var2);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var5);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var8);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var9);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var10);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var18);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var19);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var20);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var29);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var33 + "' != '" + "21833563-bf7a-4add-88bd-29a876aab172"+ "'", var33.equals("21833563-bf7a-4add-88bd-29a876aab172"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var34 + "' != '" + "21833563-bf7a-4add-88bd-29a876aab172"+ "'", var34.equals("21833563-bf7a-4add-88bd-29a876aab172"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var42);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var45);

  }

  public void test391() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest2.test391");


    org.jsecurity.session.mgt.SimpleSession var0 = new org.jsecurity.session.mgt.SimpleSession();
    org.jsecurity.cache.HashtableCache var2 = new org.jsecurity.cache.HashtableCache("\u0000\u0000\u0000");
    org.jsecurity.session.mgt.SimpleSession var3 = new org.jsecurity.session.mgt.SimpleSession();
    var3.touch();
    org.jsecurity.authz.UnauthenticatedException var7 = new org.jsecurity.authz.UnauthenticatedException();
    org.jsecurity.config.UnresolveableReferenceException var8 = new org.jsecurity.config.UnresolveableReferenceException("", (java.lang.Throwable)var7);
    org.jsecurity.cache.CacheException var9 = new org.jsecurity.cache.CacheException("org.jsecurity.config.ConfigurationException: dd\uFFFD", (java.lang.Throwable)var7);
    java.lang.Object var10 = var3.removeAttribute((java.lang.Object)var9);
    org.jsecurity.mgt.DefaultSecurityManager var11 = new org.jsecurity.mgt.DefaultSecurityManager();
    org.jsecurity.authc.pam.AllSuccessfulModularAuthenticationStrategy var12 = new org.jsecurity.authc.pam.AllSuccessfulModularAuthenticationStrategy();
    org.jsecurity.authc.pam.AllSuccessfulModularAuthenticationStrategy var13 = new org.jsecurity.authc.pam.AllSuccessfulModularAuthenticationStrategy();
    char[] var15 = new char[] { };
    org.jsecurity.authc.UsernamePasswordToken var17 = new org.jsecurity.authc.UsernamePasswordToken("hi!", var15, true);
    org.jsecurity.authc.SimpleAccount var18 = new org.jsecurity.authc.SimpleAccount();
    var18.setCredentialsExpired(false);
    boolean var21 = var18.isLocked();
    org.jsecurity.authc.AuthenticationInfo var22 = var13.afterAllAttempts((org.jsecurity.authc.AuthenticationToken)var17, (org.jsecurity.authc.AuthenticationInfo)var18);
    char[] var26 = new char[] { '4', '#'};
    org.jsecurity.authc.UsernamePasswordToken var27 = new org.jsecurity.authc.UsernamePasswordToken("\u0000\u0000", var26);
    org.jsecurity.authc.SimpleAccount var28 = new org.jsecurity.authc.SimpleAccount();
    var28.setCredentialsExpired(false);
    var28.setCredentialsExpired(false);
    boolean var33 = var28.isCredentialsExpired();
    org.jsecurity.authc.AuthenticationInfo var34 = var13.afterAllAttempts((org.jsecurity.authc.AuthenticationToken)var27, (org.jsecurity.authc.AuthenticationInfo)var28);
    org.jsecurity.authz.UnauthenticatedException var38 = new org.jsecurity.authz.UnauthenticatedException();
    org.jsecurity.config.UnresolveableReferenceException var39 = new org.jsecurity.config.UnresolveableReferenceException("", (java.lang.Throwable)var38);
    org.jsecurity.cache.CacheException var40 = new org.jsecurity.cache.CacheException("org.jsecurity.config.ConfigurationException: dd\uFFFD", (java.lang.Throwable)var38);
    org.jsecurity.authc.SimpleAuthenticationInfo var42 = new org.jsecurity.authc.SimpleAuthenticationInfo((java.lang.Object)"org.jsecurity.config.ConfigurationException: dd\uFFFD", (java.lang.Object)var40, "a2b823b1e72eae2b727289df8a00a89df8a0bab6ad8a89c4c5c7a9b62a270000");
    org.jsecurity.subject.PrincipalCollection var43 = var42.getPrincipals();
    org.jsecurity.authc.AuthenticationInfo var44 = var12.afterAllAttempts((org.jsecurity.authc.AuthenticationToken)var27, (org.jsecurity.authc.AuthenticationInfo)var42);
    var11.setModularAuthenticationStrategy((org.jsecurity.authc.pam.ModularAuthenticationStrategy)var12);
    org.jsecurity.subject.RememberMeManager var46 = var11.getRememberMeManager();
    org.jsecurity.authc.pam.ModularRealmAuthenticator var47 = new org.jsecurity.authc.pam.ModularRealmAuthenticator();
    var11.setAuthenticator((org.jsecurity.authc.Authenticator)var47);
    var2.put((java.lang.Object)var3, (java.lang.Object)var47);
    var3.setTimeout(10L);
    org.jsecurity.session.mgt.SimpleSession var52 = new org.jsecurity.session.mgt.SimpleSession();
    var52.validate();
    java.util.Date var54 = var52.getStartTimestamp();
    var3.setStopTimestamp(var54);
    var0.setStartTimestamp(var54);
    java.util.Date var57 = var0.getLastAccessTime();
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var10);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var15);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var21 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var22);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var26);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var33 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var34);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var43);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var44);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var46);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var54);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var57);

  }

  public void test392() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest2.test392");


    org.jsecurity.authz.permission.InvalidPermissionStringException var3 = new org.jsecurity.authz.permission.InvalidPermissionStringException("783ccd31-48a8-42dd-890f-df885a7baaff", "ZGT/");
    org.jsecurity.session.InvalidSessionException var4 = new org.jsecurity.session.InvalidSessionException((java.io.Serializable)var3);
    org.jsecurity.session.UnknownSessionException var9 = new org.jsecurity.session.UnknownSessionException("dd\uFFFD", (java.io.Serializable)100.0f);
    org.jsecurity.subject.SubjectException var10 = new org.jsecurity.subject.SubjectException("dd\uFFFD", (java.lang.Throwable)var9);
    org.jsecurity.authc.AccountException var11 = new org.jsecurity.authc.AccountException("hi!", (java.lang.Throwable)var10);
    org.jsecurity.session.UnknownSessionException var12 = new org.jsecurity.session.UnknownSessionException((java.lang.Throwable)var10);
    org.jsecurity.session.UnknownSessionException var13 = new org.jsecurity.session.UnknownSessionException((java.lang.Throwable)var10);
    org.jsecurity.authc.ConcurrentAccessException var14 = new org.jsecurity.authc.ConcurrentAccessException((java.lang.Throwable)var10);
    var4.addSuppressed((java.lang.Throwable)var10);
    org.jsecurity.util.UnknownClassException var16 = new org.jsecurity.util.UnknownClassException("b017e95a-a08d-4f3a-bab8-cc9b39ef5331", (java.lang.Throwable)var4);

  }

  public void test393() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest2.test393");


    org.jsecurity.authc.ExpiredCredentialsException var5 = new org.jsecurity.authc.ExpiredCredentialsException();
    org.jsecurity.session.ExpiredSessionException var6 = new org.jsecurity.session.ExpiredSessionException("", (java.lang.Throwable)var5);
    org.jsecurity.subject.InvalidSubjectException var7 = new org.jsecurity.subject.InvalidSubjectException("org.jsecurity.authc.AccountException: hi!", (java.lang.Throwable)var5);
    org.jsecurity.subject.SubjectException var8 = new org.jsecurity.subject.SubjectException("51683bf6-3418-4d98-b15a-6e3f3f2f8eb9", (java.lang.Throwable)var7);
    org.jsecurity.authc.DisabledAccountException var9 = new org.jsecurity.authc.DisabledAccountException("c66ea0fc-9ec0-41f7-adb2-af232b25e84f", (java.lang.Throwable)var7);
    org.jsecurity.io.ResourceException var10 = new org.jsecurity.io.ResourceException("d5807a18-6407-48b2-9fe3-106a1ef9f432", (java.lang.Throwable)var9);

  }

  public void test394() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest2.test394");


    org.jsecurity.session.mgt.DefaultSessionManager var0 = new org.jsecurity.session.mgt.DefaultSessionManager();
    org.jsecurity.session.mgt.SessionValidationScheduler var1 = var0.getSessionValidationScheduler();
    org.jsecurity.subject.InvalidSubjectException var3 = new org.jsecurity.subject.InvalidSubjectException("NfxhYN7ItBfRAmDBmprtU73ghfEEPpcDJrHPkZ06wiY=");
    boolean var4 = var0.isValid((java.io.Serializable)var3);
    org.jsecurity.session.UnknownSessionException var11 = new org.jsecurity.session.UnknownSessionException("dd\uFFFD", (java.io.Serializable)100.0f);
    org.jsecurity.config.ConfigurationException var12 = new org.jsecurity.config.ConfigurationException("dd\uFFFD", (java.lang.Throwable)var11);
    org.jsecurity.session.ExpiredSessionException var14 = new org.jsecurity.session.ExpiredSessionException("", (java.lang.Throwable)var12, (java.io.Serializable)true);
    org.jsecurity.authc.pam.UnsupportedTokenException var15 = new org.jsecurity.authc.pam.UnsupportedTokenException((java.lang.Throwable)var14);
    org.jsecurity.authc.AccountException var16 = new org.jsecurity.authc.AccountException((java.lang.Throwable)var15);
    org.jsecurity.authz.UnauthorizedException var17 = new org.jsecurity.authz.UnauthorizedException("a2b823b1e72eae2b727289df8a00a89df8a0bab6ad8a89c4c5c7a9b62a270000", (java.lang.Throwable)var16);
    org.jsecurity.codec.CodecException var20 = new org.jsecurity.codec.CodecException("dd\uFFFD");
    org.jsecurity.authc.ConcurrentAccessException var21 = new org.jsecurity.authc.ConcurrentAccessException("org.jsecurity.authz.UnauthorizedException: org.jsecurity.session.ExpiredSessionException: ", (java.lang.Throwable)var20);
    org.jsecurity.subject.SimplePrincipalCollection var23 = new org.jsecurity.subject.SimplePrincipalCollection((java.lang.Object)var20, "");
    java.io.InputStream var25 = org.jsecurity.util.ClassUtils.getResourceAsStream("");
    java.lang.Object[] var26 = new java.lang.Object[] { var25};
    java.util.List var27 = org.jsecurity.util.CollectionUtils.asList(var26);
    org.jsecurity.authc.pam.ModularRealmAuthenticator var28 = new org.jsecurity.authc.pam.ModularRealmAuthenticator(var27);
    org.jsecurity.authc.pam.AllSuccessfulModularAuthenticationStrategy var29 = new org.jsecurity.authc.pam.AllSuccessfulModularAuthenticationStrategy();
    var28.setModularAuthenticationStrategy((org.jsecurity.authc.pam.ModularAuthenticationStrategy)var29);
    org.jsecurity.authz.SimpleAuthorizationInfo var31 = new org.jsecurity.authz.SimpleAuthorizationInfo();
    var31.addStringPermission("hi!");
    java.io.InputStream var35 = org.jsecurity.util.ClassUtils.getResourceAsStream("");
    java.lang.Object[] var36 = new java.lang.Object[] { var35};
    java.util.List var37 = org.jsecurity.util.CollectionUtils.asList(var36);
    var31.addRoles((java.util.Collection)var37);
    var28.setAuthenticationListeners((java.util.Collection)var37);
    org.jsecurity.realm.activedirectory.ActiveDirectoryRealm var40 = new org.jsecurity.realm.activedirectory.ActiveDirectoryRealm();
    var40.setPrincipalSuffix("");
    var28.setRealm((org.jsecurity.realm.Realm)var40);
    org.jsecurity.authc.pam.FirstSuccessfulAuthenticationStrategy var44 = new org.jsecurity.authc.pam.FirstSuccessfulAuthenticationStrategy();
    org.jsecurity.authz.UnauthorizedException var46 = new org.jsecurity.authz.UnauthorizedException("org.jsecurity.config.ConfigurationException: dd\uFFFD");
    java.lang.Throwable[] var47 = var46.getSuppressed();
    java.util.List var48 = org.jsecurity.util.CollectionUtils.asList((java.lang.Object[])var47);
    org.jsecurity.authc.UsernamePasswordToken var49 = new org.jsecurity.authc.UsernamePasswordToken();
    java.lang.String var50 = var49.getUsername();
    java.net.InetAddress var51 = var49.getInetAddress();
    org.jsecurity.authc.AuthenticationInfo var52 = var44.beforeAllAttempts((java.util.Collection)var48, (org.jsecurity.authc.AuthenticationToken)var49);
    var28.setModularAuthenticationStrategy((org.jsecurity.authc.pam.ModularAuthenticationStrategy)var44);
    org.jsecurity.authc.SimpleAccount var54 = new org.jsecurity.authc.SimpleAccount((org.jsecurity.subject.PrincipalCollection)var23, (java.lang.Object)var28);
    java.util.Collection var55 = var54.getObjectPermissions();
    java.util.Collection var56 = var54.getObjectPermissions();
    org.jsecurity.codec.CodecException var59 = new org.jsecurity.codec.CodecException("dd\uFFFD");
    org.jsecurity.authc.ConcurrentAccessException var60 = new org.jsecurity.authc.ConcurrentAccessException("org.jsecurity.authz.UnauthorizedException: org.jsecurity.session.ExpiredSessionException: ", (java.lang.Throwable)var59);
    org.jsecurity.subject.SimplePrincipalCollection var62 = new org.jsecurity.subject.SimplePrincipalCollection((java.lang.Object)var59, "");
    org.jsecurity.authc.pam.FirstSuccessfulAuthenticationStrategy var63 = new org.jsecurity.authc.pam.FirstSuccessfulAuthenticationStrategy();
    org.jsecurity.authz.UnauthorizedException var65 = new org.jsecurity.authz.UnauthorizedException("org.jsecurity.config.ConfigurationException: dd\uFFFD");
    java.lang.Throwable[] var66 = var65.getSuppressed();
    java.util.List var67 = org.jsecurity.util.CollectionUtils.asList((java.lang.Object[])var66);
    org.jsecurity.authc.UsernamePasswordToken var68 = new org.jsecurity.authc.UsernamePasswordToken();
    java.lang.String var69 = var68.getUsername();
    java.net.InetAddress var70 = var68.getInetAddress();
    org.jsecurity.authc.AuthenticationInfo var71 = var63.beforeAllAttempts((java.util.Collection)var67, (org.jsecurity.authc.AuthenticationToken)var68);
    org.jsecurity.session.UnknownSessionException var76 = new org.jsecurity.session.UnknownSessionException("dd\uFFFD", (java.io.Serializable)100.0f);
    org.jsecurity.subject.SubjectException var77 = new org.jsecurity.subject.SubjectException("dd\uFFFD", (java.lang.Throwable)var76);
    org.jsecurity.io.SerializationException var78 = new org.jsecurity.io.SerializationException("", (java.lang.Throwable)var77);
    java.lang.Throwable[] var79 = var77.getSuppressed();
    java.util.Set var80 = org.jsecurity.util.CollectionUtils.asSet((java.lang.Object[])var79);
    org.jsecurity.authc.SimpleAccount var81 = new org.jsecurity.authc.SimpleAccount((org.jsecurity.subject.PrincipalCollection)var62, (java.lang.Object)var67, var80);
    var54.setObjectPermissions(var80);
    org.jsecurity.session.UnknownSessionException var83 = new org.jsecurity.session.UnknownSessionException("b598ff3d-5685-4491-8ee6-585d37adb1db", (java.lang.Throwable)var17, (java.io.Serializable)var54);
    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      var0.stop((java.io.Serializable)var17);
      fail("Expected exception of type org.jsecurity.session.UnknownSessionException");
    } catch (org.jsecurity.session.UnknownSessionException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var4 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var25);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var26);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var27);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var35);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var36);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var37);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var47);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var48);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var50);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var51);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var52);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var55);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var56);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var66);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var67);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var69);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var70);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var71);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var79);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var80);

  }

  public void test395() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest2.test395");


    org.jsecurity.authc.pam.ModularRealmAuthenticator var1 = new org.jsecurity.authc.pam.ModularRealmAuthenticator();
    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      org.jsecurity.crypto.hash.Sha256Hash var3 = new org.jsecurity.crypto.hash.Sha256Hash((java.lang.Object)"hi!", (java.lang.Object)var1, (-1));
      fail("Expected exception of type org.jsecurity.codec.CodecException");
    } catch (org.jsecurity.codec.CodecException e) {
      // Expected exception.
    }

  }

  public void test396() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest2.test396");


    org.jsecurity.session.mgt.DefaultSessionManager var0 = new org.jsecurity.session.mgt.DefaultSessionManager();
    org.jsecurity.session.mgt.quartz.QuartzSessionValidationScheduler var1 = new org.jsecurity.session.mgt.quartz.QuartzSessionValidationScheduler();
    boolean var2 = var1.isEnabled();
    var1.enableSessionValidation();
    var0.setSessionValidationScheduler((org.jsecurity.session.mgt.SessionValidationScheduler)var1);
    org.jsecurity.session.mgt.SessionValidationScheduler var5 = var0.getSessionValidationScheduler();
    var0.setSessionValidationInterval(10L);
    char[] var11 = new char[] { ' ', ' '};
    org.jsecurity.authc.UsernamePasswordToken var12 = new org.jsecurity.authc.UsernamePasswordToken("hi!", var11);
    char[] var16 = new char[] { '4', '#'};
    org.jsecurity.authc.UsernamePasswordToken var17 = new org.jsecurity.authc.UsernamePasswordToken("\u0000\u0000", var16);
    var12.setPassword(var16);
    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      var0.setTimeout((java.io.Serializable)var12, 0L);
      fail("Expected exception of type org.jsecurity.session.UnknownSessionException");
    } catch (org.jsecurity.session.UnknownSessionException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var2 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var5);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var11);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var16);

  }

  public void test397() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest2.test397");


    org.jsecurity.mgt.DefaultSecurityManager var0 = new org.jsecurity.mgt.DefaultSecurityManager();
    java.io.InputStream var2 = org.jsecurity.util.ClassUtils.getResourceAsStream("");
    java.lang.Object[] var3 = new java.lang.Object[] { var2};
    java.util.List var4 = org.jsecurity.util.CollectionUtils.asList(var3);
    org.jsecurity.authc.pam.ModularRealmAuthenticator var5 = new org.jsecurity.authc.pam.ModularRealmAuthenticator(var4);
    org.jsecurity.authc.pam.AllSuccessfulModularAuthenticationStrategy var6 = new org.jsecurity.authc.pam.AllSuccessfulModularAuthenticationStrategy();
    var5.setModularAuthenticationStrategy((org.jsecurity.authc.pam.ModularAuthenticationStrategy)var6);
    org.jsecurity.authz.SimpleAuthorizationInfo var8 = new org.jsecurity.authz.SimpleAuthorizationInfo();
    var8.addStringPermission("hi!");
    java.io.InputStream var12 = org.jsecurity.util.ClassUtils.getResourceAsStream("");
    java.lang.Object[] var13 = new java.lang.Object[] { var12};
    java.util.List var14 = org.jsecurity.util.CollectionUtils.asList(var13);
    var8.addRoles((java.util.Collection)var14);
    var5.setAuthenticationListeners((java.util.Collection)var14);
    var0.setSessionListeners((java.util.Collection)var14);
    java.io.InputStream var19 = org.jsecurity.util.ClassUtils.getResourceAsStream("");
    java.lang.Object[] var20 = new java.lang.Object[] { var19};
    java.util.List var21 = org.jsecurity.util.CollectionUtils.asList(var20);
    org.jsecurity.authc.pam.ModularRealmAuthenticator var22 = new org.jsecurity.authc.pam.ModularRealmAuthenticator(var21);
    org.jsecurity.authc.pam.AllSuccessfulModularAuthenticationStrategy var23 = new org.jsecurity.authc.pam.AllSuccessfulModularAuthenticationStrategy();
    var22.setModularAuthenticationStrategy((org.jsecurity.authc.pam.ModularAuthenticationStrategy)var23);
    org.jsecurity.authz.SimpleAuthorizationInfo var25 = new org.jsecurity.authz.SimpleAuthorizationInfo();
    var25.addStringPermission("hi!");
    java.io.InputStream var29 = org.jsecurity.util.ClassUtils.getResourceAsStream("");
    java.lang.Object[] var30 = new java.lang.Object[] { var29};
    java.util.List var31 = org.jsecurity.util.CollectionUtils.asList(var30);
    var25.addRoles((java.util.Collection)var31);
    var22.setAuthenticationListeners((java.util.Collection)var31);
    org.jsecurity.realm.activedirectory.ActiveDirectoryRealm var34 = new org.jsecurity.realm.activedirectory.ActiveDirectoryRealm();
    var34.setPrincipalSuffix("");
    var22.setRealm((org.jsecurity.realm.Realm)var34);
    org.jsecurity.cache.HashtableCacheManager var38 = new org.jsecurity.cache.HashtableCacheManager();
    org.jsecurity.cache.Cache var40 = var38.getCache("\u0000\u0000");
    var34.setAuthorizationCache(var40);
    var0.setRealm((org.jsecurity.realm.Realm)var34);
    org.jsecurity.authc.credential.CredentialsMatcher var43 = var34.getCredentialsMatcher();
    var34.init();
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var2);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var3);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var4);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var12);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var13);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var14);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var19);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var20);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var21);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var29);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var30);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var31);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var40);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var43);

  }

  public void test398() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest2.test398");


    org.jsecurity.mgt.DefaultSecurityManager var0 = new org.jsecurity.mgt.DefaultSecurityManager();
    java.io.InputStream var2 = org.jsecurity.util.ClassUtils.getResourceAsStream("");
    java.lang.Object[] var3 = new java.lang.Object[] { var2};
    java.util.List var4 = org.jsecurity.util.CollectionUtils.asList(var3);
    org.jsecurity.authc.pam.ModularRealmAuthenticator var5 = new org.jsecurity.authc.pam.ModularRealmAuthenticator(var4);
    org.jsecurity.authc.pam.AllSuccessfulModularAuthenticationStrategy var6 = new org.jsecurity.authc.pam.AllSuccessfulModularAuthenticationStrategy();
    var5.setModularAuthenticationStrategy((org.jsecurity.authc.pam.ModularAuthenticationStrategy)var6);
    org.jsecurity.authz.SimpleAuthorizationInfo var8 = new org.jsecurity.authz.SimpleAuthorizationInfo();
    var8.addStringPermission("hi!");
    java.io.InputStream var12 = org.jsecurity.util.ClassUtils.getResourceAsStream("");
    java.lang.Object[] var13 = new java.lang.Object[] { var12};
    java.util.List var14 = org.jsecurity.util.CollectionUtils.asList(var13);
    var8.addRoles((java.util.Collection)var14);
    var5.setAuthenticationListeners((java.util.Collection)var14);
    var0.setSessionListeners((java.util.Collection)var14);
    org.jsecurity.realm.text.TextConfigurationRealm var18 = new org.jsecurity.realm.text.TextConfigurationRealm();
    java.io.InputStream var20 = org.jsecurity.util.ClassUtils.getResourceAsStream("");
    java.lang.Object[] var21 = new java.lang.Object[] { var20};
    java.util.List var22 = org.jsecurity.util.CollectionUtils.asList(var21);
    org.jsecurity.authc.pam.ModularRealmAuthenticator var23 = new org.jsecurity.authc.pam.ModularRealmAuthenticator(var22);
    org.jsecurity.subject.SimplePrincipalCollection var25 = new org.jsecurity.subject.SimplePrincipalCollection((java.util.Collection)var22, "org.jsecurity.authz.UnauthorizedException: org.jsecurity.session.ExpiredSessionException: ");
    org.jsecurity.session.UnknownSessionException var30 = new org.jsecurity.session.UnknownSessionException("dd\uFFFD", (java.io.Serializable)100.0f);
    org.jsecurity.session.SessionException var32 = new org.jsecurity.session.SessionException("dd\uFFFD", (java.lang.Throwable)var30, (java.io.Serializable)0);
    org.jsecurity.session.SessionException var33 = new org.jsecurity.session.SessionException("dd\uFFFD", (java.lang.Throwable)var30);
    var25.add((java.lang.Object)var33, "org.jsecurity.config.ConfigurationException: dd\uFFFD");
    var18.onLogout((org.jsecurity.subject.PrincipalCollection)var25);
    org.jsecurity.authc.pam.FirstSuccessfulAuthenticationStrategy var37 = new org.jsecurity.authc.pam.FirstSuccessfulAuthenticationStrategy();
    org.jsecurity.authz.UnauthorizedException var39 = new org.jsecurity.authz.UnauthorizedException("org.jsecurity.config.ConfigurationException: dd\uFFFD");
    java.lang.Throwable[] var40 = var39.getSuppressed();
    java.util.List var41 = org.jsecurity.util.CollectionUtils.asList((java.lang.Object[])var40);
    org.jsecurity.authc.UsernamePasswordToken var42 = new org.jsecurity.authc.UsernamePasswordToken();
    java.lang.String var43 = var42.getUsername();
    java.net.InetAddress var44 = var42.getInetAddress();
    org.jsecurity.authc.AuthenticationInfo var45 = var37.beforeAllAttempts((java.util.Collection)var41, (org.jsecurity.authc.AuthenticationToken)var42);
    boolean[] var46 = var0.hasRoles((org.jsecurity.subject.PrincipalCollection)var25, var41);
    org.jsecurity.codec.CodecException var49 = new org.jsecurity.codec.CodecException("dd\uFFFD");
    org.jsecurity.authc.ConcurrentAccessException var50 = new org.jsecurity.authc.ConcurrentAccessException("org.jsecurity.authz.UnauthorizedException: org.jsecurity.session.ExpiredSessionException: ", (java.lang.Throwable)var49);
    org.jsecurity.subject.SimplePrincipalCollection var52 = new org.jsecurity.subject.SimplePrincipalCollection((java.lang.Object)var49, "");
    java.io.InputStream var54 = org.jsecurity.util.ClassUtils.getResourceAsStream("");
    java.lang.Object[] var55 = new java.lang.Object[] { var54};
    java.util.List var56 = org.jsecurity.util.CollectionUtils.asList(var55);
    org.jsecurity.authc.pam.ModularRealmAuthenticator var57 = new org.jsecurity.authc.pam.ModularRealmAuthenticator(var56);
    var52.addAll((java.util.Collection)var56, "\u0000\u0000");
    var0.setSessionListeners((java.util.Collection)var56);
    var0.destroy();
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var2);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var3);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var4);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var12);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var13);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var14);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var20);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var21);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var22);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var40);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var41);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var43);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var44);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var45);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var46);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var54);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var55);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var56);

  }

  public void test399() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest2.test399");


    org.jsecurity.mgt.DefaultSecurityManager var0 = new org.jsecurity.mgt.DefaultSecurityManager();
    java.io.InputStream var2 = org.jsecurity.util.ClassUtils.getResourceAsStream("");
    java.lang.Object[] var3 = new java.lang.Object[] { var2};
    java.util.List var4 = org.jsecurity.util.CollectionUtils.asList(var3);
    org.jsecurity.authc.pam.ModularRealmAuthenticator var5 = new org.jsecurity.authc.pam.ModularRealmAuthenticator(var4);
    org.jsecurity.authc.pam.AllSuccessfulModularAuthenticationStrategy var6 = new org.jsecurity.authc.pam.AllSuccessfulModularAuthenticationStrategy();
    var5.setModularAuthenticationStrategy((org.jsecurity.authc.pam.ModularAuthenticationStrategy)var6);
    org.jsecurity.authz.SimpleAuthorizationInfo var8 = new org.jsecurity.authz.SimpleAuthorizationInfo();
    var8.addStringPermission("hi!");
    java.io.InputStream var12 = org.jsecurity.util.ClassUtils.getResourceAsStream("");
    java.lang.Object[] var13 = new java.lang.Object[] { var12};
    java.util.List var14 = org.jsecurity.util.CollectionUtils.asList(var13);
    var8.addRoles((java.util.Collection)var14);
    var5.setAuthenticationListeners((java.util.Collection)var14);
    var0.setSessionListeners((java.util.Collection)var14);
    org.jsecurity.realm.text.TextConfigurationRealm var18 = new org.jsecurity.realm.text.TextConfigurationRealm();
    java.io.InputStream var20 = org.jsecurity.util.ClassUtils.getResourceAsStream("");
    java.lang.Object[] var21 = new java.lang.Object[] { var20};
    java.util.List var22 = org.jsecurity.util.CollectionUtils.asList(var21);
    org.jsecurity.authc.pam.ModularRealmAuthenticator var23 = new org.jsecurity.authc.pam.ModularRealmAuthenticator(var22);
    org.jsecurity.subject.SimplePrincipalCollection var25 = new org.jsecurity.subject.SimplePrincipalCollection((java.util.Collection)var22, "org.jsecurity.authz.UnauthorizedException: org.jsecurity.session.ExpiredSessionException: ");
    org.jsecurity.session.UnknownSessionException var30 = new org.jsecurity.session.UnknownSessionException("dd\uFFFD", (java.io.Serializable)100.0f);
    org.jsecurity.session.SessionException var32 = new org.jsecurity.session.SessionException("dd\uFFFD", (java.lang.Throwable)var30, (java.io.Serializable)0);
    org.jsecurity.session.SessionException var33 = new org.jsecurity.session.SessionException("dd\uFFFD", (java.lang.Throwable)var30);
    var25.add((java.lang.Object)var33, "org.jsecurity.config.ConfigurationException: dd\uFFFD");
    var18.onLogout((org.jsecurity.subject.PrincipalCollection)var25);
    org.jsecurity.authc.pam.FirstSuccessfulAuthenticationStrategy var37 = new org.jsecurity.authc.pam.FirstSuccessfulAuthenticationStrategy();
    org.jsecurity.authz.UnauthorizedException var39 = new org.jsecurity.authz.UnauthorizedException("org.jsecurity.config.ConfigurationException: dd\uFFFD");
    java.lang.Throwable[] var40 = var39.getSuppressed();
    java.util.List var41 = org.jsecurity.util.CollectionUtils.asList((java.lang.Object[])var40);
    org.jsecurity.authc.UsernamePasswordToken var42 = new org.jsecurity.authc.UsernamePasswordToken();
    java.lang.String var43 = var42.getUsername();
    java.net.InetAddress var44 = var42.getInetAddress();
    org.jsecurity.authc.AuthenticationInfo var45 = var37.beforeAllAttempts((java.util.Collection)var41, (org.jsecurity.authc.AuthenticationToken)var42);
    boolean[] var46 = var0.hasRoles((org.jsecurity.subject.PrincipalCollection)var25, var41);
    org.jsecurity.authz.permission.WildcardPermissionResolver var47 = new org.jsecurity.authz.permission.WildcardPermissionResolver();
    org.jsecurity.authz.Permission var49 = var47.resolvePermission("hi!");
    org.jsecurity.authz.Permission var51 = var47.resolvePermission("hi!");
    var0.setPermissionResolver((org.jsecurity.authz.permission.PermissionResolver)var47);
    org.jsecurity.session.mgt.DefaultSessionManager var53 = new org.jsecurity.session.mgt.DefaultSessionManager();
    org.jsecurity.mgt.DefaultSecurityManager var54 = new org.jsecurity.mgt.DefaultSecurityManager();
    org.jsecurity.authz.permission.WildcardPermissionResolver var55 = new org.jsecurity.authz.permission.WildcardPermissionResolver();
    var54.setPermissionResolver((org.jsecurity.authz.permission.PermissionResolver)var55);
    org.jsecurity.cache.CacheManager var57 = var54.getCacheManager();
    var53.setCacheManager(var57);
    long var59 = var53.getSessionValidationInterval();
    boolean var60 = var53.isSessionValidationSchedulerEnabled();
    var0.setSessionManager((org.jsecurity.session.mgt.SessionManager)var53);
    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      java.util.Date var63 = var53.getStartTimestamp((java.io.Serializable)"guest = guest,guest\npresidentskroob = 12345,president\ndarkhelmet = ludicrousspeed,darklord,schwartz\nroot = secret,root\nlonestarr = vespa,goodguy,schwartz\n");
      fail("Expected exception of type org.jsecurity.session.UnknownSessionException");
    } catch (org.jsecurity.session.UnknownSessionException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var2);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var3);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var4);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var12);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var13);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var14);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var20);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var21);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var22);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var40);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var41);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var43);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var44);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var45);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var46);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var49);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var51);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var57);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var59 == 3600000L);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var60 == true);

  }

  public void test400() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest2.test400");


    org.jsecurity.session.UnknownSessionException var3 = new org.jsecurity.session.UnknownSessionException("dd\uFFFD", (java.io.Serializable)100.0f);
    org.jsecurity.session.SessionException var5 = new org.jsecurity.session.SessionException("dd\uFFFD", (java.lang.Throwable)var3, (java.io.Serializable)0);
    org.jsecurity.authc.SimpleAuthenticationInfo var8 = new org.jsecurity.authc.SimpleAuthenticationInfo((java.lang.Object)0, (java.lang.Object)10, "hi!");
    java.lang.Object var9 = var8.getCredentials();
    java.lang.String var10 = var8.toString();
    org.jsecurity.realm.text.TextConfigurationRealm var11 = new org.jsecurity.realm.text.TextConfigurationRealm();
    java.io.InputStream var13 = org.jsecurity.util.ClassUtils.getResourceAsStream("");
    java.lang.Object[] var14 = new java.lang.Object[] { var13};
    java.util.List var15 = org.jsecurity.util.CollectionUtils.asList(var14);
    org.jsecurity.authc.pam.ModularRealmAuthenticator var16 = new org.jsecurity.authc.pam.ModularRealmAuthenticator(var15);
    org.jsecurity.subject.SimplePrincipalCollection var18 = new org.jsecurity.subject.SimplePrincipalCollection((java.util.Collection)var15, "org.jsecurity.authz.UnauthorizedException: org.jsecurity.session.ExpiredSessionException: ");
    org.jsecurity.session.UnknownSessionException var23 = new org.jsecurity.session.UnknownSessionException("dd\uFFFD", (java.io.Serializable)100.0f);
    org.jsecurity.session.SessionException var25 = new org.jsecurity.session.SessionException("dd\uFFFD", (java.lang.Throwable)var23, (java.io.Serializable)0);
    org.jsecurity.session.SessionException var26 = new org.jsecurity.session.SessionException("dd\uFFFD", (java.lang.Throwable)var23);
    var18.add((java.lang.Object)var26, "org.jsecurity.config.ConfigurationException: dd\uFFFD");
    var11.onLogout((org.jsecurity.subject.PrincipalCollection)var18);
    org.jsecurity.cache.HashtableCacheManager var30 = new org.jsecurity.cache.HashtableCacheManager();
    org.jsecurity.cache.Cache var32 = var30.getCache("\u0000\u0000");
    var11.setAuthorizationCache(var32);
    org.jsecurity.codec.CodecException var36 = new org.jsecurity.codec.CodecException("dd\uFFFD");
    org.jsecurity.authc.ConcurrentAccessException var37 = new org.jsecurity.authc.ConcurrentAccessException("org.jsecurity.authz.UnauthorizedException: org.jsecurity.session.ExpiredSessionException: ", (java.lang.Throwable)var36);
    org.jsecurity.subject.SimplePrincipalCollection var39 = new org.jsecurity.subject.SimplePrincipalCollection((java.lang.Object)var36, "");
    var11.onLogout((org.jsecurity.subject.PrincipalCollection)var39);
    var8.setPrincipals((org.jsecurity.subject.PrincipalCollection)var39);
    org.jsecurity.realm.activedirectory.ActiveDirectoryRealm var42 = new org.jsecurity.realm.activedirectory.ActiveDirectoryRealm();
    org.jsecurity.authc.credential.Sha256CredentialsMatcher var43 = new org.jsecurity.authc.credential.Sha256CredentialsMatcher();
    var42.setCredentialsMatcher((org.jsecurity.authc.credential.CredentialsMatcher)var43);
    org.jsecurity.realm.activedirectory.ActiveDirectoryRealm var45 = new org.jsecurity.realm.activedirectory.ActiveDirectoryRealm();
    org.jsecurity.authc.credential.Sha256CredentialsMatcher var46 = new org.jsecurity.authc.credential.Sha256CredentialsMatcher();
    var45.setCredentialsMatcher((org.jsecurity.authc.credential.CredentialsMatcher)var46);
    java.lang.String var48 = var45.getAuthorizationCacheName();
    var45.setUrl("hi!");
    org.jsecurity.realm.ldap.DefaultLdapContextFactory var51 = new org.jsecurity.realm.ldap.DefaultLdapContextFactory();
    var45.setLdapContextFactory((org.jsecurity.realm.ldap.LdapContextFactory)var51);
    var51.setAuthentication("org.jsecurity.authz.UnauthorizedException: org.jsecurity.session.ExpiredSessionException: ");
    var42.setLdapContextFactory((org.jsecurity.realm.ldap.LdapContextFactory)var51);
    var51.setReferral("a2b823b1e72eae2b727289df8a00a89df8a0bab6ad8a89c4c5c7a9b62a270000");
    var51.setUrl("\u0000\u0000");
    java.util.Set var62 = org.jsecurity.util.PermissionUtils.toPermissionStrings("org.jsecurity.config.ConfigurationException: dd\uFFFD");
    org.jsecurity.authz.SimpleAuthorizationInfo var63 = new org.jsecurity.authz.SimpleAuthorizationInfo(var62);
    org.jsecurity.authz.SimpleRole var64 = new org.jsecurity.authz.SimpleRole();
    java.lang.String var65 = var64.getName();
    org.jsecurity.session.UnknownSessionException var70 = new org.jsecurity.session.UnknownSessionException("dd\uFFFD", (java.io.Serializable)100.0f);
    org.jsecurity.subject.SubjectException var71 = new org.jsecurity.subject.SubjectException("dd\uFFFD", (java.lang.Throwable)var70);
    org.jsecurity.io.SerializationException var72 = new org.jsecurity.io.SerializationException("", (java.lang.Throwable)var71);
    java.lang.Throwable[] var73 = var71.getSuppressed();
    java.util.Set var74 = org.jsecurity.util.CollectionUtils.asSet((java.lang.Object[])var73);
    var64.setPermissions(var74);
    org.jsecurity.authz.SimpleAuthorizingAccount var76 = new org.jsecurity.authz.SimpleAuthorizingAccount((org.jsecurity.subject.PrincipalCollection)var39, (java.lang.Object)"\u0000\u0000", "org.jsecurity.authc.AccountException: hi!", var62, var74);
    var76.setCredentialsExpired(true);
    java.io.InputStream var80 = org.jsecurity.util.ClassUtils.getResourceAsStream("");
    java.lang.Object[] var81 = new java.lang.Object[] { var80};
    java.util.List var82 = org.jsecurity.util.CollectionUtils.asList(var81);
    org.jsecurity.authc.pam.ModularRealmAuthenticator var83 = new org.jsecurity.authc.pam.ModularRealmAuthenticator(var82);
    org.jsecurity.subject.SimplePrincipalCollection var85 = new org.jsecurity.subject.SimplePrincipalCollection((java.util.Collection)var82, "org.jsecurity.authz.UnauthorizedException: org.jsecurity.session.ExpiredSessionException: ");
    java.util.Set var86 = var85.getRealmNames();
    var76.setRoles(var86);
    java.util.Set var89 = org.jsecurity.util.PermissionUtils.toPermissionStrings("org.jsecurity.config.ConfigurationException: dd\uFFFD");
    var76.setObjectPermissions(var89);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var9 + "' != '" + 10+ "'", var9.equals(10));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var13);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var14);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var15);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var32);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var48);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var62);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var65);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var73);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var74);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var80);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var81);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var82);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var86);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var89);

  }

  public void test401() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest2.test401");


    org.jsecurity.session.mgt.DefaultSessionManager var0 = new org.jsecurity.session.mgt.DefaultSessionManager();
    org.jsecurity.session.mgt.SessionValidationScheduler var1 = var0.getSessionValidationScheduler();
    long var2 = var0.getGlobalSessionTimeout();
    org.jsecurity.session.mgt.SimpleSession var3 = new org.jsecurity.session.mgt.SimpleSession();
    var3.setTimeout((-1L));
    org.jsecurity.session.mgt.SimpleSession var6 = new org.jsecurity.session.mgt.SimpleSession();
    java.util.Date var7 = var6.getLastAccessTime();
    var3.setLastAccessTime(var7);
    org.jsecurity.mgt.DefaultSecurityManager var9 = new org.jsecurity.mgt.DefaultSecurityManager();
    java.io.InputStream var11 = org.jsecurity.util.ClassUtils.getResourceAsStream("");
    java.lang.Object[] var12 = new java.lang.Object[] { var11};
    java.util.List var13 = org.jsecurity.util.CollectionUtils.asList(var12);
    org.jsecurity.authc.pam.ModularRealmAuthenticator var14 = new org.jsecurity.authc.pam.ModularRealmAuthenticator(var13);
    org.jsecurity.authc.pam.AllSuccessfulModularAuthenticationStrategy var15 = new org.jsecurity.authc.pam.AllSuccessfulModularAuthenticationStrategy();
    var14.setModularAuthenticationStrategy((org.jsecurity.authc.pam.ModularAuthenticationStrategy)var15);
    org.jsecurity.authz.SimpleAuthorizationInfo var17 = new org.jsecurity.authz.SimpleAuthorizationInfo();
    var17.addStringPermission("hi!");
    java.io.InputStream var21 = org.jsecurity.util.ClassUtils.getResourceAsStream("");
    java.lang.Object[] var22 = new java.lang.Object[] { var21};
    java.util.List var23 = org.jsecurity.util.CollectionUtils.asList(var22);
    var17.addRoles((java.util.Collection)var23);
    var14.setAuthenticationListeners((java.util.Collection)var23);
    var9.setSessionListeners((java.util.Collection)var23);
    org.jsecurity.realm.text.TextConfigurationRealm var27 = new org.jsecurity.realm.text.TextConfigurationRealm();
    java.io.InputStream var29 = org.jsecurity.util.ClassUtils.getResourceAsStream("");
    java.lang.Object[] var30 = new java.lang.Object[] { var29};
    java.util.List var31 = org.jsecurity.util.CollectionUtils.asList(var30);
    org.jsecurity.authc.pam.ModularRealmAuthenticator var32 = new org.jsecurity.authc.pam.ModularRealmAuthenticator(var31);
    org.jsecurity.subject.SimplePrincipalCollection var34 = new org.jsecurity.subject.SimplePrincipalCollection((java.util.Collection)var31, "org.jsecurity.authz.UnauthorizedException: org.jsecurity.session.ExpiredSessionException: ");
    org.jsecurity.session.UnknownSessionException var39 = new org.jsecurity.session.UnknownSessionException("dd\uFFFD", (java.io.Serializable)100.0f);
    org.jsecurity.session.SessionException var41 = new org.jsecurity.session.SessionException("dd\uFFFD", (java.lang.Throwable)var39, (java.io.Serializable)0);
    org.jsecurity.session.SessionException var42 = new org.jsecurity.session.SessionException("dd\uFFFD", (java.lang.Throwable)var39);
    var34.add((java.lang.Object)var42, "org.jsecurity.config.ConfigurationException: dd\uFFFD");
    var27.onLogout((org.jsecurity.subject.PrincipalCollection)var34);
    org.jsecurity.authc.pam.FirstSuccessfulAuthenticationStrategy var46 = new org.jsecurity.authc.pam.FirstSuccessfulAuthenticationStrategy();
    org.jsecurity.authz.UnauthorizedException var48 = new org.jsecurity.authz.UnauthorizedException("org.jsecurity.config.ConfigurationException: dd\uFFFD");
    java.lang.Throwable[] var49 = var48.getSuppressed();
    java.util.List var50 = org.jsecurity.util.CollectionUtils.asList((java.lang.Object[])var49);
    org.jsecurity.authc.UsernamePasswordToken var51 = new org.jsecurity.authc.UsernamePasswordToken();
    java.lang.String var52 = var51.getUsername();
    java.net.InetAddress var53 = var51.getInetAddress();
    org.jsecurity.authc.AuthenticationInfo var54 = var46.beforeAllAttempts((java.util.Collection)var50, (org.jsecurity.authc.AuthenticationToken)var51);
    boolean[] var55 = var9.hasRoles((org.jsecurity.subject.PrincipalCollection)var34, var50);
    org.jsecurity.codec.CodecException var58 = new org.jsecurity.codec.CodecException("dd\uFFFD");
    org.jsecurity.authc.ConcurrentAccessException var59 = new org.jsecurity.authc.ConcurrentAccessException("org.jsecurity.authz.UnauthorizedException: org.jsecurity.session.ExpiredSessionException: ", (java.lang.Throwable)var58);
    org.jsecurity.subject.SimplePrincipalCollection var61 = new org.jsecurity.subject.SimplePrincipalCollection((java.lang.Object)var58, "");
    java.io.InputStream var63 = org.jsecurity.util.ClassUtils.getResourceAsStream("");
    java.lang.Object[] var64 = new java.lang.Object[] { var63};
    java.util.List var65 = org.jsecurity.util.CollectionUtils.asList(var64);
    org.jsecurity.authc.pam.ModularRealmAuthenticator var66 = new org.jsecurity.authc.pam.ModularRealmAuthenticator(var65);
    var61.addAll((java.util.Collection)var65, "\u0000\u0000");
    var9.setSessionListeners((java.util.Collection)var65);
    org.jsecurity.subject.Subject var70 = var9.getSubject();
    org.jsecurity.session.UnknownSessionException var76 = new org.jsecurity.session.UnknownSessionException("dd\uFFFD", (java.io.Serializable)100.0f);
    org.jsecurity.subject.SubjectException var77 = new org.jsecurity.subject.SubjectException("dd\uFFFD", (java.lang.Throwable)var76);
    org.jsecurity.authc.AccountException var78 = new org.jsecurity.authc.AccountException("hi!", (java.lang.Throwable)var77);
    org.jsecurity.session.StoppedSessionException var79 = new org.jsecurity.session.StoppedSessionException((java.lang.Throwable)var78);
    org.jsecurity.subject.SubjectException var80 = new org.jsecurity.subject.SubjectException((java.lang.Throwable)var79);
    org.jsecurity.session.UnknownSessionException var81 = new org.jsecurity.session.UnknownSessionException("e23a02c5-2287-4daa-91c4-8efed2be0f73", (java.lang.Throwable)var80);
    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      var0.setAttribute((java.io.Serializable)var7, (java.lang.Object)var9, (java.lang.Object)var80);
      fail("Expected exception of type org.jsecurity.session.UnknownSessionException");
    } catch (org.jsecurity.session.UnknownSessionException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var2 == 1800000L);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var7);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var11);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var12);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var13);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var21);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var22);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var23);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var29);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var30);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var31);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var49);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var50);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var52);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var53);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var54);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var55);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var63);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var64);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var65);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var70);

  }

  public void test402() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest2.test402");


    org.jsecurity.mgt.DefaultSecurityManager var0 = new org.jsecurity.mgt.DefaultSecurityManager();
    java.io.InputStream var2 = org.jsecurity.util.ClassUtils.getResourceAsStream("");
    java.lang.Object[] var3 = new java.lang.Object[] { var2};
    java.util.List var4 = org.jsecurity.util.CollectionUtils.asList(var3);
    org.jsecurity.authc.pam.ModularRealmAuthenticator var5 = new org.jsecurity.authc.pam.ModularRealmAuthenticator(var4);
    org.jsecurity.authc.pam.AllSuccessfulModularAuthenticationStrategy var6 = new org.jsecurity.authc.pam.AllSuccessfulModularAuthenticationStrategy();
    var5.setModularAuthenticationStrategy((org.jsecurity.authc.pam.ModularAuthenticationStrategy)var6);
    org.jsecurity.authz.SimpleAuthorizationInfo var8 = new org.jsecurity.authz.SimpleAuthorizationInfo();
    var8.addStringPermission("hi!");
    java.io.InputStream var12 = org.jsecurity.util.ClassUtils.getResourceAsStream("");
    java.lang.Object[] var13 = new java.lang.Object[] { var12};
    java.util.List var14 = org.jsecurity.util.CollectionUtils.asList(var13);
    var8.addRoles((java.util.Collection)var14);
    var5.setAuthenticationListeners((java.util.Collection)var14);
    var0.setSessionListeners((java.util.Collection)var14);
    org.jsecurity.authc.pam.ModularRealmAuthenticator var18 = new org.jsecurity.authc.pam.ModularRealmAuthenticator();
    org.jsecurity.authz.permission.InvalidPermissionStringException var21 = new org.jsecurity.authz.permission.InvalidPermissionStringException("", "dd\uFFFD");
    org.jsecurity.JSecurityException var23 = new org.jsecurity.JSecurityException("");
    org.jsecurity.authc.SimpleAuthenticationInfo var25 = new org.jsecurity.authc.SimpleAuthenticationInfo((java.lang.Object)var21, (java.lang.Object)"", "org.jsecurity.authz.UnauthorizedException: org.jsecurity.session.ExpiredSessionException: ");
    org.jsecurity.subject.PrincipalCollection var26 = var25.getPrincipals();
    var18.onLogout(var26);
    var0.setAuthenticator((org.jsecurity.authc.Authenticator)var18);
    org.jsecurity.codec.CodecException var31 = new org.jsecurity.codec.CodecException("dd\uFFFD");
    org.jsecurity.authc.ConcurrentAccessException var32 = new org.jsecurity.authc.ConcurrentAccessException("org.jsecurity.authz.UnauthorizedException: org.jsecurity.session.ExpiredSessionException: ", (java.lang.Throwable)var31);
    org.jsecurity.subject.SimplePrincipalCollection var34 = new org.jsecurity.subject.SimplePrincipalCollection((java.lang.Object)var31, "");
    org.jsecurity.authc.pam.FirstSuccessfulAuthenticationStrategy var35 = new org.jsecurity.authc.pam.FirstSuccessfulAuthenticationStrategy();
    org.jsecurity.authz.UnauthorizedException var37 = new org.jsecurity.authz.UnauthorizedException("org.jsecurity.config.ConfigurationException: dd\uFFFD");
    java.lang.Throwable[] var38 = var37.getSuppressed();
    java.util.List var39 = org.jsecurity.util.CollectionUtils.asList((java.lang.Object[])var38);
    org.jsecurity.authc.UsernamePasswordToken var40 = new org.jsecurity.authc.UsernamePasswordToken();
    java.lang.String var41 = var40.getUsername();
    java.net.InetAddress var42 = var40.getInetAddress();
    org.jsecurity.authc.AuthenticationInfo var43 = var35.beforeAllAttempts((java.util.Collection)var39, (org.jsecurity.authc.AuthenticationToken)var40);
    org.jsecurity.session.UnknownSessionException var48 = new org.jsecurity.session.UnknownSessionException("dd\uFFFD", (java.io.Serializable)100.0f);
    org.jsecurity.subject.SubjectException var49 = new org.jsecurity.subject.SubjectException("dd\uFFFD", (java.lang.Throwable)var48);
    org.jsecurity.io.SerializationException var50 = new org.jsecurity.io.SerializationException("", (java.lang.Throwable)var49);
    java.lang.Throwable[] var51 = var49.getSuppressed();
    java.util.Set var52 = org.jsecurity.util.CollectionUtils.asSet((java.lang.Object[])var51);
    org.jsecurity.authc.SimpleAccount var53 = new org.jsecurity.authc.SimpleAccount((org.jsecurity.subject.PrincipalCollection)var34, (java.lang.Object)var39, var52);
    java.io.InputStream var55 = org.jsecurity.util.ClassUtils.getResourceAsStream("");
    java.lang.Object[] var56 = new java.lang.Object[] { var55};
    java.util.List var57 = org.jsecurity.util.CollectionUtils.asList(var56);
    org.jsecurity.authc.pam.ModularRealmAuthenticator var58 = new org.jsecurity.authc.pam.ModularRealmAuthenticator(var57);
    org.jsecurity.subject.SimplePrincipalCollection var60 = new org.jsecurity.subject.SimplePrincipalCollection((java.util.Collection)var57, "org.jsecurity.authz.UnauthorizedException: org.jsecurity.session.ExpiredSessionException: ");
    org.jsecurity.io.ResourceException var64 = new org.jsecurity.io.ResourceException("hi!");
    org.jsecurity.authc.UnknownAccountException var65 = new org.jsecurity.authc.UnknownAccountException((java.lang.Throwable)var64);
    org.jsecurity.session.StoppedSessionException var66 = new org.jsecurity.session.StoppedSessionException("dd\uFFFD", (java.io.Serializable)var64);
    org.jsecurity.session.UnknownSessionException var67 = new org.jsecurity.session.UnknownSessionException("org.jsecurity.authz.UnauthorizedException: org.jsecurity.session.ExpiredSessionException: ", (java.lang.Throwable)var64);
    boolean var68 = var60.equals((java.lang.Object)var64);
    var34.addAll((org.jsecurity.subject.PrincipalCollection)var60);
    org.jsecurity.session.UnknownSessionException var74 = new org.jsecurity.session.UnknownSessionException("dd\uFFFD", (java.io.Serializable)100.0f);
    org.jsecurity.subject.SubjectException var75 = new org.jsecurity.subject.SubjectException("dd\uFFFD", (java.lang.Throwable)var74);
    org.jsecurity.io.SerializationException var76 = new org.jsecurity.io.SerializationException("", (java.lang.Throwable)var75);
    java.lang.Throwable[] var77 = var75.getSuppressed();
    java.util.List var78 = org.jsecurity.util.CollectionUtils.asList((java.lang.Object[])var77);
    boolean var79 = var0.isPermittedAll((org.jsecurity.subject.PrincipalCollection)var34, (java.util.Collection)var78);
    org.jsecurity.session.mgt.SessionManager var80 = var0.getSessionManager();
    org.jsecurity.subject.DelegatingSubject var81 = new org.jsecurity.subject.DelegatingSubject((org.jsecurity.mgt.SecurityManager)var0);
    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      org.jsecurity.session.Session var83 = var81.getSession(true);
      fail("Expected exception of type java.lang.ClassCastException");
    } catch (java.lang.ClassCastException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var2);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var3);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var4);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var12);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var13);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var14);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var26);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var38);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var39);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var41);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var42);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var43);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var51);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var52);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var55);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var56);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var57);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var68 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var77);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var78);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var79 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var80);

  }

  public void test403() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest2.test403");


    org.jsecurity.mgt.DefaultSecurityManager var0 = new org.jsecurity.mgt.DefaultSecurityManager();
    java.io.InputStream var2 = org.jsecurity.util.ClassUtils.getResourceAsStream("");
    java.lang.Object[] var3 = new java.lang.Object[] { var2};
    java.util.List var4 = org.jsecurity.util.CollectionUtils.asList(var3);
    org.jsecurity.authc.pam.ModularRealmAuthenticator var5 = new org.jsecurity.authc.pam.ModularRealmAuthenticator(var4);
    org.jsecurity.authc.pam.AllSuccessfulModularAuthenticationStrategy var6 = new org.jsecurity.authc.pam.AllSuccessfulModularAuthenticationStrategy();
    var5.setModularAuthenticationStrategy((org.jsecurity.authc.pam.ModularAuthenticationStrategy)var6);
    org.jsecurity.authz.SimpleAuthorizationInfo var8 = new org.jsecurity.authz.SimpleAuthorizationInfo();
    var8.addStringPermission("hi!");
    java.io.InputStream var12 = org.jsecurity.util.ClassUtils.getResourceAsStream("");
    java.lang.Object[] var13 = new java.lang.Object[] { var12};
    java.util.List var14 = org.jsecurity.util.CollectionUtils.asList(var13);
    var8.addRoles((java.util.Collection)var14);
    var5.setAuthenticationListeners((java.util.Collection)var14);
    var0.setSessionListeners((java.util.Collection)var14);
    java.util.Collection var18 = var0.getRealms();
    org.jsecurity.codec.CodecException var21 = new org.jsecurity.codec.CodecException("dd\uFFFD");
    org.jsecurity.authc.ConcurrentAccessException var22 = new org.jsecurity.authc.ConcurrentAccessException("org.jsecurity.authz.UnauthorizedException: org.jsecurity.session.ExpiredSessionException: ", (java.lang.Throwable)var21);
    org.jsecurity.subject.SimplePrincipalCollection var24 = new org.jsecurity.subject.SimplePrincipalCollection((java.lang.Object)var21, "");
    java.io.InputStream var26 = org.jsecurity.util.ClassUtils.getResourceAsStream("");
    java.lang.Object[] var27 = new java.lang.Object[] { var26};
    java.util.List var28 = org.jsecurity.util.CollectionUtils.asList(var27);
    org.jsecurity.authc.pam.ModularRealmAuthenticator var29 = new org.jsecurity.authc.pam.ModularRealmAuthenticator(var28);
    var24.addAll((java.util.Collection)var28, "\u0000\u0000");
    org.jsecurity.authz.UnauthorizedException var33 = new org.jsecurity.authz.UnauthorizedException();
    org.jsecurity.session.SessionException var35 = new org.jsecurity.session.SessionException("", (java.lang.Throwable)var33, (java.io.Serializable)"org.jsecurity.config.ConfigurationException: dd\uFFFD");
    org.jsecurity.crypto.hash.Sha1Hash var36 = new org.jsecurity.crypto.hash.Sha1Hash((java.lang.Object)"");
    org.jsecurity.session.UnknownSessionException var41 = new org.jsecurity.session.UnknownSessionException("dd\uFFFD", (java.io.Serializable)100.0f);
    org.jsecurity.subject.SubjectException var42 = new org.jsecurity.subject.SubjectException("dd\uFFFD", (java.lang.Throwable)var41);
    org.jsecurity.io.SerializationException var43 = new org.jsecurity.io.SerializationException("", (java.lang.Throwable)var42);
    java.lang.Throwable[] var44 = var42.getSuppressed();
    java.util.Set var45 = org.jsecurity.util.CollectionUtils.asSet((java.lang.Object[])var44);
    org.jsecurity.authz.SimpleAuthorizationInfo var47 = new org.jsecurity.authz.SimpleAuthorizationInfo();
    org.jsecurity.session.UnknownSessionException var52 = new org.jsecurity.session.UnknownSessionException("dd\uFFFD", (java.io.Serializable)100.0f);
    org.jsecurity.subject.SubjectException var53 = new org.jsecurity.subject.SubjectException("dd\uFFFD", (java.lang.Throwable)var52);
    org.jsecurity.io.SerializationException var54 = new org.jsecurity.io.SerializationException("", (java.lang.Throwable)var53);
    java.lang.Throwable[] var55 = var53.getSuppressed();
    java.util.Set var56 = org.jsecurity.util.CollectionUtils.asSet((java.lang.Object[])var55);
    var47.setStringPermissions(var56);
    java.util.Set var58 = var47.getRoles();
    org.jsecurity.authz.SimpleAuthorizationInfo var59 = new org.jsecurity.authz.SimpleAuthorizationInfo();
    var59.addRole("a2b823b1e72eae2b727289df8a00a89df8a0bab6ad8a89c4c5c7a9b62a270000");
    org.jsecurity.session.UnknownSessionException var66 = new org.jsecurity.session.UnknownSessionException("dd\uFFFD", (java.io.Serializable)100.0f);
    org.jsecurity.subject.SubjectException var67 = new org.jsecurity.subject.SubjectException("dd\uFFFD", (java.lang.Throwable)var66);
    org.jsecurity.io.SerializationException var68 = new org.jsecurity.io.SerializationException("", (java.lang.Throwable)var67);
    java.lang.Throwable[] var69 = var67.getSuppressed();
    java.util.Set var70 = org.jsecurity.util.CollectionUtils.asSet((java.lang.Object[])var69);
    var59.addRoles((java.util.Collection)var70);
    var47.setRoles(var70);
    org.jsecurity.authz.SimpleRole var73 = new org.jsecurity.authz.SimpleRole("org.jsecurity.authz.UnauthorizedException: org.jsecurity.session.ExpiredSessionException: ", var70);
    org.jsecurity.authc.SimpleAccount var74 = new org.jsecurity.authc.SimpleAccount((org.jsecurity.subject.PrincipalCollection)var24, (java.lang.Object)"", var45, var70);
    org.jsecurity.authz.SimpleAuthorizationInfo var75 = new org.jsecurity.authz.SimpleAuthorizationInfo();
    var75.addStringPermission("hi!");
    org.jsecurity.authz.SimpleAuthorizationInfo var79 = new org.jsecurity.authz.SimpleAuthorizationInfo();
    org.jsecurity.session.UnknownSessionException var84 = new org.jsecurity.session.UnknownSessionException("dd\uFFFD", (java.io.Serializable)100.0f);
    org.jsecurity.subject.SubjectException var85 = new org.jsecurity.subject.SubjectException("dd\uFFFD", (java.lang.Throwable)var84);
    org.jsecurity.io.SerializationException var86 = new org.jsecurity.io.SerializationException("", (java.lang.Throwable)var85);
    java.lang.Throwable[] var87 = var85.getSuppressed();
    java.util.Set var88 = org.jsecurity.util.CollectionUtils.asSet((java.lang.Object[])var87);
    var79.setStringPermissions(var88);
    org.jsecurity.authz.SimpleRole var90 = new org.jsecurity.authz.SimpleRole("\u0000\u0000", var88);
    var75.setRoles(var88);
    boolean var92 = var0.isPermittedAll((org.jsecurity.subject.PrincipalCollection)var24, (java.util.Collection)var88);
    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      var0.setRememberMeCipherKeyBase64("d8d550ee-3a8c-48f0-8061-1d82c827f505");
      fail("Expected exception of type java.lang.IllegalStateException");
    } catch (java.lang.IllegalStateException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var2);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var3);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var4);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var12);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var13);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var14);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var18);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var26);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var27);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var28);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var44);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var45);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var55);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var56);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var58);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var69);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var70);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var87);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var88);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var92 == true);

  }

  public void test404() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest2.test404");


    org.jsecurity.authz.SimpleAuthorizationInfo var0 = new org.jsecurity.authz.SimpleAuthorizationInfo();
    var0.addRole("a2b823b1e72eae2b727289df8a00a89df8a0bab6ad8a89c4c5c7a9b62a270000");
    org.jsecurity.session.UnknownSessionException var7 = new org.jsecurity.session.UnknownSessionException("dd\uFFFD", (java.io.Serializable)100.0f);
    org.jsecurity.subject.SubjectException var8 = new org.jsecurity.subject.SubjectException("dd\uFFFD", (java.lang.Throwable)var7);
    org.jsecurity.io.SerializationException var9 = new org.jsecurity.io.SerializationException("", (java.lang.Throwable)var8);
    java.lang.Throwable[] var10 = var8.getSuppressed();
    java.util.Set var11 = org.jsecurity.util.CollectionUtils.asSet((java.lang.Object[])var10);
    var0.addRoles((java.util.Collection)var11);
    java.util.Set var13 = var0.getObjectPermissions();
    var0.addStringPermission("783ccd31-48a8-42dd-890f-df885a7baaff");
    var0.addStringPermission("75c873c8-19df-476a-b82e-72a1eddf7e4b");
    org.jsecurity.authz.SimpleRole var18 = new org.jsecurity.authz.SimpleRole();
    org.jsecurity.authz.SimpleAuthorizationInfo var19 = new org.jsecurity.authz.SimpleAuthorizationInfo();
    var19.addRole("a2b823b1e72eae2b727289df8a00a89df8a0bab6ad8a89c4c5c7a9b62a270000");
    org.jsecurity.session.UnknownSessionException var26 = new org.jsecurity.session.UnknownSessionException("dd\uFFFD", (java.io.Serializable)100.0f);
    org.jsecurity.subject.SubjectException var27 = new org.jsecurity.subject.SubjectException("dd\uFFFD", (java.lang.Throwable)var26);
    org.jsecurity.io.SerializationException var28 = new org.jsecurity.io.SerializationException("", (java.lang.Throwable)var27);
    java.lang.Throwable[] var29 = var27.getSuppressed();
    java.util.Set var30 = org.jsecurity.util.CollectionUtils.asSet((java.lang.Object[])var29);
    var19.addRoles((java.util.Collection)var30);
    var18.addAll((java.util.Collection)var30);
    org.jsecurity.authz.SimpleRole var33 = new org.jsecurity.authz.SimpleRole();
    org.jsecurity.authz.SimpleAuthorizationInfo var34 = new org.jsecurity.authz.SimpleAuthorizationInfo();
    var34.addRole("a2b823b1e72eae2b727289df8a00a89df8a0bab6ad8a89c4c5c7a9b62a270000");
    org.jsecurity.session.UnknownSessionException var41 = new org.jsecurity.session.UnknownSessionException("dd\uFFFD", (java.io.Serializable)100.0f);
    org.jsecurity.subject.SubjectException var42 = new org.jsecurity.subject.SubjectException("dd\uFFFD", (java.lang.Throwable)var41);
    org.jsecurity.io.SerializationException var43 = new org.jsecurity.io.SerializationException("", (java.lang.Throwable)var42);
    java.lang.Throwable[] var44 = var42.getSuppressed();
    java.util.Set var45 = org.jsecurity.util.CollectionUtils.asSet((java.lang.Object[])var44);
    var34.addRoles((java.util.Collection)var45);
    var33.addAll((java.util.Collection)var45);
    java.lang.String var48 = var33.getName();
    org.jsecurity.authz.permission.WildcardPermission var51 = new org.jsecurity.authz.permission.WildcardPermission("hi!", false);
    var33.add((org.jsecurity.authz.Permission)var51);
    var18.add((org.jsecurity.authz.Permission)var51);
    org.jsecurity.authz.SimpleAuthorizationInfo var55 = new org.jsecurity.authz.SimpleAuthorizationInfo();
    var55.addRole("a2b823b1e72eae2b727289df8a00a89df8a0bab6ad8a89c4c5c7a9b62a270000");
    org.jsecurity.session.UnknownSessionException var62 = new org.jsecurity.session.UnknownSessionException("dd\uFFFD", (java.io.Serializable)100.0f);
    org.jsecurity.subject.SubjectException var63 = new org.jsecurity.subject.SubjectException("dd\uFFFD", (java.lang.Throwable)var62);
    org.jsecurity.io.SerializationException var64 = new org.jsecurity.io.SerializationException("", (java.lang.Throwable)var63);
    java.lang.Throwable[] var65 = var63.getSuppressed();
    java.util.Set var66 = org.jsecurity.util.CollectionUtils.asSet((java.lang.Object[])var65);
    var55.addRoles((java.util.Collection)var66);
    org.jsecurity.authz.SimpleRole var68 = new org.jsecurity.authz.SimpleRole("dd\uFFFD", var66);
    var18.setPermissions(var66);
    org.jsecurity.authz.SimpleAuthorizationInfo var70 = new org.jsecurity.authz.SimpleAuthorizationInfo(var66);
    var0.setObjectPermissions(var66);
    org.jsecurity.authz.ModularRealmAuthorizer var72 = new org.jsecurity.authz.ModularRealmAuthorizer((java.util.Collection)var66);
    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      org.jsecurity.crypto.hash.Sha1Hash var73 = new org.jsecurity.crypto.hash.Sha1Hash((java.lang.Object)var66);
      fail("Expected exception of type org.jsecurity.codec.CodecException");
    } catch (org.jsecurity.codec.CodecException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var10);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var11);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var13);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var29);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var30);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var44);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var45);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var48);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var65);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var66);

  }

  public void test405() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest2.test405");


    org.jsecurity.io.IniResource var0 = new org.jsecurity.io.IniResource();
    java.util.Map var1 = var0.getSections();
    java.lang.String var2 = var0.getCharsetName();
    org.jsecurity.config.ReflectionBuilder var3 = new org.jsecurity.config.ReflectionBuilder();
    org.jsecurity.io.IniResource var4 = new org.jsecurity.io.IniResource();
    java.util.Map var5 = var4.getSections();
    var3.setObjects(var5);
    org.jsecurity.io.IniResource var7 = new org.jsecurity.io.IniResource();
    java.util.Map var8 = var7.getSections();
    java.util.Map var9 = var3.buildObjects(var8);
    var0.setSections(var9);
    java.io.InputStream var12 = org.jsecurity.util.ClassUtils.getResourceAsStream("");
    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      var0.load(var12);
      fail("Expected exception of type org.jsecurity.io.ResourceException");
    } catch (org.jsecurity.io.ResourceException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var1);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var2);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var5);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var8);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var9);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var12);

  }

  public void test406() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest2.test406");


    org.jsecurity.mgt.DefaultSecurityManager var0 = new org.jsecurity.mgt.DefaultSecurityManager();
    java.io.InputStream var2 = org.jsecurity.util.ClassUtils.getResourceAsStream("");
    java.lang.Object[] var3 = new java.lang.Object[] { var2};
    java.util.List var4 = org.jsecurity.util.CollectionUtils.asList(var3);
    org.jsecurity.authc.pam.ModularRealmAuthenticator var5 = new org.jsecurity.authc.pam.ModularRealmAuthenticator(var4);
    org.jsecurity.authc.pam.AllSuccessfulModularAuthenticationStrategy var6 = new org.jsecurity.authc.pam.AllSuccessfulModularAuthenticationStrategy();
    var5.setModularAuthenticationStrategy((org.jsecurity.authc.pam.ModularAuthenticationStrategy)var6);
    org.jsecurity.authz.SimpleAuthorizationInfo var8 = new org.jsecurity.authz.SimpleAuthorizationInfo();
    var8.addStringPermission("hi!");
    java.io.InputStream var12 = org.jsecurity.util.ClassUtils.getResourceAsStream("");
    java.lang.Object[] var13 = new java.lang.Object[] { var12};
    java.util.List var14 = org.jsecurity.util.CollectionUtils.asList(var13);
    var8.addRoles((java.util.Collection)var14);
    var5.setAuthenticationListeners((java.util.Collection)var14);
    var0.setSessionListeners((java.util.Collection)var14);
    org.jsecurity.subject.Subject var18 = var0.getSubject();
    org.jsecurity.crypto.BlowfishCipher var19 = new org.jsecurity.crypto.BlowfishCipher();
    java.security.Key var20 = var19.getKey();
    java.security.Key var21 = var19.getKey();
    java.security.Key var22 = var19.getKey();
    java.security.Key var23 = var19.getKey();
    java.io.InputStream var25 = org.jsecurity.util.ClassUtils.getResourceAsStream("");
    java.lang.Object[] var26 = new java.lang.Object[] { var25};
    java.util.List var27 = org.jsecurity.util.CollectionUtils.asList(var26);
    org.jsecurity.authc.pam.ModularRealmAuthenticator var28 = new org.jsecurity.authc.pam.ModularRealmAuthenticator(var27);
    java.io.InputStream var30 = org.jsecurity.util.ClassUtils.getResourceAsStream("");
    java.lang.Object[] var31 = new java.lang.Object[] { var30};
    java.util.List var32 = org.jsecurity.util.CollectionUtils.asList(var31);
    org.jsecurity.authc.pam.ModularRealmAuthenticator var33 = new org.jsecurity.authc.pam.ModularRealmAuthenticator(var32);
    var28.setRealms((java.util.Collection)var32);
    org.jsecurity.subject.SimplePrincipalCollection var36 = new org.jsecurity.subject.SimplePrincipalCollection((java.util.Collection)var32, "org.jsecurity.realm.SimpleAccountRealm-9-authorization");
    org.jsecurity.crypto.BlowfishCipher var37 = new org.jsecurity.crypto.BlowfishCipher();
    java.security.Key var38 = org.jsecurity.crypto.BlowfishCipher.generateNewKey();
    var37.setKey(var38);
    org.jsecurity.authz.SimpleAuthorizingAccount var40 = new org.jsecurity.authz.SimpleAuthorizingAccount((org.jsecurity.subject.PrincipalCollection)var36, (java.lang.Object)var38);
    var19.setKey(var38);
    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      var0.setRememberMeCipher((org.jsecurity.crypto.Cipher)var19);
      fail("Expected exception of type java.lang.IllegalStateException");
    } catch (java.lang.IllegalStateException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var2);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var3);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var4);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var12);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var13);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var14);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var18);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var20);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var21);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var22);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var23);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var25);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var26);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var27);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var30);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var31);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var32);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var38);

  }

  public void test407() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest2.test407");


    org.jsecurity.cache.HashtableCache var1 = new org.jsecurity.cache.HashtableCache("orgjsecurityauthcCredentialsException783ccd3148a842dd890fdf885a7baafAA==");
    int var2 = var1.size();
    org.jsecurity.session.UnknownSessionException var7 = new org.jsecurity.session.UnknownSessionException("dd\uFFFD", (java.io.Serializable)100.0f);
    org.jsecurity.subject.SubjectException var8 = new org.jsecurity.subject.SubjectException("dd\uFFFD", (java.lang.Throwable)var7);
    org.jsecurity.authc.AccountException var9 = new org.jsecurity.authc.AccountException("hi!", (java.lang.Throwable)var8);
    org.jsecurity.session.UnknownSessionException var10 = new org.jsecurity.session.UnknownSessionException((java.lang.Throwable)var8);
    org.jsecurity.codec.CodecException var11 = new org.jsecurity.codec.CodecException((java.lang.Throwable)var8);
    org.jsecurity.config.UnresolveableReferenceException var12 = new org.jsecurity.config.UnresolveableReferenceException((java.lang.Throwable)var8);
    char[] var16 = new char[] { ' ', ' '};
    org.jsecurity.authc.UsernamePasswordToken var17 = new org.jsecurity.authc.UsernamePasswordToken("hi!", var16);
    char[] var21 = new char[] { '4', '#'};
    org.jsecurity.authc.UsernamePasswordToken var22 = new org.jsecurity.authc.UsernamePasswordToken("\u0000\u0000", var21);
    var17.setPassword(var21);
    var1.put((java.lang.Object)var8, (java.lang.Object)var21);
    byte[] var25 = org.jsecurity.codec.CodecSupport.toBytes(var21);
    char[] var26 = org.jsecurity.codec.CodecSupport.toChars(var25);
    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      byte[] var27 = org.jsecurity.codec.Hex.decode(var26);
      fail("Expected exception of type java.lang.IllegalArgumentException");
    } catch (java.lang.IllegalArgumentException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var2 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var16);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var21);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var25);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var26);

  }

  public void test408() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest2.test408");


    org.jsecurity.session.mgt.eis.MemorySessionDAO var0 = new org.jsecurity.session.mgt.eis.MemorySessionDAO();
    org.jsecurity.cache.Cache var1 = var0.getActiveSessionsCache();
    org.jsecurity.cache.CacheManager var2 = var0.getCacheManager();
    org.jsecurity.cache.HashtableCacheManager var3 = new org.jsecurity.cache.HashtableCacheManager();
    org.jsecurity.cache.Cache var5 = var3.getCache("\u0000\u0000");
    var0.setActiveSessionsCache(var5);
    java.io.InputStream var8 = org.jsecurity.util.ClassUtils.getResourceAsStream("");
    java.lang.Object[] var9 = new java.lang.Object[] { var8};
    java.util.List var10 = org.jsecurity.util.CollectionUtils.asList(var9);
    org.jsecurity.authc.pam.ModularRealmAuthenticator var11 = new org.jsecurity.authc.pam.ModularRealmAuthenticator(var10);
    org.jsecurity.authc.pam.AllSuccessfulModularAuthenticationStrategy var12 = new org.jsecurity.authc.pam.AllSuccessfulModularAuthenticationStrategy();
    var11.setModularAuthenticationStrategy((org.jsecurity.authc.pam.ModularAuthenticationStrategy)var12);
    org.jsecurity.authz.SimpleAuthorizationInfo var14 = new org.jsecurity.authz.SimpleAuthorizationInfo();
    var14.addStringPermission("hi!");
    java.io.InputStream var18 = org.jsecurity.util.ClassUtils.getResourceAsStream("");
    java.lang.Object[] var19 = new java.lang.Object[] { var18};
    java.util.List var20 = org.jsecurity.util.CollectionUtils.asList(var19);
    var14.addRoles((java.util.Collection)var20);
    var11.setAuthenticationListeners((java.util.Collection)var20);
    org.jsecurity.realm.activedirectory.ActiveDirectoryRealm var23 = new org.jsecurity.realm.activedirectory.ActiveDirectoryRealm();
    var23.setPrincipalSuffix("");
    var11.setRealm((org.jsecurity.realm.Realm)var23);
    org.jsecurity.cache.HashtableCacheManager var27 = new org.jsecurity.cache.HashtableCacheManager();
    org.jsecurity.cache.Cache var29 = var27.getCache("\u0000\u0000");
    var23.setAuthorizationCache(var29);
    var0.setActiveSessionsCache(var29);
    org.jsecurity.session.mgt.SimpleSession var32 = new org.jsecurity.session.mgt.SimpleSession();
    java.io.Serializable var33 = var0.create((org.jsecurity.session.Session)var32);
    org.jsecurity.session.mgt.SimpleSession var34 = new org.jsecurity.session.mgt.SimpleSession();
    var34.touch();
    var34.validate();
    org.jsecurity.session.mgt.SimpleSession var37 = new org.jsecurity.session.mgt.SimpleSession();
    var37.setTimeout((-1L));
    org.jsecurity.session.mgt.SimpleSession var40 = new org.jsecurity.session.mgt.SimpleSession();
    java.util.Date var41 = var40.getLastAccessTime();
    var37.setLastAccessTime(var41);
    org.jsecurity.session.mgt.SimpleSession var43 = new org.jsecurity.session.mgt.SimpleSession();
    java.util.Date var44 = var43.getLastAccessTime();
    var37.setStopTimestamp(var44);
    var34.setLastAccessTime(var44);
    var32.setLastAccessTime(var44);
    org.jsecurity.session.mgt.ImmutableProxiedSession var48 = new org.jsecurity.session.mgt.ImmutableProxiedSession((org.jsecurity.session.Session)var32);
    java.util.Date var49 = var48.getStartTimestamp();
    java.io.Serializable var50 = var48.getId();
    java.util.Date var51 = var48.getStartTimestamp();
    org.jsecurity.io.IniResource var52 = new org.jsecurity.io.IniResource();
    java.util.Map var53 = var52.getSections();
    java.lang.String var54 = var52.getCharsetName();
    org.jsecurity.config.ReflectionBuilder var55 = new org.jsecurity.config.ReflectionBuilder();
    org.jsecurity.io.IniResource var56 = new org.jsecurity.io.IniResource();
    java.util.Map var57 = var56.getSections();
    var55.setObjects(var57);
    org.jsecurity.io.IniResource var59 = new org.jsecurity.io.IniResource();
    java.util.Map var60 = var59.getSections();
    java.util.Map var61 = var55.buildObjects(var60);
    var52.setSections(var61);
    java.lang.String var63 = var52.getCharsetName();
    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      java.lang.Object var64 = var48.removeAttribute((java.lang.Object)var52);
      fail("Expected exception of type org.jsecurity.session.InvalidSessionException");
    } catch (org.jsecurity.session.InvalidSessionException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var1);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var2);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var5);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var8);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var9);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var10);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var18);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var19);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var20);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var29);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var33 + "' != '" + "2caa66e5-14e3-49aa-b611-a2256bbddac3"+ "'", var33.equals("2caa66e5-14e3-49aa-b611-a2256bbddac3"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var41);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var44);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var49);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var50 + "' != '" + "2caa66e5-14e3-49aa-b611-a2256bbddac3"+ "'", var50.equals("2caa66e5-14e3-49aa-b611-a2256bbddac3"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var51);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var53);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var54);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var57);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var60);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var61);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var63);

  }

  public void test409() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest2.test409");


    org.jsecurity.realm.text.TextConfigurationRealm var0 = new org.jsecurity.realm.text.TextConfigurationRealm();
    java.io.InputStream var2 = org.jsecurity.util.ClassUtils.getResourceAsStream("");
    java.lang.Object[] var3 = new java.lang.Object[] { var2};
    java.util.List var4 = org.jsecurity.util.CollectionUtils.asList(var3);
    org.jsecurity.authc.pam.ModularRealmAuthenticator var5 = new org.jsecurity.authc.pam.ModularRealmAuthenticator(var4);
    org.jsecurity.subject.SimplePrincipalCollection var7 = new org.jsecurity.subject.SimplePrincipalCollection((java.util.Collection)var4, "org.jsecurity.authz.UnauthorizedException: org.jsecurity.session.ExpiredSessionException: ");
    org.jsecurity.session.UnknownSessionException var12 = new org.jsecurity.session.UnknownSessionException("dd\uFFFD", (java.io.Serializable)100.0f);
    org.jsecurity.session.SessionException var14 = new org.jsecurity.session.SessionException("dd\uFFFD", (java.lang.Throwable)var12, (java.io.Serializable)0);
    org.jsecurity.session.SessionException var15 = new org.jsecurity.session.SessionException("dd\uFFFD", (java.lang.Throwable)var12);
    var7.add((java.lang.Object)var15, "org.jsecurity.config.ConfigurationException: dd\uFFFD");
    var0.onLogout((org.jsecurity.subject.PrincipalCollection)var7);
    org.jsecurity.realm.activedirectory.ActiveDirectoryRealm var19 = new org.jsecurity.realm.activedirectory.ActiveDirectoryRealm();
    org.jsecurity.authc.credential.Sha256CredentialsMatcher var20 = new org.jsecurity.authc.credential.Sha256CredentialsMatcher();
    var19.setCredentialsMatcher((org.jsecurity.authc.credential.CredentialsMatcher)var20);
    java.lang.String var22 = var19.getAuthorizationCacheName();
    var19.setPrincipalSuffix("org.jsecurity.config.ConfigurationException: dd\uFFFD");
    org.jsecurity.authz.permission.PermissionResolver var25 = var19.getPermissionResolver();
    var0.setPermissionResolver(var25);
    java.lang.String var27 = var0.getUserDefinitions();
    java.lang.String var28 = var0.getAuthorizationCacheName();
    var0.afterAuthorizationCacheSet();
    org.jsecurity.JSecurityException var31 = new org.jsecurity.JSecurityException();
    org.jsecurity.session.UnknownSessionException var36 = new org.jsecurity.session.UnknownSessionException("dd\uFFFD", (java.io.Serializable)100.0f);
    org.jsecurity.subject.SubjectException var37 = new org.jsecurity.subject.SubjectException("dd\uFFFD", (java.lang.Throwable)var36);
    org.jsecurity.authc.AccountException var38 = new org.jsecurity.authc.AccountException("hi!", (java.lang.Throwable)var37);
    org.jsecurity.session.StoppedSessionException var39 = new org.jsecurity.session.StoppedSessionException((java.lang.Throwable)var38);
    org.jsecurity.session.SessionException var40 = new org.jsecurity.session.SessionException("a2b823b1e72eae2b727289df8a00a89df8a0bab6ad8a89c4c5c7a9b62a270000", (java.lang.Throwable)var31, (java.io.Serializable)var38);
    org.jsecurity.session.UnknownSessionException var44 = new org.jsecurity.session.UnknownSessionException("dd\uFFFD", (java.io.Serializable)100.0f);
    org.jsecurity.session.SessionException var46 = new org.jsecurity.session.SessionException("dd\uFFFD", (java.lang.Throwable)var44, (java.io.Serializable)0);
    org.jsecurity.authc.SimpleAuthenticationInfo var49 = new org.jsecurity.authc.SimpleAuthenticationInfo((java.lang.Object)0, (java.lang.Object)10, "hi!");
    org.jsecurity.codec.CodecException var52 = new org.jsecurity.codec.CodecException("dd\uFFFD");
    org.jsecurity.authc.ConcurrentAccessException var53 = new org.jsecurity.authc.ConcurrentAccessException("org.jsecurity.authz.UnauthorizedException: org.jsecurity.session.ExpiredSessionException: ", (java.lang.Throwable)var52);
    org.jsecurity.subject.SimplePrincipalCollection var55 = new org.jsecurity.subject.SimplePrincipalCollection((java.lang.Object)var52, "");
    org.jsecurity.authc.pam.FirstSuccessfulAuthenticationStrategy var56 = new org.jsecurity.authc.pam.FirstSuccessfulAuthenticationStrategy();
    org.jsecurity.authz.UnauthorizedException var58 = new org.jsecurity.authz.UnauthorizedException("org.jsecurity.config.ConfigurationException: dd\uFFFD");
    java.lang.Throwable[] var59 = var58.getSuppressed();
    java.util.List var60 = org.jsecurity.util.CollectionUtils.asList((java.lang.Object[])var59);
    org.jsecurity.authc.UsernamePasswordToken var61 = new org.jsecurity.authc.UsernamePasswordToken();
    java.lang.String var62 = var61.getUsername();
    java.net.InetAddress var63 = var61.getInetAddress();
    org.jsecurity.authc.AuthenticationInfo var64 = var56.beforeAllAttempts((java.util.Collection)var60, (org.jsecurity.authc.AuthenticationToken)var61);
    org.jsecurity.session.UnknownSessionException var69 = new org.jsecurity.session.UnknownSessionException("dd\uFFFD", (java.io.Serializable)100.0f);
    org.jsecurity.subject.SubjectException var70 = new org.jsecurity.subject.SubjectException("dd\uFFFD", (java.lang.Throwable)var69);
    org.jsecurity.io.SerializationException var71 = new org.jsecurity.io.SerializationException("", (java.lang.Throwable)var70);
    java.lang.Throwable[] var72 = var70.getSuppressed();
    java.util.Set var73 = org.jsecurity.util.CollectionUtils.asSet((java.lang.Object[])var72);
    org.jsecurity.authc.SimpleAccount var74 = new org.jsecurity.authc.SimpleAccount((org.jsecurity.subject.PrincipalCollection)var55, (java.lang.Object)var60, var73);
    var49.setPrincipals((org.jsecurity.subject.PrincipalCollection)var55);
    var40.setSessionId((java.io.Serializable)var55);
    java.lang.String[] var78 = org.jsecurity.util.StringUtils.split("HashtableCache [\u0000\u0000\u0000]");
    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      var0.checkPermissions((org.jsecurity.subject.PrincipalCollection)var55, var78);
      fail("Expected exception of type java.util.NoSuchElementException");
    } catch (java.util.NoSuchElementException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var2);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var3);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var4);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var22);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var25);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var27);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var28);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var59);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var60);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var62);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var63);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var64);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var72);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var73);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var78);

  }

  public void test410() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest2.test410");


    org.jsecurity.authc.pam.UnsupportedTokenException var0 = new org.jsecurity.authc.pam.UnsupportedTokenException();
    org.jsecurity.authc.UnknownAccountException var1 = new org.jsecurity.authc.UnknownAccountException((java.lang.Throwable)var0);
    org.jsecurity.authc.AccountException var2 = new org.jsecurity.authc.AccountException((java.lang.Throwable)var1);
    org.jsecurity.mgt.DefaultSecurityManager var3 = new org.jsecurity.mgt.DefaultSecurityManager();
    java.io.InputStream var5 = org.jsecurity.util.ClassUtils.getResourceAsStream("");
    java.lang.Object[] var6 = new java.lang.Object[] { var5};
    java.util.List var7 = org.jsecurity.util.CollectionUtils.asList(var6);
    org.jsecurity.authc.pam.ModularRealmAuthenticator var8 = new org.jsecurity.authc.pam.ModularRealmAuthenticator(var7);
    org.jsecurity.authc.pam.AllSuccessfulModularAuthenticationStrategy var9 = new org.jsecurity.authc.pam.AllSuccessfulModularAuthenticationStrategy();
    var8.setModularAuthenticationStrategy((org.jsecurity.authc.pam.ModularAuthenticationStrategy)var9);
    org.jsecurity.authz.SimpleAuthorizationInfo var11 = new org.jsecurity.authz.SimpleAuthorizationInfo();
    var11.addStringPermission("hi!");
    java.io.InputStream var15 = org.jsecurity.util.ClassUtils.getResourceAsStream("");
    java.lang.Object[] var16 = new java.lang.Object[] { var15};
    java.util.List var17 = org.jsecurity.util.CollectionUtils.asList(var16);
    var11.addRoles((java.util.Collection)var17);
    var8.setAuthenticationListeners((java.util.Collection)var17);
    var3.setSessionListeners((java.util.Collection)var17);
    org.jsecurity.realm.text.TextConfigurationRealm var21 = new org.jsecurity.realm.text.TextConfigurationRealm();
    java.io.InputStream var23 = org.jsecurity.util.ClassUtils.getResourceAsStream("");
    java.lang.Object[] var24 = new java.lang.Object[] { var23};
    java.util.List var25 = org.jsecurity.util.CollectionUtils.asList(var24);
    org.jsecurity.authc.pam.ModularRealmAuthenticator var26 = new org.jsecurity.authc.pam.ModularRealmAuthenticator(var25);
    org.jsecurity.subject.SimplePrincipalCollection var28 = new org.jsecurity.subject.SimplePrincipalCollection((java.util.Collection)var25, "org.jsecurity.authz.UnauthorizedException: org.jsecurity.session.ExpiredSessionException: ");
    org.jsecurity.session.UnknownSessionException var33 = new org.jsecurity.session.UnknownSessionException("dd\uFFFD", (java.io.Serializable)100.0f);
    org.jsecurity.session.SessionException var35 = new org.jsecurity.session.SessionException("dd\uFFFD", (java.lang.Throwable)var33, (java.io.Serializable)0);
    org.jsecurity.session.SessionException var36 = new org.jsecurity.session.SessionException("dd\uFFFD", (java.lang.Throwable)var33);
    var28.add((java.lang.Object)var36, "org.jsecurity.config.ConfigurationException: dd\uFFFD");
    var21.onLogout((org.jsecurity.subject.PrincipalCollection)var28);
    org.jsecurity.authc.pam.FirstSuccessfulAuthenticationStrategy var40 = new org.jsecurity.authc.pam.FirstSuccessfulAuthenticationStrategy();
    org.jsecurity.authz.UnauthorizedException var42 = new org.jsecurity.authz.UnauthorizedException("org.jsecurity.config.ConfigurationException: dd\uFFFD");
    java.lang.Throwable[] var43 = var42.getSuppressed();
    java.util.List var44 = org.jsecurity.util.CollectionUtils.asList((java.lang.Object[])var43);
    org.jsecurity.authc.UsernamePasswordToken var45 = new org.jsecurity.authc.UsernamePasswordToken();
    java.lang.String var46 = var45.getUsername();
    java.net.InetAddress var47 = var45.getInetAddress();
    org.jsecurity.authc.AuthenticationInfo var48 = var40.beforeAllAttempts((java.util.Collection)var44, (org.jsecurity.authc.AuthenticationToken)var45);
    boolean[] var49 = var3.hasRoles((org.jsecurity.subject.PrincipalCollection)var28, var44);
    org.jsecurity.codec.CodecException var52 = new org.jsecurity.codec.CodecException("dd\uFFFD");
    org.jsecurity.authc.ConcurrentAccessException var53 = new org.jsecurity.authc.ConcurrentAccessException("org.jsecurity.authz.UnauthorizedException: org.jsecurity.session.ExpiredSessionException: ", (java.lang.Throwable)var52);
    org.jsecurity.subject.SimplePrincipalCollection var55 = new org.jsecurity.subject.SimplePrincipalCollection((java.lang.Object)var52, "");
    java.io.InputStream var57 = org.jsecurity.util.ClassUtils.getResourceAsStream("");
    java.lang.Object[] var58 = new java.lang.Object[] { var57};
    java.util.List var59 = org.jsecurity.util.CollectionUtils.asList(var58);
    org.jsecurity.authc.pam.ModularRealmAuthenticator var60 = new org.jsecurity.authc.pam.ModularRealmAuthenticator(var59);
    var55.addAll((java.util.Collection)var59, "\u0000\u0000");
    var3.setSessionListeners((java.util.Collection)var59);
    org.jsecurity.authc.SimpleAccount var65 = new org.jsecurity.authc.SimpleAccount((java.lang.Object)var2, (java.lang.Object)var3, "ZGT/");
    org.jsecurity.subject.DelegatingSubject var66 = new org.jsecurity.subject.DelegatingSubject((org.jsecurity.mgt.SecurityManager)var3);
    org.jsecurity.crypto.BlowfishCipher var67 = new org.jsecurity.crypto.BlowfishCipher();
    java.security.Key var68 = var67.getKey();
    java.security.Key var69 = var67.getKey();
    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      var3.setRememberMeCipher((org.jsecurity.crypto.Cipher)var67);
      fail("Expected exception of type java.lang.IllegalStateException");
    } catch (java.lang.IllegalStateException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var5);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var6);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var7);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var15);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var16);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var17);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var23);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var24);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var25);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var43);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var44);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var46);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var47);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var48);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var49);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var57);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var58);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var59);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var68);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var69);

  }

  public void test411() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest2.test411");


    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      java.lang.Class var1 = org.jsecurity.util.ClassUtils.forName("HashtableCache [orgjsecurityauthcCredentialsException783ccd3148a842dd890fdf885a7baafAA==]");
      fail("Expected exception of type org.jsecurity.util.UnknownClassException");
    } catch (org.jsecurity.util.UnknownClassException e) {
      // Expected exception.
    }

  }

  public void test412() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest2.test412");


    org.jsecurity.authc.ConcurrentAccessException var1 = new org.jsecurity.authc.ConcurrentAccessException("ca73d1a4-706e-42e7-980f-896d3b153de8");

  }

  public void test413() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest2.test413");


    org.jsecurity.realm.jndi.JndiRealmFactory var0 = new org.jsecurity.realm.jndi.JndiRealmFactory();
    org.jsecurity.authc.ExpiredCredentialsException var2 = new org.jsecurity.authc.ExpiredCredentialsException();
    org.jsecurity.session.ExpiredSessionException var3 = new org.jsecurity.session.ExpiredSessionException("", (java.lang.Throwable)var2);
    java.lang.Throwable[] var4 = var3.getSuppressed();
    java.util.List var5 = org.jsecurity.util.CollectionUtils.asList((java.lang.Object[])var4);
    var0.setJndiNames((java.util.Collection)var5);
    org.jsecurity.jndi.JndiTemplate var7 = new org.jsecurity.jndi.JndiTemplate();
    java.util.Properties var8 = var7.getEnvironment();
    var0.setJndiTemplate(var7);
    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      java.lang.Object var11 = var7.lookup("\uFFFD\uFFFD\uFFFDq\uFFFD\uFFFD\uFFFD\u01BC\uFFFDg]\uFFFD\uFFFD\u001Fu\uFFFD<\uFFFD\uFFFDi\uFFFD\uFFFD");
      fail("Expected exception of type javax.naming.NoInitialContextException");
    } catch (javax.naming.NoInitialContextException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var4);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var5);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var8);

  }

  public void test414() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest2.test414");


    org.jsecurity.authc.IncorrectCredentialsException var1 = new org.jsecurity.authc.IncorrectCredentialsException("");
    org.jsecurity.authc.ExcessiveAttemptsException var2 = new org.jsecurity.authc.ExcessiveAttemptsException((java.lang.Throwable)var1);
    org.jsecurity.authz.UnauthorizedException var3 = new org.jsecurity.authz.UnauthorizedException((java.lang.Throwable)var2);
    org.jsecurity.subject.InvalidSubjectException var4 = new org.jsecurity.subject.InvalidSubjectException((java.lang.Throwable)var3);

  }

  public void test415() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest2.test415");


    java.lang.String[] var4 = org.jsecurity.util.StringUtils.tokenizeToStringArray("7e3919c4-0808-4dc3-b5c9-76633af849b7", "e9f887e9-5a0f-4c10-a504-0e788ce2df31", false, false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var4);

  }

  public void test416() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest2.test416");


    org.jsecurity.mgt.DefaultSecurityManager var0 = new org.jsecurity.mgt.DefaultSecurityManager();
    java.io.InputStream var2 = org.jsecurity.util.ClassUtils.getResourceAsStream("");
    java.lang.Object[] var3 = new java.lang.Object[] { var2};
    java.util.List var4 = org.jsecurity.util.CollectionUtils.asList(var3);
    org.jsecurity.authc.pam.ModularRealmAuthenticator var5 = new org.jsecurity.authc.pam.ModularRealmAuthenticator(var4);
    org.jsecurity.authc.pam.AllSuccessfulModularAuthenticationStrategy var6 = new org.jsecurity.authc.pam.AllSuccessfulModularAuthenticationStrategy();
    var5.setModularAuthenticationStrategy((org.jsecurity.authc.pam.ModularAuthenticationStrategy)var6);
    org.jsecurity.authz.SimpleAuthorizationInfo var8 = new org.jsecurity.authz.SimpleAuthorizationInfo();
    var8.addStringPermission("hi!");
    java.io.InputStream var12 = org.jsecurity.util.ClassUtils.getResourceAsStream("");
    java.lang.Object[] var13 = new java.lang.Object[] { var12};
    java.util.List var14 = org.jsecurity.util.CollectionUtils.asList(var13);
    var8.addRoles((java.util.Collection)var14);
    var5.setAuthenticationListeners((java.util.Collection)var14);
    var0.setSessionListeners((java.util.Collection)var14);
    org.jsecurity.authc.pam.ModularRealmAuthenticator var18 = new org.jsecurity.authc.pam.ModularRealmAuthenticator();
    org.jsecurity.authz.permission.InvalidPermissionStringException var21 = new org.jsecurity.authz.permission.InvalidPermissionStringException("", "dd\uFFFD");
    org.jsecurity.JSecurityException var23 = new org.jsecurity.JSecurityException("");
    org.jsecurity.authc.SimpleAuthenticationInfo var25 = new org.jsecurity.authc.SimpleAuthenticationInfo((java.lang.Object)var21, (java.lang.Object)"", "org.jsecurity.authz.UnauthorizedException: org.jsecurity.session.ExpiredSessionException: ");
    org.jsecurity.subject.PrincipalCollection var26 = var25.getPrincipals();
    var18.onLogout(var26);
    var0.setAuthenticator((org.jsecurity.authc.Authenticator)var18);
    org.jsecurity.codec.CodecException var31 = new org.jsecurity.codec.CodecException("dd\uFFFD");
    org.jsecurity.authc.ConcurrentAccessException var32 = new org.jsecurity.authc.ConcurrentAccessException("org.jsecurity.authz.UnauthorizedException: org.jsecurity.session.ExpiredSessionException: ", (java.lang.Throwable)var31);
    org.jsecurity.subject.SimplePrincipalCollection var34 = new org.jsecurity.subject.SimplePrincipalCollection((java.lang.Object)var31, "");
    org.jsecurity.authc.pam.FirstSuccessfulAuthenticationStrategy var35 = new org.jsecurity.authc.pam.FirstSuccessfulAuthenticationStrategy();
    org.jsecurity.authz.UnauthorizedException var37 = new org.jsecurity.authz.UnauthorizedException("org.jsecurity.config.ConfigurationException: dd\uFFFD");
    java.lang.Throwable[] var38 = var37.getSuppressed();
    java.util.List var39 = org.jsecurity.util.CollectionUtils.asList((java.lang.Object[])var38);
    org.jsecurity.authc.UsernamePasswordToken var40 = new org.jsecurity.authc.UsernamePasswordToken();
    java.lang.String var41 = var40.getUsername();
    java.net.InetAddress var42 = var40.getInetAddress();
    org.jsecurity.authc.AuthenticationInfo var43 = var35.beforeAllAttempts((java.util.Collection)var39, (org.jsecurity.authc.AuthenticationToken)var40);
    org.jsecurity.session.UnknownSessionException var48 = new org.jsecurity.session.UnknownSessionException("dd\uFFFD", (java.io.Serializable)100.0f);
    org.jsecurity.subject.SubjectException var49 = new org.jsecurity.subject.SubjectException("dd\uFFFD", (java.lang.Throwable)var48);
    org.jsecurity.io.SerializationException var50 = new org.jsecurity.io.SerializationException("", (java.lang.Throwable)var49);
    java.lang.Throwable[] var51 = var49.getSuppressed();
    java.util.Set var52 = org.jsecurity.util.CollectionUtils.asSet((java.lang.Object[])var51);
    org.jsecurity.authc.SimpleAccount var53 = new org.jsecurity.authc.SimpleAccount((org.jsecurity.subject.PrincipalCollection)var34, (java.lang.Object)var39, var52);
    java.io.InputStream var55 = org.jsecurity.util.ClassUtils.getResourceAsStream("");
    java.lang.Object[] var56 = new java.lang.Object[] { var55};
    java.util.List var57 = org.jsecurity.util.CollectionUtils.asList(var56);
    org.jsecurity.authc.pam.ModularRealmAuthenticator var58 = new org.jsecurity.authc.pam.ModularRealmAuthenticator(var57);
    org.jsecurity.subject.SimplePrincipalCollection var60 = new org.jsecurity.subject.SimplePrincipalCollection((java.util.Collection)var57, "org.jsecurity.authz.UnauthorizedException: org.jsecurity.session.ExpiredSessionException: ");
    org.jsecurity.io.ResourceException var64 = new org.jsecurity.io.ResourceException("hi!");
    org.jsecurity.authc.UnknownAccountException var65 = new org.jsecurity.authc.UnknownAccountException((java.lang.Throwable)var64);
    org.jsecurity.session.StoppedSessionException var66 = new org.jsecurity.session.StoppedSessionException("dd\uFFFD", (java.io.Serializable)var64);
    org.jsecurity.session.UnknownSessionException var67 = new org.jsecurity.session.UnknownSessionException("org.jsecurity.authz.UnauthorizedException: org.jsecurity.session.ExpiredSessionException: ", (java.lang.Throwable)var64);
    boolean var68 = var60.equals((java.lang.Object)var64);
    var34.addAll((org.jsecurity.subject.PrincipalCollection)var60);
    org.jsecurity.session.UnknownSessionException var74 = new org.jsecurity.session.UnknownSessionException("dd\uFFFD", (java.io.Serializable)100.0f);
    org.jsecurity.subject.SubjectException var75 = new org.jsecurity.subject.SubjectException("dd\uFFFD", (java.lang.Throwable)var74);
    org.jsecurity.io.SerializationException var76 = new org.jsecurity.io.SerializationException("", (java.lang.Throwable)var75);
    java.lang.Throwable[] var77 = var75.getSuppressed();
    java.util.List var78 = org.jsecurity.util.CollectionUtils.asList((java.lang.Object[])var77);
    boolean var79 = var0.isPermittedAll((org.jsecurity.subject.PrincipalCollection)var34, (java.util.Collection)var78);
    org.jsecurity.session.mgt.SessionManager var80 = var0.getSessionManager();
    org.jsecurity.subject.DelegatingSubject var81 = new org.jsecurity.subject.DelegatingSubject((org.jsecurity.mgt.SecurityManager)var0);
    var0.destroy();
    org.jsecurity.crypto.BlowfishCipher var83 = new org.jsecurity.crypto.BlowfishCipher();
    byte[] var87 = new byte[] { (byte)100, (byte)100, (byte)(-1)};
    java.lang.String var88 = org.jsecurity.codec.CodecSupport.toString(var87);
    byte[] var90 = org.jsecurity.codec.Base64.decode("hi!");
    byte[] var91 = var83.encrypt(var87, var90);
    org.jsecurity.crypto.BlowfishCipher var92 = new org.jsecurity.crypto.BlowfishCipher();
    java.security.Key var93 = var92.getKey();
    java.security.Key var94 = var92.getKey();
    var83.setKey(var94);
    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      var0.setRememberMeCipher((org.jsecurity.crypto.Cipher)var83);
      fail("Expected exception of type java.lang.IllegalStateException");
    } catch (java.lang.IllegalStateException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var2);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var3);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var4);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var12);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var13);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var14);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var26);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var38);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var39);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var41);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var42);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var43);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var51);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var52);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var55);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var56);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var57);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var68 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var77);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var78);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var79 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var80);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var87);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var88 + "' != '" + "dd\uFFFD"+ "'", var88.equals("dd\uFFFD"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var90);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var91);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var93);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var94);

  }

  public void test417() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest2.test417");


    org.jsecurity.session.mgt.quartz.QuartzSessionValidationScheduler var0 = new org.jsecurity.session.mgt.quartz.QuartzSessionValidationScheduler();
    org.jsecurity.session.mgt.DefaultSessionManager var1 = new org.jsecurity.session.mgt.DefaultSessionManager();
    org.jsecurity.mgt.DefaultSecurityManager var2 = new org.jsecurity.mgt.DefaultSecurityManager();
    org.jsecurity.authz.permission.WildcardPermissionResolver var3 = new org.jsecurity.authz.permission.WildcardPermissionResolver();
    var2.setPermissionResolver((org.jsecurity.authz.permission.PermissionResolver)var3);
    org.jsecurity.cache.CacheManager var5 = var2.getCacheManager();
    var1.setCacheManager(var5);
    var0.setSessionManager((org.jsecurity.session.mgt.ValidatingSessionManager)var1);
    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      java.util.Date var9 = var1.getLastAccessTime((java.io.Serializable)"dade3937-164f-46fa-a082-f5f54b3b44e1");
      fail("Expected exception of type org.jsecurity.session.UnknownSessionException");
    } catch (org.jsecurity.session.UnknownSessionException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var5);

  }

  public void test418() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest2.test418");


    org.jsecurity.realm.text.TextConfigurationRealm var0 = new org.jsecurity.realm.text.TextConfigurationRealm();
    java.io.InputStream var2 = org.jsecurity.util.ClassUtils.getResourceAsStream("");
    java.lang.Object[] var3 = new java.lang.Object[] { var2};
    java.util.List var4 = org.jsecurity.util.CollectionUtils.asList(var3);
    org.jsecurity.authc.pam.ModularRealmAuthenticator var5 = new org.jsecurity.authc.pam.ModularRealmAuthenticator(var4);
    org.jsecurity.subject.SimplePrincipalCollection var7 = new org.jsecurity.subject.SimplePrincipalCollection((java.util.Collection)var4, "org.jsecurity.authz.UnauthorizedException: org.jsecurity.session.ExpiredSessionException: ");
    org.jsecurity.session.UnknownSessionException var12 = new org.jsecurity.session.UnknownSessionException("dd\uFFFD", (java.io.Serializable)100.0f);
    org.jsecurity.session.SessionException var14 = new org.jsecurity.session.SessionException("dd\uFFFD", (java.lang.Throwable)var12, (java.io.Serializable)0);
    org.jsecurity.session.SessionException var15 = new org.jsecurity.session.SessionException("dd\uFFFD", (java.lang.Throwable)var12);
    var7.add((java.lang.Object)var15, "org.jsecurity.config.ConfigurationException: dd\uFFFD");
    var0.onLogout((org.jsecurity.subject.PrincipalCollection)var7);
    org.jsecurity.cache.HashtableCacheManager var19 = new org.jsecurity.cache.HashtableCacheManager();
    org.jsecurity.cache.Cache var21 = var19.getCache("\u0000\u0000");
    var0.setAuthorizationCache(var21);
    org.jsecurity.codec.CodecException var25 = new org.jsecurity.codec.CodecException("dd\uFFFD");
    org.jsecurity.authc.ConcurrentAccessException var26 = new org.jsecurity.authc.ConcurrentAccessException("org.jsecurity.authz.UnauthorizedException: org.jsecurity.session.ExpiredSessionException: ", (java.lang.Throwable)var25);
    org.jsecurity.subject.SimplePrincipalCollection var28 = new org.jsecurity.subject.SimplePrincipalCollection((java.lang.Object)var25, "");
    var0.onLogout((org.jsecurity.subject.PrincipalCollection)var28);
    var0.setRoleDefinitions("hi!");
    org.jsecurity.authc.pam.AllSuccessfulModularAuthenticationStrategy var32 = new org.jsecurity.authc.pam.AllSuccessfulModularAuthenticationStrategy();
    char[] var34 = new char[] { };
    org.jsecurity.authc.UsernamePasswordToken var36 = new org.jsecurity.authc.UsernamePasswordToken("hi!", var34, true);
    org.jsecurity.authc.SimpleAccount var37 = new org.jsecurity.authc.SimpleAccount();
    var37.setCredentialsExpired(false);
    boolean var40 = var37.isLocked();
    org.jsecurity.authc.AuthenticationInfo var41 = var32.afterAllAttempts((org.jsecurity.authc.AuthenticationToken)var36, (org.jsecurity.authc.AuthenticationInfo)var37);
    boolean var42 = var0.supports((org.jsecurity.authc.AuthenticationToken)var36);
    java.lang.String var43 = var0.getUserDefinitions();
    org.jsecurity.realm.text.TextConfigurationRealm var44 = new org.jsecurity.realm.text.TextConfigurationRealm();
    java.io.InputStream var46 = org.jsecurity.util.ClassUtils.getResourceAsStream("");
    java.lang.Object[] var47 = new java.lang.Object[] { var46};
    java.util.List var48 = org.jsecurity.util.CollectionUtils.asList(var47);
    org.jsecurity.authc.pam.ModularRealmAuthenticator var49 = new org.jsecurity.authc.pam.ModularRealmAuthenticator(var48);
    org.jsecurity.subject.SimplePrincipalCollection var51 = new org.jsecurity.subject.SimplePrincipalCollection((java.util.Collection)var48, "org.jsecurity.authz.UnauthorizedException: org.jsecurity.session.ExpiredSessionException: ");
    org.jsecurity.session.UnknownSessionException var56 = new org.jsecurity.session.UnknownSessionException("dd\uFFFD", (java.io.Serializable)100.0f);
    org.jsecurity.session.SessionException var58 = new org.jsecurity.session.SessionException("dd\uFFFD", (java.lang.Throwable)var56, (java.io.Serializable)0);
    org.jsecurity.session.SessionException var59 = new org.jsecurity.session.SessionException("dd\uFFFD", (java.lang.Throwable)var56);
    var51.add((java.lang.Object)var59, "org.jsecurity.config.ConfigurationException: dd\uFFFD");
    var44.onLogout((org.jsecurity.subject.PrincipalCollection)var51);
    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      boolean var64 = var0.hasRole((org.jsecurity.subject.PrincipalCollection)var51, "64f92a6a-b899-4b53-a1ff-969d49769088");
      fail("Expected exception of type java.util.NoSuchElementException");
    } catch (java.util.NoSuchElementException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var2);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var3);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var4);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var21);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var34);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var40 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var41);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var42 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var43);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var46);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var47);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var48);

  }

  public void test419() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest2.test419");


    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      org.jsecurity.crypto.hash.Sha1Hash var1 = org.jsecurity.crypto.hash.Sha1Hash.fromHexString("78149b74-b1fa-47f0-8334-6ae03c9c8095");
      fail("Expected exception of type java.lang.IllegalArgumentException");
    } catch (java.lang.IllegalArgumentException e) {
      // Expected exception.
    }

  }

  public void test420() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest2.test420");


    org.jsecurity.session.mgt.eis.MemorySessionDAO var0 = new org.jsecurity.session.mgt.eis.MemorySessionDAO();
    org.jsecurity.cache.Cache var1 = var0.getActiveSessionsCache();
    org.jsecurity.cache.CacheManager var2 = var0.getCacheManager();
    org.jsecurity.cache.HashtableCacheManager var3 = new org.jsecurity.cache.HashtableCacheManager();
    org.jsecurity.cache.Cache var5 = var3.getCache("\u0000\u0000");
    var0.setActiveSessionsCache(var5);
    java.io.InputStream var8 = org.jsecurity.util.ClassUtils.getResourceAsStream("");
    java.lang.Object[] var9 = new java.lang.Object[] { var8};
    java.util.List var10 = org.jsecurity.util.CollectionUtils.asList(var9);
    org.jsecurity.authc.pam.ModularRealmAuthenticator var11 = new org.jsecurity.authc.pam.ModularRealmAuthenticator(var10);
    org.jsecurity.authc.pam.AllSuccessfulModularAuthenticationStrategy var12 = new org.jsecurity.authc.pam.AllSuccessfulModularAuthenticationStrategy();
    var11.setModularAuthenticationStrategy((org.jsecurity.authc.pam.ModularAuthenticationStrategy)var12);
    org.jsecurity.authz.SimpleAuthorizationInfo var14 = new org.jsecurity.authz.SimpleAuthorizationInfo();
    var14.addStringPermission("hi!");
    java.io.InputStream var18 = org.jsecurity.util.ClassUtils.getResourceAsStream("");
    java.lang.Object[] var19 = new java.lang.Object[] { var18};
    java.util.List var20 = org.jsecurity.util.CollectionUtils.asList(var19);
    var14.addRoles((java.util.Collection)var20);
    var11.setAuthenticationListeners((java.util.Collection)var20);
    org.jsecurity.realm.activedirectory.ActiveDirectoryRealm var23 = new org.jsecurity.realm.activedirectory.ActiveDirectoryRealm();
    var23.setPrincipalSuffix("");
    var11.setRealm((org.jsecurity.realm.Realm)var23);
    org.jsecurity.cache.HashtableCacheManager var27 = new org.jsecurity.cache.HashtableCacheManager();
    org.jsecurity.cache.Cache var29 = var27.getCache("\u0000\u0000");
    var23.setAuthorizationCache(var29);
    var0.setActiveSessionsCache(var29);
    org.jsecurity.session.mgt.SimpleSession var32 = new org.jsecurity.session.mgt.SimpleSession();
    java.io.Serializable var33 = var0.create((org.jsecurity.session.Session)var32);
    org.jsecurity.session.mgt.SimpleSession var34 = new org.jsecurity.session.mgt.SimpleSession();
    var34.touch();
    var34.validate();
    org.jsecurity.session.mgt.SimpleSession var37 = new org.jsecurity.session.mgt.SimpleSession();
    var37.setTimeout((-1L));
    org.jsecurity.session.mgt.SimpleSession var40 = new org.jsecurity.session.mgt.SimpleSession();
    java.util.Date var41 = var40.getLastAccessTime();
    var37.setLastAccessTime(var41);
    org.jsecurity.session.mgt.SimpleSession var43 = new org.jsecurity.session.mgt.SimpleSession();
    java.util.Date var44 = var43.getLastAccessTime();
    var37.setStopTimestamp(var44);
    var34.setLastAccessTime(var44);
    var32.setLastAccessTime(var44);
    org.jsecurity.session.mgt.ImmutableProxiedSession var48 = new org.jsecurity.session.mgt.ImmutableProxiedSession((org.jsecurity.session.Session)var32);
    java.util.Date var49 = var48.getStartTimestamp();
    java.util.Date var50 = var48.getStartTimestamp();
    java.io.Serializable var51 = var48.getId();
    long var52 = var48.getTimeout();
    org.jsecurity.session.SessionException var53 = new org.jsecurity.session.SessionException();
    org.jsecurity.io.ResourceException var54 = new org.jsecurity.io.ResourceException((java.lang.Throwable)var53);
    org.jsecurity.authz.HostUnauthorizedException var55 = new org.jsecurity.authz.HostUnauthorizedException((java.lang.Throwable)var54);
    org.jsecurity.session.ExpiredSessionException var56 = new org.jsecurity.session.ExpiredSessionException((java.lang.Throwable)var55);
    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      java.lang.Object var57 = var48.removeAttribute((java.lang.Object)var56);
      fail("Expected exception of type org.jsecurity.session.InvalidSessionException");
    } catch (org.jsecurity.session.InvalidSessionException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var1);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var2);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var5);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var8);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var9);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var10);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var18);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var19);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var20);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var29);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var33 + "' != '" + "c6389121-3c97-4388-baf3-8a2d3dda567f"+ "'", var33.equals("c6389121-3c97-4388-baf3-8a2d3dda567f"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var41);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var44);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var49);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var50);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var51 + "' != '" + "c6389121-3c97-4388-baf3-8a2d3dda567f"+ "'", var51.equals("c6389121-3c97-4388-baf3-8a2d3dda567f"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var52 == 1800000L);

  }

  public void test421() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest2.test421");


    org.jsecurity.mgt.DefaultSecurityManager var0 = new org.jsecurity.mgt.DefaultSecurityManager();
    java.io.InputStream var2 = org.jsecurity.util.ClassUtils.getResourceAsStream("");
    java.lang.Object[] var3 = new java.lang.Object[] { var2};
    java.util.List var4 = org.jsecurity.util.CollectionUtils.asList(var3);
    org.jsecurity.authc.pam.ModularRealmAuthenticator var5 = new org.jsecurity.authc.pam.ModularRealmAuthenticator(var4);
    org.jsecurity.authc.pam.AllSuccessfulModularAuthenticationStrategy var6 = new org.jsecurity.authc.pam.AllSuccessfulModularAuthenticationStrategy();
    var5.setModularAuthenticationStrategy((org.jsecurity.authc.pam.ModularAuthenticationStrategy)var6);
    org.jsecurity.authz.SimpleAuthorizationInfo var8 = new org.jsecurity.authz.SimpleAuthorizationInfo();
    var8.addStringPermission("hi!");
    java.io.InputStream var12 = org.jsecurity.util.ClassUtils.getResourceAsStream("");
    java.lang.Object[] var13 = new java.lang.Object[] { var12};
    java.util.List var14 = org.jsecurity.util.CollectionUtils.asList(var13);
    var8.addRoles((java.util.Collection)var14);
    var5.setAuthenticationListeners((java.util.Collection)var14);
    var0.setSessionListeners((java.util.Collection)var14);
    java.io.InputStream var19 = org.jsecurity.util.ClassUtils.getResourceAsStream("");
    java.lang.Object[] var20 = new java.lang.Object[] { var19};
    java.util.List var21 = org.jsecurity.util.CollectionUtils.asList(var20);
    org.jsecurity.authc.pam.ModularRealmAuthenticator var22 = new org.jsecurity.authc.pam.ModularRealmAuthenticator(var21);
    org.jsecurity.authc.pam.AllSuccessfulModularAuthenticationStrategy var23 = new org.jsecurity.authc.pam.AllSuccessfulModularAuthenticationStrategy();
    var22.setModularAuthenticationStrategy((org.jsecurity.authc.pam.ModularAuthenticationStrategy)var23);
    org.jsecurity.authz.SimpleAuthorizationInfo var25 = new org.jsecurity.authz.SimpleAuthorizationInfo();
    var25.addStringPermission("hi!");
    java.io.InputStream var29 = org.jsecurity.util.ClassUtils.getResourceAsStream("");
    java.lang.Object[] var30 = new java.lang.Object[] { var29};
    java.util.List var31 = org.jsecurity.util.CollectionUtils.asList(var30);
    var25.addRoles((java.util.Collection)var31);
    var22.setAuthenticationListeners((java.util.Collection)var31);
    org.jsecurity.realm.activedirectory.ActiveDirectoryRealm var34 = new org.jsecurity.realm.activedirectory.ActiveDirectoryRealm();
    var34.setPrincipalSuffix("");
    var22.setRealm((org.jsecurity.realm.Realm)var34);
    org.jsecurity.cache.HashtableCacheManager var38 = new org.jsecurity.cache.HashtableCacheManager();
    org.jsecurity.cache.Cache var40 = var38.getCache("\u0000\u0000");
    var34.setAuthorizationCache(var40);
    var0.setRealm((org.jsecurity.realm.Realm)var34);
    org.jsecurity.subject.RememberMeManager var43 = var0.getRememberMeManager();
    org.jsecurity.realm.activedirectory.ActiveDirectoryRealm var44 = new org.jsecurity.realm.activedirectory.ActiveDirectoryRealm();
    org.jsecurity.authc.credential.Sha256CredentialsMatcher var45 = new org.jsecurity.authc.credential.Sha256CredentialsMatcher();
    var44.setCredentialsMatcher((org.jsecurity.authc.credential.CredentialsMatcher)var45);
    java.lang.String var47 = var44.getAuthorizationCacheName();
    var44.setPrincipalSuffix("org.jsecurity.config.ConfigurationException: dd\uFFFD");
    org.jsecurity.realm.text.TextConfigurationRealm var50 = new org.jsecurity.realm.text.TextConfigurationRealm();
    java.io.InputStream var52 = org.jsecurity.util.ClassUtils.getResourceAsStream("");
    java.lang.Object[] var53 = new java.lang.Object[] { var52};
    java.util.List var54 = org.jsecurity.util.CollectionUtils.asList(var53);
    org.jsecurity.authc.pam.ModularRealmAuthenticator var55 = new org.jsecurity.authc.pam.ModularRealmAuthenticator(var54);
    org.jsecurity.subject.SimplePrincipalCollection var57 = new org.jsecurity.subject.SimplePrincipalCollection((java.util.Collection)var54, "org.jsecurity.authz.UnauthorizedException: org.jsecurity.session.ExpiredSessionException: ");
    org.jsecurity.session.UnknownSessionException var62 = new org.jsecurity.session.UnknownSessionException("dd\uFFFD", (java.io.Serializable)100.0f);
    org.jsecurity.session.SessionException var64 = new org.jsecurity.session.SessionException("dd\uFFFD", (java.lang.Throwable)var62, (java.io.Serializable)0);
    org.jsecurity.session.SessionException var65 = new org.jsecurity.session.SessionException("dd\uFFFD", (java.lang.Throwable)var62);
    var57.add((java.lang.Object)var65, "org.jsecurity.config.ConfigurationException: dd\uFFFD");
    var50.onLogout((org.jsecurity.subject.PrincipalCollection)var57);
    var44.onLogout((org.jsecurity.subject.PrincipalCollection)var57);
    java.lang.String[] var71 = org.jsecurity.util.StringUtils.split("org.jsecurity.authz.UnauthorizedException: org.jsecurity.session.ExpiredSessionException: ");
    java.util.List var72 = org.jsecurity.util.CollectionUtils.asList((java.lang.Object[])var71);
    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      boolean[] var73 = var0.isPermitted((org.jsecurity.subject.PrincipalCollection)var57, var71);
      fail("Expected exception of type java.util.NoSuchElementException");
    } catch (java.util.NoSuchElementException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var2);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var3);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var4);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var12);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var13);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var14);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var19);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var20);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var21);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var29);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var30);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var31);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var40);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var43);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var47);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var52);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var53);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var54);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var71);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var72);

  }

  public void test422() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest2.test422");


    org.jsecurity.mgt.DefaultSecurityManager var0 = new org.jsecurity.mgt.DefaultSecurityManager();
    java.io.InputStream var2 = org.jsecurity.util.ClassUtils.getResourceAsStream("");
    java.lang.Object[] var3 = new java.lang.Object[] { var2};
    java.util.List var4 = org.jsecurity.util.CollectionUtils.asList(var3);
    org.jsecurity.authc.pam.ModularRealmAuthenticator var5 = new org.jsecurity.authc.pam.ModularRealmAuthenticator(var4);
    org.jsecurity.authc.pam.AllSuccessfulModularAuthenticationStrategy var6 = new org.jsecurity.authc.pam.AllSuccessfulModularAuthenticationStrategy();
    var5.setModularAuthenticationStrategy((org.jsecurity.authc.pam.ModularAuthenticationStrategy)var6);
    org.jsecurity.authz.SimpleAuthorizationInfo var8 = new org.jsecurity.authz.SimpleAuthorizationInfo();
    var8.addStringPermission("hi!");
    java.io.InputStream var12 = org.jsecurity.util.ClassUtils.getResourceAsStream("");
    java.lang.Object[] var13 = new java.lang.Object[] { var12};
    java.util.List var14 = org.jsecurity.util.CollectionUtils.asList(var13);
    var8.addRoles((java.util.Collection)var14);
    var5.setAuthenticationListeners((java.util.Collection)var14);
    var0.setSessionListeners((java.util.Collection)var14);
    java.io.InputStream var19 = org.jsecurity.util.ClassUtils.getResourceAsStream("");
    java.lang.Object[] var20 = new java.lang.Object[] { var19};
    java.util.List var21 = org.jsecurity.util.CollectionUtils.asList(var20);
    org.jsecurity.authc.pam.ModularRealmAuthenticator var22 = new org.jsecurity.authc.pam.ModularRealmAuthenticator(var21);
    org.jsecurity.authc.pam.AllSuccessfulModularAuthenticationStrategy var23 = new org.jsecurity.authc.pam.AllSuccessfulModularAuthenticationStrategy();
    var22.setModularAuthenticationStrategy((org.jsecurity.authc.pam.ModularAuthenticationStrategy)var23);
    org.jsecurity.authz.SimpleAuthorizationInfo var25 = new org.jsecurity.authz.SimpleAuthorizationInfo();
    var25.addStringPermission("hi!");
    java.io.InputStream var29 = org.jsecurity.util.ClassUtils.getResourceAsStream("");
    java.lang.Object[] var30 = new java.lang.Object[] { var29};
    java.util.List var31 = org.jsecurity.util.CollectionUtils.asList(var30);
    var25.addRoles((java.util.Collection)var31);
    var22.setAuthenticationListeners((java.util.Collection)var31);
    org.jsecurity.realm.activedirectory.ActiveDirectoryRealm var34 = new org.jsecurity.realm.activedirectory.ActiveDirectoryRealm();
    var34.setPrincipalSuffix("");
    var22.setRealm((org.jsecurity.realm.Realm)var34);
    org.jsecurity.cache.HashtableCacheManager var38 = new org.jsecurity.cache.HashtableCacheManager();
    org.jsecurity.cache.Cache var40 = var38.getCache("\u0000\u0000");
    var34.setAuthorizationCache(var40);
    var0.setRealm((org.jsecurity.realm.Realm)var34);
    org.jsecurity.subject.RememberMeManager var43 = var0.getRememberMeManager();
    org.jsecurity.session.mgt.SessionManager var44 = var0.getSessionManager();
    org.jsecurity.session.mgt.SessionManager var45 = var0.getSessionManager();
    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      var0.setRememberMeEncryptionCipherKeyHex("330a41fd-f404-4b7f-8f3c-bc52c3f67c3e");
      fail("Expected exception of type java.lang.IllegalStateException");
    } catch (java.lang.IllegalStateException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var2);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var3);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var4);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var12);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var13);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var14);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var19);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var20);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var21);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var29);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var30);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var31);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var40);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var43);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var44);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var45);

  }

  public void test423() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest2.test423");


    org.jsecurity.authz.ModularRealmAuthorizer var0 = new org.jsecurity.authz.ModularRealmAuthorizer();
    java.io.InputStream var2 = org.jsecurity.util.ClassUtils.getResourceAsStream("");
    java.lang.Object[] var3 = new java.lang.Object[] { var2};
    java.util.List var4 = org.jsecurity.util.CollectionUtils.asList(var3);
    org.jsecurity.authc.pam.ModularRealmAuthenticator var5 = new org.jsecurity.authc.pam.ModularRealmAuthenticator(var4);
    org.jsecurity.subject.SimplePrincipalCollection var7 = new org.jsecurity.subject.SimplePrincipalCollection((java.util.Collection)var4, "org.jsecurity.authz.UnauthorizedException: org.jsecurity.session.ExpiredSessionException: ");
    org.jsecurity.session.UnknownSessionException var12 = new org.jsecurity.session.UnknownSessionException("dd\uFFFD", (java.io.Serializable)100.0f);
    org.jsecurity.session.SessionException var14 = new org.jsecurity.session.SessionException("dd\uFFFD", (java.lang.Throwable)var12, (java.io.Serializable)0);
    org.jsecurity.session.SessionException var15 = new org.jsecurity.session.SessionException("dd\uFFFD", (java.lang.Throwable)var12);
    var7.add((java.lang.Object)var15, "org.jsecurity.config.ConfigurationException: dd\uFFFD");
    java.util.Set var18 = var7.asSet();
    var0.setRealms((java.util.Collection)var18);
    org.jsecurity.authz.UnauthorizedException var21 = new org.jsecurity.authz.UnauthorizedException("org.jsecurity.config.ConfigurationException: dd\uFFFD");
    java.lang.Throwable[] var22 = var21.getSuppressed();
    java.util.Set var23 = org.jsecurity.util.CollectionUtils.asSet((java.lang.Object[])var22);
    var0.setRealms((java.util.Collection)var23);
    org.jsecurity.realm.text.TextConfigurationRealm var25 = new org.jsecurity.realm.text.TextConfigurationRealm();
    org.jsecurity.realm.text.TextConfigurationRealm var26 = new org.jsecurity.realm.text.TextConfigurationRealm();
    java.io.InputStream var28 = org.jsecurity.util.ClassUtils.getResourceAsStream("");
    java.lang.Object[] var29 = new java.lang.Object[] { var28};
    java.util.List var30 = org.jsecurity.util.CollectionUtils.asList(var29);
    org.jsecurity.authc.pam.ModularRealmAuthenticator var31 = new org.jsecurity.authc.pam.ModularRealmAuthenticator(var30);
    org.jsecurity.subject.SimplePrincipalCollection var33 = new org.jsecurity.subject.SimplePrincipalCollection((java.util.Collection)var30, "org.jsecurity.authz.UnauthorizedException: org.jsecurity.session.ExpiredSessionException: ");
    org.jsecurity.session.UnknownSessionException var38 = new org.jsecurity.session.UnknownSessionException("dd\uFFFD", (java.io.Serializable)100.0f);
    org.jsecurity.session.SessionException var40 = new org.jsecurity.session.SessionException("dd\uFFFD", (java.lang.Throwable)var38, (java.io.Serializable)0);
    org.jsecurity.session.SessionException var41 = new org.jsecurity.session.SessionException("dd\uFFFD", (java.lang.Throwable)var38);
    var33.add((java.lang.Object)var41, "org.jsecurity.config.ConfigurationException: dd\uFFFD");
    var26.onLogout((org.jsecurity.subject.PrincipalCollection)var33);
    java.util.Collection var46 = var33.fromRealm("\u0000\u0000\u0000");
    var25.onLogout((org.jsecurity.subject.PrincipalCollection)var33);
    org.jsecurity.authz.aop.RoleAnnotationMethodInterceptor var48 = new org.jsecurity.authz.aop.RoleAnnotationMethodInterceptor();
    org.jsecurity.aop.AnnotationHandler var49 = var48.getHandler();
    java.lang.Class var50 = var49.getAnnotationClass();
    java.util.Collection var51 = var33.byType(var50);
    org.jsecurity.realm.jndi.JndiRealmFactory var52 = new org.jsecurity.realm.jndi.JndiRealmFactory();
    org.jsecurity.authc.ExpiredCredentialsException var54 = new org.jsecurity.authc.ExpiredCredentialsException();
    org.jsecurity.session.ExpiredSessionException var55 = new org.jsecurity.session.ExpiredSessionException("", (java.lang.Throwable)var54);
    java.lang.Throwable[] var56 = var55.getSuppressed();
    java.util.List var57 = org.jsecurity.util.CollectionUtils.asList((java.lang.Object[])var56);
    var52.setJndiNames((java.util.Collection)var57);
    var0.checkPermissions((org.jsecurity.subject.PrincipalCollection)var33, (java.util.Collection)var57);
    org.jsecurity.realm.text.PropertiesRealm var60 = new org.jsecurity.realm.text.PropertiesRealm();
    java.lang.String var61 = var60.getUserDefinitions();
    org.jsecurity.codec.CodecException var64 = new org.jsecurity.codec.CodecException("dd\uFFFD");
    org.jsecurity.authc.ConcurrentAccessException var65 = new org.jsecurity.authc.ConcurrentAccessException("org.jsecurity.authz.UnauthorizedException: org.jsecurity.session.ExpiredSessionException: ", (java.lang.Throwable)var64);
    org.jsecurity.subject.SimplePrincipalCollection var67 = new org.jsecurity.subject.SimplePrincipalCollection((java.lang.Object)var64, "");
    java.io.InputStream var69 = org.jsecurity.util.ClassUtils.getResourceAsStream("");
    java.lang.Object[] var70 = new java.lang.Object[] { var69};
    java.util.List var71 = org.jsecurity.util.CollectionUtils.asList(var70);
    org.jsecurity.authc.pam.ModularRealmAuthenticator var72 = new org.jsecurity.authc.pam.ModularRealmAuthenticator(var71);
    var67.addAll((java.util.Collection)var71, "\u0000\u0000");
    java.io.InputStream var76 = org.jsecurity.util.ClassUtils.getResourceAsStream("");
    java.lang.Object[] var77 = new java.lang.Object[] { var76};
    java.util.List var78 = org.jsecurity.util.CollectionUtils.asList(var77);
    org.jsecurity.authc.pam.ModularRealmAuthenticator var79 = new org.jsecurity.authc.pam.ModularRealmAuthenticator(var78);
    var67.addAll((java.util.Collection)var78, "\u0000\u0000");
    var60.onLogout((org.jsecurity.subject.PrincipalCollection)var67);
    java.util.Set var83 = var67.getRealmNames();
    java.lang.String[] var87 = org.jsecurity.util.StringUtils.split("ZGT/", '#', '#');
    java.util.Set var88 = org.jsecurity.util.CollectionUtils.asSet((java.lang.Object[])var87);
    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      boolean[] var89 = var0.isPermitted((org.jsecurity.subject.PrincipalCollection)var67, var87);
      fail("Expected exception of type java.lang.IllegalStateException");
    } catch (java.lang.IllegalStateException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var2);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var3);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var4);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var18);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var22);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var23);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var28);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var29);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var30);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var46);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var49);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var50);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var51);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var56);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var57);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var61);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var69);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var70);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var71);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var76);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var77);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var78);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var83);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var87);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var88);

  }

  public void test424() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest2.test424");


    org.jsecurity.session.UnknownSessionException var5 = new org.jsecurity.session.UnknownSessionException("dd\uFFFD", (java.io.Serializable)100.0f);
    org.jsecurity.subject.SubjectException var6 = new org.jsecurity.subject.SubjectException("dd\uFFFD", (java.lang.Throwable)var5);
    org.jsecurity.authc.AccountException var7 = new org.jsecurity.authc.AccountException("hi!", (java.lang.Throwable)var6);
    org.jsecurity.authc.DisabledAccountException var8 = new org.jsecurity.authc.DisabledAccountException("499413f2-ff78-44c6-b3f7-2030321675ed", (java.lang.Throwable)var6);

  }

  public void test425() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest2.test425");


    org.jsecurity.crypto.hash.Sha384Hash var1 = org.jsecurity.crypto.hash.Sha384Hash.fromBase64String("44126908-8346-4f1c-92de-726997ba95f5");
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var1);

  }

  public void test426() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest2.test426");


    java.lang.String var1 = org.jsecurity.codec.Base64.decodeToString("e7e879cb-1172-4cea-8bca-f370fbe1f08c");
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var1 + "' != '" + "{\uFFFD\uFFFD\uFFFD\uFFFD\u001B\uFFFD^\uFFFD\uFFFD\u01DA\uFFFD\u001A~\uFFFD}\uFFFD\uFFFDO\u001C"+ "'", var1.equals("{\uFFFD\uFFFD\uFFFD\uFFFD\u001B\uFFFD^\uFFFD\uFFFD\u01DA\uFFFD\u001A~\uFFFD}\uFFFD\uFFFDO\u001C"));

  }

  public void test427() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest2.test427");


    org.jsecurity.config.UnresolveableReferenceException var3 = new org.jsecurity.config.UnresolveableReferenceException("org.jsecurity.config.ConfigurationException: dd\uFFFD");
    org.jsecurity.util.UnknownClassException var4 = new org.jsecurity.util.UnknownClassException((java.lang.Throwable)var3);
    org.jsecurity.util.UnavailableConstructorException var5 = new org.jsecurity.util.UnavailableConstructorException("7fc15b23-d5a7-46fa-afed-9cd42a82c334", (java.lang.Throwable)var4);
    org.jsecurity.authz.permission.InvalidPermissionStringException var8 = new org.jsecurity.authz.permission.InvalidPermissionStringException("classpath:org/jsecurity/cache/ehcache/ehcache.xml", "b598ff3d-5685-4491-8ee6-585d37adb1db");
    org.jsecurity.session.SessionException var9 = new org.jsecurity.session.SessionException("e2497199-95f2-4373-8934-d742f09a6cb1", (java.lang.Throwable)var4, (java.io.Serializable)"classpath:org/jsecurity/cache/ehcache/ehcache.xml");

  }

  public void test428() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest2.test428");


    org.jsecurity.mgt.DefaultSecurityManager var0 = new org.jsecurity.mgt.DefaultSecurityManager();
    org.jsecurity.authz.permission.WildcardPermissionResolver var1 = new org.jsecurity.authz.permission.WildcardPermissionResolver();
    var0.setPermissionResolver((org.jsecurity.authz.permission.PermissionResolver)var1);
    org.jsecurity.crypto.hash.Md2Hash var4 = org.jsecurity.crypto.hash.Md2Hash.fromHexString("6464ff");
    java.lang.String var5 = var4.toString();
    byte[] var6 = var4.getBytes();
    byte[] var10 = new byte[] { (byte)100, (byte)100, (byte)(-1)};
    java.lang.String var11 = org.jsecurity.codec.CodecSupport.toString(var10);
    byte[] var12 = org.jsecurity.codec.Base64.encode(var10);
    byte[] var13 = org.jsecurity.codec.Base64.encode(var12);
    var4.setBytes(var12);
    byte[] var15 = org.jsecurity.codec.Base64.encodeChunked(var12);
    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      var0.setRememberMeEncryptionCipherKey(var12);
      fail("Expected exception of type java.lang.IllegalStateException");
    } catch (java.lang.IllegalStateException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var4);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var5 + "' != '" + "6464ff"+ "'", var5.equals("6464ff"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var6);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var10);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var11 + "' != '" + "dd\uFFFD"+ "'", var11.equals("dd\uFFFD"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var12);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var13);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var15);

  }

  public void test429() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest2.test429");


    java.lang.String[] var1 = org.jsecurity.util.StringUtils.split("HashtableCache [\u0000\u0000\u0000]");
    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      org.jsecurity.crypto.hash.Md5Hash var2 = new org.jsecurity.crypto.hash.Md5Hash((java.lang.Object)var1);
      fail("Expected exception of type org.jsecurity.codec.CodecException");
    } catch (org.jsecurity.codec.CodecException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var1);

  }

  public void test430() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest2.test430");


    org.jsecurity.authz.UnauthenticatedException var3 = new org.jsecurity.authz.UnauthenticatedException();
    org.jsecurity.config.UnresolveableReferenceException var4 = new org.jsecurity.config.UnresolveableReferenceException("", (java.lang.Throwable)var3);
    org.jsecurity.cache.CacheException var5 = new org.jsecurity.cache.CacheException("org.jsecurity.config.ConfigurationException: dd\uFFFD", (java.lang.Throwable)var3);
    org.jsecurity.authc.UnknownAccountException var6 = new org.jsecurity.authc.UnknownAccountException("c02079b2-68a6-47b8-b05b-0ae0ae0255bd", (java.lang.Throwable)var3);

  }

  public void test431() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest2.test431");


    java.lang.String[] var6 = org.jsecurity.util.StringUtils.split("d8d550ee-3a8c-48f0-8061-1d82c827f505", ' ', ' ', ' ', true, false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var6);

  }

  public void test432() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest2.test432");


    org.jsecurity.authc.ExpiredCredentialsException var1 = new org.jsecurity.authc.ExpiredCredentialsException();
    org.jsecurity.session.ExpiredSessionException var2 = new org.jsecurity.session.ExpiredSessionException("", (java.lang.Throwable)var1);
    java.lang.Throwable[] var3 = var2.getSuppressed();
    org.jsecurity.session.InvalidSessionException var4 = new org.jsecurity.session.InvalidSessionException((java.lang.Throwable)var2);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var3);

  }

  public void test433() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest2.test433");


    org.jsecurity.session.mgt.eis.MemorySessionDAO var0 = new org.jsecurity.session.mgt.eis.MemorySessionDAO();
    org.jsecurity.cache.Cache var1 = var0.getActiveSessionsCache();
    org.jsecurity.cache.CacheManager var2 = var0.getCacheManager();
    org.jsecurity.cache.HashtableCacheManager var3 = new org.jsecurity.cache.HashtableCacheManager();
    org.jsecurity.cache.Cache var5 = var3.getCache("\u0000\u0000");
    var0.setActiveSessionsCache(var5);
    java.io.InputStream var8 = org.jsecurity.util.ClassUtils.getResourceAsStream("");
    java.lang.Object[] var9 = new java.lang.Object[] { var8};
    java.util.List var10 = org.jsecurity.util.CollectionUtils.asList(var9);
    org.jsecurity.authc.pam.ModularRealmAuthenticator var11 = new org.jsecurity.authc.pam.ModularRealmAuthenticator(var10);
    org.jsecurity.authc.pam.AllSuccessfulModularAuthenticationStrategy var12 = new org.jsecurity.authc.pam.AllSuccessfulModularAuthenticationStrategy();
    var11.setModularAuthenticationStrategy((org.jsecurity.authc.pam.ModularAuthenticationStrategy)var12);
    org.jsecurity.authz.SimpleAuthorizationInfo var14 = new org.jsecurity.authz.SimpleAuthorizationInfo();
    var14.addStringPermission("hi!");
    java.io.InputStream var18 = org.jsecurity.util.ClassUtils.getResourceAsStream("");
    java.lang.Object[] var19 = new java.lang.Object[] { var18};
    java.util.List var20 = org.jsecurity.util.CollectionUtils.asList(var19);
    var14.addRoles((java.util.Collection)var20);
    var11.setAuthenticationListeners((java.util.Collection)var20);
    org.jsecurity.realm.activedirectory.ActiveDirectoryRealm var23 = new org.jsecurity.realm.activedirectory.ActiveDirectoryRealm();
    var23.setPrincipalSuffix("");
    var11.setRealm((org.jsecurity.realm.Realm)var23);
    org.jsecurity.cache.HashtableCacheManager var27 = new org.jsecurity.cache.HashtableCacheManager();
    org.jsecurity.cache.Cache var29 = var27.getCache("\u0000\u0000");
    var23.setAuthorizationCache(var29);
    var0.setActiveSessionsCache(var29);
    org.jsecurity.session.mgt.SimpleSession var32 = new org.jsecurity.session.mgt.SimpleSession();
    java.io.Serializable var33 = var0.create((org.jsecurity.session.Session)var32);
    org.jsecurity.cache.HashtableCacheManager var34 = new org.jsecurity.cache.HashtableCacheManager();
    org.jsecurity.cache.Cache var36 = var34.getCache("\u0000\u0000");
    org.jsecurity.cache.Cache var38 = var34.getCache("ZGT/");
    var0.setCacheManager((org.jsecurity.cache.CacheManager)var34);
    org.jsecurity.cache.ehcache.EhCacheManager var40 = new org.jsecurity.cache.ehcache.EhCacheManager();
    net.sf.ehcache.CacheManager var41 = var40.getCacheManager();
    var40.setCacheManagerConfigFile("org.jsecurity.authz.UnauthorizedException: org.jsecurity.session.ExpiredSessionException: ");
    var0.setCacheManager((org.jsecurity.cache.CacheManager)var40);
    org.jsecurity.cache.ehcache.EhCacheManager var45 = new org.jsecurity.cache.ehcache.EhCacheManager();
    net.sf.ehcache.CacheManager var46 = var45.getCacheManager();
    var45.destroy();
    net.sf.ehcache.CacheManager var48 = var45.getCacheManager();
    net.sf.ehcache.CacheManager var49 = var45.getCacheManager();
    var0.setCacheManager((org.jsecurity.cache.CacheManager)var45);
    var45.init();
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var1);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var2);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var5);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var8);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var9);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var10);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var18);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var19);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var20);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var29);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var33 + "' != '" + "9e283dc2-438e-4462-88fa-bf8f7a996f4e"+ "'", var33.equals("9e283dc2-438e-4462-88fa-bf8f7a996f4e"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var36);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var38);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var41);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var46);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var48);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var49);

  }

  public void test434() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest2.test434");


    org.jsecurity.io.IniResource var1 = new org.jsecurity.io.IniResource();
    var1.setCharsetName("org.jsecurity.authz.UnauthorizedException: org.jsecurity.session.ExpiredSessionException: ");
    java.util.Map var4 = var1.getSections();
    java.util.Map var5 = var1.getSections();
    org.jsecurity.session.UnknownSessionException var6 = new org.jsecurity.session.UnknownSessionException("f9548f9e-497e-41ec-97ca-89ede08e20b0", (java.io.Serializable)var1);
    var1.setCharsetName("07e80a9d-8faf-4cf3-940d-6b8dc88fdd52");
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var4);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var5);

  }

  public void test435() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest2.test435");


    org.jsecurity.realm.activedirectory.ActiveDirectoryRealm var0 = new org.jsecurity.realm.activedirectory.ActiveDirectoryRealm();
    org.jsecurity.authc.credential.Sha256CredentialsMatcher var1 = new org.jsecurity.authc.credential.Sha256CredentialsMatcher();
    var0.setCredentialsMatcher((org.jsecurity.authc.credential.CredentialsMatcher)var1);
    org.jsecurity.realm.activedirectory.ActiveDirectoryRealm var3 = new org.jsecurity.realm.activedirectory.ActiveDirectoryRealm();
    org.jsecurity.authc.credential.Sha256CredentialsMatcher var4 = new org.jsecurity.authc.credential.Sha256CredentialsMatcher();
    var3.setCredentialsMatcher((org.jsecurity.authc.credential.CredentialsMatcher)var4);
    java.lang.String var6 = var3.getAuthorizationCacheName();
    var3.setUrl("hi!");
    org.jsecurity.realm.ldap.DefaultLdapContextFactory var9 = new org.jsecurity.realm.ldap.DefaultLdapContextFactory();
    var3.setLdapContextFactory((org.jsecurity.realm.ldap.LdapContextFactory)var9);
    var9.setAuthentication("org.jsecurity.authz.UnauthorizedException: org.jsecurity.session.ExpiredSessionException: ");
    var0.setLdapContextFactory((org.jsecurity.realm.ldap.LdapContextFactory)var9);
    var9.setReferral("a8df74b8-0f68-49c4-b77d-09857e171e23");
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var6);

  }

  public void test436() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest2.test436");


    char[] var1 = new char[] { };
    org.jsecurity.authc.UsernamePasswordToken var3 = new org.jsecurity.authc.UsernamePasswordToken("hi!", var1, true);
    byte[] var4 = org.jsecurity.codec.Hex.decode(var1);
    byte[] var5 = org.jsecurity.codec.Hex.decode(var1);
    boolean var6 = org.jsecurity.codec.Base64.isBase64(var5);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var1);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var4);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var5);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var6 == true);

  }

  public void test437() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest2.test437");


    boolean var1 = org.jsecurity.io.ResourceUtils.hasResourcePrefix("e9f887e9-5a0f-4c10-a504-0e788ce2df31");
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var1 == false);

  }

  public void test438() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest2.test438");


    org.jsecurity.authc.pam.AtLeastOneSuccessfulModularAuthenticationStrategy var0 = new org.jsecurity.authc.pam.AtLeastOneSuccessfulModularAuthenticationStrategy();
    org.jsecurity.authc.pam.AllSuccessfulModularAuthenticationStrategy var2 = new org.jsecurity.authc.pam.AllSuccessfulModularAuthenticationStrategy();
    char[] var4 = new char[] { };
    org.jsecurity.authc.UsernamePasswordToken var6 = new org.jsecurity.authc.UsernamePasswordToken("hi!", var4, true);
    org.jsecurity.authc.SimpleAccount var7 = new org.jsecurity.authc.SimpleAccount();
    var7.setCredentialsExpired(false);
    boolean var10 = var7.isLocked();
    org.jsecurity.authc.AuthenticationInfo var11 = var2.afterAllAttempts((org.jsecurity.authc.AuthenticationToken)var6, (org.jsecurity.authc.AuthenticationInfo)var7);
    char[] var14 = new char[] { };
    org.jsecurity.authc.UsernamePasswordToken var16 = new org.jsecurity.authc.UsernamePasswordToken("hi!", var14, true);
    org.jsecurity.authc.UsernamePasswordToken var17 = new org.jsecurity.authc.UsernamePasswordToken("\u0000\u0000", var14);
    var6.setPassword(var14);
    org.jsecurity.authc.UsernamePasswordToken var19 = new org.jsecurity.authc.UsernamePasswordToken("\u0000\u0000\u0000", var14);
    org.jsecurity.realm.text.TextConfigurationRealm var20 = new org.jsecurity.realm.text.TextConfigurationRealm();
    java.io.InputStream var22 = org.jsecurity.util.ClassUtils.getResourceAsStream("");
    java.lang.Object[] var23 = new java.lang.Object[] { var22};
    java.util.List var24 = org.jsecurity.util.CollectionUtils.asList(var23);
    org.jsecurity.authc.pam.ModularRealmAuthenticator var25 = new org.jsecurity.authc.pam.ModularRealmAuthenticator(var24);
    org.jsecurity.subject.SimplePrincipalCollection var27 = new org.jsecurity.subject.SimplePrincipalCollection((java.util.Collection)var24, "org.jsecurity.authz.UnauthorizedException: org.jsecurity.session.ExpiredSessionException: ");
    org.jsecurity.session.UnknownSessionException var32 = new org.jsecurity.session.UnknownSessionException("dd\uFFFD", (java.io.Serializable)100.0f);
    org.jsecurity.session.SessionException var34 = new org.jsecurity.session.SessionException("dd\uFFFD", (java.lang.Throwable)var32, (java.io.Serializable)0);
    org.jsecurity.session.SessionException var35 = new org.jsecurity.session.SessionException("dd\uFFFD", (java.lang.Throwable)var32);
    var27.add((java.lang.Object)var35, "org.jsecurity.config.ConfigurationException: dd\uFFFD");
    var20.onLogout((org.jsecurity.subject.PrincipalCollection)var27);
    org.jsecurity.authc.ExpiredCredentialsException var40 = new org.jsecurity.authc.ExpiredCredentialsException();
    org.jsecurity.session.ExpiredSessionException var41 = new org.jsecurity.session.ExpiredSessionException("", (java.lang.Throwable)var40);
    java.lang.Throwable[] var42 = var41.getSuppressed();
    org.jsecurity.io.ResourceException var43 = new org.jsecurity.io.ResourceException((java.lang.Throwable)var41);
    org.jsecurity.authc.SimpleAuthenticationInfo var44 = new org.jsecurity.authc.SimpleAuthenticationInfo((org.jsecurity.subject.PrincipalCollection)var27, (java.lang.Object)var41);
    org.jsecurity.authc.AuthenticationInfo var45 = var0.afterAllAttempts((org.jsecurity.authc.AuthenticationToken)var19, (org.jsecurity.authc.AuthenticationInfo)var44);
    java.io.InputStream var47 = org.jsecurity.util.ClassUtils.getResourceAsStream("");
    java.lang.Object[] var48 = new java.lang.Object[] { var47};
    java.util.List var49 = org.jsecurity.util.CollectionUtils.asList(var48);
    org.jsecurity.authc.pam.ModularRealmAuthenticator var50 = new org.jsecurity.authc.pam.ModularRealmAuthenticator(var49);
    org.jsecurity.subject.SimplePrincipalCollection var52 = new org.jsecurity.subject.SimplePrincipalCollection((java.util.Collection)var49, "org.jsecurity.authz.UnauthorizedException: org.jsecurity.session.ExpiredSessionException: ");
    java.util.Set var53 = var52.getRealmNames();
    java.io.InputStream var55 = org.jsecurity.util.ClassUtils.getResourceAsStream("");
    java.lang.Object[] var56 = new java.lang.Object[] { var55};
    java.util.List var57 = org.jsecurity.util.CollectionUtils.asList(var56);
    org.jsecurity.authc.pam.ModularRealmAuthenticator var58 = new org.jsecurity.authc.pam.ModularRealmAuthenticator(var57);
    org.jsecurity.subject.SimplePrincipalCollection var60 = new org.jsecurity.subject.SimplePrincipalCollection((java.util.Collection)var57, "org.jsecurity.authz.UnauthorizedException: org.jsecurity.session.ExpiredSessionException: ");
    org.jsecurity.session.UnknownSessionException var65 = new org.jsecurity.session.UnknownSessionException("dd\uFFFD", (java.io.Serializable)100.0f);
    org.jsecurity.session.SessionException var67 = new org.jsecurity.session.SessionException("dd\uFFFD", (java.lang.Throwable)var65, (java.io.Serializable)0);
    org.jsecurity.session.SessionException var68 = new org.jsecurity.session.SessionException("dd\uFFFD", (java.lang.Throwable)var65);
    var60.add((java.lang.Object)var68, "org.jsecurity.config.ConfigurationException: dd\uFFFD");
    java.util.Set var71 = var60.asSet();
    var52.addAll((java.util.Collection)var71, "6464ff");
    boolean var74 = var52.isEmpty();
    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      org.jsecurity.crypto.hash.Md2Hash var75 = new org.jsecurity.crypto.hash.Md2Hash((java.lang.Object)var0, (java.lang.Object)var52);
      fail("Expected exception of type org.jsecurity.codec.CodecException");
    } catch (org.jsecurity.codec.CodecException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var4);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var10 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var11);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var14);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var22);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var23);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var24);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var42);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var45);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var47);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var48);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var49);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var53);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var55);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var56);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var57);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var71);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var74 == false);

  }

  public void test439() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest2.test439");


    org.jsecurity.mgt.DefaultSecurityManager var0 = new org.jsecurity.mgt.DefaultSecurityManager();
    java.io.InputStream var2 = org.jsecurity.util.ClassUtils.getResourceAsStream("");
    java.lang.Object[] var3 = new java.lang.Object[] { var2};
    java.util.List var4 = org.jsecurity.util.CollectionUtils.asList(var3);
    org.jsecurity.authc.pam.ModularRealmAuthenticator var5 = new org.jsecurity.authc.pam.ModularRealmAuthenticator(var4);
    org.jsecurity.authc.pam.AllSuccessfulModularAuthenticationStrategy var6 = new org.jsecurity.authc.pam.AllSuccessfulModularAuthenticationStrategy();
    var5.setModularAuthenticationStrategy((org.jsecurity.authc.pam.ModularAuthenticationStrategy)var6);
    org.jsecurity.authz.SimpleAuthorizationInfo var8 = new org.jsecurity.authz.SimpleAuthorizationInfo();
    var8.addStringPermission("hi!");
    java.io.InputStream var12 = org.jsecurity.util.ClassUtils.getResourceAsStream("");
    java.lang.Object[] var13 = new java.lang.Object[] { var12};
    java.util.List var14 = org.jsecurity.util.CollectionUtils.asList(var13);
    var8.addRoles((java.util.Collection)var14);
    var5.setAuthenticationListeners((java.util.Collection)var14);
    var0.setSessionListeners((java.util.Collection)var14);
    org.jsecurity.realm.text.TextConfigurationRealm var18 = new org.jsecurity.realm.text.TextConfigurationRealm();
    java.io.InputStream var20 = org.jsecurity.util.ClassUtils.getResourceAsStream("");
    java.lang.Object[] var21 = new java.lang.Object[] { var20};
    java.util.List var22 = org.jsecurity.util.CollectionUtils.asList(var21);
    org.jsecurity.authc.pam.ModularRealmAuthenticator var23 = new org.jsecurity.authc.pam.ModularRealmAuthenticator(var22);
    org.jsecurity.subject.SimplePrincipalCollection var25 = new org.jsecurity.subject.SimplePrincipalCollection((java.util.Collection)var22, "org.jsecurity.authz.UnauthorizedException: org.jsecurity.session.ExpiredSessionException: ");
    org.jsecurity.session.UnknownSessionException var30 = new org.jsecurity.session.UnknownSessionException("dd\uFFFD", (java.io.Serializable)100.0f);
    org.jsecurity.session.SessionException var32 = new org.jsecurity.session.SessionException("dd\uFFFD", (java.lang.Throwable)var30, (java.io.Serializable)0);
    org.jsecurity.session.SessionException var33 = new org.jsecurity.session.SessionException("dd\uFFFD", (java.lang.Throwable)var30);
    var25.add((java.lang.Object)var33, "org.jsecurity.config.ConfigurationException: dd\uFFFD");
    var18.onLogout((org.jsecurity.subject.PrincipalCollection)var25);
    org.jsecurity.authc.pam.FirstSuccessfulAuthenticationStrategy var37 = new org.jsecurity.authc.pam.FirstSuccessfulAuthenticationStrategy();
    org.jsecurity.authz.UnauthorizedException var39 = new org.jsecurity.authz.UnauthorizedException("org.jsecurity.config.ConfigurationException: dd\uFFFD");
    java.lang.Throwable[] var40 = var39.getSuppressed();
    java.util.List var41 = org.jsecurity.util.CollectionUtils.asList((java.lang.Object[])var40);
    org.jsecurity.authc.UsernamePasswordToken var42 = new org.jsecurity.authc.UsernamePasswordToken();
    java.lang.String var43 = var42.getUsername();
    java.net.InetAddress var44 = var42.getInetAddress();
    org.jsecurity.authc.AuthenticationInfo var45 = var37.beforeAllAttempts((java.util.Collection)var41, (org.jsecurity.authc.AuthenticationToken)var42);
    boolean[] var46 = var0.hasRoles((org.jsecurity.subject.PrincipalCollection)var25, var41);
    org.jsecurity.codec.CodecException var49 = new org.jsecurity.codec.CodecException("dd\uFFFD");
    org.jsecurity.authc.ConcurrentAccessException var50 = new org.jsecurity.authc.ConcurrentAccessException("org.jsecurity.authz.UnauthorizedException: org.jsecurity.session.ExpiredSessionException: ", (java.lang.Throwable)var49);
    org.jsecurity.subject.SimplePrincipalCollection var52 = new org.jsecurity.subject.SimplePrincipalCollection((java.lang.Object)var49, "");
    java.io.InputStream var54 = org.jsecurity.util.ClassUtils.getResourceAsStream("");
    java.lang.Object[] var55 = new java.lang.Object[] { var54};
    java.util.List var56 = org.jsecurity.util.CollectionUtils.asList(var55);
    org.jsecurity.authc.pam.ModularRealmAuthenticator var57 = new org.jsecurity.authc.pam.ModularRealmAuthenticator(var56);
    var52.addAll((java.util.Collection)var56, "\u0000\u0000");
    var0.setSessionListeners((java.util.Collection)var56);
    org.jsecurity.subject.RememberMeManager var61 = var0.getRememberMeManager();
    org.jsecurity.subject.Subject var62 = var0.getSubject();
    var0.destroy();
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var2);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var3);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var4);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var12);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var13);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var14);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var20);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var21);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var22);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var40);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var41);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var43);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var44);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var45);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var46);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var54);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var55);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var56);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var61);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var62);

  }

  public void test440() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest2.test440");


    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      org.jsecurity.io.IniResource var2 = new org.jsecurity.io.IniResource("90600189-3e21-4e29-9e6f-bb012a7f3017", "ce09e5a8-f60d-4790-96b2-e4cb301de6f0");
      fail("Expected exception of type org.jsecurity.io.ResourceException");
    } catch (org.jsecurity.io.ResourceException e) {
      // Expected exception.
    }

  }

  public void test441() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest2.test441");


    org.jsecurity.mgt.DefaultSecurityManager var0 = new org.jsecurity.mgt.DefaultSecurityManager();
    java.io.InputStream var2 = org.jsecurity.util.ClassUtils.getResourceAsStream("");
    java.lang.Object[] var3 = new java.lang.Object[] { var2};
    java.util.List var4 = org.jsecurity.util.CollectionUtils.asList(var3);
    org.jsecurity.authc.pam.ModularRealmAuthenticator var5 = new org.jsecurity.authc.pam.ModularRealmAuthenticator(var4);
    org.jsecurity.authc.pam.AllSuccessfulModularAuthenticationStrategy var6 = new org.jsecurity.authc.pam.AllSuccessfulModularAuthenticationStrategy();
    var5.setModularAuthenticationStrategy((org.jsecurity.authc.pam.ModularAuthenticationStrategy)var6);
    org.jsecurity.authz.SimpleAuthorizationInfo var8 = new org.jsecurity.authz.SimpleAuthorizationInfo();
    var8.addStringPermission("hi!");
    java.io.InputStream var12 = org.jsecurity.util.ClassUtils.getResourceAsStream("");
    java.lang.Object[] var13 = new java.lang.Object[] { var12};
    java.util.List var14 = org.jsecurity.util.CollectionUtils.asList(var13);
    var8.addRoles((java.util.Collection)var14);
    var5.setAuthenticationListeners((java.util.Collection)var14);
    var0.setSessionListeners((java.util.Collection)var14);
    java.io.InputStream var19 = org.jsecurity.util.ClassUtils.getResourceAsStream("");
    java.lang.Object[] var20 = new java.lang.Object[] { var19};
    java.util.List var21 = org.jsecurity.util.CollectionUtils.asList(var20);
    org.jsecurity.authc.pam.ModularRealmAuthenticator var22 = new org.jsecurity.authc.pam.ModularRealmAuthenticator(var21);
    org.jsecurity.authc.pam.AllSuccessfulModularAuthenticationStrategy var23 = new org.jsecurity.authc.pam.AllSuccessfulModularAuthenticationStrategy();
    var22.setModularAuthenticationStrategy((org.jsecurity.authc.pam.ModularAuthenticationStrategy)var23);
    org.jsecurity.authz.SimpleAuthorizationInfo var25 = new org.jsecurity.authz.SimpleAuthorizationInfo();
    var25.addStringPermission("hi!");
    java.io.InputStream var29 = org.jsecurity.util.ClassUtils.getResourceAsStream("");
    java.lang.Object[] var30 = new java.lang.Object[] { var29};
    java.util.List var31 = org.jsecurity.util.CollectionUtils.asList(var30);
    var25.addRoles((java.util.Collection)var31);
    var22.setAuthenticationListeners((java.util.Collection)var31);
    org.jsecurity.realm.activedirectory.ActiveDirectoryRealm var34 = new org.jsecurity.realm.activedirectory.ActiveDirectoryRealm();
    var34.setPrincipalSuffix("");
    var22.setRealm((org.jsecurity.realm.Realm)var34);
    org.jsecurity.cache.HashtableCacheManager var38 = new org.jsecurity.cache.HashtableCacheManager();
    org.jsecurity.cache.Cache var40 = var38.getCache("\u0000\u0000");
    var34.setAuthorizationCache(var40);
    var0.setRealm((org.jsecurity.realm.Realm)var34);
    org.jsecurity.realm.activedirectory.ActiveDirectoryRealm var43 = new org.jsecurity.realm.activedirectory.ActiveDirectoryRealm();
    org.jsecurity.authc.credential.Sha256CredentialsMatcher var44 = new org.jsecurity.authc.credential.Sha256CredentialsMatcher();
    var43.setCredentialsMatcher((org.jsecurity.authc.credential.CredentialsMatcher)var44);
    java.lang.String var46 = var43.getAuthorizationCacheName();
    var43.setPrincipalSuffix("org.jsecurity.config.ConfigurationException: dd\uFFFD");
    org.jsecurity.realm.text.TextConfigurationRealm var49 = new org.jsecurity.realm.text.TextConfigurationRealm();
    java.io.InputStream var51 = org.jsecurity.util.ClassUtils.getResourceAsStream("");
    java.lang.Object[] var52 = new java.lang.Object[] { var51};
    java.util.List var53 = org.jsecurity.util.CollectionUtils.asList(var52);
    org.jsecurity.authc.pam.ModularRealmAuthenticator var54 = new org.jsecurity.authc.pam.ModularRealmAuthenticator(var53);
    org.jsecurity.subject.SimplePrincipalCollection var56 = new org.jsecurity.subject.SimplePrincipalCollection((java.util.Collection)var53, "org.jsecurity.authz.UnauthorizedException: org.jsecurity.session.ExpiredSessionException: ");
    org.jsecurity.session.UnknownSessionException var61 = new org.jsecurity.session.UnknownSessionException("dd\uFFFD", (java.io.Serializable)100.0f);
    org.jsecurity.session.SessionException var63 = new org.jsecurity.session.SessionException("dd\uFFFD", (java.lang.Throwable)var61, (java.io.Serializable)0);
    org.jsecurity.session.SessionException var64 = new org.jsecurity.session.SessionException("dd\uFFFD", (java.lang.Throwable)var61);
    var56.add((java.lang.Object)var64, "org.jsecurity.config.ConfigurationException: dd\uFFFD");
    var49.onLogout((org.jsecurity.subject.PrincipalCollection)var56);
    var43.onLogout((org.jsecurity.subject.PrincipalCollection)var56);
    org.jsecurity.codec.CodecException var71 = new org.jsecurity.codec.CodecException("dd\uFFFD");
    org.jsecurity.authc.ConcurrentAccessException var72 = new org.jsecurity.authc.ConcurrentAccessException("org.jsecurity.authz.UnauthorizedException: org.jsecurity.session.ExpiredSessionException: ", (java.lang.Throwable)var71);
    org.jsecurity.subject.SimplePrincipalCollection var74 = new org.jsecurity.subject.SimplePrincipalCollection((java.lang.Object)var71, "");
    org.jsecurity.authc.pam.FirstSuccessfulAuthenticationStrategy var75 = new org.jsecurity.authc.pam.FirstSuccessfulAuthenticationStrategy();
    org.jsecurity.authz.UnauthorizedException var77 = new org.jsecurity.authz.UnauthorizedException("org.jsecurity.config.ConfigurationException: dd\uFFFD");
    java.lang.Throwable[] var78 = var77.getSuppressed();
    java.util.List var79 = org.jsecurity.util.CollectionUtils.asList((java.lang.Object[])var78);
    org.jsecurity.authc.UsernamePasswordToken var80 = new org.jsecurity.authc.UsernamePasswordToken();
    java.lang.String var81 = var80.getUsername();
    java.net.InetAddress var82 = var80.getInetAddress();
    org.jsecurity.authc.AuthenticationInfo var83 = var75.beforeAllAttempts((java.util.Collection)var79, (org.jsecurity.authc.AuthenticationToken)var80);
    org.jsecurity.session.UnknownSessionException var88 = new org.jsecurity.session.UnknownSessionException("dd\uFFFD", (java.io.Serializable)100.0f);
    org.jsecurity.subject.SubjectException var89 = new org.jsecurity.subject.SubjectException("dd\uFFFD", (java.lang.Throwable)var88);
    org.jsecurity.io.SerializationException var90 = new org.jsecurity.io.SerializationException("", (java.lang.Throwable)var89);
    java.lang.Throwable[] var91 = var89.getSuppressed();
    java.util.Set var92 = org.jsecurity.util.CollectionUtils.asSet((java.lang.Object[])var91);
    org.jsecurity.authc.SimpleAccount var93 = new org.jsecurity.authc.SimpleAccount((org.jsecurity.subject.PrincipalCollection)var74, (java.lang.Object)var79, var92);
    org.jsecurity.authz.SimpleAuthorizingAccount var94 = new org.jsecurity.authz.SimpleAuthorizingAccount((org.jsecurity.subject.PrincipalCollection)var56, (java.lang.Object)var93);
    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      var0.checkPermission((org.jsecurity.subject.PrincipalCollection)var56, "020e4fd5-81c8-4cbc-9bbb-975c45ce39a3");
      fail("Expected exception of type java.util.NoSuchElementException");
    } catch (java.util.NoSuchElementException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var2);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var3);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var4);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var12);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var13);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var14);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var19);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var20);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var21);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var29);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var30);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var31);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var40);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var46);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var51);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var52);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var53);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var78);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var79);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var81);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var82);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var83);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var91);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var92);

  }

  public void test442() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest2.test442");


    org.jsecurity.realm.activedirectory.ActiveDirectoryRealm var0 = new org.jsecurity.realm.activedirectory.ActiveDirectoryRealm();
    org.jsecurity.authc.credential.Sha256CredentialsMatcher var1 = new org.jsecurity.authc.credential.Sha256CredentialsMatcher();
    var0.setCredentialsMatcher((org.jsecurity.authc.credential.CredentialsMatcher)var1);
    org.jsecurity.realm.activedirectory.ActiveDirectoryRealm var3 = new org.jsecurity.realm.activedirectory.ActiveDirectoryRealm();
    org.jsecurity.authc.credential.Sha256CredentialsMatcher var4 = new org.jsecurity.authc.credential.Sha256CredentialsMatcher();
    var3.setCredentialsMatcher((org.jsecurity.authc.credential.CredentialsMatcher)var4);
    java.lang.String var6 = var3.getAuthorizationCacheName();
    var3.setUrl("hi!");
    org.jsecurity.realm.ldap.DefaultLdapContextFactory var9 = new org.jsecurity.realm.ldap.DefaultLdapContextFactory();
    var3.setLdapContextFactory((org.jsecurity.realm.ldap.LdapContextFactory)var9);
    var9.setAuthentication("org.jsecurity.authz.UnauthorizedException: org.jsecurity.session.ExpiredSessionException: ");
    var0.setLdapContextFactory((org.jsecurity.realm.ldap.LdapContextFactory)var9);
    var9.setReferral("a2b823b1e72eae2b727289df8a00a89df8a0bab6ad8a89c4c5c7a9b62a270000");
    var9.setUrl("\u0000\u0000");
    var9.setSystemUsername("f4578b3a-1e8a-4019-b058-920d7e36ff9e");
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var6);

  }

  public void test443() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest2.test443");


    org.jsecurity.realm.text.TextConfigurationRealm var0 = new org.jsecurity.realm.text.TextConfigurationRealm();
    java.io.InputStream var2 = org.jsecurity.util.ClassUtils.getResourceAsStream("");
    java.lang.Object[] var3 = new java.lang.Object[] { var2};
    java.util.List var4 = org.jsecurity.util.CollectionUtils.asList(var3);
    org.jsecurity.authc.pam.ModularRealmAuthenticator var5 = new org.jsecurity.authc.pam.ModularRealmAuthenticator(var4);
    org.jsecurity.subject.SimplePrincipalCollection var7 = new org.jsecurity.subject.SimplePrincipalCollection((java.util.Collection)var4, "org.jsecurity.authz.UnauthorizedException: org.jsecurity.session.ExpiredSessionException: ");
    org.jsecurity.session.UnknownSessionException var12 = new org.jsecurity.session.UnknownSessionException("dd\uFFFD", (java.io.Serializable)100.0f);
    org.jsecurity.session.SessionException var14 = new org.jsecurity.session.SessionException("dd\uFFFD", (java.lang.Throwable)var12, (java.io.Serializable)0);
    org.jsecurity.session.SessionException var15 = new org.jsecurity.session.SessionException("dd\uFFFD", (java.lang.Throwable)var12);
    var7.add((java.lang.Object)var15, "org.jsecurity.config.ConfigurationException: dd\uFFFD");
    var0.onLogout((org.jsecurity.subject.PrincipalCollection)var7);
    org.jsecurity.cache.HashtableCacheManager var19 = new org.jsecurity.cache.HashtableCacheManager();
    org.jsecurity.cache.Cache var21 = var19.getCache("\u0000\u0000");
    var0.setAuthorizationCache(var21);
    org.jsecurity.codec.CodecException var25 = new org.jsecurity.codec.CodecException("dd\uFFFD");
    org.jsecurity.authc.ConcurrentAccessException var26 = new org.jsecurity.authc.ConcurrentAccessException("org.jsecurity.authz.UnauthorizedException: org.jsecurity.session.ExpiredSessionException: ", (java.lang.Throwable)var25);
    org.jsecurity.subject.SimplePrincipalCollection var28 = new org.jsecurity.subject.SimplePrincipalCollection((java.lang.Object)var25, "");
    var0.onLogout((org.jsecurity.subject.PrincipalCollection)var28);
    var0.setRoleDefinitions("hi!");
    org.jsecurity.authc.pam.AllSuccessfulModularAuthenticationStrategy var32 = new org.jsecurity.authc.pam.AllSuccessfulModularAuthenticationStrategy();
    char[] var34 = new char[] { };
    org.jsecurity.authc.UsernamePasswordToken var36 = new org.jsecurity.authc.UsernamePasswordToken("hi!", var34, true);
    org.jsecurity.authc.SimpleAccount var37 = new org.jsecurity.authc.SimpleAccount();
    var37.setCredentialsExpired(false);
    boolean var40 = var37.isLocked();
    org.jsecurity.authc.AuthenticationInfo var41 = var32.afterAllAttempts((org.jsecurity.authc.AuthenticationToken)var36, (org.jsecurity.authc.AuthenticationInfo)var37);
    boolean var42 = var0.supports((org.jsecurity.authc.AuthenticationToken)var36);
    java.lang.String var43 = var0.getAuthorizationCacheName();
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var2);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var3);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var4);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var21);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var34);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var40 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var41);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var42 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var43);

  }

  public void test444() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest2.test444");


    org.jsecurity.authc.ExpiredCredentialsException var1 = new org.jsecurity.authc.ExpiredCredentialsException("518186d8-31e9-47c0-b564-85d1505b64b6");

  }

  public void test445() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest2.test445");


    org.jsecurity.authz.UnauthenticatedException var3 = new org.jsecurity.authz.UnauthenticatedException("");
    org.jsecurity.session.UnknownSessionException var4 = new org.jsecurity.session.UnknownSessionException("org.jsecurity.config.ConfigurationException: dd\uFFFD", (java.lang.Throwable)var3);
    org.jsecurity.authc.DisabledAccountException var5 = new org.jsecurity.authc.DisabledAccountException("org.jsecurity.authz.UnauthorizedException: org.jsecurity.session.ExpiredSessionException: ", (java.lang.Throwable)var4);
    org.jsecurity.authc.DisabledAccountException var6 = new org.jsecurity.authc.DisabledAccountException((java.lang.Throwable)var5);

  }

  public void test446() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest2.test446");


    org.jsecurity.realm.text.TextConfigurationRealm var0 = new org.jsecurity.realm.text.TextConfigurationRealm();
    java.io.InputStream var2 = org.jsecurity.util.ClassUtils.getResourceAsStream("");
    java.lang.Object[] var3 = new java.lang.Object[] { var2};
    java.util.List var4 = org.jsecurity.util.CollectionUtils.asList(var3);
    org.jsecurity.authc.pam.ModularRealmAuthenticator var5 = new org.jsecurity.authc.pam.ModularRealmAuthenticator(var4);
    org.jsecurity.subject.SimplePrincipalCollection var7 = new org.jsecurity.subject.SimplePrincipalCollection((java.util.Collection)var4, "org.jsecurity.authz.UnauthorizedException: org.jsecurity.session.ExpiredSessionException: ");
    org.jsecurity.session.UnknownSessionException var12 = new org.jsecurity.session.UnknownSessionException("dd\uFFFD", (java.io.Serializable)100.0f);
    org.jsecurity.session.SessionException var14 = new org.jsecurity.session.SessionException("dd\uFFFD", (java.lang.Throwable)var12, (java.io.Serializable)0);
    org.jsecurity.session.SessionException var15 = new org.jsecurity.session.SessionException("dd\uFFFD", (java.lang.Throwable)var12);
    var7.add((java.lang.Object)var15, "org.jsecurity.config.ConfigurationException: dd\uFFFD");
    var0.onLogout((org.jsecurity.subject.PrincipalCollection)var7);
    java.util.Collection var20 = var7.fromRealm("\u0000\u0000\u0000");
    boolean var21 = var7.isEmpty();
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var2);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var3);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var4);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var20);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var21 == false);

  }

  public void test447() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest2.test447");


    org.jsecurity.realm.jdbc.JdbcRealm var0 = new org.jsecurity.realm.jdbc.JdbcRealm();
    var0.setPermissionsQuery("org.jsecurity.realm.text.TextConfigurationRealm_445");
    var0.setUserRolesQuery("6464ff");
    var0.setAuthenticationQuery("dd\uFFFD");
    var0.setPermissionsQuery("s\uFFFD\uFFFDkG\uFFFD\uFFFD\uFFFD4\uFFFDW\uFFFDi\uFFFD\uFFFDi\uFFFD\u067D\uFFFD{\uFFFD\u001F");

  }

  public void test448() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest2.test448");


    org.jsecurity.authz.SimpleAuthorizationInfo var0 = new org.jsecurity.authz.SimpleAuthorizationInfo();
    var0.addRole("a2b823b1e72eae2b727289df8a00a89df8a0bab6ad8a89c4c5c7a9b62a270000");
    org.jsecurity.authz.SimpleAuthorizationInfo var3 = new org.jsecurity.authz.SimpleAuthorizationInfo();
    var3.addRole("a2b823b1e72eae2b727289df8a00a89df8a0bab6ad8a89c4c5c7a9b62a270000");
    org.jsecurity.session.UnknownSessionException var10 = new org.jsecurity.session.UnknownSessionException("dd\uFFFD", (java.io.Serializable)100.0f);
    org.jsecurity.subject.SubjectException var11 = new org.jsecurity.subject.SubjectException("dd\uFFFD", (java.lang.Throwable)var10);
    org.jsecurity.io.SerializationException var12 = new org.jsecurity.io.SerializationException("", (java.lang.Throwable)var11);
    java.lang.Throwable[] var13 = var11.getSuppressed();
    java.util.Set var14 = org.jsecurity.util.CollectionUtils.asSet((java.lang.Object[])var13);
    var3.addRoles((java.util.Collection)var14);
    var0.setObjectPermissions(var14);
    java.io.InputStream var18 = org.jsecurity.util.ClassUtils.getResourceAsStream("");
    java.lang.Object[] var19 = new java.lang.Object[] { var18};
    java.util.List var20 = org.jsecurity.util.CollectionUtils.asList(var19);
    org.jsecurity.authc.pam.ModularRealmAuthenticator var21 = new org.jsecurity.authc.pam.ModularRealmAuthenticator(var20);
    org.jsecurity.subject.SimplePrincipalCollection var23 = new org.jsecurity.subject.SimplePrincipalCollection((java.util.Collection)var20, "org.jsecurity.authz.UnauthorizedException: org.jsecurity.session.ExpiredSessionException: ");
    java.util.Set var24 = var23.getRealmNames();
    java.io.InputStream var26 = org.jsecurity.util.ClassUtils.getResourceAsStream("");
    java.lang.Object[] var27 = new java.lang.Object[] { var26};
    java.util.List var28 = org.jsecurity.util.CollectionUtils.asList(var27);
    org.jsecurity.authc.pam.ModularRealmAuthenticator var29 = new org.jsecurity.authc.pam.ModularRealmAuthenticator(var28);
    org.jsecurity.subject.SimplePrincipalCollection var31 = new org.jsecurity.subject.SimplePrincipalCollection((java.util.Collection)var28, "org.jsecurity.authz.UnauthorizedException: org.jsecurity.session.ExpiredSessionException: ");
    org.jsecurity.session.UnknownSessionException var36 = new org.jsecurity.session.UnknownSessionException("dd\uFFFD", (java.io.Serializable)100.0f);
    org.jsecurity.session.SessionException var38 = new org.jsecurity.session.SessionException("dd\uFFFD", (java.lang.Throwable)var36, (java.io.Serializable)0);
    org.jsecurity.session.SessionException var39 = new org.jsecurity.session.SessionException("dd\uFFFD", (java.lang.Throwable)var36);
    var31.add((java.lang.Object)var39, "org.jsecurity.config.ConfigurationException: dd\uFFFD");
    java.util.Set var42 = var31.asSet();
    var23.addAll((java.util.Collection)var42, "6464ff");
    var0.setStringPermissions(var42);
    java.util.Set var46 = var0.getStringPermissions();
    java.util.Set var47 = var0.getStringPermissions();
    java.util.Set var48 = var0.getStringPermissions();
    var0.addRole("9ef01302-1480-4c86-ad5f-260a5ece5eb4");
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var13);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var14);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var18);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var19);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var20);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var24);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var26);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var27);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var28);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var42);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var46);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var47);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var48);

  }

  public void test449() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest2.test449");


    org.jsecurity.realm.activedirectory.ActiveDirectoryRealm var0 = new org.jsecurity.realm.activedirectory.ActiveDirectoryRealm();
    org.jsecurity.authc.credential.Sha256CredentialsMatcher var1 = new org.jsecurity.authc.credential.Sha256CredentialsMatcher();
    var0.setCredentialsMatcher((org.jsecurity.authc.credential.CredentialsMatcher)var1);
    java.lang.String var3 = var0.getAuthorizationCacheName();
    var0.setPrincipalSuffix("org.jsecurity.config.ConfigurationException: dd\uFFFD");
    org.jsecurity.realm.text.TextConfigurationRealm var6 = new org.jsecurity.realm.text.TextConfigurationRealm();
    java.io.InputStream var8 = org.jsecurity.util.ClassUtils.getResourceAsStream("");
    java.lang.Object[] var9 = new java.lang.Object[] { var8};
    java.util.List var10 = org.jsecurity.util.CollectionUtils.asList(var9);
    org.jsecurity.authc.pam.ModularRealmAuthenticator var11 = new org.jsecurity.authc.pam.ModularRealmAuthenticator(var10);
    org.jsecurity.subject.SimplePrincipalCollection var13 = new org.jsecurity.subject.SimplePrincipalCollection((java.util.Collection)var10, "org.jsecurity.authz.UnauthorizedException: org.jsecurity.session.ExpiredSessionException: ");
    org.jsecurity.session.UnknownSessionException var18 = new org.jsecurity.session.UnknownSessionException("dd\uFFFD", (java.io.Serializable)100.0f);
    org.jsecurity.session.SessionException var20 = new org.jsecurity.session.SessionException("dd\uFFFD", (java.lang.Throwable)var18, (java.io.Serializable)0);
    org.jsecurity.session.SessionException var21 = new org.jsecurity.session.SessionException("dd\uFFFD", (java.lang.Throwable)var18);
    var13.add((java.lang.Object)var21, "org.jsecurity.config.ConfigurationException: dd\uFFFD");
    var6.onLogout((org.jsecurity.subject.PrincipalCollection)var13);
    var0.onLogout((org.jsecurity.subject.PrincipalCollection)var13);
    org.jsecurity.realm.SimpleAccountRealm var27 = new org.jsecurity.realm.SimpleAccountRealm("hi!");
    java.lang.Class var28 = var27.getAuthenticationTokenClass();
    java.util.Collection var29 = org.jsecurity.util.CollectionUtils.emptyCollection(var28);
    java.util.Collection var30 = var13.byType(var28);
    org.jsecurity.authz.ModularRealmAuthorizer var31 = new org.jsecurity.authz.ModularRealmAuthorizer(var30);
    org.jsecurity.mgt.DefaultSecurityManager var32 = new org.jsecurity.mgt.DefaultSecurityManager();
    java.io.InputStream var34 = org.jsecurity.util.ClassUtils.getResourceAsStream("");
    java.lang.Object[] var35 = new java.lang.Object[] { var34};
    java.util.List var36 = org.jsecurity.util.CollectionUtils.asList(var35);
    org.jsecurity.authc.pam.ModularRealmAuthenticator var37 = new org.jsecurity.authc.pam.ModularRealmAuthenticator(var36);
    org.jsecurity.authc.pam.AllSuccessfulModularAuthenticationStrategy var38 = new org.jsecurity.authc.pam.AllSuccessfulModularAuthenticationStrategy();
    var37.setModularAuthenticationStrategy((org.jsecurity.authc.pam.ModularAuthenticationStrategy)var38);
    org.jsecurity.authz.SimpleAuthorizationInfo var40 = new org.jsecurity.authz.SimpleAuthorizationInfo();
    var40.addStringPermission("hi!");
    java.io.InputStream var44 = org.jsecurity.util.ClassUtils.getResourceAsStream("");
    java.lang.Object[] var45 = new java.lang.Object[] { var44};
    java.util.List var46 = org.jsecurity.util.CollectionUtils.asList(var45);
    var40.addRoles((java.util.Collection)var46);
    var37.setAuthenticationListeners((java.util.Collection)var46);
    var32.setSessionListeners((java.util.Collection)var46);
    org.jsecurity.realm.text.TextConfigurationRealm var50 = new org.jsecurity.realm.text.TextConfigurationRealm();
    java.io.InputStream var52 = org.jsecurity.util.ClassUtils.getResourceAsStream("");
    java.lang.Object[] var53 = new java.lang.Object[] { var52};
    java.util.List var54 = org.jsecurity.util.CollectionUtils.asList(var53);
    org.jsecurity.authc.pam.ModularRealmAuthenticator var55 = new org.jsecurity.authc.pam.ModularRealmAuthenticator(var54);
    org.jsecurity.subject.SimplePrincipalCollection var57 = new org.jsecurity.subject.SimplePrincipalCollection((java.util.Collection)var54, "org.jsecurity.authz.UnauthorizedException: org.jsecurity.session.ExpiredSessionException: ");
    org.jsecurity.session.UnknownSessionException var62 = new org.jsecurity.session.UnknownSessionException("dd\uFFFD", (java.io.Serializable)100.0f);
    org.jsecurity.session.SessionException var64 = new org.jsecurity.session.SessionException("dd\uFFFD", (java.lang.Throwable)var62, (java.io.Serializable)0);
    org.jsecurity.session.SessionException var65 = new org.jsecurity.session.SessionException("dd\uFFFD", (java.lang.Throwable)var62);
    var57.add((java.lang.Object)var65, "org.jsecurity.config.ConfigurationException: dd\uFFFD");
    var50.onLogout((org.jsecurity.subject.PrincipalCollection)var57);
    org.jsecurity.authc.pam.FirstSuccessfulAuthenticationStrategy var69 = new org.jsecurity.authc.pam.FirstSuccessfulAuthenticationStrategy();
    org.jsecurity.authz.UnauthorizedException var71 = new org.jsecurity.authz.UnauthorizedException("org.jsecurity.config.ConfigurationException: dd\uFFFD");
    java.lang.Throwable[] var72 = var71.getSuppressed();
    java.util.List var73 = org.jsecurity.util.CollectionUtils.asList((java.lang.Object[])var72);
    org.jsecurity.authc.UsernamePasswordToken var74 = new org.jsecurity.authc.UsernamePasswordToken();
    java.lang.String var75 = var74.getUsername();
    java.net.InetAddress var76 = var74.getInetAddress();
    org.jsecurity.authc.AuthenticationInfo var77 = var69.beforeAllAttempts((java.util.Collection)var73, (org.jsecurity.authc.AuthenticationToken)var74);
    boolean[] var78 = var32.hasRoles((org.jsecurity.subject.PrincipalCollection)var57, var73);
    org.jsecurity.codec.CodecException var81 = new org.jsecurity.codec.CodecException("dd\uFFFD");
    org.jsecurity.authc.ConcurrentAccessException var82 = new org.jsecurity.authc.ConcurrentAccessException("org.jsecurity.authz.UnauthorizedException: org.jsecurity.session.ExpiredSessionException: ", (java.lang.Throwable)var81);
    org.jsecurity.subject.SimplePrincipalCollection var84 = new org.jsecurity.subject.SimplePrincipalCollection((java.lang.Object)var81, "");
    java.io.InputStream var86 = org.jsecurity.util.ClassUtils.getResourceAsStream("");
    java.lang.Object[] var87 = new java.lang.Object[] { var86};
    java.util.List var88 = org.jsecurity.util.CollectionUtils.asList(var87);
    org.jsecurity.authc.pam.ModularRealmAuthenticator var89 = new org.jsecurity.authc.pam.ModularRealmAuthenticator(var88);
    var84.addAll((java.util.Collection)var88, "\u0000\u0000");
    var32.setSessionListeners((java.util.Collection)var88);
    var31.setRealms((java.util.Collection)var88);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var3);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var8);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var9);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var10);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var28);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var29);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var30);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var34);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var35);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var36);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var44);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var45);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var46);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var52);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var53);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var54);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var72);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var73);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var75);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var76);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var77);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var78);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var86);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var87);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var88);

  }

  public void test450() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest2.test450");


    org.jsecurity.authc.ExpiredCredentialsException var1 = new org.jsecurity.authc.ExpiredCredentialsException("d31da942-104a-45d9-be6f-cef1f2470d2d");

  }

  public void test451() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest2.test451");


    org.jsecurity.authc.IncorrectCredentialsException var1 = new org.jsecurity.authc.IncorrectCredentialsException();
    org.jsecurity.session.UnknownSessionException var2 = new org.jsecurity.session.UnknownSessionException((java.lang.Throwable)var1);
    org.jsecurity.authz.UnauthenticatedException var3 = new org.jsecurity.authz.UnauthenticatedException("69b91d50-ee90-487b-8ebd-dd7f4a239e5e", (java.lang.Throwable)var2);

  }

  public void test452() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest2.test452");


    org.jsecurity.realm.jdbc.JdbcRealm var0 = new org.jsecurity.realm.jdbc.JdbcRealm();
    var0.setAuthenticationQuery("96fe6e53-b302-476e-93c9-0dc51d66e5e0");

  }

  public void test453() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest2.test453");


    org.jsecurity.session.UnknownSessionException var4 = new org.jsecurity.session.UnknownSessionException("dd\uFFFD", (java.io.Serializable)100.0f);
    org.jsecurity.session.SessionException var6 = new org.jsecurity.session.SessionException("dd\uFFFD", (java.lang.Throwable)var4, (java.io.Serializable)0);
    org.jsecurity.io.SerializationException var7 = new org.jsecurity.io.SerializationException((java.lang.Throwable)var4);
    org.jsecurity.session.UnknownSessionException var8 = new org.jsecurity.session.UnknownSessionException("57f108f5-de1f-46bc-a431-6c2563f95e22", (java.lang.Throwable)var7);
    org.jsecurity.session.UnknownSessionException var12 = new org.jsecurity.session.UnknownSessionException("dd\uFFFD", (java.io.Serializable)100.0f);
    org.jsecurity.config.ConfigurationException var13 = new org.jsecurity.config.ConfigurationException("dd\uFFFD", (java.lang.Throwable)var12);
    org.jsecurity.session.SessionException var14 = new org.jsecurity.session.SessionException((java.lang.Throwable)var13);
    var8.setSessionId((java.io.Serializable)var13);

  }

  public void test454() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest2.test454");


    org.jsecurity.util.UnavailableConstructorException var2 = new org.jsecurity.util.UnavailableConstructorException("\u0000\u0000");
    org.jsecurity.session.mgt.eis.MemorySessionDAO var3 = new org.jsecurity.session.mgt.eis.MemorySessionDAO();
    org.jsecurity.cache.Cache var4 = var3.getActiveSessionsCache();
    org.jsecurity.cache.CacheManager var5 = var3.getCacheManager();
    org.jsecurity.cache.HashtableCacheManager var6 = new org.jsecurity.cache.HashtableCacheManager();
    org.jsecurity.cache.Cache var8 = var6.getCache("\u0000\u0000");
    var3.setActiveSessionsCache(var8);
    java.io.InputStream var11 = org.jsecurity.util.ClassUtils.getResourceAsStream("");
    java.lang.Object[] var12 = new java.lang.Object[] { var11};
    java.util.List var13 = org.jsecurity.util.CollectionUtils.asList(var12);
    org.jsecurity.authc.pam.ModularRealmAuthenticator var14 = new org.jsecurity.authc.pam.ModularRealmAuthenticator(var13);
    org.jsecurity.authc.pam.AllSuccessfulModularAuthenticationStrategy var15 = new org.jsecurity.authc.pam.AllSuccessfulModularAuthenticationStrategy();
    var14.setModularAuthenticationStrategy((org.jsecurity.authc.pam.ModularAuthenticationStrategy)var15);
    org.jsecurity.authz.SimpleAuthorizationInfo var17 = new org.jsecurity.authz.SimpleAuthorizationInfo();
    var17.addStringPermission("hi!");
    java.io.InputStream var21 = org.jsecurity.util.ClassUtils.getResourceAsStream("");
    java.lang.Object[] var22 = new java.lang.Object[] { var21};
    java.util.List var23 = org.jsecurity.util.CollectionUtils.asList(var22);
    var17.addRoles((java.util.Collection)var23);
    var14.setAuthenticationListeners((java.util.Collection)var23);
    org.jsecurity.realm.activedirectory.ActiveDirectoryRealm var26 = new org.jsecurity.realm.activedirectory.ActiveDirectoryRealm();
    var26.setPrincipalSuffix("");
    var14.setRealm((org.jsecurity.realm.Realm)var26);
    org.jsecurity.cache.HashtableCacheManager var30 = new org.jsecurity.cache.HashtableCacheManager();
    org.jsecurity.cache.Cache var32 = var30.getCache("\u0000\u0000");
    var26.setAuthorizationCache(var32);
    var3.setActiveSessionsCache(var32);
    org.jsecurity.session.mgt.SimpleSession var35 = new org.jsecurity.session.mgt.SimpleSession();
    java.io.Serializable var36 = var3.create((org.jsecurity.session.Session)var35);
    java.io.Serializable var37 = var35.getId();
    org.jsecurity.authc.credential.Md5CredentialsMatcher var38 = new org.jsecurity.authc.credential.Md5CredentialsMatcher();
    boolean var39 = var38.isHashSalted();
    boolean var40 = var38.isHashSalted();
    int var41 = var38.getHashIterations();
    java.lang.Object var42 = var35.removeAttribute((java.lang.Object)var38);
    org.jsecurity.session.mgt.SimpleSession var43 = new org.jsecurity.session.mgt.SimpleSession();
    java.util.Date var44 = var43.getLastAccessTime();
    var35.setStartTimestamp(var44);
    org.jsecurity.session.InvalidSessionException var46 = new org.jsecurity.session.InvalidSessionException("\uFFFD\uFFFD#\uFFFD\uFFFD.\uFFFD+r\uFFFD\u6959(\uFFFD\uFFFDW\uFFFDq\uFFFD.\uFFFD\uFFFD^jY\uFFFDj\uFFFDa\uFFFD\uFFFD\uFFFDj\u0628\u0000", (java.lang.Throwable)var2, (java.io.Serializable)var35);
    org.jsecurity.authc.CredentialsException var47 = new org.jsecurity.authc.CredentialsException((java.lang.Throwable)var46);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var4);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var5);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var8);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var11);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var12);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var13);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var21);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var22);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var23);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var32);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var36 + "' != '" + "f7a4125e-8d75-4df1-90b1-d72857bb1eb2"+ "'", var36.equals("f7a4125e-8d75-4df1-90b1-d72857bb1eb2"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var37 + "' != '" + "f7a4125e-8d75-4df1-90b1-d72857bb1eb2"+ "'", var37.equals("f7a4125e-8d75-4df1-90b1-d72857bb1eb2"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var39 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var40 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var41 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var42);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var44);

  }

  public void test455() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest2.test455");


    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      java.lang.Class var1 = org.jsecurity.util.ClassUtils.forName("29c07e0a-d8fa-4305-a944-e1e754c73175");
      fail("Expected exception of type org.jsecurity.util.UnknownClassException");
    } catch (org.jsecurity.util.UnknownClassException e) {
      // Expected exception.
    }

  }

  public void test456() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest2.test456");


    byte[] var1 = org.jsecurity.codec.Base64.decode("hi!");
    char[] var2 = org.jsecurity.codec.Hex.encode(var1);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var1);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var2);

  }

  public void test457() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest2.test457");


    org.jsecurity.codec.CodecException var2 = new org.jsecurity.codec.CodecException("dd\uFFFD");
    org.jsecurity.authc.ConcurrentAccessException var3 = new org.jsecurity.authc.ConcurrentAccessException("org.jsecurity.authz.UnauthorizedException: org.jsecurity.session.ExpiredSessionException: ", (java.lang.Throwable)var2);
    org.jsecurity.subject.SimplePrincipalCollection var5 = new org.jsecurity.subject.SimplePrincipalCollection((java.lang.Object)var2, "");
    org.jsecurity.authc.pam.FirstSuccessfulAuthenticationStrategy var6 = new org.jsecurity.authc.pam.FirstSuccessfulAuthenticationStrategy();
    org.jsecurity.authz.UnauthorizedException var8 = new org.jsecurity.authz.UnauthorizedException("org.jsecurity.config.ConfigurationException: dd\uFFFD");
    java.lang.Throwable[] var9 = var8.getSuppressed();
    java.util.List var10 = org.jsecurity.util.CollectionUtils.asList((java.lang.Object[])var9);
    org.jsecurity.authc.UsernamePasswordToken var11 = new org.jsecurity.authc.UsernamePasswordToken();
    java.lang.String var12 = var11.getUsername();
    java.net.InetAddress var13 = var11.getInetAddress();
    org.jsecurity.authc.AuthenticationInfo var14 = var6.beforeAllAttempts((java.util.Collection)var10, (org.jsecurity.authc.AuthenticationToken)var11);
    org.jsecurity.session.UnknownSessionException var19 = new org.jsecurity.session.UnknownSessionException("dd\uFFFD", (java.io.Serializable)100.0f);
    org.jsecurity.subject.SubjectException var20 = new org.jsecurity.subject.SubjectException("dd\uFFFD", (java.lang.Throwable)var19);
    org.jsecurity.io.SerializationException var21 = new org.jsecurity.io.SerializationException("", (java.lang.Throwable)var20);
    java.lang.Throwable[] var22 = var20.getSuppressed();
    java.util.Set var23 = org.jsecurity.util.CollectionUtils.asSet((java.lang.Object[])var22);
    org.jsecurity.authc.SimpleAccount var24 = new org.jsecurity.authc.SimpleAccount((org.jsecurity.subject.PrincipalCollection)var5, (java.lang.Object)var10, var23);
    java.io.InputStream var26 = org.jsecurity.util.ClassUtils.getResourceAsStream("");
    java.lang.Object[] var27 = new java.lang.Object[] { var26};
    java.util.List var28 = org.jsecurity.util.CollectionUtils.asList(var27);
    org.jsecurity.authc.pam.ModularRealmAuthenticator var29 = new org.jsecurity.authc.pam.ModularRealmAuthenticator(var28);
    org.jsecurity.subject.SimplePrincipalCollection var31 = new org.jsecurity.subject.SimplePrincipalCollection((java.util.Collection)var28, "org.jsecurity.authz.UnauthorizedException: org.jsecurity.session.ExpiredSessionException: ");
    org.jsecurity.io.ResourceException var35 = new org.jsecurity.io.ResourceException("hi!");
    org.jsecurity.authc.UnknownAccountException var36 = new org.jsecurity.authc.UnknownAccountException((java.lang.Throwable)var35);
    org.jsecurity.session.StoppedSessionException var37 = new org.jsecurity.session.StoppedSessionException("dd\uFFFD", (java.io.Serializable)var35);
    org.jsecurity.session.UnknownSessionException var38 = new org.jsecurity.session.UnknownSessionException("org.jsecurity.authz.UnauthorizedException: org.jsecurity.session.ExpiredSessionException: ", (java.lang.Throwable)var35);
    boolean var39 = var31.equals((java.lang.Object)var35);
    var5.addAll((org.jsecurity.subject.PrincipalCollection)var31);
    java.util.List var41 = var31.asList();
    org.jsecurity.authz.ModularRealmAuthorizer var42 = new org.jsecurity.authz.ModularRealmAuthorizer((java.util.Collection)var41);
    org.jsecurity.realm.text.TextConfigurationRealm var43 = new org.jsecurity.realm.text.TextConfigurationRealm();
    org.jsecurity.realm.text.TextConfigurationRealm var44 = new org.jsecurity.realm.text.TextConfigurationRealm();
    java.io.InputStream var46 = org.jsecurity.util.ClassUtils.getResourceAsStream("");
    java.lang.Object[] var47 = new java.lang.Object[] { var46};
    java.util.List var48 = org.jsecurity.util.CollectionUtils.asList(var47);
    org.jsecurity.authc.pam.ModularRealmAuthenticator var49 = new org.jsecurity.authc.pam.ModularRealmAuthenticator(var48);
    org.jsecurity.subject.SimplePrincipalCollection var51 = new org.jsecurity.subject.SimplePrincipalCollection((java.util.Collection)var48, "org.jsecurity.authz.UnauthorizedException: org.jsecurity.session.ExpiredSessionException: ");
    org.jsecurity.session.UnknownSessionException var56 = new org.jsecurity.session.UnknownSessionException("dd\uFFFD", (java.io.Serializable)100.0f);
    org.jsecurity.session.SessionException var58 = new org.jsecurity.session.SessionException("dd\uFFFD", (java.lang.Throwable)var56, (java.io.Serializable)0);
    org.jsecurity.session.SessionException var59 = new org.jsecurity.session.SessionException("dd\uFFFD", (java.lang.Throwable)var56);
    var51.add((java.lang.Object)var59, "org.jsecurity.config.ConfigurationException: dd\uFFFD");
    var44.onLogout((org.jsecurity.subject.PrincipalCollection)var51);
    java.util.Collection var64 = var51.fromRealm("\u0000\u0000\u0000");
    var43.onLogout((org.jsecurity.subject.PrincipalCollection)var51);
    org.jsecurity.authz.aop.RoleAnnotationMethodInterceptor var66 = new org.jsecurity.authz.aop.RoleAnnotationMethodInterceptor();
    org.jsecurity.aop.AnnotationHandler var67 = var66.getHandler();
    java.lang.Class var68 = var67.getAnnotationClass();
    java.util.Collection var69 = var51.byType(var68);
    java.io.InputStream var71 = org.jsecurity.util.ClassUtils.getResourceAsStream("");
    java.lang.Object[] var72 = new java.lang.Object[] { var71};
    java.util.List var73 = org.jsecurity.util.CollectionUtils.asList(var72);
    org.jsecurity.authc.pam.ModularRealmAuthenticator var74 = new org.jsecurity.authc.pam.ModularRealmAuthenticator(var73);
    org.jsecurity.subject.SimplePrincipalCollection var76 = new org.jsecurity.subject.SimplePrincipalCollection((java.util.Collection)var73, "org.jsecurity.authz.UnauthorizedException: org.jsecurity.session.ExpiredSessionException: ");
    java.util.List var77 = var76.asList();
    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      boolean[] var78 = var42.isPermitted((org.jsecurity.subject.PrincipalCollection)var51, var77);
      fail("Expected exception of type java.lang.ClassCastException");
    } catch (java.lang.ClassCastException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var9);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var10);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var12);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var13);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var14);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var22);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var23);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var26);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var27);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var28);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var39 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var41);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var46);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var47);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var48);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var64);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var67);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var68);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var69);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var71);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var72);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var73);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var77);

  }

  public void test458() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest2.test458");


    org.jsecurity.realm.activedirectory.ActiveDirectoryRealm var0 = new org.jsecurity.realm.activedirectory.ActiveDirectoryRealm();
    org.jsecurity.authc.credential.Sha256CredentialsMatcher var1 = new org.jsecurity.authc.credential.Sha256CredentialsMatcher();
    var0.setCredentialsMatcher((org.jsecurity.authc.credential.CredentialsMatcher)var1);
    java.lang.String var3 = var0.getAuthorizationCacheName();
    var0.setUrl("hi!");
    org.jsecurity.realm.ldap.DefaultLdapContextFactory var6 = new org.jsecurity.realm.ldap.DefaultLdapContextFactory();
    var0.setLdapContextFactory((org.jsecurity.realm.ldap.LdapContextFactory)var6);
    org.jsecurity.config.ReflectionBuilder var8 = new org.jsecurity.config.ReflectionBuilder();
    org.jsecurity.io.IniResource var9 = new org.jsecurity.io.IniResource();
    var9.setCharsetName("org.jsecurity.authz.UnauthorizedException: org.jsecurity.session.ExpiredSessionException: ");
    java.util.Map var12 = var9.getSections();
    java.util.Map var13 = var8.buildObjects(var12);
    org.jsecurity.config.ReflectionBuilder var14 = new org.jsecurity.config.ReflectionBuilder();
    org.jsecurity.io.IniResource var15 = new org.jsecurity.io.IniResource();
    var15.setCharsetName("org.jsecurity.authz.UnauthorizedException: org.jsecurity.session.ExpiredSessionException: ");
    java.util.Map var18 = var15.getSections();
    java.util.Map var19 = var14.buildObjects(var18);
    java.util.Map var20 = var8.buildObjects(var19);
    java.util.Map var21 = var8.getObjects();
    var6.setAdditionalEnvironment(var21);
    org.jsecurity.config.ReflectionBuilder var23 = new org.jsecurity.config.ReflectionBuilder();
    org.jsecurity.io.IniResource var24 = new org.jsecurity.io.IniResource();
    java.util.Map var25 = var24.getSections();
    var23.setObjects(var25);
    org.jsecurity.realm.activedirectory.ActiveDirectoryRealm var27 = new org.jsecurity.realm.activedirectory.ActiveDirectoryRealm();
    var27.init();
    var27.init();
    org.jsecurity.config.ReflectionBuilder var30 = new org.jsecurity.config.ReflectionBuilder();
    org.jsecurity.config.ReflectionBuilder var31 = new org.jsecurity.config.ReflectionBuilder();
    org.jsecurity.io.IniResource var32 = new org.jsecurity.io.IniResource();
    var32.setCharsetName("org.jsecurity.authz.UnauthorizedException: org.jsecurity.session.ExpiredSessionException: ");
    java.util.Map var35 = var32.getSections();
    java.util.Map var36 = var31.buildObjects(var35);
    org.jsecurity.config.ReflectionBuilder var37 = new org.jsecurity.config.ReflectionBuilder();
    org.jsecurity.io.IniResource var38 = new org.jsecurity.io.IniResource();
    var38.setCharsetName("org.jsecurity.authz.UnauthorizedException: org.jsecurity.session.ExpiredSessionException: ");
    java.util.Map var41 = var38.getSections();
    java.util.Map var42 = var37.buildObjects(var41);
    java.util.Map var43 = var31.buildObjects(var42);
    java.util.Map var44 = var30.buildObjects(var43);
    var27.setGroupRolesMap(var44);
    var23.setObjects(var44);
    org.jsecurity.config.ReflectionBuilder var47 = new org.jsecurity.config.ReflectionBuilder(var44);
    var6.setAdditionalEnvironment(var44);
    var6.setUsePooling(true);
    var6.setPrincipalSuffix("4fc395ae-93c6-49c9-bcae-d836884b53a9");
    var6.setReferral("944eaa9e-a16a-40cf-bdfa-a6f7f9bf6e53");
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var3);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var12);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var13);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var18);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var19);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var20);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var21);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var25);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var35);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var36);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var41);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var42);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var43);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var44);

  }

  public void test459() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest2.test459");


    char[] var4 = new char[] { };
    org.jsecurity.authc.UsernamePasswordToken var6 = new org.jsecurity.authc.UsernamePasswordToken("hi!", var4, true);
    org.jsecurity.mgt.DefaultSecurityManager var8 = new org.jsecurity.mgt.DefaultSecurityManager();
    java.io.InputStream var10 = org.jsecurity.util.ClassUtils.getResourceAsStream("");
    java.lang.Object[] var11 = new java.lang.Object[] { var10};
    java.util.List var12 = org.jsecurity.util.CollectionUtils.asList(var11);
    org.jsecurity.authc.pam.ModularRealmAuthenticator var13 = new org.jsecurity.authc.pam.ModularRealmAuthenticator(var12);
    org.jsecurity.authc.pam.AllSuccessfulModularAuthenticationStrategy var14 = new org.jsecurity.authc.pam.AllSuccessfulModularAuthenticationStrategy();
    var13.setModularAuthenticationStrategy((org.jsecurity.authc.pam.ModularAuthenticationStrategy)var14);
    org.jsecurity.authz.SimpleAuthorizationInfo var16 = new org.jsecurity.authz.SimpleAuthorizationInfo();
    var16.addStringPermission("hi!");
    java.io.InputStream var20 = org.jsecurity.util.ClassUtils.getResourceAsStream("");
    java.lang.Object[] var21 = new java.lang.Object[] { var20};
    java.util.List var22 = org.jsecurity.util.CollectionUtils.asList(var21);
    var16.addRoles((java.util.Collection)var22);
    var13.setAuthenticationListeners((java.util.Collection)var22);
    var8.setSessionListeners((java.util.Collection)var22);
    org.jsecurity.authc.pam.ModularRealmAuthenticator var26 = new org.jsecurity.authc.pam.ModularRealmAuthenticator();
    org.jsecurity.authz.permission.InvalidPermissionStringException var29 = new org.jsecurity.authz.permission.InvalidPermissionStringException("", "dd\uFFFD");
    org.jsecurity.JSecurityException var31 = new org.jsecurity.JSecurityException("");
    org.jsecurity.authc.SimpleAuthenticationInfo var33 = new org.jsecurity.authc.SimpleAuthenticationInfo((java.lang.Object)var29, (java.lang.Object)"", "org.jsecurity.authz.UnauthorizedException: org.jsecurity.session.ExpiredSessionException: ");
    org.jsecurity.subject.PrincipalCollection var34 = var33.getPrincipals();
    var26.onLogout(var34);
    var8.setAuthenticator((org.jsecurity.authc.Authenticator)var26);
    org.jsecurity.codec.CodecException var39 = new org.jsecurity.codec.CodecException("dd\uFFFD");
    org.jsecurity.authc.ConcurrentAccessException var40 = new org.jsecurity.authc.ConcurrentAccessException("org.jsecurity.authz.UnauthorizedException: org.jsecurity.session.ExpiredSessionException: ", (java.lang.Throwable)var39);
    org.jsecurity.subject.SimplePrincipalCollection var42 = new org.jsecurity.subject.SimplePrincipalCollection((java.lang.Object)var39, "");
    org.jsecurity.authc.pam.FirstSuccessfulAuthenticationStrategy var43 = new org.jsecurity.authc.pam.FirstSuccessfulAuthenticationStrategy();
    org.jsecurity.authz.UnauthorizedException var45 = new org.jsecurity.authz.UnauthorizedException("org.jsecurity.config.ConfigurationException: dd\uFFFD");
    java.lang.Throwable[] var46 = var45.getSuppressed();
    java.util.List var47 = org.jsecurity.util.CollectionUtils.asList((java.lang.Object[])var46);
    org.jsecurity.authc.UsernamePasswordToken var48 = new org.jsecurity.authc.UsernamePasswordToken();
    java.lang.String var49 = var48.getUsername();
    java.net.InetAddress var50 = var48.getInetAddress();
    org.jsecurity.authc.AuthenticationInfo var51 = var43.beforeAllAttempts((java.util.Collection)var47, (org.jsecurity.authc.AuthenticationToken)var48);
    org.jsecurity.session.UnknownSessionException var56 = new org.jsecurity.session.UnknownSessionException("dd\uFFFD", (java.io.Serializable)100.0f);
    org.jsecurity.subject.SubjectException var57 = new org.jsecurity.subject.SubjectException("dd\uFFFD", (java.lang.Throwable)var56);
    org.jsecurity.io.SerializationException var58 = new org.jsecurity.io.SerializationException("", (java.lang.Throwable)var57);
    java.lang.Throwable[] var59 = var57.getSuppressed();
    java.util.Set var60 = org.jsecurity.util.CollectionUtils.asSet((java.lang.Object[])var59);
    org.jsecurity.authc.SimpleAccount var61 = new org.jsecurity.authc.SimpleAccount((org.jsecurity.subject.PrincipalCollection)var42, (java.lang.Object)var47, var60);
    java.io.InputStream var63 = org.jsecurity.util.ClassUtils.getResourceAsStream("");
    java.lang.Object[] var64 = new java.lang.Object[] { var63};
    java.util.List var65 = org.jsecurity.util.CollectionUtils.asList(var64);
    org.jsecurity.authc.pam.ModularRealmAuthenticator var66 = new org.jsecurity.authc.pam.ModularRealmAuthenticator(var65);
    org.jsecurity.subject.SimplePrincipalCollection var68 = new org.jsecurity.subject.SimplePrincipalCollection((java.util.Collection)var65, "org.jsecurity.authz.UnauthorizedException: org.jsecurity.session.ExpiredSessionException: ");
    org.jsecurity.io.ResourceException var72 = new org.jsecurity.io.ResourceException("hi!");
    org.jsecurity.authc.UnknownAccountException var73 = new org.jsecurity.authc.UnknownAccountException((java.lang.Throwable)var72);
    org.jsecurity.session.StoppedSessionException var74 = new org.jsecurity.session.StoppedSessionException("dd\uFFFD", (java.io.Serializable)var72);
    org.jsecurity.session.UnknownSessionException var75 = new org.jsecurity.session.UnknownSessionException("org.jsecurity.authz.UnauthorizedException: org.jsecurity.session.ExpiredSessionException: ", (java.lang.Throwable)var72);
    boolean var76 = var68.equals((java.lang.Object)var72);
    var42.addAll((org.jsecurity.subject.PrincipalCollection)var68);
    org.jsecurity.session.UnknownSessionException var82 = new org.jsecurity.session.UnknownSessionException("dd\uFFFD", (java.io.Serializable)100.0f);
    org.jsecurity.subject.SubjectException var83 = new org.jsecurity.subject.SubjectException("dd\uFFFD", (java.lang.Throwable)var82);
    org.jsecurity.io.SerializationException var84 = new org.jsecurity.io.SerializationException("", (java.lang.Throwable)var83);
    java.lang.Throwable[] var85 = var83.getSuppressed();
    java.util.List var86 = org.jsecurity.util.CollectionUtils.asList((java.lang.Object[])var85);
    boolean var87 = var8.isPermittedAll((org.jsecurity.subject.PrincipalCollection)var42, (java.util.Collection)var86);
    org.jsecurity.subject.DelegatingSubject var88 = new org.jsecurity.subject.DelegatingSubject((org.jsecurity.mgt.SecurityManager)var8);
    boolean var90 = var88.hasRole("org.jsecurity.authc.IncorrectCredentialsException: \u0000\u0000");
    java.net.InetAddress var91 = var88.getInetAddress();
    org.jsecurity.authc.UsernamePasswordToken var92 = new org.jsecurity.authc.UsernamePasswordToken("org.jsecurity.realm.text.PropertiesRealm_983", var4, true, var91);
    org.jsecurity.authc.UsernamePasswordToken var93 = new org.jsecurity.authc.UsernamePasswordToken("AAA=", "org.jsecurity.realm.text.TextConfigurationRealm_389", var91);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var4);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var10);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var11);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var12);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var20);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var21);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var22);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var34);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var46);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var47);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var49);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var50);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var51);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var59);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var60);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var63);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var64);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var65);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var76 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var85);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var86);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var87 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var90 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var91);

  }

  public void test460() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest2.test460");


    java.lang.String var1 = org.jsecurity.util.StringUtils.clean("ff68c978-9c6a-4e92-8f51-9959805afd36");
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var1 + "' != '" + "ff68c978-9c6a-4e92-8f51-9959805afd36"+ "'", var1.equals("ff68c978-9c6a-4e92-8f51-9959805afd36"));

  }

  public void test461() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest2.test461");


    org.jsecurity.mgt.DefaultSecurityManager var0 = new org.jsecurity.mgt.DefaultSecurityManager();
    java.io.InputStream var2 = org.jsecurity.util.ClassUtils.getResourceAsStream("");
    java.lang.Object[] var3 = new java.lang.Object[] { var2};
    java.util.List var4 = org.jsecurity.util.CollectionUtils.asList(var3);
    org.jsecurity.authc.pam.ModularRealmAuthenticator var5 = new org.jsecurity.authc.pam.ModularRealmAuthenticator(var4);
    org.jsecurity.authc.pam.AllSuccessfulModularAuthenticationStrategy var6 = new org.jsecurity.authc.pam.AllSuccessfulModularAuthenticationStrategy();
    var5.setModularAuthenticationStrategy((org.jsecurity.authc.pam.ModularAuthenticationStrategy)var6);
    org.jsecurity.authz.SimpleAuthorizationInfo var8 = new org.jsecurity.authz.SimpleAuthorizationInfo();
    var8.addStringPermission("hi!");
    java.io.InputStream var12 = org.jsecurity.util.ClassUtils.getResourceAsStream("");
    java.lang.Object[] var13 = new java.lang.Object[] { var12};
    java.util.List var14 = org.jsecurity.util.CollectionUtils.asList(var13);
    var8.addRoles((java.util.Collection)var14);
    var5.setAuthenticationListeners((java.util.Collection)var14);
    var0.setSessionListeners((java.util.Collection)var14);
    org.jsecurity.authc.pam.ModularRealmAuthenticator var18 = new org.jsecurity.authc.pam.ModularRealmAuthenticator();
    org.jsecurity.authz.permission.InvalidPermissionStringException var21 = new org.jsecurity.authz.permission.InvalidPermissionStringException("", "dd\uFFFD");
    org.jsecurity.JSecurityException var23 = new org.jsecurity.JSecurityException("");
    org.jsecurity.authc.SimpleAuthenticationInfo var25 = new org.jsecurity.authc.SimpleAuthenticationInfo((java.lang.Object)var21, (java.lang.Object)"", "org.jsecurity.authz.UnauthorizedException: org.jsecurity.session.ExpiredSessionException: ");
    org.jsecurity.subject.PrincipalCollection var26 = var25.getPrincipals();
    var18.onLogout(var26);
    var0.setAuthenticator((org.jsecurity.authc.Authenticator)var18);
    org.jsecurity.codec.CodecException var31 = new org.jsecurity.codec.CodecException("dd\uFFFD");
    org.jsecurity.authc.ConcurrentAccessException var32 = new org.jsecurity.authc.ConcurrentAccessException("org.jsecurity.authz.UnauthorizedException: org.jsecurity.session.ExpiredSessionException: ", (java.lang.Throwable)var31);
    org.jsecurity.subject.SimplePrincipalCollection var34 = new org.jsecurity.subject.SimplePrincipalCollection((java.lang.Object)var31, "");
    org.jsecurity.authc.pam.FirstSuccessfulAuthenticationStrategy var35 = new org.jsecurity.authc.pam.FirstSuccessfulAuthenticationStrategy();
    org.jsecurity.authz.UnauthorizedException var37 = new org.jsecurity.authz.UnauthorizedException("org.jsecurity.config.ConfigurationException: dd\uFFFD");
    java.lang.Throwable[] var38 = var37.getSuppressed();
    java.util.List var39 = org.jsecurity.util.CollectionUtils.asList((java.lang.Object[])var38);
    org.jsecurity.authc.UsernamePasswordToken var40 = new org.jsecurity.authc.UsernamePasswordToken();
    java.lang.String var41 = var40.getUsername();
    java.net.InetAddress var42 = var40.getInetAddress();
    org.jsecurity.authc.AuthenticationInfo var43 = var35.beforeAllAttempts((java.util.Collection)var39, (org.jsecurity.authc.AuthenticationToken)var40);
    org.jsecurity.session.UnknownSessionException var48 = new org.jsecurity.session.UnknownSessionException("dd\uFFFD", (java.io.Serializable)100.0f);
    org.jsecurity.subject.SubjectException var49 = new org.jsecurity.subject.SubjectException("dd\uFFFD", (java.lang.Throwable)var48);
    org.jsecurity.io.SerializationException var50 = new org.jsecurity.io.SerializationException("", (java.lang.Throwable)var49);
    java.lang.Throwable[] var51 = var49.getSuppressed();
    java.util.Set var52 = org.jsecurity.util.CollectionUtils.asSet((java.lang.Object[])var51);
    org.jsecurity.authc.SimpleAccount var53 = new org.jsecurity.authc.SimpleAccount((org.jsecurity.subject.PrincipalCollection)var34, (java.lang.Object)var39, var52);
    java.io.InputStream var55 = org.jsecurity.util.ClassUtils.getResourceAsStream("");
    java.lang.Object[] var56 = new java.lang.Object[] { var55};
    java.util.List var57 = org.jsecurity.util.CollectionUtils.asList(var56);
    org.jsecurity.authc.pam.ModularRealmAuthenticator var58 = new org.jsecurity.authc.pam.ModularRealmAuthenticator(var57);
    org.jsecurity.subject.SimplePrincipalCollection var60 = new org.jsecurity.subject.SimplePrincipalCollection((java.util.Collection)var57, "org.jsecurity.authz.UnauthorizedException: org.jsecurity.session.ExpiredSessionException: ");
    org.jsecurity.io.ResourceException var64 = new org.jsecurity.io.ResourceException("hi!");
    org.jsecurity.authc.UnknownAccountException var65 = new org.jsecurity.authc.UnknownAccountException((java.lang.Throwable)var64);
    org.jsecurity.session.StoppedSessionException var66 = new org.jsecurity.session.StoppedSessionException("dd\uFFFD", (java.io.Serializable)var64);
    org.jsecurity.session.UnknownSessionException var67 = new org.jsecurity.session.UnknownSessionException("org.jsecurity.authz.UnauthorizedException: org.jsecurity.session.ExpiredSessionException: ", (java.lang.Throwable)var64);
    boolean var68 = var60.equals((java.lang.Object)var64);
    var34.addAll((org.jsecurity.subject.PrincipalCollection)var60);
    org.jsecurity.session.UnknownSessionException var74 = new org.jsecurity.session.UnknownSessionException("dd\uFFFD", (java.io.Serializable)100.0f);
    org.jsecurity.subject.SubjectException var75 = new org.jsecurity.subject.SubjectException("dd\uFFFD", (java.lang.Throwable)var74);
    org.jsecurity.io.SerializationException var76 = new org.jsecurity.io.SerializationException("", (java.lang.Throwable)var75);
    java.lang.Throwable[] var77 = var75.getSuppressed();
    java.util.List var78 = org.jsecurity.util.CollectionUtils.asList((java.lang.Object[])var77);
    boolean var79 = var0.isPermittedAll((org.jsecurity.subject.PrincipalCollection)var34, (java.util.Collection)var78);
    org.jsecurity.subject.DelegatingSubject var80 = new org.jsecurity.subject.DelegatingSubject((org.jsecurity.mgt.SecurityManager)var0);
    boolean var82 = var80.hasRole("org.jsecurity.authc.IncorrectCredentialsException: \u0000\u0000");
    org.jsecurity.authz.SimpleAuthorizationInfo var84 = new org.jsecurity.authz.SimpleAuthorizationInfo();
    org.jsecurity.session.UnknownSessionException var89 = new org.jsecurity.session.UnknownSessionException("dd\uFFFD", (java.io.Serializable)100.0f);
    org.jsecurity.subject.SubjectException var90 = new org.jsecurity.subject.SubjectException("dd\uFFFD", (java.lang.Throwable)var89);
    org.jsecurity.io.SerializationException var91 = new org.jsecurity.io.SerializationException("", (java.lang.Throwable)var90);
    java.lang.Throwable[] var92 = var90.getSuppressed();
    java.util.Set var93 = org.jsecurity.util.CollectionUtils.asSet((java.lang.Object[])var92);
    var84.setStringPermissions(var93);
    org.jsecurity.authz.SimpleRole var95 = new org.jsecurity.authz.SimpleRole("\u0000\u0000", var93);
    boolean var96 = var80.isPermittedAll((java.util.Collection)var93);
    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      var80.checkRole("e9f887e9-5a0f-4c10-a504-0e788ce2df31");
      fail("Expected exception of type org.jsecurity.authz.UnauthenticatedException");
    } catch (org.jsecurity.authz.UnauthenticatedException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var2);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var3);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var4);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var12);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var13);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var14);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var26);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var38);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var39);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var41);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var42);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var43);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var51);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var52);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var55);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var56);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var57);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var68 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var77);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var78);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var79 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var82 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var92);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var93);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var96 == false);

  }

  public void test462() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest2.test462");


    org.jsecurity.authz.aop.GuestAnnotationHandler var0 = new org.jsecurity.authz.aop.GuestAnnotationHandler();
    java.lang.Class var1 = var0.getAnnotationClass();
    java.lang.Class var2 = var0.getAnnotationClass();
    org.jsecurity.realm.activedirectory.ActiveDirectoryRealm var3 = new org.jsecurity.realm.activedirectory.ActiveDirectoryRealm();
    var3.init();
    var3.setSystemPassword("dd\uFFFD");
    org.jsecurity.authz.aop.GuestAnnotationHandler var7 = new org.jsecurity.authz.aop.GuestAnnotationHandler();
    java.lang.Class var8 = var7.getAnnotationClass();
    var3.setAuthenticationTokenClass(var8);
    java.util.Collection var10 = org.jsecurity.util.CollectionUtils.emptyCollection(var8);
    java.lang.Class[] var11 = new java.lang.Class[] { var8};
    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      java.lang.reflect.Constructor var12 = org.jsecurity.util.ClassUtils.getConstructor(var2, var11);
      fail("Expected exception of type java.lang.IllegalStateException");
    } catch (java.lang.IllegalStateException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var1);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var2);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var8);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var10);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var11);

  }

  public void test463() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest2.test463");


    java.io.InputStream var1 = org.jsecurity.util.ClassUtils.getResourceAsStream("");
    java.lang.Object[] var2 = new java.lang.Object[] { var1};
    java.util.List var3 = org.jsecurity.util.CollectionUtils.asList(var2);
    org.jsecurity.authc.pam.ModularRealmAuthenticator var4 = new org.jsecurity.authc.pam.ModularRealmAuthenticator(var3);
    org.jsecurity.authc.pam.AllSuccessfulModularAuthenticationStrategy var5 = new org.jsecurity.authc.pam.AllSuccessfulModularAuthenticationStrategy();
    var4.setModularAuthenticationStrategy((org.jsecurity.authc.pam.ModularAuthenticationStrategy)var5);
    org.jsecurity.authz.SimpleAuthorizationInfo var7 = new org.jsecurity.authz.SimpleAuthorizationInfo();
    var7.addStringPermission("hi!");
    java.io.InputStream var11 = org.jsecurity.util.ClassUtils.getResourceAsStream("");
    java.lang.Object[] var12 = new java.lang.Object[] { var11};
    java.util.List var13 = org.jsecurity.util.CollectionUtils.asList(var12);
    var7.addRoles((java.util.Collection)var13);
    var4.setAuthenticationListeners((java.util.Collection)var13);
    org.jsecurity.realm.activedirectory.ActiveDirectoryRealm var16 = new org.jsecurity.realm.activedirectory.ActiveDirectoryRealm();
    var16.setPrincipalSuffix("");
    var4.setRealm((org.jsecurity.realm.Realm)var16);
    org.jsecurity.authc.pam.FirstSuccessfulAuthenticationStrategy var20 = new org.jsecurity.authc.pam.FirstSuccessfulAuthenticationStrategy();
    org.jsecurity.authz.UnauthorizedException var22 = new org.jsecurity.authz.UnauthorizedException("org.jsecurity.config.ConfigurationException: dd\uFFFD");
    java.lang.Throwable[] var23 = var22.getSuppressed();
    java.util.List var24 = org.jsecurity.util.CollectionUtils.asList((java.lang.Object[])var23);
    org.jsecurity.authc.UsernamePasswordToken var25 = new org.jsecurity.authc.UsernamePasswordToken();
    java.lang.String var26 = var25.getUsername();
    java.net.InetAddress var27 = var25.getInetAddress();
    org.jsecurity.authc.AuthenticationInfo var28 = var20.beforeAllAttempts((java.util.Collection)var24, (org.jsecurity.authc.AuthenticationToken)var25);
    var4.setModularAuthenticationStrategy((org.jsecurity.authc.pam.ModularAuthenticationStrategy)var20);
    org.jsecurity.realm.activedirectory.ActiveDirectoryRealm var30 = new org.jsecurity.realm.activedirectory.ActiveDirectoryRealm();
    var30.init();
    var30.setSystemPassword("dd\uFFFD");
    var4.setRealm((org.jsecurity.realm.Realm)var30);
    var30.setPrincipalSuffix("6464ff");
    java.io.InputStream var38 = org.jsecurity.util.ClassUtils.getResourceAsStream("");
    java.lang.Object[] var39 = new java.lang.Object[] { var38};
    java.util.List var40 = org.jsecurity.util.CollectionUtils.asList(var39);
    org.jsecurity.authc.pam.ModularRealmAuthenticator var41 = new org.jsecurity.authc.pam.ModularRealmAuthenticator(var40);
    org.jsecurity.subject.SimplePrincipalCollection var43 = new org.jsecurity.subject.SimplePrincipalCollection((java.util.Collection)var40, "org.jsecurity.authz.UnauthorizedException: org.jsecurity.session.ExpiredSessionException: ");
    java.util.List var44 = var43.asList();
    org.jsecurity.realm.activedirectory.ActiveDirectoryRealm var46 = new org.jsecurity.realm.activedirectory.ActiveDirectoryRealm();
    org.jsecurity.authc.credential.Sha256CredentialsMatcher var47 = new org.jsecurity.authc.credential.Sha256CredentialsMatcher();
    var46.setCredentialsMatcher((org.jsecurity.authc.credential.CredentialsMatcher)var47);
    java.lang.String var49 = var46.getAuthorizationCacheName();
    var46.setPrincipalSuffix("org.jsecurity.config.ConfigurationException: dd\uFFFD");
    org.jsecurity.authz.permission.PermissionResolver var52 = var46.getPermissionResolver();
    java.util.Set var53 = org.jsecurity.util.PermissionUtils.resolveDelimitedPermissions("NfxhYN7ItBfRAmDBmprtU73ghfEEPpcDJrHPkZ06wiY=", var52);
    var43.addAll((java.util.Collection)var53, "cff098b5-6d79-4f6d-93d3-148185d0b987");
    org.jsecurity.authz.aop.GuestAnnotationHandler var56 = new org.jsecurity.authz.aop.GuestAnnotationHandler();
    java.lang.Class var57 = var56.getAnnotationClass();
    java.lang.Object var58 = var43.oneByType(var57);
    var30.setAuthenticationTokenClass(var57);
    var30.setSearchBase("org.jsecurity.authc.UsernamePasswordToken - \u0000\u0000, rememberMe=false");
    org.jsecurity.realm.text.TextConfigurationRealm var62 = new org.jsecurity.realm.text.TextConfigurationRealm();
    org.jsecurity.realm.text.TextConfigurationRealm var63 = new org.jsecurity.realm.text.TextConfigurationRealm();
    java.io.InputStream var65 = org.jsecurity.util.ClassUtils.getResourceAsStream("");
    java.lang.Object[] var66 = new java.lang.Object[] { var65};
    java.util.List var67 = org.jsecurity.util.CollectionUtils.asList(var66);
    org.jsecurity.authc.pam.ModularRealmAuthenticator var68 = new org.jsecurity.authc.pam.ModularRealmAuthenticator(var67);
    org.jsecurity.subject.SimplePrincipalCollection var70 = new org.jsecurity.subject.SimplePrincipalCollection((java.util.Collection)var67, "org.jsecurity.authz.UnauthorizedException: org.jsecurity.session.ExpiredSessionException: ");
    org.jsecurity.session.UnknownSessionException var75 = new org.jsecurity.session.UnknownSessionException("dd\uFFFD", (java.io.Serializable)100.0f);
    org.jsecurity.session.SessionException var77 = new org.jsecurity.session.SessionException("dd\uFFFD", (java.lang.Throwable)var75, (java.io.Serializable)0);
    org.jsecurity.session.SessionException var78 = new org.jsecurity.session.SessionException("dd\uFFFD", (java.lang.Throwable)var75);
    var70.add((java.lang.Object)var78, "org.jsecurity.config.ConfigurationException: dd\uFFFD");
    var63.onLogout((org.jsecurity.subject.PrincipalCollection)var70);
    java.util.Collection var83 = var70.fromRealm("\u0000\u0000\u0000");
    var62.onLogout((org.jsecurity.subject.PrincipalCollection)var70);
    org.jsecurity.authz.aop.RoleAnnotationMethodInterceptor var85 = new org.jsecurity.authz.aop.RoleAnnotationMethodInterceptor();
    org.jsecurity.aop.AnnotationHandler var86 = var85.getHandler();
    java.lang.Class var87 = var86.getAnnotationClass();
    java.util.Collection var88 = var70.byType(var87);
    var30.setAuthenticationTokenClass(var87);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var1);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var2);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var3);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var11);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var12);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var13);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var23);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var24);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var26);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var27);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var28);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var38);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var39);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var40);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var44);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var49);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var52);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var53);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var57);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var58);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var65);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var66);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var67);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var83);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var86);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var87);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var88);

  }

  public void test464() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest2.test464");


    org.jsecurity.session.mgt.SimpleSession var0 = new org.jsecurity.session.mgt.SimpleSession();
    org.jsecurity.io.SerializationException var3 = new org.jsecurity.io.SerializationException("org.jsecurity.config.ConfigurationException: dd\uFFFD");
    org.jsecurity.authc.AccountException var4 = new org.jsecurity.authc.AccountException("a2b823b1e72eae2b727289df8a00a89df8a0bab6ad8a89c4c5c7a9b62a270000", (java.lang.Throwable)var3);
    var0.setId((java.io.Serializable)"a2b823b1e72eae2b727289df8a00a89df8a0bab6ad8a89c4c5c7a9b62a270000");
    org.jsecurity.config.ReflectionBuilder var6 = new org.jsecurity.config.ReflectionBuilder();
    org.jsecurity.config.ReflectionBuilder var7 = new org.jsecurity.config.ReflectionBuilder();
    org.jsecurity.io.IniResource var8 = new org.jsecurity.io.IniResource();
    var8.setCharsetName("org.jsecurity.authz.UnauthorizedException: org.jsecurity.session.ExpiredSessionException: ");
    java.util.Map var11 = var8.getSections();
    java.util.Map var12 = var7.buildObjects(var11);
    org.jsecurity.config.ReflectionBuilder var13 = new org.jsecurity.config.ReflectionBuilder();
    org.jsecurity.io.IniResource var14 = new org.jsecurity.io.IniResource();
    var14.setCharsetName("org.jsecurity.authz.UnauthorizedException: org.jsecurity.session.ExpiredSessionException: ");
    java.util.Map var17 = var14.getSections();
    java.util.Map var18 = var13.buildObjects(var17);
    java.util.Map var19 = var7.buildObjects(var18);
    java.util.Map var20 = var6.buildObjects(var19);
    var0.setAttributes(var20);
    org.jsecurity.session.mgt.ImmutableProxiedSession var22 = new org.jsecurity.session.mgt.ImmutableProxiedSession((org.jsecurity.session.Session)var0);
    org.jsecurity.session.UnknownSessionException var28 = new org.jsecurity.session.UnknownSessionException("dd\uFFFD", (java.io.Serializable)100.0f);
    org.jsecurity.config.ConfigurationException var29 = new org.jsecurity.config.ConfigurationException("dd\uFFFD", (java.lang.Throwable)var28);
    org.jsecurity.session.ExpiredSessionException var31 = new org.jsecurity.session.ExpiredSessionException("", (java.lang.Throwable)var29, (java.io.Serializable)true);
    org.jsecurity.authc.LockedAccountException var32 = new org.jsecurity.authc.LockedAccountException("", (java.lang.Throwable)var31);
    org.jsecurity.session.SessionException var33 = new org.jsecurity.session.SessionException((java.lang.Throwable)var32);
    org.jsecurity.session.SessionException var34 = new org.jsecurity.session.SessionException((java.lang.Throwable)var32);
    org.jsecurity.session.InvalidSessionException var35 = new org.jsecurity.session.InvalidSessionException((java.lang.Throwable)var32);
    org.jsecurity.session.mgt.eis.MemorySessionDAO var36 = new org.jsecurity.session.mgt.eis.MemorySessionDAO();
    org.jsecurity.cache.Cache var37 = var36.getActiveSessionsCache();
    org.jsecurity.cache.CacheManager var38 = var36.getCacheManager();
    org.jsecurity.cache.HashtableCacheManager var39 = new org.jsecurity.cache.HashtableCacheManager();
    org.jsecurity.cache.Cache var41 = var39.getCache("\u0000\u0000");
    var36.setActiveSessionsCache(var41);
    java.io.InputStream var44 = org.jsecurity.util.ClassUtils.getResourceAsStream("");
    java.lang.Object[] var45 = new java.lang.Object[] { var44};
    java.util.List var46 = org.jsecurity.util.CollectionUtils.asList(var45);
    org.jsecurity.authc.pam.ModularRealmAuthenticator var47 = new org.jsecurity.authc.pam.ModularRealmAuthenticator(var46);
    org.jsecurity.authc.pam.AllSuccessfulModularAuthenticationStrategy var48 = new org.jsecurity.authc.pam.AllSuccessfulModularAuthenticationStrategy();
    var47.setModularAuthenticationStrategy((org.jsecurity.authc.pam.ModularAuthenticationStrategy)var48);
    org.jsecurity.authz.SimpleAuthorizationInfo var50 = new org.jsecurity.authz.SimpleAuthorizationInfo();
    var50.addStringPermission("hi!");
    java.io.InputStream var54 = org.jsecurity.util.ClassUtils.getResourceAsStream("");
    java.lang.Object[] var55 = new java.lang.Object[] { var54};
    java.util.List var56 = org.jsecurity.util.CollectionUtils.asList(var55);
    var50.addRoles((java.util.Collection)var56);
    var47.setAuthenticationListeners((java.util.Collection)var56);
    org.jsecurity.realm.activedirectory.ActiveDirectoryRealm var59 = new org.jsecurity.realm.activedirectory.ActiveDirectoryRealm();
    var59.setPrincipalSuffix("");
    var47.setRealm((org.jsecurity.realm.Realm)var59);
    org.jsecurity.cache.HashtableCacheManager var63 = new org.jsecurity.cache.HashtableCacheManager();
    org.jsecurity.cache.Cache var65 = var63.getCache("\u0000\u0000");
    var59.setAuthorizationCache(var65);
    var36.setActiveSessionsCache(var65);
    org.jsecurity.session.mgt.SimpleSession var68 = new org.jsecurity.session.mgt.SimpleSession();
    java.io.Serializable var69 = var36.create((org.jsecurity.session.Session)var68);
    java.lang.String var70 = var36.getActiveSessionsCacheName();
    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      var22.setAttribute((java.lang.Object)var32, (java.lang.Object)var36);
      fail("Expected exception of type org.jsecurity.session.InvalidSessionException");
    } catch (org.jsecurity.session.InvalidSessionException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var11);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var12);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var17);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var18);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var19);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var20);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var37);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var38);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var41);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var44);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var45);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var46);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var54);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var55);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var56);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var65);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var69 + "' != '" + "a2875332-bb5e-477d-997e-6225cc8b7560"+ "'", var69.equals("a2875332-bb5e-477d-997e-6225cc8b7560"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var70 + "' != '" + "jsecurity-activeSessionCache"+ "'", var70.equals("jsecurity-activeSessionCache"));

  }

  public void test465() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest2.test465");


    org.jsecurity.cache.HashtableCache var1 = new org.jsecurity.cache.HashtableCache("5dd0c65d-1422-49c2-becb-9e8dca619ab3");
    var1.clear();
    org.jsecurity.mgt.DefaultSecurityManager var3 = new org.jsecurity.mgt.DefaultSecurityManager();
    java.io.InputStream var5 = org.jsecurity.util.ClassUtils.getResourceAsStream("");
    java.lang.Object[] var6 = new java.lang.Object[] { var5};
    java.util.List var7 = org.jsecurity.util.CollectionUtils.asList(var6);
    org.jsecurity.authc.pam.ModularRealmAuthenticator var8 = new org.jsecurity.authc.pam.ModularRealmAuthenticator(var7);
    org.jsecurity.authc.pam.AllSuccessfulModularAuthenticationStrategy var9 = new org.jsecurity.authc.pam.AllSuccessfulModularAuthenticationStrategy();
    var8.setModularAuthenticationStrategy((org.jsecurity.authc.pam.ModularAuthenticationStrategy)var9);
    org.jsecurity.authz.SimpleAuthorizationInfo var11 = new org.jsecurity.authz.SimpleAuthorizationInfo();
    var11.addStringPermission("hi!");
    java.io.InputStream var15 = org.jsecurity.util.ClassUtils.getResourceAsStream("");
    java.lang.Object[] var16 = new java.lang.Object[] { var15};
    java.util.List var17 = org.jsecurity.util.CollectionUtils.asList(var16);
    var11.addRoles((java.util.Collection)var17);
    var8.setAuthenticationListeners((java.util.Collection)var17);
    var3.setSessionListeners((java.util.Collection)var17);
    org.jsecurity.realm.text.TextConfigurationRealm var21 = new org.jsecurity.realm.text.TextConfigurationRealm();
    java.io.InputStream var23 = org.jsecurity.util.ClassUtils.getResourceAsStream("");
    java.lang.Object[] var24 = new java.lang.Object[] { var23};
    java.util.List var25 = org.jsecurity.util.CollectionUtils.asList(var24);
    org.jsecurity.authc.pam.ModularRealmAuthenticator var26 = new org.jsecurity.authc.pam.ModularRealmAuthenticator(var25);
    org.jsecurity.subject.SimplePrincipalCollection var28 = new org.jsecurity.subject.SimplePrincipalCollection((java.util.Collection)var25, "org.jsecurity.authz.UnauthorizedException: org.jsecurity.session.ExpiredSessionException: ");
    org.jsecurity.session.UnknownSessionException var33 = new org.jsecurity.session.UnknownSessionException("dd\uFFFD", (java.io.Serializable)100.0f);
    org.jsecurity.session.SessionException var35 = new org.jsecurity.session.SessionException("dd\uFFFD", (java.lang.Throwable)var33, (java.io.Serializable)0);
    org.jsecurity.session.SessionException var36 = new org.jsecurity.session.SessionException("dd\uFFFD", (java.lang.Throwable)var33);
    var28.add((java.lang.Object)var36, "org.jsecurity.config.ConfigurationException: dd\uFFFD");
    var21.onLogout((org.jsecurity.subject.PrincipalCollection)var28);
    org.jsecurity.authc.pam.FirstSuccessfulAuthenticationStrategy var40 = new org.jsecurity.authc.pam.FirstSuccessfulAuthenticationStrategy();
    org.jsecurity.authz.UnauthorizedException var42 = new org.jsecurity.authz.UnauthorizedException("org.jsecurity.config.ConfigurationException: dd\uFFFD");
    java.lang.Throwable[] var43 = var42.getSuppressed();
    java.util.List var44 = org.jsecurity.util.CollectionUtils.asList((java.lang.Object[])var43);
    org.jsecurity.authc.UsernamePasswordToken var45 = new org.jsecurity.authc.UsernamePasswordToken();
    java.lang.String var46 = var45.getUsername();
    java.net.InetAddress var47 = var45.getInetAddress();
    org.jsecurity.authc.AuthenticationInfo var48 = var40.beforeAllAttempts((java.util.Collection)var44, (org.jsecurity.authc.AuthenticationToken)var45);
    boolean[] var49 = var3.hasRoles((org.jsecurity.subject.PrincipalCollection)var28, var44);
    org.jsecurity.session.mgt.SessionManager var50 = var3.getSessionManager();
    var1.remove((java.lang.Object)var3);
    org.jsecurity.cache.CacheManager var52 = var3.getCacheManager();
    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      var3.setRememberMeCipherKeyHex("d5807a18-6407-48b2-9fe3-106a1ef9f432");
      fail("Expected exception of type java.lang.IllegalStateException");
    } catch (java.lang.IllegalStateException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var5);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var6);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var7);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var15);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var16);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var17);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var23);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var24);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var25);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var43);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var44);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var46);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var47);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var48);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var49);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var50);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var52);

  }

  public void test466() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest2.test466");


    org.jsecurity.cache.HashtableCache var1 = new org.jsecurity.cache.HashtableCache("\u0000\u0000\u0000");
    org.jsecurity.realm.text.TextConfigurationRealm var2 = new org.jsecurity.realm.text.TextConfigurationRealm();
    java.io.InputStream var4 = org.jsecurity.util.ClassUtils.getResourceAsStream("");
    java.lang.Object[] var5 = new java.lang.Object[] { var4};
    java.util.List var6 = org.jsecurity.util.CollectionUtils.asList(var5);
    org.jsecurity.authc.pam.ModularRealmAuthenticator var7 = new org.jsecurity.authc.pam.ModularRealmAuthenticator(var6);
    org.jsecurity.subject.SimplePrincipalCollection var9 = new org.jsecurity.subject.SimplePrincipalCollection((java.util.Collection)var6, "org.jsecurity.authz.UnauthorizedException: org.jsecurity.session.ExpiredSessionException: ");
    org.jsecurity.session.UnknownSessionException var14 = new org.jsecurity.session.UnknownSessionException("dd\uFFFD", (java.io.Serializable)100.0f);
    org.jsecurity.session.SessionException var16 = new org.jsecurity.session.SessionException("dd\uFFFD", (java.lang.Throwable)var14, (java.io.Serializable)0);
    org.jsecurity.session.SessionException var17 = new org.jsecurity.session.SessionException("dd\uFFFD", (java.lang.Throwable)var14);
    var9.add((java.lang.Object)var17, "org.jsecurity.config.ConfigurationException: dd\uFFFD");
    var2.onLogout((org.jsecurity.subject.PrincipalCollection)var9);
    org.jsecurity.authc.ExpiredCredentialsException var22 = new org.jsecurity.authc.ExpiredCredentialsException();
    org.jsecurity.session.ExpiredSessionException var23 = new org.jsecurity.session.ExpiredSessionException("", (java.lang.Throwable)var22);
    java.lang.Throwable[] var24 = var23.getSuppressed();
    org.jsecurity.io.ResourceException var25 = new org.jsecurity.io.ResourceException((java.lang.Throwable)var23);
    org.jsecurity.authc.SimpleAuthenticationInfo var26 = new org.jsecurity.authc.SimpleAuthenticationInfo((org.jsecurity.subject.PrincipalCollection)var9, (java.lang.Object)var23);
    org.jsecurity.codec.CodecException var29 = new org.jsecurity.codec.CodecException("dd\uFFFD");
    org.jsecurity.authc.ConcurrentAccessException var30 = new org.jsecurity.authc.ConcurrentAccessException("org.jsecurity.authz.UnauthorizedException: org.jsecurity.session.ExpiredSessionException: ", (java.lang.Throwable)var29);
    org.jsecurity.subject.SimplePrincipalCollection var32 = new org.jsecurity.subject.SimplePrincipalCollection((java.lang.Object)var29, "");
    java.io.InputStream var34 = org.jsecurity.util.ClassUtils.getResourceAsStream("");
    java.lang.Object[] var35 = new java.lang.Object[] { var34};
    java.util.List var36 = org.jsecurity.util.CollectionUtils.asList(var35);
    org.jsecurity.authc.pam.ModularRealmAuthenticator var37 = new org.jsecurity.authc.pam.ModularRealmAuthenticator(var36);
    var32.addAll((java.util.Collection)var36, "\u0000\u0000");
    org.jsecurity.authz.UnauthorizedException var41 = new org.jsecurity.authz.UnauthorizedException();
    org.jsecurity.session.SessionException var43 = new org.jsecurity.session.SessionException("", (java.lang.Throwable)var41, (java.io.Serializable)"org.jsecurity.config.ConfigurationException: dd\uFFFD");
    org.jsecurity.crypto.hash.Sha1Hash var44 = new org.jsecurity.crypto.hash.Sha1Hash((java.lang.Object)"");
    org.jsecurity.session.UnknownSessionException var49 = new org.jsecurity.session.UnknownSessionException("dd\uFFFD", (java.io.Serializable)100.0f);
    org.jsecurity.subject.SubjectException var50 = new org.jsecurity.subject.SubjectException("dd\uFFFD", (java.lang.Throwable)var49);
    org.jsecurity.io.SerializationException var51 = new org.jsecurity.io.SerializationException("", (java.lang.Throwable)var50);
    java.lang.Throwable[] var52 = var50.getSuppressed();
    java.util.Set var53 = org.jsecurity.util.CollectionUtils.asSet((java.lang.Object[])var52);
    org.jsecurity.authz.SimpleAuthorizationInfo var55 = new org.jsecurity.authz.SimpleAuthorizationInfo();
    org.jsecurity.session.UnknownSessionException var60 = new org.jsecurity.session.UnknownSessionException("dd\uFFFD", (java.io.Serializable)100.0f);
    org.jsecurity.subject.SubjectException var61 = new org.jsecurity.subject.SubjectException("dd\uFFFD", (java.lang.Throwable)var60);
    org.jsecurity.io.SerializationException var62 = new org.jsecurity.io.SerializationException("", (java.lang.Throwable)var61);
    java.lang.Throwable[] var63 = var61.getSuppressed();
    java.util.Set var64 = org.jsecurity.util.CollectionUtils.asSet((java.lang.Object[])var63);
    var55.setStringPermissions(var64);
    java.util.Set var66 = var55.getRoles();
    org.jsecurity.authz.SimpleAuthorizationInfo var67 = new org.jsecurity.authz.SimpleAuthorizationInfo();
    var67.addRole("a2b823b1e72eae2b727289df8a00a89df8a0bab6ad8a89c4c5c7a9b62a270000");
    org.jsecurity.session.UnknownSessionException var74 = new org.jsecurity.session.UnknownSessionException("dd\uFFFD", (java.io.Serializable)100.0f);
    org.jsecurity.subject.SubjectException var75 = new org.jsecurity.subject.SubjectException("dd\uFFFD", (java.lang.Throwable)var74);
    org.jsecurity.io.SerializationException var76 = new org.jsecurity.io.SerializationException("", (java.lang.Throwable)var75);
    java.lang.Throwable[] var77 = var75.getSuppressed();
    java.util.Set var78 = org.jsecurity.util.CollectionUtils.asSet((java.lang.Object[])var77);
    var67.addRoles((java.util.Collection)var78);
    var55.setRoles(var78);
    org.jsecurity.authz.SimpleRole var81 = new org.jsecurity.authz.SimpleRole("org.jsecurity.authz.UnauthorizedException: org.jsecurity.session.ExpiredSessionException: ", var78);
    org.jsecurity.authc.SimpleAccount var82 = new org.jsecurity.authc.SimpleAccount((org.jsecurity.subject.PrincipalCollection)var32, (java.lang.Object)"", var53, var78);
    var26.setPrincipals((org.jsecurity.subject.PrincipalCollection)var32);
    java.lang.String[] var87 = org.jsecurity.util.StringUtils.split("dd\uFFFD", '4', 'a');
    var1.put((java.lang.Object)var32, (java.lang.Object)'a');
    var1.clear();
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var4);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var5);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var6);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var24);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var34);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var35);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var36);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var52);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var53);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var63);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var64);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var66);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var77);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var78);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var87);

  }

  public void test467() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest2.test467");


    org.jsecurity.realm.text.TextConfigurationRealm var0 = new org.jsecurity.realm.text.TextConfigurationRealm();
    java.io.InputStream var2 = org.jsecurity.util.ClassUtils.getResourceAsStream("");
    java.lang.Object[] var3 = new java.lang.Object[] { var2};
    java.util.List var4 = org.jsecurity.util.CollectionUtils.asList(var3);
    org.jsecurity.authc.pam.ModularRealmAuthenticator var5 = new org.jsecurity.authc.pam.ModularRealmAuthenticator(var4);
    org.jsecurity.subject.SimplePrincipalCollection var7 = new org.jsecurity.subject.SimplePrincipalCollection((java.util.Collection)var4, "org.jsecurity.authz.UnauthorizedException: org.jsecurity.session.ExpiredSessionException: ");
    org.jsecurity.session.UnknownSessionException var12 = new org.jsecurity.session.UnknownSessionException("dd\uFFFD", (java.io.Serializable)100.0f);
    org.jsecurity.session.SessionException var14 = new org.jsecurity.session.SessionException("dd\uFFFD", (java.lang.Throwable)var12, (java.io.Serializable)0);
    org.jsecurity.session.SessionException var15 = new org.jsecurity.session.SessionException("dd\uFFFD", (java.lang.Throwable)var12);
    var7.add((java.lang.Object)var15, "org.jsecurity.config.ConfigurationException: dd\uFFFD");
    var0.onLogout((org.jsecurity.subject.PrincipalCollection)var7);
    org.jsecurity.cache.HashtableCacheManager var19 = new org.jsecurity.cache.HashtableCacheManager();
    org.jsecurity.cache.Cache var21 = var19.getCache("\u0000\u0000");
    var0.setAuthorizationCache(var21);
    org.jsecurity.codec.CodecException var25 = new org.jsecurity.codec.CodecException("dd\uFFFD");
    org.jsecurity.authc.ConcurrentAccessException var26 = new org.jsecurity.authc.ConcurrentAccessException("org.jsecurity.authz.UnauthorizedException: org.jsecurity.session.ExpiredSessionException: ", (java.lang.Throwable)var25);
    org.jsecurity.subject.SimplePrincipalCollection var28 = new org.jsecurity.subject.SimplePrincipalCollection((java.lang.Object)var25, "");
    var0.onLogout((org.jsecurity.subject.PrincipalCollection)var28);
    var0.setRoleDefinitions("org.jsecurity.config.ConfigurationException: dd\uFFFD");
    java.lang.String var32 = var0.getUserDefinitions();
    var0.afterAuthorizationCacheSet();
    boolean var35 = var0.accountExists("org.jsecurity.realm.text.TextConfigurationRealm_389");
    var0.afterRoleCacheSet();
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var2);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var3);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var4);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var21);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var32);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var35 == false);

  }

  public void test468() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest2.test468");


    org.jsecurity.authz.permission.WildcardPermission var2 = new org.jsecurity.authz.permission.WildcardPermission("AAA=", true);

  }

  public void test469() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest2.test469");


    org.jsecurity.session.UnknownSessionException var6 = new org.jsecurity.session.UnknownSessionException("dd\uFFFD", (java.io.Serializable)100.0f);
    org.jsecurity.subject.SubjectException var7 = new org.jsecurity.subject.SubjectException("dd\uFFFD", (java.lang.Throwable)var6);
    org.jsecurity.authc.pam.UnsupportedTokenException var8 = new org.jsecurity.authc.pam.UnsupportedTokenException("dd\uFFFD", (java.lang.Throwable)var6);
    org.jsecurity.session.StoppedSessionException var9 = new org.jsecurity.session.StoppedSessionException("org.jsecurity.config.ConfigurationException: dd\uFFFD", (java.lang.Throwable)var8);
    org.jsecurity.util.UnknownClassException var10 = new org.jsecurity.util.UnknownClassException((java.lang.Throwable)var8);
    org.jsecurity.codec.CodecException var11 = new org.jsecurity.codec.CodecException("77ddc2f7-9066-46c8-b5f2-b99b8caec0fa", (java.lang.Throwable)var10);

  }

  public void test470() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest2.test470");


    org.jsecurity.session.mgt.DefaultSessionManager var0 = new org.jsecurity.session.mgt.DefaultSessionManager();
    org.jsecurity.mgt.DefaultSecurityManager var1 = new org.jsecurity.mgt.DefaultSecurityManager();
    org.jsecurity.authz.permission.WildcardPermissionResolver var2 = new org.jsecurity.authz.permission.WildcardPermissionResolver();
    var1.setPermissionResolver((org.jsecurity.authz.permission.PermissionResolver)var2);
    org.jsecurity.cache.CacheManager var4 = var1.getCacheManager();
    var0.setCacheManager(var4);
    org.jsecurity.session.mgt.SessionValidationScheduler var6 = var0.getSessionValidationScheduler();
    org.jsecurity.session.mgt.SessionValidationScheduler var7 = var0.getSessionValidationScheduler();
    org.jsecurity.crypto.hash.Md2Hash var9 = org.jsecurity.crypto.hash.Md2Hash.fromBase64String("a2b823b1e72eae2b727289df8a00a89df8a0bab6ad8a89c4c5c7a9b62a270000");
    org.jsecurity.authc.credential.Md2CredentialsMatcher var10 = new org.jsecurity.authc.credential.Md2CredentialsMatcher();
    org.jsecurity.authz.SimpleAuthorizingAccount var12 = new org.jsecurity.authz.SimpleAuthorizingAccount((java.lang.Object)"a2b823b1e72eae2b727289df8a00a89df8a0bab6ad8a89c4c5c7a9b62a270000", (java.lang.Object)var10, "");
    org.jsecurity.authz.SimpleAuthorizationInfo var13 = new org.jsecurity.authz.SimpleAuthorizationInfo();
    java.util.Set var14 = var13.getStringPermissions();
    org.jsecurity.authz.SimpleAuthorizationInfo var16 = new org.jsecurity.authz.SimpleAuthorizationInfo();
    org.jsecurity.session.UnknownSessionException var21 = new org.jsecurity.session.UnknownSessionException("dd\uFFFD", (java.io.Serializable)100.0f);
    org.jsecurity.subject.SubjectException var22 = new org.jsecurity.subject.SubjectException("dd\uFFFD", (java.lang.Throwable)var21);
    org.jsecurity.io.SerializationException var23 = new org.jsecurity.io.SerializationException("", (java.lang.Throwable)var22);
    java.lang.Throwable[] var24 = var22.getSuppressed();
    java.util.Set var25 = org.jsecurity.util.CollectionUtils.asSet((java.lang.Object[])var24);
    var16.setStringPermissions(var25);
    java.util.Set var27 = var16.getRoles();
    org.jsecurity.authz.SimpleAuthorizationInfo var28 = new org.jsecurity.authz.SimpleAuthorizationInfo();
    var28.addRole("a2b823b1e72eae2b727289df8a00a89df8a0bab6ad8a89c4c5c7a9b62a270000");
    org.jsecurity.session.UnknownSessionException var35 = new org.jsecurity.session.UnknownSessionException("dd\uFFFD", (java.io.Serializable)100.0f);
    org.jsecurity.subject.SubjectException var36 = new org.jsecurity.subject.SubjectException("dd\uFFFD", (java.lang.Throwable)var35);
    org.jsecurity.io.SerializationException var37 = new org.jsecurity.io.SerializationException("", (java.lang.Throwable)var36);
    java.lang.Throwable[] var38 = var36.getSuppressed();
    java.util.Set var39 = org.jsecurity.util.CollectionUtils.asSet((java.lang.Object[])var38);
    var28.addRoles((java.util.Collection)var39);
    var16.setRoles(var39);
    org.jsecurity.authz.SimpleRole var42 = new org.jsecurity.authz.SimpleRole("org.jsecurity.authz.UnauthorizedException: org.jsecurity.session.ExpiredSessionException: ", var39);
    var13.addStringPermissions((java.util.Collection)var39);
    boolean var44 = var12.isPermittedAll((java.util.Collection)var39);
    boolean var45 = var12.isCredentialsExpired();
    java.lang.String[] var50 = org.jsecurity.util.StringUtils.tokenizeToStringArray("783ccd31-48a8-42dd-890f-df885a7baaff", "e2100c27-e41d-4c80-964c-90268ef4a856", true, true);
    java.util.Set var51 = org.jsecurity.util.CollectionUtils.asSet((java.lang.Object[])var50);
    var12.addStringPermissions((java.util.Collection)var51);
    org.jsecurity.authz.permission.AllPermission var53 = new org.jsecurity.authz.permission.AllPermission();
    org.jsecurity.authz.SimpleRole var55 = new org.jsecurity.authz.SimpleRole();
    org.jsecurity.authz.permission.WildcardPermission var58 = new org.jsecurity.authz.permission.WildcardPermission("hi!", false);
    boolean var59 = var55.isPermitted((org.jsecurity.authz.Permission)var58);
    org.jsecurity.session.InvalidSessionException var60 = new org.jsecurity.session.InvalidSessionException("org.jsecurity.config.ConfigurationException: dd\uFFFD", (java.io.Serializable)var58);
    org.jsecurity.authz.SimpleRole var61 = new org.jsecurity.authz.SimpleRole();
    org.jsecurity.authz.permission.WildcardPermission var64 = new org.jsecurity.authz.permission.WildcardPermission("hi!", false);
    boolean var65 = var61.isPermitted((org.jsecurity.authz.Permission)var64);
    boolean var66 = var58.implies((org.jsecurity.authz.Permission)var64);
    boolean var67 = var53.implies((org.jsecurity.authz.Permission)var64);
    org.jsecurity.authz.SimpleRole var69 = new org.jsecurity.authz.SimpleRole();
    org.jsecurity.authz.permission.WildcardPermission var72 = new org.jsecurity.authz.permission.WildcardPermission("hi!", false);
    boolean var73 = var69.isPermitted((org.jsecurity.authz.Permission)var72);
    org.jsecurity.session.InvalidSessionException var74 = new org.jsecurity.session.InvalidSessionException("org.jsecurity.config.ConfigurationException: dd\uFFFD", (java.io.Serializable)var72);
    org.jsecurity.authz.SimpleRole var75 = new org.jsecurity.authz.SimpleRole();
    org.jsecurity.authz.permission.WildcardPermission var78 = new org.jsecurity.authz.permission.WildcardPermission("hi!", false);
    boolean var79 = var75.isPermitted((org.jsecurity.authz.Permission)var78);
    boolean var80 = var72.implies((org.jsecurity.authz.Permission)var78);
    boolean var81 = var53.implies((org.jsecurity.authz.Permission)var72);
    org.jsecurity.authz.permission.WildcardPermission var84 = new org.jsecurity.authz.permission.WildcardPermission("6464ff", false);
    boolean var85 = var53.implies((org.jsecurity.authz.Permission)var84);
    boolean var86 = var12.isPermitted((org.jsecurity.authz.Permission)var84);
    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      var0.setTimeout((java.io.Serializable)var12, 100L);
      fail("Expected exception of type org.jsecurity.session.UnknownSessionException");
    } catch (org.jsecurity.session.UnknownSessionException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var4);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var6);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var7);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var9);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var14);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var24);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var25);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var27);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var38);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var39);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var44 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var45 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var50);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var51);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var59 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var65 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var66 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var67 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var73 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var79 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var80 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var81 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var85 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var86 == false);

  }

  public void test471() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest2.test471");


    org.jsecurity.cache.HashtableCache var1 = new org.jsecurity.cache.HashtableCache("\u0000\u0000\u0000");
    org.jsecurity.session.mgt.SimpleSession var2 = new org.jsecurity.session.mgt.SimpleSession();
    var2.touch();
    org.jsecurity.authz.UnauthenticatedException var6 = new org.jsecurity.authz.UnauthenticatedException();
    org.jsecurity.config.UnresolveableReferenceException var7 = new org.jsecurity.config.UnresolveableReferenceException("", (java.lang.Throwable)var6);
    org.jsecurity.cache.CacheException var8 = new org.jsecurity.cache.CacheException("org.jsecurity.config.ConfigurationException: dd\uFFFD", (java.lang.Throwable)var6);
    java.lang.Object var9 = var2.removeAttribute((java.lang.Object)var8);
    org.jsecurity.mgt.DefaultSecurityManager var10 = new org.jsecurity.mgt.DefaultSecurityManager();
    org.jsecurity.authc.pam.AllSuccessfulModularAuthenticationStrategy var11 = new org.jsecurity.authc.pam.AllSuccessfulModularAuthenticationStrategy();
    org.jsecurity.authc.pam.AllSuccessfulModularAuthenticationStrategy var12 = new org.jsecurity.authc.pam.AllSuccessfulModularAuthenticationStrategy();
    char[] var14 = new char[] { };
    org.jsecurity.authc.UsernamePasswordToken var16 = new org.jsecurity.authc.UsernamePasswordToken("hi!", var14, true);
    org.jsecurity.authc.SimpleAccount var17 = new org.jsecurity.authc.SimpleAccount();
    var17.setCredentialsExpired(false);
    boolean var20 = var17.isLocked();
    org.jsecurity.authc.AuthenticationInfo var21 = var12.afterAllAttempts((org.jsecurity.authc.AuthenticationToken)var16, (org.jsecurity.authc.AuthenticationInfo)var17);
    char[] var25 = new char[] { '4', '#'};
    org.jsecurity.authc.UsernamePasswordToken var26 = new org.jsecurity.authc.UsernamePasswordToken("\u0000\u0000", var25);
    org.jsecurity.authc.SimpleAccount var27 = new org.jsecurity.authc.SimpleAccount();
    var27.setCredentialsExpired(false);
    var27.setCredentialsExpired(false);
    boolean var32 = var27.isCredentialsExpired();
    org.jsecurity.authc.AuthenticationInfo var33 = var12.afterAllAttempts((org.jsecurity.authc.AuthenticationToken)var26, (org.jsecurity.authc.AuthenticationInfo)var27);
    org.jsecurity.authz.UnauthenticatedException var37 = new org.jsecurity.authz.UnauthenticatedException();
    org.jsecurity.config.UnresolveableReferenceException var38 = new org.jsecurity.config.UnresolveableReferenceException("", (java.lang.Throwable)var37);
    org.jsecurity.cache.CacheException var39 = new org.jsecurity.cache.CacheException("org.jsecurity.config.ConfigurationException: dd\uFFFD", (java.lang.Throwable)var37);
    org.jsecurity.authc.SimpleAuthenticationInfo var41 = new org.jsecurity.authc.SimpleAuthenticationInfo((java.lang.Object)"org.jsecurity.config.ConfigurationException: dd\uFFFD", (java.lang.Object)var39, "a2b823b1e72eae2b727289df8a00a89df8a0bab6ad8a89c4c5c7a9b62a270000");
    org.jsecurity.subject.PrincipalCollection var42 = var41.getPrincipals();
    org.jsecurity.authc.AuthenticationInfo var43 = var11.afterAllAttempts((org.jsecurity.authc.AuthenticationToken)var26, (org.jsecurity.authc.AuthenticationInfo)var41);
    var10.setModularAuthenticationStrategy((org.jsecurity.authc.pam.ModularAuthenticationStrategy)var11);
    org.jsecurity.subject.RememberMeManager var45 = var10.getRememberMeManager();
    org.jsecurity.authc.pam.ModularRealmAuthenticator var46 = new org.jsecurity.authc.pam.ModularRealmAuthenticator();
    var10.setAuthenticator((org.jsecurity.authc.Authenticator)var46);
    var1.put((java.lang.Object)var2, (java.lang.Object)var46);
    org.jsecurity.realm.text.TextConfigurationRealm var49 = new org.jsecurity.realm.text.TextConfigurationRealm();
    org.jsecurity.realm.text.TextConfigurationRealm var50 = new org.jsecurity.realm.text.TextConfigurationRealm();
    java.io.InputStream var52 = org.jsecurity.util.ClassUtils.getResourceAsStream("");
    java.lang.Object[] var53 = new java.lang.Object[] { var52};
    java.util.List var54 = org.jsecurity.util.CollectionUtils.asList(var53);
    org.jsecurity.authc.pam.ModularRealmAuthenticator var55 = new org.jsecurity.authc.pam.ModularRealmAuthenticator(var54);
    org.jsecurity.subject.SimplePrincipalCollection var57 = new org.jsecurity.subject.SimplePrincipalCollection((java.util.Collection)var54, "org.jsecurity.authz.UnauthorizedException: org.jsecurity.session.ExpiredSessionException: ");
    org.jsecurity.session.UnknownSessionException var62 = new org.jsecurity.session.UnknownSessionException("dd\uFFFD", (java.io.Serializable)100.0f);
    org.jsecurity.session.SessionException var64 = new org.jsecurity.session.SessionException("dd\uFFFD", (java.lang.Throwable)var62, (java.io.Serializable)0);
    org.jsecurity.session.SessionException var65 = new org.jsecurity.session.SessionException("dd\uFFFD", (java.lang.Throwable)var62);
    var57.add((java.lang.Object)var65, "org.jsecurity.config.ConfigurationException: dd\uFFFD");
    var50.onLogout((org.jsecurity.subject.PrincipalCollection)var57);
    java.util.Collection var70 = var57.fromRealm("\u0000\u0000\u0000");
    var49.onLogout((org.jsecurity.subject.PrincipalCollection)var57);
    java.lang.Object var72 = var2.removeAttribute((java.lang.Object)var49);
    var49.initAuthorizationCache();
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var9);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var14);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var20 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var21);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var25);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var32 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var33);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var42);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var43);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var45);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var52);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var53);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var54);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var70);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var72);

  }

  public void test472() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest2.test472");


    byte[] var1 = org.jsecurity.codec.CodecSupport.toBytes("d8d550ee-3a8c-48f0-8061-1d82c827f505");
    boolean var2 = org.jsecurity.codec.Base64.isBase64(var1);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var2 == false);

  }

  public void test473() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest2.test473");


    org.jsecurity.realm.text.TextConfigurationRealm var0 = new org.jsecurity.realm.text.TextConfigurationRealm();
    org.jsecurity.realm.text.TextConfigurationRealm var1 = new org.jsecurity.realm.text.TextConfigurationRealm();
    org.jsecurity.realm.text.TextConfigurationRealm var2 = new org.jsecurity.realm.text.TextConfigurationRealm();
    java.io.InputStream var4 = org.jsecurity.util.ClassUtils.getResourceAsStream("");
    java.lang.Object[] var5 = new java.lang.Object[] { var4};
    java.util.List var6 = org.jsecurity.util.CollectionUtils.asList(var5);
    org.jsecurity.authc.pam.ModularRealmAuthenticator var7 = new org.jsecurity.authc.pam.ModularRealmAuthenticator(var6);
    org.jsecurity.subject.SimplePrincipalCollection var9 = new org.jsecurity.subject.SimplePrincipalCollection((java.util.Collection)var6, "org.jsecurity.authz.UnauthorizedException: org.jsecurity.session.ExpiredSessionException: ");
    org.jsecurity.session.UnknownSessionException var14 = new org.jsecurity.session.UnknownSessionException("dd\uFFFD", (java.io.Serializable)100.0f);
    org.jsecurity.session.SessionException var16 = new org.jsecurity.session.SessionException("dd\uFFFD", (java.lang.Throwable)var14, (java.io.Serializable)0);
    org.jsecurity.session.SessionException var17 = new org.jsecurity.session.SessionException("dd\uFFFD", (java.lang.Throwable)var14);
    var9.add((java.lang.Object)var17, "org.jsecurity.config.ConfigurationException: dd\uFFFD");
    var2.onLogout((org.jsecurity.subject.PrincipalCollection)var9);
    java.util.Collection var22 = var9.fromRealm("\u0000\u0000\u0000");
    var1.onLogout((org.jsecurity.subject.PrincipalCollection)var9);
    java.util.Set var24 = var9.asSet();
    var0.onLogout((org.jsecurity.subject.PrincipalCollection)var9);
    var0.setUserDefinitions("hi!");
    org.jsecurity.cache.HashtableCache var29 = new org.jsecurity.cache.HashtableCache("orgjsecurityauthcCredentialsException783ccd3148a842dd890fdf885a7baafAA==");
    org.jsecurity.realm.text.TextConfigurationRealm var30 = new org.jsecurity.realm.text.TextConfigurationRealm();
    java.io.InputStream var32 = org.jsecurity.util.ClassUtils.getResourceAsStream("");
    java.lang.Object[] var33 = new java.lang.Object[] { var32};
    java.util.List var34 = org.jsecurity.util.CollectionUtils.asList(var33);
    org.jsecurity.authc.pam.ModularRealmAuthenticator var35 = new org.jsecurity.authc.pam.ModularRealmAuthenticator(var34);
    org.jsecurity.subject.SimplePrincipalCollection var37 = new org.jsecurity.subject.SimplePrincipalCollection((java.util.Collection)var34, "org.jsecurity.authz.UnauthorizedException: org.jsecurity.session.ExpiredSessionException: ");
    org.jsecurity.session.UnknownSessionException var42 = new org.jsecurity.session.UnknownSessionException("dd\uFFFD", (java.io.Serializable)100.0f);
    org.jsecurity.session.SessionException var44 = new org.jsecurity.session.SessionException("dd\uFFFD", (java.lang.Throwable)var42, (java.io.Serializable)0);
    org.jsecurity.session.SessionException var45 = new org.jsecurity.session.SessionException("dd\uFFFD", (java.lang.Throwable)var42);
    var37.add((java.lang.Object)var45, "org.jsecurity.config.ConfigurationException: dd\uFFFD");
    var30.onLogout((org.jsecurity.subject.PrincipalCollection)var37);
    var29.remove((java.lang.Object)var37);
    org.jsecurity.subject.SimplePrincipalCollection var50 = new org.jsecurity.subject.SimplePrincipalCollection((org.jsecurity.subject.PrincipalCollection)var37);
    org.jsecurity.crypto.BlowfishCipher var51 = new org.jsecurity.crypto.BlowfishCipher();
    java.security.Key var52 = var51.getKey();
    org.jsecurity.authc.SimpleAccount var53 = new org.jsecurity.authc.SimpleAccount((org.jsecurity.subject.PrincipalCollection)var50, (java.lang.Object)var52);
    java.io.InputStream var55 = org.jsecurity.util.ClassUtils.getResourceAsStream("");
    java.lang.Object[] var56 = new java.lang.Object[] { var55};
    java.util.List var57 = org.jsecurity.util.CollectionUtils.asList(var56);
    org.jsecurity.authc.pam.ModularRealmAuthenticator var58 = new org.jsecurity.authc.pam.ModularRealmAuthenticator(var57);
    org.jsecurity.subject.SimplePrincipalCollection var60 = new org.jsecurity.subject.SimplePrincipalCollection((java.util.Collection)var57, "org.jsecurity.authz.UnauthorizedException: org.jsecurity.session.ExpiredSessionException: ");
    java.util.Set var61 = var60.getRealmNames();
    java.io.InputStream var63 = org.jsecurity.util.ClassUtils.getResourceAsStream("");
    java.lang.Object[] var64 = new java.lang.Object[] { var63};
    java.util.List var65 = org.jsecurity.util.CollectionUtils.asList(var64);
    org.jsecurity.authc.pam.ModularRealmAuthenticator var66 = new org.jsecurity.authc.pam.ModularRealmAuthenticator(var65);
    org.jsecurity.subject.SimplePrincipalCollection var68 = new org.jsecurity.subject.SimplePrincipalCollection((java.util.Collection)var65, "org.jsecurity.authz.UnauthorizedException: org.jsecurity.session.ExpiredSessionException: ");
    org.jsecurity.session.UnknownSessionException var73 = new org.jsecurity.session.UnknownSessionException("dd\uFFFD", (java.io.Serializable)100.0f);
    org.jsecurity.session.SessionException var75 = new org.jsecurity.session.SessionException("dd\uFFFD", (java.lang.Throwable)var73, (java.io.Serializable)0);
    org.jsecurity.session.SessionException var76 = new org.jsecurity.session.SessionException("dd\uFFFD", (java.lang.Throwable)var73);
    var68.add((java.lang.Object)var76, "org.jsecurity.config.ConfigurationException: dd\uFFFD");
    java.util.Set var79 = var68.asSet();
    var60.addAll((java.util.Collection)var79, "6464ff");
    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      boolean var82 = var0.isPermittedAll((org.jsecurity.subject.PrincipalCollection)var50, (java.util.Collection)var79);
      fail("Expected exception of type java.util.NoSuchElementException");
    } catch (java.util.NoSuchElementException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var4);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var5);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var6);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var22);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var24);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var32);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var33);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var34);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var52);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var55);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var56);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var57);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var61);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var63);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var64);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var65);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var79);

  }

  public void test474() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest2.test474");


    org.jsecurity.codec.CodecException var2 = new org.jsecurity.codec.CodecException("dd\uFFFD");
    org.jsecurity.authc.ConcurrentAccessException var3 = new org.jsecurity.authc.ConcurrentAccessException("org.jsecurity.authz.UnauthorizedException: org.jsecurity.session.ExpiredSessionException: ", (java.lang.Throwable)var2);
    org.jsecurity.subject.SimplePrincipalCollection var5 = new org.jsecurity.subject.SimplePrincipalCollection((java.lang.Object)var2, "");
    org.jsecurity.authc.pam.FirstSuccessfulAuthenticationStrategy var6 = new org.jsecurity.authc.pam.FirstSuccessfulAuthenticationStrategy();
    org.jsecurity.authz.UnauthorizedException var8 = new org.jsecurity.authz.UnauthorizedException("org.jsecurity.config.ConfigurationException: dd\uFFFD");
    java.lang.Throwable[] var9 = var8.getSuppressed();
    java.util.List var10 = org.jsecurity.util.CollectionUtils.asList((java.lang.Object[])var9);
    org.jsecurity.authc.UsernamePasswordToken var11 = new org.jsecurity.authc.UsernamePasswordToken();
    java.lang.String var12 = var11.getUsername();
    java.net.InetAddress var13 = var11.getInetAddress();
    org.jsecurity.authc.AuthenticationInfo var14 = var6.beforeAllAttempts((java.util.Collection)var10, (org.jsecurity.authc.AuthenticationToken)var11);
    org.jsecurity.session.UnknownSessionException var19 = new org.jsecurity.session.UnknownSessionException("dd\uFFFD", (java.io.Serializable)100.0f);
    org.jsecurity.subject.SubjectException var20 = new org.jsecurity.subject.SubjectException("dd\uFFFD", (java.lang.Throwable)var19);
    org.jsecurity.io.SerializationException var21 = new org.jsecurity.io.SerializationException("", (java.lang.Throwable)var20);
    java.lang.Throwable[] var22 = var20.getSuppressed();
    java.util.Set var23 = org.jsecurity.util.CollectionUtils.asSet((java.lang.Object[])var22);
    org.jsecurity.authc.SimpleAccount var24 = new org.jsecurity.authc.SimpleAccount((org.jsecurity.subject.PrincipalCollection)var5, (java.lang.Object)var10, var23);
    java.io.InputStream var26 = org.jsecurity.util.ClassUtils.getResourceAsStream("");
    java.lang.Object[] var27 = new java.lang.Object[] { var26};
    java.util.List var28 = org.jsecurity.util.CollectionUtils.asList(var27);
    org.jsecurity.authc.pam.ModularRealmAuthenticator var29 = new org.jsecurity.authc.pam.ModularRealmAuthenticator(var28);
    org.jsecurity.subject.SimplePrincipalCollection var31 = new org.jsecurity.subject.SimplePrincipalCollection((java.util.Collection)var28, "org.jsecurity.authz.UnauthorizedException: org.jsecurity.session.ExpiredSessionException: ");
    org.jsecurity.io.ResourceException var35 = new org.jsecurity.io.ResourceException("hi!");
    org.jsecurity.authc.UnknownAccountException var36 = new org.jsecurity.authc.UnknownAccountException((java.lang.Throwable)var35);
    org.jsecurity.session.StoppedSessionException var37 = new org.jsecurity.session.StoppedSessionException("dd\uFFFD", (java.io.Serializable)var35);
    org.jsecurity.session.UnknownSessionException var38 = new org.jsecurity.session.UnknownSessionException("org.jsecurity.authz.UnauthorizedException: org.jsecurity.session.ExpiredSessionException: ", (java.lang.Throwable)var35);
    boolean var39 = var31.equals((java.lang.Object)var35);
    var5.addAll((org.jsecurity.subject.PrincipalCollection)var31);
    java.util.List var41 = var31.asList();
    org.jsecurity.authz.ModularRealmAuthorizer var42 = new org.jsecurity.authz.ModularRealmAuthorizer((java.util.Collection)var41);
    java.io.InputStream var44 = org.jsecurity.util.ClassUtils.getResourceAsStream("");
    java.lang.Object[] var45 = new java.lang.Object[] { var44};
    java.util.List var46 = org.jsecurity.util.CollectionUtils.asList(var45);
    org.jsecurity.authc.pam.ModularRealmAuthenticator var47 = new org.jsecurity.authc.pam.ModularRealmAuthenticator(var46);
    org.jsecurity.subject.SimplePrincipalCollection var49 = new org.jsecurity.subject.SimplePrincipalCollection((java.util.Collection)var46, "org.jsecurity.authz.UnauthorizedException: org.jsecurity.session.ExpiredSessionException: ");
    java.util.List var50 = var49.asList();
    org.jsecurity.realm.activedirectory.ActiveDirectoryRealm var52 = new org.jsecurity.realm.activedirectory.ActiveDirectoryRealm();
    org.jsecurity.authc.credential.Sha256CredentialsMatcher var53 = new org.jsecurity.authc.credential.Sha256CredentialsMatcher();
    var52.setCredentialsMatcher((org.jsecurity.authc.credential.CredentialsMatcher)var53);
    java.lang.String var55 = var52.getAuthorizationCacheName();
    var52.setPrincipalSuffix("org.jsecurity.config.ConfigurationException: dd\uFFFD");
    org.jsecurity.authz.permission.PermissionResolver var58 = var52.getPermissionResolver();
    java.util.Set var59 = org.jsecurity.util.PermissionUtils.resolveDelimitedPermissions("NfxhYN7ItBfRAmDBmprtU73ghfEEPpcDJrHPkZ06wiY=", var58);
    var49.addAll((java.util.Collection)var59, "cff098b5-6d79-4f6d-93d3-148185d0b987");
    org.jsecurity.authz.aop.GuestAnnotationHandler var62 = new org.jsecurity.authz.aop.GuestAnnotationHandler();
    java.lang.Class var63 = var62.getAnnotationClass();
    java.lang.Object var64 = var49.oneByType(var63);
    java.util.Collection var66 = var49.fromRealm("6f8b35fd-0848-49a4-9560-659760616ad8");
    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      var42.checkPermission((org.jsecurity.subject.PrincipalCollection)var49, "9d388eff-106e-47d9-8180-843fdfd13dce");
      fail("Expected exception of type java.lang.ClassCastException");
    } catch (java.lang.ClassCastException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var9);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var10);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var12);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var13);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var14);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var22);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var23);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var26);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var27);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var28);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var39 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var41);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var44);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var45);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var46);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var50);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var55);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var58);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var59);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var63);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var64);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var66);

  }

  public void test475() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest2.test475");


    org.jsecurity.realm.activedirectory.ActiveDirectoryRealm var0 = new org.jsecurity.realm.activedirectory.ActiveDirectoryRealm();
    org.jsecurity.authc.credential.Sha256CredentialsMatcher var1 = new org.jsecurity.authc.credential.Sha256CredentialsMatcher();
    var0.setCredentialsMatcher((org.jsecurity.authc.credential.CredentialsMatcher)var1);
    org.jsecurity.realm.activedirectory.ActiveDirectoryRealm var3 = new org.jsecurity.realm.activedirectory.ActiveDirectoryRealm();
    org.jsecurity.authc.credential.Sha256CredentialsMatcher var4 = new org.jsecurity.authc.credential.Sha256CredentialsMatcher();
    var3.setCredentialsMatcher((org.jsecurity.authc.credential.CredentialsMatcher)var4);
    java.lang.String var6 = var3.getAuthorizationCacheName();
    var3.setUrl("hi!");
    org.jsecurity.realm.ldap.DefaultLdapContextFactory var9 = new org.jsecurity.realm.ldap.DefaultLdapContextFactory();
    var3.setLdapContextFactory((org.jsecurity.realm.ldap.LdapContextFactory)var9);
    var9.setAuthentication("org.jsecurity.authz.UnauthorizedException: org.jsecurity.session.ExpiredSessionException: ");
    var0.setLdapContextFactory((org.jsecurity.realm.ldap.LdapContextFactory)var9);
    var0.setPrincipalSuffix("783ccd31-48a8-42dd-890f-df885a7baaff");
    org.jsecurity.realm.ldap.DefaultLdapContextFactory var16 = new org.jsecurity.realm.ldap.DefaultLdapContextFactory();
    var16.setSystemUsername("org.jsecurity.authz.UnauthorizedException: org.jsecurity.session.ExpiredSessionException: ");
    var0.setLdapContextFactory((org.jsecurity.realm.ldap.LdapContextFactory)var16);
    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      javax.naming.ldap.LdapContext var20 = var16.getSystemLdapContext();
      fail("Expected exception of type java.lang.IllegalStateException");
    } catch (java.lang.IllegalStateException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var6);

  }

  public void test476() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest2.test476");


    org.jsecurity.authc.AuthenticationException var1 = new org.jsecurity.authc.AuthenticationException("org.jsecurity.realm.text.PropertiesRealm-333-authorization");

  }

  public void test477() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest2.test477");


    org.jsecurity.realm.activedirectory.ActiveDirectoryRealm var0 = new org.jsecurity.realm.activedirectory.ActiveDirectoryRealm();
    var0.init();
    var0.setSystemPassword("dd\uFFFD");
    org.jsecurity.cache.Cache var4 = var0.getAuthorizationCache();
    var0.setSearchBase("a2b823b1e72eae2b727289df8a00a89df8a0bab6ad8a89c4c5c7a9b62a270000");
    org.jsecurity.realm.text.PropertiesRealm var7 = new org.jsecurity.realm.text.PropertiesRealm();
    java.lang.String var8 = var7.getUserDefinitions();
    org.jsecurity.codec.CodecException var11 = new org.jsecurity.codec.CodecException("dd\uFFFD");
    org.jsecurity.authc.ConcurrentAccessException var12 = new org.jsecurity.authc.ConcurrentAccessException("org.jsecurity.authz.UnauthorizedException: org.jsecurity.session.ExpiredSessionException: ", (java.lang.Throwable)var11);
    org.jsecurity.subject.SimplePrincipalCollection var14 = new org.jsecurity.subject.SimplePrincipalCollection((java.lang.Object)var11, "");
    java.io.InputStream var16 = org.jsecurity.util.ClassUtils.getResourceAsStream("");
    java.lang.Object[] var17 = new java.lang.Object[] { var16};
    java.util.List var18 = org.jsecurity.util.CollectionUtils.asList(var17);
    org.jsecurity.authc.pam.ModularRealmAuthenticator var19 = new org.jsecurity.authc.pam.ModularRealmAuthenticator(var18);
    var14.addAll((java.util.Collection)var18, "\u0000\u0000");
    java.io.InputStream var23 = org.jsecurity.util.ClassUtils.getResourceAsStream("");
    java.lang.Object[] var24 = new java.lang.Object[] { var23};
    java.util.List var25 = org.jsecurity.util.CollectionUtils.asList(var24);
    org.jsecurity.authc.pam.ModularRealmAuthenticator var26 = new org.jsecurity.authc.pam.ModularRealmAuthenticator(var25);
    var14.addAll((java.util.Collection)var25, "\u0000\u0000");
    var7.onLogout((org.jsecurity.subject.PrincipalCollection)var14);
    java.util.Set var30 = var14.getRealmNames();
    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      org.jsecurity.authz.AuthorizationInfo var31 = var0.getAuthorizationInfo((org.jsecurity.subject.PrincipalCollection)var14);
      fail("Expected exception of type java.util.NoSuchElementException");
    } catch (java.util.NoSuchElementException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var4);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var8);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var16);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var17);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var18);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var23);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var24);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var25);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var30);

  }

  public void test478() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest2.test478");


    org.jsecurity.crypto.hash.Sha384Hash var1 = org.jsecurity.crypto.hash.Sha384Hash.fromBase64String("org.jsecurity.realm.text.TextConfigurationRealm_819");
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var1);

  }

  public void test479() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest2.test479");


    org.jsecurity.session.mgt.eis.MemorySessionDAO var0 = new org.jsecurity.session.mgt.eis.MemorySessionDAO();
    org.jsecurity.cache.Cache var1 = var0.getActiveSessionsCache();
    org.jsecurity.cache.CacheManager var2 = var0.getCacheManager();
    org.jsecurity.cache.HashtableCacheManager var3 = new org.jsecurity.cache.HashtableCacheManager();
    org.jsecurity.cache.Cache var5 = var3.getCache("\u0000\u0000");
    var0.setActiveSessionsCache(var5);
    java.io.InputStream var8 = org.jsecurity.util.ClassUtils.getResourceAsStream("");
    java.lang.Object[] var9 = new java.lang.Object[] { var8};
    java.util.List var10 = org.jsecurity.util.CollectionUtils.asList(var9);
    org.jsecurity.authc.pam.ModularRealmAuthenticator var11 = new org.jsecurity.authc.pam.ModularRealmAuthenticator(var10);
    org.jsecurity.authc.pam.AllSuccessfulModularAuthenticationStrategy var12 = new org.jsecurity.authc.pam.AllSuccessfulModularAuthenticationStrategy();
    var11.setModularAuthenticationStrategy((org.jsecurity.authc.pam.ModularAuthenticationStrategy)var12);
    org.jsecurity.authz.SimpleAuthorizationInfo var14 = new org.jsecurity.authz.SimpleAuthorizationInfo();
    var14.addStringPermission("hi!");
    java.io.InputStream var18 = org.jsecurity.util.ClassUtils.getResourceAsStream("");
    java.lang.Object[] var19 = new java.lang.Object[] { var18};
    java.util.List var20 = org.jsecurity.util.CollectionUtils.asList(var19);
    var14.addRoles((java.util.Collection)var20);
    var11.setAuthenticationListeners((java.util.Collection)var20);
    org.jsecurity.realm.activedirectory.ActiveDirectoryRealm var23 = new org.jsecurity.realm.activedirectory.ActiveDirectoryRealm();
    var23.setPrincipalSuffix("");
    var11.setRealm((org.jsecurity.realm.Realm)var23);
    org.jsecurity.cache.HashtableCacheManager var27 = new org.jsecurity.cache.HashtableCacheManager();
    org.jsecurity.cache.Cache var29 = var27.getCache("\u0000\u0000");
    var23.setAuthorizationCache(var29);
    var0.setActiveSessionsCache(var29);
    org.jsecurity.session.mgt.SimpleSession var32 = new org.jsecurity.session.mgt.SimpleSession();
    java.io.Serializable var33 = var0.create((org.jsecurity.session.Session)var32);
    org.jsecurity.session.mgt.SimpleSession var34 = new org.jsecurity.session.mgt.SimpleSession();
    var34.touch();
    var34.validate();
    org.jsecurity.session.mgt.SimpleSession var37 = new org.jsecurity.session.mgt.SimpleSession();
    var37.setTimeout((-1L));
    org.jsecurity.session.mgt.SimpleSession var40 = new org.jsecurity.session.mgt.SimpleSession();
    java.util.Date var41 = var40.getLastAccessTime();
    var37.setLastAccessTime(var41);
    org.jsecurity.session.mgt.SimpleSession var43 = new org.jsecurity.session.mgt.SimpleSession();
    java.util.Date var44 = var43.getLastAccessTime();
    var37.setStopTimestamp(var44);
    var34.setLastAccessTime(var44);
    var32.setLastAccessTime(var44);
    org.jsecurity.session.mgt.ImmutableProxiedSession var48 = new org.jsecurity.session.mgt.ImmutableProxiedSession((org.jsecurity.session.Session)var32);
    org.jsecurity.session.ProxiedSession var49 = new org.jsecurity.session.ProxiedSession((org.jsecurity.session.Session)var32);
    java.util.Date var50 = var49.getStartTimestamp();
    var49.touch();
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var1);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var2);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var5);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var8);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var9);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var10);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var18);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var19);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var20);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var29);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var33 + "' != '" + "58508efd-e109-429a-ba1a-9f24939f0d5f"+ "'", var33.equals("58508efd-e109-429a-ba1a-9f24939f0d5f"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var41);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var44);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var50);

  }

  public void test480() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest2.test480");


    java.lang.String var1 = org.jsecurity.util.StringUtils.clean("69d3a52f-a464-4f98-8253-2a105929a356");
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var1 + "' != '" + "69d3a52f-a464-4f98-8253-2a105929a356"+ "'", var1.equals("69d3a52f-a464-4f98-8253-2a105929a356"));

  }

  public void test481() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest2.test481");


    java.util.Set var1 = org.jsecurity.util.PermissionUtils.toPermissionStrings("2e460aa1-7db8-4a99-ad7a-a5b2ab41638e");
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var1);

  }

  public void test482() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest2.test482");


    org.jsecurity.subject.InvalidSubjectException var1 = new org.jsecurity.subject.InvalidSubjectException("1a1fe717-b2f7-4a28-9cfa-6f3955b8b913");

  }

  public void test483() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest2.test483");


    org.jsecurity.realm.jdbc.JdbcRealm var0 = new org.jsecurity.realm.jdbc.JdbcRealm();
    var0.setPermissionsQuery("org.jsecurity.authz.UnauthorizedException: org.jsecurity.session.ExpiredSessionException: ");
    var0.setPermissionsQuery("1f4da124-b55c-4be1-ae95-84c40eba1207");
    var0.setAuthenticationQuery("e9f887e9-5a0f-4c10-a504-0e788ce2df31");

  }

  public void test484() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest2.test484");


    org.jsecurity.mgt.DefaultSecurityManager var0 = new org.jsecurity.mgt.DefaultSecurityManager();
    java.io.InputStream var2 = org.jsecurity.util.ClassUtils.getResourceAsStream("");
    java.lang.Object[] var3 = new java.lang.Object[] { var2};
    java.util.List var4 = org.jsecurity.util.CollectionUtils.asList(var3);
    org.jsecurity.authc.pam.ModularRealmAuthenticator var5 = new org.jsecurity.authc.pam.ModularRealmAuthenticator(var4);
    org.jsecurity.authc.pam.AllSuccessfulModularAuthenticationStrategy var6 = new org.jsecurity.authc.pam.AllSuccessfulModularAuthenticationStrategy();
    var5.setModularAuthenticationStrategy((org.jsecurity.authc.pam.ModularAuthenticationStrategy)var6);
    org.jsecurity.authz.SimpleAuthorizationInfo var8 = new org.jsecurity.authz.SimpleAuthorizationInfo();
    var8.addStringPermission("hi!");
    java.io.InputStream var12 = org.jsecurity.util.ClassUtils.getResourceAsStream("");
    java.lang.Object[] var13 = new java.lang.Object[] { var12};
    java.util.List var14 = org.jsecurity.util.CollectionUtils.asList(var13);
    var8.addRoles((java.util.Collection)var14);
    var5.setAuthenticationListeners((java.util.Collection)var14);
    var0.setSessionListeners((java.util.Collection)var14);
    org.jsecurity.authc.pam.ModularRealmAuthenticator var18 = new org.jsecurity.authc.pam.ModularRealmAuthenticator();
    org.jsecurity.authz.permission.InvalidPermissionStringException var21 = new org.jsecurity.authz.permission.InvalidPermissionStringException("", "dd\uFFFD");
    org.jsecurity.JSecurityException var23 = new org.jsecurity.JSecurityException("");
    org.jsecurity.authc.SimpleAuthenticationInfo var25 = new org.jsecurity.authc.SimpleAuthenticationInfo((java.lang.Object)var21, (java.lang.Object)"", "org.jsecurity.authz.UnauthorizedException: org.jsecurity.session.ExpiredSessionException: ");
    org.jsecurity.subject.PrincipalCollection var26 = var25.getPrincipals();
    var18.onLogout(var26);
    var0.setAuthenticator((org.jsecurity.authc.Authenticator)var18);
    org.jsecurity.cache.CacheManager var29 = var0.getCacheManager();
    org.jsecurity.authz.UnauthenticatedException var33 = new org.jsecurity.authz.UnauthenticatedException();
    org.jsecurity.config.UnresolveableReferenceException var34 = new org.jsecurity.config.UnresolveableReferenceException("", (java.lang.Throwable)var33);
    org.jsecurity.cache.CacheException var35 = new org.jsecurity.cache.CacheException("org.jsecurity.config.ConfigurationException: dd\uFFFD", (java.lang.Throwable)var33);
    org.jsecurity.authc.SimpleAuthenticationInfo var37 = new org.jsecurity.authc.SimpleAuthenticationInfo((java.lang.Object)"org.jsecurity.config.ConfigurationException: dd\uFFFD", (java.lang.Object)var35, "a2b823b1e72eae2b727289df8a00a89df8a0bab6ad8a89c4c5c7a9b62a270000");
    org.jsecurity.subject.PrincipalCollection var38 = var37.getPrincipals();
    org.jsecurity.subject.PrincipalCollection var39 = var37.getPrincipals();
    java.io.InputStream var41 = org.jsecurity.util.ClassUtils.getResourceAsStream("");
    java.lang.Object[] var42 = new java.lang.Object[] { var41};
    java.util.List var43 = org.jsecurity.util.CollectionUtils.asList(var42);
    org.jsecurity.authc.pam.ModularRealmAuthenticator var44 = new org.jsecurity.authc.pam.ModularRealmAuthenticator(var43);
    org.jsecurity.subject.SimplePrincipalCollection var46 = new org.jsecurity.subject.SimplePrincipalCollection((java.util.Collection)var43, "org.jsecurity.authz.UnauthorizedException: org.jsecurity.session.ExpiredSessionException: ");
    org.jsecurity.io.ResourceException var50 = new org.jsecurity.io.ResourceException("hi!");
    org.jsecurity.authc.UnknownAccountException var51 = new org.jsecurity.authc.UnknownAccountException((java.lang.Throwable)var50);
    org.jsecurity.session.StoppedSessionException var52 = new org.jsecurity.session.StoppedSessionException("dd\uFFFD", (java.io.Serializable)var50);
    org.jsecurity.session.UnknownSessionException var53 = new org.jsecurity.session.UnknownSessionException("org.jsecurity.authz.UnauthorizedException: org.jsecurity.session.ExpiredSessionException: ", (java.lang.Throwable)var50);
    boolean var54 = var46.equals((java.lang.Object)var50);
    org.jsecurity.subject.SimplePrincipalCollection var55 = new org.jsecurity.subject.SimplePrincipalCollection((org.jsecurity.subject.PrincipalCollection)var46);
    var37.setPrincipals((org.jsecurity.subject.PrincipalCollection)var55);
    org.jsecurity.realm.text.TextConfigurationRealm var57 = new org.jsecurity.realm.text.TextConfigurationRealm();
    java.io.InputStream var59 = org.jsecurity.util.ClassUtils.getResourceAsStream("");
    java.lang.Object[] var60 = new java.lang.Object[] { var59};
    java.util.List var61 = org.jsecurity.util.CollectionUtils.asList(var60);
    org.jsecurity.authc.pam.ModularRealmAuthenticator var62 = new org.jsecurity.authc.pam.ModularRealmAuthenticator(var61);
    org.jsecurity.subject.SimplePrincipalCollection var64 = new org.jsecurity.subject.SimplePrincipalCollection((java.util.Collection)var61, "org.jsecurity.authz.UnauthorizedException: org.jsecurity.session.ExpiredSessionException: ");
    org.jsecurity.session.UnknownSessionException var69 = new org.jsecurity.session.UnknownSessionException("dd\uFFFD", (java.io.Serializable)100.0f);
    org.jsecurity.session.SessionException var71 = new org.jsecurity.session.SessionException("dd\uFFFD", (java.lang.Throwable)var69, (java.io.Serializable)0);
    org.jsecurity.session.SessionException var72 = new org.jsecurity.session.SessionException("dd\uFFFD", (java.lang.Throwable)var69);
    var64.add((java.lang.Object)var72, "org.jsecurity.config.ConfigurationException: dd\uFFFD");
    var57.onLogout((org.jsecurity.subject.PrincipalCollection)var64);
    org.jsecurity.cache.HashtableCacheManager var76 = new org.jsecurity.cache.HashtableCacheManager();
    org.jsecurity.cache.Cache var78 = var76.getCache("\u0000\u0000");
    var57.setAuthorizationCache(var78);
    java.lang.String[] var84 = org.jsecurity.util.StringUtils.split("org.jsecurity.config.ConfigurationException: dd\uFFFD", '#');
    var57.addAccount("020e4fd5-81c8-4cbc-9bbb-975c45ce39a3", "6464ff", var84);
    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      var0.checkPermissions((org.jsecurity.subject.PrincipalCollection)var55, var84);
      fail("Expected exception of type java.util.NoSuchElementException");
    } catch (java.util.NoSuchElementException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var2);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var3);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var4);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var12);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var13);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var14);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var26);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var29);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var38);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var39);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var41);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var42);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var43);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var54 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var59);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var60);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var61);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var78);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var84);

  }

  public void test485() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest2.test485");


    org.jsecurity.authz.permission.WildcardPermission var2 = new org.jsecurity.authz.permission.WildcardPermission("9089be01-2b8c-4376-a77a-7a690ddbb74e", false);

  }

  public void test486() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest2.test486");


    org.jsecurity.io.IniResource var0 = new org.jsecurity.io.IniResource();
    java.util.Map var1 = var0.getSections();
    java.lang.String var2 = var0.getCharsetName();
    org.jsecurity.config.ReflectionBuilder var3 = new org.jsecurity.config.ReflectionBuilder();
    org.jsecurity.io.IniResource var4 = new org.jsecurity.io.IniResource();
    java.util.Map var5 = var4.getSections();
    var3.setObjects(var5);
    org.jsecurity.io.IniResource var7 = new org.jsecurity.io.IniResource();
    java.util.Map var8 = var7.getSections();
    java.util.Map var9 = var3.buildObjects(var8);
    var0.setSections(var9);
    java.lang.String var11 = var0.getCharsetName();
    java.util.Map var12 = var0.getSections();
    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      var0.load("506595c4-cb43-4717-aa8e-dee65fecaada");
      fail("Expected exception of type org.jsecurity.io.ResourceException");
    } catch (org.jsecurity.io.ResourceException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var1);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var2);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var5);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var8);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var9);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var11);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var12);

  }

  public void test487() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest2.test487");


    org.jsecurity.session.UnknownSessionException var1 = new org.jsecurity.session.UnknownSessionException("org.jsecurity.authc.UsernamePasswordToken - org.jsecurity.config.ConfigurationException: dd\uFFFD, rememberMe=false");

  }

  public void test488() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest2.test488");


    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      byte[] var2 = org.jsecurity.codec.CodecSupport.toBytes("58508efd-e109-429a-ba1a-9f24939f0d5f", "af4b3469-92f9-4bb0-addf-358eefb0cfc9");
      fail("Expected exception of type org.jsecurity.codec.CodecException");
    } catch (org.jsecurity.codec.CodecException e) {
      // Expected exception.
    }

  }

  public void test489() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest2.test489");


    org.jsecurity.mgt.DefaultSecurityManager var0 = new org.jsecurity.mgt.DefaultSecurityManager();
    org.jsecurity.authc.pam.AllSuccessfulModularAuthenticationStrategy var1 = new org.jsecurity.authc.pam.AllSuccessfulModularAuthenticationStrategy();
    org.jsecurity.authc.pam.AllSuccessfulModularAuthenticationStrategy var2 = new org.jsecurity.authc.pam.AllSuccessfulModularAuthenticationStrategy();
    char[] var4 = new char[] { };
    org.jsecurity.authc.UsernamePasswordToken var6 = new org.jsecurity.authc.UsernamePasswordToken("hi!", var4, true);
    org.jsecurity.authc.SimpleAccount var7 = new org.jsecurity.authc.SimpleAccount();
    var7.setCredentialsExpired(false);
    boolean var10 = var7.isLocked();
    org.jsecurity.authc.AuthenticationInfo var11 = var2.afterAllAttempts((org.jsecurity.authc.AuthenticationToken)var6, (org.jsecurity.authc.AuthenticationInfo)var7);
    char[] var15 = new char[] { '4', '#'};
    org.jsecurity.authc.UsernamePasswordToken var16 = new org.jsecurity.authc.UsernamePasswordToken("\u0000\u0000", var15);
    org.jsecurity.authc.SimpleAccount var17 = new org.jsecurity.authc.SimpleAccount();
    var17.setCredentialsExpired(false);
    var17.setCredentialsExpired(false);
    boolean var22 = var17.isCredentialsExpired();
    org.jsecurity.authc.AuthenticationInfo var23 = var2.afterAllAttempts((org.jsecurity.authc.AuthenticationToken)var16, (org.jsecurity.authc.AuthenticationInfo)var17);
    org.jsecurity.authz.UnauthenticatedException var27 = new org.jsecurity.authz.UnauthenticatedException();
    org.jsecurity.config.UnresolveableReferenceException var28 = new org.jsecurity.config.UnresolveableReferenceException("", (java.lang.Throwable)var27);
    org.jsecurity.cache.CacheException var29 = new org.jsecurity.cache.CacheException("org.jsecurity.config.ConfigurationException: dd\uFFFD", (java.lang.Throwable)var27);
    org.jsecurity.authc.SimpleAuthenticationInfo var31 = new org.jsecurity.authc.SimpleAuthenticationInfo((java.lang.Object)"org.jsecurity.config.ConfigurationException: dd\uFFFD", (java.lang.Object)var29, "a2b823b1e72eae2b727289df8a00a89df8a0bab6ad8a89c4c5c7a9b62a270000");
    org.jsecurity.subject.PrincipalCollection var32 = var31.getPrincipals();
    org.jsecurity.authc.AuthenticationInfo var33 = var1.afterAllAttempts((org.jsecurity.authc.AuthenticationToken)var16, (org.jsecurity.authc.AuthenticationInfo)var31);
    var0.setModularAuthenticationStrategy((org.jsecurity.authc.pam.ModularAuthenticationStrategy)var1);
    org.jsecurity.subject.RememberMeManager var35 = var0.getRememberMeManager();
    org.jsecurity.subject.RememberMeManager var36 = var0.getRememberMeManager();
    org.jsecurity.authc.Authenticator var37 = var0.getAuthenticator();
    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      var0.setRememberMeDecryptionCipherKeyHex("0220fc2d-2559-421b-822b-6ed559f96c25");
      fail("Expected exception of type java.lang.IllegalStateException");
    } catch (java.lang.IllegalStateException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var4);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var10 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var11);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var15);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var22 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var23);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var32);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var33);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var35);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var36);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var37);

  }

  public void test490() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest2.test490");


    org.jsecurity.realm.activedirectory.ActiveDirectoryRealm var0 = new org.jsecurity.realm.activedirectory.ActiveDirectoryRealm();
    org.jsecurity.authc.credential.Sha256CredentialsMatcher var1 = new org.jsecurity.authc.credential.Sha256CredentialsMatcher();
    var0.setCredentialsMatcher((org.jsecurity.authc.credential.CredentialsMatcher)var1);
    java.lang.String var3 = var0.getAuthorizationCacheName();
    var0.setPrincipalSuffix("org.jsecurity.config.ConfigurationException: dd\uFFFD");
    org.jsecurity.realm.text.TextConfigurationRealm var6 = new org.jsecurity.realm.text.TextConfigurationRealm();
    java.io.InputStream var8 = org.jsecurity.util.ClassUtils.getResourceAsStream("");
    java.lang.Object[] var9 = new java.lang.Object[] { var8};
    java.util.List var10 = org.jsecurity.util.CollectionUtils.asList(var9);
    org.jsecurity.authc.pam.ModularRealmAuthenticator var11 = new org.jsecurity.authc.pam.ModularRealmAuthenticator(var10);
    org.jsecurity.subject.SimplePrincipalCollection var13 = new org.jsecurity.subject.SimplePrincipalCollection((java.util.Collection)var10, "org.jsecurity.authz.UnauthorizedException: org.jsecurity.session.ExpiredSessionException: ");
    org.jsecurity.session.UnknownSessionException var18 = new org.jsecurity.session.UnknownSessionException("dd\uFFFD", (java.io.Serializable)100.0f);
    org.jsecurity.session.SessionException var20 = new org.jsecurity.session.SessionException("dd\uFFFD", (java.lang.Throwable)var18, (java.io.Serializable)0);
    org.jsecurity.session.SessionException var21 = new org.jsecurity.session.SessionException("dd\uFFFD", (java.lang.Throwable)var18);
    var13.add((java.lang.Object)var21, "org.jsecurity.config.ConfigurationException: dd\uFFFD");
    var6.onLogout((org.jsecurity.subject.PrincipalCollection)var13);
    var0.onLogout((org.jsecurity.subject.PrincipalCollection)var13);
    org.jsecurity.realm.SimpleAccountRealm var27 = new org.jsecurity.realm.SimpleAccountRealm("hi!");
    java.lang.Class var28 = var27.getAuthenticationTokenClass();
    java.util.Collection var29 = org.jsecurity.util.CollectionUtils.emptyCollection(var28);
    java.util.Collection var30 = var13.byType(var28);
    org.jsecurity.authz.ModularRealmAuthorizer var31 = new org.jsecurity.authz.ModularRealmAuthorizer(var30);
    java.io.InputStream var33 = org.jsecurity.util.ClassUtils.getResourceAsStream("");
    java.lang.Object[] var34 = new java.lang.Object[] { var33};
    java.util.List var35 = org.jsecurity.util.CollectionUtils.asList(var34);
    org.jsecurity.authc.pam.ModularRealmAuthenticator var36 = new org.jsecurity.authc.pam.ModularRealmAuthenticator(var35);
    java.io.InputStream var38 = org.jsecurity.util.ClassUtils.getResourceAsStream("");
    java.lang.Object[] var39 = new java.lang.Object[] { var38};
    java.util.List var40 = org.jsecurity.util.CollectionUtils.asList(var39);
    org.jsecurity.authc.pam.ModularRealmAuthenticator var41 = new org.jsecurity.authc.pam.ModularRealmAuthenticator(var40);
    var36.setRealms((java.util.Collection)var40);
    org.jsecurity.subject.SimplePrincipalCollection var44 = new org.jsecurity.subject.SimplePrincipalCollection((java.util.Collection)var40, "org.jsecurity.realm.SimpleAccountRealm-9-authorization");
    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      var31.checkPermission((org.jsecurity.subject.PrincipalCollection)var44, "org.jsecurity.realm.text.TextConfigurationRealm_389");
      fail("Expected exception of type java.lang.IllegalStateException");
    } catch (java.lang.IllegalStateException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var3);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var8);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var9);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var10);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var28);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var29);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var30);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var33);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var34);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var35);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var38);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var39);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var40);

  }

  public void test491() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest2.test491");


    org.jsecurity.mgt.DefaultSecurityManager var0 = new org.jsecurity.mgt.DefaultSecurityManager();
    java.io.InputStream var2 = org.jsecurity.util.ClassUtils.getResourceAsStream("");
    java.lang.Object[] var3 = new java.lang.Object[] { var2};
    java.util.List var4 = org.jsecurity.util.CollectionUtils.asList(var3);
    org.jsecurity.authc.pam.ModularRealmAuthenticator var5 = new org.jsecurity.authc.pam.ModularRealmAuthenticator(var4);
    org.jsecurity.authc.pam.AllSuccessfulModularAuthenticationStrategy var6 = new org.jsecurity.authc.pam.AllSuccessfulModularAuthenticationStrategy();
    var5.setModularAuthenticationStrategy((org.jsecurity.authc.pam.ModularAuthenticationStrategy)var6);
    org.jsecurity.authz.SimpleAuthorizationInfo var8 = new org.jsecurity.authz.SimpleAuthorizationInfo();
    var8.addStringPermission("hi!");
    java.io.InputStream var12 = org.jsecurity.util.ClassUtils.getResourceAsStream("");
    java.lang.Object[] var13 = new java.lang.Object[] { var12};
    java.util.List var14 = org.jsecurity.util.CollectionUtils.asList(var13);
    var8.addRoles((java.util.Collection)var14);
    var5.setAuthenticationListeners((java.util.Collection)var14);
    var0.setSessionListeners((java.util.Collection)var14);
    org.jsecurity.authc.pam.ModularRealmAuthenticator var18 = new org.jsecurity.authc.pam.ModularRealmAuthenticator();
    org.jsecurity.authz.permission.InvalidPermissionStringException var21 = new org.jsecurity.authz.permission.InvalidPermissionStringException("", "dd\uFFFD");
    org.jsecurity.JSecurityException var23 = new org.jsecurity.JSecurityException("");
    org.jsecurity.authc.SimpleAuthenticationInfo var25 = new org.jsecurity.authc.SimpleAuthenticationInfo((java.lang.Object)var21, (java.lang.Object)"", "org.jsecurity.authz.UnauthorizedException: org.jsecurity.session.ExpiredSessionException: ");
    org.jsecurity.subject.PrincipalCollection var26 = var25.getPrincipals();
    var18.onLogout(var26);
    var0.setAuthenticator((org.jsecurity.authc.Authenticator)var18);
    org.jsecurity.codec.CodecException var31 = new org.jsecurity.codec.CodecException("dd\uFFFD");
    org.jsecurity.authc.ConcurrentAccessException var32 = new org.jsecurity.authc.ConcurrentAccessException("org.jsecurity.authz.UnauthorizedException: org.jsecurity.session.ExpiredSessionException: ", (java.lang.Throwable)var31);
    org.jsecurity.subject.SimplePrincipalCollection var34 = new org.jsecurity.subject.SimplePrincipalCollection((java.lang.Object)var31, "");
    org.jsecurity.authc.pam.FirstSuccessfulAuthenticationStrategy var35 = new org.jsecurity.authc.pam.FirstSuccessfulAuthenticationStrategy();
    org.jsecurity.authz.UnauthorizedException var37 = new org.jsecurity.authz.UnauthorizedException("org.jsecurity.config.ConfigurationException: dd\uFFFD");
    java.lang.Throwable[] var38 = var37.getSuppressed();
    java.util.List var39 = org.jsecurity.util.CollectionUtils.asList((java.lang.Object[])var38);
    org.jsecurity.authc.UsernamePasswordToken var40 = new org.jsecurity.authc.UsernamePasswordToken();
    java.lang.String var41 = var40.getUsername();
    java.net.InetAddress var42 = var40.getInetAddress();
    org.jsecurity.authc.AuthenticationInfo var43 = var35.beforeAllAttempts((java.util.Collection)var39, (org.jsecurity.authc.AuthenticationToken)var40);
    org.jsecurity.session.UnknownSessionException var48 = new org.jsecurity.session.UnknownSessionException("dd\uFFFD", (java.io.Serializable)100.0f);
    org.jsecurity.subject.SubjectException var49 = new org.jsecurity.subject.SubjectException("dd\uFFFD", (java.lang.Throwable)var48);
    org.jsecurity.io.SerializationException var50 = new org.jsecurity.io.SerializationException("", (java.lang.Throwable)var49);
    java.lang.Throwable[] var51 = var49.getSuppressed();
    java.util.Set var52 = org.jsecurity.util.CollectionUtils.asSet((java.lang.Object[])var51);
    org.jsecurity.authc.SimpleAccount var53 = new org.jsecurity.authc.SimpleAccount((org.jsecurity.subject.PrincipalCollection)var34, (java.lang.Object)var39, var52);
    java.io.InputStream var55 = org.jsecurity.util.ClassUtils.getResourceAsStream("");
    java.lang.Object[] var56 = new java.lang.Object[] { var55};
    java.util.List var57 = org.jsecurity.util.CollectionUtils.asList(var56);
    org.jsecurity.authc.pam.ModularRealmAuthenticator var58 = new org.jsecurity.authc.pam.ModularRealmAuthenticator(var57);
    org.jsecurity.subject.SimplePrincipalCollection var60 = new org.jsecurity.subject.SimplePrincipalCollection((java.util.Collection)var57, "org.jsecurity.authz.UnauthorizedException: org.jsecurity.session.ExpiredSessionException: ");
    org.jsecurity.io.ResourceException var64 = new org.jsecurity.io.ResourceException("hi!");
    org.jsecurity.authc.UnknownAccountException var65 = new org.jsecurity.authc.UnknownAccountException((java.lang.Throwable)var64);
    org.jsecurity.session.StoppedSessionException var66 = new org.jsecurity.session.StoppedSessionException("dd\uFFFD", (java.io.Serializable)var64);
    org.jsecurity.session.UnknownSessionException var67 = new org.jsecurity.session.UnknownSessionException("org.jsecurity.authz.UnauthorizedException: org.jsecurity.session.ExpiredSessionException: ", (java.lang.Throwable)var64);
    boolean var68 = var60.equals((java.lang.Object)var64);
    var34.addAll((org.jsecurity.subject.PrincipalCollection)var60);
    org.jsecurity.session.UnknownSessionException var74 = new org.jsecurity.session.UnknownSessionException("dd\uFFFD", (java.io.Serializable)100.0f);
    org.jsecurity.subject.SubjectException var75 = new org.jsecurity.subject.SubjectException("dd\uFFFD", (java.lang.Throwable)var74);
    org.jsecurity.io.SerializationException var76 = new org.jsecurity.io.SerializationException("", (java.lang.Throwable)var75);
    java.lang.Throwable[] var77 = var75.getSuppressed();
    java.util.List var78 = org.jsecurity.util.CollectionUtils.asList((java.lang.Object[])var77);
    boolean var79 = var0.isPermittedAll((org.jsecurity.subject.PrincipalCollection)var34, (java.util.Collection)var78);
    org.jsecurity.subject.DelegatingSubject var80 = new org.jsecurity.subject.DelegatingSubject((org.jsecurity.mgt.SecurityManager)var0);
    var80.logout();
    java.lang.String[] var86 = org.jsecurity.util.StringUtils.split("org.jsecurity.config.ConfigurationException: dd\uFFFD", '4', '4', '4');
    boolean[] var87 = var80.isPermitted(var86);
    java.lang.Object var88 = var80.getPrincipal();
    java.net.InetAddress var89 = var80.getInetAddress();
    org.jsecurity.mgt.SecurityManager var90 = var80.getSecurityManager();
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var2);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var3);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var4);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var12);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var13);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var14);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var26);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var38);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var39);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var41);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var42);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var43);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var51);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var52);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var55);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var56);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var57);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var68 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var77);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var78);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var79 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var86);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var87);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var88);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var89);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var90);

  }

  public void test492() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest2.test492");


    org.jsecurity.realm.text.PropertiesRealm var0 = new org.jsecurity.realm.text.PropertiesRealm();
    var0.setRoleDefinitions("5dd0c65d-1422-49c2-becb-9e8dca619ab3");
    java.lang.String var3 = var0.getUserDefinitions();
    var0.setName("e23a02c5-2287-4daa-91c4-8efed2be0f73");
    org.jsecurity.codec.CodecException var8 = new org.jsecurity.codec.CodecException("dd\uFFFD");
    org.jsecurity.authc.ConcurrentAccessException var9 = new org.jsecurity.authc.ConcurrentAccessException("org.jsecurity.authz.UnauthorizedException: org.jsecurity.session.ExpiredSessionException: ", (java.lang.Throwable)var8);
    org.jsecurity.subject.SimplePrincipalCollection var11 = new org.jsecurity.subject.SimplePrincipalCollection((java.lang.Object)var8, "");
    java.io.InputStream var13 = org.jsecurity.util.ClassUtils.getResourceAsStream("");
    java.lang.Object[] var14 = new java.lang.Object[] { var13};
    java.util.List var15 = org.jsecurity.util.CollectionUtils.asList(var14);
    org.jsecurity.authc.pam.ModularRealmAuthenticator var16 = new org.jsecurity.authc.pam.ModularRealmAuthenticator(var15);
    var11.addAll((java.util.Collection)var15, "\u0000\u0000");
    java.io.InputStream var20 = org.jsecurity.util.ClassUtils.getResourceAsStream("");
    java.lang.Object[] var21 = new java.lang.Object[] { var20};
    java.util.List var22 = org.jsecurity.util.CollectionUtils.asList(var21);
    org.jsecurity.authc.pam.ModularRealmAuthenticator var23 = new org.jsecurity.authc.pam.ModularRealmAuthenticator(var22);
    var11.addAll((java.util.Collection)var22, "\u0000\u0000");
    org.jsecurity.realm.SimpleAccountRealm var27 = new org.jsecurity.realm.SimpleAccountRealm("hi!");
    java.lang.Class var28 = var27.getAuthenticationTokenClass();
    java.util.Collection var29 = org.jsecurity.util.CollectionUtils.emptyCollection(var28);
    java.lang.Object var30 = org.jsecurity.util.ClassUtils.newInstance(var28);
    java.util.Collection var31 = var11.byType(var28);
    org.jsecurity.authz.UnauthenticatedException var33 = new org.jsecurity.authz.UnauthenticatedException();
    org.jsecurity.JSecurityException var34 = new org.jsecurity.JSecurityException("\u0000\u0000", (java.lang.Throwable)var33);
    org.jsecurity.authz.SimpleAuthorizingAccount var35 = new org.jsecurity.authz.SimpleAuthorizingAccount((org.jsecurity.subject.PrincipalCollection)var11, (java.lang.Object)var34);
    java.lang.String[] var39 = org.jsecurity.util.StringUtils.split("ZGT/", '#', '#');
    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      boolean[] var40 = var0.isPermitted((org.jsecurity.subject.PrincipalCollection)var11, var39);
      fail("Expected exception of type java.util.NoSuchElementException");
    } catch (java.util.NoSuchElementException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var3);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var13);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var14);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var15);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var20);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var21);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var22);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var28);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var29);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var30);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var31);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var39);

  }

  public void test493() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest2.test493");


    org.jsecurity.authz.SimpleRole var0 = new org.jsecurity.authz.SimpleRole();
    org.jsecurity.authz.SimpleAuthorizationInfo var1 = new org.jsecurity.authz.SimpleAuthorizationInfo();
    var1.addRole("a2b823b1e72eae2b727289df8a00a89df8a0bab6ad8a89c4c5c7a9b62a270000");
    org.jsecurity.session.UnknownSessionException var8 = new org.jsecurity.session.UnknownSessionException("dd\uFFFD", (java.io.Serializable)100.0f);
    org.jsecurity.subject.SubjectException var9 = new org.jsecurity.subject.SubjectException("dd\uFFFD", (java.lang.Throwable)var8);
    org.jsecurity.io.SerializationException var10 = new org.jsecurity.io.SerializationException("", (java.lang.Throwable)var9);
    java.lang.Throwable[] var11 = var9.getSuppressed();
    java.util.Set var12 = org.jsecurity.util.CollectionUtils.asSet((java.lang.Object[])var11);
    var1.addRoles((java.util.Collection)var12);
    var0.addAll((java.util.Collection)var12);
    org.jsecurity.authz.SimpleRole var15 = new org.jsecurity.authz.SimpleRole();
    org.jsecurity.authz.SimpleAuthorizationInfo var16 = new org.jsecurity.authz.SimpleAuthorizationInfo();
    var16.addRole("a2b823b1e72eae2b727289df8a00a89df8a0bab6ad8a89c4c5c7a9b62a270000");
    org.jsecurity.session.UnknownSessionException var23 = new org.jsecurity.session.UnknownSessionException("dd\uFFFD", (java.io.Serializable)100.0f);
    org.jsecurity.subject.SubjectException var24 = new org.jsecurity.subject.SubjectException("dd\uFFFD", (java.lang.Throwable)var23);
    org.jsecurity.io.SerializationException var25 = new org.jsecurity.io.SerializationException("", (java.lang.Throwable)var24);
    java.lang.Throwable[] var26 = var24.getSuppressed();
    java.util.Set var27 = org.jsecurity.util.CollectionUtils.asSet((java.lang.Object[])var26);
    var16.addRoles((java.util.Collection)var27);
    var15.addAll((java.util.Collection)var27);
    java.lang.String var30 = var15.getName();
    org.jsecurity.authz.permission.WildcardPermission var33 = new org.jsecurity.authz.permission.WildcardPermission("hi!", false);
    var15.add((org.jsecurity.authz.Permission)var33);
    var0.add((org.jsecurity.authz.Permission)var33);
    org.jsecurity.authz.SimpleAuthorizationInfo var37 = new org.jsecurity.authz.SimpleAuthorizationInfo();
    var37.addRole("a2b823b1e72eae2b727289df8a00a89df8a0bab6ad8a89c4c5c7a9b62a270000");
    org.jsecurity.session.UnknownSessionException var44 = new org.jsecurity.session.UnknownSessionException("dd\uFFFD", (java.io.Serializable)100.0f);
    org.jsecurity.subject.SubjectException var45 = new org.jsecurity.subject.SubjectException("dd\uFFFD", (java.lang.Throwable)var44);
    org.jsecurity.io.SerializationException var46 = new org.jsecurity.io.SerializationException("", (java.lang.Throwable)var45);
    java.lang.Throwable[] var47 = var45.getSuppressed();
    java.util.Set var48 = org.jsecurity.util.CollectionUtils.asSet((java.lang.Object[])var47);
    var37.addRoles((java.util.Collection)var48);
    org.jsecurity.authz.SimpleRole var50 = new org.jsecurity.authz.SimpleRole("dd\uFFFD", var48);
    var0.setPermissions(var48);
    org.jsecurity.authz.SimpleAuthorizationInfo var52 = new org.jsecurity.authz.SimpleAuthorizationInfo(var48);
    java.util.Set var53 = var52.getRoles();
    org.jsecurity.realm.text.TextConfigurationRealm var54 = new org.jsecurity.realm.text.TextConfigurationRealm();
    org.jsecurity.realm.text.TextConfigurationRealm var55 = new org.jsecurity.realm.text.TextConfigurationRealm();
    java.io.InputStream var57 = org.jsecurity.util.ClassUtils.getResourceAsStream("");
    java.lang.Object[] var58 = new java.lang.Object[] { var57};
    java.util.List var59 = org.jsecurity.util.CollectionUtils.asList(var58);
    org.jsecurity.authc.pam.ModularRealmAuthenticator var60 = new org.jsecurity.authc.pam.ModularRealmAuthenticator(var59);
    org.jsecurity.subject.SimplePrincipalCollection var62 = new org.jsecurity.subject.SimplePrincipalCollection((java.util.Collection)var59, "org.jsecurity.authz.UnauthorizedException: org.jsecurity.session.ExpiredSessionException: ");
    org.jsecurity.session.UnknownSessionException var67 = new org.jsecurity.session.UnknownSessionException("dd\uFFFD", (java.io.Serializable)100.0f);
    org.jsecurity.session.SessionException var69 = new org.jsecurity.session.SessionException("dd\uFFFD", (java.lang.Throwable)var67, (java.io.Serializable)0);
    org.jsecurity.session.SessionException var70 = new org.jsecurity.session.SessionException("dd\uFFFD", (java.lang.Throwable)var67);
    var62.add((java.lang.Object)var70, "org.jsecurity.config.ConfigurationException: dd\uFFFD");
    var55.onLogout((org.jsecurity.subject.PrincipalCollection)var62);
    java.util.Collection var75 = var62.fromRealm("\u0000\u0000\u0000");
    var54.onLogout((org.jsecurity.subject.PrincipalCollection)var62);
    java.util.Set var77 = var62.asSet();
    var52.setObjectPermissions(var77);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var11);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var12);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var26);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var27);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var30);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var47);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var48);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var53);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var57);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var58);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var59);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var75);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var77);

  }

  public void test494() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest2.test494");


    org.jsecurity.util.AntPathMatcher var0 = new org.jsecurity.util.AntPathMatcher();
    boolean var3 = var0.matchStart("\uFFFD\uFFFD#\uFFFD\uFFFD.\uFFFD+rr\uFFFD\u07CA\u0000\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\u01E9\uFFFD*'\u0000\u0000", "ZGT/");
    var0.setPathSeparator("org.jsecurity.config.ConfigurationException: dd\uFFFD");
    boolean var8 = var0.matchStart("5ebafa0a-d29c-47fa-beb2-9f9ab78ef270", "org.jsecurity.realm.text.TextConfigurationRealm_1105");
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var3 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var8 == false);

  }

  public void test495() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest2.test495");


    org.jsecurity.realm.jdbc.JdbcRealm var0 = new org.jsecurity.realm.jdbc.JdbcRealm();
    var0.setUserRolesQuery("s\uFFFD\uFFFDkG\uFFFD\uFFFD\uFFFD4\uFFFDW\uFFFDi\uFFFD\uFFFDi\uFFFD\u067D\uFFFD{\uFFFD\u001F");
    var0.setAuthenticationQuery("4a0e5e90-249b-4eb3-a134-0b53851d6caf");
    org.jsecurity.codec.CodecException var7 = new org.jsecurity.codec.CodecException("dd\uFFFD");
    org.jsecurity.authc.ConcurrentAccessException var8 = new org.jsecurity.authc.ConcurrentAccessException("org.jsecurity.authz.UnauthorizedException: org.jsecurity.session.ExpiredSessionException: ", (java.lang.Throwable)var7);
    org.jsecurity.subject.SimplePrincipalCollection var10 = new org.jsecurity.subject.SimplePrincipalCollection((java.lang.Object)var7, "");
    java.io.InputStream var12 = org.jsecurity.util.ClassUtils.getResourceAsStream("");
    java.lang.Object[] var13 = new java.lang.Object[] { var12};
    java.util.List var14 = org.jsecurity.util.CollectionUtils.asList(var13);
    org.jsecurity.authc.pam.ModularRealmAuthenticator var15 = new org.jsecurity.authc.pam.ModularRealmAuthenticator(var14);
    var10.addAll((java.util.Collection)var14, "\u0000\u0000");
    java.io.InputStream var19 = org.jsecurity.util.ClassUtils.getResourceAsStream("");
    java.lang.Object[] var20 = new java.lang.Object[] { var19};
    java.util.List var21 = org.jsecurity.util.CollectionUtils.asList(var20);
    org.jsecurity.authc.pam.ModularRealmAuthenticator var22 = new org.jsecurity.authc.pam.ModularRealmAuthenticator(var21);
    var10.addAll((java.util.Collection)var21, "\u0000\u0000");
    org.jsecurity.realm.SimpleAccountRealm var26 = new org.jsecurity.realm.SimpleAccountRealm("hi!");
    java.lang.Class var27 = var26.getAuthenticationTokenClass();
    java.util.Collection var28 = org.jsecurity.util.CollectionUtils.emptyCollection(var27);
    java.lang.Object var29 = org.jsecurity.util.ClassUtils.newInstance(var27);
    java.util.Collection var30 = var10.byType(var27);
    org.jsecurity.authz.SimpleRole var31 = new org.jsecurity.authz.SimpleRole();
    org.jsecurity.authz.SimpleAuthorizationInfo var32 = new org.jsecurity.authz.SimpleAuthorizationInfo();
    var32.addRole("a2b823b1e72eae2b727289df8a00a89df8a0bab6ad8a89c4c5c7a9b62a270000");
    org.jsecurity.session.UnknownSessionException var39 = new org.jsecurity.session.UnknownSessionException("dd\uFFFD", (java.io.Serializable)100.0f);
    org.jsecurity.subject.SubjectException var40 = new org.jsecurity.subject.SubjectException("dd\uFFFD", (java.lang.Throwable)var39);
    org.jsecurity.io.SerializationException var41 = new org.jsecurity.io.SerializationException("", (java.lang.Throwable)var40);
    java.lang.Throwable[] var42 = var40.getSuppressed();
    java.util.Set var43 = org.jsecurity.util.CollectionUtils.asSet((java.lang.Object[])var42);
    var32.addRoles((java.util.Collection)var43);
    var31.addAll((java.util.Collection)var43);
    java.lang.String var46 = var31.getName();
    org.jsecurity.authz.SimpleRole var47 = new org.jsecurity.authz.SimpleRole();
    org.jsecurity.authz.permission.WildcardPermission var50 = new org.jsecurity.authz.permission.WildcardPermission("hi!", false);
    boolean var51 = var47.isPermitted((org.jsecurity.authz.Permission)var50);
    boolean var52 = var31.isPermitted((org.jsecurity.authz.Permission)var50);
    org.jsecurity.authz.permission.WildcardPermission var54 = new org.jsecurity.authz.permission.WildcardPermission("a2b823b1e72eae2b727289df8a00a89df8a0bab6ad8a89c4c5c7a9b62a270000");
    var31.add((org.jsecurity.authz.Permission)var54);
    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      boolean var56 = var0.isPermitted((org.jsecurity.subject.PrincipalCollection)var10, (org.jsecurity.authz.Permission)var54);
      fail("Expected exception of type java.util.NoSuchElementException");
    } catch (java.util.NoSuchElementException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var12);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var13);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var14);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var19);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var20);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var21);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var27);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var28);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var29);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var30);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var42);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var43);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var46);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var51 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var52 == false);

  }

  public void test496() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest2.test496");


    org.jsecurity.util.UnavailableConstructorException var1 = new org.jsecurity.util.UnavailableConstructorException("org.jsecurity.realm.SimpleAccountRealm-384-authorization");

  }

  public void test497() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest2.test497");


    org.jsecurity.realm.jndi.JndiRealmFactory var0 = new org.jsecurity.realm.jndi.JndiRealmFactory();
    java.io.InputStream var2 = org.jsecurity.util.ClassUtils.getResourceAsStream("");
    java.lang.Object[] var3 = new java.lang.Object[] { var2};
    java.util.List var4 = org.jsecurity.util.CollectionUtils.asList(var3);
    var0.setJndiNames((java.util.Collection)var4);
    java.util.Collection var6 = var0.getJndiNames();
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var2);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var3);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var4);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var6);

  }

  public void test498() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest2.test498");


    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      org.jsecurity.crypto.hash.Sha384Hash var1 = org.jsecurity.crypto.hash.Sha384Hash.fromHexString("c88beeba-81c4-4196-82b6-97784ab62fef");
      fail("Expected exception of type java.lang.IllegalArgumentException");
    } catch (java.lang.IllegalArgumentException e) {
      // Expected exception.
    }

  }

  public void test499() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest2.test499");


    org.jsecurity.realm.SimpleAccountRealm var0 = new org.jsecurity.realm.SimpleAccountRealm();
    org.jsecurity.cache.HashtableCache var2 = new org.jsecurity.cache.HashtableCache("\u0000\u0000\u0000");
    var0.setAuthorizationCache((org.jsecurity.cache.Cache)var2);
    java.util.Set var4 = var2.values();
    java.lang.String var5 = var2.toString();
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var4);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var5 + "' != '" + "HashtableCache [\u0000\u0000\u0000]"+ "'", var5.equals("HashtableCache [\u0000\u0000\u0000]"));

  }

  public void test500() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest2.test500");


    org.jsecurity.realm.jndi.JndiRealmFactory var0 = new org.jsecurity.realm.jndi.JndiRealmFactory();
    java.util.Collection var1 = var0.getJndiNames();
    var0.setJndiNames("e8e5d499-33c0-418e-93f9-76a51372c414");
    org.jsecurity.jndi.JndiTemplate var4 = var0.getJndiTemplate();
    org.jsecurity.mgt.DefaultSecurityManager var5 = new org.jsecurity.mgt.DefaultSecurityManager();
    java.io.InputStream var7 = org.jsecurity.util.ClassUtils.getResourceAsStream("");
    java.lang.Object[] var8 = new java.lang.Object[] { var7};
    java.util.List var9 = org.jsecurity.util.CollectionUtils.asList(var8);
    org.jsecurity.authc.pam.ModularRealmAuthenticator var10 = new org.jsecurity.authc.pam.ModularRealmAuthenticator(var9);
    org.jsecurity.authc.pam.AllSuccessfulModularAuthenticationStrategy var11 = new org.jsecurity.authc.pam.AllSuccessfulModularAuthenticationStrategy();
    var10.setModularAuthenticationStrategy((org.jsecurity.authc.pam.ModularAuthenticationStrategy)var11);
    org.jsecurity.authz.SimpleAuthorizationInfo var13 = new org.jsecurity.authz.SimpleAuthorizationInfo();
    var13.addStringPermission("hi!");
    java.io.InputStream var17 = org.jsecurity.util.ClassUtils.getResourceAsStream("");
    java.lang.Object[] var18 = new java.lang.Object[] { var17};
    java.util.List var19 = org.jsecurity.util.CollectionUtils.asList(var18);
    var13.addRoles((java.util.Collection)var19);
    var10.setAuthenticationListeners((java.util.Collection)var19);
    var5.setSessionListeners((java.util.Collection)var19);
    java.util.Collection var23 = var5.getRealms();
    org.jsecurity.codec.CodecException var26 = new org.jsecurity.codec.CodecException("dd\uFFFD");
    org.jsecurity.authc.ConcurrentAccessException var27 = new org.jsecurity.authc.ConcurrentAccessException("org.jsecurity.authz.UnauthorizedException: org.jsecurity.session.ExpiredSessionException: ", (java.lang.Throwable)var26);
    org.jsecurity.subject.SimplePrincipalCollection var29 = new org.jsecurity.subject.SimplePrincipalCollection((java.lang.Object)var26, "");
    java.io.InputStream var31 = org.jsecurity.util.ClassUtils.getResourceAsStream("");
    java.lang.Object[] var32 = new java.lang.Object[] { var31};
    java.util.List var33 = org.jsecurity.util.CollectionUtils.asList(var32);
    org.jsecurity.authc.pam.ModularRealmAuthenticator var34 = new org.jsecurity.authc.pam.ModularRealmAuthenticator(var33);
    var29.addAll((java.util.Collection)var33, "\u0000\u0000");
    org.jsecurity.authz.UnauthorizedException var38 = new org.jsecurity.authz.UnauthorizedException();
    org.jsecurity.session.SessionException var40 = new org.jsecurity.session.SessionException("", (java.lang.Throwable)var38, (java.io.Serializable)"org.jsecurity.config.ConfigurationException: dd\uFFFD");
    org.jsecurity.crypto.hash.Sha1Hash var41 = new org.jsecurity.crypto.hash.Sha1Hash((java.lang.Object)"");
    org.jsecurity.session.UnknownSessionException var46 = new org.jsecurity.session.UnknownSessionException("dd\uFFFD", (java.io.Serializable)100.0f);
    org.jsecurity.subject.SubjectException var47 = new org.jsecurity.subject.SubjectException("dd\uFFFD", (java.lang.Throwable)var46);
    org.jsecurity.io.SerializationException var48 = new org.jsecurity.io.SerializationException("", (java.lang.Throwable)var47);
    java.lang.Throwable[] var49 = var47.getSuppressed();
    java.util.Set var50 = org.jsecurity.util.CollectionUtils.asSet((java.lang.Object[])var49);
    org.jsecurity.authz.SimpleAuthorizationInfo var52 = new org.jsecurity.authz.SimpleAuthorizationInfo();
    org.jsecurity.session.UnknownSessionException var57 = new org.jsecurity.session.UnknownSessionException("dd\uFFFD", (java.io.Serializable)100.0f);
    org.jsecurity.subject.SubjectException var58 = new org.jsecurity.subject.SubjectException("dd\uFFFD", (java.lang.Throwable)var57);
    org.jsecurity.io.SerializationException var59 = new org.jsecurity.io.SerializationException("", (java.lang.Throwable)var58);
    java.lang.Throwable[] var60 = var58.getSuppressed();
    java.util.Set var61 = org.jsecurity.util.CollectionUtils.asSet((java.lang.Object[])var60);
    var52.setStringPermissions(var61);
    java.util.Set var63 = var52.getRoles();
    org.jsecurity.authz.SimpleAuthorizationInfo var64 = new org.jsecurity.authz.SimpleAuthorizationInfo();
    var64.addRole("a2b823b1e72eae2b727289df8a00a89df8a0bab6ad8a89c4c5c7a9b62a270000");
    org.jsecurity.session.UnknownSessionException var71 = new org.jsecurity.session.UnknownSessionException("dd\uFFFD", (java.io.Serializable)100.0f);
    org.jsecurity.subject.SubjectException var72 = new org.jsecurity.subject.SubjectException("dd\uFFFD", (java.lang.Throwable)var71);
    org.jsecurity.io.SerializationException var73 = new org.jsecurity.io.SerializationException("", (java.lang.Throwable)var72);
    java.lang.Throwable[] var74 = var72.getSuppressed();
    java.util.Set var75 = org.jsecurity.util.CollectionUtils.asSet((java.lang.Object[])var74);
    var64.addRoles((java.util.Collection)var75);
    var52.setRoles(var75);
    org.jsecurity.authz.SimpleRole var78 = new org.jsecurity.authz.SimpleRole("org.jsecurity.authz.UnauthorizedException: org.jsecurity.session.ExpiredSessionException: ", var75);
    org.jsecurity.authc.SimpleAccount var79 = new org.jsecurity.authc.SimpleAccount((org.jsecurity.subject.PrincipalCollection)var29, (java.lang.Object)"", var50, var75);
    org.jsecurity.authz.SimpleAuthorizationInfo var80 = new org.jsecurity.authz.SimpleAuthorizationInfo();
    var80.addStringPermission("hi!");
    org.jsecurity.authz.SimpleAuthorizationInfo var84 = new org.jsecurity.authz.SimpleAuthorizationInfo();
    org.jsecurity.session.UnknownSessionException var89 = new org.jsecurity.session.UnknownSessionException("dd\uFFFD", (java.io.Serializable)100.0f);
    org.jsecurity.subject.SubjectException var90 = new org.jsecurity.subject.SubjectException("dd\uFFFD", (java.lang.Throwable)var89);
    org.jsecurity.io.SerializationException var91 = new org.jsecurity.io.SerializationException("", (java.lang.Throwable)var90);
    java.lang.Throwable[] var92 = var90.getSuppressed();
    java.util.Set var93 = org.jsecurity.util.CollectionUtils.asSet((java.lang.Object[])var92);
    var84.setStringPermissions(var93);
    org.jsecurity.authz.SimpleRole var95 = new org.jsecurity.authz.SimpleRole("\u0000\u0000", var93);
    var80.setRoles(var93);
    boolean var97 = var5.isPermittedAll((org.jsecurity.subject.PrincipalCollection)var29, (java.util.Collection)var93);
    var0.setJndiNames((java.util.Collection)var93);
    boolean var99 = var0.isResourceRef();
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var1);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var4);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var7);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var8);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var9);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var17);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var18);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var19);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var23);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var31);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var32);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var33);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var49);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var50);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var60);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var61);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var63);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var74);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var75);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var92);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var93);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var97 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var99 == false);

  }

}
