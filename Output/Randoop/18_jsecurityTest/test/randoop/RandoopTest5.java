package randoop;

import junit.framework.*;

public class RandoopTest5 extends TestCase {

  public static boolean debug = false;

  public void test1() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest5.test1");


    org.jsecurity.realm.activedirectory.ActiveDirectoryRealm var0 = new org.jsecurity.realm.activedirectory.ActiveDirectoryRealm();
    var0.init();
    var0.setSystemPassword("dd\uFFFD");
    org.jsecurity.authc.credential.Sha512CredentialsMatcher var4 = new org.jsecurity.authc.credential.Sha512CredentialsMatcher();
    var0.setCredentialsMatcher((org.jsecurity.authc.credential.CredentialsMatcher)var4);
    var4.setHashSalted(false);
    boolean var8 = var4.isStoredCredentialsHexEncoded();
    var4.setHashSalted(false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var8 == true);

  }

  public void test2() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest5.test2");


    org.jsecurity.session.UnknownSessionException var7 = new org.jsecurity.session.UnknownSessionException("dd\uFFFD", (java.io.Serializable)100.0f);
    org.jsecurity.session.SessionException var9 = new org.jsecurity.session.SessionException("dd\uFFFD", (java.lang.Throwable)var7, (java.io.Serializable)0);
    org.jsecurity.io.SerializationException var10 = new org.jsecurity.io.SerializationException((java.lang.Throwable)var7);
    org.jsecurity.JSecurityException var11 = new org.jsecurity.JSecurityException("a2b823b1e72eae2b727289df8a00a89df8a0bab6ad8a89c4c5c7a9b62a270000", (java.lang.Throwable)var10);
    org.jsecurity.session.SessionException var12 = new org.jsecurity.session.SessionException("org.jsecurity.authc.CredentialsException: 783ccd31-48a8-42dd-890f-df885a7baaff", (java.io.Serializable)var10);
    org.jsecurity.authc.DisabledAccountException var13 = new org.jsecurity.authc.DisabledAccountException("1bda1aac-168a-4284-8541-abc425cc1ca7", (java.lang.Throwable)var12);
    org.jsecurity.authc.IncorrectCredentialsException var14 = new org.jsecurity.authc.IncorrectCredentialsException("HashtableCache [\u0000\u0000\u0000]", (java.lang.Throwable)var12);

  }

  public void test3() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest5.test3");


    org.jsecurity.realm.activedirectory.ActiveDirectoryRealm var0 = new org.jsecurity.realm.activedirectory.ActiveDirectoryRealm();
    org.jsecurity.authc.credential.Sha256CredentialsMatcher var1 = new org.jsecurity.authc.credential.Sha256CredentialsMatcher();
    var0.setCredentialsMatcher((org.jsecurity.authc.credential.CredentialsMatcher)var1);
    java.lang.String var3 = var0.getAuthorizationCacheName();
    var0.setUrl("hi!");
    org.jsecurity.realm.ldap.DefaultLdapContextFactory var6 = new org.jsecurity.realm.ldap.DefaultLdapContextFactory();
    var0.setLdapContextFactory((org.jsecurity.realm.ldap.LdapContextFactory)var6);
    var6.setAuthentication("org.jsecurity.authz.UnauthorizedException: org.jsecurity.session.ExpiredSessionException: ");
    var6.setSystemUsername("org.jsecurity.config.ConfigurationException: dd\uFFFD");
    var6.setSystemPassword("orgjsecurityauthcCredentialsException783ccd3148a842dd890fdf885a7baafAA==");
    var6.setContextFactoryClassName("jsecurity-activeSessionCache");
    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      javax.naming.ldap.LdapContext var16 = var6.getSystemLdapContext();
      fail("Expected exception of type java.lang.IllegalStateException");
    } catch (java.lang.IllegalStateException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var3);

  }

  public void test4() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest5.test4");


    org.jsecurity.realm.text.PropertiesRealm var0 = new org.jsecurity.realm.text.PropertiesRealm();
    var0.setRoleDefinitions("5dd0c65d-1422-49c2-becb-9e8dca619ab3");
    java.lang.String var3 = var0.getUserDefinitions();
    var0.setName("e23a02c5-2287-4daa-91c4-8efed2be0f73");
    org.jsecurity.cache.HashtableCacheManager var6 = new org.jsecurity.cache.HashtableCacheManager();
    org.jsecurity.cache.Cache var8 = var6.getCache("\u0000\u0000");
    org.jsecurity.realm.text.PropertiesRealm var9 = new org.jsecurity.realm.text.PropertiesRealm((org.jsecurity.cache.CacheManager)var6);
    org.jsecurity.codec.CodecException var12 = new org.jsecurity.codec.CodecException("dd\uFFFD");
    org.jsecurity.authc.ConcurrentAccessException var13 = new org.jsecurity.authc.ConcurrentAccessException("org.jsecurity.authz.UnauthorizedException: org.jsecurity.session.ExpiredSessionException: ", (java.lang.Throwable)var12);
    org.jsecurity.subject.SimplePrincipalCollection var15 = new org.jsecurity.subject.SimplePrincipalCollection((java.lang.Object)var12, "");
    org.jsecurity.authc.pam.FirstSuccessfulAuthenticationStrategy var16 = new org.jsecurity.authc.pam.FirstSuccessfulAuthenticationStrategy();
    org.jsecurity.authz.UnauthorizedException var18 = new org.jsecurity.authz.UnauthorizedException("org.jsecurity.config.ConfigurationException: dd\uFFFD");
    java.lang.Throwable[] var19 = var18.getSuppressed();
    java.util.List var20 = org.jsecurity.util.CollectionUtils.asList((java.lang.Object[])var19);
    org.jsecurity.authc.UsernamePasswordToken var21 = new org.jsecurity.authc.UsernamePasswordToken();
    java.lang.String var22 = var21.getUsername();
    java.net.InetAddress var23 = var21.getInetAddress();
    org.jsecurity.authc.AuthenticationInfo var24 = var16.beforeAllAttempts((java.util.Collection)var20, (org.jsecurity.authc.AuthenticationToken)var21);
    org.jsecurity.session.UnknownSessionException var29 = new org.jsecurity.session.UnknownSessionException("dd\uFFFD", (java.io.Serializable)100.0f);
    org.jsecurity.subject.SubjectException var30 = new org.jsecurity.subject.SubjectException("dd\uFFFD", (java.lang.Throwable)var29);
    org.jsecurity.io.SerializationException var31 = new org.jsecurity.io.SerializationException("", (java.lang.Throwable)var30);
    java.lang.Throwable[] var32 = var30.getSuppressed();
    java.util.Set var33 = org.jsecurity.util.CollectionUtils.asSet((java.lang.Object[])var32);
    org.jsecurity.authc.SimpleAccount var34 = new org.jsecurity.authc.SimpleAccount((org.jsecurity.subject.PrincipalCollection)var15, (java.lang.Object)var20, var33);
    var9.onLogout((org.jsecurity.subject.PrincipalCollection)var15);
    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      var0.checkPermission((org.jsecurity.subject.PrincipalCollection)var15, "6fce63f0-31b0-4392-a29b-db1fc03a58d9");
      fail("Expected exception of type java.util.NoSuchElementException");
    } catch (java.util.NoSuchElementException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var3);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var8);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var19);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var20);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var22);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var23);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var24);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var32);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var33);

  }

  public void test5() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest5.test5");


    org.jsecurity.session.mgt.eis.MemorySessionDAO var0 = new org.jsecurity.session.mgt.eis.MemorySessionDAO();
    org.jsecurity.cache.Cache var1 = var0.getActiveSessionsCache();
    var0.setActiveSessionsCacheName("dd\uFFFD");
    java.util.Collection var4 = var0.getActiveSessions();
    org.jsecurity.cache.HashtableCache var6 = new org.jsecurity.cache.HashtableCache("5dd0c65d-1422-49c2-becb-9e8dca619ab3");
    var0.setActiveSessionsCache((org.jsecurity.cache.Cache)var6);
    var6.clear();
    java.util.Set var9 = var6.values();
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var1);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var4);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var9);

  }

  public void test6() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest5.test6");


    org.jsecurity.realm.activedirectory.ActiveDirectoryRealm var0 = new org.jsecurity.realm.activedirectory.ActiveDirectoryRealm();
    var0.init();
    var0.init();
    org.jsecurity.config.ReflectionBuilder var3 = new org.jsecurity.config.ReflectionBuilder();
    org.jsecurity.config.ReflectionBuilder var4 = new org.jsecurity.config.ReflectionBuilder();
    org.jsecurity.io.IniResource var5 = new org.jsecurity.io.IniResource();
    var5.setCharsetName("org.jsecurity.authz.UnauthorizedException: org.jsecurity.session.ExpiredSessionException: ");
    java.util.Map var8 = var5.getSections();
    java.util.Map var9 = var4.buildObjects(var8);
    org.jsecurity.config.ReflectionBuilder var10 = new org.jsecurity.config.ReflectionBuilder();
    org.jsecurity.io.IniResource var11 = new org.jsecurity.io.IniResource();
    var11.setCharsetName("org.jsecurity.authz.UnauthorizedException: org.jsecurity.session.ExpiredSessionException: ");
    java.util.Map var14 = var11.getSections();
    java.util.Map var15 = var10.buildObjects(var14);
    java.util.Map var16 = var4.buildObjects(var15);
    java.util.Map var17 = var3.buildObjects(var16);
    var0.setGroupRolesMap(var17);
    org.jsecurity.authc.pam.ModularRealmAuthenticator var19 = new org.jsecurity.authc.pam.ModularRealmAuthenticator((org.jsecurity.realm.Realm)var0);
    org.jsecurity.io.IniResource var20 = new org.jsecurity.io.IniResource();
    java.util.Map var21 = var20.getSections();
    java.lang.String var22 = var20.getCharsetName();
    org.jsecurity.config.ReflectionBuilder var23 = new org.jsecurity.config.ReflectionBuilder();
    org.jsecurity.io.IniResource var24 = new org.jsecurity.io.IniResource();
    java.util.Map var25 = var24.getSections();
    var23.setObjects(var25);
    org.jsecurity.io.IniResource var27 = new org.jsecurity.io.IniResource();
    java.util.Map var28 = var27.getSections();
    java.util.Map var29 = var23.buildObjects(var28);
    var20.setSections(var29);
    java.lang.String var31 = var20.getCharsetName();
    java.util.Map var32 = var20.getSections();
    var0.setGroupRolesMap(var32);
    org.jsecurity.cache.CacheManager var34 = var0.getCacheManager();
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var8);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var9);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var14);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var15);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var16);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var17);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var21);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var22);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var25);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var28);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var29);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var31);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var32);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var34);

  }

  public void test7() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest5.test7");


    org.jsecurity.session.mgt.eis.MemorySessionDAO var0 = new org.jsecurity.session.mgt.eis.MemorySessionDAO();
    org.jsecurity.cache.Cache var1 = var0.getActiveSessionsCache();
    var0.setActiveSessionsCacheName("dd\uFFFD");
    var0.setActiveSessionsCacheName("\u0000\u0000\u0000");
    org.jsecurity.cache.ehcache.EhCacheManager var6 = new org.jsecurity.cache.ehcache.EhCacheManager();
    net.sf.ehcache.CacheManager var7 = var6.getCacheManager();
    var6.destroy();
    net.sf.ehcache.CacheManager var9 = var6.getCacheManager();
    net.sf.ehcache.CacheManager var10 = var6.getCacheManager();
    var6.init();
    java.lang.String var12 = var6.getCacheManagerConfigFile();
    var0.setCacheManager((org.jsecurity.cache.CacheManager)var6);
    var6.init();
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var1);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var7);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var9);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var10);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var12 + "' != '" + "classpath:org/jsecurity/cache/ehcache/ehcache.xml"+ "'", var12.equals("classpath:org/jsecurity/cache/ehcache/ehcache.xml"));

  }

  public void test8() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest5.test8");


    org.jsecurity.session.InvalidSessionException var2 = new org.jsecurity.session.InvalidSessionException("7ba0dec9-df58-43bc-b7da-f28f3e23c1e0");
    org.jsecurity.authz.UnauthenticatedException var4 = new org.jsecurity.authz.UnauthenticatedException("guest = guest,guest\npresidentskroob = 12345,president\ndarkhelmet = ludicrousspeed,darklord,schwartz\nroot = secret,root\nlonestarr = vespa,goodguy,schwartz\n");
    org.jsecurity.authz.HostUnauthorizedException var5 = new org.jsecurity.authz.HostUnauthorizedException((java.lang.Throwable)var4);
    org.jsecurity.session.SessionException var6 = new org.jsecurity.session.SessionException("d24e20a8-12f0-4e12-814e-d6450a4b8fd6", (java.lang.Throwable)var2, (java.io.Serializable)var4);

  }

  public void test9() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest5.test9");


    org.jsecurity.codec.CodecException var2 = new org.jsecurity.codec.CodecException("dd\uFFFD");
    org.jsecurity.authc.ConcurrentAccessException var3 = new org.jsecurity.authc.ConcurrentAccessException("org.jsecurity.authz.UnauthorizedException: org.jsecurity.session.ExpiredSessionException: ", (java.lang.Throwable)var2);
    org.jsecurity.subject.SimplePrincipalCollection var5 = new org.jsecurity.subject.SimplePrincipalCollection((java.lang.Object)var2, "");
    char[] var9 = new char[] { };
    org.jsecurity.authc.UsernamePasswordToken var11 = new org.jsecurity.authc.UsernamePasswordToken("hi!", var9, true);
    org.jsecurity.authc.UsernamePasswordToken var12 = new org.jsecurity.authc.UsernamePasswordToken("\u0000\u0000", var9);
    org.jsecurity.session.mgt.SimpleSession var13 = new org.jsecurity.session.mgt.SimpleSession();
    var13.setTimeout((-1L));
    org.jsecurity.session.mgt.SimpleSession var16 = new org.jsecurity.session.mgt.SimpleSession();
    java.util.Date var17 = var16.getLastAccessTime();
    var13.setLastAccessTime(var17);
    java.net.InetAddress var19 = var13.getHostAddress();
    var12.setInetAddress(var19);
    org.jsecurity.session.mgt.SimpleSession var21 = new org.jsecurity.session.mgt.SimpleSession();
    var21.setTimeout((-1L));
    org.jsecurity.session.mgt.SimpleSession var24 = new org.jsecurity.session.mgt.SimpleSession();
    java.util.Date var25 = var24.getLastAccessTime();
    var21.setLastAccessTime(var25);
    org.jsecurity.session.mgt.SimpleSession var27 = new org.jsecurity.session.mgt.SimpleSession();
    java.util.Date var28 = var27.getLastAccessTime();
    var21.setStopTimestamp(var28);
    org.jsecurity.mgt.DefaultSecurityManager var30 = new org.jsecurity.mgt.DefaultSecurityManager();
    org.jsecurity.authc.pam.AllSuccessfulModularAuthenticationStrategy var31 = new org.jsecurity.authc.pam.AllSuccessfulModularAuthenticationStrategy();
    org.jsecurity.authc.pam.AllSuccessfulModularAuthenticationStrategy var32 = new org.jsecurity.authc.pam.AllSuccessfulModularAuthenticationStrategy();
    char[] var34 = new char[] { };
    org.jsecurity.authc.UsernamePasswordToken var36 = new org.jsecurity.authc.UsernamePasswordToken("hi!", var34, true);
    org.jsecurity.authc.SimpleAccount var37 = new org.jsecurity.authc.SimpleAccount();
    var37.setCredentialsExpired(false);
    boolean var40 = var37.isLocked();
    org.jsecurity.authc.AuthenticationInfo var41 = var32.afterAllAttempts((org.jsecurity.authc.AuthenticationToken)var36, (org.jsecurity.authc.AuthenticationInfo)var37);
    char[] var45 = new char[] { '4', '#'};
    org.jsecurity.authc.UsernamePasswordToken var46 = new org.jsecurity.authc.UsernamePasswordToken("\u0000\u0000", var45);
    org.jsecurity.authc.SimpleAccount var47 = new org.jsecurity.authc.SimpleAccount();
    var47.setCredentialsExpired(false);
    var47.setCredentialsExpired(false);
    boolean var52 = var47.isCredentialsExpired();
    org.jsecurity.authc.AuthenticationInfo var53 = var32.afterAllAttempts((org.jsecurity.authc.AuthenticationToken)var46, (org.jsecurity.authc.AuthenticationInfo)var47);
    org.jsecurity.authz.UnauthenticatedException var57 = new org.jsecurity.authz.UnauthenticatedException();
    org.jsecurity.config.UnresolveableReferenceException var58 = new org.jsecurity.config.UnresolveableReferenceException("", (java.lang.Throwable)var57);
    org.jsecurity.cache.CacheException var59 = new org.jsecurity.cache.CacheException("org.jsecurity.config.ConfigurationException: dd\uFFFD", (java.lang.Throwable)var57);
    org.jsecurity.authc.SimpleAuthenticationInfo var61 = new org.jsecurity.authc.SimpleAuthenticationInfo((java.lang.Object)"org.jsecurity.config.ConfigurationException: dd\uFFFD", (java.lang.Object)var59, "a2b823b1e72eae2b727289df8a00a89df8a0bab6ad8a89c4c5c7a9b62a270000");
    org.jsecurity.subject.PrincipalCollection var62 = var61.getPrincipals();
    org.jsecurity.authc.AuthenticationInfo var63 = var31.afterAllAttempts((org.jsecurity.authc.AuthenticationToken)var46, (org.jsecurity.authc.AuthenticationInfo)var61);
    var30.setModularAuthenticationStrategy((org.jsecurity.authc.pam.ModularAuthenticationStrategy)var31);
    org.jsecurity.subject.RememberMeManager var65 = var30.getRememberMeManager();
    org.jsecurity.authc.pam.ModularRealmAuthenticator var66 = new org.jsecurity.authc.pam.ModularRealmAuthenticator();
    var30.setAuthenticator((org.jsecurity.authc.Authenticator)var66);
    org.jsecurity.codec.CodecException var70 = new org.jsecurity.codec.CodecException("dd\uFFFD");
    org.jsecurity.authc.ConcurrentAccessException var71 = new org.jsecurity.authc.ConcurrentAccessException("org.jsecurity.authz.UnauthorizedException: org.jsecurity.session.ExpiredSessionException: ", (java.lang.Throwable)var70);
    org.jsecurity.subject.SimplePrincipalCollection var73 = new org.jsecurity.subject.SimplePrincipalCollection((java.lang.Object)var70, "");
    java.io.InputStream var75 = org.jsecurity.util.ClassUtils.getResourceAsStream("");
    java.lang.Object[] var76 = new java.lang.Object[] { var75};
    java.util.List var77 = org.jsecurity.util.CollectionUtils.asList(var76);
    org.jsecurity.authc.pam.ModularRealmAuthenticator var78 = new org.jsecurity.authc.pam.ModularRealmAuthenticator(var77);
    var73.addAll((java.util.Collection)var77, "\u0000\u0000");
    org.jsecurity.authc.pam.FirstSuccessfulAuthenticationStrategy var81 = new org.jsecurity.authc.pam.FirstSuccessfulAuthenticationStrategy();
    org.jsecurity.authz.UnauthorizedException var83 = new org.jsecurity.authz.UnauthorizedException("org.jsecurity.config.ConfigurationException: dd\uFFFD");
    java.lang.Throwable[] var84 = var83.getSuppressed();
    java.util.List var85 = org.jsecurity.util.CollectionUtils.asList((java.lang.Object[])var84);
    org.jsecurity.authc.UsernamePasswordToken var86 = new org.jsecurity.authc.UsernamePasswordToken();
    java.lang.String var87 = var86.getUsername();
    java.net.InetAddress var88 = var86.getInetAddress();
    org.jsecurity.authc.AuthenticationInfo var89 = var81.beforeAllAttempts((java.util.Collection)var85, (org.jsecurity.authc.AuthenticationToken)var86);
    var30.checkPermissions((org.jsecurity.subject.PrincipalCollection)var73, (java.util.Collection)var85);
    org.jsecurity.subject.DelegatingSubject var91 = new org.jsecurity.subject.DelegatingSubject((org.jsecurity.subject.PrincipalCollection)var5, false, var19, (org.jsecurity.session.Session)var21, (org.jsecurity.mgt.SecurityManager)var30);
    org.jsecurity.session.mgt.ImmutableProxiedSession var92 = new org.jsecurity.session.mgt.ImmutableProxiedSession((org.jsecurity.session.Session)var21);
    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      var92.setTimeout(100L);
      fail("Expected exception of type org.jsecurity.session.InvalidSessionException");
    } catch (org.jsecurity.session.InvalidSessionException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var9);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var17);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var19);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var25);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var28);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var34);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var40 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var41);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var45);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var52 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var53);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var62);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var63);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var65);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var75);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var76);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var77);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var84);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var85);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var87);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var88);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var89);

  }

  public void test10() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest5.test10");


    java.io.InputStream var1 = org.jsecurity.util.ClassUtils.getResourceAsStream("");
    java.lang.Object[] var2 = new java.lang.Object[] { var1};
    java.util.List var3 = org.jsecurity.util.CollectionUtils.asList(var2);
    org.jsecurity.authc.pam.ModularRealmAuthenticator var4 = new org.jsecurity.authc.pam.ModularRealmAuthenticator(var3);
    org.jsecurity.authc.pam.AllSuccessfulModularAuthenticationStrategy var5 = new org.jsecurity.authc.pam.AllSuccessfulModularAuthenticationStrategy();
    var4.setModularAuthenticationStrategy((org.jsecurity.authc.pam.ModularAuthenticationStrategy)var5);
    org.jsecurity.authz.SimpleAuthorizationInfo var7 = new org.jsecurity.authz.SimpleAuthorizationInfo();
    var7.addStringPermission("hi!");
    java.io.InputStream var11 = org.jsecurity.util.ClassUtils.getResourceAsStream("");
    java.lang.Object[] var12 = new java.lang.Object[] { var11};
    java.util.List var13 = org.jsecurity.util.CollectionUtils.asList(var12);
    var7.addRoles((java.util.Collection)var13);
    var4.setAuthenticationListeners((java.util.Collection)var13);
    org.jsecurity.realm.activedirectory.ActiveDirectoryRealm var16 = new org.jsecurity.realm.activedirectory.ActiveDirectoryRealm();
    var16.setPrincipalSuffix("");
    var4.setRealm((org.jsecurity.realm.Realm)var16);
    org.jsecurity.authc.pam.FirstSuccessfulAuthenticationStrategy var20 = new org.jsecurity.authc.pam.FirstSuccessfulAuthenticationStrategy();
    org.jsecurity.authz.UnauthorizedException var22 = new org.jsecurity.authz.UnauthorizedException("org.jsecurity.config.ConfigurationException: dd\uFFFD");
    java.lang.Throwable[] var23 = var22.getSuppressed();
    java.util.List var24 = org.jsecurity.util.CollectionUtils.asList((java.lang.Object[])var23);
    org.jsecurity.authc.UsernamePasswordToken var25 = new org.jsecurity.authc.UsernamePasswordToken();
    java.lang.String var26 = var25.getUsername();
    java.net.InetAddress var27 = var25.getInetAddress();
    org.jsecurity.authc.AuthenticationInfo var28 = var20.beforeAllAttempts((java.util.Collection)var24, (org.jsecurity.authc.AuthenticationToken)var25);
    var4.setModularAuthenticationStrategy((org.jsecurity.authc.pam.ModularAuthenticationStrategy)var20);
    org.jsecurity.realm.activedirectory.ActiveDirectoryRealm var30 = new org.jsecurity.realm.activedirectory.ActiveDirectoryRealm();
    var30.init();
    var30.setSystemPassword("dd\uFFFD");
    var4.setRealm((org.jsecurity.realm.Realm)var30);
    var30.setSystemUsername("7f459141-420b-4ce9-8486-8c578b9f7c7e");
    var30.setSystemPassword("c7e94096-08e7-4341-a1f5-4aa0b248f022");
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var1);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var2);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var3);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var11);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var12);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var13);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var23);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var24);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var26);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var27);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var28);

  }

  public void test11() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest5.test11");


    org.jsecurity.authc.pam.AtLeastOneSuccessfulModularAuthenticationStrategy var0 = new org.jsecurity.authc.pam.AtLeastOneSuccessfulModularAuthenticationStrategy();
    org.jsecurity.authc.pam.AllSuccessfulModularAuthenticationStrategy var2 = new org.jsecurity.authc.pam.AllSuccessfulModularAuthenticationStrategy();
    char[] var4 = new char[] { };
    org.jsecurity.authc.UsernamePasswordToken var6 = new org.jsecurity.authc.UsernamePasswordToken("hi!", var4, true);
    org.jsecurity.authc.SimpleAccount var7 = new org.jsecurity.authc.SimpleAccount();
    var7.setCredentialsExpired(false);
    boolean var10 = var7.isLocked();
    org.jsecurity.authc.AuthenticationInfo var11 = var2.afterAllAttempts((org.jsecurity.authc.AuthenticationToken)var6, (org.jsecurity.authc.AuthenticationInfo)var7);
    char[] var14 = new char[] { };
    org.jsecurity.authc.UsernamePasswordToken var16 = new org.jsecurity.authc.UsernamePasswordToken("hi!", var14, true);
    org.jsecurity.authc.UsernamePasswordToken var17 = new org.jsecurity.authc.UsernamePasswordToken("\u0000\u0000", var14);
    var6.setPassword(var14);
    org.jsecurity.authc.UsernamePasswordToken var19 = new org.jsecurity.authc.UsernamePasswordToken("\u0000\u0000\u0000", var14);
    org.jsecurity.realm.text.TextConfigurationRealm var20 = new org.jsecurity.realm.text.TextConfigurationRealm();
    java.io.InputStream var22 = org.jsecurity.util.ClassUtils.getResourceAsStream("");
    java.lang.Object[] var23 = new java.lang.Object[] { var22};
    java.util.List var24 = org.jsecurity.util.CollectionUtils.asList(var23);
    org.jsecurity.authc.pam.ModularRealmAuthenticator var25 = new org.jsecurity.authc.pam.ModularRealmAuthenticator(var24);
    org.jsecurity.subject.SimplePrincipalCollection var27 = new org.jsecurity.subject.SimplePrincipalCollection((java.util.Collection)var24, "org.jsecurity.authz.UnauthorizedException: org.jsecurity.session.ExpiredSessionException: ");
    org.jsecurity.session.UnknownSessionException var32 = new org.jsecurity.session.UnknownSessionException("dd\uFFFD", (java.io.Serializable)100.0f);
    org.jsecurity.session.SessionException var34 = new org.jsecurity.session.SessionException("dd\uFFFD", (java.lang.Throwable)var32, (java.io.Serializable)0);
    org.jsecurity.session.SessionException var35 = new org.jsecurity.session.SessionException("dd\uFFFD", (java.lang.Throwable)var32);
    var27.add((java.lang.Object)var35, "org.jsecurity.config.ConfigurationException: dd\uFFFD");
    var20.onLogout((org.jsecurity.subject.PrincipalCollection)var27);
    org.jsecurity.authc.ExpiredCredentialsException var40 = new org.jsecurity.authc.ExpiredCredentialsException();
    org.jsecurity.session.ExpiredSessionException var41 = new org.jsecurity.session.ExpiredSessionException("", (java.lang.Throwable)var40);
    java.lang.Throwable[] var42 = var41.getSuppressed();
    org.jsecurity.io.ResourceException var43 = new org.jsecurity.io.ResourceException((java.lang.Throwable)var41);
    org.jsecurity.authc.SimpleAuthenticationInfo var44 = new org.jsecurity.authc.SimpleAuthenticationInfo((org.jsecurity.subject.PrincipalCollection)var27, (java.lang.Object)var41);
    org.jsecurity.authc.AuthenticationInfo var45 = var0.afterAllAttempts((org.jsecurity.authc.AuthenticationToken)var19, (org.jsecurity.authc.AuthenticationInfo)var44);
    org.jsecurity.codec.CodecException var48 = new org.jsecurity.codec.CodecException("dd\uFFFD");
    org.jsecurity.authc.ConcurrentAccessException var49 = new org.jsecurity.authc.ConcurrentAccessException("org.jsecurity.authz.UnauthorizedException: org.jsecurity.session.ExpiredSessionException: ", (java.lang.Throwable)var48);
    org.jsecurity.subject.SimplePrincipalCollection var51 = new org.jsecurity.subject.SimplePrincipalCollection((java.lang.Object)var48, "");
    boolean var52 = var51.isEmpty();
    java.util.List var53 = var51.asList();
    var44.setPrincipals((org.jsecurity.subject.PrincipalCollection)var51);
    org.jsecurity.realm.activedirectory.ActiveDirectoryRealm var55 = new org.jsecurity.realm.activedirectory.ActiveDirectoryRealm();
    org.jsecurity.authc.credential.Sha256CredentialsMatcher var56 = new org.jsecurity.authc.credential.Sha256CredentialsMatcher();
    var55.setCredentialsMatcher((org.jsecurity.authc.credential.CredentialsMatcher)var56);
    java.lang.String var58 = var55.getAuthorizationCacheName();
    var55.setPrincipalSuffix("org.jsecurity.config.ConfigurationException: dd\uFFFD");
    org.jsecurity.realm.text.TextConfigurationRealm var61 = new org.jsecurity.realm.text.TextConfigurationRealm();
    java.io.InputStream var63 = org.jsecurity.util.ClassUtils.getResourceAsStream("");
    java.lang.Object[] var64 = new java.lang.Object[] { var63};
    java.util.List var65 = org.jsecurity.util.CollectionUtils.asList(var64);
    org.jsecurity.authc.pam.ModularRealmAuthenticator var66 = new org.jsecurity.authc.pam.ModularRealmAuthenticator(var65);
    org.jsecurity.subject.SimplePrincipalCollection var68 = new org.jsecurity.subject.SimplePrincipalCollection((java.util.Collection)var65, "org.jsecurity.authz.UnauthorizedException: org.jsecurity.session.ExpiredSessionException: ");
    org.jsecurity.session.UnknownSessionException var73 = new org.jsecurity.session.UnknownSessionException("dd\uFFFD", (java.io.Serializable)100.0f);
    org.jsecurity.session.SessionException var75 = new org.jsecurity.session.SessionException("dd\uFFFD", (java.lang.Throwable)var73, (java.io.Serializable)0);
    org.jsecurity.session.SessionException var76 = new org.jsecurity.session.SessionException("dd\uFFFD", (java.lang.Throwable)var73);
    var68.add((java.lang.Object)var76, "org.jsecurity.config.ConfigurationException: dd\uFFFD");
    var61.onLogout((org.jsecurity.subject.PrincipalCollection)var68);
    var55.onLogout((org.jsecurity.subject.PrincipalCollection)var68);
    org.jsecurity.realm.SimpleAccountRealm var82 = new org.jsecurity.realm.SimpleAccountRealm("hi!");
    java.lang.Class var83 = var82.getAuthenticationTokenClass();
    java.util.Collection var84 = org.jsecurity.util.CollectionUtils.emptyCollection(var83);
    java.util.Collection var85 = var68.byType(var83);
    java.lang.Object var86 = var51.oneByType(var83);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var4);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var10 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var11);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var14);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var22);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var23);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var24);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var42);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var45);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var52 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var53);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var58);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var63);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var64);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var65);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var83);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var84);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var85);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var86);

  }

  public void test12() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest5.test12");


    org.jsecurity.session.mgt.eis.MemorySessionDAO var0 = new org.jsecurity.session.mgt.eis.MemorySessionDAO();
    org.jsecurity.cache.Cache var1 = var0.getActiveSessionsCache();
    org.jsecurity.cache.CacheManager var2 = var0.getCacheManager();
    org.jsecurity.cache.HashtableCacheManager var3 = new org.jsecurity.cache.HashtableCacheManager();
    org.jsecurity.cache.Cache var5 = var3.getCache("\u0000\u0000");
    var0.setActiveSessionsCache(var5);
    java.io.InputStream var8 = org.jsecurity.util.ClassUtils.getResourceAsStream("");
    java.lang.Object[] var9 = new java.lang.Object[] { var8};
    java.util.List var10 = org.jsecurity.util.CollectionUtils.asList(var9);
    org.jsecurity.authc.pam.ModularRealmAuthenticator var11 = new org.jsecurity.authc.pam.ModularRealmAuthenticator(var10);
    org.jsecurity.authc.pam.AllSuccessfulModularAuthenticationStrategy var12 = new org.jsecurity.authc.pam.AllSuccessfulModularAuthenticationStrategy();
    var11.setModularAuthenticationStrategy((org.jsecurity.authc.pam.ModularAuthenticationStrategy)var12);
    org.jsecurity.authz.SimpleAuthorizationInfo var14 = new org.jsecurity.authz.SimpleAuthorizationInfo();
    var14.addStringPermission("hi!");
    java.io.InputStream var18 = org.jsecurity.util.ClassUtils.getResourceAsStream("");
    java.lang.Object[] var19 = new java.lang.Object[] { var18};
    java.util.List var20 = org.jsecurity.util.CollectionUtils.asList(var19);
    var14.addRoles((java.util.Collection)var20);
    var11.setAuthenticationListeners((java.util.Collection)var20);
    org.jsecurity.realm.activedirectory.ActiveDirectoryRealm var23 = new org.jsecurity.realm.activedirectory.ActiveDirectoryRealm();
    var23.setPrincipalSuffix("");
    var11.setRealm((org.jsecurity.realm.Realm)var23);
    org.jsecurity.cache.HashtableCacheManager var27 = new org.jsecurity.cache.HashtableCacheManager();
    org.jsecurity.cache.Cache var29 = var27.getCache("\u0000\u0000");
    var23.setAuthorizationCache(var29);
    var0.setActiveSessionsCache(var29);
    org.jsecurity.session.mgt.SimpleSession var32 = new org.jsecurity.session.mgt.SimpleSession();
    java.io.Serializable var33 = var0.create((org.jsecurity.session.Session)var32);
    org.jsecurity.session.mgt.SimpleSession var34 = new org.jsecurity.session.mgt.SimpleSession();
    var34.touch();
    var34.validate();
    org.jsecurity.session.mgt.SimpleSession var37 = new org.jsecurity.session.mgt.SimpleSession();
    var37.setTimeout((-1L));
    org.jsecurity.session.mgt.SimpleSession var40 = new org.jsecurity.session.mgt.SimpleSession();
    java.util.Date var41 = var40.getLastAccessTime();
    var37.setLastAccessTime(var41);
    org.jsecurity.session.mgt.SimpleSession var43 = new org.jsecurity.session.mgt.SimpleSession();
    java.util.Date var44 = var43.getLastAccessTime();
    var37.setStopTimestamp(var44);
    var34.setLastAccessTime(var44);
    var32.setLastAccessTime(var44);
    org.jsecurity.session.mgt.ImmutableProxiedSession var48 = new org.jsecurity.session.mgt.ImmutableProxiedSession((org.jsecurity.session.Session)var32);
    org.jsecurity.session.ProxiedSession var49 = new org.jsecurity.session.ProxiedSession((org.jsecurity.session.Session)var32);
    org.jsecurity.session.ProxiedSession var50 = new org.jsecurity.session.ProxiedSession((org.jsecurity.session.Session)var49);
    org.jsecurity.realm.activedirectory.ActiveDirectoryRealm var52 = new org.jsecurity.realm.activedirectory.ActiveDirectoryRealm();
    org.jsecurity.authc.credential.Sha256CredentialsMatcher var53 = new org.jsecurity.authc.credential.Sha256CredentialsMatcher();
    var52.setCredentialsMatcher((org.jsecurity.authc.credential.CredentialsMatcher)var53);
    java.lang.String var55 = var52.getAuthorizationCacheName();
    var52.setUrl("hi!");
    org.jsecurity.realm.ldap.DefaultLdapContextFactory var58 = new org.jsecurity.realm.ldap.DefaultLdapContextFactory();
    var52.setLdapContextFactory((org.jsecurity.realm.ldap.LdapContextFactory)var58);
    var49.setAttribute((java.lang.Object)"57f108f5-de1f-46bc-a431-6c2563f95e22", (java.lang.Object)var52);
    java.util.Date var61 = var49.getStartTimestamp();
    java.util.Date var62 = var49.getStartTimestamp();
    var49.stop();
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var1);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var2);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var5);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var8);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var9);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var10);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var18);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var19);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var20);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var29);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var33 + "' != '" + "aaa54de5-d61f-4eeb-a8fe-632210d1e7a6"+ "'", var33.equals("aaa54de5-d61f-4eeb-a8fe-632210d1e7a6"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var41);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var44);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var55);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var61);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var62);

  }

  public void test13() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest5.test13");


    org.jsecurity.cache.HashtableCache var1 = new org.jsecurity.cache.HashtableCache("5dd0c65d-1422-49c2-becb-9e8dca619ab3");
    var1.clear();
    org.jsecurity.mgt.DefaultSecurityManager var3 = new org.jsecurity.mgt.DefaultSecurityManager();
    java.io.InputStream var5 = org.jsecurity.util.ClassUtils.getResourceAsStream("");
    java.lang.Object[] var6 = new java.lang.Object[] { var5};
    java.util.List var7 = org.jsecurity.util.CollectionUtils.asList(var6);
    org.jsecurity.authc.pam.ModularRealmAuthenticator var8 = new org.jsecurity.authc.pam.ModularRealmAuthenticator(var7);
    org.jsecurity.authc.pam.AllSuccessfulModularAuthenticationStrategy var9 = new org.jsecurity.authc.pam.AllSuccessfulModularAuthenticationStrategy();
    var8.setModularAuthenticationStrategy((org.jsecurity.authc.pam.ModularAuthenticationStrategy)var9);
    org.jsecurity.authz.SimpleAuthorizationInfo var11 = new org.jsecurity.authz.SimpleAuthorizationInfo();
    var11.addStringPermission("hi!");
    java.io.InputStream var15 = org.jsecurity.util.ClassUtils.getResourceAsStream("");
    java.lang.Object[] var16 = new java.lang.Object[] { var15};
    java.util.List var17 = org.jsecurity.util.CollectionUtils.asList(var16);
    var11.addRoles((java.util.Collection)var17);
    var8.setAuthenticationListeners((java.util.Collection)var17);
    var3.setSessionListeners((java.util.Collection)var17);
    org.jsecurity.realm.text.TextConfigurationRealm var21 = new org.jsecurity.realm.text.TextConfigurationRealm();
    java.io.InputStream var23 = org.jsecurity.util.ClassUtils.getResourceAsStream("");
    java.lang.Object[] var24 = new java.lang.Object[] { var23};
    java.util.List var25 = org.jsecurity.util.CollectionUtils.asList(var24);
    org.jsecurity.authc.pam.ModularRealmAuthenticator var26 = new org.jsecurity.authc.pam.ModularRealmAuthenticator(var25);
    org.jsecurity.subject.SimplePrincipalCollection var28 = new org.jsecurity.subject.SimplePrincipalCollection((java.util.Collection)var25, "org.jsecurity.authz.UnauthorizedException: org.jsecurity.session.ExpiredSessionException: ");
    org.jsecurity.session.UnknownSessionException var33 = new org.jsecurity.session.UnknownSessionException("dd\uFFFD", (java.io.Serializable)100.0f);
    org.jsecurity.session.SessionException var35 = new org.jsecurity.session.SessionException("dd\uFFFD", (java.lang.Throwable)var33, (java.io.Serializable)0);
    org.jsecurity.session.SessionException var36 = new org.jsecurity.session.SessionException("dd\uFFFD", (java.lang.Throwable)var33);
    var28.add((java.lang.Object)var36, "org.jsecurity.config.ConfigurationException: dd\uFFFD");
    var21.onLogout((org.jsecurity.subject.PrincipalCollection)var28);
    org.jsecurity.authc.pam.FirstSuccessfulAuthenticationStrategy var40 = new org.jsecurity.authc.pam.FirstSuccessfulAuthenticationStrategy();
    org.jsecurity.authz.UnauthorizedException var42 = new org.jsecurity.authz.UnauthorizedException("org.jsecurity.config.ConfigurationException: dd\uFFFD");
    java.lang.Throwable[] var43 = var42.getSuppressed();
    java.util.List var44 = org.jsecurity.util.CollectionUtils.asList((java.lang.Object[])var43);
    org.jsecurity.authc.UsernamePasswordToken var45 = new org.jsecurity.authc.UsernamePasswordToken();
    java.lang.String var46 = var45.getUsername();
    java.net.InetAddress var47 = var45.getInetAddress();
    org.jsecurity.authc.AuthenticationInfo var48 = var40.beforeAllAttempts((java.util.Collection)var44, (org.jsecurity.authc.AuthenticationToken)var45);
    boolean[] var49 = var3.hasRoles((org.jsecurity.subject.PrincipalCollection)var28, var44);
    org.jsecurity.session.mgt.SessionManager var50 = var3.getSessionManager();
    var1.remove((java.lang.Object)var3);
    org.jsecurity.cache.CacheManager var52 = var3.getCacheManager();
    org.jsecurity.authz.SimpleAuthorizationInfo var53 = new org.jsecurity.authz.SimpleAuthorizationInfo();
    java.util.Set var54 = var53.getStringPermissions();
    java.util.Set var55 = var53.getRoles();
    var53.addStringPermission("hi!");
    org.jsecurity.subject.SimplePrincipalCollection var59 = new org.jsecurity.subject.SimplePrincipalCollection((java.lang.Object)"hi!", "5dd0c65d-1422-49c2-becb-9e8dca619ab3");
    org.jsecurity.authz.aop.GuestAnnotationHandler var60 = new org.jsecurity.authz.aop.GuestAnnotationHandler();
    java.lang.Class var61 = var60.getAnnotationClass();
    java.lang.Object var62 = var59.oneByType(var61);
    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      var3.checkPermission((org.jsecurity.subject.PrincipalCollection)var59, "92ec7657-39a0-4fe8-843e-f3915140dc01");
      fail("Expected exception of type java.util.NoSuchElementException");
    } catch (java.util.NoSuchElementException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var5);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var6);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var7);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var15);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var16);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var17);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var23);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var24);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var25);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var43);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var44);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var46);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var47);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var48);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var49);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var50);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var52);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var54);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var55);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var61);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var62);

  }

  public void test14() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest5.test14");


    org.jsecurity.session.UnknownSessionException var5 = new org.jsecurity.session.UnknownSessionException("dd\uFFFD", (java.io.Serializable)100.0f);
    org.jsecurity.session.SessionException var7 = new org.jsecurity.session.SessionException("dd\uFFFD", (java.lang.Throwable)var5, (java.io.Serializable)0);
    org.jsecurity.io.SerializationException var8 = new org.jsecurity.io.SerializationException((java.lang.Throwable)var5);
    org.jsecurity.session.UnknownSessionException var9 = new org.jsecurity.session.UnknownSessionException("57f108f5-de1f-46bc-a431-6c2563f95e22", (java.lang.Throwable)var8);
    org.jsecurity.authc.AccountException var10 = new org.jsecurity.authc.AccountException("Y2E3M2QxYTQtNzA2ZS00MmU3LTk4MGYtODk2ZDNiMTUzZGU4", (java.lang.Throwable)var9);
    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      org.jsecurity.crypto.hash.Sha512Hash var11 = new org.jsecurity.crypto.hash.Sha512Hash((java.lang.Object)var10);
      fail("Expected exception of type org.jsecurity.codec.CodecException");
    } catch (org.jsecurity.codec.CodecException e) {
      // Expected exception.
    }

  }

  public void test15() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest5.test15");


    org.jsecurity.realm.jndi.JndiRealmFactory var0 = new org.jsecurity.realm.jndi.JndiRealmFactory();
    java.io.InputStream var2 = org.jsecurity.util.ClassUtils.getResourceAsStream("");
    java.lang.Object[] var3 = new java.lang.Object[] { var2};
    java.util.List var4 = org.jsecurity.util.CollectionUtils.asList(var3);
    org.jsecurity.authc.pam.ModularRealmAuthenticator var5 = new org.jsecurity.authc.pam.ModularRealmAuthenticator(var4);
    org.jsecurity.authc.pam.AllSuccessfulModularAuthenticationStrategy var6 = new org.jsecurity.authc.pam.AllSuccessfulModularAuthenticationStrategy();
    var5.setModularAuthenticationStrategy((org.jsecurity.authc.pam.ModularAuthenticationStrategy)var6);
    org.jsecurity.authz.SimpleAuthorizationInfo var8 = new org.jsecurity.authz.SimpleAuthorizationInfo();
    var8.addStringPermission("hi!");
    java.io.InputStream var12 = org.jsecurity.util.ClassUtils.getResourceAsStream("");
    java.lang.Object[] var13 = new java.lang.Object[] { var12};
    java.util.List var14 = org.jsecurity.util.CollectionUtils.asList(var13);
    var8.addRoles((java.util.Collection)var14);
    var5.setAuthenticationListeners((java.util.Collection)var14);
    org.jsecurity.realm.activedirectory.ActiveDirectoryRealm var17 = new org.jsecurity.realm.activedirectory.ActiveDirectoryRealm();
    var17.setPrincipalSuffix("");
    var5.setRealm((org.jsecurity.realm.Realm)var17);
    org.jsecurity.authc.pam.FirstSuccessfulAuthenticationStrategy var21 = new org.jsecurity.authc.pam.FirstSuccessfulAuthenticationStrategy();
    org.jsecurity.authz.UnauthorizedException var23 = new org.jsecurity.authz.UnauthorizedException("org.jsecurity.config.ConfigurationException: dd\uFFFD");
    java.lang.Throwable[] var24 = var23.getSuppressed();
    java.util.List var25 = org.jsecurity.util.CollectionUtils.asList((java.lang.Object[])var24);
    org.jsecurity.authc.UsernamePasswordToken var26 = new org.jsecurity.authc.UsernamePasswordToken();
    java.lang.String var27 = var26.getUsername();
    java.net.InetAddress var28 = var26.getInetAddress();
    org.jsecurity.authc.AuthenticationInfo var29 = var21.beforeAllAttempts((java.util.Collection)var25, (org.jsecurity.authc.AuthenticationToken)var26);
    var5.setModularAuthenticationStrategy((org.jsecurity.authc.pam.ModularAuthenticationStrategy)var21);
    org.jsecurity.codec.CodecException var33 = new org.jsecurity.codec.CodecException("dd\uFFFD");
    org.jsecurity.authc.ConcurrentAccessException var34 = new org.jsecurity.authc.ConcurrentAccessException("org.jsecurity.authz.UnauthorizedException: org.jsecurity.session.ExpiredSessionException: ", (java.lang.Throwable)var33);
    org.jsecurity.subject.SimplePrincipalCollection var36 = new org.jsecurity.subject.SimplePrincipalCollection((java.lang.Object)var33, "");
    org.jsecurity.authc.pam.FirstSuccessfulAuthenticationStrategy var37 = new org.jsecurity.authc.pam.FirstSuccessfulAuthenticationStrategy();
    org.jsecurity.authz.UnauthorizedException var39 = new org.jsecurity.authz.UnauthorizedException("org.jsecurity.config.ConfigurationException: dd\uFFFD");
    java.lang.Throwable[] var40 = var39.getSuppressed();
    java.util.List var41 = org.jsecurity.util.CollectionUtils.asList((java.lang.Object[])var40);
    org.jsecurity.authc.UsernamePasswordToken var42 = new org.jsecurity.authc.UsernamePasswordToken();
    java.lang.String var43 = var42.getUsername();
    java.net.InetAddress var44 = var42.getInetAddress();
    org.jsecurity.authc.AuthenticationInfo var45 = var37.beforeAllAttempts((java.util.Collection)var41, (org.jsecurity.authc.AuthenticationToken)var42);
    org.jsecurity.session.UnknownSessionException var50 = new org.jsecurity.session.UnknownSessionException("dd\uFFFD", (java.io.Serializable)100.0f);
    org.jsecurity.subject.SubjectException var51 = new org.jsecurity.subject.SubjectException("dd\uFFFD", (java.lang.Throwable)var50);
    org.jsecurity.io.SerializationException var52 = new org.jsecurity.io.SerializationException("", (java.lang.Throwable)var51);
    java.lang.Throwable[] var53 = var51.getSuppressed();
    java.util.Set var54 = org.jsecurity.util.CollectionUtils.asSet((java.lang.Object[])var53);
    org.jsecurity.authc.SimpleAccount var55 = new org.jsecurity.authc.SimpleAccount((org.jsecurity.subject.PrincipalCollection)var36, (java.lang.Object)var41, var54);
    org.jsecurity.authc.pam.AllSuccessfulModularAuthenticationStrategy var56 = new org.jsecurity.authc.pam.AllSuccessfulModularAuthenticationStrategy();
    char[] var58 = new char[] { };
    org.jsecurity.authc.UsernamePasswordToken var60 = new org.jsecurity.authc.UsernamePasswordToken("hi!", var58, true);
    org.jsecurity.authc.SimpleAccount var61 = new org.jsecurity.authc.SimpleAccount();
    var61.setCredentialsExpired(false);
    boolean var64 = var61.isLocked();
    org.jsecurity.authc.AuthenticationInfo var65 = var56.afterAllAttempts((org.jsecurity.authc.AuthenticationToken)var60, (org.jsecurity.authc.AuthenticationInfo)var61);
    char[] var68 = new char[] { };
    org.jsecurity.authc.UsernamePasswordToken var70 = new org.jsecurity.authc.UsernamePasswordToken("hi!", var68, true);
    org.jsecurity.authc.UsernamePasswordToken var71 = new org.jsecurity.authc.UsernamePasswordToken("\u0000\u0000", var68);
    var60.setPassword(var68);
    org.jsecurity.authc.AuthenticationInfo var73 = var21.beforeAllAttempts((java.util.Collection)var41, (org.jsecurity.authc.AuthenticationToken)var60);
    org.jsecurity.authz.permission.WildcardPermissionResolver var74 = new org.jsecurity.authz.permission.WildcardPermissionResolver();
    org.jsecurity.authz.Permission var76 = var74.resolvePermission("hi!");
    org.jsecurity.authz.Permission var78 = var74.resolvePermission("hi!");
    java.util.Set var79 = org.jsecurity.util.PermissionUtils.resolvePermissions((java.util.Collection)var41, (org.jsecurity.authz.permission.PermissionResolver)var74);
    var0.setJndiNames((java.util.Collection)var79);
    java.util.Properties var81 = var0.getJndiEnvironment();
    org.jsecurity.jndi.JndiTemplate var82 = new org.jsecurity.jndi.JndiTemplate();
    java.util.Properties var83 = var82.getEnvironment();
    var0.setJndiTemplate(var82);
    org.jsecurity.jndi.JndiTemplate var85 = var0.getJndiTemplate();
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var2);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var3);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var4);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var12);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var13);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var14);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var24);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var25);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var27);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var28);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var29);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var40);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var41);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var43);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var44);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var45);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var53);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var54);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var58);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var64 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var65);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var68);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var73);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var76);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var78);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var79);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var81);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var83);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var85);

  }

  public void test16() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest5.test16");


    org.jsecurity.realm.activedirectory.ActiveDirectoryRealm var0 = new org.jsecurity.realm.activedirectory.ActiveDirectoryRealm();
    org.jsecurity.authc.credential.Sha256CredentialsMatcher var1 = new org.jsecurity.authc.credential.Sha256CredentialsMatcher();
    var0.setCredentialsMatcher((org.jsecurity.authc.credential.CredentialsMatcher)var1);
    org.jsecurity.realm.activedirectory.ActiveDirectoryRealm var3 = new org.jsecurity.realm.activedirectory.ActiveDirectoryRealm();
    org.jsecurity.authc.credential.Sha256CredentialsMatcher var4 = new org.jsecurity.authc.credential.Sha256CredentialsMatcher();
    var3.setCredentialsMatcher((org.jsecurity.authc.credential.CredentialsMatcher)var4);
    java.lang.String var6 = var3.getAuthorizationCacheName();
    var3.setUrl("hi!");
    org.jsecurity.realm.ldap.DefaultLdapContextFactory var9 = new org.jsecurity.realm.ldap.DefaultLdapContextFactory();
    var3.setLdapContextFactory((org.jsecurity.realm.ldap.LdapContextFactory)var9);
    var9.setAuthentication("org.jsecurity.authz.UnauthorizedException: org.jsecurity.session.ExpiredSessionException: ");
    var0.setLdapContextFactory((org.jsecurity.realm.ldap.LdapContextFactory)var9);
    var9.setReferral("a2b823b1e72eae2b727289df8a00a89df8a0bab6ad8a89c4c5c7a9b62a270000");
    var9.setUrl("\u0000\u0000");
    var9.setUsePooling(true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var6);

  }

  public void test17() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest5.test17");


    org.jsecurity.util.UnknownClassException var1 = new org.jsecurity.util.UnknownClassException("af4b3469-92f9-4bb0-addf-358eefb0cfc9");

  }

  public void test18() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest5.test18");


    org.jsecurity.authz.SimpleRole var0 = new org.jsecurity.authz.SimpleRole();
    org.jsecurity.authz.permission.WildcardPermission var3 = new org.jsecurity.authz.permission.WildcardPermission("hi!", false);
    boolean var4 = var0.isPermitted((org.jsecurity.authz.Permission)var3);
    java.lang.String var5 = var0.toString();
    java.lang.String var6 = var0.toString();
    org.jsecurity.codec.CodecException var9 = new org.jsecurity.codec.CodecException("dd\uFFFD");
    org.jsecurity.authc.ConcurrentAccessException var10 = new org.jsecurity.authc.ConcurrentAccessException("org.jsecurity.authz.UnauthorizedException: org.jsecurity.session.ExpiredSessionException: ", (java.lang.Throwable)var9);
    org.jsecurity.subject.SimplePrincipalCollection var12 = new org.jsecurity.subject.SimplePrincipalCollection((java.lang.Object)var9, "");
    java.io.InputStream var14 = org.jsecurity.util.ClassUtils.getResourceAsStream("");
    java.lang.Object[] var15 = new java.lang.Object[] { var14};
    java.util.List var16 = org.jsecurity.util.CollectionUtils.asList(var15);
    org.jsecurity.authc.pam.ModularRealmAuthenticator var17 = new org.jsecurity.authc.pam.ModularRealmAuthenticator(var16);
    org.jsecurity.authc.pam.AllSuccessfulModularAuthenticationStrategy var18 = new org.jsecurity.authc.pam.AllSuccessfulModularAuthenticationStrategy();
    var17.setModularAuthenticationStrategy((org.jsecurity.authc.pam.ModularAuthenticationStrategy)var18);
    org.jsecurity.authz.SimpleAuthorizationInfo var20 = new org.jsecurity.authz.SimpleAuthorizationInfo();
    var20.addStringPermission("hi!");
    java.io.InputStream var24 = org.jsecurity.util.ClassUtils.getResourceAsStream("");
    java.lang.Object[] var25 = new java.lang.Object[] { var24};
    java.util.List var26 = org.jsecurity.util.CollectionUtils.asList(var25);
    var20.addRoles((java.util.Collection)var26);
    var17.setAuthenticationListeners((java.util.Collection)var26);
    org.jsecurity.realm.activedirectory.ActiveDirectoryRealm var29 = new org.jsecurity.realm.activedirectory.ActiveDirectoryRealm();
    var29.setPrincipalSuffix("");
    var17.setRealm((org.jsecurity.realm.Realm)var29);
    org.jsecurity.authc.pam.FirstSuccessfulAuthenticationStrategy var33 = new org.jsecurity.authc.pam.FirstSuccessfulAuthenticationStrategy();
    org.jsecurity.authz.UnauthorizedException var35 = new org.jsecurity.authz.UnauthorizedException("org.jsecurity.config.ConfigurationException: dd\uFFFD");
    java.lang.Throwable[] var36 = var35.getSuppressed();
    java.util.List var37 = org.jsecurity.util.CollectionUtils.asList((java.lang.Object[])var36);
    org.jsecurity.authc.UsernamePasswordToken var38 = new org.jsecurity.authc.UsernamePasswordToken();
    java.lang.String var39 = var38.getUsername();
    java.net.InetAddress var40 = var38.getInetAddress();
    org.jsecurity.authc.AuthenticationInfo var41 = var33.beforeAllAttempts((java.util.Collection)var37, (org.jsecurity.authc.AuthenticationToken)var38);
    var17.setModularAuthenticationStrategy((org.jsecurity.authc.pam.ModularAuthenticationStrategy)var33);
    org.jsecurity.authc.SimpleAccount var43 = new org.jsecurity.authc.SimpleAccount((org.jsecurity.subject.PrincipalCollection)var12, (java.lang.Object)var17);
    org.jsecurity.session.UnknownSessionException var49 = new org.jsecurity.session.UnknownSessionException("dd\uFFFD", (java.io.Serializable)100.0f);
    org.jsecurity.subject.SubjectException var50 = new org.jsecurity.subject.SubjectException("dd\uFFFD", (java.lang.Throwable)var49);
    org.jsecurity.authc.pam.UnsupportedTokenException var51 = new org.jsecurity.authc.pam.UnsupportedTokenException("dd\uFFFD", (java.lang.Throwable)var49);
    org.jsecurity.session.StoppedSessionException var52 = new org.jsecurity.session.StoppedSessionException("org.jsecurity.config.ConfigurationException: dd\uFFFD", (java.lang.Throwable)var51);
    org.jsecurity.JSecurityException var53 = new org.jsecurity.JSecurityException((java.lang.Throwable)var52);
    boolean var54 = var43.equals((java.lang.Object)var52);
    org.jsecurity.authz.SimpleRole var55 = new org.jsecurity.authz.SimpleRole();
    org.jsecurity.authz.SimpleAuthorizationInfo var56 = new org.jsecurity.authz.SimpleAuthorizationInfo();
    var56.addRole("a2b823b1e72eae2b727289df8a00a89df8a0bab6ad8a89c4c5c7a9b62a270000");
    org.jsecurity.session.UnknownSessionException var63 = new org.jsecurity.session.UnknownSessionException("dd\uFFFD", (java.io.Serializable)100.0f);
    org.jsecurity.subject.SubjectException var64 = new org.jsecurity.subject.SubjectException("dd\uFFFD", (java.lang.Throwable)var63);
    org.jsecurity.io.SerializationException var65 = new org.jsecurity.io.SerializationException("", (java.lang.Throwable)var64);
    java.lang.Throwable[] var66 = var64.getSuppressed();
    java.util.Set var67 = org.jsecurity.util.CollectionUtils.asSet((java.lang.Object[])var66);
    var56.addRoles((java.util.Collection)var67);
    var55.addAll((java.util.Collection)var67);
    java.lang.String var70 = var55.getName();
    org.jsecurity.authz.permission.WildcardPermission var73 = new org.jsecurity.authz.permission.WildcardPermission("hi!", false);
    var55.add((org.jsecurity.authz.Permission)var73);
    org.jsecurity.authz.permission.WildcardPermission var77 = new org.jsecurity.authz.permission.WildcardPermission("hi!", false);
    var55.add((org.jsecurity.authz.Permission)var77);
    org.jsecurity.authz.SimpleRole var80 = new org.jsecurity.authz.SimpleRole();
    org.jsecurity.authz.permission.WildcardPermission var83 = new org.jsecurity.authz.permission.WildcardPermission("hi!", false);
    boolean var84 = var80.isPermitted((org.jsecurity.authz.Permission)var83);
    org.jsecurity.session.InvalidSessionException var85 = new org.jsecurity.session.InvalidSessionException("org.jsecurity.config.ConfigurationException: dd\uFFFD", (java.io.Serializable)var83);
    org.jsecurity.authz.SimpleRole var86 = new org.jsecurity.authz.SimpleRole();
    org.jsecurity.authz.permission.WildcardPermission var89 = new org.jsecurity.authz.permission.WildcardPermission("hi!", false);
    boolean var90 = var86.isPermitted((org.jsecurity.authz.Permission)var89);
    boolean var91 = var83.implies((org.jsecurity.authz.Permission)var89);
    var55.add((org.jsecurity.authz.Permission)var83);
    var43.addObjectPermission((org.jsecurity.authz.Permission)var83);
    org.jsecurity.authz.permission.WildcardPermission var96 = new org.jsecurity.authz.permission.WildcardPermission("6464ff", false);
    boolean var97 = var83.implies((org.jsecurity.authz.Permission)var96);
    var0.add((org.jsecurity.authz.Permission)var96);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var4 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var5);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var6);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var14);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var15);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var16);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var24);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var25);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var26);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var36);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var37);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var39);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var40);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var41);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var54 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var66);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var67);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var70);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var84 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var90 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var91 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var97 == false);

  }

  public void test19() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest5.test19");


    org.jsecurity.authz.SimpleRole var1 = new org.jsecurity.authz.SimpleRole();
    org.jsecurity.authz.SimpleAuthorizationInfo var2 = new org.jsecurity.authz.SimpleAuthorizationInfo();
    var2.addRole("a2b823b1e72eae2b727289df8a00a89df8a0bab6ad8a89c4c5c7a9b62a270000");
    org.jsecurity.session.UnknownSessionException var9 = new org.jsecurity.session.UnknownSessionException("dd\uFFFD", (java.io.Serializable)100.0f);
    org.jsecurity.subject.SubjectException var10 = new org.jsecurity.subject.SubjectException("dd\uFFFD", (java.lang.Throwable)var9);
    org.jsecurity.io.SerializationException var11 = new org.jsecurity.io.SerializationException("", (java.lang.Throwable)var10);
    java.lang.Throwable[] var12 = var10.getSuppressed();
    java.util.Set var13 = org.jsecurity.util.CollectionUtils.asSet((java.lang.Object[])var12);
    var2.addRoles((java.util.Collection)var13);
    var1.addAll((java.util.Collection)var13);
    java.lang.String var16 = var1.getName();
    org.jsecurity.authz.permission.WildcardPermission var19 = new org.jsecurity.authz.permission.WildcardPermission("hi!", false);
    var1.add((org.jsecurity.authz.Permission)var19);
    org.jsecurity.authz.permission.WildcardPermission var23 = new org.jsecurity.authz.permission.WildcardPermission("hi!", false);
    var1.add((org.jsecurity.authz.Permission)var23);
    org.jsecurity.authz.SimpleRole var26 = new org.jsecurity.authz.SimpleRole();
    org.jsecurity.authz.permission.WildcardPermission var29 = new org.jsecurity.authz.permission.WildcardPermission("hi!", false);
    boolean var30 = var26.isPermitted((org.jsecurity.authz.Permission)var29);
    org.jsecurity.session.InvalidSessionException var31 = new org.jsecurity.session.InvalidSessionException("org.jsecurity.config.ConfigurationException: dd\uFFFD", (java.io.Serializable)var29);
    org.jsecurity.authz.SimpleRole var32 = new org.jsecurity.authz.SimpleRole();
    org.jsecurity.authz.permission.WildcardPermission var35 = new org.jsecurity.authz.permission.WildcardPermission("hi!", false);
    boolean var36 = var32.isPermitted((org.jsecurity.authz.Permission)var35);
    boolean var37 = var29.implies((org.jsecurity.authz.Permission)var35);
    var1.add((org.jsecurity.authz.Permission)var29);
    java.util.Set var39 = var1.getPermissions();
    java.io.InputStream var41 = org.jsecurity.util.ClassUtils.getResourceAsStream("");
    java.lang.Object[] var42 = new java.lang.Object[] { var41};
    java.util.List var43 = org.jsecurity.util.CollectionUtils.asList(var42);
    org.jsecurity.authc.pam.ModularRealmAuthenticator var44 = new org.jsecurity.authc.pam.ModularRealmAuthenticator(var43);
    org.jsecurity.realm.text.TextConfigurationRealm var45 = new org.jsecurity.realm.text.TextConfigurationRealm();
    java.io.InputStream var47 = org.jsecurity.util.ClassUtils.getResourceAsStream("");
    java.lang.Object[] var48 = new java.lang.Object[] { var47};
    java.util.List var49 = org.jsecurity.util.CollectionUtils.asList(var48);
    org.jsecurity.authc.pam.ModularRealmAuthenticator var50 = new org.jsecurity.authc.pam.ModularRealmAuthenticator(var49);
    org.jsecurity.subject.SimplePrincipalCollection var52 = new org.jsecurity.subject.SimplePrincipalCollection((java.util.Collection)var49, "org.jsecurity.authz.UnauthorizedException: org.jsecurity.session.ExpiredSessionException: ");
    org.jsecurity.session.UnknownSessionException var57 = new org.jsecurity.session.UnknownSessionException("dd\uFFFD", (java.io.Serializable)100.0f);
    org.jsecurity.session.SessionException var59 = new org.jsecurity.session.SessionException("dd\uFFFD", (java.lang.Throwable)var57, (java.io.Serializable)0);
    org.jsecurity.session.SessionException var60 = new org.jsecurity.session.SessionException("dd\uFFFD", (java.lang.Throwable)var57);
    var52.add((java.lang.Object)var60, "org.jsecurity.config.ConfigurationException: dd\uFFFD");
    var45.onLogout((org.jsecurity.subject.PrincipalCollection)var52);
    org.jsecurity.cache.HashtableCacheManager var64 = new org.jsecurity.cache.HashtableCacheManager();
    org.jsecurity.cache.Cache var66 = var64.getCache("\u0000\u0000");
    var45.setAuthorizationCache(var66);
    org.jsecurity.codec.CodecException var70 = new org.jsecurity.codec.CodecException("dd\uFFFD");
    org.jsecurity.authc.ConcurrentAccessException var71 = new org.jsecurity.authc.ConcurrentAccessException("org.jsecurity.authz.UnauthorizedException: org.jsecurity.session.ExpiredSessionException: ", (java.lang.Throwable)var70);
    org.jsecurity.subject.SimplePrincipalCollection var73 = new org.jsecurity.subject.SimplePrincipalCollection((java.lang.Object)var70, "");
    var45.onLogout((org.jsecurity.subject.PrincipalCollection)var73);
    var44.setRealm((org.jsecurity.realm.Realm)var45);
    org.jsecurity.authz.SimpleAuthorizingAccount var77 = new org.jsecurity.authz.SimpleAuthorizingAccount((java.lang.Object)var39, (java.lang.Object)var45, "org.jsecurity.realm.text.PropertiesRealm_983");
    org.jsecurity.authz.SimpleRole var78 = new org.jsecurity.authz.SimpleRole("64d6fb04-9396-4bf8-b814-b9a28f011122", var39);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var12);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var13);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var16);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var30 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var36 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var37 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var39);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var41);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var42);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var43);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var47);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var48);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var49);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var66);

  }

  public void test20() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest5.test20");


    org.jsecurity.session.mgt.SimpleSession var1 = new org.jsecurity.session.mgt.SimpleSession();
    var1.touch();
    org.jsecurity.authz.UnauthenticatedException var5 = new org.jsecurity.authz.UnauthenticatedException();
    org.jsecurity.config.UnresolveableReferenceException var6 = new org.jsecurity.config.UnresolveableReferenceException("", (java.lang.Throwable)var5);
    org.jsecurity.cache.CacheException var7 = new org.jsecurity.cache.CacheException("org.jsecurity.config.ConfigurationException: dd\uFFFD", (java.lang.Throwable)var5);
    java.lang.Object var8 = var1.removeAttribute((java.lang.Object)var7);
    org.jsecurity.session.mgt.eis.MemorySessionDAO var9 = new org.jsecurity.session.mgt.eis.MemorySessionDAO();
    org.jsecurity.cache.Cache var10 = var9.getActiveSessionsCache();
    org.jsecurity.cache.CacheManager var11 = var9.getCacheManager();
    org.jsecurity.cache.HashtableCacheManager var12 = new org.jsecurity.cache.HashtableCacheManager();
    org.jsecurity.cache.Cache var14 = var12.getCache("\u0000\u0000");
    var9.setActiveSessionsCache(var14);
    java.io.InputStream var17 = org.jsecurity.util.ClassUtils.getResourceAsStream("");
    java.lang.Object[] var18 = new java.lang.Object[] { var17};
    java.util.List var19 = org.jsecurity.util.CollectionUtils.asList(var18);
    org.jsecurity.authc.pam.ModularRealmAuthenticator var20 = new org.jsecurity.authc.pam.ModularRealmAuthenticator(var19);
    org.jsecurity.authc.pam.AllSuccessfulModularAuthenticationStrategy var21 = new org.jsecurity.authc.pam.AllSuccessfulModularAuthenticationStrategy();
    var20.setModularAuthenticationStrategy((org.jsecurity.authc.pam.ModularAuthenticationStrategy)var21);
    org.jsecurity.authz.SimpleAuthorizationInfo var23 = new org.jsecurity.authz.SimpleAuthorizationInfo();
    var23.addStringPermission("hi!");
    java.io.InputStream var27 = org.jsecurity.util.ClassUtils.getResourceAsStream("");
    java.lang.Object[] var28 = new java.lang.Object[] { var27};
    java.util.List var29 = org.jsecurity.util.CollectionUtils.asList(var28);
    var23.addRoles((java.util.Collection)var29);
    var20.setAuthenticationListeners((java.util.Collection)var29);
    org.jsecurity.realm.activedirectory.ActiveDirectoryRealm var32 = new org.jsecurity.realm.activedirectory.ActiveDirectoryRealm();
    var32.setPrincipalSuffix("");
    var20.setRealm((org.jsecurity.realm.Realm)var32);
    org.jsecurity.cache.HashtableCacheManager var36 = new org.jsecurity.cache.HashtableCacheManager();
    org.jsecurity.cache.Cache var38 = var36.getCache("\u0000\u0000");
    var32.setAuthorizationCache(var38);
    var9.setActiveSessionsCache(var38);
    org.jsecurity.session.mgt.SimpleSession var41 = new org.jsecurity.session.mgt.SimpleSession();
    java.io.Serializable var42 = var9.create((org.jsecurity.session.Session)var41);
    java.io.Serializable var43 = var41.getId();
    org.jsecurity.session.mgt.SimpleSession var44 = new org.jsecurity.session.mgt.SimpleSession();
    var44.touch();
    var44.validate();
    org.jsecurity.session.mgt.SimpleSession var47 = new org.jsecurity.session.mgt.SimpleSession();
    var47.setTimeout((-1L));
    org.jsecurity.session.mgt.SimpleSession var50 = new org.jsecurity.session.mgt.SimpleSession();
    java.util.Date var51 = var50.getLastAccessTime();
    var47.setLastAccessTime(var51);
    org.jsecurity.session.mgt.SimpleSession var53 = new org.jsecurity.session.mgt.SimpleSession();
    java.util.Date var54 = var53.getLastAccessTime();
    var47.setStopTimestamp(var54);
    var44.setLastAccessTime(var54);
    var41.setStartTimestamp(var54);
    var1.setStartTimestamp(var54);
    var1.validate();
    org.jsecurity.session.UnknownSessionException var60 = new org.jsecurity.session.UnknownSessionException("6f8b35fd-0848-49a4-9560-659760616ad8", (java.io.Serializable)var1);
    java.util.Collection var61 = var1.getAttributeKeys();
    org.jsecurity.JSecurityException var63 = new org.jsecurity.JSecurityException("");
    org.jsecurity.authc.pam.UnsupportedTokenException var64 = new org.jsecurity.authc.pam.UnsupportedTokenException((java.lang.Throwable)var63);
    var1.setId((java.io.Serializable)var64);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var8);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var10);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var11);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var14);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var17);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var18);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var19);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var27);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var28);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var29);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var38);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var42 + "' != '" + "e2dbce5a-2276-49d1-8175-015873d38faf"+ "'", var42.equals("e2dbce5a-2276-49d1-8175-015873d38faf"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var43 + "' != '" + "e2dbce5a-2276-49d1-8175-015873d38faf"+ "'", var43.equals("e2dbce5a-2276-49d1-8175-015873d38faf"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var51);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var54);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var61);

  }

  public void test21() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest5.test21");


    org.jsecurity.session.mgt.eis.MemorySessionDAO var0 = new org.jsecurity.session.mgt.eis.MemorySessionDAO();
    org.jsecurity.cache.Cache var1 = var0.getActiveSessionsCache();
    org.jsecurity.cache.CacheManager var2 = var0.getCacheManager();
    org.jsecurity.cache.HashtableCacheManager var3 = new org.jsecurity.cache.HashtableCacheManager();
    org.jsecurity.cache.Cache var5 = var3.getCache("\u0000\u0000");
    var0.setActiveSessionsCache(var5);
    java.io.InputStream var8 = org.jsecurity.util.ClassUtils.getResourceAsStream("");
    java.lang.Object[] var9 = new java.lang.Object[] { var8};
    java.util.List var10 = org.jsecurity.util.CollectionUtils.asList(var9);
    org.jsecurity.authc.pam.ModularRealmAuthenticator var11 = new org.jsecurity.authc.pam.ModularRealmAuthenticator(var10);
    org.jsecurity.authc.pam.AllSuccessfulModularAuthenticationStrategy var12 = new org.jsecurity.authc.pam.AllSuccessfulModularAuthenticationStrategy();
    var11.setModularAuthenticationStrategy((org.jsecurity.authc.pam.ModularAuthenticationStrategy)var12);
    org.jsecurity.authz.SimpleAuthorizationInfo var14 = new org.jsecurity.authz.SimpleAuthorizationInfo();
    var14.addStringPermission("hi!");
    java.io.InputStream var18 = org.jsecurity.util.ClassUtils.getResourceAsStream("");
    java.lang.Object[] var19 = new java.lang.Object[] { var18};
    java.util.List var20 = org.jsecurity.util.CollectionUtils.asList(var19);
    var14.addRoles((java.util.Collection)var20);
    var11.setAuthenticationListeners((java.util.Collection)var20);
    org.jsecurity.realm.activedirectory.ActiveDirectoryRealm var23 = new org.jsecurity.realm.activedirectory.ActiveDirectoryRealm();
    var23.setPrincipalSuffix("");
    var11.setRealm((org.jsecurity.realm.Realm)var23);
    org.jsecurity.cache.HashtableCacheManager var27 = new org.jsecurity.cache.HashtableCacheManager();
    org.jsecurity.cache.Cache var29 = var27.getCache("\u0000\u0000");
    var23.setAuthorizationCache(var29);
    var0.setActiveSessionsCache(var29);
    var0.setActiveSessionsCacheName("69d3a52f-a464-4f98-8253-2a105929a356");
    org.jsecurity.session.mgt.eis.MemorySessionDAO var34 = new org.jsecurity.session.mgt.eis.MemorySessionDAO();
    org.jsecurity.cache.HashtableCache var36 = new org.jsecurity.cache.HashtableCache("orgjsecurityauthcCredentialsException783ccd3148a842dd890fdf885a7baafAA==");
    org.jsecurity.realm.text.TextConfigurationRealm var37 = new org.jsecurity.realm.text.TextConfigurationRealm();
    java.io.InputStream var39 = org.jsecurity.util.ClassUtils.getResourceAsStream("");
    java.lang.Object[] var40 = new java.lang.Object[] { var39};
    java.util.List var41 = org.jsecurity.util.CollectionUtils.asList(var40);
    org.jsecurity.authc.pam.ModularRealmAuthenticator var42 = new org.jsecurity.authc.pam.ModularRealmAuthenticator(var41);
    org.jsecurity.subject.SimplePrincipalCollection var44 = new org.jsecurity.subject.SimplePrincipalCollection((java.util.Collection)var41, "org.jsecurity.authz.UnauthorizedException: org.jsecurity.session.ExpiredSessionException: ");
    org.jsecurity.session.UnknownSessionException var49 = new org.jsecurity.session.UnknownSessionException("dd\uFFFD", (java.io.Serializable)100.0f);
    org.jsecurity.session.SessionException var51 = new org.jsecurity.session.SessionException("dd\uFFFD", (java.lang.Throwable)var49, (java.io.Serializable)0);
    org.jsecurity.session.SessionException var52 = new org.jsecurity.session.SessionException("dd\uFFFD", (java.lang.Throwable)var49);
    var44.add((java.lang.Object)var52, "org.jsecurity.config.ConfigurationException: dd\uFFFD");
    var37.onLogout((org.jsecurity.subject.PrincipalCollection)var44);
    var36.remove((java.lang.Object)var44);
    java.util.Set var57 = var36.values();
    var34.setActiveSessionsCache((org.jsecurity.cache.Cache)var36);
    var0.setActiveSessionsCache((org.jsecurity.cache.Cache)var36);
    java.lang.String var60 = var36.toString();
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var1);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var2);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var5);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var8);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var9);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var10);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var18);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var19);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var20);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var29);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var39);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var40);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var41);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var57);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var60 + "' != '" + "HashtableCache [orgjsecurityauthcCredentialsException783ccd3148a842dd890fdf885a7baafAA==]"+ "'", var60.equals("HashtableCache [orgjsecurityauthcCredentialsException783ccd3148a842dd890fdf885a7baafAA==]"));

  }

  public void test22() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest5.test22");


    org.jsecurity.realm.jdbc.JdbcRealm var0 = new org.jsecurity.realm.jdbc.JdbcRealm();
    var0.setPermissionsQuery("org.jsecurity.realm.text.TextConfigurationRealm_445");
    var0.setUserRolesQuery("6464ff");
    var0.setUserRolesQuery("NfxhYN7ItBfRAmDBmprtU73ghfEEPpcDJrHPkZ06wiY=");
    var0.setUserRolesQuery("\u0000\u0000");
    var0.setPermissionsQuery("f9548f9e-497e-41ec-97ca-89ede08e20b0");
    var0.setPermissionsLookupEnabled(false);
    var0.setAuthenticationQuery("\uFFFD\uFFFD\u0000");
    var0.setPermissionsQuery("?\u0238\u0018@\uFFFD");

  }

  public void test23() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest5.test23");


    org.jsecurity.authc.IncorrectCredentialsException var1 = new org.jsecurity.authc.IncorrectCredentialsException("d8222dfe-a61b-455b-a44e-1c93ea26aec2");

  }

  public void test24() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest5.test24");


    org.jsecurity.crypto.hash.Md2Hash var1 = org.jsecurity.crypto.hash.Md2Hash.fromBase64String("e2100c27-e41d-4c80-964c-90268ef4a856");
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var1);

  }

  public void test25() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest5.test25");


    org.jsecurity.session.mgt.SimpleSession var0 = new org.jsecurity.session.mgt.SimpleSession();
    var0.touch();
    var0.validate();
    org.jsecurity.session.mgt.SimpleSession var3 = new org.jsecurity.session.mgt.SimpleSession();
    var3.setTimeout((-1L));
    org.jsecurity.session.mgt.SimpleSession var6 = new org.jsecurity.session.mgt.SimpleSession();
    java.util.Date var7 = var6.getLastAccessTime();
    var3.setLastAccessTime(var7);
    org.jsecurity.session.mgt.SimpleSession var9 = new org.jsecurity.session.mgt.SimpleSession();
    java.util.Date var10 = var9.getLastAccessTime();
    var3.setStopTimestamp(var10);
    var0.setLastAccessTime(var10);
    java.io.Serializable var13 = var0.getId();
    var0.stop();
    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      var0.validate();
      fail("Expected exception of type org.jsecurity.session.StoppedSessionException");
    } catch (org.jsecurity.session.StoppedSessionException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var7);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var10);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var13);

  }

  public void test26() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest5.test26");


    org.jsecurity.cache.HashtableCache var1 = new org.jsecurity.cache.HashtableCache("\u0000\u0000\u0000");
    org.jsecurity.session.mgt.SimpleSession var2 = new org.jsecurity.session.mgt.SimpleSession();
    var2.touch();
    org.jsecurity.authz.UnauthenticatedException var6 = new org.jsecurity.authz.UnauthenticatedException();
    org.jsecurity.config.UnresolveableReferenceException var7 = new org.jsecurity.config.UnresolveableReferenceException("", (java.lang.Throwable)var6);
    org.jsecurity.cache.CacheException var8 = new org.jsecurity.cache.CacheException("org.jsecurity.config.ConfigurationException: dd\uFFFD", (java.lang.Throwable)var6);
    java.lang.Object var9 = var2.removeAttribute((java.lang.Object)var8);
    org.jsecurity.mgt.DefaultSecurityManager var10 = new org.jsecurity.mgt.DefaultSecurityManager();
    org.jsecurity.authc.pam.AllSuccessfulModularAuthenticationStrategy var11 = new org.jsecurity.authc.pam.AllSuccessfulModularAuthenticationStrategy();
    org.jsecurity.authc.pam.AllSuccessfulModularAuthenticationStrategy var12 = new org.jsecurity.authc.pam.AllSuccessfulModularAuthenticationStrategy();
    char[] var14 = new char[] { };
    org.jsecurity.authc.UsernamePasswordToken var16 = new org.jsecurity.authc.UsernamePasswordToken("hi!", var14, true);
    org.jsecurity.authc.SimpleAccount var17 = new org.jsecurity.authc.SimpleAccount();
    var17.setCredentialsExpired(false);
    boolean var20 = var17.isLocked();
    org.jsecurity.authc.AuthenticationInfo var21 = var12.afterAllAttempts((org.jsecurity.authc.AuthenticationToken)var16, (org.jsecurity.authc.AuthenticationInfo)var17);
    char[] var25 = new char[] { '4', '#'};
    org.jsecurity.authc.UsernamePasswordToken var26 = new org.jsecurity.authc.UsernamePasswordToken("\u0000\u0000", var25);
    org.jsecurity.authc.SimpleAccount var27 = new org.jsecurity.authc.SimpleAccount();
    var27.setCredentialsExpired(false);
    var27.setCredentialsExpired(false);
    boolean var32 = var27.isCredentialsExpired();
    org.jsecurity.authc.AuthenticationInfo var33 = var12.afterAllAttempts((org.jsecurity.authc.AuthenticationToken)var26, (org.jsecurity.authc.AuthenticationInfo)var27);
    org.jsecurity.authz.UnauthenticatedException var37 = new org.jsecurity.authz.UnauthenticatedException();
    org.jsecurity.config.UnresolveableReferenceException var38 = new org.jsecurity.config.UnresolveableReferenceException("", (java.lang.Throwable)var37);
    org.jsecurity.cache.CacheException var39 = new org.jsecurity.cache.CacheException("org.jsecurity.config.ConfigurationException: dd\uFFFD", (java.lang.Throwable)var37);
    org.jsecurity.authc.SimpleAuthenticationInfo var41 = new org.jsecurity.authc.SimpleAuthenticationInfo((java.lang.Object)"org.jsecurity.config.ConfigurationException: dd\uFFFD", (java.lang.Object)var39, "a2b823b1e72eae2b727289df8a00a89df8a0bab6ad8a89c4c5c7a9b62a270000");
    org.jsecurity.subject.PrincipalCollection var42 = var41.getPrincipals();
    org.jsecurity.authc.AuthenticationInfo var43 = var11.afterAllAttempts((org.jsecurity.authc.AuthenticationToken)var26, (org.jsecurity.authc.AuthenticationInfo)var41);
    var10.setModularAuthenticationStrategy((org.jsecurity.authc.pam.ModularAuthenticationStrategy)var11);
    org.jsecurity.subject.RememberMeManager var45 = var10.getRememberMeManager();
    org.jsecurity.authc.pam.ModularRealmAuthenticator var46 = new org.jsecurity.authc.pam.ModularRealmAuthenticator();
    var10.setAuthenticator((org.jsecurity.authc.Authenticator)var46);
    var1.put((java.lang.Object)var2, (java.lang.Object)var46);
    org.jsecurity.realm.text.TextConfigurationRealm var49 = new org.jsecurity.realm.text.TextConfigurationRealm();
    org.jsecurity.realm.text.TextConfigurationRealm var50 = new org.jsecurity.realm.text.TextConfigurationRealm();
    java.io.InputStream var52 = org.jsecurity.util.ClassUtils.getResourceAsStream("");
    java.lang.Object[] var53 = new java.lang.Object[] { var52};
    java.util.List var54 = org.jsecurity.util.CollectionUtils.asList(var53);
    org.jsecurity.authc.pam.ModularRealmAuthenticator var55 = new org.jsecurity.authc.pam.ModularRealmAuthenticator(var54);
    org.jsecurity.subject.SimplePrincipalCollection var57 = new org.jsecurity.subject.SimplePrincipalCollection((java.util.Collection)var54, "org.jsecurity.authz.UnauthorizedException: org.jsecurity.session.ExpiredSessionException: ");
    org.jsecurity.session.UnknownSessionException var62 = new org.jsecurity.session.UnknownSessionException("dd\uFFFD", (java.io.Serializable)100.0f);
    org.jsecurity.session.SessionException var64 = new org.jsecurity.session.SessionException("dd\uFFFD", (java.lang.Throwable)var62, (java.io.Serializable)0);
    org.jsecurity.session.SessionException var65 = new org.jsecurity.session.SessionException("dd\uFFFD", (java.lang.Throwable)var62);
    var57.add((java.lang.Object)var65, "org.jsecurity.config.ConfigurationException: dd\uFFFD");
    var50.onLogout((org.jsecurity.subject.PrincipalCollection)var57);
    java.util.Collection var70 = var57.fromRealm("\u0000\u0000\u0000");
    var49.onLogout((org.jsecurity.subject.PrincipalCollection)var57);
    java.lang.Object var72 = var2.removeAttribute((java.lang.Object)var49);
    var2.setExpired(false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var9);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var14);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var20 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var21);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var25);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var32 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var33);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var42);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var43);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var45);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var52);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var53);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var54);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var70);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var72);

  }

  public void test27() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest5.test27");


    org.jsecurity.session.mgt.eis.MemorySessionDAO var0 = new org.jsecurity.session.mgt.eis.MemorySessionDAO();
    org.jsecurity.cache.Cache var1 = var0.getActiveSessionsCache();
    org.jsecurity.cache.CacheManager var2 = var0.getCacheManager();
    org.jsecurity.cache.HashtableCacheManager var3 = new org.jsecurity.cache.HashtableCacheManager();
    org.jsecurity.cache.Cache var5 = var3.getCache("\u0000\u0000");
    var0.setActiveSessionsCache(var5);
    java.io.InputStream var8 = org.jsecurity.util.ClassUtils.getResourceAsStream("");
    java.lang.Object[] var9 = new java.lang.Object[] { var8};
    java.util.List var10 = org.jsecurity.util.CollectionUtils.asList(var9);
    org.jsecurity.authc.pam.ModularRealmAuthenticator var11 = new org.jsecurity.authc.pam.ModularRealmAuthenticator(var10);
    org.jsecurity.authc.pam.AllSuccessfulModularAuthenticationStrategy var12 = new org.jsecurity.authc.pam.AllSuccessfulModularAuthenticationStrategy();
    var11.setModularAuthenticationStrategy((org.jsecurity.authc.pam.ModularAuthenticationStrategy)var12);
    org.jsecurity.authz.SimpleAuthorizationInfo var14 = new org.jsecurity.authz.SimpleAuthorizationInfo();
    var14.addStringPermission("hi!");
    java.io.InputStream var18 = org.jsecurity.util.ClassUtils.getResourceAsStream("");
    java.lang.Object[] var19 = new java.lang.Object[] { var18};
    java.util.List var20 = org.jsecurity.util.CollectionUtils.asList(var19);
    var14.addRoles((java.util.Collection)var20);
    var11.setAuthenticationListeners((java.util.Collection)var20);
    org.jsecurity.realm.activedirectory.ActiveDirectoryRealm var23 = new org.jsecurity.realm.activedirectory.ActiveDirectoryRealm();
    var23.setPrincipalSuffix("");
    var11.setRealm((org.jsecurity.realm.Realm)var23);
    org.jsecurity.cache.HashtableCacheManager var27 = new org.jsecurity.cache.HashtableCacheManager();
    org.jsecurity.cache.Cache var29 = var27.getCache("\u0000\u0000");
    var23.setAuthorizationCache(var29);
    var0.setActiveSessionsCache(var29);
    org.jsecurity.session.mgt.SimpleSession var32 = new org.jsecurity.session.mgt.SimpleSession();
    java.io.Serializable var33 = var0.create((org.jsecurity.session.Session)var32);
    org.jsecurity.session.mgt.SimpleSession var34 = new org.jsecurity.session.mgt.SimpleSession();
    var34.touch();
    var34.validate();
    org.jsecurity.session.mgt.SimpleSession var37 = new org.jsecurity.session.mgt.SimpleSession();
    var37.setTimeout((-1L));
    org.jsecurity.session.mgt.SimpleSession var40 = new org.jsecurity.session.mgt.SimpleSession();
    java.util.Date var41 = var40.getLastAccessTime();
    var37.setLastAccessTime(var41);
    org.jsecurity.session.mgt.SimpleSession var43 = new org.jsecurity.session.mgt.SimpleSession();
    java.util.Date var44 = var43.getLastAccessTime();
    var37.setStopTimestamp(var44);
    var34.setLastAccessTime(var44);
    var32.setLastAccessTime(var44);
    org.jsecurity.session.mgt.ImmutableProxiedSession var48 = new org.jsecurity.session.mgt.ImmutableProxiedSession((org.jsecurity.session.Session)var32);
    org.jsecurity.session.ProxiedSession var49 = new org.jsecurity.session.ProxiedSession((org.jsecurity.session.Session)var32);
    org.jsecurity.realm.jdbc.JdbcRealm var50 = new org.jsecurity.realm.jdbc.JdbcRealm();
    var50.setPermissionsQuery("org.jsecurity.realm.text.TextConfigurationRealm_445");
    var50.setUserRolesQuery("6464ff");
    org.jsecurity.crypto.BlowfishCipher var55 = new org.jsecurity.crypto.BlowfishCipher();
    java.security.Key var56 = org.jsecurity.crypto.BlowfishCipher.generateNewKey();
    var55.setKey(var56);
    java.security.Key var58 = org.jsecurity.crypto.BlowfishCipher.generateNewKey();
    var55.setKey(var58);
    byte[] var63 = new byte[] { (byte)100, (byte)100, (byte)(-1)};
    java.lang.String var64 = org.jsecurity.codec.CodecSupport.toString(var63);
    char[] var65 = org.jsecurity.codec.CodecSupport.toChars(var63);
    boolean var66 = org.jsecurity.codec.Base64.isBase64(var63);
    boolean var67 = org.jsecurity.codec.Base64.isBase64(var63);
    boolean var68 = org.jsecurity.codec.Base64.isBase64(var63);
    java.lang.String var69 = org.jsecurity.codec.Hex.encodeToString(var63);
    byte[] var73 = new byte[] { (byte)100, (byte)100, (byte)(-1)};
    java.lang.String var74 = org.jsecurity.codec.CodecSupport.toString(var73);
    char[] var75 = org.jsecurity.codec.CodecSupport.toChars(var73);
    boolean var76 = org.jsecurity.codec.Base64.isBase64(var73);
    boolean var77 = org.jsecurity.codec.Base64.isBase64(var73);
    boolean var78 = org.jsecurity.codec.Base64.isBase64(var73);
    java.lang.String var79 = org.jsecurity.codec.Base64.encodeToString(var73);
    byte[] var80 = var55.encrypt(var63, var73);
    var49.setAttribute((java.lang.Object)"6464ff", (java.lang.Object)var73);
    var49.setTimeout(100L);
    var49.touch();
    java.util.Date var85 = var49.getLastAccessTime();
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var1);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var2);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var5);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var8);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var9);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var10);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var18);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var19);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var20);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var29);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var33 + "' != '" + "4715d7ef-6c04-4682-97ae-b4b0a6ec7f3d"+ "'", var33.equals("4715d7ef-6c04-4682-97ae-b4b0a6ec7f3d"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var41);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var44);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var56);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var58);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var63);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var64 + "' != '" + "dd\uFFFD"+ "'", var64.equals("dd\uFFFD"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var65);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var66 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var67 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var68 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var69 + "' != '" + "6464ff"+ "'", var69.equals("6464ff"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var73);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var74 + "' != '" + "dd\uFFFD"+ "'", var74.equals("dd\uFFFD"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var75);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var76 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var77 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var78 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var79 + "' != '" + "ZGT/"+ "'", var79.equals("ZGT/"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var80);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var85);

  }

  public void test28() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest5.test28");


    org.jsecurity.cache.ehcache.EhCacheManager var0 = new org.jsecurity.cache.ehcache.EhCacheManager();
    net.sf.ehcache.CacheManager var1 = var0.getCacheManager();
    var0.init();
    var0.setCacheManagerConfigFile("9f00e408-27bf-467d-a45f-01bb47b51aa6");
    net.sf.ehcache.CacheManager var5 = var0.getCacheManager();
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var1);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var5);

  }

  public void test29() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest5.test29");


    org.jsecurity.session.mgt.SimpleSession var0 = new org.jsecurity.session.mgt.SimpleSession();
    var0.setTimeout((-1L));
    org.jsecurity.session.mgt.SimpleSession var3 = new org.jsecurity.session.mgt.SimpleSession();
    java.util.Date var4 = var3.getLastAccessTime();
    var0.setLastAccessTime(var4);
    org.jsecurity.session.mgt.SimpleSession var6 = new org.jsecurity.session.mgt.SimpleSession();
    java.util.Date var7 = var6.getLastAccessTime();
    var0.setStopTimestamp(var7);
    var0.touch();
    java.util.Date var10 = var0.getStopTimestamp();
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var4);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var7);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var10);

  }

  public void test30() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest5.test30");


    org.jsecurity.realm.activedirectory.ActiveDirectoryRealm var0 = new org.jsecurity.realm.activedirectory.ActiveDirectoryRealm();
    org.jsecurity.authc.credential.Sha256CredentialsMatcher var1 = new org.jsecurity.authc.credential.Sha256CredentialsMatcher();
    var0.setCredentialsMatcher((org.jsecurity.authc.credential.CredentialsMatcher)var1);
    java.lang.String var3 = var0.getAuthorizationCacheName();
    var0.setUrl("hi!");
    org.jsecurity.realm.ldap.DefaultLdapContextFactory var6 = new org.jsecurity.realm.ldap.DefaultLdapContextFactory();
    var0.setLdapContextFactory((org.jsecurity.realm.ldap.LdapContextFactory)var6);
    org.jsecurity.config.ReflectionBuilder var8 = new org.jsecurity.config.ReflectionBuilder();
    org.jsecurity.io.IniResource var9 = new org.jsecurity.io.IniResource();
    var9.setCharsetName("org.jsecurity.authz.UnauthorizedException: org.jsecurity.session.ExpiredSessionException: ");
    java.util.Map var12 = var9.getSections();
    java.util.Map var13 = var8.buildObjects(var12);
    var6.setAdditionalEnvironment(var12);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var3);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var12);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var13);

  }

  public void test31() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest5.test31");


    org.jsecurity.mgt.DefaultSecurityManager var0 = new org.jsecurity.mgt.DefaultSecurityManager();
    org.jsecurity.authc.pam.AllSuccessfulModularAuthenticationStrategy var1 = new org.jsecurity.authc.pam.AllSuccessfulModularAuthenticationStrategy();
    org.jsecurity.authc.pam.AllSuccessfulModularAuthenticationStrategy var2 = new org.jsecurity.authc.pam.AllSuccessfulModularAuthenticationStrategy();
    char[] var4 = new char[] { };
    org.jsecurity.authc.UsernamePasswordToken var6 = new org.jsecurity.authc.UsernamePasswordToken("hi!", var4, true);
    org.jsecurity.authc.SimpleAccount var7 = new org.jsecurity.authc.SimpleAccount();
    var7.setCredentialsExpired(false);
    boolean var10 = var7.isLocked();
    org.jsecurity.authc.AuthenticationInfo var11 = var2.afterAllAttempts((org.jsecurity.authc.AuthenticationToken)var6, (org.jsecurity.authc.AuthenticationInfo)var7);
    char[] var15 = new char[] { '4', '#'};
    org.jsecurity.authc.UsernamePasswordToken var16 = new org.jsecurity.authc.UsernamePasswordToken("\u0000\u0000", var15);
    org.jsecurity.authc.SimpleAccount var17 = new org.jsecurity.authc.SimpleAccount();
    var17.setCredentialsExpired(false);
    var17.setCredentialsExpired(false);
    boolean var22 = var17.isCredentialsExpired();
    org.jsecurity.authc.AuthenticationInfo var23 = var2.afterAllAttempts((org.jsecurity.authc.AuthenticationToken)var16, (org.jsecurity.authc.AuthenticationInfo)var17);
    org.jsecurity.authz.UnauthenticatedException var27 = new org.jsecurity.authz.UnauthenticatedException();
    org.jsecurity.config.UnresolveableReferenceException var28 = new org.jsecurity.config.UnresolveableReferenceException("", (java.lang.Throwable)var27);
    org.jsecurity.cache.CacheException var29 = new org.jsecurity.cache.CacheException("org.jsecurity.config.ConfigurationException: dd\uFFFD", (java.lang.Throwable)var27);
    org.jsecurity.authc.SimpleAuthenticationInfo var31 = new org.jsecurity.authc.SimpleAuthenticationInfo((java.lang.Object)"org.jsecurity.config.ConfigurationException: dd\uFFFD", (java.lang.Object)var29, "a2b823b1e72eae2b727289df8a00a89df8a0bab6ad8a89c4c5c7a9b62a270000");
    org.jsecurity.subject.PrincipalCollection var32 = var31.getPrincipals();
    org.jsecurity.authc.AuthenticationInfo var33 = var1.afterAllAttempts((org.jsecurity.authc.AuthenticationToken)var16, (org.jsecurity.authc.AuthenticationInfo)var31);
    var0.setModularAuthenticationStrategy((org.jsecurity.authc.pam.ModularAuthenticationStrategy)var1);
    org.jsecurity.session.mgt.SimpleSession var37 = new org.jsecurity.session.mgt.SimpleSession();
    var37.setTimeout((-1L));
    org.jsecurity.session.mgt.SimpleSession var40 = new org.jsecurity.session.mgt.SimpleSession();
    java.util.Date var41 = var40.getLastAccessTime();
    var37.setLastAccessTime(var41);
    java.net.InetAddress var43 = var37.getHostAddress();
    org.jsecurity.authc.UsernamePasswordToken var44 = new org.jsecurity.authc.UsernamePasswordToken("10f5b491-38ac-4c02-8085-950abb026a06", "NfxhYN7ItBfRAmDBmprtU73ghfEEPpcDJrHPkZ06wiY=", var43);
    org.jsecurity.session.Session var45 = var0.start(var43);
    org.jsecurity.cache.ehcache.EhCacheManager var46 = new org.jsecurity.cache.ehcache.EhCacheManager();
    net.sf.ehcache.CacheManager var47 = var46.getCacheManager();
    var46.setCacheManagerConfigFile("org.jsecurity.authz.UnauthorizedException: org.jsecurity.session.ExpiredSessionException: ");
    var0.setCacheManager((org.jsecurity.cache.CacheManager)var46);
    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      var0.setRememberMeEncryptionCipherKeyHex("org.jsecurity.authc.IncorrectCredentialsException: \u0000\u0000");
      fail("Expected exception of type java.lang.IllegalStateException");
    } catch (java.lang.IllegalStateException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var4);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var10 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var11);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var15);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var22 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var23);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var32);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var33);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var41);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var43);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var45);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var47);

  }

  public void test32() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest5.test32");


    org.jsecurity.realm.activedirectory.ActiveDirectoryRealm var2 = new org.jsecurity.realm.activedirectory.ActiveDirectoryRealm();
    org.jsecurity.authc.credential.Sha256CredentialsMatcher var3 = new org.jsecurity.authc.credential.Sha256CredentialsMatcher();
    var2.setCredentialsMatcher((org.jsecurity.authc.credential.CredentialsMatcher)var3);
    java.lang.String var5 = var2.getAuthorizationCacheName();
    var2.setPrincipalSuffix("org.jsecurity.config.ConfigurationException: dd\uFFFD");
    org.jsecurity.authz.permission.PermissionResolver var8 = var2.getPermissionResolver();
    java.util.Set var9 = org.jsecurity.util.PermissionUtils.resolveDelimitedPermissions("NfxhYN7ItBfRAmDBmprtU73ghfEEPpcDJrHPkZ06wiY=", var8);
    java.util.Set var10 = org.jsecurity.util.PermissionUtils.resolveDelimitedPermissions("\uFFFD\uFFFD#\uFFFD\uFFFD.\uFFFD+r\uFFFD\u6959(\uFFFD\uFFFDW\uFFFDq\uFFFD.\uFFFD\uFFFD^jY\uFFFDj\uFFFDa\uFFFD\uFFFD\uFFFDj\u0628\u0000", var8);
    org.jsecurity.authc.LockedAccountException var12 = new org.jsecurity.authc.LockedAccountException();
    org.jsecurity.authc.ConcurrentAccessException var13 = new org.jsecurity.authc.ConcurrentAccessException("0220fc2d-2559-421b-822b-6ed559f96c25", (java.lang.Throwable)var12);
    org.jsecurity.crypto.hash.Md2Hash var16 = org.jsecurity.crypto.hash.Md2Hash.fromBase64String("a2b823b1e72eae2b727289df8a00a89df8a0bab6ad8a89c4c5c7a9b62a270000");
    org.jsecurity.authc.credential.Md2CredentialsMatcher var17 = new org.jsecurity.authc.credential.Md2CredentialsMatcher();
    org.jsecurity.authz.SimpleAuthorizingAccount var19 = new org.jsecurity.authz.SimpleAuthorizingAccount((java.lang.Object)"a2b823b1e72eae2b727289df8a00a89df8a0bab6ad8a89c4c5c7a9b62a270000", (java.lang.Object)var17, "");
    var19.addStringPermission("hi!");
    org.jsecurity.authz.SimpleAuthorizationInfo var22 = new org.jsecurity.authz.SimpleAuthorizationInfo();
    var22.addRole("a2b823b1e72eae2b727289df8a00a89df8a0bab6ad8a89c4c5c7a9b62a270000");
    org.jsecurity.session.UnknownSessionException var29 = new org.jsecurity.session.UnknownSessionException("dd\uFFFD", (java.io.Serializable)100.0f);
    org.jsecurity.subject.SubjectException var30 = new org.jsecurity.subject.SubjectException("dd\uFFFD", (java.lang.Throwable)var29);
    org.jsecurity.io.SerializationException var31 = new org.jsecurity.io.SerializationException("", (java.lang.Throwable)var30);
    java.lang.Throwable[] var32 = var30.getSuppressed();
    java.util.Set var33 = org.jsecurity.util.CollectionUtils.asSet((java.lang.Object[])var32);
    var22.addRoles((java.util.Collection)var33);
    boolean var35 = var19.isPermittedAll((java.util.Collection)var33);
    org.jsecurity.cache.HashtableCache var37 = new org.jsecurity.cache.HashtableCache("783ccd31-48a8-42dd-890f-df885a7baaff");
    java.lang.String var38 = var37.toString();
    java.util.Set var39 = var37.values();
    org.jsecurity.authc.SimpleAccount var40 = new org.jsecurity.authc.SimpleAccount((java.util.Collection)var10, (java.lang.Object)"0220fc2d-2559-421b-822b-6ed559f96c25", "10f5b491-38ac-4c02-8085-950abb026a06", var33, var39);
    org.jsecurity.session.UnknownSessionException var44 = new org.jsecurity.session.UnknownSessionException("dd\uFFFD", (java.io.Serializable)100.0f);
    org.jsecurity.config.ConfigurationException var45 = new org.jsecurity.config.ConfigurationException("dd\uFFFD", (java.lang.Throwable)var44);
    java.lang.String var46 = var45.toString();
    org.jsecurity.crypto.hash.Sha512Hash var48 = new org.jsecurity.crypto.hash.Sha512Hash((java.lang.Object)"10f5b491-38ac-4c02-8085-950abb026a06", (java.lang.Object)var46, 100);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var5);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var8);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var9);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var10);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var16);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var32);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var33);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var35 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var38 + "' != '" + "HashtableCache [783ccd31-48a8-42dd-890f-df885a7baaff]"+ "'", var38.equals("HashtableCache [783ccd31-48a8-42dd-890f-df885a7baaff]"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var39);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var46 + "' != '" + "org.jsecurity.config.ConfigurationException: dd\uFFFD"+ "'", var46.equals("org.jsecurity.config.ConfigurationException: dd\uFFFD"));

  }

  public void test33() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest5.test33");


    org.jsecurity.realm.activedirectory.ActiveDirectoryRealm var0 = new org.jsecurity.realm.activedirectory.ActiveDirectoryRealm();
    var0.init();
    var0.setSystemUsername("7ac52728-a594-485e-8fa4-b9d179454b9f");

  }

  public void test34() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest5.test34");


    org.jsecurity.io.IniResource var5 = new org.jsecurity.io.IniResource();
    java.lang.String var6 = var5.getCharsetName();
    org.jsecurity.session.UnknownSessionException var7 = new org.jsecurity.session.UnknownSessionException("", (java.io.Serializable)var5);
    org.jsecurity.authz.UnauthorizedException var8 = new org.jsecurity.authz.UnauthorizedException("org.jsecurity.config.ConfigurationException: dd\uFFFD", (java.lang.Throwable)var7);
    org.jsecurity.session.SessionException var9 = new org.jsecurity.session.SessionException("65e65177-d0e5-404e-b955-c04bc53877e7", (java.lang.Throwable)var8);
    org.jsecurity.authc.ConcurrentAccessException var10 = new org.jsecurity.authc.ConcurrentAccessException("4a0e5e90-249b-4eb3-a134-0b53851d6caf", (java.lang.Throwable)var8);
    org.jsecurity.authc.ConcurrentAccessException var11 = new org.jsecurity.authc.ConcurrentAccessException("\uFFFD\uFFFD#\uFFFD\uFFFD.\uFFFD+r\uFFFD\u6959(\uFFFD\uFFFDW\uFFFDq\uFFFD.\uFFFD\uFFFD^jY\uFFFDj\uFFFDa\uFFFD\uFFFD\uFFFDj\u0628", (java.lang.Throwable)var8);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var6);

  }

  public void test35() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest5.test35");


    org.jsecurity.authz.SimpleRole var0 = new org.jsecurity.authz.SimpleRole();
    org.jsecurity.authz.SimpleAuthorizationInfo var1 = new org.jsecurity.authz.SimpleAuthorizationInfo();
    var1.addRole("a2b823b1e72eae2b727289df8a00a89df8a0bab6ad8a89c4c5c7a9b62a270000");
    org.jsecurity.session.UnknownSessionException var8 = new org.jsecurity.session.UnknownSessionException("dd\uFFFD", (java.io.Serializable)100.0f);
    org.jsecurity.subject.SubjectException var9 = new org.jsecurity.subject.SubjectException("dd\uFFFD", (java.lang.Throwable)var8);
    org.jsecurity.io.SerializationException var10 = new org.jsecurity.io.SerializationException("", (java.lang.Throwable)var9);
    java.lang.Throwable[] var11 = var9.getSuppressed();
    java.util.Set var12 = org.jsecurity.util.CollectionUtils.asSet((java.lang.Object[])var11);
    var1.addRoles((java.util.Collection)var12);
    var0.addAll((java.util.Collection)var12);
    java.lang.String var15 = var0.getName();
    org.jsecurity.authz.permission.WildcardPermission var18 = new org.jsecurity.authz.permission.WildcardPermission("hi!", false);
    var0.add((org.jsecurity.authz.Permission)var18);
    org.jsecurity.realm.activedirectory.ActiveDirectoryRealm var20 = new org.jsecurity.realm.activedirectory.ActiveDirectoryRealm();
    var20.init();
    var20.init();
    org.jsecurity.realm.activedirectory.ActiveDirectoryRealm var23 = new org.jsecurity.realm.activedirectory.ActiveDirectoryRealm();
    org.jsecurity.authc.credential.Sha256CredentialsMatcher var24 = new org.jsecurity.authc.credential.Sha256CredentialsMatcher();
    var23.setCredentialsMatcher((org.jsecurity.authc.credential.CredentialsMatcher)var24);
    java.lang.String var26 = var23.getAuthorizationCacheName();
    var23.setUrl("hi!");
    org.jsecurity.realm.ldap.DefaultLdapContextFactory var29 = new org.jsecurity.realm.ldap.DefaultLdapContextFactory();
    var23.setLdapContextFactory((org.jsecurity.realm.ldap.LdapContextFactory)var29);
    var29.setAuthentication("dd\uFFFD");
    var20.setLdapContextFactory((org.jsecurity.realm.ldap.LdapContextFactory)var29);
    boolean var34 = var0.equals((java.lang.Object)var29);
    var29.setSearchBase("e1f737f7969ef7773ae3d73d6dc69e77cdfaf3ce1be776bd");
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var11);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var12);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var15);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var26);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var34 == false);

  }

  public void test36() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest5.test36");


    byte[] var4 = new byte[] { (byte)100, (byte)100, (byte)(-1)};
    java.lang.String var5 = org.jsecurity.codec.CodecSupport.toString(var4);
    byte[] var6 = org.jsecurity.codec.Base64.encode(var4);
    char[] var7 = org.jsecurity.codec.CodecSupport.toChars(var6);
    org.jsecurity.authc.UsernamePasswordToken var9 = new org.jsecurity.authc.UsernamePasswordToken("org.jsecurity.realm.SimpleAccountRealm-55-authorization", var7, false);
    char[] var10 = var9.getPassword();
    java.net.InetAddress var11 = var9.getInetAddress();
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var4);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var5 + "' != '" + "dd\uFFFD"+ "'", var5.equals("dd\uFFFD"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var6);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var7);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var10);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var11);

  }

  public void test37() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest5.test37");


    org.jsecurity.crypto.BlowfishCipher var0 = new org.jsecurity.crypto.BlowfishCipher();
    byte[] var4 = new byte[] { (byte)100, (byte)100, (byte)(-1)};
    java.lang.String var5 = org.jsecurity.codec.CodecSupport.toString(var4);
    byte[] var6 = org.jsecurity.codec.Base64.encode(var4);
    char[] var7 = org.jsecurity.codec.CodecSupport.toChars(var6);
    byte[] var11 = new byte[] { (byte)100, (byte)100, (byte)(-1)};
    java.lang.String var12 = org.jsecurity.codec.CodecSupport.toString(var11);
    byte[] var14 = org.jsecurity.codec.Base64.encode(var11, false);
    byte[] var15 = var0.encrypt(var6, var11);
    org.jsecurity.crypto.BlowfishCipher var16 = new org.jsecurity.crypto.BlowfishCipher();
    byte[] var20 = new byte[] { (byte)100, (byte)100, (byte)(-1)};
    java.lang.String var21 = org.jsecurity.codec.CodecSupport.toString(var20);
    byte[] var23 = org.jsecurity.codec.Base64.decode("hi!");
    byte[] var24 = var16.encrypt(var20, var23);
    org.jsecurity.crypto.BlowfishCipher var25 = new org.jsecurity.crypto.BlowfishCipher();
    java.security.Key var26 = var25.getKey();
    java.security.Key var27 = var25.getKey();
    var16.setKey(var27);
    java.security.Key var29 = var16.getKey();
    var0.setKey(var29);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var4);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var5 + "' != '" + "dd\uFFFD"+ "'", var5.equals("dd\uFFFD"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var6);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var7);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var11);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var12 + "' != '" + "dd\uFFFD"+ "'", var12.equals("dd\uFFFD"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var14);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var15);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var20);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var21 + "' != '" + "dd\uFFFD"+ "'", var21.equals("dd\uFFFD"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var23);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var24);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var26);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var27);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var29);

  }

  public void test38() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest5.test38");


    org.jsecurity.authz.SimpleAuthorizationInfo var0 = new org.jsecurity.authz.SimpleAuthorizationInfo();
    var0.addStringPermission("hi!");
    java.util.Set var3 = var0.getObjectPermissions();
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var3);

  }

  public void test39() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest5.test39");


    org.jsecurity.session.mgt.DelegatingSession var0 = new org.jsecurity.session.mgt.DelegatingSession();
    java.io.Serializable var1 = var0.getId();
    org.jsecurity.session.mgt.SessionManager var2 = var0.getSessionManager();
    org.jsecurity.session.mgt.SimpleSession var3 = new org.jsecurity.session.mgt.SimpleSession();
    org.jsecurity.session.UnknownSessionException var7 = new org.jsecurity.session.UnknownSessionException("dd\uFFFD", (java.io.Serializable)100.0f);
    org.jsecurity.session.SessionException var9 = new org.jsecurity.session.SessionException("dd\uFFFD", (java.lang.Throwable)var7, (java.io.Serializable)0);
    org.jsecurity.authc.AccountException var10 = new org.jsecurity.authc.AccountException((java.lang.Throwable)var7);
    var3.setId((java.io.Serializable)var7);
    var3.setTimeout((-1L));
    org.jsecurity.session.mgt.SimpleSession var14 = new org.jsecurity.session.mgt.SimpleSession();
    var14.setTimeout((-1L));
    org.jsecurity.session.mgt.SimpleSession var17 = new org.jsecurity.session.mgt.SimpleSession();
    var17.setTimeout((-1L));
    org.jsecurity.session.mgt.SimpleSession var20 = new org.jsecurity.session.mgt.SimpleSession();
    java.util.Date var21 = var20.getLastAccessTime();
    var17.setLastAccessTime(var21);
    org.jsecurity.session.mgt.SimpleSession var23 = new org.jsecurity.session.mgt.SimpleSession();
    java.util.Date var24 = var23.getLastAccessTime();
    var17.setStopTimestamp(var24);
    var14.setStartTimestamp(var24);
    var3.setLastAccessTime(var24);
    var0.setId((java.io.Serializable)var24);
    org.jsecurity.mgt.DefaultSecurityManager var29 = new org.jsecurity.mgt.DefaultSecurityManager();
    java.io.InputStream var31 = org.jsecurity.util.ClassUtils.getResourceAsStream("");
    java.lang.Object[] var32 = new java.lang.Object[] { var31};
    java.util.List var33 = org.jsecurity.util.CollectionUtils.asList(var32);
    org.jsecurity.authc.pam.ModularRealmAuthenticator var34 = new org.jsecurity.authc.pam.ModularRealmAuthenticator(var33);
    org.jsecurity.authc.pam.AllSuccessfulModularAuthenticationStrategy var35 = new org.jsecurity.authc.pam.AllSuccessfulModularAuthenticationStrategy();
    var34.setModularAuthenticationStrategy((org.jsecurity.authc.pam.ModularAuthenticationStrategy)var35);
    org.jsecurity.authz.SimpleAuthorizationInfo var37 = new org.jsecurity.authz.SimpleAuthorizationInfo();
    var37.addStringPermission("hi!");
    java.io.InputStream var41 = org.jsecurity.util.ClassUtils.getResourceAsStream("");
    java.lang.Object[] var42 = new java.lang.Object[] { var41};
    java.util.List var43 = org.jsecurity.util.CollectionUtils.asList(var42);
    var37.addRoles((java.util.Collection)var43);
    var34.setAuthenticationListeners((java.util.Collection)var43);
    var29.setSessionListeners((java.util.Collection)var43);
    java.io.InputStream var48 = org.jsecurity.util.ClassUtils.getResourceAsStream("");
    java.lang.Object[] var49 = new java.lang.Object[] { var48};
    java.util.List var50 = org.jsecurity.util.CollectionUtils.asList(var49);
    org.jsecurity.authc.pam.ModularRealmAuthenticator var51 = new org.jsecurity.authc.pam.ModularRealmAuthenticator(var50);
    org.jsecurity.authc.pam.AllSuccessfulModularAuthenticationStrategy var52 = new org.jsecurity.authc.pam.AllSuccessfulModularAuthenticationStrategy();
    var51.setModularAuthenticationStrategy((org.jsecurity.authc.pam.ModularAuthenticationStrategy)var52);
    org.jsecurity.authz.SimpleAuthorizationInfo var54 = new org.jsecurity.authz.SimpleAuthorizationInfo();
    var54.addStringPermission("hi!");
    java.io.InputStream var58 = org.jsecurity.util.ClassUtils.getResourceAsStream("");
    java.lang.Object[] var59 = new java.lang.Object[] { var58};
    java.util.List var60 = org.jsecurity.util.CollectionUtils.asList(var59);
    var54.addRoles((java.util.Collection)var60);
    var51.setAuthenticationListeners((java.util.Collection)var60);
    org.jsecurity.realm.activedirectory.ActiveDirectoryRealm var63 = new org.jsecurity.realm.activedirectory.ActiveDirectoryRealm();
    var63.setPrincipalSuffix("");
    var51.setRealm((org.jsecurity.realm.Realm)var63);
    org.jsecurity.cache.HashtableCacheManager var67 = new org.jsecurity.cache.HashtableCacheManager();
    org.jsecurity.cache.Cache var69 = var67.getCache("\u0000\u0000");
    var63.setAuthorizationCache(var69);
    var29.setRealm((org.jsecurity.realm.Realm)var63);
    org.jsecurity.subject.RememberMeManager var72 = var29.getRememberMeManager();
    org.jsecurity.session.mgt.SessionManager var73 = var29.getSessionManager();
    org.jsecurity.session.mgt.SessionManager var74 = var29.getSessionManager();
    var0.setSessionManager(var74);
    org.jsecurity.session.mgt.ImmutableProxiedSession var76 = new org.jsecurity.session.mgt.ImmutableProxiedSession((org.jsecurity.session.Session)var0);
    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      var76.touch();
      fail("Expected exception of type org.jsecurity.session.InvalidSessionException");
    } catch (org.jsecurity.session.InvalidSessionException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var1);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var2);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var21);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var24);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var31);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var32);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var33);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var41);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var42);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var43);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var48);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var49);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var50);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var58);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var59);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var60);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var69);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var72);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var73);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var74);

  }

  public void test40() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest5.test40");


    org.jsecurity.mgt.DefaultSecurityManager var0 = new org.jsecurity.mgt.DefaultSecurityManager();
    java.io.InputStream var2 = org.jsecurity.util.ClassUtils.getResourceAsStream("");
    java.lang.Object[] var3 = new java.lang.Object[] { var2};
    java.util.List var4 = org.jsecurity.util.CollectionUtils.asList(var3);
    org.jsecurity.authc.pam.ModularRealmAuthenticator var5 = new org.jsecurity.authc.pam.ModularRealmAuthenticator(var4);
    org.jsecurity.authc.pam.AllSuccessfulModularAuthenticationStrategy var6 = new org.jsecurity.authc.pam.AllSuccessfulModularAuthenticationStrategy();
    var5.setModularAuthenticationStrategy((org.jsecurity.authc.pam.ModularAuthenticationStrategy)var6);
    org.jsecurity.authz.SimpleAuthorizationInfo var8 = new org.jsecurity.authz.SimpleAuthorizationInfo();
    var8.addStringPermission("hi!");
    java.io.InputStream var12 = org.jsecurity.util.ClassUtils.getResourceAsStream("");
    java.lang.Object[] var13 = new java.lang.Object[] { var12};
    java.util.List var14 = org.jsecurity.util.CollectionUtils.asList(var13);
    var8.addRoles((java.util.Collection)var14);
    var5.setAuthenticationListeners((java.util.Collection)var14);
    var0.setSessionListeners((java.util.Collection)var14);
    java.util.Collection var18 = var0.getRealms();
    org.jsecurity.authc.pam.FirstSuccessfulAuthenticationStrategy var19 = new org.jsecurity.authc.pam.FirstSuccessfulAuthenticationStrategy();
    org.jsecurity.authz.UnauthorizedException var21 = new org.jsecurity.authz.UnauthorizedException("org.jsecurity.config.ConfigurationException: dd\uFFFD");
    java.lang.Throwable[] var22 = var21.getSuppressed();
    java.util.List var23 = org.jsecurity.util.CollectionUtils.asList((java.lang.Object[])var22);
    org.jsecurity.authc.UsernamePasswordToken var24 = new org.jsecurity.authc.UsernamePasswordToken();
    java.lang.String var25 = var24.getUsername();
    java.net.InetAddress var26 = var24.getInetAddress();
    org.jsecurity.authc.AuthenticationInfo var27 = var19.beforeAllAttempts((java.util.Collection)var23, (org.jsecurity.authc.AuthenticationToken)var24);
    org.jsecurity.realm.SimpleAccountRealm var29 = new org.jsecurity.realm.SimpleAccountRealm("hi!");
    java.lang.Class var30 = var29.getAuthenticationTokenClass();
    java.util.Collection var31 = org.jsecurity.util.CollectionUtils.emptyCollection(var30);
    org.jsecurity.authc.pam.AllSuccessfulModularAuthenticationStrategy var32 = new org.jsecurity.authc.pam.AllSuccessfulModularAuthenticationStrategy();
    char[] var34 = new char[] { };
    org.jsecurity.authc.UsernamePasswordToken var36 = new org.jsecurity.authc.UsernamePasswordToken("hi!", var34, true);
    org.jsecurity.authc.SimpleAccount var37 = new org.jsecurity.authc.SimpleAccount();
    var37.setCredentialsExpired(false);
    boolean var40 = var37.isLocked();
    org.jsecurity.authc.AuthenticationInfo var41 = var32.afterAllAttempts((org.jsecurity.authc.AuthenticationToken)var36, (org.jsecurity.authc.AuthenticationInfo)var37);
    org.jsecurity.authc.AuthenticationInfo var42 = var19.beforeAllAttempts(var31, (org.jsecurity.authc.AuthenticationToken)var36);
    var0.setAuthenticationListeners(var31);
    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      var0.setRememberMeCipherKeyHex("e23a02c5-2287-4daa-91c4-8efed2be0f73");
      fail("Expected exception of type java.lang.IllegalStateException");
    } catch (java.lang.IllegalStateException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var2);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var3);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var4);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var12);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var13);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var14);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var18);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var22);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var23);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var25);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var26);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var27);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var30);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var31);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var34);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var40 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var41);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var42);

  }

  public void test41() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest5.test41");


    org.jsecurity.crypto.hash.Md5Hash var1 = org.jsecurity.crypto.hash.Md5Hash.fromBase64String("daaeccb7-c50f-4f66-b0ec-d53a7c469ede");
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var1);

  }

  public void test42() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest5.test42");


    org.jsecurity.session.mgt.eis.MemorySessionDAO var1 = new org.jsecurity.session.mgt.eis.MemorySessionDAO();
    org.jsecurity.cache.Cache var2 = var1.getActiveSessionsCache();
    org.jsecurity.cache.CacheManager var3 = var1.getCacheManager();
    org.jsecurity.cache.HashtableCacheManager var4 = new org.jsecurity.cache.HashtableCacheManager();
    org.jsecurity.cache.Cache var6 = var4.getCache("\u0000\u0000");
    var1.setActiveSessionsCache(var6);
    java.io.InputStream var9 = org.jsecurity.util.ClassUtils.getResourceAsStream("");
    java.lang.Object[] var10 = new java.lang.Object[] { var9};
    java.util.List var11 = org.jsecurity.util.CollectionUtils.asList(var10);
    org.jsecurity.authc.pam.ModularRealmAuthenticator var12 = new org.jsecurity.authc.pam.ModularRealmAuthenticator(var11);
    org.jsecurity.authc.pam.AllSuccessfulModularAuthenticationStrategy var13 = new org.jsecurity.authc.pam.AllSuccessfulModularAuthenticationStrategy();
    var12.setModularAuthenticationStrategy((org.jsecurity.authc.pam.ModularAuthenticationStrategy)var13);
    org.jsecurity.authz.SimpleAuthorizationInfo var15 = new org.jsecurity.authz.SimpleAuthorizationInfo();
    var15.addStringPermission("hi!");
    java.io.InputStream var19 = org.jsecurity.util.ClassUtils.getResourceAsStream("");
    java.lang.Object[] var20 = new java.lang.Object[] { var19};
    java.util.List var21 = org.jsecurity.util.CollectionUtils.asList(var20);
    var15.addRoles((java.util.Collection)var21);
    var12.setAuthenticationListeners((java.util.Collection)var21);
    org.jsecurity.realm.activedirectory.ActiveDirectoryRealm var24 = new org.jsecurity.realm.activedirectory.ActiveDirectoryRealm();
    var24.setPrincipalSuffix("");
    var12.setRealm((org.jsecurity.realm.Realm)var24);
    org.jsecurity.cache.HashtableCacheManager var28 = new org.jsecurity.cache.HashtableCacheManager();
    org.jsecurity.cache.Cache var30 = var28.getCache("\u0000\u0000");
    var24.setAuthorizationCache(var30);
    var1.setActiveSessionsCache(var30);
    org.jsecurity.session.mgt.SimpleSession var33 = new org.jsecurity.session.mgt.SimpleSession();
    java.io.Serializable var34 = var1.create((org.jsecurity.session.Session)var33);
    org.jsecurity.session.mgt.SimpleSession var35 = new org.jsecurity.session.mgt.SimpleSession();
    var35.touch();
    var35.validate();
    org.jsecurity.session.mgt.SimpleSession var38 = new org.jsecurity.session.mgt.SimpleSession();
    var38.setTimeout((-1L));
    org.jsecurity.session.mgt.SimpleSession var41 = new org.jsecurity.session.mgt.SimpleSession();
    java.util.Date var42 = var41.getLastAccessTime();
    var38.setLastAccessTime(var42);
    org.jsecurity.session.mgt.SimpleSession var44 = new org.jsecurity.session.mgt.SimpleSession();
    java.util.Date var45 = var44.getLastAccessTime();
    var38.setStopTimestamp(var45);
    var35.setLastAccessTime(var45);
    var33.setLastAccessTime(var45);
    org.jsecurity.session.mgt.ImmutableProxiedSession var49 = new org.jsecurity.session.mgt.ImmutableProxiedSession((org.jsecurity.session.Session)var33);
    java.util.Date var50 = var49.getStartTimestamp();
    java.util.Date var51 = var49.getStartTimestamp();
    java.io.Serializable var52 = var49.getId();
    long var53 = var49.getTimeout();
    org.jsecurity.io.IniResource var56 = new org.jsecurity.io.IniResource();
    java.lang.String var57 = var56.getCharsetName();
    org.jsecurity.session.UnknownSessionException var58 = new org.jsecurity.session.UnknownSessionException("", (java.io.Serializable)var56);
    org.jsecurity.authz.UnauthorizedException var59 = new org.jsecurity.authz.UnauthorizedException("org.jsecurity.config.ConfigurationException: dd\uFFFD", (java.lang.Throwable)var58);
    java.lang.Object var60 = var49.getAttribute((java.lang.Object)var59);
    org.jsecurity.util.UnknownClassException var61 = new org.jsecurity.util.UnknownClassException("org.jsecurity.authc.AccountException: hi!", (java.lang.Throwable)var59);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var2);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var3);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var6);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var9);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var10);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var11);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var19);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var20);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var21);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var30);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var34 + "' != '" + "34985011-eed9-42f9-8098-612a7542effd"+ "'", var34.equals("34985011-eed9-42f9-8098-612a7542effd"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var42);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var45);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var50);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var51);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var52 + "' != '" + "34985011-eed9-42f9-8098-612a7542effd"+ "'", var52.equals("34985011-eed9-42f9-8098-612a7542effd"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var53 == 1800000L);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var57);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var60);

  }

  public void test43() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest5.test43");


    org.jsecurity.session.mgt.eis.MemorySessionDAO var0 = new org.jsecurity.session.mgt.eis.MemorySessionDAO();
    org.jsecurity.cache.Cache var1 = var0.getActiveSessionsCache();
    org.jsecurity.session.mgt.SimpleSession var2 = new org.jsecurity.session.mgt.SimpleSession();
    var2.setTimeout((-1L));
    org.jsecurity.session.mgt.SimpleSession var5 = new org.jsecurity.session.mgt.SimpleSession();
    java.util.Date var6 = var5.getLastAccessTime();
    var2.setLastAccessTime(var6);
    var0.update((org.jsecurity.session.Session)var2);
    var0.setActiveSessionsCacheName("3008602b-f37d-459d-973e-0453ee1d8c4b");
    java.lang.String var11 = var0.getActiveSessionsCacheName();
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var1);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var6);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var11 + "' != '" + "3008602b-f37d-459d-973e-0453ee1d8c4b"+ "'", var11.equals("3008602b-f37d-459d-973e-0453ee1d8c4b"));

  }

  public void test44() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest5.test44");


    org.jsecurity.session.UnknownSessionException var6 = new org.jsecurity.session.UnknownSessionException("dd\uFFFD", (java.io.Serializable)100.0f);
    org.jsecurity.subject.SubjectException var7 = new org.jsecurity.subject.SubjectException("dd\uFFFD", (java.lang.Throwable)var6);
    org.jsecurity.io.SerializationException var8 = new org.jsecurity.io.SerializationException("", (java.lang.Throwable)var7);
    org.jsecurity.authc.ExpiredCredentialsException var9 = new org.jsecurity.authc.ExpiredCredentialsException("", (java.lang.Throwable)var7);
    org.jsecurity.authc.AccountException var10 = new org.jsecurity.authc.AccountException((java.lang.Throwable)var9);
    org.jsecurity.session.SessionException var11 = new org.jsecurity.session.SessionException("4c20e6b5-f5d8-4e6f-b584-735e30488227", (java.lang.Throwable)var9);

  }

  public void test45() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest5.test45");


    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      org.jsecurity.crypto.hash.Sha1Hash var1 = org.jsecurity.crypto.hash.Sha1Hash.fromHexString("5f1a02c3-98db-421f-b1ba-f29f3b4f245c");
      fail("Expected exception of type java.lang.IllegalArgumentException");
    } catch (java.lang.IllegalArgumentException e) {
      // Expected exception.
    }

  }

  public void test46() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest5.test46");


    org.jsecurity.crypto.hash.Sha1Hash var1 = org.jsecurity.crypto.hash.Sha1Hash.fromBase64String("4d3ad5aa-ac3f-4e82-99cd-6644fc7349ee");
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var1);

  }

  public void test47() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest5.test47");


    org.jsecurity.session.mgt.DefaultSessionManager var0 = new org.jsecurity.session.mgt.DefaultSessionManager();
    org.jsecurity.session.mgt.eis.MemorySessionDAO var1 = new org.jsecurity.session.mgt.eis.MemorySessionDAO();
    org.jsecurity.cache.Cache var2 = var1.getActiveSessionsCache();
    org.jsecurity.cache.CacheManager var3 = var1.getCacheManager();
    org.jsecurity.cache.HashtableCacheManager var4 = new org.jsecurity.cache.HashtableCacheManager();
    org.jsecurity.cache.Cache var6 = var4.getCache("\u0000\u0000");
    var1.setActiveSessionsCache(var6);
    java.io.InputStream var9 = org.jsecurity.util.ClassUtils.getResourceAsStream("");
    java.lang.Object[] var10 = new java.lang.Object[] { var9};
    java.util.List var11 = org.jsecurity.util.CollectionUtils.asList(var10);
    org.jsecurity.authc.pam.ModularRealmAuthenticator var12 = new org.jsecurity.authc.pam.ModularRealmAuthenticator(var11);
    org.jsecurity.authc.pam.AllSuccessfulModularAuthenticationStrategy var13 = new org.jsecurity.authc.pam.AllSuccessfulModularAuthenticationStrategy();
    var12.setModularAuthenticationStrategy((org.jsecurity.authc.pam.ModularAuthenticationStrategy)var13);
    org.jsecurity.authz.SimpleAuthorizationInfo var15 = new org.jsecurity.authz.SimpleAuthorizationInfo();
    var15.addStringPermission("hi!");
    java.io.InputStream var19 = org.jsecurity.util.ClassUtils.getResourceAsStream("");
    java.lang.Object[] var20 = new java.lang.Object[] { var19};
    java.util.List var21 = org.jsecurity.util.CollectionUtils.asList(var20);
    var15.addRoles((java.util.Collection)var21);
    var12.setAuthenticationListeners((java.util.Collection)var21);
    org.jsecurity.realm.activedirectory.ActiveDirectoryRealm var24 = new org.jsecurity.realm.activedirectory.ActiveDirectoryRealm();
    var24.setPrincipalSuffix("");
    var12.setRealm((org.jsecurity.realm.Realm)var24);
    org.jsecurity.cache.HashtableCacheManager var28 = new org.jsecurity.cache.HashtableCacheManager();
    org.jsecurity.cache.Cache var30 = var28.getCache("\u0000\u0000");
    var24.setAuthorizationCache(var30);
    var1.setActiveSessionsCache(var30);
    org.jsecurity.session.mgt.SimpleSession var33 = new org.jsecurity.session.mgt.SimpleSession();
    java.io.Serializable var34 = var1.create((org.jsecurity.session.Session)var33);
    var0.setSessionDAO((org.jsecurity.session.mgt.eis.SessionDAO)var1);
    org.jsecurity.authc.pam.AllSuccessfulModularAuthenticationStrategy var36 = new org.jsecurity.authc.pam.AllSuccessfulModularAuthenticationStrategy();
    char[] var38 = new char[] { };
    org.jsecurity.authc.UsernamePasswordToken var40 = new org.jsecurity.authc.UsernamePasswordToken("hi!", var38, true);
    org.jsecurity.authc.SimpleAccount var41 = new org.jsecurity.authc.SimpleAccount();
    var41.setCredentialsExpired(false);
    boolean var44 = var41.isLocked();
    org.jsecurity.authc.AuthenticationInfo var45 = var36.afterAllAttempts((org.jsecurity.authc.AuthenticationToken)var40, (org.jsecurity.authc.AuthenticationInfo)var41);
    char[] var49 = new char[] { '4', '#'};
    org.jsecurity.authc.UsernamePasswordToken var50 = new org.jsecurity.authc.UsernamePasswordToken("\u0000\u0000", var49);
    org.jsecurity.authc.SimpleAccount var51 = new org.jsecurity.authc.SimpleAccount();
    var51.setCredentialsExpired(false);
    var51.setCredentialsExpired(false);
    boolean var56 = var51.isCredentialsExpired();
    org.jsecurity.authc.AuthenticationInfo var57 = var36.afterAllAttempts((org.jsecurity.authc.AuthenticationToken)var50, (org.jsecurity.authc.AuthenticationInfo)var51);
    org.jsecurity.realm.activedirectory.ActiveDirectoryRealm var58 = new org.jsecurity.realm.activedirectory.ActiveDirectoryRealm();
    org.jsecurity.authc.credential.Sha256CredentialsMatcher var59 = new org.jsecurity.authc.credential.Sha256CredentialsMatcher();
    var58.setCredentialsMatcher((org.jsecurity.authc.credential.CredentialsMatcher)var59);
    java.lang.String var61 = var58.getAuthorizationCacheName();
    org.jsecurity.authc.UsernamePasswordToken var62 = new org.jsecurity.authc.UsernamePasswordToken();
    java.lang.String var63 = var62.getUsername();
    java.lang.Object var64 = var62.getPrincipal();
    boolean var65 = var58.supports((org.jsecurity.authc.AuthenticationToken)var62);
    org.jsecurity.session.UnknownSessionException var69 = new org.jsecurity.session.UnknownSessionException("dd\uFFFD", (java.io.Serializable)100.0f);
    org.jsecurity.session.SessionException var71 = new org.jsecurity.session.SessionException("dd\uFFFD", (java.lang.Throwable)var69, (java.io.Serializable)0);
    org.jsecurity.authc.SimpleAuthenticationInfo var74 = new org.jsecurity.authc.SimpleAuthenticationInfo((java.lang.Object)0, (java.lang.Object)10, "hi!");
    java.lang.Object var75 = var74.getCredentials();
    java.lang.String var76 = var74.toString();
    org.jsecurity.authc.AuthenticationInfo var77 = var36.afterAllAttempts((org.jsecurity.authc.AuthenticationToken)var62, (org.jsecurity.authc.AuthenticationInfo)var74);
    org.jsecurity.session.mgt.eis.MemorySessionDAO var78 = new org.jsecurity.session.mgt.eis.MemorySessionDAO();
    org.jsecurity.cache.Cache var79 = var78.getActiveSessionsCache();
    var78.setActiveSessionsCacheName("dd\uFFFD");
    var74.setCredentials((java.lang.Object)var78);
    var0.setSessionDAO((org.jsecurity.session.mgt.eis.SessionDAO)var78);
    org.jsecurity.session.mgt.ExecutorServiceSessionValidationScheduler var84 = new org.jsecurity.session.mgt.ExecutorServiceSessionValidationScheduler((org.jsecurity.session.mgt.ValidatingSessionManager)var0);
    long var85 = var84.getInterval();
    org.jsecurity.session.mgt.ValidatingSessionManager var86 = var84.getSessionManager();
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var2);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var3);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var6);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var9);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var10);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var11);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var19);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var20);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var21);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var30);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var34 + "' != '" + "2f9de503-1bce-46ee-bb09-82c8ed4baba8"+ "'", var34.equals("2f9de503-1bce-46ee-bb09-82c8ed4baba8"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var38);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var44 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var45);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var49);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var56 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var57);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var61);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var63);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var64);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var65 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var75 + "' != '" + 10+ "'", var75.equals(10));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var77);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var79);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var85 == 3600000L);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var86);

  }

  public void test48() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest5.test48");


    org.jsecurity.session.mgt.DelegatingSession var0 = new org.jsecurity.session.mgt.DelegatingSession();
    org.jsecurity.session.mgt.DefaultSessionManager var1 = new org.jsecurity.session.mgt.DefaultSessionManager();
    org.jsecurity.session.mgt.eis.MemorySessionDAO var2 = new org.jsecurity.session.mgt.eis.MemorySessionDAO();
    org.jsecurity.cache.Cache var3 = var2.getActiveSessionsCache();
    org.jsecurity.cache.CacheManager var4 = var2.getCacheManager();
    org.jsecurity.cache.HashtableCacheManager var5 = new org.jsecurity.cache.HashtableCacheManager();
    org.jsecurity.cache.Cache var7 = var5.getCache("\u0000\u0000");
    var2.setActiveSessionsCache(var7);
    java.io.InputStream var10 = org.jsecurity.util.ClassUtils.getResourceAsStream("");
    java.lang.Object[] var11 = new java.lang.Object[] { var10};
    java.util.List var12 = org.jsecurity.util.CollectionUtils.asList(var11);
    org.jsecurity.authc.pam.ModularRealmAuthenticator var13 = new org.jsecurity.authc.pam.ModularRealmAuthenticator(var12);
    org.jsecurity.authc.pam.AllSuccessfulModularAuthenticationStrategy var14 = new org.jsecurity.authc.pam.AllSuccessfulModularAuthenticationStrategy();
    var13.setModularAuthenticationStrategy((org.jsecurity.authc.pam.ModularAuthenticationStrategy)var14);
    org.jsecurity.authz.SimpleAuthorizationInfo var16 = new org.jsecurity.authz.SimpleAuthorizationInfo();
    var16.addStringPermission("hi!");
    java.io.InputStream var20 = org.jsecurity.util.ClassUtils.getResourceAsStream("");
    java.lang.Object[] var21 = new java.lang.Object[] { var20};
    java.util.List var22 = org.jsecurity.util.CollectionUtils.asList(var21);
    var16.addRoles((java.util.Collection)var22);
    var13.setAuthenticationListeners((java.util.Collection)var22);
    org.jsecurity.realm.activedirectory.ActiveDirectoryRealm var25 = new org.jsecurity.realm.activedirectory.ActiveDirectoryRealm();
    var25.setPrincipalSuffix("");
    var13.setRealm((org.jsecurity.realm.Realm)var25);
    org.jsecurity.cache.HashtableCacheManager var29 = new org.jsecurity.cache.HashtableCacheManager();
    org.jsecurity.cache.Cache var31 = var29.getCache("\u0000\u0000");
    var25.setAuthorizationCache(var31);
    var2.setActiveSessionsCache(var31);
    org.jsecurity.session.mgt.SimpleSession var34 = new org.jsecurity.session.mgt.SimpleSession();
    java.io.Serializable var35 = var2.create((org.jsecurity.session.Session)var34);
    var1.setSessionDAO((org.jsecurity.session.mgt.eis.SessionDAO)var2);
    var0.setSessionManager((org.jsecurity.session.mgt.SessionManager)var1);
    long var38 = var1.getSessionValidationInterval();
    org.jsecurity.session.mgt.eis.MemorySessionDAO var39 = new org.jsecurity.session.mgt.eis.MemorySessionDAO();
    org.jsecurity.cache.Cache var40 = var39.getActiveSessionsCache();
    org.jsecurity.cache.CacheManager var41 = var39.getCacheManager();
    org.jsecurity.cache.HashtableCacheManager var42 = new org.jsecurity.cache.HashtableCacheManager();
    org.jsecurity.cache.Cache var44 = var42.getCache("\u0000\u0000");
    var39.setActiveSessionsCache(var44);
    java.io.InputStream var47 = org.jsecurity.util.ClassUtils.getResourceAsStream("");
    java.lang.Object[] var48 = new java.lang.Object[] { var47};
    java.util.List var49 = org.jsecurity.util.CollectionUtils.asList(var48);
    org.jsecurity.authc.pam.ModularRealmAuthenticator var50 = new org.jsecurity.authc.pam.ModularRealmAuthenticator(var49);
    org.jsecurity.authc.pam.AllSuccessfulModularAuthenticationStrategy var51 = new org.jsecurity.authc.pam.AllSuccessfulModularAuthenticationStrategy();
    var50.setModularAuthenticationStrategy((org.jsecurity.authc.pam.ModularAuthenticationStrategy)var51);
    org.jsecurity.authz.SimpleAuthorizationInfo var53 = new org.jsecurity.authz.SimpleAuthorizationInfo();
    var53.addStringPermission("hi!");
    java.io.InputStream var57 = org.jsecurity.util.ClassUtils.getResourceAsStream("");
    java.lang.Object[] var58 = new java.lang.Object[] { var57};
    java.util.List var59 = org.jsecurity.util.CollectionUtils.asList(var58);
    var53.addRoles((java.util.Collection)var59);
    var50.setAuthenticationListeners((java.util.Collection)var59);
    org.jsecurity.realm.activedirectory.ActiveDirectoryRealm var62 = new org.jsecurity.realm.activedirectory.ActiveDirectoryRealm();
    var62.setPrincipalSuffix("");
    var50.setRealm((org.jsecurity.realm.Realm)var62);
    org.jsecurity.cache.HashtableCacheManager var66 = new org.jsecurity.cache.HashtableCacheManager();
    org.jsecurity.cache.Cache var68 = var66.getCache("\u0000\u0000");
    var62.setAuthorizationCache(var68);
    var39.setActiveSessionsCache(var68);
    org.jsecurity.session.mgt.SimpleSession var71 = new org.jsecurity.session.mgt.SimpleSession();
    java.io.Serializable var72 = var39.create((org.jsecurity.session.Session)var71);
    java.io.Serializable var73 = var71.getId();
    org.jsecurity.authc.credential.Md5CredentialsMatcher var74 = new org.jsecurity.authc.credential.Md5CredentialsMatcher();
    boolean var75 = var74.isHashSalted();
    boolean var76 = var74.isHashSalted();
    int var77 = var74.getHashIterations();
    java.lang.Object var78 = var71.removeAttribute((java.lang.Object)var74);
    java.net.InetAddress var79 = var71.getHostAddress();
    java.io.Serializable var80 = var1.start(var79);
    org.jsecurity.session.mgt.eis.SessionDAO var81 = var1.getSessionDAO();
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var3);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var4);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var7);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var10);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var11);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var12);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var20);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var21);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var22);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var31);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var35 + "' != '" + "eea6d09b-519f-41aa-95c1-fb38ae599f45"+ "'", var35.equals("eea6d09b-519f-41aa-95c1-fb38ae599f45"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var38 == 3600000L);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var40);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var41);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var44);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var47);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var48);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var49);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var57);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var58);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var59);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var68);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var72 + "' != '" + "697866ec-0126-4777-9c48-f4e0f229fa61"+ "'", var72.equals("697866ec-0126-4777-9c48-f4e0f229fa61"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var73 + "' != '" + "697866ec-0126-4777-9c48-f4e0f229fa61"+ "'", var73.equals("697866ec-0126-4777-9c48-f4e0f229fa61"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var75 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var76 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var77 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var78);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var79);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var80 + "' != '" + "c3db38c3-be79-43a3-bba0-01550965c39b"+ "'", var80.equals("c3db38c3-be79-43a3-bba0-01550965c39b"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var81);

  }

  public void test49() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest5.test49");


    org.jsecurity.crypto.hash.Sha512Hash var1 = org.jsecurity.crypto.hash.Sha512Hash.fromBase64String("01287617-92c7-4e14-9083-f01367f5c288");
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var1);

  }

  public void test50() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest5.test50");


    org.jsecurity.authc.pam.AllSuccessfulModularAuthenticationStrategy var1 = new org.jsecurity.authc.pam.AllSuccessfulModularAuthenticationStrategy();
    org.jsecurity.authc.pam.AllSuccessfulModularAuthenticationStrategy var2 = new org.jsecurity.authc.pam.AllSuccessfulModularAuthenticationStrategy();
    char[] var4 = new char[] { };
    org.jsecurity.authc.UsernamePasswordToken var6 = new org.jsecurity.authc.UsernamePasswordToken("hi!", var4, true);
    org.jsecurity.authc.SimpleAccount var7 = new org.jsecurity.authc.SimpleAccount();
    var7.setCredentialsExpired(false);
    boolean var10 = var7.isLocked();
    org.jsecurity.authc.AuthenticationInfo var11 = var2.afterAllAttempts((org.jsecurity.authc.AuthenticationToken)var6, (org.jsecurity.authc.AuthenticationInfo)var7);
    char[] var15 = new char[] { '4', '#'};
    org.jsecurity.authc.UsernamePasswordToken var16 = new org.jsecurity.authc.UsernamePasswordToken("\u0000\u0000", var15);
    org.jsecurity.authc.SimpleAccount var17 = new org.jsecurity.authc.SimpleAccount();
    var17.setCredentialsExpired(false);
    var17.setCredentialsExpired(false);
    boolean var22 = var17.isCredentialsExpired();
    org.jsecurity.authc.AuthenticationInfo var23 = var2.afterAllAttempts((org.jsecurity.authc.AuthenticationToken)var16, (org.jsecurity.authc.AuthenticationInfo)var17);
    org.jsecurity.authz.UnauthenticatedException var27 = new org.jsecurity.authz.UnauthenticatedException();
    org.jsecurity.config.UnresolveableReferenceException var28 = new org.jsecurity.config.UnresolveableReferenceException("", (java.lang.Throwable)var27);
    org.jsecurity.cache.CacheException var29 = new org.jsecurity.cache.CacheException("org.jsecurity.config.ConfigurationException: dd\uFFFD", (java.lang.Throwable)var27);
    org.jsecurity.authc.SimpleAuthenticationInfo var31 = new org.jsecurity.authc.SimpleAuthenticationInfo((java.lang.Object)"org.jsecurity.config.ConfigurationException: dd\uFFFD", (java.lang.Object)var29, "a2b823b1e72eae2b727289df8a00a89df8a0bab6ad8a89c4c5c7a9b62a270000");
    org.jsecurity.subject.PrincipalCollection var32 = var31.getPrincipals();
    org.jsecurity.authc.AuthenticationInfo var33 = var1.afterAllAttempts((org.jsecurity.authc.AuthenticationToken)var16, (org.jsecurity.authc.AuthenticationInfo)var31);
    org.jsecurity.session.UnknownSessionException var37 = new org.jsecurity.session.UnknownSessionException("dd\uFFFD", (java.io.Serializable)100.0f);
    org.jsecurity.session.SessionException var39 = new org.jsecurity.session.SessionException("dd\uFFFD", (java.lang.Throwable)var37, (java.io.Serializable)0);
    var31.setCredentials((java.lang.Object)var37);
    org.jsecurity.session.StoppedSessionException var41 = new org.jsecurity.session.StoppedSessionException("b6a77f71-73c4-466a-903e-72fc5968f9ac", (java.lang.Throwable)var37);
    org.jsecurity.authz.HostUnauthorizedException var42 = new org.jsecurity.authz.HostUnauthorizedException((java.lang.Throwable)var37);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var4);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var10 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var11);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var15);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var22 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var23);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var32);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var33);

  }

  public void test51() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest5.test51");


    org.jsecurity.authc.pam.AllSuccessfulModularAuthenticationStrategy var1 = new org.jsecurity.authc.pam.AllSuccessfulModularAuthenticationStrategy();
    char[] var3 = new char[] { };
    org.jsecurity.authc.UsernamePasswordToken var5 = new org.jsecurity.authc.UsernamePasswordToken("hi!", var3, true);
    org.jsecurity.authc.SimpleAccount var6 = new org.jsecurity.authc.SimpleAccount();
    var6.setCredentialsExpired(false);
    boolean var9 = var6.isLocked();
    org.jsecurity.authc.AuthenticationInfo var10 = var1.afterAllAttempts((org.jsecurity.authc.AuthenticationToken)var5, (org.jsecurity.authc.AuthenticationInfo)var6);
    char[] var13 = new char[] { };
    org.jsecurity.authc.UsernamePasswordToken var15 = new org.jsecurity.authc.UsernamePasswordToken("hi!", var13, true);
    org.jsecurity.authc.UsernamePasswordToken var16 = new org.jsecurity.authc.UsernamePasswordToken("\u0000\u0000", var13);
    var5.setPassword(var13);
    org.jsecurity.authc.pam.AllSuccessfulModularAuthenticationStrategy var23 = new org.jsecurity.authc.pam.AllSuccessfulModularAuthenticationStrategy();
    char[] var25 = new char[] { };
    org.jsecurity.authc.UsernamePasswordToken var27 = new org.jsecurity.authc.UsernamePasswordToken("hi!", var25, true);
    org.jsecurity.authc.SimpleAccount var28 = new org.jsecurity.authc.SimpleAccount();
    var28.setCredentialsExpired(false);
    boolean var31 = var28.isLocked();
    org.jsecurity.authc.AuthenticationInfo var32 = var23.afterAllAttempts((org.jsecurity.authc.AuthenticationToken)var27, (org.jsecurity.authc.AuthenticationInfo)var28);
    char[] var36 = new char[] { '4', '#'};
    org.jsecurity.authc.UsernamePasswordToken var37 = new org.jsecurity.authc.UsernamePasswordToken("\u0000\u0000", var36);
    org.jsecurity.authc.SimpleAccount var38 = new org.jsecurity.authc.SimpleAccount();
    var38.setCredentialsExpired(false);
    var38.setCredentialsExpired(false);
    boolean var43 = var38.isCredentialsExpired();
    org.jsecurity.authc.AuthenticationInfo var44 = var23.afterAllAttempts((org.jsecurity.authc.AuthenticationToken)var37, (org.jsecurity.authc.AuthenticationInfo)var38);
    org.jsecurity.realm.activedirectory.ActiveDirectoryRealm var45 = new org.jsecurity.realm.activedirectory.ActiveDirectoryRealm();
    org.jsecurity.authc.credential.Sha256CredentialsMatcher var46 = new org.jsecurity.authc.credential.Sha256CredentialsMatcher();
    var45.setCredentialsMatcher((org.jsecurity.authc.credential.CredentialsMatcher)var46);
    java.lang.String var48 = var45.getAuthorizationCacheName();
    org.jsecurity.authc.UsernamePasswordToken var49 = new org.jsecurity.authc.UsernamePasswordToken();
    java.lang.String var50 = var49.getUsername();
    java.lang.Object var51 = var49.getPrincipal();
    boolean var52 = var45.supports((org.jsecurity.authc.AuthenticationToken)var49);
    org.jsecurity.session.UnknownSessionException var56 = new org.jsecurity.session.UnknownSessionException("dd\uFFFD", (java.io.Serializable)100.0f);
    org.jsecurity.session.SessionException var58 = new org.jsecurity.session.SessionException("dd\uFFFD", (java.lang.Throwable)var56, (java.io.Serializable)0);
    org.jsecurity.authc.SimpleAuthenticationInfo var61 = new org.jsecurity.authc.SimpleAuthenticationInfo((java.lang.Object)0, (java.lang.Object)10, "hi!");
    java.lang.Object var62 = var61.getCredentials();
    java.lang.String var63 = var61.toString();
    org.jsecurity.authc.AuthenticationInfo var64 = var23.afterAllAttempts((org.jsecurity.authc.AuthenticationToken)var49, (org.jsecurity.authc.AuthenticationInfo)var61);
    char[] var68 = new char[] { ' ', ' '};
    org.jsecurity.authc.UsernamePasswordToken var69 = new org.jsecurity.authc.UsernamePasswordToken("hi!", var68);
    char[] var73 = new char[] { '4', '#'};
    org.jsecurity.authc.UsernamePasswordToken var74 = new org.jsecurity.authc.UsernamePasswordToken("\u0000\u0000", var73);
    var69.setPassword(var73);
    org.jsecurity.session.mgt.SimpleSession var76 = new org.jsecurity.session.mgt.SimpleSession();
    var76.setTimeout((-1L));
    org.jsecurity.session.mgt.SimpleSession var79 = new org.jsecurity.session.mgt.SimpleSession();
    java.util.Date var80 = var79.getLastAccessTime();
    var76.setLastAccessTime(var80);
    java.net.InetAddress var82 = var76.getHostAddress();
    var69.setInetAddress(var82);
    var49.setInetAddress(var82);
    org.jsecurity.authc.UsernamePasswordToken var85 = new org.jsecurity.authc.UsernamePasswordToken("HashtableCache [\u0000\u0000\u0000]", "020e4fd5-81c8-4cbc-9bbb-975c45ce39a3", var82);
    org.jsecurity.authc.UsernamePasswordToken var86 = new org.jsecurity.authc.UsernamePasswordToken("44126908-8346-4f1c-92de-726997ba95f5", "0a4dfd98-4ec1-476c-a8b7-0ade4d007ab7", false, var82);
    org.jsecurity.authc.UsernamePasswordToken var87 = new org.jsecurity.authc.UsernamePasswordToken("88340016-ef51-4123-8332-9557d9abe70e", var13, var82);
    byte[] var88 = org.jsecurity.codec.CodecSupport.toBytes(var13);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var3);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var9 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var10);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var13);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var25);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var31 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var32);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var36);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var43 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var44);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var48);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var50);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var51);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var52 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var62 + "' != '" + 10+ "'", var62.equals(10));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var64);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var68);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var73);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var80);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var82);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var88);

  }

  public void test52() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest5.test52");


    org.jsecurity.authc.AccountException var1 = new org.jsecurity.authc.AccountException("b155daf6-3160-49d2-aff0-691a5ba6f4ae");

  }

  public void test53() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest5.test53");


    org.jsecurity.session.UnknownSessionException var3 = new org.jsecurity.session.UnknownSessionException("org.jsecurity.config.ConfigurationException: dd\uFFFD");
    org.jsecurity.authz.SimpleAuthorizingAccount var4 = new org.jsecurity.authz.SimpleAuthorizingAccount();
    org.jsecurity.authz.SimpleAuthorizationInfo var5 = new org.jsecurity.authz.SimpleAuthorizationInfo();
    var5.addRole("a2b823b1e72eae2b727289df8a00a89df8a0bab6ad8a89c4c5c7a9b62a270000");
    org.jsecurity.authz.SimpleAuthorizationInfo var8 = new org.jsecurity.authz.SimpleAuthorizationInfo();
    var8.addRole("a2b823b1e72eae2b727289df8a00a89df8a0bab6ad8a89c4c5c7a9b62a270000");
    org.jsecurity.session.UnknownSessionException var15 = new org.jsecurity.session.UnknownSessionException("dd\uFFFD", (java.io.Serializable)100.0f);
    org.jsecurity.subject.SubjectException var16 = new org.jsecurity.subject.SubjectException("dd\uFFFD", (java.lang.Throwable)var15);
    org.jsecurity.io.SerializationException var17 = new org.jsecurity.io.SerializationException("", (java.lang.Throwable)var16);
    java.lang.Throwable[] var18 = var16.getSuppressed();
    java.util.Set var19 = org.jsecurity.util.CollectionUtils.asSet((java.lang.Object[])var18);
    var8.addRoles((java.util.Collection)var19);
    var5.setObjectPermissions(var19);
    var4.setSimpleRoles(var19);
    boolean var23 = var4.isCredentialsExpired();
    org.jsecurity.session.UnknownSessionException var24 = new org.jsecurity.session.UnknownSessionException("5dd0c65d-1422-49c2-becb-9e8dca619ab3", (java.lang.Throwable)var3, (java.io.Serializable)var4);
    org.jsecurity.cache.CacheException var25 = new org.jsecurity.cache.CacheException("7f2f7e38-70ef-4596-b197-ceb7511d003b", (java.lang.Throwable)var3);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var18);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var19);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var23 == false);

  }

  public void test54() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest5.test54");


    org.jsecurity.mgt.DefaultSecurityManager var0 = new org.jsecurity.mgt.DefaultSecurityManager();
    org.jsecurity.realm.text.TextConfigurationRealm var1 = new org.jsecurity.realm.text.TextConfigurationRealm();
    org.jsecurity.realm.text.TextConfigurationRealm var2 = new org.jsecurity.realm.text.TextConfigurationRealm();
    java.io.InputStream var4 = org.jsecurity.util.ClassUtils.getResourceAsStream("");
    java.lang.Object[] var5 = new java.lang.Object[] { var4};
    java.util.List var6 = org.jsecurity.util.CollectionUtils.asList(var5);
    org.jsecurity.authc.pam.ModularRealmAuthenticator var7 = new org.jsecurity.authc.pam.ModularRealmAuthenticator(var6);
    org.jsecurity.subject.SimplePrincipalCollection var9 = new org.jsecurity.subject.SimplePrincipalCollection((java.util.Collection)var6, "org.jsecurity.authz.UnauthorizedException: org.jsecurity.session.ExpiredSessionException: ");
    org.jsecurity.session.UnknownSessionException var14 = new org.jsecurity.session.UnknownSessionException("dd\uFFFD", (java.io.Serializable)100.0f);
    org.jsecurity.session.SessionException var16 = new org.jsecurity.session.SessionException("dd\uFFFD", (java.lang.Throwable)var14, (java.io.Serializable)0);
    org.jsecurity.session.SessionException var17 = new org.jsecurity.session.SessionException("dd\uFFFD", (java.lang.Throwable)var14);
    var9.add((java.lang.Object)var17, "org.jsecurity.config.ConfigurationException: dd\uFFFD");
    var2.onLogout((org.jsecurity.subject.PrincipalCollection)var9);
    java.util.Collection var22 = var9.fromRealm("\u0000\u0000\u0000");
    var1.onLogout((org.jsecurity.subject.PrincipalCollection)var9);
    java.util.Set var24 = var9.asSet();
    org.jsecurity.realm.activedirectory.ActiveDirectoryRealm var25 = new org.jsecurity.realm.activedirectory.ActiveDirectoryRealm();
    org.jsecurity.authc.credential.Sha256CredentialsMatcher var26 = new org.jsecurity.authc.credential.Sha256CredentialsMatcher();
    var25.setCredentialsMatcher((org.jsecurity.authc.credential.CredentialsMatcher)var26);
    java.lang.String var28 = var25.getAuthorizationCacheName();
    var25.setPrincipalSuffix("org.jsecurity.config.ConfigurationException: dd\uFFFD");
    org.jsecurity.realm.text.TextConfigurationRealm var31 = new org.jsecurity.realm.text.TextConfigurationRealm();
    java.io.InputStream var33 = org.jsecurity.util.ClassUtils.getResourceAsStream("");
    java.lang.Object[] var34 = new java.lang.Object[] { var33};
    java.util.List var35 = org.jsecurity.util.CollectionUtils.asList(var34);
    org.jsecurity.authc.pam.ModularRealmAuthenticator var36 = new org.jsecurity.authc.pam.ModularRealmAuthenticator(var35);
    org.jsecurity.subject.SimplePrincipalCollection var38 = new org.jsecurity.subject.SimplePrincipalCollection((java.util.Collection)var35, "org.jsecurity.authz.UnauthorizedException: org.jsecurity.session.ExpiredSessionException: ");
    org.jsecurity.session.UnknownSessionException var43 = new org.jsecurity.session.UnknownSessionException("dd\uFFFD", (java.io.Serializable)100.0f);
    org.jsecurity.session.SessionException var45 = new org.jsecurity.session.SessionException("dd\uFFFD", (java.lang.Throwable)var43, (java.io.Serializable)0);
    org.jsecurity.session.SessionException var46 = new org.jsecurity.session.SessionException("dd\uFFFD", (java.lang.Throwable)var43);
    var38.add((java.lang.Object)var46, "org.jsecurity.config.ConfigurationException: dd\uFFFD");
    var31.onLogout((org.jsecurity.subject.PrincipalCollection)var38);
    var25.onLogout((org.jsecurity.subject.PrincipalCollection)var38);
    org.jsecurity.realm.SimpleAccountRealm var52 = new org.jsecurity.realm.SimpleAccountRealm("hi!");
    java.lang.Class var53 = var52.getAuthenticationTokenClass();
    java.util.Collection var54 = org.jsecurity.util.CollectionUtils.emptyCollection(var53);
    java.util.Collection var55 = var38.byType(var53);
    org.jsecurity.authz.ModularRealmAuthorizer var56 = new org.jsecurity.authz.ModularRealmAuthorizer(var55);
    var0.checkRoles((org.jsecurity.subject.PrincipalCollection)var9, var55);
    org.jsecurity.session.mgt.SessionManager var58 = var0.getSessionManager();
    org.jsecurity.crypto.BlowfishCipher var59 = new org.jsecurity.crypto.BlowfishCipher();
    java.security.Key var60 = org.jsecurity.crypto.BlowfishCipher.generateNewKey();
    var59.setKey(var60);
    java.security.Key var62 = org.jsecurity.crypto.BlowfishCipher.generateNewKey();
    var59.setKey(var62);
    byte[] var67 = new byte[] { (byte)100, (byte)100, (byte)(-1)};
    java.lang.String var68 = org.jsecurity.codec.CodecSupport.toString(var67);
    char[] var69 = org.jsecurity.codec.CodecSupport.toChars(var67);
    boolean var70 = org.jsecurity.codec.Base64.isBase64(var67);
    boolean var71 = org.jsecurity.codec.Base64.isBase64(var67);
    boolean var72 = org.jsecurity.codec.Base64.isBase64(var67);
    java.lang.String var73 = org.jsecurity.codec.Hex.encodeToString(var67);
    byte[] var77 = new byte[] { (byte)100, (byte)100, (byte)(-1)};
    java.lang.String var78 = org.jsecurity.codec.CodecSupport.toString(var77);
    char[] var79 = org.jsecurity.codec.CodecSupport.toChars(var77);
    boolean var80 = org.jsecurity.codec.Base64.isBase64(var77);
    boolean var81 = org.jsecurity.codec.Base64.isBase64(var77);
    boolean var82 = org.jsecurity.codec.Base64.isBase64(var77);
    java.lang.String var83 = org.jsecurity.codec.Base64.encodeToString(var77);
    byte[] var84 = var59.encrypt(var67, var77);
    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      var0.setRememberMeCipher((org.jsecurity.crypto.Cipher)var59);
      fail("Expected exception of type java.lang.IllegalStateException");
    } catch (java.lang.IllegalStateException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var4);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var5);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var6);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var22);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var24);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var28);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var33);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var34);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var35);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var53);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var54);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var55);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var58);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var60);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var62);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var67);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var68 + "' != '" + "dd\uFFFD"+ "'", var68.equals("dd\uFFFD"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var69);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var70 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var71 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var72 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var73 + "' != '" + "6464ff"+ "'", var73.equals("6464ff"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var77);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var78 + "' != '" + "dd\uFFFD"+ "'", var78.equals("dd\uFFFD"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var79);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var80 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var81 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var82 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var83 + "' != '" + "ZGT/"+ "'", var83.equals("ZGT/"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var84);

  }

  public void test55() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest5.test55");


    org.jsecurity.session.mgt.eis.MemorySessionDAO var0 = new org.jsecurity.session.mgt.eis.MemorySessionDAO();
    org.jsecurity.cache.Cache var1 = var0.getActiveSessionsCache();
    org.jsecurity.cache.CacheManager var2 = var0.getCacheManager();
    org.jsecurity.cache.HashtableCacheManager var3 = new org.jsecurity.cache.HashtableCacheManager();
    org.jsecurity.cache.Cache var5 = var3.getCache("\u0000\u0000");
    var0.setActiveSessionsCache(var5);
    java.io.InputStream var8 = org.jsecurity.util.ClassUtils.getResourceAsStream("");
    java.lang.Object[] var9 = new java.lang.Object[] { var8};
    java.util.List var10 = org.jsecurity.util.CollectionUtils.asList(var9);
    org.jsecurity.authc.pam.ModularRealmAuthenticator var11 = new org.jsecurity.authc.pam.ModularRealmAuthenticator(var10);
    org.jsecurity.authc.pam.AllSuccessfulModularAuthenticationStrategy var12 = new org.jsecurity.authc.pam.AllSuccessfulModularAuthenticationStrategy();
    var11.setModularAuthenticationStrategy((org.jsecurity.authc.pam.ModularAuthenticationStrategy)var12);
    org.jsecurity.authz.SimpleAuthorizationInfo var14 = new org.jsecurity.authz.SimpleAuthorizationInfo();
    var14.addStringPermission("hi!");
    java.io.InputStream var18 = org.jsecurity.util.ClassUtils.getResourceAsStream("");
    java.lang.Object[] var19 = new java.lang.Object[] { var18};
    java.util.List var20 = org.jsecurity.util.CollectionUtils.asList(var19);
    var14.addRoles((java.util.Collection)var20);
    var11.setAuthenticationListeners((java.util.Collection)var20);
    org.jsecurity.realm.activedirectory.ActiveDirectoryRealm var23 = new org.jsecurity.realm.activedirectory.ActiveDirectoryRealm();
    var23.setPrincipalSuffix("");
    var11.setRealm((org.jsecurity.realm.Realm)var23);
    org.jsecurity.cache.HashtableCacheManager var27 = new org.jsecurity.cache.HashtableCacheManager();
    org.jsecurity.cache.Cache var29 = var27.getCache("\u0000\u0000");
    var23.setAuthorizationCache(var29);
    var0.setActiveSessionsCache(var29);
    org.jsecurity.session.mgt.SimpleSession var32 = new org.jsecurity.session.mgt.SimpleSession();
    java.io.Serializable var33 = var0.create((org.jsecurity.session.Session)var32);
    org.jsecurity.session.mgt.SimpleSession var34 = new org.jsecurity.session.mgt.SimpleSession();
    var34.touch();
    var34.validate();
    org.jsecurity.session.mgt.SimpleSession var37 = new org.jsecurity.session.mgt.SimpleSession();
    var37.setTimeout((-1L));
    org.jsecurity.session.mgt.SimpleSession var40 = new org.jsecurity.session.mgt.SimpleSession();
    java.util.Date var41 = var40.getLastAccessTime();
    var37.setLastAccessTime(var41);
    org.jsecurity.session.mgt.SimpleSession var43 = new org.jsecurity.session.mgt.SimpleSession();
    java.util.Date var44 = var43.getLastAccessTime();
    var37.setStopTimestamp(var44);
    var34.setLastAccessTime(var44);
    var32.setLastAccessTime(var44);
    org.jsecurity.session.mgt.ImmutableProxiedSession var48 = new org.jsecurity.session.mgt.ImmutableProxiedSession((org.jsecurity.session.Session)var32);
    java.util.Date var49 = var48.getLastAccessTime();
    java.net.InetAddress var50 = var48.getHostAddress();
    org.jsecurity.crypto.hash.Sha512Hash var52 = org.jsecurity.crypto.hash.Sha512Hash.fromBase64String("org.jsecurity.config.ConfigurationException: dd\uFFFD");
    byte[] var53 = var52.getBytes();
    java.lang.String var54 = org.jsecurity.codec.Base64.decodeToString(var53);
    byte[] var55 = org.jsecurity.codec.Base64.encodeChunked(var53);
    java.lang.String var56 = org.jsecurity.codec.Hex.encodeToString(var53);
    byte[] var58 = org.jsecurity.codec.Base64.encode(var53, true);
    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      java.lang.Object var59 = var48.removeAttribute((java.lang.Object)var58);
      fail("Expected exception of type org.jsecurity.session.InvalidSessionException");
    } catch (org.jsecurity.session.InvalidSessionException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var1);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var2);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var5);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var8);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var9);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var10);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var18);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var19);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var20);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var29);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var33 + "' != '" + "6acaaa2f-eec3-4c20-8e57-5b5b27a41d62"+ "'", var33.equals("6acaaa2f-eec3-4c20-8e57-5b5b27a41d62"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var41);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var44);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var49);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var50);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var52);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var53);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var54 + "' != '" + "\u0000\u0000\u0000"+ "'", var54.equals("\u0000\u0000\u0000"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var55);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var56 + "' != '" + "a2b823b1e72eae2b727289df8a00a89df8a0bab6ad8a89c4c5c7a9b62a270000"+ "'", var56.equals("a2b823b1e72eae2b727289df8a00a89df8a0bab6ad8a89c4c5c7a9b62a270000"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var58);

  }

  public void test56() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest5.test56");


    org.jsecurity.session.mgt.eis.MemorySessionDAO var0 = new org.jsecurity.session.mgt.eis.MemorySessionDAO();
    org.jsecurity.cache.Cache var1 = var0.getActiveSessionsCache();
    org.jsecurity.cache.CacheManager var2 = var0.getCacheManager();
    org.jsecurity.cache.HashtableCacheManager var3 = new org.jsecurity.cache.HashtableCacheManager();
    org.jsecurity.cache.Cache var5 = var3.getCache("\u0000\u0000");
    var0.setActiveSessionsCache(var5);
    java.io.InputStream var8 = org.jsecurity.util.ClassUtils.getResourceAsStream("");
    java.lang.Object[] var9 = new java.lang.Object[] { var8};
    java.util.List var10 = org.jsecurity.util.CollectionUtils.asList(var9);
    org.jsecurity.authc.pam.ModularRealmAuthenticator var11 = new org.jsecurity.authc.pam.ModularRealmAuthenticator(var10);
    org.jsecurity.authc.pam.AllSuccessfulModularAuthenticationStrategy var12 = new org.jsecurity.authc.pam.AllSuccessfulModularAuthenticationStrategy();
    var11.setModularAuthenticationStrategy((org.jsecurity.authc.pam.ModularAuthenticationStrategy)var12);
    org.jsecurity.authz.SimpleAuthorizationInfo var14 = new org.jsecurity.authz.SimpleAuthorizationInfo();
    var14.addStringPermission("hi!");
    java.io.InputStream var18 = org.jsecurity.util.ClassUtils.getResourceAsStream("");
    java.lang.Object[] var19 = new java.lang.Object[] { var18};
    java.util.List var20 = org.jsecurity.util.CollectionUtils.asList(var19);
    var14.addRoles((java.util.Collection)var20);
    var11.setAuthenticationListeners((java.util.Collection)var20);
    org.jsecurity.realm.activedirectory.ActiveDirectoryRealm var23 = new org.jsecurity.realm.activedirectory.ActiveDirectoryRealm();
    var23.setPrincipalSuffix("");
    var11.setRealm((org.jsecurity.realm.Realm)var23);
    org.jsecurity.cache.HashtableCacheManager var27 = new org.jsecurity.cache.HashtableCacheManager();
    org.jsecurity.cache.Cache var29 = var27.getCache("\u0000\u0000");
    var23.setAuthorizationCache(var29);
    var0.setActiveSessionsCache(var29);
    org.jsecurity.session.mgt.SimpleSession var32 = new org.jsecurity.session.mgt.SimpleSession();
    java.io.Serializable var33 = var0.create((org.jsecurity.session.Session)var32);
    java.io.Serializable var34 = var32.getId();
    org.jsecurity.session.mgt.SimpleSession var35 = new org.jsecurity.session.mgt.SimpleSession();
    var35.touch();
    var35.validate();
    org.jsecurity.session.mgt.SimpleSession var38 = new org.jsecurity.session.mgt.SimpleSession();
    var38.setTimeout((-1L));
    org.jsecurity.session.mgt.SimpleSession var41 = new org.jsecurity.session.mgt.SimpleSession();
    java.util.Date var42 = var41.getLastAccessTime();
    var38.setLastAccessTime(var42);
    org.jsecurity.session.mgt.SimpleSession var44 = new org.jsecurity.session.mgt.SimpleSession();
    java.util.Date var45 = var44.getLastAccessTime();
    var38.setStopTimestamp(var45);
    var35.setLastAccessTime(var45);
    var32.setStartTimestamp(var45);
    org.jsecurity.session.mgt.eis.MemorySessionDAO var49 = new org.jsecurity.session.mgt.eis.MemorySessionDAO();
    org.jsecurity.cache.Cache var50 = var49.getActiveSessionsCache();
    org.jsecurity.cache.CacheManager var51 = var49.getCacheManager();
    org.jsecurity.cache.HashtableCacheManager var52 = new org.jsecurity.cache.HashtableCacheManager();
    org.jsecurity.cache.Cache var54 = var52.getCache("\u0000\u0000");
    var49.setActiveSessionsCache(var54);
    java.io.InputStream var57 = org.jsecurity.util.ClassUtils.getResourceAsStream("");
    java.lang.Object[] var58 = new java.lang.Object[] { var57};
    java.util.List var59 = org.jsecurity.util.CollectionUtils.asList(var58);
    org.jsecurity.authc.pam.ModularRealmAuthenticator var60 = new org.jsecurity.authc.pam.ModularRealmAuthenticator(var59);
    org.jsecurity.authc.pam.AllSuccessfulModularAuthenticationStrategy var61 = new org.jsecurity.authc.pam.AllSuccessfulModularAuthenticationStrategy();
    var60.setModularAuthenticationStrategy((org.jsecurity.authc.pam.ModularAuthenticationStrategy)var61);
    org.jsecurity.authz.SimpleAuthorizationInfo var63 = new org.jsecurity.authz.SimpleAuthorizationInfo();
    var63.addStringPermission("hi!");
    java.io.InputStream var67 = org.jsecurity.util.ClassUtils.getResourceAsStream("");
    java.lang.Object[] var68 = new java.lang.Object[] { var67};
    java.util.List var69 = org.jsecurity.util.CollectionUtils.asList(var68);
    var63.addRoles((java.util.Collection)var69);
    var60.setAuthenticationListeners((java.util.Collection)var69);
    org.jsecurity.realm.activedirectory.ActiveDirectoryRealm var72 = new org.jsecurity.realm.activedirectory.ActiveDirectoryRealm();
    var72.setPrincipalSuffix("");
    var60.setRealm((org.jsecurity.realm.Realm)var72);
    org.jsecurity.cache.HashtableCacheManager var76 = new org.jsecurity.cache.HashtableCacheManager();
    org.jsecurity.cache.Cache var78 = var76.getCache("\u0000\u0000");
    var72.setAuthorizationCache(var78);
    var49.setActiveSessionsCache(var78);
    org.jsecurity.session.mgt.SimpleSession var81 = new org.jsecurity.session.mgt.SimpleSession();
    java.io.Serializable var82 = var49.create((org.jsecurity.session.Session)var81);
    org.jsecurity.session.mgt.SimpleSession var83 = new org.jsecurity.session.mgt.SimpleSession();
    var83.touch();
    var83.validate();
    org.jsecurity.session.mgt.SimpleSession var86 = new org.jsecurity.session.mgt.SimpleSession();
    var86.setTimeout((-1L));
    org.jsecurity.session.mgt.SimpleSession var89 = new org.jsecurity.session.mgt.SimpleSession();
    java.util.Date var90 = var89.getLastAccessTime();
    var86.setLastAccessTime(var90);
    org.jsecurity.session.mgt.SimpleSession var92 = new org.jsecurity.session.mgt.SimpleSession();
    java.util.Date var93 = var92.getLastAccessTime();
    var86.setStopTimestamp(var93);
    var83.setLastAccessTime(var93);
    var81.setLastAccessTime(var93);
    java.util.Date var97 = var81.getLastAccessTime();
    var32.setStartTimestamp(var97);
    var32.stop();
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var1);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var2);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var5);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var8);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var9);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var10);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var18);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var19);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var20);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var29);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var33 + "' != '" + "94d5b5e2-eac7-494e-a020-f1314fa1538c"+ "'", var33.equals("94d5b5e2-eac7-494e-a020-f1314fa1538c"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var34 + "' != '" + "94d5b5e2-eac7-494e-a020-f1314fa1538c"+ "'", var34.equals("94d5b5e2-eac7-494e-a020-f1314fa1538c"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var42);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var45);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var50);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var51);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var54);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var57);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var58);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var59);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var67);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var68);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var69);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var78);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var82 + "' != '" + "e2bf819a-7887-4645-8a19-b90c55f9c7b2"+ "'", var82.equals("e2bf819a-7887-4645-8a19-b90c55f9c7b2"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var90);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var93);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var97);

  }

  public void test57() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest5.test57");


    org.jsecurity.authc.ExpiredCredentialsException var1 = new org.jsecurity.authc.ExpiredCredentialsException("hi!");

  }

  public void test58() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest5.test58");


    org.jsecurity.realm.activedirectory.ActiveDirectoryRealm var0 = new org.jsecurity.realm.activedirectory.ActiveDirectoryRealm();
    var0.initAuthorizationCache();
    var0.setSearchBase("dd\uFFFD");
    var0.setSystemUsername("");
    org.jsecurity.authc.UsernamePasswordToken var6 = new org.jsecurity.authc.UsernamePasswordToken();
    java.lang.String var7 = var6.getUsername();
    java.lang.Object var8 = var6.getPrincipal();
    var6.setUsername("hi!");
    java.lang.Object var11 = var6.getCredentials();
    java.lang.String var12 = var6.getUsername();
    boolean var13 = var0.supports((org.jsecurity.authc.AuthenticationToken)var6);
    org.jsecurity.authc.credential.CredentialsMatcher var14 = var0.getCredentialsMatcher();
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var7);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var8);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var11);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var12 + "' != '" + "hi!"+ "'", var12.equals("hi!"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var13 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var14);

  }

  public void test59() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest5.test59");


    org.jsecurity.session.mgt.eis.MemorySessionDAO var0 = new org.jsecurity.session.mgt.eis.MemorySessionDAO();
    org.jsecurity.cache.Cache var1 = var0.getActiveSessionsCache();
    org.jsecurity.cache.CacheManager var2 = var0.getCacheManager();
    org.jsecurity.cache.HashtableCacheManager var3 = new org.jsecurity.cache.HashtableCacheManager();
    org.jsecurity.cache.Cache var5 = var3.getCache("\u0000\u0000");
    var0.setActiveSessionsCache(var5);
    java.io.InputStream var8 = org.jsecurity.util.ClassUtils.getResourceAsStream("");
    java.lang.Object[] var9 = new java.lang.Object[] { var8};
    java.util.List var10 = org.jsecurity.util.CollectionUtils.asList(var9);
    org.jsecurity.authc.pam.ModularRealmAuthenticator var11 = new org.jsecurity.authc.pam.ModularRealmAuthenticator(var10);
    org.jsecurity.authc.pam.AllSuccessfulModularAuthenticationStrategy var12 = new org.jsecurity.authc.pam.AllSuccessfulModularAuthenticationStrategy();
    var11.setModularAuthenticationStrategy((org.jsecurity.authc.pam.ModularAuthenticationStrategy)var12);
    org.jsecurity.authz.SimpleAuthorizationInfo var14 = new org.jsecurity.authz.SimpleAuthorizationInfo();
    var14.addStringPermission("hi!");
    java.io.InputStream var18 = org.jsecurity.util.ClassUtils.getResourceAsStream("");
    java.lang.Object[] var19 = new java.lang.Object[] { var18};
    java.util.List var20 = org.jsecurity.util.CollectionUtils.asList(var19);
    var14.addRoles((java.util.Collection)var20);
    var11.setAuthenticationListeners((java.util.Collection)var20);
    org.jsecurity.realm.activedirectory.ActiveDirectoryRealm var23 = new org.jsecurity.realm.activedirectory.ActiveDirectoryRealm();
    var23.setPrincipalSuffix("");
    var11.setRealm((org.jsecurity.realm.Realm)var23);
    org.jsecurity.cache.HashtableCacheManager var27 = new org.jsecurity.cache.HashtableCacheManager();
    org.jsecurity.cache.Cache var29 = var27.getCache("\u0000\u0000");
    var23.setAuthorizationCache(var29);
    var0.setActiveSessionsCache(var29);
    org.jsecurity.session.mgt.SimpleSession var32 = new org.jsecurity.session.mgt.SimpleSession();
    java.io.Serializable var33 = var0.create((org.jsecurity.session.Session)var32);
    java.io.Serializable var34 = var32.getId();
    org.jsecurity.authc.credential.Md5CredentialsMatcher var35 = new org.jsecurity.authc.credential.Md5CredentialsMatcher();
    boolean var36 = var35.isHashSalted();
    boolean var37 = var35.isHashSalted();
    int var38 = var35.getHashIterations();
    java.lang.Object var39 = var32.removeAttribute((java.lang.Object)var35);
    boolean var40 = var32.isExpired();
    org.jsecurity.realm.text.TextConfigurationRealm var41 = new org.jsecurity.realm.text.TextConfigurationRealm();
    java.io.InputStream var43 = org.jsecurity.util.ClassUtils.getResourceAsStream("");
    java.lang.Object[] var44 = new java.lang.Object[] { var43};
    java.util.List var45 = org.jsecurity.util.CollectionUtils.asList(var44);
    org.jsecurity.authc.pam.ModularRealmAuthenticator var46 = new org.jsecurity.authc.pam.ModularRealmAuthenticator(var45);
    org.jsecurity.subject.SimplePrincipalCollection var48 = new org.jsecurity.subject.SimplePrincipalCollection((java.util.Collection)var45, "org.jsecurity.authz.UnauthorizedException: org.jsecurity.session.ExpiredSessionException: ");
    org.jsecurity.session.UnknownSessionException var53 = new org.jsecurity.session.UnknownSessionException("dd\uFFFD", (java.io.Serializable)100.0f);
    org.jsecurity.session.SessionException var55 = new org.jsecurity.session.SessionException("dd\uFFFD", (java.lang.Throwable)var53, (java.io.Serializable)0);
    org.jsecurity.session.SessionException var56 = new org.jsecurity.session.SessionException("dd\uFFFD", (java.lang.Throwable)var53);
    var48.add((java.lang.Object)var56, "org.jsecurity.config.ConfigurationException: dd\uFFFD");
    var41.onLogout((org.jsecurity.subject.PrincipalCollection)var48);
    org.jsecurity.cache.HashtableCacheManager var60 = new org.jsecurity.cache.HashtableCacheManager();
    org.jsecurity.cache.Cache var62 = var60.getCache("\u0000\u0000");
    var41.setAuthorizationCache(var62);
    java.lang.String var64 = var41.getUserDefinitions();
    var41.init();
    var41.addRole("\uFFFD\uFFFD#\uFFFD\uFFFD.\uFFFD+rr\uFFFD\u07CA\u0000\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\u01E9\uFFFD*'\u0000\u0000");
    org.jsecurity.realm.activedirectory.ActiveDirectoryRealm var68 = new org.jsecurity.realm.activedirectory.ActiveDirectoryRealm();
    var68.init();
    var68.setSystemPassword("dd\uFFFD");
    org.jsecurity.authz.aop.GuestAnnotationHandler var72 = new org.jsecurity.authz.aop.GuestAnnotationHandler();
    java.lang.Class var73 = var72.getAnnotationClass();
    var68.setAuthenticationTokenClass(var73);
    org.jsecurity.authz.permission.WildcardPermissionResolver var75 = new org.jsecurity.authz.permission.WildcardPermissionResolver();
    org.jsecurity.authz.Permission var77 = var75.resolvePermission("hi!");
    var68.setPermissionResolver((org.jsecurity.authz.permission.PermissionResolver)var75);
    var41.setPermissionResolver((org.jsecurity.authz.permission.PermissionResolver)var75);
    java.lang.Object var80 = var32.getAttribute((java.lang.Object)var75);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var1);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var2);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var5);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var8);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var9);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var10);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var18);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var19);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var20);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var29);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var33 + "' != '" + "2d7cfef0-1d4b-4b4a-8cf9-b8c5a4ecb058"+ "'", var33.equals("2d7cfef0-1d4b-4b4a-8cf9-b8c5a4ecb058"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var34 + "' != '" + "2d7cfef0-1d4b-4b4a-8cf9-b8c5a4ecb058"+ "'", var34.equals("2d7cfef0-1d4b-4b4a-8cf9-b8c5a4ecb058"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var36 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var37 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var38 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var39);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var40 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var43);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var44);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var45);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var62);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var64);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var73);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var77);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var80);

  }

  public void test60() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest5.test60");


    org.jsecurity.session.InvalidSessionException var0 = new org.jsecurity.session.InvalidSessionException();
    org.jsecurity.authc.ExpiredCredentialsException var2 = new org.jsecurity.authc.ExpiredCredentialsException();
    org.jsecurity.session.ExpiredSessionException var3 = new org.jsecurity.session.ExpiredSessionException("", (java.lang.Throwable)var2);
    java.lang.Throwable[] var4 = var3.getSuppressed();
    org.jsecurity.io.ResourceException var5 = new org.jsecurity.io.ResourceException((java.lang.Throwable)var3);
    org.jsecurity.authz.SimpleAuthorizingAccount var7 = new org.jsecurity.authz.SimpleAuthorizingAccount((java.lang.Object)var0, (java.lang.Object)var5, "a7779988-1964-480a-b68c-5556d628a264");
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var4);

  }

  public void test61() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest5.test61");


    org.jsecurity.realm.activedirectory.ActiveDirectoryRealm var0 = new org.jsecurity.realm.activedirectory.ActiveDirectoryRealm();
    org.jsecurity.authc.credential.Sha256CredentialsMatcher var1 = new org.jsecurity.authc.credential.Sha256CredentialsMatcher();
    var0.setCredentialsMatcher((org.jsecurity.authc.credential.CredentialsMatcher)var1);
    org.jsecurity.realm.activedirectory.ActiveDirectoryRealm var3 = new org.jsecurity.realm.activedirectory.ActiveDirectoryRealm();
    org.jsecurity.authc.credential.Sha256CredentialsMatcher var4 = new org.jsecurity.authc.credential.Sha256CredentialsMatcher();
    var3.setCredentialsMatcher((org.jsecurity.authc.credential.CredentialsMatcher)var4);
    org.jsecurity.realm.activedirectory.ActiveDirectoryRealm var6 = new org.jsecurity.realm.activedirectory.ActiveDirectoryRealm();
    org.jsecurity.authc.credential.Sha256CredentialsMatcher var7 = new org.jsecurity.authc.credential.Sha256CredentialsMatcher();
    var6.setCredentialsMatcher((org.jsecurity.authc.credential.CredentialsMatcher)var7);
    java.lang.String var9 = var6.getAuthorizationCacheName();
    var6.setUrl("hi!");
    org.jsecurity.realm.ldap.DefaultLdapContextFactory var12 = new org.jsecurity.realm.ldap.DefaultLdapContextFactory();
    var6.setLdapContextFactory((org.jsecurity.realm.ldap.LdapContextFactory)var12);
    var12.setAuthentication("org.jsecurity.authz.UnauthorizedException: org.jsecurity.session.ExpiredSessionException: ");
    var3.setLdapContextFactory((org.jsecurity.realm.ldap.LdapContextFactory)var12);
    var12.setReferral("a2b823b1e72eae2b727289df8a00a89df8a0bab6ad8a89c4c5c7a9b62a270000");
    var12.setUrl("\u0000\u0000");
    var12.setContextFactoryClassName("org.jsecurity.authc.UsernamePasswordToken - \u0000\u0000, rememberMe=false");
    var0.setLdapContextFactory((org.jsecurity.realm.ldap.LdapContextFactory)var12);
    org.jsecurity.cache.HashtableCache var25 = new org.jsecurity.cache.HashtableCache("orgjsecurityauthcCredentialsException783ccd3148a842dd890fdf885a7baafAA==");
    org.jsecurity.realm.text.TextConfigurationRealm var26 = new org.jsecurity.realm.text.TextConfigurationRealm();
    java.io.InputStream var28 = org.jsecurity.util.ClassUtils.getResourceAsStream("");
    java.lang.Object[] var29 = new java.lang.Object[] { var28};
    java.util.List var30 = org.jsecurity.util.CollectionUtils.asList(var29);
    org.jsecurity.authc.pam.ModularRealmAuthenticator var31 = new org.jsecurity.authc.pam.ModularRealmAuthenticator(var30);
    org.jsecurity.subject.SimplePrincipalCollection var33 = new org.jsecurity.subject.SimplePrincipalCollection((java.util.Collection)var30, "org.jsecurity.authz.UnauthorizedException: org.jsecurity.session.ExpiredSessionException: ");
    org.jsecurity.session.UnknownSessionException var38 = new org.jsecurity.session.UnknownSessionException("dd\uFFFD", (java.io.Serializable)100.0f);
    org.jsecurity.session.SessionException var40 = new org.jsecurity.session.SessionException("dd\uFFFD", (java.lang.Throwable)var38, (java.io.Serializable)0);
    org.jsecurity.session.SessionException var41 = new org.jsecurity.session.SessionException("dd\uFFFD", (java.lang.Throwable)var38);
    var33.add((java.lang.Object)var41, "org.jsecurity.config.ConfigurationException: dd\uFFFD");
    var26.onLogout((org.jsecurity.subject.PrincipalCollection)var33);
    var25.remove((java.lang.Object)var33);
    var0.setAuthorizationCache((org.jsecurity.cache.Cache)var25);
    org.jsecurity.codec.CodecException var49 = new org.jsecurity.codec.CodecException("dd\uFFFD");
    org.jsecurity.authc.ConcurrentAccessException var50 = new org.jsecurity.authc.ConcurrentAccessException("org.jsecurity.authz.UnauthorizedException: org.jsecurity.session.ExpiredSessionException: ", (java.lang.Throwable)var49);
    org.jsecurity.subject.SimplePrincipalCollection var52 = new org.jsecurity.subject.SimplePrincipalCollection((java.lang.Object)var49, "");
    java.io.InputStream var54 = org.jsecurity.util.ClassUtils.getResourceAsStream("");
    java.lang.Object[] var55 = new java.lang.Object[] { var54};
    java.util.List var56 = org.jsecurity.util.CollectionUtils.asList(var55);
    org.jsecurity.authc.pam.ModularRealmAuthenticator var57 = new org.jsecurity.authc.pam.ModularRealmAuthenticator(var56);
    var52.addAll((java.util.Collection)var56, "\u0000\u0000");
    java.io.InputStream var61 = org.jsecurity.util.ClassUtils.getResourceAsStream("");
    java.lang.Object[] var62 = new java.lang.Object[] { var61};
    java.util.List var63 = org.jsecurity.util.CollectionUtils.asList(var62);
    org.jsecurity.authc.pam.ModularRealmAuthenticator var64 = new org.jsecurity.authc.pam.ModularRealmAuthenticator(var63);
    var52.addAll((java.util.Collection)var63, "\u0000\u0000");
    org.jsecurity.realm.SimpleAccountRealm var68 = new org.jsecurity.realm.SimpleAccountRealm("hi!");
    java.lang.Class var69 = var68.getAuthenticationTokenClass();
    java.util.Collection var70 = org.jsecurity.util.CollectionUtils.emptyCollection(var69);
    java.lang.Object var71 = org.jsecurity.util.ClassUtils.newInstance(var69);
    java.util.Collection var72 = var52.byType(var69);
    org.jsecurity.authz.UnauthenticatedException var74 = new org.jsecurity.authz.UnauthenticatedException();
    org.jsecurity.JSecurityException var75 = new org.jsecurity.JSecurityException("\u0000\u0000", (java.lang.Throwable)var74);
    org.jsecurity.authz.SimpleAuthorizingAccount var76 = new org.jsecurity.authz.SimpleAuthorizingAccount((org.jsecurity.subject.PrincipalCollection)var52, (java.lang.Object)var75);
    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      var0.checkPermission((org.jsecurity.subject.PrincipalCollection)var52, "4c3ac9b2-544e-4786-8da0-3c08b9281bd6");
      fail("Expected exception of type java.util.NoSuchElementException");
    } catch (java.util.NoSuchElementException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var9);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var28);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var29);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var30);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var54);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var55);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var56);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var61);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var62);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var63);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var69);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var70);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var71);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var72);

  }

  public void test62() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest5.test62");


    org.jsecurity.mgt.DefaultSecurityManager var1 = new org.jsecurity.mgt.DefaultSecurityManager();
    java.io.InputStream var3 = org.jsecurity.util.ClassUtils.getResourceAsStream("");
    java.lang.Object[] var4 = new java.lang.Object[] { var3};
    java.util.List var5 = org.jsecurity.util.CollectionUtils.asList(var4);
    org.jsecurity.authc.pam.ModularRealmAuthenticator var6 = new org.jsecurity.authc.pam.ModularRealmAuthenticator(var5);
    org.jsecurity.authc.pam.AllSuccessfulModularAuthenticationStrategy var7 = new org.jsecurity.authc.pam.AllSuccessfulModularAuthenticationStrategy();
    var6.setModularAuthenticationStrategy((org.jsecurity.authc.pam.ModularAuthenticationStrategy)var7);
    org.jsecurity.authz.SimpleAuthorizationInfo var9 = new org.jsecurity.authz.SimpleAuthorizationInfo();
    var9.addStringPermission("hi!");
    java.io.InputStream var13 = org.jsecurity.util.ClassUtils.getResourceAsStream("");
    java.lang.Object[] var14 = new java.lang.Object[] { var13};
    java.util.List var15 = org.jsecurity.util.CollectionUtils.asList(var14);
    var9.addRoles((java.util.Collection)var15);
    var6.setAuthenticationListeners((java.util.Collection)var15);
    var1.setSessionListeners((java.util.Collection)var15);
    org.jsecurity.realm.text.TextConfigurationRealm var19 = new org.jsecurity.realm.text.TextConfigurationRealm();
    java.io.InputStream var21 = org.jsecurity.util.ClassUtils.getResourceAsStream("");
    java.lang.Object[] var22 = new java.lang.Object[] { var21};
    java.util.List var23 = org.jsecurity.util.CollectionUtils.asList(var22);
    org.jsecurity.authc.pam.ModularRealmAuthenticator var24 = new org.jsecurity.authc.pam.ModularRealmAuthenticator(var23);
    org.jsecurity.subject.SimplePrincipalCollection var26 = new org.jsecurity.subject.SimplePrincipalCollection((java.util.Collection)var23, "org.jsecurity.authz.UnauthorizedException: org.jsecurity.session.ExpiredSessionException: ");
    org.jsecurity.session.UnknownSessionException var31 = new org.jsecurity.session.UnknownSessionException("dd\uFFFD", (java.io.Serializable)100.0f);
    org.jsecurity.session.SessionException var33 = new org.jsecurity.session.SessionException("dd\uFFFD", (java.lang.Throwable)var31, (java.io.Serializable)0);
    org.jsecurity.session.SessionException var34 = new org.jsecurity.session.SessionException("dd\uFFFD", (java.lang.Throwable)var31);
    var26.add((java.lang.Object)var34, "org.jsecurity.config.ConfigurationException: dd\uFFFD");
    var19.onLogout((org.jsecurity.subject.PrincipalCollection)var26);
    org.jsecurity.authc.pam.FirstSuccessfulAuthenticationStrategy var38 = new org.jsecurity.authc.pam.FirstSuccessfulAuthenticationStrategy();
    org.jsecurity.authz.UnauthorizedException var40 = new org.jsecurity.authz.UnauthorizedException("org.jsecurity.config.ConfigurationException: dd\uFFFD");
    java.lang.Throwable[] var41 = var40.getSuppressed();
    java.util.List var42 = org.jsecurity.util.CollectionUtils.asList((java.lang.Object[])var41);
    org.jsecurity.authc.UsernamePasswordToken var43 = new org.jsecurity.authc.UsernamePasswordToken();
    java.lang.String var44 = var43.getUsername();
    java.net.InetAddress var45 = var43.getInetAddress();
    org.jsecurity.authc.AuthenticationInfo var46 = var38.beforeAllAttempts((java.util.Collection)var42, (org.jsecurity.authc.AuthenticationToken)var43);
    boolean[] var47 = var1.hasRoles((org.jsecurity.subject.PrincipalCollection)var26, var42);
    org.jsecurity.authz.permission.WildcardPermissionResolver var48 = new org.jsecurity.authz.permission.WildcardPermissionResolver();
    org.jsecurity.authz.Permission var50 = var48.resolvePermission("hi!");
    org.jsecurity.authz.Permission var52 = var48.resolvePermission("hi!");
    var1.setPermissionResolver((org.jsecurity.authz.permission.PermissionResolver)var48);
    java.util.Set var54 = org.jsecurity.util.PermissionUtils.resolveDelimitedPermissions("e2100c27-e41d-4c80-964c-90268ef4a856", (org.jsecurity.authz.permission.PermissionResolver)var48);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var3);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var4);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var5);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var13);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var14);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var15);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var21);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var22);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var23);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var41);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var42);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var44);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var45);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var46);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var47);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var50);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var52);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var54);

  }

  public void test63() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest5.test63");


    org.jsecurity.mgt.DefaultSecurityManager var0 = new org.jsecurity.mgt.DefaultSecurityManager();
    java.io.InputStream var2 = org.jsecurity.util.ClassUtils.getResourceAsStream("");
    java.lang.Object[] var3 = new java.lang.Object[] { var2};
    java.util.List var4 = org.jsecurity.util.CollectionUtils.asList(var3);
    org.jsecurity.authc.pam.ModularRealmAuthenticator var5 = new org.jsecurity.authc.pam.ModularRealmAuthenticator(var4);
    org.jsecurity.authc.pam.AllSuccessfulModularAuthenticationStrategy var6 = new org.jsecurity.authc.pam.AllSuccessfulModularAuthenticationStrategy();
    var5.setModularAuthenticationStrategy((org.jsecurity.authc.pam.ModularAuthenticationStrategy)var6);
    org.jsecurity.authz.SimpleAuthorizationInfo var8 = new org.jsecurity.authz.SimpleAuthorizationInfo();
    var8.addStringPermission("hi!");
    java.io.InputStream var12 = org.jsecurity.util.ClassUtils.getResourceAsStream("");
    java.lang.Object[] var13 = new java.lang.Object[] { var12};
    java.util.List var14 = org.jsecurity.util.CollectionUtils.asList(var13);
    var8.addRoles((java.util.Collection)var14);
    var5.setAuthenticationListeners((java.util.Collection)var14);
    var0.setSessionListeners((java.util.Collection)var14);
    org.jsecurity.authz.UnauthenticatedException var21 = new org.jsecurity.authz.UnauthenticatedException();
    org.jsecurity.config.UnresolveableReferenceException var22 = new org.jsecurity.config.UnresolveableReferenceException("", (java.lang.Throwable)var21);
    org.jsecurity.cache.CacheException var23 = new org.jsecurity.cache.CacheException("org.jsecurity.config.ConfigurationException: dd\uFFFD", (java.lang.Throwable)var21);
    org.jsecurity.authc.SimpleAuthenticationInfo var25 = new org.jsecurity.authc.SimpleAuthenticationInfo((java.lang.Object)"org.jsecurity.config.ConfigurationException: dd\uFFFD", (java.lang.Object)var23, "a2b823b1e72eae2b727289df8a00a89df8a0bab6ad8a89c4c5c7a9b62a270000");
    org.jsecurity.realm.text.TextConfigurationRealm var26 = new org.jsecurity.realm.text.TextConfigurationRealm();
    java.io.InputStream var28 = org.jsecurity.util.ClassUtils.getResourceAsStream("");
    java.lang.Object[] var29 = new java.lang.Object[] { var28};
    java.util.List var30 = org.jsecurity.util.CollectionUtils.asList(var29);
    org.jsecurity.authc.pam.ModularRealmAuthenticator var31 = new org.jsecurity.authc.pam.ModularRealmAuthenticator(var30);
    org.jsecurity.subject.SimplePrincipalCollection var33 = new org.jsecurity.subject.SimplePrincipalCollection((java.util.Collection)var30, "org.jsecurity.authz.UnauthorizedException: org.jsecurity.session.ExpiredSessionException: ");
    org.jsecurity.session.UnknownSessionException var38 = new org.jsecurity.session.UnknownSessionException("dd\uFFFD", (java.io.Serializable)100.0f);
    org.jsecurity.session.SessionException var40 = new org.jsecurity.session.SessionException("dd\uFFFD", (java.lang.Throwable)var38, (java.io.Serializable)0);
    org.jsecurity.session.SessionException var41 = new org.jsecurity.session.SessionException("dd\uFFFD", (java.lang.Throwable)var38);
    var33.add((java.lang.Object)var41, "org.jsecurity.config.ConfigurationException: dd\uFFFD");
    var26.onLogout((org.jsecurity.subject.PrincipalCollection)var33);
    org.jsecurity.authc.ExpiredCredentialsException var46 = new org.jsecurity.authc.ExpiredCredentialsException();
    org.jsecurity.session.ExpiredSessionException var47 = new org.jsecurity.session.ExpiredSessionException("", (java.lang.Throwable)var46);
    java.lang.Throwable[] var48 = var47.getSuppressed();
    org.jsecurity.io.ResourceException var49 = new org.jsecurity.io.ResourceException((java.lang.Throwable)var47);
    org.jsecurity.authc.SimpleAuthenticationInfo var50 = new org.jsecurity.authc.SimpleAuthenticationInfo((org.jsecurity.subject.PrincipalCollection)var33, (java.lang.Object)var47);
    var25.merge((org.jsecurity.authc.AuthenticationInfo)var50);
    org.jsecurity.subject.PrincipalCollection var52 = var50.getPrincipals();
    org.jsecurity.authz.SimpleAuthorizingAccount var54 = new org.jsecurity.authz.SimpleAuthorizingAccount((java.util.Collection)var14, (java.lang.Object)var52, "org.jsecurity.realm.text.TextConfigurationRealm_445");
    org.jsecurity.session.UnknownSessionException var61 = new org.jsecurity.session.UnknownSessionException("dd\uFFFD", (java.io.Serializable)100.0f);
    org.jsecurity.subject.SubjectException var62 = new org.jsecurity.subject.SubjectException("dd\uFFFD", (java.lang.Throwable)var61);
    org.jsecurity.authc.AccountException var63 = new org.jsecurity.authc.AccountException("hi!", (java.lang.Throwable)var62);
    org.jsecurity.session.StoppedSessionException var64 = new org.jsecurity.session.StoppedSessionException((java.lang.Throwable)var63);
    org.jsecurity.JSecurityException var65 = new org.jsecurity.JSecurityException((java.lang.Throwable)var63);
    org.jsecurity.subject.SubjectException var66 = new org.jsecurity.subject.SubjectException("e7a91ff4-6903-4f3c-ac4f-2cf4ba6b7930", (java.lang.Throwable)var65);
    org.jsecurity.authz.UnauthenticatedException var67 = new org.jsecurity.authz.UnauthenticatedException("e2497199-95f2-4373-8934-d742f09a6cb1", (java.lang.Throwable)var66);
    boolean var68 = var54.equals((java.lang.Object)"e2497199-95f2-4373-8934-d742f09a6cb1");
    java.util.Collection var69 = var54.getRoles();
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var2);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var3);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var4);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var12);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var13);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var14);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var28);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var29);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var30);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var48);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var52);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var68 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var69);

  }

  public void test64() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest5.test64");


    org.jsecurity.realm.SimpleAccountRealm var1 = new org.jsecurity.realm.SimpleAccountRealm("hi!");
    java.lang.Class var2 = var1.getAuthenticationTokenClass();
    org.jsecurity.session.mgt.eis.MemorySessionDAO var3 = new org.jsecurity.session.mgt.eis.MemorySessionDAO();
    org.jsecurity.cache.Cache var4 = var3.getActiveSessionsCache();
    org.jsecurity.cache.CacheManager var5 = var3.getCacheManager();
    var1.setCacheManager(var5);
    org.jsecurity.cache.Cache var7 = var1.getAuthorizationCache();
    boolean var9 = var1.accountExists("a2b823b1e72eae2b727289df8a00a89df8a0bab6ad8a89c4c5c7a9b62a270000");
    org.jsecurity.mgt.DefaultSecurityManager var10 = new org.jsecurity.mgt.DefaultSecurityManager((org.jsecurity.realm.Realm)var1);
    org.jsecurity.authc.pam.FirstSuccessfulAuthenticationStrategy var11 = new org.jsecurity.authc.pam.FirstSuccessfulAuthenticationStrategy();
    var10.setModularAuthenticationStrategy((org.jsecurity.authc.pam.ModularAuthenticationStrategy)var11);
    org.jsecurity.session.UnknownSessionException var18 = new org.jsecurity.session.UnknownSessionException("dd\uFFFD", (java.io.Serializable)100.0f);
    org.jsecurity.subject.SubjectException var19 = new org.jsecurity.subject.SubjectException("dd\uFFFD", (java.lang.Throwable)var18);
    org.jsecurity.authc.AccountException var20 = new org.jsecurity.authc.AccountException("hi!", (java.lang.Throwable)var19);
    org.jsecurity.session.UnknownSessionException var21 = new org.jsecurity.session.UnknownSessionException((java.lang.Throwable)var19);
    org.jsecurity.codec.CodecException var22 = new org.jsecurity.codec.CodecException((java.lang.Throwable)var19);
    org.jsecurity.authz.HostUnauthorizedException var23 = new org.jsecurity.authz.HostUnauthorizedException((java.lang.Throwable)var19);
    java.net.InetAddress var24 = var23.getHostAddress();
    org.jsecurity.session.ExpiredSessionException var25 = new org.jsecurity.session.ExpiredSessionException("b6cd6008-ae80-4bfd-ae0c-5041e0198a79", (java.lang.Throwable)var23);
    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      org.jsecurity.session.Session var26 = var10.getSession((java.io.Serializable)var23);
      fail("Expected exception of type org.jsecurity.session.InvalidSessionException");
    } catch (org.jsecurity.session.InvalidSessionException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var2);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var4);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var5);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var7);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var9 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var24);

  }

  public void test65() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest5.test65");


    java.io.InputStream var1 = org.jsecurity.util.ClassUtils.getResourceAsStream("");
    java.lang.Object[] var2 = new java.lang.Object[] { var1};
    java.util.List var3 = org.jsecurity.util.CollectionUtils.asList(var2);
    org.jsecurity.authc.pam.ModularRealmAuthenticator var4 = new org.jsecurity.authc.pam.ModularRealmAuthenticator(var3);
    java.io.InputStream var6 = org.jsecurity.util.ClassUtils.getResourceAsStream("");
    java.lang.Object[] var7 = new java.lang.Object[] { var6};
    java.util.List var8 = org.jsecurity.util.CollectionUtils.asList(var7);
    org.jsecurity.authc.pam.ModularRealmAuthenticator var9 = new org.jsecurity.authc.pam.ModularRealmAuthenticator(var8);
    var4.setRealms((java.util.Collection)var8);
    org.jsecurity.authz.SimpleAuthorizationInfo var11 = new org.jsecurity.authz.SimpleAuthorizationInfo();
    var11.addStringPermission("hi!");
    java.io.InputStream var15 = org.jsecurity.util.ClassUtils.getResourceAsStream("");
    java.lang.Object[] var16 = new java.lang.Object[] { var15};
    java.util.List var17 = org.jsecurity.util.CollectionUtils.asList(var16);
    var11.addRoles((java.util.Collection)var17);
    var4.setRealms((java.util.Collection)var17);
    org.jsecurity.mgt.DefaultSecurityManager var20 = new org.jsecurity.mgt.DefaultSecurityManager();
    org.jsecurity.authz.SimpleAuthorizationInfo var22 = new org.jsecurity.authz.SimpleAuthorizationInfo();
    org.jsecurity.session.UnknownSessionException var27 = new org.jsecurity.session.UnknownSessionException("dd\uFFFD", (java.io.Serializable)100.0f);
    org.jsecurity.subject.SubjectException var28 = new org.jsecurity.subject.SubjectException("dd\uFFFD", (java.lang.Throwable)var27);
    org.jsecurity.io.SerializationException var29 = new org.jsecurity.io.SerializationException("", (java.lang.Throwable)var28);
    java.lang.Throwable[] var30 = var28.getSuppressed();
    java.util.Set var31 = org.jsecurity.util.CollectionUtils.asSet((java.lang.Object[])var30);
    var22.setStringPermissions(var31);
    java.util.Set var33 = var22.getRoles();
    org.jsecurity.authz.SimpleAuthorizationInfo var34 = new org.jsecurity.authz.SimpleAuthorizationInfo();
    var34.addRole("a2b823b1e72eae2b727289df8a00a89df8a0bab6ad8a89c4c5c7a9b62a270000");
    org.jsecurity.session.UnknownSessionException var41 = new org.jsecurity.session.UnknownSessionException("dd\uFFFD", (java.io.Serializable)100.0f);
    org.jsecurity.subject.SubjectException var42 = new org.jsecurity.subject.SubjectException("dd\uFFFD", (java.lang.Throwable)var41);
    org.jsecurity.io.SerializationException var43 = new org.jsecurity.io.SerializationException("", (java.lang.Throwable)var42);
    java.lang.Throwable[] var44 = var42.getSuppressed();
    java.util.Set var45 = org.jsecurity.util.CollectionUtils.asSet((java.lang.Object[])var44);
    var34.addRoles((java.util.Collection)var45);
    var22.setRoles(var45);
    org.jsecurity.authz.SimpleRole var48 = new org.jsecurity.authz.SimpleRole("org.jsecurity.authz.UnauthorizedException: org.jsecurity.session.ExpiredSessionException: ", var45);
    var20.setSessionListeners((java.util.Collection)var45);
    org.jsecurity.subject.Subject var50 = var20.getSubject();
    org.jsecurity.realm.jdbc.JdbcRealm var51 = new org.jsecurity.realm.jdbc.JdbcRealm();
    var51.setPermissionsQuery("org.jsecurity.realm.text.TextConfigurationRealm_445");
    var51.setUserRolesQuery("6464ff");
    var51.setPermissionsLookupEnabled(false);
    var20.setAuthorizer((org.jsecurity.authz.Authorizer)var51);
    var51.setAuthenticationQuery("0310766d-27fe-4aa3-9ad6-3a25c0be6154");
    var51.setPermissionsLookupEnabled(true);
    var4.setRealm((org.jsecurity.realm.Realm)var51);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var1);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var2);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var3);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var6);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var7);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var8);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var15);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var16);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var17);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var30);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var31);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var33);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var44);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var45);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var50);

  }

  public void test66() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest5.test66");


    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      org.jsecurity.crypto.hash.Sha384Hash var1 = org.jsecurity.crypto.hash.Sha384Hash.fromHexString("3e24da92-da90-4ce7-9aea-44901195bc14");
      fail("Expected exception of type java.lang.IllegalArgumentException");
    } catch (java.lang.IllegalArgumentException e) {
      // Expected exception.
    }

  }

  public void test67() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest5.test67");


    org.jsecurity.authc.pam.UnsupportedTokenException var0 = new org.jsecurity.authc.pam.UnsupportedTokenException();
    org.jsecurity.authc.UnknownAccountException var1 = new org.jsecurity.authc.UnknownAccountException((java.lang.Throwable)var0);
    org.jsecurity.authc.AccountException var2 = new org.jsecurity.authc.AccountException((java.lang.Throwable)var1);
    org.jsecurity.mgt.DefaultSecurityManager var3 = new org.jsecurity.mgt.DefaultSecurityManager();
    java.io.InputStream var5 = org.jsecurity.util.ClassUtils.getResourceAsStream("");
    java.lang.Object[] var6 = new java.lang.Object[] { var5};
    java.util.List var7 = org.jsecurity.util.CollectionUtils.asList(var6);
    org.jsecurity.authc.pam.ModularRealmAuthenticator var8 = new org.jsecurity.authc.pam.ModularRealmAuthenticator(var7);
    org.jsecurity.authc.pam.AllSuccessfulModularAuthenticationStrategy var9 = new org.jsecurity.authc.pam.AllSuccessfulModularAuthenticationStrategy();
    var8.setModularAuthenticationStrategy((org.jsecurity.authc.pam.ModularAuthenticationStrategy)var9);
    org.jsecurity.authz.SimpleAuthorizationInfo var11 = new org.jsecurity.authz.SimpleAuthorizationInfo();
    var11.addStringPermission("hi!");
    java.io.InputStream var15 = org.jsecurity.util.ClassUtils.getResourceAsStream("");
    java.lang.Object[] var16 = new java.lang.Object[] { var15};
    java.util.List var17 = org.jsecurity.util.CollectionUtils.asList(var16);
    var11.addRoles((java.util.Collection)var17);
    var8.setAuthenticationListeners((java.util.Collection)var17);
    var3.setSessionListeners((java.util.Collection)var17);
    org.jsecurity.realm.text.TextConfigurationRealm var21 = new org.jsecurity.realm.text.TextConfigurationRealm();
    java.io.InputStream var23 = org.jsecurity.util.ClassUtils.getResourceAsStream("");
    java.lang.Object[] var24 = new java.lang.Object[] { var23};
    java.util.List var25 = org.jsecurity.util.CollectionUtils.asList(var24);
    org.jsecurity.authc.pam.ModularRealmAuthenticator var26 = new org.jsecurity.authc.pam.ModularRealmAuthenticator(var25);
    org.jsecurity.subject.SimplePrincipalCollection var28 = new org.jsecurity.subject.SimplePrincipalCollection((java.util.Collection)var25, "org.jsecurity.authz.UnauthorizedException: org.jsecurity.session.ExpiredSessionException: ");
    org.jsecurity.session.UnknownSessionException var33 = new org.jsecurity.session.UnknownSessionException("dd\uFFFD", (java.io.Serializable)100.0f);
    org.jsecurity.session.SessionException var35 = new org.jsecurity.session.SessionException("dd\uFFFD", (java.lang.Throwable)var33, (java.io.Serializable)0);
    org.jsecurity.session.SessionException var36 = new org.jsecurity.session.SessionException("dd\uFFFD", (java.lang.Throwable)var33);
    var28.add((java.lang.Object)var36, "org.jsecurity.config.ConfigurationException: dd\uFFFD");
    var21.onLogout((org.jsecurity.subject.PrincipalCollection)var28);
    org.jsecurity.authc.pam.FirstSuccessfulAuthenticationStrategy var40 = new org.jsecurity.authc.pam.FirstSuccessfulAuthenticationStrategy();
    org.jsecurity.authz.UnauthorizedException var42 = new org.jsecurity.authz.UnauthorizedException("org.jsecurity.config.ConfigurationException: dd\uFFFD");
    java.lang.Throwable[] var43 = var42.getSuppressed();
    java.util.List var44 = org.jsecurity.util.CollectionUtils.asList((java.lang.Object[])var43);
    org.jsecurity.authc.UsernamePasswordToken var45 = new org.jsecurity.authc.UsernamePasswordToken();
    java.lang.String var46 = var45.getUsername();
    java.net.InetAddress var47 = var45.getInetAddress();
    org.jsecurity.authc.AuthenticationInfo var48 = var40.beforeAllAttempts((java.util.Collection)var44, (org.jsecurity.authc.AuthenticationToken)var45);
    boolean[] var49 = var3.hasRoles((org.jsecurity.subject.PrincipalCollection)var28, var44);
    org.jsecurity.codec.CodecException var52 = new org.jsecurity.codec.CodecException("dd\uFFFD");
    org.jsecurity.authc.ConcurrentAccessException var53 = new org.jsecurity.authc.ConcurrentAccessException("org.jsecurity.authz.UnauthorizedException: org.jsecurity.session.ExpiredSessionException: ", (java.lang.Throwable)var52);
    org.jsecurity.subject.SimplePrincipalCollection var55 = new org.jsecurity.subject.SimplePrincipalCollection((java.lang.Object)var52, "");
    java.io.InputStream var57 = org.jsecurity.util.ClassUtils.getResourceAsStream("");
    java.lang.Object[] var58 = new java.lang.Object[] { var57};
    java.util.List var59 = org.jsecurity.util.CollectionUtils.asList(var58);
    org.jsecurity.authc.pam.ModularRealmAuthenticator var60 = new org.jsecurity.authc.pam.ModularRealmAuthenticator(var59);
    var55.addAll((java.util.Collection)var59, "\u0000\u0000");
    var3.setSessionListeners((java.util.Collection)var59);
    org.jsecurity.authc.SimpleAccount var65 = new org.jsecurity.authc.SimpleAccount((java.lang.Object)var2, (java.lang.Object)var3, "ZGT/");
    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      var3.setRememberMeCipherKeyBase64("orgjsecurityconfigConfigurationExceptionAAA=");
      fail("Expected exception of type java.lang.IllegalStateException");
    } catch (java.lang.IllegalStateException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var5);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var6);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var7);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var15);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var16);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var17);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var23);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var24);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var25);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var43);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var44);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var46);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var47);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var48);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var49);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var57);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var58);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var59);

  }

  public void test68() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest5.test68");


    org.jsecurity.crypto.hash.Md5Hash var1 = org.jsecurity.crypto.hash.Md5Hash.fromHexString("");
    org.jsecurity.mgt.DefaultSecurityManager var2 = new org.jsecurity.mgt.DefaultSecurityManager();
    org.jsecurity.authz.permission.WildcardPermissionResolver var3 = new org.jsecurity.authz.permission.WildcardPermissionResolver();
    var2.setPermissionResolver((org.jsecurity.authz.permission.PermissionResolver)var3);
    org.jsecurity.cache.CacheManager var5 = var2.getCacheManager();
    org.jsecurity.authc.Authenticator var6 = var2.getAuthenticator();
    org.jsecurity.session.mgt.DefaultSessionManager var7 = new org.jsecurity.session.mgt.DefaultSessionManager();
    org.jsecurity.session.mgt.eis.MemorySessionDAO var8 = new org.jsecurity.session.mgt.eis.MemorySessionDAO();
    org.jsecurity.cache.Cache var9 = var8.getActiveSessionsCache();
    org.jsecurity.cache.CacheManager var10 = var8.getCacheManager();
    org.jsecurity.cache.HashtableCacheManager var11 = new org.jsecurity.cache.HashtableCacheManager();
    org.jsecurity.cache.Cache var13 = var11.getCache("\u0000\u0000");
    var8.setActiveSessionsCache(var13);
    java.io.InputStream var16 = org.jsecurity.util.ClassUtils.getResourceAsStream("");
    java.lang.Object[] var17 = new java.lang.Object[] { var16};
    java.util.List var18 = org.jsecurity.util.CollectionUtils.asList(var17);
    org.jsecurity.authc.pam.ModularRealmAuthenticator var19 = new org.jsecurity.authc.pam.ModularRealmAuthenticator(var18);
    org.jsecurity.authc.pam.AllSuccessfulModularAuthenticationStrategy var20 = new org.jsecurity.authc.pam.AllSuccessfulModularAuthenticationStrategy();
    var19.setModularAuthenticationStrategy((org.jsecurity.authc.pam.ModularAuthenticationStrategy)var20);
    org.jsecurity.authz.SimpleAuthorizationInfo var22 = new org.jsecurity.authz.SimpleAuthorizationInfo();
    var22.addStringPermission("hi!");
    java.io.InputStream var26 = org.jsecurity.util.ClassUtils.getResourceAsStream("");
    java.lang.Object[] var27 = new java.lang.Object[] { var26};
    java.util.List var28 = org.jsecurity.util.CollectionUtils.asList(var27);
    var22.addRoles((java.util.Collection)var28);
    var19.setAuthenticationListeners((java.util.Collection)var28);
    org.jsecurity.realm.activedirectory.ActiveDirectoryRealm var31 = new org.jsecurity.realm.activedirectory.ActiveDirectoryRealm();
    var31.setPrincipalSuffix("");
    var19.setRealm((org.jsecurity.realm.Realm)var31);
    org.jsecurity.cache.HashtableCacheManager var35 = new org.jsecurity.cache.HashtableCacheManager();
    org.jsecurity.cache.Cache var37 = var35.getCache("\u0000\u0000");
    var31.setAuthorizationCache(var37);
    var8.setActiveSessionsCache(var37);
    org.jsecurity.session.mgt.SimpleSession var40 = new org.jsecurity.session.mgt.SimpleSession();
    java.io.Serializable var41 = var8.create((org.jsecurity.session.Session)var40);
    var7.setSessionDAO((org.jsecurity.session.mgt.eis.SessionDAO)var8);
    long var43 = var7.getSessionValidationInterval();
    long var44 = var7.getSessionValidationInterval();
    var7.setGlobalSessionTimeout(1);
    var2.setSessionManager((org.jsecurity.session.mgt.SessionManager)var7);
    boolean var48 = var1.equals((java.lang.Object)var7);
    var7.enableSessionValidationIfNecessary();
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var1);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var5);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var6);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var9);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var10);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var13);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var16);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var17);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var18);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var26);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var27);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var28);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var37);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var41 + "' != '" + "11e31b8f-949c-4029-91a9-fc89cb88634c"+ "'", var41.equals("11e31b8f-949c-4029-91a9-fc89cb88634c"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var43 == 3600000L);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var44 == 3600000L);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var48 == false);

  }

  public void test69() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest5.test69");


    boolean var1 = org.jsecurity.util.StringUtils.hasLength("6b66fcdb76f57bbd9e69ed9bef6ef6f3d75ff1ad346bcf5d7fc6b46da6fa69df1af3d73873973b6bd6fad9adbbd34d34");
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var1 == true);

  }

  public void test70() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest5.test70");


    org.jsecurity.realm.activedirectory.ActiveDirectoryRealm var0 = new org.jsecurity.realm.activedirectory.ActiveDirectoryRealm();
    var0.initAuthorizationCache();
    var0.setSearchBase("dd\uFFFD");
    org.jsecurity.cache.Cache var4 = var0.getAuthorizationCache();
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var4);

  }

  public void test71() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest5.test71");


    org.jsecurity.io.DefaultSerializer var0 = new org.jsecurity.io.DefaultSerializer();
    byte[] var2 = org.jsecurity.codec.Base64.decode("org.jsecurity.authc.IncorrectCredentialsException: \u0000\u0000");
    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      java.lang.Object var3 = var0.deserialize(var2);
      fail("Expected exception of type org.jsecurity.io.SerializationException");
    } catch (org.jsecurity.io.SerializationException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var2);

  }

  public void test72() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest5.test72");


    org.jsecurity.authc.credential.Sha256CredentialsMatcher var0 = new org.jsecurity.authc.credential.Sha256CredentialsMatcher();
    boolean var1 = var0.isStoredCredentialsHexEncoded();
    var0.setStoredCredentialsHexEncoded(true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var1 == true);

  }

  public void test73() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest5.test73");


    org.jsecurity.session.UnknownSessionException var3 = new org.jsecurity.session.UnknownSessionException("dd\uFFFD", (java.io.Serializable)100.0f);
    org.jsecurity.subject.SubjectException var4 = new org.jsecurity.subject.SubjectException("dd\uFFFD", (java.lang.Throwable)var3);
    org.jsecurity.session.SessionException var5 = new org.jsecurity.session.SessionException((java.lang.Throwable)var3);

  }

  public void test74() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest5.test74");


    org.jsecurity.session.InvalidSessionException var1 = new org.jsecurity.session.InvalidSessionException("o\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFDw8\u3B9A\uFFFDM\uFFFD\uFFFDg\uFFFD\uFFFD\u07BC\u059C");

  }

  public void test75() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest5.test75");


    org.jsecurity.mgt.DefaultSecurityManager var0 = new org.jsecurity.mgt.DefaultSecurityManager();
    org.jsecurity.authc.pam.AllSuccessfulModularAuthenticationStrategy var1 = new org.jsecurity.authc.pam.AllSuccessfulModularAuthenticationStrategy();
    org.jsecurity.authc.pam.AllSuccessfulModularAuthenticationStrategy var2 = new org.jsecurity.authc.pam.AllSuccessfulModularAuthenticationStrategy();
    char[] var4 = new char[] { };
    org.jsecurity.authc.UsernamePasswordToken var6 = new org.jsecurity.authc.UsernamePasswordToken("hi!", var4, true);
    org.jsecurity.authc.SimpleAccount var7 = new org.jsecurity.authc.SimpleAccount();
    var7.setCredentialsExpired(false);
    boolean var10 = var7.isLocked();
    org.jsecurity.authc.AuthenticationInfo var11 = var2.afterAllAttempts((org.jsecurity.authc.AuthenticationToken)var6, (org.jsecurity.authc.AuthenticationInfo)var7);
    char[] var15 = new char[] { '4', '#'};
    org.jsecurity.authc.UsernamePasswordToken var16 = new org.jsecurity.authc.UsernamePasswordToken("\u0000\u0000", var15);
    org.jsecurity.authc.SimpleAccount var17 = new org.jsecurity.authc.SimpleAccount();
    var17.setCredentialsExpired(false);
    var17.setCredentialsExpired(false);
    boolean var22 = var17.isCredentialsExpired();
    org.jsecurity.authc.AuthenticationInfo var23 = var2.afterAllAttempts((org.jsecurity.authc.AuthenticationToken)var16, (org.jsecurity.authc.AuthenticationInfo)var17);
    org.jsecurity.authz.UnauthenticatedException var27 = new org.jsecurity.authz.UnauthenticatedException();
    org.jsecurity.config.UnresolveableReferenceException var28 = new org.jsecurity.config.UnresolveableReferenceException("", (java.lang.Throwable)var27);
    org.jsecurity.cache.CacheException var29 = new org.jsecurity.cache.CacheException("org.jsecurity.config.ConfigurationException: dd\uFFFD", (java.lang.Throwable)var27);
    org.jsecurity.authc.SimpleAuthenticationInfo var31 = new org.jsecurity.authc.SimpleAuthenticationInfo((java.lang.Object)"org.jsecurity.config.ConfigurationException: dd\uFFFD", (java.lang.Object)var29, "a2b823b1e72eae2b727289df8a00a89df8a0bab6ad8a89c4c5c7a9b62a270000");
    org.jsecurity.subject.PrincipalCollection var32 = var31.getPrincipals();
    org.jsecurity.authc.AuthenticationInfo var33 = var1.afterAllAttempts((org.jsecurity.authc.AuthenticationToken)var16, (org.jsecurity.authc.AuthenticationInfo)var31);
    var0.setModularAuthenticationStrategy((org.jsecurity.authc.pam.ModularAuthenticationStrategy)var1);
    org.jsecurity.session.mgt.SimpleSession var37 = new org.jsecurity.session.mgt.SimpleSession();
    var37.setTimeout((-1L));
    org.jsecurity.session.mgt.SimpleSession var40 = new org.jsecurity.session.mgt.SimpleSession();
    java.util.Date var41 = var40.getLastAccessTime();
    var37.setLastAccessTime(var41);
    java.net.InetAddress var43 = var37.getHostAddress();
    org.jsecurity.authc.UsernamePasswordToken var44 = new org.jsecurity.authc.UsernamePasswordToken("10f5b491-38ac-4c02-8085-950abb026a06", "NfxhYN7ItBfRAmDBmprtU73ghfEEPpcDJrHPkZ06wiY=", var43);
    org.jsecurity.session.Session var45 = var0.start(var43);
    org.jsecurity.cache.ehcache.EhCacheManager var46 = new org.jsecurity.cache.ehcache.EhCacheManager();
    net.sf.ehcache.CacheManager var47 = var46.getCacheManager();
    var46.setCacheManagerConfigFile("org.jsecurity.authz.UnauthorizedException: org.jsecurity.session.ExpiredSessionException: ");
    var0.setCacheManager((org.jsecurity.cache.CacheManager)var46);
    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      var0.setRememberMeCipherKeyBase64("def3bb13-1c13-4efd-8418-6ca61c15cbd6");
      fail("Expected exception of type java.lang.IllegalStateException");
    } catch (java.lang.IllegalStateException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var4);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var10 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var11);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var15);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var22 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var23);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var32);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var33);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var41);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var43);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var45);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var47);

  }

  public void test76() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest5.test76");


    org.jsecurity.io.ResourceException var4 = new org.jsecurity.io.ResourceException("hi!");
    org.jsecurity.codec.CodecException var5 = new org.jsecurity.codec.CodecException((java.lang.Throwable)var4);
    org.jsecurity.JSecurityException var6 = new org.jsecurity.JSecurityException("a2b823b1e72eae2b727289df8a00a89df8a0bab6ad8a89c4c5c7a9b62a270000", (java.lang.Throwable)var4);
    org.jsecurity.authc.LockedAccountException var7 = new org.jsecurity.authc.LockedAccountException("a2b823b1e72eae2b727289df8a00a89df8a0bab6ad8a89c4c5c7a9b62a270000", (java.lang.Throwable)var6);
    org.jsecurity.authz.AuthorizationException var8 = new org.jsecurity.authz.AuthorizationException("f038fdb8-a003-42b2-ae02-712288013087", (java.lang.Throwable)var7);

  }

  public void test77() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest5.test77");


    org.jsecurity.authz.SimpleRole var0 = new org.jsecurity.authz.SimpleRole();
    org.jsecurity.authc.IncorrectCredentialsException var2 = new org.jsecurity.authc.IncorrectCredentialsException();
    org.jsecurity.session.UnknownSessionException var3 = new org.jsecurity.session.UnknownSessionException((java.lang.Throwable)var2);
    org.jsecurity.config.UnresolveableReferenceException var4 = new org.jsecurity.config.UnresolveableReferenceException("dd\uFFFD", (java.lang.Throwable)var3);
    boolean var5 = var0.equals((java.lang.Object)var4);
    java.lang.String var6 = var4.toString();
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var5 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var6 + "' != '" + "org.jsecurity.config.UnresolveableReferenceException: dd\uFFFD"+ "'", var6.equals("org.jsecurity.config.UnresolveableReferenceException: dd\uFFFD"));

  }

  public void test78() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest5.test78");


    org.jsecurity.authz.ModularRealmAuthorizer var0 = new org.jsecurity.authz.ModularRealmAuthorizer();
    java.io.InputStream var2 = org.jsecurity.util.ClassUtils.getResourceAsStream("");
    java.lang.Object[] var3 = new java.lang.Object[] { var2};
    java.util.List var4 = org.jsecurity.util.CollectionUtils.asList(var3);
    org.jsecurity.authc.pam.ModularRealmAuthenticator var5 = new org.jsecurity.authc.pam.ModularRealmAuthenticator(var4);
    org.jsecurity.subject.SimplePrincipalCollection var7 = new org.jsecurity.subject.SimplePrincipalCollection((java.util.Collection)var4, "org.jsecurity.authz.UnauthorizedException: org.jsecurity.session.ExpiredSessionException: ");
    org.jsecurity.session.UnknownSessionException var12 = new org.jsecurity.session.UnknownSessionException("dd\uFFFD", (java.io.Serializable)100.0f);
    org.jsecurity.session.SessionException var14 = new org.jsecurity.session.SessionException("dd\uFFFD", (java.lang.Throwable)var12, (java.io.Serializable)0);
    org.jsecurity.session.SessionException var15 = new org.jsecurity.session.SessionException("dd\uFFFD", (java.lang.Throwable)var12);
    var7.add((java.lang.Object)var15, "org.jsecurity.config.ConfigurationException: dd\uFFFD");
    java.util.Set var18 = var7.asSet();
    var0.setRealms((java.util.Collection)var18);
    org.jsecurity.authz.UnauthorizedException var21 = new org.jsecurity.authz.UnauthorizedException("org.jsecurity.config.ConfigurationException: dd\uFFFD");
    java.lang.Throwable[] var22 = var21.getSuppressed();
    java.util.Set var23 = org.jsecurity.util.CollectionUtils.asSet((java.lang.Object[])var22);
    var0.setRealms((java.util.Collection)var23);
    org.jsecurity.cache.HashtableCache var26 = new org.jsecurity.cache.HashtableCache("orgjsecurityauthcCredentialsException783ccd3148a842dd890fdf885a7baafAA==");
    org.jsecurity.realm.text.TextConfigurationRealm var27 = new org.jsecurity.realm.text.TextConfigurationRealm();
    java.io.InputStream var29 = org.jsecurity.util.ClassUtils.getResourceAsStream("");
    java.lang.Object[] var30 = new java.lang.Object[] { var29};
    java.util.List var31 = org.jsecurity.util.CollectionUtils.asList(var30);
    org.jsecurity.authc.pam.ModularRealmAuthenticator var32 = new org.jsecurity.authc.pam.ModularRealmAuthenticator(var31);
    org.jsecurity.subject.SimplePrincipalCollection var34 = new org.jsecurity.subject.SimplePrincipalCollection((java.util.Collection)var31, "org.jsecurity.authz.UnauthorizedException: org.jsecurity.session.ExpiredSessionException: ");
    org.jsecurity.session.UnknownSessionException var39 = new org.jsecurity.session.UnknownSessionException("dd\uFFFD", (java.io.Serializable)100.0f);
    org.jsecurity.session.SessionException var41 = new org.jsecurity.session.SessionException("dd\uFFFD", (java.lang.Throwable)var39, (java.io.Serializable)0);
    org.jsecurity.session.SessionException var42 = new org.jsecurity.session.SessionException("dd\uFFFD", (java.lang.Throwable)var39);
    var34.add((java.lang.Object)var42, "org.jsecurity.config.ConfigurationException: dd\uFFFD");
    var27.onLogout((org.jsecurity.subject.PrincipalCollection)var34);
    var26.remove((java.lang.Object)var34);
    org.jsecurity.subject.SimplePrincipalCollection var47 = new org.jsecurity.subject.SimplePrincipalCollection((org.jsecurity.subject.PrincipalCollection)var34);
    org.jsecurity.realm.text.TextConfigurationRealm var48 = new org.jsecurity.realm.text.TextConfigurationRealm();
    org.jsecurity.realm.text.TextConfigurationRealm var49 = new org.jsecurity.realm.text.TextConfigurationRealm();
    java.io.InputStream var51 = org.jsecurity.util.ClassUtils.getResourceAsStream("");
    java.lang.Object[] var52 = new java.lang.Object[] { var51};
    java.util.List var53 = org.jsecurity.util.CollectionUtils.asList(var52);
    org.jsecurity.authc.pam.ModularRealmAuthenticator var54 = new org.jsecurity.authc.pam.ModularRealmAuthenticator(var53);
    org.jsecurity.subject.SimplePrincipalCollection var56 = new org.jsecurity.subject.SimplePrincipalCollection((java.util.Collection)var53, "org.jsecurity.authz.UnauthorizedException: org.jsecurity.session.ExpiredSessionException: ");
    org.jsecurity.session.UnknownSessionException var61 = new org.jsecurity.session.UnknownSessionException("dd\uFFFD", (java.io.Serializable)100.0f);
    org.jsecurity.session.SessionException var63 = new org.jsecurity.session.SessionException("dd\uFFFD", (java.lang.Throwable)var61, (java.io.Serializable)0);
    org.jsecurity.session.SessionException var64 = new org.jsecurity.session.SessionException("dd\uFFFD", (java.lang.Throwable)var61);
    var56.add((java.lang.Object)var64, "org.jsecurity.config.ConfigurationException: dd\uFFFD");
    var49.onLogout((org.jsecurity.subject.PrincipalCollection)var56);
    java.util.Collection var69 = var56.fromRealm("\u0000\u0000\u0000");
    var48.onLogout((org.jsecurity.subject.PrincipalCollection)var56);
    java.util.Set var71 = var56.asSet();
    org.jsecurity.authz.ModularRealmAuthorizer var72 = new org.jsecurity.authz.ModularRealmAuthorizer((java.util.Collection)var71);
    org.jsecurity.authc.pam.ModularRealmAuthenticator var74 = new org.jsecurity.authc.pam.ModularRealmAuthenticator();
    org.jsecurity.authz.permission.InvalidPermissionStringException var77 = new org.jsecurity.authz.permission.InvalidPermissionStringException("", "dd\uFFFD");
    org.jsecurity.JSecurityException var79 = new org.jsecurity.JSecurityException("");
    org.jsecurity.authc.SimpleAuthenticationInfo var81 = new org.jsecurity.authc.SimpleAuthenticationInfo((java.lang.Object)var77, (java.lang.Object)"", "org.jsecurity.authz.UnauthorizedException: org.jsecurity.session.ExpiredSessionException: ");
    org.jsecurity.subject.PrincipalCollection var82 = var81.getPrincipals();
    var74.onLogout(var82);
    org.jsecurity.session.SessionException var84 = new org.jsecurity.session.SessionException("\uFFFD\uFFFD#\uFFFD\uFFFD.\uFFFD+rr\uFFFD\u07CA\u0000\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\u01E9\uFFFD*'\u0000\u0000", (java.io.Serializable)var82);
    org.jsecurity.session.UnknownSessionException var89 = new org.jsecurity.session.UnknownSessionException("dd\uFFFD", (java.io.Serializable)100.0f);
    org.jsecurity.subject.SubjectException var90 = new org.jsecurity.subject.SubjectException("dd\uFFFD", (java.lang.Throwable)var89);
    org.jsecurity.io.SerializationException var91 = new org.jsecurity.io.SerializationException("", (java.lang.Throwable)var90);
    java.lang.Throwable[] var92 = var90.getSuppressed();
    java.util.List var93 = org.jsecurity.util.CollectionUtils.asList((java.lang.Object[])var92);
    var72.checkPermissions(var82, (java.util.Collection)var93);
    boolean[] var95 = var0.isPermitted((org.jsecurity.subject.PrincipalCollection)var34, var93);
    org.jsecurity.authz.permission.WildcardPermissionResolver var96 = new org.jsecurity.authz.permission.WildcardPermissionResolver();
    org.jsecurity.authz.Permission var98 = var96.resolvePermission("hi!");
    var0.setPermissionResolver((org.jsecurity.authz.permission.PermissionResolver)var96);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var2);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var3);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var4);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var18);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var22);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var23);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var29);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var30);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var31);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var51);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var52);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var53);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var69);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var71);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var82);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var92);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var93);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var95);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var98);

  }

  public void test79() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest5.test79");


    org.jsecurity.authz.HostUnauthorizedException var1 = new org.jsecurity.authz.HostUnauthorizedException();
    org.jsecurity.codec.CodecException var2 = new org.jsecurity.codec.CodecException("b725e8cc-690c-495e-ac27-b1b425834793", (java.lang.Throwable)var1);
    org.jsecurity.authc.pam.AllSuccessfulModularAuthenticationStrategy var8 = new org.jsecurity.authc.pam.AllSuccessfulModularAuthenticationStrategy();
    char[] var10 = new char[] { };
    org.jsecurity.authc.UsernamePasswordToken var12 = new org.jsecurity.authc.UsernamePasswordToken("hi!", var10, true);
    org.jsecurity.authc.SimpleAccount var13 = new org.jsecurity.authc.SimpleAccount();
    var13.setCredentialsExpired(false);
    boolean var16 = var13.isLocked();
    org.jsecurity.authc.AuthenticationInfo var17 = var8.afterAllAttempts((org.jsecurity.authc.AuthenticationToken)var12, (org.jsecurity.authc.AuthenticationInfo)var13);
    char[] var21 = new char[] { '4', '#'};
    org.jsecurity.authc.UsernamePasswordToken var22 = new org.jsecurity.authc.UsernamePasswordToken("\u0000\u0000", var21);
    org.jsecurity.authc.SimpleAccount var23 = new org.jsecurity.authc.SimpleAccount();
    var23.setCredentialsExpired(false);
    var23.setCredentialsExpired(false);
    boolean var28 = var23.isCredentialsExpired();
    org.jsecurity.authc.AuthenticationInfo var29 = var8.afterAllAttempts((org.jsecurity.authc.AuthenticationToken)var22, (org.jsecurity.authc.AuthenticationInfo)var23);
    org.jsecurity.realm.activedirectory.ActiveDirectoryRealm var30 = new org.jsecurity.realm.activedirectory.ActiveDirectoryRealm();
    org.jsecurity.authc.credential.Sha256CredentialsMatcher var31 = new org.jsecurity.authc.credential.Sha256CredentialsMatcher();
    var30.setCredentialsMatcher((org.jsecurity.authc.credential.CredentialsMatcher)var31);
    java.lang.String var33 = var30.getAuthorizationCacheName();
    org.jsecurity.authc.UsernamePasswordToken var34 = new org.jsecurity.authc.UsernamePasswordToken();
    java.lang.String var35 = var34.getUsername();
    java.lang.Object var36 = var34.getPrincipal();
    boolean var37 = var30.supports((org.jsecurity.authc.AuthenticationToken)var34);
    org.jsecurity.session.UnknownSessionException var41 = new org.jsecurity.session.UnknownSessionException("dd\uFFFD", (java.io.Serializable)100.0f);
    org.jsecurity.session.SessionException var43 = new org.jsecurity.session.SessionException("dd\uFFFD", (java.lang.Throwable)var41, (java.io.Serializable)0);
    org.jsecurity.authc.SimpleAuthenticationInfo var46 = new org.jsecurity.authc.SimpleAuthenticationInfo((java.lang.Object)0, (java.lang.Object)10, "hi!");
    java.lang.Object var47 = var46.getCredentials();
    java.lang.String var48 = var46.toString();
    org.jsecurity.authc.AuthenticationInfo var49 = var8.afterAllAttempts((org.jsecurity.authc.AuthenticationToken)var34, (org.jsecurity.authc.AuthenticationInfo)var46);
    char[] var53 = new char[] { ' ', ' '};
    org.jsecurity.authc.UsernamePasswordToken var54 = new org.jsecurity.authc.UsernamePasswordToken("hi!", var53);
    char[] var58 = new char[] { '4', '#'};
    org.jsecurity.authc.UsernamePasswordToken var59 = new org.jsecurity.authc.UsernamePasswordToken("\u0000\u0000", var58);
    var54.setPassword(var58);
    org.jsecurity.session.mgt.SimpleSession var61 = new org.jsecurity.session.mgt.SimpleSession();
    var61.setTimeout((-1L));
    org.jsecurity.session.mgt.SimpleSession var64 = new org.jsecurity.session.mgt.SimpleSession();
    java.util.Date var65 = var64.getLastAccessTime();
    var61.setLastAccessTime(var65);
    java.net.InetAddress var67 = var61.getHostAddress();
    var54.setInetAddress(var67);
    var34.setInetAddress(var67);
    org.jsecurity.authc.UsernamePasswordToken var70 = new org.jsecurity.authc.UsernamePasswordToken("HashtableCache [\u0000\u0000\u0000]", "020e4fd5-81c8-4cbc-9bbb-975c45ce39a3", var67);
    org.jsecurity.authc.UsernamePasswordToken var71 = new org.jsecurity.authc.UsernamePasswordToken("44126908-8346-4f1c-92de-726997ba95f5", "0a4dfd98-4ec1-476c-a8b7-0ade4d007ab7", false, var67);
    var1.setHostAddress(var67);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var10);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var16 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var17);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var21);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var28 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var29);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var33);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var35);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var36);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var37 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var47 + "' != '" + 10+ "'", var47.equals(10));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var49);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var53);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var58);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var65);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var67);

  }

  public void test80() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest5.test80");


    org.jsecurity.crypto.hash.Sha384Hash var1 = org.jsecurity.crypto.hash.Sha384Hash.fromBase64String("e2497199-95f2-4373-8934-d742f09a6cb1");
    java.lang.String var2 = var1.toBase64();
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var2 + "' != '" + "e249719995f243738934d742f09a6cb1"+ "'", var2.equals("e249719995f243738934d742f09a6cb1"));

  }

  public void test81() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest5.test81");


    org.jsecurity.authz.HostUnauthorizedException var1 = new org.jsecurity.authz.HostUnauthorizedException("org.jsecurity.authz.UnauthorizedException: org.jsecurity.session.ExpiredSessionException: ");

  }

  public void test82() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest5.test82");


    org.jsecurity.crypto.BlowfishCipher var0 = new org.jsecurity.crypto.BlowfishCipher();
    byte[] var4 = new byte[] { (byte)100, (byte)100, (byte)(-1)};
    java.lang.String var5 = org.jsecurity.codec.CodecSupport.toString(var4);
    byte[] var7 = org.jsecurity.codec.Base64.decode("hi!");
    byte[] var8 = var0.encrypt(var4, var7);
    org.jsecurity.crypto.BlowfishCipher var9 = new org.jsecurity.crypto.BlowfishCipher();
    byte[] var13 = new byte[] { (byte)100, (byte)100, (byte)(-1)};
    java.lang.String var14 = org.jsecurity.codec.CodecSupport.toString(var13);
    byte[] var16 = org.jsecurity.codec.Base64.decode("hi!");
    byte[] var17 = var9.encrypt(var13, var16);
    org.jsecurity.crypto.BlowfishCipher var18 = new org.jsecurity.crypto.BlowfishCipher();
    java.security.Key var19 = var18.getKey();
    java.security.Key var20 = var18.getKey();
    var9.setKey(var20);
    var0.setKey(var20);
    byte[] var26 = new byte[] { (byte)100, (byte)100, (byte)(-1)};
    java.lang.String var27 = org.jsecurity.codec.CodecSupport.toString(var26);
    byte[] var29 = org.jsecurity.codec.Base64.encode(var26, false);
    java.lang.String var30 = org.jsecurity.codec.CodecSupport.toString(var29);
    org.jsecurity.crypto.hash.Sha512Hash var32 = org.jsecurity.crypto.hash.Sha512Hash.fromBase64String("org.jsecurity.config.ConfigurationException: dd\uFFFD");
    byte[] var33 = var32.getBytes();
    java.lang.String var34 = var32.toString();
    byte[] var35 = var32.getBytes();
    org.jsecurity.crypto.hash.Md2Hash var37 = org.jsecurity.crypto.hash.Md2Hash.fromHexString("6464ff");
    java.lang.String var38 = var37.toString();
    byte[] var39 = var37.getBytes();
    byte[] var40 = var37.getBytes();
    var32.setBytes(var40);
    java.lang.String var42 = org.jsecurity.codec.CodecSupport.toString(var40);
    byte[] var43 = var0.encrypt(var29, var40);
    org.jsecurity.crypto.hash.Sha512Hash var45 = org.jsecurity.crypto.hash.Sha512Hash.fromBase64String("org.jsecurity.config.ConfigurationException: dd\uFFFD");
    byte[] var46 = var45.getBytes();
    java.lang.String var47 = org.jsecurity.codec.Base64.decodeToString(var46);
    byte[] var48 = org.jsecurity.codec.Base64.encodeChunked(var46);
    java.lang.String var49 = org.jsecurity.codec.Hex.encodeToString(var46);
    org.jsecurity.crypto.BlowfishCipher var50 = new org.jsecurity.crypto.BlowfishCipher();
    byte[] var54 = new byte[] { (byte)100, (byte)100, (byte)(-1)};
    java.lang.String var55 = org.jsecurity.codec.CodecSupport.toString(var54);
    byte[] var57 = org.jsecurity.codec.Base64.decode("hi!");
    byte[] var58 = var50.encrypt(var54, var57);
    org.jsecurity.crypto.BlowfishCipher var59 = new org.jsecurity.crypto.BlowfishCipher();
    byte[] var63 = new byte[] { (byte)100, (byte)100, (byte)(-1)};
    java.lang.String var64 = org.jsecurity.codec.CodecSupport.toString(var63);
    byte[] var66 = org.jsecurity.codec.Base64.decode("hi!");
    byte[] var67 = var59.encrypt(var63, var66);
    org.jsecurity.crypto.BlowfishCipher var68 = new org.jsecurity.crypto.BlowfishCipher();
    java.security.Key var69 = var68.getKey();
    java.security.Key var70 = var68.getKey();
    var59.setKey(var70);
    var50.setKey(var70);
    byte[] var76 = new byte[] { (byte)100, (byte)100, (byte)(-1)};
    java.lang.String var77 = org.jsecurity.codec.CodecSupport.toString(var76);
    byte[] var79 = org.jsecurity.codec.Base64.encode(var76, false);
    java.lang.String var80 = org.jsecurity.codec.CodecSupport.toString(var79);
    org.jsecurity.crypto.hash.Sha512Hash var82 = org.jsecurity.crypto.hash.Sha512Hash.fromBase64String("org.jsecurity.config.ConfigurationException: dd\uFFFD");
    byte[] var83 = var82.getBytes();
    java.lang.String var84 = var82.toString();
    byte[] var85 = var82.getBytes();
    org.jsecurity.crypto.hash.Md2Hash var87 = org.jsecurity.crypto.hash.Md2Hash.fromHexString("6464ff");
    java.lang.String var88 = var87.toString();
    byte[] var89 = var87.getBytes();
    byte[] var90 = var87.getBytes();
    var82.setBytes(var90);
    java.lang.String var92 = org.jsecurity.codec.CodecSupport.toString(var90);
    byte[] var93 = var50.encrypt(var79, var90);
    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      byte[] var94 = var0.decrypt(var46, var90);
      fail("Expected exception of type java.lang.IllegalStateException");
    } catch (java.lang.IllegalStateException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var4);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var5 + "' != '" + "dd\uFFFD"+ "'", var5.equals("dd\uFFFD"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var7);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var8);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var13);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var14 + "' != '" + "dd\uFFFD"+ "'", var14.equals("dd\uFFFD"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var16);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var17);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var19);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var20);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var26);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var27 + "' != '" + "dd\uFFFD"+ "'", var27.equals("dd\uFFFD"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var29);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var30 + "' != '" + "ZGT/"+ "'", var30.equals("ZGT/"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var32);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var33);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var34 + "' != '" + "a2b823b1e72eae2b727289df8a00a89df8a0bab6ad8a89c4c5c7a9b62a270000"+ "'", var34.equals("a2b823b1e72eae2b727289df8a00a89df8a0bab6ad8a89c4c5c7a9b62a270000"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var35);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var37);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var38 + "' != '" + "6464ff"+ "'", var38.equals("6464ff"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var39);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var40);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var42 + "' != '" + "dd\uFFFD"+ "'", var42.equals("dd\uFFFD"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var43);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var45);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var46);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var47 + "' != '" + "\u0000\u0000\u0000"+ "'", var47.equals("\u0000\u0000\u0000"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var48);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var49 + "' != '" + "a2b823b1e72eae2b727289df8a00a89df8a0bab6ad8a89c4c5c7a9b62a270000"+ "'", var49.equals("a2b823b1e72eae2b727289df8a00a89df8a0bab6ad8a89c4c5c7a9b62a270000"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var54);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var55 + "' != '" + "dd\uFFFD"+ "'", var55.equals("dd\uFFFD"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var57);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var58);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var63);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var64 + "' != '" + "dd\uFFFD"+ "'", var64.equals("dd\uFFFD"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var66);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var67);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var69);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var70);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var76);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var77 + "' != '" + "dd\uFFFD"+ "'", var77.equals("dd\uFFFD"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var79);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var80 + "' != '" + "ZGT/"+ "'", var80.equals("ZGT/"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var82);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var83);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var84 + "' != '" + "a2b823b1e72eae2b727289df8a00a89df8a0bab6ad8a89c4c5c7a9b62a270000"+ "'", var84.equals("a2b823b1e72eae2b727289df8a00a89df8a0bab6ad8a89c4c5c7a9b62a270000"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var85);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var87);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var88 + "' != '" + "6464ff"+ "'", var88.equals("6464ff"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var89);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var90);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var92 + "' != '" + "dd\uFFFD"+ "'", var92.equals("dd\uFFFD"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var93);

  }

  public void test83() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest5.test83");


    org.jsecurity.crypto.BlowfishCipher var0 = new org.jsecurity.crypto.BlowfishCipher();
    java.security.Key var1 = var0.getKey();
    java.security.Key var2 = var0.getKey();
    org.jsecurity.crypto.hash.Sha512Hash var4 = org.jsecurity.crypto.hash.Sha512Hash.fromBase64String("org.jsecurity.config.ConfigurationException: dd\uFFFD");
    byte[] var5 = var4.getBytes();
    java.lang.String var6 = org.jsecurity.codec.Base64.decodeToString(var5);
    byte[] var7 = org.jsecurity.codec.Base64.encodeChunked(var5);
    boolean var8 = org.jsecurity.codec.Base64.isBase64(var7);
    org.jsecurity.crypto.BlowfishCipher var9 = new org.jsecurity.crypto.BlowfishCipher();
    byte[] var13 = new byte[] { (byte)100, (byte)100, (byte)(-1)};
    java.lang.String var14 = org.jsecurity.codec.CodecSupport.toString(var13);
    byte[] var16 = org.jsecurity.codec.Base64.decode("hi!");
    byte[] var17 = var9.encrypt(var13, var16);
    org.jsecurity.crypto.BlowfishCipher var18 = new org.jsecurity.crypto.BlowfishCipher();
    byte[] var22 = new byte[] { (byte)100, (byte)100, (byte)(-1)};
    java.lang.String var23 = org.jsecurity.codec.CodecSupport.toString(var22);
    byte[] var25 = org.jsecurity.codec.Base64.decode("hi!");
    byte[] var26 = var18.encrypt(var22, var25);
    org.jsecurity.crypto.BlowfishCipher var27 = new org.jsecurity.crypto.BlowfishCipher();
    java.security.Key var28 = var27.getKey();
    java.security.Key var29 = var27.getKey();
    var18.setKey(var29);
    var9.setKey(var29);
    byte[] var35 = new byte[] { (byte)100, (byte)100, (byte)(-1)};
    java.lang.String var36 = org.jsecurity.codec.CodecSupport.toString(var35);
    byte[] var38 = org.jsecurity.codec.Base64.encode(var35, false);
    java.lang.String var39 = org.jsecurity.codec.CodecSupport.toString(var38);
    org.jsecurity.crypto.hash.Sha512Hash var41 = org.jsecurity.crypto.hash.Sha512Hash.fromBase64String("org.jsecurity.config.ConfigurationException: dd\uFFFD");
    byte[] var42 = var41.getBytes();
    java.lang.String var43 = var41.toString();
    byte[] var44 = var41.getBytes();
    org.jsecurity.crypto.hash.Md2Hash var46 = org.jsecurity.crypto.hash.Md2Hash.fromHexString("6464ff");
    java.lang.String var47 = var46.toString();
    byte[] var48 = var46.getBytes();
    byte[] var49 = var46.getBytes();
    var41.setBytes(var49);
    java.lang.String var51 = org.jsecurity.codec.CodecSupport.toString(var49);
    byte[] var52 = var9.encrypt(var38, var49);
    byte[] var53 = org.jsecurity.codec.Base64.decode(var38);
    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      byte[] var54 = var0.decrypt(var7, var38);
      fail("Expected exception of type java.lang.IllegalStateException");
    } catch (java.lang.IllegalStateException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var1);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var2);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var4);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var5);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var6 + "' != '" + "\u0000\u0000\u0000"+ "'", var6.equals("\u0000\u0000\u0000"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var7);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var8 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var13);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var14 + "' != '" + "dd\uFFFD"+ "'", var14.equals("dd\uFFFD"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var16);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var17);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var22);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var23 + "' != '" + "dd\uFFFD"+ "'", var23.equals("dd\uFFFD"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var25);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var26);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var28);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var29);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var35);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var36 + "' != '" + "dd\uFFFD"+ "'", var36.equals("dd\uFFFD"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var38);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var39 + "' != '" + "ZGT/"+ "'", var39.equals("ZGT/"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var41);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var42);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var43 + "' != '" + "a2b823b1e72eae2b727289df8a00a89df8a0bab6ad8a89c4c5c7a9b62a270000"+ "'", var43.equals("a2b823b1e72eae2b727289df8a00a89df8a0bab6ad8a89c4c5c7a9b62a270000"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var44);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var46);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var47 + "' != '" + "6464ff"+ "'", var47.equals("6464ff"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var48);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var49);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var51 + "' != '" + "dd\uFFFD"+ "'", var51.equals("dd\uFFFD"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var52);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var53);

  }

  public void test84() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest5.test84");


    org.jsecurity.session.mgt.SimpleSession var0 = new org.jsecurity.session.mgt.SimpleSession();
    boolean var1 = var0.isExpired();
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var1 == false);

  }

  public void test85() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest5.test85");


    org.jsecurity.realm.text.PropertiesRealm var0 = new org.jsecurity.realm.text.PropertiesRealm();
    java.lang.String var1 = var0.getUserDefinitions();
    java.lang.String var2 = var0.getName();
    var0.setAuthorizationCacheName("c1e9a12f-a43f-4ba8-919e-e392cd0dc8c2");
    org.jsecurity.mgt.DefaultSecurityManager var5 = new org.jsecurity.mgt.DefaultSecurityManager();
    java.io.InputStream var7 = org.jsecurity.util.ClassUtils.getResourceAsStream("");
    java.lang.Object[] var8 = new java.lang.Object[] { var7};
    java.util.List var9 = org.jsecurity.util.CollectionUtils.asList(var8);
    org.jsecurity.authc.pam.ModularRealmAuthenticator var10 = new org.jsecurity.authc.pam.ModularRealmAuthenticator(var9);
    org.jsecurity.authc.pam.AllSuccessfulModularAuthenticationStrategy var11 = new org.jsecurity.authc.pam.AllSuccessfulModularAuthenticationStrategy();
    var10.setModularAuthenticationStrategy((org.jsecurity.authc.pam.ModularAuthenticationStrategy)var11);
    org.jsecurity.authz.SimpleAuthorizationInfo var13 = new org.jsecurity.authz.SimpleAuthorizationInfo();
    var13.addStringPermission("hi!");
    java.io.InputStream var17 = org.jsecurity.util.ClassUtils.getResourceAsStream("");
    java.lang.Object[] var18 = new java.lang.Object[] { var17};
    java.util.List var19 = org.jsecurity.util.CollectionUtils.asList(var18);
    var13.addRoles((java.util.Collection)var19);
    var10.setAuthenticationListeners((java.util.Collection)var19);
    var5.setSessionListeners((java.util.Collection)var19);
    org.jsecurity.authc.pam.ModularRealmAuthenticator var23 = new org.jsecurity.authc.pam.ModularRealmAuthenticator();
    org.jsecurity.authz.permission.InvalidPermissionStringException var26 = new org.jsecurity.authz.permission.InvalidPermissionStringException("", "dd\uFFFD");
    org.jsecurity.JSecurityException var28 = new org.jsecurity.JSecurityException("");
    org.jsecurity.authc.SimpleAuthenticationInfo var30 = new org.jsecurity.authc.SimpleAuthenticationInfo((java.lang.Object)var26, (java.lang.Object)"", "org.jsecurity.authz.UnauthorizedException: org.jsecurity.session.ExpiredSessionException: ");
    org.jsecurity.subject.PrincipalCollection var31 = var30.getPrincipals();
    var23.onLogout(var31);
    var5.setAuthenticator((org.jsecurity.authc.Authenticator)var23);
    org.jsecurity.codec.CodecException var36 = new org.jsecurity.codec.CodecException("dd\uFFFD");
    org.jsecurity.authc.ConcurrentAccessException var37 = new org.jsecurity.authc.ConcurrentAccessException("org.jsecurity.authz.UnauthorizedException: org.jsecurity.session.ExpiredSessionException: ", (java.lang.Throwable)var36);
    org.jsecurity.subject.SimplePrincipalCollection var39 = new org.jsecurity.subject.SimplePrincipalCollection((java.lang.Object)var36, "");
    org.jsecurity.authc.pam.FirstSuccessfulAuthenticationStrategy var40 = new org.jsecurity.authc.pam.FirstSuccessfulAuthenticationStrategy();
    org.jsecurity.authz.UnauthorizedException var42 = new org.jsecurity.authz.UnauthorizedException("org.jsecurity.config.ConfigurationException: dd\uFFFD");
    java.lang.Throwable[] var43 = var42.getSuppressed();
    java.util.List var44 = org.jsecurity.util.CollectionUtils.asList((java.lang.Object[])var43);
    org.jsecurity.authc.UsernamePasswordToken var45 = new org.jsecurity.authc.UsernamePasswordToken();
    java.lang.String var46 = var45.getUsername();
    java.net.InetAddress var47 = var45.getInetAddress();
    org.jsecurity.authc.AuthenticationInfo var48 = var40.beforeAllAttempts((java.util.Collection)var44, (org.jsecurity.authc.AuthenticationToken)var45);
    org.jsecurity.session.UnknownSessionException var53 = new org.jsecurity.session.UnknownSessionException("dd\uFFFD", (java.io.Serializable)100.0f);
    org.jsecurity.subject.SubjectException var54 = new org.jsecurity.subject.SubjectException("dd\uFFFD", (java.lang.Throwable)var53);
    org.jsecurity.io.SerializationException var55 = new org.jsecurity.io.SerializationException("", (java.lang.Throwable)var54);
    java.lang.Throwable[] var56 = var54.getSuppressed();
    java.util.Set var57 = org.jsecurity.util.CollectionUtils.asSet((java.lang.Object[])var56);
    org.jsecurity.authc.SimpleAccount var58 = new org.jsecurity.authc.SimpleAccount((org.jsecurity.subject.PrincipalCollection)var39, (java.lang.Object)var44, var57);
    java.io.InputStream var60 = org.jsecurity.util.ClassUtils.getResourceAsStream("");
    java.lang.Object[] var61 = new java.lang.Object[] { var60};
    java.util.List var62 = org.jsecurity.util.CollectionUtils.asList(var61);
    org.jsecurity.authc.pam.ModularRealmAuthenticator var63 = new org.jsecurity.authc.pam.ModularRealmAuthenticator(var62);
    org.jsecurity.subject.SimplePrincipalCollection var65 = new org.jsecurity.subject.SimplePrincipalCollection((java.util.Collection)var62, "org.jsecurity.authz.UnauthorizedException: org.jsecurity.session.ExpiredSessionException: ");
    org.jsecurity.io.ResourceException var69 = new org.jsecurity.io.ResourceException("hi!");
    org.jsecurity.authc.UnknownAccountException var70 = new org.jsecurity.authc.UnknownAccountException((java.lang.Throwable)var69);
    org.jsecurity.session.StoppedSessionException var71 = new org.jsecurity.session.StoppedSessionException("dd\uFFFD", (java.io.Serializable)var69);
    org.jsecurity.session.UnknownSessionException var72 = new org.jsecurity.session.UnknownSessionException("org.jsecurity.authz.UnauthorizedException: org.jsecurity.session.ExpiredSessionException: ", (java.lang.Throwable)var69);
    boolean var73 = var65.equals((java.lang.Object)var69);
    var39.addAll((org.jsecurity.subject.PrincipalCollection)var65);
    org.jsecurity.session.UnknownSessionException var79 = new org.jsecurity.session.UnknownSessionException("dd\uFFFD", (java.io.Serializable)100.0f);
    org.jsecurity.subject.SubjectException var80 = new org.jsecurity.subject.SubjectException("dd\uFFFD", (java.lang.Throwable)var79);
    org.jsecurity.io.SerializationException var81 = new org.jsecurity.io.SerializationException("", (java.lang.Throwable)var80);
    java.lang.Throwable[] var82 = var80.getSuppressed();
    java.util.List var83 = org.jsecurity.util.CollectionUtils.asList((java.lang.Object[])var82);
    boolean var84 = var5.isPermittedAll((org.jsecurity.subject.PrincipalCollection)var39, (java.util.Collection)var83);
    boolean var85 = var39.isEmpty();
    org.jsecurity.authz.permission.WildcardPermissionResolver var87 = new org.jsecurity.authz.permission.WildcardPermissionResolver();
    java.util.Set var88 = org.jsecurity.util.PermissionUtils.resolveDelimitedPermissions("7edc3e5f-37f7-4a22-9779-4609545bccd8", (org.jsecurity.authz.permission.PermissionResolver)var87);
    org.jsecurity.authz.Permission var90 = var87.resolvePermission("ff9f2014-649d-414b-8132-f4962e7ca4d7");
    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      boolean var91 = var0.isPermitted((org.jsecurity.subject.PrincipalCollection)var39, var90);
      fail("Expected exception of type java.util.NoSuchElementException");
    } catch (java.util.NoSuchElementException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var2 + "' != '" + "org.jsecurity.realm.text.PropertiesRealm_3382"+ "'", var2.equals("org.jsecurity.realm.text.PropertiesRealm_3382"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var7);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var8);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var9);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var17);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var18);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var19);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var31);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var43);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var44);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var46);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var47);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var48);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var56);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var57);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var60);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var61);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var62);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var73 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var82);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var83);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var84 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var85 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var88);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var90);

  }

  public void test86() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest5.test86");


    org.jsecurity.session.mgt.DefaultSessionManager var0 = new org.jsecurity.session.mgt.DefaultSessionManager();
    org.jsecurity.mgt.DefaultSecurityManager var1 = new org.jsecurity.mgt.DefaultSecurityManager();
    org.jsecurity.authz.permission.WildcardPermissionResolver var2 = new org.jsecurity.authz.permission.WildcardPermissionResolver();
    var1.setPermissionResolver((org.jsecurity.authz.permission.PermissionResolver)var2);
    org.jsecurity.cache.CacheManager var4 = var1.getCacheManager();
    var0.setCacheManager(var4);
    long var6 = var0.getSessionValidationInterval();
    boolean var7 = var0.isSessionValidationSchedulerEnabled();
    var0.destroy();
    org.jsecurity.session.mgt.SimpleSession var9 = new org.jsecurity.session.mgt.SimpleSession();
    org.jsecurity.io.SerializationException var12 = new org.jsecurity.io.SerializationException("org.jsecurity.config.ConfigurationException: dd\uFFFD");
    org.jsecurity.authc.AccountException var13 = new org.jsecurity.authc.AccountException("a2b823b1e72eae2b727289df8a00a89df8a0bab6ad8a89c4c5c7a9b62a270000", (java.lang.Throwable)var12);
    var9.setId((java.io.Serializable)"a2b823b1e72eae2b727289df8a00a89df8a0bab6ad8a89c4c5c7a9b62a270000");
    org.jsecurity.config.ReflectionBuilder var15 = new org.jsecurity.config.ReflectionBuilder();
    org.jsecurity.config.ReflectionBuilder var16 = new org.jsecurity.config.ReflectionBuilder();
    org.jsecurity.io.IniResource var17 = new org.jsecurity.io.IniResource();
    var17.setCharsetName("org.jsecurity.authz.UnauthorizedException: org.jsecurity.session.ExpiredSessionException: ");
    java.util.Map var20 = var17.getSections();
    java.util.Map var21 = var16.buildObjects(var20);
    org.jsecurity.config.ReflectionBuilder var22 = new org.jsecurity.config.ReflectionBuilder();
    org.jsecurity.io.IniResource var23 = new org.jsecurity.io.IniResource();
    var23.setCharsetName("org.jsecurity.authz.UnauthorizedException: org.jsecurity.session.ExpiredSessionException: ");
    java.util.Map var26 = var23.getSections();
    java.util.Map var27 = var22.buildObjects(var26);
    java.util.Map var28 = var16.buildObjects(var27);
    java.util.Map var29 = var15.buildObjects(var28);
    var9.setAttributes(var29);
    java.net.InetAddress var31 = var9.getHostAddress();
    java.io.Serializable var32 = var0.start(var31);
    org.jsecurity.authz.HostUnauthorizedException var33 = new org.jsecurity.authz.HostUnauthorizedException(var31);
    org.jsecurity.session.mgt.SimpleSession var34 = new org.jsecurity.session.mgt.SimpleSession(var31);
    org.jsecurity.session.mgt.SimpleSession var35 = new org.jsecurity.session.mgt.SimpleSession();
    var35.touch();
    org.jsecurity.session.mgt.eis.MemorySessionDAO var37 = new org.jsecurity.session.mgt.eis.MemorySessionDAO();
    org.jsecurity.cache.Cache var38 = var37.getActiveSessionsCache();
    org.jsecurity.cache.CacheManager var39 = var37.getCacheManager();
    org.jsecurity.cache.HashtableCacheManager var40 = new org.jsecurity.cache.HashtableCacheManager();
    org.jsecurity.cache.Cache var42 = var40.getCache("\u0000\u0000");
    var37.setActiveSessionsCache(var42);
    java.io.InputStream var45 = org.jsecurity.util.ClassUtils.getResourceAsStream("");
    java.lang.Object[] var46 = new java.lang.Object[] { var45};
    java.util.List var47 = org.jsecurity.util.CollectionUtils.asList(var46);
    org.jsecurity.authc.pam.ModularRealmAuthenticator var48 = new org.jsecurity.authc.pam.ModularRealmAuthenticator(var47);
    org.jsecurity.authc.pam.AllSuccessfulModularAuthenticationStrategy var49 = new org.jsecurity.authc.pam.AllSuccessfulModularAuthenticationStrategy();
    var48.setModularAuthenticationStrategy((org.jsecurity.authc.pam.ModularAuthenticationStrategy)var49);
    org.jsecurity.authz.SimpleAuthorizationInfo var51 = new org.jsecurity.authz.SimpleAuthorizationInfo();
    var51.addStringPermission("hi!");
    java.io.InputStream var55 = org.jsecurity.util.ClassUtils.getResourceAsStream("");
    java.lang.Object[] var56 = new java.lang.Object[] { var55};
    java.util.List var57 = org.jsecurity.util.CollectionUtils.asList(var56);
    var51.addRoles((java.util.Collection)var57);
    var48.setAuthenticationListeners((java.util.Collection)var57);
    org.jsecurity.realm.activedirectory.ActiveDirectoryRealm var60 = new org.jsecurity.realm.activedirectory.ActiveDirectoryRealm();
    var60.setPrincipalSuffix("");
    var48.setRealm((org.jsecurity.realm.Realm)var60);
    org.jsecurity.cache.HashtableCacheManager var64 = new org.jsecurity.cache.HashtableCacheManager();
    org.jsecurity.cache.Cache var66 = var64.getCache("\u0000\u0000");
    var60.setAuthorizationCache(var66);
    var37.setActiveSessionsCache(var66);
    org.jsecurity.session.mgt.SimpleSession var69 = new org.jsecurity.session.mgt.SimpleSession();
    java.io.Serializable var70 = var37.create((org.jsecurity.session.Session)var69);
    java.io.Serializable var71 = var69.getId();
    org.jsecurity.session.mgt.SimpleSession var72 = new org.jsecurity.session.mgt.SimpleSession();
    var72.touch();
    var72.validate();
    org.jsecurity.session.mgt.SimpleSession var75 = new org.jsecurity.session.mgt.SimpleSession();
    var75.setTimeout((-1L));
    org.jsecurity.session.mgt.SimpleSession var78 = new org.jsecurity.session.mgt.SimpleSession();
    java.util.Date var79 = var78.getLastAccessTime();
    var75.setLastAccessTime(var79);
    org.jsecurity.session.mgt.SimpleSession var81 = new org.jsecurity.session.mgt.SimpleSession();
    java.util.Date var82 = var81.getLastAccessTime();
    var75.setStopTimestamp(var82);
    var72.setLastAccessTime(var82);
    var69.setStartTimestamp(var82);
    var35.setStartTimestamp(var82);
    var34.setStopTimestamp(var82);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var4);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var6 == 3600000L);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var7 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var20);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var21);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var26);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var27);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var28);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var29);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var31);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var32 + "' != '" + "4df977a5-1696-4e50-854e-904500d9e1c2"+ "'", var32.equals("4df977a5-1696-4e50-854e-904500d9e1c2"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var38);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var39);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var42);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var45);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var46);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var47);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var55);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var56);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var57);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var66);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var70 + "' != '" + "162be413-8160-455c-92e1-63fc287e0ac1"+ "'", var70.equals("162be413-8160-455c-92e1-63fc287e0ac1"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var71 + "' != '" + "162be413-8160-455c-92e1-63fc287e0ac1"+ "'", var71.equals("162be413-8160-455c-92e1-63fc287e0ac1"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var79);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var82);

  }

  public void test87() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest5.test87");


    org.jsecurity.realm.activedirectory.ActiveDirectoryRealm var0 = new org.jsecurity.realm.activedirectory.ActiveDirectoryRealm();
    org.jsecurity.authc.credential.Sha256CredentialsMatcher var1 = new org.jsecurity.authc.credential.Sha256CredentialsMatcher();
    var0.setCredentialsMatcher((org.jsecurity.authc.credential.CredentialsMatcher)var1);
    java.lang.String var3 = var0.getAuthorizationCacheName();
    var0.setUrl("hi!");
    org.jsecurity.realm.ldap.DefaultLdapContextFactory var6 = new org.jsecurity.realm.ldap.DefaultLdapContextFactory();
    var0.setLdapContextFactory((org.jsecurity.realm.ldap.LdapContextFactory)var6);
    var6.setAuthentication("org.jsecurity.authz.UnauthorizedException: org.jsecurity.session.ExpiredSessionException: ");
    var6.setSystemUsername("org.jsecurity.config.ConfigurationException: dd\uFFFD");
    var6.setSystemPassword("orgjsecurityauthcCredentialsException783ccd3148a842dd890fdf885a7baafAA==");
    var6.setContextFactoryClassName("jsecurity-activeSessionCache");
    var6.setUrl("089f152f-387d-4d70-9992-addb94aecba0");
    var6.setReferral("217bba52-4cec-45f3-9460-89f5d1508106");
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var3);

  }

  public void test88() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest5.test88");


    org.jsecurity.config.ReflectionBuilder var0 = new org.jsecurity.config.ReflectionBuilder();
    org.jsecurity.io.IniResource var1 = new org.jsecurity.io.IniResource();
    var1.setCharsetName("org.jsecurity.authz.UnauthorizedException: org.jsecurity.session.ExpiredSessionException: ");
    java.util.Map var4 = var1.getSections();
    java.util.Map var5 = var0.buildObjects(var4);
    java.util.Map var6 = var0.getObjects();
    java.util.Map var7 = var0.getObjects();
    org.jsecurity.config.ReflectionBuilder var8 = new org.jsecurity.config.ReflectionBuilder();
    org.jsecurity.io.IniResource var9 = new org.jsecurity.io.IniResource();
    var9.setCharsetName("org.jsecurity.authz.UnauthorizedException: org.jsecurity.session.ExpiredSessionException: ");
    java.util.Map var12 = var9.getSections();
    java.util.Map var13 = var8.buildObjects(var12);
    java.util.Map var14 = var8.getObjects();
    java.util.Map var15 = var0.buildObjects(var14);
    java.util.Map var16 = var0.getObjects();
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var4);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var5);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var6);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var7);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var12);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var13);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var14);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var15);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var16);

  }

  public void test89() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest5.test89");


    org.jsecurity.session.mgt.DelegatingSession var0 = new org.jsecurity.session.mgt.DelegatingSession();
    java.io.Serializable var1 = var0.getId();
    org.jsecurity.session.mgt.SessionManager var2 = var0.getSessionManager();
    org.jsecurity.session.mgt.SimpleSession var3 = new org.jsecurity.session.mgt.SimpleSession();
    org.jsecurity.session.UnknownSessionException var7 = new org.jsecurity.session.UnknownSessionException("dd\uFFFD", (java.io.Serializable)100.0f);
    org.jsecurity.session.SessionException var9 = new org.jsecurity.session.SessionException("dd\uFFFD", (java.lang.Throwable)var7, (java.io.Serializable)0);
    org.jsecurity.authc.AccountException var10 = new org.jsecurity.authc.AccountException((java.lang.Throwable)var7);
    var3.setId((java.io.Serializable)var7);
    var3.setTimeout((-1L));
    org.jsecurity.session.mgt.SimpleSession var14 = new org.jsecurity.session.mgt.SimpleSession();
    var14.setTimeout((-1L));
    org.jsecurity.session.mgt.SimpleSession var17 = new org.jsecurity.session.mgt.SimpleSession();
    var17.setTimeout((-1L));
    org.jsecurity.session.mgt.SimpleSession var20 = new org.jsecurity.session.mgt.SimpleSession();
    java.util.Date var21 = var20.getLastAccessTime();
    var17.setLastAccessTime(var21);
    org.jsecurity.session.mgt.SimpleSession var23 = new org.jsecurity.session.mgt.SimpleSession();
    java.util.Date var24 = var23.getLastAccessTime();
    var17.setStopTimestamp(var24);
    var14.setStartTimestamp(var24);
    var3.setLastAccessTime(var24);
    var0.setId((java.io.Serializable)var24);
    org.jsecurity.mgt.DefaultSecurityManager var29 = new org.jsecurity.mgt.DefaultSecurityManager();
    java.io.InputStream var31 = org.jsecurity.util.ClassUtils.getResourceAsStream("");
    java.lang.Object[] var32 = new java.lang.Object[] { var31};
    java.util.List var33 = org.jsecurity.util.CollectionUtils.asList(var32);
    org.jsecurity.authc.pam.ModularRealmAuthenticator var34 = new org.jsecurity.authc.pam.ModularRealmAuthenticator(var33);
    org.jsecurity.authc.pam.AllSuccessfulModularAuthenticationStrategy var35 = new org.jsecurity.authc.pam.AllSuccessfulModularAuthenticationStrategy();
    var34.setModularAuthenticationStrategy((org.jsecurity.authc.pam.ModularAuthenticationStrategy)var35);
    org.jsecurity.authz.SimpleAuthorizationInfo var37 = new org.jsecurity.authz.SimpleAuthorizationInfo();
    var37.addStringPermission("hi!");
    java.io.InputStream var41 = org.jsecurity.util.ClassUtils.getResourceAsStream("");
    java.lang.Object[] var42 = new java.lang.Object[] { var41};
    java.util.List var43 = org.jsecurity.util.CollectionUtils.asList(var42);
    var37.addRoles((java.util.Collection)var43);
    var34.setAuthenticationListeners((java.util.Collection)var43);
    var29.setSessionListeners((java.util.Collection)var43);
    java.io.InputStream var48 = org.jsecurity.util.ClassUtils.getResourceAsStream("");
    java.lang.Object[] var49 = new java.lang.Object[] { var48};
    java.util.List var50 = org.jsecurity.util.CollectionUtils.asList(var49);
    org.jsecurity.authc.pam.ModularRealmAuthenticator var51 = new org.jsecurity.authc.pam.ModularRealmAuthenticator(var50);
    org.jsecurity.authc.pam.AllSuccessfulModularAuthenticationStrategy var52 = new org.jsecurity.authc.pam.AllSuccessfulModularAuthenticationStrategy();
    var51.setModularAuthenticationStrategy((org.jsecurity.authc.pam.ModularAuthenticationStrategy)var52);
    org.jsecurity.authz.SimpleAuthorizationInfo var54 = new org.jsecurity.authz.SimpleAuthorizationInfo();
    var54.addStringPermission("hi!");
    java.io.InputStream var58 = org.jsecurity.util.ClassUtils.getResourceAsStream("");
    java.lang.Object[] var59 = new java.lang.Object[] { var58};
    java.util.List var60 = org.jsecurity.util.CollectionUtils.asList(var59);
    var54.addRoles((java.util.Collection)var60);
    var51.setAuthenticationListeners((java.util.Collection)var60);
    org.jsecurity.realm.activedirectory.ActiveDirectoryRealm var63 = new org.jsecurity.realm.activedirectory.ActiveDirectoryRealm();
    var63.setPrincipalSuffix("");
    var51.setRealm((org.jsecurity.realm.Realm)var63);
    org.jsecurity.cache.HashtableCacheManager var67 = new org.jsecurity.cache.HashtableCacheManager();
    org.jsecurity.cache.Cache var69 = var67.getCache("\u0000\u0000");
    var63.setAuthorizationCache(var69);
    var29.setRealm((org.jsecurity.realm.Realm)var63);
    org.jsecurity.subject.RememberMeManager var72 = var29.getRememberMeManager();
    org.jsecurity.session.mgt.SessionManager var73 = var29.getSessionManager();
    org.jsecurity.session.mgt.SessionManager var74 = var29.getSessionManager();
    var0.setSessionManager(var74);
    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      var0.touch();
      fail("Expected exception of type org.jsecurity.session.UnknownSessionException");
    } catch (org.jsecurity.session.UnknownSessionException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var1);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var2);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var21);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var24);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var31);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var32);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var33);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var41);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var42);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var43);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var48);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var49);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var50);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var58);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var59);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var60);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var69);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var72);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var73);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var74);

  }

  public void test90() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest5.test90");


    org.jsecurity.authc.pam.AtLeastOneSuccessfulModularAuthenticationStrategy var0 = new org.jsecurity.authc.pam.AtLeastOneSuccessfulModularAuthenticationStrategy();
    org.jsecurity.authc.pam.AllSuccessfulModularAuthenticationStrategy var2 = new org.jsecurity.authc.pam.AllSuccessfulModularAuthenticationStrategy();
    char[] var4 = new char[] { };
    org.jsecurity.authc.UsernamePasswordToken var6 = new org.jsecurity.authc.UsernamePasswordToken("hi!", var4, true);
    org.jsecurity.authc.SimpleAccount var7 = new org.jsecurity.authc.SimpleAccount();
    var7.setCredentialsExpired(false);
    boolean var10 = var7.isLocked();
    org.jsecurity.authc.AuthenticationInfo var11 = var2.afterAllAttempts((org.jsecurity.authc.AuthenticationToken)var6, (org.jsecurity.authc.AuthenticationInfo)var7);
    char[] var14 = new char[] { };
    org.jsecurity.authc.UsernamePasswordToken var16 = new org.jsecurity.authc.UsernamePasswordToken("hi!", var14, true);
    org.jsecurity.authc.UsernamePasswordToken var17 = new org.jsecurity.authc.UsernamePasswordToken("\u0000\u0000", var14);
    var6.setPassword(var14);
    org.jsecurity.authc.UsernamePasswordToken var19 = new org.jsecurity.authc.UsernamePasswordToken("\u0000\u0000\u0000", var14);
    org.jsecurity.realm.text.TextConfigurationRealm var20 = new org.jsecurity.realm.text.TextConfigurationRealm();
    java.io.InputStream var22 = org.jsecurity.util.ClassUtils.getResourceAsStream("");
    java.lang.Object[] var23 = new java.lang.Object[] { var22};
    java.util.List var24 = org.jsecurity.util.CollectionUtils.asList(var23);
    org.jsecurity.authc.pam.ModularRealmAuthenticator var25 = new org.jsecurity.authc.pam.ModularRealmAuthenticator(var24);
    org.jsecurity.subject.SimplePrincipalCollection var27 = new org.jsecurity.subject.SimplePrincipalCollection((java.util.Collection)var24, "org.jsecurity.authz.UnauthorizedException: org.jsecurity.session.ExpiredSessionException: ");
    org.jsecurity.session.UnknownSessionException var32 = new org.jsecurity.session.UnknownSessionException("dd\uFFFD", (java.io.Serializable)100.0f);
    org.jsecurity.session.SessionException var34 = new org.jsecurity.session.SessionException("dd\uFFFD", (java.lang.Throwable)var32, (java.io.Serializable)0);
    org.jsecurity.session.SessionException var35 = new org.jsecurity.session.SessionException("dd\uFFFD", (java.lang.Throwable)var32);
    var27.add((java.lang.Object)var35, "org.jsecurity.config.ConfigurationException: dd\uFFFD");
    var20.onLogout((org.jsecurity.subject.PrincipalCollection)var27);
    org.jsecurity.authc.ExpiredCredentialsException var40 = new org.jsecurity.authc.ExpiredCredentialsException();
    org.jsecurity.session.ExpiredSessionException var41 = new org.jsecurity.session.ExpiredSessionException("", (java.lang.Throwable)var40);
    java.lang.Throwable[] var42 = var41.getSuppressed();
    org.jsecurity.io.ResourceException var43 = new org.jsecurity.io.ResourceException((java.lang.Throwable)var41);
    org.jsecurity.authc.SimpleAuthenticationInfo var44 = new org.jsecurity.authc.SimpleAuthenticationInfo((org.jsecurity.subject.PrincipalCollection)var27, (java.lang.Object)var41);
    org.jsecurity.authc.AuthenticationInfo var45 = var0.afterAllAttempts((org.jsecurity.authc.AuthenticationToken)var19, (org.jsecurity.authc.AuthenticationInfo)var44);
    java.lang.Object var46 = var44.getCredentials();
    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      org.jsecurity.crypto.hash.Sha256Hash var47 = new org.jsecurity.crypto.hash.Sha256Hash(var46);
      fail("Expected exception of type org.jsecurity.codec.CodecException");
    } catch (org.jsecurity.codec.CodecException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var4);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var10 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var11);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var14);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var22);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var23);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var24);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var42);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var45);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var46);

  }

  public void test91() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest5.test91");


    org.jsecurity.mgt.DefaultSecurityManager var0 = new org.jsecurity.mgt.DefaultSecurityManager();
    java.io.InputStream var2 = org.jsecurity.util.ClassUtils.getResourceAsStream("");
    java.lang.Object[] var3 = new java.lang.Object[] { var2};
    java.util.List var4 = org.jsecurity.util.CollectionUtils.asList(var3);
    org.jsecurity.authc.pam.ModularRealmAuthenticator var5 = new org.jsecurity.authc.pam.ModularRealmAuthenticator(var4);
    org.jsecurity.authc.pam.AllSuccessfulModularAuthenticationStrategy var6 = new org.jsecurity.authc.pam.AllSuccessfulModularAuthenticationStrategy();
    var5.setModularAuthenticationStrategy((org.jsecurity.authc.pam.ModularAuthenticationStrategy)var6);
    org.jsecurity.authz.SimpleAuthorizationInfo var8 = new org.jsecurity.authz.SimpleAuthorizationInfo();
    var8.addStringPermission("hi!");
    java.io.InputStream var12 = org.jsecurity.util.ClassUtils.getResourceAsStream("");
    java.lang.Object[] var13 = new java.lang.Object[] { var12};
    java.util.List var14 = org.jsecurity.util.CollectionUtils.asList(var13);
    var8.addRoles((java.util.Collection)var14);
    var5.setAuthenticationListeners((java.util.Collection)var14);
    var0.setSessionListeners((java.util.Collection)var14);
    org.jsecurity.realm.text.TextConfigurationRealm var18 = new org.jsecurity.realm.text.TextConfigurationRealm();
    java.io.InputStream var20 = org.jsecurity.util.ClassUtils.getResourceAsStream("");
    java.lang.Object[] var21 = new java.lang.Object[] { var20};
    java.util.List var22 = org.jsecurity.util.CollectionUtils.asList(var21);
    org.jsecurity.authc.pam.ModularRealmAuthenticator var23 = new org.jsecurity.authc.pam.ModularRealmAuthenticator(var22);
    org.jsecurity.subject.SimplePrincipalCollection var25 = new org.jsecurity.subject.SimplePrincipalCollection((java.util.Collection)var22, "org.jsecurity.authz.UnauthorizedException: org.jsecurity.session.ExpiredSessionException: ");
    org.jsecurity.session.UnknownSessionException var30 = new org.jsecurity.session.UnknownSessionException("dd\uFFFD", (java.io.Serializable)100.0f);
    org.jsecurity.session.SessionException var32 = new org.jsecurity.session.SessionException("dd\uFFFD", (java.lang.Throwable)var30, (java.io.Serializable)0);
    org.jsecurity.session.SessionException var33 = new org.jsecurity.session.SessionException("dd\uFFFD", (java.lang.Throwable)var30);
    var25.add((java.lang.Object)var33, "org.jsecurity.config.ConfigurationException: dd\uFFFD");
    var18.onLogout((org.jsecurity.subject.PrincipalCollection)var25);
    org.jsecurity.authc.pam.FirstSuccessfulAuthenticationStrategy var37 = new org.jsecurity.authc.pam.FirstSuccessfulAuthenticationStrategy();
    org.jsecurity.authz.UnauthorizedException var39 = new org.jsecurity.authz.UnauthorizedException("org.jsecurity.config.ConfigurationException: dd\uFFFD");
    java.lang.Throwable[] var40 = var39.getSuppressed();
    java.util.List var41 = org.jsecurity.util.CollectionUtils.asList((java.lang.Object[])var40);
    org.jsecurity.authc.UsernamePasswordToken var42 = new org.jsecurity.authc.UsernamePasswordToken();
    java.lang.String var43 = var42.getUsername();
    java.net.InetAddress var44 = var42.getInetAddress();
    org.jsecurity.authc.AuthenticationInfo var45 = var37.beforeAllAttempts((java.util.Collection)var41, (org.jsecurity.authc.AuthenticationToken)var42);
    boolean[] var46 = var0.hasRoles((org.jsecurity.subject.PrincipalCollection)var25, var41);
    org.jsecurity.codec.CodecException var49 = new org.jsecurity.codec.CodecException("dd\uFFFD");
    org.jsecurity.authc.ConcurrentAccessException var50 = new org.jsecurity.authc.ConcurrentAccessException("org.jsecurity.authz.UnauthorizedException: org.jsecurity.session.ExpiredSessionException: ", (java.lang.Throwable)var49);
    org.jsecurity.subject.SimplePrincipalCollection var52 = new org.jsecurity.subject.SimplePrincipalCollection((java.lang.Object)var49, "");
    java.io.InputStream var54 = org.jsecurity.util.ClassUtils.getResourceAsStream("");
    java.lang.Object[] var55 = new java.lang.Object[] { var54};
    java.util.List var56 = org.jsecurity.util.CollectionUtils.asList(var55);
    org.jsecurity.authc.pam.ModularRealmAuthenticator var57 = new org.jsecurity.authc.pam.ModularRealmAuthenticator(var56);
    var52.addAll((java.util.Collection)var56, "\u0000\u0000");
    var0.setSessionListeners((java.util.Collection)var56);
    java.util.Collection var61 = var0.getRealms();
    org.jsecurity.authz.permission.WildcardPermissionResolver var63 = new org.jsecurity.authz.permission.WildcardPermissionResolver();
    java.util.Set var64 = org.jsecurity.util.PermissionUtils.resolveDelimitedPermissions("7edc3e5f-37f7-4a22-9779-4609545bccd8", (org.jsecurity.authz.permission.PermissionResolver)var63);
    org.jsecurity.subject.SimplePrincipalCollection var66 = new org.jsecurity.subject.SimplePrincipalCollection((java.lang.Object)"7edc3e5f-37f7-4a22-9779-4609545bccd8", "c237631f-f5b6-4602-ad39-91738c85cc84");
    org.jsecurity.mgt.DefaultSecurityManager var67 = new org.jsecurity.mgt.DefaultSecurityManager();
    java.io.InputStream var69 = org.jsecurity.util.ClassUtils.getResourceAsStream("");
    java.lang.Object[] var70 = new java.lang.Object[] { var69};
    java.util.List var71 = org.jsecurity.util.CollectionUtils.asList(var70);
    org.jsecurity.authc.pam.ModularRealmAuthenticator var72 = new org.jsecurity.authc.pam.ModularRealmAuthenticator(var71);
    org.jsecurity.authc.pam.AllSuccessfulModularAuthenticationStrategy var73 = new org.jsecurity.authc.pam.AllSuccessfulModularAuthenticationStrategy();
    var72.setModularAuthenticationStrategy((org.jsecurity.authc.pam.ModularAuthenticationStrategy)var73);
    org.jsecurity.authz.SimpleAuthorizationInfo var75 = new org.jsecurity.authz.SimpleAuthorizationInfo();
    var75.addStringPermission("hi!");
    java.io.InputStream var79 = org.jsecurity.util.ClassUtils.getResourceAsStream("");
    java.lang.Object[] var80 = new java.lang.Object[] { var79};
    java.util.List var81 = org.jsecurity.util.CollectionUtils.asList(var80);
    var75.addRoles((java.util.Collection)var81);
    var72.setAuthenticationListeners((java.util.Collection)var81);
    var67.setSessionListeners((java.util.Collection)var81);
    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      boolean[] var85 = var0.hasRoles((org.jsecurity.subject.PrincipalCollection)var66, var81);
      fail("Expected exception of type java.lang.ClassCastException");
    } catch (java.lang.ClassCastException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var2);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var3);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var4);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var12);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var13);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var14);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var20);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var21);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var22);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var40);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var41);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var43);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var44);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var45);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var46);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var54);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var55);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var56);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var61);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var64);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var69);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var70);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var71);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var79);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var80);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var81);

  }

  public void test92() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest5.test92");


    org.jsecurity.authz.SimpleRole var0 = new org.jsecurity.authz.SimpleRole();
    org.jsecurity.authz.SimpleAuthorizationInfo var1 = new org.jsecurity.authz.SimpleAuthorizationInfo();
    var1.addRole("a2b823b1e72eae2b727289df8a00a89df8a0bab6ad8a89c4c5c7a9b62a270000");
    org.jsecurity.session.UnknownSessionException var8 = new org.jsecurity.session.UnknownSessionException("dd\uFFFD", (java.io.Serializable)100.0f);
    org.jsecurity.subject.SubjectException var9 = new org.jsecurity.subject.SubjectException("dd\uFFFD", (java.lang.Throwable)var8);
    org.jsecurity.io.SerializationException var10 = new org.jsecurity.io.SerializationException("", (java.lang.Throwable)var9);
    java.lang.Throwable[] var11 = var9.getSuppressed();
    java.util.Set var12 = org.jsecurity.util.CollectionUtils.asSet((java.lang.Object[])var11);
    var1.addRoles((java.util.Collection)var12);
    var0.addAll((java.util.Collection)var12);
    java.lang.String var15 = var0.toString();
    org.jsecurity.authz.permission.AllPermission var16 = new org.jsecurity.authz.permission.AllPermission();
    org.jsecurity.authz.SimpleRole var18 = new org.jsecurity.authz.SimpleRole();
    org.jsecurity.authz.permission.WildcardPermission var21 = new org.jsecurity.authz.permission.WildcardPermission("hi!", false);
    boolean var22 = var18.isPermitted((org.jsecurity.authz.Permission)var21);
    org.jsecurity.session.InvalidSessionException var23 = new org.jsecurity.session.InvalidSessionException("org.jsecurity.config.ConfigurationException: dd\uFFFD", (java.io.Serializable)var21);
    org.jsecurity.authz.SimpleRole var24 = new org.jsecurity.authz.SimpleRole();
    org.jsecurity.authz.permission.WildcardPermission var27 = new org.jsecurity.authz.permission.WildcardPermission("hi!", false);
    boolean var28 = var24.isPermitted((org.jsecurity.authz.Permission)var27);
    boolean var29 = var21.implies((org.jsecurity.authz.Permission)var27);
    boolean var30 = var16.implies((org.jsecurity.authz.Permission)var27);
    org.jsecurity.authz.SimpleRole var32 = new org.jsecurity.authz.SimpleRole();
    org.jsecurity.authz.permission.WildcardPermission var35 = new org.jsecurity.authz.permission.WildcardPermission("hi!", false);
    boolean var36 = var32.isPermitted((org.jsecurity.authz.Permission)var35);
    org.jsecurity.session.InvalidSessionException var37 = new org.jsecurity.session.InvalidSessionException("org.jsecurity.config.ConfigurationException: dd\uFFFD", (java.io.Serializable)var35);
    org.jsecurity.authz.SimpleRole var38 = new org.jsecurity.authz.SimpleRole();
    org.jsecurity.authz.permission.WildcardPermission var41 = new org.jsecurity.authz.permission.WildcardPermission("hi!", false);
    boolean var42 = var38.isPermitted((org.jsecurity.authz.Permission)var41);
    boolean var43 = var35.implies((org.jsecurity.authz.Permission)var41);
    boolean var44 = var16.implies((org.jsecurity.authz.Permission)var35);
    org.jsecurity.authz.permission.WildcardPermission var47 = new org.jsecurity.authz.permission.WildcardPermission("6464ff", false);
    boolean var48 = var16.implies((org.jsecurity.authz.Permission)var47);
    boolean var49 = var0.isPermitted((org.jsecurity.authz.Permission)var47);
    org.jsecurity.mgt.DefaultSecurityManager var50 = new org.jsecurity.mgt.DefaultSecurityManager();
    java.io.InputStream var52 = org.jsecurity.util.ClassUtils.getResourceAsStream("");
    java.lang.Object[] var53 = new java.lang.Object[] { var52};
    java.util.List var54 = org.jsecurity.util.CollectionUtils.asList(var53);
    org.jsecurity.authc.pam.ModularRealmAuthenticator var55 = new org.jsecurity.authc.pam.ModularRealmAuthenticator(var54);
    org.jsecurity.authc.pam.AllSuccessfulModularAuthenticationStrategy var56 = new org.jsecurity.authc.pam.AllSuccessfulModularAuthenticationStrategy();
    var55.setModularAuthenticationStrategy((org.jsecurity.authc.pam.ModularAuthenticationStrategy)var56);
    org.jsecurity.authz.SimpleAuthorizationInfo var58 = new org.jsecurity.authz.SimpleAuthorizationInfo();
    var58.addStringPermission("hi!");
    java.io.InputStream var62 = org.jsecurity.util.ClassUtils.getResourceAsStream("");
    java.lang.Object[] var63 = new java.lang.Object[] { var62};
    java.util.List var64 = org.jsecurity.util.CollectionUtils.asList(var63);
    var58.addRoles((java.util.Collection)var64);
    var55.setAuthenticationListeners((java.util.Collection)var64);
    var50.setSessionListeners((java.util.Collection)var64);
    java.io.InputStream var69 = org.jsecurity.util.ClassUtils.getResourceAsStream("");
    java.lang.Object[] var70 = new java.lang.Object[] { var69};
    java.util.List var71 = org.jsecurity.util.CollectionUtils.asList(var70);
    org.jsecurity.authc.pam.ModularRealmAuthenticator var72 = new org.jsecurity.authc.pam.ModularRealmAuthenticator(var71);
    org.jsecurity.authc.pam.AllSuccessfulModularAuthenticationStrategy var73 = new org.jsecurity.authc.pam.AllSuccessfulModularAuthenticationStrategy();
    var72.setModularAuthenticationStrategy((org.jsecurity.authc.pam.ModularAuthenticationStrategy)var73);
    org.jsecurity.authz.SimpleAuthorizationInfo var75 = new org.jsecurity.authz.SimpleAuthorizationInfo();
    var75.addStringPermission("hi!");
    java.io.InputStream var79 = org.jsecurity.util.ClassUtils.getResourceAsStream("");
    java.lang.Object[] var80 = new java.lang.Object[] { var79};
    java.util.List var81 = org.jsecurity.util.CollectionUtils.asList(var80);
    var75.addRoles((java.util.Collection)var81);
    var72.setAuthenticationListeners((java.util.Collection)var81);
    org.jsecurity.realm.activedirectory.ActiveDirectoryRealm var84 = new org.jsecurity.realm.activedirectory.ActiveDirectoryRealm();
    var84.setPrincipalSuffix("");
    var72.setRealm((org.jsecurity.realm.Realm)var84);
    org.jsecurity.cache.HashtableCacheManager var88 = new org.jsecurity.cache.HashtableCacheManager();
    org.jsecurity.cache.Cache var90 = var88.getCache("\u0000\u0000");
    var84.setAuthorizationCache(var90);
    var50.setRealm((org.jsecurity.realm.Realm)var84);
    java.util.Collection var93 = var50.getRealms();
    org.jsecurity.authz.permission.WildcardPermissionResolver var94 = new org.jsecurity.authz.permission.WildcardPermissionResolver();
    var50.setPermissionResolver((org.jsecurity.authz.permission.PermissionResolver)var94);
    org.jsecurity.authz.Permission var97 = var94.resolvePermission("2d374600-c283-4ac5-a0ef-0886aa4852ec");
    boolean var98 = var47.implies(var97);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var11);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var12);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var15);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var22 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var28 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var29 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var30 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var36 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var42 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var43 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var44 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var48 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var49 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var52);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var53);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var54);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var62);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var63);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var64);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var69);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var70);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var71);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var79);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var80);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var81);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var90);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var93);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var97);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var98 == false);

  }

  public void test93() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest5.test93");


    org.jsecurity.authz.SimpleRole var2 = new org.jsecurity.authz.SimpleRole("\u0000\u0000");
    org.jsecurity.session.UnknownSessionException var3 = new org.jsecurity.session.UnknownSessionException("e84eb2c8-e826-4516-a1db-23dab0adcbe8", (java.io.Serializable)"\u0000\u0000");

  }

  public void test94() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest5.test94");


    org.jsecurity.session.mgt.quartz.QuartzSessionValidationScheduler var0 = new org.jsecurity.session.mgt.quartz.QuartzSessionValidationScheduler();
    var0.disableSessionValidation();
    var0.enableSessionValidation();
    var0.enableSessionValidation();
    var0.setSessionValidationInterval((-1L));
    var0.setSessionValidationInterval(10L);
    var0.setSessionValidationInterval(100L);

  }

  public void test95() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest5.test95");


    org.jsecurity.io.IniResource var0 = new org.jsecurity.io.IniResource();
    java.lang.String var1 = var0.getCharsetName();
    org.jsecurity.config.ReflectionBuilder var2 = new org.jsecurity.config.ReflectionBuilder();
    org.jsecurity.io.IniResource var3 = new org.jsecurity.io.IniResource();
    var3.setCharsetName("org.jsecurity.authz.UnauthorizedException: org.jsecurity.session.ExpiredSessionException: ");
    java.util.Map var6 = var3.getSections();
    java.util.Map var7 = var2.buildObjects(var6);
    var0.setSections(var7);
    var0.setCharsetName("ZGT/");
    var0.setCharsetName("012605ea-9dda-481d-a436-b8a58422e8d3");
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var1);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var6);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var7);

  }

  public void test96() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest5.test96");


    org.jsecurity.authz.SimpleRole var0 = new org.jsecurity.authz.SimpleRole();
    org.jsecurity.authz.SimpleAuthorizationInfo var1 = new org.jsecurity.authz.SimpleAuthorizationInfo();
    var1.addRole("a2b823b1e72eae2b727289df8a00a89df8a0bab6ad8a89c4c5c7a9b62a270000");
    org.jsecurity.session.UnknownSessionException var8 = new org.jsecurity.session.UnknownSessionException("dd\uFFFD", (java.io.Serializable)100.0f);
    org.jsecurity.subject.SubjectException var9 = new org.jsecurity.subject.SubjectException("dd\uFFFD", (java.lang.Throwable)var8);
    org.jsecurity.io.SerializationException var10 = new org.jsecurity.io.SerializationException("", (java.lang.Throwable)var9);
    java.lang.Throwable[] var11 = var9.getSuppressed();
    java.util.Set var12 = org.jsecurity.util.CollectionUtils.asSet((java.lang.Object[])var11);
    var1.addRoles((java.util.Collection)var12);
    var0.addAll((java.util.Collection)var12);
    org.jsecurity.authz.SimpleRole var15 = new org.jsecurity.authz.SimpleRole();
    org.jsecurity.authz.SimpleAuthorizationInfo var16 = new org.jsecurity.authz.SimpleAuthorizationInfo();
    var16.addRole("a2b823b1e72eae2b727289df8a00a89df8a0bab6ad8a89c4c5c7a9b62a270000");
    org.jsecurity.session.UnknownSessionException var23 = new org.jsecurity.session.UnknownSessionException("dd\uFFFD", (java.io.Serializable)100.0f);
    org.jsecurity.subject.SubjectException var24 = new org.jsecurity.subject.SubjectException("dd\uFFFD", (java.lang.Throwable)var23);
    org.jsecurity.io.SerializationException var25 = new org.jsecurity.io.SerializationException("", (java.lang.Throwable)var24);
    java.lang.Throwable[] var26 = var24.getSuppressed();
    java.util.Set var27 = org.jsecurity.util.CollectionUtils.asSet((java.lang.Object[])var26);
    var16.addRoles((java.util.Collection)var27);
    var15.addAll((java.util.Collection)var27);
    java.lang.String var30 = var15.getName();
    org.jsecurity.authz.permission.WildcardPermission var33 = new org.jsecurity.authz.permission.WildcardPermission("hi!", false);
    var15.add((org.jsecurity.authz.Permission)var33);
    var0.add((org.jsecurity.authz.Permission)var33);
    org.jsecurity.authz.SimpleAuthorizationInfo var37 = new org.jsecurity.authz.SimpleAuthorizationInfo();
    var37.addRole("a2b823b1e72eae2b727289df8a00a89df8a0bab6ad8a89c4c5c7a9b62a270000");
    org.jsecurity.session.UnknownSessionException var44 = new org.jsecurity.session.UnknownSessionException("dd\uFFFD", (java.io.Serializable)100.0f);
    org.jsecurity.subject.SubjectException var45 = new org.jsecurity.subject.SubjectException("dd\uFFFD", (java.lang.Throwable)var44);
    org.jsecurity.io.SerializationException var46 = new org.jsecurity.io.SerializationException("", (java.lang.Throwable)var45);
    java.lang.Throwable[] var47 = var45.getSuppressed();
    java.util.Set var48 = org.jsecurity.util.CollectionUtils.asSet((java.lang.Object[])var47);
    var37.addRoles((java.util.Collection)var48);
    org.jsecurity.authz.SimpleRole var50 = new org.jsecurity.authz.SimpleRole("dd\uFFFD", var48);
    var0.setPermissions(var48);
    org.jsecurity.authz.SimpleAuthorizationInfo var52 = new org.jsecurity.authz.SimpleAuthorizationInfo(var48);
    var52.addStringPermission("de3a1f49-d9da-41db-85df-eb40480da4f6");
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var11);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var12);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var26);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var27);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var30);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var47);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var48);

  }

  public void test97() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest5.test97");


    org.jsecurity.authz.permission.InvalidPermissionStringException var2 = new org.jsecurity.authz.permission.InvalidPermissionStringException("", "dd\uFFFD");
    org.jsecurity.JSecurityException var4 = new org.jsecurity.JSecurityException("");
    org.jsecurity.authc.SimpleAuthenticationInfo var6 = new org.jsecurity.authc.SimpleAuthenticationInfo((java.lang.Object)var2, (java.lang.Object)"", "org.jsecurity.authz.UnauthorizedException: org.jsecurity.session.ExpiredSessionException: ");
    org.jsecurity.crypto.hash.Sha512Hash var7 = new org.jsecurity.crypto.hash.Sha512Hash((java.lang.Object)"org.jsecurity.authz.UnauthorizedException: org.jsecurity.session.ExpiredSessionException: ");
    byte[] var8 = var7.getBytes();
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var8);

  }

  public void test98() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest5.test98");


    org.jsecurity.realm.jndi.JndiRealmFactory var0 = new org.jsecurity.realm.jndi.JndiRealmFactory();
    java.util.Collection var1 = var0.getJndiNames();
    org.jsecurity.jndi.JndiTemplate var2 = var0.getJndiTemplate();
    boolean var3 = var0.isResourceRef();
    boolean var4 = var0.isResourceRef();
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var1);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var2);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var3 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var4 == false);

  }

  public void test99() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest5.test99");


    org.jsecurity.session.mgt.DefaultSessionManager var0 = new org.jsecurity.session.mgt.DefaultSessionManager();
    org.jsecurity.mgt.DefaultSecurityManager var1 = new org.jsecurity.mgt.DefaultSecurityManager();
    org.jsecurity.authz.permission.WildcardPermissionResolver var2 = new org.jsecurity.authz.permission.WildcardPermissionResolver();
    var1.setPermissionResolver((org.jsecurity.authz.permission.PermissionResolver)var2);
    org.jsecurity.cache.CacheManager var4 = var1.getCacheManager();
    var0.setCacheManager(var4);
    org.jsecurity.session.mgt.SessionValidationScheduler var6 = var0.getSessionValidationScheduler();
    var0.destroy();
    org.jsecurity.codec.CodecException var10 = new org.jsecurity.codec.CodecException("dd\uFFFD");
    org.jsecurity.authc.ConcurrentAccessException var11 = new org.jsecurity.authc.ConcurrentAccessException("org.jsecurity.authz.UnauthorizedException: org.jsecurity.session.ExpiredSessionException: ", (java.lang.Throwable)var10);
    org.jsecurity.subject.SimplePrincipalCollection var13 = new org.jsecurity.subject.SimplePrincipalCollection((java.lang.Object)var10, "");
    java.io.InputStream var15 = org.jsecurity.util.ClassUtils.getResourceAsStream("");
    java.lang.Object[] var16 = new java.lang.Object[] { var15};
    java.util.List var17 = org.jsecurity.util.CollectionUtils.asList(var16);
    org.jsecurity.authc.pam.ModularRealmAuthenticator var18 = new org.jsecurity.authc.pam.ModularRealmAuthenticator(var17);
    var13.addAll((java.util.Collection)var17, "\u0000\u0000");
    java.io.InputStream var22 = org.jsecurity.util.ClassUtils.getResourceAsStream("");
    java.lang.Object[] var23 = new java.lang.Object[] { var22};
    java.util.List var24 = org.jsecurity.util.CollectionUtils.asList(var23);
    org.jsecurity.authc.pam.ModularRealmAuthenticator var25 = new org.jsecurity.authc.pam.ModularRealmAuthenticator(var24);
    var13.addAll((java.util.Collection)var24, "\u0000\u0000");
    org.jsecurity.realm.SimpleAccountRealm var29 = new org.jsecurity.realm.SimpleAccountRealm("hi!");
    java.lang.Class var30 = var29.getAuthenticationTokenClass();
    java.util.Collection var31 = org.jsecurity.util.CollectionUtils.emptyCollection(var30);
    java.lang.Object var32 = org.jsecurity.util.ClassUtils.newInstance(var30);
    java.util.Collection var33 = var13.byType(var30);
    org.jsecurity.authz.UnauthenticatedException var35 = new org.jsecurity.authz.UnauthenticatedException();
    org.jsecurity.JSecurityException var36 = new org.jsecurity.JSecurityException("\u0000\u0000", (java.lang.Throwable)var35);
    org.jsecurity.authz.SimpleAuthorizingAccount var37 = new org.jsecurity.authz.SimpleAuthorizingAccount((org.jsecurity.subject.PrincipalCollection)var13, (java.lang.Object)var36);
    org.jsecurity.crypto.BlowfishCipher var38 = new org.jsecurity.crypto.BlowfishCipher();
    byte[] var42 = new byte[] { (byte)100, (byte)100, (byte)(-1)};
    java.lang.String var43 = org.jsecurity.codec.CodecSupport.toString(var42);
    byte[] var44 = org.jsecurity.codec.Base64.encode(var42);
    char[] var45 = org.jsecurity.codec.CodecSupport.toChars(var44);
    byte[] var49 = new byte[] { (byte)100, (byte)100, (byte)(-1)};
    java.lang.String var50 = org.jsecurity.codec.CodecSupport.toString(var49);
    byte[] var52 = org.jsecurity.codec.Base64.encode(var49, false);
    byte[] var53 = var38.encrypt(var44, var49);
    java.io.InputStream var55 = org.jsecurity.util.ClassUtils.getResourceAsStream("");
    java.lang.Object[] var56 = new java.lang.Object[] { var55};
    java.util.List var57 = org.jsecurity.util.CollectionUtils.asList(var56);
    org.jsecurity.authc.pam.ModularRealmAuthenticator var58 = new org.jsecurity.authc.pam.ModularRealmAuthenticator(var57);
    org.jsecurity.realm.text.TextConfigurationRealm var59 = new org.jsecurity.realm.text.TextConfigurationRealm();
    java.io.InputStream var61 = org.jsecurity.util.ClassUtils.getResourceAsStream("");
    java.lang.Object[] var62 = new java.lang.Object[] { var61};
    java.util.List var63 = org.jsecurity.util.CollectionUtils.asList(var62);
    org.jsecurity.authc.pam.ModularRealmAuthenticator var64 = new org.jsecurity.authc.pam.ModularRealmAuthenticator(var63);
    org.jsecurity.subject.SimplePrincipalCollection var66 = new org.jsecurity.subject.SimplePrincipalCollection((java.util.Collection)var63, "org.jsecurity.authz.UnauthorizedException: org.jsecurity.session.ExpiredSessionException: ");
    org.jsecurity.session.UnknownSessionException var71 = new org.jsecurity.session.UnknownSessionException("dd\uFFFD", (java.io.Serializable)100.0f);
    org.jsecurity.session.SessionException var73 = new org.jsecurity.session.SessionException("dd\uFFFD", (java.lang.Throwable)var71, (java.io.Serializable)0);
    org.jsecurity.session.SessionException var74 = new org.jsecurity.session.SessionException("dd\uFFFD", (java.lang.Throwable)var71);
    var66.add((java.lang.Object)var74, "org.jsecurity.config.ConfigurationException: dd\uFFFD");
    var59.onLogout((org.jsecurity.subject.PrincipalCollection)var66);
    org.jsecurity.cache.HashtableCacheManager var78 = new org.jsecurity.cache.HashtableCacheManager();
    org.jsecurity.cache.Cache var80 = var78.getCache("\u0000\u0000");
    var59.setAuthorizationCache(var80);
    org.jsecurity.codec.CodecException var84 = new org.jsecurity.codec.CodecException("dd\uFFFD");
    org.jsecurity.authc.ConcurrentAccessException var85 = new org.jsecurity.authc.ConcurrentAccessException("org.jsecurity.authz.UnauthorizedException: org.jsecurity.session.ExpiredSessionException: ", (java.lang.Throwable)var84);
    org.jsecurity.subject.SimplePrincipalCollection var87 = new org.jsecurity.subject.SimplePrincipalCollection((java.lang.Object)var84, "");
    var59.onLogout((org.jsecurity.subject.PrincipalCollection)var87);
    var58.setRealm((org.jsecurity.realm.Realm)var59);
    org.jsecurity.authc.credential.Sha512CredentialsMatcher var90 = new org.jsecurity.authc.credential.Sha512CredentialsMatcher();
    var90.setHashIterations(1);
    var59.setCredentialsMatcher((org.jsecurity.authc.credential.CredentialsMatcher)var90);
    var90.setStoredCredentialsHexEncoded(false);
    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      var0.setAttribute((java.io.Serializable)var13, (java.lang.Object)var53, (java.lang.Object)false);
      fail("Expected exception of type org.jsecurity.session.UnknownSessionException");
    } catch (org.jsecurity.session.UnknownSessionException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var4);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var6);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var15);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var16);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var17);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var22);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var23);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var24);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var30);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var31);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var32);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var33);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var42);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var43 + "' != '" + "dd\uFFFD"+ "'", var43.equals("dd\uFFFD"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var44);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var45);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var49);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var50 + "' != '" + "dd\uFFFD"+ "'", var50.equals("dd\uFFFD"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var52);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var53);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var55);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var56);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var57);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var61);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var62);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var63);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var80);

  }

  public void test100() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest5.test100");


    java.lang.String[] var4 = org.jsecurity.util.StringUtils.tokenizeToStringArray("1b133c1e-b367-4151-a6eb-7b9101fa4e3a", "\uFFFD\uFFFD#\uFFFD\uFFFD.\uFFFD+r\uFFFD\u6959(\uFFFD\uFFFDW\uFFFDq\uFFFD.\uFFFD\uFFFD^jY\uFFFDj\uFFFDa\uFFFD\uFFFD\uFFFDj\u0628", true, true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var4);

  }

  public void test101() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest5.test101");


    org.jsecurity.crypto.hash.Md2Hash var1 = org.jsecurity.crypto.hash.Md2Hash.fromBase64String("a2b823b1e72eae2b727289df8a00a89df8a0bab6ad8a89c4c5c7a9b62a270000");
    org.jsecurity.authc.credential.Md2CredentialsMatcher var2 = new org.jsecurity.authc.credential.Md2CredentialsMatcher();
    org.jsecurity.authz.SimpleAuthorizingAccount var4 = new org.jsecurity.authz.SimpleAuthorizingAccount((java.lang.Object)"a2b823b1e72eae2b727289df8a00a89df8a0bab6ad8a89c4c5c7a9b62a270000", (java.lang.Object)var2, "");
    java.lang.Object var5 = var4.getCredentials();
    java.lang.String[] var10 = org.jsecurity.util.StringUtils.split("org.jsecurity.realm.text.TextConfigurationRealm_445", 'a', ' ', ' ');
    java.util.Set var11 = org.jsecurity.util.CollectionUtils.asSet((java.lang.Object[])var10);
    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      var4.checkPermissions((java.util.Collection)var11);
      fail("Expected exception of type java.lang.ClassCastException");
    } catch (java.lang.ClassCastException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var1);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var5);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var10);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var11);

  }

  public void test102() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest5.test102");


    org.jsecurity.realm.activedirectory.ActiveDirectoryRealm var0 = new org.jsecurity.realm.activedirectory.ActiveDirectoryRealm();
    var0.init();
    var0.init();
    org.jsecurity.config.ReflectionBuilder var3 = new org.jsecurity.config.ReflectionBuilder();
    org.jsecurity.config.ReflectionBuilder var4 = new org.jsecurity.config.ReflectionBuilder();
    org.jsecurity.io.IniResource var5 = new org.jsecurity.io.IniResource();
    var5.setCharsetName("org.jsecurity.authz.UnauthorizedException: org.jsecurity.session.ExpiredSessionException: ");
    java.util.Map var8 = var5.getSections();
    java.util.Map var9 = var4.buildObjects(var8);
    org.jsecurity.config.ReflectionBuilder var10 = new org.jsecurity.config.ReflectionBuilder();
    org.jsecurity.io.IniResource var11 = new org.jsecurity.io.IniResource();
    var11.setCharsetName("org.jsecurity.authz.UnauthorizedException: org.jsecurity.session.ExpiredSessionException: ");
    java.util.Map var14 = var11.getSections();
    java.util.Map var15 = var10.buildObjects(var14);
    java.util.Map var16 = var4.buildObjects(var15);
    java.util.Map var17 = var3.buildObjects(var16);
    var0.setGroupRolesMap(var17);
    org.jsecurity.authc.pam.ModularRealmAuthenticator var19 = new org.jsecurity.authc.pam.ModularRealmAuthenticator((org.jsecurity.realm.Realm)var0);
    var0.setSystemPassword("e8e5d499-33c0-418e-93f9-76a51372c414");
    org.jsecurity.cache.CacheManager var22 = var0.getCacheManager();
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var8);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var9);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var14);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var15);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var16);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var17);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var22);

  }

  public void test103() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest5.test103");


    org.jsecurity.session.mgt.eis.MemorySessionDAO var0 = new org.jsecurity.session.mgt.eis.MemorySessionDAO();
    org.jsecurity.cache.Cache var1 = var0.getActiveSessionsCache();
    org.jsecurity.cache.CacheManager var2 = var0.getCacheManager();
    org.jsecurity.cache.HashtableCacheManager var3 = new org.jsecurity.cache.HashtableCacheManager();
    org.jsecurity.cache.Cache var5 = var3.getCache("\u0000\u0000");
    var0.setActiveSessionsCache(var5);
    java.io.InputStream var8 = org.jsecurity.util.ClassUtils.getResourceAsStream("");
    java.lang.Object[] var9 = new java.lang.Object[] { var8};
    java.util.List var10 = org.jsecurity.util.CollectionUtils.asList(var9);
    org.jsecurity.authc.pam.ModularRealmAuthenticator var11 = new org.jsecurity.authc.pam.ModularRealmAuthenticator(var10);
    org.jsecurity.authc.pam.AllSuccessfulModularAuthenticationStrategy var12 = new org.jsecurity.authc.pam.AllSuccessfulModularAuthenticationStrategy();
    var11.setModularAuthenticationStrategy((org.jsecurity.authc.pam.ModularAuthenticationStrategy)var12);
    org.jsecurity.authz.SimpleAuthorizationInfo var14 = new org.jsecurity.authz.SimpleAuthorizationInfo();
    var14.addStringPermission("hi!");
    java.io.InputStream var18 = org.jsecurity.util.ClassUtils.getResourceAsStream("");
    java.lang.Object[] var19 = new java.lang.Object[] { var18};
    java.util.List var20 = org.jsecurity.util.CollectionUtils.asList(var19);
    var14.addRoles((java.util.Collection)var20);
    var11.setAuthenticationListeners((java.util.Collection)var20);
    org.jsecurity.realm.activedirectory.ActiveDirectoryRealm var23 = new org.jsecurity.realm.activedirectory.ActiveDirectoryRealm();
    var23.setPrincipalSuffix("");
    var11.setRealm((org.jsecurity.realm.Realm)var23);
    org.jsecurity.cache.HashtableCacheManager var27 = new org.jsecurity.cache.HashtableCacheManager();
    org.jsecurity.cache.Cache var29 = var27.getCache("\u0000\u0000");
    var23.setAuthorizationCache(var29);
    var0.setActiveSessionsCache(var29);
    org.jsecurity.session.mgt.SimpleSession var32 = new org.jsecurity.session.mgt.SimpleSession();
    java.io.Serializable var33 = var0.create((org.jsecurity.session.Session)var32);
    org.jsecurity.session.mgt.SimpleSession var34 = new org.jsecurity.session.mgt.SimpleSession();
    var34.touch();
    var34.validate();
    org.jsecurity.session.mgt.SimpleSession var37 = new org.jsecurity.session.mgt.SimpleSession();
    var37.setTimeout((-1L));
    org.jsecurity.session.mgt.SimpleSession var40 = new org.jsecurity.session.mgt.SimpleSession();
    java.util.Date var41 = var40.getLastAccessTime();
    var37.setLastAccessTime(var41);
    org.jsecurity.session.mgt.SimpleSession var43 = new org.jsecurity.session.mgt.SimpleSession();
    java.util.Date var44 = var43.getLastAccessTime();
    var37.setStopTimestamp(var44);
    var34.setLastAccessTime(var44);
    var32.setLastAccessTime(var44);
    org.jsecurity.session.mgt.ImmutableProxiedSession var48 = new org.jsecurity.session.mgt.ImmutableProxiedSession((org.jsecurity.session.Session)var32);
    org.jsecurity.session.ProxiedSession var49 = new org.jsecurity.session.ProxiedSession((org.jsecurity.session.Session)var32);
    java.util.Date var50 = var49.getStartTimestamp();
    org.jsecurity.authc.IncorrectCredentialsException var53 = new org.jsecurity.authc.IncorrectCredentialsException("\u0000\u0000");
    org.jsecurity.codec.CodecException var56 = new org.jsecurity.codec.CodecException("dd\uFFFD");
    org.jsecurity.authc.ConcurrentAccessException var57 = new org.jsecurity.authc.ConcurrentAccessException("org.jsecurity.authz.UnauthorizedException: org.jsecurity.session.ExpiredSessionException: ", (java.lang.Throwable)var56);
    org.jsecurity.subject.SimplePrincipalCollection var59 = new org.jsecurity.subject.SimplePrincipalCollection((java.lang.Object)var56, "");
    java.io.InputStream var61 = org.jsecurity.util.ClassUtils.getResourceAsStream("");
    java.lang.Object[] var62 = new java.lang.Object[] { var61};
    java.util.List var63 = org.jsecurity.util.CollectionUtils.asList(var62);
    org.jsecurity.authc.pam.ModularRealmAuthenticator var64 = new org.jsecurity.authc.pam.ModularRealmAuthenticator(var63);
    org.jsecurity.authc.pam.AllSuccessfulModularAuthenticationStrategy var65 = new org.jsecurity.authc.pam.AllSuccessfulModularAuthenticationStrategy();
    var64.setModularAuthenticationStrategy((org.jsecurity.authc.pam.ModularAuthenticationStrategy)var65);
    org.jsecurity.authz.SimpleAuthorizationInfo var67 = new org.jsecurity.authz.SimpleAuthorizationInfo();
    var67.addStringPermission("hi!");
    java.io.InputStream var71 = org.jsecurity.util.ClassUtils.getResourceAsStream("");
    java.lang.Object[] var72 = new java.lang.Object[] { var71};
    java.util.List var73 = org.jsecurity.util.CollectionUtils.asList(var72);
    var67.addRoles((java.util.Collection)var73);
    var64.setAuthenticationListeners((java.util.Collection)var73);
    org.jsecurity.realm.activedirectory.ActiveDirectoryRealm var76 = new org.jsecurity.realm.activedirectory.ActiveDirectoryRealm();
    var76.setPrincipalSuffix("");
    var64.setRealm((org.jsecurity.realm.Realm)var76);
    org.jsecurity.authc.pam.FirstSuccessfulAuthenticationStrategy var80 = new org.jsecurity.authc.pam.FirstSuccessfulAuthenticationStrategy();
    org.jsecurity.authz.UnauthorizedException var82 = new org.jsecurity.authz.UnauthorizedException("org.jsecurity.config.ConfigurationException: dd\uFFFD");
    java.lang.Throwable[] var83 = var82.getSuppressed();
    java.util.List var84 = org.jsecurity.util.CollectionUtils.asList((java.lang.Object[])var83);
    org.jsecurity.authc.UsernamePasswordToken var85 = new org.jsecurity.authc.UsernamePasswordToken();
    java.lang.String var86 = var85.getUsername();
    java.net.InetAddress var87 = var85.getInetAddress();
    org.jsecurity.authc.AuthenticationInfo var88 = var80.beforeAllAttempts((java.util.Collection)var84, (org.jsecurity.authc.AuthenticationToken)var85);
    var64.setModularAuthenticationStrategy((org.jsecurity.authc.pam.ModularAuthenticationStrategy)var80);
    org.jsecurity.authc.SimpleAccount var90 = new org.jsecurity.authc.SimpleAccount((org.jsecurity.subject.PrincipalCollection)var59, (java.lang.Object)var64);
    org.jsecurity.session.StoppedSessionException var91 = new org.jsecurity.session.StoppedSessionException("org.jsecurity.authz.UnauthorizedException: org.jsecurity.session.ExpiredSessionException: ", (java.lang.Throwable)var53, (java.io.Serializable)var90);
    org.jsecurity.subject.InvalidSubjectException var92 = new org.jsecurity.subject.InvalidSubjectException((java.lang.Throwable)var53);
    org.jsecurity.config.UnresolveableReferenceException var93 = new org.jsecurity.config.UnresolveableReferenceException();
    var49.setAttribute((java.lang.Object)var92, (java.lang.Object)var93);
    java.util.Date var95 = var49.getStartTimestamp();
    org.jsecurity.session.ProxiedSession var96 = new org.jsecurity.session.ProxiedSession((org.jsecurity.session.Session)var49);
    java.util.Collection var97 = var49.getAttributeKeys();
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var1);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var2);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var5);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var8);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var9);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var10);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var18);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var19);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var20);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var29);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var33 + "' != '" + "8c2217ad-c6d4-4aa9-b1d5-b939ed7334c8"+ "'", var33.equals("8c2217ad-c6d4-4aa9-b1d5-b939ed7334c8"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var41);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var44);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var50);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var61);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var62);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var63);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var71);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var72);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var73);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var83);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var84);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var86);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var87);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var88);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var95);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var97);

  }

  public void test104() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest5.test104");


    org.jsecurity.io.ResourceException var4 = new org.jsecurity.io.ResourceException("hi!");
    org.jsecurity.codec.CodecException var5 = new org.jsecurity.codec.CodecException((java.lang.Throwable)var4);
    org.jsecurity.JSecurityException var6 = new org.jsecurity.JSecurityException("a2b823b1e72eae2b727289df8a00a89df8a0bab6ad8a89c4c5c7a9b62a270000", (java.lang.Throwable)var4);
    org.jsecurity.authc.LockedAccountException var7 = new org.jsecurity.authc.LockedAccountException("a2b823b1e72eae2b727289df8a00a89df8a0bab6ad8a89c4c5c7a9b62a270000", (java.lang.Throwable)var6);
    org.jsecurity.session.InvalidSessionException var8 = new org.jsecurity.session.InvalidSessionException("org.jsecurity.authz.UnauthorizedException: org.jsecurity.session.ExpiredSessionException: ", (java.lang.Throwable)var7);
    org.jsecurity.subject.InvalidSubjectException var9 = new org.jsecurity.subject.InvalidSubjectException((java.lang.Throwable)var7);

  }

  public void test105() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest5.test105");


    org.jsecurity.session.mgt.SimpleSession var0 = new org.jsecurity.session.mgt.SimpleSession();
    var0.setTimeout((-1L));
    org.jsecurity.session.mgt.SimpleSession var3 = new org.jsecurity.session.mgt.SimpleSession();
    java.util.Date var4 = var3.getLastAccessTime();
    var0.setLastAccessTime(var4);
    org.jsecurity.session.mgt.SimpleSession var6 = new org.jsecurity.session.mgt.SimpleSession();
    java.util.Date var7 = var6.getLastAccessTime();
    var0.setStopTimestamp(var7);
    java.net.InetAddress var9 = var0.getHostAddress();
    org.jsecurity.session.mgt.SimpleSession var10 = new org.jsecurity.session.mgt.SimpleSession(var9);
    var10.setTimeout(1L);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var4);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var7);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var9);

  }

  public void test106() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest5.test106");


    org.jsecurity.authz.SimpleAuthorizationInfo var1 = new org.jsecurity.authz.SimpleAuthorizationInfo();
    org.jsecurity.session.UnknownSessionException var6 = new org.jsecurity.session.UnknownSessionException("dd\uFFFD", (java.io.Serializable)100.0f);
    org.jsecurity.subject.SubjectException var7 = new org.jsecurity.subject.SubjectException("dd\uFFFD", (java.lang.Throwable)var6);
    org.jsecurity.io.SerializationException var8 = new org.jsecurity.io.SerializationException("", (java.lang.Throwable)var7);
    java.lang.Throwable[] var9 = var7.getSuppressed();
    java.util.Set var10 = org.jsecurity.util.CollectionUtils.asSet((java.lang.Object[])var9);
    var1.setStringPermissions(var10);
    java.util.Set var12 = var1.getRoles();
    org.jsecurity.authz.SimpleAuthorizationInfo var13 = new org.jsecurity.authz.SimpleAuthorizationInfo();
    var13.addRole("a2b823b1e72eae2b727289df8a00a89df8a0bab6ad8a89c4c5c7a9b62a270000");
    org.jsecurity.session.UnknownSessionException var20 = new org.jsecurity.session.UnknownSessionException("dd\uFFFD", (java.io.Serializable)100.0f);
    org.jsecurity.subject.SubjectException var21 = new org.jsecurity.subject.SubjectException("dd\uFFFD", (java.lang.Throwable)var20);
    org.jsecurity.io.SerializationException var22 = new org.jsecurity.io.SerializationException("", (java.lang.Throwable)var21);
    java.lang.Throwable[] var23 = var21.getSuppressed();
    java.util.Set var24 = org.jsecurity.util.CollectionUtils.asSet((java.lang.Object[])var23);
    var13.addRoles((java.util.Collection)var24);
    var1.setRoles(var24);
    org.jsecurity.authz.SimpleRole var27 = new org.jsecurity.authz.SimpleRole("org.jsecurity.authz.UnauthorizedException: org.jsecurity.session.ExpiredSessionException: ", var24);
    java.io.InputStream var29 = org.jsecurity.util.ClassUtils.getResourceAsStream("");
    java.lang.Object[] var30 = new java.lang.Object[] { var29};
    java.util.List var31 = org.jsecurity.util.CollectionUtils.asList(var30);
    org.jsecurity.authc.pam.ModularRealmAuthenticator var32 = new org.jsecurity.authc.pam.ModularRealmAuthenticator(var31);
    org.jsecurity.subject.SimplePrincipalCollection var34 = new org.jsecurity.subject.SimplePrincipalCollection((java.util.Collection)var31, "org.jsecurity.authz.UnauthorizedException: org.jsecurity.session.ExpiredSessionException: ");
    org.jsecurity.io.ResourceException var38 = new org.jsecurity.io.ResourceException("hi!");
    org.jsecurity.authc.UnknownAccountException var39 = new org.jsecurity.authc.UnknownAccountException((java.lang.Throwable)var38);
    org.jsecurity.session.StoppedSessionException var40 = new org.jsecurity.session.StoppedSessionException("dd\uFFFD", (java.io.Serializable)var38);
    org.jsecurity.session.UnknownSessionException var41 = new org.jsecurity.session.UnknownSessionException("org.jsecurity.authz.UnauthorizedException: org.jsecurity.session.ExpiredSessionException: ", (java.lang.Throwable)var38);
    boolean var42 = var34.equals((java.lang.Object)var38);
    org.jsecurity.authz.SimpleAuthorizationInfo var43 = new org.jsecurity.authz.SimpleAuthorizationInfo();
    var43.addRole("a2b823b1e72eae2b727289df8a00a89df8a0bab6ad8a89c4c5c7a9b62a270000");
    org.jsecurity.authz.SimpleAuthorizationInfo var46 = new org.jsecurity.authz.SimpleAuthorizationInfo();
    var46.addRole("a2b823b1e72eae2b727289df8a00a89df8a0bab6ad8a89c4c5c7a9b62a270000");
    org.jsecurity.session.UnknownSessionException var53 = new org.jsecurity.session.UnknownSessionException("dd\uFFFD", (java.io.Serializable)100.0f);
    org.jsecurity.subject.SubjectException var54 = new org.jsecurity.subject.SubjectException("dd\uFFFD", (java.lang.Throwable)var53);
    org.jsecurity.io.SerializationException var55 = new org.jsecurity.io.SerializationException("", (java.lang.Throwable)var54);
    java.lang.Throwable[] var56 = var54.getSuppressed();
    java.util.Set var57 = org.jsecurity.util.CollectionUtils.asSet((java.lang.Object[])var56);
    var46.addRoles((java.util.Collection)var57);
    var43.setObjectPermissions(var57);
    java.io.InputStream var61 = org.jsecurity.util.ClassUtils.getResourceAsStream("");
    java.lang.Object[] var62 = new java.lang.Object[] { var61};
    java.util.List var63 = org.jsecurity.util.CollectionUtils.asList(var62);
    org.jsecurity.authc.pam.ModularRealmAuthenticator var64 = new org.jsecurity.authc.pam.ModularRealmAuthenticator(var63);
    org.jsecurity.subject.SimplePrincipalCollection var66 = new org.jsecurity.subject.SimplePrincipalCollection((java.util.Collection)var63, "org.jsecurity.authz.UnauthorizedException: org.jsecurity.session.ExpiredSessionException: ");
    java.util.Set var67 = var66.getRealmNames();
    java.io.InputStream var69 = org.jsecurity.util.ClassUtils.getResourceAsStream("");
    java.lang.Object[] var70 = new java.lang.Object[] { var69};
    java.util.List var71 = org.jsecurity.util.CollectionUtils.asList(var70);
    org.jsecurity.authc.pam.ModularRealmAuthenticator var72 = new org.jsecurity.authc.pam.ModularRealmAuthenticator(var71);
    org.jsecurity.subject.SimplePrincipalCollection var74 = new org.jsecurity.subject.SimplePrincipalCollection((java.util.Collection)var71, "org.jsecurity.authz.UnauthorizedException: org.jsecurity.session.ExpiredSessionException: ");
    org.jsecurity.session.UnknownSessionException var79 = new org.jsecurity.session.UnknownSessionException("dd\uFFFD", (java.io.Serializable)100.0f);
    org.jsecurity.session.SessionException var81 = new org.jsecurity.session.SessionException("dd\uFFFD", (java.lang.Throwable)var79, (java.io.Serializable)0);
    org.jsecurity.session.SessionException var82 = new org.jsecurity.session.SessionException("dd\uFFFD", (java.lang.Throwable)var79);
    var74.add((java.lang.Object)var82, "org.jsecurity.config.ConfigurationException: dd\uFFFD");
    java.util.Set var85 = var74.asSet();
    var66.addAll((java.util.Collection)var85, "6464ff");
    var43.setStringPermissions(var85);
    var34.addAll((java.util.Collection)var85, "\uFFFD\uFFFD#\uFFFD\uFFFD.\uFFFD+r\uFFFD\u6959(\uFFFD\uFFFDW\uFFFDq\uFFFD.\uFFFD\uFFFD^jY\uFFFDj\uFFFDa\uFFFD\uFFFD\uFFFDj\u0628\u0000");
    var27.setPermissions(var85);
    java.lang.String var92 = var27.toString();
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var9);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var10);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var12);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var23);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var24);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var29);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var30);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var31);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var42 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var56);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var57);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var61);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var62);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var63);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var67);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var69);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var70);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var71);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var85);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var92 + "' != '" + "org.jsecurity.authz.UnauthorizedException: org.jsecurity.session.ExpiredSessionException: "+ "'", var92.equals("org.jsecurity.authz.UnauthorizedException: org.jsecurity.session.ExpiredSessionException: "));

  }

  public void test107() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest5.test107");


    org.jsecurity.jndi.JndiLocator var0 = new org.jsecurity.jndi.JndiLocator();
    boolean var1 = var0.isResourceRef();
    java.util.Properties var2 = var0.getJndiEnvironment();
    org.jsecurity.realm.jndi.JndiRealmFactory var3 = new org.jsecurity.realm.jndi.JndiRealmFactory();
    java.util.Collection var4 = var3.getJndiNames();
    var3.setJndiNames("e8e5d499-33c0-418e-93f9-76a51372c414");
    org.jsecurity.jndi.JndiTemplate var7 = var3.getJndiTemplate();
    var0.setJndiTemplate(var7);
    org.jsecurity.realm.jndi.JndiRealmFactory var9 = new org.jsecurity.realm.jndi.JndiRealmFactory();
    java.util.Collection var10 = var9.getJndiNames();
    var9.setJndiNames("e8e5d499-33c0-418e-93f9-76a51372c414");
    org.jsecurity.jndi.JndiTemplate var13 = var9.getJndiTemplate();
    var0.setJndiTemplate(var13);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var1 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var2);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var4);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var7);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var10);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var13);

  }

  public void test108() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest5.test108");


    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      org.jsecurity.config.IniConfiguration var2 = new org.jsecurity.config.IniConfiguration("org.jsecurity.config.ConfigurationException: dd\uFFFD-4org.jsecurity.config.ConfigurationException: dd\uFFFD02-8085-950org.jsecurity.config.ConfigurationException: dd\uFFFDbb026org.jsecurity.config.ConfigurationException: dd\uFFFD06", "63bbad34-48e1-408f-9551-a8a0ca6e6734");
      fail("Expected exception of type org.jsecurity.config.ConfigurationException");
    } catch (org.jsecurity.config.ConfigurationException e) {
      // Expected exception.
    }

  }

  public void test109() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest5.test109");


    org.jsecurity.session.mgt.SimpleSession var1 = new org.jsecurity.session.mgt.SimpleSession();
    var1.setTimeout((-1L));
    org.jsecurity.session.mgt.SimpleSession var4 = new org.jsecurity.session.mgt.SimpleSession();
    java.util.Date var5 = var4.getLastAccessTime();
    var1.setLastAccessTime(var5);
    org.jsecurity.session.mgt.SimpleSession var7 = new org.jsecurity.session.mgt.SimpleSession();
    java.util.Date var8 = var7.getLastAccessTime();
    var1.setStopTimestamp(var8);
    java.net.InetAddress var10 = var1.getHostAddress();
    org.jsecurity.session.InvalidSessionException var11 = new org.jsecurity.session.InvalidSessionException("\u0000\u0000\u0000", (java.io.Serializable)var1);
    java.net.InetAddress var12 = var1.getHostAddress();
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var5);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var8);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var10);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var12);

  }

  public void test110() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest5.test110");


    org.jsecurity.authz.UnauthenticatedException var4 = new org.jsecurity.authz.UnauthenticatedException("");
    org.jsecurity.session.UnknownSessionException var5 = new org.jsecurity.session.UnknownSessionException("org.jsecurity.config.ConfigurationException: dd\uFFFD", (java.lang.Throwable)var4);
    org.jsecurity.authc.DisabledAccountException var6 = new org.jsecurity.authc.DisabledAccountException("org.jsecurity.authz.UnauthorizedException: org.jsecurity.session.ExpiredSessionException: ", (java.lang.Throwable)var5);
    org.jsecurity.authz.UnauthorizedException var9 = new org.jsecurity.authz.UnauthorizedException();
    org.jsecurity.session.SessionException var11 = new org.jsecurity.session.SessionException("", (java.lang.Throwable)var9, (java.io.Serializable)"org.jsecurity.config.ConfigurationException: dd\uFFFD");
    org.jsecurity.session.ExpiredSessionException var12 = new org.jsecurity.session.ExpiredSessionException("", (java.io.Serializable)"");
    org.jsecurity.session.InvalidSessionException var13 = new org.jsecurity.session.InvalidSessionException("org.jsecurity.config.ConfigurationException: dd\uFFFD", (java.lang.Throwable)var5, (java.io.Serializable)var12);
    org.jsecurity.authz.AuthorizationException var14 = new org.jsecurity.authz.AuthorizationException((java.lang.Throwable)var5);

  }

  public void test111() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest5.test111");


    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      java.lang.Object var1 = org.jsecurity.util.ClassUtils.newInstance("f0f45d47-9622-4e2b-af0d-f28e1d3b51e6");
      fail("Expected exception of type org.jsecurity.util.UnknownClassException");
    } catch (org.jsecurity.util.UnknownClassException e) {
      // Expected exception.
    }

  }

  public void test112() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest5.test112");


    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      java.security.Key var1 = org.jsecurity.crypto.BlowfishCipher.generateNewKey(2);
      fail("Expected exception of type java.security.InvalidParameterException");
    } catch (java.security.InvalidParameterException e) {
      // Expected exception.
    }

  }

  public void test113() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest5.test113");


    org.jsecurity.session.mgt.DefaultSessionManager var0 = new org.jsecurity.session.mgt.DefaultSessionManager();
    org.jsecurity.session.mgt.eis.MemorySessionDAO var1 = new org.jsecurity.session.mgt.eis.MemorySessionDAO();
    org.jsecurity.cache.Cache var2 = var1.getActiveSessionsCache();
    org.jsecurity.cache.CacheManager var3 = var1.getCacheManager();
    org.jsecurity.cache.HashtableCacheManager var4 = new org.jsecurity.cache.HashtableCacheManager();
    org.jsecurity.cache.Cache var6 = var4.getCache("\u0000\u0000");
    var1.setActiveSessionsCache(var6);
    java.io.InputStream var9 = org.jsecurity.util.ClassUtils.getResourceAsStream("");
    java.lang.Object[] var10 = new java.lang.Object[] { var9};
    java.util.List var11 = org.jsecurity.util.CollectionUtils.asList(var10);
    org.jsecurity.authc.pam.ModularRealmAuthenticator var12 = new org.jsecurity.authc.pam.ModularRealmAuthenticator(var11);
    org.jsecurity.authc.pam.AllSuccessfulModularAuthenticationStrategy var13 = new org.jsecurity.authc.pam.AllSuccessfulModularAuthenticationStrategy();
    var12.setModularAuthenticationStrategy((org.jsecurity.authc.pam.ModularAuthenticationStrategy)var13);
    org.jsecurity.authz.SimpleAuthorizationInfo var15 = new org.jsecurity.authz.SimpleAuthorizationInfo();
    var15.addStringPermission("hi!");
    java.io.InputStream var19 = org.jsecurity.util.ClassUtils.getResourceAsStream("");
    java.lang.Object[] var20 = new java.lang.Object[] { var19};
    java.util.List var21 = org.jsecurity.util.CollectionUtils.asList(var20);
    var15.addRoles((java.util.Collection)var21);
    var12.setAuthenticationListeners((java.util.Collection)var21);
    org.jsecurity.realm.activedirectory.ActiveDirectoryRealm var24 = new org.jsecurity.realm.activedirectory.ActiveDirectoryRealm();
    var24.setPrincipalSuffix("");
    var12.setRealm((org.jsecurity.realm.Realm)var24);
    org.jsecurity.cache.HashtableCacheManager var28 = new org.jsecurity.cache.HashtableCacheManager();
    org.jsecurity.cache.Cache var30 = var28.getCache("\u0000\u0000");
    var24.setAuthorizationCache(var30);
    var1.setActiveSessionsCache(var30);
    org.jsecurity.session.mgt.SimpleSession var33 = new org.jsecurity.session.mgt.SimpleSession();
    java.io.Serializable var34 = var1.create((org.jsecurity.session.Session)var33);
    var0.setSessionDAO((org.jsecurity.session.mgt.eis.SessionDAO)var1);
    org.jsecurity.authc.pam.AllSuccessfulModularAuthenticationStrategy var36 = new org.jsecurity.authc.pam.AllSuccessfulModularAuthenticationStrategy();
    char[] var38 = new char[] { };
    org.jsecurity.authc.UsernamePasswordToken var40 = new org.jsecurity.authc.UsernamePasswordToken("hi!", var38, true);
    org.jsecurity.authc.SimpleAccount var41 = new org.jsecurity.authc.SimpleAccount();
    var41.setCredentialsExpired(false);
    boolean var44 = var41.isLocked();
    org.jsecurity.authc.AuthenticationInfo var45 = var36.afterAllAttempts((org.jsecurity.authc.AuthenticationToken)var40, (org.jsecurity.authc.AuthenticationInfo)var41);
    char[] var49 = new char[] { '4', '#'};
    org.jsecurity.authc.UsernamePasswordToken var50 = new org.jsecurity.authc.UsernamePasswordToken("\u0000\u0000", var49);
    org.jsecurity.authc.SimpleAccount var51 = new org.jsecurity.authc.SimpleAccount();
    var51.setCredentialsExpired(false);
    var51.setCredentialsExpired(false);
    boolean var56 = var51.isCredentialsExpired();
    org.jsecurity.authc.AuthenticationInfo var57 = var36.afterAllAttempts((org.jsecurity.authc.AuthenticationToken)var50, (org.jsecurity.authc.AuthenticationInfo)var51);
    org.jsecurity.realm.activedirectory.ActiveDirectoryRealm var58 = new org.jsecurity.realm.activedirectory.ActiveDirectoryRealm();
    org.jsecurity.authc.credential.Sha256CredentialsMatcher var59 = new org.jsecurity.authc.credential.Sha256CredentialsMatcher();
    var58.setCredentialsMatcher((org.jsecurity.authc.credential.CredentialsMatcher)var59);
    java.lang.String var61 = var58.getAuthorizationCacheName();
    org.jsecurity.authc.UsernamePasswordToken var62 = new org.jsecurity.authc.UsernamePasswordToken();
    java.lang.String var63 = var62.getUsername();
    java.lang.Object var64 = var62.getPrincipal();
    boolean var65 = var58.supports((org.jsecurity.authc.AuthenticationToken)var62);
    org.jsecurity.session.UnknownSessionException var69 = new org.jsecurity.session.UnknownSessionException("dd\uFFFD", (java.io.Serializable)100.0f);
    org.jsecurity.session.SessionException var71 = new org.jsecurity.session.SessionException("dd\uFFFD", (java.lang.Throwable)var69, (java.io.Serializable)0);
    org.jsecurity.authc.SimpleAuthenticationInfo var74 = new org.jsecurity.authc.SimpleAuthenticationInfo((java.lang.Object)0, (java.lang.Object)10, "hi!");
    java.lang.Object var75 = var74.getCredentials();
    java.lang.String var76 = var74.toString();
    org.jsecurity.authc.AuthenticationInfo var77 = var36.afterAllAttempts((org.jsecurity.authc.AuthenticationToken)var62, (org.jsecurity.authc.AuthenticationInfo)var74);
    org.jsecurity.session.mgt.eis.MemorySessionDAO var78 = new org.jsecurity.session.mgt.eis.MemorySessionDAO();
    org.jsecurity.cache.Cache var79 = var78.getActiveSessionsCache();
    var78.setActiveSessionsCacheName("dd\uFFFD");
    var74.setCredentials((java.lang.Object)var78);
    var0.setSessionDAO((org.jsecurity.session.mgt.eis.SessionDAO)var78);
    org.jsecurity.session.mgt.ExecutorServiceSessionValidationScheduler var84 = new org.jsecurity.session.mgt.ExecutorServiceSessionValidationScheduler((org.jsecurity.session.mgt.ValidatingSessionManager)var0);
    long var85 = var84.getInterval();
    var84.run();
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var2);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var3);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var6);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var9);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var10);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var11);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var19);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var20);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var21);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var30);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var34 + "' != '" + "7272eb19-d391-4061-a8d0-d58cec860677"+ "'", var34.equals("7272eb19-d391-4061-a8d0-d58cec860677"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var38);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var44 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var45);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var49);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var56 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var57);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var61);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var63);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var64);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var65 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var75 + "' != '" + 10+ "'", var75.equals(10));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var77);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var79);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var85 == 3600000L);

  }

  public void test114() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest5.test114");


    java.io.InputStream var1 = org.jsecurity.util.ClassUtils.getResourceAsStream("");
    java.lang.Object[] var2 = new java.lang.Object[] { var1};
    java.util.List var3 = org.jsecurity.util.CollectionUtils.asList(var2);
    org.jsecurity.authc.pam.ModularRealmAuthenticator var4 = new org.jsecurity.authc.pam.ModularRealmAuthenticator(var3);
    org.jsecurity.subject.SimplePrincipalCollection var6 = new org.jsecurity.subject.SimplePrincipalCollection((java.util.Collection)var3, "org.jsecurity.authz.UnauthorizedException: org.jsecurity.session.ExpiredSessionException: ");
    java.util.List var7 = var6.asList();
    org.jsecurity.realm.activedirectory.ActiveDirectoryRealm var9 = new org.jsecurity.realm.activedirectory.ActiveDirectoryRealm();
    org.jsecurity.authc.credential.Sha256CredentialsMatcher var10 = new org.jsecurity.authc.credential.Sha256CredentialsMatcher();
    var9.setCredentialsMatcher((org.jsecurity.authc.credential.CredentialsMatcher)var10);
    java.lang.String var12 = var9.getAuthorizationCacheName();
    var9.setPrincipalSuffix("org.jsecurity.config.ConfigurationException: dd\uFFFD");
    org.jsecurity.authz.permission.PermissionResolver var15 = var9.getPermissionResolver();
    java.util.Set var16 = org.jsecurity.util.PermissionUtils.resolveDelimitedPermissions("NfxhYN7ItBfRAmDBmprtU73ghfEEPpcDJrHPkZ06wiY=", var15);
    var6.addAll((java.util.Collection)var16, "cff098b5-6d79-4f6d-93d3-148185d0b987");
    org.jsecurity.authz.aop.GuestAnnotationHandler var19 = new org.jsecurity.authz.aop.GuestAnnotationHandler();
    java.lang.Class var20 = var19.getAnnotationClass();
    java.lang.Object var21 = var6.oneByType(var20);
    org.jsecurity.realm.activedirectory.ActiveDirectoryRealm var22 = new org.jsecurity.realm.activedirectory.ActiveDirectoryRealm();
    var22.init();
    var22.setSystemPassword("dd\uFFFD");
    org.jsecurity.authz.aop.GuestAnnotationHandler var26 = new org.jsecurity.authz.aop.GuestAnnotationHandler();
    java.lang.Class var27 = var26.getAnnotationClass();
    var22.setAuthenticationTokenClass(var27);
    java.lang.Object var29 = var6.oneByType(var27);
    var6.clear();
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var1);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var2);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var3);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var7);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var12);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var15);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var16);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var20);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var21);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var27);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var29);

  }

  public void test115() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest5.test115");


    org.jsecurity.codec.CodecException var1 = new org.jsecurity.codec.CodecException("guest = guest,guest\npresidentskroob = 12345,president\ndarkhelmet = ludicrousspeed,darklord,schwartz\nroot = secret,root\nlonestarr = vespa,goodguy,schwartz\n");

  }

  public void test116() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest5.test116");


    org.jsecurity.session.mgt.DefaultSessionManager var0 = new org.jsecurity.session.mgt.DefaultSessionManager();
    var0.setGlobalSessionTimeout(1);
    org.jsecurity.session.mgt.quartz.QuartzSessionValidationScheduler var3 = new org.jsecurity.session.mgt.quartz.QuartzSessionValidationScheduler((org.jsecurity.session.mgt.ValidatingSessionManager)var0);
    org.jsecurity.authc.pam.AllSuccessfulModularAuthenticationStrategy var4 = new org.jsecurity.authc.pam.AllSuccessfulModularAuthenticationStrategy();
    char[] var6 = new char[] { };
    org.jsecurity.authc.UsernamePasswordToken var8 = new org.jsecurity.authc.UsernamePasswordToken("hi!", var6, true);
    org.jsecurity.authc.SimpleAccount var9 = new org.jsecurity.authc.SimpleAccount();
    var9.setCredentialsExpired(false);
    boolean var12 = var9.isLocked();
    org.jsecurity.authc.AuthenticationInfo var13 = var4.afterAllAttempts((org.jsecurity.authc.AuthenticationToken)var8, (org.jsecurity.authc.AuthenticationInfo)var9);
    char[] var16 = new char[] { };
    org.jsecurity.authc.UsernamePasswordToken var18 = new org.jsecurity.authc.UsernamePasswordToken("hi!", var16, true);
    org.jsecurity.authc.UsernamePasswordToken var19 = new org.jsecurity.authc.UsernamePasswordToken("\u0000\u0000", var16);
    java.lang.Object var20 = var19.getPrincipal();
    org.jsecurity.authc.SimpleAccount var21 = new org.jsecurity.authc.SimpleAccount();
    var21.setCredentialsExpired(false);
    var21.setCredentialsExpired(false);
    boolean var26 = var21.isCredentialsExpired();
    org.jsecurity.authc.AuthenticationInfo var27 = var4.afterAllAttempts((org.jsecurity.authc.AuthenticationToken)var19, (org.jsecurity.authc.AuthenticationInfo)var21);
    byte[] var31 = new byte[] { (byte)100, (byte)100, (byte)(-1)};
    java.lang.String var32 = org.jsecurity.codec.CodecSupport.toString(var31);
    byte[] var33 = org.jsecurity.codec.Base64.encode(var31);
    char[] var34 = org.jsecurity.codec.CodecSupport.toChars(var33);
    var19.setPassword(var34);
    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      java.util.Date var36 = var0.getStartTimestamp((java.io.Serializable)var19);
      fail("Expected exception of type org.jsecurity.session.UnknownSessionException");
    } catch (org.jsecurity.session.UnknownSessionException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var6);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var12 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var13);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var16);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var20 + "' != '" + "\u0000\u0000"+ "'", var20.equals("\u0000\u0000"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var26 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var27);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var31);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var32 + "' != '" + "dd\uFFFD"+ "'", var32.equals("dd\uFFFD"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var33);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var34);

  }

  public void test117() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest5.test117");


    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      org.jsecurity.io.IniResource var1 = new org.jsecurity.io.IniResource("95f7f9bef51a4a01d759fb43e86d7c04");
      fail("Expected exception of type org.jsecurity.io.ResourceException");
    } catch (org.jsecurity.io.ResourceException e) {
      // Expected exception.
    }

  }

  public void test118() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest5.test118");


    org.jsecurity.authz.aop.PermissionAnnotationHandler var0 = new org.jsecurity.authz.aop.PermissionAnnotationHandler();
    java.lang.Class var1 = var0.getAnnotationClass();
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var1);

  }

  public void test119() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest5.test119");


    char[] var4 = new char[] { };
    org.jsecurity.authc.UsernamePasswordToken var6 = new org.jsecurity.authc.UsernamePasswordToken("hi!", var4, true);
    byte[] var7 = org.jsecurity.codec.Hex.decode(var4);
    byte[] var8 = org.jsecurity.codec.Hex.decode(var4);
    org.jsecurity.authc.UsernamePasswordToken var10 = new org.jsecurity.authc.UsernamePasswordToken("ZGT/", var4, false);
    org.jsecurity.authc.UsernamePasswordToken var11 = new org.jsecurity.authc.UsernamePasswordToken("49932616-87e3-49f2-a9ff-1e3516355d97", var4);
    org.jsecurity.authc.pam.AllSuccessfulModularAuthenticationStrategy var13 = new org.jsecurity.authc.pam.AllSuccessfulModularAuthenticationStrategy();
    char[] var15 = new char[] { };
    org.jsecurity.authc.UsernamePasswordToken var17 = new org.jsecurity.authc.UsernamePasswordToken("hi!", var15, true);
    org.jsecurity.authc.SimpleAccount var18 = new org.jsecurity.authc.SimpleAccount();
    var18.setCredentialsExpired(false);
    boolean var21 = var18.isLocked();
    org.jsecurity.authc.AuthenticationInfo var22 = var13.afterAllAttempts((org.jsecurity.authc.AuthenticationToken)var17, (org.jsecurity.authc.AuthenticationInfo)var18);
    char[] var26 = new char[] { '4', '#'};
    org.jsecurity.authc.UsernamePasswordToken var27 = new org.jsecurity.authc.UsernamePasswordToken("\u0000\u0000", var26);
    org.jsecurity.authc.SimpleAccount var28 = new org.jsecurity.authc.SimpleAccount();
    var28.setCredentialsExpired(false);
    var28.setCredentialsExpired(false);
    boolean var33 = var28.isCredentialsExpired();
    org.jsecurity.authc.AuthenticationInfo var34 = var13.afterAllAttempts((org.jsecurity.authc.AuthenticationToken)var27, (org.jsecurity.authc.AuthenticationInfo)var28);
    java.net.InetAddress var35 = var27.getInetAddress();
    org.jsecurity.session.mgt.eis.MemorySessionDAO var36 = new org.jsecurity.session.mgt.eis.MemorySessionDAO();
    org.jsecurity.cache.Cache var37 = var36.getActiveSessionsCache();
    org.jsecurity.cache.CacheManager var38 = var36.getCacheManager();
    org.jsecurity.cache.HashtableCacheManager var39 = new org.jsecurity.cache.HashtableCacheManager();
    org.jsecurity.cache.Cache var41 = var39.getCache("\u0000\u0000");
    var36.setActiveSessionsCache(var41);
    java.io.InputStream var44 = org.jsecurity.util.ClassUtils.getResourceAsStream("");
    java.lang.Object[] var45 = new java.lang.Object[] { var44};
    java.util.List var46 = org.jsecurity.util.CollectionUtils.asList(var45);
    org.jsecurity.authc.pam.ModularRealmAuthenticator var47 = new org.jsecurity.authc.pam.ModularRealmAuthenticator(var46);
    org.jsecurity.authc.pam.AllSuccessfulModularAuthenticationStrategy var48 = new org.jsecurity.authc.pam.AllSuccessfulModularAuthenticationStrategy();
    var47.setModularAuthenticationStrategy((org.jsecurity.authc.pam.ModularAuthenticationStrategy)var48);
    org.jsecurity.authz.SimpleAuthorizationInfo var50 = new org.jsecurity.authz.SimpleAuthorizationInfo();
    var50.addStringPermission("hi!");
    java.io.InputStream var54 = org.jsecurity.util.ClassUtils.getResourceAsStream("");
    java.lang.Object[] var55 = new java.lang.Object[] { var54};
    java.util.List var56 = org.jsecurity.util.CollectionUtils.asList(var55);
    var50.addRoles((java.util.Collection)var56);
    var47.setAuthenticationListeners((java.util.Collection)var56);
    org.jsecurity.realm.activedirectory.ActiveDirectoryRealm var59 = new org.jsecurity.realm.activedirectory.ActiveDirectoryRealm();
    var59.setPrincipalSuffix("");
    var47.setRealm((org.jsecurity.realm.Realm)var59);
    org.jsecurity.cache.HashtableCacheManager var63 = new org.jsecurity.cache.HashtableCacheManager();
    org.jsecurity.cache.Cache var65 = var63.getCache("\u0000\u0000");
    var59.setAuthorizationCache(var65);
    var36.setActiveSessionsCache(var65);
    org.jsecurity.session.mgt.SimpleSession var68 = new org.jsecurity.session.mgt.SimpleSession();
    java.io.Serializable var69 = var36.create((org.jsecurity.session.Session)var68);
    org.jsecurity.session.mgt.SimpleSession var70 = new org.jsecurity.session.mgt.SimpleSession();
    var70.touch();
    var70.validate();
    org.jsecurity.session.mgt.SimpleSession var73 = new org.jsecurity.session.mgt.SimpleSession();
    var73.setTimeout((-1L));
    org.jsecurity.session.mgt.SimpleSession var76 = new org.jsecurity.session.mgt.SimpleSession();
    java.util.Date var77 = var76.getLastAccessTime();
    var73.setLastAccessTime(var77);
    org.jsecurity.session.mgt.SimpleSession var79 = new org.jsecurity.session.mgt.SimpleSession();
    java.util.Date var80 = var79.getLastAccessTime();
    var73.setStopTimestamp(var80);
    var70.setLastAccessTime(var80);
    var68.setLastAccessTime(var80);
    org.jsecurity.session.mgt.ImmutableProxiedSession var84 = new org.jsecurity.session.mgt.ImmutableProxiedSession((org.jsecurity.session.Session)var68);
    java.util.Date var85 = var84.getLastAccessTime();
    java.net.InetAddress var86 = var84.getHostAddress();
    var27.setInetAddress(var86);
    org.jsecurity.session.mgt.SimpleSession var88 = new org.jsecurity.session.mgt.SimpleSession(var86);
    org.jsecurity.authc.UsernamePasswordToken var89 = new org.jsecurity.authc.UsernamePasswordToken("org.jsecurity.realm.SimpleAccountRealm-410-authorization", var4, true, var86);
    byte[] var90 = org.jsecurity.codec.CodecSupport.toBytes(var4);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var4);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var7);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var8);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var15);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var21 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var22);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var26);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var33 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var34);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var35);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var37);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var38);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var41);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var44);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var45);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var46);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var54);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var55);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var56);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var65);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var69 + "' != '" + "ab8fbf0b-d098-4d6c-b2c3-f29cba54d65b"+ "'", var69.equals("ab8fbf0b-d098-4d6c-b2c3-f29cba54d65b"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var77);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var80);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var85);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var86);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var90);

  }

  public void test120() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest5.test120");


    org.jsecurity.mgt.DefaultSecurityManager var0 = new org.jsecurity.mgt.DefaultSecurityManager();
    java.io.InputStream var2 = org.jsecurity.util.ClassUtils.getResourceAsStream("");
    java.lang.Object[] var3 = new java.lang.Object[] { var2};
    java.util.List var4 = org.jsecurity.util.CollectionUtils.asList(var3);
    org.jsecurity.authc.pam.ModularRealmAuthenticator var5 = new org.jsecurity.authc.pam.ModularRealmAuthenticator(var4);
    org.jsecurity.authc.pam.AllSuccessfulModularAuthenticationStrategy var6 = new org.jsecurity.authc.pam.AllSuccessfulModularAuthenticationStrategy();
    var5.setModularAuthenticationStrategy((org.jsecurity.authc.pam.ModularAuthenticationStrategy)var6);
    org.jsecurity.authz.SimpleAuthorizationInfo var8 = new org.jsecurity.authz.SimpleAuthorizationInfo();
    var8.addStringPermission("hi!");
    java.io.InputStream var12 = org.jsecurity.util.ClassUtils.getResourceAsStream("");
    java.lang.Object[] var13 = new java.lang.Object[] { var12};
    java.util.List var14 = org.jsecurity.util.CollectionUtils.asList(var13);
    var8.addRoles((java.util.Collection)var14);
    var5.setAuthenticationListeners((java.util.Collection)var14);
    var0.setSessionListeners((java.util.Collection)var14);
    org.jsecurity.authc.pam.ModularRealmAuthenticator var18 = new org.jsecurity.authc.pam.ModularRealmAuthenticator();
    org.jsecurity.authz.permission.InvalidPermissionStringException var21 = new org.jsecurity.authz.permission.InvalidPermissionStringException("", "dd\uFFFD");
    org.jsecurity.JSecurityException var23 = new org.jsecurity.JSecurityException("");
    org.jsecurity.authc.SimpleAuthenticationInfo var25 = new org.jsecurity.authc.SimpleAuthenticationInfo((java.lang.Object)var21, (java.lang.Object)"", "org.jsecurity.authz.UnauthorizedException: org.jsecurity.session.ExpiredSessionException: ");
    org.jsecurity.subject.PrincipalCollection var26 = var25.getPrincipals();
    var18.onLogout(var26);
    var0.setAuthenticator((org.jsecurity.authc.Authenticator)var18);
    org.jsecurity.codec.CodecException var31 = new org.jsecurity.codec.CodecException("dd\uFFFD");
    org.jsecurity.authc.ConcurrentAccessException var32 = new org.jsecurity.authc.ConcurrentAccessException("org.jsecurity.authz.UnauthorizedException: org.jsecurity.session.ExpiredSessionException: ", (java.lang.Throwable)var31);
    org.jsecurity.subject.SimplePrincipalCollection var34 = new org.jsecurity.subject.SimplePrincipalCollection((java.lang.Object)var31, "");
    org.jsecurity.authc.pam.FirstSuccessfulAuthenticationStrategy var35 = new org.jsecurity.authc.pam.FirstSuccessfulAuthenticationStrategy();
    org.jsecurity.authz.UnauthorizedException var37 = new org.jsecurity.authz.UnauthorizedException("org.jsecurity.config.ConfigurationException: dd\uFFFD");
    java.lang.Throwable[] var38 = var37.getSuppressed();
    java.util.List var39 = org.jsecurity.util.CollectionUtils.asList((java.lang.Object[])var38);
    org.jsecurity.authc.UsernamePasswordToken var40 = new org.jsecurity.authc.UsernamePasswordToken();
    java.lang.String var41 = var40.getUsername();
    java.net.InetAddress var42 = var40.getInetAddress();
    org.jsecurity.authc.AuthenticationInfo var43 = var35.beforeAllAttempts((java.util.Collection)var39, (org.jsecurity.authc.AuthenticationToken)var40);
    org.jsecurity.session.UnknownSessionException var48 = new org.jsecurity.session.UnknownSessionException("dd\uFFFD", (java.io.Serializable)100.0f);
    org.jsecurity.subject.SubjectException var49 = new org.jsecurity.subject.SubjectException("dd\uFFFD", (java.lang.Throwable)var48);
    org.jsecurity.io.SerializationException var50 = new org.jsecurity.io.SerializationException("", (java.lang.Throwable)var49);
    java.lang.Throwable[] var51 = var49.getSuppressed();
    java.util.Set var52 = org.jsecurity.util.CollectionUtils.asSet((java.lang.Object[])var51);
    org.jsecurity.authc.SimpleAccount var53 = new org.jsecurity.authc.SimpleAccount((org.jsecurity.subject.PrincipalCollection)var34, (java.lang.Object)var39, var52);
    java.io.InputStream var55 = org.jsecurity.util.ClassUtils.getResourceAsStream("");
    java.lang.Object[] var56 = new java.lang.Object[] { var55};
    java.util.List var57 = org.jsecurity.util.CollectionUtils.asList(var56);
    org.jsecurity.authc.pam.ModularRealmAuthenticator var58 = new org.jsecurity.authc.pam.ModularRealmAuthenticator(var57);
    org.jsecurity.subject.SimplePrincipalCollection var60 = new org.jsecurity.subject.SimplePrincipalCollection((java.util.Collection)var57, "org.jsecurity.authz.UnauthorizedException: org.jsecurity.session.ExpiredSessionException: ");
    org.jsecurity.io.ResourceException var64 = new org.jsecurity.io.ResourceException("hi!");
    org.jsecurity.authc.UnknownAccountException var65 = new org.jsecurity.authc.UnknownAccountException((java.lang.Throwable)var64);
    org.jsecurity.session.StoppedSessionException var66 = new org.jsecurity.session.StoppedSessionException("dd\uFFFD", (java.io.Serializable)var64);
    org.jsecurity.session.UnknownSessionException var67 = new org.jsecurity.session.UnknownSessionException("org.jsecurity.authz.UnauthorizedException: org.jsecurity.session.ExpiredSessionException: ", (java.lang.Throwable)var64);
    boolean var68 = var60.equals((java.lang.Object)var64);
    var34.addAll((org.jsecurity.subject.PrincipalCollection)var60);
    org.jsecurity.session.UnknownSessionException var74 = new org.jsecurity.session.UnknownSessionException("dd\uFFFD", (java.io.Serializable)100.0f);
    org.jsecurity.subject.SubjectException var75 = new org.jsecurity.subject.SubjectException("dd\uFFFD", (java.lang.Throwable)var74);
    org.jsecurity.io.SerializationException var76 = new org.jsecurity.io.SerializationException("", (java.lang.Throwable)var75);
    java.lang.Throwable[] var77 = var75.getSuppressed();
    java.util.List var78 = org.jsecurity.util.CollectionUtils.asList((java.lang.Object[])var77);
    boolean var79 = var0.isPermittedAll((org.jsecurity.subject.PrincipalCollection)var34, (java.util.Collection)var78);
    org.jsecurity.subject.DelegatingSubject var80 = new org.jsecurity.subject.DelegatingSubject((org.jsecurity.mgt.SecurityManager)var0);
    var80.logout();
    java.lang.String[] var86 = org.jsecurity.util.StringUtils.split("org.jsecurity.config.ConfigurationException: dd\uFFFD", '4', '4', '4');
    boolean[] var87 = var80.isPermitted(var86);
    org.jsecurity.mgt.SecurityManager var88 = var80.getSecurityManager();
    org.jsecurity.session.Session var90 = var80.getSession(false);
    java.net.InetAddress var91 = var80.getInetAddress();
    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      var80.checkPermission("162be413-8160-455c-92e1-63fc287e0ac1");
      fail("Expected exception of type org.jsecurity.authz.UnauthenticatedException");
    } catch (org.jsecurity.authz.UnauthenticatedException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var2);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var3);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var4);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var12);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var13);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var14);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var26);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var38);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var39);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var41);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var42);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var43);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var51);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var52);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var55);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var56);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var57);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var68 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var77);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var78);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var79 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var86);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var87);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var88);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var90);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var91);

  }

  public void test121() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest5.test121");


    org.jsecurity.session.mgt.quartz.QuartzSessionValidationScheduler var0 = new org.jsecurity.session.mgt.quartz.QuartzSessionValidationScheduler();
    boolean var1 = var0.isEnabled();
    var0.enableSessionValidation();
    boolean var3 = var0.isEnabled();
    boolean var4 = var0.isEnabled();
    var0.setSessionValidationInterval(10L);
    var0.enableSessionValidation();
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var1 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var3 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var4 == false);

  }

  public void test122() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest5.test122");


    org.jsecurity.mgt.DefaultSecurityManager var0 = new org.jsecurity.mgt.DefaultSecurityManager();
    java.io.InputStream var2 = org.jsecurity.util.ClassUtils.getResourceAsStream("");
    java.lang.Object[] var3 = new java.lang.Object[] { var2};
    java.util.List var4 = org.jsecurity.util.CollectionUtils.asList(var3);
    org.jsecurity.authc.pam.ModularRealmAuthenticator var5 = new org.jsecurity.authc.pam.ModularRealmAuthenticator(var4);
    org.jsecurity.authc.pam.AllSuccessfulModularAuthenticationStrategy var6 = new org.jsecurity.authc.pam.AllSuccessfulModularAuthenticationStrategy();
    var5.setModularAuthenticationStrategy((org.jsecurity.authc.pam.ModularAuthenticationStrategy)var6);
    org.jsecurity.authz.SimpleAuthorizationInfo var8 = new org.jsecurity.authz.SimpleAuthorizationInfo();
    var8.addStringPermission("hi!");
    java.io.InputStream var12 = org.jsecurity.util.ClassUtils.getResourceAsStream("");
    java.lang.Object[] var13 = new java.lang.Object[] { var12};
    java.util.List var14 = org.jsecurity.util.CollectionUtils.asList(var13);
    var8.addRoles((java.util.Collection)var14);
    var5.setAuthenticationListeners((java.util.Collection)var14);
    var0.setSessionListeners((java.util.Collection)var14);
    org.jsecurity.authc.pam.ModularRealmAuthenticator var18 = new org.jsecurity.authc.pam.ModularRealmAuthenticator();
    org.jsecurity.authz.permission.InvalidPermissionStringException var21 = new org.jsecurity.authz.permission.InvalidPermissionStringException("", "dd\uFFFD");
    org.jsecurity.JSecurityException var23 = new org.jsecurity.JSecurityException("");
    org.jsecurity.authc.SimpleAuthenticationInfo var25 = new org.jsecurity.authc.SimpleAuthenticationInfo((java.lang.Object)var21, (java.lang.Object)"", "org.jsecurity.authz.UnauthorizedException: org.jsecurity.session.ExpiredSessionException: ");
    org.jsecurity.subject.PrincipalCollection var26 = var25.getPrincipals();
    var18.onLogout(var26);
    var0.setAuthenticator((org.jsecurity.authc.Authenticator)var18);
    org.jsecurity.codec.CodecException var31 = new org.jsecurity.codec.CodecException("dd\uFFFD");
    org.jsecurity.authc.ConcurrentAccessException var32 = new org.jsecurity.authc.ConcurrentAccessException("org.jsecurity.authz.UnauthorizedException: org.jsecurity.session.ExpiredSessionException: ", (java.lang.Throwable)var31);
    org.jsecurity.subject.SimplePrincipalCollection var34 = new org.jsecurity.subject.SimplePrincipalCollection((java.lang.Object)var31, "");
    org.jsecurity.authc.pam.FirstSuccessfulAuthenticationStrategy var35 = new org.jsecurity.authc.pam.FirstSuccessfulAuthenticationStrategy();
    org.jsecurity.authz.UnauthorizedException var37 = new org.jsecurity.authz.UnauthorizedException("org.jsecurity.config.ConfigurationException: dd\uFFFD");
    java.lang.Throwable[] var38 = var37.getSuppressed();
    java.util.List var39 = org.jsecurity.util.CollectionUtils.asList((java.lang.Object[])var38);
    org.jsecurity.authc.UsernamePasswordToken var40 = new org.jsecurity.authc.UsernamePasswordToken();
    java.lang.String var41 = var40.getUsername();
    java.net.InetAddress var42 = var40.getInetAddress();
    org.jsecurity.authc.AuthenticationInfo var43 = var35.beforeAllAttempts((java.util.Collection)var39, (org.jsecurity.authc.AuthenticationToken)var40);
    org.jsecurity.session.UnknownSessionException var48 = new org.jsecurity.session.UnknownSessionException("dd\uFFFD", (java.io.Serializable)100.0f);
    org.jsecurity.subject.SubjectException var49 = new org.jsecurity.subject.SubjectException("dd\uFFFD", (java.lang.Throwable)var48);
    org.jsecurity.io.SerializationException var50 = new org.jsecurity.io.SerializationException("", (java.lang.Throwable)var49);
    java.lang.Throwable[] var51 = var49.getSuppressed();
    java.util.Set var52 = org.jsecurity.util.CollectionUtils.asSet((java.lang.Object[])var51);
    org.jsecurity.authc.SimpleAccount var53 = new org.jsecurity.authc.SimpleAccount((org.jsecurity.subject.PrincipalCollection)var34, (java.lang.Object)var39, var52);
    java.io.InputStream var55 = org.jsecurity.util.ClassUtils.getResourceAsStream("");
    java.lang.Object[] var56 = new java.lang.Object[] { var55};
    java.util.List var57 = org.jsecurity.util.CollectionUtils.asList(var56);
    org.jsecurity.authc.pam.ModularRealmAuthenticator var58 = new org.jsecurity.authc.pam.ModularRealmAuthenticator(var57);
    org.jsecurity.subject.SimplePrincipalCollection var60 = new org.jsecurity.subject.SimplePrincipalCollection((java.util.Collection)var57, "org.jsecurity.authz.UnauthorizedException: org.jsecurity.session.ExpiredSessionException: ");
    org.jsecurity.io.ResourceException var64 = new org.jsecurity.io.ResourceException("hi!");
    org.jsecurity.authc.UnknownAccountException var65 = new org.jsecurity.authc.UnknownAccountException((java.lang.Throwable)var64);
    org.jsecurity.session.StoppedSessionException var66 = new org.jsecurity.session.StoppedSessionException("dd\uFFFD", (java.io.Serializable)var64);
    org.jsecurity.session.UnknownSessionException var67 = new org.jsecurity.session.UnknownSessionException("org.jsecurity.authz.UnauthorizedException: org.jsecurity.session.ExpiredSessionException: ", (java.lang.Throwable)var64);
    boolean var68 = var60.equals((java.lang.Object)var64);
    var34.addAll((org.jsecurity.subject.PrincipalCollection)var60);
    org.jsecurity.session.UnknownSessionException var74 = new org.jsecurity.session.UnknownSessionException("dd\uFFFD", (java.io.Serializable)100.0f);
    org.jsecurity.subject.SubjectException var75 = new org.jsecurity.subject.SubjectException("dd\uFFFD", (java.lang.Throwable)var74);
    org.jsecurity.io.SerializationException var76 = new org.jsecurity.io.SerializationException("", (java.lang.Throwable)var75);
    java.lang.Throwable[] var77 = var75.getSuppressed();
    java.util.List var78 = org.jsecurity.util.CollectionUtils.asList((java.lang.Object[])var77);
    boolean var79 = var0.isPermittedAll((org.jsecurity.subject.PrincipalCollection)var34, (java.util.Collection)var78);
    boolean var80 = var34.isEmpty();
    java.util.List var81 = var34.asList();
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var2);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var3);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var4);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var12);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var13);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var14);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var26);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var38);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var39);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var41);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var42);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var43);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var51);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var52);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var55);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var56);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var57);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var68 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var77);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var78);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var79 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var80 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var81);

  }

  public void test123() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest5.test123");


    org.jsecurity.config.ConfigurationException var1 = new org.jsecurity.config.ConfigurationException("1dba8f28-d35a-45ce-a478-d97233dbf5a9");

  }

  public void test124() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest5.test124");


    org.jsecurity.authc.AccountException var3 = new org.jsecurity.authc.AccountException("hi!");
    org.jsecurity.authc.IncorrectCredentialsException var4 = new org.jsecurity.authc.IncorrectCredentialsException((java.lang.Throwable)var3);
    org.jsecurity.session.ExpiredSessionException var5 = new org.jsecurity.session.ExpiredSessionException("org.jsecurity.authz.UnauthorizedException: org.jsecurity.session.ExpiredSessionException: ", (java.io.Serializable)var3);
    org.jsecurity.JSecurityException var6 = new org.jsecurity.JSecurityException("ff9f2014-649d-414b-8132-f4962e7ca4d7", (java.lang.Throwable)var3);

  }

  public void test125() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest5.test125");


    org.jsecurity.authz.SimpleAuthorizingAccount var0 = new org.jsecurity.authz.SimpleAuthorizingAccount();
    org.jsecurity.authz.SimpleAuthorizationInfo var1 = new org.jsecurity.authz.SimpleAuthorizationInfo();
    var1.addRole("a2b823b1e72eae2b727289df8a00a89df8a0bab6ad8a89c4c5c7a9b62a270000");
    org.jsecurity.authz.SimpleAuthorizationInfo var4 = new org.jsecurity.authz.SimpleAuthorizationInfo();
    var4.addRole("a2b823b1e72eae2b727289df8a00a89df8a0bab6ad8a89c4c5c7a9b62a270000");
    org.jsecurity.session.UnknownSessionException var11 = new org.jsecurity.session.UnknownSessionException("dd\uFFFD", (java.io.Serializable)100.0f);
    org.jsecurity.subject.SubjectException var12 = new org.jsecurity.subject.SubjectException("dd\uFFFD", (java.lang.Throwable)var11);
    org.jsecurity.io.SerializationException var13 = new org.jsecurity.io.SerializationException("", (java.lang.Throwable)var12);
    java.lang.Throwable[] var14 = var12.getSuppressed();
    java.util.Set var15 = org.jsecurity.util.CollectionUtils.asSet((java.lang.Object[])var14);
    var4.addRoles((java.util.Collection)var15);
    var1.setObjectPermissions(var15);
    var0.setSimpleRoles(var15);
    java.util.Set var19 = var0.getPermissions();
    org.jsecurity.authz.SimpleAuthorizationInfo var20 = new org.jsecurity.authz.SimpleAuthorizationInfo();
    var20.addRole("a2b823b1e72eae2b727289df8a00a89df8a0bab6ad8a89c4c5c7a9b62a270000");
    org.jsecurity.authz.SimpleAuthorizationInfo var23 = new org.jsecurity.authz.SimpleAuthorizationInfo();
    var23.addRole("a2b823b1e72eae2b727289df8a00a89df8a0bab6ad8a89c4c5c7a9b62a270000");
    org.jsecurity.session.UnknownSessionException var30 = new org.jsecurity.session.UnknownSessionException("dd\uFFFD", (java.io.Serializable)100.0f);
    org.jsecurity.subject.SubjectException var31 = new org.jsecurity.subject.SubjectException("dd\uFFFD", (java.lang.Throwable)var30);
    org.jsecurity.io.SerializationException var32 = new org.jsecurity.io.SerializationException("", (java.lang.Throwable)var31);
    java.lang.Throwable[] var33 = var31.getSuppressed();
    java.util.Set var34 = org.jsecurity.util.CollectionUtils.asSet((java.lang.Object[])var33);
    var23.addRoles((java.util.Collection)var34);
    var20.setObjectPermissions(var34);
    var0.checkRoles((java.util.Collection)var34);
    org.jsecurity.authz.SimpleRole var38 = new org.jsecurity.authz.SimpleRole();
    org.jsecurity.authz.SimpleAuthorizationInfo var39 = new org.jsecurity.authz.SimpleAuthorizationInfo();
    var39.addRole("a2b823b1e72eae2b727289df8a00a89df8a0bab6ad8a89c4c5c7a9b62a270000");
    org.jsecurity.session.UnknownSessionException var46 = new org.jsecurity.session.UnknownSessionException("dd\uFFFD", (java.io.Serializable)100.0f);
    org.jsecurity.subject.SubjectException var47 = new org.jsecurity.subject.SubjectException("dd\uFFFD", (java.lang.Throwable)var46);
    org.jsecurity.io.SerializationException var48 = new org.jsecurity.io.SerializationException("", (java.lang.Throwable)var47);
    java.lang.Throwable[] var49 = var47.getSuppressed();
    java.util.Set var50 = org.jsecurity.util.CollectionUtils.asSet((java.lang.Object[])var49);
    var39.addRoles((java.util.Collection)var50);
    var38.addAll((java.util.Collection)var50);
    java.lang.String var53 = var38.getName();
    var38.setName("");
    org.jsecurity.codec.CodecException var58 = new org.jsecurity.codec.CodecException("dd\uFFFD");
    org.jsecurity.authc.ConcurrentAccessException var59 = new org.jsecurity.authc.ConcurrentAccessException("org.jsecurity.authz.UnauthorizedException: org.jsecurity.session.ExpiredSessionException: ", (java.lang.Throwable)var58);
    org.jsecurity.subject.SimplePrincipalCollection var61 = new org.jsecurity.subject.SimplePrincipalCollection((java.lang.Object)var58, "");
    java.io.InputStream var63 = org.jsecurity.util.ClassUtils.getResourceAsStream("");
    java.lang.Object[] var64 = new java.lang.Object[] { var63};
    java.util.List var65 = org.jsecurity.util.CollectionUtils.asList(var64);
    org.jsecurity.authc.pam.ModularRealmAuthenticator var66 = new org.jsecurity.authc.pam.ModularRealmAuthenticator(var65);
    var61.addAll((java.util.Collection)var65, "\u0000\u0000");
    java.io.InputStream var70 = org.jsecurity.util.ClassUtils.getResourceAsStream("");
    java.lang.Object[] var71 = new java.lang.Object[] { var70};
    java.util.List var72 = org.jsecurity.util.CollectionUtils.asList(var71);
    org.jsecurity.authc.pam.ModularRealmAuthenticator var73 = new org.jsecurity.authc.pam.ModularRealmAuthenticator(var72);
    var61.addAll((java.util.Collection)var72, "\u0000\u0000");
    var38.addAll((java.util.Collection)var72);
    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      boolean[] var77 = var0.hasRoles(var72);
      fail("Expected exception of type java.lang.ClassCastException");
    } catch (java.lang.ClassCastException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var14);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var15);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var19);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var33);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var34);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var49);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var50);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var53);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var63);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var64);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var65);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var70);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var71);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var72);

  }

  public void test126() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest5.test126");


    org.jsecurity.cache.ehcache.EhCacheManager var0 = new org.jsecurity.cache.ehcache.EhCacheManager();
    var0.init();
    var0.setCacheManagerConfigFile("b6a77f71-73c4-466a-903e-72fc5968f9ac");
    var0.init();
    var0.destroy();

  }

  public void test127() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest5.test127");


    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      org.jsecurity.crypto.hash.Md5Hash var1 = org.jsecurity.crypto.hash.Md5Hash.fromHexString("3900277b-9328-4900-8254-f97def7b63e8");
      fail("Expected exception of type java.lang.IllegalArgumentException");
    } catch (java.lang.IllegalArgumentException e) {
      // Expected exception.
    }

  }

  public void test128() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest5.test128");


    org.jsecurity.authz.SimpleAuthorizingAccount var0 = new org.jsecurity.authz.SimpleAuthorizingAccount();
    java.util.Set var1 = var0.getSimpleRoles();
    org.jsecurity.authz.SimpleRole var2 = new org.jsecurity.authz.SimpleRole();
    org.jsecurity.authz.SimpleAuthorizationInfo var3 = new org.jsecurity.authz.SimpleAuthorizationInfo();
    var3.addRole("a2b823b1e72eae2b727289df8a00a89df8a0bab6ad8a89c4c5c7a9b62a270000");
    org.jsecurity.session.UnknownSessionException var10 = new org.jsecurity.session.UnknownSessionException("dd\uFFFD", (java.io.Serializable)100.0f);
    org.jsecurity.subject.SubjectException var11 = new org.jsecurity.subject.SubjectException("dd\uFFFD", (java.lang.Throwable)var10);
    org.jsecurity.io.SerializationException var12 = new org.jsecurity.io.SerializationException("", (java.lang.Throwable)var11);
    java.lang.Throwable[] var13 = var11.getSuppressed();
    java.util.Set var14 = org.jsecurity.util.CollectionUtils.asSet((java.lang.Object[])var13);
    var3.addRoles((java.util.Collection)var14);
    var2.addAll((java.util.Collection)var14);
    org.jsecurity.authz.SimpleRole var18 = new org.jsecurity.authz.SimpleRole();
    org.jsecurity.authz.permission.WildcardPermission var21 = new org.jsecurity.authz.permission.WildcardPermission("hi!", false);
    boolean var22 = var18.isPermitted((org.jsecurity.authz.Permission)var21);
    org.jsecurity.session.InvalidSessionException var23 = new org.jsecurity.session.InvalidSessionException("org.jsecurity.config.ConfigurationException: dd\uFFFD", (java.io.Serializable)var21);
    org.jsecurity.authz.SimpleRole var24 = new org.jsecurity.authz.SimpleRole();
    org.jsecurity.authz.permission.WildcardPermission var27 = new org.jsecurity.authz.permission.WildcardPermission("hi!", false);
    boolean var28 = var24.isPermitted((org.jsecurity.authz.Permission)var27);
    boolean var29 = var21.implies((org.jsecurity.authz.Permission)var27);
    boolean var30 = var2.isPermitted((org.jsecurity.authz.Permission)var27);
    boolean var31 = var0.isPermitted((org.jsecurity.authz.Permission)var27);
    org.jsecurity.codec.CodecException var34 = new org.jsecurity.codec.CodecException("dd\uFFFD");
    org.jsecurity.authc.ConcurrentAccessException var35 = new org.jsecurity.authc.ConcurrentAccessException("org.jsecurity.authz.UnauthorizedException: org.jsecurity.session.ExpiredSessionException: ", (java.lang.Throwable)var34);
    org.jsecurity.subject.SimplePrincipalCollection var37 = new org.jsecurity.subject.SimplePrincipalCollection((java.lang.Object)var34, "");
    org.jsecurity.authc.pam.FirstSuccessfulAuthenticationStrategy var38 = new org.jsecurity.authc.pam.FirstSuccessfulAuthenticationStrategy();
    org.jsecurity.authz.UnauthorizedException var40 = new org.jsecurity.authz.UnauthorizedException("org.jsecurity.config.ConfigurationException: dd\uFFFD");
    java.lang.Throwable[] var41 = var40.getSuppressed();
    java.util.List var42 = org.jsecurity.util.CollectionUtils.asList((java.lang.Object[])var41);
    org.jsecurity.authc.UsernamePasswordToken var43 = new org.jsecurity.authc.UsernamePasswordToken();
    java.lang.String var44 = var43.getUsername();
    java.net.InetAddress var45 = var43.getInetAddress();
    org.jsecurity.authc.AuthenticationInfo var46 = var38.beforeAllAttempts((java.util.Collection)var42, (org.jsecurity.authc.AuthenticationToken)var43);
    org.jsecurity.session.UnknownSessionException var51 = new org.jsecurity.session.UnknownSessionException("dd\uFFFD", (java.io.Serializable)100.0f);
    org.jsecurity.subject.SubjectException var52 = new org.jsecurity.subject.SubjectException("dd\uFFFD", (java.lang.Throwable)var51);
    org.jsecurity.io.SerializationException var53 = new org.jsecurity.io.SerializationException("", (java.lang.Throwable)var52);
    java.lang.Throwable[] var54 = var52.getSuppressed();
    java.util.Set var55 = org.jsecurity.util.CollectionUtils.asSet((java.lang.Object[])var54);
    org.jsecurity.authc.SimpleAccount var56 = new org.jsecurity.authc.SimpleAccount((org.jsecurity.subject.PrincipalCollection)var37, (java.lang.Object)var42, var55);
    var56.addStringPermission("org.jsecurity.config.ConfigurationException: dd\uFFFD");
    org.jsecurity.authz.SimpleRole var59 = new org.jsecurity.authz.SimpleRole();
    org.jsecurity.authz.permission.WildcardPermission var62 = new org.jsecurity.authz.permission.WildcardPermission("hi!", false);
    boolean var63 = var59.isPermitted((org.jsecurity.authz.Permission)var62);
    var56.addObjectPermission((org.jsecurity.authz.Permission)var62);
    boolean var65 = var27.implies((org.jsecurity.authz.Permission)var62);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var1);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var13);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var14);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var22 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var28 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var29 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var30 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var31 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var41);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var42);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var44);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var45);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var46);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var54);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var55);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var63 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var65 == true);

  }

  public void test129() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest5.test129");


    org.jsecurity.subject.SubjectException var2 = new org.jsecurity.subject.SubjectException("org.jsecurity.authc.UsernamePasswordToken - \u0000\u0000, rememberMe=false");
    org.jsecurity.authz.UnauthenticatedException var6 = new org.jsecurity.authz.UnauthenticatedException();
    org.jsecurity.config.UnresolveableReferenceException var7 = new org.jsecurity.config.UnresolveableReferenceException("", (java.lang.Throwable)var6);
    org.jsecurity.authz.HostUnauthorizedException var8 = new org.jsecurity.authz.HostUnauthorizedException("org.jsecurity.config.ConfigurationException: dd\uFFFD", (java.lang.Throwable)var7);
    org.jsecurity.authc.UnknownAccountException var9 = new org.jsecurity.authc.UnknownAccountException("hi!", (java.lang.Throwable)var8);
    org.jsecurity.session.ExpiredSessionException var10 = new org.jsecurity.session.ExpiredSessionException("215ab769-9cb8-4898-aeea-426529d1962a", (java.lang.Throwable)var2, (java.io.Serializable)var8);
    org.jsecurity.authc.AuthenticationException var11 = new org.jsecurity.authc.AuthenticationException((java.lang.Throwable)var2);

  }

  public void test130() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest5.test130");


    java.lang.String var1 = org.jsecurity.util.StringUtils.clean("79df98fe-2d02-4c77-adf4-3572e56a5f9a");
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var1 + "' != '" + "79df98fe-2d02-4c77-adf4-3572e56a5f9a"+ "'", var1.equals("79df98fe-2d02-4c77-adf4-3572e56a5f9a"));

  }

  public void test131() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest5.test131");


    org.jsecurity.realm.jdbc.JdbcRealm var0 = new org.jsecurity.realm.jdbc.JdbcRealm();
    var0.setPermissionsQuery("org.jsecurity.realm.text.TextConfigurationRealm_445");
    var0.setUserRolesQuery("6464ff");
    java.lang.Class var5 = var0.getAuthenticationTokenClass();
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var5);

  }

  public void test132() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest5.test132");


    org.jsecurity.realm.activedirectory.ActiveDirectoryRealm var0 = new org.jsecurity.realm.activedirectory.ActiveDirectoryRealm();
    org.jsecurity.authc.credential.Sha256CredentialsMatcher var1 = new org.jsecurity.authc.credential.Sha256CredentialsMatcher();
    var0.setCredentialsMatcher((org.jsecurity.authc.credential.CredentialsMatcher)var1);
    java.lang.String var3 = var0.getAuthorizationCacheName();
    var0.setUrl("hi!");
    org.jsecurity.realm.ldap.DefaultLdapContextFactory var6 = new org.jsecurity.realm.ldap.DefaultLdapContextFactory();
    var0.setLdapContextFactory((org.jsecurity.realm.ldap.LdapContextFactory)var6);
    var6.setAuthentication("org.jsecurity.authz.UnauthorizedException: org.jsecurity.session.ExpiredSessionException: ");
    var6.setSystemUsername("org.jsecurity.config.ConfigurationException: dd\uFFFD");
    var6.setSystemPassword("orgjsecurityauthcCredentialsException783ccd3148a842dd890fdf885a7baafAA==");
    var6.setPrincipalSuffix("org.jsecurity.authz.UnauthorizedException: org.jsecurity.session.ExpiredSessionException: ");
    var6.setUrl("75c873c8-19df-476a-b82e-72a1eddf7e4b");
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var3);

  }

  public void test133() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest5.test133");


    org.jsecurity.mgt.DefaultSecurityManager var0 = new org.jsecurity.mgt.DefaultSecurityManager();
    java.io.InputStream var2 = org.jsecurity.util.ClassUtils.getResourceAsStream("");
    java.lang.Object[] var3 = new java.lang.Object[] { var2};
    java.util.List var4 = org.jsecurity.util.CollectionUtils.asList(var3);
    org.jsecurity.authc.pam.ModularRealmAuthenticator var5 = new org.jsecurity.authc.pam.ModularRealmAuthenticator(var4);
    org.jsecurity.authc.pam.AllSuccessfulModularAuthenticationStrategy var6 = new org.jsecurity.authc.pam.AllSuccessfulModularAuthenticationStrategy();
    var5.setModularAuthenticationStrategy((org.jsecurity.authc.pam.ModularAuthenticationStrategy)var6);
    org.jsecurity.authz.SimpleAuthorizationInfo var8 = new org.jsecurity.authz.SimpleAuthorizationInfo();
    var8.addStringPermission("hi!");
    java.io.InputStream var12 = org.jsecurity.util.ClassUtils.getResourceAsStream("");
    java.lang.Object[] var13 = new java.lang.Object[] { var12};
    java.util.List var14 = org.jsecurity.util.CollectionUtils.asList(var13);
    var8.addRoles((java.util.Collection)var14);
    var5.setAuthenticationListeners((java.util.Collection)var14);
    var0.setSessionListeners((java.util.Collection)var14);
    org.jsecurity.realm.text.TextConfigurationRealm var18 = new org.jsecurity.realm.text.TextConfigurationRealm();
    java.io.InputStream var20 = org.jsecurity.util.ClassUtils.getResourceAsStream("");
    java.lang.Object[] var21 = new java.lang.Object[] { var20};
    java.util.List var22 = org.jsecurity.util.CollectionUtils.asList(var21);
    org.jsecurity.authc.pam.ModularRealmAuthenticator var23 = new org.jsecurity.authc.pam.ModularRealmAuthenticator(var22);
    org.jsecurity.subject.SimplePrincipalCollection var25 = new org.jsecurity.subject.SimplePrincipalCollection((java.util.Collection)var22, "org.jsecurity.authz.UnauthorizedException: org.jsecurity.session.ExpiredSessionException: ");
    org.jsecurity.session.UnknownSessionException var30 = new org.jsecurity.session.UnknownSessionException("dd\uFFFD", (java.io.Serializable)100.0f);
    org.jsecurity.session.SessionException var32 = new org.jsecurity.session.SessionException("dd\uFFFD", (java.lang.Throwable)var30, (java.io.Serializable)0);
    org.jsecurity.session.SessionException var33 = new org.jsecurity.session.SessionException("dd\uFFFD", (java.lang.Throwable)var30);
    var25.add((java.lang.Object)var33, "org.jsecurity.config.ConfigurationException: dd\uFFFD");
    var18.onLogout((org.jsecurity.subject.PrincipalCollection)var25);
    org.jsecurity.authc.pam.FirstSuccessfulAuthenticationStrategy var37 = new org.jsecurity.authc.pam.FirstSuccessfulAuthenticationStrategy();
    org.jsecurity.authz.UnauthorizedException var39 = new org.jsecurity.authz.UnauthorizedException("org.jsecurity.config.ConfigurationException: dd\uFFFD");
    java.lang.Throwable[] var40 = var39.getSuppressed();
    java.util.List var41 = org.jsecurity.util.CollectionUtils.asList((java.lang.Object[])var40);
    org.jsecurity.authc.UsernamePasswordToken var42 = new org.jsecurity.authc.UsernamePasswordToken();
    java.lang.String var43 = var42.getUsername();
    java.net.InetAddress var44 = var42.getInetAddress();
    org.jsecurity.authc.AuthenticationInfo var45 = var37.beforeAllAttempts((java.util.Collection)var41, (org.jsecurity.authc.AuthenticationToken)var42);
    boolean[] var46 = var0.hasRoles((org.jsecurity.subject.PrincipalCollection)var25, var41);
    boolean var47 = var25.isEmpty();
    var25.clear();
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var2);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var3);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var4);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var12);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var13);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var14);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var20);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var21);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var22);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var40);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var41);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var43);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var44);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var45);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var46);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var47 == false);

  }

  public void test134() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest5.test134");


    java.io.InputStream var2 = org.jsecurity.util.ClassUtils.getResourceAsStream("");
    java.lang.Object[] var3 = new java.lang.Object[] { var2};
    java.util.List var4 = org.jsecurity.util.CollectionUtils.asList(var3);
    org.jsecurity.authc.pam.ModularRealmAuthenticator var5 = new org.jsecurity.authc.pam.ModularRealmAuthenticator(var4);
    org.jsecurity.authc.pam.AllSuccessfulModularAuthenticationStrategy var6 = new org.jsecurity.authc.pam.AllSuccessfulModularAuthenticationStrategy();
    var5.setModularAuthenticationStrategy((org.jsecurity.authc.pam.ModularAuthenticationStrategy)var6);
    org.jsecurity.authz.SimpleAuthorizationInfo var8 = new org.jsecurity.authz.SimpleAuthorizationInfo();
    var8.addStringPermission("hi!");
    java.io.InputStream var12 = org.jsecurity.util.ClassUtils.getResourceAsStream("");
    java.lang.Object[] var13 = new java.lang.Object[] { var12};
    java.util.List var14 = org.jsecurity.util.CollectionUtils.asList(var13);
    var8.addRoles((java.util.Collection)var14);
    var5.setAuthenticationListeners((java.util.Collection)var14);
    org.jsecurity.realm.activedirectory.ActiveDirectoryRealm var17 = new org.jsecurity.realm.activedirectory.ActiveDirectoryRealm();
    var17.setPrincipalSuffix("");
    var5.setRealm((org.jsecurity.realm.Realm)var17);
    org.jsecurity.authc.pam.FirstSuccessfulAuthenticationStrategy var21 = new org.jsecurity.authc.pam.FirstSuccessfulAuthenticationStrategy();
    org.jsecurity.authz.UnauthorizedException var23 = new org.jsecurity.authz.UnauthorizedException("org.jsecurity.config.ConfigurationException: dd\uFFFD");
    java.lang.Throwable[] var24 = var23.getSuppressed();
    java.util.List var25 = org.jsecurity.util.CollectionUtils.asList((java.lang.Object[])var24);
    org.jsecurity.authc.UsernamePasswordToken var26 = new org.jsecurity.authc.UsernamePasswordToken();
    java.lang.String var27 = var26.getUsername();
    java.net.InetAddress var28 = var26.getInetAddress();
    org.jsecurity.authc.AuthenticationInfo var29 = var21.beforeAllAttempts((java.util.Collection)var25, (org.jsecurity.authc.AuthenticationToken)var26);
    var5.setModularAuthenticationStrategy((org.jsecurity.authc.pam.ModularAuthenticationStrategy)var21);
    org.jsecurity.codec.CodecException var33 = new org.jsecurity.codec.CodecException("dd\uFFFD");
    org.jsecurity.authc.ConcurrentAccessException var34 = new org.jsecurity.authc.ConcurrentAccessException("org.jsecurity.authz.UnauthorizedException: org.jsecurity.session.ExpiredSessionException: ", (java.lang.Throwable)var33);
    org.jsecurity.subject.SimplePrincipalCollection var36 = new org.jsecurity.subject.SimplePrincipalCollection((java.lang.Object)var33, "");
    org.jsecurity.authc.pam.FirstSuccessfulAuthenticationStrategy var37 = new org.jsecurity.authc.pam.FirstSuccessfulAuthenticationStrategy();
    org.jsecurity.authz.UnauthorizedException var39 = new org.jsecurity.authz.UnauthorizedException("org.jsecurity.config.ConfigurationException: dd\uFFFD");
    java.lang.Throwable[] var40 = var39.getSuppressed();
    java.util.List var41 = org.jsecurity.util.CollectionUtils.asList((java.lang.Object[])var40);
    org.jsecurity.authc.UsernamePasswordToken var42 = new org.jsecurity.authc.UsernamePasswordToken();
    java.lang.String var43 = var42.getUsername();
    java.net.InetAddress var44 = var42.getInetAddress();
    org.jsecurity.authc.AuthenticationInfo var45 = var37.beforeAllAttempts((java.util.Collection)var41, (org.jsecurity.authc.AuthenticationToken)var42);
    org.jsecurity.session.UnknownSessionException var50 = new org.jsecurity.session.UnknownSessionException("dd\uFFFD", (java.io.Serializable)100.0f);
    org.jsecurity.subject.SubjectException var51 = new org.jsecurity.subject.SubjectException("dd\uFFFD", (java.lang.Throwable)var50);
    org.jsecurity.io.SerializationException var52 = new org.jsecurity.io.SerializationException("", (java.lang.Throwable)var51);
    java.lang.Throwable[] var53 = var51.getSuppressed();
    java.util.Set var54 = org.jsecurity.util.CollectionUtils.asSet((java.lang.Object[])var53);
    org.jsecurity.authc.SimpleAccount var55 = new org.jsecurity.authc.SimpleAccount((org.jsecurity.subject.PrincipalCollection)var36, (java.lang.Object)var41, var54);
    org.jsecurity.authc.pam.AllSuccessfulModularAuthenticationStrategy var56 = new org.jsecurity.authc.pam.AllSuccessfulModularAuthenticationStrategy();
    char[] var58 = new char[] { };
    org.jsecurity.authc.UsernamePasswordToken var60 = new org.jsecurity.authc.UsernamePasswordToken("hi!", var58, true);
    org.jsecurity.authc.SimpleAccount var61 = new org.jsecurity.authc.SimpleAccount();
    var61.setCredentialsExpired(false);
    boolean var64 = var61.isLocked();
    org.jsecurity.authc.AuthenticationInfo var65 = var56.afterAllAttempts((org.jsecurity.authc.AuthenticationToken)var60, (org.jsecurity.authc.AuthenticationInfo)var61);
    char[] var68 = new char[] { };
    org.jsecurity.authc.UsernamePasswordToken var70 = new org.jsecurity.authc.UsernamePasswordToken("hi!", var68, true);
    org.jsecurity.authc.UsernamePasswordToken var71 = new org.jsecurity.authc.UsernamePasswordToken("\u0000\u0000", var68);
    var60.setPassword(var68);
    org.jsecurity.authc.AuthenticationInfo var73 = var21.beforeAllAttempts((java.util.Collection)var41, (org.jsecurity.authc.AuthenticationToken)var60);
    char[] var74 = var60.getPassword();
    var60.setUsername("\uFFFD\uFFFD\uFFFDq\uFFFD\uFFFD\uFFFD\u01BC\uFFFDg]\uFFFD\uFFFD\u001Fu\uFFFD<\uFFFD\uFFFDi\uFFFD\uFFFD");
    char[] var78 = new char[] { };
    org.jsecurity.authc.UsernamePasswordToken var80 = new org.jsecurity.authc.UsernamePasswordToken("hi!", var78, true);
    byte[] var81 = org.jsecurity.codec.Hex.decode(var78);
    byte[] var82 = org.jsecurity.codec.Hex.decode(var78);
    byte[] var83 = org.jsecurity.codec.Base64.encode(var82);
    char[] var84 = org.jsecurity.codec.Hex.encode(var82);
    char[] var85 = org.jsecurity.codec.CodecSupport.toChars(var82);
    var60.setPassword(var85);
    org.jsecurity.authc.UsernamePasswordToken var87 = new org.jsecurity.authc.UsernamePasswordToken("e23cc964-5ec8-4116-95c0-aa96771b692b", var85);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var2);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var3);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var4);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var12);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var13);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var14);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var24);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var25);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var27);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var28);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var29);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var40);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var41);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var43);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var44);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var45);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var53);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var54);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var58);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var64 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var65);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var68);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var73);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var74);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var78);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var81);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var82);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var83);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var84);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var85);

  }

  public void test135() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest5.test135");


    org.jsecurity.session.UnknownSessionException var6 = new org.jsecurity.session.UnknownSessionException("dd\uFFFD", (java.io.Serializable)100.0f);
    org.jsecurity.subject.SubjectException var7 = new org.jsecurity.subject.SubjectException("dd\uFFFD", (java.lang.Throwable)var6);
    org.jsecurity.authc.AccountException var8 = new org.jsecurity.authc.AccountException("hi!", (java.lang.Throwable)var7);
    org.jsecurity.session.StoppedSessionException var9 = new org.jsecurity.session.StoppedSessionException((java.lang.Throwable)var8);
    org.jsecurity.subject.SubjectException var10 = new org.jsecurity.subject.SubjectException((java.lang.Throwable)var9);
    org.jsecurity.io.ResourceException var11 = new org.jsecurity.io.ResourceException("7aaa0eff-7052-4953-955a-cd6cddd8c21c", (java.lang.Throwable)var9);
    org.jsecurity.subject.InvalidSubjectException var12 = new org.jsecurity.subject.InvalidSubjectException("\uFFFD\uFFFD\u0000", (java.lang.Throwable)var11);

  }

  public void test136() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest5.test136");


    org.jsecurity.subject.InvalidSubjectException var4 = new org.jsecurity.subject.InvalidSubjectException("dd\uFFFD");
    org.jsecurity.session.ExpiredSessionException var5 = new org.jsecurity.session.ExpiredSessionException("org.jsecurity.config.ConfigurationException: dd\uFFFD", (java.io.Serializable)var4);
    org.jsecurity.session.ExpiredSessionException var6 = new org.jsecurity.session.ExpiredSessionException("eb8eb80000", (java.lang.Throwable)var5);
    org.jsecurity.config.ConfigurationException var7 = new org.jsecurity.config.ConfigurationException("org.jsecurity.realm.SimpleAccountRealm-284-authorization", (java.lang.Throwable)var5);

  }

  public void test137() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest5.test137");


    org.jsecurity.realm.text.TextConfigurationRealm var1 = new org.jsecurity.realm.text.TextConfigurationRealm();
    java.io.InputStream var3 = org.jsecurity.util.ClassUtils.getResourceAsStream("");
    java.lang.Object[] var4 = new java.lang.Object[] { var3};
    java.util.List var5 = org.jsecurity.util.CollectionUtils.asList(var4);
    org.jsecurity.authc.pam.ModularRealmAuthenticator var6 = new org.jsecurity.authc.pam.ModularRealmAuthenticator(var5);
    org.jsecurity.subject.SimplePrincipalCollection var8 = new org.jsecurity.subject.SimplePrincipalCollection((java.util.Collection)var5, "org.jsecurity.authz.UnauthorizedException: org.jsecurity.session.ExpiredSessionException: ");
    org.jsecurity.session.UnknownSessionException var13 = new org.jsecurity.session.UnknownSessionException("dd\uFFFD", (java.io.Serializable)100.0f);
    org.jsecurity.session.SessionException var15 = new org.jsecurity.session.SessionException("dd\uFFFD", (java.lang.Throwable)var13, (java.io.Serializable)0);
    org.jsecurity.session.SessionException var16 = new org.jsecurity.session.SessionException("dd\uFFFD", (java.lang.Throwable)var13);
    var8.add((java.lang.Object)var16, "org.jsecurity.config.ConfigurationException: dd\uFFFD");
    var1.onLogout((org.jsecurity.subject.PrincipalCollection)var8);
    org.jsecurity.authc.ExpiredCredentialsException var21 = new org.jsecurity.authc.ExpiredCredentialsException();
    org.jsecurity.session.ExpiredSessionException var22 = new org.jsecurity.session.ExpiredSessionException("", (java.lang.Throwable)var21);
    java.lang.Throwable[] var23 = var22.getSuppressed();
    org.jsecurity.io.ResourceException var24 = new org.jsecurity.io.ResourceException((java.lang.Throwable)var22);
    org.jsecurity.authc.SimpleAuthenticationInfo var25 = new org.jsecurity.authc.SimpleAuthenticationInfo((org.jsecurity.subject.PrincipalCollection)var8, (java.lang.Object)var22);
    java.util.Collection var27 = var8.fromRealm("a8df74b8-0f68-49c4-b77d-09857e171e23");
    java.util.List var28 = var8.asList();
    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      org.jsecurity.crypto.hash.Sha512Hash var29 = new org.jsecurity.crypto.hash.Sha512Hash((java.lang.Object)"org.jsecurity.realm.SimpleAccountRealm-370-authorization", (java.lang.Object)var8);
      fail("Expected exception of type org.jsecurity.codec.CodecException");
    } catch (org.jsecurity.codec.CodecException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var3);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var4);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var5);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var23);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var27);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var28);

  }

  public void test138() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest5.test138");


    org.jsecurity.subject.InvalidSubjectException var3 = new org.jsecurity.subject.InvalidSubjectException("");
    org.jsecurity.authc.CredentialsException var4 = new org.jsecurity.authc.CredentialsException("org.jsecurity.authz.UnauthorizedException: org.jsecurity.session.ExpiredSessionException: ", (java.lang.Throwable)var3);
    org.jsecurity.util.UnknownClassException var5 = new org.jsecurity.util.UnknownClassException("3c0f8cd0-07d8-4de6-8030-3e8afad05e07", (java.lang.Throwable)var3);
    org.jsecurity.authc.ExpiredCredentialsException var6 = new org.jsecurity.authc.ExpiredCredentialsException((java.lang.Throwable)var3);
    org.jsecurity.authz.HostUnauthorizedException var7 = new org.jsecurity.authz.HostUnauthorizedException((java.lang.Throwable)var6);

  }

  public void test139() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest5.test139");


    org.jsecurity.authz.permission.WildcardPermission var2 = new org.jsecurity.authz.permission.WildcardPermission("783ccd31-48a8-42dd-890f-df885a7baaff", false);
    org.jsecurity.authz.SimpleRole var3 = new org.jsecurity.authz.SimpleRole();
    org.jsecurity.authz.SimpleAuthorizationInfo var4 = new org.jsecurity.authz.SimpleAuthorizationInfo();
    var4.addRole("a2b823b1e72eae2b727289df8a00a89df8a0bab6ad8a89c4c5c7a9b62a270000");
    org.jsecurity.session.UnknownSessionException var11 = new org.jsecurity.session.UnknownSessionException("dd\uFFFD", (java.io.Serializable)100.0f);
    org.jsecurity.subject.SubjectException var12 = new org.jsecurity.subject.SubjectException("dd\uFFFD", (java.lang.Throwable)var11);
    org.jsecurity.io.SerializationException var13 = new org.jsecurity.io.SerializationException("", (java.lang.Throwable)var12);
    java.lang.Throwable[] var14 = var12.getSuppressed();
    java.util.Set var15 = org.jsecurity.util.CollectionUtils.asSet((java.lang.Object[])var14);
    var4.addRoles((java.util.Collection)var15);
    var3.addAll((java.util.Collection)var15);
    org.jsecurity.authz.SimpleRole var18 = new org.jsecurity.authz.SimpleRole();
    org.jsecurity.authz.SimpleAuthorizationInfo var19 = new org.jsecurity.authz.SimpleAuthorizationInfo();
    var19.addRole("a2b823b1e72eae2b727289df8a00a89df8a0bab6ad8a89c4c5c7a9b62a270000");
    org.jsecurity.session.UnknownSessionException var26 = new org.jsecurity.session.UnknownSessionException("dd\uFFFD", (java.io.Serializable)100.0f);
    org.jsecurity.subject.SubjectException var27 = new org.jsecurity.subject.SubjectException("dd\uFFFD", (java.lang.Throwable)var26);
    org.jsecurity.io.SerializationException var28 = new org.jsecurity.io.SerializationException("", (java.lang.Throwable)var27);
    java.lang.Throwable[] var29 = var27.getSuppressed();
    java.util.Set var30 = org.jsecurity.util.CollectionUtils.asSet((java.lang.Object[])var29);
    var19.addRoles((java.util.Collection)var30);
    var18.addAll((java.util.Collection)var30);
    java.lang.String var33 = var18.getName();
    org.jsecurity.authz.permission.WildcardPermission var36 = new org.jsecurity.authz.permission.WildcardPermission("hi!", false);
    var18.add((org.jsecurity.authz.Permission)var36);
    var3.add((org.jsecurity.authz.Permission)var36);
    org.jsecurity.authz.SimpleAuthorizationInfo var40 = new org.jsecurity.authz.SimpleAuthorizationInfo();
    var40.addRole("a2b823b1e72eae2b727289df8a00a89df8a0bab6ad8a89c4c5c7a9b62a270000");
    org.jsecurity.session.UnknownSessionException var47 = new org.jsecurity.session.UnknownSessionException("dd\uFFFD", (java.io.Serializable)100.0f);
    org.jsecurity.subject.SubjectException var48 = new org.jsecurity.subject.SubjectException("dd\uFFFD", (java.lang.Throwable)var47);
    org.jsecurity.io.SerializationException var49 = new org.jsecurity.io.SerializationException("", (java.lang.Throwable)var48);
    java.lang.Throwable[] var50 = var48.getSuppressed();
    java.util.Set var51 = org.jsecurity.util.CollectionUtils.asSet((java.lang.Object[])var50);
    var40.addRoles((java.util.Collection)var51);
    org.jsecurity.authz.SimpleRole var53 = new org.jsecurity.authz.SimpleRole("dd\uFFFD", var51);
    var3.setPermissions(var51);
    org.jsecurity.authz.SimpleRole var56 = new org.jsecurity.authz.SimpleRole();
    org.jsecurity.authz.permission.WildcardPermission var59 = new org.jsecurity.authz.permission.WildcardPermission("hi!", false);
    boolean var60 = var56.isPermitted((org.jsecurity.authz.Permission)var59);
    org.jsecurity.session.InvalidSessionException var61 = new org.jsecurity.session.InvalidSessionException("org.jsecurity.config.ConfigurationException: dd\uFFFD", (java.io.Serializable)var59);
    org.jsecurity.authz.SimpleRole var62 = new org.jsecurity.authz.SimpleRole();
    org.jsecurity.authz.permission.WildcardPermission var65 = new org.jsecurity.authz.permission.WildcardPermission("hi!", false);
    boolean var66 = var62.isPermitted((org.jsecurity.authz.Permission)var65);
    boolean var67 = var59.implies((org.jsecurity.authz.Permission)var65);
    boolean var68 = var3.isPermitted((org.jsecurity.authz.Permission)var59);
    boolean var69 = var2.implies((org.jsecurity.authz.Permission)var59);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var14);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var15);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var29);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var30);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var33);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var50);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var51);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var60 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var66 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var67 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var68 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var69 == false);

  }

  public void test140() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest5.test140");


    org.jsecurity.session.mgt.SimpleSession var0 = new org.jsecurity.session.mgt.SimpleSession();
    var0.setTimeout((-1L));
    org.jsecurity.session.mgt.SimpleSession var3 = new org.jsecurity.session.mgt.SimpleSession();
    java.util.Date var4 = var3.getLastAccessTime();
    var0.setLastAccessTime(var4);
    java.net.InetAddress var6 = var0.getHostAddress();
    org.jsecurity.authz.HostUnauthorizedException var7 = new org.jsecurity.authz.HostUnauthorizedException(var6);
    org.jsecurity.authz.HostUnauthorizedException var8 = new org.jsecurity.authz.HostUnauthorizedException(var6);
    org.jsecurity.session.mgt.SimpleSession var9 = new org.jsecurity.session.mgt.SimpleSession(var6);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var4);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var6);

  }

  public void test141() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest5.test141");


    org.jsecurity.io.ResourceException var5 = new org.jsecurity.io.ResourceException("hi!");
    org.jsecurity.authc.UnknownAccountException var6 = new org.jsecurity.authc.UnknownAccountException((java.lang.Throwable)var5);
    org.jsecurity.session.StoppedSessionException var7 = new org.jsecurity.session.StoppedSessionException("dd\uFFFD", (java.io.Serializable)var5);
    org.jsecurity.authc.ExcessiveAttemptsException var8 = new org.jsecurity.authc.ExcessiveAttemptsException("b6a77f71-73c4-466a-903e-72fc5968f9ac", (java.lang.Throwable)var7);
    org.jsecurity.util.UnavailableConstructorException var9 = new org.jsecurity.util.UnavailableConstructorException("7aaa0eff-7052-4953-955a-cd6cddd8c21c", (java.lang.Throwable)var8);
    org.jsecurity.authc.CredentialsException var10 = new org.jsecurity.authc.CredentialsException("e9ac4465-dd5e-474c-8732-cba8bfe3cdfe", (java.lang.Throwable)var8);

  }

  public void test142() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest5.test142");


    org.jsecurity.codec.CodecException var1 = new org.jsecurity.codec.CodecException("3d661123-e4e7-4553-874f-718b6716094f");

  }

  public void test143() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest5.test143");


    org.jsecurity.authz.SimpleRole var0 = new org.jsecurity.authz.SimpleRole();
    org.jsecurity.authz.SimpleAuthorizationInfo var1 = new org.jsecurity.authz.SimpleAuthorizationInfo();
    var1.addRole("a2b823b1e72eae2b727289df8a00a89df8a0bab6ad8a89c4c5c7a9b62a270000");
    org.jsecurity.session.UnknownSessionException var8 = new org.jsecurity.session.UnknownSessionException("dd\uFFFD", (java.io.Serializable)100.0f);
    org.jsecurity.subject.SubjectException var9 = new org.jsecurity.subject.SubjectException("dd\uFFFD", (java.lang.Throwable)var8);
    org.jsecurity.io.SerializationException var10 = new org.jsecurity.io.SerializationException("", (java.lang.Throwable)var9);
    java.lang.Throwable[] var11 = var9.getSuppressed();
    java.util.Set var12 = org.jsecurity.util.CollectionUtils.asSet((java.lang.Object[])var11);
    var1.addRoles((java.util.Collection)var12);
    var0.addAll((java.util.Collection)var12);
    java.lang.String var15 = var0.getName();
    org.jsecurity.authz.permission.WildcardPermission var18 = new org.jsecurity.authz.permission.WildcardPermission("hi!", false);
    var0.add((org.jsecurity.authz.Permission)var18);
    org.jsecurity.authz.permission.WildcardPermission var22 = new org.jsecurity.authz.permission.WildcardPermission("hi!", false);
    var0.add((org.jsecurity.authz.Permission)var22);
    java.lang.String var24 = var0.toString();
    org.jsecurity.mgt.DefaultSecurityManager var25 = new org.jsecurity.mgt.DefaultSecurityManager();
    java.io.InputStream var27 = org.jsecurity.util.ClassUtils.getResourceAsStream("");
    java.lang.Object[] var28 = new java.lang.Object[] { var27};
    java.util.List var29 = org.jsecurity.util.CollectionUtils.asList(var28);
    org.jsecurity.authc.pam.ModularRealmAuthenticator var30 = new org.jsecurity.authc.pam.ModularRealmAuthenticator(var29);
    org.jsecurity.authc.pam.AllSuccessfulModularAuthenticationStrategy var31 = new org.jsecurity.authc.pam.AllSuccessfulModularAuthenticationStrategy();
    var30.setModularAuthenticationStrategy((org.jsecurity.authc.pam.ModularAuthenticationStrategy)var31);
    org.jsecurity.authz.SimpleAuthorizationInfo var33 = new org.jsecurity.authz.SimpleAuthorizationInfo();
    var33.addStringPermission("hi!");
    java.io.InputStream var37 = org.jsecurity.util.ClassUtils.getResourceAsStream("");
    java.lang.Object[] var38 = new java.lang.Object[] { var37};
    java.util.List var39 = org.jsecurity.util.CollectionUtils.asList(var38);
    var33.addRoles((java.util.Collection)var39);
    var30.setAuthenticationListeners((java.util.Collection)var39);
    var25.setSessionListeners((java.util.Collection)var39);
    org.jsecurity.realm.text.TextConfigurationRealm var43 = new org.jsecurity.realm.text.TextConfigurationRealm();
    java.io.InputStream var45 = org.jsecurity.util.ClassUtils.getResourceAsStream("");
    java.lang.Object[] var46 = new java.lang.Object[] { var45};
    java.util.List var47 = org.jsecurity.util.CollectionUtils.asList(var46);
    org.jsecurity.authc.pam.ModularRealmAuthenticator var48 = new org.jsecurity.authc.pam.ModularRealmAuthenticator(var47);
    org.jsecurity.subject.SimplePrincipalCollection var50 = new org.jsecurity.subject.SimplePrincipalCollection((java.util.Collection)var47, "org.jsecurity.authz.UnauthorizedException: org.jsecurity.session.ExpiredSessionException: ");
    org.jsecurity.session.UnknownSessionException var55 = new org.jsecurity.session.UnknownSessionException("dd\uFFFD", (java.io.Serializable)100.0f);
    org.jsecurity.session.SessionException var57 = new org.jsecurity.session.SessionException("dd\uFFFD", (java.lang.Throwable)var55, (java.io.Serializable)0);
    org.jsecurity.session.SessionException var58 = new org.jsecurity.session.SessionException("dd\uFFFD", (java.lang.Throwable)var55);
    var50.add((java.lang.Object)var58, "org.jsecurity.config.ConfigurationException: dd\uFFFD");
    var43.onLogout((org.jsecurity.subject.PrincipalCollection)var50);
    org.jsecurity.authc.pam.FirstSuccessfulAuthenticationStrategy var62 = new org.jsecurity.authc.pam.FirstSuccessfulAuthenticationStrategy();
    org.jsecurity.authz.UnauthorizedException var64 = new org.jsecurity.authz.UnauthorizedException("org.jsecurity.config.ConfigurationException: dd\uFFFD");
    java.lang.Throwable[] var65 = var64.getSuppressed();
    java.util.List var66 = org.jsecurity.util.CollectionUtils.asList((java.lang.Object[])var65);
    org.jsecurity.authc.UsernamePasswordToken var67 = new org.jsecurity.authc.UsernamePasswordToken();
    java.lang.String var68 = var67.getUsername();
    java.net.InetAddress var69 = var67.getInetAddress();
    org.jsecurity.authc.AuthenticationInfo var70 = var62.beforeAllAttempts((java.util.Collection)var66, (org.jsecurity.authc.AuthenticationToken)var67);
    boolean[] var71 = var25.hasRoles((org.jsecurity.subject.PrincipalCollection)var50, var66);
    org.jsecurity.codec.CodecException var74 = new org.jsecurity.codec.CodecException("dd\uFFFD");
    org.jsecurity.authc.ConcurrentAccessException var75 = new org.jsecurity.authc.ConcurrentAccessException("org.jsecurity.authz.UnauthorizedException: org.jsecurity.session.ExpiredSessionException: ", (java.lang.Throwable)var74);
    org.jsecurity.subject.SimplePrincipalCollection var77 = new org.jsecurity.subject.SimplePrincipalCollection((java.lang.Object)var74, "");
    java.io.InputStream var79 = org.jsecurity.util.ClassUtils.getResourceAsStream("");
    java.lang.Object[] var80 = new java.lang.Object[] { var79};
    java.util.List var81 = org.jsecurity.util.CollectionUtils.asList(var80);
    org.jsecurity.authc.pam.ModularRealmAuthenticator var82 = new org.jsecurity.authc.pam.ModularRealmAuthenticator(var81);
    var77.addAll((java.util.Collection)var81, "\u0000\u0000");
    var25.setSessionListeners((java.util.Collection)var81);
    boolean var86 = var0.equals((java.lang.Object)var81);
    java.util.Set var87 = var0.getPermissions();
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var11);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var12);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var15);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var24);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var27);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var28);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var29);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var37);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var38);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var39);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var45);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var46);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var47);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var65);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var66);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var68);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var69);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var70);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var71);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var79);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var80);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var81);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var86 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var87);

  }

  public void test144() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest5.test144");


    org.jsecurity.authc.pam.AllSuccessfulModularAuthenticationStrategy var1 = new org.jsecurity.authc.pam.AllSuccessfulModularAuthenticationStrategy();
    char[] var3 = new char[] { };
    org.jsecurity.authc.UsernamePasswordToken var5 = new org.jsecurity.authc.UsernamePasswordToken("hi!", var3, true);
    org.jsecurity.authc.SimpleAccount var6 = new org.jsecurity.authc.SimpleAccount();
    var6.setCredentialsExpired(false);
    boolean var9 = var6.isLocked();
    org.jsecurity.authc.AuthenticationInfo var10 = var1.afterAllAttempts((org.jsecurity.authc.AuthenticationToken)var5, (org.jsecurity.authc.AuthenticationInfo)var6);
    char[] var13 = new char[] { };
    org.jsecurity.authc.UsernamePasswordToken var15 = new org.jsecurity.authc.UsernamePasswordToken("hi!", var13, true);
    org.jsecurity.authc.UsernamePasswordToken var16 = new org.jsecurity.authc.UsernamePasswordToken("\u0000\u0000", var13);
    var5.setPassword(var13);
    byte[] var18 = org.jsecurity.codec.Hex.decode(var13);
    org.jsecurity.authc.UsernamePasswordToken var19 = new org.jsecurity.authc.UsernamePasswordToken("e97bc58e-e102-4560-b9f8-961408affdaf", var13);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var3);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var9 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var10);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var13);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var18);

  }

  public void test145() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest5.test145");


    org.jsecurity.authz.AuthorizationException var1 = new org.jsecurity.authz.AuthorizationException("1b133c1e-b367-4151-a6eb-7b9101fa4e3a");

  }

  public void test146() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest5.test146");


    org.jsecurity.session.UnknownSessionException var5 = new org.jsecurity.session.UnknownSessionException("dd\uFFFD", (java.io.Serializable)100.0f);
    org.jsecurity.subject.SubjectException var6 = new org.jsecurity.subject.SubjectException("dd\uFFFD", (java.lang.Throwable)var5);
    org.jsecurity.authc.AccountException var7 = new org.jsecurity.authc.AccountException("hi!", (java.lang.Throwable)var6);
    org.jsecurity.session.UnknownSessionException var8 = new org.jsecurity.session.UnknownSessionException((java.lang.Throwable)var6);
    org.jsecurity.authc.ExpiredCredentialsException var9 = new org.jsecurity.authc.ExpiredCredentialsException("orgjsecurityconfigConfigurationExceptionAAA=", (java.lang.Throwable)var8);

  }

  public void test147() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest5.test147");


    org.jsecurity.session.mgt.DelegatingSession var0 = new org.jsecurity.session.mgt.DelegatingSession();
    org.jsecurity.session.mgt.SessionManager var1 = var0.getSessionManager();
    java.io.Serializable var2 = var0.getId();
    var0.setId((java.io.Serializable)"e7e879cb-1172-4cea-8bca-f370fbe1f08c");
    org.jsecurity.authc.pam.AllSuccessfulModularAuthenticationStrategy var7 = new org.jsecurity.authc.pam.AllSuccessfulModularAuthenticationStrategy();
    char[] var9 = new char[] { };
    org.jsecurity.authc.UsernamePasswordToken var11 = new org.jsecurity.authc.UsernamePasswordToken("hi!", var9, true);
    org.jsecurity.authc.SimpleAccount var12 = new org.jsecurity.authc.SimpleAccount();
    var12.setCredentialsExpired(false);
    boolean var15 = var12.isLocked();
    org.jsecurity.authc.AuthenticationInfo var16 = var7.afterAllAttempts((org.jsecurity.authc.AuthenticationToken)var11, (org.jsecurity.authc.AuthenticationInfo)var12);
    char[] var20 = new char[] { '4', '#'};
    org.jsecurity.authc.UsernamePasswordToken var21 = new org.jsecurity.authc.UsernamePasswordToken("\u0000\u0000", var20);
    org.jsecurity.authc.SimpleAccount var22 = new org.jsecurity.authc.SimpleAccount();
    var22.setCredentialsExpired(false);
    var22.setCredentialsExpired(false);
    boolean var27 = var22.isCredentialsExpired();
    org.jsecurity.authc.AuthenticationInfo var28 = var7.afterAllAttempts((org.jsecurity.authc.AuthenticationToken)var21, (org.jsecurity.authc.AuthenticationInfo)var22);
    java.net.InetAddress var29 = var21.getInetAddress();
    org.jsecurity.session.mgt.eis.MemorySessionDAO var30 = new org.jsecurity.session.mgt.eis.MemorySessionDAO();
    org.jsecurity.cache.Cache var31 = var30.getActiveSessionsCache();
    org.jsecurity.cache.CacheManager var32 = var30.getCacheManager();
    org.jsecurity.cache.HashtableCacheManager var33 = new org.jsecurity.cache.HashtableCacheManager();
    org.jsecurity.cache.Cache var35 = var33.getCache("\u0000\u0000");
    var30.setActiveSessionsCache(var35);
    java.io.InputStream var38 = org.jsecurity.util.ClassUtils.getResourceAsStream("");
    java.lang.Object[] var39 = new java.lang.Object[] { var38};
    java.util.List var40 = org.jsecurity.util.CollectionUtils.asList(var39);
    org.jsecurity.authc.pam.ModularRealmAuthenticator var41 = new org.jsecurity.authc.pam.ModularRealmAuthenticator(var40);
    org.jsecurity.authc.pam.AllSuccessfulModularAuthenticationStrategy var42 = new org.jsecurity.authc.pam.AllSuccessfulModularAuthenticationStrategy();
    var41.setModularAuthenticationStrategy((org.jsecurity.authc.pam.ModularAuthenticationStrategy)var42);
    org.jsecurity.authz.SimpleAuthorizationInfo var44 = new org.jsecurity.authz.SimpleAuthorizationInfo();
    var44.addStringPermission("hi!");
    java.io.InputStream var48 = org.jsecurity.util.ClassUtils.getResourceAsStream("");
    java.lang.Object[] var49 = new java.lang.Object[] { var48};
    java.util.List var50 = org.jsecurity.util.CollectionUtils.asList(var49);
    var44.addRoles((java.util.Collection)var50);
    var41.setAuthenticationListeners((java.util.Collection)var50);
    org.jsecurity.realm.activedirectory.ActiveDirectoryRealm var53 = new org.jsecurity.realm.activedirectory.ActiveDirectoryRealm();
    var53.setPrincipalSuffix("");
    var41.setRealm((org.jsecurity.realm.Realm)var53);
    org.jsecurity.cache.HashtableCacheManager var57 = new org.jsecurity.cache.HashtableCacheManager();
    org.jsecurity.cache.Cache var59 = var57.getCache("\u0000\u0000");
    var53.setAuthorizationCache(var59);
    var30.setActiveSessionsCache(var59);
    org.jsecurity.session.mgt.SimpleSession var62 = new org.jsecurity.session.mgt.SimpleSession();
    java.io.Serializable var63 = var30.create((org.jsecurity.session.Session)var62);
    org.jsecurity.session.mgt.SimpleSession var64 = new org.jsecurity.session.mgt.SimpleSession();
    var64.touch();
    var64.validate();
    org.jsecurity.session.mgt.SimpleSession var67 = new org.jsecurity.session.mgt.SimpleSession();
    var67.setTimeout((-1L));
    org.jsecurity.session.mgt.SimpleSession var70 = new org.jsecurity.session.mgt.SimpleSession();
    java.util.Date var71 = var70.getLastAccessTime();
    var67.setLastAccessTime(var71);
    org.jsecurity.session.mgt.SimpleSession var73 = new org.jsecurity.session.mgt.SimpleSession();
    java.util.Date var74 = var73.getLastAccessTime();
    var67.setStopTimestamp(var74);
    var64.setLastAccessTime(var74);
    var62.setLastAccessTime(var74);
    org.jsecurity.session.mgt.ImmutableProxiedSession var78 = new org.jsecurity.session.mgt.ImmutableProxiedSession((org.jsecurity.session.Session)var62);
    java.util.Date var79 = var78.getLastAccessTime();
    java.net.InetAddress var80 = var78.getHostAddress();
    var21.setInetAddress(var80);
    org.jsecurity.authc.UsernamePasswordToken var82 = new org.jsecurity.authc.UsernamePasswordToken("org.jsecurity.realm.text.TextConfigurationRealm_1021", "org.jsecurity.realm.text.TextConfigurationRealm_819", var80);
    var0.setId((java.io.Serializable)"org.jsecurity.realm.text.TextConfigurationRealm_1021");
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var1);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var2);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var9);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var15 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var16);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var20);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var27 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var28);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var29);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var31);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var32);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var35);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var38);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var39);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var40);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var48);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var49);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var50);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var59);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var63 + "' != '" + "c8eb58de-b12b-43ca-af3f-78361fd8ba4a"+ "'", var63.equals("c8eb58de-b12b-43ca-af3f-78361fd8ba4a"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var71);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var74);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var79);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var80);

  }

  public void test148() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest5.test148");


    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      byte[] var1 = org.jsecurity.codec.Hex.decode("162be413-8160-455c-92e1-63fc287e0ac1");
      fail("Expected exception of type java.lang.IllegalArgumentException");
    } catch (java.lang.IllegalArgumentException e) {
      // Expected exception.
    }

  }

  public void test149() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest5.test149");


    org.jsecurity.authz.permission.InvalidPermissionStringException var2 = new org.jsecurity.authz.permission.InvalidPermissionStringException("", "dd\uFFFD");
    org.jsecurity.JSecurityException var4 = new org.jsecurity.JSecurityException("");
    org.jsecurity.authc.SimpleAuthenticationInfo var6 = new org.jsecurity.authc.SimpleAuthenticationInfo((java.lang.Object)var2, (java.lang.Object)"", "org.jsecurity.authz.UnauthorizedException: org.jsecurity.session.ExpiredSessionException: ");
    org.jsecurity.subject.PrincipalCollection var7 = var6.getPrincipals();
    org.jsecurity.subject.PrincipalCollection var8 = var6.getPrincipals();
    org.jsecurity.authz.permission.WildcardPermissionResolver var9 = new org.jsecurity.authz.permission.WildcardPermissionResolver();
    org.jsecurity.authz.SimpleAuthorizingAccount var11 = new org.jsecurity.authz.SimpleAuthorizingAccount();
    org.jsecurity.authz.SimpleAuthorizationInfo var12 = new org.jsecurity.authz.SimpleAuthorizationInfo();
    var12.addRole("a2b823b1e72eae2b727289df8a00a89df8a0bab6ad8a89c4c5c7a9b62a270000");
    org.jsecurity.authz.SimpleAuthorizationInfo var15 = new org.jsecurity.authz.SimpleAuthorizationInfo();
    var15.addRole("a2b823b1e72eae2b727289df8a00a89df8a0bab6ad8a89c4c5c7a9b62a270000");
    org.jsecurity.session.UnknownSessionException var22 = new org.jsecurity.session.UnknownSessionException("dd\uFFFD", (java.io.Serializable)100.0f);
    org.jsecurity.subject.SubjectException var23 = new org.jsecurity.subject.SubjectException("dd\uFFFD", (java.lang.Throwable)var22);
    org.jsecurity.io.SerializationException var24 = new org.jsecurity.io.SerializationException("", (java.lang.Throwable)var23);
    java.lang.Throwable[] var25 = var23.getSuppressed();
    java.util.Set var26 = org.jsecurity.util.CollectionUtils.asSet((java.lang.Object[])var25);
    var15.addRoles((java.util.Collection)var26);
    var12.setObjectPermissions(var26);
    var11.setSimpleRoles(var26);
    java.util.Set var30 = var11.getPermissions();
    org.jsecurity.authz.SimpleAuthorizationInfo var31 = new org.jsecurity.authz.SimpleAuthorizationInfo();
    var31.addRole("a2b823b1e72eae2b727289df8a00a89df8a0bab6ad8a89c4c5c7a9b62a270000");
    org.jsecurity.authz.SimpleAuthorizationInfo var34 = new org.jsecurity.authz.SimpleAuthorizationInfo();
    var34.addRole("a2b823b1e72eae2b727289df8a00a89df8a0bab6ad8a89c4c5c7a9b62a270000");
    org.jsecurity.session.UnknownSessionException var41 = new org.jsecurity.session.UnknownSessionException("dd\uFFFD", (java.io.Serializable)100.0f);
    org.jsecurity.subject.SubjectException var42 = new org.jsecurity.subject.SubjectException("dd\uFFFD", (java.lang.Throwable)var41);
    org.jsecurity.io.SerializationException var43 = new org.jsecurity.io.SerializationException("", (java.lang.Throwable)var42);
    java.lang.Throwable[] var44 = var42.getSuppressed();
    java.util.Set var45 = org.jsecurity.util.CollectionUtils.asSet((java.lang.Object[])var44);
    var34.addRoles((java.util.Collection)var45);
    var31.setObjectPermissions(var45);
    var11.checkRoles((java.util.Collection)var45);
    org.jsecurity.session.UnknownSessionException var53 = new org.jsecurity.session.UnknownSessionException("dd\uFFFD", (java.io.Serializable)100.0f);
    org.jsecurity.subject.SubjectException var54 = new org.jsecurity.subject.SubjectException("dd\uFFFD", (java.lang.Throwable)var53);
    org.jsecurity.io.SerializationException var55 = new org.jsecurity.io.SerializationException("", (java.lang.Throwable)var54);
    java.lang.Throwable[] var56 = var54.getSuppressed();
    java.lang.Throwable[] var57 = var54.getSuppressed();
    java.util.Set var58 = org.jsecurity.util.CollectionUtils.asSet((java.lang.Object[])var57);
    org.jsecurity.authz.SimpleAuthorizingAccount var59 = new org.jsecurity.authz.SimpleAuthorizingAccount(var8, (java.lang.Object)var9, "a3e14b98-1050-4bcc-8787-431663db8814", var45, var58);
    org.jsecurity.session.UnknownSessionException var66 = new org.jsecurity.session.UnknownSessionException("dd\uFFFD", (java.io.Serializable)100.0f);
    org.jsecurity.subject.SubjectException var67 = new org.jsecurity.subject.SubjectException("dd\uFFFD", (java.lang.Throwable)var66);
    org.jsecurity.session.InvalidSessionException var68 = new org.jsecurity.session.InvalidSessionException("hi!", (java.lang.Throwable)var67);
    org.jsecurity.session.SessionException var69 = new org.jsecurity.session.SessionException("dd\uFFFD", (java.lang.Throwable)var67);
    org.jsecurity.authc.ConcurrentAccessException var70 = new org.jsecurity.authc.ConcurrentAccessException((java.lang.Throwable)var67);
    org.jsecurity.authz.UnauthorizedException var71 = new org.jsecurity.authz.UnauthorizedException("ca970aaa-b602-4caf-93a3-14b681dd0835", (java.lang.Throwable)var70);
    org.jsecurity.crypto.hash.Md2Hash var73 = new org.jsecurity.crypto.hash.Md2Hash((java.lang.Object)"a3e14b98-1050-4bcc-8787-431663db8814", (java.lang.Object)"ca970aaa-b602-4caf-93a3-14b681dd0835", 10);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var7);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var8);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var25);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var26);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var30);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var44);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var45);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var56);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var57);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var58);

  }

  public void test150() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest5.test150");


    org.jsecurity.crypto.hash.Md2Hash var1 = org.jsecurity.crypto.hash.Md2Hash.fromBase64String("0764a568-f715-4f88-b559-236e213e8f64");
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var1);

  }

  public void test151() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest5.test151");


    java.io.InputStream var1 = org.jsecurity.util.ClassUtils.getResourceAsStream("a90fad7f-7d5f-46a8-a669-ef1c9ffd25bf");
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var1);

  }

  public void test152() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest5.test152");


    org.jsecurity.authc.credential.Sha512CredentialsMatcher var0 = new org.jsecurity.authc.credential.Sha512CredentialsMatcher();
    var0.setHashIterations((-1));

  }

  public void test153() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest5.test153");


    java.io.InputStream var1 = org.jsecurity.util.ClassUtils.getResourceAsStream("");
    java.lang.Object[] var2 = new java.lang.Object[] { var1};
    java.util.List var3 = org.jsecurity.util.CollectionUtils.asList(var2);
    org.jsecurity.authc.pam.ModularRealmAuthenticator var4 = new org.jsecurity.authc.pam.ModularRealmAuthenticator(var3);
    org.jsecurity.subject.SimplePrincipalCollection var6 = new org.jsecurity.subject.SimplePrincipalCollection((java.util.Collection)var3, "org.jsecurity.authz.UnauthorizedException: org.jsecurity.session.ExpiredSessionException: ");
    org.jsecurity.io.ResourceException var10 = new org.jsecurity.io.ResourceException("hi!");
    org.jsecurity.authc.UnknownAccountException var11 = new org.jsecurity.authc.UnknownAccountException((java.lang.Throwable)var10);
    org.jsecurity.session.StoppedSessionException var12 = new org.jsecurity.session.StoppedSessionException("dd\uFFFD", (java.io.Serializable)var10);
    org.jsecurity.session.UnknownSessionException var13 = new org.jsecurity.session.UnknownSessionException("org.jsecurity.authz.UnauthorizedException: org.jsecurity.session.ExpiredSessionException: ", (java.lang.Throwable)var10);
    boolean var14 = var6.equals((java.lang.Object)var10);
    org.jsecurity.subject.SimplePrincipalCollection var15 = new org.jsecurity.subject.SimplePrincipalCollection((org.jsecurity.subject.PrincipalCollection)var6);
    org.jsecurity.authc.SimpleAccount var17 = new org.jsecurity.authc.SimpleAccount((org.jsecurity.subject.PrincipalCollection)var6, (java.lang.Object)"4c20e6b5-f5d8-4e6f-b584-735e30488227");
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var1);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var2);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var3);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var14 == false);

  }

  public void test154() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest5.test154");


    org.jsecurity.realm.jdbc.JdbcRealm var0 = new org.jsecurity.realm.jdbc.JdbcRealm();
    var0.setPermissionsQuery("org.jsecurity.authz.UnauthorizedException: org.jsecurity.session.ExpiredSessionException: ");
    var0.setAuthenticationQuery("");
    var0.setPermissionsQuery("ca73d1a4-706e-42e7-980f-896d3b153de8");
    var0.setPermissionsLookupEnabled(true);
    var0.setAuthenticationQuery("3c0f8cd0-07d8-4de6-8030-3e8afad05e07");

  }

  public void test155() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest5.test155");


    org.jsecurity.crypto.hash.Sha512Hash var1 = org.jsecurity.crypto.hash.Sha512Hash.fromBase64String("org.jsecurity.config.ConfigurationException: dd\uFFFD");
    byte[] var2 = var1.getBytes();
    java.lang.String var3 = var1.toString();
    org.jsecurity.config.IniConfiguration var4 = new org.jsecurity.config.IniConfiguration();
    var4.init();
    var4.setConfigUrl("947c1ad9-ebd5-4704-882a-a14f51bda9a4");
    org.jsecurity.mgt.SecurityManager var8 = var4.getSecurityManager();
    boolean var9 = var1.equals((java.lang.Object)var4);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var1);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var2);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var3 + "' != '" + "a2b823b1e72eae2b727289df8a00a89df8a0bab6ad8a89c4c5c7a9b62a270000"+ "'", var3.equals("a2b823b1e72eae2b727289df8a00a89df8a0bab6ad8a89c4c5c7a9b62a270000"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var8);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var9 == false);

  }

  public void test156() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest5.test156");


    org.jsecurity.session.UnknownSessionException var7 = new org.jsecurity.session.UnknownSessionException("dd\uFFFD", (java.io.Serializable)100.0f);
    org.jsecurity.config.ConfigurationException var8 = new org.jsecurity.config.ConfigurationException("dd\uFFFD", (java.lang.Throwable)var7);
    org.jsecurity.session.ExpiredSessionException var10 = new org.jsecurity.session.ExpiredSessionException("", (java.lang.Throwable)var8, (java.io.Serializable)true);
    org.jsecurity.authc.LockedAccountException var11 = new org.jsecurity.authc.LockedAccountException("", (java.lang.Throwable)var10);
    org.jsecurity.session.SessionException var12 = new org.jsecurity.session.SessionException((java.lang.Throwable)var11);
    org.jsecurity.session.SessionException var13 = new org.jsecurity.session.SessionException((java.lang.Throwable)var11);
    org.jsecurity.session.StoppedSessionException var14 = new org.jsecurity.session.StoppedSessionException("1191c204-d095-4efc-82da-b9e9f4b83353", (java.lang.Throwable)var13);
    org.jsecurity.JSecurityException var15 = new org.jsecurity.JSecurityException("79436e99-d45a-4bcc-9cbf-0fddb7998f7c", (java.lang.Throwable)var14);

  }

  public void test157() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest5.test157");


    java.io.InputStream var1 = org.jsecurity.util.ClassUtils.getResourceAsStream("");
    java.lang.Object[] var2 = new java.lang.Object[] { var1};
    java.util.List var3 = org.jsecurity.util.CollectionUtils.asList(var2);
    org.jsecurity.authc.pam.ModularRealmAuthenticator var4 = new org.jsecurity.authc.pam.ModularRealmAuthenticator(var3);
    org.jsecurity.subject.SimplePrincipalCollection var6 = new org.jsecurity.subject.SimplePrincipalCollection((java.util.Collection)var3, "org.jsecurity.authz.UnauthorizedException: org.jsecurity.session.ExpiredSessionException: ");
    org.jsecurity.session.UnknownSessionException var11 = new org.jsecurity.session.UnknownSessionException("dd\uFFFD", (java.io.Serializable)100.0f);
    org.jsecurity.session.SessionException var13 = new org.jsecurity.session.SessionException("dd\uFFFD", (java.lang.Throwable)var11, (java.io.Serializable)0);
    org.jsecurity.session.SessionException var14 = new org.jsecurity.session.SessionException("dd\uFFFD", (java.lang.Throwable)var11);
    var6.add((java.lang.Object)var14, "org.jsecurity.config.ConfigurationException: dd\uFFFD");
    org.jsecurity.authz.SimpleAuthorizationInfo var17 = new org.jsecurity.authz.SimpleAuthorizationInfo();
    var17.addStringPermission("hi!");
    var6.add((java.lang.Object)var17, "6490c538-8530-4846-9179-12c067fd8651");
    var17.addRole("95f7f9bef51a4a01d759fb43e86d7c04");
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var1);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var2);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var3);

  }

  public void test158() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest5.test158");


    org.jsecurity.realm.activedirectory.ActiveDirectoryRealm var0 = new org.jsecurity.realm.activedirectory.ActiveDirectoryRealm();
    var0.initAuthorizationCache();
    var0.setSearchBase("dd\uFFFD");
    var0.setSystemUsername("");
    org.jsecurity.authc.UsernamePasswordToken var6 = new org.jsecurity.authc.UsernamePasswordToken();
    java.lang.String var7 = var6.getUsername();
    java.lang.Object var8 = var6.getPrincipal();
    var6.setUsername("hi!");
    java.lang.Object var11 = var6.getCredentials();
    java.lang.String var12 = var6.getUsername();
    boolean var13 = var0.supports((org.jsecurity.authc.AuthenticationToken)var6);
    var0.setSystemUsername("499413f2-ff78-44c6-b3f7-2030321675ed");
    org.jsecurity.mgt.DefaultSecurityManager var16 = new org.jsecurity.mgt.DefaultSecurityManager((org.jsecurity.realm.Realm)var0);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var7);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var8);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var11);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var12 + "' != '" + "hi!"+ "'", var12.equals("hi!"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var13 == true);

  }

  public void test159() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest5.test159");


    char[] var1 = new char[] { };
    org.jsecurity.authc.UsernamePasswordToken var3 = new org.jsecurity.authc.UsernamePasswordToken("hi!", var1, true);
    byte[] var4 = org.jsecurity.codec.Hex.decode(var1);
    byte[] var5 = org.jsecurity.codec.Hex.decode(var1);
    byte[] var6 = org.jsecurity.codec.Base64.encode(var5);
    char[] var7 = org.jsecurity.codec.Hex.encode(var5);
    char[] var8 = org.jsecurity.codec.CodecSupport.toChars(var5);
    byte[] var10 = org.jsecurity.codec.Base64.encode(var5, false);
    char[] var11 = org.jsecurity.codec.Hex.encode(var5);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var1);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var4);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var5);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var6);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var7);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var8);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var10);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var11);

  }

  public void test160() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest5.test160");


    org.jsecurity.authz.permission.InvalidPermissionStringException var3 = new org.jsecurity.authz.permission.InvalidPermissionStringException("", "dd\uFFFD");
    org.jsecurity.JSecurityException var5 = new org.jsecurity.JSecurityException("");
    org.jsecurity.authc.SimpleAuthenticationInfo var7 = new org.jsecurity.authc.SimpleAuthenticationInfo((java.lang.Object)var3, (java.lang.Object)"", "org.jsecurity.authz.UnauthorizedException: org.jsecurity.session.ExpiredSessionException: ");
    org.jsecurity.authc.ConcurrentAccessException var8 = new org.jsecurity.authc.ConcurrentAccessException("ece0d7de-3501-4311-83c5-d3174fe414d8", (java.lang.Throwable)var3);

  }

  public void test161() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest5.test161");


    org.jsecurity.realm.text.PropertiesRealm var0 = new org.jsecurity.realm.text.PropertiesRealm();
    var0.setRoleDefinitions("5dd0c65d-1422-49c2-becb-9e8dca619ab3");
    var0.setUseXmlFormat(true);
    var0.setResourcePath("b6a77f71-73c4-466a-903e-72fc5968f9ac");
    org.jsecurity.mgt.DefaultSecurityManager var7 = new org.jsecurity.mgt.DefaultSecurityManager();
    java.io.InputStream var9 = org.jsecurity.util.ClassUtils.getResourceAsStream("");
    java.lang.Object[] var10 = new java.lang.Object[] { var9};
    java.util.List var11 = org.jsecurity.util.CollectionUtils.asList(var10);
    org.jsecurity.authc.pam.ModularRealmAuthenticator var12 = new org.jsecurity.authc.pam.ModularRealmAuthenticator(var11);
    org.jsecurity.authc.pam.AllSuccessfulModularAuthenticationStrategy var13 = new org.jsecurity.authc.pam.AllSuccessfulModularAuthenticationStrategy();
    var12.setModularAuthenticationStrategy((org.jsecurity.authc.pam.ModularAuthenticationStrategy)var13);
    org.jsecurity.authz.SimpleAuthorizationInfo var15 = new org.jsecurity.authz.SimpleAuthorizationInfo();
    var15.addStringPermission("hi!");
    java.io.InputStream var19 = org.jsecurity.util.ClassUtils.getResourceAsStream("");
    java.lang.Object[] var20 = new java.lang.Object[] { var19};
    java.util.List var21 = org.jsecurity.util.CollectionUtils.asList(var20);
    var15.addRoles((java.util.Collection)var21);
    var12.setAuthenticationListeners((java.util.Collection)var21);
    var7.setSessionListeners((java.util.Collection)var21);
    org.jsecurity.realm.text.TextConfigurationRealm var25 = new org.jsecurity.realm.text.TextConfigurationRealm();
    java.io.InputStream var27 = org.jsecurity.util.ClassUtils.getResourceAsStream("");
    java.lang.Object[] var28 = new java.lang.Object[] { var27};
    java.util.List var29 = org.jsecurity.util.CollectionUtils.asList(var28);
    org.jsecurity.authc.pam.ModularRealmAuthenticator var30 = new org.jsecurity.authc.pam.ModularRealmAuthenticator(var29);
    org.jsecurity.subject.SimplePrincipalCollection var32 = new org.jsecurity.subject.SimplePrincipalCollection((java.util.Collection)var29, "org.jsecurity.authz.UnauthorizedException: org.jsecurity.session.ExpiredSessionException: ");
    org.jsecurity.session.UnknownSessionException var37 = new org.jsecurity.session.UnknownSessionException("dd\uFFFD", (java.io.Serializable)100.0f);
    org.jsecurity.session.SessionException var39 = new org.jsecurity.session.SessionException("dd\uFFFD", (java.lang.Throwable)var37, (java.io.Serializable)0);
    org.jsecurity.session.SessionException var40 = new org.jsecurity.session.SessionException("dd\uFFFD", (java.lang.Throwable)var37);
    var32.add((java.lang.Object)var40, "org.jsecurity.config.ConfigurationException: dd\uFFFD");
    var25.onLogout((org.jsecurity.subject.PrincipalCollection)var32);
    org.jsecurity.authc.pam.FirstSuccessfulAuthenticationStrategy var44 = new org.jsecurity.authc.pam.FirstSuccessfulAuthenticationStrategy();
    org.jsecurity.authz.UnauthorizedException var46 = new org.jsecurity.authz.UnauthorizedException("org.jsecurity.config.ConfigurationException: dd\uFFFD");
    java.lang.Throwable[] var47 = var46.getSuppressed();
    java.util.List var48 = org.jsecurity.util.CollectionUtils.asList((java.lang.Object[])var47);
    org.jsecurity.authc.UsernamePasswordToken var49 = new org.jsecurity.authc.UsernamePasswordToken();
    java.lang.String var50 = var49.getUsername();
    java.net.InetAddress var51 = var49.getInetAddress();
    org.jsecurity.authc.AuthenticationInfo var52 = var44.beforeAllAttempts((java.util.Collection)var48, (org.jsecurity.authc.AuthenticationToken)var49);
    boolean[] var53 = var7.hasRoles((org.jsecurity.subject.PrincipalCollection)var32, var48);
    org.jsecurity.authz.permission.WildcardPermissionResolver var54 = new org.jsecurity.authz.permission.WildcardPermissionResolver();
    org.jsecurity.authz.Permission var56 = var54.resolvePermission("hi!");
    org.jsecurity.authz.Permission var58 = var54.resolvePermission("hi!");
    var7.setPermissionResolver((org.jsecurity.authz.permission.PermissionResolver)var54);
    var0.setPermissionResolver((org.jsecurity.authz.permission.PermissionResolver)var54);
    org.jsecurity.authz.Permission var62 = var54.resolvePermission("bafce95d-9056-4d74-9fad-cfc428d6b8e2");
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var9);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var10);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var11);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var19);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var20);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var21);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var27);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var28);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var29);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var47);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var48);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var50);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var51);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var52);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var53);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var56);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var58);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var62);

  }

  public void test162() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest5.test162");


    org.jsecurity.authz.ModularRealmAuthorizer var0 = new org.jsecurity.authz.ModularRealmAuthorizer();
    java.io.InputStream var2 = org.jsecurity.util.ClassUtils.getResourceAsStream("");
    java.lang.Object[] var3 = new java.lang.Object[] { var2};
    java.util.List var4 = org.jsecurity.util.CollectionUtils.asList(var3);
    org.jsecurity.authc.pam.ModularRealmAuthenticator var5 = new org.jsecurity.authc.pam.ModularRealmAuthenticator(var4);
    org.jsecurity.subject.SimplePrincipalCollection var7 = new org.jsecurity.subject.SimplePrincipalCollection((java.util.Collection)var4, "org.jsecurity.authz.UnauthorizedException: org.jsecurity.session.ExpiredSessionException: ");
    org.jsecurity.session.UnknownSessionException var12 = new org.jsecurity.session.UnknownSessionException("dd\uFFFD", (java.io.Serializable)100.0f);
    org.jsecurity.session.SessionException var14 = new org.jsecurity.session.SessionException("dd\uFFFD", (java.lang.Throwable)var12, (java.io.Serializable)0);
    org.jsecurity.session.SessionException var15 = new org.jsecurity.session.SessionException("dd\uFFFD", (java.lang.Throwable)var12);
    var7.add((java.lang.Object)var15, "org.jsecurity.config.ConfigurationException: dd\uFFFD");
    java.util.Set var18 = var7.asSet();
    var0.setRealms((java.util.Collection)var18);
    org.jsecurity.codec.CodecException var22 = new org.jsecurity.codec.CodecException("dd\uFFFD");
    org.jsecurity.authc.ConcurrentAccessException var23 = new org.jsecurity.authc.ConcurrentAccessException("org.jsecurity.authz.UnauthorizedException: org.jsecurity.session.ExpiredSessionException: ", (java.lang.Throwable)var22);
    org.jsecurity.subject.SimplePrincipalCollection var25 = new org.jsecurity.subject.SimplePrincipalCollection((java.lang.Object)var22, "");
    org.jsecurity.authc.pam.FirstSuccessfulAuthenticationStrategy var26 = new org.jsecurity.authc.pam.FirstSuccessfulAuthenticationStrategy();
    org.jsecurity.authz.UnauthorizedException var28 = new org.jsecurity.authz.UnauthorizedException("org.jsecurity.config.ConfigurationException: dd\uFFFD");
    java.lang.Throwable[] var29 = var28.getSuppressed();
    java.util.List var30 = org.jsecurity.util.CollectionUtils.asList((java.lang.Object[])var29);
    org.jsecurity.authc.UsernamePasswordToken var31 = new org.jsecurity.authc.UsernamePasswordToken();
    java.lang.String var32 = var31.getUsername();
    java.net.InetAddress var33 = var31.getInetAddress();
    org.jsecurity.authc.AuthenticationInfo var34 = var26.beforeAllAttempts((java.util.Collection)var30, (org.jsecurity.authc.AuthenticationToken)var31);
    org.jsecurity.session.UnknownSessionException var39 = new org.jsecurity.session.UnknownSessionException("dd\uFFFD", (java.io.Serializable)100.0f);
    org.jsecurity.subject.SubjectException var40 = new org.jsecurity.subject.SubjectException("dd\uFFFD", (java.lang.Throwable)var39);
    org.jsecurity.io.SerializationException var41 = new org.jsecurity.io.SerializationException("", (java.lang.Throwable)var40);
    java.lang.Throwable[] var42 = var40.getSuppressed();
    java.util.Set var43 = org.jsecurity.util.CollectionUtils.asSet((java.lang.Object[])var42);
    org.jsecurity.authc.SimpleAccount var44 = new org.jsecurity.authc.SimpleAccount((org.jsecurity.subject.PrincipalCollection)var25, (java.lang.Object)var30, var43);
    var44.addStringPermission("org.jsecurity.config.ConfigurationException: dd\uFFFD");
    org.jsecurity.subject.PrincipalCollection var47 = var44.getPrincipals();
    org.jsecurity.realm.text.TextConfigurationRealm var48 = new org.jsecurity.realm.text.TextConfigurationRealm();
    org.jsecurity.realm.text.TextConfigurationRealm var49 = new org.jsecurity.realm.text.TextConfigurationRealm();
    java.io.InputStream var51 = org.jsecurity.util.ClassUtils.getResourceAsStream("");
    java.lang.Object[] var52 = new java.lang.Object[] { var51};
    java.util.List var53 = org.jsecurity.util.CollectionUtils.asList(var52);
    org.jsecurity.authc.pam.ModularRealmAuthenticator var54 = new org.jsecurity.authc.pam.ModularRealmAuthenticator(var53);
    org.jsecurity.subject.SimplePrincipalCollection var56 = new org.jsecurity.subject.SimplePrincipalCollection((java.util.Collection)var53, "org.jsecurity.authz.UnauthorizedException: org.jsecurity.session.ExpiredSessionException: ");
    org.jsecurity.session.UnknownSessionException var61 = new org.jsecurity.session.UnknownSessionException("dd\uFFFD", (java.io.Serializable)100.0f);
    org.jsecurity.session.SessionException var63 = new org.jsecurity.session.SessionException("dd\uFFFD", (java.lang.Throwable)var61, (java.io.Serializable)0);
    org.jsecurity.session.SessionException var64 = new org.jsecurity.session.SessionException("dd\uFFFD", (java.lang.Throwable)var61);
    var56.add((java.lang.Object)var64, "org.jsecurity.config.ConfigurationException: dd\uFFFD");
    var49.onLogout((org.jsecurity.subject.PrincipalCollection)var56);
    java.util.Collection var69 = var56.fromRealm("\u0000\u0000\u0000");
    var48.onLogout((org.jsecurity.subject.PrincipalCollection)var56);
    org.jsecurity.authz.aop.RoleAnnotationMethodInterceptor var71 = new org.jsecurity.authz.aop.RoleAnnotationMethodInterceptor();
    org.jsecurity.aop.AnnotationHandler var72 = var71.getHandler();
    java.lang.Class var73 = var72.getAnnotationClass();
    java.util.Collection var74 = var56.byType(var73);
    var0.checkPermissions(var47, var74);
    java.io.InputStream var77 = org.jsecurity.util.ClassUtils.getResourceAsStream("");
    java.lang.Object[] var78 = new java.lang.Object[] { var77};
    java.util.List var79 = org.jsecurity.util.CollectionUtils.asList(var78);
    org.jsecurity.authc.pam.ModularRealmAuthenticator var80 = new org.jsecurity.authc.pam.ModularRealmAuthenticator(var79);
    org.jsecurity.subject.SimplePrincipalCollection var82 = new org.jsecurity.subject.SimplePrincipalCollection((java.util.Collection)var79, "org.jsecurity.authz.UnauthorizedException: org.jsecurity.session.ExpiredSessionException: ");
    java.util.Set var83 = var82.getRealmNames();
    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      var0.checkRole((org.jsecurity.subject.PrincipalCollection)var82, "{\uFFFD\uFFFD\uFFFD\uFFFD\u001B\uFFFD^\uFFFD\uFFFD\u01DA\uFFFD\u001A~\uFFFD}\uFFFD\uFFFDO\u001C");
      fail("Expected exception of type java.lang.ClassCastException");
    } catch (java.lang.ClassCastException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var2);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var3);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var4);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var18);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var29);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var30);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var32);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var33);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var34);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var42);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var43);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var47);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var51);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var52);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var53);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var69);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var72);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var73);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var74);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var77);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var78);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var79);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var83);

  }

  public void test163() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest5.test163");


    org.jsecurity.crypto.hash.Sha512Hash var1 = org.jsecurity.crypto.hash.Sha512Hash.fromBase64String("org.jsecurity.config.ConfigurationException: dd\uFFFD");
    byte[] var2 = var1.getBytes();
    java.lang.String var3 = org.jsecurity.codec.Base64.decodeToString(var2);
    byte[] var4 = org.jsecurity.codec.Base64.encodeChunked(var2);
    byte[] var6 = org.jsecurity.codec.Base64.encode(var4, false);
    java.lang.String var7 = org.jsecurity.codec.CodecSupport.toString(var4);
    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      char[] var9 = org.jsecurity.codec.CodecSupport.toChars(var4, "8f54ce0b-37d0-41a8-8bc2-023c3ee3f52a");
      fail("Expected exception of type org.jsecurity.codec.CodecException");
    } catch (org.jsecurity.codec.CodecException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var1);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var2);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var3 + "' != '" + "\u0000\u0000\u0000"+ "'", var3.equals("\u0000\u0000\u0000"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var4);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var6);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var7 + "' != '" + "orgjsecurityconfigConfigurationExceptionAAA=\r\n"+ "'", var7.equals("orgjsecurityconfigConfigurationExceptionAAA=\r\n"));

  }

  public void test164() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest5.test164");


    org.jsecurity.io.IniResource var0 = new org.jsecurity.io.IniResource();
    var0.setCharsetName("org.jsecurity.authz.UnauthorizedException: org.jsecurity.session.ExpiredSessionException: ");
    java.util.Map var3 = var0.getSections();
    org.jsecurity.realm.activedirectory.ActiveDirectoryRealm var4 = new org.jsecurity.realm.activedirectory.ActiveDirectoryRealm();
    var4.init();
    var4.init();
    org.jsecurity.config.ReflectionBuilder var7 = new org.jsecurity.config.ReflectionBuilder();
    org.jsecurity.config.ReflectionBuilder var8 = new org.jsecurity.config.ReflectionBuilder();
    org.jsecurity.io.IniResource var9 = new org.jsecurity.io.IniResource();
    var9.setCharsetName("org.jsecurity.authz.UnauthorizedException: org.jsecurity.session.ExpiredSessionException: ");
    java.util.Map var12 = var9.getSections();
    java.util.Map var13 = var8.buildObjects(var12);
    org.jsecurity.config.ReflectionBuilder var14 = new org.jsecurity.config.ReflectionBuilder();
    org.jsecurity.io.IniResource var15 = new org.jsecurity.io.IniResource();
    var15.setCharsetName("org.jsecurity.authz.UnauthorizedException: org.jsecurity.session.ExpiredSessionException: ");
    java.util.Map var18 = var15.getSections();
    java.util.Map var19 = var14.buildObjects(var18);
    java.util.Map var20 = var8.buildObjects(var19);
    java.util.Map var21 = var7.buildObjects(var20);
    var4.setGroupRolesMap(var21);
    org.jsecurity.mgt.DefaultSecurityManager var23 = new org.jsecurity.mgt.DefaultSecurityManager((org.jsecurity.realm.Realm)var4);
    org.jsecurity.config.ReflectionBuilder var24 = new org.jsecurity.config.ReflectionBuilder();
    org.jsecurity.io.IniResource var25 = new org.jsecurity.io.IniResource();
    var25.setCharsetName("org.jsecurity.authz.UnauthorizedException: org.jsecurity.session.ExpiredSessionException: ");
    java.util.Map var28 = var25.getSections();
    java.util.Map var29 = var24.buildObjects(var28);
    java.util.Map var30 = var24.getObjects();
    java.util.Map var31 = var24.getObjects();
    var4.setGroupRolesMap(var31);
    var0.setSections(var31);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var3);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var12);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var13);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var18);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var19);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var20);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var21);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var28);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var29);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var30);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var31);

  }

  public void test165() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest5.test165");


    org.jsecurity.realm.activedirectory.ActiveDirectoryRealm var0 = new org.jsecurity.realm.activedirectory.ActiveDirectoryRealm();
    var0.setPrincipalSuffix("");
    var0.setPrincipalSuffix("org.jsecurity.authc.CredentialsException: 783ccd31-48a8-42dd-890f-df885a7baaff");
    org.jsecurity.cache.CacheManager var5 = var0.getCacheManager();
    org.jsecurity.cache.HashtableCache var7 = new org.jsecurity.cache.HashtableCache("2e460aa1-7db8-4a99-ad7a-a5b2ab41638e");
    var0.setAuthorizationCache((org.jsecurity.cache.Cache)var7);
    java.lang.String var9 = var7.toString();
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var5);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var9 + "' != '" + "HashtableCache [2e460aa1-7db8-4a99-ad7a-a5b2ab41638e]"+ "'", var9.equals("HashtableCache [2e460aa1-7db8-4a99-ad7a-a5b2ab41638e]"));

  }

  public void test166() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest5.test166");


    org.jsecurity.mgt.DefaultSecurityManager var0 = new org.jsecurity.mgt.DefaultSecurityManager();
    org.jsecurity.authc.pam.AllSuccessfulModularAuthenticationStrategy var1 = new org.jsecurity.authc.pam.AllSuccessfulModularAuthenticationStrategy();
    org.jsecurity.authc.pam.AllSuccessfulModularAuthenticationStrategy var2 = new org.jsecurity.authc.pam.AllSuccessfulModularAuthenticationStrategy();
    char[] var4 = new char[] { };
    org.jsecurity.authc.UsernamePasswordToken var6 = new org.jsecurity.authc.UsernamePasswordToken("hi!", var4, true);
    org.jsecurity.authc.SimpleAccount var7 = new org.jsecurity.authc.SimpleAccount();
    var7.setCredentialsExpired(false);
    boolean var10 = var7.isLocked();
    org.jsecurity.authc.AuthenticationInfo var11 = var2.afterAllAttempts((org.jsecurity.authc.AuthenticationToken)var6, (org.jsecurity.authc.AuthenticationInfo)var7);
    char[] var15 = new char[] { '4', '#'};
    org.jsecurity.authc.UsernamePasswordToken var16 = new org.jsecurity.authc.UsernamePasswordToken("\u0000\u0000", var15);
    org.jsecurity.authc.SimpleAccount var17 = new org.jsecurity.authc.SimpleAccount();
    var17.setCredentialsExpired(false);
    var17.setCredentialsExpired(false);
    boolean var22 = var17.isCredentialsExpired();
    org.jsecurity.authc.AuthenticationInfo var23 = var2.afterAllAttempts((org.jsecurity.authc.AuthenticationToken)var16, (org.jsecurity.authc.AuthenticationInfo)var17);
    org.jsecurity.authz.UnauthenticatedException var27 = new org.jsecurity.authz.UnauthenticatedException();
    org.jsecurity.config.UnresolveableReferenceException var28 = new org.jsecurity.config.UnresolveableReferenceException("", (java.lang.Throwable)var27);
    org.jsecurity.cache.CacheException var29 = new org.jsecurity.cache.CacheException("org.jsecurity.config.ConfigurationException: dd\uFFFD", (java.lang.Throwable)var27);
    org.jsecurity.authc.SimpleAuthenticationInfo var31 = new org.jsecurity.authc.SimpleAuthenticationInfo((java.lang.Object)"org.jsecurity.config.ConfigurationException: dd\uFFFD", (java.lang.Object)var29, "a2b823b1e72eae2b727289df8a00a89df8a0bab6ad8a89c4c5c7a9b62a270000");
    org.jsecurity.subject.PrincipalCollection var32 = var31.getPrincipals();
    org.jsecurity.authc.AuthenticationInfo var33 = var1.afterAllAttempts((org.jsecurity.authc.AuthenticationToken)var16, (org.jsecurity.authc.AuthenticationInfo)var31);
    var0.setModularAuthenticationStrategy((org.jsecurity.authc.pam.ModularAuthenticationStrategy)var1);
    org.jsecurity.subject.RememberMeManager var35 = var0.getRememberMeManager();
    org.jsecurity.authc.pam.ModularRealmAuthenticator var36 = new org.jsecurity.authc.pam.ModularRealmAuthenticator();
    var0.setAuthenticator((org.jsecurity.authc.Authenticator)var36);
    org.jsecurity.subject.DelegatingSubject var38 = new org.jsecurity.subject.DelegatingSubject((org.jsecurity.mgt.SecurityManager)var0);
    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      var38.checkRole("5b549fba-5a5d-44e6-9c05-771d476c2e80");
      fail("Expected exception of type org.jsecurity.authz.UnauthenticatedException");
    } catch (org.jsecurity.authz.UnauthenticatedException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var4);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var10 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var11);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var15);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var22 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var23);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var32);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var33);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var35);

  }

  public void test167() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest5.test167");


    org.jsecurity.config.ReflectionBuilder var0 = new org.jsecurity.config.ReflectionBuilder();
    org.jsecurity.io.IniResource var1 = new org.jsecurity.io.IniResource();
    var1.setCharsetName("org.jsecurity.authz.UnauthorizedException: org.jsecurity.session.ExpiredSessionException: ");
    java.util.Map var4 = var1.getSections();
    java.util.Map var5 = var0.buildObjects(var4);
    org.jsecurity.config.ReflectionBuilder var6 = new org.jsecurity.config.ReflectionBuilder();
    org.jsecurity.io.IniResource var7 = new org.jsecurity.io.IniResource();
    var7.setCharsetName("org.jsecurity.authz.UnauthorizedException: org.jsecurity.session.ExpiredSessionException: ");
    java.util.Map var10 = var7.getSections();
    java.util.Map var11 = var6.buildObjects(var10);
    org.jsecurity.config.ReflectionBuilder var12 = new org.jsecurity.config.ReflectionBuilder();
    org.jsecurity.io.IniResource var13 = new org.jsecurity.io.IniResource();
    var13.setCharsetName("org.jsecurity.authz.UnauthorizedException: org.jsecurity.session.ExpiredSessionException: ");
    java.util.Map var16 = var13.getSections();
    java.util.Map var17 = var12.buildObjects(var16);
    java.util.Map var18 = var6.buildObjects(var17);
    java.util.Map var19 = var6.getObjects();
    org.jsecurity.config.ReflectionBuilder var20 = new org.jsecurity.config.ReflectionBuilder(var19);
    org.jsecurity.session.mgt.SimpleSession var21 = new org.jsecurity.session.mgt.SimpleSession();
    org.jsecurity.io.SerializationException var24 = new org.jsecurity.io.SerializationException("org.jsecurity.config.ConfigurationException: dd\uFFFD");
    org.jsecurity.authc.AccountException var25 = new org.jsecurity.authc.AccountException("a2b823b1e72eae2b727289df8a00a89df8a0bab6ad8a89c4c5c7a9b62a270000", (java.lang.Throwable)var24);
    var21.setId((java.io.Serializable)"a2b823b1e72eae2b727289df8a00a89df8a0bab6ad8a89c4c5c7a9b62a270000");
    org.jsecurity.config.ReflectionBuilder var27 = new org.jsecurity.config.ReflectionBuilder();
    org.jsecurity.config.ReflectionBuilder var28 = new org.jsecurity.config.ReflectionBuilder();
    org.jsecurity.io.IniResource var29 = new org.jsecurity.io.IniResource();
    var29.setCharsetName("org.jsecurity.authz.UnauthorizedException: org.jsecurity.session.ExpiredSessionException: ");
    java.util.Map var32 = var29.getSections();
    java.util.Map var33 = var28.buildObjects(var32);
    org.jsecurity.config.ReflectionBuilder var34 = new org.jsecurity.config.ReflectionBuilder();
    org.jsecurity.io.IniResource var35 = new org.jsecurity.io.IniResource();
    var35.setCharsetName("org.jsecurity.authz.UnauthorizedException: org.jsecurity.session.ExpiredSessionException: ");
    java.util.Map var38 = var35.getSections();
    java.util.Map var39 = var34.buildObjects(var38);
    java.util.Map var40 = var28.buildObjects(var39);
    java.util.Map var41 = var27.buildObjects(var40);
    var21.setAttributes(var41);
    var20.setObjects(var41);
    org.jsecurity.realm.ldap.DefaultLdapContextFactory var44 = new org.jsecurity.realm.ldap.DefaultLdapContextFactory();
    org.jsecurity.io.IniResource var45 = new org.jsecurity.io.IniResource();
    var45.setCharsetName("org.jsecurity.authz.UnauthorizedException: org.jsecurity.session.ExpiredSessionException: ");
    java.util.Map var48 = var45.getSections();
    var44.setAdditionalEnvironment(var48);
    var20.setObjects(var48);
    java.lang.String[] var56 = org.jsecurity.util.StringUtils.split("org.jsecurity.realm.text.TextConfigurationRealm_445", 'a', ' ', ' ');
    java.util.Set var57 = org.jsecurity.util.CollectionUtils.asSet((java.lang.Object[])var56);
    java.util.Set var59 = org.jsecurity.util.PermissionUtils.toPermissionStrings("org.jsecurity.config.ConfigurationException: dd\uFFFD");
    org.jsecurity.authz.SimpleAuthorizationInfo var60 = new org.jsecurity.authz.SimpleAuthorizationInfo(var59);
    org.jsecurity.authz.SimpleAuthorizingAccount var61 = new org.jsecurity.authz.SimpleAuthorizingAccount((java.lang.Object)var0, (java.lang.Object)var20, "ff1bb54d-80f9-4308-a260-ff3ddf1355e9", var57, var59);
    org.jsecurity.authz.SimpleAuthorizationInfo var62 = new org.jsecurity.authz.SimpleAuthorizationInfo();
    var62.addRole("a2b823b1e72eae2b727289df8a00a89df8a0bab6ad8a89c4c5c7a9b62a270000");
    org.jsecurity.session.UnknownSessionException var69 = new org.jsecurity.session.UnknownSessionException("dd\uFFFD", (java.io.Serializable)100.0f);
    org.jsecurity.subject.SubjectException var70 = new org.jsecurity.subject.SubjectException("dd\uFFFD", (java.lang.Throwable)var69);
    org.jsecurity.io.SerializationException var71 = new org.jsecurity.io.SerializationException("", (java.lang.Throwable)var70);
    java.lang.Throwable[] var72 = var70.getSuppressed();
    java.util.Set var73 = org.jsecurity.util.CollectionUtils.asSet((java.lang.Object[])var72);
    var62.addRoles((java.util.Collection)var73);
    org.jsecurity.realm.activedirectory.ActiveDirectoryRealm var75 = new org.jsecurity.realm.activedirectory.ActiveDirectoryRealm();
    var75.init();
    var75.setSystemPassword("dd\uFFFD");
    org.jsecurity.authz.aop.GuestAnnotationHandler var79 = new org.jsecurity.authz.aop.GuestAnnotationHandler();
    java.lang.Class var80 = var79.getAnnotationClass();
    var75.setAuthenticationTokenClass(var80);
    java.util.Collection var82 = org.jsecurity.util.CollectionUtils.emptyCollection(var80);
    var62.addStringPermissions(var82);
    var61.addAll(var82);
    var61.addRole("53214ab7-e301-497a-9ab1-a923014df137");
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var4);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var5);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var10);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var11);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var16);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var17);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var18);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var19);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var32);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var33);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var38);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var39);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var40);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var41);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var48);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var56);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var57);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var59);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var72);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var73);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var80);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var82);

  }

  public void test168() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest5.test168");


    org.jsecurity.util.AntPathMatcher var0 = new org.jsecurity.util.AntPathMatcher();
    boolean var3 = var0.matchStart("\uFFFD\uFFFD#\uFFFD\uFFFD.\uFFFD+rr\uFFFD\u07CA\u0000\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\u01E9\uFFFD*'\u0000\u0000", "ZGT/");
    boolean var6 = var0.matches("6464ff", "orgjsecurityauthcCredentialsException783ccd3148a842dd890fdf885a7baafAA==");
    boolean var9 = var0.matches("072be27b-6bd8-4897-92c3-67cf42b4a94f", "b74f4674-5868-4e94-a7d5-832b6ef0fcdb");
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var3 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var6 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var9 == false);

  }

  public void test169() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest5.test169");


    org.jsecurity.session.UnknownSessionException var3 = new org.jsecurity.session.UnknownSessionException("dd\uFFFD", (java.io.Serializable)100.0f);
    org.jsecurity.session.SessionException var5 = new org.jsecurity.session.SessionException("dd\uFFFD", (java.lang.Throwable)var3, (java.io.Serializable)0);
    org.jsecurity.authc.SimpleAuthenticationInfo var8 = new org.jsecurity.authc.SimpleAuthenticationInfo((java.lang.Object)0, (java.lang.Object)10, "hi!");
    org.jsecurity.codec.CodecException var11 = new org.jsecurity.codec.CodecException("dd\uFFFD");
    org.jsecurity.authc.ConcurrentAccessException var12 = new org.jsecurity.authc.ConcurrentAccessException("org.jsecurity.authz.UnauthorizedException: org.jsecurity.session.ExpiredSessionException: ", (java.lang.Throwable)var11);
    org.jsecurity.subject.SimplePrincipalCollection var14 = new org.jsecurity.subject.SimplePrincipalCollection((java.lang.Object)var11, "");
    org.jsecurity.authc.pam.FirstSuccessfulAuthenticationStrategy var15 = new org.jsecurity.authc.pam.FirstSuccessfulAuthenticationStrategy();
    org.jsecurity.authz.UnauthorizedException var17 = new org.jsecurity.authz.UnauthorizedException("org.jsecurity.config.ConfigurationException: dd\uFFFD");
    java.lang.Throwable[] var18 = var17.getSuppressed();
    java.util.List var19 = org.jsecurity.util.CollectionUtils.asList((java.lang.Object[])var18);
    org.jsecurity.authc.UsernamePasswordToken var20 = new org.jsecurity.authc.UsernamePasswordToken();
    java.lang.String var21 = var20.getUsername();
    java.net.InetAddress var22 = var20.getInetAddress();
    org.jsecurity.authc.AuthenticationInfo var23 = var15.beforeAllAttempts((java.util.Collection)var19, (org.jsecurity.authc.AuthenticationToken)var20);
    org.jsecurity.session.UnknownSessionException var28 = new org.jsecurity.session.UnknownSessionException("dd\uFFFD", (java.io.Serializable)100.0f);
    org.jsecurity.subject.SubjectException var29 = new org.jsecurity.subject.SubjectException("dd\uFFFD", (java.lang.Throwable)var28);
    org.jsecurity.io.SerializationException var30 = new org.jsecurity.io.SerializationException("", (java.lang.Throwable)var29);
    java.lang.Throwable[] var31 = var29.getSuppressed();
    java.util.Set var32 = org.jsecurity.util.CollectionUtils.asSet((java.lang.Object[])var31);
    org.jsecurity.authc.SimpleAccount var33 = new org.jsecurity.authc.SimpleAccount((org.jsecurity.subject.PrincipalCollection)var14, (java.lang.Object)var19, var32);
    var8.setPrincipals((org.jsecurity.subject.PrincipalCollection)var14);
    java.util.Collection var36 = var14.fromRealm("org.jsecurity.subject.SubjectException: dd\uFFFD");
    org.jsecurity.io.ResourceException var40 = new org.jsecurity.io.ResourceException("hi!");
    org.jsecurity.authc.UnknownAccountException var41 = new org.jsecurity.authc.UnknownAccountException((java.lang.Throwable)var40);
    org.jsecurity.session.StoppedSessionException var42 = new org.jsecurity.session.StoppedSessionException("dd\uFFFD", (java.io.Serializable)var40);
    org.jsecurity.session.UnknownSessionException var43 = new org.jsecurity.session.UnknownSessionException("org.jsecurity.authz.UnauthorizedException: org.jsecurity.session.ExpiredSessionException: ", (java.lang.Throwable)var40);
    java.io.InputStream var45 = org.jsecurity.util.ClassUtils.getResourceAsStream("");
    java.lang.Object[] var46 = new java.lang.Object[] { var45};
    java.util.List var47 = org.jsecurity.util.CollectionUtils.asList(var46);
    org.jsecurity.authc.pam.ModularRealmAuthenticator var48 = new org.jsecurity.authc.pam.ModularRealmAuthenticator(var47);
    org.jsecurity.subject.SimplePrincipalCollection var50 = new org.jsecurity.subject.SimplePrincipalCollection((java.util.Collection)var47, "org.jsecurity.authz.UnauthorizedException: org.jsecurity.session.ExpiredSessionException: ");
    org.jsecurity.session.UnknownSessionException var55 = new org.jsecurity.session.UnknownSessionException("dd\uFFFD", (java.io.Serializable)100.0f);
    org.jsecurity.session.SessionException var57 = new org.jsecurity.session.SessionException("dd\uFFFD", (java.lang.Throwable)var55, (java.io.Serializable)0);
    org.jsecurity.session.SessionException var58 = new org.jsecurity.session.SessionException("dd\uFFFD", (java.lang.Throwable)var55);
    var50.add((java.lang.Object)var58, "org.jsecurity.config.ConfigurationException: dd\uFFFD");
    java.util.Set var61 = var50.asSet();
    org.jsecurity.authc.SimpleAccount var62 = new org.jsecurity.authc.SimpleAccount((org.jsecurity.subject.PrincipalCollection)var14, (java.lang.Object)var40, var61);
    java.util.Set var63 = var14.asSet();
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var18);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var19);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var21);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var22);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var23);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var31);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var32);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var36);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var45);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var46);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var47);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var61);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var63);

  }

  public void test170() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest5.test170");


    org.jsecurity.realm.text.TextConfigurationRealm var0 = new org.jsecurity.realm.text.TextConfigurationRealm();
    java.io.InputStream var2 = org.jsecurity.util.ClassUtils.getResourceAsStream("");
    java.lang.Object[] var3 = new java.lang.Object[] { var2};
    java.util.List var4 = org.jsecurity.util.CollectionUtils.asList(var3);
    org.jsecurity.authc.pam.ModularRealmAuthenticator var5 = new org.jsecurity.authc.pam.ModularRealmAuthenticator(var4);
    org.jsecurity.subject.SimplePrincipalCollection var7 = new org.jsecurity.subject.SimplePrincipalCollection((java.util.Collection)var4, "org.jsecurity.authz.UnauthorizedException: org.jsecurity.session.ExpiredSessionException: ");
    org.jsecurity.session.UnknownSessionException var12 = new org.jsecurity.session.UnknownSessionException("dd\uFFFD", (java.io.Serializable)100.0f);
    org.jsecurity.session.SessionException var14 = new org.jsecurity.session.SessionException("dd\uFFFD", (java.lang.Throwable)var12, (java.io.Serializable)0);
    org.jsecurity.session.SessionException var15 = new org.jsecurity.session.SessionException("dd\uFFFD", (java.lang.Throwable)var12);
    var7.add((java.lang.Object)var15, "org.jsecurity.config.ConfigurationException: dd\uFFFD");
    var0.onLogout((org.jsecurity.subject.PrincipalCollection)var7);
    java.util.Set var20 = org.jsecurity.util.PermissionUtils.toPermissionStrings("org.jsecurity.config.ConfigurationException: dd\uFFFD");
    org.jsecurity.authz.SimpleAuthorizationInfo var21 = new org.jsecurity.authz.SimpleAuthorizationInfo(var20);
    org.jsecurity.authz.SimpleAuthorizingAccount var22 = new org.jsecurity.authz.SimpleAuthorizingAccount((org.jsecurity.subject.PrincipalCollection)var7, (java.lang.Object)var20);
    org.jsecurity.authz.SimpleAuthorizationInfo var23 = new org.jsecurity.authz.SimpleAuthorizationInfo();
    var23.addRole("a2b823b1e72eae2b727289df8a00a89df8a0bab6ad8a89c4c5c7a9b62a270000");
    org.jsecurity.session.UnknownSessionException var30 = new org.jsecurity.session.UnknownSessionException("dd\uFFFD", (java.io.Serializable)100.0f);
    org.jsecurity.subject.SubjectException var31 = new org.jsecurity.subject.SubjectException("dd\uFFFD", (java.lang.Throwable)var30);
    org.jsecurity.io.SerializationException var32 = new org.jsecurity.io.SerializationException("", (java.lang.Throwable)var31);
    java.lang.Throwable[] var33 = var31.getSuppressed();
    java.util.Set var34 = org.jsecurity.util.CollectionUtils.asSet((java.lang.Object[])var33);
    var23.addRoles((java.util.Collection)var34);
    var22.checkPermissions((java.util.Collection)var34);
    org.jsecurity.session.mgt.SimpleSession var37 = new org.jsecurity.session.mgt.SimpleSession();
    var37.setTimeout((-1L));
    org.jsecurity.session.mgt.SimpleSession var40 = new org.jsecurity.session.mgt.SimpleSession();
    java.util.Date var41 = var40.getLastAccessTime();
    var37.setLastAccessTime(var41);
    org.jsecurity.session.UnknownSessionException var47 = new org.jsecurity.session.UnknownSessionException("dd\uFFFD", (java.io.Serializable)100.0f);
    org.jsecurity.subject.SubjectException var48 = new org.jsecurity.subject.SubjectException("dd\uFFFD", (java.lang.Throwable)var47);
    org.jsecurity.io.SerializationException var49 = new org.jsecurity.io.SerializationException("", (java.lang.Throwable)var48);
    java.lang.Throwable[] var50 = var48.getSuppressed();
    java.lang.Throwable[] var51 = var48.getSuppressed();
    org.jsecurity.authz.SimpleAuthorizationInfo var54 = new org.jsecurity.authz.SimpleAuthorizationInfo();
    var54.addRole("a2b823b1e72eae2b727289df8a00a89df8a0bab6ad8a89c4c5c7a9b62a270000");
    org.jsecurity.session.UnknownSessionException var61 = new org.jsecurity.session.UnknownSessionException("dd\uFFFD", (java.io.Serializable)100.0f);
    org.jsecurity.subject.SubjectException var62 = new org.jsecurity.subject.SubjectException("dd\uFFFD", (java.lang.Throwable)var61);
    org.jsecurity.io.SerializationException var63 = new org.jsecurity.io.SerializationException("", (java.lang.Throwable)var62);
    java.lang.Throwable[] var64 = var62.getSuppressed();
    java.util.Set var65 = org.jsecurity.util.CollectionUtils.asSet((java.lang.Object[])var64);
    var54.addRoles((java.util.Collection)var65);
    java.io.InputStream var68 = org.jsecurity.util.ClassUtils.getResourceAsStream("");
    java.lang.Object[] var69 = new java.lang.Object[] { var68};
    java.util.List var70 = org.jsecurity.util.CollectionUtils.asList(var69);
    org.jsecurity.authc.pam.ModularRealmAuthenticator var71 = new org.jsecurity.authc.pam.ModularRealmAuthenticator(var70);
    org.jsecurity.subject.SimplePrincipalCollection var73 = new org.jsecurity.subject.SimplePrincipalCollection((java.util.Collection)var70, "org.jsecurity.authz.UnauthorizedException: org.jsecurity.session.ExpiredSessionException: ");
    org.jsecurity.session.UnknownSessionException var78 = new org.jsecurity.session.UnknownSessionException("dd\uFFFD", (java.io.Serializable)100.0f);
    org.jsecurity.session.SessionException var80 = new org.jsecurity.session.SessionException("dd\uFFFD", (java.lang.Throwable)var78, (java.io.Serializable)0);
    org.jsecurity.session.SessionException var81 = new org.jsecurity.session.SessionException("dd\uFFFD", (java.lang.Throwable)var78);
    var73.add((java.lang.Object)var81, "org.jsecurity.config.ConfigurationException: dd\uFFFD");
    java.util.Set var84 = var73.asSet();
    org.jsecurity.authz.SimpleAuthorizingAccount var85 = new org.jsecurity.authz.SimpleAuthorizingAccount((java.lang.Object)var51, (java.lang.Object)"\u0000\u0000\u0000", "\u0000\u0000\u0000", var65, var84);
    java.lang.Object var86 = var37.removeAttribute((java.lang.Object)var65);
    java.util.Collection var87 = var37.getAttributeKeys();
    boolean var88 = var22.hasAllRoles(var87);
    org.jsecurity.authz.SimpleRole var90 = var22.getRole("a2b823b1e72eae2b727289df8a00a89df8a0bab6ad8a89c4c5c7a9b62a270000");
    java.util.Set var91 = var22.getSimpleRoles();
    var22.addRole("9e3d1131-586f-4bbb-9a00-b1186bff9c0b");
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var2);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var3);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var4);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var20);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var33);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var34);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var41);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var50);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var51);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var64);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var65);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var68);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var69);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var70);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var84);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var86);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var87);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var88 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var90);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var91);

  }

  public void test171() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest5.test171");


    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      java.io.InputStream var1 = org.jsecurity.io.ResourceUtils.getInputStreamForPath("AAA=");
      fail("Expected exception of type java.io.FileNotFoundException");
    } catch (java.io.FileNotFoundException e) {
      // Expected exception.
    }

  }

  public void test172() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest5.test172");


    org.jsecurity.realm.activedirectory.ActiveDirectoryRealm var0 = new org.jsecurity.realm.activedirectory.ActiveDirectoryRealm();
    org.jsecurity.authc.credential.Sha256CredentialsMatcher var1 = new org.jsecurity.authc.credential.Sha256CredentialsMatcher();
    var0.setCredentialsMatcher((org.jsecurity.authc.credential.CredentialsMatcher)var1);
    java.lang.String var3 = var0.getAuthorizationCacheName();
    org.jsecurity.authc.UsernamePasswordToken var4 = new org.jsecurity.authc.UsernamePasswordToken();
    java.lang.String var5 = var4.getUsername();
    java.lang.Object var6 = var4.getPrincipal();
    boolean var7 = var0.supports((org.jsecurity.authc.AuthenticationToken)var4);
    org.jsecurity.config.ReflectionBuilder var8 = new org.jsecurity.config.ReflectionBuilder();
    org.jsecurity.io.IniResource var9 = new org.jsecurity.io.IniResource();
    var9.setCharsetName("org.jsecurity.authz.UnauthorizedException: org.jsecurity.session.ExpiredSessionException: ");
    java.util.Map var12 = var9.getSections();
    java.util.Map var13 = var8.buildObjects(var12);
    org.jsecurity.realm.activedirectory.ActiveDirectoryRealm var14 = new org.jsecurity.realm.activedirectory.ActiveDirectoryRealm();
    org.jsecurity.authc.credential.Sha256CredentialsMatcher var15 = new org.jsecurity.authc.credential.Sha256CredentialsMatcher();
    var14.setCredentialsMatcher((org.jsecurity.authc.credential.CredentialsMatcher)var15);
    java.lang.String var17 = var14.getAuthorizationCacheName();
    var14.setUrl("hi!");
    org.jsecurity.io.IniResource var20 = new org.jsecurity.io.IniResource();
    java.util.Map var21 = var20.getSections();
    java.util.Map var22 = var20.getSections();
    var14.setGroupRolesMap(var22);
    org.jsecurity.config.ReflectionBuilder var24 = new org.jsecurity.config.ReflectionBuilder(var22);
    org.jsecurity.config.ReflectionBuilder var25 = new org.jsecurity.config.ReflectionBuilder();
    org.jsecurity.io.IniResource var26 = new org.jsecurity.io.IniResource();
    var26.setCharsetName("org.jsecurity.authz.UnauthorizedException: org.jsecurity.session.ExpiredSessionException: ");
    java.util.Map var29 = var26.getSections();
    java.util.Map var30 = var25.buildObjects(var29);
    var24.setObjects(var30);
    var8.setObjects(var30);
    var0.setGroupRolesMap(var30);
    var0.setSystemUsername("88340016-ef51-4123-8332-9557d9abe70e");
    var0.setAuthorizationCacheName("\uFFFD\uFFFD#\uFFFD\uFFFD.\uFFFD+rr\uFFFD\u07CA\u0000\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\u01E9\uFFFD*'\u0000\u0000");
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var3);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var5);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var6);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var7 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var12);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var13);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var17);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var21);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var22);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var29);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var30);

  }

  public void test173() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest5.test173");


    org.jsecurity.realm.activedirectory.ActiveDirectoryRealm var0 = new org.jsecurity.realm.activedirectory.ActiveDirectoryRealm();
    org.jsecurity.authc.credential.Sha256CredentialsMatcher var1 = new org.jsecurity.authc.credential.Sha256CredentialsMatcher();
    var0.setCredentialsMatcher((org.jsecurity.authc.credential.CredentialsMatcher)var1);
    var0.initAuthorizationCache();
    org.jsecurity.authc.credential.Sha512CredentialsMatcher var4 = new org.jsecurity.authc.credential.Sha512CredentialsMatcher();
    var4.setHashIterations(1);
    var0.setCredentialsMatcher((org.jsecurity.authc.credential.CredentialsMatcher)var4);
    boolean var8 = var4.isStoredCredentialsHexEncoded();
    boolean var9 = var4.isStoredCredentialsHexEncoded();
    boolean var10 = var4.isStoredCredentialsHexEncoded();
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var8 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var9 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var10 == true);

  }

  public void test174() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest5.test174");


    org.jsecurity.cache.ehcache.EhCacheManager var0 = new org.jsecurity.cache.ehcache.EhCacheManager();
    net.sf.ehcache.CacheManager var1 = var0.getCacheManager();
    var0.init();
    var0.setCacheManagerConfigFile("c545f9de-9859-467d-991b-aff81446ecc4");
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var1);

  }

  public void test175() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest5.test175");


    java.io.InputStream var1 = org.jsecurity.util.ClassUtils.getResourceAsStream("");
    java.lang.Object[] var2 = new java.lang.Object[] { var1};
    java.util.List var3 = org.jsecurity.util.CollectionUtils.asList(var2);
    org.jsecurity.authc.pam.ModularRealmAuthenticator var4 = new org.jsecurity.authc.pam.ModularRealmAuthenticator(var3);
    org.jsecurity.authc.pam.AllSuccessfulModularAuthenticationStrategy var5 = new org.jsecurity.authc.pam.AllSuccessfulModularAuthenticationStrategy();
    var4.setModularAuthenticationStrategy((org.jsecurity.authc.pam.ModularAuthenticationStrategy)var5);
    org.jsecurity.authz.SimpleAuthorizationInfo var7 = new org.jsecurity.authz.SimpleAuthorizationInfo();
    var7.addStringPermission("hi!");
    java.io.InputStream var11 = org.jsecurity.util.ClassUtils.getResourceAsStream("");
    java.lang.Object[] var12 = new java.lang.Object[] { var11};
    java.util.List var13 = org.jsecurity.util.CollectionUtils.asList(var12);
    var7.addRoles((java.util.Collection)var13);
    var4.setAuthenticationListeners((java.util.Collection)var13);
    org.jsecurity.realm.activedirectory.ActiveDirectoryRealm var16 = new org.jsecurity.realm.activedirectory.ActiveDirectoryRealm();
    var16.setPrincipalSuffix("");
    var4.setRealm((org.jsecurity.realm.Realm)var16);
    org.jsecurity.authc.pam.FirstSuccessfulAuthenticationStrategy var20 = new org.jsecurity.authc.pam.FirstSuccessfulAuthenticationStrategy();
    org.jsecurity.authz.UnauthorizedException var22 = new org.jsecurity.authz.UnauthorizedException("org.jsecurity.config.ConfigurationException: dd\uFFFD");
    java.lang.Throwable[] var23 = var22.getSuppressed();
    java.util.List var24 = org.jsecurity.util.CollectionUtils.asList((java.lang.Object[])var23);
    org.jsecurity.authc.UsernamePasswordToken var25 = new org.jsecurity.authc.UsernamePasswordToken();
    java.lang.String var26 = var25.getUsername();
    java.net.InetAddress var27 = var25.getInetAddress();
    org.jsecurity.authc.AuthenticationInfo var28 = var20.beforeAllAttempts((java.util.Collection)var24, (org.jsecurity.authc.AuthenticationToken)var25);
    var4.setModularAuthenticationStrategy((org.jsecurity.authc.pam.ModularAuthenticationStrategy)var20);
    org.jsecurity.realm.activedirectory.ActiveDirectoryRealm var30 = new org.jsecurity.realm.activedirectory.ActiveDirectoryRealm();
    var30.init();
    var30.setSystemPassword("dd\uFFFD");
    var4.setRealm((org.jsecurity.realm.Realm)var30);
    var30.setSystemUsername("7f459141-420b-4ce9-8486-8c578b9f7c7e");
    java.lang.String var37 = var30.getName();
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var1);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var2);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var3);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var11);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var12);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var13);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var23);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var24);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var26);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var27);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var28);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var37 + "' != '" + "org.jsecurity.realm.activedirectory.ActiveDirectoryRealm_3463"+ "'", var37.equals("org.jsecurity.realm.activedirectory.ActiveDirectoryRealm_3463"));

  }

  public void test176() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest5.test176");


    org.jsecurity.realm.text.TextConfigurationRealm var0 = new org.jsecurity.realm.text.TextConfigurationRealm();
    java.io.InputStream var2 = org.jsecurity.util.ClassUtils.getResourceAsStream("");
    java.lang.Object[] var3 = new java.lang.Object[] { var2};
    java.util.List var4 = org.jsecurity.util.CollectionUtils.asList(var3);
    org.jsecurity.authc.pam.ModularRealmAuthenticator var5 = new org.jsecurity.authc.pam.ModularRealmAuthenticator(var4);
    org.jsecurity.subject.SimplePrincipalCollection var7 = new org.jsecurity.subject.SimplePrincipalCollection((java.util.Collection)var4, "org.jsecurity.authz.UnauthorizedException: org.jsecurity.session.ExpiredSessionException: ");
    org.jsecurity.session.UnknownSessionException var12 = new org.jsecurity.session.UnknownSessionException("dd\uFFFD", (java.io.Serializable)100.0f);
    org.jsecurity.session.SessionException var14 = new org.jsecurity.session.SessionException("dd\uFFFD", (java.lang.Throwable)var12, (java.io.Serializable)0);
    org.jsecurity.session.SessionException var15 = new org.jsecurity.session.SessionException("dd\uFFFD", (java.lang.Throwable)var12);
    var7.add((java.lang.Object)var15, "org.jsecurity.config.ConfigurationException: dd\uFFFD");
    var0.onLogout((org.jsecurity.subject.PrincipalCollection)var7);
    java.util.Collection var20 = var7.fromRealm("\u0000\u0000\u0000");
    java.util.Set var21 = var7.getRealmNames();
    org.jsecurity.authc.SimpleAuthenticationInfo var23 = new org.jsecurity.authc.SimpleAuthenticationInfo((org.jsecurity.subject.PrincipalCollection)var7, (java.lang.Object)"org.jsecurity.realm.text.PropertiesRealm_3199");
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var2);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var3);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var4);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var20);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var21);

  }

  public void test177() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest5.test177");


    org.jsecurity.mgt.DefaultSecurityManager var0 = new org.jsecurity.mgt.DefaultSecurityManager();
    java.io.InputStream var2 = org.jsecurity.util.ClassUtils.getResourceAsStream("");
    java.lang.Object[] var3 = new java.lang.Object[] { var2};
    java.util.List var4 = org.jsecurity.util.CollectionUtils.asList(var3);
    org.jsecurity.authc.pam.ModularRealmAuthenticator var5 = new org.jsecurity.authc.pam.ModularRealmAuthenticator(var4);
    org.jsecurity.authc.pam.AllSuccessfulModularAuthenticationStrategy var6 = new org.jsecurity.authc.pam.AllSuccessfulModularAuthenticationStrategy();
    var5.setModularAuthenticationStrategy((org.jsecurity.authc.pam.ModularAuthenticationStrategy)var6);
    org.jsecurity.authz.SimpleAuthorizationInfo var8 = new org.jsecurity.authz.SimpleAuthorizationInfo();
    var8.addStringPermission("hi!");
    java.io.InputStream var12 = org.jsecurity.util.ClassUtils.getResourceAsStream("");
    java.lang.Object[] var13 = new java.lang.Object[] { var12};
    java.util.List var14 = org.jsecurity.util.CollectionUtils.asList(var13);
    var8.addRoles((java.util.Collection)var14);
    var5.setAuthenticationListeners((java.util.Collection)var14);
    var0.setSessionListeners((java.util.Collection)var14);
    org.jsecurity.realm.text.TextConfigurationRealm var18 = new org.jsecurity.realm.text.TextConfigurationRealm();
    java.io.InputStream var20 = org.jsecurity.util.ClassUtils.getResourceAsStream("");
    java.lang.Object[] var21 = new java.lang.Object[] { var20};
    java.util.List var22 = org.jsecurity.util.CollectionUtils.asList(var21);
    org.jsecurity.authc.pam.ModularRealmAuthenticator var23 = new org.jsecurity.authc.pam.ModularRealmAuthenticator(var22);
    org.jsecurity.subject.SimplePrincipalCollection var25 = new org.jsecurity.subject.SimplePrincipalCollection((java.util.Collection)var22, "org.jsecurity.authz.UnauthorizedException: org.jsecurity.session.ExpiredSessionException: ");
    org.jsecurity.session.UnknownSessionException var30 = new org.jsecurity.session.UnknownSessionException("dd\uFFFD", (java.io.Serializable)100.0f);
    org.jsecurity.session.SessionException var32 = new org.jsecurity.session.SessionException("dd\uFFFD", (java.lang.Throwable)var30, (java.io.Serializable)0);
    org.jsecurity.session.SessionException var33 = new org.jsecurity.session.SessionException("dd\uFFFD", (java.lang.Throwable)var30);
    var25.add((java.lang.Object)var33, "org.jsecurity.config.ConfigurationException: dd\uFFFD");
    var18.onLogout((org.jsecurity.subject.PrincipalCollection)var25);
    org.jsecurity.authc.pam.FirstSuccessfulAuthenticationStrategy var37 = new org.jsecurity.authc.pam.FirstSuccessfulAuthenticationStrategy();
    org.jsecurity.authz.UnauthorizedException var39 = new org.jsecurity.authz.UnauthorizedException("org.jsecurity.config.ConfigurationException: dd\uFFFD");
    java.lang.Throwable[] var40 = var39.getSuppressed();
    java.util.List var41 = org.jsecurity.util.CollectionUtils.asList((java.lang.Object[])var40);
    org.jsecurity.authc.UsernamePasswordToken var42 = new org.jsecurity.authc.UsernamePasswordToken();
    java.lang.String var43 = var42.getUsername();
    java.net.InetAddress var44 = var42.getInetAddress();
    org.jsecurity.authc.AuthenticationInfo var45 = var37.beforeAllAttempts((java.util.Collection)var41, (org.jsecurity.authc.AuthenticationToken)var42);
    boolean[] var46 = var0.hasRoles((org.jsecurity.subject.PrincipalCollection)var25, var41);
    org.jsecurity.codec.CodecException var49 = new org.jsecurity.codec.CodecException("dd\uFFFD");
    org.jsecurity.authc.ConcurrentAccessException var50 = new org.jsecurity.authc.ConcurrentAccessException("org.jsecurity.authz.UnauthorizedException: org.jsecurity.session.ExpiredSessionException: ", (java.lang.Throwable)var49);
    org.jsecurity.subject.SimplePrincipalCollection var52 = new org.jsecurity.subject.SimplePrincipalCollection((java.lang.Object)var49, "");
    java.io.InputStream var54 = org.jsecurity.util.ClassUtils.getResourceAsStream("");
    java.lang.Object[] var55 = new java.lang.Object[] { var54};
    java.util.List var56 = org.jsecurity.util.CollectionUtils.asList(var55);
    org.jsecurity.authc.pam.ModularRealmAuthenticator var57 = new org.jsecurity.authc.pam.ModularRealmAuthenticator(var56);
    var52.addAll((java.util.Collection)var56, "\u0000\u0000");
    var0.setSessionListeners((java.util.Collection)var56);
    org.jsecurity.authc.pam.ModularRealmAuthenticator var61 = new org.jsecurity.authc.pam.ModularRealmAuthenticator(var56);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var2);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var3);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var4);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var12);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var13);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var14);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var20);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var21);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var22);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var40);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var41);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var43);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var44);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var45);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var46);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var54);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var55);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var56);

  }

  public void test178() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest5.test178");


    org.jsecurity.session.mgt.eis.MemorySessionDAO var0 = new org.jsecurity.session.mgt.eis.MemorySessionDAO();
    org.jsecurity.cache.Cache var1 = var0.getActiveSessionsCache();
    org.jsecurity.cache.CacheManager var2 = var0.getCacheManager();
    org.jsecurity.cache.HashtableCacheManager var3 = new org.jsecurity.cache.HashtableCacheManager();
    org.jsecurity.cache.Cache var5 = var3.getCache("\u0000\u0000");
    var0.setActiveSessionsCache(var5);
    java.io.InputStream var8 = org.jsecurity.util.ClassUtils.getResourceAsStream("");
    java.lang.Object[] var9 = new java.lang.Object[] { var8};
    java.util.List var10 = org.jsecurity.util.CollectionUtils.asList(var9);
    org.jsecurity.authc.pam.ModularRealmAuthenticator var11 = new org.jsecurity.authc.pam.ModularRealmAuthenticator(var10);
    org.jsecurity.authc.pam.AllSuccessfulModularAuthenticationStrategy var12 = new org.jsecurity.authc.pam.AllSuccessfulModularAuthenticationStrategy();
    var11.setModularAuthenticationStrategy((org.jsecurity.authc.pam.ModularAuthenticationStrategy)var12);
    org.jsecurity.authz.SimpleAuthorizationInfo var14 = new org.jsecurity.authz.SimpleAuthorizationInfo();
    var14.addStringPermission("hi!");
    java.io.InputStream var18 = org.jsecurity.util.ClassUtils.getResourceAsStream("");
    java.lang.Object[] var19 = new java.lang.Object[] { var18};
    java.util.List var20 = org.jsecurity.util.CollectionUtils.asList(var19);
    var14.addRoles((java.util.Collection)var20);
    var11.setAuthenticationListeners((java.util.Collection)var20);
    org.jsecurity.realm.activedirectory.ActiveDirectoryRealm var23 = new org.jsecurity.realm.activedirectory.ActiveDirectoryRealm();
    var23.setPrincipalSuffix("");
    var11.setRealm((org.jsecurity.realm.Realm)var23);
    org.jsecurity.cache.HashtableCacheManager var27 = new org.jsecurity.cache.HashtableCacheManager();
    org.jsecurity.cache.Cache var29 = var27.getCache("\u0000\u0000");
    var23.setAuthorizationCache(var29);
    var0.setActiveSessionsCache(var29);
    org.jsecurity.session.mgt.SimpleSession var32 = new org.jsecurity.session.mgt.SimpleSession();
    java.io.Serializable var33 = var0.create((org.jsecurity.session.Session)var32);
    org.jsecurity.session.mgt.SimpleSession var34 = new org.jsecurity.session.mgt.SimpleSession();
    var34.touch();
    var34.validate();
    org.jsecurity.session.mgt.SimpleSession var37 = new org.jsecurity.session.mgt.SimpleSession();
    var37.setTimeout((-1L));
    org.jsecurity.session.mgt.SimpleSession var40 = new org.jsecurity.session.mgt.SimpleSession();
    java.util.Date var41 = var40.getLastAccessTime();
    var37.setLastAccessTime(var41);
    org.jsecurity.session.mgt.SimpleSession var43 = new org.jsecurity.session.mgt.SimpleSession();
    java.util.Date var44 = var43.getLastAccessTime();
    var37.setStopTimestamp(var44);
    var34.setLastAccessTime(var44);
    var32.setLastAccessTime(var44);
    org.jsecurity.session.mgt.ImmutableProxiedSession var48 = new org.jsecurity.session.mgt.ImmutableProxiedSession((org.jsecurity.session.Session)var32);
    java.util.Date var49 = var48.getStartTimestamp();
    java.util.Date var50 = var48.getStartTimestamp();
    java.util.Date var51 = var48.getLastAccessTime();
    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      java.lang.Object var53 = var48.removeAttribute((java.lang.Object)"1b39de25-f16c-4a9d-b9fb-4d288c458953");
      fail("Expected exception of type org.jsecurity.session.InvalidSessionException");
    } catch (org.jsecurity.session.InvalidSessionException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var1);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var2);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var5);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var8);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var9);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var10);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var18);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var19);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var20);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var29);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var33 + "' != '" + "857efb2c-4366-4f6c-be5c-6ccb6f0efd93"+ "'", var33.equals("857efb2c-4366-4f6c-be5c-6ccb6f0efd93"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var41);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var44);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var49);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var50);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var51);

  }

  public void test179() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest5.test179");


    org.jsecurity.io.ResourceException var5 = new org.jsecurity.io.ResourceException("hi!");
    org.jsecurity.codec.CodecException var6 = new org.jsecurity.codec.CodecException((java.lang.Throwable)var5);
    org.jsecurity.JSecurityException var7 = new org.jsecurity.JSecurityException("a2b823b1e72eae2b727289df8a00a89df8a0bab6ad8a89c4c5c7a9b62a270000", (java.lang.Throwable)var5);
    org.jsecurity.authc.LockedAccountException var8 = new org.jsecurity.authc.LockedAccountException("a2b823b1e72eae2b727289df8a00a89df8a0bab6ad8a89c4c5c7a9b62a270000", (java.lang.Throwable)var7);
    org.jsecurity.session.InvalidSessionException var9 = new org.jsecurity.session.InvalidSessionException("org.jsecurity.authz.UnauthorizedException: org.jsecurity.session.ExpiredSessionException: ", (java.lang.Throwable)var8);
    org.jsecurity.authc.AccountException var10 = new org.jsecurity.authc.AccountException("org.jsecurity.realm.text.PropertiesRealm_2075", (java.lang.Throwable)var8);
    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      org.jsecurity.crypto.hash.Md2Hash var11 = new org.jsecurity.crypto.hash.Md2Hash((java.lang.Object)var8);
      fail("Expected exception of type org.jsecurity.codec.CodecException");
    } catch (org.jsecurity.codec.CodecException e) {
      // Expected exception.
    }

  }

  public void test180() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest5.test180");


    org.jsecurity.authc.pam.AllSuccessfulModularAuthenticationStrategy var3 = new org.jsecurity.authc.pam.AllSuccessfulModularAuthenticationStrategy();
    char[] var5 = new char[] { };
    org.jsecurity.authc.UsernamePasswordToken var7 = new org.jsecurity.authc.UsernamePasswordToken("hi!", var5, true);
    org.jsecurity.authc.SimpleAccount var8 = new org.jsecurity.authc.SimpleAccount();
    var8.setCredentialsExpired(false);
    boolean var11 = var8.isLocked();
    org.jsecurity.authc.AuthenticationInfo var12 = var3.afterAllAttempts((org.jsecurity.authc.AuthenticationToken)var7, (org.jsecurity.authc.AuthenticationInfo)var8);
    char[] var15 = new char[] { };
    org.jsecurity.authc.UsernamePasswordToken var17 = new org.jsecurity.authc.UsernamePasswordToken("hi!", var15, true);
    org.jsecurity.authc.UsernamePasswordToken var18 = new org.jsecurity.authc.UsernamePasswordToken("\u0000\u0000", var15);
    var7.setPassword(var15);
    org.jsecurity.authc.UsernamePasswordToken var20 = new org.jsecurity.authc.UsernamePasswordToken("\u0000\u0000\u0000", var15);
    org.jsecurity.session.InvalidSessionException var21 = new org.jsecurity.session.InvalidSessionException("org.jsecurity.authc.IncorrectCredentialsException: \u0000\u0000", (java.io.Serializable)"\u0000\u0000\u0000");
    org.jsecurity.io.SerializationException var22 = new org.jsecurity.io.SerializationException((java.lang.Throwable)var21);
    org.jsecurity.cache.CacheException var23 = new org.jsecurity.cache.CacheException("986af112-265f-4ca0-a205-3bd02cf4963c", (java.lang.Throwable)var21);
    org.jsecurity.session.StoppedSessionException var24 = new org.jsecurity.session.StoppedSessionException((java.lang.Throwable)var23);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var5);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var11 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var12);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var15);

  }

  public void test181() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest5.test181");


    org.jsecurity.session.mgt.SimpleSession var0 = new org.jsecurity.session.mgt.SimpleSession();
    var0.setTimeout((-1L));
    org.jsecurity.session.mgt.SimpleSession var3 = new org.jsecurity.session.mgt.SimpleSession();
    java.util.Date var4 = var3.getLastAccessTime();
    var0.setLastAccessTime(var4);
    org.jsecurity.session.mgt.SimpleSession var6 = new org.jsecurity.session.mgt.SimpleSession();
    java.util.Date var7 = var6.getLastAccessTime();
    var0.setStopTimestamp(var7);
    java.net.InetAddress var9 = var0.getHostAddress();
    var0.setTimeout(100L);
    org.jsecurity.session.mgt.SimpleSession var12 = new org.jsecurity.session.mgt.SimpleSession();
    var12.setTimeout((-1L));
    org.jsecurity.session.mgt.SimpleSession var15 = new org.jsecurity.session.mgt.SimpleSession();
    java.util.Date var16 = var15.getLastAccessTime();
    var12.setLastAccessTime(var16);
    org.jsecurity.session.UnknownSessionException var22 = new org.jsecurity.session.UnknownSessionException("dd\uFFFD", (java.io.Serializable)100.0f);
    org.jsecurity.subject.SubjectException var23 = new org.jsecurity.subject.SubjectException("dd\uFFFD", (java.lang.Throwable)var22);
    org.jsecurity.io.SerializationException var24 = new org.jsecurity.io.SerializationException("", (java.lang.Throwable)var23);
    java.lang.Throwable[] var25 = var23.getSuppressed();
    java.lang.Throwable[] var26 = var23.getSuppressed();
    org.jsecurity.authz.SimpleAuthorizationInfo var29 = new org.jsecurity.authz.SimpleAuthorizationInfo();
    var29.addRole("a2b823b1e72eae2b727289df8a00a89df8a0bab6ad8a89c4c5c7a9b62a270000");
    org.jsecurity.session.UnknownSessionException var36 = new org.jsecurity.session.UnknownSessionException("dd\uFFFD", (java.io.Serializable)100.0f);
    org.jsecurity.subject.SubjectException var37 = new org.jsecurity.subject.SubjectException("dd\uFFFD", (java.lang.Throwable)var36);
    org.jsecurity.io.SerializationException var38 = new org.jsecurity.io.SerializationException("", (java.lang.Throwable)var37);
    java.lang.Throwable[] var39 = var37.getSuppressed();
    java.util.Set var40 = org.jsecurity.util.CollectionUtils.asSet((java.lang.Object[])var39);
    var29.addRoles((java.util.Collection)var40);
    java.io.InputStream var43 = org.jsecurity.util.ClassUtils.getResourceAsStream("");
    java.lang.Object[] var44 = new java.lang.Object[] { var43};
    java.util.List var45 = org.jsecurity.util.CollectionUtils.asList(var44);
    org.jsecurity.authc.pam.ModularRealmAuthenticator var46 = new org.jsecurity.authc.pam.ModularRealmAuthenticator(var45);
    org.jsecurity.subject.SimplePrincipalCollection var48 = new org.jsecurity.subject.SimplePrincipalCollection((java.util.Collection)var45, "org.jsecurity.authz.UnauthorizedException: org.jsecurity.session.ExpiredSessionException: ");
    org.jsecurity.session.UnknownSessionException var53 = new org.jsecurity.session.UnknownSessionException("dd\uFFFD", (java.io.Serializable)100.0f);
    org.jsecurity.session.SessionException var55 = new org.jsecurity.session.SessionException("dd\uFFFD", (java.lang.Throwable)var53, (java.io.Serializable)0);
    org.jsecurity.session.SessionException var56 = new org.jsecurity.session.SessionException("dd\uFFFD", (java.lang.Throwable)var53);
    var48.add((java.lang.Object)var56, "org.jsecurity.config.ConfigurationException: dd\uFFFD");
    java.util.Set var59 = var48.asSet();
    org.jsecurity.authz.SimpleAuthorizingAccount var60 = new org.jsecurity.authz.SimpleAuthorizingAccount((java.lang.Object)var26, (java.lang.Object)"\u0000\u0000\u0000", "\u0000\u0000\u0000", var40, var59);
    java.lang.Object var61 = var12.removeAttribute((java.lang.Object)var40);
    var12.validate();
    java.util.Date var63 = var12.getLastAccessTime();
    var0.setStopTimestamp(var63);
    org.jsecurity.session.mgt.SimpleSession var66 = new org.jsecurity.session.mgt.SimpleSession();
    var66.setTimeout((-1L));
    org.jsecurity.session.mgt.SimpleSession var69 = new org.jsecurity.session.mgt.SimpleSession();
    java.util.Date var70 = var69.getLastAccessTime();
    var66.setLastAccessTime(var70);
    org.jsecurity.session.mgt.SimpleSession var72 = new org.jsecurity.session.mgt.SimpleSession();
    java.util.Date var73 = var72.getLastAccessTime();
    var66.setStopTimestamp(var73);
    java.net.InetAddress var75 = var66.getHostAddress();
    org.jsecurity.session.InvalidSessionException var76 = new org.jsecurity.session.InvalidSessionException("\u0000\u0000\u0000", (java.io.Serializable)var66);
    java.util.Collection var77 = var66.getAttributeKeys();
    org.jsecurity.authc.credential.Md5CredentialsMatcher var78 = new org.jsecurity.authc.credential.Md5CredentialsMatcher();
    boolean var79 = var78.isHashSalted();
    boolean var80 = var78.isHashSalted();
    int var81 = var78.getHashIterations();
    var0.setAttribute((java.lang.Object)var66, (java.lang.Object)var78);
    org.jsecurity.session.ProxiedSession var83 = new org.jsecurity.session.ProxiedSession((org.jsecurity.session.Session)var0);
    java.util.Map var84 = var0.getAttributes();
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var4);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var7);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var9);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var16);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var25);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var26);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var39);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var40);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var43);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var44);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var45);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var59);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var61);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var63);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var70);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var73);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var75);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var77);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var79 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var80 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var81 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var84);

  }

  public void test182() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest5.test182");


    org.jsecurity.mgt.DefaultSecurityManager var0 = new org.jsecurity.mgt.DefaultSecurityManager();
    java.io.InputStream var2 = org.jsecurity.util.ClassUtils.getResourceAsStream("");
    java.lang.Object[] var3 = new java.lang.Object[] { var2};
    java.util.List var4 = org.jsecurity.util.CollectionUtils.asList(var3);
    org.jsecurity.authc.pam.ModularRealmAuthenticator var5 = new org.jsecurity.authc.pam.ModularRealmAuthenticator(var4);
    org.jsecurity.authc.pam.AllSuccessfulModularAuthenticationStrategy var6 = new org.jsecurity.authc.pam.AllSuccessfulModularAuthenticationStrategy();
    var5.setModularAuthenticationStrategy((org.jsecurity.authc.pam.ModularAuthenticationStrategy)var6);
    org.jsecurity.authz.SimpleAuthorizationInfo var8 = new org.jsecurity.authz.SimpleAuthorizationInfo();
    var8.addStringPermission("hi!");
    java.io.InputStream var12 = org.jsecurity.util.ClassUtils.getResourceAsStream("");
    java.lang.Object[] var13 = new java.lang.Object[] { var12};
    java.util.List var14 = org.jsecurity.util.CollectionUtils.asList(var13);
    var8.addRoles((java.util.Collection)var14);
    var5.setAuthenticationListeners((java.util.Collection)var14);
    var0.setSessionListeners((java.util.Collection)var14);
    org.jsecurity.realm.text.TextConfigurationRealm var18 = new org.jsecurity.realm.text.TextConfigurationRealm();
    java.io.InputStream var20 = org.jsecurity.util.ClassUtils.getResourceAsStream("");
    java.lang.Object[] var21 = new java.lang.Object[] { var20};
    java.util.List var22 = org.jsecurity.util.CollectionUtils.asList(var21);
    org.jsecurity.authc.pam.ModularRealmAuthenticator var23 = new org.jsecurity.authc.pam.ModularRealmAuthenticator(var22);
    org.jsecurity.subject.SimplePrincipalCollection var25 = new org.jsecurity.subject.SimplePrincipalCollection((java.util.Collection)var22, "org.jsecurity.authz.UnauthorizedException: org.jsecurity.session.ExpiredSessionException: ");
    org.jsecurity.session.UnknownSessionException var30 = new org.jsecurity.session.UnknownSessionException("dd\uFFFD", (java.io.Serializable)100.0f);
    org.jsecurity.session.SessionException var32 = new org.jsecurity.session.SessionException("dd\uFFFD", (java.lang.Throwable)var30, (java.io.Serializable)0);
    org.jsecurity.session.SessionException var33 = new org.jsecurity.session.SessionException("dd\uFFFD", (java.lang.Throwable)var30);
    var25.add((java.lang.Object)var33, "org.jsecurity.config.ConfigurationException: dd\uFFFD");
    var18.onLogout((org.jsecurity.subject.PrincipalCollection)var25);
    org.jsecurity.authc.pam.FirstSuccessfulAuthenticationStrategy var37 = new org.jsecurity.authc.pam.FirstSuccessfulAuthenticationStrategy();
    org.jsecurity.authz.UnauthorizedException var39 = new org.jsecurity.authz.UnauthorizedException("org.jsecurity.config.ConfigurationException: dd\uFFFD");
    java.lang.Throwable[] var40 = var39.getSuppressed();
    java.util.List var41 = org.jsecurity.util.CollectionUtils.asList((java.lang.Object[])var40);
    org.jsecurity.authc.UsernamePasswordToken var42 = new org.jsecurity.authc.UsernamePasswordToken();
    java.lang.String var43 = var42.getUsername();
    java.net.InetAddress var44 = var42.getInetAddress();
    org.jsecurity.authc.AuthenticationInfo var45 = var37.beforeAllAttempts((java.util.Collection)var41, (org.jsecurity.authc.AuthenticationToken)var42);
    boolean[] var46 = var0.hasRoles((org.jsecurity.subject.PrincipalCollection)var25, var41);
    org.jsecurity.codec.CodecException var49 = new org.jsecurity.codec.CodecException("dd\uFFFD");
    org.jsecurity.authc.ConcurrentAccessException var50 = new org.jsecurity.authc.ConcurrentAccessException("org.jsecurity.authz.UnauthorizedException: org.jsecurity.session.ExpiredSessionException: ", (java.lang.Throwable)var49);
    org.jsecurity.subject.SimplePrincipalCollection var52 = new org.jsecurity.subject.SimplePrincipalCollection((java.lang.Object)var49, "");
    java.io.InputStream var54 = org.jsecurity.util.ClassUtils.getResourceAsStream("");
    java.lang.Object[] var55 = new java.lang.Object[] { var54};
    java.util.List var56 = org.jsecurity.util.CollectionUtils.asList(var55);
    org.jsecurity.authc.pam.ModularRealmAuthenticator var57 = new org.jsecurity.authc.pam.ModularRealmAuthenticator(var56);
    var52.addAll((java.util.Collection)var56, "\u0000\u0000");
    var0.setSessionListeners((java.util.Collection)var56);
    org.jsecurity.session.mgt.DefaultSessionManager var61 = new org.jsecurity.session.mgt.DefaultSessionManager();
    org.jsecurity.mgt.DefaultSecurityManager var62 = new org.jsecurity.mgt.DefaultSecurityManager();
    org.jsecurity.authz.permission.WildcardPermissionResolver var63 = new org.jsecurity.authz.permission.WildcardPermissionResolver();
    var62.setPermissionResolver((org.jsecurity.authz.permission.PermissionResolver)var63);
    org.jsecurity.cache.CacheManager var65 = var62.getCacheManager();
    var61.setCacheManager(var65);
    org.jsecurity.session.mgt.SessionValidationScheduler var67 = var61.getSessionValidationScheduler();
    var0.setSessionManager((org.jsecurity.session.mgt.SessionManager)var61);
    var61.destroy();
    org.jsecurity.cache.ehcache.EhCacheManager var70 = new org.jsecurity.cache.ehcache.EhCacheManager();
    var70.init();
    var61.setCacheManager((org.jsecurity.cache.CacheManager)var70);
    org.jsecurity.io.ResourceException var77 = new org.jsecurity.io.ResourceException("hi!");
    org.jsecurity.codec.CodecException var78 = new org.jsecurity.codec.CodecException((java.lang.Throwable)var77);
    org.jsecurity.JSecurityException var79 = new org.jsecurity.JSecurityException("a2b823b1e72eae2b727289df8a00a89df8a0bab6ad8a89c4c5c7a9b62a270000", (java.lang.Throwable)var77);
    org.jsecurity.session.UnknownSessionException var80 = new org.jsecurity.session.UnknownSessionException((java.lang.Throwable)var79);
    org.jsecurity.authc.IncorrectCredentialsException var81 = new org.jsecurity.authc.IncorrectCredentialsException((java.lang.Throwable)var79);
    org.jsecurity.authz.AuthorizationException var82 = new org.jsecurity.authz.AuthorizationException("\u0000\u0000\u0000", (java.lang.Throwable)var79);
    org.jsecurity.authc.AccountException var83 = new org.jsecurity.authc.AccountException((java.lang.Throwable)var82);
    org.jsecurity.io.ResourceException var84 = new org.jsecurity.io.ResourceException("\uFFFD\uFFFD#\uFFFD\uFFFD.\uFFFD+rr\uFFFD\u07CA\u0000\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\u01E9\uFFFD*'\u0000\u0000", (java.lang.Throwable)var82);
    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      var61.validateSession((java.io.Serializable)"\uFFFD\uFFFD#\uFFFD\uFFFD.\uFFFD+rr\uFFFD\u07CA\u0000\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\u01E9\uFFFD*'\u0000\u0000");
      fail("Expected exception of type org.jsecurity.session.UnknownSessionException");
    } catch (org.jsecurity.session.UnknownSessionException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var2);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var3);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var4);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var12);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var13);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var14);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var20);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var21);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var22);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var40);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var41);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var43);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var44);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var45);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var46);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var54);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var55);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var56);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var65);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var67);

  }

  public void test183() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest5.test183");


    org.jsecurity.authz.UnauthenticatedException var3 = new org.jsecurity.authz.UnauthenticatedException();
    org.jsecurity.config.UnresolveableReferenceException var4 = new org.jsecurity.config.UnresolveableReferenceException("", (java.lang.Throwable)var3);
    org.jsecurity.session.InvalidSessionException var5 = new org.jsecurity.session.InvalidSessionException((java.io.Serializable)var3);
    org.jsecurity.subject.InvalidSubjectException var6 = new org.jsecurity.subject.InvalidSubjectException("org.jsecurity.config.ConfigurationException: dd\uFFFD", (java.lang.Throwable)var3);
    org.jsecurity.authc.pam.UnsupportedTokenException var7 = new org.jsecurity.authc.pam.UnsupportedTokenException("b73e093f-27b0-4257-a08c-1b3033fd50d0", (java.lang.Throwable)var6);

  }

  public void test184() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest5.test184");


    org.jsecurity.io.ResourceException var6 = new org.jsecurity.io.ResourceException("hi!");
    org.jsecurity.codec.CodecException var7 = new org.jsecurity.codec.CodecException((java.lang.Throwable)var6);
    org.jsecurity.JSecurityException var8 = new org.jsecurity.JSecurityException("a2b823b1e72eae2b727289df8a00a89df8a0bab6ad8a89c4c5c7a9b62a270000", (java.lang.Throwable)var6);
    org.jsecurity.authc.LockedAccountException var9 = new org.jsecurity.authc.LockedAccountException("a2b823b1e72eae2b727289df8a00a89df8a0bab6ad8a89c4c5c7a9b62a270000", (java.lang.Throwable)var8);
    org.jsecurity.session.InvalidSessionException var10 = new org.jsecurity.session.InvalidSessionException("org.jsecurity.authz.UnauthorizedException: org.jsecurity.session.ExpiredSessionException: ", (java.lang.Throwable)var9);
    org.jsecurity.authc.AccountException var11 = new org.jsecurity.authc.AccountException("org.jsecurity.realm.text.PropertiesRealm_2075", (java.lang.Throwable)var9);
    org.jsecurity.authc.UsernamePasswordToken var12 = new org.jsecurity.authc.UsernamePasswordToken();
    java.lang.String var13 = var12.getUsername();
    java.lang.Object var14 = var12.getPrincipal();
    var12.setUsername("hi!");
    java.lang.Object var17 = var12.getPrincipal();
    java.lang.String var18 = var12.toString();
    org.jsecurity.session.StoppedSessionException var19 = new org.jsecurity.session.StoppedSessionException("6e3e25c0-760c-4f23-8d94-65981cd2a291", (java.lang.Throwable)var11, (java.io.Serializable)var12);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var13);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var14);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var17 + "' != '" + "hi!"+ "'", var17.equals("hi!"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var18 + "' != '" + "org.jsecurity.authc.UsernamePasswordToken - hi!, rememberMe=false"+ "'", var18.equals("org.jsecurity.authc.UsernamePasswordToken - hi!, rememberMe=false"));

  }

  public void test185() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest5.test185");


    org.jsecurity.io.SerializationException var2 = new org.jsecurity.io.SerializationException("79436e99-d45a-4bcc-9cbf-0fddb7998f7c");
    org.jsecurity.authc.ExcessiveAttemptsException var3 = new org.jsecurity.authc.ExcessiveAttemptsException("e412c0ee-8551-437c-8e9b-69e2bddd1700", (java.lang.Throwable)var2);

  }

  public void test186() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest5.test186");


    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      java.lang.Class var1 = org.jsecurity.util.ClassUtils.forName("d");
      fail("Expected exception of type org.jsecurity.util.UnknownClassException");
    } catch (org.jsecurity.util.UnknownClassException e) {
      // Expected exception.
    }

  }

  public void test187() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest5.test187");


    boolean var1 = org.jsecurity.io.ResourceUtils.resourceExists("d5db1411-b2ba-45db-90af-084ccdfc2a4d");
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var1 == false);

  }

  public void test188() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest5.test188");


    org.jsecurity.session.mgt.DefaultSessionManager var0 = new org.jsecurity.session.mgt.DefaultSessionManager();
    org.jsecurity.session.mgt.quartz.QuartzSessionValidationScheduler var1 = new org.jsecurity.session.mgt.quartz.QuartzSessionValidationScheduler();
    boolean var2 = var1.isEnabled();
    var1.enableSessionValidation();
    var0.setSessionValidationScheduler((org.jsecurity.session.mgt.SessionValidationScheduler)var1);
    var0.setSessionValidationInterval(1800000L);
    org.jsecurity.authz.permission.InvalidPermissionStringException var9 = new org.jsecurity.authz.permission.InvalidPermissionStringException("b598ff3d-5685-4491-8ee6-585d37adb1db", "org.jsecurity.realm.SimpleAccountRealm-9-authorization");
    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      java.util.Collection var10 = var0.getAttributeKeys((java.io.Serializable)"org.jsecurity.realm.SimpleAccountRealm-9-authorization");
      fail("Expected exception of type org.jsecurity.session.UnknownSessionException");
    } catch (org.jsecurity.session.UnknownSessionException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var2 == false);

  }

  public void test189() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest5.test189");


    org.jsecurity.session.mgt.eis.MemorySessionDAO var0 = new org.jsecurity.session.mgt.eis.MemorySessionDAO();
    org.jsecurity.cache.Cache var1 = var0.getActiveSessionsCache();
    org.jsecurity.cache.CacheManager var2 = var0.getCacheManager();
    org.jsecurity.cache.HashtableCacheManager var3 = new org.jsecurity.cache.HashtableCacheManager();
    org.jsecurity.cache.Cache var5 = var3.getCache("\u0000\u0000");
    var0.setActiveSessionsCache(var5);
    java.io.InputStream var8 = org.jsecurity.util.ClassUtils.getResourceAsStream("");
    java.lang.Object[] var9 = new java.lang.Object[] { var8};
    java.util.List var10 = org.jsecurity.util.CollectionUtils.asList(var9);
    org.jsecurity.authc.pam.ModularRealmAuthenticator var11 = new org.jsecurity.authc.pam.ModularRealmAuthenticator(var10);
    org.jsecurity.authc.pam.AllSuccessfulModularAuthenticationStrategy var12 = new org.jsecurity.authc.pam.AllSuccessfulModularAuthenticationStrategy();
    var11.setModularAuthenticationStrategy((org.jsecurity.authc.pam.ModularAuthenticationStrategy)var12);
    org.jsecurity.authz.SimpleAuthorizationInfo var14 = new org.jsecurity.authz.SimpleAuthorizationInfo();
    var14.addStringPermission("hi!");
    java.io.InputStream var18 = org.jsecurity.util.ClassUtils.getResourceAsStream("");
    java.lang.Object[] var19 = new java.lang.Object[] { var18};
    java.util.List var20 = org.jsecurity.util.CollectionUtils.asList(var19);
    var14.addRoles((java.util.Collection)var20);
    var11.setAuthenticationListeners((java.util.Collection)var20);
    org.jsecurity.realm.activedirectory.ActiveDirectoryRealm var23 = new org.jsecurity.realm.activedirectory.ActiveDirectoryRealm();
    var23.setPrincipalSuffix("");
    var11.setRealm((org.jsecurity.realm.Realm)var23);
    org.jsecurity.cache.HashtableCacheManager var27 = new org.jsecurity.cache.HashtableCacheManager();
    org.jsecurity.cache.Cache var29 = var27.getCache("\u0000\u0000");
    var23.setAuthorizationCache(var29);
    var0.setActiveSessionsCache(var29);
    org.jsecurity.session.mgt.SimpleSession var32 = new org.jsecurity.session.mgt.SimpleSession();
    java.io.Serializable var33 = var0.create((org.jsecurity.session.Session)var32);
    java.io.Serializable var34 = var32.getId();
    org.jsecurity.session.mgt.SimpleSession var35 = new org.jsecurity.session.mgt.SimpleSession();
    var35.touch();
    var35.validate();
    org.jsecurity.session.mgt.SimpleSession var38 = new org.jsecurity.session.mgt.SimpleSession();
    var38.setTimeout((-1L));
    org.jsecurity.session.mgt.SimpleSession var41 = new org.jsecurity.session.mgt.SimpleSession();
    java.util.Date var42 = var41.getLastAccessTime();
    var38.setLastAccessTime(var42);
    org.jsecurity.session.mgt.SimpleSession var44 = new org.jsecurity.session.mgt.SimpleSession();
    java.util.Date var45 = var44.getLastAccessTime();
    var38.setStopTimestamp(var45);
    var35.setLastAccessTime(var45);
    var32.setStartTimestamp(var45);
    org.jsecurity.session.mgt.ImmutableProxiedSession var49 = new org.jsecurity.session.mgt.ImmutableProxiedSession((org.jsecurity.session.Session)var32);
    var32.touch();
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var1);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var2);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var5);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var8);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var9);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var10);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var18);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var19);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var20);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var29);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var33 + "' != '" + "92cc9917-55ec-4f8f-9133-00d142a214d9"+ "'", var33.equals("92cc9917-55ec-4f8f-9133-00d142a214d9"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var34 + "' != '" + "92cc9917-55ec-4f8f-9133-00d142a214d9"+ "'", var34.equals("92cc9917-55ec-4f8f-9133-00d142a214d9"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var42);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var45);

  }

  public void test190() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest5.test190");


    org.jsecurity.authz.UnauthenticatedException var3 = new org.jsecurity.authz.UnauthenticatedException("\uFFFD\uFFFD\uFFFDq\uFFFD\uFFFD\uFFFD\u01BC\uFFFDg]\uFFFD\uFFFD\u001Fu\uFFFD<\uFFFD\uFFFDi\uFFFD\uFFFD");
    org.jsecurity.codec.CodecException var4 = new org.jsecurity.codec.CodecException("org.jsecurity.realm.SimpleAccountRealm-9-authorization", (java.lang.Throwable)var3);
    org.jsecurity.authz.SimpleRole var5 = new org.jsecurity.authz.SimpleRole();
    org.jsecurity.authz.SimpleAuthorizationInfo var6 = new org.jsecurity.authz.SimpleAuthorizationInfo();
    var6.addRole("a2b823b1e72eae2b727289df8a00a89df8a0bab6ad8a89c4c5c7a9b62a270000");
    org.jsecurity.session.UnknownSessionException var13 = new org.jsecurity.session.UnknownSessionException("dd\uFFFD", (java.io.Serializable)100.0f);
    org.jsecurity.subject.SubjectException var14 = new org.jsecurity.subject.SubjectException("dd\uFFFD", (java.lang.Throwable)var13);
    org.jsecurity.io.SerializationException var15 = new org.jsecurity.io.SerializationException("", (java.lang.Throwable)var14);
    java.lang.Throwable[] var16 = var14.getSuppressed();
    java.util.Set var17 = org.jsecurity.util.CollectionUtils.asSet((java.lang.Object[])var16);
    var6.addRoles((java.util.Collection)var17);
    var5.addAll((java.util.Collection)var17);
    org.jsecurity.authz.SimpleRole var20 = new org.jsecurity.authz.SimpleRole();
    org.jsecurity.authz.SimpleAuthorizationInfo var21 = new org.jsecurity.authz.SimpleAuthorizationInfo();
    var21.addRole("a2b823b1e72eae2b727289df8a00a89df8a0bab6ad8a89c4c5c7a9b62a270000");
    org.jsecurity.session.UnknownSessionException var28 = new org.jsecurity.session.UnknownSessionException("dd\uFFFD", (java.io.Serializable)100.0f);
    org.jsecurity.subject.SubjectException var29 = new org.jsecurity.subject.SubjectException("dd\uFFFD", (java.lang.Throwable)var28);
    org.jsecurity.io.SerializationException var30 = new org.jsecurity.io.SerializationException("", (java.lang.Throwable)var29);
    java.lang.Throwable[] var31 = var29.getSuppressed();
    java.util.Set var32 = org.jsecurity.util.CollectionUtils.asSet((java.lang.Object[])var31);
    var21.addRoles((java.util.Collection)var32);
    var20.addAll((java.util.Collection)var32);
    java.lang.String var35 = var20.getName();
    org.jsecurity.authz.permission.WildcardPermission var38 = new org.jsecurity.authz.permission.WildcardPermission("hi!", false);
    var20.add((org.jsecurity.authz.Permission)var38);
    var5.add((org.jsecurity.authz.Permission)var38);
    org.jsecurity.authz.SimpleAuthorizationInfo var42 = new org.jsecurity.authz.SimpleAuthorizationInfo();
    var42.addRole("a2b823b1e72eae2b727289df8a00a89df8a0bab6ad8a89c4c5c7a9b62a270000");
    org.jsecurity.session.UnknownSessionException var49 = new org.jsecurity.session.UnknownSessionException("dd\uFFFD", (java.io.Serializable)100.0f);
    org.jsecurity.subject.SubjectException var50 = new org.jsecurity.subject.SubjectException("dd\uFFFD", (java.lang.Throwable)var49);
    org.jsecurity.io.SerializationException var51 = new org.jsecurity.io.SerializationException("", (java.lang.Throwable)var50);
    java.lang.Throwable[] var52 = var50.getSuppressed();
    java.util.Set var53 = org.jsecurity.util.CollectionUtils.asSet((java.lang.Object[])var52);
    var42.addRoles((java.util.Collection)var53);
    org.jsecurity.authz.SimpleRole var55 = new org.jsecurity.authz.SimpleRole("dd\uFFFD", var53);
    var5.setPermissions(var53);
    org.jsecurity.session.StoppedSessionException var57 = new org.jsecurity.session.StoppedSessionException("69d3a52f-a464-4f98-8253-2a105929a356", (java.lang.Throwable)var3, (java.io.Serializable)var5);
    org.jsecurity.cache.HashtableCache var59 = new org.jsecurity.cache.HashtableCache("orgjsecurityauthcCredentialsException783ccd3148a842dd890fdf885a7baafAA==");
    org.jsecurity.realm.text.TextConfigurationRealm var60 = new org.jsecurity.realm.text.TextConfigurationRealm();
    java.io.InputStream var62 = org.jsecurity.util.ClassUtils.getResourceAsStream("");
    java.lang.Object[] var63 = new java.lang.Object[] { var62};
    java.util.List var64 = org.jsecurity.util.CollectionUtils.asList(var63);
    org.jsecurity.authc.pam.ModularRealmAuthenticator var65 = new org.jsecurity.authc.pam.ModularRealmAuthenticator(var64);
    org.jsecurity.subject.SimplePrincipalCollection var67 = new org.jsecurity.subject.SimplePrincipalCollection((java.util.Collection)var64, "org.jsecurity.authz.UnauthorizedException: org.jsecurity.session.ExpiredSessionException: ");
    org.jsecurity.session.UnknownSessionException var72 = new org.jsecurity.session.UnknownSessionException("dd\uFFFD", (java.io.Serializable)100.0f);
    org.jsecurity.session.SessionException var74 = new org.jsecurity.session.SessionException("dd\uFFFD", (java.lang.Throwable)var72, (java.io.Serializable)0);
    org.jsecurity.session.SessionException var75 = new org.jsecurity.session.SessionException("dd\uFFFD", (java.lang.Throwable)var72);
    var67.add((java.lang.Object)var75, "org.jsecurity.config.ConfigurationException: dd\uFFFD");
    var60.onLogout((org.jsecurity.subject.PrincipalCollection)var67);
    var59.remove((java.lang.Object)var67);
    java.util.Set var80 = var59.values();
    var5.setPermissions(var80);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var16);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var17);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var31);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var32);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var35);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var52);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var53);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var62);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var63);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var64);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var80);

  }

  public void test191() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest5.test191");


    org.jsecurity.config.IniConfiguration var0 = new org.jsecurity.config.IniConfiguration();
    var0.setConfigUrl("hi!");
    var0.setConfig("org.jsecurity.realm.SimpleAccountRealm-52-authorization");
    org.jsecurity.mgt.SecurityManager var5 = var0.getSecurityManager();
    var0.setConfigUrl("44126908-8346-4f1c-92de-726997ba95f5");
    java.io.InputStream var9 = org.jsecurity.util.ClassUtils.getResourceAsStream("");
    org.jsecurity.io.ResourceUtils.close(var9);
    org.jsecurity.io.ResourceUtils.close(var9);
    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      var0.load(var9);
      fail("Expected exception of type org.jsecurity.config.ConfigurationException");
    } catch (org.jsecurity.config.ConfigurationException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var5);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var9);

  }

  public void test192() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest5.test192");


    org.jsecurity.session.UnknownSessionException var3 = new org.jsecurity.session.UnknownSessionException("org.jsecurity.config.ConfigurationException: dd\uFFFD");
    org.jsecurity.realm.text.TextConfigurationRealm var4 = new org.jsecurity.realm.text.TextConfigurationRealm();
    java.io.InputStream var6 = org.jsecurity.util.ClassUtils.getResourceAsStream("");
    java.lang.Object[] var7 = new java.lang.Object[] { var6};
    java.util.List var8 = org.jsecurity.util.CollectionUtils.asList(var7);
    org.jsecurity.authc.pam.ModularRealmAuthenticator var9 = new org.jsecurity.authc.pam.ModularRealmAuthenticator(var8);
    org.jsecurity.subject.SimplePrincipalCollection var11 = new org.jsecurity.subject.SimplePrincipalCollection((java.util.Collection)var8, "org.jsecurity.authz.UnauthorizedException: org.jsecurity.session.ExpiredSessionException: ");
    org.jsecurity.session.UnknownSessionException var16 = new org.jsecurity.session.UnknownSessionException("dd\uFFFD", (java.io.Serializable)100.0f);
    org.jsecurity.session.SessionException var18 = new org.jsecurity.session.SessionException("dd\uFFFD", (java.lang.Throwable)var16, (java.io.Serializable)0);
    org.jsecurity.session.SessionException var19 = new org.jsecurity.session.SessionException("dd\uFFFD", (java.lang.Throwable)var16);
    var11.add((java.lang.Object)var19, "org.jsecurity.config.ConfigurationException: dd\uFFFD");
    var4.onLogout((org.jsecurity.subject.PrincipalCollection)var11);
    org.jsecurity.authc.ExpiredCredentialsException var24 = new org.jsecurity.authc.ExpiredCredentialsException();
    org.jsecurity.session.ExpiredSessionException var25 = new org.jsecurity.session.ExpiredSessionException("", (java.lang.Throwable)var24);
    java.lang.Throwable[] var26 = var25.getSuppressed();
    org.jsecurity.io.ResourceException var27 = new org.jsecurity.io.ResourceException((java.lang.Throwable)var25);
    org.jsecurity.authc.SimpleAuthenticationInfo var28 = new org.jsecurity.authc.SimpleAuthenticationInfo((org.jsecurity.subject.PrincipalCollection)var11, (java.lang.Object)var25);
    org.jsecurity.session.StoppedSessionException var29 = new org.jsecurity.session.StoppedSessionException("d0ddeefd-5576-4906-99f8-93b892e0c773", (java.lang.Throwable)var3, (java.io.Serializable)var11);
    org.jsecurity.cache.CacheException var30 = new org.jsecurity.cache.CacheException("5e8ae759-0aee-439c-94b7-0d29d950b35b", (java.lang.Throwable)var3);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var6);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var7);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var8);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var26);

  }

  public void test193() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest5.test193");


    org.jsecurity.mgt.DefaultSecurityManager var0 = new org.jsecurity.mgt.DefaultSecurityManager();
    org.jsecurity.authz.SimpleAuthorizationInfo var2 = new org.jsecurity.authz.SimpleAuthorizationInfo();
    org.jsecurity.session.UnknownSessionException var7 = new org.jsecurity.session.UnknownSessionException("dd\uFFFD", (java.io.Serializable)100.0f);
    org.jsecurity.subject.SubjectException var8 = new org.jsecurity.subject.SubjectException("dd\uFFFD", (java.lang.Throwable)var7);
    org.jsecurity.io.SerializationException var9 = new org.jsecurity.io.SerializationException("", (java.lang.Throwable)var8);
    java.lang.Throwable[] var10 = var8.getSuppressed();
    java.util.Set var11 = org.jsecurity.util.CollectionUtils.asSet((java.lang.Object[])var10);
    var2.setStringPermissions(var11);
    java.util.Set var13 = var2.getRoles();
    org.jsecurity.authz.SimpleAuthorizationInfo var14 = new org.jsecurity.authz.SimpleAuthorizationInfo();
    var14.addRole("a2b823b1e72eae2b727289df8a00a89df8a0bab6ad8a89c4c5c7a9b62a270000");
    org.jsecurity.session.UnknownSessionException var21 = new org.jsecurity.session.UnknownSessionException("dd\uFFFD", (java.io.Serializable)100.0f);
    org.jsecurity.subject.SubjectException var22 = new org.jsecurity.subject.SubjectException("dd\uFFFD", (java.lang.Throwable)var21);
    org.jsecurity.io.SerializationException var23 = new org.jsecurity.io.SerializationException("", (java.lang.Throwable)var22);
    java.lang.Throwable[] var24 = var22.getSuppressed();
    java.util.Set var25 = org.jsecurity.util.CollectionUtils.asSet((java.lang.Object[])var24);
    var14.addRoles((java.util.Collection)var25);
    var2.setRoles(var25);
    org.jsecurity.authz.SimpleRole var28 = new org.jsecurity.authz.SimpleRole("org.jsecurity.authz.UnauthorizedException: org.jsecurity.session.ExpiredSessionException: ", var25);
    var0.setSessionListeners((java.util.Collection)var25);
    org.jsecurity.subject.Subject var30 = var0.getSubject();
    org.jsecurity.cache.CacheManager var31 = var0.getCacheManager();
    org.jsecurity.subject.Subject var32 = var0.getSubject();
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var10);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var11);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var13);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var24);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var25);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var30);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var31);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var32);

  }

  public void test194() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest5.test194");


    java.io.InputStream var2 = org.jsecurity.util.ClassUtils.getResourceAsStream("");
    java.lang.Object[] var3 = new java.lang.Object[] { var2};
    java.util.List var4 = org.jsecurity.util.CollectionUtils.asList(var3);
    org.jsecurity.authc.pam.ModularRealmAuthenticator var5 = new org.jsecurity.authc.pam.ModularRealmAuthenticator(var4);
    org.jsecurity.authc.pam.AllSuccessfulModularAuthenticationStrategy var6 = new org.jsecurity.authc.pam.AllSuccessfulModularAuthenticationStrategy();
    var5.setModularAuthenticationStrategy((org.jsecurity.authc.pam.ModularAuthenticationStrategy)var6);
    org.jsecurity.authz.SimpleAuthorizationInfo var8 = new org.jsecurity.authz.SimpleAuthorizationInfo();
    var8.addStringPermission("hi!");
    java.io.InputStream var12 = org.jsecurity.util.ClassUtils.getResourceAsStream("");
    java.lang.Object[] var13 = new java.lang.Object[] { var12};
    java.util.List var14 = org.jsecurity.util.CollectionUtils.asList(var13);
    var8.addRoles((java.util.Collection)var14);
    var5.setAuthenticationListeners((java.util.Collection)var14);
    org.jsecurity.realm.activedirectory.ActiveDirectoryRealm var17 = new org.jsecurity.realm.activedirectory.ActiveDirectoryRealm();
    var17.setPrincipalSuffix("");
    var5.setRealm((org.jsecurity.realm.Realm)var17);
    org.jsecurity.authc.pam.FirstSuccessfulAuthenticationStrategy var21 = new org.jsecurity.authc.pam.FirstSuccessfulAuthenticationStrategy();
    org.jsecurity.authz.UnauthorizedException var23 = new org.jsecurity.authz.UnauthorizedException("org.jsecurity.config.ConfigurationException: dd\uFFFD");
    java.lang.Throwable[] var24 = var23.getSuppressed();
    java.util.List var25 = org.jsecurity.util.CollectionUtils.asList((java.lang.Object[])var24);
    org.jsecurity.authc.UsernamePasswordToken var26 = new org.jsecurity.authc.UsernamePasswordToken();
    java.lang.String var27 = var26.getUsername();
    java.net.InetAddress var28 = var26.getInetAddress();
    org.jsecurity.authc.AuthenticationInfo var29 = var21.beforeAllAttempts((java.util.Collection)var25, (org.jsecurity.authc.AuthenticationToken)var26);
    var5.setModularAuthenticationStrategy((org.jsecurity.authc.pam.ModularAuthenticationStrategy)var21);
    org.jsecurity.codec.CodecException var33 = new org.jsecurity.codec.CodecException("dd\uFFFD");
    org.jsecurity.authc.ConcurrentAccessException var34 = new org.jsecurity.authc.ConcurrentAccessException("org.jsecurity.authz.UnauthorizedException: org.jsecurity.session.ExpiredSessionException: ", (java.lang.Throwable)var33);
    org.jsecurity.subject.SimplePrincipalCollection var36 = new org.jsecurity.subject.SimplePrincipalCollection((java.lang.Object)var33, "");
    org.jsecurity.authc.pam.FirstSuccessfulAuthenticationStrategy var37 = new org.jsecurity.authc.pam.FirstSuccessfulAuthenticationStrategy();
    org.jsecurity.authz.UnauthorizedException var39 = new org.jsecurity.authz.UnauthorizedException("org.jsecurity.config.ConfigurationException: dd\uFFFD");
    java.lang.Throwable[] var40 = var39.getSuppressed();
    java.util.List var41 = org.jsecurity.util.CollectionUtils.asList((java.lang.Object[])var40);
    org.jsecurity.authc.UsernamePasswordToken var42 = new org.jsecurity.authc.UsernamePasswordToken();
    java.lang.String var43 = var42.getUsername();
    java.net.InetAddress var44 = var42.getInetAddress();
    org.jsecurity.authc.AuthenticationInfo var45 = var37.beforeAllAttempts((java.util.Collection)var41, (org.jsecurity.authc.AuthenticationToken)var42);
    org.jsecurity.session.UnknownSessionException var50 = new org.jsecurity.session.UnknownSessionException("dd\uFFFD", (java.io.Serializable)100.0f);
    org.jsecurity.subject.SubjectException var51 = new org.jsecurity.subject.SubjectException("dd\uFFFD", (java.lang.Throwable)var50);
    org.jsecurity.io.SerializationException var52 = new org.jsecurity.io.SerializationException("", (java.lang.Throwable)var51);
    java.lang.Throwable[] var53 = var51.getSuppressed();
    java.util.Set var54 = org.jsecurity.util.CollectionUtils.asSet((java.lang.Object[])var53);
    org.jsecurity.authc.SimpleAccount var55 = new org.jsecurity.authc.SimpleAccount((org.jsecurity.subject.PrincipalCollection)var36, (java.lang.Object)var41, var54);
    org.jsecurity.authc.pam.AllSuccessfulModularAuthenticationStrategy var56 = new org.jsecurity.authc.pam.AllSuccessfulModularAuthenticationStrategy();
    char[] var58 = new char[] { };
    org.jsecurity.authc.UsernamePasswordToken var60 = new org.jsecurity.authc.UsernamePasswordToken("hi!", var58, true);
    org.jsecurity.authc.SimpleAccount var61 = new org.jsecurity.authc.SimpleAccount();
    var61.setCredentialsExpired(false);
    boolean var64 = var61.isLocked();
    org.jsecurity.authc.AuthenticationInfo var65 = var56.afterAllAttempts((org.jsecurity.authc.AuthenticationToken)var60, (org.jsecurity.authc.AuthenticationInfo)var61);
    char[] var68 = new char[] { };
    org.jsecurity.authc.UsernamePasswordToken var70 = new org.jsecurity.authc.UsernamePasswordToken("hi!", var68, true);
    org.jsecurity.authc.UsernamePasswordToken var71 = new org.jsecurity.authc.UsernamePasswordToken("\u0000\u0000", var68);
    var60.setPassword(var68);
    org.jsecurity.authc.AuthenticationInfo var73 = var21.beforeAllAttempts((java.util.Collection)var41, (org.jsecurity.authc.AuthenticationToken)var60);
    org.jsecurity.authz.permission.WildcardPermissionResolver var74 = new org.jsecurity.authz.permission.WildcardPermissionResolver();
    org.jsecurity.authz.Permission var76 = var74.resolvePermission("hi!");
    org.jsecurity.authz.Permission var78 = var74.resolvePermission("hi!");
    java.util.Set var79 = org.jsecurity.util.PermissionUtils.resolvePermissions((java.util.Collection)var41, (org.jsecurity.authz.permission.PermissionResolver)var74);
    java.util.Set var80 = org.jsecurity.util.PermissionUtils.resolveDelimitedPermissions("74c33783-4603-416d-a0a0-d39d40783197", (org.jsecurity.authz.permission.PermissionResolver)var74);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var2);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var3);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var4);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var12);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var13);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var14);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var24);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var25);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var27);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var28);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var29);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var40);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var41);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var43);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var44);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var45);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var53);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var54);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var58);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var64 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var65);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var68);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var73);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var76);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var78);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var79);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var80);

  }

  public void test195() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest5.test195");


    org.jsecurity.cache.HashtableCache var2 = new org.jsecurity.cache.HashtableCache("orgjsecurityauthcCredentialsException783ccd3148a842dd890fdf885a7baafAA==");
    int var3 = var2.size();
    org.jsecurity.session.UnknownSessionException var8 = new org.jsecurity.session.UnknownSessionException("dd\uFFFD", (java.io.Serializable)100.0f);
    org.jsecurity.subject.SubjectException var9 = new org.jsecurity.subject.SubjectException("dd\uFFFD", (java.lang.Throwable)var8);
    org.jsecurity.authc.AccountException var10 = new org.jsecurity.authc.AccountException("hi!", (java.lang.Throwable)var9);
    org.jsecurity.session.UnknownSessionException var11 = new org.jsecurity.session.UnknownSessionException((java.lang.Throwable)var9);
    org.jsecurity.codec.CodecException var12 = new org.jsecurity.codec.CodecException((java.lang.Throwable)var9);
    org.jsecurity.config.UnresolveableReferenceException var13 = new org.jsecurity.config.UnresolveableReferenceException((java.lang.Throwable)var9);
    char[] var17 = new char[] { ' ', ' '};
    org.jsecurity.authc.UsernamePasswordToken var18 = new org.jsecurity.authc.UsernamePasswordToken("hi!", var17);
    char[] var22 = new char[] { '4', '#'};
    org.jsecurity.authc.UsernamePasswordToken var23 = new org.jsecurity.authc.UsernamePasswordToken("\u0000\u0000", var22);
    var18.setPassword(var22);
    var2.put((java.lang.Object)var9, (java.lang.Object)var22);
    byte[] var26 = org.jsecurity.codec.CodecSupport.toBytes(var22);
    org.jsecurity.session.mgt.eis.MemorySessionDAO var27 = new org.jsecurity.session.mgt.eis.MemorySessionDAO();
    org.jsecurity.cache.Cache var28 = var27.getActiveSessionsCache();
    org.jsecurity.session.mgt.SimpleSession var29 = new org.jsecurity.session.mgt.SimpleSession();
    var29.setTimeout((-1L));
    org.jsecurity.session.mgt.SimpleSession var32 = new org.jsecurity.session.mgt.SimpleSession();
    java.util.Date var33 = var32.getLastAccessTime();
    var29.setLastAccessTime(var33);
    var27.update((org.jsecurity.session.Session)var29);
    byte[] var41 = new byte[] { (byte)100, (byte)100, (byte)(-1)};
    java.lang.String var42 = org.jsecurity.codec.CodecSupport.toString(var41);
    byte[] var43 = org.jsecurity.codec.Base64.encode(var41);
    char[] var44 = org.jsecurity.codec.CodecSupport.toChars(var43);
    org.jsecurity.authc.UsernamePasswordToken var46 = new org.jsecurity.authc.UsernamePasswordToken("org.jsecurity.realm.SimpleAccountRealm-55-authorization", var44, false);
    char[] var47 = var46.getPassword();
    org.jsecurity.session.mgt.SimpleSession var49 = new org.jsecurity.session.mgt.SimpleSession();
    var49.setTimeout((-1L));
    org.jsecurity.session.mgt.SimpleSession var52 = new org.jsecurity.session.mgt.SimpleSession();
    java.util.Date var53 = var52.getLastAccessTime();
    var49.setLastAccessTime(var53);
    java.net.InetAddress var55 = var49.getHostAddress();
    org.jsecurity.authc.UsernamePasswordToken var56 = new org.jsecurity.authc.UsernamePasswordToken("classpath:org/jsecurity/cache/ehcache/ehcache.xml", var47, false, var55);
    org.jsecurity.session.mgt.SimpleSession var57 = new org.jsecurity.session.mgt.SimpleSession(var55);
    var29.setHostAddress(var55);
    org.jsecurity.authc.UsernamePasswordToken var59 = new org.jsecurity.authc.UsernamePasswordToken("34c4ddf9-2eae-40f0-acfd-24998b57e8d9", var22, var55);
    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      byte[] var60 = org.jsecurity.codec.Hex.decode(var22);
      fail("Expected exception of type java.lang.IllegalArgumentException");
    } catch (java.lang.IllegalArgumentException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var3 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var17);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var22);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var26);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var28);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var33);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var41);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var42 + "' != '" + "dd\uFFFD"+ "'", var42.equals("dd\uFFFD"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var43);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var44);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var47);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var53);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var55);

  }

  public void test196() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest5.test196");


    org.jsecurity.authz.UnauthorizedException var2 = new org.jsecurity.authz.UnauthorizedException();
    org.jsecurity.session.SessionException var4 = new org.jsecurity.session.SessionException("", (java.lang.Throwable)var2, (java.io.Serializable)"org.jsecurity.config.ConfigurationException: dd\uFFFD");
    org.jsecurity.authc.LockedAccountException var5 = new org.jsecurity.authc.LockedAccountException("7ef36680-c8d0-4ff6-a301-9038bb416b9d", (java.lang.Throwable)var4);
    org.jsecurity.authz.UnauthorizedException var6 = new org.jsecurity.authz.UnauthorizedException((java.lang.Throwable)var5);

  }

  public void test197() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest5.test197");


    org.jsecurity.session.mgt.SimpleSession var0 = new org.jsecurity.session.mgt.SimpleSession();
    var0.setTimeout((-1L));
    org.jsecurity.session.mgt.SimpleSession var3 = new org.jsecurity.session.mgt.SimpleSession();
    java.util.Date var4 = var3.getLastAccessTime();
    var0.setLastAccessTime(var4);
    org.jsecurity.session.mgt.SimpleSession var6 = new org.jsecurity.session.mgt.SimpleSession();
    java.util.Date var7 = var6.getLastAccessTime();
    var0.setStopTimestamp(var7);
    java.net.InetAddress var9 = var0.getHostAddress();
    org.jsecurity.session.mgt.SimpleSession var10 = new org.jsecurity.session.mgt.SimpleSession(var9);
    boolean var11 = var10.isValid();
    java.util.Date var12 = var10.getLastAccessTime();
    java.util.Date var13 = var10.getLastAccessTime();
    org.jsecurity.session.mgt.eis.MemorySessionDAO var14 = new org.jsecurity.session.mgt.eis.MemorySessionDAO();
    org.jsecurity.cache.Cache var15 = var14.getActiveSessionsCache();
    org.jsecurity.cache.CacheManager var16 = var14.getCacheManager();
    org.jsecurity.cache.HashtableCacheManager var17 = new org.jsecurity.cache.HashtableCacheManager();
    org.jsecurity.cache.Cache var19 = var17.getCache("\u0000\u0000");
    var14.setActiveSessionsCache(var19);
    java.io.InputStream var22 = org.jsecurity.util.ClassUtils.getResourceAsStream("");
    java.lang.Object[] var23 = new java.lang.Object[] { var22};
    java.util.List var24 = org.jsecurity.util.CollectionUtils.asList(var23);
    org.jsecurity.authc.pam.ModularRealmAuthenticator var25 = new org.jsecurity.authc.pam.ModularRealmAuthenticator(var24);
    org.jsecurity.authc.pam.AllSuccessfulModularAuthenticationStrategy var26 = new org.jsecurity.authc.pam.AllSuccessfulModularAuthenticationStrategy();
    var25.setModularAuthenticationStrategy((org.jsecurity.authc.pam.ModularAuthenticationStrategy)var26);
    org.jsecurity.authz.SimpleAuthorizationInfo var28 = new org.jsecurity.authz.SimpleAuthorizationInfo();
    var28.addStringPermission("hi!");
    java.io.InputStream var32 = org.jsecurity.util.ClassUtils.getResourceAsStream("");
    java.lang.Object[] var33 = new java.lang.Object[] { var32};
    java.util.List var34 = org.jsecurity.util.CollectionUtils.asList(var33);
    var28.addRoles((java.util.Collection)var34);
    var25.setAuthenticationListeners((java.util.Collection)var34);
    org.jsecurity.realm.activedirectory.ActiveDirectoryRealm var37 = new org.jsecurity.realm.activedirectory.ActiveDirectoryRealm();
    var37.setPrincipalSuffix("");
    var25.setRealm((org.jsecurity.realm.Realm)var37);
    org.jsecurity.cache.HashtableCacheManager var41 = new org.jsecurity.cache.HashtableCacheManager();
    org.jsecurity.cache.Cache var43 = var41.getCache("\u0000\u0000");
    var37.setAuthorizationCache(var43);
    var14.setActiveSessionsCache(var43);
    org.jsecurity.session.mgt.SimpleSession var46 = new org.jsecurity.session.mgt.SimpleSession();
    java.io.Serializable var47 = var14.create((org.jsecurity.session.Session)var46);
    java.io.Serializable var48 = var46.getId();
    org.jsecurity.authc.credential.Md5CredentialsMatcher var49 = new org.jsecurity.authc.credential.Md5CredentialsMatcher();
    boolean var50 = var49.isHashSalted();
    boolean var51 = var49.isHashSalted();
    int var52 = var49.getHashIterations();
    java.lang.Object var53 = var46.removeAttribute((java.lang.Object)var49);
    boolean var54 = var46.isExpired();
    java.util.Date var55 = var46.getStartTimestamp();
    var10.setStopTimestamp(var55);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var4);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var7);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var9);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var11 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var12);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var13);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var15);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var16);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var19);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var22);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var23);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var24);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var32);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var33);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var34);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var43);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var47 + "' != '" + "9c4e57bf-3572-411a-8564-0797a7b8f16a"+ "'", var47.equals("9c4e57bf-3572-411a-8564-0797a7b8f16a"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var48 + "' != '" + "9c4e57bf-3572-411a-8564-0797a7b8f16a"+ "'", var48.equals("9c4e57bf-3572-411a-8564-0797a7b8f16a"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var50 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var51 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var52 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var53);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var54 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var55);

  }

  public void test198() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest5.test198");


    org.jsecurity.realm.activedirectory.ActiveDirectoryRealm var0 = new org.jsecurity.realm.activedirectory.ActiveDirectoryRealm();
    var0.init();
    var0.setSystemPassword("dd\uFFFD");
    org.jsecurity.authz.aop.GuestAnnotationHandler var4 = new org.jsecurity.authz.aop.GuestAnnotationHandler();
    java.lang.Class var5 = var4.getAnnotationClass();
    var0.setAuthenticationTokenClass(var5);
    var0.setSystemPassword("e7e879cb-1172-4cea-8bca-f370fbe1f08c");
    var0.setUrl("b691b148-e697-4359-b339-aa799ce91029");
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var5);

  }

  public void test199() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest5.test199");


    org.jsecurity.session.UnknownSessionException var5 = new org.jsecurity.session.UnknownSessionException("dd\uFFFD", (java.io.Serializable)100.0f);
    org.jsecurity.subject.SubjectException var6 = new org.jsecurity.subject.SubjectException("dd\uFFFD", (java.lang.Throwable)var5);
    org.jsecurity.authc.AccountException var7 = new org.jsecurity.authc.AccountException("hi!", (java.lang.Throwable)var6);
    org.jsecurity.session.StoppedSessionException var8 = new org.jsecurity.session.StoppedSessionException((java.lang.Throwable)var7);
    org.jsecurity.subject.SubjectException var9 = new org.jsecurity.subject.SubjectException((java.lang.Throwable)var8);
    org.jsecurity.io.ResourceException var10 = new org.jsecurity.io.ResourceException("7aaa0eff-7052-4953-955a-cd6cddd8c21c", (java.lang.Throwable)var8);
    org.jsecurity.session.InvalidSessionException var11 = new org.jsecurity.session.InvalidSessionException((java.lang.Throwable)var8);

  }

  public void test200() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest5.test200");


    org.jsecurity.session.mgt.SimpleSession var1 = new org.jsecurity.session.mgt.SimpleSession();
    var1.setTimeout((-1L));
    org.jsecurity.session.mgt.SimpleSession var4 = new org.jsecurity.session.mgt.SimpleSession();
    java.util.Date var5 = var4.getLastAccessTime();
    var1.setLastAccessTime(var5);
    java.net.InetAddress var7 = var1.getHostAddress();
    org.jsecurity.authz.HostUnauthorizedException var8 = new org.jsecurity.authz.HostUnauthorizedException(var7);
    org.jsecurity.authz.HostUnauthorizedException var9 = new org.jsecurity.authz.HostUnauthorizedException(var7);
    org.jsecurity.authc.AccountException var10 = new org.jsecurity.authc.AccountException("e2dbce5a-2276-49d1-8175-015873d38faf", (java.lang.Throwable)var9);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var5);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var7);

  }

  public void test201() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest5.test201");


    org.jsecurity.realm.text.TextConfigurationRealm var1 = new org.jsecurity.realm.text.TextConfigurationRealm();
    java.io.InputStream var3 = org.jsecurity.util.ClassUtils.getResourceAsStream("");
    java.lang.Object[] var4 = new java.lang.Object[] { var3};
    java.util.List var5 = org.jsecurity.util.CollectionUtils.asList(var4);
    org.jsecurity.authc.pam.ModularRealmAuthenticator var6 = new org.jsecurity.authc.pam.ModularRealmAuthenticator(var5);
    org.jsecurity.subject.SimplePrincipalCollection var8 = new org.jsecurity.subject.SimplePrincipalCollection((java.util.Collection)var5, "org.jsecurity.authz.UnauthorizedException: org.jsecurity.session.ExpiredSessionException: ");
    org.jsecurity.session.UnknownSessionException var13 = new org.jsecurity.session.UnknownSessionException("dd\uFFFD", (java.io.Serializable)100.0f);
    org.jsecurity.session.SessionException var15 = new org.jsecurity.session.SessionException("dd\uFFFD", (java.lang.Throwable)var13, (java.io.Serializable)0);
    org.jsecurity.session.SessionException var16 = new org.jsecurity.session.SessionException("dd\uFFFD", (java.lang.Throwable)var13);
    var8.add((java.lang.Object)var16, "org.jsecurity.config.ConfigurationException: dd\uFFFD");
    var1.onLogout((org.jsecurity.subject.PrincipalCollection)var8);
    java.util.Set var21 = org.jsecurity.util.PermissionUtils.toPermissionStrings("org.jsecurity.config.ConfigurationException: dd\uFFFD");
    org.jsecurity.authz.SimpleAuthorizationInfo var22 = new org.jsecurity.authz.SimpleAuthorizationInfo(var21);
    org.jsecurity.authz.SimpleAuthorizingAccount var23 = new org.jsecurity.authz.SimpleAuthorizingAccount((org.jsecurity.subject.PrincipalCollection)var8, (java.lang.Object)var21);
    org.jsecurity.session.StoppedSessionException var24 = new org.jsecurity.session.StoppedSessionException("org.jsecurity.realm.SimpleAccountRealm-55-authorization", (java.io.Serializable)var8);
    org.jsecurity.codec.CodecException var27 = new org.jsecurity.codec.CodecException("dd\uFFFD");
    org.jsecurity.authc.ConcurrentAccessException var28 = new org.jsecurity.authc.ConcurrentAccessException("org.jsecurity.authz.UnauthorizedException: org.jsecurity.session.ExpiredSessionException: ", (java.lang.Throwable)var27);
    org.jsecurity.subject.SimplePrincipalCollection var30 = new org.jsecurity.subject.SimplePrincipalCollection((java.lang.Object)var27, "");
    boolean var31 = var30.isEmpty();
    java.util.List var32 = var30.asList();
    var8.addAll((java.util.Collection)var32, "593182d5-444d-491f-91a2-8696a4112133");
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var3);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var4);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var5);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var21);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var31 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var32);

  }

  public void test202() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest5.test202");


    org.jsecurity.session.UnknownSessionException var3 = new org.jsecurity.session.UnknownSessionException("dd\uFFFD", (java.io.Serializable)100.0f);
    org.jsecurity.session.SessionException var5 = new org.jsecurity.session.SessionException("dd\uFFFD", (java.lang.Throwable)var3, (java.io.Serializable)0);
    org.jsecurity.authc.SimpleAuthenticationInfo var8 = new org.jsecurity.authc.SimpleAuthenticationInfo((java.lang.Object)0, (java.lang.Object)10, "hi!");
    org.jsecurity.codec.CodecException var11 = new org.jsecurity.codec.CodecException("dd\uFFFD");
    org.jsecurity.authc.ConcurrentAccessException var12 = new org.jsecurity.authc.ConcurrentAccessException("org.jsecurity.authz.UnauthorizedException: org.jsecurity.session.ExpiredSessionException: ", (java.lang.Throwable)var11);
    org.jsecurity.subject.SimplePrincipalCollection var14 = new org.jsecurity.subject.SimplePrincipalCollection((java.lang.Object)var11, "");
    org.jsecurity.authc.pam.FirstSuccessfulAuthenticationStrategy var15 = new org.jsecurity.authc.pam.FirstSuccessfulAuthenticationStrategy();
    org.jsecurity.authz.UnauthorizedException var17 = new org.jsecurity.authz.UnauthorizedException("org.jsecurity.config.ConfigurationException: dd\uFFFD");
    java.lang.Throwable[] var18 = var17.getSuppressed();
    java.util.List var19 = org.jsecurity.util.CollectionUtils.asList((java.lang.Object[])var18);
    org.jsecurity.authc.UsernamePasswordToken var20 = new org.jsecurity.authc.UsernamePasswordToken();
    java.lang.String var21 = var20.getUsername();
    java.net.InetAddress var22 = var20.getInetAddress();
    org.jsecurity.authc.AuthenticationInfo var23 = var15.beforeAllAttempts((java.util.Collection)var19, (org.jsecurity.authc.AuthenticationToken)var20);
    org.jsecurity.session.UnknownSessionException var28 = new org.jsecurity.session.UnknownSessionException("dd\uFFFD", (java.io.Serializable)100.0f);
    org.jsecurity.subject.SubjectException var29 = new org.jsecurity.subject.SubjectException("dd\uFFFD", (java.lang.Throwable)var28);
    org.jsecurity.io.SerializationException var30 = new org.jsecurity.io.SerializationException("", (java.lang.Throwable)var29);
    java.lang.Throwable[] var31 = var29.getSuppressed();
    java.util.Set var32 = org.jsecurity.util.CollectionUtils.asSet((java.lang.Object[])var31);
    org.jsecurity.authc.SimpleAccount var33 = new org.jsecurity.authc.SimpleAccount((org.jsecurity.subject.PrincipalCollection)var14, (java.lang.Object)var19, var32);
    var8.setPrincipals((org.jsecurity.subject.PrincipalCollection)var14);
    java.util.Collection var36 = var14.fromRealm("org.jsecurity.subject.SubjectException: dd\uFFFD");
    org.jsecurity.io.ResourceException var40 = new org.jsecurity.io.ResourceException("hi!");
    org.jsecurity.authc.UnknownAccountException var41 = new org.jsecurity.authc.UnknownAccountException((java.lang.Throwable)var40);
    org.jsecurity.session.StoppedSessionException var42 = new org.jsecurity.session.StoppedSessionException("dd\uFFFD", (java.io.Serializable)var40);
    org.jsecurity.session.UnknownSessionException var43 = new org.jsecurity.session.UnknownSessionException("org.jsecurity.authz.UnauthorizedException: org.jsecurity.session.ExpiredSessionException: ", (java.lang.Throwable)var40);
    java.io.InputStream var45 = org.jsecurity.util.ClassUtils.getResourceAsStream("");
    java.lang.Object[] var46 = new java.lang.Object[] { var45};
    java.util.List var47 = org.jsecurity.util.CollectionUtils.asList(var46);
    org.jsecurity.authc.pam.ModularRealmAuthenticator var48 = new org.jsecurity.authc.pam.ModularRealmAuthenticator(var47);
    org.jsecurity.subject.SimplePrincipalCollection var50 = new org.jsecurity.subject.SimplePrincipalCollection((java.util.Collection)var47, "org.jsecurity.authz.UnauthorizedException: org.jsecurity.session.ExpiredSessionException: ");
    org.jsecurity.session.UnknownSessionException var55 = new org.jsecurity.session.UnknownSessionException("dd\uFFFD", (java.io.Serializable)100.0f);
    org.jsecurity.session.SessionException var57 = new org.jsecurity.session.SessionException("dd\uFFFD", (java.lang.Throwable)var55, (java.io.Serializable)0);
    org.jsecurity.session.SessionException var58 = new org.jsecurity.session.SessionException("dd\uFFFD", (java.lang.Throwable)var55);
    var50.add((java.lang.Object)var58, "org.jsecurity.config.ConfigurationException: dd\uFFFD");
    java.util.Set var61 = var50.asSet();
    org.jsecurity.authc.SimpleAccount var62 = new org.jsecurity.authc.SimpleAccount((org.jsecurity.subject.PrincipalCollection)var14, (java.lang.Object)var40, var61);
    org.jsecurity.session.mgt.eis.MemorySessionDAO var63 = new org.jsecurity.session.mgt.eis.MemorySessionDAO();
    org.jsecurity.cache.Cache var64 = var63.getActiveSessionsCache();
    var63.setActiveSessionsCacheName("dd\uFFFD");
    java.util.Collection var67 = var63.getActiveSessions();
    java.lang.String var68 = var63.getActiveSessionsCacheName();
    org.jsecurity.cache.Cache var69 = var63.getActiveSessionsCache();
    org.jsecurity.cache.Cache var70 = var63.getActiveSessionsCache();
    org.jsecurity.codec.CodecException var73 = new org.jsecurity.codec.CodecException("dd\uFFFD");
    org.jsecurity.authc.ConcurrentAccessException var74 = new org.jsecurity.authc.ConcurrentAccessException("org.jsecurity.authz.UnauthorizedException: org.jsecurity.session.ExpiredSessionException: ", (java.lang.Throwable)var73);
    org.jsecurity.subject.SimplePrincipalCollection var76 = new org.jsecurity.subject.SimplePrincipalCollection((java.lang.Object)var73, "");
    org.jsecurity.authc.pam.FirstSuccessfulAuthenticationStrategy var77 = new org.jsecurity.authc.pam.FirstSuccessfulAuthenticationStrategy();
    org.jsecurity.authz.UnauthorizedException var79 = new org.jsecurity.authz.UnauthorizedException("org.jsecurity.config.ConfigurationException: dd\uFFFD");
    java.lang.Throwable[] var80 = var79.getSuppressed();
    java.util.List var81 = org.jsecurity.util.CollectionUtils.asList((java.lang.Object[])var80);
    org.jsecurity.authc.UsernamePasswordToken var82 = new org.jsecurity.authc.UsernamePasswordToken();
    java.lang.String var83 = var82.getUsername();
    java.net.InetAddress var84 = var82.getInetAddress();
    org.jsecurity.authc.AuthenticationInfo var85 = var77.beforeAllAttempts((java.util.Collection)var81, (org.jsecurity.authc.AuthenticationToken)var82);
    org.jsecurity.session.UnknownSessionException var90 = new org.jsecurity.session.UnknownSessionException("dd\uFFFD", (java.io.Serializable)100.0f);
    org.jsecurity.subject.SubjectException var91 = new org.jsecurity.subject.SubjectException("dd\uFFFD", (java.lang.Throwable)var90);
    org.jsecurity.io.SerializationException var92 = new org.jsecurity.io.SerializationException("", (java.lang.Throwable)var91);
    java.lang.Throwable[] var93 = var91.getSuppressed();
    java.util.Set var94 = org.jsecurity.util.CollectionUtils.asSet((java.lang.Object[])var93);
    org.jsecurity.authc.SimpleAccount var95 = new org.jsecurity.authc.SimpleAccount((org.jsecurity.subject.PrincipalCollection)var76, (java.lang.Object)var81, var94);
    org.jsecurity.authc.SimpleAccount var96 = new org.jsecurity.authc.SimpleAccount((org.jsecurity.subject.PrincipalCollection)var14, (java.lang.Object)var70, var94);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var18);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var19);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var21);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var22);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var23);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var31);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var32);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var36);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var45);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var46);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var47);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var61);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var64);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var67);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var68 + "' != '" + "dd\uFFFD"+ "'", var68.equals("dd\uFFFD"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var69);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var70);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var80);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var81);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var83);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var84);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var85);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var93);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var94);

  }

  public void test203() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest5.test203");


    org.jsecurity.session.mgt.eis.MemorySessionDAO var0 = new org.jsecurity.session.mgt.eis.MemorySessionDAO();
    org.jsecurity.session.mgt.SimpleSession var1 = new org.jsecurity.session.mgt.SimpleSession();
    java.util.Date var2 = var1.getLastAccessTime();
    org.jsecurity.session.mgt.eis.MemorySessionDAO var3 = new org.jsecurity.session.mgt.eis.MemorySessionDAO();
    org.jsecurity.cache.Cache var4 = var3.getActiveSessionsCache();
    org.jsecurity.cache.CacheManager var5 = var3.getCacheManager();
    org.jsecurity.cache.HashtableCacheManager var6 = new org.jsecurity.cache.HashtableCacheManager();
    org.jsecurity.cache.Cache var8 = var6.getCache("\u0000\u0000");
    var3.setActiveSessionsCache(var8);
    java.io.InputStream var11 = org.jsecurity.util.ClassUtils.getResourceAsStream("");
    java.lang.Object[] var12 = new java.lang.Object[] { var11};
    java.util.List var13 = org.jsecurity.util.CollectionUtils.asList(var12);
    org.jsecurity.authc.pam.ModularRealmAuthenticator var14 = new org.jsecurity.authc.pam.ModularRealmAuthenticator(var13);
    org.jsecurity.authc.pam.AllSuccessfulModularAuthenticationStrategy var15 = new org.jsecurity.authc.pam.AllSuccessfulModularAuthenticationStrategy();
    var14.setModularAuthenticationStrategy((org.jsecurity.authc.pam.ModularAuthenticationStrategy)var15);
    org.jsecurity.authz.SimpleAuthorizationInfo var17 = new org.jsecurity.authz.SimpleAuthorizationInfo();
    var17.addStringPermission("hi!");
    java.io.InputStream var21 = org.jsecurity.util.ClassUtils.getResourceAsStream("");
    java.lang.Object[] var22 = new java.lang.Object[] { var21};
    java.util.List var23 = org.jsecurity.util.CollectionUtils.asList(var22);
    var17.addRoles((java.util.Collection)var23);
    var14.setAuthenticationListeners((java.util.Collection)var23);
    org.jsecurity.realm.activedirectory.ActiveDirectoryRealm var26 = new org.jsecurity.realm.activedirectory.ActiveDirectoryRealm();
    var26.setPrincipalSuffix("");
    var14.setRealm((org.jsecurity.realm.Realm)var26);
    org.jsecurity.cache.HashtableCacheManager var30 = new org.jsecurity.cache.HashtableCacheManager();
    org.jsecurity.cache.Cache var32 = var30.getCache("\u0000\u0000");
    var26.setAuthorizationCache(var32);
    var3.setActiveSessionsCache(var32);
    org.jsecurity.session.mgt.SimpleSession var35 = new org.jsecurity.session.mgt.SimpleSession();
    java.io.Serializable var36 = var3.create((org.jsecurity.session.Session)var35);
    java.io.Serializable var37 = var35.getId();
    org.jsecurity.session.mgt.SimpleSession var38 = new org.jsecurity.session.mgt.SimpleSession();
    var38.touch();
    var38.validate();
    org.jsecurity.session.mgt.SimpleSession var41 = new org.jsecurity.session.mgt.SimpleSession();
    var41.setTimeout((-1L));
    org.jsecurity.session.mgt.SimpleSession var44 = new org.jsecurity.session.mgt.SimpleSession();
    java.util.Date var45 = var44.getLastAccessTime();
    var41.setLastAccessTime(var45);
    org.jsecurity.session.mgt.SimpleSession var47 = new org.jsecurity.session.mgt.SimpleSession();
    java.util.Date var48 = var47.getLastAccessTime();
    var41.setStopTimestamp(var48);
    var38.setLastAccessTime(var48);
    var35.setStartTimestamp(var48);
    var1.setLastAccessTime(var48);
    boolean var53 = var1.isValid();
    var0.delete((org.jsecurity.session.Session)var1);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var2);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var4);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var5);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var8);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var11);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var12);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var13);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var21);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var22);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var23);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var32);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var36 + "' != '" + "35c195f3-4db8-4a1c-9fbb-7950a5c44474"+ "'", var36.equals("35c195f3-4db8-4a1c-9fbb-7950a5c44474"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var37 + "' != '" + "35c195f3-4db8-4a1c-9fbb-7950a5c44474"+ "'", var37.equals("35c195f3-4db8-4a1c-9fbb-7950a5c44474"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var45);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var48);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var53 == true);

  }

  public void test204() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest5.test204");


    org.jsecurity.authc.ExpiredCredentialsException var2 = new org.jsecurity.authc.ExpiredCredentialsException();
    org.jsecurity.session.ExpiredSessionException var3 = new org.jsecurity.session.ExpiredSessionException("", (java.lang.Throwable)var2);
    org.jsecurity.authz.UnauthorizedException var4 = new org.jsecurity.authz.UnauthorizedException((java.lang.Throwable)var3);
    java.lang.String var5 = var4.toString();
    org.jsecurity.config.UnresolveableReferenceException var6 = new org.jsecurity.config.UnresolveableReferenceException("74c33783-4603-416d-a0a0-d39d40783197", (java.lang.Throwable)var4);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var5 + "' != '" + "org.jsecurity.authz.UnauthorizedException: org.jsecurity.session.ExpiredSessionException: "+ "'", var5.equals("org.jsecurity.authz.UnauthorizedException: org.jsecurity.session.ExpiredSessionException: "));

  }

  public void test205() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest5.test205");


    org.jsecurity.realm.jndi.JndiRealmFactory var0 = new org.jsecurity.realm.jndi.JndiRealmFactory();
    java.util.Collection var1 = var0.getJndiNames();
    org.jsecurity.authz.SimpleRole var2 = new org.jsecurity.authz.SimpleRole();
    org.jsecurity.authz.permission.WildcardPermission var5 = new org.jsecurity.authz.permission.WildcardPermission("hi!", false);
    boolean var6 = var2.isPermitted((org.jsecurity.authz.Permission)var5);
    java.io.InputStream var8 = org.jsecurity.util.ClassUtils.getResourceAsStream("");
    java.lang.Object[] var9 = new java.lang.Object[] { var8};
    java.util.List var10 = org.jsecurity.util.CollectionUtils.asList(var9);
    var2.addAll((java.util.Collection)var10);
    org.jsecurity.authc.pam.ModularRealmAuthenticator var12 = new org.jsecurity.authc.pam.ModularRealmAuthenticator(var10);
    var0.setJndiNames((java.util.Collection)var10);
    java.util.Collection var14 = var0.getJndiNames();
    boolean var15 = var0.isResourceRef();
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var6 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var8);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var9);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var10);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var14);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var15 == false);

  }

  public void test206() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest5.test206");


    org.jsecurity.session.mgt.DelegatingSession var0 = new org.jsecurity.session.mgt.DelegatingSession();
    org.jsecurity.session.mgt.DefaultSessionManager var1 = new org.jsecurity.session.mgt.DefaultSessionManager();
    org.jsecurity.session.mgt.eis.MemorySessionDAO var2 = new org.jsecurity.session.mgt.eis.MemorySessionDAO();
    org.jsecurity.cache.Cache var3 = var2.getActiveSessionsCache();
    org.jsecurity.cache.CacheManager var4 = var2.getCacheManager();
    org.jsecurity.cache.HashtableCacheManager var5 = new org.jsecurity.cache.HashtableCacheManager();
    org.jsecurity.cache.Cache var7 = var5.getCache("\u0000\u0000");
    var2.setActiveSessionsCache(var7);
    java.io.InputStream var10 = org.jsecurity.util.ClassUtils.getResourceAsStream("");
    java.lang.Object[] var11 = new java.lang.Object[] { var10};
    java.util.List var12 = org.jsecurity.util.CollectionUtils.asList(var11);
    org.jsecurity.authc.pam.ModularRealmAuthenticator var13 = new org.jsecurity.authc.pam.ModularRealmAuthenticator(var12);
    org.jsecurity.authc.pam.AllSuccessfulModularAuthenticationStrategy var14 = new org.jsecurity.authc.pam.AllSuccessfulModularAuthenticationStrategy();
    var13.setModularAuthenticationStrategy((org.jsecurity.authc.pam.ModularAuthenticationStrategy)var14);
    org.jsecurity.authz.SimpleAuthorizationInfo var16 = new org.jsecurity.authz.SimpleAuthorizationInfo();
    var16.addStringPermission("hi!");
    java.io.InputStream var20 = org.jsecurity.util.ClassUtils.getResourceAsStream("");
    java.lang.Object[] var21 = new java.lang.Object[] { var20};
    java.util.List var22 = org.jsecurity.util.CollectionUtils.asList(var21);
    var16.addRoles((java.util.Collection)var22);
    var13.setAuthenticationListeners((java.util.Collection)var22);
    org.jsecurity.realm.activedirectory.ActiveDirectoryRealm var25 = new org.jsecurity.realm.activedirectory.ActiveDirectoryRealm();
    var25.setPrincipalSuffix("");
    var13.setRealm((org.jsecurity.realm.Realm)var25);
    org.jsecurity.cache.HashtableCacheManager var29 = new org.jsecurity.cache.HashtableCacheManager();
    org.jsecurity.cache.Cache var31 = var29.getCache("\u0000\u0000");
    var25.setAuthorizationCache(var31);
    var2.setActiveSessionsCache(var31);
    org.jsecurity.session.mgt.SimpleSession var34 = new org.jsecurity.session.mgt.SimpleSession();
    java.io.Serializable var35 = var2.create((org.jsecurity.session.Session)var34);
    var1.setSessionDAO((org.jsecurity.session.mgt.eis.SessionDAO)var2);
    var0.setSessionManager((org.jsecurity.session.mgt.SessionManager)var1);
    long var38 = var1.getSessionValidationInterval();
    org.jsecurity.session.mgt.quartz.QuartzSessionValidationScheduler var39 = new org.jsecurity.session.mgt.quartz.QuartzSessionValidationScheduler((org.jsecurity.session.mgt.ValidatingSessionManager)var1);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var3);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var4);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var7);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var10);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var11);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var12);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var20);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var21);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var22);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var31);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var35 + "' != '" + "46b7eeaa-afcc-499c-aad3-c2d089ce9a8c"+ "'", var35.equals("46b7eeaa-afcc-499c-aad3-c2d089ce9a8c"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var38 == 3600000L);

  }

  public void test207() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest5.test207");


    java.lang.String[] var1 = org.jsecurity.util.StringUtils.split("org.jsecurity.config.ConfigurationException: dd\uFFFD");
    java.util.Set var2 = org.jsecurity.util.CollectionUtils.asSet((java.lang.Object[])var1);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var1);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var2);

  }

  public void test208() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest5.test208");


    org.jsecurity.authz.SimpleRole var0 = new org.jsecurity.authz.SimpleRole();
    org.jsecurity.authz.permission.WildcardPermission var3 = new org.jsecurity.authz.permission.WildcardPermission("hi!", false);
    boolean var4 = var0.isPermitted((org.jsecurity.authz.Permission)var3);
    java.io.InputStream var6 = org.jsecurity.util.ClassUtils.getResourceAsStream("");
    java.lang.Object[] var7 = new java.lang.Object[] { var6};
    java.util.List var8 = org.jsecurity.util.CollectionUtils.asList(var7);
    var0.addAll((java.util.Collection)var8);
    org.jsecurity.authz.SimpleAuthorizationInfo var10 = new org.jsecurity.authz.SimpleAuthorizationInfo();
    org.jsecurity.session.UnknownSessionException var15 = new org.jsecurity.session.UnknownSessionException("dd\uFFFD", (java.io.Serializable)100.0f);
    org.jsecurity.subject.SubjectException var16 = new org.jsecurity.subject.SubjectException("dd\uFFFD", (java.lang.Throwable)var15);
    org.jsecurity.io.SerializationException var17 = new org.jsecurity.io.SerializationException("", (java.lang.Throwable)var16);
    java.lang.Throwable[] var18 = var16.getSuppressed();
    java.util.Set var19 = org.jsecurity.util.CollectionUtils.asSet((java.lang.Object[])var18);
    var10.setStringPermissions(var19);
    java.util.Set var21 = var10.getRoles();
    org.jsecurity.authz.SimpleAuthorizationInfo var22 = new org.jsecurity.authz.SimpleAuthorizationInfo();
    var22.addRole("a2b823b1e72eae2b727289df8a00a89df8a0bab6ad8a89c4c5c7a9b62a270000");
    org.jsecurity.session.UnknownSessionException var29 = new org.jsecurity.session.UnknownSessionException("dd\uFFFD", (java.io.Serializable)100.0f);
    org.jsecurity.subject.SubjectException var30 = new org.jsecurity.subject.SubjectException("dd\uFFFD", (java.lang.Throwable)var29);
    org.jsecurity.io.SerializationException var31 = new org.jsecurity.io.SerializationException("", (java.lang.Throwable)var30);
    java.lang.Throwable[] var32 = var30.getSuppressed();
    java.util.Set var33 = org.jsecurity.util.CollectionUtils.asSet((java.lang.Object[])var32);
    var22.addRoles((java.util.Collection)var33);
    var10.setRoles(var33);
    org.jsecurity.authz.SimpleAuthorizationInfo var36 = new org.jsecurity.authz.SimpleAuthorizationInfo();
    org.jsecurity.session.UnknownSessionException var41 = new org.jsecurity.session.UnknownSessionException("dd\uFFFD", (java.io.Serializable)100.0f);
    org.jsecurity.subject.SubjectException var42 = new org.jsecurity.subject.SubjectException("dd\uFFFD", (java.lang.Throwable)var41);
    org.jsecurity.io.SerializationException var43 = new org.jsecurity.io.SerializationException("", (java.lang.Throwable)var42);
    java.lang.Throwable[] var44 = var42.getSuppressed();
    java.util.Set var45 = org.jsecurity.util.CollectionUtils.asSet((java.lang.Object[])var44);
    var36.setStringPermissions(var45);
    java.util.Set var47 = var36.getRoles();
    org.jsecurity.authz.SimpleAuthorizationInfo var48 = new org.jsecurity.authz.SimpleAuthorizationInfo();
    var48.addRole("a2b823b1e72eae2b727289df8a00a89df8a0bab6ad8a89c4c5c7a9b62a270000");
    org.jsecurity.session.UnknownSessionException var55 = new org.jsecurity.session.UnknownSessionException("dd\uFFFD", (java.io.Serializable)100.0f);
    org.jsecurity.subject.SubjectException var56 = new org.jsecurity.subject.SubjectException("dd\uFFFD", (java.lang.Throwable)var55);
    org.jsecurity.io.SerializationException var57 = new org.jsecurity.io.SerializationException("", (java.lang.Throwable)var56);
    java.lang.Throwable[] var58 = var56.getSuppressed();
    java.util.Set var59 = org.jsecurity.util.CollectionUtils.asSet((java.lang.Object[])var58);
    var48.addRoles((java.util.Collection)var59);
    var36.setRoles(var59);
    var10.setRoles(var59);
    org.jsecurity.authz.ModularRealmAuthorizer var63 = new org.jsecurity.authz.ModularRealmAuthorizer((java.util.Collection)var59);
    org.jsecurity.realm.text.PropertiesRealm var64 = new org.jsecurity.realm.text.PropertiesRealm();
    org.jsecurity.realm.activedirectory.ActiveDirectoryRealm var65 = new org.jsecurity.realm.activedirectory.ActiveDirectoryRealm();
    org.jsecurity.authc.credential.Sha256CredentialsMatcher var66 = new org.jsecurity.authc.credential.Sha256CredentialsMatcher();
    var65.setCredentialsMatcher((org.jsecurity.authc.credential.CredentialsMatcher)var66);
    java.lang.String var68 = var65.getAuthorizationCacheName();
    var65.setPrincipalSuffix("org.jsecurity.config.ConfigurationException: dd\uFFFD");
    org.jsecurity.authz.permission.PermissionResolver var71 = var65.getPermissionResolver();
    var64.setPermissionResolver(var71);
    java.util.Set var73 = org.jsecurity.util.PermissionUtils.resolvePermissions((java.util.Collection)var59, var71);
    var0.addAll((java.util.Collection)var73);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var4 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var6);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var7);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var8);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var18);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var19);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var21);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var32);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var33);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var44);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var45);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var47);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var58);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var59);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var68);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var71);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var73);

  }

  public void test209() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest5.test209");


    org.jsecurity.realm.activedirectory.ActiveDirectoryRealm var0 = new org.jsecurity.realm.activedirectory.ActiveDirectoryRealm();
    org.jsecurity.authc.credential.Sha256CredentialsMatcher var1 = new org.jsecurity.authc.credential.Sha256CredentialsMatcher();
    var0.setCredentialsMatcher((org.jsecurity.authc.credential.CredentialsMatcher)var1);
    org.jsecurity.realm.activedirectory.ActiveDirectoryRealm var3 = new org.jsecurity.realm.activedirectory.ActiveDirectoryRealm();
    org.jsecurity.authc.credential.Sha256CredentialsMatcher var4 = new org.jsecurity.authc.credential.Sha256CredentialsMatcher();
    var3.setCredentialsMatcher((org.jsecurity.authc.credential.CredentialsMatcher)var4);
    java.lang.String var6 = var3.getAuthorizationCacheName();
    var3.setUrl("hi!");
    org.jsecurity.realm.ldap.DefaultLdapContextFactory var9 = new org.jsecurity.realm.ldap.DefaultLdapContextFactory();
    var3.setLdapContextFactory((org.jsecurity.realm.ldap.LdapContextFactory)var9);
    var9.setAuthentication("org.jsecurity.authz.UnauthorizedException: org.jsecurity.session.ExpiredSessionException: ");
    var0.setLdapContextFactory((org.jsecurity.realm.ldap.LdapContextFactory)var9);
    var0.setPrincipalSuffix("783ccd31-48a8-42dd-890f-df885a7baaff");
    org.jsecurity.realm.ldap.DefaultLdapContextFactory var16 = new org.jsecurity.realm.ldap.DefaultLdapContextFactory();
    var16.setSystemUsername("org.jsecurity.authz.UnauthorizedException: org.jsecurity.session.ExpiredSessionException: ");
    var0.setLdapContextFactory((org.jsecurity.realm.ldap.LdapContextFactory)var16);
    org.jsecurity.authc.credential.CredentialsMatcher var20 = var0.getCredentialsMatcher();
    var0.initAuthorizationCache();
    org.jsecurity.authz.permission.PermissionResolver var22 = var0.getPermissionResolver();
    var0.setSearchBase("5746ccab-0c90-45cf-a71b-b75c687df217");
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var6);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var20);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var22);

  }

  public void test210() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest5.test210");


    org.jsecurity.cache.HashtableCache var1 = new org.jsecurity.cache.HashtableCache("\u0000\u0000\u0000");
    org.jsecurity.session.mgt.SimpleSession var2 = new org.jsecurity.session.mgt.SimpleSession();
    var2.touch();
    org.jsecurity.authz.UnauthenticatedException var6 = new org.jsecurity.authz.UnauthenticatedException();
    org.jsecurity.config.UnresolveableReferenceException var7 = new org.jsecurity.config.UnresolveableReferenceException("", (java.lang.Throwable)var6);
    org.jsecurity.cache.CacheException var8 = new org.jsecurity.cache.CacheException("org.jsecurity.config.ConfigurationException: dd\uFFFD", (java.lang.Throwable)var6);
    java.lang.Object var9 = var2.removeAttribute((java.lang.Object)var8);
    org.jsecurity.mgt.DefaultSecurityManager var10 = new org.jsecurity.mgt.DefaultSecurityManager();
    org.jsecurity.authc.pam.AllSuccessfulModularAuthenticationStrategy var11 = new org.jsecurity.authc.pam.AllSuccessfulModularAuthenticationStrategy();
    org.jsecurity.authc.pam.AllSuccessfulModularAuthenticationStrategy var12 = new org.jsecurity.authc.pam.AllSuccessfulModularAuthenticationStrategy();
    char[] var14 = new char[] { };
    org.jsecurity.authc.UsernamePasswordToken var16 = new org.jsecurity.authc.UsernamePasswordToken("hi!", var14, true);
    org.jsecurity.authc.SimpleAccount var17 = new org.jsecurity.authc.SimpleAccount();
    var17.setCredentialsExpired(false);
    boolean var20 = var17.isLocked();
    org.jsecurity.authc.AuthenticationInfo var21 = var12.afterAllAttempts((org.jsecurity.authc.AuthenticationToken)var16, (org.jsecurity.authc.AuthenticationInfo)var17);
    char[] var25 = new char[] { '4', '#'};
    org.jsecurity.authc.UsernamePasswordToken var26 = new org.jsecurity.authc.UsernamePasswordToken("\u0000\u0000", var25);
    org.jsecurity.authc.SimpleAccount var27 = new org.jsecurity.authc.SimpleAccount();
    var27.setCredentialsExpired(false);
    var27.setCredentialsExpired(false);
    boolean var32 = var27.isCredentialsExpired();
    org.jsecurity.authc.AuthenticationInfo var33 = var12.afterAllAttempts((org.jsecurity.authc.AuthenticationToken)var26, (org.jsecurity.authc.AuthenticationInfo)var27);
    org.jsecurity.authz.UnauthenticatedException var37 = new org.jsecurity.authz.UnauthenticatedException();
    org.jsecurity.config.UnresolveableReferenceException var38 = new org.jsecurity.config.UnresolveableReferenceException("", (java.lang.Throwable)var37);
    org.jsecurity.cache.CacheException var39 = new org.jsecurity.cache.CacheException("org.jsecurity.config.ConfigurationException: dd\uFFFD", (java.lang.Throwable)var37);
    org.jsecurity.authc.SimpleAuthenticationInfo var41 = new org.jsecurity.authc.SimpleAuthenticationInfo((java.lang.Object)"org.jsecurity.config.ConfigurationException: dd\uFFFD", (java.lang.Object)var39, "a2b823b1e72eae2b727289df8a00a89df8a0bab6ad8a89c4c5c7a9b62a270000");
    org.jsecurity.subject.PrincipalCollection var42 = var41.getPrincipals();
    org.jsecurity.authc.AuthenticationInfo var43 = var11.afterAllAttempts((org.jsecurity.authc.AuthenticationToken)var26, (org.jsecurity.authc.AuthenticationInfo)var41);
    var10.setModularAuthenticationStrategy((org.jsecurity.authc.pam.ModularAuthenticationStrategy)var11);
    org.jsecurity.subject.RememberMeManager var45 = var10.getRememberMeManager();
    org.jsecurity.authc.pam.ModularRealmAuthenticator var46 = new org.jsecurity.authc.pam.ModularRealmAuthenticator();
    var10.setAuthenticator((org.jsecurity.authc.Authenticator)var46);
    var1.put((java.lang.Object)var2, (java.lang.Object)var46);
    org.jsecurity.realm.activedirectory.ActiveDirectoryRealm var49 = new org.jsecurity.realm.activedirectory.ActiveDirectoryRealm();
    org.jsecurity.authc.credential.Sha256CredentialsMatcher var50 = new org.jsecurity.authc.credential.Sha256CredentialsMatcher();
    var49.setCredentialsMatcher((org.jsecurity.authc.credential.CredentialsMatcher)var50);
    var50.setHashSalted(false);
    org.jsecurity.authz.UnauthenticatedException var56 = new org.jsecurity.authz.UnauthenticatedException();
    org.jsecurity.config.UnresolveableReferenceException var57 = new org.jsecurity.config.UnresolveableReferenceException("", (java.lang.Throwable)var56);
    org.jsecurity.session.InvalidSessionException var58 = new org.jsecurity.session.InvalidSessionException((java.io.Serializable)var56);
    org.jsecurity.subject.InvalidSubjectException var59 = new org.jsecurity.subject.InvalidSubjectException("org.jsecurity.config.ConfigurationException: dd\uFFFD", (java.lang.Throwable)var56);
    var1.put((java.lang.Object)var50, (java.lang.Object)"org.jsecurity.config.ConfigurationException: dd\uFFFD");
    java.util.Set var61 = var1.keys();
    org.jsecurity.crypto.hash.Sha256Hash var63 = org.jsecurity.crypto.hash.Sha256Hash.fromBase64String("e7a91ff4-6903-4f3c-ac4f-2cf4ba6b7930");
    java.lang.Object var64 = var1.get((java.lang.Object)"e7a91ff4-6903-4f3c-ac4f-2cf4ba6b7930");
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var9);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var14);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var20 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var21);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var25);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var32 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var33);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var42);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var43);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var45);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var61);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var63);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var64);

  }

  public void test211() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest5.test211");


    org.jsecurity.realm.activedirectory.ActiveDirectoryRealm var0 = new org.jsecurity.realm.activedirectory.ActiveDirectoryRealm();
    org.jsecurity.authc.credential.Sha256CredentialsMatcher var1 = new org.jsecurity.authc.credential.Sha256CredentialsMatcher();
    var0.setCredentialsMatcher((org.jsecurity.authc.credential.CredentialsMatcher)var1);
    org.jsecurity.realm.activedirectory.ActiveDirectoryRealm var3 = new org.jsecurity.realm.activedirectory.ActiveDirectoryRealm();
    org.jsecurity.authc.credential.Sha256CredentialsMatcher var4 = new org.jsecurity.authc.credential.Sha256CredentialsMatcher();
    var3.setCredentialsMatcher((org.jsecurity.authc.credential.CredentialsMatcher)var4);
    java.lang.String var6 = var3.getAuthorizationCacheName();
    var3.setUrl("hi!");
    org.jsecurity.realm.ldap.DefaultLdapContextFactory var9 = new org.jsecurity.realm.ldap.DefaultLdapContextFactory();
    var3.setLdapContextFactory((org.jsecurity.realm.ldap.LdapContextFactory)var9);
    var9.setAuthentication("org.jsecurity.authz.UnauthorizedException: org.jsecurity.session.ExpiredSessionException: ");
    var0.setLdapContextFactory((org.jsecurity.realm.ldap.LdapContextFactory)var9);
    var9.setReferral("a2b823b1e72eae2b727289df8a00a89df8a0bab6ad8a89c4c5c7a9b62a270000");
    var9.setUrl("\u0000\u0000");
    var9.setSystemUsername("2e460aa1-7db8-4a99-ad7a-a5b2ab41638e");
    var9.setUsePooling(false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var6);

  }

  public void test212() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest5.test212");


    org.jsecurity.session.mgt.SimpleSession var0 = new org.jsecurity.session.mgt.SimpleSession();
    var0.touch();
    var0.validate();
    org.jsecurity.session.mgt.SimpleSession var3 = new org.jsecurity.session.mgt.SimpleSession();
    var3.setTimeout((-1L));
    org.jsecurity.session.mgt.SimpleSession var6 = new org.jsecurity.session.mgt.SimpleSession();
    java.util.Date var7 = var6.getLastAccessTime();
    var3.setLastAccessTime(var7);
    org.jsecurity.session.mgt.SimpleSession var9 = new org.jsecurity.session.mgt.SimpleSession();
    java.util.Date var10 = var9.getLastAccessTime();
    var3.setStopTimestamp(var10);
    var0.setLastAccessTime(var10);
    java.util.Date var13 = var0.getStartTimestamp();
    java.util.Date var14 = var0.getStartTimestamp();
    org.jsecurity.util.AntPathMatcher var15 = new org.jsecurity.util.AntPathMatcher();
    var15.setPathSeparator("org.jsecurity.authz.UnauthorizedException: org.jsecurity.session.ExpiredSessionException: ");
    var15.setPathSeparator("46b05a44-d2f3-4a9e-b289-ce4f2d173048");
    boolean var21 = var15.isPattern("6c9a3d8a-dfcf-4bc4-9aad-6adc8cd8bee3");
    java.lang.Object var22 = var0.getAttribute((java.lang.Object)var21);
    java.io.Serializable var23 = var0.getId();
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var7);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var10);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var13);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var14);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var21 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var22);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var23);

  }

  public void test213() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest5.test213");


    org.jsecurity.util.UnavailableConstructorException var3 = new org.jsecurity.util.UnavailableConstructorException("org.jsecurity.authc.CredentialsException: 783ccd31-48a8-42dd-890f-df885a7baaff");
    org.jsecurity.authc.IncorrectCredentialsException var4 = new org.jsecurity.authc.IncorrectCredentialsException((java.lang.Throwable)var3);
    org.jsecurity.session.UnknownSessionException var5 = new org.jsecurity.session.UnknownSessionException("org.jsecurity.authc.AccountException: hi!", (java.lang.Throwable)var3);
    org.jsecurity.session.StoppedSessionException var6 = new org.jsecurity.session.StoppedSessionException("072be27b-6bd8-4897-92c3-67cf42b4a94f", (java.lang.Throwable)var3);

  }

  public void test214() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest5.test214");


    org.jsecurity.io.XmlSerializer var0 = new org.jsecurity.io.XmlSerializer();
    org.jsecurity.session.mgt.quartz.QuartzSessionValidationScheduler var1 = new org.jsecurity.session.mgt.quartz.QuartzSessionValidationScheduler();
    var1.disableSessionValidation();
    byte[] var3 = var0.serialize((java.lang.Object)var1);
    org.jsecurity.authc.ExpiredCredentialsException var6 = new org.jsecurity.authc.ExpiredCredentialsException();
    org.jsecurity.session.ExpiredSessionException var7 = new org.jsecurity.session.ExpiredSessionException("", (java.lang.Throwable)var6);
    org.jsecurity.authz.UnauthorizedException var8 = new org.jsecurity.authz.UnauthorizedException((java.lang.Throwable)var7);
    org.jsecurity.session.ExpiredSessionException var9 = new org.jsecurity.session.ExpiredSessionException("?\u0238\u0018@\uFFFD", (java.lang.Throwable)var7);
    byte[] var10 = var0.serialize((java.lang.Object)var9);
    org.jsecurity.session.mgt.eis.MemorySessionDAO var11 = new org.jsecurity.session.mgt.eis.MemorySessionDAO();
    org.jsecurity.cache.Cache var12 = var11.getActiveSessionsCache();
    org.jsecurity.cache.CacheManager var13 = var11.getCacheManager();
    org.jsecurity.cache.HashtableCacheManager var14 = new org.jsecurity.cache.HashtableCacheManager();
    org.jsecurity.cache.Cache var16 = var14.getCache("\u0000\u0000");
    var11.setActiveSessionsCache(var16);
    java.io.InputStream var19 = org.jsecurity.util.ClassUtils.getResourceAsStream("");
    java.lang.Object[] var20 = new java.lang.Object[] { var19};
    java.util.List var21 = org.jsecurity.util.CollectionUtils.asList(var20);
    org.jsecurity.authc.pam.ModularRealmAuthenticator var22 = new org.jsecurity.authc.pam.ModularRealmAuthenticator(var21);
    org.jsecurity.authc.pam.AllSuccessfulModularAuthenticationStrategy var23 = new org.jsecurity.authc.pam.AllSuccessfulModularAuthenticationStrategy();
    var22.setModularAuthenticationStrategy((org.jsecurity.authc.pam.ModularAuthenticationStrategy)var23);
    org.jsecurity.authz.SimpleAuthorizationInfo var25 = new org.jsecurity.authz.SimpleAuthorizationInfo();
    var25.addStringPermission("hi!");
    java.io.InputStream var29 = org.jsecurity.util.ClassUtils.getResourceAsStream("");
    java.lang.Object[] var30 = new java.lang.Object[] { var29};
    java.util.List var31 = org.jsecurity.util.CollectionUtils.asList(var30);
    var25.addRoles((java.util.Collection)var31);
    var22.setAuthenticationListeners((java.util.Collection)var31);
    org.jsecurity.realm.activedirectory.ActiveDirectoryRealm var34 = new org.jsecurity.realm.activedirectory.ActiveDirectoryRealm();
    var34.setPrincipalSuffix("");
    var22.setRealm((org.jsecurity.realm.Realm)var34);
    org.jsecurity.cache.HashtableCacheManager var38 = new org.jsecurity.cache.HashtableCacheManager();
    org.jsecurity.cache.Cache var40 = var38.getCache("\u0000\u0000");
    var34.setAuthorizationCache(var40);
    var11.setActiveSessionsCache(var40);
    org.jsecurity.session.mgt.SimpleSession var43 = new org.jsecurity.session.mgt.SimpleSession();
    java.io.Serializable var44 = var11.create((org.jsecurity.session.Session)var43);
    java.io.Serializable var45 = var43.getId();
    org.jsecurity.authc.credential.Md5CredentialsMatcher var46 = new org.jsecurity.authc.credential.Md5CredentialsMatcher();
    boolean var47 = var46.isHashSalted();
    boolean var48 = var46.isHashSalted();
    int var49 = var46.getHashIterations();
    java.lang.Object var50 = var43.removeAttribute((java.lang.Object)var46);
    boolean var51 = var43.isExpired();
    java.util.Date var52 = var43.getStartTimestamp();
    byte[] var53 = var0.serialize((java.lang.Object)var52);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var3);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var10);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var12);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var13);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var16);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var19);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var20);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var21);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var29);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var30);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var31);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var40);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var44 + "' != '" + "ccb16549-499f-4a61-86b4-d3deaf687243"+ "'", var44.equals("ccb16549-499f-4a61-86b4-d3deaf687243"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var45 + "' != '" + "ccb16549-499f-4a61-86b4-d3deaf687243"+ "'", var45.equals("ccb16549-499f-4a61-86b4-d3deaf687243"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var47 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var48 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var49 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var50);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var51 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var52);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var53);

  }

  public void test215() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest5.test215");


    org.jsecurity.realm.activedirectory.ActiveDirectoryRealm var0 = new org.jsecurity.realm.activedirectory.ActiveDirectoryRealm();
    var0.init();
    var0.setSystemPassword("dd\uFFFD");
    org.jsecurity.authz.aop.GuestAnnotationHandler var4 = new org.jsecurity.authz.aop.GuestAnnotationHandler();
    java.lang.Class var5 = var4.getAnnotationClass();
    var0.setAuthenticationTokenClass(var5);
    org.jsecurity.mgt.DefaultSecurityManager var7 = new org.jsecurity.mgt.DefaultSecurityManager((org.jsecurity.realm.Realm)var0);
    org.jsecurity.cache.CacheManager var8 = var0.getCacheManager();
    org.jsecurity.realm.text.PropertiesRealm var9 = new org.jsecurity.realm.text.PropertiesRealm(var8);
    var9.setResourcePath("?\u0238\u0018@\uFFFD");
    java.lang.String var12 = var9.getAuthorizationCacheName();
    org.jsecurity.mgt.DefaultSecurityManager var13 = new org.jsecurity.mgt.DefaultSecurityManager((org.jsecurity.realm.Realm)var9);
    org.jsecurity.authz.permission.PermissionResolver var14 = var9.getPermissionResolver();
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var5);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var8);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var12 + "' != '" + "org.jsecurity.realm.text.PropertiesRealm-698-authorization"+ "'", var12.equals("org.jsecurity.realm.text.PropertiesRealm-698-authorization"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var14);

  }

  public void test216() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest5.test216");


    org.jsecurity.realm.activedirectory.ActiveDirectoryRealm var0 = new org.jsecurity.realm.activedirectory.ActiveDirectoryRealm();
    var0.setPrincipalSuffix("");
    var0.setPrincipalSuffix("org.jsecurity.authc.CredentialsException: 783ccd31-48a8-42dd-890f-df885a7baaff");
    org.jsecurity.cache.CacheManager var5 = var0.getCacheManager();
    org.jsecurity.cache.HashtableCache var7 = new org.jsecurity.cache.HashtableCache("2e460aa1-7db8-4a99-ad7a-a5b2ab41638e");
    var0.setAuthorizationCache((org.jsecurity.cache.Cache)var7);
    org.jsecurity.session.UnknownSessionException var14 = new org.jsecurity.session.UnknownSessionException("dd\uFFFD", (java.io.Serializable)100.0f);
    org.jsecurity.subject.SubjectException var15 = new org.jsecurity.subject.SubjectException("dd\uFFFD", (java.lang.Throwable)var14);
    org.jsecurity.authc.AccountException var16 = new org.jsecurity.authc.AccountException("hi!", (java.lang.Throwable)var15);
    org.jsecurity.session.UnknownSessionException var17 = new org.jsecurity.session.UnknownSessionException((java.lang.Throwable)var15);
    org.jsecurity.session.UnknownSessionException var18 = new org.jsecurity.session.UnknownSessionException((java.lang.Throwable)var15);
    org.jsecurity.authz.SimpleRole var19 = new org.jsecurity.authz.SimpleRole();
    org.jsecurity.authz.permission.WildcardPermission var22 = new org.jsecurity.authz.permission.WildcardPermission("hi!", false);
    boolean var23 = var19.isPermitted((org.jsecurity.authz.Permission)var22);
    org.jsecurity.session.UnknownSessionException var24 = new org.jsecurity.session.UnknownSessionException("3bf7038a-5bf9-4f69-b89b-6ea74272a097", (java.lang.Throwable)var15, (java.io.Serializable)var22);
    java.lang.Object var25 = var7.get((java.lang.Object)var22);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var5);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var23 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var25);

  }

  public void test217() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest5.test217");


    org.jsecurity.authz.HostUnauthorizedException var1 = new org.jsecurity.authz.HostUnauthorizedException("7f2f7e38-70ef-4596-b197-ceb7511d003b");

  }

  public void test218() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest5.test218");


    org.jsecurity.authc.pam.UnsupportedTokenException var1 = new org.jsecurity.authc.pam.UnsupportedTokenException("6c9a3d8a-dfcf-4bc4-9aad-6adc8cd8bee3");

  }

  public void test219() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest5.test219");


    org.jsecurity.session.mgt.eis.MemorySessionDAO var0 = new org.jsecurity.session.mgt.eis.MemorySessionDAO();
    org.jsecurity.cache.Cache var1 = var0.getActiveSessionsCache();
    org.jsecurity.cache.CacheManager var2 = var0.getCacheManager();
    org.jsecurity.cache.HashtableCacheManager var3 = new org.jsecurity.cache.HashtableCacheManager();
    org.jsecurity.cache.Cache var5 = var3.getCache("\u0000\u0000");
    var0.setActiveSessionsCache(var5);
    java.io.InputStream var8 = org.jsecurity.util.ClassUtils.getResourceAsStream("");
    java.lang.Object[] var9 = new java.lang.Object[] { var8};
    java.util.List var10 = org.jsecurity.util.CollectionUtils.asList(var9);
    org.jsecurity.authc.pam.ModularRealmAuthenticator var11 = new org.jsecurity.authc.pam.ModularRealmAuthenticator(var10);
    org.jsecurity.authc.pam.AllSuccessfulModularAuthenticationStrategy var12 = new org.jsecurity.authc.pam.AllSuccessfulModularAuthenticationStrategy();
    var11.setModularAuthenticationStrategy((org.jsecurity.authc.pam.ModularAuthenticationStrategy)var12);
    org.jsecurity.authz.SimpleAuthorizationInfo var14 = new org.jsecurity.authz.SimpleAuthorizationInfo();
    var14.addStringPermission("hi!");
    java.io.InputStream var18 = org.jsecurity.util.ClassUtils.getResourceAsStream("");
    java.lang.Object[] var19 = new java.lang.Object[] { var18};
    java.util.List var20 = org.jsecurity.util.CollectionUtils.asList(var19);
    var14.addRoles((java.util.Collection)var20);
    var11.setAuthenticationListeners((java.util.Collection)var20);
    org.jsecurity.realm.activedirectory.ActiveDirectoryRealm var23 = new org.jsecurity.realm.activedirectory.ActiveDirectoryRealm();
    var23.setPrincipalSuffix("");
    var11.setRealm((org.jsecurity.realm.Realm)var23);
    org.jsecurity.cache.HashtableCacheManager var27 = new org.jsecurity.cache.HashtableCacheManager();
    org.jsecurity.cache.Cache var29 = var27.getCache("\u0000\u0000");
    var23.setAuthorizationCache(var29);
    var0.setActiveSessionsCache(var29);
    org.jsecurity.session.mgt.SimpleSession var32 = new org.jsecurity.session.mgt.SimpleSession();
    java.io.Serializable var33 = var0.create((org.jsecurity.session.Session)var32);
    org.jsecurity.session.mgt.SimpleSession var34 = new org.jsecurity.session.mgt.SimpleSession();
    var34.touch();
    var34.validate();
    org.jsecurity.session.mgt.SimpleSession var37 = new org.jsecurity.session.mgt.SimpleSession();
    var37.setTimeout((-1L));
    org.jsecurity.session.mgt.SimpleSession var40 = new org.jsecurity.session.mgt.SimpleSession();
    java.util.Date var41 = var40.getLastAccessTime();
    var37.setLastAccessTime(var41);
    org.jsecurity.session.mgt.SimpleSession var43 = new org.jsecurity.session.mgt.SimpleSession();
    java.util.Date var44 = var43.getLastAccessTime();
    var37.setStopTimestamp(var44);
    var34.setLastAccessTime(var44);
    var32.setLastAccessTime(var44);
    org.jsecurity.session.mgt.ImmutableProxiedSession var48 = new org.jsecurity.session.mgt.ImmutableProxiedSession((org.jsecurity.session.Session)var32);
    org.jsecurity.session.ProxiedSession var49 = new org.jsecurity.session.ProxiedSession((org.jsecurity.session.Session)var32);
    org.jsecurity.session.ProxiedSession var50 = new org.jsecurity.session.ProxiedSession((org.jsecurity.session.Session)var49);
    org.jsecurity.realm.activedirectory.ActiveDirectoryRealm var52 = new org.jsecurity.realm.activedirectory.ActiveDirectoryRealm();
    org.jsecurity.authc.credential.Sha256CredentialsMatcher var53 = new org.jsecurity.authc.credential.Sha256CredentialsMatcher();
    var52.setCredentialsMatcher((org.jsecurity.authc.credential.CredentialsMatcher)var53);
    java.lang.String var55 = var52.getAuthorizationCacheName();
    var52.setUrl("hi!");
    org.jsecurity.realm.ldap.DefaultLdapContextFactory var58 = new org.jsecurity.realm.ldap.DefaultLdapContextFactory();
    var52.setLdapContextFactory((org.jsecurity.realm.ldap.LdapContextFactory)var58);
    var49.setAttribute((java.lang.Object)"57f108f5-de1f-46bc-a431-6c2563f95e22", (java.lang.Object)var52);
    java.util.Date var61 = var49.getStartTimestamp();
    java.net.InetAddress var62 = var49.getHostAddress();
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var1);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var2);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var5);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var8);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var9);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var10);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var18);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var19);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var20);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var29);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var33 + "' != '" + "4f3cc87b-b5e6-4046-98fb-24e207dce9ff"+ "'", var33.equals("4f3cc87b-b5e6-4046-98fb-24e207dce9ff"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var41);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var44);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var55);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var61);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var62);

  }

  public void test220() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest5.test220");


    org.jsecurity.mgt.DefaultSecurityManager var0 = new org.jsecurity.mgt.DefaultSecurityManager();
    java.io.InputStream var2 = org.jsecurity.util.ClassUtils.getResourceAsStream("");
    java.lang.Object[] var3 = new java.lang.Object[] { var2};
    java.util.List var4 = org.jsecurity.util.CollectionUtils.asList(var3);
    org.jsecurity.authc.pam.ModularRealmAuthenticator var5 = new org.jsecurity.authc.pam.ModularRealmAuthenticator(var4);
    org.jsecurity.authc.pam.AllSuccessfulModularAuthenticationStrategy var6 = new org.jsecurity.authc.pam.AllSuccessfulModularAuthenticationStrategy();
    var5.setModularAuthenticationStrategy((org.jsecurity.authc.pam.ModularAuthenticationStrategy)var6);
    org.jsecurity.authz.SimpleAuthorizationInfo var8 = new org.jsecurity.authz.SimpleAuthorizationInfo();
    var8.addStringPermission("hi!");
    java.io.InputStream var12 = org.jsecurity.util.ClassUtils.getResourceAsStream("");
    java.lang.Object[] var13 = new java.lang.Object[] { var12};
    java.util.List var14 = org.jsecurity.util.CollectionUtils.asList(var13);
    var8.addRoles((java.util.Collection)var14);
    var5.setAuthenticationListeners((java.util.Collection)var14);
    var0.setSessionListeners((java.util.Collection)var14);
    org.jsecurity.authc.pam.ModularRealmAuthenticator var18 = new org.jsecurity.authc.pam.ModularRealmAuthenticator();
    org.jsecurity.authz.permission.InvalidPermissionStringException var21 = new org.jsecurity.authz.permission.InvalidPermissionStringException("", "dd\uFFFD");
    org.jsecurity.JSecurityException var23 = new org.jsecurity.JSecurityException("");
    org.jsecurity.authc.SimpleAuthenticationInfo var25 = new org.jsecurity.authc.SimpleAuthenticationInfo((java.lang.Object)var21, (java.lang.Object)"", "org.jsecurity.authz.UnauthorizedException: org.jsecurity.session.ExpiredSessionException: ");
    org.jsecurity.subject.PrincipalCollection var26 = var25.getPrincipals();
    var18.onLogout(var26);
    var0.setAuthenticator((org.jsecurity.authc.Authenticator)var18);
    org.jsecurity.realm.activedirectory.ActiveDirectoryRealm var29 = new org.jsecurity.realm.activedirectory.ActiveDirectoryRealm();
    var29.init();
    var29.setSystemPassword("dd\uFFFD");
    org.jsecurity.authz.aop.GuestAnnotationHandler var33 = new org.jsecurity.authz.aop.GuestAnnotationHandler();
    java.lang.Class var34 = var33.getAnnotationClass();
    var29.setAuthenticationTokenClass(var34);
    org.jsecurity.mgt.DefaultSecurityManager var36 = new org.jsecurity.mgt.DefaultSecurityManager((org.jsecurity.realm.Realm)var29);
    org.jsecurity.cache.CacheManager var37 = var29.getCacheManager();
    org.jsecurity.realm.text.PropertiesRealm var38 = new org.jsecurity.realm.text.PropertiesRealm(var37);
    var0.setRealm((org.jsecurity.realm.Realm)var38);
    var38.setResourcePath("org.jsecurity.authc.UsernamePasswordToken - \u0000\u0000, rememberMe=false");
    var38.setResourcePath("7306db95-41be-4ac0-9508-5d40aecdf82e");
    var38.setRoleDefinitions("aa00fc98-ebff-4dac-bd3f-94e5697fde26");
    org.jsecurity.realm.text.TextConfigurationRealm var46 = new org.jsecurity.realm.text.TextConfigurationRealm();
    java.io.InputStream var48 = org.jsecurity.util.ClassUtils.getResourceAsStream("");
    java.lang.Object[] var49 = new java.lang.Object[] { var48};
    java.util.List var50 = org.jsecurity.util.CollectionUtils.asList(var49);
    org.jsecurity.authc.pam.ModularRealmAuthenticator var51 = new org.jsecurity.authc.pam.ModularRealmAuthenticator(var50);
    org.jsecurity.subject.SimplePrincipalCollection var53 = new org.jsecurity.subject.SimplePrincipalCollection((java.util.Collection)var50, "org.jsecurity.authz.UnauthorizedException: org.jsecurity.session.ExpiredSessionException: ");
    org.jsecurity.session.UnknownSessionException var58 = new org.jsecurity.session.UnknownSessionException("dd\uFFFD", (java.io.Serializable)100.0f);
    org.jsecurity.session.SessionException var60 = new org.jsecurity.session.SessionException("dd\uFFFD", (java.lang.Throwable)var58, (java.io.Serializable)0);
    org.jsecurity.session.SessionException var61 = new org.jsecurity.session.SessionException("dd\uFFFD", (java.lang.Throwable)var58);
    var53.add((java.lang.Object)var61, "org.jsecurity.config.ConfigurationException: dd\uFFFD");
    var46.onLogout((org.jsecurity.subject.PrincipalCollection)var53);
    org.jsecurity.authc.ExpiredCredentialsException var66 = new org.jsecurity.authc.ExpiredCredentialsException();
    org.jsecurity.session.ExpiredSessionException var67 = new org.jsecurity.session.ExpiredSessionException("", (java.lang.Throwable)var66);
    java.lang.Throwable[] var68 = var67.getSuppressed();
    org.jsecurity.io.ResourceException var69 = new org.jsecurity.io.ResourceException((java.lang.Throwable)var67);
    org.jsecurity.authc.SimpleAuthenticationInfo var70 = new org.jsecurity.authc.SimpleAuthenticationInfo((org.jsecurity.subject.PrincipalCollection)var53, (java.lang.Object)var67);
    java.util.Collection var72 = var53.fromRealm("a8df74b8-0f68-49c4-b77d-09857e171e23");
    java.util.List var73 = var53.asList();
    org.jsecurity.authc.LockedAccountException var75 = new org.jsecurity.authc.LockedAccountException("6464ff");
    org.jsecurity.io.SerializationException var76 = new org.jsecurity.io.SerializationException((java.lang.Throwable)var75);
    org.jsecurity.authz.SimpleAuthorizingAccount var77 = new org.jsecurity.authz.SimpleAuthorizingAccount((org.jsecurity.subject.PrincipalCollection)var53, (java.lang.Object)var75);
    var38.onLogout((org.jsecurity.subject.PrincipalCollection)var53);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var2);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var3);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var4);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var12);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var13);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var14);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var26);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var34);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var37);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var48);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var49);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var50);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var68);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var72);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var73);

  }

  public void test221() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest5.test221");


    org.jsecurity.realm.jndi.JndiRealmFactory var0 = new org.jsecurity.realm.jndi.JndiRealmFactory();
    java.io.InputStream var2 = org.jsecurity.util.ClassUtils.getResourceAsStream("");
    java.lang.Object[] var3 = new java.lang.Object[] { var2};
    java.util.List var4 = org.jsecurity.util.CollectionUtils.asList(var3);
    var0.setJndiNames((java.util.Collection)var4);
    org.jsecurity.jndi.JndiTemplate var6 = var0.getJndiTemplate();
    org.jsecurity.realm.jdbc.JdbcRealm var8 = new org.jsecurity.realm.jdbc.JdbcRealm();
    var8.setPermissionsQuery("org.jsecurity.realm.text.TextConfigurationRealm_445");
    var8.setUserRolesQuery("6464ff");
    org.jsecurity.authc.pam.AllSuccessfulModularAuthenticationStrategy var13 = new org.jsecurity.authc.pam.AllSuccessfulModularAuthenticationStrategy();
    char[] var15 = new char[] { };
    org.jsecurity.authc.UsernamePasswordToken var17 = new org.jsecurity.authc.UsernamePasswordToken("hi!", var15, true);
    org.jsecurity.authc.SimpleAccount var18 = new org.jsecurity.authc.SimpleAccount();
    var18.setCredentialsExpired(false);
    boolean var21 = var18.isLocked();
    org.jsecurity.authc.AuthenticationInfo var22 = var13.afterAllAttempts((org.jsecurity.authc.AuthenticationToken)var17, (org.jsecurity.authc.AuthenticationInfo)var18);
    char[] var24 = new char[] { };
    org.jsecurity.authc.UsernamePasswordToken var26 = new org.jsecurity.authc.UsernamePasswordToken("hi!", var24, true);
    byte[] var27 = org.jsecurity.codec.Hex.decode(var24);
    byte[] var28 = org.jsecurity.codec.Hex.decode(var24);
    var17.setPassword(var24);
    boolean var30 = var8.supports((org.jsecurity.authc.AuthenticationToken)var17);
    org.jsecurity.codec.CodecException var33 = new org.jsecurity.codec.CodecException("dd\uFFFD");
    org.jsecurity.authc.ConcurrentAccessException var34 = new org.jsecurity.authc.ConcurrentAccessException("org.jsecurity.authz.UnauthorizedException: org.jsecurity.session.ExpiredSessionException: ", (java.lang.Throwable)var33);
    org.jsecurity.subject.SimplePrincipalCollection var36 = new org.jsecurity.subject.SimplePrincipalCollection((java.lang.Object)var33, "");
    java.io.InputStream var38 = org.jsecurity.util.ClassUtils.getResourceAsStream("");
    java.lang.Object[] var39 = new java.lang.Object[] { var38};
    java.util.List var40 = org.jsecurity.util.CollectionUtils.asList(var39);
    org.jsecurity.authc.pam.ModularRealmAuthenticator var41 = new org.jsecurity.authc.pam.ModularRealmAuthenticator(var40);
    var36.addAll((java.util.Collection)var40, "\u0000\u0000");
    java.io.InputStream var45 = org.jsecurity.util.ClassUtils.getResourceAsStream("");
    java.lang.Object[] var46 = new java.lang.Object[] { var45};
    java.util.List var47 = org.jsecurity.util.CollectionUtils.asList(var46);
    org.jsecurity.authc.pam.ModularRealmAuthenticator var48 = new org.jsecurity.authc.pam.ModularRealmAuthenticator(var47);
    var36.addAll((java.util.Collection)var47, "\u0000\u0000");
    org.jsecurity.realm.SimpleAccountRealm var52 = new org.jsecurity.realm.SimpleAccountRealm("hi!");
    java.lang.Class var53 = var52.getAuthenticationTokenClass();
    java.util.Collection var54 = org.jsecurity.util.CollectionUtils.emptyCollection(var53);
    java.lang.Object var55 = org.jsecurity.util.ClassUtils.newInstance(var53);
    java.util.Collection var56 = var36.byType(var53);
    org.jsecurity.authc.ExpiredCredentialsException var58 = new org.jsecurity.authc.ExpiredCredentialsException();
    org.jsecurity.session.ExpiredSessionException var59 = new org.jsecurity.session.ExpiredSessionException("", (java.lang.Throwable)var58);
    java.lang.Throwable[] var60 = var59.getSuppressed();
    java.lang.Object var61 = org.jsecurity.util.ClassUtils.newInstance(var53, (java.lang.Object[])var60);
    var8.setAuthenticationTokenClass(var53);
    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      java.lang.Object var63 = var6.lookup("06806f7c-0e04-458c-8103-c50ec68511d3", var53);
      fail("Expected exception of type javax.naming.NoInitialContextException");
    } catch (javax.naming.NoInitialContextException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var2);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var3);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var4);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var6);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var15);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var21 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var22);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var24);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var27);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var28);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var30 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var38);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var39);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var40);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var45);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var46);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var47);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var53);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var54);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var55);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var56);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var60);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var61);

  }

  public void test222() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest5.test222");


    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      byte[] var1 = org.jsecurity.codec.Hex.decode("f0f9d5e3-de09-4f6d-b90b-23dab207feb7");
      fail("Expected exception of type java.lang.IllegalArgumentException");
    } catch (java.lang.IllegalArgumentException e) {
      // Expected exception.
    }

  }

  public void test223() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest5.test223");


    org.jsecurity.crypto.hash.Md5Hash var1 = org.jsecurity.crypto.hash.Md5Hash.fromBase64String("7a2fba67-91ca-4400-8590-14c76f9ac1ac");
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var1);

  }

  public void test224() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest5.test224");


    org.jsecurity.session.mgt.DefaultSessionManager var0 = new org.jsecurity.session.mgt.DefaultSessionManager();
    org.jsecurity.session.mgt.quartz.QuartzSessionValidationScheduler var1 = new org.jsecurity.session.mgt.quartz.QuartzSessionValidationScheduler();
    boolean var2 = var1.isEnabled();
    var1.enableSessionValidation();
    var0.setSessionValidationScheduler((org.jsecurity.session.mgt.SessionValidationScheduler)var1);
    var1.disableSessionValidation();
    org.jsecurity.session.mgt.DefaultSessionManager var6 = new org.jsecurity.session.mgt.DefaultSessionManager();
    org.jsecurity.session.mgt.eis.MemorySessionDAO var7 = new org.jsecurity.session.mgt.eis.MemorySessionDAO();
    org.jsecurity.cache.Cache var8 = var7.getActiveSessionsCache();
    org.jsecurity.cache.CacheManager var9 = var7.getCacheManager();
    org.jsecurity.cache.HashtableCacheManager var10 = new org.jsecurity.cache.HashtableCacheManager();
    org.jsecurity.cache.Cache var12 = var10.getCache("\u0000\u0000");
    var7.setActiveSessionsCache(var12);
    java.io.InputStream var15 = org.jsecurity.util.ClassUtils.getResourceAsStream("");
    java.lang.Object[] var16 = new java.lang.Object[] { var15};
    java.util.List var17 = org.jsecurity.util.CollectionUtils.asList(var16);
    org.jsecurity.authc.pam.ModularRealmAuthenticator var18 = new org.jsecurity.authc.pam.ModularRealmAuthenticator(var17);
    org.jsecurity.authc.pam.AllSuccessfulModularAuthenticationStrategy var19 = new org.jsecurity.authc.pam.AllSuccessfulModularAuthenticationStrategy();
    var18.setModularAuthenticationStrategy((org.jsecurity.authc.pam.ModularAuthenticationStrategy)var19);
    org.jsecurity.authz.SimpleAuthorizationInfo var21 = new org.jsecurity.authz.SimpleAuthorizationInfo();
    var21.addStringPermission("hi!");
    java.io.InputStream var25 = org.jsecurity.util.ClassUtils.getResourceAsStream("");
    java.lang.Object[] var26 = new java.lang.Object[] { var25};
    java.util.List var27 = org.jsecurity.util.CollectionUtils.asList(var26);
    var21.addRoles((java.util.Collection)var27);
    var18.setAuthenticationListeners((java.util.Collection)var27);
    org.jsecurity.realm.activedirectory.ActiveDirectoryRealm var30 = new org.jsecurity.realm.activedirectory.ActiveDirectoryRealm();
    var30.setPrincipalSuffix("");
    var18.setRealm((org.jsecurity.realm.Realm)var30);
    org.jsecurity.cache.HashtableCacheManager var34 = new org.jsecurity.cache.HashtableCacheManager();
    org.jsecurity.cache.Cache var36 = var34.getCache("\u0000\u0000");
    var30.setAuthorizationCache(var36);
    var7.setActiveSessionsCache(var36);
    org.jsecurity.session.mgt.SimpleSession var39 = new org.jsecurity.session.mgt.SimpleSession();
    java.io.Serializable var40 = var7.create((org.jsecurity.session.Session)var39);
    var6.setSessionDAO((org.jsecurity.session.mgt.eis.SessionDAO)var7);
    org.jsecurity.authc.pam.AllSuccessfulModularAuthenticationStrategy var42 = new org.jsecurity.authc.pam.AllSuccessfulModularAuthenticationStrategy();
    char[] var44 = new char[] { };
    org.jsecurity.authc.UsernamePasswordToken var46 = new org.jsecurity.authc.UsernamePasswordToken("hi!", var44, true);
    org.jsecurity.authc.SimpleAccount var47 = new org.jsecurity.authc.SimpleAccount();
    var47.setCredentialsExpired(false);
    boolean var50 = var47.isLocked();
    org.jsecurity.authc.AuthenticationInfo var51 = var42.afterAllAttempts((org.jsecurity.authc.AuthenticationToken)var46, (org.jsecurity.authc.AuthenticationInfo)var47);
    char[] var55 = new char[] { '4', '#'};
    org.jsecurity.authc.UsernamePasswordToken var56 = new org.jsecurity.authc.UsernamePasswordToken("\u0000\u0000", var55);
    org.jsecurity.authc.SimpleAccount var57 = new org.jsecurity.authc.SimpleAccount();
    var57.setCredentialsExpired(false);
    var57.setCredentialsExpired(false);
    boolean var62 = var57.isCredentialsExpired();
    org.jsecurity.authc.AuthenticationInfo var63 = var42.afterAllAttempts((org.jsecurity.authc.AuthenticationToken)var56, (org.jsecurity.authc.AuthenticationInfo)var57);
    org.jsecurity.realm.activedirectory.ActiveDirectoryRealm var64 = new org.jsecurity.realm.activedirectory.ActiveDirectoryRealm();
    org.jsecurity.authc.credential.Sha256CredentialsMatcher var65 = new org.jsecurity.authc.credential.Sha256CredentialsMatcher();
    var64.setCredentialsMatcher((org.jsecurity.authc.credential.CredentialsMatcher)var65);
    java.lang.String var67 = var64.getAuthorizationCacheName();
    org.jsecurity.authc.UsernamePasswordToken var68 = new org.jsecurity.authc.UsernamePasswordToken();
    java.lang.String var69 = var68.getUsername();
    java.lang.Object var70 = var68.getPrincipal();
    boolean var71 = var64.supports((org.jsecurity.authc.AuthenticationToken)var68);
    org.jsecurity.session.UnknownSessionException var75 = new org.jsecurity.session.UnknownSessionException("dd\uFFFD", (java.io.Serializable)100.0f);
    org.jsecurity.session.SessionException var77 = new org.jsecurity.session.SessionException("dd\uFFFD", (java.lang.Throwable)var75, (java.io.Serializable)0);
    org.jsecurity.authc.SimpleAuthenticationInfo var80 = new org.jsecurity.authc.SimpleAuthenticationInfo((java.lang.Object)0, (java.lang.Object)10, "hi!");
    java.lang.Object var81 = var80.getCredentials();
    java.lang.String var82 = var80.toString();
    org.jsecurity.authc.AuthenticationInfo var83 = var42.afterAllAttempts((org.jsecurity.authc.AuthenticationToken)var68, (org.jsecurity.authc.AuthenticationInfo)var80);
    org.jsecurity.session.mgt.eis.MemorySessionDAO var84 = new org.jsecurity.session.mgt.eis.MemorySessionDAO();
    org.jsecurity.cache.Cache var85 = var84.getActiveSessionsCache();
    var84.setActiveSessionsCacheName("dd\uFFFD");
    var80.setCredentials((java.lang.Object)var84);
    var6.setSessionDAO((org.jsecurity.session.mgt.eis.SessionDAO)var84);
    var1.setSessionManager((org.jsecurity.session.mgt.ValidatingSessionManager)var6);
    var1.disableSessionValidation();
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var2 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var8);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var9);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var12);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var15);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var16);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var17);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var25);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var26);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var27);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var36);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var40 + "' != '" + "b18f10c6-edfc-4d71-956f-238dd07f8bd6"+ "'", var40.equals("b18f10c6-edfc-4d71-956f-238dd07f8bd6"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var44);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var50 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var51);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var55);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var62 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var63);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var67);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var69);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var70);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var71 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var81 + "' != '" + 10+ "'", var81.equals(10));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var83);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var85);

  }

  public void test225() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest5.test225");


    org.jsecurity.mgt.DefaultSecurityManager var0 = new org.jsecurity.mgt.DefaultSecurityManager();
    org.jsecurity.authc.pam.AllSuccessfulModularAuthenticationStrategy var1 = new org.jsecurity.authc.pam.AllSuccessfulModularAuthenticationStrategy();
    org.jsecurity.authc.pam.AllSuccessfulModularAuthenticationStrategy var2 = new org.jsecurity.authc.pam.AllSuccessfulModularAuthenticationStrategy();
    char[] var4 = new char[] { };
    org.jsecurity.authc.UsernamePasswordToken var6 = new org.jsecurity.authc.UsernamePasswordToken("hi!", var4, true);
    org.jsecurity.authc.SimpleAccount var7 = new org.jsecurity.authc.SimpleAccount();
    var7.setCredentialsExpired(false);
    boolean var10 = var7.isLocked();
    org.jsecurity.authc.AuthenticationInfo var11 = var2.afterAllAttempts((org.jsecurity.authc.AuthenticationToken)var6, (org.jsecurity.authc.AuthenticationInfo)var7);
    char[] var15 = new char[] { '4', '#'};
    org.jsecurity.authc.UsernamePasswordToken var16 = new org.jsecurity.authc.UsernamePasswordToken("\u0000\u0000", var15);
    org.jsecurity.authc.SimpleAccount var17 = new org.jsecurity.authc.SimpleAccount();
    var17.setCredentialsExpired(false);
    var17.setCredentialsExpired(false);
    boolean var22 = var17.isCredentialsExpired();
    org.jsecurity.authc.AuthenticationInfo var23 = var2.afterAllAttempts((org.jsecurity.authc.AuthenticationToken)var16, (org.jsecurity.authc.AuthenticationInfo)var17);
    org.jsecurity.authz.UnauthenticatedException var27 = new org.jsecurity.authz.UnauthenticatedException();
    org.jsecurity.config.UnresolveableReferenceException var28 = new org.jsecurity.config.UnresolveableReferenceException("", (java.lang.Throwable)var27);
    org.jsecurity.cache.CacheException var29 = new org.jsecurity.cache.CacheException("org.jsecurity.config.ConfigurationException: dd\uFFFD", (java.lang.Throwable)var27);
    org.jsecurity.authc.SimpleAuthenticationInfo var31 = new org.jsecurity.authc.SimpleAuthenticationInfo((java.lang.Object)"org.jsecurity.config.ConfigurationException: dd\uFFFD", (java.lang.Object)var29, "a2b823b1e72eae2b727289df8a00a89df8a0bab6ad8a89c4c5c7a9b62a270000");
    org.jsecurity.subject.PrincipalCollection var32 = var31.getPrincipals();
    org.jsecurity.authc.AuthenticationInfo var33 = var1.afterAllAttempts((org.jsecurity.authc.AuthenticationToken)var16, (org.jsecurity.authc.AuthenticationInfo)var31);
    var0.setModularAuthenticationStrategy((org.jsecurity.authc.pam.ModularAuthenticationStrategy)var1);
    org.jsecurity.subject.RememberMeManager var35 = var0.getRememberMeManager();
    org.jsecurity.subject.RememberMeManager var36 = var0.getRememberMeManager();
    org.jsecurity.cache.ehcache.EhCacheManager var37 = new org.jsecurity.cache.ehcache.EhCacheManager();
    var37.init();
    var37.destroy();
    java.lang.String var40 = var37.getCacheManagerConfigFile();
    var0.setCacheManager((org.jsecurity.cache.CacheManager)var37);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var4);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var10 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var11);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var15);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var22 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var23);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var32);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var33);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var35);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var36);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var40 + "' != '" + "classpath:org/jsecurity/cache/ehcache/ehcache.xml"+ "'", var40.equals("classpath:org/jsecurity/cache/ehcache/ehcache.xml"));

  }

  public void test226() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest5.test226");


    org.jsecurity.session.UnknownSessionException var4 = new org.jsecurity.session.UnknownSessionException("dd\uFFFD", (java.io.Serializable)100.0f);
    org.jsecurity.subject.SubjectException var5 = new org.jsecurity.subject.SubjectException("dd\uFFFD", (java.lang.Throwable)var4);
    org.jsecurity.io.SerializationException var6 = new org.jsecurity.io.SerializationException("", (java.lang.Throwable)var5);
    java.lang.Throwable[] var7 = var5.getSuppressed();
    java.lang.Throwable[] var8 = var5.getSuppressed();
    org.jsecurity.authz.SimpleAuthorizationInfo var11 = new org.jsecurity.authz.SimpleAuthorizationInfo();
    var11.addRole("a2b823b1e72eae2b727289df8a00a89df8a0bab6ad8a89c4c5c7a9b62a270000");
    org.jsecurity.session.UnknownSessionException var18 = new org.jsecurity.session.UnknownSessionException("dd\uFFFD", (java.io.Serializable)100.0f);
    org.jsecurity.subject.SubjectException var19 = new org.jsecurity.subject.SubjectException("dd\uFFFD", (java.lang.Throwable)var18);
    org.jsecurity.io.SerializationException var20 = new org.jsecurity.io.SerializationException("", (java.lang.Throwable)var19);
    java.lang.Throwable[] var21 = var19.getSuppressed();
    java.util.Set var22 = org.jsecurity.util.CollectionUtils.asSet((java.lang.Object[])var21);
    var11.addRoles((java.util.Collection)var22);
    java.io.InputStream var25 = org.jsecurity.util.ClassUtils.getResourceAsStream("");
    java.lang.Object[] var26 = new java.lang.Object[] { var25};
    java.util.List var27 = org.jsecurity.util.CollectionUtils.asList(var26);
    org.jsecurity.authc.pam.ModularRealmAuthenticator var28 = new org.jsecurity.authc.pam.ModularRealmAuthenticator(var27);
    org.jsecurity.subject.SimplePrincipalCollection var30 = new org.jsecurity.subject.SimplePrincipalCollection((java.util.Collection)var27, "org.jsecurity.authz.UnauthorizedException: org.jsecurity.session.ExpiredSessionException: ");
    org.jsecurity.session.UnknownSessionException var35 = new org.jsecurity.session.UnknownSessionException("dd\uFFFD", (java.io.Serializable)100.0f);
    org.jsecurity.session.SessionException var37 = new org.jsecurity.session.SessionException("dd\uFFFD", (java.lang.Throwable)var35, (java.io.Serializable)0);
    org.jsecurity.session.SessionException var38 = new org.jsecurity.session.SessionException("dd\uFFFD", (java.lang.Throwable)var35);
    var30.add((java.lang.Object)var38, "org.jsecurity.config.ConfigurationException: dd\uFFFD");
    java.util.Set var41 = var30.asSet();
    org.jsecurity.authz.SimpleAuthorizingAccount var42 = new org.jsecurity.authz.SimpleAuthorizingAccount((java.lang.Object)var8, (java.lang.Object)"\u0000\u0000\u0000", "\u0000\u0000\u0000", var22, var41);
    org.jsecurity.authz.SimpleRole var44 = var42.getRole("\u0000\u0000\u0000");
    org.jsecurity.realm.text.PropertiesRealm var46 = new org.jsecurity.realm.text.PropertiesRealm();
    org.jsecurity.realm.activedirectory.ActiveDirectoryRealm var47 = new org.jsecurity.realm.activedirectory.ActiveDirectoryRealm();
    org.jsecurity.authc.credential.Sha256CredentialsMatcher var48 = new org.jsecurity.authc.credential.Sha256CredentialsMatcher();
    var47.setCredentialsMatcher((org.jsecurity.authc.credential.CredentialsMatcher)var48);
    java.lang.String var50 = var47.getAuthorizationCacheName();
    var47.setPrincipalSuffix("org.jsecurity.config.ConfigurationException: dd\uFFFD");
    org.jsecurity.authz.permission.PermissionResolver var53 = var47.getPermissionResolver();
    var46.setPermissionResolver(var53);
    java.util.Set var55 = org.jsecurity.util.PermissionUtils.resolveDelimitedPermissions("\uFFFD\uFFFD#\uFFFD\uFFFD.\uFFFD+r\uFFFD\u6959(\uFFFD\uFFFDW\uFFFDq\uFFFD.\uFFFD\uFFFD^jY\uFFFDj\uFFFDa\uFFFD\uFFFD\uFFFDj\u0628", var53);
    var42.setSimpleRoles(var55);
    org.jsecurity.authz.permission.WildcardPermissionResolver var58 = new org.jsecurity.authz.permission.WildcardPermissionResolver();
    java.util.Set var59 = org.jsecurity.util.PermissionUtils.resolveDelimitedPermissions("a2b823b1e72eae2b727289df8a00a89df8a0bab6ad8a89c4c5c7a9b62a270000", (org.jsecurity.authz.permission.PermissionResolver)var58);
    var42.addAll((java.util.Collection)var59);
    org.jsecurity.authz.SimpleRole var61 = new org.jsecurity.authz.SimpleRole();
    org.jsecurity.authz.permission.WildcardPermission var64 = new org.jsecurity.authz.permission.WildcardPermission("hi!", false);
    boolean var65 = var61.isPermitted((org.jsecurity.authz.Permission)var64);
    java.io.InputStream var67 = org.jsecurity.util.ClassUtils.getResourceAsStream("");
    java.lang.Object[] var68 = new java.lang.Object[] { var67};
    java.util.List var69 = org.jsecurity.util.CollectionUtils.asList(var68);
    var61.addAll((java.util.Collection)var69);
    org.jsecurity.authc.pam.ModularRealmAuthenticator var71 = new org.jsecurity.authc.pam.ModularRealmAuthenticator(var69);
    var42.addRole((java.util.Collection)var69);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var7);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var8);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var21);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var22);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var25);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var26);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var27);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var41);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var44);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var50);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var53);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var55);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var59);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var65 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var67);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var68);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var69);

  }

  public void test227() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest5.test227");


    org.jsecurity.session.UnknownSessionException var7 = new org.jsecurity.session.UnknownSessionException("dd\uFFFD", (java.io.Serializable)100.0f);
    org.jsecurity.subject.SubjectException var8 = new org.jsecurity.subject.SubjectException("dd\uFFFD", (java.lang.Throwable)var7);
    org.jsecurity.io.SerializationException var9 = new org.jsecurity.io.SerializationException("", (java.lang.Throwable)var8);
    org.jsecurity.authc.ExpiredCredentialsException var10 = new org.jsecurity.authc.ExpiredCredentialsException("a2b823b1e72eae2b727289df8a00a89df8a0bab6ad8a89c4c5c7a9b62a270000", (java.lang.Throwable)var9);
    org.jsecurity.authc.CredentialsException var11 = new org.jsecurity.authc.CredentialsException("7ef36680-c8d0-4ff6-a301-9038bb416b9d", (java.lang.Throwable)var10);
    org.jsecurity.authz.AuthorizationException var12 = new org.jsecurity.authz.AuthorizationException("ca970aaa-b602-4caf-93a3-14b681dd0835", (java.lang.Throwable)var10);

  }

  public void test228() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest5.test228");


    org.jsecurity.session.mgt.DefaultSessionManager var0 = new org.jsecurity.session.mgt.DefaultSessionManager();
    org.jsecurity.session.mgt.SessionValidationScheduler var1 = var0.getSessionValidationScheduler();
    org.jsecurity.mgt.DefaultSecurityManager var2 = new org.jsecurity.mgt.DefaultSecurityManager();
    java.io.InputStream var4 = org.jsecurity.util.ClassUtils.getResourceAsStream("");
    java.lang.Object[] var5 = new java.lang.Object[] { var4};
    java.util.List var6 = org.jsecurity.util.CollectionUtils.asList(var5);
    org.jsecurity.authc.pam.ModularRealmAuthenticator var7 = new org.jsecurity.authc.pam.ModularRealmAuthenticator(var6);
    org.jsecurity.authc.pam.AllSuccessfulModularAuthenticationStrategy var8 = new org.jsecurity.authc.pam.AllSuccessfulModularAuthenticationStrategy();
    var7.setModularAuthenticationStrategy((org.jsecurity.authc.pam.ModularAuthenticationStrategy)var8);
    org.jsecurity.authz.SimpleAuthorizationInfo var10 = new org.jsecurity.authz.SimpleAuthorizationInfo();
    var10.addStringPermission("hi!");
    java.io.InputStream var14 = org.jsecurity.util.ClassUtils.getResourceAsStream("");
    java.lang.Object[] var15 = new java.lang.Object[] { var14};
    java.util.List var16 = org.jsecurity.util.CollectionUtils.asList(var15);
    var10.addRoles((java.util.Collection)var16);
    var7.setAuthenticationListeners((java.util.Collection)var16);
    var2.setSessionListeners((java.util.Collection)var16);
    org.jsecurity.realm.text.TextConfigurationRealm var20 = new org.jsecurity.realm.text.TextConfigurationRealm();
    java.io.InputStream var22 = org.jsecurity.util.ClassUtils.getResourceAsStream("");
    java.lang.Object[] var23 = new java.lang.Object[] { var22};
    java.util.List var24 = org.jsecurity.util.CollectionUtils.asList(var23);
    org.jsecurity.authc.pam.ModularRealmAuthenticator var25 = new org.jsecurity.authc.pam.ModularRealmAuthenticator(var24);
    org.jsecurity.subject.SimplePrincipalCollection var27 = new org.jsecurity.subject.SimplePrincipalCollection((java.util.Collection)var24, "org.jsecurity.authz.UnauthorizedException: org.jsecurity.session.ExpiredSessionException: ");
    org.jsecurity.session.UnknownSessionException var32 = new org.jsecurity.session.UnknownSessionException("dd\uFFFD", (java.io.Serializable)100.0f);
    org.jsecurity.session.SessionException var34 = new org.jsecurity.session.SessionException("dd\uFFFD", (java.lang.Throwable)var32, (java.io.Serializable)0);
    org.jsecurity.session.SessionException var35 = new org.jsecurity.session.SessionException("dd\uFFFD", (java.lang.Throwable)var32);
    var27.add((java.lang.Object)var35, "org.jsecurity.config.ConfigurationException: dd\uFFFD");
    var20.onLogout((org.jsecurity.subject.PrincipalCollection)var27);
    org.jsecurity.authc.pam.FirstSuccessfulAuthenticationStrategy var39 = new org.jsecurity.authc.pam.FirstSuccessfulAuthenticationStrategy();
    org.jsecurity.authz.UnauthorizedException var41 = new org.jsecurity.authz.UnauthorizedException("org.jsecurity.config.ConfigurationException: dd\uFFFD");
    java.lang.Throwable[] var42 = var41.getSuppressed();
    java.util.List var43 = org.jsecurity.util.CollectionUtils.asList((java.lang.Object[])var42);
    org.jsecurity.authc.UsernamePasswordToken var44 = new org.jsecurity.authc.UsernamePasswordToken();
    java.lang.String var45 = var44.getUsername();
    java.net.InetAddress var46 = var44.getInetAddress();
    org.jsecurity.authc.AuthenticationInfo var47 = var39.beforeAllAttempts((java.util.Collection)var43, (org.jsecurity.authc.AuthenticationToken)var44);
    boolean[] var48 = var2.hasRoles((org.jsecurity.subject.PrincipalCollection)var27, var43);
    org.jsecurity.codec.CodecException var51 = new org.jsecurity.codec.CodecException("dd\uFFFD");
    org.jsecurity.authc.ConcurrentAccessException var52 = new org.jsecurity.authc.ConcurrentAccessException("org.jsecurity.authz.UnauthorizedException: org.jsecurity.session.ExpiredSessionException: ", (java.lang.Throwable)var51);
    org.jsecurity.subject.SimplePrincipalCollection var54 = new org.jsecurity.subject.SimplePrincipalCollection((java.lang.Object)var51, "");
    java.io.InputStream var56 = org.jsecurity.util.ClassUtils.getResourceAsStream("");
    java.lang.Object[] var57 = new java.lang.Object[] { var56};
    java.util.List var58 = org.jsecurity.util.CollectionUtils.asList(var57);
    org.jsecurity.authc.pam.ModularRealmAuthenticator var59 = new org.jsecurity.authc.pam.ModularRealmAuthenticator(var58);
    var54.addAll((java.util.Collection)var58, "\u0000\u0000");
    var2.setSessionListeners((java.util.Collection)var58);
    org.jsecurity.session.mgt.DefaultSessionManager var63 = new org.jsecurity.session.mgt.DefaultSessionManager();
    org.jsecurity.mgt.DefaultSecurityManager var64 = new org.jsecurity.mgt.DefaultSecurityManager();
    org.jsecurity.authz.permission.WildcardPermissionResolver var65 = new org.jsecurity.authz.permission.WildcardPermissionResolver();
    var64.setPermissionResolver((org.jsecurity.authz.permission.PermissionResolver)var65);
    org.jsecurity.cache.CacheManager var67 = var64.getCacheManager();
    var63.setCacheManager(var67);
    org.jsecurity.session.mgt.SessionValidationScheduler var69 = var63.getSessionValidationScheduler();
    var2.setSessionManager((org.jsecurity.session.mgt.SessionManager)var63);
    var63.destroy();
    var63.setSessionValidationSchedulerEnabled(true);
    org.jsecurity.session.mgt.quartz.QuartzSessionValidationScheduler var74 = new org.jsecurity.session.mgt.quartz.QuartzSessionValidationScheduler((org.jsecurity.session.mgt.ValidatingSessionManager)var63);
    var0.setSessionValidationScheduler((org.jsecurity.session.mgt.SessionValidationScheduler)var74);
    var74.enableSessionValidation();
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var1);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var4);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var5);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var6);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var14);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var15);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var16);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var22);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var23);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var24);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var42);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var43);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var45);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var46);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var47);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var48);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var56);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var57);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var58);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var67);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var69);

  }

  public void test229() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest5.test229");


    org.jsecurity.session.SessionException var0 = new org.jsecurity.session.SessionException();
    org.jsecurity.io.ResourceException var1 = new org.jsecurity.io.ResourceException((java.lang.Throwable)var0);
    org.jsecurity.session.ExpiredSessionException var2 = new org.jsecurity.session.ExpiredSessionException((java.io.Serializable)var0);
    org.jsecurity.session.ExpiredSessionException var3 = new org.jsecurity.session.ExpiredSessionException((java.lang.Throwable)var2);

  }

  public void test230() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest5.test230");


    org.jsecurity.realm.SimpleAccountRealm var0 = new org.jsecurity.realm.SimpleAccountRealm();
    org.jsecurity.cache.HashtableCache var2 = new org.jsecurity.cache.HashtableCache("\u0000\u0000\u0000");
    var0.setAuthorizationCache((org.jsecurity.cache.Cache)var2);
    int var4 = var2.size();
    java.lang.String var5 = var2.toString();
    java.lang.String var6 = var2.toString();
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var4 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var5 + "' != '" + "HashtableCache [\u0000\u0000\u0000]"+ "'", var5.equals("HashtableCache [\u0000\u0000\u0000]"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var6 + "' != '" + "HashtableCache [\u0000\u0000\u0000]"+ "'", var6.equals("HashtableCache [\u0000\u0000\u0000]"));

  }

  public void test231() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest5.test231");


    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      org.jsecurity.config.IniConfiguration var1 = new org.jsecurity.config.IniConfiguration("1b133c1e-b367-4151-a6eb-7b9101fa4e3a");
      fail("Expected exception of type org.jsecurity.config.ConfigurationException");
    } catch (org.jsecurity.config.ConfigurationException e) {
      // Expected exception.
    }

  }

  public void test232() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest5.test232");


    org.jsecurity.session.mgt.DefaultSessionManager var0 = new org.jsecurity.session.mgt.DefaultSessionManager();
    org.jsecurity.session.mgt.eis.MemorySessionDAO var1 = new org.jsecurity.session.mgt.eis.MemorySessionDAO();
    org.jsecurity.cache.Cache var2 = var1.getActiveSessionsCache();
    org.jsecurity.cache.CacheManager var3 = var1.getCacheManager();
    org.jsecurity.cache.HashtableCacheManager var4 = new org.jsecurity.cache.HashtableCacheManager();
    org.jsecurity.cache.Cache var6 = var4.getCache("\u0000\u0000");
    var1.setActiveSessionsCache(var6);
    java.io.InputStream var9 = org.jsecurity.util.ClassUtils.getResourceAsStream("");
    java.lang.Object[] var10 = new java.lang.Object[] { var9};
    java.util.List var11 = org.jsecurity.util.CollectionUtils.asList(var10);
    org.jsecurity.authc.pam.ModularRealmAuthenticator var12 = new org.jsecurity.authc.pam.ModularRealmAuthenticator(var11);
    org.jsecurity.authc.pam.AllSuccessfulModularAuthenticationStrategy var13 = new org.jsecurity.authc.pam.AllSuccessfulModularAuthenticationStrategy();
    var12.setModularAuthenticationStrategy((org.jsecurity.authc.pam.ModularAuthenticationStrategy)var13);
    org.jsecurity.authz.SimpleAuthorizationInfo var15 = new org.jsecurity.authz.SimpleAuthorizationInfo();
    var15.addStringPermission("hi!");
    java.io.InputStream var19 = org.jsecurity.util.ClassUtils.getResourceAsStream("");
    java.lang.Object[] var20 = new java.lang.Object[] { var19};
    java.util.List var21 = org.jsecurity.util.CollectionUtils.asList(var20);
    var15.addRoles((java.util.Collection)var21);
    var12.setAuthenticationListeners((java.util.Collection)var21);
    org.jsecurity.realm.activedirectory.ActiveDirectoryRealm var24 = new org.jsecurity.realm.activedirectory.ActiveDirectoryRealm();
    var24.setPrincipalSuffix("");
    var12.setRealm((org.jsecurity.realm.Realm)var24);
    org.jsecurity.cache.HashtableCacheManager var28 = new org.jsecurity.cache.HashtableCacheManager();
    org.jsecurity.cache.Cache var30 = var28.getCache("\u0000\u0000");
    var24.setAuthorizationCache(var30);
    var1.setActiveSessionsCache(var30);
    org.jsecurity.session.mgt.SimpleSession var33 = new org.jsecurity.session.mgt.SimpleSession();
    java.io.Serializable var34 = var1.create((org.jsecurity.session.Session)var33);
    var0.setSessionDAO((org.jsecurity.session.mgt.eis.SessionDAO)var1);
    long var36 = var0.getSessionValidationInterval();
    org.jsecurity.session.mgt.eis.MemorySessionDAO var37 = new org.jsecurity.session.mgt.eis.MemorySessionDAO();
    org.jsecurity.cache.Cache var38 = var37.getActiveSessionsCache();
    org.jsecurity.cache.CacheManager var39 = var37.getCacheManager();
    org.jsecurity.cache.HashtableCacheManager var40 = new org.jsecurity.cache.HashtableCacheManager();
    org.jsecurity.cache.Cache var42 = var40.getCache("\u0000\u0000");
    var37.setActiveSessionsCache(var42);
    java.io.InputStream var45 = org.jsecurity.util.ClassUtils.getResourceAsStream("");
    java.lang.Object[] var46 = new java.lang.Object[] { var45};
    java.util.List var47 = org.jsecurity.util.CollectionUtils.asList(var46);
    org.jsecurity.authc.pam.ModularRealmAuthenticator var48 = new org.jsecurity.authc.pam.ModularRealmAuthenticator(var47);
    org.jsecurity.authc.pam.AllSuccessfulModularAuthenticationStrategy var49 = new org.jsecurity.authc.pam.AllSuccessfulModularAuthenticationStrategy();
    var48.setModularAuthenticationStrategy((org.jsecurity.authc.pam.ModularAuthenticationStrategy)var49);
    org.jsecurity.authz.SimpleAuthorizationInfo var51 = new org.jsecurity.authz.SimpleAuthorizationInfo();
    var51.addStringPermission("hi!");
    java.io.InputStream var55 = org.jsecurity.util.ClassUtils.getResourceAsStream("");
    java.lang.Object[] var56 = new java.lang.Object[] { var55};
    java.util.List var57 = org.jsecurity.util.CollectionUtils.asList(var56);
    var51.addRoles((java.util.Collection)var57);
    var48.setAuthenticationListeners((java.util.Collection)var57);
    org.jsecurity.realm.activedirectory.ActiveDirectoryRealm var60 = new org.jsecurity.realm.activedirectory.ActiveDirectoryRealm();
    var60.setPrincipalSuffix("");
    var48.setRealm((org.jsecurity.realm.Realm)var60);
    org.jsecurity.cache.HashtableCacheManager var64 = new org.jsecurity.cache.HashtableCacheManager();
    org.jsecurity.cache.Cache var66 = var64.getCache("\u0000\u0000");
    var60.setAuthorizationCache(var66);
    var37.setActiveSessionsCache(var66);
    org.jsecurity.session.mgt.SimpleSession var69 = new org.jsecurity.session.mgt.SimpleSession();
    java.io.Serializable var70 = var37.create((org.jsecurity.session.Session)var69);
    org.jsecurity.cache.Cache var71 = var37.getActiveSessionsCache();
    var0.setSessionDAO((org.jsecurity.session.mgt.eis.SessionDAO)var37);
    org.jsecurity.session.mgt.SessionValidationScheduler var73 = var0.getSessionValidationScheduler();
    boolean var74 = var0.isSessionValidationSchedulerEnabled();
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var2);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var3);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var6);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var9);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var10);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var11);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var19);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var20);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var21);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var30);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var34 + "' != '" + "39b17f77-0342-473e-b133-474ccb9f04d9"+ "'", var34.equals("39b17f77-0342-473e-b133-474ccb9f04d9"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var36 == 3600000L);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var38);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var39);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var42);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var45);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var46);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var47);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var55);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var56);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var57);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var66);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var70 + "' != '" + "14a63a3b-99e2-4ea8-816b-822b9e844719"+ "'", var70.equals("14a63a3b-99e2-4ea8-816b-822b9e844719"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var71);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var73);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var74 == true);

  }

  public void test233() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest5.test233");


    org.jsecurity.cache.HashtableCache var1 = new org.jsecurity.cache.HashtableCache("\u0000\u0000\u0000");
    org.jsecurity.realm.text.TextConfigurationRealm var2 = new org.jsecurity.realm.text.TextConfigurationRealm();
    java.io.InputStream var4 = org.jsecurity.util.ClassUtils.getResourceAsStream("");
    java.lang.Object[] var5 = new java.lang.Object[] { var4};
    java.util.List var6 = org.jsecurity.util.CollectionUtils.asList(var5);
    org.jsecurity.authc.pam.ModularRealmAuthenticator var7 = new org.jsecurity.authc.pam.ModularRealmAuthenticator(var6);
    org.jsecurity.subject.SimplePrincipalCollection var9 = new org.jsecurity.subject.SimplePrincipalCollection((java.util.Collection)var6, "org.jsecurity.authz.UnauthorizedException: org.jsecurity.session.ExpiredSessionException: ");
    org.jsecurity.session.UnknownSessionException var14 = new org.jsecurity.session.UnknownSessionException("dd\uFFFD", (java.io.Serializable)100.0f);
    org.jsecurity.session.SessionException var16 = new org.jsecurity.session.SessionException("dd\uFFFD", (java.lang.Throwable)var14, (java.io.Serializable)0);
    org.jsecurity.session.SessionException var17 = new org.jsecurity.session.SessionException("dd\uFFFD", (java.lang.Throwable)var14);
    var9.add((java.lang.Object)var17, "org.jsecurity.config.ConfigurationException: dd\uFFFD");
    var2.onLogout((org.jsecurity.subject.PrincipalCollection)var9);
    org.jsecurity.authc.ExpiredCredentialsException var22 = new org.jsecurity.authc.ExpiredCredentialsException();
    org.jsecurity.session.ExpiredSessionException var23 = new org.jsecurity.session.ExpiredSessionException("", (java.lang.Throwable)var22);
    java.lang.Throwable[] var24 = var23.getSuppressed();
    org.jsecurity.io.ResourceException var25 = new org.jsecurity.io.ResourceException((java.lang.Throwable)var23);
    org.jsecurity.authc.SimpleAuthenticationInfo var26 = new org.jsecurity.authc.SimpleAuthenticationInfo((org.jsecurity.subject.PrincipalCollection)var9, (java.lang.Object)var23);
    org.jsecurity.codec.CodecException var29 = new org.jsecurity.codec.CodecException("dd\uFFFD");
    org.jsecurity.authc.ConcurrentAccessException var30 = new org.jsecurity.authc.ConcurrentAccessException("org.jsecurity.authz.UnauthorizedException: org.jsecurity.session.ExpiredSessionException: ", (java.lang.Throwable)var29);
    org.jsecurity.subject.SimplePrincipalCollection var32 = new org.jsecurity.subject.SimplePrincipalCollection((java.lang.Object)var29, "");
    java.io.InputStream var34 = org.jsecurity.util.ClassUtils.getResourceAsStream("");
    java.lang.Object[] var35 = new java.lang.Object[] { var34};
    java.util.List var36 = org.jsecurity.util.CollectionUtils.asList(var35);
    org.jsecurity.authc.pam.ModularRealmAuthenticator var37 = new org.jsecurity.authc.pam.ModularRealmAuthenticator(var36);
    var32.addAll((java.util.Collection)var36, "\u0000\u0000");
    org.jsecurity.authz.UnauthorizedException var41 = new org.jsecurity.authz.UnauthorizedException();
    org.jsecurity.session.SessionException var43 = new org.jsecurity.session.SessionException("", (java.lang.Throwable)var41, (java.io.Serializable)"org.jsecurity.config.ConfigurationException: dd\uFFFD");
    org.jsecurity.crypto.hash.Sha1Hash var44 = new org.jsecurity.crypto.hash.Sha1Hash((java.lang.Object)"");
    org.jsecurity.session.UnknownSessionException var49 = new org.jsecurity.session.UnknownSessionException("dd\uFFFD", (java.io.Serializable)100.0f);
    org.jsecurity.subject.SubjectException var50 = new org.jsecurity.subject.SubjectException("dd\uFFFD", (java.lang.Throwable)var49);
    org.jsecurity.io.SerializationException var51 = new org.jsecurity.io.SerializationException("", (java.lang.Throwable)var50);
    java.lang.Throwable[] var52 = var50.getSuppressed();
    java.util.Set var53 = org.jsecurity.util.CollectionUtils.asSet((java.lang.Object[])var52);
    org.jsecurity.authz.SimpleAuthorizationInfo var55 = new org.jsecurity.authz.SimpleAuthorizationInfo();
    org.jsecurity.session.UnknownSessionException var60 = new org.jsecurity.session.UnknownSessionException("dd\uFFFD", (java.io.Serializable)100.0f);
    org.jsecurity.subject.SubjectException var61 = new org.jsecurity.subject.SubjectException("dd\uFFFD", (java.lang.Throwable)var60);
    org.jsecurity.io.SerializationException var62 = new org.jsecurity.io.SerializationException("", (java.lang.Throwable)var61);
    java.lang.Throwable[] var63 = var61.getSuppressed();
    java.util.Set var64 = org.jsecurity.util.CollectionUtils.asSet((java.lang.Object[])var63);
    var55.setStringPermissions(var64);
    java.util.Set var66 = var55.getRoles();
    org.jsecurity.authz.SimpleAuthorizationInfo var67 = new org.jsecurity.authz.SimpleAuthorizationInfo();
    var67.addRole("a2b823b1e72eae2b727289df8a00a89df8a0bab6ad8a89c4c5c7a9b62a270000");
    org.jsecurity.session.UnknownSessionException var74 = new org.jsecurity.session.UnknownSessionException("dd\uFFFD", (java.io.Serializable)100.0f);
    org.jsecurity.subject.SubjectException var75 = new org.jsecurity.subject.SubjectException("dd\uFFFD", (java.lang.Throwable)var74);
    org.jsecurity.io.SerializationException var76 = new org.jsecurity.io.SerializationException("", (java.lang.Throwable)var75);
    java.lang.Throwable[] var77 = var75.getSuppressed();
    java.util.Set var78 = org.jsecurity.util.CollectionUtils.asSet((java.lang.Object[])var77);
    var67.addRoles((java.util.Collection)var78);
    var55.setRoles(var78);
    org.jsecurity.authz.SimpleRole var81 = new org.jsecurity.authz.SimpleRole("org.jsecurity.authz.UnauthorizedException: org.jsecurity.session.ExpiredSessionException: ", var78);
    org.jsecurity.authc.SimpleAccount var82 = new org.jsecurity.authc.SimpleAccount((org.jsecurity.subject.PrincipalCollection)var32, (java.lang.Object)"", var53, var78);
    var26.setPrincipals((org.jsecurity.subject.PrincipalCollection)var32);
    java.lang.String[] var87 = org.jsecurity.util.StringUtils.split("dd\uFFFD", '4', 'a');
    var1.put((java.lang.Object)var32, (java.lang.Object)'a');
    java.util.Set var89 = var1.keys();
    org.jsecurity.realm.jdbc.JdbcRealm var90 = new org.jsecurity.realm.jdbc.JdbcRealm();
    var90.setUserRolesQuery("s\uFFFD\uFFFDkG\uFFFD\uFFFD\uFFFD4\uFFFDW\uFFFDi\uFFFD\uFFFDi\uFFFD\u067D\uFFFD{\uFFFD\u001F");
    var90.setUserRolesQuery("f9548f9e-497e-41ec-97ca-89ede08e20b0");
    org.jsecurity.authz.UnauthorizedException var97 = new org.jsecurity.authz.UnauthorizedException("org.jsecurity.config.ConfigurationException: dd\uFFFD");
    org.jsecurity.session.InvalidSessionException var98 = new org.jsecurity.session.InvalidSessionException("90538851-b0e4-449f-8dda-973ab1d52c9e", (java.lang.Throwable)var97);
    var1.put((java.lang.Object)var90, (java.lang.Object)var97);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var4);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var5);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var6);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var24);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var34);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var35);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var36);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var52);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var53);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var63);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var64);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var66);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var77);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var78);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var87);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var89);

  }

  public void test234() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest5.test234");


    org.jsecurity.authz.SimpleAuthorizationInfo var0 = new org.jsecurity.authz.SimpleAuthorizationInfo();
    java.util.Set var1 = var0.getStringPermissions();
    java.util.Set var2 = var0.getStringPermissions();
    org.jsecurity.mgt.DefaultSecurityManager var3 = new org.jsecurity.mgt.DefaultSecurityManager();
    java.io.InputStream var5 = org.jsecurity.util.ClassUtils.getResourceAsStream("");
    java.lang.Object[] var6 = new java.lang.Object[] { var5};
    java.util.List var7 = org.jsecurity.util.CollectionUtils.asList(var6);
    org.jsecurity.authc.pam.ModularRealmAuthenticator var8 = new org.jsecurity.authc.pam.ModularRealmAuthenticator(var7);
    org.jsecurity.authc.pam.AllSuccessfulModularAuthenticationStrategy var9 = new org.jsecurity.authc.pam.AllSuccessfulModularAuthenticationStrategy();
    var8.setModularAuthenticationStrategy((org.jsecurity.authc.pam.ModularAuthenticationStrategy)var9);
    org.jsecurity.authz.SimpleAuthorizationInfo var11 = new org.jsecurity.authz.SimpleAuthorizationInfo();
    var11.addStringPermission("hi!");
    java.io.InputStream var15 = org.jsecurity.util.ClassUtils.getResourceAsStream("");
    java.lang.Object[] var16 = new java.lang.Object[] { var15};
    java.util.List var17 = org.jsecurity.util.CollectionUtils.asList(var16);
    var11.addRoles((java.util.Collection)var17);
    var8.setAuthenticationListeners((java.util.Collection)var17);
    var3.setSessionListeners((java.util.Collection)var17);
    java.io.InputStream var22 = org.jsecurity.util.ClassUtils.getResourceAsStream("");
    java.lang.Object[] var23 = new java.lang.Object[] { var22};
    java.util.List var24 = org.jsecurity.util.CollectionUtils.asList(var23);
    org.jsecurity.authc.pam.ModularRealmAuthenticator var25 = new org.jsecurity.authc.pam.ModularRealmAuthenticator(var24);
    org.jsecurity.authc.pam.AllSuccessfulModularAuthenticationStrategy var26 = new org.jsecurity.authc.pam.AllSuccessfulModularAuthenticationStrategy();
    var25.setModularAuthenticationStrategy((org.jsecurity.authc.pam.ModularAuthenticationStrategy)var26);
    org.jsecurity.authz.SimpleAuthorizationInfo var28 = new org.jsecurity.authz.SimpleAuthorizationInfo();
    var28.addStringPermission("hi!");
    java.io.InputStream var32 = org.jsecurity.util.ClassUtils.getResourceAsStream("");
    java.lang.Object[] var33 = new java.lang.Object[] { var32};
    java.util.List var34 = org.jsecurity.util.CollectionUtils.asList(var33);
    var28.addRoles((java.util.Collection)var34);
    var25.setAuthenticationListeners((java.util.Collection)var34);
    org.jsecurity.realm.activedirectory.ActiveDirectoryRealm var37 = new org.jsecurity.realm.activedirectory.ActiveDirectoryRealm();
    var37.setPrincipalSuffix("");
    var25.setRealm((org.jsecurity.realm.Realm)var37);
    org.jsecurity.cache.HashtableCacheManager var41 = new org.jsecurity.cache.HashtableCacheManager();
    org.jsecurity.cache.Cache var43 = var41.getCache("\u0000\u0000");
    var37.setAuthorizationCache(var43);
    var3.setRealm((org.jsecurity.realm.Realm)var37);
    java.util.Collection var46 = var3.getRealms();
    var0.addRoles(var46);
    var0.addStringPermission("ca73d1a4-706e-42e7-980f-896d3b153de8");
    java.util.Set var50 = var0.getStringPermissions();
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var1);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var2);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var5);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var6);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var7);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var15);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var16);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var17);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var22);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var23);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var24);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var32);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var33);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var34);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var43);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var46);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var50);

  }

  public void test235() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest5.test235");


    org.jsecurity.crypto.hash.Sha256Hash var1 = org.jsecurity.crypto.hash.Sha256Hash.fromBase64String("bafce95d-9056-4d74-9fad-cfc428d6b8e2");
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var1);

  }

  public void test236() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest5.test236");


    org.jsecurity.authz.permission.WildcardPermission var2 = new org.jsecurity.authz.permission.WildcardPermission("a3e14b98-1050-4bcc-8787-431663db8814", false);
    org.jsecurity.config.IniConfiguration var3 = new org.jsecurity.config.IniConfiguration();
    var3.setConfigUrl("hi!");
    var3.setConfig("org.jsecurity.realm.SimpleAccountRealm-52-authorization");
    org.jsecurity.mgt.SecurityManager var8 = var3.getSecurityManager();
    org.jsecurity.realm.text.TextConfigurationRealm var10 = new org.jsecurity.realm.text.TextConfigurationRealm();
    java.io.InputStream var12 = org.jsecurity.util.ClassUtils.getResourceAsStream("");
    java.lang.Object[] var13 = new java.lang.Object[] { var12};
    java.util.List var14 = org.jsecurity.util.CollectionUtils.asList(var13);
    org.jsecurity.authc.pam.ModularRealmAuthenticator var15 = new org.jsecurity.authc.pam.ModularRealmAuthenticator(var14);
    org.jsecurity.subject.SimplePrincipalCollection var17 = new org.jsecurity.subject.SimplePrincipalCollection((java.util.Collection)var14, "org.jsecurity.authz.UnauthorizedException: org.jsecurity.session.ExpiredSessionException: ");
    org.jsecurity.session.UnknownSessionException var22 = new org.jsecurity.session.UnknownSessionException("dd\uFFFD", (java.io.Serializable)100.0f);
    org.jsecurity.session.SessionException var24 = new org.jsecurity.session.SessionException("dd\uFFFD", (java.lang.Throwable)var22, (java.io.Serializable)0);
    org.jsecurity.session.SessionException var25 = new org.jsecurity.session.SessionException("dd\uFFFD", (java.lang.Throwable)var22);
    var17.add((java.lang.Object)var25, "org.jsecurity.config.ConfigurationException: dd\uFFFD");
    var10.onLogout((org.jsecurity.subject.PrincipalCollection)var17);
    org.jsecurity.authc.ExpiredCredentialsException var30 = new org.jsecurity.authc.ExpiredCredentialsException();
    org.jsecurity.session.ExpiredSessionException var31 = new org.jsecurity.session.ExpiredSessionException("", (java.lang.Throwable)var30);
    java.lang.Throwable[] var32 = var31.getSuppressed();
    org.jsecurity.io.ResourceException var33 = new org.jsecurity.io.ResourceException((java.lang.Throwable)var31);
    org.jsecurity.authc.SimpleAuthenticationInfo var34 = new org.jsecurity.authc.SimpleAuthenticationInfo((org.jsecurity.subject.PrincipalCollection)var17, (java.lang.Object)var31);
    java.util.Set var35 = var17.getRealmNames();
    org.jsecurity.authc.pam.ModularRealmAuthenticator var36 = new org.jsecurity.authc.pam.ModularRealmAuthenticator();
    org.jsecurity.authz.permission.InvalidPermissionStringException var39 = new org.jsecurity.authz.permission.InvalidPermissionStringException("", "dd\uFFFD");
    org.jsecurity.JSecurityException var41 = new org.jsecurity.JSecurityException("");
    org.jsecurity.authc.SimpleAuthenticationInfo var43 = new org.jsecurity.authc.SimpleAuthenticationInfo((java.lang.Object)var39, (java.lang.Object)"", "org.jsecurity.authz.UnauthorizedException: org.jsecurity.session.ExpiredSessionException: ");
    org.jsecurity.subject.PrincipalCollection var44 = var43.getPrincipals();
    var36.onLogout(var44);
    org.jsecurity.session.UnknownSessionException var50 = new org.jsecurity.session.UnknownSessionException("dd\uFFFD", (java.io.Serializable)100.0f);
    org.jsecurity.subject.SubjectException var51 = new org.jsecurity.subject.SubjectException("dd\uFFFD", (java.lang.Throwable)var50);
    org.jsecurity.io.SerializationException var52 = new org.jsecurity.io.SerializationException("", (java.lang.Throwable)var51);
    java.lang.Throwable[] var53 = var51.getSuppressed();
    java.lang.Throwable[] var54 = var51.getSuppressed();
    org.jsecurity.authz.SimpleAuthorizationInfo var57 = new org.jsecurity.authz.SimpleAuthorizationInfo();
    var57.addRole("a2b823b1e72eae2b727289df8a00a89df8a0bab6ad8a89c4c5c7a9b62a270000");
    org.jsecurity.session.UnknownSessionException var64 = new org.jsecurity.session.UnknownSessionException("dd\uFFFD", (java.io.Serializable)100.0f);
    org.jsecurity.subject.SubjectException var65 = new org.jsecurity.subject.SubjectException("dd\uFFFD", (java.lang.Throwable)var64);
    org.jsecurity.io.SerializationException var66 = new org.jsecurity.io.SerializationException("", (java.lang.Throwable)var65);
    java.lang.Throwable[] var67 = var65.getSuppressed();
    java.util.Set var68 = org.jsecurity.util.CollectionUtils.asSet((java.lang.Object[])var67);
    var57.addRoles((java.util.Collection)var68);
    java.io.InputStream var71 = org.jsecurity.util.ClassUtils.getResourceAsStream("");
    java.lang.Object[] var72 = new java.lang.Object[] { var71};
    java.util.List var73 = org.jsecurity.util.CollectionUtils.asList(var72);
    org.jsecurity.authc.pam.ModularRealmAuthenticator var74 = new org.jsecurity.authc.pam.ModularRealmAuthenticator(var73);
    org.jsecurity.subject.SimplePrincipalCollection var76 = new org.jsecurity.subject.SimplePrincipalCollection((java.util.Collection)var73, "org.jsecurity.authz.UnauthorizedException: org.jsecurity.session.ExpiredSessionException: ");
    org.jsecurity.session.UnknownSessionException var81 = new org.jsecurity.session.UnknownSessionException("dd\uFFFD", (java.io.Serializable)100.0f);
    org.jsecurity.session.SessionException var83 = new org.jsecurity.session.SessionException("dd\uFFFD", (java.lang.Throwable)var81, (java.io.Serializable)0);
    org.jsecurity.session.SessionException var84 = new org.jsecurity.session.SessionException("dd\uFFFD", (java.lang.Throwable)var81);
    var76.add((java.lang.Object)var84, "org.jsecurity.config.ConfigurationException: dd\uFFFD");
    java.util.Set var87 = var76.asSet();
    org.jsecurity.authz.SimpleAuthorizingAccount var88 = new org.jsecurity.authz.SimpleAuthorizingAccount((java.lang.Object)var54, (java.lang.Object)"\u0000\u0000\u0000", "\u0000\u0000\u0000", var68, var87);
    var36.setRealms((java.util.Collection)var87);
    org.jsecurity.authc.SimpleAccount var90 = new org.jsecurity.authc.SimpleAccount((java.lang.Object)var2, (java.lang.Object)var3, "\uFFFD\uFFFD#\uFFFD\uFFFD.\uFFFD+r\uFFFD\u6959(\uFFFD\uFFFDW\uFFFDq\uFFFD.\uFFFD\uFFFD^jY\uFFFDj\uFFFDa\uFFFD\uFFFD\uFFFDj\u0628\u0000", var35, var87);
    org.jsecurity.subject.SimplePrincipalCollection var92 = new org.jsecurity.subject.SimplePrincipalCollection((java.util.Collection)var35, "dade3937-164f-46fa-a082-f5f54b3b44e1");
    java.util.Collection var94 = var92.fromRealm("518186d8-31e9-47c0-b564-85d1505b64b6");
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var8);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var12);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var13);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var14);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var32);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var35);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var44);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var53);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var54);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var67);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var68);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var71);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var72);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var73);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var87);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var94);

  }

  public void test237() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest5.test237");


    org.jsecurity.mgt.DefaultSecurityManager var0 = new org.jsecurity.mgt.DefaultSecurityManager();
    java.io.InputStream var2 = org.jsecurity.util.ClassUtils.getResourceAsStream("");
    java.lang.Object[] var3 = new java.lang.Object[] { var2};
    java.util.List var4 = org.jsecurity.util.CollectionUtils.asList(var3);
    org.jsecurity.authc.pam.ModularRealmAuthenticator var5 = new org.jsecurity.authc.pam.ModularRealmAuthenticator(var4);
    org.jsecurity.authc.pam.AllSuccessfulModularAuthenticationStrategy var6 = new org.jsecurity.authc.pam.AllSuccessfulModularAuthenticationStrategy();
    var5.setModularAuthenticationStrategy((org.jsecurity.authc.pam.ModularAuthenticationStrategy)var6);
    org.jsecurity.authz.SimpleAuthorizationInfo var8 = new org.jsecurity.authz.SimpleAuthorizationInfo();
    var8.addStringPermission("hi!");
    java.io.InputStream var12 = org.jsecurity.util.ClassUtils.getResourceAsStream("");
    java.lang.Object[] var13 = new java.lang.Object[] { var12};
    java.util.List var14 = org.jsecurity.util.CollectionUtils.asList(var13);
    var8.addRoles((java.util.Collection)var14);
    var5.setAuthenticationListeners((java.util.Collection)var14);
    var0.setSessionListeners((java.util.Collection)var14);
    org.jsecurity.authc.pam.ModularRealmAuthenticator var18 = new org.jsecurity.authc.pam.ModularRealmAuthenticator();
    org.jsecurity.authz.permission.InvalidPermissionStringException var21 = new org.jsecurity.authz.permission.InvalidPermissionStringException("", "dd\uFFFD");
    org.jsecurity.JSecurityException var23 = new org.jsecurity.JSecurityException("");
    org.jsecurity.authc.SimpleAuthenticationInfo var25 = new org.jsecurity.authc.SimpleAuthenticationInfo((java.lang.Object)var21, (java.lang.Object)"", "org.jsecurity.authz.UnauthorizedException: org.jsecurity.session.ExpiredSessionException: ");
    org.jsecurity.subject.PrincipalCollection var26 = var25.getPrincipals();
    var18.onLogout(var26);
    var0.setAuthenticator((org.jsecurity.authc.Authenticator)var18);
    org.jsecurity.codec.CodecException var31 = new org.jsecurity.codec.CodecException("dd\uFFFD");
    org.jsecurity.authc.ConcurrentAccessException var32 = new org.jsecurity.authc.ConcurrentAccessException("org.jsecurity.authz.UnauthorizedException: org.jsecurity.session.ExpiredSessionException: ", (java.lang.Throwable)var31);
    org.jsecurity.subject.SimplePrincipalCollection var34 = new org.jsecurity.subject.SimplePrincipalCollection((java.lang.Object)var31, "");
    org.jsecurity.authc.pam.FirstSuccessfulAuthenticationStrategy var35 = new org.jsecurity.authc.pam.FirstSuccessfulAuthenticationStrategy();
    org.jsecurity.authz.UnauthorizedException var37 = new org.jsecurity.authz.UnauthorizedException("org.jsecurity.config.ConfigurationException: dd\uFFFD");
    java.lang.Throwable[] var38 = var37.getSuppressed();
    java.util.List var39 = org.jsecurity.util.CollectionUtils.asList((java.lang.Object[])var38);
    org.jsecurity.authc.UsernamePasswordToken var40 = new org.jsecurity.authc.UsernamePasswordToken();
    java.lang.String var41 = var40.getUsername();
    java.net.InetAddress var42 = var40.getInetAddress();
    org.jsecurity.authc.AuthenticationInfo var43 = var35.beforeAllAttempts((java.util.Collection)var39, (org.jsecurity.authc.AuthenticationToken)var40);
    org.jsecurity.session.UnknownSessionException var48 = new org.jsecurity.session.UnknownSessionException("dd\uFFFD", (java.io.Serializable)100.0f);
    org.jsecurity.subject.SubjectException var49 = new org.jsecurity.subject.SubjectException("dd\uFFFD", (java.lang.Throwable)var48);
    org.jsecurity.io.SerializationException var50 = new org.jsecurity.io.SerializationException("", (java.lang.Throwable)var49);
    java.lang.Throwable[] var51 = var49.getSuppressed();
    java.util.Set var52 = org.jsecurity.util.CollectionUtils.asSet((java.lang.Object[])var51);
    org.jsecurity.authc.SimpleAccount var53 = new org.jsecurity.authc.SimpleAccount((org.jsecurity.subject.PrincipalCollection)var34, (java.lang.Object)var39, var52);
    java.io.InputStream var55 = org.jsecurity.util.ClassUtils.getResourceAsStream("");
    java.lang.Object[] var56 = new java.lang.Object[] { var55};
    java.util.List var57 = org.jsecurity.util.CollectionUtils.asList(var56);
    org.jsecurity.authc.pam.ModularRealmAuthenticator var58 = new org.jsecurity.authc.pam.ModularRealmAuthenticator(var57);
    org.jsecurity.subject.SimplePrincipalCollection var60 = new org.jsecurity.subject.SimplePrincipalCollection((java.util.Collection)var57, "org.jsecurity.authz.UnauthorizedException: org.jsecurity.session.ExpiredSessionException: ");
    org.jsecurity.io.ResourceException var64 = new org.jsecurity.io.ResourceException("hi!");
    org.jsecurity.authc.UnknownAccountException var65 = new org.jsecurity.authc.UnknownAccountException((java.lang.Throwable)var64);
    org.jsecurity.session.StoppedSessionException var66 = new org.jsecurity.session.StoppedSessionException("dd\uFFFD", (java.io.Serializable)var64);
    org.jsecurity.session.UnknownSessionException var67 = new org.jsecurity.session.UnknownSessionException("org.jsecurity.authz.UnauthorizedException: org.jsecurity.session.ExpiredSessionException: ", (java.lang.Throwable)var64);
    boolean var68 = var60.equals((java.lang.Object)var64);
    var34.addAll((org.jsecurity.subject.PrincipalCollection)var60);
    org.jsecurity.session.UnknownSessionException var74 = new org.jsecurity.session.UnknownSessionException("dd\uFFFD", (java.io.Serializable)100.0f);
    org.jsecurity.subject.SubjectException var75 = new org.jsecurity.subject.SubjectException("dd\uFFFD", (java.lang.Throwable)var74);
    org.jsecurity.io.SerializationException var76 = new org.jsecurity.io.SerializationException("", (java.lang.Throwable)var75);
    java.lang.Throwable[] var77 = var75.getSuppressed();
    java.util.List var78 = org.jsecurity.util.CollectionUtils.asList((java.lang.Object[])var77);
    boolean var79 = var0.isPermittedAll((org.jsecurity.subject.PrincipalCollection)var34, (java.util.Collection)var78);
    org.jsecurity.subject.DelegatingSubject var80 = new org.jsecurity.subject.DelegatingSubject((org.jsecurity.mgt.SecurityManager)var0);
    java.lang.String[] var83 = org.jsecurity.util.StringUtils.tokenizeToStringArray("hi!", "");
    boolean[] var84 = var80.isPermitted(var83);
    boolean var85 = var80.isAuthenticated();
    boolean var86 = var80.isAuthenticated();
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var2);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var3);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var4);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var12);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var13);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var14);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var26);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var38);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var39);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var41);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var42);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var43);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var51);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var52);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var55);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var56);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var57);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var68 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var77);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var78);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var79 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var83);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var84);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var85 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var86 == false);

  }

  public void test238() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest5.test238");


    char[] var2 = new char[] { };
    org.jsecurity.authc.UsernamePasswordToken var4 = new org.jsecurity.authc.UsernamePasswordToken("hi!", var2, true);
    org.jsecurity.authc.UsernamePasswordToken var5 = new org.jsecurity.authc.UsernamePasswordToken("\u0000\u0000", var2);
    org.jsecurity.session.mgt.SimpleSession var6 = new org.jsecurity.session.mgt.SimpleSession();
    var6.setTimeout((-1L));
    org.jsecurity.session.mgt.SimpleSession var9 = new org.jsecurity.session.mgt.SimpleSession();
    java.util.Date var10 = var9.getLastAccessTime();
    var6.setLastAccessTime(var10);
    java.net.InetAddress var12 = var6.getHostAddress();
    var5.setInetAddress(var12);
    java.net.InetAddress var14 = var5.getInetAddress();
    boolean var15 = var5.isRememberMe();
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var2);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var10);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var12);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var14);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var15 == false);

  }

  public void test239() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest5.test239");


    org.jsecurity.crypto.hash.Md2Hash var2 = org.jsecurity.crypto.hash.Md2Hash.fromBase64String("a2b823b1e72eae2b727289df8a00a89df8a0bab6ad8a89c4c5c7a9b62a270000");
    org.jsecurity.authc.credential.Md2CredentialsMatcher var3 = new org.jsecurity.authc.credential.Md2CredentialsMatcher();
    org.jsecurity.authz.SimpleAuthorizingAccount var5 = new org.jsecurity.authz.SimpleAuthorizingAccount((java.lang.Object)"a2b823b1e72eae2b727289df8a00a89df8a0bab6ad8a89c4c5c7a9b62a270000", (java.lang.Object)var3, "");
    org.jsecurity.session.SessionException var6 = new org.jsecurity.session.SessionException("org.jsecurity.realm.SimpleAccountRealm-9-authorization", (java.io.Serializable)var5);
    java.io.InputStream var8 = org.jsecurity.util.ClassUtils.getResourceAsStream("");
    java.lang.Object[] var9 = new java.lang.Object[] { var8};
    java.util.List var10 = org.jsecurity.util.CollectionUtils.asList(var9);
    org.jsecurity.authc.pam.ModularRealmAuthenticator var11 = new org.jsecurity.authc.pam.ModularRealmAuthenticator(var10);
    org.jsecurity.subject.SimplePrincipalCollection var13 = new org.jsecurity.subject.SimplePrincipalCollection((java.util.Collection)var10, "org.jsecurity.authz.UnauthorizedException: org.jsecurity.session.ExpiredSessionException: ");
    org.jsecurity.session.UnknownSessionException var18 = new org.jsecurity.session.UnknownSessionException("dd\uFFFD", (java.io.Serializable)100.0f);
    org.jsecurity.session.SessionException var20 = new org.jsecurity.session.SessionException("dd\uFFFD", (java.lang.Throwable)var18, (java.io.Serializable)0);
    org.jsecurity.session.SessionException var21 = new org.jsecurity.session.SessionException("dd\uFFFD", (java.lang.Throwable)var18);
    var13.add((java.lang.Object)var21, "org.jsecurity.config.ConfigurationException: dd\uFFFD");
    java.util.Set var24 = var13.asSet();
    org.jsecurity.authz.SimpleAuthorizationInfo var25 = new org.jsecurity.authz.SimpleAuthorizationInfo(var24);
    var5.addAll((java.util.Collection)var24);
    org.jsecurity.crypto.hash.Sha384Hash var28 = org.jsecurity.crypto.hash.Sha384Hash.fromBase64String("e2497199-95f2-4373-8934-d742f09a6cb1");
    org.jsecurity.session.mgt.DefaultSessionManager var29 = new org.jsecurity.session.mgt.DefaultSessionManager();
    var29.setGlobalSessionTimeout(1);
    boolean var33 = var29.isValid((java.io.Serializable)"org.jsecurity.realm.SimpleAccountRealm-173-authorization");
    org.jsecurity.session.mgt.quartz.QuartzSessionValidationScheduler var34 = new org.jsecurity.session.mgt.quartz.QuartzSessionValidationScheduler();
    var34.disableSessionValidation();
    var34.enableSessionValidation();
    var34.enableSessionValidation();
    var34.setSessionValidationInterval((-1L));
    var29.setSessionValidationScheduler((org.jsecurity.session.mgt.SessionValidationScheduler)var34);
    boolean var41 = var28.equals((java.lang.Object)var29);
    org.jsecurity.session.mgt.eis.MemorySessionDAO var42 = new org.jsecurity.session.mgt.eis.MemorySessionDAO();
    org.jsecurity.cache.HashtableCache var44 = new org.jsecurity.cache.HashtableCache("b017e95a-a08d-4f3a-bab8-cc9b39ef5331");
    var42.setActiveSessionsCache((org.jsecurity.cache.Cache)var44);
    var29.setSessionDAO((org.jsecurity.session.mgt.eis.SessionDAO)var42);
    org.jsecurity.cache.HashtableCache var48 = new org.jsecurity.cache.HashtableCache("5dd0c65d-1422-49c2-becb-9e8dca619ab3");
    org.jsecurity.realm.text.TextConfigurationRealm var49 = new org.jsecurity.realm.text.TextConfigurationRealm();
    java.io.InputStream var51 = org.jsecurity.util.ClassUtils.getResourceAsStream("");
    java.lang.Object[] var52 = new java.lang.Object[] { var51};
    java.util.List var53 = org.jsecurity.util.CollectionUtils.asList(var52);
    org.jsecurity.authc.pam.ModularRealmAuthenticator var54 = new org.jsecurity.authc.pam.ModularRealmAuthenticator(var53);
    org.jsecurity.subject.SimplePrincipalCollection var56 = new org.jsecurity.subject.SimplePrincipalCollection((java.util.Collection)var53, "org.jsecurity.authz.UnauthorizedException: org.jsecurity.session.ExpiredSessionException: ");
    org.jsecurity.session.UnknownSessionException var61 = new org.jsecurity.session.UnknownSessionException("dd\uFFFD", (java.io.Serializable)100.0f);
    org.jsecurity.session.SessionException var63 = new org.jsecurity.session.SessionException("dd\uFFFD", (java.lang.Throwable)var61, (java.io.Serializable)0);
    org.jsecurity.session.SessionException var64 = new org.jsecurity.session.SessionException("dd\uFFFD", (java.lang.Throwable)var61);
    var56.add((java.lang.Object)var64, "org.jsecurity.config.ConfigurationException: dd\uFFFD");
    var49.onLogout((org.jsecurity.subject.PrincipalCollection)var56);
    org.jsecurity.cache.HashtableCacheManager var68 = new org.jsecurity.cache.HashtableCacheManager();
    org.jsecurity.cache.Cache var70 = var68.getCache("\u0000\u0000");
    var49.setAuthorizationCache(var70);
    org.jsecurity.authc.DisabledAccountException var74 = new org.jsecurity.authc.DisabledAccountException("org.jsecurity.authz.UnauthorizedException: org.jsecurity.session.ExpiredSessionException: ");
    org.jsecurity.session.UnknownSessionException var80 = new org.jsecurity.session.UnknownSessionException("dd\uFFFD", (java.io.Serializable)100.0f);
    org.jsecurity.subject.SubjectException var81 = new org.jsecurity.subject.SubjectException("dd\uFFFD", (java.lang.Throwable)var80);
    org.jsecurity.session.InvalidSessionException var82 = new org.jsecurity.session.InvalidSessionException("hi!", (java.lang.Throwable)var81);
    org.jsecurity.session.SessionException var83 = new org.jsecurity.session.SessionException("dd\uFFFD", (java.lang.Throwable)var81);
    org.jsecurity.session.SessionException var84 = new org.jsecurity.session.SessionException("hi!", (java.lang.Throwable)var74, (java.io.Serializable)var81);
    var48.put((java.lang.Object)var49, (java.lang.Object)var84);
    java.util.Set var86 = var48.values();
    var29.setSessionListeners((java.util.Collection)var86);
    var5.setObjectPermissions(var86);
    org.jsecurity.subject.PrincipalCollection var89 = var5.getPrincipals();
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var2);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var8);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var9);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var10);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var24);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var28);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var33 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var41 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var51);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var52);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var53);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var70);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var86);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var89);

  }

  public void test240() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest5.test240");


    org.jsecurity.authz.UnauthorizedException var1 = new org.jsecurity.authz.UnauthorizedException("1afdbe33-7f88-41a7-81da-4454ab8b0297");

  }

  public void test241() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest5.test241");


    org.jsecurity.authc.ExpiredCredentialsException var2 = new org.jsecurity.authc.ExpiredCredentialsException();
    org.jsecurity.session.ExpiredSessionException var3 = new org.jsecurity.session.ExpiredSessionException("", (java.lang.Throwable)var2);
    java.lang.Throwable[] var4 = var3.getSuppressed();
    java.util.List var5 = org.jsecurity.util.CollectionUtils.asList((java.lang.Object[])var4);
    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      java.lang.Object var6 = org.jsecurity.util.ClassUtils.newInstance("54796a53-cb9a-42d1-a889-ef2a5a9adae9", (java.lang.Object[])var4);
      fail("Expected exception of type org.jsecurity.util.UnknownClassException");
    } catch (org.jsecurity.util.UnknownClassException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var4);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var5);

  }

  public void test242() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest5.test242");


    org.jsecurity.realm.activedirectory.ActiveDirectoryRealm var0 = new org.jsecurity.realm.activedirectory.ActiveDirectoryRealm();
    var0.init();
    var0.setSystemPassword("dd\uFFFD");
    org.jsecurity.authz.aop.GuestAnnotationHandler var4 = new org.jsecurity.authz.aop.GuestAnnotationHandler();
    java.lang.Class var5 = var4.getAnnotationClass();
    var0.setAuthenticationTokenClass(var5);
    org.jsecurity.mgt.DefaultSecurityManager var7 = new org.jsecurity.mgt.DefaultSecurityManager((org.jsecurity.realm.Realm)var0);
    org.jsecurity.cache.CacheManager var8 = var0.getCacheManager();
    org.jsecurity.realm.text.PropertiesRealm var9 = new org.jsecurity.realm.text.PropertiesRealm(var8);
    var9.setResourcePath("?\u0238\u0018@\uFFFD");
    java.lang.String var12 = var9.getAuthorizationCacheName();
    var9.destroy();
    var9.afterAuthorizationCacheSet();
    org.jsecurity.authz.SimpleAuthorizationInfo var15 = new org.jsecurity.authz.SimpleAuthorizationInfo();
    var15.addRole("a2b823b1e72eae2b727289df8a00a89df8a0bab6ad8a89c4c5c7a9b62a270000");
    org.jsecurity.authz.SimpleAuthorizationInfo var18 = new org.jsecurity.authz.SimpleAuthorizationInfo();
    var18.addRole("a2b823b1e72eae2b727289df8a00a89df8a0bab6ad8a89c4c5c7a9b62a270000");
    org.jsecurity.session.UnknownSessionException var25 = new org.jsecurity.session.UnknownSessionException("dd\uFFFD", (java.io.Serializable)100.0f);
    org.jsecurity.subject.SubjectException var26 = new org.jsecurity.subject.SubjectException("dd\uFFFD", (java.lang.Throwable)var25);
    org.jsecurity.io.SerializationException var27 = new org.jsecurity.io.SerializationException("", (java.lang.Throwable)var26);
    java.lang.Throwable[] var28 = var26.getSuppressed();
    java.util.Set var29 = org.jsecurity.util.CollectionUtils.asSet((java.lang.Object[])var28);
    var18.addRoles((java.util.Collection)var29);
    var15.setObjectPermissions(var29);
    java.io.InputStream var33 = org.jsecurity.util.ClassUtils.getResourceAsStream("");
    java.lang.Object[] var34 = new java.lang.Object[] { var33};
    java.util.List var35 = org.jsecurity.util.CollectionUtils.asList(var34);
    org.jsecurity.authc.pam.ModularRealmAuthenticator var36 = new org.jsecurity.authc.pam.ModularRealmAuthenticator(var35);
    org.jsecurity.subject.SimplePrincipalCollection var38 = new org.jsecurity.subject.SimplePrincipalCollection((java.util.Collection)var35, "org.jsecurity.authz.UnauthorizedException: org.jsecurity.session.ExpiredSessionException: ");
    java.util.Set var39 = var38.getRealmNames();
    java.io.InputStream var41 = org.jsecurity.util.ClassUtils.getResourceAsStream("");
    java.lang.Object[] var42 = new java.lang.Object[] { var41};
    java.util.List var43 = org.jsecurity.util.CollectionUtils.asList(var42);
    org.jsecurity.authc.pam.ModularRealmAuthenticator var44 = new org.jsecurity.authc.pam.ModularRealmAuthenticator(var43);
    org.jsecurity.subject.SimplePrincipalCollection var46 = new org.jsecurity.subject.SimplePrincipalCollection((java.util.Collection)var43, "org.jsecurity.authz.UnauthorizedException: org.jsecurity.session.ExpiredSessionException: ");
    org.jsecurity.session.UnknownSessionException var51 = new org.jsecurity.session.UnknownSessionException("dd\uFFFD", (java.io.Serializable)100.0f);
    org.jsecurity.session.SessionException var53 = new org.jsecurity.session.SessionException("dd\uFFFD", (java.lang.Throwable)var51, (java.io.Serializable)0);
    org.jsecurity.session.SessionException var54 = new org.jsecurity.session.SessionException("dd\uFFFD", (java.lang.Throwable)var51);
    var46.add((java.lang.Object)var54, "org.jsecurity.config.ConfigurationException: dd\uFFFD");
    java.util.Set var57 = var46.asSet();
    var38.addAll((java.util.Collection)var57, "6464ff");
    var15.setStringPermissions(var57);
    org.jsecurity.subject.SimplePrincipalCollection var62 = new org.jsecurity.subject.SimplePrincipalCollection((java.util.Collection)var57, "\u0000\u0000");
    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      boolean var64 = var9.hasRole((org.jsecurity.subject.PrincipalCollection)var62, "89cdaca6-d2c0-42a2-81eb-a9d65c3413e1");
      fail("Expected exception of type java.util.NoSuchElementException");
    } catch (java.util.NoSuchElementException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var5);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var8);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var12 + "' != '" + "org.jsecurity.realm.text.PropertiesRealm-707-authorization"+ "'", var12.equals("org.jsecurity.realm.text.PropertiesRealm-707-authorization"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var28);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var29);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var33);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var34);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var35);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var39);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var41);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var42);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var43);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var57);

  }

  public void test243() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest5.test243");


    org.jsecurity.realm.text.TextConfigurationRealm var0 = new org.jsecurity.realm.text.TextConfigurationRealm();
    java.io.InputStream var2 = org.jsecurity.util.ClassUtils.getResourceAsStream("");
    java.lang.Object[] var3 = new java.lang.Object[] { var2};
    java.util.List var4 = org.jsecurity.util.CollectionUtils.asList(var3);
    org.jsecurity.authc.pam.ModularRealmAuthenticator var5 = new org.jsecurity.authc.pam.ModularRealmAuthenticator(var4);
    org.jsecurity.subject.SimplePrincipalCollection var7 = new org.jsecurity.subject.SimplePrincipalCollection((java.util.Collection)var4, "org.jsecurity.authz.UnauthorizedException: org.jsecurity.session.ExpiredSessionException: ");
    org.jsecurity.session.UnknownSessionException var12 = new org.jsecurity.session.UnknownSessionException("dd\uFFFD", (java.io.Serializable)100.0f);
    org.jsecurity.session.SessionException var14 = new org.jsecurity.session.SessionException("dd\uFFFD", (java.lang.Throwable)var12, (java.io.Serializable)0);
    org.jsecurity.session.SessionException var15 = new org.jsecurity.session.SessionException("dd\uFFFD", (java.lang.Throwable)var12);
    var7.add((java.lang.Object)var15, "org.jsecurity.config.ConfigurationException: dd\uFFFD");
    var0.onLogout((org.jsecurity.subject.PrincipalCollection)var7);
    java.util.Collection var20 = var7.fromRealm("\u0000\u0000\u0000");
    java.util.Set var21 = var7.getRealmNames();
    java.util.List var22 = var7.asList();
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var2);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var3);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var4);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var20);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var21);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var22);

  }

  public void test244() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest5.test244");


    java.lang.String[] var4 = org.jsecurity.util.StringUtils.split("org.jsecurity.realm.text.TextConfigurationRealm_2396", ' ', '4', '#');
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var4);

  }

  public void test245() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest5.test245");


    char[] var1 = new char[] { };
    org.jsecurity.authc.UsernamePasswordToken var3 = new org.jsecurity.authc.UsernamePasswordToken("hi!", var1, true);
    byte[] var4 = org.jsecurity.codec.Hex.decode(var1);
    byte[] var5 = org.jsecurity.codec.Hex.decode(var1);
    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      char[] var7 = org.jsecurity.codec.CodecSupport.toChars(var5, "c90601ac-cfac-4c24-b18f-498fb061e4c8");
      fail("Expected exception of type org.jsecurity.codec.CodecException");
    } catch (org.jsecurity.codec.CodecException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var1);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var4);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var5);

  }

  public void test246() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest5.test246");


    org.jsecurity.crypto.hash.Md5Hash var0 = new org.jsecurity.crypto.hash.Md5Hash();
    org.jsecurity.session.UnknownSessionException var4 = new org.jsecurity.session.UnknownSessionException("dd\uFFFD", (java.io.Serializable)100.0f);
    org.jsecurity.session.SessionException var6 = new org.jsecurity.session.SessionException("dd\uFFFD", (java.lang.Throwable)var4, (java.io.Serializable)0);
    org.jsecurity.authc.SimpleAuthenticationInfo var9 = new org.jsecurity.authc.SimpleAuthenticationInfo((java.lang.Object)0, (java.lang.Object)10, "hi!");
    java.lang.Object var10 = var9.getCredentials();
    java.lang.String var11 = var9.toString();
    org.jsecurity.realm.text.TextConfigurationRealm var12 = new org.jsecurity.realm.text.TextConfigurationRealm();
    java.io.InputStream var14 = org.jsecurity.util.ClassUtils.getResourceAsStream("");
    java.lang.Object[] var15 = new java.lang.Object[] { var14};
    java.util.List var16 = org.jsecurity.util.CollectionUtils.asList(var15);
    org.jsecurity.authc.pam.ModularRealmAuthenticator var17 = new org.jsecurity.authc.pam.ModularRealmAuthenticator(var16);
    org.jsecurity.subject.SimplePrincipalCollection var19 = new org.jsecurity.subject.SimplePrincipalCollection((java.util.Collection)var16, "org.jsecurity.authz.UnauthorizedException: org.jsecurity.session.ExpiredSessionException: ");
    org.jsecurity.session.UnknownSessionException var24 = new org.jsecurity.session.UnknownSessionException("dd\uFFFD", (java.io.Serializable)100.0f);
    org.jsecurity.session.SessionException var26 = new org.jsecurity.session.SessionException("dd\uFFFD", (java.lang.Throwable)var24, (java.io.Serializable)0);
    org.jsecurity.session.SessionException var27 = new org.jsecurity.session.SessionException("dd\uFFFD", (java.lang.Throwable)var24);
    var19.add((java.lang.Object)var27, "org.jsecurity.config.ConfigurationException: dd\uFFFD");
    var12.onLogout((org.jsecurity.subject.PrincipalCollection)var19);
    org.jsecurity.cache.HashtableCacheManager var31 = new org.jsecurity.cache.HashtableCacheManager();
    org.jsecurity.cache.Cache var33 = var31.getCache("\u0000\u0000");
    var12.setAuthorizationCache(var33);
    org.jsecurity.codec.CodecException var37 = new org.jsecurity.codec.CodecException("dd\uFFFD");
    org.jsecurity.authc.ConcurrentAccessException var38 = new org.jsecurity.authc.ConcurrentAccessException("org.jsecurity.authz.UnauthorizedException: org.jsecurity.session.ExpiredSessionException: ", (java.lang.Throwable)var37);
    org.jsecurity.subject.SimplePrincipalCollection var40 = new org.jsecurity.subject.SimplePrincipalCollection((java.lang.Object)var37, "");
    var12.onLogout((org.jsecurity.subject.PrincipalCollection)var40);
    var9.setPrincipals((org.jsecurity.subject.PrincipalCollection)var40);
    org.jsecurity.realm.activedirectory.ActiveDirectoryRealm var43 = new org.jsecurity.realm.activedirectory.ActiveDirectoryRealm();
    org.jsecurity.authc.credential.Sha256CredentialsMatcher var44 = new org.jsecurity.authc.credential.Sha256CredentialsMatcher();
    var43.setCredentialsMatcher((org.jsecurity.authc.credential.CredentialsMatcher)var44);
    org.jsecurity.realm.activedirectory.ActiveDirectoryRealm var46 = new org.jsecurity.realm.activedirectory.ActiveDirectoryRealm();
    org.jsecurity.authc.credential.Sha256CredentialsMatcher var47 = new org.jsecurity.authc.credential.Sha256CredentialsMatcher();
    var46.setCredentialsMatcher((org.jsecurity.authc.credential.CredentialsMatcher)var47);
    java.lang.String var49 = var46.getAuthorizationCacheName();
    var46.setUrl("hi!");
    org.jsecurity.realm.ldap.DefaultLdapContextFactory var52 = new org.jsecurity.realm.ldap.DefaultLdapContextFactory();
    var46.setLdapContextFactory((org.jsecurity.realm.ldap.LdapContextFactory)var52);
    var52.setAuthentication("org.jsecurity.authz.UnauthorizedException: org.jsecurity.session.ExpiredSessionException: ");
    var43.setLdapContextFactory((org.jsecurity.realm.ldap.LdapContextFactory)var52);
    var52.setReferral("a2b823b1e72eae2b727289df8a00a89df8a0bab6ad8a89c4c5c7a9b62a270000");
    var52.setUrl("\u0000\u0000");
    java.util.Set var63 = org.jsecurity.util.PermissionUtils.toPermissionStrings("org.jsecurity.config.ConfigurationException: dd\uFFFD");
    org.jsecurity.authz.SimpleAuthorizationInfo var64 = new org.jsecurity.authz.SimpleAuthorizationInfo(var63);
    org.jsecurity.authz.SimpleRole var65 = new org.jsecurity.authz.SimpleRole();
    java.lang.String var66 = var65.getName();
    org.jsecurity.session.UnknownSessionException var71 = new org.jsecurity.session.UnknownSessionException("dd\uFFFD", (java.io.Serializable)100.0f);
    org.jsecurity.subject.SubjectException var72 = new org.jsecurity.subject.SubjectException("dd\uFFFD", (java.lang.Throwable)var71);
    org.jsecurity.io.SerializationException var73 = new org.jsecurity.io.SerializationException("", (java.lang.Throwable)var72);
    java.lang.Throwable[] var74 = var72.getSuppressed();
    java.util.Set var75 = org.jsecurity.util.CollectionUtils.asSet((java.lang.Object[])var74);
    var65.setPermissions(var75);
    org.jsecurity.authz.SimpleAuthorizingAccount var77 = new org.jsecurity.authz.SimpleAuthorizingAccount((org.jsecurity.subject.PrincipalCollection)var40, (java.lang.Object)"\u0000\u0000", "org.jsecurity.authc.AccountException: hi!", var63, var75);
    org.jsecurity.authz.SimpleAuthorizationInfo var78 = new org.jsecurity.authz.SimpleAuthorizationInfo(var63);
    boolean var79 = var0.equals((java.lang.Object)var63);
    org.jsecurity.authz.ModularRealmAuthorizer var80 = new org.jsecurity.authz.ModularRealmAuthorizer((java.util.Collection)var63);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var10 + "' != '" + 10+ "'", var10.equals(10));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var14);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var15);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var16);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var33);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var49);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var63);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var66);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var74);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var75);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var79 == false);

  }

  public void test247() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest5.test247");


    org.jsecurity.io.IniResource var0 = new org.jsecurity.io.IniResource();
    java.util.Map var1 = var0.getSections();
    java.lang.String var2 = var0.getCharsetName();
    org.jsecurity.config.ReflectionBuilder var3 = new org.jsecurity.config.ReflectionBuilder();
    org.jsecurity.io.IniResource var4 = new org.jsecurity.io.IniResource();
    java.util.Map var5 = var4.getSections();
    var3.setObjects(var5);
    org.jsecurity.io.IniResource var7 = new org.jsecurity.io.IniResource();
    java.util.Map var8 = var7.getSections();
    java.util.Map var9 = var3.buildObjects(var8);
    var0.setSections(var9);
    java.lang.String var11 = var0.getCharsetName();
    var0.setCharsetName("org.jsecurity.config.ConfigurationException: dd\uFFFD-4org.jsecurity.config.ConfigurationException: dd\uFFFD02-8085-950org.jsecurity.config.ConfigurationException: dd\uFFFDbb026org.jsecurity.config.ConfigurationException: dd\uFFFD06");
    java.util.Map var14 = var0.getSections();
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var1);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var2);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var5);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var8);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var9);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var11);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var14);

  }

  public void test248() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest5.test248");


    byte[] var1 = org.jsecurity.codec.CodecSupport.toBytes("534d81de-ee39-466d-b839-49671dee6c25");
    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      byte[] var2 = org.jsecurity.codec.Hex.decode(var1);
      fail("Expected exception of type java.lang.IllegalArgumentException");
    } catch (java.lang.IllegalArgumentException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var1);

  }

  public void test249() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest5.test249");


    org.jsecurity.authz.HostUnauthorizedException var1 = new org.jsecurity.authz.HostUnauthorizedException("b58ffa74-377e-4b7b-ac57-cf7f2dcc96da");
    java.net.InetAddress var2 = var1.getHostAddress();
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var2);

  }

  public void test250() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest5.test250");


    org.jsecurity.session.UnknownSessionException var5 = new org.jsecurity.session.UnknownSessionException("dd\uFFFD", (java.io.Serializable)100.0f);
    org.jsecurity.subject.SubjectException var6 = new org.jsecurity.subject.SubjectException("dd\uFFFD", (java.lang.Throwable)var5);
    org.jsecurity.authc.AccountException var7 = new org.jsecurity.authc.AccountException("hi!", (java.lang.Throwable)var6);
    org.jsecurity.session.StoppedSessionException var8 = new org.jsecurity.session.StoppedSessionException((java.lang.Throwable)var7);
    org.jsecurity.JSecurityException var9 = new org.jsecurity.JSecurityException((java.lang.Throwable)var7);
    org.jsecurity.subject.InvalidSubjectException var10 = new org.jsecurity.subject.InvalidSubjectException((java.lang.Throwable)var9);
    org.jsecurity.authc.AccountException var11 = new org.jsecurity.authc.AccountException("org.jsecurity.realm.text.PropertiesRealm_2075", (java.lang.Throwable)var9);

  }

  public void test251() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest5.test251");


    org.jsecurity.crypto.hash.Sha512Hash var1 = org.jsecurity.crypto.hash.Sha512Hash.fromBase64String("org.jsecurity.config.ConfigurationException: dd\uFFFD");
    byte[] var2 = var1.getBytes();
    java.lang.String var3 = org.jsecurity.codec.Base64.decodeToString(var2);
    byte[] var4 = org.jsecurity.codec.Base64.encodeChunked(var2);
    boolean var5 = org.jsecurity.codec.Base64.isBase64(var4);
    byte[] var6 = org.jsecurity.codec.Base64.decode(var4);
    org.jsecurity.crypto.hash.Md2Hash var7 = new org.jsecurity.crypto.hash.Md2Hash((java.lang.Object)var4);
    char[] var8 = org.jsecurity.codec.CodecSupport.toChars(var4);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var1);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var2);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var3 + "' != '" + "\u0000\u0000\u0000"+ "'", var3.equals("\u0000\u0000\u0000"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var4);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var5 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var6);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var8);

  }

  public void test252() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest5.test252");


    org.jsecurity.config.IniConfiguration var0 = new org.jsecurity.config.IniConfiguration();
    var0.init();
    java.lang.String var2 = var0.getConfig();
    var0.setConfig("3008602b-f37d-459d-973e-0453ee1d8c4b");
    var0.init();
    java.lang.String var6 = var0.getConfig();
    var0.setConfig("94d5b5e2-eac7-494e-a020-f1314fa1538c");
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var2);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var6 + "' != '" + "3008602b-f37d-459d-973e-0453ee1d8c4b"+ "'", var6.equals("3008602b-f37d-459d-973e-0453ee1d8c4b"));

  }

  public void test253() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest5.test253");


    org.jsecurity.mgt.DefaultSecurityManager var0 = new org.jsecurity.mgt.DefaultSecurityManager();
    java.io.InputStream var2 = org.jsecurity.util.ClassUtils.getResourceAsStream("");
    java.lang.Object[] var3 = new java.lang.Object[] { var2};
    java.util.List var4 = org.jsecurity.util.CollectionUtils.asList(var3);
    org.jsecurity.authc.pam.ModularRealmAuthenticator var5 = new org.jsecurity.authc.pam.ModularRealmAuthenticator(var4);
    org.jsecurity.authc.pam.AllSuccessfulModularAuthenticationStrategy var6 = new org.jsecurity.authc.pam.AllSuccessfulModularAuthenticationStrategy();
    var5.setModularAuthenticationStrategy((org.jsecurity.authc.pam.ModularAuthenticationStrategy)var6);
    org.jsecurity.authz.SimpleAuthorizationInfo var8 = new org.jsecurity.authz.SimpleAuthorizationInfo();
    var8.addStringPermission("hi!");
    java.io.InputStream var12 = org.jsecurity.util.ClassUtils.getResourceAsStream("");
    java.lang.Object[] var13 = new java.lang.Object[] { var12};
    java.util.List var14 = org.jsecurity.util.CollectionUtils.asList(var13);
    var8.addRoles((java.util.Collection)var14);
    var5.setAuthenticationListeners((java.util.Collection)var14);
    var0.setSessionListeners((java.util.Collection)var14);
    java.io.InputStream var19 = org.jsecurity.util.ClassUtils.getResourceAsStream("");
    java.lang.Object[] var20 = new java.lang.Object[] { var19};
    java.util.List var21 = org.jsecurity.util.CollectionUtils.asList(var20);
    org.jsecurity.authc.pam.ModularRealmAuthenticator var22 = new org.jsecurity.authc.pam.ModularRealmAuthenticator(var21);
    org.jsecurity.authc.pam.AllSuccessfulModularAuthenticationStrategy var23 = new org.jsecurity.authc.pam.AllSuccessfulModularAuthenticationStrategy();
    var22.setModularAuthenticationStrategy((org.jsecurity.authc.pam.ModularAuthenticationStrategy)var23);
    org.jsecurity.authz.SimpleAuthorizationInfo var25 = new org.jsecurity.authz.SimpleAuthorizationInfo();
    var25.addStringPermission("hi!");
    java.io.InputStream var29 = org.jsecurity.util.ClassUtils.getResourceAsStream("");
    java.lang.Object[] var30 = new java.lang.Object[] { var29};
    java.util.List var31 = org.jsecurity.util.CollectionUtils.asList(var30);
    var25.addRoles((java.util.Collection)var31);
    var22.setAuthenticationListeners((java.util.Collection)var31);
    org.jsecurity.realm.activedirectory.ActiveDirectoryRealm var34 = new org.jsecurity.realm.activedirectory.ActiveDirectoryRealm();
    var34.setPrincipalSuffix("");
    var22.setRealm((org.jsecurity.realm.Realm)var34);
    org.jsecurity.cache.HashtableCacheManager var38 = new org.jsecurity.cache.HashtableCacheManager();
    org.jsecurity.cache.Cache var40 = var38.getCache("\u0000\u0000");
    var34.setAuthorizationCache(var40);
    var0.setRealm((org.jsecurity.realm.Realm)var34);
    java.util.Collection var43 = var0.getRealms();
    org.jsecurity.crypto.hash.Sha512Hash var45 = org.jsecurity.crypto.hash.Sha512Hash.fromBase64String("org.jsecurity.config.ConfigurationException: dd\uFFFD");
    byte[] var46 = var45.getBytes();
    java.lang.String var47 = org.jsecurity.codec.Base64.decodeToString(var46);
    byte[] var48 = org.jsecurity.codec.Base64.encodeChunked(var46);
    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      var0.setRememberMeDecryptionCipherKey(var46);
      fail("Expected exception of type java.lang.IllegalStateException");
    } catch (java.lang.IllegalStateException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var2);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var3);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var4);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var12);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var13);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var14);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var19);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var20);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var21);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var29);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var30);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var31);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var40);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var43);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var45);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var46);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var47 + "' != '" + "\u0000\u0000\u0000"+ "'", var47.equals("\u0000\u0000\u0000"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var48);

  }

  public void test254() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest5.test254");


    org.jsecurity.session.UnknownSessionException var4 = new org.jsecurity.session.UnknownSessionException("dd\uFFFD", (java.io.Serializable)100.0f);
    org.jsecurity.subject.SubjectException var5 = new org.jsecurity.subject.SubjectException("dd\uFFFD", (java.lang.Throwable)var4);
    org.jsecurity.io.SerializationException var6 = new org.jsecurity.io.SerializationException("", (java.lang.Throwable)var5);
    java.lang.Throwable[] var7 = var5.getSuppressed();
    java.lang.Throwable[] var8 = var5.getSuppressed();
    org.jsecurity.authz.SimpleAuthorizationInfo var11 = new org.jsecurity.authz.SimpleAuthorizationInfo();
    var11.addRole("a2b823b1e72eae2b727289df8a00a89df8a0bab6ad8a89c4c5c7a9b62a270000");
    org.jsecurity.session.UnknownSessionException var18 = new org.jsecurity.session.UnknownSessionException("dd\uFFFD", (java.io.Serializable)100.0f);
    org.jsecurity.subject.SubjectException var19 = new org.jsecurity.subject.SubjectException("dd\uFFFD", (java.lang.Throwable)var18);
    org.jsecurity.io.SerializationException var20 = new org.jsecurity.io.SerializationException("", (java.lang.Throwable)var19);
    java.lang.Throwable[] var21 = var19.getSuppressed();
    java.util.Set var22 = org.jsecurity.util.CollectionUtils.asSet((java.lang.Object[])var21);
    var11.addRoles((java.util.Collection)var22);
    java.io.InputStream var25 = org.jsecurity.util.ClassUtils.getResourceAsStream("");
    java.lang.Object[] var26 = new java.lang.Object[] { var25};
    java.util.List var27 = org.jsecurity.util.CollectionUtils.asList(var26);
    org.jsecurity.authc.pam.ModularRealmAuthenticator var28 = new org.jsecurity.authc.pam.ModularRealmAuthenticator(var27);
    org.jsecurity.subject.SimplePrincipalCollection var30 = new org.jsecurity.subject.SimplePrincipalCollection((java.util.Collection)var27, "org.jsecurity.authz.UnauthorizedException: org.jsecurity.session.ExpiredSessionException: ");
    org.jsecurity.session.UnknownSessionException var35 = new org.jsecurity.session.UnknownSessionException("dd\uFFFD", (java.io.Serializable)100.0f);
    org.jsecurity.session.SessionException var37 = new org.jsecurity.session.SessionException("dd\uFFFD", (java.lang.Throwable)var35, (java.io.Serializable)0);
    org.jsecurity.session.SessionException var38 = new org.jsecurity.session.SessionException("dd\uFFFD", (java.lang.Throwable)var35);
    var30.add((java.lang.Object)var38, "org.jsecurity.config.ConfigurationException: dd\uFFFD");
    java.util.Set var41 = var30.asSet();
    org.jsecurity.authz.SimpleAuthorizingAccount var42 = new org.jsecurity.authz.SimpleAuthorizingAccount((java.lang.Object)var8, (java.lang.Object)"\u0000\u0000\u0000", "\u0000\u0000\u0000", var22, var41);
    org.jsecurity.authz.SimpleRole var44 = var42.getRole("\u0000\u0000\u0000");
    var42.addRole("985ef082-f13d-463b-a5a4-b88c15841261");
    java.util.Collection var47 = var42.getStringPermissions();
    org.jsecurity.authc.pam.FirstSuccessfulAuthenticationStrategy var48 = new org.jsecurity.authc.pam.FirstSuccessfulAuthenticationStrategy();
    org.jsecurity.authz.UnauthorizedException var50 = new org.jsecurity.authz.UnauthorizedException("org.jsecurity.config.ConfigurationException: dd\uFFFD");
    java.lang.Throwable[] var51 = var50.getSuppressed();
    java.util.List var52 = org.jsecurity.util.CollectionUtils.asList((java.lang.Object[])var51);
    org.jsecurity.authc.UsernamePasswordToken var53 = new org.jsecurity.authc.UsernamePasswordToken();
    java.lang.String var54 = var53.getUsername();
    java.net.InetAddress var55 = var53.getInetAddress();
    org.jsecurity.authc.AuthenticationInfo var56 = var48.beforeAllAttempts((java.util.Collection)var52, (org.jsecurity.authc.AuthenticationToken)var53);
    var42.checkPermissions((java.util.Collection)var52);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var7);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var8);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var21);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var22);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var25);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var26);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var27);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var41);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var44);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var47);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var51);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var52);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var54);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var55);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var56);

  }

  public void test255() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest5.test255");


    byte[] var1 = org.jsecurity.codec.Base64.decode("hi!");
    org.jsecurity.authc.CredentialsException var3 = new org.jsecurity.authc.CredentialsException("org.jsecurity.authz.UnauthorizedException: org.jsecurity.session.ExpiredSessionException: ");
    org.jsecurity.authc.SimpleAuthenticationInfo var5 = new org.jsecurity.authc.SimpleAuthenticationInfo((java.lang.Object)"hi!", (java.lang.Object)var3, "org.jsecurity.config.ConfigurationException: dd\uFFFD");
    org.jsecurity.authz.UnauthorizedException var8 = new org.jsecurity.authz.UnauthorizedException("org.jsecurity.config.ConfigurationException: dd\uFFFD");
    org.jsecurity.crypto.hash.Md2Hash var10 = org.jsecurity.crypto.hash.Md2Hash.fromBase64String("a2b823b1e72eae2b727289df8a00a89df8a0bab6ad8a89c4c5c7a9b62a270000");
    org.jsecurity.authc.credential.Md2CredentialsMatcher var11 = new org.jsecurity.authc.credential.Md2CredentialsMatcher();
    org.jsecurity.authz.SimpleAuthorizingAccount var13 = new org.jsecurity.authz.SimpleAuthorizingAccount((java.lang.Object)"a2b823b1e72eae2b727289df8a00a89df8a0bab6ad8a89c4c5c7a9b62a270000", (java.lang.Object)var11, "");
    org.jsecurity.session.UnknownSessionException var14 = new org.jsecurity.session.UnknownSessionException("org.jsecurity.config.ConfigurationException: dd\uFFFD", (java.lang.Throwable)var8, (java.io.Serializable)var13);
    org.jsecurity.authz.SimpleAuthorizationInfo var15 = new org.jsecurity.authz.SimpleAuthorizationInfo();
    org.jsecurity.session.UnknownSessionException var20 = new org.jsecurity.session.UnknownSessionException("dd\uFFFD", (java.io.Serializable)100.0f);
    org.jsecurity.subject.SubjectException var21 = new org.jsecurity.subject.SubjectException("dd\uFFFD", (java.lang.Throwable)var20);
    org.jsecurity.io.SerializationException var22 = new org.jsecurity.io.SerializationException("", (java.lang.Throwable)var21);
    java.lang.Throwable[] var23 = var21.getSuppressed();
    java.util.Set var24 = org.jsecurity.util.CollectionUtils.asSet((java.lang.Object[])var23);
    var15.setStringPermissions(var24);
    java.util.Set var26 = var15.getRoles();
    org.jsecurity.authz.SimpleAuthorizationInfo var27 = new org.jsecurity.authz.SimpleAuthorizationInfo();
    var27.addRole("a2b823b1e72eae2b727289df8a00a89df8a0bab6ad8a89c4c5c7a9b62a270000");
    org.jsecurity.session.UnknownSessionException var34 = new org.jsecurity.session.UnknownSessionException("dd\uFFFD", (java.io.Serializable)100.0f);
    org.jsecurity.subject.SubjectException var35 = new org.jsecurity.subject.SubjectException("dd\uFFFD", (java.lang.Throwable)var34);
    org.jsecurity.io.SerializationException var36 = new org.jsecurity.io.SerializationException("", (java.lang.Throwable)var35);
    java.lang.Throwable[] var37 = var35.getSuppressed();
    java.util.Set var38 = org.jsecurity.util.CollectionUtils.asSet((java.lang.Object[])var37);
    var27.addRoles((java.util.Collection)var38);
    var15.setRoles(var38);
    org.jsecurity.authz.SimpleAuthorizationInfo var41 = new org.jsecurity.authz.SimpleAuthorizationInfo();
    org.jsecurity.session.UnknownSessionException var46 = new org.jsecurity.session.UnknownSessionException("dd\uFFFD", (java.io.Serializable)100.0f);
    org.jsecurity.subject.SubjectException var47 = new org.jsecurity.subject.SubjectException("dd\uFFFD", (java.lang.Throwable)var46);
    org.jsecurity.io.SerializationException var48 = new org.jsecurity.io.SerializationException("", (java.lang.Throwable)var47);
    java.lang.Throwable[] var49 = var47.getSuppressed();
    java.util.Set var50 = org.jsecurity.util.CollectionUtils.asSet((java.lang.Object[])var49);
    var41.setStringPermissions(var50);
    java.util.Set var52 = var41.getRoles();
    org.jsecurity.authz.SimpleAuthorizationInfo var53 = new org.jsecurity.authz.SimpleAuthorizationInfo();
    var53.addRole("a2b823b1e72eae2b727289df8a00a89df8a0bab6ad8a89c4c5c7a9b62a270000");
    org.jsecurity.session.UnknownSessionException var60 = new org.jsecurity.session.UnknownSessionException("dd\uFFFD", (java.io.Serializable)100.0f);
    org.jsecurity.subject.SubjectException var61 = new org.jsecurity.subject.SubjectException("dd\uFFFD", (java.lang.Throwable)var60);
    org.jsecurity.io.SerializationException var62 = new org.jsecurity.io.SerializationException("", (java.lang.Throwable)var61);
    java.lang.Throwable[] var63 = var61.getSuppressed();
    java.util.Set var64 = org.jsecurity.util.CollectionUtils.asSet((java.lang.Object[])var63);
    var53.addRoles((java.util.Collection)var64);
    var41.setRoles(var64);
    var15.setRoles(var64);
    var13.setSimpleRoles(var64);
    org.jsecurity.crypto.hash.Md5Hash var70 = org.jsecurity.crypto.hash.Md5Hash.fromBase64String("org.jsecurity.authc.IncorrectCredentialsException: \u0000\u0000");
    byte[] var72 = org.jsecurity.codec.CodecSupport.toBytes("dd\uFFFD");
    var70.setBytes(var72);
    boolean var74 = var13.equals((java.lang.Object)var70);
    byte[] var75 = var70.getBytes();
    var5.setCredentials((java.lang.Object)var70);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var1);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var10);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var23);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var24);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var26);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var37);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var38);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var49);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var50);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var52);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var63);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var64);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var70);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var72);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var74 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var75);

  }

  public void test256() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest5.test256");


    org.jsecurity.session.mgt.DelegatingSession var0 = new org.jsecurity.session.mgt.DelegatingSession();
    java.io.Serializable var1 = var0.getId();
    org.jsecurity.session.mgt.SessionManager var2 = var0.getSessionManager();
    org.jsecurity.session.mgt.SimpleSession var3 = new org.jsecurity.session.mgt.SimpleSession();
    org.jsecurity.session.UnknownSessionException var7 = new org.jsecurity.session.UnknownSessionException("dd\uFFFD", (java.io.Serializable)100.0f);
    org.jsecurity.session.SessionException var9 = new org.jsecurity.session.SessionException("dd\uFFFD", (java.lang.Throwable)var7, (java.io.Serializable)0);
    org.jsecurity.authc.AccountException var10 = new org.jsecurity.authc.AccountException((java.lang.Throwable)var7);
    var3.setId((java.io.Serializable)var7);
    var3.setTimeout((-1L));
    org.jsecurity.session.mgt.SimpleSession var14 = new org.jsecurity.session.mgt.SimpleSession();
    var14.setTimeout((-1L));
    org.jsecurity.session.mgt.SimpleSession var17 = new org.jsecurity.session.mgt.SimpleSession();
    var17.setTimeout((-1L));
    org.jsecurity.session.mgt.SimpleSession var20 = new org.jsecurity.session.mgt.SimpleSession();
    java.util.Date var21 = var20.getLastAccessTime();
    var17.setLastAccessTime(var21);
    org.jsecurity.session.mgt.SimpleSession var23 = new org.jsecurity.session.mgt.SimpleSession();
    java.util.Date var24 = var23.getLastAccessTime();
    var17.setStopTimestamp(var24);
    var14.setStartTimestamp(var24);
    var3.setLastAccessTime(var24);
    var0.setId((java.io.Serializable)var24);
    org.jsecurity.mgt.DefaultSecurityManager var29 = new org.jsecurity.mgt.DefaultSecurityManager();
    java.io.InputStream var31 = org.jsecurity.util.ClassUtils.getResourceAsStream("");
    java.lang.Object[] var32 = new java.lang.Object[] { var31};
    java.util.List var33 = org.jsecurity.util.CollectionUtils.asList(var32);
    org.jsecurity.authc.pam.ModularRealmAuthenticator var34 = new org.jsecurity.authc.pam.ModularRealmAuthenticator(var33);
    org.jsecurity.authc.pam.AllSuccessfulModularAuthenticationStrategy var35 = new org.jsecurity.authc.pam.AllSuccessfulModularAuthenticationStrategy();
    var34.setModularAuthenticationStrategy((org.jsecurity.authc.pam.ModularAuthenticationStrategy)var35);
    org.jsecurity.authz.SimpleAuthorizationInfo var37 = new org.jsecurity.authz.SimpleAuthorizationInfo();
    var37.addStringPermission("hi!");
    java.io.InputStream var41 = org.jsecurity.util.ClassUtils.getResourceAsStream("");
    java.lang.Object[] var42 = new java.lang.Object[] { var41};
    java.util.List var43 = org.jsecurity.util.CollectionUtils.asList(var42);
    var37.addRoles((java.util.Collection)var43);
    var34.setAuthenticationListeners((java.util.Collection)var43);
    var29.setSessionListeners((java.util.Collection)var43);
    java.io.InputStream var48 = org.jsecurity.util.ClassUtils.getResourceAsStream("");
    java.lang.Object[] var49 = new java.lang.Object[] { var48};
    java.util.List var50 = org.jsecurity.util.CollectionUtils.asList(var49);
    org.jsecurity.authc.pam.ModularRealmAuthenticator var51 = new org.jsecurity.authc.pam.ModularRealmAuthenticator(var50);
    org.jsecurity.authc.pam.AllSuccessfulModularAuthenticationStrategy var52 = new org.jsecurity.authc.pam.AllSuccessfulModularAuthenticationStrategy();
    var51.setModularAuthenticationStrategy((org.jsecurity.authc.pam.ModularAuthenticationStrategy)var52);
    org.jsecurity.authz.SimpleAuthorizationInfo var54 = new org.jsecurity.authz.SimpleAuthorizationInfo();
    var54.addStringPermission("hi!");
    java.io.InputStream var58 = org.jsecurity.util.ClassUtils.getResourceAsStream("");
    java.lang.Object[] var59 = new java.lang.Object[] { var58};
    java.util.List var60 = org.jsecurity.util.CollectionUtils.asList(var59);
    var54.addRoles((java.util.Collection)var60);
    var51.setAuthenticationListeners((java.util.Collection)var60);
    org.jsecurity.realm.activedirectory.ActiveDirectoryRealm var63 = new org.jsecurity.realm.activedirectory.ActiveDirectoryRealm();
    var63.setPrincipalSuffix("");
    var51.setRealm((org.jsecurity.realm.Realm)var63);
    org.jsecurity.cache.HashtableCacheManager var67 = new org.jsecurity.cache.HashtableCacheManager();
    org.jsecurity.cache.Cache var69 = var67.getCache("\u0000\u0000");
    var63.setAuthorizationCache(var69);
    var29.setRealm((org.jsecurity.realm.Realm)var63);
    org.jsecurity.subject.RememberMeManager var72 = var29.getRememberMeManager();
    org.jsecurity.session.mgt.SessionManager var73 = var29.getSessionManager();
    org.jsecurity.session.mgt.SessionManager var74 = var29.getSessionManager();
    var0.setSessionManager(var74);
    org.jsecurity.session.mgt.ImmutableProxiedSession var76 = new org.jsecurity.session.mgt.ImmutableProxiedSession((org.jsecurity.session.Session)var0);
    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      java.util.Date var77 = var0.getStartTimestamp();
      fail("Expected exception of type org.jsecurity.session.UnknownSessionException");
    } catch (org.jsecurity.session.UnknownSessionException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var1);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var2);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var21);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var24);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var31);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var32);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var33);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var41);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var42);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var43);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var48);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var49);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var50);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var58);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var59);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var60);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var69);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var72);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var73);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var74);

  }

  public void test257() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest5.test257");


    org.jsecurity.authc.credential.Md5CredentialsMatcher var0 = new org.jsecurity.authc.credential.Md5CredentialsMatcher();
    boolean var1 = var0.isHashSalted();
    boolean var2 = var0.isHashSalted();
    var0.setHashSalted(true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var1 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var2 == false);

  }

  public void test258() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest5.test258");


    org.jsecurity.subject.InvalidSubjectException var4 = new org.jsecurity.subject.InvalidSubjectException("dd\uFFFD");
    org.jsecurity.session.ExpiredSessionException var5 = new org.jsecurity.session.ExpiredSessionException("org.jsecurity.config.ConfigurationException: dd\uFFFD", (java.io.Serializable)var4);
    org.jsecurity.session.ExpiredSessionException var6 = new org.jsecurity.session.ExpiredSessionException("eb8eb80000", (java.lang.Throwable)var5);
    org.jsecurity.JSecurityException var7 = new org.jsecurity.JSecurityException("ff1bb54d-80f9-4308-a260-ff3ddf1355e9", (java.lang.Throwable)var6);

  }

  public void test259() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest5.test259");


    org.jsecurity.realm.activedirectory.ActiveDirectoryRealm var0 = new org.jsecurity.realm.activedirectory.ActiveDirectoryRealm();
    org.jsecurity.authc.credential.Sha256CredentialsMatcher var1 = new org.jsecurity.authc.credential.Sha256CredentialsMatcher();
    var0.setCredentialsMatcher((org.jsecurity.authc.credential.CredentialsMatcher)var1);
    java.lang.String var3 = var0.getAuthorizationCacheName();
    java.io.InputStream var5 = org.jsecurity.util.ClassUtils.getResourceAsStream("");
    java.lang.Object[] var6 = new java.lang.Object[] { var5};
    java.util.List var7 = org.jsecurity.util.CollectionUtils.asList(var6);
    org.jsecurity.authc.pam.ModularRealmAuthenticator var8 = new org.jsecurity.authc.pam.ModularRealmAuthenticator(var7);
    org.jsecurity.authc.pam.AllSuccessfulModularAuthenticationStrategy var9 = new org.jsecurity.authc.pam.AllSuccessfulModularAuthenticationStrategy();
    var8.setModularAuthenticationStrategy((org.jsecurity.authc.pam.ModularAuthenticationStrategy)var9);
    org.jsecurity.authz.SimpleAuthorizationInfo var11 = new org.jsecurity.authz.SimpleAuthorizationInfo();
    var11.addStringPermission("hi!");
    java.io.InputStream var15 = org.jsecurity.util.ClassUtils.getResourceAsStream("");
    java.lang.Object[] var16 = new java.lang.Object[] { var15};
    java.util.List var17 = org.jsecurity.util.CollectionUtils.asList(var16);
    var11.addRoles((java.util.Collection)var17);
    var8.setAuthenticationListeners((java.util.Collection)var17);
    org.jsecurity.realm.activedirectory.ActiveDirectoryRealm var20 = new org.jsecurity.realm.activedirectory.ActiveDirectoryRealm();
    var20.setPrincipalSuffix("");
    var8.setRealm((org.jsecurity.realm.Realm)var20);
    org.jsecurity.authc.pam.FirstSuccessfulAuthenticationStrategy var24 = new org.jsecurity.authc.pam.FirstSuccessfulAuthenticationStrategy();
    org.jsecurity.authz.UnauthorizedException var26 = new org.jsecurity.authz.UnauthorizedException("org.jsecurity.config.ConfigurationException: dd\uFFFD");
    java.lang.Throwable[] var27 = var26.getSuppressed();
    java.util.List var28 = org.jsecurity.util.CollectionUtils.asList((java.lang.Object[])var27);
    org.jsecurity.authc.UsernamePasswordToken var29 = new org.jsecurity.authc.UsernamePasswordToken();
    java.lang.String var30 = var29.getUsername();
    java.net.InetAddress var31 = var29.getInetAddress();
    org.jsecurity.authc.AuthenticationInfo var32 = var24.beforeAllAttempts((java.util.Collection)var28, (org.jsecurity.authc.AuthenticationToken)var29);
    var8.setModularAuthenticationStrategy((org.jsecurity.authc.pam.ModularAuthenticationStrategy)var24);
    org.jsecurity.codec.CodecException var36 = new org.jsecurity.codec.CodecException("dd\uFFFD");
    org.jsecurity.authc.ConcurrentAccessException var37 = new org.jsecurity.authc.ConcurrentAccessException("org.jsecurity.authz.UnauthorizedException: org.jsecurity.session.ExpiredSessionException: ", (java.lang.Throwable)var36);
    org.jsecurity.subject.SimplePrincipalCollection var39 = new org.jsecurity.subject.SimplePrincipalCollection((java.lang.Object)var36, "");
    org.jsecurity.authc.pam.FirstSuccessfulAuthenticationStrategy var40 = new org.jsecurity.authc.pam.FirstSuccessfulAuthenticationStrategy();
    org.jsecurity.authz.UnauthorizedException var42 = new org.jsecurity.authz.UnauthorizedException("org.jsecurity.config.ConfigurationException: dd\uFFFD");
    java.lang.Throwable[] var43 = var42.getSuppressed();
    java.util.List var44 = org.jsecurity.util.CollectionUtils.asList((java.lang.Object[])var43);
    org.jsecurity.authc.UsernamePasswordToken var45 = new org.jsecurity.authc.UsernamePasswordToken();
    java.lang.String var46 = var45.getUsername();
    java.net.InetAddress var47 = var45.getInetAddress();
    org.jsecurity.authc.AuthenticationInfo var48 = var40.beforeAllAttempts((java.util.Collection)var44, (org.jsecurity.authc.AuthenticationToken)var45);
    org.jsecurity.session.UnknownSessionException var53 = new org.jsecurity.session.UnknownSessionException("dd\uFFFD", (java.io.Serializable)100.0f);
    org.jsecurity.subject.SubjectException var54 = new org.jsecurity.subject.SubjectException("dd\uFFFD", (java.lang.Throwable)var53);
    org.jsecurity.io.SerializationException var55 = new org.jsecurity.io.SerializationException("", (java.lang.Throwable)var54);
    java.lang.Throwable[] var56 = var54.getSuppressed();
    java.util.Set var57 = org.jsecurity.util.CollectionUtils.asSet((java.lang.Object[])var56);
    org.jsecurity.authc.SimpleAccount var58 = new org.jsecurity.authc.SimpleAccount((org.jsecurity.subject.PrincipalCollection)var39, (java.lang.Object)var44, var57);
    org.jsecurity.authc.pam.AllSuccessfulModularAuthenticationStrategy var59 = new org.jsecurity.authc.pam.AllSuccessfulModularAuthenticationStrategy();
    char[] var61 = new char[] { };
    org.jsecurity.authc.UsernamePasswordToken var63 = new org.jsecurity.authc.UsernamePasswordToken("hi!", var61, true);
    org.jsecurity.authc.SimpleAccount var64 = new org.jsecurity.authc.SimpleAccount();
    var64.setCredentialsExpired(false);
    boolean var67 = var64.isLocked();
    org.jsecurity.authc.AuthenticationInfo var68 = var59.afterAllAttempts((org.jsecurity.authc.AuthenticationToken)var63, (org.jsecurity.authc.AuthenticationInfo)var64);
    char[] var71 = new char[] { };
    org.jsecurity.authc.UsernamePasswordToken var73 = new org.jsecurity.authc.UsernamePasswordToken("hi!", var71, true);
    org.jsecurity.authc.UsernamePasswordToken var74 = new org.jsecurity.authc.UsernamePasswordToken("\u0000\u0000", var71);
    var63.setPassword(var71);
    org.jsecurity.authc.AuthenticationInfo var76 = var24.beforeAllAttempts((java.util.Collection)var44, (org.jsecurity.authc.AuthenticationToken)var63);
    org.jsecurity.authz.permission.WildcardPermissionResolver var77 = new org.jsecurity.authz.permission.WildcardPermissionResolver();
    org.jsecurity.authz.Permission var79 = var77.resolvePermission("hi!");
    org.jsecurity.authz.Permission var81 = var77.resolvePermission("hi!");
    java.util.Set var82 = org.jsecurity.util.PermissionUtils.resolvePermissions((java.util.Collection)var44, (org.jsecurity.authz.permission.PermissionResolver)var77);
    var0.setPermissionResolver((org.jsecurity.authz.permission.PermissionResolver)var77);
    var0.init();
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var3);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var5);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var6);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var7);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var15);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var16);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var17);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var27);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var28);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var30);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var31);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var32);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var43);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var44);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var46);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var47);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var48);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var56);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var57);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var61);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var67 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var68);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var71);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var76);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var79);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var81);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var82);

  }

  public void test260() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest5.test260");


    org.jsecurity.cache.HashtableCache var1 = new org.jsecurity.cache.HashtableCache("\u0000\u0000\u0000");
    org.jsecurity.session.mgt.SimpleSession var2 = new org.jsecurity.session.mgt.SimpleSession();
    var2.touch();
    org.jsecurity.authz.UnauthenticatedException var6 = new org.jsecurity.authz.UnauthenticatedException();
    org.jsecurity.config.UnresolveableReferenceException var7 = new org.jsecurity.config.UnresolveableReferenceException("", (java.lang.Throwable)var6);
    org.jsecurity.cache.CacheException var8 = new org.jsecurity.cache.CacheException("org.jsecurity.config.ConfigurationException: dd\uFFFD", (java.lang.Throwable)var6);
    java.lang.Object var9 = var2.removeAttribute((java.lang.Object)var8);
    org.jsecurity.mgt.DefaultSecurityManager var10 = new org.jsecurity.mgt.DefaultSecurityManager();
    org.jsecurity.authc.pam.AllSuccessfulModularAuthenticationStrategy var11 = new org.jsecurity.authc.pam.AllSuccessfulModularAuthenticationStrategy();
    org.jsecurity.authc.pam.AllSuccessfulModularAuthenticationStrategy var12 = new org.jsecurity.authc.pam.AllSuccessfulModularAuthenticationStrategy();
    char[] var14 = new char[] { };
    org.jsecurity.authc.UsernamePasswordToken var16 = new org.jsecurity.authc.UsernamePasswordToken("hi!", var14, true);
    org.jsecurity.authc.SimpleAccount var17 = new org.jsecurity.authc.SimpleAccount();
    var17.setCredentialsExpired(false);
    boolean var20 = var17.isLocked();
    org.jsecurity.authc.AuthenticationInfo var21 = var12.afterAllAttempts((org.jsecurity.authc.AuthenticationToken)var16, (org.jsecurity.authc.AuthenticationInfo)var17);
    char[] var25 = new char[] { '4', '#'};
    org.jsecurity.authc.UsernamePasswordToken var26 = new org.jsecurity.authc.UsernamePasswordToken("\u0000\u0000", var25);
    org.jsecurity.authc.SimpleAccount var27 = new org.jsecurity.authc.SimpleAccount();
    var27.setCredentialsExpired(false);
    var27.setCredentialsExpired(false);
    boolean var32 = var27.isCredentialsExpired();
    org.jsecurity.authc.AuthenticationInfo var33 = var12.afterAllAttempts((org.jsecurity.authc.AuthenticationToken)var26, (org.jsecurity.authc.AuthenticationInfo)var27);
    org.jsecurity.authz.UnauthenticatedException var37 = new org.jsecurity.authz.UnauthenticatedException();
    org.jsecurity.config.UnresolveableReferenceException var38 = new org.jsecurity.config.UnresolveableReferenceException("", (java.lang.Throwable)var37);
    org.jsecurity.cache.CacheException var39 = new org.jsecurity.cache.CacheException("org.jsecurity.config.ConfigurationException: dd\uFFFD", (java.lang.Throwable)var37);
    org.jsecurity.authc.SimpleAuthenticationInfo var41 = new org.jsecurity.authc.SimpleAuthenticationInfo((java.lang.Object)"org.jsecurity.config.ConfigurationException: dd\uFFFD", (java.lang.Object)var39, "a2b823b1e72eae2b727289df8a00a89df8a0bab6ad8a89c4c5c7a9b62a270000");
    org.jsecurity.subject.PrincipalCollection var42 = var41.getPrincipals();
    org.jsecurity.authc.AuthenticationInfo var43 = var11.afterAllAttempts((org.jsecurity.authc.AuthenticationToken)var26, (org.jsecurity.authc.AuthenticationInfo)var41);
    var10.setModularAuthenticationStrategy((org.jsecurity.authc.pam.ModularAuthenticationStrategy)var11);
    org.jsecurity.subject.RememberMeManager var45 = var10.getRememberMeManager();
    org.jsecurity.authc.pam.ModularRealmAuthenticator var46 = new org.jsecurity.authc.pam.ModularRealmAuthenticator();
    var10.setAuthenticator((org.jsecurity.authc.Authenticator)var46);
    var1.put((java.lang.Object)var2, (java.lang.Object)var46);
    var2.setTimeout(10L);
    org.jsecurity.session.mgt.SimpleSession var51 = new org.jsecurity.session.mgt.SimpleSession();
    var51.validate();
    java.util.Date var53 = var51.getStartTimestamp();
    var2.setStopTimestamp(var53);
    java.io.Serializable var55 = var2.getId();
    java.util.Map var56 = var2.getAttributes();
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var9);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var14);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var20 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var21);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var25);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var32 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var33);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var42);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var43);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var45);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var53);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var55);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var56);

  }

  public void test261() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest5.test261");


    org.jsecurity.session.mgt.SimpleSession var0 = new org.jsecurity.session.mgt.SimpleSession();
    var0.setTimeout((-1L));
    org.jsecurity.session.mgt.eis.MemorySessionDAO var3 = new org.jsecurity.session.mgt.eis.MemorySessionDAO();
    org.jsecurity.cache.Cache var4 = var3.getActiveSessionsCache();
    org.jsecurity.cache.CacheManager var5 = var3.getCacheManager();
    org.jsecurity.cache.HashtableCacheManager var6 = new org.jsecurity.cache.HashtableCacheManager();
    org.jsecurity.cache.Cache var8 = var6.getCache("\u0000\u0000");
    var3.setActiveSessionsCache(var8);
    java.io.InputStream var11 = org.jsecurity.util.ClassUtils.getResourceAsStream("");
    java.lang.Object[] var12 = new java.lang.Object[] { var11};
    java.util.List var13 = org.jsecurity.util.CollectionUtils.asList(var12);
    org.jsecurity.authc.pam.ModularRealmAuthenticator var14 = new org.jsecurity.authc.pam.ModularRealmAuthenticator(var13);
    org.jsecurity.authc.pam.AllSuccessfulModularAuthenticationStrategy var15 = new org.jsecurity.authc.pam.AllSuccessfulModularAuthenticationStrategy();
    var14.setModularAuthenticationStrategy((org.jsecurity.authc.pam.ModularAuthenticationStrategy)var15);
    org.jsecurity.authz.SimpleAuthorizationInfo var17 = new org.jsecurity.authz.SimpleAuthorizationInfo();
    var17.addStringPermission("hi!");
    java.io.InputStream var21 = org.jsecurity.util.ClassUtils.getResourceAsStream("");
    java.lang.Object[] var22 = new java.lang.Object[] { var21};
    java.util.List var23 = org.jsecurity.util.CollectionUtils.asList(var22);
    var17.addRoles((java.util.Collection)var23);
    var14.setAuthenticationListeners((java.util.Collection)var23);
    org.jsecurity.realm.activedirectory.ActiveDirectoryRealm var26 = new org.jsecurity.realm.activedirectory.ActiveDirectoryRealm();
    var26.setPrincipalSuffix("");
    var14.setRealm((org.jsecurity.realm.Realm)var26);
    org.jsecurity.cache.HashtableCacheManager var30 = new org.jsecurity.cache.HashtableCacheManager();
    org.jsecurity.cache.Cache var32 = var30.getCache("\u0000\u0000");
    var26.setAuthorizationCache(var32);
    var3.setActiveSessionsCache(var32);
    org.jsecurity.session.mgt.SimpleSession var35 = new org.jsecurity.session.mgt.SimpleSession();
    java.io.Serializable var36 = var3.create((org.jsecurity.session.Session)var35);
    java.io.Serializable var37 = var35.getId();
    java.util.Map var38 = var35.getAttributes();
    org.jsecurity.session.mgt.SimpleSession var39 = new org.jsecurity.session.mgt.SimpleSession();
    var39.setTimeout((-1L));
    org.jsecurity.session.mgt.SimpleSession var42 = new org.jsecurity.session.mgt.SimpleSession();
    java.util.Date var43 = var42.getLastAccessTime();
    var39.setLastAccessTime(var43);
    org.jsecurity.session.mgt.SimpleSession var45 = new org.jsecurity.session.mgt.SimpleSession();
    java.util.Date var46 = var45.getLastAccessTime();
    var39.setStopTimestamp(var46);
    var35.setLastAccessTime(var46);
    var0.setStartTimestamp(var46);
    org.jsecurity.io.XmlSerializer var50 = new org.jsecurity.io.XmlSerializer();
    org.jsecurity.session.mgt.quartz.QuartzSessionValidationScheduler var51 = new org.jsecurity.session.mgt.quartz.QuartzSessionValidationScheduler();
    var51.disableSessionValidation();
    byte[] var53 = var50.serialize((java.lang.Object)var51);
    byte[] var55 = var50.serialize((java.lang.Object)1);
    org.jsecurity.authz.aop.UserAnnotationMethodInterceptor var56 = new org.jsecurity.authz.aop.UserAnnotationMethodInterceptor();
    org.jsecurity.aop.AnnotationHandler var57 = var56.getHandler();
    java.lang.Class var58 = var57.getAnnotationClass();
    byte[] var59 = var50.serialize((java.lang.Object)var57);
    org.jsecurity.session.mgt.SimpleSession var60 = new org.jsecurity.session.mgt.SimpleSession();
    var60.setTimeout((-1L));
    org.jsecurity.session.mgt.SimpleSession var63 = new org.jsecurity.session.mgt.SimpleSession();
    var63.setTimeout((-1L));
    org.jsecurity.session.mgt.SimpleSession var66 = new org.jsecurity.session.mgt.SimpleSession();
    java.util.Date var67 = var66.getLastAccessTime();
    var63.setLastAccessTime(var67);
    org.jsecurity.session.mgt.SimpleSession var69 = new org.jsecurity.session.mgt.SimpleSession();
    java.util.Date var70 = var69.getLastAccessTime();
    var63.setStopTimestamp(var70);
    var60.setStartTimestamp(var70);
    byte[] var73 = var50.serialize((java.lang.Object)var70);
    var0.setStopTimestamp(var70);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var4);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var5);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var8);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var11);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var12);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var13);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var21);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var22);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var23);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var32);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var36 + "' != '" + "896800bf-f105-4b17-b247-b6d3863d2ce8"+ "'", var36.equals("896800bf-f105-4b17-b247-b6d3863d2ce8"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var37 + "' != '" + "896800bf-f105-4b17-b247-b6d3863d2ce8"+ "'", var37.equals("896800bf-f105-4b17-b247-b6d3863d2ce8"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var38);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var43);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var46);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var53);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var55);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var57);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var58);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var59);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var67);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var70);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var73);

  }

  public void test262() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest5.test262");


    java.util.Set var1 = org.jsecurity.util.PermissionUtils.toPermissionStrings("69b91d50-ee90-487b-8ebd-dd7f4a239e5e");
    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      org.jsecurity.mgt.DefaultSecurityManager var2 = new org.jsecurity.mgt.DefaultSecurityManager((java.util.Collection)var1);
      fail("Expected exception of type java.lang.ClassCastException");
    } catch (java.lang.ClassCastException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var1);

  }

  public void test263() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest5.test263");


    org.jsecurity.session.UnknownSessionException var4 = new org.jsecurity.session.UnknownSessionException("dd\uFFFD", (java.io.Serializable)100.0f);
    org.jsecurity.subject.SubjectException var5 = new org.jsecurity.subject.SubjectException("dd\uFFFD", (java.lang.Throwable)var4);
    org.jsecurity.io.SerializationException var6 = new org.jsecurity.io.SerializationException("", (java.lang.Throwable)var5);
    java.lang.Throwable[] var7 = var5.getSuppressed();
    java.lang.Throwable[] var8 = var5.getSuppressed();
    org.jsecurity.authz.SimpleAuthorizationInfo var11 = new org.jsecurity.authz.SimpleAuthorizationInfo();
    var11.addRole("a2b823b1e72eae2b727289df8a00a89df8a0bab6ad8a89c4c5c7a9b62a270000");
    org.jsecurity.session.UnknownSessionException var18 = new org.jsecurity.session.UnknownSessionException("dd\uFFFD", (java.io.Serializable)100.0f);
    org.jsecurity.subject.SubjectException var19 = new org.jsecurity.subject.SubjectException("dd\uFFFD", (java.lang.Throwable)var18);
    org.jsecurity.io.SerializationException var20 = new org.jsecurity.io.SerializationException("", (java.lang.Throwable)var19);
    java.lang.Throwable[] var21 = var19.getSuppressed();
    java.util.Set var22 = org.jsecurity.util.CollectionUtils.asSet((java.lang.Object[])var21);
    var11.addRoles((java.util.Collection)var22);
    java.io.InputStream var25 = org.jsecurity.util.ClassUtils.getResourceAsStream("");
    java.lang.Object[] var26 = new java.lang.Object[] { var25};
    java.util.List var27 = org.jsecurity.util.CollectionUtils.asList(var26);
    org.jsecurity.authc.pam.ModularRealmAuthenticator var28 = new org.jsecurity.authc.pam.ModularRealmAuthenticator(var27);
    org.jsecurity.subject.SimplePrincipalCollection var30 = new org.jsecurity.subject.SimplePrincipalCollection((java.util.Collection)var27, "org.jsecurity.authz.UnauthorizedException: org.jsecurity.session.ExpiredSessionException: ");
    org.jsecurity.session.UnknownSessionException var35 = new org.jsecurity.session.UnknownSessionException("dd\uFFFD", (java.io.Serializable)100.0f);
    org.jsecurity.session.SessionException var37 = new org.jsecurity.session.SessionException("dd\uFFFD", (java.lang.Throwable)var35, (java.io.Serializable)0);
    org.jsecurity.session.SessionException var38 = new org.jsecurity.session.SessionException("dd\uFFFD", (java.lang.Throwable)var35);
    var30.add((java.lang.Object)var38, "org.jsecurity.config.ConfigurationException: dd\uFFFD");
    java.util.Set var41 = var30.asSet();
    org.jsecurity.authz.SimpleAuthorizingAccount var42 = new org.jsecurity.authz.SimpleAuthorizingAccount((java.lang.Object)var8, (java.lang.Object)"\u0000\u0000\u0000", "\u0000\u0000\u0000", var22, var41);
    org.jsecurity.session.UnknownSessionException var47 = new org.jsecurity.session.UnknownSessionException("dd\uFFFD", (java.io.Serializable)100.0f);
    org.jsecurity.subject.SubjectException var48 = new org.jsecurity.subject.SubjectException("dd\uFFFD", (java.lang.Throwable)var47);
    org.jsecurity.io.SerializationException var49 = new org.jsecurity.io.SerializationException("", (java.lang.Throwable)var48);
    java.lang.Throwable[] var50 = var48.getSuppressed();
    java.lang.Throwable[] var51 = var48.getSuppressed();
    java.util.Set var52 = org.jsecurity.util.CollectionUtils.asSet((java.lang.Object[])var51);
    var42.setStringPermissions(var52);
    var42.addRole("7dd9d095-6c41-447c-a2f6-e2c6c8807c11");
    org.jsecurity.realm.SimpleAccountRealm var56 = new org.jsecurity.realm.SimpleAccountRealm();
    org.jsecurity.cache.HashtableCache var58 = new org.jsecurity.cache.HashtableCache("\u0000\u0000\u0000");
    var56.setAuthorizationCache((org.jsecurity.cache.Cache)var58);
    java.util.Set var60 = var58.values();
    var42.addAll((java.util.Collection)var60);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var7);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var8);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var21);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var22);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var25);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var26);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var27);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var41);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var50);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var51);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var52);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var60);

  }

  public void test264() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest5.test264");


    org.jsecurity.authz.AuthorizationException var1 = new org.jsecurity.authz.AuthorizationException("52a4a421-03d6-4e18-abbd-dd3112c2d7b3");
    org.jsecurity.session.ExpiredSessionException var3 = new org.jsecurity.session.ExpiredSessionException((java.io.Serializable)"e716326a-0211-4284-b9e0-793cdfa5d7a1");
    org.jsecurity.authc.SimpleAuthenticationInfo var5 = new org.jsecurity.authc.SimpleAuthenticationInfo((java.lang.Object)var1, (java.lang.Object)var3, "be750ca9-d7fd-4bd0-a0ae-e908c938eb8d");

  }

  public void test265() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest5.test265");


    org.jsecurity.mgt.DefaultSecurityManager var0 = new org.jsecurity.mgt.DefaultSecurityManager();
    java.io.InputStream var2 = org.jsecurity.util.ClassUtils.getResourceAsStream("");
    java.lang.Object[] var3 = new java.lang.Object[] { var2};
    java.util.List var4 = org.jsecurity.util.CollectionUtils.asList(var3);
    org.jsecurity.authc.pam.ModularRealmAuthenticator var5 = new org.jsecurity.authc.pam.ModularRealmAuthenticator(var4);
    org.jsecurity.authc.pam.AllSuccessfulModularAuthenticationStrategy var6 = new org.jsecurity.authc.pam.AllSuccessfulModularAuthenticationStrategy();
    var5.setModularAuthenticationStrategy((org.jsecurity.authc.pam.ModularAuthenticationStrategy)var6);
    org.jsecurity.authz.SimpleAuthorizationInfo var8 = new org.jsecurity.authz.SimpleAuthorizationInfo();
    var8.addStringPermission("hi!");
    java.io.InputStream var12 = org.jsecurity.util.ClassUtils.getResourceAsStream("");
    java.lang.Object[] var13 = new java.lang.Object[] { var12};
    java.util.List var14 = org.jsecurity.util.CollectionUtils.asList(var13);
    var8.addRoles((java.util.Collection)var14);
    var5.setAuthenticationListeners((java.util.Collection)var14);
    var0.setSessionListeners((java.util.Collection)var14);
    org.jsecurity.authc.pam.ModularRealmAuthenticator var18 = new org.jsecurity.authc.pam.ModularRealmAuthenticator();
    org.jsecurity.authz.permission.InvalidPermissionStringException var21 = new org.jsecurity.authz.permission.InvalidPermissionStringException("", "dd\uFFFD");
    org.jsecurity.JSecurityException var23 = new org.jsecurity.JSecurityException("");
    org.jsecurity.authc.SimpleAuthenticationInfo var25 = new org.jsecurity.authc.SimpleAuthenticationInfo((java.lang.Object)var21, (java.lang.Object)"", "org.jsecurity.authz.UnauthorizedException: org.jsecurity.session.ExpiredSessionException: ");
    org.jsecurity.subject.PrincipalCollection var26 = var25.getPrincipals();
    var18.onLogout(var26);
    var0.setAuthenticator((org.jsecurity.authc.Authenticator)var18);
    org.jsecurity.codec.CodecException var31 = new org.jsecurity.codec.CodecException("dd\uFFFD");
    org.jsecurity.authc.ConcurrentAccessException var32 = new org.jsecurity.authc.ConcurrentAccessException("org.jsecurity.authz.UnauthorizedException: org.jsecurity.session.ExpiredSessionException: ", (java.lang.Throwable)var31);
    org.jsecurity.subject.SimplePrincipalCollection var34 = new org.jsecurity.subject.SimplePrincipalCollection((java.lang.Object)var31, "");
    org.jsecurity.authc.pam.FirstSuccessfulAuthenticationStrategy var35 = new org.jsecurity.authc.pam.FirstSuccessfulAuthenticationStrategy();
    org.jsecurity.authz.UnauthorizedException var37 = new org.jsecurity.authz.UnauthorizedException("org.jsecurity.config.ConfigurationException: dd\uFFFD");
    java.lang.Throwable[] var38 = var37.getSuppressed();
    java.util.List var39 = org.jsecurity.util.CollectionUtils.asList((java.lang.Object[])var38);
    org.jsecurity.authc.UsernamePasswordToken var40 = new org.jsecurity.authc.UsernamePasswordToken();
    java.lang.String var41 = var40.getUsername();
    java.net.InetAddress var42 = var40.getInetAddress();
    org.jsecurity.authc.AuthenticationInfo var43 = var35.beforeAllAttempts((java.util.Collection)var39, (org.jsecurity.authc.AuthenticationToken)var40);
    org.jsecurity.session.UnknownSessionException var48 = new org.jsecurity.session.UnknownSessionException("dd\uFFFD", (java.io.Serializable)100.0f);
    org.jsecurity.subject.SubjectException var49 = new org.jsecurity.subject.SubjectException("dd\uFFFD", (java.lang.Throwable)var48);
    org.jsecurity.io.SerializationException var50 = new org.jsecurity.io.SerializationException("", (java.lang.Throwable)var49);
    java.lang.Throwable[] var51 = var49.getSuppressed();
    java.util.Set var52 = org.jsecurity.util.CollectionUtils.asSet((java.lang.Object[])var51);
    org.jsecurity.authc.SimpleAccount var53 = new org.jsecurity.authc.SimpleAccount((org.jsecurity.subject.PrincipalCollection)var34, (java.lang.Object)var39, var52);
    java.io.InputStream var55 = org.jsecurity.util.ClassUtils.getResourceAsStream("");
    java.lang.Object[] var56 = new java.lang.Object[] { var55};
    java.util.List var57 = org.jsecurity.util.CollectionUtils.asList(var56);
    org.jsecurity.authc.pam.ModularRealmAuthenticator var58 = new org.jsecurity.authc.pam.ModularRealmAuthenticator(var57);
    org.jsecurity.subject.SimplePrincipalCollection var60 = new org.jsecurity.subject.SimplePrincipalCollection((java.util.Collection)var57, "org.jsecurity.authz.UnauthorizedException: org.jsecurity.session.ExpiredSessionException: ");
    org.jsecurity.io.ResourceException var64 = new org.jsecurity.io.ResourceException("hi!");
    org.jsecurity.authc.UnknownAccountException var65 = new org.jsecurity.authc.UnknownAccountException((java.lang.Throwable)var64);
    org.jsecurity.session.StoppedSessionException var66 = new org.jsecurity.session.StoppedSessionException("dd\uFFFD", (java.io.Serializable)var64);
    org.jsecurity.session.UnknownSessionException var67 = new org.jsecurity.session.UnknownSessionException("org.jsecurity.authz.UnauthorizedException: org.jsecurity.session.ExpiredSessionException: ", (java.lang.Throwable)var64);
    boolean var68 = var60.equals((java.lang.Object)var64);
    var34.addAll((org.jsecurity.subject.PrincipalCollection)var60);
    org.jsecurity.session.UnknownSessionException var74 = new org.jsecurity.session.UnknownSessionException("dd\uFFFD", (java.io.Serializable)100.0f);
    org.jsecurity.subject.SubjectException var75 = new org.jsecurity.subject.SubjectException("dd\uFFFD", (java.lang.Throwable)var74);
    org.jsecurity.io.SerializationException var76 = new org.jsecurity.io.SerializationException("", (java.lang.Throwable)var75);
    java.lang.Throwable[] var77 = var75.getSuppressed();
    java.util.List var78 = org.jsecurity.util.CollectionUtils.asList((java.lang.Object[])var77);
    boolean var79 = var0.isPermittedAll((org.jsecurity.subject.PrincipalCollection)var34, (java.util.Collection)var78);
    org.jsecurity.subject.DelegatingSubject var80 = new org.jsecurity.subject.DelegatingSubject((org.jsecurity.mgt.SecurityManager)var0);
    boolean var82 = var80.hasRole("org.jsecurity.authc.IncorrectCredentialsException: \u0000\u0000");
    java.net.InetAddress var83 = var80.getInetAddress();
    org.jsecurity.authc.ExpiredCredentialsException var85 = new org.jsecurity.authc.ExpiredCredentialsException();
    org.jsecurity.session.ExpiredSessionException var86 = new org.jsecurity.session.ExpiredSessionException("", (java.lang.Throwable)var85);
    java.lang.Throwable[] var87 = var86.getSuppressed();
    java.util.List var88 = org.jsecurity.util.CollectionUtils.asList((java.lang.Object[])var87);
    boolean var89 = var80.hasAllRoles((java.util.Collection)var88);
    java.lang.Object var90 = var80.getPrincipal();
    java.lang.Object var91 = var80.getPrincipal();
    java.net.InetAddress var92 = var80.getInetAddress();
    java.lang.String[] var95 = org.jsecurity.util.StringUtils.tokenizeToStringArray("\u0000\u0000", "d8d550ee-3a8c-48f0-8061-1d82c827f505");
    java.util.List var96 = org.jsecurity.util.CollectionUtils.asList((java.lang.Object[])var95);
    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      var80.checkPermissions(var95);
      fail("Expected exception of type org.jsecurity.authz.UnauthenticatedException");
    } catch (org.jsecurity.authz.UnauthenticatedException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var2);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var3);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var4);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var12);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var13);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var14);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var26);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var38);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var39);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var41);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var42);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var43);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var51);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var52);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var55);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var56);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var57);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var68 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var77);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var78);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var79 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var82 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var83);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var87);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var88);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var89 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var90);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var91);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var92);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var95);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var96);

  }

  public void test266() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest5.test266");


    org.jsecurity.mgt.DefaultSecurityManager var0 = new org.jsecurity.mgt.DefaultSecurityManager();
    java.io.InputStream var2 = org.jsecurity.util.ClassUtils.getResourceAsStream("");
    java.lang.Object[] var3 = new java.lang.Object[] { var2};
    java.util.List var4 = org.jsecurity.util.CollectionUtils.asList(var3);
    org.jsecurity.authc.pam.ModularRealmAuthenticator var5 = new org.jsecurity.authc.pam.ModularRealmAuthenticator(var4);
    org.jsecurity.authc.pam.AllSuccessfulModularAuthenticationStrategy var6 = new org.jsecurity.authc.pam.AllSuccessfulModularAuthenticationStrategy();
    var5.setModularAuthenticationStrategy((org.jsecurity.authc.pam.ModularAuthenticationStrategy)var6);
    org.jsecurity.authz.SimpleAuthorizationInfo var8 = new org.jsecurity.authz.SimpleAuthorizationInfo();
    var8.addStringPermission("hi!");
    java.io.InputStream var12 = org.jsecurity.util.ClassUtils.getResourceAsStream("");
    java.lang.Object[] var13 = new java.lang.Object[] { var12};
    java.util.List var14 = org.jsecurity.util.CollectionUtils.asList(var13);
    var8.addRoles((java.util.Collection)var14);
    var5.setAuthenticationListeners((java.util.Collection)var14);
    var0.setSessionListeners((java.util.Collection)var14);
    org.jsecurity.authc.pam.ModularRealmAuthenticator var18 = new org.jsecurity.authc.pam.ModularRealmAuthenticator();
    org.jsecurity.authz.permission.InvalidPermissionStringException var21 = new org.jsecurity.authz.permission.InvalidPermissionStringException("", "dd\uFFFD");
    org.jsecurity.JSecurityException var23 = new org.jsecurity.JSecurityException("");
    org.jsecurity.authc.SimpleAuthenticationInfo var25 = new org.jsecurity.authc.SimpleAuthenticationInfo((java.lang.Object)var21, (java.lang.Object)"", "org.jsecurity.authz.UnauthorizedException: org.jsecurity.session.ExpiredSessionException: ");
    org.jsecurity.subject.PrincipalCollection var26 = var25.getPrincipals();
    var18.onLogout(var26);
    var0.setAuthenticator((org.jsecurity.authc.Authenticator)var18);
    org.jsecurity.codec.CodecException var31 = new org.jsecurity.codec.CodecException("dd\uFFFD");
    org.jsecurity.authc.ConcurrentAccessException var32 = new org.jsecurity.authc.ConcurrentAccessException("org.jsecurity.authz.UnauthorizedException: org.jsecurity.session.ExpiredSessionException: ", (java.lang.Throwable)var31);
    org.jsecurity.subject.SimplePrincipalCollection var34 = new org.jsecurity.subject.SimplePrincipalCollection((java.lang.Object)var31, "");
    org.jsecurity.authc.pam.FirstSuccessfulAuthenticationStrategy var35 = new org.jsecurity.authc.pam.FirstSuccessfulAuthenticationStrategy();
    org.jsecurity.authz.UnauthorizedException var37 = new org.jsecurity.authz.UnauthorizedException("org.jsecurity.config.ConfigurationException: dd\uFFFD");
    java.lang.Throwable[] var38 = var37.getSuppressed();
    java.util.List var39 = org.jsecurity.util.CollectionUtils.asList((java.lang.Object[])var38);
    org.jsecurity.authc.UsernamePasswordToken var40 = new org.jsecurity.authc.UsernamePasswordToken();
    java.lang.String var41 = var40.getUsername();
    java.net.InetAddress var42 = var40.getInetAddress();
    org.jsecurity.authc.AuthenticationInfo var43 = var35.beforeAllAttempts((java.util.Collection)var39, (org.jsecurity.authc.AuthenticationToken)var40);
    org.jsecurity.session.UnknownSessionException var48 = new org.jsecurity.session.UnknownSessionException("dd\uFFFD", (java.io.Serializable)100.0f);
    org.jsecurity.subject.SubjectException var49 = new org.jsecurity.subject.SubjectException("dd\uFFFD", (java.lang.Throwable)var48);
    org.jsecurity.io.SerializationException var50 = new org.jsecurity.io.SerializationException("", (java.lang.Throwable)var49);
    java.lang.Throwable[] var51 = var49.getSuppressed();
    java.util.Set var52 = org.jsecurity.util.CollectionUtils.asSet((java.lang.Object[])var51);
    org.jsecurity.authc.SimpleAccount var53 = new org.jsecurity.authc.SimpleAccount((org.jsecurity.subject.PrincipalCollection)var34, (java.lang.Object)var39, var52);
    java.io.InputStream var55 = org.jsecurity.util.ClassUtils.getResourceAsStream("");
    java.lang.Object[] var56 = new java.lang.Object[] { var55};
    java.util.List var57 = org.jsecurity.util.CollectionUtils.asList(var56);
    org.jsecurity.authc.pam.ModularRealmAuthenticator var58 = new org.jsecurity.authc.pam.ModularRealmAuthenticator(var57);
    org.jsecurity.subject.SimplePrincipalCollection var60 = new org.jsecurity.subject.SimplePrincipalCollection((java.util.Collection)var57, "org.jsecurity.authz.UnauthorizedException: org.jsecurity.session.ExpiredSessionException: ");
    org.jsecurity.io.ResourceException var64 = new org.jsecurity.io.ResourceException("hi!");
    org.jsecurity.authc.UnknownAccountException var65 = new org.jsecurity.authc.UnknownAccountException((java.lang.Throwable)var64);
    org.jsecurity.session.StoppedSessionException var66 = new org.jsecurity.session.StoppedSessionException("dd\uFFFD", (java.io.Serializable)var64);
    org.jsecurity.session.UnknownSessionException var67 = new org.jsecurity.session.UnknownSessionException("org.jsecurity.authz.UnauthorizedException: org.jsecurity.session.ExpiredSessionException: ", (java.lang.Throwable)var64);
    boolean var68 = var60.equals((java.lang.Object)var64);
    var34.addAll((org.jsecurity.subject.PrincipalCollection)var60);
    org.jsecurity.session.UnknownSessionException var74 = new org.jsecurity.session.UnknownSessionException("dd\uFFFD", (java.io.Serializable)100.0f);
    org.jsecurity.subject.SubjectException var75 = new org.jsecurity.subject.SubjectException("dd\uFFFD", (java.lang.Throwable)var74);
    org.jsecurity.io.SerializationException var76 = new org.jsecurity.io.SerializationException("", (java.lang.Throwable)var75);
    java.lang.Throwable[] var77 = var75.getSuppressed();
    java.util.List var78 = org.jsecurity.util.CollectionUtils.asList((java.lang.Object[])var77);
    boolean var79 = var0.isPermittedAll((org.jsecurity.subject.PrincipalCollection)var34, (java.util.Collection)var78);
    org.jsecurity.session.mgt.SessionManager var80 = var0.getSessionManager();
    org.jsecurity.subject.DelegatingSubject var81 = new org.jsecurity.subject.DelegatingSubject((org.jsecurity.mgt.SecurityManager)var0);
    boolean var83 = var81.isPermitted("c07dcc1f-69d1-439f-8202-c1ed75146e6e");
    java.lang.String[] var88 = org.jsecurity.util.StringUtils.tokenizeToStringArray("a2b823b1e72eae2b727289df8a00a89df8a0bab6ad8a89c4c5c7a9b62a270000", "14b48d08-1ed5-43cf-80f1-5709f31b1666", true, true);
    boolean[] var89 = var81.isPermitted(var88);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var2);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var3);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var4);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var12);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var13);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var14);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var26);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var38);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var39);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var41);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var42);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var43);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var51);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var52);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var55);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var56);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var57);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var68 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var77);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var78);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var79 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var80);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var83 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var88);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var89);

  }

  public void test267() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest5.test267");


    org.jsecurity.session.mgt.eis.MemorySessionDAO var0 = new org.jsecurity.session.mgt.eis.MemorySessionDAO();
    org.jsecurity.cache.Cache var1 = var0.getActiveSessionsCache();
    org.jsecurity.cache.CacheManager var2 = var0.getCacheManager();
    org.jsecurity.cache.HashtableCacheManager var3 = new org.jsecurity.cache.HashtableCacheManager();
    org.jsecurity.cache.Cache var5 = var3.getCache("\u0000\u0000");
    var0.setActiveSessionsCache(var5);
    java.io.InputStream var8 = org.jsecurity.util.ClassUtils.getResourceAsStream("");
    java.lang.Object[] var9 = new java.lang.Object[] { var8};
    java.util.List var10 = org.jsecurity.util.CollectionUtils.asList(var9);
    org.jsecurity.authc.pam.ModularRealmAuthenticator var11 = new org.jsecurity.authc.pam.ModularRealmAuthenticator(var10);
    org.jsecurity.authc.pam.AllSuccessfulModularAuthenticationStrategy var12 = new org.jsecurity.authc.pam.AllSuccessfulModularAuthenticationStrategy();
    var11.setModularAuthenticationStrategy((org.jsecurity.authc.pam.ModularAuthenticationStrategy)var12);
    org.jsecurity.authz.SimpleAuthorizationInfo var14 = new org.jsecurity.authz.SimpleAuthorizationInfo();
    var14.addStringPermission("hi!");
    java.io.InputStream var18 = org.jsecurity.util.ClassUtils.getResourceAsStream("");
    java.lang.Object[] var19 = new java.lang.Object[] { var18};
    java.util.List var20 = org.jsecurity.util.CollectionUtils.asList(var19);
    var14.addRoles((java.util.Collection)var20);
    var11.setAuthenticationListeners((java.util.Collection)var20);
    org.jsecurity.realm.activedirectory.ActiveDirectoryRealm var23 = new org.jsecurity.realm.activedirectory.ActiveDirectoryRealm();
    var23.setPrincipalSuffix("");
    var11.setRealm((org.jsecurity.realm.Realm)var23);
    org.jsecurity.cache.HashtableCacheManager var27 = new org.jsecurity.cache.HashtableCacheManager();
    org.jsecurity.cache.Cache var29 = var27.getCache("\u0000\u0000");
    var23.setAuthorizationCache(var29);
    var0.setActiveSessionsCache(var29);
    org.jsecurity.session.mgt.SimpleSession var32 = new org.jsecurity.session.mgt.SimpleSession();
    java.io.Serializable var33 = var0.create((org.jsecurity.session.Session)var32);
    org.jsecurity.session.mgt.SimpleSession var34 = new org.jsecurity.session.mgt.SimpleSession();
    var34.touch();
    var34.validate();
    org.jsecurity.session.mgt.SimpleSession var37 = new org.jsecurity.session.mgt.SimpleSession();
    var37.setTimeout((-1L));
    org.jsecurity.session.mgt.SimpleSession var40 = new org.jsecurity.session.mgt.SimpleSession();
    java.util.Date var41 = var40.getLastAccessTime();
    var37.setLastAccessTime(var41);
    org.jsecurity.session.mgt.SimpleSession var43 = new org.jsecurity.session.mgt.SimpleSession();
    java.util.Date var44 = var43.getLastAccessTime();
    var37.setStopTimestamp(var44);
    var34.setLastAccessTime(var44);
    var32.setLastAccessTime(var44);
    org.jsecurity.session.mgt.ImmutableProxiedSession var48 = new org.jsecurity.session.mgt.ImmutableProxiedSession((org.jsecurity.session.Session)var32);
    org.jsecurity.session.ProxiedSession var49 = new org.jsecurity.session.ProxiedSession((org.jsecurity.session.Session)var32);
    org.jsecurity.crypto.hash.Md2Hash var52 = org.jsecurity.crypto.hash.Md2Hash.fromBase64String("a2b823b1e72eae2b727289df8a00a89df8a0bab6ad8a89c4c5c7a9b62a270000");
    org.jsecurity.authc.credential.Md2CredentialsMatcher var53 = new org.jsecurity.authc.credential.Md2CredentialsMatcher();
    org.jsecurity.authz.SimpleAuthorizingAccount var55 = new org.jsecurity.authz.SimpleAuthorizingAccount((java.lang.Object)"a2b823b1e72eae2b727289df8a00a89df8a0bab6ad8a89c4c5c7a9b62a270000", (java.lang.Object)var53, "");
    org.jsecurity.session.SessionException var56 = new org.jsecurity.session.SessionException("org.jsecurity.realm.SimpleAccountRealm-9-authorization", (java.io.Serializable)var55);
    org.jsecurity.session.mgt.ExecutorServiceSessionValidationScheduler var57 = new org.jsecurity.session.mgt.ExecutorServiceSessionValidationScheduler();
    var49.setAttribute((java.lang.Object)var56, (java.lang.Object)var57);
    org.jsecurity.session.mgt.DefaultSessionManager var59 = new org.jsecurity.session.mgt.DefaultSessionManager();
    var59.setGlobalSessionTimeout(1);
    boolean var62 = var59.isSessionValidationSchedulerEnabled();
    var57.setSessionManager((org.jsecurity.session.mgt.ValidatingSessionManager)var59);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var1);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var2);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var5);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var8);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var9);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var10);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var18);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var19);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var20);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var29);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var33 + "' != '" + "17782185-43f9-48d9-81e6-210f3ea379e2"+ "'", var33.equals("17782185-43f9-48d9-81e6-210f3ea379e2"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var41);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var44);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var52);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var62 == true);

  }

  public void test268() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest5.test268");


    org.jsecurity.authz.UnauthenticatedException var1 = new org.jsecurity.authz.UnauthenticatedException("78149b74-b1fa-47f0-8334-6ae03c9c8095");

  }

  public void test269() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest5.test269");


    org.jsecurity.realm.text.TextConfigurationRealm var1 = new org.jsecurity.realm.text.TextConfigurationRealm();
    java.io.InputStream var3 = org.jsecurity.util.ClassUtils.getResourceAsStream("");
    java.lang.Object[] var4 = new java.lang.Object[] { var3};
    java.util.List var5 = org.jsecurity.util.CollectionUtils.asList(var4);
    org.jsecurity.authc.pam.ModularRealmAuthenticator var6 = new org.jsecurity.authc.pam.ModularRealmAuthenticator(var5);
    org.jsecurity.subject.SimplePrincipalCollection var8 = new org.jsecurity.subject.SimplePrincipalCollection((java.util.Collection)var5, "org.jsecurity.authz.UnauthorizedException: org.jsecurity.session.ExpiredSessionException: ");
    org.jsecurity.session.UnknownSessionException var13 = new org.jsecurity.session.UnknownSessionException("dd\uFFFD", (java.io.Serializable)100.0f);
    org.jsecurity.session.SessionException var15 = new org.jsecurity.session.SessionException("dd\uFFFD", (java.lang.Throwable)var13, (java.io.Serializable)0);
    org.jsecurity.session.SessionException var16 = new org.jsecurity.session.SessionException("dd\uFFFD", (java.lang.Throwable)var13);
    var8.add((java.lang.Object)var16, "org.jsecurity.config.ConfigurationException: dd\uFFFD");
    var1.onLogout((org.jsecurity.subject.PrincipalCollection)var8);
    byte[] var22 = org.jsecurity.codec.Base64.decode("hi!");
    org.jsecurity.authc.CredentialsException var24 = new org.jsecurity.authc.CredentialsException("org.jsecurity.authz.UnauthorizedException: org.jsecurity.session.ExpiredSessionException: ");
    org.jsecurity.authc.SimpleAuthenticationInfo var26 = new org.jsecurity.authc.SimpleAuthenticationInfo((java.lang.Object)"hi!", (java.lang.Object)var24, "org.jsecurity.config.ConfigurationException: dd\uFFFD");
    org.jsecurity.session.SessionException var27 = new org.jsecurity.session.SessionException("a2b823b1e72eae2b727289df8a00a89df8a0bab6ad8a89c4c5c7a9b62a270000", (java.io.Serializable)"org.jsecurity.config.ConfigurationException: dd\uFFFD");
    org.jsecurity.authc.SimpleAccount var29 = new org.jsecurity.authc.SimpleAccount((java.lang.Object)var1, (java.lang.Object)"a2b823b1e72eae2b727289df8a00a89df8a0bab6ad8a89c4c5c7a9b62a270000", "7edc3e5f-37f7-4a22-9779-4609545bccd8");
    org.jsecurity.authz.SimpleRole var31 = new org.jsecurity.authz.SimpleRole();
    org.jsecurity.authz.permission.WildcardPermission var34 = new org.jsecurity.authz.permission.WildcardPermission("hi!", false);
    boolean var35 = var31.isPermitted((org.jsecurity.authz.Permission)var34);
    org.jsecurity.session.InvalidSessionException var36 = new org.jsecurity.session.InvalidSessionException("org.jsecurity.config.ConfigurationException: dd\uFFFD", (java.io.Serializable)var34);
    org.jsecurity.authz.SimpleRole var37 = new org.jsecurity.authz.SimpleRole();
    org.jsecurity.authz.permission.WildcardPermission var40 = new org.jsecurity.authz.permission.WildcardPermission("hi!", false);
    boolean var41 = var37.isPermitted((org.jsecurity.authz.Permission)var40);
    boolean var42 = var34.implies((org.jsecurity.authz.Permission)var40);
    var29.addObjectPermission((org.jsecurity.authz.Permission)var34);
    org.jsecurity.session.SessionException var44 = new org.jsecurity.session.SessionException((java.io.Serializable)var34);
    org.jsecurity.session.ExpiredSessionException var46 = new org.jsecurity.session.ExpiredSessionException("\uFFFD\uFFFD\uFFFDow4\u06FE|\uFFFD\uFFFD\u001Ek\uFFFD\uFFFDo\uFFFD\uFFFDs\uFFFDwo\uFFFD\uFFFD", (java.lang.Throwable)var44, (java.io.Serializable)"90538851-b0e4-449f-8dda-973ab1d52c9e");
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var3);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var4);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var5);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var22);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var35 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var41 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var42 == true);

  }

  public void test270() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest5.test270");


    org.jsecurity.realm.text.PropertiesRealm var0 = new org.jsecurity.realm.text.PropertiesRealm();
    org.jsecurity.realm.activedirectory.ActiveDirectoryRealm var1 = new org.jsecurity.realm.activedirectory.ActiveDirectoryRealm();
    org.jsecurity.authc.credential.Sha256CredentialsMatcher var2 = new org.jsecurity.authc.credential.Sha256CredentialsMatcher();
    var1.setCredentialsMatcher((org.jsecurity.authc.credential.CredentialsMatcher)var2);
    java.lang.String var4 = var1.getAuthorizationCacheName();
    var1.setPrincipalSuffix("org.jsecurity.config.ConfigurationException: dd\uFFFD");
    org.jsecurity.authz.permission.PermissionResolver var7 = var1.getPermissionResolver();
    var0.setPermissionResolver(var7);
    var0.destroy();
    java.lang.String var10 = var0.getRoleDefinitions();
    var0.setReloadIntervalSeconds(2);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var4);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var7);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var10);

  }

  public void test271() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest5.test271");


    org.jsecurity.authz.UnauthenticatedException var3 = new org.jsecurity.authz.UnauthenticatedException("guest = guest,guest\npresidentskroob = 12345,president\ndarkhelmet = ludicrousspeed,darklord,schwartz\nroot = secret,root\nlonestarr = vespa,goodguy,schwartz\n");
    org.jsecurity.authz.UnauthenticatedException var6 = new org.jsecurity.authz.UnauthenticatedException();
    org.jsecurity.authc.AccountException var7 = new org.jsecurity.authc.AccountException("hi!", (java.lang.Throwable)var6);
    org.jsecurity.session.SessionException var8 = new org.jsecurity.session.SessionException("\u0000\u0000", (java.lang.Throwable)var6);
    org.jsecurity.authz.HostUnauthorizedException var9 = new org.jsecurity.authz.HostUnauthorizedException((java.lang.Throwable)var8);
    org.jsecurity.session.InvalidSessionException var10 = new org.jsecurity.session.InvalidSessionException("4ef713cf-5dcd-4003-b930-c7cb38661a43", (java.lang.Throwable)var3, (java.io.Serializable)var8);
    org.jsecurity.authz.UnauthorizedException var11 = new org.jsecurity.authz.UnauthorizedException("org.jsecurity.realm.text.PropertiesRealm-282-authorization", (java.lang.Throwable)var8);

  }

  public void test272() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest5.test272");


    org.jsecurity.authc.ExpiredCredentialsException var1 = new org.jsecurity.authc.ExpiredCredentialsException("7f459141-420b-4ce9-8486-8c578b9f7c7e");

  }

  public void test273() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest5.test273");


    org.jsecurity.crypto.hash.Md5Hash var1 = org.jsecurity.crypto.hash.Md5Hash.fromBase64String("985ef082-f13d-463b-a5a4-b88c15841261");
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var1);

  }

  public void test274() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest5.test274");


    org.jsecurity.authz.SimpleRole var0 = new org.jsecurity.authz.SimpleRole();
    java.lang.String var1 = var0.getName();
    java.io.InputStream var3 = org.jsecurity.util.ClassUtils.getResourceAsStream("");
    boolean var4 = var0.equals((java.lang.Object)"");
    var0.setName("org.jsecurity.realm.SimpleAccountRealm-173-authorization");
    org.jsecurity.authz.permission.WildcardPermissionResolver var8 = new org.jsecurity.authz.permission.WildcardPermissionResolver();
    java.util.Set var9 = org.jsecurity.util.PermissionUtils.resolveDelimitedPermissions("a2b823b1e72eae2b727289df8a00a89df8a0bab6ad8a89c4c5c7a9b62a270000", (org.jsecurity.authz.permission.PermissionResolver)var8);
    org.jsecurity.authz.Permission var11 = var8.resolvePermission("6f8b35fd-0848-49a4-9560-659760616ad8");
    boolean var12 = var0.isPermitted(var11);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var1);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var3);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var4 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var9);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var11);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var12 == false);

  }

  public void test275() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest5.test275");


    org.jsecurity.session.mgt.eis.MemorySessionDAO var0 = new org.jsecurity.session.mgt.eis.MemorySessionDAO();
    org.jsecurity.cache.Cache var1 = var0.getActiveSessionsCache();
    org.jsecurity.cache.CacheManager var2 = var0.getCacheManager();
    org.jsecurity.cache.HashtableCacheManager var3 = new org.jsecurity.cache.HashtableCacheManager();
    org.jsecurity.cache.Cache var5 = var3.getCache("\u0000\u0000");
    var0.setActiveSessionsCache(var5);
    java.io.InputStream var8 = org.jsecurity.util.ClassUtils.getResourceAsStream("");
    java.lang.Object[] var9 = new java.lang.Object[] { var8};
    java.util.List var10 = org.jsecurity.util.CollectionUtils.asList(var9);
    org.jsecurity.authc.pam.ModularRealmAuthenticator var11 = new org.jsecurity.authc.pam.ModularRealmAuthenticator(var10);
    org.jsecurity.authc.pam.AllSuccessfulModularAuthenticationStrategy var12 = new org.jsecurity.authc.pam.AllSuccessfulModularAuthenticationStrategy();
    var11.setModularAuthenticationStrategy((org.jsecurity.authc.pam.ModularAuthenticationStrategy)var12);
    org.jsecurity.authz.SimpleAuthorizationInfo var14 = new org.jsecurity.authz.SimpleAuthorizationInfo();
    var14.addStringPermission("hi!");
    java.io.InputStream var18 = org.jsecurity.util.ClassUtils.getResourceAsStream("");
    java.lang.Object[] var19 = new java.lang.Object[] { var18};
    java.util.List var20 = org.jsecurity.util.CollectionUtils.asList(var19);
    var14.addRoles((java.util.Collection)var20);
    var11.setAuthenticationListeners((java.util.Collection)var20);
    org.jsecurity.realm.activedirectory.ActiveDirectoryRealm var23 = new org.jsecurity.realm.activedirectory.ActiveDirectoryRealm();
    var23.setPrincipalSuffix("");
    var11.setRealm((org.jsecurity.realm.Realm)var23);
    org.jsecurity.cache.HashtableCacheManager var27 = new org.jsecurity.cache.HashtableCacheManager();
    org.jsecurity.cache.Cache var29 = var27.getCache("\u0000\u0000");
    var23.setAuthorizationCache(var29);
    var0.setActiveSessionsCache(var29);
    org.jsecurity.session.mgt.SimpleSession var32 = new org.jsecurity.session.mgt.SimpleSession();
    java.io.Serializable var33 = var0.create((org.jsecurity.session.Session)var32);
    org.jsecurity.session.mgt.SimpleSession var34 = new org.jsecurity.session.mgt.SimpleSession();
    var34.touch();
    var34.validate();
    org.jsecurity.session.mgt.SimpleSession var37 = new org.jsecurity.session.mgt.SimpleSession();
    var37.setTimeout((-1L));
    org.jsecurity.session.mgt.SimpleSession var40 = new org.jsecurity.session.mgt.SimpleSession();
    java.util.Date var41 = var40.getLastAccessTime();
    var37.setLastAccessTime(var41);
    org.jsecurity.session.mgt.SimpleSession var43 = new org.jsecurity.session.mgt.SimpleSession();
    java.util.Date var44 = var43.getLastAccessTime();
    var37.setStopTimestamp(var44);
    var34.setLastAccessTime(var44);
    var32.setLastAccessTime(var44);
    org.jsecurity.session.mgt.ImmutableProxiedSession var48 = new org.jsecurity.session.mgt.ImmutableProxiedSession((org.jsecurity.session.Session)var32);
    java.util.Date var49 = var48.getStartTimestamp();
    java.io.Serializable var50 = var48.getId();
    java.util.Collection var51 = var48.getAttributeKeys();
    org.jsecurity.authc.ConcurrentAccessException var53 = new org.jsecurity.authc.ConcurrentAccessException();
    org.jsecurity.session.ExpiredSessionException var55 = new org.jsecurity.session.ExpiredSessionException("bcd88f91-36fc-4824-97c3-1a752a1a4e71", (java.lang.Throwable)var53, (java.io.Serializable)"c90601ac-cfac-4c24-b18f-498fb061e4c8");
    org.jsecurity.session.UnknownSessionException var60 = new org.jsecurity.session.UnknownSessionException("dd\uFFFD", (java.io.Serializable)100.0f);
    org.jsecurity.subject.SubjectException var61 = new org.jsecurity.subject.SubjectException("dd\uFFFD", (java.lang.Throwable)var60);
    org.jsecurity.authc.AccountException var62 = new org.jsecurity.authc.AccountException("hi!", (java.lang.Throwable)var61);
    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      var48.setAttribute((java.lang.Object)"bcd88f91-36fc-4824-97c3-1a752a1a4e71", (java.lang.Object)"hi!");
      fail("Expected exception of type org.jsecurity.session.InvalidSessionException");
    } catch (org.jsecurity.session.InvalidSessionException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var1);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var2);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var5);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var8);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var9);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var10);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var18);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var19);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var20);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var29);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var33 + "' != '" + "8733344c-8ab4-409b-8b10-dd2c40258032"+ "'", var33.equals("8733344c-8ab4-409b-8b10-dd2c40258032"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var41);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var44);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var49);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var50 + "' != '" + "8733344c-8ab4-409b-8b10-dd2c40258032"+ "'", var50.equals("8733344c-8ab4-409b-8b10-dd2c40258032"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var51);

  }

  public void test276() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest5.test276");


    org.jsecurity.config.IniConfiguration var0 = new org.jsecurity.config.IniConfiguration();
    java.lang.String var1 = var0.getConfig();
    var0.setConfig("\uFFFD\uFFFD#\uFFFD\uFFFD.\uFFFD+rr\uFFFD\u07CA\u0000\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\u01E9\uFFFD*'\u0000\u0000");
    var0.setConfig("ff1bb54d-80f9-4308-a260-ff3ddf1355e9");
    org.jsecurity.realm.text.TextConfigurationRealm var6 = new org.jsecurity.realm.text.TextConfigurationRealm();
    java.io.InputStream var8 = org.jsecurity.util.ClassUtils.getResourceAsStream("");
    java.lang.Object[] var9 = new java.lang.Object[] { var8};
    java.util.List var10 = org.jsecurity.util.CollectionUtils.asList(var9);
    org.jsecurity.authc.pam.ModularRealmAuthenticator var11 = new org.jsecurity.authc.pam.ModularRealmAuthenticator(var10);
    org.jsecurity.subject.SimplePrincipalCollection var13 = new org.jsecurity.subject.SimplePrincipalCollection((java.util.Collection)var10, "org.jsecurity.authz.UnauthorizedException: org.jsecurity.session.ExpiredSessionException: ");
    org.jsecurity.session.UnknownSessionException var18 = new org.jsecurity.session.UnknownSessionException("dd\uFFFD", (java.io.Serializable)100.0f);
    org.jsecurity.session.SessionException var20 = new org.jsecurity.session.SessionException("dd\uFFFD", (java.lang.Throwable)var18, (java.io.Serializable)0);
    org.jsecurity.session.SessionException var21 = new org.jsecurity.session.SessionException("dd\uFFFD", (java.lang.Throwable)var18);
    var13.add((java.lang.Object)var21, "org.jsecurity.config.ConfigurationException: dd\uFFFD");
    var6.onLogout((org.jsecurity.subject.PrincipalCollection)var13);
    java.util.Collection var26 = var13.fromRealm("\u0000\u0000\u0000");
    org.jsecurity.session.mgt.eis.MemorySessionDAO var27 = new org.jsecurity.session.mgt.eis.MemorySessionDAO();
    org.jsecurity.authc.SimpleAuthenticationInfo var28 = new org.jsecurity.authc.SimpleAuthenticationInfo((org.jsecurity.subject.PrincipalCollection)var13, (java.lang.Object)var27);
    org.jsecurity.authz.SimpleAuthorizingAccount var30 = new org.jsecurity.authz.SimpleAuthorizingAccount((java.lang.Object)"ff1bb54d-80f9-4308-a260-ff3ddf1355e9", (java.lang.Object)var27, "330a41fd-f404-4b7f-8f3c-bc52c3f67c3e");
    var30.setCredentialsExpired(false);
    var30.addStringPermission("10f5b491-38ac-4c02-8085-950abb026a06");
    java.util.Collection var35 = var30.getStringPermissions();
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var1);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var8);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var9);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var10);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var26);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var35);

  }

  public void test277() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest5.test277");


    org.jsecurity.mgt.DefaultSecurityManager var0 = new org.jsecurity.mgt.DefaultSecurityManager();
    java.io.InputStream var2 = org.jsecurity.util.ClassUtils.getResourceAsStream("");
    java.lang.Object[] var3 = new java.lang.Object[] { var2};
    java.util.List var4 = org.jsecurity.util.CollectionUtils.asList(var3);
    org.jsecurity.authc.pam.ModularRealmAuthenticator var5 = new org.jsecurity.authc.pam.ModularRealmAuthenticator(var4);
    org.jsecurity.authc.pam.AllSuccessfulModularAuthenticationStrategy var6 = new org.jsecurity.authc.pam.AllSuccessfulModularAuthenticationStrategy();
    var5.setModularAuthenticationStrategy((org.jsecurity.authc.pam.ModularAuthenticationStrategy)var6);
    org.jsecurity.authz.SimpleAuthorizationInfo var8 = new org.jsecurity.authz.SimpleAuthorizationInfo();
    var8.addStringPermission("hi!");
    java.io.InputStream var12 = org.jsecurity.util.ClassUtils.getResourceAsStream("");
    java.lang.Object[] var13 = new java.lang.Object[] { var12};
    java.util.List var14 = org.jsecurity.util.CollectionUtils.asList(var13);
    var8.addRoles((java.util.Collection)var14);
    var5.setAuthenticationListeners((java.util.Collection)var14);
    var0.setSessionListeners((java.util.Collection)var14);
    org.jsecurity.realm.text.TextConfigurationRealm var18 = new org.jsecurity.realm.text.TextConfigurationRealm();
    java.io.InputStream var20 = org.jsecurity.util.ClassUtils.getResourceAsStream("");
    java.lang.Object[] var21 = new java.lang.Object[] { var20};
    java.util.List var22 = org.jsecurity.util.CollectionUtils.asList(var21);
    org.jsecurity.authc.pam.ModularRealmAuthenticator var23 = new org.jsecurity.authc.pam.ModularRealmAuthenticator(var22);
    org.jsecurity.subject.SimplePrincipalCollection var25 = new org.jsecurity.subject.SimplePrincipalCollection((java.util.Collection)var22, "org.jsecurity.authz.UnauthorizedException: org.jsecurity.session.ExpiredSessionException: ");
    org.jsecurity.session.UnknownSessionException var30 = new org.jsecurity.session.UnknownSessionException("dd\uFFFD", (java.io.Serializable)100.0f);
    org.jsecurity.session.SessionException var32 = new org.jsecurity.session.SessionException("dd\uFFFD", (java.lang.Throwable)var30, (java.io.Serializable)0);
    org.jsecurity.session.SessionException var33 = new org.jsecurity.session.SessionException("dd\uFFFD", (java.lang.Throwable)var30);
    var25.add((java.lang.Object)var33, "org.jsecurity.config.ConfigurationException: dd\uFFFD");
    var18.onLogout((org.jsecurity.subject.PrincipalCollection)var25);
    org.jsecurity.authc.pam.FirstSuccessfulAuthenticationStrategy var37 = new org.jsecurity.authc.pam.FirstSuccessfulAuthenticationStrategy();
    org.jsecurity.authz.UnauthorizedException var39 = new org.jsecurity.authz.UnauthorizedException("org.jsecurity.config.ConfigurationException: dd\uFFFD");
    java.lang.Throwable[] var40 = var39.getSuppressed();
    java.util.List var41 = org.jsecurity.util.CollectionUtils.asList((java.lang.Object[])var40);
    org.jsecurity.authc.UsernamePasswordToken var42 = new org.jsecurity.authc.UsernamePasswordToken();
    java.lang.String var43 = var42.getUsername();
    java.net.InetAddress var44 = var42.getInetAddress();
    org.jsecurity.authc.AuthenticationInfo var45 = var37.beforeAllAttempts((java.util.Collection)var41, (org.jsecurity.authc.AuthenticationToken)var42);
    boolean[] var46 = var0.hasRoles((org.jsecurity.subject.PrincipalCollection)var25, var41);
    org.jsecurity.codec.CodecException var49 = new org.jsecurity.codec.CodecException("dd\uFFFD");
    org.jsecurity.authc.ConcurrentAccessException var50 = new org.jsecurity.authc.ConcurrentAccessException("org.jsecurity.authz.UnauthorizedException: org.jsecurity.session.ExpiredSessionException: ", (java.lang.Throwable)var49);
    org.jsecurity.subject.SimplePrincipalCollection var52 = new org.jsecurity.subject.SimplePrincipalCollection((java.lang.Object)var49, "");
    java.io.InputStream var54 = org.jsecurity.util.ClassUtils.getResourceAsStream("");
    java.lang.Object[] var55 = new java.lang.Object[] { var54};
    java.util.List var56 = org.jsecurity.util.CollectionUtils.asList(var55);
    org.jsecurity.authc.pam.ModularRealmAuthenticator var57 = new org.jsecurity.authc.pam.ModularRealmAuthenticator(var56);
    var52.addAll((java.util.Collection)var56, "\u0000\u0000");
    var0.setSessionListeners((java.util.Collection)var56);
    org.jsecurity.subject.RememberMeManager var61 = var0.getRememberMeManager();
    org.jsecurity.subject.Subject var62 = var0.getSubject();
    org.jsecurity.realm.activedirectory.ActiveDirectoryRealm var63 = new org.jsecurity.realm.activedirectory.ActiveDirectoryRealm();
    org.jsecurity.authc.credential.Sha256CredentialsMatcher var64 = new org.jsecurity.authc.credential.Sha256CredentialsMatcher();
    var63.setCredentialsMatcher((org.jsecurity.authc.credential.CredentialsMatcher)var64);
    java.lang.String var66 = var63.getAuthorizationCacheName();
    var63.setPrincipalSuffix("org.jsecurity.config.ConfigurationException: dd\uFFFD");
    org.jsecurity.mgt.DefaultSecurityManager var69 = new org.jsecurity.mgt.DefaultSecurityManager();
    java.io.InputStream var71 = org.jsecurity.util.ClassUtils.getResourceAsStream("");
    java.lang.Object[] var72 = new java.lang.Object[] { var71};
    java.util.List var73 = org.jsecurity.util.CollectionUtils.asList(var72);
    org.jsecurity.authc.pam.ModularRealmAuthenticator var74 = new org.jsecurity.authc.pam.ModularRealmAuthenticator(var73);
    org.jsecurity.authc.pam.AllSuccessfulModularAuthenticationStrategy var75 = new org.jsecurity.authc.pam.AllSuccessfulModularAuthenticationStrategy();
    var74.setModularAuthenticationStrategy((org.jsecurity.authc.pam.ModularAuthenticationStrategy)var75);
    org.jsecurity.authz.SimpleAuthorizationInfo var77 = new org.jsecurity.authz.SimpleAuthorizationInfo();
    var77.addStringPermission("hi!");
    java.io.InputStream var81 = org.jsecurity.util.ClassUtils.getResourceAsStream("");
    java.lang.Object[] var82 = new java.lang.Object[] { var81};
    java.util.List var83 = org.jsecurity.util.CollectionUtils.asList(var82);
    var77.addRoles((java.util.Collection)var83);
    var74.setAuthenticationListeners((java.util.Collection)var83);
    var69.setSessionListeners((java.util.Collection)var83);
    org.jsecurity.subject.Subject var87 = var69.getSubject();
    org.jsecurity.authz.permission.WildcardPermissionResolver var88 = new org.jsecurity.authz.permission.WildcardPermissionResolver();
    var69.setPermissionResolver((org.jsecurity.authz.permission.PermissionResolver)var88);
    var63.setPermissionResolver((org.jsecurity.authz.permission.PermissionResolver)var88);
    var0.setPermissionResolver((org.jsecurity.authz.permission.PermissionResolver)var88);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var2);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var3);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var4);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var12);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var13);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var14);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var20);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var21);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var22);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var40);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var41);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var43);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var44);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var45);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var46);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var54);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var55);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var56);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var61);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var62);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var66);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var71);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var72);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var73);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var81);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var82);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var83);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var87);

  }

  public void test278() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest5.test278");


    boolean var1 = org.jsecurity.util.ClassUtils.isAvailable("58f38fc6-de62-43eb-8a3f-7686b38ede45");
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var1 == false);

  }

  public void test279() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest5.test279");


    org.jsecurity.authc.pam.AllSuccessfulModularAuthenticationStrategy var1 = new org.jsecurity.authc.pam.AllSuccessfulModularAuthenticationStrategy();
    char[] var3 = new char[] { };
    org.jsecurity.authc.UsernamePasswordToken var5 = new org.jsecurity.authc.UsernamePasswordToken("hi!", var3, true);
    org.jsecurity.authc.SimpleAccount var6 = new org.jsecurity.authc.SimpleAccount();
    var6.setCredentialsExpired(false);
    boolean var9 = var6.isLocked();
    org.jsecurity.authc.AuthenticationInfo var10 = var1.afterAllAttempts((org.jsecurity.authc.AuthenticationToken)var5, (org.jsecurity.authc.AuthenticationInfo)var6);
    char[] var13 = new char[] { };
    org.jsecurity.authc.UsernamePasswordToken var15 = new org.jsecurity.authc.UsernamePasswordToken("hi!", var13, true);
    org.jsecurity.authc.UsernamePasswordToken var16 = new org.jsecurity.authc.UsernamePasswordToken("\u0000\u0000", var13);
    java.lang.Object var17 = var16.getPrincipal();
    org.jsecurity.authc.SimpleAccount var18 = new org.jsecurity.authc.SimpleAccount();
    var18.setCredentialsExpired(false);
    var18.setCredentialsExpired(false);
    boolean var23 = var18.isCredentialsExpired();
    org.jsecurity.authc.AuthenticationInfo var24 = var1.afterAllAttempts((org.jsecurity.authc.AuthenticationToken)var16, (org.jsecurity.authc.AuthenticationInfo)var18);
    byte[] var28 = new byte[] { (byte)100, (byte)100, (byte)(-1)};
    java.lang.String var29 = org.jsecurity.codec.CodecSupport.toString(var28);
    byte[] var30 = org.jsecurity.codec.Base64.encode(var28);
    char[] var31 = org.jsecurity.codec.CodecSupport.toChars(var30);
    var16.setPassword(var31);
    org.jsecurity.authc.UsernamePasswordToken var33 = new org.jsecurity.authc.UsernamePasswordToken("601881c1-f6ee-4532-9247-5f67e16209cb", var31);
    java.lang.Object var34 = var33.getCredentials();
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var3);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var9 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var10);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var13);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var17 + "' != '" + "\u0000\u0000"+ "'", var17.equals("\u0000\u0000"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var23 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var24);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var28);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var29 + "' != '" + "dd\uFFFD"+ "'", var29.equals("dd\uFFFD"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var30);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var31);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var34);

  }

  public void test280() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest5.test280");


    org.jsecurity.crypto.hash.Md2Hash var1 = org.jsecurity.crypto.hash.Md2Hash.fromBase64String("a2b823b1e72eae2b727289df8a00a89df8a0bab6ad8a89c4c5c7a9b62a270000");
    org.jsecurity.authc.credential.Md2CredentialsMatcher var2 = new org.jsecurity.authc.credential.Md2CredentialsMatcher();
    org.jsecurity.authz.SimpleAuthorizingAccount var4 = new org.jsecurity.authz.SimpleAuthorizingAccount((java.lang.Object)"a2b823b1e72eae2b727289df8a00a89df8a0bab6ad8a89c4c5c7a9b62a270000", (java.lang.Object)var2, "");
    java.util.Collection var5 = var4.getRoles();
    boolean var7 = var4.hasRole("88340016-ef51-4123-8332-9557d9abe70e");
    boolean var9 = var4.hasRole("be750ca9-d7fd-4bd0-a0ae-e908c938eb8d");
    var4.setCredentialsExpired(true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var1);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var5);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var7 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var9 == false);

  }

  public void test281() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest5.test281");


    java.io.InputStream var1 = org.jsecurity.util.ClassUtils.getResourceAsStream("");
    java.lang.Object[] var2 = new java.lang.Object[] { var1};
    java.util.List var3 = org.jsecurity.util.CollectionUtils.asList(var2);
    org.jsecurity.authc.pam.ModularRealmAuthenticator var4 = new org.jsecurity.authc.pam.ModularRealmAuthenticator(var3);
    org.jsecurity.authc.pam.FirstSuccessfulAuthenticationStrategy var5 = new org.jsecurity.authc.pam.FirstSuccessfulAuthenticationStrategy();
    org.jsecurity.authz.UnauthorizedException var7 = new org.jsecurity.authz.UnauthorizedException("org.jsecurity.config.ConfigurationException: dd\uFFFD");
    java.lang.Throwable[] var8 = var7.getSuppressed();
    java.util.List var9 = org.jsecurity.util.CollectionUtils.asList((java.lang.Object[])var8);
    org.jsecurity.authc.UsernamePasswordToken var10 = new org.jsecurity.authc.UsernamePasswordToken();
    java.lang.String var11 = var10.getUsername();
    java.net.InetAddress var12 = var10.getInetAddress();
    org.jsecurity.authc.AuthenticationInfo var13 = var5.beforeAllAttempts((java.util.Collection)var9, (org.jsecurity.authc.AuthenticationToken)var10);
    org.jsecurity.realm.SimpleAccountRealm var15 = new org.jsecurity.realm.SimpleAccountRealm("hi!");
    java.lang.Class var16 = var15.getAuthenticationTokenClass();
    java.util.Collection var17 = org.jsecurity.util.CollectionUtils.emptyCollection(var16);
    org.jsecurity.authc.pam.AllSuccessfulModularAuthenticationStrategy var18 = new org.jsecurity.authc.pam.AllSuccessfulModularAuthenticationStrategy();
    char[] var20 = new char[] { };
    org.jsecurity.authc.UsernamePasswordToken var22 = new org.jsecurity.authc.UsernamePasswordToken("hi!", var20, true);
    org.jsecurity.authc.SimpleAccount var23 = new org.jsecurity.authc.SimpleAccount();
    var23.setCredentialsExpired(false);
    boolean var26 = var23.isLocked();
    org.jsecurity.authc.AuthenticationInfo var27 = var18.afterAllAttempts((org.jsecurity.authc.AuthenticationToken)var22, (org.jsecurity.authc.AuthenticationInfo)var23);
    org.jsecurity.authc.AuthenticationInfo var28 = var5.beforeAllAttempts(var17, (org.jsecurity.authc.AuthenticationToken)var22);
    var4.setModularAuthenticationStrategy((org.jsecurity.authc.pam.ModularAuthenticationStrategy)var5);
    org.jsecurity.realm.text.TextConfigurationRealm var30 = new org.jsecurity.realm.text.TextConfigurationRealm();
    org.jsecurity.realm.text.TextConfigurationRealm var31 = new org.jsecurity.realm.text.TextConfigurationRealm();
    java.io.InputStream var33 = org.jsecurity.util.ClassUtils.getResourceAsStream("");
    java.lang.Object[] var34 = new java.lang.Object[] { var33};
    java.util.List var35 = org.jsecurity.util.CollectionUtils.asList(var34);
    org.jsecurity.authc.pam.ModularRealmAuthenticator var36 = new org.jsecurity.authc.pam.ModularRealmAuthenticator(var35);
    org.jsecurity.subject.SimplePrincipalCollection var38 = new org.jsecurity.subject.SimplePrincipalCollection((java.util.Collection)var35, "org.jsecurity.authz.UnauthorizedException: org.jsecurity.session.ExpiredSessionException: ");
    org.jsecurity.session.UnknownSessionException var43 = new org.jsecurity.session.UnknownSessionException("dd\uFFFD", (java.io.Serializable)100.0f);
    org.jsecurity.session.SessionException var45 = new org.jsecurity.session.SessionException("dd\uFFFD", (java.lang.Throwable)var43, (java.io.Serializable)0);
    org.jsecurity.session.SessionException var46 = new org.jsecurity.session.SessionException("dd\uFFFD", (java.lang.Throwable)var43);
    var38.add((java.lang.Object)var46, "org.jsecurity.config.ConfigurationException: dd\uFFFD");
    var31.onLogout((org.jsecurity.subject.PrincipalCollection)var38);
    org.jsecurity.cache.HashtableCacheManager var50 = new org.jsecurity.cache.HashtableCacheManager();
    org.jsecurity.cache.Cache var52 = var50.getCache("\u0000\u0000");
    var31.setAuthorizationCache(var52);
    org.jsecurity.codec.CodecException var56 = new org.jsecurity.codec.CodecException("dd\uFFFD");
    org.jsecurity.authc.ConcurrentAccessException var57 = new org.jsecurity.authc.ConcurrentAccessException("org.jsecurity.authz.UnauthorizedException: org.jsecurity.session.ExpiredSessionException: ", (java.lang.Throwable)var56);
    org.jsecurity.subject.SimplePrincipalCollection var59 = new org.jsecurity.subject.SimplePrincipalCollection((java.lang.Object)var56, "");
    var31.onLogout((org.jsecurity.subject.PrincipalCollection)var59);
    var31.setRoleDefinitions("hi!");
    org.jsecurity.authc.pam.AllSuccessfulModularAuthenticationStrategy var63 = new org.jsecurity.authc.pam.AllSuccessfulModularAuthenticationStrategy();
    char[] var65 = new char[] { };
    org.jsecurity.authc.UsernamePasswordToken var67 = new org.jsecurity.authc.UsernamePasswordToken("hi!", var65, true);
    org.jsecurity.authc.SimpleAccount var68 = new org.jsecurity.authc.SimpleAccount();
    var68.setCredentialsExpired(false);
    boolean var71 = var68.isLocked();
    org.jsecurity.authc.AuthenticationInfo var72 = var63.afterAllAttempts((org.jsecurity.authc.AuthenticationToken)var67, (org.jsecurity.authc.AuthenticationInfo)var68);
    boolean var73 = var31.supports((org.jsecurity.authc.AuthenticationToken)var67);
    org.jsecurity.authc.SimpleAccount var74 = new org.jsecurity.authc.SimpleAccount();
    var74.setCredentialsExpired(false);
    org.jsecurity.authc.AuthenticationInfo var77 = var5.beforeAttempt((org.jsecurity.realm.Realm)var30, (org.jsecurity.authc.AuthenticationToken)var67, (org.jsecurity.authc.AuthenticationInfo)var74);
    var67.setRememberMe(false);
    org.jsecurity.session.ExpiredSessionException var80 = new org.jsecurity.session.ExpiredSessionException((java.io.Serializable)var67);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var1);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var2);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var3);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var8);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var9);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var11);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var12);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var13);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var16);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var17);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var20);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var26 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var27);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var28);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var33);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var34);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var35);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var52);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var65);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var71 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var72);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var73 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var77);

  }

  public void test282() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest5.test282");


    org.jsecurity.mgt.DefaultSecurityManager var0 = new org.jsecurity.mgt.DefaultSecurityManager();
    java.io.InputStream var2 = org.jsecurity.util.ClassUtils.getResourceAsStream("");
    java.lang.Object[] var3 = new java.lang.Object[] { var2};
    java.util.List var4 = org.jsecurity.util.CollectionUtils.asList(var3);
    org.jsecurity.authc.pam.ModularRealmAuthenticator var5 = new org.jsecurity.authc.pam.ModularRealmAuthenticator(var4);
    org.jsecurity.authc.pam.AllSuccessfulModularAuthenticationStrategy var6 = new org.jsecurity.authc.pam.AllSuccessfulModularAuthenticationStrategy();
    var5.setModularAuthenticationStrategy((org.jsecurity.authc.pam.ModularAuthenticationStrategy)var6);
    org.jsecurity.authz.SimpleAuthorizationInfo var8 = new org.jsecurity.authz.SimpleAuthorizationInfo();
    var8.addStringPermission("hi!");
    java.io.InputStream var12 = org.jsecurity.util.ClassUtils.getResourceAsStream("");
    java.lang.Object[] var13 = new java.lang.Object[] { var12};
    java.util.List var14 = org.jsecurity.util.CollectionUtils.asList(var13);
    var8.addRoles((java.util.Collection)var14);
    var5.setAuthenticationListeners((java.util.Collection)var14);
    var0.setSessionListeners((java.util.Collection)var14);
    org.jsecurity.authc.pam.ModularRealmAuthenticator var18 = new org.jsecurity.authc.pam.ModularRealmAuthenticator();
    org.jsecurity.authz.permission.InvalidPermissionStringException var21 = new org.jsecurity.authz.permission.InvalidPermissionStringException("", "dd\uFFFD");
    org.jsecurity.JSecurityException var23 = new org.jsecurity.JSecurityException("");
    org.jsecurity.authc.SimpleAuthenticationInfo var25 = new org.jsecurity.authc.SimpleAuthenticationInfo((java.lang.Object)var21, (java.lang.Object)"", "org.jsecurity.authz.UnauthorizedException: org.jsecurity.session.ExpiredSessionException: ");
    org.jsecurity.subject.PrincipalCollection var26 = var25.getPrincipals();
    var18.onLogout(var26);
    var0.setAuthenticator((org.jsecurity.authc.Authenticator)var18);
    org.jsecurity.codec.CodecException var31 = new org.jsecurity.codec.CodecException("dd\uFFFD");
    org.jsecurity.authc.ConcurrentAccessException var32 = new org.jsecurity.authc.ConcurrentAccessException("org.jsecurity.authz.UnauthorizedException: org.jsecurity.session.ExpiredSessionException: ", (java.lang.Throwable)var31);
    org.jsecurity.subject.SimplePrincipalCollection var34 = new org.jsecurity.subject.SimplePrincipalCollection((java.lang.Object)var31, "");
    org.jsecurity.authc.pam.FirstSuccessfulAuthenticationStrategy var35 = new org.jsecurity.authc.pam.FirstSuccessfulAuthenticationStrategy();
    org.jsecurity.authz.UnauthorizedException var37 = new org.jsecurity.authz.UnauthorizedException("org.jsecurity.config.ConfigurationException: dd\uFFFD");
    java.lang.Throwable[] var38 = var37.getSuppressed();
    java.util.List var39 = org.jsecurity.util.CollectionUtils.asList((java.lang.Object[])var38);
    org.jsecurity.authc.UsernamePasswordToken var40 = new org.jsecurity.authc.UsernamePasswordToken();
    java.lang.String var41 = var40.getUsername();
    java.net.InetAddress var42 = var40.getInetAddress();
    org.jsecurity.authc.AuthenticationInfo var43 = var35.beforeAllAttempts((java.util.Collection)var39, (org.jsecurity.authc.AuthenticationToken)var40);
    org.jsecurity.session.UnknownSessionException var48 = new org.jsecurity.session.UnknownSessionException("dd\uFFFD", (java.io.Serializable)100.0f);
    org.jsecurity.subject.SubjectException var49 = new org.jsecurity.subject.SubjectException("dd\uFFFD", (java.lang.Throwable)var48);
    org.jsecurity.io.SerializationException var50 = new org.jsecurity.io.SerializationException("", (java.lang.Throwable)var49);
    java.lang.Throwable[] var51 = var49.getSuppressed();
    java.util.Set var52 = org.jsecurity.util.CollectionUtils.asSet((java.lang.Object[])var51);
    org.jsecurity.authc.SimpleAccount var53 = new org.jsecurity.authc.SimpleAccount((org.jsecurity.subject.PrincipalCollection)var34, (java.lang.Object)var39, var52);
    java.io.InputStream var55 = org.jsecurity.util.ClassUtils.getResourceAsStream("");
    java.lang.Object[] var56 = new java.lang.Object[] { var55};
    java.util.List var57 = org.jsecurity.util.CollectionUtils.asList(var56);
    org.jsecurity.authc.pam.ModularRealmAuthenticator var58 = new org.jsecurity.authc.pam.ModularRealmAuthenticator(var57);
    org.jsecurity.subject.SimplePrincipalCollection var60 = new org.jsecurity.subject.SimplePrincipalCollection((java.util.Collection)var57, "org.jsecurity.authz.UnauthorizedException: org.jsecurity.session.ExpiredSessionException: ");
    org.jsecurity.io.ResourceException var64 = new org.jsecurity.io.ResourceException("hi!");
    org.jsecurity.authc.UnknownAccountException var65 = new org.jsecurity.authc.UnknownAccountException((java.lang.Throwable)var64);
    org.jsecurity.session.StoppedSessionException var66 = new org.jsecurity.session.StoppedSessionException("dd\uFFFD", (java.io.Serializable)var64);
    org.jsecurity.session.UnknownSessionException var67 = new org.jsecurity.session.UnknownSessionException("org.jsecurity.authz.UnauthorizedException: org.jsecurity.session.ExpiredSessionException: ", (java.lang.Throwable)var64);
    boolean var68 = var60.equals((java.lang.Object)var64);
    var34.addAll((org.jsecurity.subject.PrincipalCollection)var60);
    org.jsecurity.session.UnknownSessionException var74 = new org.jsecurity.session.UnknownSessionException("dd\uFFFD", (java.io.Serializable)100.0f);
    org.jsecurity.subject.SubjectException var75 = new org.jsecurity.subject.SubjectException("dd\uFFFD", (java.lang.Throwable)var74);
    org.jsecurity.io.SerializationException var76 = new org.jsecurity.io.SerializationException("", (java.lang.Throwable)var75);
    java.lang.Throwable[] var77 = var75.getSuppressed();
    java.util.List var78 = org.jsecurity.util.CollectionUtils.asList((java.lang.Object[])var77);
    boolean var79 = var0.isPermittedAll((org.jsecurity.subject.PrincipalCollection)var34, (java.util.Collection)var78);
    org.jsecurity.subject.DelegatingSubject var80 = new org.jsecurity.subject.DelegatingSubject((org.jsecurity.mgt.SecurityManager)var0);
    var80.logout();
    java.lang.String[] var86 = org.jsecurity.util.StringUtils.split("org.jsecurity.config.ConfigurationException: dd\uFFFD", '4', '4', '4');
    boolean[] var87 = var80.isPermitted(var86);
    org.jsecurity.mgt.SecurityManager var88 = var80.getSecurityManager();
    org.jsecurity.session.Session var90 = var80.getSession(false);
    java.net.InetAddress var91 = var80.getInetAddress();
    java.lang.String[] var98 = org.jsecurity.util.StringUtils.split("org.jsecurity.config.ConfigurationException: dd\uFFFD", 'a', '#', ' ', true, false);
    boolean[] var99 = var80.isPermitted(var98);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var2);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var3);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var4);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var12);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var13);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var14);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var26);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var38);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var39);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var41);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var42);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var43);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var51);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var52);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var55);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var56);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var57);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var68 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var77);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var78);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var79 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var86);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var87);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var88);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var90);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var91);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var98);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var99);

  }

  public void test283() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest5.test283");


    org.jsecurity.session.mgt.DefaultSessionManager var0 = new org.jsecurity.session.mgt.DefaultSessionManager();
    org.jsecurity.session.mgt.eis.MemorySessionDAO var1 = new org.jsecurity.session.mgt.eis.MemorySessionDAO();
    org.jsecurity.cache.Cache var2 = var1.getActiveSessionsCache();
    org.jsecurity.cache.CacheManager var3 = var1.getCacheManager();
    org.jsecurity.cache.HashtableCacheManager var4 = new org.jsecurity.cache.HashtableCacheManager();
    org.jsecurity.cache.Cache var6 = var4.getCache("\u0000\u0000");
    var1.setActiveSessionsCache(var6);
    java.io.InputStream var9 = org.jsecurity.util.ClassUtils.getResourceAsStream("");
    java.lang.Object[] var10 = new java.lang.Object[] { var9};
    java.util.List var11 = org.jsecurity.util.CollectionUtils.asList(var10);
    org.jsecurity.authc.pam.ModularRealmAuthenticator var12 = new org.jsecurity.authc.pam.ModularRealmAuthenticator(var11);
    org.jsecurity.authc.pam.AllSuccessfulModularAuthenticationStrategy var13 = new org.jsecurity.authc.pam.AllSuccessfulModularAuthenticationStrategy();
    var12.setModularAuthenticationStrategy((org.jsecurity.authc.pam.ModularAuthenticationStrategy)var13);
    org.jsecurity.authz.SimpleAuthorizationInfo var15 = new org.jsecurity.authz.SimpleAuthorizationInfo();
    var15.addStringPermission("hi!");
    java.io.InputStream var19 = org.jsecurity.util.ClassUtils.getResourceAsStream("");
    java.lang.Object[] var20 = new java.lang.Object[] { var19};
    java.util.List var21 = org.jsecurity.util.CollectionUtils.asList(var20);
    var15.addRoles((java.util.Collection)var21);
    var12.setAuthenticationListeners((java.util.Collection)var21);
    org.jsecurity.realm.activedirectory.ActiveDirectoryRealm var24 = new org.jsecurity.realm.activedirectory.ActiveDirectoryRealm();
    var24.setPrincipalSuffix("");
    var12.setRealm((org.jsecurity.realm.Realm)var24);
    org.jsecurity.cache.HashtableCacheManager var28 = new org.jsecurity.cache.HashtableCacheManager();
    org.jsecurity.cache.Cache var30 = var28.getCache("\u0000\u0000");
    var24.setAuthorizationCache(var30);
    var1.setActiveSessionsCache(var30);
    org.jsecurity.session.mgt.SimpleSession var33 = new org.jsecurity.session.mgt.SimpleSession();
    java.io.Serializable var34 = var1.create((org.jsecurity.session.Session)var33);
    var0.setSessionDAO((org.jsecurity.session.mgt.eis.SessionDAO)var1);
    org.jsecurity.authc.pam.AllSuccessfulModularAuthenticationStrategy var36 = new org.jsecurity.authc.pam.AllSuccessfulModularAuthenticationStrategy();
    char[] var38 = new char[] { };
    org.jsecurity.authc.UsernamePasswordToken var40 = new org.jsecurity.authc.UsernamePasswordToken("hi!", var38, true);
    org.jsecurity.authc.SimpleAccount var41 = new org.jsecurity.authc.SimpleAccount();
    var41.setCredentialsExpired(false);
    boolean var44 = var41.isLocked();
    org.jsecurity.authc.AuthenticationInfo var45 = var36.afterAllAttempts((org.jsecurity.authc.AuthenticationToken)var40, (org.jsecurity.authc.AuthenticationInfo)var41);
    char[] var49 = new char[] { '4', '#'};
    org.jsecurity.authc.UsernamePasswordToken var50 = new org.jsecurity.authc.UsernamePasswordToken("\u0000\u0000", var49);
    org.jsecurity.authc.SimpleAccount var51 = new org.jsecurity.authc.SimpleAccount();
    var51.setCredentialsExpired(false);
    var51.setCredentialsExpired(false);
    boolean var56 = var51.isCredentialsExpired();
    org.jsecurity.authc.AuthenticationInfo var57 = var36.afterAllAttempts((org.jsecurity.authc.AuthenticationToken)var50, (org.jsecurity.authc.AuthenticationInfo)var51);
    org.jsecurity.realm.activedirectory.ActiveDirectoryRealm var58 = new org.jsecurity.realm.activedirectory.ActiveDirectoryRealm();
    org.jsecurity.authc.credential.Sha256CredentialsMatcher var59 = new org.jsecurity.authc.credential.Sha256CredentialsMatcher();
    var58.setCredentialsMatcher((org.jsecurity.authc.credential.CredentialsMatcher)var59);
    java.lang.String var61 = var58.getAuthorizationCacheName();
    org.jsecurity.authc.UsernamePasswordToken var62 = new org.jsecurity.authc.UsernamePasswordToken();
    java.lang.String var63 = var62.getUsername();
    java.lang.Object var64 = var62.getPrincipal();
    boolean var65 = var58.supports((org.jsecurity.authc.AuthenticationToken)var62);
    org.jsecurity.session.UnknownSessionException var69 = new org.jsecurity.session.UnknownSessionException("dd\uFFFD", (java.io.Serializable)100.0f);
    org.jsecurity.session.SessionException var71 = new org.jsecurity.session.SessionException("dd\uFFFD", (java.lang.Throwable)var69, (java.io.Serializable)0);
    org.jsecurity.authc.SimpleAuthenticationInfo var74 = new org.jsecurity.authc.SimpleAuthenticationInfo((java.lang.Object)0, (java.lang.Object)10, "hi!");
    java.lang.Object var75 = var74.getCredentials();
    java.lang.String var76 = var74.toString();
    org.jsecurity.authc.AuthenticationInfo var77 = var36.afterAllAttempts((org.jsecurity.authc.AuthenticationToken)var62, (org.jsecurity.authc.AuthenticationInfo)var74);
    org.jsecurity.session.mgt.eis.MemorySessionDAO var78 = new org.jsecurity.session.mgt.eis.MemorySessionDAO();
    org.jsecurity.cache.Cache var79 = var78.getActiveSessionsCache();
    var78.setActiveSessionsCacheName("dd\uFFFD");
    var74.setCredentials((java.lang.Object)var78);
    var0.setSessionDAO((org.jsecurity.session.mgt.eis.SessionDAO)var78);
    org.jsecurity.session.mgt.quartz.QuartzSessionValidationScheduler var84 = new org.jsecurity.session.mgt.quartz.QuartzSessionValidationScheduler();
    var0.setSessionValidationScheduler((org.jsecurity.session.mgt.SessionValidationScheduler)var84);
    org.jsecurity.cache.ehcache.EhCacheManager var86 = new org.jsecurity.cache.ehcache.EhCacheManager();
    net.sf.ehcache.CacheManager var87 = var86.getCacheManager();
    net.sf.ehcache.CacheManager var88 = var86.getCacheManager();
    var0.setCacheManager((org.jsecurity.cache.CacheManager)var86);
    var86.destroy();
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var2);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var3);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var6);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var9);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var10);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var11);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var19);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var20);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var21);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var30);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var34 + "' != '" + "01746f46-2aaf-4497-8c57-bd54976ae8b1"+ "'", var34.equals("01746f46-2aaf-4497-8c57-bd54976ae8b1"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var38);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var44 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var45);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var49);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var56 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var57);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var61);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var63);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var64);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var65 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var75 + "' != '" + 10+ "'", var75.equals(10));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var77);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var79);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var87);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var88);

  }

  public void test284() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest5.test284");


    org.jsecurity.realm.activedirectory.ActiveDirectoryRealm var0 = new org.jsecurity.realm.activedirectory.ActiveDirectoryRealm();
    org.jsecurity.authc.credential.Sha256CredentialsMatcher var1 = new org.jsecurity.authc.credential.Sha256CredentialsMatcher();
    var0.setCredentialsMatcher((org.jsecurity.authc.credential.CredentialsMatcher)var1);
    java.lang.String var3 = var0.getAuthorizationCacheName();
    var0.setUrl("hi!");
    org.jsecurity.realm.ldap.DefaultLdapContextFactory var6 = new org.jsecurity.realm.ldap.DefaultLdapContextFactory();
    var0.setLdapContextFactory((org.jsecurity.realm.ldap.LdapContextFactory)var6);
    var6.setAuthentication("org.jsecurity.authz.UnauthorizedException: org.jsecurity.session.ExpiredSessionException: ");
    var6.setSystemUsername("org.jsecurity.config.ConfigurationException: dd\uFFFD");
    var6.setSystemPassword("orgjsecurityauthcCredentialsException783ccd3148a842dd890fdf885a7baafAA==");
    var6.setSystemUsername("3ea0b55f-199e-4289-aeec-f7716cc7356a");
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var3);

  }

  public void test285() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest5.test285");


    org.jsecurity.mgt.DefaultSecurityManager var0 = new org.jsecurity.mgt.DefaultSecurityManager();
    java.io.InputStream var2 = org.jsecurity.util.ClassUtils.getResourceAsStream("");
    java.lang.Object[] var3 = new java.lang.Object[] { var2};
    java.util.List var4 = org.jsecurity.util.CollectionUtils.asList(var3);
    org.jsecurity.authc.pam.ModularRealmAuthenticator var5 = new org.jsecurity.authc.pam.ModularRealmAuthenticator(var4);
    org.jsecurity.authc.pam.AllSuccessfulModularAuthenticationStrategy var6 = new org.jsecurity.authc.pam.AllSuccessfulModularAuthenticationStrategy();
    var5.setModularAuthenticationStrategy((org.jsecurity.authc.pam.ModularAuthenticationStrategy)var6);
    org.jsecurity.authz.SimpleAuthorizationInfo var8 = new org.jsecurity.authz.SimpleAuthorizationInfo();
    var8.addStringPermission("hi!");
    java.io.InputStream var12 = org.jsecurity.util.ClassUtils.getResourceAsStream("");
    java.lang.Object[] var13 = new java.lang.Object[] { var12};
    java.util.List var14 = org.jsecurity.util.CollectionUtils.asList(var13);
    var8.addRoles((java.util.Collection)var14);
    var5.setAuthenticationListeners((java.util.Collection)var14);
    var0.setSessionListeners((java.util.Collection)var14);
    org.jsecurity.authc.Authenticator var18 = var0.getAuthenticator();
    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      var0.setRememberMeEncryptionCipherKeyBase64("b155daf6-3160-49d2-aff0-691a5ba6f4ae");
      fail("Expected exception of type java.lang.IllegalStateException");
    } catch (java.lang.IllegalStateException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var2);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var3);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var4);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var12);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var13);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var14);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var18);

  }

  public void test286() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest5.test286");


    org.jsecurity.session.mgt.eis.MemorySessionDAO var0 = new org.jsecurity.session.mgt.eis.MemorySessionDAO();
    org.jsecurity.cache.Cache var1 = var0.getActiveSessionsCache();
    org.jsecurity.cache.CacheManager var2 = var0.getCacheManager();
    org.jsecurity.cache.HashtableCacheManager var3 = new org.jsecurity.cache.HashtableCacheManager();
    org.jsecurity.cache.Cache var5 = var3.getCache("\u0000\u0000");
    var0.setActiveSessionsCache(var5);
    java.io.InputStream var8 = org.jsecurity.util.ClassUtils.getResourceAsStream("");
    java.lang.Object[] var9 = new java.lang.Object[] { var8};
    java.util.List var10 = org.jsecurity.util.CollectionUtils.asList(var9);
    org.jsecurity.authc.pam.ModularRealmAuthenticator var11 = new org.jsecurity.authc.pam.ModularRealmAuthenticator(var10);
    org.jsecurity.authc.pam.AllSuccessfulModularAuthenticationStrategy var12 = new org.jsecurity.authc.pam.AllSuccessfulModularAuthenticationStrategy();
    var11.setModularAuthenticationStrategy((org.jsecurity.authc.pam.ModularAuthenticationStrategy)var12);
    org.jsecurity.authz.SimpleAuthorizationInfo var14 = new org.jsecurity.authz.SimpleAuthorizationInfo();
    var14.addStringPermission("hi!");
    java.io.InputStream var18 = org.jsecurity.util.ClassUtils.getResourceAsStream("");
    java.lang.Object[] var19 = new java.lang.Object[] { var18};
    java.util.List var20 = org.jsecurity.util.CollectionUtils.asList(var19);
    var14.addRoles((java.util.Collection)var20);
    var11.setAuthenticationListeners((java.util.Collection)var20);
    org.jsecurity.realm.activedirectory.ActiveDirectoryRealm var23 = new org.jsecurity.realm.activedirectory.ActiveDirectoryRealm();
    var23.setPrincipalSuffix("");
    var11.setRealm((org.jsecurity.realm.Realm)var23);
    org.jsecurity.cache.HashtableCacheManager var27 = new org.jsecurity.cache.HashtableCacheManager();
    org.jsecurity.cache.Cache var29 = var27.getCache("\u0000\u0000");
    var23.setAuthorizationCache(var29);
    var0.setActiveSessionsCache(var29);
    org.jsecurity.session.mgt.DefaultSessionManager var32 = new org.jsecurity.session.mgt.DefaultSessionManager();
    org.jsecurity.session.mgt.eis.MemorySessionDAO var33 = new org.jsecurity.session.mgt.eis.MemorySessionDAO();
    org.jsecurity.cache.Cache var34 = var33.getActiveSessionsCache();
    org.jsecurity.cache.CacheManager var35 = var33.getCacheManager();
    org.jsecurity.cache.HashtableCacheManager var36 = new org.jsecurity.cache.HashtableCacheManager();
    org.jsecurity.cache.Cache var38 = var36.getCache("\u0000\u0000");
    var33.setActiveSessionsCache(var38);
    java.io.InputStream var41 = org.jsecurity.util.ClassUtils.getResourceAsStream("");
    java.lang.Object[] var42 = new java.lang.Object[] { var41};
    java.util.List var43 = org.jsecurity.util.CollectionUtils.asList(var42);
    org.jsecurity.authc.pam.ModularRealmAuthenticator var44 = new org.jsecurity.authc.pam.ModularRealmAuthenticator(var43);
    org.jsecurity.authc.pam.AllSuccessfulModularAuthenticationStrategy var45 = new org.jsecurity.authc.pam.AllSuccessfulModularAuthenticationStrategy();
    var44.setModularAuthenticationStrategy((org.jsecurity.authc.pam.ModularAuthenticationStrategy)var45);
    org.jsecurity.authz.SimpleAuthorizationInfo var47 = new org.jsecurity.authz.SimpleAuthorizationInfo();
    var47.addStringPermission("hi!");
    java.io.InputStream var51 = org.jsecurity.util.ClassUtils.getResourceAsStream("");
    java.lang.Object[] var52 = new java.lang.Object[] { var51};
    java.util.List var53 = org.jsecurity.util.CollectionUtils.asList(var52);
    var47.addRoles((java.util.Collection)var53);
    var44.setAuthenticationListeners((java.util.Collection)var53);
    org.jsecurity.realm.activedirectory.ActiveDirectoryRealm var56 = new org.jsecurity.realm.activedirectory.ActiveDirectoryRealm();
    var56.setPrincipalSuffix("");
    var44.setRealm((org.jsecurity.realm.Realm)var56);
    org.jsecurity.cache.HashtableCacheManager var60 = new org.jsecurity.cache.HashtableCacheManager();
    org.jsecurity.cache.Cache var62 = var60.getCache("\u0000\u0000");
    var56.setAuthorizationCache(var62);
    var33.setActiveSessionsCache(var62);
    org.jsecurity.session.mgt.SimpleSession var65 = new org.jsecurity.session.mgt.SimpleSession();
    java.io.Serializable var66 = var33.create((org.jsecurity.session.Session)var65);
    var32.setSessionDAO((org.jsecurity.session.mgt.eis.SessionDAO)var33);
    org.jsecurity.cache.ehcache.EhCacheManager var68 = new org.jsecurity.cache.ehcache.EhCacheManager();
    net.sf.ehcache.CacheManager var69 = var68.getCacheManager();
    var68.destroy();
    java.lang.String var71 = var68.getCacheManagerConfigFile();
    java.lang.String var72 = var68.getCacheManagerConfigFile();
    var32.setCacheManager((org.jsecurity.cache.CacheManager)var68);
    var0.setCacheManager((org.jsecurity.cache.CacheManager)var68);
    org.jsecurity.cache.ehcache.EhCacheManager var75 = new org.jsecurity.cache.ehcache.EhCacheManager();
    var75.init();
    var75.setCacheManagerConfigFile("b6a77f71-73c4-466a-903e-72fc5968f9ac");
    net.sf.ehcache.CacheManager var79 = var75.getCacheManager();
    var68.setCacheManager(var79);
    net.sf.ehcache.CacheManager var81 = var68.getCacheManager();
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var1);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var2);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var5);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var8);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var9);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var10);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var18);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var19);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var20);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var29);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var34);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var35);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var38);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var41);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var42);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var43);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var51);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var52);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var53);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var62);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var66 + "' != '" + "c3e3a4ec-562a-4afb-8e51-7ec417f22d53"+ "'", var66.equals("c3e3a4ec-562a-4afb-8e51-7ec417f22d53"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var69);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var71 + "' != '" + "classpath:org/jsecurity/cache/ehcache/ehcache.xml"+ "'", var71.equals("classpath:org/jsecurity/cache/ehcache/ehcache.xml"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var72 + "' != '" + "classpath:org/jsecurity/cache/ehcache/ehcache.xml"+ "'", var72.equals("classpath:org/jsecurity/cache/ehcache/ehcache.xml"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var79);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var81);

  }

  public void test287() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest5.test287");


    java.io.InputStream var1 = org.jsecurity.util.ClassUtils.getResourceAsStream("1dab21b5a6e578269c85ee5d77473ae5dd78db6e3d7366de71bf5ef1d71aeb5f5a0000");
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var1);

  }

  public void test288() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest5.test288");


    org.jsecurity.realm.text.TextConfigurationRealm var0 = new org.jsecurity.realm.text.TextConfigurationRealm();
    java.io.InputStream var2 = org.jsecurity.util.ClassUtils.getResourceAsStream("");
    java.lang.Object[] var3 = new java.lang.Object[] { var2};
    java.util.List var4 = org.jsecurity.util.CollectionUtils.asList(var3);
    org.jsecurity.authc.pam.ModularRealmAuthenticator var5 = new org.jsecurity.authc.pam.ModularRealmAuthenticator(var4);
    org.jsecurity.subject.SimplePrincipalCollection var7 = new org.jsecurity.subject.SimplePrincipalCollection((java.util.Collection)var4, "org.jsecurity.authz.UnauthorizedException: org.jsecurity.session.ExpiredSessionException: ");
    org.jsecurity.session.UnknownSessionException var12 = new org.jsecurity.session.UnknownSessionException("dd\uFFFD", (java.io.Serializable)100.0f);
    org.jsecurity.session.SessionException var14 = new org.jsecurity.session.SessionException("dd\uFFFD", (java.lang.Throwable)var12, (java.io.Serializable)0);
    org.jsecurity.session.SessionException var15 = new org.jsecurity.session.SessionException("dd\uFFFD", (java.lang.Throwable)var12);
    var7.add((java.lang.Object)var15, "org.jsecurity.config.ConfigurationException: dd\uFFFD");
    var0.onLogout((org.jsecurity.subject.PrincipalCollection)var7);
    byte[] var21 = org.jsecurity.codec.Base64.decode("hi!");
    org.jsecurity.authc.CredentialsException var23 = new org.jsecurity.authc.CredentialsException("org.jsecurity.authz.UnauthorizedException: org.jsecurity.session.ExpiredSessionException: ");
    org.jsecurity.authc.SimpleAuthenticationInfo var25 = new org.jsecurity.authc.SimpleAuthenticationInfo((java.lang.Object)"hi!", (java.lang.Object)var23, "org.jsecurity.config.ConfigurationException: dd\uFFFD");
    org.jsecurity.session.SessionException var26 = new org.jsecurity.session.SessionException("a2b823b1e72eae2b727289df8a00a89df8a0bab6ad8a89c4c5c7a9b62a270000", (java.io.Serializable)"org.jsecurity.config.ConfigurationException: dd\uFFFD");
    org.jsecurity.authc.SimpleAccount var28 = new org.jsecurity.authc.SimpleAccount((java.lang.Object)var0, (java.lang.Object)"a2b823b1e72eae2b727289df8a00a89df8a0bab6ad8a89c4c5c7a9b62a270000", "7edc3e5f-37f7-4a22-9779-4609545bccd8");
    java.lang.String var29 = var0.getUserDefinitions();
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var2);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var3);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var4);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var21);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var29);

  }

  public void test289() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest5.test289");


    org.jsecurity.config.IniConfiguration var0 = new org.jsecurity.config.IniConfiguration();
    var0.init();
    java.lang.String var2 = var0.getConfig();
    var0.init();
    org.jsecurity.mgt.SecurityManager var4 = var0.getSecurityManager();
    org.jsecurity.subject.DelegatingSubject var5 = new org.jsecurity.subject.DelegatingSubject(var4);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var2);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var4);

  }

  public void test290() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest5.test290");


    org.jsecurity.session.UnknownSessionException var3 = new org.jsecurity.session.UnknownSessionException("dd\uFFFD", (java.io.Serializable)100.0f);
    org.jsecurity.session.SessionException var5 = new org.jsecurity.session.SessionException("dd\uFFFD", (java.lang.Throwable)var3, (java.io.Serializable)0);
    org.jsecurity.authc.SimpleAuthenticationInfo var8 = new org.jsecurity.authc.SimpleAuthenticationInfo((java.lang.Object)0, (java.lang.Object)10, "hi!");
    java.lang.Object var9 = var8.getCredentials();
    org.jsecurity.authc.ExpiredCredentialsException var11 = new org.jsecurity.authc.ExpiredCredentialsException();
    org.jsecurity.session.ExpiredSessionException var12 = new org.jsecurity.session.ExpiredSessionException("", (java.lang.Throwable)var11);
    org.jsecurity.authz.UnauthorizedException var13 = new org.jsecurity.authz.UnauthorizedException((java.lang.Throwable)var12);
    var8.setCredentials((java.lang.Object)var12);
    org.jsecurity.session.UnknownSessionException var20 = new org.jsecurity.session.UnknownSessionException("dd\uFFFD", (java.io.Serializable)100.0f);
    org.jsecurity.subject.SubjectException var21 = new org.jsecurity.subject.SubjectException("dd\uFFFD", (java.lang.Throwable)var20);
    org.jsecurity.authc.AccountException var22 = new org.jsecurity.authc.AccountException("hi!", (java.lang.Throwable)var21);
    org.jsecurity.session.StoppedSessionException var23 = new org.jsecurity.session.StoppedSessionException((java.lang.Throwable)var22);
    org.jsecurity.subject.SubjectException var24 = new org.jsecurity.subject.SubjectException("d90d1304-1255-46dc-afba-b0683de3c88c", (java.lang.Throwable)var23);
    var8.setCredentials((java.lang.Object)var24);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var9 + "' != '" + 10+ "'", var9.equals(10));

  }

  public void test291() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest5.test291");


    org.jsecurity.codec.CodecException var2 = new org.jsecurity.codec.CodecException("dd\uFFFD");
    org.jsecurity.authc.ConcurrentAccessException var3 = new org.jsecurity.authc.ConcurrentAccessException("org.jsecurity.authz.UnauthorizedException: org.jsecurity.session.ExpiredSessionException: ", (java.lang.Throwable)var2);
    org.jsecurity.subject.SimplePrincipalCollection var5 = new org.jsecurity.subject.SimplePrincipalCollection((java.lang.Object)var2, "");
    char[] var9 = new char[] { };
    org.jsecurity.authc.UsernamePasswordToken var11 = new org.jsecurity.authc.UsernamePasswordToken("hi!", var9, true);
    org.jsecurity.authc.UsernamePasswordToken var12 = new org.jsecurity.authc.UsernamePasswordToken("\u0000\u0000", var9);
    org.jsecurity.session.mgt.SimpleSession var13 = new org.jsecurity.session.mgt.SimpleSession();
    var13.setTimeout((-1L));
    org.jsecurity.session.mgt.SimpleSession var16 = new org.jsecurity.session.mgt.SimpleSession();
    java.util.Date var17 = var16.getLastAccessTime();
    var13.setLastAccessTime(var17);
    java.net.InetAddress var19 = var13.getHostAddress();
    var12.setInetAddress(var19);
    org.jsecurity.session.mgt.SimpleSession var21 = new org.jsecurity.session.mgt.SimpleSession();
    var21.setTimeout((-1L));
    org.jsecurity.session.mgt.SimpleSession var24 = new org.jsecurity.session.mgt.SimpleSession();
    java.util.Date var25 = var24.getLastAccessTime();
    var21.setLastAccessTime(var25);
    org.jsecurity.session.mgt.SimpleSession var27 = new org.jsecurity.session.mgt.SimpleSession();
    java.util.Date var28 = var27.getLastAccessTime();
    var21.setStopTimestamp(var28);
    org.jsecurity.mgt.DefaultSecurityManager var30 = new org.jsecurity.mgt.DefaultSecurityManager();
    org.jsecurity.authc.pam.AllSuccessfulModularAuthenticationStrategy var31 = new org.jsecurity.authc.pam.AllSuccessfulModularAuthenticationStrategy();
    org.jsecurity.authc.pam.AllSuccessfulModularAuthenticationStrategy var32 = new org.jsecurity.authc.pam.AllSuccessfulModularAuthenticationStrategy();
    char[] var34 = new char[] { };
    org.jsecurity.authc.UsernamePasswordToken var36 = new org.jsecurity.authc.UsernamePasswordToken("hi!", var34, true);
    org.jsecurity.authc.SimpleAccount var37 = new org.jsecurity.authc.SimpleAccount();
    var37.setCredentialsExpired(false);
    boolean var40 = var37.isLocked();
    org.jsecurity.authc.AuthenticationInfo var41 = var32.afterAllAttempts((org.jsecurity.authc.AuthenticationToken)var36, (org.jsecurity.authc.AuthenticationInfo)var37);
    char[] var45 = new char[] { '4', '#'};
    org.jsecurity.authc.UsernamePasswordToken var46 = new org.jsecurity.authc.UsernamePasswordToken("\u0000\u0000", var45);
    org.jsecurity.authc.SimpleAccount var47 = new org.jsecurity.authc.SimpleAccount();
    var47.setCredentialsExpired(false);
    var47.setCredentialsExpired(false);
    boolean var52 = var47.isCredentialsExpired();
    org.jsecurity.authc.AuthenticationInfo var53 = var32.afterAllAttempts((org.jsecurity.authc.AuthenticationToken)var46, (org.jsecurity.authc.AuthenticationInfo)var47);
    org.jsecurity.authz.UnauthenticatedException var57 = new org.jsecurity.authz.UnauthenticatedException();
    org.jsecurity.config.UnresolveableReferenceException var58 = new org.jsecurity.config.UnresolveableReferenceException("", (java.lang.Throwable)var57);
    org.jsecurity.cache.CacheException var59 = new org.jsecurity.cache.CacheException("org.jsecurity.config.ConfigurationException: dd\uFFFD", (java.lang.Throwable)var57);
    org.jsecurity.authc.SimpleAuthenticationInfo var61 = new org.jsecurity.authc.SimpleAuthenticationInfo((java.lang.Object)"org.jsecurity.config.ConfigurationException: dd\uFFFD", (java.lang.Object)var59, "a2b823b1e72eae2b727289df8a00a89df8a0bab6ad8a89c4c5c7a9b62a270000");
    org.jsecurity.subject.PrincipalCollection var62 = var61.getPrincipals();
    org.jsecurity.authc.AuthenticationInfo var63 = var31.afterAllAttempts((org.jsecurity.authc.AuthenticationToken)var46, (org.jsecurity.authc.AuthenticationInfo)var61);
    var30.setModularAuthenticationStrategy((org.jsecurity.authc.pam.ModularAuthenticationStrategy)var31);
    org.jsecurity.subject.RememberMeManager var65 = var30.getRememberMeManager();
    org.jsecurity.authc.pam.ModularRealmAuthenticator var66 = new org.jsecurity.authc.pam.ModularRealmAuthenticator();
    var30.setAuthenticator((org.jsecurity.authc.Authenticator)var66);
    org.jsecurity.codec.CodecException var70 = new org.jsecurity.codec.CodecException("dd\uFFFD");
    org.jsecurity.authc.ConcurrentAccessException var71 = new org.jsecurity.authc.ConcurrentAccessException("org.jsecurity.authz.UnauthorizedException: org.jsecurity.session.ExpiredSessionException: ", (java.lang.Throwable)var70);
    org.jsecurity.subject.SimplePrincipalCollection var73 = new org.jsecurity.subject.SimplePrincipalCollection((java.lang.Object)var70, "");
    java.io.InputStream var75 = org.jsecurity.util.ClassUtils.getResourceAsStream("");
    java.lang.Object[] var76 = new java.lang.Object[] { var75};
    java.util.List var77 = org.jsecurity.util.CollectionUtils.asList(var76);
    org.jsecurity.authc.pam.ModularRealmAuthenticator var78 = new org.jsecurity.authc.pam.ModularRealmAuthenticator(var77);
    var73.addAll((java.util.Collection)var77, "\u0000\u0000");
    org.jsecurity.authc.pam.FirstSuccessfulAuthenticationStrategy var81 = new org.jsecurity.authc.pam.FirstSuccessfulAuthenticationStrategy();
    org.jsecurity.authz.UnauthorizedException var83 = new org.jsecurity.authz.UnauthorizedException("org.jsecurity.config.ConfigurationException: dd\uFFFD");
    java.lang.Throwable[] var84 = var83.getSuppressed();
    java.util.List var85 = org.jsecurity.util.CollectionUtils.asList((java.lang.Object[])var84);
    org.jsecurity.authc.UsernamePasswordToken var86 = new org.jsecurity.authc.UsernamePasswordToken();
    java.lang.String var87 = var86.getUsername();
    java.net.InetAddress var88 = var86.getInetAddress();
    org.jsecurity.authc.AuthenticationInfo var89 = var81.beforeAllAttempts((java.util.Collection)var85, (org.jsecurity.authc.AuthenticationToken)var86);
    var30.checkPermissions((org.jsecurity.subject.PrincipalCollection)var73, (java.util.Collection)var85);
    org.jsecurity.subject.DelegatingSubject var91 = new org.jsecurity.subject.DelegatingSubject((org.jsecurity.subject.PrincipalCollection)var5, false, var19, (org.jsecurity.session.Session)var21, (org.jsecurity.mgt.SecurityManager)var30);
    var91.logout();
    boolean var94 = var91.isPermitted("c88beeba-81c4-4196-82b6-97784ab62fef");
    org.jsecurity.subject.PrincipalCollection var95 = var91.getPrincipals();
    org.jsecurity.subject.PrincipalCollection var96 = var91.getPrincipals();
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var9);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var17);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var19);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var25);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var28);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var34);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var40 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var41);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var45);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var52 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var53);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var62);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var63);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var65);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var75);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var76);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var77);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var84);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var85);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var87);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var88);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var89);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var94 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var95);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var96);

  }

  public void test292() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest5.test292");


    java.lang.String[] var4 = org.jsecurity.util.StringUtils.tokenizeToStringArray("HashtableCache [5dd0c65d-1422-49c2-becb-9e8dca619ab3]", "93defbd7-2595-4ab1-aeeb-162b104abca2", false, false);
    java.util.Set var5 = org.jsecurity.util.CollectionUtils.asSet((java.lang.Object[])var4);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var4);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var5);

  }

  public void test293() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest5.test293");


    org.jsecurity.mgt.DefaultSecurityManager var0 = new org.jsecurity.mgt.DefaultSecurityManager();
    java.io.InputStream var2 = org.jsecurity.util.ClassUtils.getResourceAsStream("");
    java.lang.Object[] var3 = new java.lang.Object[] { var2};
    java.util.List var4 = org.jsecurity.util.CollectionUtils.asList(var3);
    org.jsecurity.authc.pam.ModularRealmAuthenticator var5 = new org.jsecurity.authc.pam.ModularRealmAuthenticator(var4);
    org.jsecurity.authc.pam.AllSuccessfulModularAuthenticationStrategy var6 = new org.jsecurity.authc.pam.AllSuccessfulModularAuthenticationStrategy();
    var5.setModularAuthenticationStrategy((org.jsecurity.authc.pam.ModularAuthenticationStrategy)var6);
    org.jsecurity.authz.SimpleAuthorizationInfo var8 = new org.jsecurity.authz.SimpleAuthorizationInfo();
    var8.addStringPermission("hi!");
    java.io.InputStream var12 = org.jsecurity.util.ClassUtils.getResourceAsStream("");
    java.lang.Object[] var13 = new java.lang.Object[] { var12};
    java.util.List var14 = org.jsecurity.util.CollectionUtils.asList(var13);
    var8.addRoles((java.util.Collection)var14);
    var5.setAuthenticationListeners((java.util.Collection)var14);
    var0.setSessionListeners((java.util.Collection)var14);
    org.jsecurity.realm.text.TextConfigurationRealm var18 = new org.jsecurity.realm.text.TextConfigurationRealm();
    java.io.InputStream var20 = org.jsecurity.util.ClassUtils.getResourceAsStream("");
    java.lang.Object[] var21 = new java.lang.Object[] { var20};
    java.util.List var22 = org.jsecurity.util.CollectionUtils.asList(var21);
    org.jsecurity.authc.pam.ModularRealmAuthenticator var23 = new org.jsecurity.authc.pam.ModularRealmAuthenticator(var22);
    org.jsecurity.subject.SimplePrincipalCollection var25 = new org.jsecurity.subject.SimplePrincipalCollection((java.util.Collection)var22, "org.jsecurity.authz.UnauthorizedException: org.jsecurity.session.ExpiredSessionException: ");
    org.jsecurity.session.UnknownSessionException var30 = new org.jsecurity.session.UnknownSessionException("dd\uFFFD", (java.io.Serializable)100.0f);
    org.jsecurity.session.SessionException var32 = new org.jsecurity.session.SessionException("dd\uFFFD", (java.lang.Throwable)var30, (java.io.Serializable)0);
    org.jsecurity.session.SessionException var33 = new org.jsecurity.session.SessionException("dd\uFFFD", (java.lang.Throwable)var30);
    var25.add((java.lang.Object)var33, "org.jsecurity.config.ConfigurationException: dd\uFFFD");
    var18.onLogout((org.jsecurity.subject.PrincipalCollection)var25);
    org.jsecurity.authc.pam.FirstSuccessfulAuthenticationStrategy var37 = new org.jsecurity.authc.pam.FirstSuccessfulAuthenticationStrategy();
    org.jsecurity.authz.UnauthorizedException var39 = new org.jsecurity.authz.UnauthorizedException("org.jsecurity.config.ConfigurationException: dd\uFFFD");
    java.lang.Throwable[] var40 = var39.getSuppressed();
    java.util.List var41 = org.jsecurity.util.CollectionUtils.asList((java.lang.Object[])var40);
    org.jsecurity.authc.UsernamePasswordToken var42 = new org.jsecurity.authc.UsernamePasswordToken();
    java.lang.String var43 = var42.getUsername();
    java.net.InetAddress var44 = var42.getInetAddress();
    org.jsecurity.authc.AuthenticationInfo var45 = var37.beforeAllAttempts((java.util.Collection)var41, (org.jsecurity.authc.AuthenticationToken)var42);
    boolean[] var46 = var0.hasRoles((org.jsecurity.subject.PrincipalCollection)var25, var41);
    org.jsecurity.authz.permission.WildcardPermissionResolver var47 = new org.jsecurity.authz.permission.WildcardPermissionResolver();
    org.jsecurity.authz.Permission var49 = var47.resolvePermission("hi!");
    org.jsecurity.authz.Permission var51 = var47.resolvePermission("hi!");
    var0.setPermissionResolver((org.jsecurity.authz.permission.PermissionResolver)var47);
    org.jsecurity.session.mgt.DefaultSessionManager var53 = new org.jsecurity.session.mgt.DefaultSessionManager();
    org.jsecurity.mgt.DefaultSecurityManager var54 = new org.jsecurity.mgt.DefaultSecurityManager();
    org.jsecurity.authz.permission.WildcardPermissionResolver var55 = new org.jsecurity.authz.permission.WildcardPermissionResolver();
    var54.setPermissionResolver((org.jsecurity.authz.permission.PermissionResolver)var55);
    org.jsecurity.cache.CacheManager var57 = var54.getCacheManager();
    var53.setCacheManager(var57);
    long var59 = var53.getSessionValidationInterval();
    boolean var60 = var53.isSessionValidationSchedulerEnabled();
    var0.setSessionManager((org.jsecurity.session.mgt.SessionManager)var53);
    org.jsecurity.session.mgt.DelegatingSession var63 = new org.jsecurity.session.mgt.DelegatingSession((org.jsecurity.session.mgt.SessionManager)var53, (java.io.Serializable)"classpath:org/jsecurity/cache/ehcache/ehcache.xml");
    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      java.util.Date var64 = var63.getLastAccessTime();
      fail("Expected exception of type org.jsecurity.session.UnknownSessionException");
    } catch (org.jsecurity.session.UnknownSessionException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var2);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var3);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var4);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var12);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var13);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var14);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var20);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var21);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var22);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var40);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var41);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var43);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var44);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var45);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var46);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var49);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var51);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var57);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var59 == 3600000L);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var60 == true);

  }

  public void test294() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest5.test294");


    org.jsecurity.session.InvalidSessionException var1 = new org.jsecurity.session.InvalidSessionException("e412c0ee-8551-437c-8e9b-69e2bddd1700");

  }

  public void test295() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest5.test295");


    org.jsecurity.config.IniConfiguration var0 = new org.jsecurity.config.IniConfiguration();
    var0.init();
    java.lang.String var2 = var0.getConfig();
    org.jsecurity.mgt.SecurityManager var3 = var0.getSecurityManager();
    org.jsecurity.mgt.SecurityManager var4 = var0.getSecurityManager();
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var2);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var3);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var4);

  }

  public void test296() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest5.test296");


    org.jsecurity.authz.SimpleAuthorizingAccount var1 = new org.jsecurity.authz.SimpleAuthorizingAccount();
    org.jsecurity.authz.SimpleRole var3 = new org.jsecurity.authz.SimpleRole();
    org.jsecurity.authz.permission.WildcardPermission var6 = new org.jsecurity.authz.permission.WildcardPermission("hi!", false);
    boolean var7 = var3.isPermitted((org.jsecurity.authz.Permission)var6);
    org.jsecurity.session.InvalidSessionException var8 = new org.jsecurity.session.InvalidSessionException("org.jsecurity.config.ConfigurationException: dd\uFFFD", (java.io.Serializable)var6);
    org.jsecurity.codec.CodecException var11 = new org.jsecurity.codec.CodecException("dd\uFFFD");
    org.jsecurity.authc.ConcurrentAccessException var12 = new org.jsecurity.authc.ConcurrentAccessException("org.jsecurity.authz.UnauthorizedException: org.jsecurity.session.ExpiredSessionException: ", (java.lang.Throwable)var11);
    org.jsecurity.subject.SimplePrincipalCollection var14 = new org.jsecurity.subject.SimplePrincipalCollection((java.lang.Object)var11, "");
    org.jsecurity.authc.pam.FirstSuccessfulAuthenticationStrategy var15 = new org.jsecurity.authc.pam.FirstSuccessfulAuthenticationStrategy();
    org.jsecurity.authz.UnauthorizedException var17 = new org.jsecurity.authz.UnauthorizedException("org.jsecurity.config.ConfigurationException: dd\uFFFD");
    java.lang.Throwable[] var18 = var17.getSuppressed();
    java.util.List var19 = org.jsecurity.util.CollectionUtils.asList((java.lang.Object[])var18);
    org.jsecurity.authc.UsernamePasswordToken var20 = new org.jsecurity.authc.UsernamePasswordToken();
    java.lang.String var21 = var20.getUsername();
    java.net.InetAddress var22 = var20.getInetAddress();
    org.jsecurity.authc.AuthenticationInfo var23 = var15.beforeAllAttempts((java.util.Collection)var19, (org.jsecurity.authc.AuthenticationToken)var20);
    org.jsecurity.session.UnknownSessionException var28 = new org.jsecurity.session.UnknownSessionException("dd\uFFFD", (java.io.Serializable)100.0f);
    org.jsecurity.subject.SubjectException var29 = new org.jsecurity.subject.SubjectException("dd\uFFFD", (java.lang.Throwable)var28);
    org.jsecurity.io.SerializationException var30 = new org.jsecurity.io.SerializationException("", (java.lang.Throwable)var29);
    java.lang.Throwable[] var31 = var29.getSuppressed();
    java.util.Set var32 = org.jsecurity.util.CollectionUtils.asSet((java.lang.Object[])var31);
    org.jsecurity.authc.SimpleAccount var33 = new org.jsecurity.authc.SimpleAccount((org.jsecurity.subject.PrincipalCollection)var14, (java.lang.Object)var19, var32);
    var33.addStringPermission("org.jsecurity.config.ConfigurationException: dd\uFFFD");
    org.jsecurity.authz.SimpleRole var36 = new org.jsecurity.authz.SimpleRole();
    org.jsecurity.authz.permission.WildcardPermission var39 = new org.jsecurity.authz.permission.WildcardPermission("hi!", false);
    boolean var40 = var36.isPermitted((org.jsecurity.authz.Permission)var39);
    var33.addObjectPermission((org.jsecurity.authz.Permission)var39);
    boolean var42 = var6.implies((org.jsecurity.authz.Permission)var39);
    boolean var43 = var1.isPermitted((org.jsecurity.authz.Permission)var39);
    java.util.Set var44 = var1.getSimpleRoles();
    var1.addRole("944eaa9e-a16a-40cf-bdfa-a6f7f9bf6e53");
    java.util.Set var47 = var1.getSimpleRoles();
    org.jsecurity.authz.SimpleRole var48 = new org.jsecurity.authz.SimpleRole("eea6d09b-519f-41aa-95c1-fb38ae599f45", var47);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var7 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var18);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var19);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var21);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var22);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var23);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var31);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var32);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var40 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var42 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var43 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var44);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var47);

  }

  public void test297() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest5.test297");


    org.jsecurity.codec.CodecException var2 = new org.jsecurity.codec.CodecException("dd\uFFFD");
    org.jsecurity.authc.ConcurrentAccessException var3 = new org.jsecurity.authc.ConcurrentAccessException("org.jsecurity.authz.UnauthorizedException: org.jsecurity.session.ExpiredSessionException: ", (java.lang.Throwable)var2);
    org.jsecurity.subject.SimplePrincipalCollection var5 = new org.jsecurity.subject.SimplePrincipalCollection((java.lang.Object)var2, "");
    char[] var9 = new char[] { };
    org.jsecurity.authc.UsernamePasswordToken var11 = new org.jsecurity.authc.UsernamePasswordToken("hi!", var9, true);
    org.jsecurity.authc.UsernamePasswordToken var12 = new org.jsecurity.authc.UsernamePasswordToken("\u0000\u0000", var9);
    org.jsecurity.session.mgt.SimpleSession var13 = new org.jsecurity.session.mgt.SimpleSession();
    var13.setTimeout((-1L));
    org.jsecurity.session.mgt.SimpleSession var16 = new org.jsecurity.session.mgt.SimpleSession();
    java.util.Date var17 = var16.getLastAccessTime();
    var13.setLastAccessTime(var17);
    java.net.InetAddress var19 = var13.getHostAddress();
    var12.setInetAddress(var19);
    org.jsecurity.session.mgt.SimpleSession var21 = new org.jsecurity.session.mgt.SimpleSession();
    var21.setTimeout((-1L));
    org.jsecurity.session.mgt.SimpleSession var24 = new org.jsecurity.session.mgt.SimpleSession();
    java.util.Date var25 = var24.getLastAccessTime();
    var21.setLastAccessTime(var25);
    org.jsecurity.session.mgt.SimpleSession var27 = new org.jsecurity.session.mgt.SimpleSession();
    java.util.Date var28 = var27.getLastAccessTime();
    var21.setStopTimestamp(var28);
    org.jsecurity.mgt.DefaultSecurityManager var30 = new org.jsecurity.mgt.DefaultSecurityManager();
    org.jsecurity.authc.pam.AllSuccessfulModularAuthenticationStrategy var31 = new org.jsecurity.authc.pam.AllSuccessfulModularAuthenticationStrategy();
    org.jsecurity.authc.pam.AllSuccessfulModularAuthenticationStrategy var32 = new org.jsecurity.authc.pam.AllSuccessfulModularAuthenticationStrategy();
    char[] var34 = new char[] { };
    org.jsecurity.authc.UsernamePasswordToken var36 = new org.jsecurity.authc.UsernamePasswordToken("hi!", var34, true);
    org.jsecurity.authc.SimpleAccount var37 = new org.jsecurity.authc.SimpleAccount();
    var37.setCredentialsExpired(false);
    boolean var40 = var37.isLocked();
    org.jsecurity.authc.AuthenticationInfo var41 = var32.afterAllAttempts((org.jsecurity.authc.AuthenticationToken)var36, (org.jsecurity.authc.AuthenticationInfo)var37);
    char[] var45 = new char[] { '4', '#'};
    org.jsecurity.authc.UsernamePasswordToken var46 = new org.jsecurity.authc.UsernamePasswordToken("\u0000\u0000", var45);
    org.jsecurity.authc.SimpleAccount var47 = new org.jsecurity.authc.SimpleAccount();
    var47.setCredentialsExpired(false);
    var47.setCredentialsExpired(false);
    boolean var52 = var47.isCredentialsExpired();
    org.jsecurity.authc.AuthenticationInfo var53 = var32.afterAllAttempts((org.jsecurity.authc.AuthenticationToken)var46, (org.jsecurity.authc.AuthenticationInfo)var47);
    org.jsecurity.authz.UnauthenticatedException var57 = new org.jsecurity.authz.UnauthenticatedException();
    org.jsecurity.config.UnresolveableReferenceException var58 = new org.jsecurity.config.UnresolveableReferenceException("", (java.lang.Throwable)var57);
    org.jsecurity.cache.CacheException var59 = new org.jsecurity.cache.CacheException("org.jsecurity.config.ConfigurationException: dd\uFFFD", (java.lang.Throwable)var57);
    org.jsecurity.authc.SimpleAuthenticationInfo var61 = new org.jsecurity.authc.SimpleAuthenticationInfo((java.lang.Object)"org.jsecurity.config.ConfigurationException: dd\uFFFD", (java.lang.Object)var59, "a2b823b1e72eae2b727289df8a00a89df8a0bab6ad8a89c4c5c7a9b62a270000");
    org.jsecurity.subject.PrincipalCollection var62 = var61.getPrincipals();
    org.jsecurity.authc.AuthenticationInfo var63 = var31.afterAllAttempts((org.jsecurity.authc.AuthenticationToken)var46, (org.jsecurity.authc.AuthenticationInfo)var61);
    var30.setModularAuthenticationStrategy((org.jsecurity.authc.pam.ModularAuthenticationStrategy)var31);
    org.jsecurity.subject.RememberMeManager var65 = var30.getRememberMeManager();
    org.jsecurity.authc.pam.ModularRealmAuthenticator var66 = new org.jsecurity.authc.pam.ModularRealmAuthenticator();
    var30.setAuthenticator((org.jsecurity.authc.Authenticator)var66);
    org.jsecurity.codec.CodecException var70 = new org.jsecurity.codec.CodecException("dd\uFFFD");
    org.jsecurity.authc.ConcurrentAccessException var71 = new org.jsecurity.authc.ConcurrentAccessException("org.jsecurity.authz.UnauthorizedException: org.jsecurity.session.ExpiredSessionException: ", (java.lang.Throwable)var70);
    org.jsecurity.subject.SimplePrincipalCollection var73 = new org.jsecurity.subject.SimplePrincipalCollection((java.lang.Object)var70, "");
    java.io.InputStream var75 = org.jsecurity.util.ClassUtils.getResourceAsStream("");
    java.lang.Object[] var76 = new java.lang.Object[] { var75};
    java.util.List var77 = org.jsecurity.util.CollectionUtils.asList(var76);
    org.jsecurity.authc.pam.ModularRealmAuthenticator var78 = new org.jsecurity.authc.pam.ModularRealmAuthenticator(var77);
    var73.addAll((java.util.Collection)var77, "\u0000\u0000");
    org.jsecurity.authc.pam.FirstSuccessfulAuthenticationStrategy var81 = new org.jsecurity.authc.pam.FirstSuccessfulAuthenticationStrategy();
    org.jsecurity.authz.UnauthorizedException var83 = new org.jsecurity.authz.UnauthorizedException("org.jsecurity.config.ConfigurationException: dd\uFFFD");
    java.lang.Throwable[] var84 = var83.getSuppressed();
    java.util.List var85 = org.jsecurity.util.CollectionUtils.asList((java.lang.Object[])var84);
    org.jsecurity.authc.UsernamePasswordToken var86 = new org.jsecurity.authc.UsernamePasswordToken();
    java.lang.String var87 = var86.getUsername();
    java.net.InetAddress var88 = var86.getInetAddress();
    org.jsecurity.authc.AuthenticationInfo var89 = var81.beforeAllAttempts((java.util.Collection)var85, (org.jsecurity.authc.AuthenticationToken)var86);
    var30.checkPermissions((org.jsecurity.subject.PrincipalCollection)var73, (java.util.Collection)var85);
    org.jsecurity.subject.DelegatingSubject var91 = new org.jsecurity.subject.DelegatingSubject((org.jsecurity.subject.PrincipalCollection)var5, false, var19, (org.jsecurity.session.Session)var21, (org.jsecurity.mgt.SecurityManager)var30);
    org.jsecurity.session.mgt.ImmutableProxiedSession var92 = new org.jsecurity.session.mgt.ImmutableProxiedSession((org.jsecurity.session.Session)var21);
    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      var92.touch();
      fail("Expected exception of type org.jsecurity.session.InvalidSessionException");
    } catch (org.jsecurity.session.InvalidSessionException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var9);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var17);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var19);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var25);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var28);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var34);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var40 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var41);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var45);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var52 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var53);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var62);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var63);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var65);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var75);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var76);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var77);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var84);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var85);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var87);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var88);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var89);

  }

  public void test298() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest5.test298");


    org.jsecurity.authc.CredentialsException var1 = new org.jsecurity.authc.CredentialsException("eb8eb80000");
    org.jsecurity.authz.AuthorizationException var2 = new org.jsecurity.authz.AuthorizationException((java.lang.Throwable)var1);

  }

  public void test299() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest5.test299");


    org.jsecurity.authc.ExpiredCredentialsException var2 = new org.jsecurity.authc.ExpiredCredentialsException();
    org.jsecurity.session.ExpiredSessionException var3 = new org.jsecurity.session.ExpiredSessionException("", (java.lang.Throwable)var2);
    org.jsecurity.authz.UnauthorizedException var4 = new org.jsecurity.authz.UnauthorizedException((java.lang.Throwable)var3);
    org.jsecurity.authz.UnauthenticatedException var5 = new org.jsecurity.authz.UnauthenticatedException("64f92a6a-b899-4b53-a1ff-969d49769088", (java.lang.Throwable)var4);

  }

  public void test300() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest5.test300");


    org.jsecurity.realm.activedirectory.ActiveDirectoryRealm var0 = new org.jsecurity.realm.activedirectory.ActiveDirectoryRealm();
    var0.init();
    var0.init();
    org.jsecurity.realm.activedirectory.ActiveDirectoryRealm var3 = new org.jsecurity.realm.activedirectory.ActiveDirectoryRealm();
    org.jsecurity.authc.credential.Sha256CredentialsMatcher var4 = new org.jsecurity.authc.credential.Sha256CredentialsMatcher();
    var3.setCredentialsMatcher((org.jsecurity.authc.credential.CredentialsMatcher)var4);
    java.lang.String var6 = var3.getAuthorizationCacheName();
    var3.setUrl("hi!");
    org.jsecurity.realm.ldap.DefaultLdapContextFactory var9 = new org.jsecurity.realm.ldap.DefaultLdapContextFactory();
    var3.setLdapContextFactory((org.jsecurity.realm.ldap.LdapContextFactory)var9);
    var9.setAuthentication("dd\uFFFD");
    var0.setLdapContextFactory((org.jsecurity.realm.ldap.LdapContextFactory)var9);
    var9.setSystemUsername("cbfc3e1d-dc49-47b1-a5ab-57e5cb694d7d");
    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      javax.naming.ldap.LdapContext var16 = var9.getSystemLdapContext();
      fail("Expected exception of type java.lang.IllegalStateException");
    } catch (java.lang.IllegalStateException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var6);

  }

  public void test301() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest5.test301");


    org.jsecurity.session.UnknownSessionException var4 = new org.jsecurity.session.UnknownSessionException("dd\uFFFD", (java.io.Serializable)100.0f);
    org.jsecurity.subject.SubjectException var5 = new org.jsecurity.subject.SubjectException("dd\uFFFD", (java.lang.Throwable)var4);
    org.jsecurity.io.SerializationException var6 = new org.jsecurity.io.SerializationException("", (java.lang.Throwable)var5);
    java.lang.Throwable[] var7 = var5.getSuppressed();
    java.lang.Throwable[] var8 = var5.getSuppressed();
    org.jsecurity.authz.SimpleAuthorizationInfo var11 = new org.jsecurity.authz.SimpleAuthorizationInfo();
    var11.addRole("a2b823b1e72eae2b727289df8a00a89df8a0bab6ad8a89c4c5c7a9b62a270000");
    org.jsecurity.session.UnknownSessionException var18 = new org.jsecurity.session.UnknownSessionException("dd\uFFFD", (java.io.Serializable)100.0f);
    org.jsecurity.subject.SubjectException var19 = new org.jsecurity.subject.SubjectException("dd\uFFFD", (java.lang.Throwable)var18);
    org.jsecurity.io.SerializationException var20 = new org.jsecurity.io.SerializationException("", (java.lang.Throwable)var19);
    java.lang.Throwable[] var21 = var19.getSuppressed();
    java.util.Set var22 = org.jsecurity.util.CollectionUtils.asSet((java.lang.Object[])var21);
    var11.addRoles((java.util.Collection)var22);
    java.io.InputStream var25 = org.jsecurity.util.ClassUtils.getResourceAsStream("");
    java.lang.Object[] var26 = new java.lang.Object[] { var25};
    java.util.List var27 = org.jsecurity.util.CollectionUtils.asList(var26);
    org.jsecurity.authc.pam.ModularRealmAuthenticator var28 = new org.jsecurity.authc.pam.ModularRealmAuthenticator(var27);
    org.jsecurity.subject.SimplePrincipalCollection var30 = new org.jsecurity.subject.SimplePrincipalCollection((java.util.Collection)var27, "org.jsecurity.authz.UnauthorizedException: org.jsecurity.session.ExpiredSessionException: ");
    org.jsecurity.session.UnknownSessionException var35 = new org.jsecurity.session.UnknownSessionException("dd\uFFFD", (java.io.Serializable)100.0f);
    org.jsecurity.session.SessionException var37 = new org.jsecurity.session.SessionException("dd\uFFFD", (java.lang.Throwable)var35, (java.io.Serializable)0);
    org.jsecurity.session.SessionException var38 = new org.jsecurity.session.SessionException("dd\uFFFD", (java.lang.Throwable)var35);
    var30.add((java.lang.Object)var38, "org.jsecurity.config.ConfigurationException: dd\uFFFD");
    java.util.Set var41 = var30.asSet();
    org.jsecurity.authz.SimpleAuthorizingAccount var42 = new org.jsecurity.authz.SimpleAuthorizingAccount((java.lang.Object)var8, (java.lang.Object)"\u0000\u0000\u0000", "\u0000\u0000\u0000", var22, var41);
    org.jsecurity.authz.SimpleRole var44 = var42.getRole("\u0000\u0000\u0000");
    java.util.Set var45 = var42.getPermissions();
    org.jsecurity.session.UnknownSessionException var52 = new org.jsecurity.session.UnknownSessionException("dd\uFFFD", (java.io.Serializable)100.0f);
    org.jsecurity.subject.SubjectException var53 = new org.jsecurity.subject.SubjectException("dd\uFFFD", (java.lang.Throwable)var52);
    org.jsecurity.io.SerializationException var54 = new org.jsecurity.io.SerializationException("", (java.lang.Throwable)var53);
    org.jsecurity.session.InvalidSessionException var55 = new org.jsecurity.session.InvalidSessionException("dd\uFFFD", (java.lang.Throwable)var53);
    org.jsecurity.authz.AuthorizationException var56 = new org.jsecurity.authz.AuthorizationException("a2b823b1e72eae2b727289df8a00a89df8a0bab6ad8a89c4c5c7a9b62a270000", (java.lang.Throwable)var55);
    var55.setSessionId((java.io.Serializable)"org.jsecurity.realm.text.PropertiesRealm_983");
    org.jsecurity.util.InstantiationException var59 = new org.jsecurity.util.InstantiationException((java.lang.Throwable)var55);
    org.jsecurity.authc.ExpiredCredentialsException var60 = new org.jsecurity.authc.ExpiredCredentialsException((java.lang.Throwable)var55);
    org.jsecurity.authc.SimpleAccount var62 = new org.jsecurity.authc.SimpleAccount((java.util.Collection)var45, (java.lang.Object)var60, "org.jsecurity.realm.text.TextConfigurationRealm_819");
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var7);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var8);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var21);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var22);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var25);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var26);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var27);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var41);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var44);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var45);

  }

  public void test302() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest5.test302");


    org.jsecurity.config.IniConfiguration var0 = new org.jsecurity.config.IniConfiguration();
    var0.setConfigUrl("hi!");
    org.jsecurity.mgt.SecurityManager var3 = var0.getSecurityManager();
    java.lang.String var4 = var0.getConfig();
    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      var0.init();
      fail("Expected exception of type org.jsecurity.config.ConfigurationException");
    } catch (org.jsecurity.config.ConfigurationException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var3);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var4);

  }

  public void test303() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest5.test303");


    org.jsecurity.session.UnknownSessionException var5 = new org.jsecurity.session.UnknownSessionException("dd\uFFFD", (java.io.Serializable)100.0f);
    org.jsecurity.session.SessionException var7 = new org.jsecurity.session.SessionException("dd\uFFFD", (java.lang.Throwable)var5, (java.io.Serializable)0);
    org.jsecurity.io.SerializationException var8 = new org.jsecurity.io.SerializationException((java.lang.Throwable)var5);
    org.jsecurity.authc.DisabledAccountException var9 = new org.jsecurity.authc.DisabledAccountException("org.jsecurity.authc.IncorrectCredentialsException: \u0000\u0000", (java.lang.Throwable)var8);
    org.jsecurity.authc.UnknownAccountException var10 = new org.jsecurity.authc.UnknownAccountException((java.lang.Throwable)var9);
    org.jsecurity.authc.LockedAccountException var11 = new org.jsecurity.authc.LockedAccountException((java.lang.Throwable)var9);
    org.jsecurity.session.UnknownSessionException var16 = new org.jsecurity.session.UnknownSessionException("dd\uFFFD", (java.io.Serializable)100.0f);
    org.jsecurity.subject.SubjectException var17 = new org.jsecurity.subject.SubjectException("dd\uFFFD", (java.lang.Throwable)var16);
    org.jsecurity.authc.AccountException var18 = new org.jsecurity.authc.AccountException("hi!", (java.lang.Throwable)var17);
    org.jsecurity.session.UnknownSessionException var19 = new org.jsecurity.session.UnknownSessionException((java.lang.Throwable)var17);
    org.jsecurity.codec.CodecException var20 = new org.jsecurity.codec.CodecException((java.lang.Throwable)var17);
    org.jsecurity.authz.HostUnauthorizedException var21 = new org.jsecurity.authz.HostUnauthorizedException((java.lang.Throwable)var17);
    java.net.InetAddress var22 = var21.getHostAddress();
    org.jsecurity.session.mgt.SimpleSession var23 = new org.jsecurity.session.mgt.SimpleSession();
    var23.setTimeout((-1L));
    org.jsecurity.session.mgt.SimpleSession var26 = new org.jsecurity.session.mgt.SimpleSession();
    java.util.Date var27 = var26.getLastAccessTime();
    var23.setLastAccessTime(var27);
    java.net.InetAddress var29 = var23.getHostAddress();
    org.jsecurity.authz.HostUnauthorizedException var30 = new org.jsecurity.authz.HostUnauthorizedException(var29);
    org.jsecurity.authz.HostUnauthorizedException var31 = new org.jsecurity.authz.HostUnauthorizedException(var29);
    var21.setHostAddress(var29);
    org.jsecurity.session.InvalidSessionException var33 = new org.jsecurity.session.InvalidSessionException("HashtableCache [orgjsecurityauthcCredentialsException783ccd3148a842dd890fdf885a7baafAA==]", (java.lang.Throwable)var9, (java.io.Serializable)var21);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var22);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var27);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var29);

  }

  public void test304() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest5.test304");


    org.jsecurity.authz.SimpleRole var0 = new org.jsecurity.authz.SimpleRole();
    org.jsecurity.authz.SimpleAuthorizationInfo var1 = new org.jsecurity.authz.SimpleAuthorizationInfo();
    var1.addRole("a2b823b1e72eae2b727289df8a00a89df8a0bab6ad8a89c4c5c7a9b62a270000");
    org.jsecurity.session.UnknownSessionException var8 = new org.jsecurity.session.UnknownSessionException("dd\uFFFD", (java.io.Serializable)100.0f);
    org.jsecurity.subject.SubjectException var9 = new org.jsecurity.subject.SubjectException("dd\uFFFD", (java.lang.Throwable)var8);
    org.jsecurity.io.SerializationException var10 = new org.jsecurity.io.SerializationException("", (java.lang.Throwable)var9);
    java.lang.Throwable[] var11 = var9.getSuppressed();
    java.util.Set var12 = org.jsecurity.util.CollectionUtils.asSet((java.lang.Object[])var11);
    var1.addRoles((java.util.Collection)var12);
    var0.addAll((java.util.Collection)var12);
    java.lang.String var15 = var0.getName();
    var0.setName("");
    org.jsecurity.codec.CodecException var20 = new org.jsecurity.codec.CodecException("dd\uFFFD");
    org.jsecurity.authc.ConcurrentAccessException var21 = new org.jsecurity.authc.ConcurrentAccessException("org.jsecurity.authz.UnauthorizedException: org.jsecurity.session.ExpiredSessionException: ", (java.lang.Throwable)var20);
    org.jsecurity.subject.SimplePrincipalCollection var23 = new org.jsecurity.subject.SimplePrincipalCollection((java.lang.Object)var20, "");
    java.io.InputStream var25 = org.jsecurity.util.ClassUtils.getResourceAsStream("");
    java.lang.Object[] var26 = new java.lang.Object[] { var25};
    java.util.List var27 = org.jsecurity.util.CollectionUtils.asList(var26);
    org.jsecurity.authc.pam.ModularRealmAuthenticator var28 = new org.jsecurity.authc.pam.ModularRealmAuthenticator(var27);
    var23.addAll((java.util.Collection)var27, "\u0000\u0000");
    java.io.InputStream var32 = org.jsecurity.util.ClassUtils.getResourceAsStream("");
    java.lang.Object[] var33 = new java.lang.Object[] { var32};
    java.util.List var34 = org.jsecurity.util.CollectionUtils.asList(var33);
    org.jsecurity.authc.pam.ModularRealmAuthenticator var35 = new org.jsecurity.authc.pam.ModularRealmAuthenticator(var34);
    var23.addAll((java.util.Collection)var34, "\u0000\u0000");
    var0.addAll((java.util.Collection)var34);
    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      org.jsecurity.mgt.DefaultSecurityManager var39 = new org.jsecurity.mgt.DefaultSecurityManager((java.util.Collection)var34);
      fail("Expected exception of type java.lang.ClassCastException");
    } catch (java.lang.ClassCastException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var11);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var12);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var15);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var25);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var26);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var27);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var32);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var33);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var34);

  }

  public void test305() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest5.test305");


    org.jsecurity.cache.HashtableCache var1 = new org.jsecurity.cache.HashtableCache("org.jsecurity.realm.SimpleAccountRealm-384-authorization");

  }

  public void test306() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest5.test306");


    org.jsecurity.crypto.BlowfishCipher var0 = new org.jsecurity.crypto.BlowfishCipher();
    byte[] var4 = new byte[] { (byte)100, (byte)100, (byte)(-1)};
    java.lang.String var5 = org.jsecurity.codec.CodecSupport.toString(var4);
    byte[] var6 = org.jsecurity.codec.Base64.encode(var4);
    char[] var7 = org.jsecurity.codec.CodecSupport.toChars(var6);
    byte[] var11 = new byte[] { (byte)100, (byte)100, (byte)(-1)};
    java.lang.String var12 = org.jsecurity.codec.CodecSupport.toString(var11);
    byte[] var14 = org.jsecurity.codec.Base64.encode(var11, false);
    byte[] var15 = var0.encrypt(var6, var11);
    byte[] var17 = org.jsecurity.codec.Base64.decode("b6cd6008-ae80-4bfd-ae0c-5041e0198a79");
    org.jsecurity.io.XmlSerializer var18 = new org.jsecurity.io.XmlSerializer();
    org.jsecurity.io.ResourceException var20 = new org.jsecurity.io.ResourceException("hi!");
    org.jsecurity.codec.CodecException var21 = new org.jsecurity.codec.CodecException((java.lang.Throwable)var20);
    byte[] var22 = var18.serialize((java.lang.Object)var20);
    java.lang.String var23 = org.jsecurity.codec.Base64.encodeToString(var22);
    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      byte[] var24 = var0.encrypt(var17, var22);
      fail("Expected exception of type java.lang.IllegalStateException");
    } catch (java.lang.IllegalStateException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var4);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var5 + "' != '" + "dd\uFFFD"+ "'", var5.equals("dd\uFFFD"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var6);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var7);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var11);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var12 + "' != '" + "dd\uFFFD"+ "'", var12.equals("dd\uFFFD"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var14);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var15);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var17);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var22);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var23 + "' != '" + "PD94bWwgdmVyc2lvbj0iMS4wIiBlbmNvZGluZz0iVVRGLTgiPz4KPGphdmEgdmVyc2lvbj0iMS43LjBfNzkiIGNsYXNzPSJqYXZhLmJlYW5zLlhNTERlY29kZXIiPgogPG9iamVjdCBjbGFzcz0ib3JnLmpzZWN1cml0eS5pby5SZXNvdXJjZUV4Y2VwdGlvbiI+CiAgPHZvaWQgcHJvcGVydHk9InN0YWNrVHJhY2UiPgogICA8YXJyYXkgY2xhc3M9ImphdmEubGFuZy5TdGFja1RyYWNlRWxlbWVudCIgbGVuZ3RoPSI3Ii8+CiAgPC92b2lkPgogPC9vYmplY3Q+CjwvamF2YT4K"+ "'", var23.equals("PD94bWwgdmVyc2lvbj0iMS4wIiBlbmNvZGluZz0iVVRGLTgiPz4KPGphdmEgdmVyc2lvbj0iMS43LjBfNzkiIGNsYXNzPSJqYXZhLmJlYW5zLlhNTERlY29kZXIiPgogPG9iamVjdCBjbGFzcz0ib3JnLmpzZWN1cml0eS5pby5SZXNvdXJjZUV4Y2VwdGlvbiI+CiAgPHZvaWQgcHJvcGVydHk9InN0YWNrVHJhY2UiPgogICA8YXJyYXkgY2xhc3M9ImphdmEubGFuZy5TdGFja1RyYWNlRWxlbWVudCIgbGVuZ3RoPSI3Ii8+CiAgPC92b2lkPgogPC9vYmplY3Q+CjwvamF2YT4K"));

  }

  public void test307() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest5.test307");


    java.io.InputStream var1 = org.jsecurity.util.ClassUtils.getResourceAsStream("");
    org.jsecurity.io.ResourceUtils.close(var1);
    org.jsecurity.io.ResourceUtils.close(var1);
    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      org.jsecurity.io.IniResource var4 = new org.jsecurity.io.IniResource(var1);
      fail("Expected exception of type org.jsecurity.io.ResourceException");
    } catch (org.jsecurity.io.ResourceException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var1);

  }

  public void test308() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest5.test308");


    org.jsecurity.session.mgt.DefaultSessionManager var0 = new org.jsecurity.session.mgt.DefaultSessionManager();
    org.jsecurity.session.mgt.quartz.QuartzSessionValidationScheduler var1 = new org.jsecurity.session.mgt.quartz.QuartzSessionValidationScheduler();
    boolean var2 = var1.isEnabled();
    var1.enableSessionValidation();
    var0.setSessionValidationScheduler((org.jsecurity.session.mgt.SessionValidationScheduler)var1);
    var1.disableSessionValidation();
    org.jsecurity.session.mgt.DefaultSessionManager var6 = new org.jsecurity.session.mgt.DefaultSessionManager();
    org.jsecurity.session.mgt.eis.MemorySessionDAO var7 = new org.jsecurity.session.mgt.eis.MemorySessionDAO();
    org.jsecurity.cache.Cache var8 = var7.getActiveSessionsCache();
    org.jsecurity.cache.CacheManager var9 = var7.getCacheManager();
    org.jsecurity.cache.HashtableCacheManager var10 = new org.jsecurity.cache.HashtableCacheManager();
    org.jsecurity.cache.Cache var12 = var10.getCache("\u0000\u0000");
    var7.setActiveSessionsCache(var12);
    java.io.InputStream var15 = org.jsecurity.util.ClassUtils.getResourceAsStream("");
    java.lang.Object[] var16 = new java.lang.Object[] { var15};
    java.util.List var17 = org.jsecurity.util.CollectionUtils.asList(var16);
    org.jsecurity.authc.pam.ModularRealmAuthenticator var18 = new org.jsecurity.authc.pam.ModularRealmAuthenticator(var17);
    org.jsecurity.authc.pam.AllSuccessfulModularAuthenticationStrategy var19 = new org.jsecurity.authc.pam.AllSuccessfulModularAuthenticationStrategy();
    var18.setModularAuthenticationStrategy((org.jsecurity.authc.pam.ModularAuthenticationStrategy)var19);
    org.jsecurity.authz.SimpleAuthorizationInfo var21 = new org.jsecurity.authz.SimpleAuthorizationInfo();
    var21.addStringPermission("hi!");
    java.io.InputStream var25 = org.jsecurity.util.ClassUtils.getResourceAsStream("");
    java.lang.Object[] var26 = new java.lang.Object[] { var25};
    java.util.List var27 = org.jsecurity.util.CollectionUtils.asList(var26);
    var21.addRoles((java.util.Collection)var27);
    var18.setAuthenticationListeners((java.util.Collection)var27);
    org.jsecurity.realm.activedirectory.ActiveDirectoryRealm var30 = new org.jsecurity.realm.activedirectory.ActiveDirectoryRealm();
    var30.setPrincipalSuffix("");
    var18.setRealm((org.jsecurity.realm.Realm)var30);
    org.jsecurity.cache.HashtableCacheManager var34 = new org.jsecurity.cache.HashtableCacheManager();
    org.jsecurity.cache.Cache var36 = var34.getCache("\u0000\u0000");
    var30.setAuthorizationCache(var36);
    var7.setActiveSessionsCache(var36);
    org.jsecurity.session.mgt.SimpleSession var39 = new org.jsecurity.session.mgt.SimpleSession();
    java.io.Serializable var40 = var7.create((org.jsecurity.session.Session)var39);
    var6.setSessionDAO((org.jsecurity.session.mgt.eis.SessionDAO)var7);
    org.jsecurity.authc.pam.AllSuccessfulModularAuthenticationStrategy var42 = new org.jsecurity.authc.pam.AllSuccessfulModularAuthenticationStrategy();
    char[] var44 = new char[] { };
    org.jsecurity.authc.UsernamePasswordToken var46 = new org.jsecurity.authc.UsernamePasswordToken("hi!", var44, true);
    org.jsecurity.authc.SimpleAccount var47 = new org.jsecurity.authc.SimpleAccount();
    var47.setCredentialsExpired(false);
    boolean var50 = var47.isLocked();
    org.jsecurity.authc.AuthenticationInfo var51 = var42.afterAllAttempts((org.jsecurity.authc.AuthenticationToken)var46, (org.jsecurity.authc.AuthenticationInfo)var47);
    char[] var55 = new char[] { '4', '#'};
    org.jsecurity.authc.UsernamePasswordToken var56 = new org.jsecurity.authc.UsernamePasswordToken("\u0000\u0000", var55);
    org.jsecurity.authc.SimpleAccount var57 = new org.jsecurity.authc.SimpleAccount();
    var57.setCredentialsExpired(false);
    var57.setCredentialsExpired(false);
    boolean var62 = var57.isCredentialsExpired();
    org.jsecurity.authc.AuthenticationInfo var63 = var42.afterAllAttempts((org.jsecurity.authc.AuthenticationToken)var56, (org.jsecurity.authc.AuthenticationInfo)var57);
    org.jsecurity.realm.activedirectory.ActiveDirectoryRealm var64 = new org.jsecurity.realm.activedirectory.ActiveDirectoryRealm();
    org.jsecurity.authc.credential.Sha256CredentialsMatcher var65 = new org.jsecurity.authc.credential.Sha256CredentialsMatcher();
    var64.setCredentialsMatcher((org.jsecurity.authc.credential.CredentialsMatcher)var65);
    java.lang.String var67 = var64.getAuthorizationCacheName();
    org.jsecurity.authc.UsernamePasswordToken var68 = new org.jsecurity.authc.UsernamePasswordToken();
    java.lang.String var69 = var68.getUsername();
    java.lang.Object var70 = var68.getPrincipal();
    boolean var71 = var64.supports((org.jsecurity.authc.AuthenticationToken)var68);
    org.jsecurity.session.UnknownSessionException var75 = new org.jsecurity.session.UnknownSessionException("dd\uFFFD", (java.io.Serializable)100.0f);
    org.jsecurity.session.SessionException var77 = new org.jsecurity.session.SessionException("dd\uFFFD", (java.lang.Throwable)var75, (java.io.Serializable)0);
    org.jsecurity.authc.SimpleAuthenticationInfo var80 = new org.jsecurity.authc.SimpleAuthenticationInfo((java.lang.Object)0, (java.lang.Object)10, "hi!");
    java.lang.Object var81 = var80.getCredentials();
    java.lang.String var82 = var80.toString();
    org.jsecurity.authc.AuthenticationInfo var83 = var42.afterAllAttempts((org.jsecurity.authc.AuthenticationToken)var68, (org.jsecurity.authc.AuthenticationInfo)var80);
    org.jsecurity.session.mgt.eis.MemorySessionDAO var84 = new org.jsecurity.session.mgt.eis.MemorySessionDAO();
    org.jsecurity.cache.Cache var85 = var84.getActiveSessionsCache();
    var84.setActiveSessionsCacheName("dd\uFFFD");
    var80.setCredentials((java.lang.Object)var84);
    var6.setSessionDAO((org.jsecurity.session.mgt.eis.SessionDAO)var84);
    var1.setSessionManager((org.jsecurity.session.mgt.ValidatingSessionManager)var6);
    long var91 = var6.getGlobalSessionTimeout();
    org.jsecurity.session.mgt.SessionValidationScheduler var92 = var6.getSessionValidationScheduler();
    long var93 = var6.getGlobalSessionTimeout();
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var2 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var8);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var9);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var12);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var15);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var16);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var17);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var25);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var26);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var27);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var36);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var40 + "' != '" + "269e1a21-00d4-4366-b735-22c165cc08e0"+ "'", var40.equals("269e1a21-00d4-4366-b735-22c165cc08e0"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var44);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var50 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var51);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var55);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var62 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var63);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var67);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var69);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var70);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var71 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var81 + "' != '" + 10+ "'", var81.equals(10));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var83);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var85);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var91 == 1800000L);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var92);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var93 == 1800000L);

  }

  public void test309() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest5.test309");


    boolean var1 = org.jsecurity.util.StringUtils.hasLength("org.jsecurity.authc.UsernamePasswordToken - null, rememberMe=false");
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var1 == true);

  }

  public void test310() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest5.test310");


    org.jsecurity.realm.text.TextConfigurationRealm var0 = new org.jsecurity.realm.text.TextConfigurationRealm();
    java.io.InputStream var2 = org.jsecurity.util.ClassUtils.getResourceAsStream("");
    java.lang.Object[] var3 = new java.lang.Object[] { var2};
    java.util.List var4 = org.jsecurity.util.CollectionUtils.asList(var3);
    org.jsecurity.authc.pam.ModularRealmAuthenticator var5 = new org.jsecurity.authc.pam.ModularRealmAuthenticator(var4);
    org.jsecurity.subject.SimplePrincipalCollection var7 = new org.jsecurity.subject.SimplePrincipalCollection((java.util.Collection)var4, "org.jsecurity.authz.UnauthorizedException: org.jsecurity.session.ExpiredSessionException: ");
    org.jsecurity.session.UnknownSessionException var12 = new org.jsecurity.session.UnknownSessionException("dd\uFFFD", (java.io.Serializable)100.0f);
    org.jsecurity.session.SessionException var14 = new org.jsecurity.session.SessionException("dd\uFFFD", (java.lang.Throwable)var12, (java.io.Serializable)0);
    org.jsecurity.session.SessionException var15 = new org.jsecurity.session.SessionException("dd\uFFFD", (java.lang.Throwable)var12);
    var7.add((java.lang.Object)var15, "org.jsecurity.config.ConfigurationException: dd\uFFFD");
    var0.onLogout((org.jsecurity.subject.PrincipalCollection)var7);
    java.util.Set var20 = org.jsecurity.util.PermissionUtils.toPermissionStrings("org.jsecurity.config.ConfigurationException: dd\uFFFD");
    org.jsecurity.authz.SimpleAuthorizationInfo var21 = new org.jsecurity.authz.SimpleAuthorizationInfo(var20);
    org.jsecurity.authz.SimpleAuthorizingAccount var22 = new org.jsecurity.authz.SimpleAuthorizingAccount((org.jsecurity.subject.PrincipalCollection)var7, (java.lang.Object)var20);
    org.jsecurity.authz.SimpleRole var24 = var22.getRole("org.jsecurity.subject.SubjectException: dd\uFFFD");
    org.jsecurity.codec.CodecException var27 = new org.jsecurity.codec.CodecException("dd\uFFFD");
    org.jsecurity.authc.ConcurrentAccessException var28 = new org.jsecurity.authc.ConcurrentAccessException("org.jsecurity.authz.UnauthorizedException: org.jsecurity.session.ExpiredSessionException: ", (java.lang.Throwable)var27);
    org.jsecurity.subject.SimplePrincipalCollection var30 = new org.jsecurity.subject.SimplePrincipalCollection((java.lang.Object)var27, "");
    java.io.InputStream var32 = org.jsecurity.util.ClassUtils.getResourceAsStream("");
    java.lang.Object[] var33 = new java.lang.Object[] { var32};
    java.util.List var34 = org.jsecurity.util.CollectionUtils.asList(var33);
    org.jsecurity.authc.pam.ModularRealmAuthenticator var35 = new org.jsecurity.authc.pam.ModularRealmAuthenticator(var34);
    org.jsecurity.authc.pam.AllSuccessfulModularAuthenticationStrategy var36 = new org.jsecurity.authc.pam.AllSuccessfulModularAuthenticationStrategy();
    var35.setModularAuthenticationStrategy((org.jsecurity.authc.pam.ModularAuthenticationStrategy)var36);
    org.jsecurity.authz.SimpleAuthorizationInfo var38 = new org.jsecurity.authz.SimpleAuthorizationInfo();
    var38.addStringPermission("hi!");
    java.io.InputStream var42 = org.jsecurity.util.ClassUtils.getResourceAsStream("");
    java.lang.Object[] var43 = new java.lang.Object[] { var42};
    java.util.List var44 = org.jsecurity.util.CollectionUtils.asList(var43);
    var38.addRoles((java.util.Collection)var44);
    var35.setAuthenticationListeners((java.util.Collection)var44);
    org.jsecurity.realm.activedirectory.ActiveDirectoryRealm var47 = new org.jsecurity.realm.activedirectory.ActiveDirectoryRealm();
    var47.setPrincipalSuffix("");
    var35.setRealm((org.jsecurity.realm.Realm)var47);
    org.jsecurity.authc.pam.FirstSuccessfulAuthenticationStrategy var51 = new org.jsecurity.authc.pam.FirstSuccessfulAuthenticationStrategy();
    org.jsecurity.authz.UnauthorizedException var53 = new org.jsecurity.authz.UnauthorizedException("org.jsecurity.config.ConfigurationException: dd\uFFFD");
    java.lang.Throwable[] var54 = var53.getSuppressed();
    java.util.List var55 = org.jsecurity.util.CollectionUtils.asList((java.lang.Object[])var54);
    org.jsecurity.authc.UsernamePasswordToken var56 = new org.jsecurity.authc.UsernamePasswordToken();
    java.lang.String var57 = var56.getUsername();
    java.net.InetAddress var58 = var56.getInetAddress();
    org.jsecurity.authc.AuthenticationInfo var59 = var51.beforeAllAttempts((java.util.Collection)var55, (org.jsecurity.authc.AuthenticationToken)var56);
    var35.setModularAuthenticationStrategy((org.jsecurity.authc.pam.ModularAuthenticationStrategy)var51);
    org.jsecurity.authc.SimpleAccount var61 = new org.jsecurity.authc.SimpleAccount((org.jsecurity.subject.PrincipalCollection)var30, (java.lang.Object)var35);
    java.util.Collection var62 = var61.getObjectPermissions();
    java.util.Collection var63 = var61.getObjectPermissions();
    var22.merge((org.jsecurity.authc.AuthenticationInfo)var61);
    java.io.InputStream var66 = org.jsecurity.util.ClassUtils.getResourceAsStream("");
    java.lang.Object[] var67 = new java.lang.Object[] { var66};
    java.util.List var68 = org.jsecurity.util.CollectionUtils.asList(var67);
    org.jsecurity.authc.pam.ModularRealmAuthenticator var69 = new org.jsecurity.authc.pam.ModularRealmAuthenticator(var68);
    org.jsecurity.subject.SimplePrincipalCollection var71 = new org.jsecurity.subject.SimplePrincipalCollection((java.util.Collection)var68, "org.jsecurity.authz.UnauthorizedException: org.jsecurity.session.ExpiredSessionException: ");
    java.util.Set var72 = var71.getRealmNames();
    java.io.InputStream var74 = org.jsecurity.util.ClassUtils.getResourceAsStream("");
    java.lang.Object[] var75 = new java.lang.Object[] { var74};
    java.util.List var76 = org.jsecurity.util.CollectionUtils.asList(var75);
    org.jsecurity.authc.pam.ModularRealmAuthenticator var77 = new org.jsecurity.authc.pam.ModularRealmAuthenticator(var76);
    org.jsecurity.subject.SimplePrincipalCollection var79 = new org.jsecurity.subject.SimplePrincipalCollection((java.util.Collection)var76, "org.jsecurity.authz.UnauthorizedException: org.jsecurity.session.ExpiredSessionException: ");
    org.jsecurity.session.UnknownSessionException var84 = new org.jsecurity.session.UnknownSessionException("dd\uFFFD", (java.io.Serializable)100.0f);
    org.jsecurity.session.SessionException var86 = new org.jsecurity.session.SessionException("dd\uFFFD", (java.lang.Throwable)var84, (java.io.Serializable)0);
    org.jsecurity.session.SessionException var87 = new org.jsecurity.session.SessionException("dd\uFFFD", (java.lang.Throwable)var84);
    var79.add((java.lang.Object)var87, "org.jsecurity.config.ConfigurationException: dd\uFFFD");
    java.util.Set var90 = var79.asSet();
    var71.addAll((java.util.Collection)var90, "6464ff");
    var61.setPrincipals((org.jsecurity.subject.PrincipalCollection)var71);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var2);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var3);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var4);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var20);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var24);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var32);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var33);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var34);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var42);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var43);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var44);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var54);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var55);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var57);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var58);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var59);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var62);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var63);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var66);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var67);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var68);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var72);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var74);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var75);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var76);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var90);

  }

  public void test311() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest5.test311");


    org.jsecurity.authz.SimpleAuthorizationInfo var0 = new org.jsecurity.authz.SimpleAuthorizationInfo();
    org.jsecurity.realm.jndi.JndiRealmFactory var1 = new org.jsecurity.realm.jndi.JndiRealmFactory();
    java.io.InputStream var3 = org.jsecurity.util.ClassUtils.getResourceAsStream("");
    java.lang.Object[] var4 = new java.lang.Object[] { var3};
    java.util.List var5 = org.jsecurity.util.CollectionUtils.asList(var4);
    var1.setJndiNames((java.util.Collection)var5);
    org.jsecurity.authz.SimpleRole var7 = new org.jsecurity.authz.SimpleRole();
    org.jsecurity.authz.SimpleAuthorizationInfo var8 = new org.jsecurity.authz.SimpleAuthorizationInfo();
    var8.addRole("a2b823b1e72eae2b727289df8a00a89df8a0bab6ad8a89c4c5c7a9b62a270000");
    org.jsecurity.session.UnknownSessionException var15 = new org.jsecurity.session.UnknownSessionException("dd\uFFFD", (java.io.Serializable)100.0f);
    org.jsecurity.subject.SubjectException var16 = new org.jsecurity.subject.SubjectException("dd\uFFFD", (java.lang.Throwable)var15);
    org.jsecurity.io.SerializationException var17 = new org.jsecurity.io.SerializationException("", (java.lang.Throwable)var16);
    java.lang.Throwable[] var18 = var16.getSuppressed();
    java.util.Set var19 = org.jsecurity.util.CollectionUtils.asSet((java.lang.Object[])var18);
    var8.addRoles((java.util.Collection)var19);
    var7.addAll((java.util.Collection)var19);
    var1.setJndiNames((java.util.Collection)var19);
    var0.setStringPermissions(var19);
    org.jsecurity.authz.ModularRealmAuthorizer var24 = new org.jsecurity.authz.ModularRealmAuthorizer();
    java.io.InputStream var26 = org.jsecurity.util.ClassUtils.getResourceAsStream("");
    java.lang.Object[] var27 = new java.lang.Object[] { var26};
    java.util.List var28 = org.jsecurity.util.CollectionUtils.asList(var27);
    org.jsecurity.authc.pam.ModularRealmAuthenticator var29 = new org.jsecurity.authc.pam.ModularRealmAuthenticator(var28);
    org.jsecurity.subject.SimplePrincipalCollection var31 = new org.jsecurity.subject.SimplePrincipalCollection((java.util.Collection)var28, "org.jsecurity.authz.UnauthorizedException: org.jsecurity.session.ExpiredSessionException: ");
    org.jsecurity.session.UnknownSessionException var36 = new org.jsecurity.session.UnknownSessionException("dd\uFFFD", (java.io.Serializable)100.0f);
    org.jsecurity.session.SessionException var38 = new org.jsecurity.session.SessionException("dd\uFFFD", (java.lang.Throwable)var36, (java.io.Serializable)0);
    org.jsecurity.session.SessionException var39 = new org.jsecurity.session.SessionException("dd\uFFFD", (java.lang.Throwable)var36);
    var31.add((java.lang.Object)var39, "org.jsecurity.config.ConfigurationException: dd\uFFFD");
    java.util.Set var42 = var31.asSet();
    var24.setRealms((java.util.Collection)var42);
    org.jsecurity.authz.UnauthorizedException var45 = new org.jsecurity.authz.UnauthorizedException("org.jsecurity.config.ConfigurationException: dd\uFFFD");
    java.lang.Throwable[] var46 = var45.getSuppressed();
    java.util.Set var47 = org.jsecurity.util.CollectionUtils.asSet((java.lang.Object[])var46);
    var24.setRealms((java.util.Collection)var47);
    org.jsecurity.realm.text.PropertiesRealm var49 = new org.jsecurity.realm.text.PropertiesRealm();
    org.jsecurity.realm.activedirectory.ActiveDirectoryRealm var50 = new org.jsecurity.realm.activedirectory.ActiveDirectoryRealm();
    org.jsecurity.authc.credential.Sha256CredentialsMatcher var51 = new org.jsecurity.authc.credential.Sha256CredentialsMatcher();
    var50.setCredentialsMatcher((org.jsecurity.authc.credential.CredentialsMatcher)var51);
    java.lang.String var53 = var50.getAuthorizationCacheName();
    var50.setPrincipalSuffix("org.jsecurity.config.ConfigurationException: dd\uFFFD");
    org.jsecurity.authz.permission.PermissionResolver var56 = var50.getPermissionResolver();
    var49.setPermissionResolver(var56);
    var24.setPermissionResolver(var56);
    java.util.Set var59 = org.jsecurity.util.PermissionUtils.resolvePermissions((java.util.Collection)var19, var56);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var3);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var4);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var5);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var18);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var19);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var26);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var27);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var28);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var42);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var46);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var47);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var53);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var56);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var59);

  }

  public void test312() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest5.test312");


    org.jsecurity.authc.credential.Sha384CredentialsMatcher var0 = new org.jsecurity.authc.credential.Sha384CredentialsMatcher();
    var0.setStoredCredentialsHexEncoded(true);
    var0.setStoredCredentialsHexEncoded(true);

  }

  public void test313() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest5.test313");


    org.jsecurity.mgt.DefaultSecurityManager var0 = new org.jsecurity.mgt.DefaultSecurityManager();
    java.io.InputStream var2 = org.jsecurity.util.ClassUtils.getResourceAsStream("");
    java.lang.Object[] var3 = new java.lang.Object[] { var2};
    java.util.List var4 = org.jsecurity.util.CollectionUtils.asList(var3);
    org.jsecurity.authc.pam.ModularRealmAuthenticator var5 = new org.jsecurity.authc.pam.ModularRealmAuthenticator(var4);
    org.jsecurity.authc.pam.AllSuccessfulModularAuthenticationStrategy var6 = new org.jsecurity.authc.pam.AllSuccessfulModularAuthenticationStrategy();
    var5.setModularAuthenticationStrategy((org.jsecurity.authc.pam.ModularAuthenticationStrategy)var6);
    org.jsecurity.authz.SimpleAuthorizationInfo var8 = new org.jsecurity.authz.SimpleAuthorizationInfo();
    var8.addStringPermission("hi!");
    java.io.InputStream var12 = org.jsecurity.util.ClassUtils.getResourceAsStream("");
    java.lang.Object[] var13 = new java.lang.Object[] { var12};
    java.util.List var14 = org.jsecurity.util.CollectionUtils.asList(var13);
    var8.addRoles((java.util.Collection)var14);
    var5.setAuthenticationListeners((java.util.Collection)var14);
    var0.setSessionListeners((java.util.Collection)var14);
    org.jsecurity.authc.pam.ModularRealmAuthenticator var18 = new org.jsecurity.authc.pam.ModularRealmAuthenticator();
    org.jsecurity.authz.permission.InvalidPermissionStringException var21 = new org.jsecurity.authz.permission.InvalidPermissionStringException("", "dd\uFFFD");
    org.jsecurity.JSecurityException var23 = new org.jsecurity.JSecurityException("");
    org.jsecurity.authc.SimpleAuthenticationInfo var25 = new org.jsecurity.authc.SimpleAuthenticationInfo((java.lang.Object)var21, (java.lang.Object)"", "org.jsecurity.authz.UnauthorizedException: org.jsecurity.session.ExpiredSessionException: ");
    org.jsecurity.subject.PrincipalCollection var26 = var25.getPrincipals();
    var18.onLogout(var26);
    var0.setAuthenticator((org.jsecurity.authc.Authenticator)var18);
    org.jsecurity.realm.activedirectory.ActiveDirectoryRealm var29 = new org.jsecurity.realm.activedirectory.ActiveDirectoryRealm();
    var29.init();
    var29.setSystemPassword("dd\uFFFD");
    org.jsecurity.authz.aop.GuestAnnotationHandler var33 = new org.jsecurity.authz.aop.GuestAnnotationHandler();
    java.lang.Class var34 = var33.getAnnotationClass();
    var29.setAuthenticationTokenClass(var34);
    org.jsecurity.mgt.DefaultSecurityManager var36 = new org.jsecurity.mgt.DefaultSecurityManager((org.jsecurity.realm.Realm)var29);
    org.jsecurity.cache.CacheManager var37 = var29.getCacheManager();
    org.jsecurity.realm.text.PropertiesRealm var38 = new org.jsecurity.realm.text.PropertiesRealm(var37);
    var0.setRealm((org.jsecurity.realm.Realm)var38);
    java.lang.String var40 = var38.getAuthorizationCacheName();
    var38.setReloadIntervalSeconds(10);
    var38.setUseXmlFormat(true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var2);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var3);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var4);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var12);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var13);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var14);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var26);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var34);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var37);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var40 + "' != '" + "org.jsecurity.realm.text.PropertiesRealm-718-authorization"+ "'", var40.equals("org.jsecurity.realm.text.PropertiesRealm-718-authorization"));

  }

  public void test314() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest5.test314");


    org.jsecurity.authc.pam.ModularRealmAuthenticator var0 = new org.jsecurity.authc.pam.ModularRealmAuthenticator();
    org.jsecurity.authc.pam.AtLeastOneSuccessfulModularAuthenticationStrategy var1 = new org.jsecurity.authc.pam.AtLeastOneSuccessfulModularAuthenticationStrategy();
    var0.setModularAuthenticationStrategy((org.jsecurity.authc.pam.ModularAuthenticationStrategy)var1);
    org.jsecurity.cache.HashtableCache var4 = new org.jsecurity.cache.HashtableCache("\u0000\u0000\u0000");
    org.jsecurity.session.mgt.SimpleSession var5 = new org.jsecurity.session.mgt.SimpleSession();
    var5.touch();
    org.jsecurity.authz.UnauthenticatedException var9 = new org.jsecurity.authz.UnauthenticatedException();
    org.jsecurity.config.UnresolveableReferenceException var10 = new org.jsecurity.config.UnresolveableReferenceException("", (java.lang.Throwable)var9);
    org.jsecurity.cache.CacheException var11 = new org.jsecurity.cache.CacheException("org.jsecurity.config.ConfigurationException: dd\uFFFD", (java.lang.Throwable)var9);
    java.lang.Object var12 = var5.removeAttribute((java.lang.Object)var11);
    org.jsecurity.mgt.DefaultSecurityManager var13 = new org.jsecurity.mgt.DefaultSecurityManager();
    org.jsecurity.authc.pam.AllSuccessfulModularAuthenticationStrategy var14 = new org.jsecurity.authc.pam.AllSuccessfulModularAuthenticationStrategy();
    org.jsecurity.authc.pam.AllSuccessfulModularAuthenticationStrategy var15 = new org.jsecurity.authc.pam.AllSuccessfulModularAuthenticationStrategy();
    char[] var17 = new char[] { };
    org.jsecurity.authc.UsernamePasswordToken var19 = new org.jsecurity.authc.UsernamePasswordToken("hi!", var17, true);
    org.jsecurity.authc.SimpleAccount var20 = new org.jsecurity.authc.SimpleAccount();
    var20.setCredentialsExpired(false);
    boolean var23 = var20.isLocked();
    org.jsecurity.authc.AuthenticationInfo var24 = var15.afterAllAttempts((org.jsecurity.authc.AuthenticationToken)var19, (org.jsecurity.authc.AuthenticationInfo)var20);
    char[] var28 = new char[] { '4', '#'};
    org.jsecurity.authc.UsernamePasswordToken var29 = new org.jsecurity.authc.UsernamePasswordToken("\u0000\u0000", var28);
    org.jsecurity.authc.SimpleAccount var30 = new org.jsecurity.authc.SimpleAccount();
    var30.setCredentialsExpired(false);
    var30.setCredentialsExpired(false);
    boolean var35 = var30.isCredentialsExpired();
    org.jsecurity.authc.AuthenticationInfo var36 = var15.afterAllAttempts((org.jsecurity.authc.AuthenticationToken)var29, (org.jsecurity.authc.AuthenticationInfo)var30);
    org.jsecurity.authz.UnauthenticatedException var40 = new org.jsecurity.authz.UnauthenticatedException();
    org.jsecurity.config.UnresolveableReferenceException var41 = new org.jsecurity.config.UnresolveableReferenceException("", (java.lang.Throwable)var40);
    org.jsecurity.cache.CacheException var42 = new org.jsecurity.cache.CacheException("org.jsecurity.config.ConfigurationException: dd\uFFFD", (java.lang.Throwable)var40);
    org.jsecurity.authc.SimpleAuthenticationInfo var44 = new org.jsecurity.authc.SimpleAuthenticationInfo((java.lang.Object)"org.jsecurity.config.ConfigurationException: dd\uFFFD", (java.lang.Object)var42, "a2b823b1e72eae2b727289df8a00a89df8a0bab6ad8a89c4c5c7a9b62a270000");
    org.jsecurity.subject.PrincipalCollection var45 = var44.getPrincipals();
    org.jsecurity.authc.AuthenticationInfo var46 = var14.afterAllAttempts((org.jsecurity.authc.AuthenticationToken)var29, (org.jsecurity.authc.AuthenticationInfo)var44);
    var13.setModularAuthenticationStrategy((org.jsecurity.authc.pam.ModularAuthenticationStrategy)var14);
    org.jsecurity.subject.RememberMeManager var48 = var13.getRememberMeManager();
    org.jsecurity.authc.pam.ModularRealmAuthenticator var49 = new org.jsecurity.authc.pam.ModularRealmAuthenticator();
    var13.setAuthenticator((org.jsecurity.authc.Authenticator)var49);
    var4.put((java.lang.Object)var5, (java.lang.Object)var49);
    org.jsecurity.realm.activedirectory.ActiveDirectoryRealm var52 = new org.jsecurity.realm.activedirectory.ActiveDirectoryRealm();
    org.jsecurity.authc.credential.Sha256CredentialsMatcher var53 = new org.jsecurity.authc.credential.Sha256CredentialsMatcher();
    var52.setCredentialsMatcher((org.jsecurity.authc.credential.CredentialsMatcher)var53);
    var53.setHashSalted(false);
    org.jsecurity.authz.UnauthenticatedException var59 = new org.jsecurity.authz.UnauthenticatedException();
    org.jsecurity.config.UnresolveableReferenceException var60 = new org.jsecurity.config.UnresolveableReferenceException("", (java.lang.Throwable)var59);
    org.jsecurity.session.InvalidSessionException var61 = new org.jsecurity.session.InvalidSessionException((java.io.Serializable)var59);
    org.jsecurity.subject.InvalidSubjectException var62 = new org.jsecurity.subject.InvalidSubjectException("org.jsecurity.config.ConfigurationException: dd\uFFFD", (java.lang.Throwable)var59);
    var4.put((java.lang.Object)var53, (java.lang.Object)"org.jsecurity.config.ConfigurationException: dd\uFFFD");
    org.jsecurity.authc.UsernamePasswordToken var64 = new org.jsecurity.authc.UsernamePasswordToken();
    java.lang.String var65 = var64.getUsername();
    java.lang.Object var66 = var64.getPrincipal();
    var64.setUsername("hi!");
    java.lang.Object var69 = var64.getCredentials();
    java.lang.String var70 = var64.getUsername();
    var4.remove((java.lang.Object)var64);
    java.lang.Object var72 = var64.getPrincipal();
    org.jsecurity.crypto.hash.Md2Hash var74 = org.jsecurity.crypto.hash.Md2Hash.fromBase64String("a2b823b1e72eae2b727289df8a00a89df8a0bab6ad8a89c4c5c7a9b62a270000");
    org.jsecurity.authc.credential.Md2CredentialsMatcher var75 = new org.jsecurity.authc.credential.Md2CredentialsMatcher();
    org.jsecurity.authz.SimpleAuthorizingAccount var77 = new org.jsecurity.authz.SimpleAuthorizingAccount((java.lang.Object)"a2b823b1e72eae2b727289df8a00a89df8a0bab6ad8a89c4c5c7a9b62a270000", (java.lang.Object)var75, "");
    var77.addStringPermission("hi!");
    org.jsecurity.authz.SimpleAuthorizationInfo var80 = new org.jsecurity.authz.SimpleAuthorizationInfo();
    var80.addRole("a2b823b1e72eae2b727289df8a00a89df8a0bab6ad8a89c4c5c7a9b62a270000");
    org.jsecurity.session.UnknownSessionException var87 = new org.jsecurity.session.UnknownSessionException("dd\uFFFD", (java.io.Serializable)100.0f);
    org.jsecurity.subject.SubjectException var88 = new org.jsecurity.subject.SubjectException("dd\uFFFD", (java.lang.Throwable)var87);
    org.jsecurity.io.SerializationException var89 = new org.jsecurity.io.SerializationException("", (java.lang.Throwable)var88);
    java.lang.Throwable[] var90 = var88.getSuppressed();
    java.util.Set var91 = org.jsecurity.util.CollectionUtils.asSet((java.lang.Object[])var90);
    var80.addRoles((java.util.Collection)var91);
    boolean var93 = var77.isPermittedAll((java.util.Collection)var91);
    org.jsecurity.authc.AuthenticationInfo var94 = var1.afterAllAttempts((org.jsecurity.authc.AuthenticationToken)var64, (org.jsecurity.authc.AuthenticationInfo)var77);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var12);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var17);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var23 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var24);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var28);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var35 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var36);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var45);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var46);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var48);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var65);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var66);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var69);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var70 + "' != '" + "hi!"+ "'", var70.equals("hi!"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var72 + "' != '" + "hi!"+ "'", var72.equals("hi!"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var74);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var90);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var91);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var93 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var94);

  }

  public void test315() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest5.test315");


    java.lang.String[] var4 = org.jsecurity.util.StringUtils.split("c02079b2-68a6-47b8-b05b-0ae0ae0255bd", 'a', '#', 'a');
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var4);

  }

  public void test316() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest5.test316");


    org.jsecurity.config.ReflectionBuilder var0 = new org.jsecurity.config.ReflectionBuilder();
    org.jsecurity.io.IniResource var1 = new org.jsecurity.io.IniResource();
    java.util.Map var2 = var1.getSections();
    var0.setObjects(var2);
    java.util.Map var4 = var0.getObjects();
    org.jsecurity.realm.activedirectory.ActiveDirectoryRealm var5 = new org.jsecurity.realm.activedirectory.ActiveDirectoryRealm();
    org.jsecurity.authc.credential.Sha256CredentialsMatcher var6 = new org.jsecurity.authc.credential.Sha256CredentialsMatcher();
    var5.setCredentialsMatcher((org.jsecurity.authc.credential.CredentialsMatcher)var6);
    org.jsecurity.realm.activedirectory.ActiveDirectoryRealm var8 = new org.jsecurity.realm.activedirectory.ActiveDirectoryRealm();
    org.jsecurity.authc.credential.Sha256CredentialsMatcher var9 = new org.jsecurity.authc.credential.Sha256CredentialsMatcher();
    var8.setCredentialsMatcher((org.jsecurity.authc.credential.CredentialsMatcher)var9);
    java.lang.String var11 = var8.getAuthorizationCacheName();
    var8.setUrl("hi!");
    org.jsecurity.realm.ldap.DefaultLdapContextFactory var14 = new org.jsecurity.realm.ldap.DefaultLdapContextFactory();
    var8.setLdapContextFactory((org.jsecurity.realm.ldap.LdapContextFactory)var14);
    var14.setAuthentication("org.jsecurity.authz.UnauthorizedException: org.jsecurity.session.ExpiredSessionException: ");
    var5.setLdapContextFactory((org.jsecurity.realm.ldap.LdapContextFactory)var14);
    org.jsecurity.io.IniResource var19 = new org.jsecurity.io.IniResource();
    java.lang.String var20 = var19.getCharsetName();
    org.jsecurity.config.ReflectionBuilder var21 = new org.jsecurity.config.ReflectionBuilder();
    org.jsecurity.io.IniResource var22 = new org.jsecurity.io.IniResource();
    var22.setCharsetName("org.jsecurity.authz.UnauthorizedException: org.jsecurity.session.ExpiredSessionException: ");
    java.util.Map var25 = var22.getSections();
    java.util.Map var26 = var21.buildObjects(var25);
    var19.setSections(var26);
    var14.setAdditionalEnvironment(var26);
    java.util.Map var29 = var0.buildObjects(var26);
    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      org.jsecurity.crypto.hash.Md5Hash var30 = new org.jsecurity.crypto.hash.Md5Hash((java.lang.Object)var26);
      fail("Expected exception of type org.jsecurity.codec.CodecException");
    } catch (org.jsecurity.codec.CodecException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var2);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var4);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var11);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var20);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var25);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var26);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var29);

  }

  public void test317() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest5.test317");


    org.jsecurity.realm.text.PropertiesRealm var0 = new org.jsecurity.realm.text.PropertiesRealm();
    var0.setRoleDefinitions("5dd0c65d-1422-49c2-becb-9e8dca619ab3");
    java.lang.String var3 = var0.getUserDefinitions();
    java.lang.String var4 = var0.getRoleDefinitions();
    var0.setResourcePath("3d3a8192-1e92-477d-8aa6-fc837cbc6148");
    org.jsecurity.codec.CodecException var9 = new org.jsecurity.codec.CodecException("dd\uFFFD");
    org.jsecurity.authc.ConcurrentAccessException var10 = new org.jsecurity.authc.ConcurrentAccessException("org.jsecurity.authz.UnauthorizedException: org.jsecurity.session.ExpiredSessionException: ", (java.lang.Throwable)var9);
    org.jsecurity.subject.SimplePrincipalCollection var12 = new org.jsecurity.subject.SimplePrincipalCollection((java.lang.Object)var9, "");
    java.io.InputStream var14 = org.jsecurity.util.ClassUtils.getResourceAsStream("");
    java.lang.Object[] var15 = new java.lang.Object[] { var14};
    java.util.List var16 = org.jsecurity.util.CollectionUtils.asList(var15);
    org.jsecurity.authc.pam.ModularRealmAuthenticator var17 = new org.jsecurity.authc.pam.ModularRealmAuthenticator(var16);
    var12.addAll((java.util.Collection)var16, "\u0000\u0000");
    java.io.InputStream var21 = org.jsecurity.util.ClassUtils.getResourceAsStream("");
    java.lang.Object[] var22 = new java.lang.Object[] { var21};
    java.util.List var23 = org.jsecurity.util.CollectionUtils.asList(var22);
    org.jsecurity.authc.pam.ModularRealmAuthenticator var24 = new org.jsecurity.authc.pam.ModularRealmAuthenticator(var23);
    var12.addAll((java.util.Collection)var23, "\u0000\u0000");
    org.jsecurity.realm.SimpleAccountRealm var28 = new org.jsecurity.realm.SimpleAccountRealm("hi!");
    java.lang.Class var29 = var28.getAuthenticationTokenClass();
    java.util.Collection var30 = org.jsecurity.util.CollectionUtils.emptyCollection(var29);
    java.lang.Object var31 = org.jsecurity.util.ClassUtils.newInstance(var29);
    java.util.Collection var32 = var12.byType(var29);
    org.jsecurity.authz.SimpleRole var34 = new org.jsecurity.authz.SimpleRole();
    org.jsecurity.authz.permission.WildcardPermission var37 = new org.jsecurity.authz.permission.WildcardPermission("hi!", false);
    boolean var38 = var34.isPermitted((org.jsecurity.authz.Permission)var37);
    org.jsecurity.session.InvalidSessionException var39 = new org.jsecurity.session.InvalidSessionException("org.jsecurity.config.ConfigurationException: dd\uFFFD", (java.io.Serializable)var37);
    org.jsecurity.codec.CodecException var42 = new org.jsecurity.codec.CodecException("dd\uFFFD");
    org.jsecurity.authc.ConcurrentAccessException var43 = new org.jsecurity.authc.ConcurrentAccessException("org.jsecurity.authz.UnauthorizedException: org.jsecurity.session.ExpiredSessionException: ", (java.lang.Throwable)var42);
    org.jsecurity.subject.SimplePrincipalCollection var45 = new org.jsecurity.subject.SimplePrincipalCollection((java.lang.Object)var42, "");
    org.jsecurity.authc.pam.FirstSuccessfulAuthenticationStrategy var46 = new org.jsecurity.authc.pam.FirstSuccessfulAuthenticationStrategy();
    org.jsecurity.authz.UnauthorizedException var48 = new org.jsecurity.authz.UnauthorizedException("org.jsecurity.config.ConfigurationException: dd\uFFFD");
    java.lang.Throwable[] var49 = var48.getSuppressed();
    java.util.List var50 = org.jsecurity.util.CollectionUtils.asList((java.lang.Object[])var49);
    org.jsecurity.authc.UsernamePasswordToken var51 = new org.jsecurity.authc.UsernamePasswordToken();
    java.lang.String var52 = var51.getUsername();
    java.net.InetAddress var53 = var51.getInetAddress();
    org.jsecurity.authc.AuthenticationInfo var54 = var46.beforeAllAttempts((java.util.Collection)var50, (org.jsecurity.authc.AuthenticationToken)var51);
    org.jsecurity.session.UnknownSessionException var59 = new org.jsecurity.session.UnknownSessionException("dd\uFFFD", (java.io.Serializable)100.0f);
    org.jsecurity.subject.SubjectException var60 = new org.jsecurity.subject.SubjectException("dd\uFFFD", (java.lang.Throwable)var59);
    org.jsecurity.io.SerializationException var61 = new org.jsecurity.io.SerializationException("", (java.lang.Throwable)var60);
    java.lang.Throwable[] var62 = var60.getSuppressed();
    java.util.Set var63 = org.jsecurity.util.CollectionUtils.asSet((java.lang.Object[])var62);
    org.jsecurity.authc.SimpleAccount var64 = new org.jsecurity.authc.SimpleAccount((org.jsecurity.subject.PrincipalCollection)var45, (java.lang.Object)var50, var63);
    var64.addStringPermission("org.jsecurity.config.ConfigurationException: dd\uFFFD");
    org.jsecurity.authz.SimpleRole var67 = new org.jsecurity.authz.SimpleRole();
    org.jsecurity.authz.permission.WildcardPermission var70 = new org.jsecurity.authz.permission.WildcardPermission("hi!", false);
    boolean var71 = var67.isPermitted((org.jsecurity.authz.Permission)var70);
    var64.addObjectPermission((org.jsecurity.authz.Permission)var70);
    boolean var73 = var37.implies((org.jsecurity.authz.Permission)var70);
    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      boolean var74 = var0.isPermitted((org.jsecurity.subject.PrincipalCollection)var12, (org.jsecurity.authz.Permission)var70);
      fail("Expected exception of type java.util.NoSuchElementException");
    } catch (java.util.NoSuchElementException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var3);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var4 + "' != '" + "5dd0c65d-1422-49c2-becb-9e8dca619ab3"+ "'", var4.equals("5dd0c65d-1422-49c2-becb-9e8dca619ab3"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var14);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var15);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var16);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var21);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var22);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var23);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var29);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var30);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var31);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var32);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var38 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var49);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var50);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var52);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var53);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var54);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var62);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var63);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var71 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var73 == true);

  }

  public void test318() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest5.test318");


    org.jsecurity.realm.activedirectory.ActiveDirectoryRealm var0 = new org.jsecurity.realm.activedirectory.ActiveDirectoryRealm();
    org.jsecurity.authc.credential.Sha256CredentialsMatcher var1 = new org.jsecurity.authc.credential.Sha256CredentialsMatcher();
    var0.setCredentialsMatcher((org.jsecurity.authc.credential.CredentialsMatcher)var1);
    org.jsecurity.realm.activedirectory.ActiveDirectoryRealm var3 = new org.jsecurity.realm.activedirectory.ActiveDirectoryRealm();
    org.jsecurity.authc.credential.Sha256CredentialsMatcher var4 = new org.jsecurity.authc.credential.Sha256CredentialsMatcher();
    var3.setCredentialsMatcher((org.jsecurity.authc.credential.CredentialsMatcher)var4);
    java.lang.String var6 = var3.getAuthorizationCacheName();
    var3.setUrl("hi!");
    org.jsecurity.realm.ldap.DefaultLdapContextFactory var9 = new org.jsecurity.realm.ldap.DefaultLdapContextFactory();
    var3.setLdapContextFactory((org.jsecurity.realm.ldap.LdapContextFactory)var9);
    var9.setAuthentication("org.jsecurity.authz.UnauthorizedException: org.jsecurity.session.ExpiredSessionException: ");
    var0.setLdapContextFactory((org.jsecurity.realm.ldap.LdapContextFactory)var9);
    var0.setPrincipalSuffix("783ccd31-48a8-42dd-890f-df885a7baaff");
    org.jsecurity.realm.activedirectory.ActiveDirectoryRealm var16 = new org.jsecurity.realm.activedirectory.ActiveDirectoryRealm();
    org.jsecurity.authc.credential.Sha256CredentialsMatcher var17 = new org.jsecurity.authc.credential.Sha256CredentialsMatcher();
    var16.setCredentialsMatcher((org.jsecurity.authc.credential.CredentialsMatcher)var17);
    java.lang.String var19 = var16.getAuthorizationCacheName();
    var16.setUrl("hi!");
    org.jsecurity.realm.ldap.DefaultLdapContextFactory var22 = new org.jsecurity.realm.ldap.DefaultLdapContextFactory();
    var16.setLdapContextFactory((org.jsecurity.realm.ldap.LdapContextFactory)var22);
    org.jsecurity.config.ReflectionBuilder var24 = new org.jsecurity.config.ReflectionBuilder();
    org.jsecurity.io.IniResource var25 = new org.jsecurity.io.IniResource();
    var25.setCharsetName("org.jsecurity.authz.UnauthorizedException: org.jsecurity.session.ExpiredSessionException: ");
    java.util.Map var28 = var25.getSections();
    java.util.Map var29 = var24.buildObjects(var28);
    org.jsecurity.config.ReflectionBuilder var30 = new org.jsecurity.config.ReflectionBuilder();
    org.jsecurity.io.IniResource var31 = new org.jsecurity.io.IniResource();
    var31.setCharsetName("org.jsecurity.authz.UnauthorizedException: org.jsecurity.session.ExpiredSessionException: ");
    java.util.Map var34 = var31.getSections();
    java.util.Map var35 = var30.buildObjects(var34);
    java.util.Map var36 = var24.buildObjects(var35);
    java.util.Map var37 = var24.getObjects();
    var22.setAdditionalEnvironment(var37);
    var0.setLdapContextFactory((org.jsecurity.realm.ldap.LdapContextFactory)var22);
    org.jsecurity.mgt.DefaultSecurityManager var40 = new org.jsecurity.mgt.DefaultSecurityManager((org.jsecurity.realm.Realm)var0);
    java.io.InputStream var42 = org.jsecurity.util.ClassUtils.getResourceAsStream("");
    java.lang.Object[] var43 = new java.lang.Object[] { var42};
    java.util.List var44 = org.jsecurity.util.CollectionUtils.asList(var43);
    org.jsecurity.authc.pam.ModularRealmAuthenticator var45 = new org.jsecurity.authc.pam.ModularRealmAuthenticator(var44);
    org.jsecurity.subject.SimplePrincipalCollection var47 = new org.jsecurity.subject.SimplePrincipalCollection((java.util.Collection)var44, "org.jsecurity.authz.UnauthorizedException: org.jsecurity.session.ExpiredSessionException: ");
    org.jsecurity.session.UnknownSessionException var52 = new org.jsecurity.session.UnknownSessionException("dd\uFFFD", (java.io.Serializable)100.0f);
    org.jsecurity.session.SessionException var54 = new org.jsecurity.session.SessionException("dd\uFFFD", (java.lang.Throwable)var52, (java.io.Serializable)0);
    org.jsecurity.session.SessionException var55 = new org.jsecurity.session.SessionException("dd\uFFFD", (java.lang.Throwable)var52);
    var47.add((java.lang.Object)var55, "org.jsecurity.config.ConfigurationException: dd\uFFFD");
    var40.logout((org.jsecurity.subject.PrincipalCollection)var47);
    org.jsecurity.subject.DelegatingSubject var59 = new org.jsecurity.subject.DelegatingSubject((org.jsecurity.mgt.SecurityManager)var40);
    org.jsecurity.authz.SimpleAuthorizationInfo var60 = new org.jsecurity.authz.SimpleAuthorizationInfo();
    java.util.Set var61 = var60.getStringPermissions();
    java.util.Set var62 = var60.getRoles();
    var60.addStringPermission("hi!");
    org.jsecurity.subject.SimplePrincipalCollection var66 = new org.jsecurity.subject.SimplePrincipalCollection((java.lang.Object)"hi!", "5dd0c65d-1422-49c2-becb-9e8dca619ab3");
    java.lang.String[] var71 = org.jsecurity.util.StringUtils.split("org.jsecurity.realm.text.TextConfigurationRealm_445", 'a', ' ', ' ');
    java.util.Set var72 = org.jsecurity.util.CollectionUtils.asSet((java.lang.Object[])var71);
    java.lang.String[] var73 = org.jsecurity.util.StringUtils.toStringArray((java.util.Collection)var72);
    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      boolean var74 = var40.isPermittedAll((org.jsecurity.subject.PrincipalCollection)var66, var73);
      fail("Expected exception of type java.util.NoSuchElementException");
    } catch (java.util.NoSuchElementException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var6);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var19);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var28);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var29);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var34);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var35);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var36);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var37);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var42);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var43);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var44);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var61);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var62);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var71);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var72);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var73);

  }

  public void test319() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest5.test319");


    org.jsecurity.authc.ExpiredCredentialsException var4 = new org.jsecurity.authc.ExpiredCredentialsException();
    org.jsecurity.session.ExpiredSessionException var5 = new org.jsecurity.session.ExpiredSessionException("", (java.lang.Throwable)var4);
    org.jsecurity.subject.InvalidSubjectException var6 = new org.jsecurity.subject.InvalidSubjectException("org.jsecurity.authc.AccountException: hi!", (java.lang.Throwable)var4);
    org.jsecurity.subject.SubjectException var7 = new org.jsecurity.subject.SubjectException("51683bf6-3418-4d98-b15a-6e3f3f2f8eb9", (java.lang.Throwable)var6);
    org.jsecurity.session.ExpiredSessionException var8 = new org.jsecurity.session.ExpiredSessionException("e492c511-30cc-4e4c-bc2e-4f1f663b7b62", (java.lang.Throwable)var7);

  }

  public void test320() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest5.test320");


    org.jsecurity.crypto.hash.Sha1Hash var1 = org.jsecurity.crypto.hash.Sha1Hash.fromBase64String("org.jsecurity.realm.text.PropertiesRealm_2438");
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var1);

  }

  public void test321() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest5.test321");


    org.jsecurity.cache.HashtableCacheManager var0 = new org.jsecurity.cache.HashtableCacheManager();
    org.jsecurity.cache.Cache var2 = var0.getCache("\u0000\u0000");
    org.jsecurity.realm.text.PropertiesRealm var3 = new org.jsecurity.realm.text.PropertiesRealm((org.jsecurity.cache.CacheManager)var0);
    org.jsecurity.cache.Cache var5 = var0.getCache("e492c511-30cc-4e4c-bc2e-4f1f663b7b62");
    org.jsecurity.cache.Cache var7 = var0.getCache("aa00fc98-ebff-4dac-bd3f-94e5697fde26");
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var2);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var5);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var7);

  }

  public void test322() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest5.test322");


    org.jsecurity.JSecurityException var1 = new org.jsecurity.JSecurityException("AAA=");

  }

  public void test323() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest5.test323");


    org.jsecurity.session.mgt.DelegatingSession var0 = new org.jsecurity.session.mgt.DelegatingSession();
    org.jsecurity.session.mgt.SessionManager var1 = var0.getSessionManager();
    java.io.Serializable var2 = var0.getId();
    var0.setId((java.io.Serializable)"e7e879cb-1172-4cea-8bca-f370fbe1f08c");
    java.io.Serializable var5 = var0.getId();
    org.jsecurity.session.mgt.DefaultSessionManager var6 = new org.jsecurity.session.mgt.DefaultSessionManager();
    org.jsecurity.session.mgt.eis.MemorySessionDAO var7 = new org.jsecurity.session.mgt.eis.MemorySessionDAO();
    org.jsecurity.cache.Cache var8 = var7.getActiveSessionsCache();
    org.jsecurity.cache.CacheManager var9 = var7.getCacheManager();
    org.jsecurity.cache.HashtableCacheManager var10 = new org.jsecurity.cache.HashtableCacheManager();
    org.jsecurity.cache.Cache var12 = var10.getCache("\u0000\u0000");
    var7.setActiveSessionsCache(var12);
    java.io.InputStream var15 = org.jsecurity.util.ClassUtils.getResourceAsStream("");
    java.lang.Object[] var16 = new java.lang.Object[] { var15};
    java.util.List var17 = org.jsecurity.util.CollectionUtils.asList(var16);
    org.jsecurity.authc.pam.ModularRealmAuthenticator var18 = new org.jsecurity.authc.pam.ModularRealmAuthenticator(var17);
    org.jsecurity.authc.pam.AllSuccessfulModularAuthenticationStrategy var19 = new org.jsecurity.authc.pam.AllSuccessfulModularAuthenticationStrategy();
    var18.setModularAuthenticationStrategy((org.jsecurity.authc.pam.ModularAuthenticationStrategy)var19);
    org.jsecurity.authz.SimpleAuthorizationInfo var21 = new org.jsecurity.authz.SimpleAuthorizationInfo();
    var21.addStringPermission("hi!");
    java.io.InputStream var25 = org.jsecurity.util.ClassUtils.getResourceAsStream("");
    java.lang.Object[] var26 = new java.lang.Object[] { var25};
    java.util.List var27 = org.jsecurity.util.CollectionUtils.asList(var26);
    var21.addRoles((java.util.Collection)var27);
    var18.setAuthenticationListeners((java.util.Collection)var27);
    org.jsecurity.realm.activedirectory.ActiveDirectoryRealm var30 = new org.jsecurity.realm.activedirectory.ActiveDirectoryRealm();
    var30.setPrincipalSuffix("");
    var18.setRealm((org.jsecurity.realm.Realm)var30);
    org.jsecurity.cache.HashtableCacheManager var34 = new org.jsecurity.cache.HashtableCacheManager();
    org.jsecurity.cache.Cache var36 = var34.getCache("\u0000\u0000");
    var30.setAuthorizationCache(var36);
    var7.setActiveSessionsCache(var36);
    org.jsecurity.session.mgt.SimpleSession var39 = new org.jsecurity.session.mgt.SimpleSession();
    java.io.Serializable var40 = var7.create((org.jsecurity.session.Session)var39);
    var6.setSessionDAO((org.jsecurity.session.mgt.eis.SessionDAO)var7);
    org.jsecurity.authc.pam.AllSuccessfulModularAuthenticationStrategy var42 = new org.jsecurity.authc.pam.AllSuccessfulModularAuthenticationStrategy();
    char[] var44 = new char[] { };
    org.jsecurity.authc.UsernamePasswordToken var46 = new org.jsecurity.authc.UsernamePasswordToken("hi!", var44, true);
    org.jsecurity.authc.SimpleAccount var47 = new org.jsecurity.authc.SimpleAccount();
    var47.setCredentialsExpired(false);
    boolean var50 = var47.isLocked();
    org.jsecurity.authc.AuthenticationInfo var51 = var42.afterAllAttempts((org.jsecurity.authc.AuthenticationToken)var46, (org.jsecurity.authc.AuthenticationInfo)var47);
    char[] var55 = new char[] { '4', '#'};
    org.jsecurity.authc.UsernamePasswordToken var56 = new org.jsecurity.authc.UsernamePasswordToken("\u0000\u0000", var55);
    org.jsecurity.authc.SimpleAccount var57 = new org.jsecurity.authc.SimpleAccount();
    var57.setCredentialsExpired(false);
    var57.setCredentialsExpired(false);
    boolean var62 = var57.isCredentialsExpired();
    org.jsecurity.authc.AuthenticationInfo var63 = var42.afterAllAttempts((org.jsecurity.authc.AuthenticationToken)var56, (org.jsecurity.authc.AuthenticationInfo)var57);
    org.jsecurity.realm.activedirectory.ActiveDirectoryRealm var64 = new org.jsecurity.realm.activedirectory.ActiveDirectoryRealm();
    org.jsecurity.authc.credential.Sha256CredentialsMatcher var65 = new org.jsecurity.authc.credential.Sha256CredentialsMatcher();
    var64.setCredentialsMatcher((org.jsecurity.authc.credential.CredentialsMatcher)var65);
    java.lang.String var67 = var64.getAuthorizationCacheName();
    org.jsecurity.authc.UsernamePasswordToken var68 = new org.jsecurity.authc.UsernamePasswordToken();
    java.lang.String var69 = var68.getUsername();
    java.lang.Object var70 = var68.getPrincipal();
    boolean var71 = var64.supports((org.jsecurity.authc.AuthenticationToken)var68);
    org.jsecurity.session.UnknownSessionException var75 = new org.jsecurity.session.UnknownSessionException("dd\uFFFD", (java.io.Serializable)100.0f);
    org.jsecurity.session.SessionException var77 = new org.jsecurity.session.SessionException("dd\uFFFD", (java.lang.Throwable)var75, (java.io.Serializable)0);
    org.jsecurity.authc.SimpleAuthenticationInfo var80 = new org.jsecurity.authc.SimpleAuthenticationInfo((java.lang.Object)0, (java.lang.Object)10, "hi!");
    java.lang.Object var81 = var80.getCredentials();
    java.lang.String var82 = var80.toString();
    org.jsecurity.authc.AuthenticationInfo var83 = var42.afterAllAttempts((org.jsecurity.authc.AuthenticationToken)var68, (org.jsecurity.authc.AuthenticationInfo)var80);
    org.jsecurity.session.mgt.eis.MemorySessionDAO var84 = new org.jsecurity.session.mgt.eis.MemorySessionDAO();
    org.jsecurity.cache.Cache var85 = var84.getActiveSessionsCache();
    var84.setActiveSessionsCacheName("dd\uFFFD");
    var80.setCredentials((java.lang.Object)var84);
    var6.setSessionDAO((org.jsecurity.session.mgt.eis.SessionDAO)var84);
    org.jsecurity.session.mgt.quartz.QuartzSessionValidationScheduler var90 = new org.jsecurity.session.mgt.quartz.QuartzSessionValidationScheduler();
    var6.setSessionValidationScheduler((org.jsecurity.session.mgt.SessionValidationScheduler)var90);
    var0.setSessionManager((org.jsecurity.session.mgt.SessionManager)var6);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var1);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var2);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var5 + "' != '" + "e7e879cb-1172-4cea-8bca-f370fbe1f08c"+ "'", var5.equals("e7e879cb-1172-4cea-8bca-f370fbe1f08c"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var8);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var9);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var12);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var15);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var16);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var17);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var25);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var26);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var27);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var36);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var40 + "' != '" + "89a0be97-1502-4990-be3b-1910f2bf1028"+ "'", var40.equals("89a0be97-1502-4990-be3b-1910f2bf1028"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var44);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var50 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var51);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var55);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var62 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var63);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var67);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var69);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var70);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var71 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var81 + "' != '" + 10+ "'", var81.equals(10));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var83);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var85);

  }

  public void test324() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest5.test324");


    org.jsecurity.realm.activedirectory.ActiveDirectoryRealm var0 = new org.jsecurity.realm.activedirectory.ActiveDirectoryRealm();
    org.jsecurity.authc.credential.Sha256CredentialsMatcher var1 = new org.jsecurity.authc.credential.Sha256CredentialsMatcher();
    var0.setCredentialsMatcher((org.jsecurity.authc.credential.CredentialsMatcher)var1);
    org.jsecurity.realm.activedirectory.ActiveDirectoryRealm var3 = new org.jsecurity.realm.activedirectory.ActiveDirectoryRealm();
    org.jsecurity.authc.credential.Sha256CredentialsMatcher var4 = new org.jsecurity.authc.credential.Sha256CredentialsMatcher();
    var3.setCredentialsMatcher((org.jsecurity.authc.credential.CredentialsMatcher)var4);
    java.lang.String var6 = var3.getAuthorizationCacheName();
    var3.setUrl("hi!");
    org.jsecurity.realm.ldap.DefaultLdapContextFactory var9 = new org.jsecurity.realm.ldap.DefaultLdapContextFactory();
    var3.setLdapContextFactory((org.jsecurity.realm.ldap.LdapContextFactory)var9);
    var9.setAuthentication("org.jsecurity.authz.UnauthorizedException: org.jsecurity.session.ExpiredSessionException: ");
    var0.setLdapContextFactory((org.jsecurity.realm.ldap.LdapContextFactory)var9);
    var9.setReferral("a2b823b1e72eae2b727289df8a00a89df8a0bab6ad8a89c4c5c7a9b62a270000");
    var9.setUrl("\u0000\u0000");
    var9.setContextFactoryClassName("07e80a9d-8faf-4cf3-940d-6b8dc88fdd52");
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var6);

  }

  public void test325() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest5.test325");


    org.jsecurity.mgt.DefaultSecurityManager var0 = new org.jsecurity.mgt.DefaultSecurityManager();
    java.io.InputStream var2 = org.jsecurity.util.ClassUtils.getResourceAsStream("");
    java.lang.Object[] var3 = new java.lang.Object[] { var2};
    java.util.List var4 = org.jsecurity.util.CollectionUtils.asList(var3);
    org.jsecurity.authc.pam.ModularRealmAuthenticator var5 = new org.jsecurity.authc.pam.ModularRealmAuthenticator(var4);
    org.jsecurity.authc.pam.AllSuccessfulModularAuthenticationStrategy var6 = new org.jsecurity.authc.pam.AllSuccessfulModularAuthenticationStrategy();
    var5.setModularAuthenticationStrategy((org.jsecurity.authc.pam.ModularAuthenticationStrategy)var6);
    org.jsecurity.authz.SimpleAuthorizationInfo var8 = new org.jsecurity.authz.SimpleAuthorizationInfo();
    var8.addStringPermission("hi!");
    java.io.InputStream var12 = org.jsecurity.util.ClassUtils.getResourceAsStream("");
    java.lang.Object[] var13 = new java.lang.Object[] { var12};
    java.util.List var14 = org.jsecurity.util.CollectionUtils.asList(var13);
    var8.addRoles((java.util.Collection)var14);
    var5.setAuthenticationListeners((java.util.Collection)var14);
    var0.setSessionListeners((java.util.Collection)var14);
    org.jsecurity.realm.text.TextConfigurationRealm var18 = new org.jsecurity.realm.text.TextConfigurationRealm();
    java.io.InputStream var20 = org.jsecurity.util.ClassUtils.getResourceAsStream("");
    java.lang.Object[] var21 = new java.lang.Object[] { var20};
    java.util.List var22 = org.jsecurity.util.CollectionUtils.asList(var21);
    org.jsecurity.authc.pam.ModularRealmAuthenticator var23 = new org.jsecurity.authc.pam.ModularRealmAuthenticator(var22);
    org.jsecurity.subject.SimplePrincipalCollection var25 = new org.jsecurity.subject.SimplePrincipalCollection((java.util.Collection)var22, "org.jsecurity.authz.UnauthorizedException: org.jsecurity.session.ExpiredSessionException: ");
    org.jsecurity.session.UnknownSessionException var30 = new org.jsecurity.session.UnknownSessionException("dd\uFFFD", (java.io.Serializable)100.0f);
    org.jsecurity.session.SessionException var32 = new org.jsecurity.session.SessionException("dd\uFFFD", (java.lang.Throwable)var30, (java.io.Serializable)0);
    org.jsecurity.session.SessionException var33 = new org.jsecurity.session.SessionException("dd\uFFFD", (java.lang.Throwable)var30);
    var25.add((java.lang.Object)var33, "org.jsecurity.config.ConfigurationException: dd\uFFFD");
    var18.onLogout((org.jsecurity.subject.PrincipalCollection)var25);
    org.jsecurity.authc.pam.FirstSuccessfulAuthenticationStrategy var37 = new org.jsecurity.authc.pam.FirstSuccessfulAuthenticationStrategy();
    org.jsecurity.authz.UnauthorizedException var39 = new org.jsecurity.authz.UnauthorizedException("org.jsecurity.config.ConfigurationException: dd\uFFFD");
    java.lang.Throwable[] var40 = var39.getSuppressed();
    java.util.List var41 = org.jsecurity.util.CollectionUtils.asList((java.lang.Object[])var40);
    org.jsecurity.authc.UsernamePasswordToken var42 = new org.jsecurity.authc.UsernamePasswordToken();
    java.lang.String var43 = var42.getUsername();
    java.net.InetAddress var44 = var42.getInetAddress();
    org.jsecurity.authc.AuthenticationInfo var45 = var37.beforeAllAttempts((java.util.Collection)var41, (org.jsecurity.authc.AuthenticationToken)var42);
    boolean[] var46 = var0.hasRoles((org.jsecurity.subject.PrincipalCollection)var25, var41);
    org.jsecurity.subject.Subject var47 = var0.getSubject();
    org.jsecurity.subject.RememberMeManager var48 = var0.getRememberMeManager();
    var0.destroy();
    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      var0.setRememberMeDecryptionCipherKeyHex("c100a0dc-e80a-4d5c-baea-453d05633754");
      fail("Expected exception of type java.lang.IllegalStateException");
    } catch (java.lang.IllegalStateException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var2);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var3);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var4);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var12);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var13);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var14);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var20);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var21);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var22);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var40);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var41);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var43);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var44);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var45);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var46);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var47);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var48);

  }

  public void test326() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest5.test326");


    org.jsecurity.authz.UnauthorizedException var3 = new org.jsecurity.authz.UnauthorizedException("org.jsecurity.config.ConfigurationException: dd\uFFFD");
    org.jsecurity.authc.pam.UnsupportedTokenException var4 = new org.jsecurity.authc.pam.UnsupportedTokenException("\uFFFD\uFFFD#\uFFFD\uFFFD.\uFFFD+rr\uFFFD\u07CA\u0000\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\u01E9\uFFFD*'\u0000\u0000", (java.lang.Throwable)var3);
    org.jsecurity.util.UnavailableConstructorException var5 = new org.jsecurity.util.UnavailableConstructorException("92cc9917-55ec-4f8f-9133-00d142a214d9", (java.lang.Throwable)var4);

  }

  public void test327() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest5.test327");


    org.jsecurity.authz.permission.InvalidPermissionStringException var2 = new org.jsecurity.authz.permission.InvalidPermissionStringException("783ccd31-48a8-42dd-890f-df885a7baaff", "ZGT/");
    org.jsecurity.session.InvalidSessionException var3 = new org.jsecurity.session.InvalidSessionException((java.io.Serializable)var2);
    org.jsecurity.io.SerializationException var4 = new org.jsecurity.io.SerializationException((java.lang.Throwable)var2);

  }

  public void test328() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest5.test328");


    org.jsecurity.util.AntPathMatcher var0 = new org.jsecurity.util.AntPathMatcher();
    boolean var3 = var0.matchStart("org.jsecurity.authc.IncorrectCredentialsException: \u0000\u0000", "ZGT/");
    boolean var6 = var0.match("783ccd31-48a8-42dd-890f-df885a7baaff", "\uFFFD\uFFFD\u0000");
    boolean var9 = var0.matches("HashtableCache [orgjsecurityauthcCredentialsException783ccd3148a842dd890fdf885a7baafAA==]", "\u0000\u0000\u0000");
    boolean var12 = var0.matchStart("org.jsecurity.realm.text.PropertiesRealm-209-authorization", "3d3a8192-1e92-477d-8aa6-fc837cbc6148");
    boolean var15 = var0.matchStart("64631962-53d7-470e-ad1f-c62447f07c50", "6490c538-8530-4846-9179-12c067fd8651");
    boolean var18 = var0.matchStart("e9f887e9-5a0f-4c10-a504-0e788ce2df31", "4d3ad5aa-ac3f-4e82-99cd-6644fc7349ee");
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var3 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var6 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var9 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var12 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var15 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var18 == false);

  }

  public void test329() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest5.test329");


    org.jsecurity.session.mgt.ExecutorServiceSessionValidationScheduler var0 = new org.jsecurity.session.mgt.ExecutorServiceSessionValidationScheduler();
    long var1 = var0.getInterval();
    long var2 = var0.getInterval();
    boolean var3 = var0.isEnabled();
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var1 == 3600000L);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var2 == 3600000L);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var3 == false);

  }

  public void test330() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest5.test330");


    org.jsecurity.authz.UnauthorizedException var2 = new org.jsecurity.authz.UnauthorizedException();
    org.jsecurity.session.SessionException var4 = new org.jsecurity.session.SessionException("", (java.lang.Throwable)var2, (java.io.Serializable)"org.jsecurity.config.ConfigurationException: dd\uFFFD");
    org.jsecurity.authc.LockedAccountException var5 = new org.jsecurity.authc.LockedAccountException("7ef36680-c8d0-4ff6-a301-9038bb416b9d", (java.lang.Throwable)var4);
    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      org.jsecurity.crypto.hash.Sha512Hash var6 = new org.jsecurity.crypto.hash.Sha512Hash((java.lang.Object)var5);
      fail("Expected exception of type org.jsecurity.codec.CodecException");
    } catch (org.jsecurity.codec.CodecException e) {
      // Expected exception.
    }

  }

  public void test331() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest5.test331");


    org.jsecurity.crypto.hash.Sha256Hash var1 = org.jsecurity.crypto.hash.Sha256Hash.fromBase64String("org.jsecurity.realm.text.PropertiesRealm-400-authorization");
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var1);

  }

  public void test332() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest5.test332");


    org.jsecurity.session.mgt.DefaultSessionManager var0 = new org.jsecurity.session.mgt.DefaultSessionManager();
    org.jsecurity.session.mgt.SessionValidationScheduler var1 = var0.getSessionValidationScheduler();
    long var2 = var0.getGlobalSessionTimeout();
    org.jsecurity.authz.SimpleAuthorizingAccount var3 = new org.jsecurity.authz.SimpleAuthorizingAccount();
    org.jsecurity.authz.SimpleAuthorizationInfo var4 = new org.jsecurity.authz.SimpleAuthorizationInfo();
    var4.addRole("a2b823b1e72eae2b727289df8a00a89df8a0bab6ad8a89c4c5c7a9b62a270000");
    org.jsecurity.authz.SimpleAuthorizationInfo var7 = new org.jsecurity.authz.SimpleAuthorizationInfo();
    var7.addRole("a2b823b1e72eae2b727289df8a00a89df8a0bab6ad8a89c4c5c7a9b62a270000");
    org.jsecurity.session.UnknownSessionException var14 = new org.jsecurity.session.UnknownSessionException("dd\uFFFD", (java.io.Serializable)100.0f);
    org.jsecurity.subject.SubjectException var15 = new org.jsecurity.subject.SubjectException("dd\uFFFD", (java.lang.Throwable)var14);
    org.jsecurity.io.SerializationException var16 = new org.jsecurity.io.SerializationException("", (java.lang.Throwable)var15);
    java.lang.Throwable[] var17 = var15.getSuppressed();
    java.util.Set var18 = org.jsecurity.util.CollectionUtils.asSet((java.lang.Object[])var17);
    var7.addRoles((java.util.Collection)var18);
    var4.setObjectPermissions(var18);
    var3.setSimpleRoles(var18);
    java.util.Set var22 = var3.getPermissions();
    org.jsecurity.authz.SimpleAuthorizationInfo var23 = new org.jsecurity.authz.SimpleAuthorizationInfo();
    var23.addRole("a2b823b1e72eae2b727289df8a00a89df8a0bab6ad8a89c4c5c7a9b62a270000");
    org.jsecurity.authz.SimpleAuthorizationInfo var26 = new org.jsecurity.authz.SimpleAuthorizationInfo();
    var26.addRole("a2b823b1e72eae2b727289df8a00a89df8a0bab6ad8a89c4c5c7a9b62a270000");
    org.jsecurity.session.UnknownSessionException var33 = new org.jsecurity.session.UnknownSessionException("dd\uFFFD", (java.io.Serializable)100.0f);
    org.jsecurity.subject.SubjectException var34 = new org.jsecurity.subject.SubjectException("dd\uFFFD", (java.lang.Throwable)var33);
    org.jsecurity.io.SerializationException var35 = new org.jsecurity.io.SerializationException("", (java.lang.Throwable)var34);
    java.lang.Throwable[] var36 = var34.getSuppressed();
    java.util.Set var37 = org.jsecurity.util.CollectionUtils.asSet((java.lang.Object[])var36);
    var26.addRoles((java.util.Collection)var37);
    var23.setObjectPermissions(var37);
    var3.checkRoles((java.util.Collection)var37);
    org.jsecurity.realm.text.PropertiesRealm var41 = new org.jsecurity.realm.text.PropertiesRealm();
    org.jsecurity.realm.activedirectory.ActiveDirectoryRealm var42 = new org.jsecurity.realm.activedirectory.ActiveDirectoryRealm();
    org.jsecurity.authc.credential.Sha256CredentialsMatcher var43 = new org.jsecurity.authc.credential.Sha256CredentialsMatcher();
    var42.setCredentialsMatcher((org.jsecurity.authc.credential.CredentialsMatcher)var43);
    java.lang.String var45 = var42.getAuthorizationCacheName();
    var42.setPrincipalSuffix("org.jsecurity.config.ConfigurationException: dd\uFFFD");
    org.jsecurity.authz.permission.PermissionResolver var48 = var42.getPermissionResolver();
    var41.setPermissionResolver(var48);
    java.util.Set var50 = org.jsecurity.util.PermissionUtils.resolvePermissions((java.util.Collection)var37, var48);
    var0.setSessionListeners((java.util.Collection)var37);
    org.jsecurity.util.UnknownClassException var54 = new org.jsecurity.util.UnknownClassException("b6cd6008-ae80-4bfd-ae0c-5041e0198a79");
    org.jsecurity.config.UnresolveableReferenceException var55 = new org.jsecurity.config.UnresolveableReferenceException((java.lang.Throwable)var54);
    org.jsecurity.util.InstantiationException var56 = new org.jsecurity.util.InstantiationException("af4b3469-92f9-4bb0-addf-358eefb0cfc9", (java.lang.Throwable)var54);
    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      var0.stop((java.io.Serializable)var56);
      fail("Expected exception of type org.jsecurity.session.UnknownSessionException");
    } catch (org.jsecurity.session.UnknownSessionException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var2 == 1800000L);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var17);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var18);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var22);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var36);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var37);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var45);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var48);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var50);

  }

  public void test333() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest5.test333");


    org.jsecurity.authc.UsernamePasswordToken var2 = new org.jsecurity.authc.UsernamePasswordToken("8c2217ad-c6d4-4aa9-b1d5-b939ed7334c8", "ff68c978-9c6a-4e92-8f51-9959805afd36");

  }

  public void test334() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest5.test334");


    org.jsecurity.session.mgt.SimpleSession var0 = new org.jsecurity.session.mgt.SimpleSession();
    java.util.Date var1 = var0.getLastAccessTime();
    boolean var2 = var0.isValid();
    java.lang.String[] var5 = org.jsecurity.util.StringUtils.split("dade3937-164f-46fa-a082-f5f54b3b44e1", ' ');
    java.util.List var6 = org.jsecurity.util.CollectionUtils.asList((java.lang.Object[])var5);
    org.jsecurity.authz.aop.RoleAnnotationMethodInterceptor var7 = new org.jsecurity.authz.aop.RoleAnnotationMethodInterceptor();
    org.jsecurity.aop.AnnotationHandler var8 = var7.getHandler();
    java.lang.Class var9 = var8.getAnnotationClass();
    var0.setAttribute((java.lang.Object)var6, (java.lang.Object)var9);
    boolean var11 = var0.isExpired();
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var2 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var5);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var6);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var8);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var9);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var11 == false);

  }

  public void test335() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest5.test335");


    org.jsecurity.cache.HashtableCache var1 = new org.jsecurity.cache.HashtableCache("orgjsecurityauthcCredentialsException783ccd3148a842dd890fdf885a7baafAA==");
    int var2 = var1.size();
    org.jsecurity.session.UnknownSessionException var7 = new org.jsecurity.session.UnknownSessionException("dd\uFFFD", (java.io.Serializable)100.0f);
    org.jsecurity.subject.SubjectException var8 = new org.jsecurity.subject.SubjectException("dd\uFFFD", (java.lang.Throwable)var7);
    org.jsecurity.authc.AccountException var9 = new org.jsecurity.authc.AccountException("hi!", (java.lang.Throwable)var8);
    org.jsecurity.session.UnknownSessionException var10 = new org.jsecurity.session.UnknownSessionException((java.lang.Throwable)var8);
    org.jsecurity.codec.CodecException var11 = new org.jsecurity.codec.CodecException((java.lang.Throwable)var8);
    org.jsecurity.config.UnresolveableReferenceException var12 = new org.jsecurity.config.UnresolveableReferenceException((java.lang.Throwable)var8);
    char[] var16 = new char[] { ' ', ' '};
    org.jsecurity.authc.UsernamePasswordToken var17 = new org.jsecurity.authc.UsernamePasswordToken("hi!", var16);
    char[] var21 = new char[] { '4', '#'};
    org.jsecurity.authc.UsernamePasswordToken var22 = new org.jsecurity.authc.UsernamePasswordToken("\u0000\u0000", var21);
    var17.setPassword(var21);
    var1.put((java.lang.Object)var8, (java.lang.Object)var21);
    org.jsecurity.realm.activedirectory.ActiveDirectoryRealm var26 = new org.jsecurity.realm.activedirectory.ActiveDirectoryRealm();
    var26.init();
    var26.setSystemPassword("dd\uFFFD");
    org.jsecurity.authz.aop.GuestAnnotationHandler var30 = new org.jsecurity.authz.aop.GuestAnnotationHandler();
    java.lang.Class var31 = var30.getAnnotationClass();
    var26.setAuthenticationTokenClass(var31);
    org.jsecurity.mgt.DefaultSecurityManager var33 = new org.jsecurity.mgt.DefaultSecurityManager((org.jsecurity.realm.Realm)var26);
    org.jsecurity.mgt.DefaultSecurityManager var34 = new org.jsecurity.mgt.DefaultSecurityManager();
    java.io.InputStream var36 = org.jsecurity.util.ClassUtils.getResourceAsStream("");
    java.lang.Object[] var37 = new java.lang.Object[] { var36};
    java.util.List var38 = org.jsecurity.util.CollectionUtils.asList(var37);
    org.jsecurity.authc.pam.ModularRealmAuthenticator var39 = new org.jsecurity.authc.pam.ModularRealmAuthenticator(var38);
    org.jsecurity.authc.pam.AllSuccessfulModularAuthenticationStrategy var40 = new org.jsecurity.authc.pam.AllSuccessfulModularAuthenticationStrategy();
    var39.setModularAuthenticationStrategy((org.jsecurity.authc.pam.ModularAuthenticationStrategy)var40);
    org.jsecurity.authz.SimpleAuthorizationInfo var42 = new org.jsecurity.authz.SimpleAuthorizationInfo();
    var42.addStringPermission("hi!");
    java.io.InputStream var46 = org.jsecurity.util.ClassUtils.getResourceAsStream("");
    java.lang.Object[] var47 = new java.lang.Object[] { var46};
    java.util.List var48 = org.jsecurity.util.CollectionUtils.asList(var47);
    var42.addRoles((java.util.Collection)var48);
    var39.setAuthenticationListeners((java.util.Collection)var48);
    var34.setSessionListeners((java.util.Collection)var48);
    org.jsecurity.realm.text.TextConfigurationRealm var52 = new org.jsecurity.realm.text.TextConfigurationRealm();
    java.io.InputStream var54 = org.jsecurity.util.ClassUtils.getResourceAsStream("");
    java.lang.Object[] var55 = new java.lang.Object[] { var54};
    java.util.List var56 = org.jsecurity.util.CollectionUtils.asList(var55);
    org.jsecurity.authc.pam.ModularRealmAuthenticator var57 = new org.jsecurity.authc.pam.ModularRealmAuthenticator(var56);
    org.jsecurity.subject.SimplePrincipalCollection var59 = new org.jsecurity.subject.SimplePrincipalCollection((java.util.Collection)var56, "org.jsecurity.authz.UnauthorizedException: org.jsecurity.session.ExpiredSessionException: ");
    org.jsecurity.session.UnknownSessionException var64 = new org.jsecurity.session.UnknownSessionException("dd\uFFFD", (java.io.Serializable)100.0f);
    org.jsecurity.session.SessionException var66 = new org.jsecurity.session.SessionException("dd\uFFFD", (java.lang.Throwable)var64, (java.io.Serializable)0);
    org.jsecurity.session.SessionException var67 = new org.jsecurity.session.SessionException("dd\uFFFD", (java.lang.Throwable)var64);
    var59.add((java.lang.Object)var67, "org.jsecurity.config.ConfigurationException: dd\uFFFD");
    var52.onLogout((org.jsecurity.subject.PrincipalCollection)var59);
    org.jsecurity.authc.pam.FirstSuccessfulAuthenticationStrategy var71 = new org.jsecurity.authc.pam.FirstSuccessfulAuthenticationStrategy();
    org.jsecurity.authz.UnauthorizedException var73 = new org.jsecurity.authz.UnauthorizedException("org.jsecurity.config.ConfigurationException: dd\uFFFD");
    java.lang.Throwable[] var74 = var73.getSuppressed();
    java.util.List var75 = org.jsecurity.util.CollectionUtils.asList((java.lang.Object[])var74);
    org.jsecurity.authc.UsernamePasswordToken var76 = new org.jsecurity.authc.UsernamePasswordToken();
    java.lang.String var77 = var76.getUsername();
    java.net.InetAddress var78 = var76.getInetAddress();
    org.jsecurity.authc.AuthenticationInfo var79 = var71.beforeAllAttempts((java.util.Collection)var75, (org.jsecurity.authc.AuthenticationToken)var76);
    boolean[] var80 = var34.hasRoles((org.jsecurity.subject.PrincipalCollection)var59, var75);
    org.jsecurity.session.mgt.SessionManager var81 = var34.getSessionManager();
    var33.setSessionManager(var81);
    org.jsecurity.cache.CacheManager var83 = var33.getCacheManager();
    var1.put((java.lang.Object)"org.jsecurity.config.ConfigurationException: dd\uFFFD-4org.jsecurity.config.ConfigurationException: dd\uFFFD02-8085-950org.jsecurity.config.ConfigurationException: dd\uFFFDbb026org.jsecurity.config.ConfigurationException: dd\uFFFD06", (java.lang.Object)var33);
    org.jsecurity.session.mgt.DefaultSessionManager var85 = new org.jsecurity.session.mgt.DefaultSessionManager();
    org.jsecurity.session.mgt.SessionValidationScheduler var86 = var85.getSessionValidationScheduler();
    org.jsecurity.subject.InvalidSubjectException var88 = new org.jsecurity.subject.InvalidSubjectException("NfxhYN7ItBfRAmDBmprtU73ghfEEPpcDJrHPkZ06wiY=");
    boolean var89 = var85.isValid((java.io.Serializable)var88);
    org.jsecurity.cache.ehcache.EhCacheManager var90 = new org.jsecurity.cache.ehcache.EhCacheManager();
    net.sf.ehcache.CacheManager var91 = var90.getCacheManager();
    var90.destroy();
    net.sf.ehcache.CacheManager var93 = var90.getCacheManager();
    net.sf.ehcache.CacheManager var94 = var90.getCacheManager();
    var90.init();
    var85.setCacheManager((org.jsecurity.cache.CacheManager)var90);
    var33.setCacheManager((org.jsecurity.cache.CacheManager)var90);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var2 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var16);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var21);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var31);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var36);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var37);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var38);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var46);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var47);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var48);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var54);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var55);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var56);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var74);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var75);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var77);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var78);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var79);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var80);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var81);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var83);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var86);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var89 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var91);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var93);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var94);

  }

  public void test336() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest5.test336");


    java.io.InputStream var1 = org.jsecurity.util.ClassUtils.getResourceAsStream("");
    java.lang.Object[] var2 = new java.lang.Object[] { var1};
    java.util.List var3 = org.jsecurity.util.CollectionUtils.asList(var2);
    org.jsecurity.authc.pam.ModularRealmAuthenticator var4 = new org.jsecurity.authc.pam.ModularRealmAuthenticator(var3);
    org.jsecurity.authc.pam.AllSuccessfulModularAuthenticationStrategy var5 = new org.jsecurity.authc.pam.AllSuccessfulModularAuthenticationStrategy();
    var4.setModularAuthenticationStrategy((org.jsecurity.authc.pam.ModularAuthenticationStrategy)var5);
    org.jsecurity.authz.SimpleAuthorizationInfo var7 = new org.jsecurity.authz.SimpleAuthorizationInfo();
    var7.addStringPermission("hi!");
    java.io.InputStream var11 = org.jsecurity.util.ClassUtils.getResourceAsStream("");
    java.lang.Object[] var12 = new java.lang.Object[] { var11};
    java.util.List var13 = org.jsecurity.util.CollectionUtils.asList(var12);
    var7.addRoles((java.util.Collection)var13);
    var4.setAuthenticationListeners((java.util.Collection)var13);
    org.jsecurity.realm.activedirectory.ActiveDirectoryRealm var16 = new org.jsecurity.realm.activedirectory.ActiveDirectoryRealm();
    var16.setPrincipalSuffix("");
    var4.setRealm((org.jsecurity.realm.Realm)var16);
    org.jsecurity.authc.pam.FirstSuccessfulAuthenticationStrategy var20 = new org.jsecurity.authc.pam.FirstSuccessfulAuthenticationStrategy();
    org.jsecurity.authz.UnauthorizedException var22 = new org.jsecurity.authz.UnauthorizedException("org.jsecurity.config.ConfigurationException: dd\uFFFD");
    java.lang.Throwable[] var23 = var22.getSuppressed();
    java.util.List var24 = org.jsecurity.util.CollectionUtils.asList((java.lang.Object[])var23);
    org.jsecurity.authc.UsernamePasswordToken var25 = new org.jsecurity.authc.UsernamePasswordToken();
    java.lang.String var26 = var25.getUsername();
    java.net.InetAddress var27 = var25.getInetAddress();
    org.jsecurity.authc.AuthenticationInfo var28 = var20.beforeAllAttempts((java.util.Collection)var24, (org.jsecurity.authc.AuthenticationToken)var25);
    var4.setModularAuthenticationStrategy((org.jsecurity.authc.pam.ModularAuthenticationStrategy)var20);
    org.jsecurity.realm.text.PropertiesRealm var30 = new org.jsecurity.realm.text.PropertiesRealm();
    java.lang.String var31 = var30.getUserDefinitions();
    var30.destroy();
    var4.setRealm((org.jsecurity.realm.Realm)var30);
    var30.setUseXmlFormat(false);
    org.jsecurity.codec.CodecException var38 = new org.jsecurity.codec.CodecException("dd\uFFFD");
    org.jsecurity.authc.ConcurrentAccessException var39 = new org.jsecurity.authc.ConcurrentAccessException("org.jsecurity.authz.UnauthorizedException: org.jsecurity.session.ExpiredSessionException: ", (java.lang.Throwable)var38);
    org.jsecurity.subject.SimplePrincipalCollection var41 = new org.jsecurity.subject.SimplePrincipalCollection((java.lang.Object)var38, "");
    org.jsecurity.authc.pam.FirstSuccessfulAuthenticationStrategy var42 = new org.jsecurity.authc.pam.FirstSuccessfulAuthenticationStrategy();
    org.jsecurity.authz.UnauthorizedException var44 = new org.jsecurity.authz.UnauthorizedException("org.jsecurity.config.ConfigurationException: dd\uFFFD");
    java.lang.Throwable[] var45 = var44.getSuppressed();
    java.util.List var46 = org.jsecurity.util.CollectionUtils.asList((java.lang.Object[])var45);
    org.jsecurity.authc.UsernamePasswordToken var47 = new org.jsecurity.authc.UsernamePasswordToken();
    java.lang.String var48 = var47.getUsername();
    java.net.InetAddress var49 = var47.getInetAddress();
    org.jsecurity.authc.AuthenticationInfo var50 = var42.beforeAllAttempts((java.util.Collection)var46, (org.jsecurity.authc.AuthenticationToken)var47);
    org.jsecurity.session.UnknownSessionException var55 = new org.jsecurity.session.UnknownSessionException("dd\uFFFD", (java.io.Serializable)100.0f);
    org.jsecurity.subject.SubjectException var56 = new org.jsecurity.subject.SubjectException("dd\uFFFD", (java.lang.Throwable)var55);
    org.jsecurity.io.SerializationException var57 = new org.jsecurity.io.SerializationException("", (java.lang.Throwable)var56);
    java.lang.Throwable[] var58 = var56.getSuppressed();
    java.util.Set var59 = org.jsecurity.util.CollectionUtils.asSet((java.lang.Object[])var58);
    org.jsecurity.authc.SimpleAccount var60 = new org.jsecurity.authc.SimpleAccount((org.jsecurity.subject.PrincipalCollection)var41, (java.lang.Object)var46, var59);
    var60.addStringPermission("org.jsecurity.config.ConfigurationException: dd\uFFFD");
    org.jsecurity.subject.PrincipalCollection var63 = var60.getPrincipals();
    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      boolean var65 = var30.hasRole(var63, "2845ef71-576b-45b9-aa13-d72d8501e79d");
      fail("Expected exception of type java.util.NoSuchElementException");
    } catch (java.util.NoSuchElementException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var1);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var2);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var3);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var11);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var12);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var13);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var23);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var24);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var26);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var27);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var28);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var31);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var45);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var46);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var48);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var49);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var50);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var58);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var59);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var63);

  }

  public void test337() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest5.test337");


    org.jsecurity.authz.permission.InvalidPermissionStringException var2 = new org.jsecurity.authz.permission.InvalidPermissionStringException("7aaa0eff-7052-4953-955a-cd6cddd8c21c", "ff1bb54d-80f9-4308-a260-ff3ddf1355e9");
    org.jsecurity.authc.LockedAccountException var3 = new org.jsecurity.authc.LockedAccountException((java.lang.Throwable)var2);
    org.jsecurity.util.UnknownClassException var4 = new org.jsecurity.util.UnknownClassException((java.lang.Throwable)var2);

  }

  public void test338() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest5.test338");


    org.jsecurity.cache.HashtableCache var1 = new org.jsecurity.cache.HashtableCache("orgjsecurityauthcCredentialsException783ccd3148a842dd890fdf885a7baafAA==");
    int var2 = var1.size();
    org.jsecurity.session.UnknownSessionException var7 = new org.jsecurity.session.UnknownSessionException("dd\uFFFD", (java.io.Serializable)100.0f);
    org.jsecurity.subject.SubjectException var8 = new org.jsecurity.subject.SubjectException("dd\uFFFD", (java.lang.Throwable)var7);
    org.jsecurity.authc.AccountException var9 = new org.jsecurity.authc.AccountException("hi!", (java.lang.Throwable)var8);
    org.jsecurity.session.UnknownSessionException var10 = new org.jsecurity.session.UnknownSessionException((java.lang.Throwable)var8);
    org.jsecurity.codec.CodecException var11 = new org.jsecurity.codec.CodecException((java.lang.Throwable)var8);
    org.jsecurity.config.UnresolveableReferenceException var12 = new org.jsecurity.config.UnresolveableReferenceException((java.lang.Throwable)var8);
    char[] var16 = new char[] { ' ', ' '};
    org.jsecurity.authc.UsernamePasswordToken var17 = new org.jsecurity.authc.UsernamePasswordToken("hi!", var16);
    char[] var21 = new char[] { '4', '#'};
    org.jsecurity.authc.UsernamePasswordToken var22 = new org.jsecurity.authc.UsernamePasswordToken("\u0000\u0000", var21);
    var17.setPassword(var21);
    var1.put((java.lang.Object)var8, (java.lang.Object)var21);
    org.jsecurity.authc.IncorrectCredentialsException var27 = new org.jsecurity.authc.IncorrectCredentialsException("dd\uFFFD");
    org.jsecurity.authc.ExcessiveAttemptsException var28 = new org.jsecurity.authc.ExcessiveAttemptsException("2e460aa1-7db8-4a99-ad7a-a5b2ab41638e", (java.lang.Throwable)var27);
    java.lang.Object var29 = var1.get((java.lang.Object)var28);
    org.jsecurity.session.StoppedSessionException var30 = new org.jsecurity.session.StoppedSessionException((java.io.Serializable)var28);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var2 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var16);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var21);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var29);

  }

  public void test339() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest5.test339");


    org.jsecurity.session.UnknownSessionException var7 = new org.jsecurity.session.UnknownSessionException("dd\uFFFD", (java.io.Serializable)100.0f);
    org.jsecurity.subject.SubjectException var8 = new org.jsecurity.subject.SubjectException("dd\uFFFD", (java.lang.Throwable)var7);
    org.jsecurity.authc.AccountException var9 = new org.jsecurity.authc.AccountException("hi!", (java.lang.Throwable)var8);
    org.jsecurity.session.ExpiredSessionException var10 = new org.jsecurity.session.ExpiredSessionException("dd\uFFFD", (java.io.Serializable)var9);
    org.jsecurity.session.SessionException var11 = new org.jsecurity.session.SessionException((java.lang.Throwable)var9);
    org.jsecurity.authc.AccountException var12 = new org.jsecurity.authc.AccountException("4f79d01b-a90a-4319-b7ab-e8e15489bc6e", (java.lang.Throwable)var11);
    org.jsecurity.authc.pam.UnsupportedTokenException var13 = new org.jsecurity.authc.pam.UnsupportedTokenException((java.lang.Throwable)var11);
    org.jsecurity.session.UnknownSessionException var14 = new org.jsecurity.session.UnknownSessionException("orgjsecurityauthcCredentialsException783ccd3148a842dd890fdf885a7baafAA==-orgjsecurityauthcCredentialsException783ccd3148a842dd890fdf885a7baafAA==6", (java.lang.Throwable)var11);

  }

  public void test340() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest5.test340");


    org.jsecurity.authz.permission.AllPermission var1 = new org.jsecurity.authz.permission.AllPermission();
    org.jsecurity.session.StoppedSessionException var2 = new org.jsecurity.session.StoppedSessionException("org.jsecurity.authc.UsernamePasswordToken - \u0000\u0000, rememberMe=false", (java.io.Serializable)var1);
    org.jsecurity.authz.SimpleAuthorizationInfo var4 = new org.jsecurity.authz.SimpleAuthorizationInfo();
    org.jsecurity.session.UnknownSessionException var9 = new org.jsecurity.session.UnknownSessionException("dd\uFFFD", (java.io.Serializable)100.0f);
    org.jsecurity.subject.SubjectException var10 = new org.jsecurity.subject.SubjectException("dd\uFFFD", (java.lang.Throwable)var9);
    org.jsecurity.io.SerializationException var11 = new org.jsecurity.io.SerializationException("", (java.lang.Throwable)var10);
    java.lang.Throwable[] var12 = var10.getSuppressed();
    java.util.Set var13 = org.jsecurity.util.CollectionUtils.asSet((java.lang.Object[])var12);
    var4.setStringPermissions(var13);
    java.util.Set var15 = var4.getRoles();
    org.jsecurity.authz.SimpleAuthorizationInfo var16 = new org.jsecurity.authz.SimpleAuthorizationInfo();
    var16.addRole("a2b823b1e72eae2b727289df8a00a89df8a0bab6ad8a89c4c5c7a9b62a270000");
    org.jsecurity.session.UnknownSessionException var23 = new org.jsecurity.session.UnknownSessionException("dd\uFFFD", (java.io.Serializable)100.0f);
    org.jsecurity.subject.SubjectException var24 = new org.jsecurity.subject.SubjectException("dd\uFFFD", (java.lang.Throwable)var23);
    org.jsecurity.io.SerializationException var25 = new org.jsecurity.io.SerializationException("", (java.lang.Throwable)var24);
    java.lang.Throwable[] var26 = var24.getSuppressed();
    java.util.Set var27 = org.jsecurity.util.CollectionUtils.asSet((java.lang.Object[])var26);
    var16.addRoles((java.util.Collection)var27);
    var4.setRoles(var27);
    org.jsecurity.authz.SimpleRole var30 = new org.jsecurity.authz.SimpleRole("org.jsecurity.authz.UnauthorizedException: org.jsecurity.session.ExpiredSessionException: ", var27);
    org.jsecurity.authz.permission.WildcardPermissionResolver var31 = new org.jsecurity.authz.permission.WildcardPermissionResolver();
    org.jsecurity.authz.Permission var33 = var31.resolvePermission("hi!");
    boolean var34 = var30.isPermitted(var33);
    boolean var35 = var1.implies(var33);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var12);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var13);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var15);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var26);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var27);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var33);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var34 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var35 == true);

  }

  public void test341() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest5.test341");


    org.jsecurity.session.UnknownSessionException var7 = new org.jsecurity.session.UnknownSessionException("dd\uFFFD", (java.io.Serializable)100.0f);
    org.jsecurity.config.ConfigurationException var8 = new org.jsecurity.config.ConfigurationException("dd\uFFFD", (java.lang.Throwable)var7);
    org.jsecurity.session.ExpiredSessionException var10 = new org.jsecurity.session.ExpiredSessionException("", (java.lang.Throwable)var8, (java.io.Serializable)true);
    org.jsecurity.authc.pam.UnsupportedTokenException var11 = new org.jsecurity.authc.pam.UnsupportedTokenException((java.lang.Throwable)var10);
    org.jsecurity.authc.AccountException var12 = new org.jsecurity.authc.AccountException((java.lang.Throwable)var11);
    org.jsecurity.authz.UnauthorizedException var13 = new org.jsecurity.authz.UnauthorizedException("a2b823b1e72eae2b727289df8a00a89df8a0bab6ad8a89c4c5c7a9b62a270000", (java.lang.Throwable)var12);
    org.jsecurity.codec.CodecException var16 = new org.jsecurity.codec.CodecException("dd\uFFFD");
    org.jsecurity.authc.ConcurrentAccessException var17 = new org.jsecurity.authc.ConcurrentAccessException("org.jsecurity.authz.UnauthorizedException: org.jsecurity.session.ExpiredSessionException: ", (java.lang.Throwable)var16);
    org.jsecurity.subject.SimplePrincipalCollection var19 = new org.jsecurity.subject.SimplePrincipalCollection((java.lang.Object)var16, "");
    java.io.InputStream var21 = org.jsecurity.util.ClassUtils.getResourceAsStream("");
    java.lang.Object[] var22 = new java.lang.Object[] { var21};
    java.util.List var23 = org.jsecurity.util.CollectionUtils.asList(var22);
    org.jsecurity.authc.pam.ModularRealmAuthenticator var24 = new org.jsecurity.authc.pam.ModularRealmAuthenticator(var23);
    org.jsecurity.authc.pam.AllSuccessfulModularAuthenticationStrategy var25 = new org.jsecurity.authc.pam.AllSuccessfulModularAuthenticationStrategy();
    var24.setModularAuthenticationStrategy((org.jsecurity.authc.pam.ModularAuthenticationStrategy)var25);
    org.jsecurity.authz.SimpleAuthorizationInfo var27 = new org.jsecurity.authz.SimpleAuthorizationInfo();
    var27.addStringPermission("hi!");
    java.io.InputStream var31 = org.jsecurity.util.ClassUtils.getResourceAsStream("");
    java.lang.Object[] var32 = new java.lang.Object[] { var31};
    java.util.List var33 = org.jsecurity.util.CollectionUtils.asList(var32);
    var27.addRoles((java.util.Collection)var33);
    var24.setAuthenticationListeners((java.util.Collection)var33);
    org.jsecurity.realm.activedirectory.ActiveDirectoryRealm var36 = new org.jsecurity.realm.activedirectory.ActiveDirectoryRealm();
    var36.setPrincipalSuffix("");
    var24.setRealm((org.jsecurity.realm.Realm)var36);
    org.jsecurity.authc.pam.FirstSuccessfulAuthenticationStrategy var40 = new org.jsecurity.authc.pam.FirstSuccessfulAuthenticationStrategy();
    org.jsecurity.authz.UnauthorizedException var42 = new org.jsecurity.authz.UnauthorizedException("org.jsecurity.config.ConfigurationException: dd\uFFFD");
    java.lang.Throwable[] var43 = var42.getSuppressed();
    java.util.List var44 = org.jsecurity.util.CollectionUtils.asList((java.lang.Object[])var43);
    org.jsecurity.authc.UsernamePasswordToken var45 = new org.jsecurity.authc.UsernamePasswordToken();
    java.lang.String var46 = var45.getUsername();
    java.net.InetAddress var47 = var45.getInetAddress();
    org.jsecurity.authc.AuthenticationInfo var48 = var40.beforeAllAttempts((java.util.Collection)var44, (org.jsecurity.authc.AuthenticationToken)var45);
    var24.setModularAuthenticationStrategy((org.jsecurity.authc.pam.ModularAuthenticationStrategy)var40);
    org.jsecurity.authc.SimpleAccount var50 = new org.jsecurity.authc.SimpleAccount((org.jsecurity.subject.PrincipalCollection)var19, (java.lang.Object)var24);
    java.util.Collection var51 = var50.getObjectPermissions();
    java.util.Collection var52 = var50.getObjectPermissions();
    org.jsecurity.codec.CodecException var55 = new org.jsecurity.codec.CodecException("dd\uFFFD");
    org.jsecurity.authc.ConcurrentAccessException var56 = new org.jsecurity.authc.ConcurrentAccessException("org.jsecurity.authz.UnauthorizedException: org.jsecurity.session.ExpiredSessionException: ", (java.lang.Throwable)var55);
    org.jsecurity.subject.SimplePrincipalCollection var58 = new org.jsecurity.subject.SimplePrincipalCollection((java.lang.Object)var55, "");
    org.jsecurity.authc.pam.FirstSuccessfulAuthenticationStrategy var59 = new org.jsecurity.authc.pam.FirstSuccessfulAuthenticationStrategy();
    org.jsecurity.authz.UnauthorizedException var61 = new org.jsecurity.authz.UnauthorizedException("org.jsecurity.config.ConfigurationException: dd\uFFFD");
    java.lang.Throwable[] var62 = var61.getSuppressed();
    java.util.List var63 = org.jsecurity.util.CollectionUtils.asList((java.lang.Object[])var62);
    org.jsecurity.authc.UsernamePasswordToken var64 = new org.jsecurity.authc.UsernamePasswordToken();
    java.lang.String var65 = var64.getUsername();
    java.net.InetAddress var66 = var64.getInetAddress();
    org.jsecurity.authc.AuthenticationInfo var67 = var59.beforeAllAttempts((java.util.Collection)var63, (org.jsecurity.authc.AuthenticationToken)var64);
    org.jsecurity.session.UnknownSessionException var72 = new org.jsecurity.session.UnknownSessionException("dd\uFFFD", (java.io.Serializable)100.0f);
    org.jsecurity.subject.SubjectException var73 = new org.jsecurity.subject.SubjectException("dd\uFFFD", (java.lang.Throwable)var72);
    org.jsecurity.io.SerializationException var74 = new org.jsecurity.io.SerializationException("", (java.lang.Throwable)var73);
    java.lang.Throwable[] var75 = var73.getSuppressed();
    java.util.Set var76 = org.jsecurity.util.CollectionUtils.asSet((java.lang.Object[])var75);
    org.jsecurity.authc.SimpleAccount var77 = new org.jsecurity.authc.SimpleAccount((org.jsecurity.subject.PrincipalCollection)var58, (java.lang.Object)var63, var76);
    var50.setObjectPermissions(var76);
    org.jsecurity.session.UnknownSessionException var79 = new org.jsecurity.session.UnknownSessionException("b598ff3d-5685-4491-8ee6-585d37adb1db", (java.lang.Throwable)var13, (java.io.Serializable)var50);
    org.jsecurity.authc.ExpiredCredentialsException var80 = new org.jsecurity.authc.ExpiredCredentialsException("217bba52-4cec-45f3-9460-89f5d1508106", (java.lang.Throwable)var13);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var21);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var22);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var23);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var31);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var32);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var33);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var43);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var44);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var46);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var47);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var48);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var51);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var52);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var62);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var63);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var65);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var66);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var67);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var75);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var76);

  }

  public void test342() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest5.test342");


    org.jsecurity.authc.pam.AtLeastOneSuccessfulModularAuthenticationStrategy var0 = new org.jsecurity.authc.pam.AtLeastOneSuccessfulModularAuthenticationStrategy();
    org.jsecurity.authc.pam.AllSuccessfulModularAuthenticationStrategy var2 = new org.jsecurity.authc.pam.AllSuccessfulModularAuthenticationStrategy();
    char[] var4 = new char[] { };
    org.jsecurity.authc.UsernamePasswordToken var6 = new org.jsecurity.authc.UsernamePasswordToken("hi!", var4, true);
    org.jsecurity.authc.SimpleAccount var7 = new org.jsecurity.authc.SimpleAccount();
    var7.setCredentialsExpired(false);
    boolean var10 = var7.isLocked();
    org.jsecurity.authc.AuthenticationInfo var11 = var2.afterAllAttempts((org.jsecurity.authc.AuthenticationToken)var6, (org.jsecurity.authc.AuthenticationInfo)var7);
    char[] var14 = new char[] { };
    org.jsecurity.authc.UsernamePasswordToken var16 = new org.jsecurity.authc.UsernamePasswordToken("hi!", var14, true);
    org.jsecurity.authc.UsernamePasswordToken var17 = new org.jsecurity.authc.UsernamePasswordToken("\u0000\u0000", var14);
    var6.setPassword(var14);
    org.jsecurity.authc.UsernamePasswordToken var19 = new org.jsecurity.authc.UsernamePasswordToken("\u0000\u0000\u0000", var14);
    org.jsecurity.realm.text.TextConfigurationRealm var20 = new org.jsecurity.realm.text.TextConfigurationRealm();
    java.io.InputStream var22 = org.jsecurity.util.ClassUtils.getResourceAsStream("");
    java.lang.Object[] var23 = new java.lang.Object[] { var22};
    java.util.List var24 = org.jsecurity.util.CollectionUtils.asList(var23);
    org.jsecurity.authc.pam.ModularRealmAuthenticator var25 = new org.jsecurity.authc.pam.ModularRealmAuthenticator(var24);
    org.jsecurity.subject.SimplePrincipalCollection var27 = new org.jsecurity.subject.SimplePrincipalCollection((java.util.Collection)var24, "org.jsecurity.authz.UnauthorizedException: org.jsecurity.session.ExpiredSessionException: ");
    org.jsecurity.session.UnknownSessionException var32 = new org.jsecurity.session.UnknownSessionException("dd\uFFFD", (java.io.Serializable)100.0f);
    org.jsecurity.session.SessionException var34 = new org.jsecurity.session.SessionException("dd\uFFFD", (java.lang.Throwable)var32, (java.io.Serializable)0);
    org.jsecurity.session.SessionException var35 = new org.jsecurity.session.SessionException("dd\uFFFD", (java.lang.Throwable)var32);
    var27.add((java.lang.Object)var35, "org.jsecurity.config.ConfigurationException: dd\uFFFD");
    var20.onLogout((org.jsecurity.subject.PrincipalCollection)var27);
    org.jsecurity.authc.ExpiredCredentialsException var40 = new org.jsecurity.authc.ExpiredCredentialsException();
    org.jsecurity.session.ExpiredSessionException var41 = new org.jsecurity.session.ExpiredSessionException("", (java.lang.Throwable)var40);
    java.lang.Throwable[] var42 = var41.getSuppressed();
    org.jsecurity.io.ResourceException var43 = new org.jsecurity.io.ResourceException((java.lang.Throwable)var41);
    org.jsecurity.authc.SimpleAuthenticationInfo var44 = new org.jsecurity.authc.SimpleAuthenticationInfo((org.jsecurity.subject.PrincipalCollection)var27, (java.lang.Object)var41);
    org.jsecurity.authc.AuthenticationInfo var45 = var0.afterAllAttempts((org.jsecurity.authc.AuthenticationToken)var19, (org.jsecurity.authc.AuthenticationInfo)var44);
    org.jsecurity.codec.CodecException var48 = new org.jsecurity.codec.CodecException("dd\uFFFD");
    org.jsecurity.authc.ConcurrentAccessException var49 = new org.jsecurity.authc.ConcurrentAccessException("org.jsecurity.authz.UnauthorizedException: org.jsecurity.session.ExpiredSessionException: ", (java.lang.Throwable)var48);
    org.jsecurity.subject.SimplePrincipalCollection var51 = new org.jsecurity.subject.SimplePrincipalCollection((java.lang.Object)var48, "");
    boolean var52 = var51.isEmpty();
    java.util.List var53 = var51.asList();
    var44.setPrincipals((org.jsecurity.subject.PrincipalCollection)var51);
    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      org.jsecurity.crypto.hash.Sha512Hash var55 = new org.jsecurity.crypto.hash.Sha512Hash((java.lang.Object)var51);
      fail("Expected exception of type org.jsecurity.codec.CodecException");
    } catch (org.jsecurity.codec.CodecException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var4);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var10 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var11);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var14);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var22);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var23);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var24);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var42);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var45);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var52 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var53);

  }

  public void test343() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest5.test343");


    org.jsecurity.authc.pam.FirstSuccessfulAuthenticationStrategy var0 = new org.jsecurity.authc.pam.FirstSuccessfulAuthenticationStrategy();
    org.jsecurity.authz.UnauthorizedException var2 = new org.jsecurity.authz.UnauthorizedException("org.jsecurity.config.ConfigurationException: dd\uFFFD");
    java.lang.Throwable[] var3 = var2.getSuppressed();
    java.util.List var4 = org.jsecurity.util.CollectionUtils.asList((java.lang.Object[])var3);
    org.jsecurity.authc.UsernamePasswordToken var5 = new org.jsecurity.authc.UsernamePasswordToken();
    java.lang.String var6 = var5.getUsername();
    java.net.InetAddress var7 = var5.getInetAddress();
    org.jsecurity.authc.AuthenticationInfo var8 = var0.beforeAllAttempts((java.util.Collection)var4, (org.jsecurity.authc.AuthenticationToken)var5);
    org.jsecurity.realm.SimpleAccountRealm var10 = new org.jsecurity.realm.SimpleAccountRealm("hi!");
    java.lang.Class var11 = var10.getAuthenticationTokenClass();
    java.util.Collection var12 = org.jsecurity.util.CollectionUtils.emptyCollection(var11);
    org.jsecurity.authc.pam.AllSuccessfulModularAuthenticationStrategy var13 = new org.jsecurity.authc.pam.AllSuccessfulModularAuthenticationStrategy();
    char[] var15 = new char[] { };
    org.jsecurity.authc.UsernamePasswordToken var17 = new org.jsecurity.authc.UsernamePasswordToken("hi!", var15, true);
    org.jsecurity.authc.SimpleAccount var18 = new org.jsecurity.authc.SimpleAccount();
    var18.setCredentialsExpired(false);
    boolean var21 = var18.isLocked();
    org.jsecurity.authc.AuthenticationInfo var22 = var13.afterAllAttempts((org.jsecurity.authc.AuthenticationToken)var17, (org.jsecurity.authc.AuthenticationInfo)var18);
    org.jsecurity.authc.AuthenticationInfo var23 = var0.beforeAllAttempts(var12, (org.jsecurity.authc.AuthenticationToken)var17);
    java.lang.String var24 = var17.toString();
    org.jsecurity.authc.pam.AllSuccessfulModularAuthenticationStrategy var26 = new org.jsecurity.authc.pam.AllSuccessfulModularAuthenticationStrategy();
    char[] var28 = new char[] { };
    org.jsecurity.authc.UsernamePasswordToken var30 = new org.jsecurity.authc.UsernamePasswordToken("hi!", var28, true);
    org.jsecurity.authc.SimpleAccount var31 = new org.jsecurity.authc.SimpleAccount();
    var31.setCredentialsExpired(false);
    boolean var34 = var31.isLocked();
    org.jsecurity.authc.AuthenticationInfo var35 = var26.afterAllAttempts((org.jsecurity.authc.AuthenticationToken)var30, (org.jsecurity.authc.AuthenticationInfo)var31);
    char[] var38 = new char[] { };
    org.jsecurity.authc.UsernamePasswordToken var40 = new org.jsecurity.authc.UsernamePasswordToken("hi!", var38, true);
    org.jsecurity.authc.UsernamePasswordToken var41 = new org.jsecurity.authc.UsernamePasswordToken("\u0000\u0000", var38);
    var30.setPassword(var38);
    org.jsecurity.authc.UsernamePasswordToken var43 = new org.jsecurity.authc.UsernamePasswordToken("\u0000\u0000\u0000", var38);
    byte[] var44 = org.jsecurity.codec.Hex.decode(var38);
    var17.setPassword(var38);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var3);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var4);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var6);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var7);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var8);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var11);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var12);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var15);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var21 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var22);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var23);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var24 + "' != '" + "org.jsecurity.authc.UsernamePasswordToken - hi!, rememberMe=true"+ "'", var24.equals("org.jsecurity.authc.UsernamePasswordToken - hi!, rememberMe=true"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var28);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var34 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var35);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var38);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var44);

  }

  public void test344() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest5.test344");


    org.jsecurity.authc.pam.UnsupportedTokenException var0 = new org.jsecurity.authc.pam.UnsupportedTokenException();
    org.jsecurity.authc.UnknownAccountException var1 = new org.jsecurity.authc.UnknownAccountException((java.lang.Throwable)var0);
    org.jsecurity.authc.AccountException var2 = new org.jsecurity.authc.AccountException((java.lang.Throwable)var1);
    org.jsecurity.mgt.DefaultSecurityManager var3 = new org.jsecurity.mgt.DefaultSecurityManager();
    java.io.InputStream var5 = org.jsecurity.util.ClassUtils.getResourceAsStream("");
    java.lang.Object[] var6 = new java.lang.Object[] { var5};
    java.util.List var7 = org.jsecurity.util.CollectionUtils.asList(var6);
    org.jsecurity.authc.pam.ModularRealmAuthenticator var8 = new org.jsecurity.authc.pam.ModularRealmAuthenticator(var7);
    org.jsecurity.authc.pam.AllSuccessfulModularAuthenticationStrategy var9 = new org.jsecurity.authc.pam.AllSuccessfulModularAuthenticationStrategy();
    var8.setModularAuthenticationStrategy((org.jsecurity.authc.pam.ModularAuthenticationStrategy)var9);
    org.jsecurity.authz.SimpleAuthorizationInfo var11 = new org.jsecurity.authz.SimpleAuthorizationInfo();
    var11.addStringPermission("hi!");
    java.io.InputStream var15 = org.jsecurity.util.ClassUtils.getResourceAsStream("");
    java.lang.Object[] var16 = new java.lang.Object[] { var15};
    java.util.List var17 = org.jsecurity.util.CollectionUtils.asList(var16);
    var11.addRoles((java.util.Collection)var17);
    var8.setAuthenticationListeners((java.util.Collection)var17);
    var3.setSessionListeners((java.util.Collection)var17);
    org.jsecurity.realm.text.TextConfigurationRealm var21 = new org.jsecurity.realm.text.TextConfigurationRealm();
    java.io.InputStream var23 = org.jsecurity.util.ClassUtils.getResourceAsStream("");
    java.lang.Object[] var24 = new java.lang.Object[] { var23};
    java.util.List var25 = org.jsecurity.util.CollectionUtils.asList(var24);
    org.jsecurity.authc.pam.ModularRealmAuthenticator var26 = new org.jsecurity.authc.pam.ModularRealmAuthenticator(var25);
    org.jsecurity.subject.SimplePrincipalCollection var28 = new org.jsecurity.subject.SimplePrincipalCollection((java.util.Collection)var25, "org.jsecurity.authz.UnauthorizedException: org.jsecurity.session.ExpiredSessionException: ");
    org.jsecurity.session.UnknownSessionException var33 = new org.jsecurity.session.UnknownSessionException("dd\uFFFD", (java.io.Serializable)100.0f);
    org.jsecurity.session.SessionException var35 = new org.jsecurity.session.SessionException("dd\uFFFD", (java.lang.Throwable)var33, (java.io.Serializable)0);
    org.jsecurity.session.SessionException var36 = new org.jsecurity.session.SessionException("dd\uFFFD", (java.lang.Throwable)var33);
    var28.add((java.lang.Object)var36, "org.jsecurity.config.ConfigurationException: dd\uFFFD");
    var21.onLogout((org.jsecurity.subject.PrincipalCollection)var28);
    org.jsecurity.authc.pam.FirstSuccessfulAuthenticationStrategy var40 = new org.jsecurity.authc.pam.FirstSuccessfulAuthenticationStrategy();
    org.jsecurity.authz.UnauthorizedException var42 = new org.jsecurity.authz.UnauthorizedException("org.jsecurity.config.ConfigurationException: dd\uFFFD");
    java.lang.Throwable[] var43 = var42.getSuppressed();
    java.util.List var44 = org.jsecurity.util.CollectionUtils.asList((java.lang.Object[])var43);
    org.jsecurity.authc.UsernamePasswordToken var45 = new org.jsecurity.authc.UsernamePasswordToken();
    java.lang.String var46 = var45.getUsername();
    java.net.InetAddress var47 = var45.getInetAddress();
    org.jsecurity.authc.AuthenticationInfo var48 = var40.beforeAllAttempts((java.util.Collection)var44, (org.jsecurity.authc.AuthenticationToken)var45);
    boolean[] var49 = var3.hasRoles((org.jsecurity.subject.PrincipalCollection)var28, var44);
    org.jsecurity.codec.CodecException var52 = new org.jsecurity.codec.CodecException("dd\uFFFD");
    org.jsecurity.authc.ConcurrentAccessException var53 = new org.jsecurity.authc.ConcurrentAccessException("org.jsecurity.authz.UnauthorizedException: org.jsecurity.session.ExpiredSessionException: ", (java.lang.Throwable)var52);
    org.jsecurity.subject.SimplePrincipalCollection var55 = new org.jsecurity.subject.SimplePrincipalCollection((java.lang.Object)var52, "");
    java.io.InputStream var57 = org.jsecurity.util.ClassUtils.getResourceAsStream("");
    java.lang.Object[] var58 = new java.lang.Object[] { var57};
    java.util.List var59 = org.jsecurity.util.CollectionUtils.asList(var58);
    org.jsecurity.authc.pam.ModularRealmAuthenticator var60 = new org.jsecurity.authc.pam.ModularRealmAuthenticator(var59);
    var55.addAll((java.util.Collection)var59, "\u0000\u0000");
    var3.setSessionListeners((java.util.Collection)var59);
    org.jsecurity.authc.SimpleAccount var65 = new org.jsecurity.authc.SimpleAccount((java.lang.Object)var2, (java.lang.Object)var3, "ZGT/");
    org.jsecurity.subject.Subject var66 = var3.getSubject();
    org.jsecurity.subject.RememberMeManager var67 = var3.getRememberMeManager();
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var5);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var6);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var7);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var15);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var16);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var17);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var23);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var24);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var25);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var43);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var44);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var46);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var47);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var48);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var49);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var57);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var58);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var59);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var66);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var67);

  }

  public void test345() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest5.test345");


    org.jsecurity.crypto.hash.Md2Hash var1 = org.jsecurity.crypto.hash.Md2Hash.fromBase64String("a2b823b1e72eae2b727289df8a00a89df8a0bab6ad8a89c4c5c7a9b62a270000");
    org.jsecurity.authc.credential.Md2CredentialsMatcher var2 = new org.jsecurity.authc.credential.Md2CredentialsMatcher();
    org.jsecurity.authz.SimpleAuthorizingAccount var4 = new org.jsecurity.authz.SimpleAuthorizingAccount((java.lang.Object)"a2b823b1e72eae2b727289df8a00a89df8a0bab6ad8a89c4c5c7a9b62a270000", (java.lang.Object)var2, "");
    org.jsecurity.authz.SimpleAuthorizationInfo var5 = new org.jsecurity.authz.SimpleAuthorizationInfo();
    java.util.Set var6 = var5.getStringPermissions();
    org.jsecurity.authz.SimpleAuthorizationInfo var8 = new org.jsecurity.authz.SimpleAuthorizationInfo();
    org.jsecurity.session.UnknownSessionException var13 = new org.jsecurity.session.UnknownSessionException("dd\uFFFD", (java.io.Serializable)100.0f);
    org.jsecurity.subject.SubjectException var14 = new org.jsecurity.subject.SubjectException("dd\uFFFD", (java.lang.Throwable)var13);
    org.jsecurity.io.SerializationException var15 = new org.jsecurity.io.SerializationException("", (java.lang.Throwable)var14);
    java.lang.Throwable[] var16 = var14.getSuppressed();
    java.util.Set var17 = org.jsecurity.util.CollectionUtils.asSet((java.lang.Object[])var16);
    var8.setStringPermissions(var17);
    java.util.Set var19 = var8.getRoles();
    org.jsecurity.authz.SimpleAuthorizationInfo var20 = new org.jsecurity.authz.SimpleAuthorizationInfo();
    var20.addRole("a2b823b1e72eae2b727289df8a00a89df8a0bab6ad8a89c4c5c7a9b62a270000");
    org.jsecurity.session.UnknownSessionException var27 = new org.jsecurity.session.UnknownSessionException("dd\uFFFD", (java.io.Serializable)100.0f);
    org.jsecurity.subject.SubjectException var28 = new org.jsecurity.subject.SubjectException("dd\uFFFD", (java.lang.Throwable)var27);
    org.jsecurity.io.SerializationException var29 = new org.jsecurity.io.SerializationException("", (java.lang.Throwable)var28);
    java.lang.Throwable[] var30 = var28.getSuppressed();
    java.util.Set var31 = org.jsecurity.util.CollectionUtils.asSet((java.lang.Object[])var30);
    var20.addRoles((java.util.Collection)var31);
    var8.setRoles(var31);
    org.jsecurity.authz.SimpleRole var34 = new org.jsecurity.authz.SimpleRole("org.jsecurity.authz.UnauthorizedException: org.jsecurity.session.ExpiredSessionException: ", var31);
    var5.addStringPermissions((java.util.Collection)var31);
    boolean var36 = var4.isPermittedAll((java.util.Collection)var31);
    boolean var37 = var4.isCredentialsExpired();
    org.jsecurity.session.UnknownSessionException var42 = new org.jsecurity.session.UnknownSessionException("dd\uFFFD", (java.io.Serializable)100.0f);
    org.jsecurity.subject.SubjectException var43 = new org.jsecurity.subject.SubjectException("dd\uFFFD", (java.lang.Throwable)var42);
    org.jsecurity.io.SerializationException var44 = new org.jsecurity.io.SerializationException("", (java.lang.Throwable)var43);
    java.lang.Throwable[] var45 = var43.getSuppressed();
    java.lang.Throwable[] var46 = var43.getSuppressed();
    org.jsecurity.authz.SimpleAuthorizationInfo var49 = new org.jsecurity.authz.SimpleAuthorizationInfo();
    var49.addRole("a2b823b1e72eae2b727289df8a00a89df8a0bab6ad8a89c4c5c7a9b62a270000");
    org.jsecurity.session.UnknownSessionException var56 = new org.jsecurity.session.UnknownSessionException("dd\uFFFD", (java.io.Serializable)100.0f);
    org.jsecurity.subject.SubjectException var57 = new org.jsecurity.subject.SubjectException("dd\uFFFD", (java.lang.Throwable)var56);
    org.jsecurity.io.SerializationException var58 = new org.jsecurity.io.SerializationException("", (java.lang.Throwable)var57);
    java.lang.Throwable[] var59 = var57.getSuppressed();
    java.util.Set var60 = org.jsecurity.util.CollectionUtils.asSet((java.lang.Object[])var59);
    var49.addRoles((java.util.Collection)var60);
    java.io.InputStream var63 = org.jsecurity.util.ClassUtils.getResourceAsStream("");
    java.lang.Object[] var64 = new java.lang.Object[] { var63};
    java.util.List var65 = org.jsecurity.util.CollectionUtils.asList(var64);
    org.jsecurity.authc.pam.ModularRealmAuthenticator var66 = new org.jsecurity.authc.pam.ModularRealmAuthenticator(var65);
    org.jsecurity.subject.SimplePrincipalCollection var68 = new org.jsecurity.subject.SimplePrincipalCollection((java.util.Collection)var65, "org.jsecurity.authz.UnauthorizedException: org.jsecurity.session.ExpiredSessionException: ");
    org.jsecurity.session.UnknownSessionException var73 = new org.jsecurity.session.UnknownSessionException("dd\uFFFD", (java.io.Serializable)100.0f);
    org.jsecurity.session.SessionException var75 = new org.jsecurity.session.SessionException("dd\uFFFD", (java.lang.Throwable)var73, (java.io.Serializable)0);
    org.jsecurity.session.SessionException var76 = new org.jsecurity.session.SessionException("dd\uFFFD", (java.lang.Throwable)var73);
    var68.add((java.lang.Object)var76, "org.jsecurity.config.ConfigurationException: dd\uFFFD");
    java.util.Set var79 = var68.asSet();
    org.jsecurity.authz.SimpleAuthorizingAccount var80 = new org.jsecurity.authz.SimpleAuthorizingAccount((java.lang.Object)var46, (java.lang.Object)"\u0000\u0000\u0000", "\u0000\u0000\u0000", var60, var79);
    org.jsecurity.authz.SimpleRole var82 = var80.getRole("\u0000\u0000\u0000");
    java.util.Set var83 = var80.getPermissions();
    var4.addAll((java.util.Collection)var83);
    java.util.Collection var85 = var4.getObjectPermissions();
    java.lang.String var86 = var4.toString();
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var1);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var6);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var16);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var17);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var19);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var30);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var31);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var36 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var37 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var45);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var46);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var59);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var60);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var63);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var64);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var65);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var79);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var82);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var83);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var85);

  }

  public void test346() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest5.test346");


    org.jsecurity.authc.CredentialsException var1 = new org.jsecurity.authc.CredentialsException("ccb16549-499f-4a61-86b4-d3deaf687243");

  }

  public void test347() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest5.test347");


    org.jsecurity.session.mgt.DefaultSessionManager var0 = new org.jsecurity.session.mgt.DefaultSessionManager();
    var0.setGlobalSessionTimeout(1);
    long var3 = var0.getSessionValidationInterval();
    org.jsecurity.session.UnknownSessionException var11 = new org.jsecurity.session.UnknownSessionException("dd\uFFFD", (java.io.Serializable)100.0f);
    org.jsecurity.config.ConfigurationException var12 = new org.jsecurity.config.ConfigurationException("dd\uFFFD", (java.lang.Throwable)var11);
    org.jsecurity.session.ExpiredSessionException var14 = new org.jsecurity.session.ExpiredSessionException("", (java.lang.Throwable)var12, (java.io.Serializable)true);
    org.jsecurity.authc.LockedAccountException var15 = new org.jsecurity.authc.LockedAccountException("", (java.lang.Throwable)var14);
    org.jsecurity.authc.IncorrectCredentialsException var16 = new org.jsecurity.authc.IncorrectCredentialsException();
    org.jsecurity.session.SessionException var17 = new org.jsecurity.session.SessionException("\uFFFD\uFFFD#\uFFFD\uFFFD.\uFFFD+rr\uFFFD\u07CA\u0000\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\u01E9\uFFFD*'\u0000\u0000", (java.lang.Throwable)var15, (java.io.Serializable)var16);
    org.jsecurity.util.UnknownClassException var18 = new org.jsecurity.util.UnknownClassException("5c3cc6ba-00c8-4890-85cf-e7058c10f878", (java.lang.Throwable)var15);
    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      var0.stop((java.io.Serializable)var15);
      fail("Expected exception of type org.jsecurity.session.UnknownSessionException");
    } catch (org.jsecurity.session.UnknownSessionException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var3 == 3600000L);

  }

  public void test348() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest5.test348");


    java.io.InputStream var1 = org.jsecurity.util.ClassUtils.getResourceAsStream("");
    java.lang.Object[] var2 = new java.lang.Object[] { var1};
    java.util.List var3 = org.jsecurity.util.CollectionUtils.asList(var2);
    org.jsecurity.authc.pam.ModularRealmAuthenticator var4 = new org.jsecurity.authc.pam.ModularRealmAuthenticator(var3);
    org.jsecurity.authc.pam.AllSuccessfulModularAuthenticationStrategy var5 = new org.jsecurity.authc.pam.AllSuccessfulModularAuthenticationStrategy();
    var4.setModularAuthenticationStrategy((org.jsecurity.authc.pam.ModularAuthenticationStrategy)var5);
    org.jsecurity.authz.SimpleAuthorizationInfo var7 = new org.jsecurity.authz.SimpleAuthorizationInfo();
    var7.addStringPermission("hi!");
    java.io.InputStream var11 = org.jsecurity.util.ClassUtils.getResourceAsStream("");
    java.lang.Object[] var12 = new java.lang.Object[] { var11};
    java.util.List var13 = org.jsecurity.util.CollectionUtils.asList(var12);
    var7.addRoles((java.util.Collection)var13);
    var4.setAuthenticationListeners((java.util.Collection)var13);
    org.jsecurity.realm.activedirectory.ActiveDirectoryRealm var16 = new org.jsecurity.realm.activedirectory.ActiveDirectoryRealm();
    var16.setPrincipalSuffix("");
    var4.setRealm((org.jsecurity.realm.Realm)var16);
    org.jsecurity.authc.pam.FirstSuccessfulAuthenticationStrategy var20 = new org.jsecurity.authc.pam.FirstSuccessfulAuthenticationStrategy();
    org.jsecurity.authz.UnauthorizedException var22 = new org.jsecurity.authz.UnauthorizedException("org.jsecurity.config.ConfigurationException: dd\uFFFD");
    java.lang.Throwable[] var23 = var22.getSuppressed();
    java.util.List var24 = org.jsecurity.util.CollectionUtils.asList((java.lang.Object[])var23);
    org.jsecurity.authc.UsernamePasswordToken var25 = new org.jsecurity.authc.UsernamePasswordToken();
    java.lang.String var26 = var25.getUsername();
    java.net.InetAddress var27 = var25.getInetAddress();
    org.jsecurity.authc.AuthenticationInfo var28 = var20.beforeAllAttempts((java.util.Collection)var24, (org.jsecurity.authc.AuthenticationToken)var25);
    var4.setModularAuthenticationStrategy((org.jsecurity.authc.pam.ModularAuthenticationStrategy)var20);
    org.jsecurity.realm.activedirectory.ActiveDirectoryRealm var30 = new org.jsecurity.realm.activedirectory.ActiveDirectoryRealm();
    var30.init();
    var30.setSystemPassword("dd\uFFFD");
    var4.setRealm((org.jsecurity.realm.Realm)var30);
    java.io.InputStream var36 = org.jsecurity.util.ClassUtils.getResourceAsStream("");
    java.lang.Object[] var37 = new java.lang.Object[] { var36};
    java.util.List var38 = org.jsecurity.util.CollectionUtils.asList(var37);
    org.jsecurity.authc.pam.ModularRealmAuthenticator var39 = new org.jsecurity.authc.pam.ModularRealmAuthenticator(var38);
    org.jsecurity.subject.SimplePrincipalCollection var41 = new org.jsecurity.subject.SimplePrincipalCollection((java.util.Collection)var38, "org.jsecurity.authz.UnauthorizedException: org.jsecurity.session.ExpiredSessionException: ");
    java.util.Set var42 = var41.getRealmNames();
    java.io.InputStream var44 = org.jsecurity.util.ClassUtils.getResourceAsStream("");
    java.lang.Object[] var45 = new java.lang.Object[] { var44};
    java.util.List var46 = org.jsecurity.util.CollectionUtils.asList(var45);
    org.jsecurity.authc.pam.ModularRealmAuthenticator var47 = new org.jsecurity.authc.pam.ModularRealmAuthenticator(var46);
    org.jsecurity.subject.SimplePrincipalCollection var49 = new org.jsecurity.subject.SimplePrincipalCollection((java.util.Collection)var46, "org.jsecurity.authz.UnauthorizedException: org.jsecurity.session.ExpiredSessionException: ");
    org.jsecurity.session.UnknownSessionException var54 = new org.jsecurity.session.UnknownSessionException("dd\uFFFD", (java.io.Serializable)100.0f);
    org.jsecurity.session.SessionException var56 = new org.jsecurity.session.SessionException("dd\uFFFD", (java.lang.Throwable)var54, (java.io.Serializable)0);
    org.jsecurity.session.SessionException var57 = new org.jsecurity.session.SessionException("dd\uFFFD", (java.lang.Throwable)var54);
    var49.add((java.lang.Object)var57, "org.jsecurity.config.ConfigurationException: dd\uFFFD");
    java.util.Set var60 = var49.asSet();
    var41.addAll((java.util.Collection)var60, "6464ff");
    java.lang.String[] var65 = org.jsecurity.util.StringUtils.tokenizeToStringArray("", "org.jsecurity.realm.SimpleAccountRealm-55-authorization");
    var30.checkPermissions((org.jsecurity.subject.PrincipalCollection)var41, var65);
    org.jsecurity.cache.Cache var67 = var30.getAuthorizationCache();
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var1);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var2);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var3);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var11);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var12);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var13);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var23);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var24);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var26);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var27);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var28);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var36);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var37);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var38);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var42);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var44);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var45);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var46);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var60);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var65);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var67);

  }

  public void test349() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest5.test349");


    org.jsecurity.session.mgt.DelegatingSession var0 = new org.jsecurity.session.mgt.DelegatingSession();
    var0.setId((java.io.Serializable)"org.jsecurity.realm.SimpleAccountRealm-52-authorization");
    org.jsecurity.mgt.DefaultSecurityManager var3 = new org.jsecurity.mgt.DefaultSecurityManager();
    org.jsecurity.realm.text.TextConfigurationRealm var4 = new org.jsecurity.realm.text.TextConfigurationRealm();
    org.jsecurity.realm.text.TextConfigurationRealm var5 = new org.jsecurity.realm.text.TextConfigurationRealm();
    java.io.InputStream var7 = org.jsecurity.util.ClassUtils.getResourceAsStream("");
    java.lang.Object[] var8 = new java.lang.Object[] { var7};
    java.util.List var9 = org.jsecurity.util.CollectionUtils.asList(var8);
    org.jsecurity.authc.pam.ModularRealmAuthenticator var10 = new org.jsecurity.authc.pam.ModularRealmAuthenticator(var9);
    org.jsecurity.subject.SimplePrincipalCollection var12 = new org.jsecurity.subject.SimplePrincipalCollection((java.util.Collection)var9, "org.jsecurity.authz.UnauthorizedException: org.jsecurity.session.ExpiredSessionException: ");
    org.jsecurity.session.UnknownSessionException var17 = new org.jsecurity.session.UnknownSessionException("dd\uFFFD", (java.io.Serializable)100.0f);
    org.jsecurity.session.SessionException var19 = new org.jsecurity.session.SessionException("dd\uFFFD", (java.lang.Throwable)var17, (java.io.Serializable)0);
    org.jsecurity.session.SessionException var20 = new org.jsecurity.session.SessionException("dd\uFFFD", (java.lang.Throwable)var17);
    var12.add((java.lang.Object)var20, "org.jsecurity.config.ConfigurationException: dd\uFFFD");
    var5.onLogout((org.jsecurity.subject.PrincipalCollection)var12);
    java.util.Collection var25 = var12.fromRealm("\u0000\u0000\u0000");
    var4.onLogout((org.jsecurity.subject.PrincipalCollection)var12);
    java.util.Set var27 = var12.asSet();
    org.jsecurity.realm.activedirectory.ActiveDirectoryRealm var28 = new org.jsecurity.realm.activedirectory.ActiveDirectoryRealm();
    org.jsecurity.authc.credential.Sha256CredentialsMatcher var29 = new org.jsecurity.authc.credential.Sha256CredentialsMatcher();
    var28.setCredentialsMatcher((org.jsecurity.authc.credential.CredentialsMatcher)var29);
    java.lang.String var31 = var28.getAuthorizationCacheName();
    var28.setPrincipalSuffix("org.jsecurity.config.ConfigurationException: dd\uFFFD");
    org.jsecurity.realm.text.TextConfigurationRealm var34 = new org.jsecurity.realm.text.TextConfigurationRealm();
    java.io.InputStream var36 = org.jsecurity.util.ClassUtils.getResourceAsStream("");
    java.lang.Object[] var37 = new java.lang.Object[] { var36};
    java.util.List var38 = org.jsecurity.util.CollectionUtils.asList(var37);
    org.jsecurity.authc.pam.ModularRealmAuthenticator var39 = new org.jsecurity.authc.pam.ModularRealmAuthenticator(var38);
    org.jsecurity.subject.SimplePrincipalCollection var41 = new org.jsecurity.subject.SimplePrincipalCollection((java.util.Collection)var38, "org.jsecurity.authz.UnauthorizedException: org.jsecurity.session.ExpiredSessionException: ");
    org.jsecurity.session.UnknownSessionException var46 = new org.jsecurity.session.UnknownSessionException("dd\uFFFD", (java.io.Serializable)100.0f);
    org.jsecurity.session.SessionException var48 = new org.jsecurity.session.SessionException("dd\uFFFD", (java.lang.Throwable)var46, (java.io.Serializable)0);
    org.jsecurity.session.SessionException var49 = new org.jsecurity.session.SessionException("dd\uFFFD", (java.lang.Throwable)var46);
    var41.add((java.lang.Object)var49, "org.jsecurity.config.ConfigurationException: dd\uFFFD");
    var34.onLogout((org.jsecurity.subject.PrincipalCollection)var41);
    var28.onLogout((org.jsecurity.subject.PrincipalCollection)var41);
    org.jsecurity.realm.SimpleAccountRealm var55 = new org.jsecurity.realm.SimpleAccountRealm("hi!");
    java.lang.Class var56 = var55.getAuthenticationTokenClass();
    java.util.Collection var57 = org.jsecurity.util.CollectionUtils.emptyCollection(var56);
    java.util.Collection var58 = var41.byType(var56);
    org.jsecurity.authz.ModularRealmAuthorizer var59 = new org.jsecurity.authz.ModularRealmAuthorizer(var58);
    var3.checkRoles((org.jsecurity.subject.PrincipalCollection)var12, var58);
    org.jsecurity.session.mgt.SessionManager var61 = var3.getSessionManager();
    var0.setSessionManager(var61);
    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      java.util.Collection var63 = var0.getAttributeKeys();
      fail("Expected exception of type org.jsecurity.session.UnknownSessionException");
    } catch (org.jsecurity.session.UnknownSessionException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var7);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var8);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var9);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var25);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var27);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var31);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var36);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var37);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var38);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var56);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var57);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var58);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var61);

  }

  public void test350() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest5.test350");


    org.jsecurity.mgt.DefaultSecurityManager var0 = new org.jsecurity.mgt.DefaultSecurityManager();
    org.jsecurity.authz.SimpleAuthorizationInfo var2 = new org.jsecurity.authz.SimpleAuthorizationInfo();
    org.jsecurity.session.UnknownSessionException var7 = new org.jsecurity.session.UnknownSessionException("dd\uFFFD", (java.io.Serializable)100.0f);
    org.jsecurity.subject.SubjectException var8 = new org.jsecurity.subject.SubjectException("dd\uFFFD", (java.lang.Throwable)var7);
    org.jsecurity.io.SerializationException var9 = new org.jsecurity.io.SerializationException("", (java.lang.Throwable)var8);
    java.lang.Throwable[] var10 = var8.getSuppressed();
    java.util.Set var11 = org.jsecurity.util.CollectionUtils.asSet((java.lang.Object[])var10);
    var2.setStringPermissions(var11);
    java.util.Set var13 = var2.getRoles();
    org.jsecurity.authz.SimpleAuthorizationInfo var14 = new org.jsecurity.authz.SimpleAuthorizationInfo();
    var14.addRole("a2b823b1e72eae2b727289df8a00a89df8a0bab6ad8a89c4c5c7a9b62a270000");
    org.jsecurity.session.UnknownSessionException var21 = new org.jsecurity.session.UnknownSessionException("dd\uFFFD", (java.io.Serializable)100.0f);
    org.jsecurity.subject.SubjectException var22 = new org.jsecurity.subject.SubjectException("dd\uFFFD", (java.lang.Throwable)var21);
    org.jsecurity.io.SerializationException var23 = new org.jsecurity.io.SerializationException("", (java.lang.Throwable)var22);
    java.lang.Throwable[] var24 = var22.getSuppressed();
    java.util.Set var25 = org.jsecurity.util.CollectionUtils.asSet((java.lang.Object[])var24);
    var14.addRoles((java.util.Collection)var25);
    var2.setRoles(var25);
    org.jsecurity.authz.SimpleRole var28 = new org.jsecurity.authz.SimpleRole("org.jsecurity.authz.UnauthorizedException: org.jsecurity.session.ExpiredSessionException: ", var25);
    var0.setSessionListeners((java.util.Collection)var25);
    org.jsecurity.authz.ModularRealmAuthorizer var30 = new org.jsecurity.authz.ModularRealmAuthorizer((java.util.Collection)var25);
    org.jsecurity.session.UnknownSessionException var34 = new org.jsecurity.session.UnknownSessionException("dd\uFFFD", (java.io.Serializable)100.0f);
    org.jsecurity.session.SessionException var36 = new org.jsecurity.session.SessionException("dd\uFFFD", (java.lang.Throwable)var34, (java.io.Serializable)0);
    org.jsecurity.authc.SimpleAuthenticationInfo var39 = new org.jsecurity.authc.SimpleAuthenticationInfo((java.lang.Object)0, (java.lang.Object)10, "hi!");
    org.jsecurity.session.UnknownSessionException var45 = new org.jsecurity.session.UnknownSessionException("dd\uFFFD", (java.io.Serializable)100.0f);
    org.jsecurity.subject.SubjectException var46 = new org.jsecurity.subject.SubjectException("dd\uFFFD", (java.lang.Throwable)var45);
    org.jsecurity.authc.AccountException var47 = new org.jsecurity.authc.AccountException("hi!", (java.lang.Throwable)var46);
    org.jsecurity.session.ExpiredSessionException var48 = new org.jsecurity.session.ExpiredSessionException("dd\uFFFD", (java.io.Serializable)var47);
    java.io.Serializable var49 = var48.getSessionId();
    boolean var50 = var39.equals((java.lang.Object)var48);
    byte[] var52 = org.jsecurity.codec.Base64.decode("hi!");
    org.jsecurity.authc.CredentialsException var54 = new org.jsecurity.authc.CredentialsException("org.jsecurity.authz.UnauthorizedException: org.jsecurity.session.ExpiredSessionException: ");
    org.jsecurity.authc.SimpleAuthenticationInfo var56 = new org.jsecurity.authc.SimpleAuthenticationInfo((java.lang.Object)"hi!", (java.lang.Object)var54, "org.jsecurity.config.ConfigurationException: dd\uFFFD");
    var39.merge((org.jsecurity.authc.AuthenticationInfo)var56);
    java.lang.String var58 = var56.toString();
    org.jsecurity.realm.text.TextConfigurationRealm var60 = new org.jsecurity.realm.text.TextConfigurationRealm();
    java.io.InputStream var62 = org.jsecurity.util.ClassUtils.getResourceAsStream("");
    java.lang.Object[] var63 = new java.lang.Object[] { var62};
    java.util.List var64 = org.jsecurity.util.CollectionUtils.asList(var63);
    org.jsecurity.authc.pam.ModularRealmAuthenticator var65 = new org.jsecurity.authc.pam.ModularRealmAuthenticator(var64);
    org.jsecurity.subject.SimplePrincipalCollection var67 = new org.jsecurity.subject.SimplePrincipalCollection((java.util.Collection)var64, "org.jsecurity.authz.UnauthorizedException: org.jsecurity.session.ExpiredSessionException: ");
    org.jsecurity.session.UnknownSessionException var72 = new org.jsecurity.session.UnknownSessionException("dd\uFFFD", (java.io.Serializable)100.0f);
    org.jsecurity.session.SessionException var74 = new org.jsecurity.session.SessionException("dd\uFFFD", (java.lang.Throwable)var72, (java.io.Serializable)0);
    org.jsecurity.session.SessionException var75 = new org.jsecurity.session.SessionException("dd\uFFFD", (java.lang.Throwable)var72);
    var67.add((java.lang.Object)var75, "org.jsecurity.config.ConfigurationException: dd\uFFFD");
    var60.onLogout((org.jsecurity.subject.PrincipalCollection)var67);
    java.util.Set var80 = org.jsecurity.util.PermissionUtils.toPermissionStrings("org.jsecurity.config.ConfigurationException: dd\uFFFD");
    org.jsecurity.authz.SimpleAuthorizationInfo var81 = new org.jsecurity.authz.SimpleAuthorizationInfo(var80);
    org.jsecurity.authz.SimpleAuthorizingAccount var82 = new org.jsecurity.authz.SimpleAuthorizingAccount((org.jsecurity.subject.PrincipalCollection)var67, (java.lang.Object)var80);
    org.jsecurity.session.StoppedSessionException var83 = new org.jsecurity.session.StoppedSessionException("org.jsecurity.realm.SimpleAccountRealm-55-authorization", (java.io.Serializable)var67);
    org.jsecurity.realm.activedirectory.ActiveDirectoryRealm var84 = new org.jsecurity.realm.activedirectory.ActiveDirectoryRealm();
    var84.init();
    var84.setSystemPassword("dd\uFFFD");
    org.jsecurity.authz.aop.GuestAnnotationHandler var88 = new org.jsecurity.authz.aop.GuestAnnotationHandler();
    java.lang.Class var89 = var88.getAnnotationClass();
    var84.setAuthenticationTokenClass(var89);
    java.util.Collection var91 = var67.byType(var89);
    var56.setPrincipals((org.jsecurity.subject.PrincipalCollection)var67);
    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      boolean var94 = var30.hasRole((org.jsecurity.subject.PrincipalCollection)var67, "5b549fba-5a5d-44e6-9c05-771d476c2e80");
      fail("Expected exception of type java.lang.IllegalStateException");
    } catch (java.lang.IllegalStateException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var10);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var11);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var13);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var24);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var25);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var49);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var50 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var52);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var62);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var63);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var64);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var80);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var89);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var91);

  }

  public void test351() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest5.test351");


    org.jsecurity.crypto.hash.Sha384Hash var0 = new org.jsecurity.crypto.hash.Sha384Hash();
    byte[] var1 = var0.getBytes();
    byte[] var2 = var0.getBytes();
    org.jsecurity.crypto.BlowfishCipher var3 = new org.jsecurity.crypto.BlowfishCipher();
    byte[] var7 = new byte[] { (byte)100, (byte)100, (byte)(-1)};
    java.lang.String var8 = org.jsecurity.codec.CodecSupport.toString(var7);
    byte[] var10 = org.jsecurity.codec.Base64.decode("hi!");
    byte[] var11 = var3.encrypt(var7, var10);
    org.jsecurity.crypto.BlowfishCipher var12 = new org.jsecurity.crypto.BlowfishCipher();
    byte[] var16 = new byte[] { (byte)100, (byte)100, (byte)(-1)};
    java.lang.String var17 = org.jsecurity.codec.CodecSupport.toString(var16);
    byte[] var19 = org.jsecurity.codec.Base64.decode("hi!");
    byte[] var20 = var12.encrypt(var16, var19);
    org.jsecurity.crypto.BlowfishCipher var21 = new org.jsecurity.crypto.BlowfishCipher();
    java.security.Key var22 = var21.getKey();
    java.security.Key var23 = var21.getKey();
    var12.setKey(var23);
    var3.setKey(var23);
    byte[] var29 = new byte[] { (byte)100, (byte)100, (byte)(-1)};
    java.lang.String var30 = org.jsecurity.codec.CodecSupport.toString(var29);
    byte[] var32 = org.jsecurity.codec.Base64.encode(var29, false);
    java.lang.String var33 = org.jsecurity.codec.CodecSupport.toString(var32);
    org.jsecurity.crypto.hash.Sha512Hash var35 = org.jsecurity.crypto.hash.Sha512Hash.fromBase64String("org.jsecurity.config.ConfigurationException: dd\uFFFD");
    byte[] var36 = var35.getBytes();
    java.lang.String var37 = var35.toString();
    byte[] var38 = var35.getBytes();
    org.jsecurity.crypto.hash.Md2Hash var40 = org.jsecurity.crypto.hash.Md2Hash.fromHexString("6464ff");
    java.lang.String var41 = var40.toString();
    byte[] var42 = var40.getBytes();
    byte[] var43 = var40.getBytes();
    var35.setBytes(var43);
    java.lang.String var45 = org.jsecurity.codec.CodecSupport.toString(var43);
    byte[] var46 = var3.encrypt(var32, var43);
    byte[] var47 = org.jsecurity.codec.Base64.decode(var32);
    var0.setBytes(var47);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var1);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var2);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var7);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var8 + "' != '" + "dd\uFFFD"+ "'", var8.equals("dd\uFFFD"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var10);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var11);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var16);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var17 + "' != '" + "dd\uFFFD"+ "'", var17.equals("dd\uFFFD"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var19);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var20);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var22);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var23);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var29);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var30 + "' != '" + "dd\uFFFD"+ "'", var30.equals("dd\uFFFD"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var32);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var33 + "' != '" + "ZGT/"+ "'", var33.equals("ZGT/"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var35);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var36);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var37 + "' != '" + "a2b823b1e72eae2b727289df8a00a89df8a0bab6ad8a89c4c5c7a9b62a270000"+ "'", var37.equals("a2b823b1e72eae2b727289df8a00a89df8a0bab6ad8a89c4c5c7a9b62a270000"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var38);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var40);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var41 + "' != '" + "6464ff"+ "'", var41.equals("6464ff"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var42);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var43);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var45 + "' != '" + "dd\uFFFD"+ "'", var45.equals("dd\uFFFD"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var46);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var47);

  }

  public void test352() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest5.test352");


    org.jsecurity.mgt.DefaultSecurityManager var0 = new org.jsecurity.mgt.DefaultSecurityManager();
    org.jsecurity.authc.pam.AllSuccessfulModularAuthenticationStrategy var1 = new org.jsecurity.authc.pam.AllSuccessfulModularAuthenticationStrategy();
    org.jsecurity.authc.pam.AllSuccessfulModularAuthenticationStrategy var2 = new org.jsecurity.authc.pam.AllSuccessfulModularAuthenticationStrategy();
    char[] var4 = new char[] { };
    org.jsecurity.authc.UsernamePasswordToken var6 = new org.jsecurity.authc.UsernamePasswordToken("hi!", var4, true);
    org.jsecurity.authc.SimpleAccount var7 = new org.jsecurity.authc.SimpleAccount();
    var7.setCredentialsExpired(false);
    boolean var10 = var7.isLocked();
    org.jsecurity.authc.AuthenticationInfo var11 = var2.afterAllAttempts((org.jsecurity.authc.AuthenticationToken)var6, (org.jsecurity.authc.AuthenticationInfo)var7);
    char[] var15 = new char[] { '4', '#'};
    org.jsecurity.authc.UsernamePasswordToken var16 = new org.jsecurity.authc.UsernamePasswordToken("\u0000\u0000", var15);
    org.jsecurity.authc.SimpleAccount var17 = new org.jsecurity.authc.SimpleAccount();
    var17.setCredentialsExpired(false);
    var17.setCredentialsExpired(false);
    boolean var22 = var17.isCredentialsExpired();
    org.jsecurity.authc.AuthenticationInfo var23 = var2.afterAllAttempts((org.jsecurity.authc.AuthenticationToken)var16, (org.jsecurity.authc.AuthenticationInfo)var17);
    org.jsecurity.authz.UnauthenticatedException var27 = new org.jsecurity.authz.UnauthenticatedException();
    org.jsecurity.config.UnresolveableReferenceException var28 = new org.jsecurity.config.UnresolveableReferenceException("", (java.lang.Throwable)var27);
    org.jsecurity.cache.CacheException var29 = new org.jsecurity.cache.CacheException("org.jsecurity.config.ConfigurationException: dd\uFFFD", (java.lang.Throwable)var27);
    org.jsecurity.authc.SimpleAuthenticationInfo var31 = new org.jsecurity.authc.SimpleAuthenticationInfo((java.lang.Object)"org.jsecurity.config.ConfigurationException: dd\uFFFD", (java.lang.Object)var29, "a2b823b1e72eae2b727289df8a00a89df8a0bab6ad8a89c4c5c7a9b62a270000");
    org.jsecurity.subject.PrincipalCollection var32 = var31.getPrincipals();
    org.jsecurity.authc.AuthenticationInfo var33 = var1.afterAllAttempts((org.jsecurity.authc.AuthenticationToken)var16, (org.jsecurity.authc.AuthenticationInfo)var31);
    var0.setModularAuthenticationStrategy((org.jsecurity.authc.pam.ModularAuthenticationStrategy)var1);
    org.jsecurity.subject.RememberMeManager var35 = var0.getRememberMeManager();
    org.jsecurity.authc.pam.ModularRealmAuthenticator var36 = new org.jsecurity.authc.pam.ModularRealmAuthenticator();
    var0.setAuthenticator((org.jsecurity.authc.Authenticator)var36);
    org.jsecurity.subject.DelegatingSubject var38 = new org.jsecurity.subject.DelegatingSubject((org.jsecurity.mgt.SecurityManager)var0);
    org.jsecurity.authz.SimpleRole var39 = new org.jsecurity.authz.SimpleRole();
    org.jsecurity.authz.SimpleAuthorizationInfo var40 = new org.jsecurity.authz.SimpleAuthorizationInfo();
    var40.addRole("a2b823b1e72eae2b727289df8a00a89df8a0bab6ad8a89c4c5c7a9b62a270000");
    org.jsecurity.session.UnknownSessionException var47 = new org.jsecurity.session.UnknownSessionException("dd\uFFFD", (java.io.Serializable)100.0f);
    org.jsecurity.subject.SubjectException var48 = new org.jsecurity.subject.SubjectException("dd\uFFFD", (java.lang.Throwable)var47);
    org.jsecurity.io.SerializationException var49 = new org.jsecurity.io.SerializationException("", (java.lang.Throwable)var48);
    java.lang.Throwable[] var50 = var48.getSuppressed();
    java.util.Set var51 = org.jsecurity.util.CollectionUtils.asSet((java.lang.Object[])var50);
    var40.addRoles((java.util.Collection)var51);
    var39.addAll((java.util.Collection)var51);
    java.lang.String var54 = var39.getName();
    org.jsecurity.authz.permission.WildcardPermission var57 = new org.jsecurity.authz.permission.WildcardPermission("hi!", false);
    var39.add((org.jsecurity.authz.Permission)var57);
    org.jsecurity.authz.permission.WildcardPermission var61 = new org.jsecurity.authz.permission.WildcardPermission("hi!", false);
    var39.add((org.jsecurity.authz.Permission)var61);
    org.jsecurity.authz.permission.AllPermission var63 = new org.jsecurity.authz.permission.AllPermission();
    var39.add((org.jsecurity.authz.Permission)var63);
    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      var38.checkPermission((org.jsecurity.authz.Permission)var63);
      fail("Expected exception of type org.jsecurity.authz.UnauthenticatedException");
    } catch (org.jsecurity.authz.UnauthenticatedException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var4);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var10 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var11);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var15);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var22 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var23);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var32);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var33);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var35);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var50);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var51);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var54);

  }

  public void test353() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest5.test353");


    java.io.InputStream var1 = org.jsecurity.util.ClassUtils.getResourceAsStream("");
    java.lang.Object[] var2 = new java.lang.Object[] { var1};
    java.util.List var3 = org.jsecurity.util.CollectionUtils.asList(var2);
    org.jsecurity.authc.pam.ModularRealmAuthenticator var4 = new org.jsecurity.authc.pam.ModularRealmAuthenticator(var3);
    org.jsecurity.authc.pam.AllSuccessfulModularAuthenticationStrategy var5 = new org.jsecurity.authc.pam.AllSuccessfulModularAuthenticationStrategy();
    var4.setModularAuthenticationStrategy((org.jsecurity.authc.pam.ModularAuthenticationStrategy)var5);
    org.jsecurity.realm.text.PropertiesRealm var7 = new org.jsecurity.realm.text.PropertiesRealm();
    var7.setReloadIntervalSeconds(10);
    char[] var13 = new char[] { ' ', ' '};
    org.jsecurity.authc.UsernamePasswordToken var14 = new org.jsecurity.authc.UsernamePasswordToken("hi!", var13);
    org.jsecurity.authz.SimpleAuthorizingAccount var15 = new org.jsecurity.authz.SimpleAuthorizingAccount();
    org.jsecurity.authz.SimpleAuthorizationInfo var16 = new org.jsecurity.authz.SimpleAuthorizationInfo();
    var16.addRole("a2b823b1e72eae2b727289df8a00a89df8a0bab6ad8a89c4c5c7a9b62a270000");
    org.jsecurity.authz.SimpleAuthorizationInfo var19 = new org.jsecurity.authz.SimpleAuthorizationInfo();
    var19.addRole("a2b823b1e72eae2b727289df8a00a89df8a0bab6ad8a89c4c5c7a9b62a270000");
    org.jsecurity.session.UnknownSessionException var26 = new org.jsecurity.session.UnknownSessionException("dd\uFFFD", (java.io.Serializable)100.0f);
    org.jsecurity.subject.SubjectException var27 = new org.jsecurity.subject.SubjectException("dd\uFFFD", (java.lang.Throwable)var26);
    org.jsecurity.io.SerializationException var28 = new org.jsecurity.io.SerializationException("", (java.lang.Throwable)var27);
    java.lang.Throwable[] var29 = var27.getSuppressed();
    java.util.Set var30 = org.jsecurity.util.CollectionUtils.asSet((java.lang.Object[])var29);
    var19.addRoles((java.util.Collection)var30);
    var16.setObjectPermissions(var30);
    var15.setSimpleRoles(var30);
    boolean var34 = var15.isCredentialsExpired();
    org.jsecurity.authc.AuthenticationInfo var35 = var5.beforeAttempt((org.jsecurity.realm.Realm)var7, (org.jsecurity.authc.AuthenticationToken)var14, (org.jsecurity.authc.AuthenticationInfo)var15);
    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      var15.checkRole("org.jsecurity.realm.SimpleAccountRealm-370-authorization");
      fail("Expected exception of type org.jsecurity.authz.UnauthorizedException");
    } catch (org.jsecurity.authz.UnauthorizedException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var1);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var2);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var3);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var13);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var29);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var30);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var34 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var35);

  }

  public void test354() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest5.test354");


    org.jsecurity.realm.activedirectory.ActiveDirectoryRealm var0 = new org.jsecurity.realm.activedirectory.ActiveDirectoryRealm();
    var0.init();
    var0.setSystemPassword("dd\uFFFD");
    org.jsecurity.authz.aop.GuestAnnotationHandler var4 = new org.jsecurity.authz.aop.GuestAnnotationHandler();
    java.lang.Class var5 = var4.getAnnotationClass();
    var0.setAuthenticationTokenClass(var5);
    org.jsecurity.mgt.DefaultSecurityManager var7 = new org.jsecurity.mgt.DefaultSecurityManager((org.jsecurity.realm.Realm)var0);
    org.jsecurity.mgt.DefaultSecurityManager var8 = new org.jsecurity.mgt.DefaultSecurityManager();
    java.io.InputStream var10 = org.jsecurity.util.ClassUtils.getResourceAsStream("");
    java.lang.Object[] var11 = new java.lang.Object[] { var10};
    java.util.List var12 = org.jsecurity.util.CollectionUtils.asList(var11);
    org.jsecurity.authc.pam.ModularRealmAuthenticator var13 = new org.jsecurity.authc.pam.ModularRealmAuthenticator(var12);
    org.jsecurity.authc.pam.AllSuccessfulModularAuthenticationStrategy var14 = new org.jsecurity.authc.pam.AllSuccessfulModularAuthenticationStrategy();
    var13.setModularAuthenticationStrategy((org.jsecurity.authc.pam.ModularAuthenticationStrategy)var14);
    org.jsecurity.authz.SimpleAuthorizationInfo var16 = new org.jsecurity.authz.SimpleAuthorizationInfo();
    var16.addStringPermission("hi!");
    java.io.InputStream var20 = org.jsecurity.util.ClassUtils.getResourceAsStream("");
    java.lang.Object[] var21 = new java.lang.Object[] { var20};
    java.util.List var22 = org.jsecurity.util.CollectionUtils.asList(var21);
    var16.addRoles((java.util.Collection)var22);
    var13.setAuthenticationListeners((java.util.Collection)var22);
    var8.setSessionListeners((java.util.Collection)var22);
    org.jsecurity.realm.text.TextConfigurationRealm var26 = new org.jsecurity.realm.text.TextConfigurationRealm();
    java.io.InputStream var28 = org.jsecurity.util.ClassUtils.getResourceAsStream("");
    java.lang.Object[] var29 = new java.lang.Object[] { var28};
    java.util.List var30 = org.jsecurity.util.CollectionUtils.asList(var29);
    org.jsecurity.authc.pam.ModularRealmAuthenticator var31 = new org.jsecurity.authc.pam.ModularRealmAuthenticator(var30);
    org.jsecurity.subject.SimplePrincipalCollection var33 = new org.jsecurity.subject.SimplePrincipalCollection((java.util.Collection)var30, "org.jsecurity.authz.UnauthorizedException: org.jsecurity.session.ExpiredSessionException: ");
    org.jsecurity.session.UnknownSessionException var38 = new org.jsecurity.session.UnknownSessionException("dd\uFFFD", (java.io.Serializable)100.0f);
    org.jsecurity.session.SessionException var40 = new org.jsecurity.session.SessionException("dd\uFFFD", (java.lang.Throwable)var38, (java.io.Serializable)0);
    org.jsecurity.session.SessionException var41 = new org.jsecurity.session.SessionException("dd\uFFFD", (java.lang.Throwable)var38);
    var33.add((java.lang.Object)var41, "org.jsecurity.config.ConfigurationException: dd\uFFFD");
    var26.onLogout((org.jsecurity.subject.PrincipalCollection)var33);
    org.jsecurity.authc.pam.FirstSuccessfulAuthenticationStrategy var45 = new org.jsecurity.authc.pam.FirstSuccessfulAuthenticationStrategy();
    org.jsecurity.authz.UnauthorizedException var47 = new org.jsecurity.authz.UnauthorizedException("org.jsecurity.config.ConfigurationException: dd\uFFFD");
    java.lang.Throwable[] var48 = var47.getSuppressed();
    java.util.List var49 = org.jsecurity.util.CollectionUtils.asList((java.lang.Object[])var48);
    org.jsecurity.authc.UsernamePasswordToken var50 = new org.jsecurity.authc.UsernamePasswordToken();
    java.lang.String var51 = var50.getUsername();
    java.net.InetAddress var52 = var50.getInetAddress();
    org.jsecurity.authc.AuthenticationInfo var53 = var45.beforeAllAttempts((java.util.Collection)var49, (org.jsecurity.authc.AuthenticationToken)var50);
    boolean[] var54 = var8.hasRoles((org.jsecurity.subject.PrincipalCollection)var33, var49);
    org.jsecurity.session.mgt.SessionManager var55 = var8.getSessionManager();
    var7.setSessionManager(var55);
    java.util.Collection var57 = var7.getRealms();
    org.jsecurity.cache.CacheManager var58 = var7.getCacheManager();
    var7.destroy();
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var5);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var10);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var11);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var12);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var20);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var21);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var22);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var28);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var29);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var30);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var48);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var49);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var51);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var52);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var53);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var54);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var55);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var57);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var58);

  }

  public void test355() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest5.test355");


    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      java.lang.String[] var1 = org.jsecurity.util.StringUtils.splitKeyValue("518186d8-31e9-47c0-b564-85d1505b64b6");
      fail("Expected exception of type java.text.ParseException");
    } catch (java.text.ParseException e) {
      // Expected exception.
    }

  }

  public void test356() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest5.test356");


    org.jsecurity.config.IniConfiguration var0 = new org.jsecurity.config.IniConfiguration();
    java.lang.String var1 = var0.getConfig();
    org.jsecurity.mgt.SecurityManager var2 = var0.getSecurityManager();
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var1);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var2);

  }

  public void test357() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest5.test357");


    org.jsecurity.subject.SubjectException var1 = new org.jsecurity.subject.SubjectException("69b91d50-ee90-487b-8ebd-dd7f4a239e5e");

  }

  public void test358() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest5.test358");


    org.jsecurity.session.UnknownSessionException var2 = new org.jsecurity.session.UnknownSessionException("org.jsecurity.config.ConfigurationException: dd\uFFFD");
    org.jsecurity.realm.text.TextConfigurationRealm var3 = new org.jsecurity.realm.text.TextConfigurationRealm();
    java.io.InputStream var5 = org.jsecurity.util.ClassUtils.getResourceAsStream("");
    java.lang.Object[] var6 = new java.lang.Object[] { var5};
    java.util.List var7 = org.jsecurity.util.CollectionUtils.asList(var6);
    org.jsecurity.authc.pam.ModularRealmAuthenticator var8 = new org.jsecurity.authc.pam.ModularRealmAuthenticator(var7);
    org.jsecurity.subject.SimplePrincipalCollection var10 = new org.jsecurity.subject.SimplePrincipalCollection((java.util.Collection)var7, "org.jsecurity.authz.UnauthorizedException: org.jsecurity.session.ExpiredSessionException: ");
    org.jsecurity.session.UnknownSessionException var15 = new org.jsecurity.session.UnknownSessionException("dd\uFFFD", (java.io.Serializable)100.0f);
    org.jsecurity.session.SessionException var17 = new org.jsecurity.session.SessionException("dd\uFFFD", (java.lang.Throwable)var15, (java.io.Serializable)0);
    org.jsecurity.session.SessionException var18 = new org.jsecurity.session.SessionException("dd\uFFFD", (java.lang.Throwable)var15);
    var10.add((java.lang.Object)var18, "org.jsecurity.config.ConfigurationException: dd\uFFFD");
    var3.onLogout((org.jsecurity.subject.PrincipalCollection)var10);
    org.jsecurity.authc.ExpiredCredentialsException var23 = new org.jsecurity.authc.ExpiredCredentialsException();
    org.jsecurity.session.ExpiredSessionException var24 = new org.jsecurity.session.ExpiredSessionException("", (java.lang.Throwable)var23);
    java.lang.Throwable[] var25 = var24.getSuppressed();
    org.jsecurity.io.ResourceException var26 = new org.jsecurity.io.ResourceException((java.lang.Throwable)var24);
    org.jsecurity.authc.SimpleAuthenticationInfo var27 = new org.jsecurity.authc.SimpleAuthenticationInfo((org.jsecurity.subject.PrincipalCollection)var10, (java.lang.Object)var24);
    org.jsecurity.session.StoppedSessionException var28 = new org.jsecurity.session.StoppedSessionException("d0ddeefd-5576-4906-99f8-93b892e0c773", (java.lang.Throwable)var2, (java.io.Serializable)var10);
    org.jsecurity.authc.pam.UnsupportedTokenException var29 = new org.jsecurity.authc.pam.UnsupportedTokenException((java.lang.Throwable)var2);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var5);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var6);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var7);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var25);

  }

  public void test359() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest5.test359");


    org.jsecurity.realm.text.PropertiesRealm var0 = new org.jsecurity.realm.text.PropertiesRealm();
    var0.setUseXmlFormat(true);
    java.io.InputStream var4 = org.jsecurity.util.ClassUtils.getResourceAsStream("");
    java.lang.Object[] var5 = new java.lang.Object[] { var4};
    java.util.List var6 = org.jsecurity.util.CollectionUtils.asList(var5);
    org.jsecurity.authc.pam.ModularRealmAuthenticator var7 = new org.jsecurity.authc.pam.ModularRealmAuthenticator(var6);
    org.jsecurity.realm.text.TextConfigurationRealm var8 = new org.jsecurity.realm.text.TextConfigurationRealm();
    java.io.InputStream var10 = org.jsecurity.util.ClassUtils.getResourceAsStream("");
    java.lang.Object[] var11 = new java.lang.Object[] { var10};
    java.util.List var12 = org.jsecurity.util.CollectionUtils.asList(var11);
    org.jsecurity.authc.pam.ModularRealmAuthenticator var13 = new org.jsecurity.authc.pam.ModularRealmAuthenticator(var12);
    org.jsecurity.subject.SimplePrincipalCollection var15 = new org.jsecurity.subject.SimplePrincipalCollection((java.util.Collection)var12, "org.jsecurity.authz.UnauthorizedException: org.jsecurity.session.ExpiredSessionException: ");
    org.jsecurity.session.UnknownSessionException var20 = new org.jsecurity.session.UnknownSessionException("dd\uFFFD", (java.io.Serializable)100.0f);
    org.jsecurity.session.SessionException var22 = new org.jsecurity.session.SessionException("dd\uFFFD", (java.lang.Throwable)var20, (java.io.Serializable)0);
    org.jsecurity.session.SessionException var23 = new org.jsecurity.session.SessionException("dd\uFFFD", (java.lang.Throwable)var20);
    var15.add((java.lang.Object)var23, "org.jsecurity.config.ConfigurationException: dd\uFFFD");
    var8.onLogout((org.jsecurity.subject.PrincipalCollection)var15);
    org.jsecurity.cache.HashtableCacheManager var27 = new org.jsecurity.cache.HashtableCacheManager();
    org.jsecurity.cache.Cache var29 = var27.getCache("\u0000\u0000");
    var8.setAuthorizationCache(var29);
    org.jsecurity.codec.CodecException var33 = new org.jsecurity.codec.CodecException("dd\uFFFD");
    org.jsecurity.authc.ConcurrentAccessException var34 = new org.jsecurity.authc.ConcurrentAccessException("org.jsecurity.authz.UnauthorizedException: org.jsecurity.session.ExpiredSessionException: ", (java.lang.Throwable)var33);
    org.jsecurity.subject.SimplePrincipalCollection var36 = new org.jsecurity.subject.SimplePrincipalCollection((java.lang.Object)var33, "");
    var8.onLogout((org.jsecurity.subject.PrincipalCollection)var36);
    var7.setRealm((org.jsecurity.realm.Realm)var8);
    org.jsecurity.authc.credential.Sha512CredentialsMatcher var39 = new org.jsecurity.authc.credential.Sha512CredentialsMatcher();
    var39.setHashIterations(1);
    var8.setCredentialsMatcher((org.jsecurity.authc.credential.CredentialsMatcher)var39);
    var39.setStoredCredentialsHexEncoded(false);
    var0.setCredentialsMatcher((org.jsecurity.authc.credential.CredentialsMatcher)var39);
    org.jsecurity.cache.CacheManager var46 = var0.getCacheManager();
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var4);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var5);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var6);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var10);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var11);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var12);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var29);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var46);

  }

  public void test360() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest5.test360");


    org.jsecurity.authc.CredentialsException var3 = new org.jsecurity.authc.CredentialsException("def3bb13-1c13-4efd-8418-6ca61c15cbd6");
    org.jsecurity.session.UnknownSessionException var8 = new org.jsecurity.session.UnknownSessionException("dd\uFFFD", (java.io.Serializable)100.0f);
    org.jsecurity.subject.SubjectException var9 = new org.jsecurity.subject.SubjectException("dd\uFFFD", (java.lang.Throwable)var8);
    org.jsecurity.authc.AccountException var10 = new org.jsecurity.authc.AccountException("hi!", (java.lang.Throwable)var9);
    org.jsecurity.session.UnknownSessionException var11 = new org.jsecurity.session.UnknownSessionException((java.lang.Throwable)var9);
    org.jsecurity.session.UnknownSessionException var12 = new org.jsecurity.session.UnknownSessionException((java.lang.Throwable)var9);
    org.jsecurity.session.ExpiredSessionException var13 = new org.jsecurity.session.ExpiredSessionException((java.lang.Throwable)var9);
    org.jsecurity.session.SessionException var14 = new org.jsecurity.session.SessionException("125dec88-46f2-4ba8-a532-a86bd81550d8", (java.lang.Throwable)var3, (java.io.Serializable)var13);
    org.jsecurity.authz.UnauthorizedException var15 = new org.jsecurity.authz.UnauthorizedException("a1b9d200-d70c-4093-b754-c4ee20ee247e", (java.lang.Throwable)var14);

  }

  public void test361() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest5.test361");


    java.lang.String[] var2 = org.jsecurity.util.StringUtils.split("7f459141-420b-4ce9-8486-8c578b9f7c7e", 'a');
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var2);

  }

  public void test362() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest5.test362");


    org.jsecurity.session.SessionException var0 = new org.jsecurity.session.SessionException();
    org.jsecurity.io.ResourceException var1 = new org.jsecurity.io.ResourceException((java.lang.Throwable)var0);
    org.jsecurity.authz.HostUnauthorizedException var2 = new org.jsecurity.authz.HostUnauthorizedException((java.lang.Throwable)var1);
    org.jsecurity.session.ExpiredSessionException var3 = new org.jsecurity.session.ExpiredSessionException((java.lang.Throwable)var2);
    org.jsecurity.authc.AccountException var4 = new org.jsecurity.authc.AccountException((java.lang.Throwable)var3);

  }

  public void test363() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest5.test363");


    org.jsecurity.session.mgt.DefaultSessionManager var1 = new org.jsecurity.session.mgt.DefaultSessionManager();
    var1.setGlobalSessionTimeout(1);
    org.jsecurity.session.mgt.quartz.QuartzSessionValidationScheduler var4 = new org.jsecurity.session.mgt.quartz.QuartzSessionValidationScheduler((org.jsecurity.session.mgt.ValidatingSessionManager)var1);
    var1.destroy();
    org.jsecurity.JSecurityException var7 = new org.jsecurity.JSecurityException();
    org.jsecurity.session.UnknownSessionException var12 = new org.jsecurity.session.UnknownSessionException("dd\uFFFD", (java.io.Serializable)100.0f);
    org.jsecurity.subject.SubjectException var13 = new org.jsecurity.subject.SubjectException("dd\uFFFD", (java.lang.Throwable)var12);
    org.jsecurity.authc.AccountException var14 = new org.jsecurity.authc.AccountException("hi!", (java.lang.Throwable)var13);
    org.jsecurity.session.StoppedSessionException var15 = new org.jsecurity.session.StoppedSessionException((java.lang.Throwable)var14);
    org.jsecurity.session.SessionException var16 = new org.jsecurity.session.SessionException("a2b823b1e72eae2b727289df8a00a89df8a0bab6ad8a89c4c5c7a9b62a270000", (java.lang.Throwable)var7, (java.io.Serializable)var14);
    org.jsecurity.subject.SubjectException var17 = new org.jsecurity.subject.SubjectException((java.lang.Throwable)var14);
    org.jsecurity.session.mgt.DelegatingSession var18 = new org.jsecurity.session.mgt.DelegatingSession((org.jsecurity.session.mgt.SessionManager)var1, (java.io.Serializable)var17);
    org.jsecurity.authc.pam.UnsupportedTokenException var19 = new org.jsecurity.authc.pam.UnsupportedTokenException("\uFFFD\uFFFD\u0000", (java.lang.Throwable)var17);

  }

  public void test364() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest5.test364");


    org.jsecurity.realm.jdbc.JdbcRealm var0 = new org.jsecurity.realm.jdbc.JdbcRealm();
    var0.setPermissionsQuery("org.jsecurity.realm.text.TextConfigurationRealm_445");
    var0.setUserRolesQuery("6464ff");
    var0.setUserRolesQuery("NfxhYN7ItBfRAmDBmprtU73ghfEEPpcDJrHPkZ06wiY=");
    var0.setUserRolesQuery("\u0000\u0000");
    var0.setPermissionsQuery("f9548f9e-497e-41ec-97ca-89ede08e20b0");
    var0.setAuthenticationQuery("407ffef7-fc60-45d8-a3a7-d32eb7a0c31d");

  }

  public void test365() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest5.test365");


    org.jsecurity.session.mgt.DelegatingSession var0 = new org.jsecurity.session.mgt.DelegatingSession();
    java.io.Serializable var1 = var0.getId();
    org.jsecurity.session.mgt.SessionManager var2 = var0.getSessionManager();
    org.jsecurity.session.mgt.SimpleSession var3 = new org.jsecurity.session.mgt.SimpleSession();
    org.jsecurity.session.UnknownSessionException var7 = new org.jsecurity.session.UnknownSessionException("dd\uFFFD", (java.io.Serializable)100.0f);
    org.jsecurity.session.SessionException var9 = new org.jsecurity.session.SessionException("dd\uFFFD", (java.lang.Throwable)var7, (java.io.Serializable)0);
    org.jsecurity.authc.AccountException var10 = new org.jsecurity.authc.AccountException((java.lang.Throwable)var7);
    var3.setId((java.io.Serializable)var7);
    var3.setTimeout((-1L));
    org.jsecurity.session.mgt.SimpleSession var14 = new org.jsecurity.session.mgt.SimpleSession();
    var14.setTimeout((-1L));
    org.jsecurity.session.mgt.SimpleSession var17 = new org.jsecurity.session.mgt.SimpleSession();
    var17.setTimeout((-1L));
    org.jsecurity.session.mgt.SimpleSession var20 = new org.jsecurity.session.mgt.SimpleSession();
    java.util.Date var21 = var20.getLastAccessTime();
    var17.setLastAccessTime(var21);
    org.jsecurity.session.mgt.SimpleSession var23 = new org.jsecurity.session.mgt.SimpleSession();
    java.util.Date var24 = var23.getLastAccessTime();
    var17.setStopTimestamp(var24);
    var14.setStartTimestamp(var24);
    var3.setLastAccessTime(var24);
    var0.setId((java.io.Serializable)var24);
    java.io.Serializable var29 = var0.getId();
    org.jsecurity.session.mgt.DefaultSessionManager var30 = new org.jsecurity.session.mgt.DefaultSessionManager();
    org.jsecurity.session.mgt.quartz.QuartzSessionValidationScheduler var31 = new org.jsecurity.session.mgt.quartz.QuartzSessionValidationScheduler();
    boolean var32 = var31.isEnabled();
    var31.enableSessionValidation();
    var30.setSessionValidationScheduler((org.jsecurity.session.mgt.SessionValidationScheduler)var31);
    var0.setSessionManager((org.jsecurity.session.mgt.SessionManager)var30);
    org.jsecurity.authz.UnauthenticatedException var37 = new org.jsecurity.authz.UnauthenticatedException();
    org.jsecurity.authc.AccountException var38 = new org.jsecurity.authc.AccountException("hi!", (java.lang.Throwable)var37);
    org.jsecurity.session.mgt.DelegatingSession var39 = new org.jsecurity.session.mgt.DelegatingSession((org.jsecurity.session.mgt.SessionManager)var30, (java.io.Serializable)var38);
    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      var39.touch();
      fail("Expected exception of type org.jsecurity.session.UnknownSessionException");
    } catch (org.jsecurity.session.UnknownSessionException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var1);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var2);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var21);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var24);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var29);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var32 == false);

  }

  public void test366() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest5.test366");


    boolean var1 = org.jsecurity.util.StringUtils.hasText("6da7d2f4-0515-4a20-87d9-cb23772ba002");
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var1 == true);

  }

  public void test367() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest5.test367");


    org.jsecurity.realm.text.TextConfigurationRealm var0 = new org.jsecurity.realm.text.TextConfigurationRealm();
    org.jsecurity.realm.text.TextConfigurationRealm var1 = new org.jsecurity.realm.text.TextConfigurationRealm();
    java.io.InputStream var3 = org.jsecurity.util.ClassUtils.getResourceAsStream("");
    java.lang.Object[] var4 = new java.lang.Object[] { var3};
    java.util.List var5 = org.jsecurity.util.CollectionUtils.asList(var4);
    org.jsecurity.authc.pam.ModularRealmAuthenticator var6 = new org.jsecurity.authc.pam.ModularRealmAuthenticator(var5);
    org.jsecurity.subject.SimplePrincipalCollection var8 = new org.jsecurity.subject.SimplePrincipalCollection((java.util.Collection)var5, "org.jsecurity.authz.UnauthorizedException: org.jsecurity.session.ExpiredSessionException: ");
    org.jsecurity.session.UnknownSessionException var13 = new org.jsecurity.session.UnknownSessionException("dd\uFFFD", (java.io.Serializable)100.0f);
    org.jsecurity.session.SessionException var15 = new org.jsecurity.session.SessionException("dd\uFFFD", (java.lang.Throwable)var13, (java.io.Serializable)0);
    org.jsecurity.session.SessionException var16 = new org.jsecurity.session.SessionException("dd\uFFFD", (java.lang.Throwable)var13);
    var8.add((java.lang.Object)var16, "org.jsecurity.config.ConfigurationException: dd\uFFFD");
    var1.onLogout((org.jsecurity.subject.PrincipalCollection)var8);
    java.util.Collection var21 = var8.fromRealm("\u0000\u0000\u0000");
    var0.onLogout((org.jsecurity.subject.PrincipalCollection)var8);
    var0.setUserDefinitions("");
    java.lang.String var25 = var0.getName();
    org.jsecurity.authc.pam.ModularRealmAuthenticator var26 = new org.jsecurity.authc.pam.ModularRealmAuthenticator((org.jsecurity.realm.Realm)var0);
    var0.setUserDefinitions("org.jsecurity.authc.UsernamePasswordToken - null, rememberMe=false");
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var3);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var4);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var5);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var21);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var25 + "' != '" + "org.jsecurity.realm.text.TextConfigurationRealm_3659"+ "'", var25.equals("org.jsecurity.realm.text.TextConfigurationRealm_3659"));

  }

  public void test368() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest5.test368");


    byte[] var3 = new byte[] { (byte)100, (byte)100, (byte)(-1)};
    java.lang.String var4 = org.jsecurity.codec.CodecSupport.toString(var3);
    byte[] var5 = org.jsecurity.codec.Base64.encode(var3);
    char[] var6 = org.jsecurity.codec.CodecSupport.toChars(var5);
    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      byte[] var8 = org.jsecurity.codec.CodecSupport.toBytes(var6, "7306db95-41be-4ac0-9508-5d40aecdf82e");
      fail("Expected exception of type org.jsecurity.codec.CodecException");
    } catch (org.jsecurity.codec.CodecException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var3);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var4 + "' != '" + "dd\uFFFD"+ "'", var4.equals("dd\uFFFD"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var5);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var6);

  }

  public void test369() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest5.test369");


    org.jsecurity.realm.jndi.JndiRealmFactory var0 = new org.jsecurity.realm.jndi.JndiRealmFactory();
    java.io.InputStream var2 = org.jsecurity.util.ClassUtils.getResourceAsStream("");
    java.lang.Object[] var3 = new java.lang.Object[] { var2};
    java.util.List var4 = org.jsecurity.util.CollectionUtils.asList(var3);
    var0.setJndiNames((java.util.Collection)var4);
    org.jsecurity.jndi.JndiTemplate var6 = var0.getJndiTemplate();
    org.jsecurity.authc.AuthenticationException var9 = new org.jsecurity.authc.AuthenticationException("\n\uFFFD\uFFFD");
    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      var6.rebind("d8222dfe-a61b-455b-a44e-1c93ea26aec2", (java.lang.Object)var9);
      fail("Expected exception of type javax.naming.NoInitialContextException");
    } catch (javax.naming.NoInitialContextException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var2);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var3);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var4);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var6);

  }

  public void test370() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest5.test370");


    org.jsecurity.config.IniConfiguration var0 = new org.jsecurity.config.IniConfiguration();
    java.lang.String var1 = var0.getConfig();
    var0.setConfig("\uFFFD\uFFFD#\uFFFD\uFFFD.\uFFFD+rr\uFFFD\u07CA\u0000\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\u01E9\uFFFD*'\u0000\u0000");
    var0.setConfig("ff1bb54d-80f9-4308-a260-ff3ddf1355e9");
    org.jsecurity.realm.text.TextConfigurationRealm var6 = new org.jsecurity.realm.text.TextConfigurationRealm();
    java.io.InputStream var8 = org.jsecurity.util.ClassUtils.getResourceAsStream("");
    java.lang.Object[] var9 = new java.lang.Object[] { var8};
    java.util.List var10 = org.jsecurity.util.CollectionUtils.asList(var9);
    org.jsecurity.authc.pam.ModularRealmAuthenticator var11 = new org.jsecurity.authc.pam.ModularRealmAuthenticator(var10);
    org.jsecurity.subject.SimplePrincipalCollection var13 = new org.jsecurity.subject.SimplePrincipalCollection((java.util.Collection)var10, "org.jsecurity.authz.UnauthorizedException: org.jsecurity.session.ExpiredSessionException: ");
    org.jsecurity.session.UnknownSessionException var18 = new org.jsecurity.session.UnknownSessionException("dd\uFFFD", (java.io.Serializable)100.0f);
    org.jsecurity.session.SessionException var20 = new org.jsecurity.session.SessionException("dd\uFFFD", (java.lang.Throwable)var18, (java.io.Serializable)0);
    org.jsecurity.session.SessionException var21 = new org.jsecurity.session.SessionException("dd\uFFFD", (java.lang.Throwable)var18);
    var13.add((java.lang.Object)var21, "org.jsecurity.config.ConfigurationException: dd\uFFFD");
    var6.onLogout((org.jsecurity.subject.PrincipalCollection)var13);
    java.util.Collection var26 = var13.fromRealm("\u0000\u0000\u0000");
    org.jsecurity.session.mgt.eis.MemorySessionDAO var27 = new org.jsecurity.session.mgt.eis.MemorySessionDAO();
    org.jsecurity.authc.SimpleAuthenticationInfo var28 = new org.jsecurity.authc.SimpleAuthenticationInfo((org.jsecurity.subject.PrincipalCollection)var13, (java.lang.Object)var27);
    org.jsecurity.authz.SimpleAuthorizingAccount var30 = new org.jsecurity.authz.SimpleAuthorizingAccount((java.lang.Object)"ff1bb54d-80f9-4308-a260-ff3ddf1355e9", (java.lang.Object)var27, "330a41fd-f404-4b7f-8f3c-bc52c3f67c3e");
    var30.setCredentialsExpired(false);
    var30.addStringPermission("10f5b491-38ac-4c02-8085-950abb026a06");
    org.jsecurity.crypto.hash.Md2Hash var37 = org.jsecurity.crypto.hash.Md2Hash.fromBase64String("a2b823b1e72eae2b727289df8a00a89df8a0bab6ad8a89c4c5c7a9b62a270000");
    org.jsecurity.authc.credential.Md2CredentialsMatcher var38 = new org.jsecurity.authc.credential.Md2CredentialsMatcher();
    org.jsecurity.authz.SimpleAuthorizingAccount var40 = new org.jsecurity.authz.SimpleAuthorizingAccount((java.lang.Object)"a2b823b1e72eae2b727289df8a00a89df8a0bab6ad8a89c4c5c7a9b62a270000", (java.lang.Object)var38, "");
    org.jsecurity.session.SessionException var41 = new org.jsecurity.session.SessionException("org.jsecurity.realm.SimpleAccountRealm-9-authorization", (java.io.Serializable)var40);
    org.jsecurity.authz.SimpleAuthorizationInfo var42 = new org.jsecurity.authz.SimpleAuthorizationInfo();
    org.jsecurity.realm.jndi.JndiRealmFactory var43 = new org.jsecurity.realm.jndi.JndiRealmFactory();
    java.io.InputStream var45 = org.jsecurity.util.ClassUtils.getResourceAsStream("");
    java.lang.Object[] var46 = new java.lang.Object[] { var45};
    java.util.List var47 = org.jsecurity.util.CollectionUtils.asList(var46);
    var43.setJndiNames((java.util.Collection)var47);
    org.jsecurity.authz.SimpleRole var49 = new org.jsecurity.authz.SimpleRole();
    org.jsecurity.authz.SimpleAuthorizationInfo var50 = new org.jsecurity.authz.SimpleAuthorizationInfo();
    var50.addRole("a2b823b1e72eae2b727289df8a00a89df8a0bab6ad8a89c4c5c7a9b62a270000");
    org.jsecurity.session.UnknownSessionException var57 = new org.jsecurity.session.UnknownSessionException("dd\uFFFD", (java.io.Serializable)100.0f);
    org.jsecurity.subject.SubjectException var58 = new org.jsecurity.subject.SubjectException("dd\uFFFD", (java.lang.Throwable)var57);
    org.jsecurity.io.SerializationException var59 = new org.jsecurity.io.SerializationException("", (java.lang.Throwable)var58);
    java.lang.Throwable[] var60 = var58.getSuppressed();
    java.util.Set var61 = org.jsecurity.util.CollectionUtils.asSet((java.lang.Object[])var60);
    var50.addRoles((java.util.Collection)var61);
    var49.addAll((java.util.Collection)var61);
    var43.setJndiNames((java.util.Collection)var61);
    var42.setStringPermissions(var61);
    var40.addAll((java.util.Collection)var61);
    var30.setStringPermissions(var61);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var1);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var8);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var9);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var10);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var26);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var37);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var45);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var46);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var47);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var60);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var61);

  }

  public void test371() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest5.test371");


    org.jsecurity.io.DefaultSerializer var0 = new org.jsecurity.io.DefaultSerializer();
    org.jsecurity.util.UnavailableConstructorException var3 = new org.jsecurity.util.UnavailableConstructorException("\u0000\u0000");
    org.jsecurity.session.mgt.eis.MemorySessionDAO var4 = new org.jsecurity.session.mgt.eis.MemorySessionDAO();
    org.jsecurity.cache.Cache var5 = var4.getActiveSessionsCache();
    org.jsecurity.cache.CacheManager var6 = var4.getCacheManager();
    org.jsecurity.cache.HashtableCacheManager var7 = new org.jsecurity.cache.HashtableCacheManager();
    org.jsecurity.cache.Cache var9 = var7.getCache("\u0000\u0000");
    var4.setActiveSessionsCache(var9);
    java.io.InputStream var12 = org.jsecurity.util.ClassUtils.getResourceAsStream("");
    java.lang.Object[] var13 = new java.lang.Object[] { var12};
    java.util.List var14 = org.jsecurity.util.CollectionUtils.asList(var13);
    org.jsecurity.authc.pam.ModularRealmAuthenticator var15 = new org.jsecurity.authc.pam.ModularRealmAuthenticator(var14);
    org.jsecurity.authc.pam.AllSuccessfulModularAuthenticationStrategy var16 = new org.jsecurity.authc.pam.AllSuccessfulModularAuthenticationStrategy();
    var15.setModularAuthenticationStrategy((org.jsecurity.authc.pam.ModularAuthenticationStrategy)var16);
    org.jsecurity.authz.SimpleAuthorizationInfo var18 = new org.jsecurity.authz.SimpleAuthorizationInfo();
    var18.addStringPermission("hi!");
    java.io.InputStream var22 = org.jsecurity.util.ClassUtils.getResourceAsStream("");
    java.lang.Object[] var23 = new java.lang.Object[] { var22};
    java.util.List var24 = org.jsecurity.util.CollectionUtils.asList(var23);
    var18.addRoles((java.util.Collection)var24);
    var15.setAuthenticationListeners((java.util.Collection)var24);
    org.jsecurity.realm.activedirectory.ActiveDirectoryRealm var27 = new org.jsecurity.realm.activedirectory.ActiveDirectoryRealm();
    var27.setPrincipalSuffix("");
    var15.setRealm((org.jsecurity.realm.Realm)var27);
    org.jsecurity.cache.HashtableCacheManager var31 = new org.jsecurity.cache.HashtableCacheManager();
    org.jsecurity.cache.Cache var33 = var31.getCache("\u0000\u0000");
    var27.setAuthorizationCache(var33);
    var4.setActiveSessionsCache(var33);
    org.jsecurity.session.mgt.SimpleSession var36 = new org.jsecurity.session.mgt.SimpleSession();
    java.io.Serializable var37 = var4.create((org.jsecurity.session.Session)var36);
    java.io.Serializable var38 = var36.getId();
    org.jsecurity.authc.credential.Md5CredentialsMatcher var39 = new org.jsecurity.authc.credential.Md5CredentialsMatcher();
    boolean var40 = var39.isHashSalted();
    boolean var41 = var39.isHashSalted();
    int var42 = var39.getHashIterations();
    java.lang.Object var43 = var36.removeAttribute((java.lang.Object)var39);
    org.jsecurity.session.mgt.SimpleSession var44 = new org.jsecurity.session.mgt.SimpleSession();
    java.util.Date var45 = var44.getLastAccessTime();
    var36.setStartTimestamp(var45);
    org.jsecurity.session.InvalidSessionException var47 = new org.jsecurity.session.InvalidSessionException("\uFFFD\uFFFD#\uFFFD\uFFFD.\uFFFD+r\uFFFD\u6959(\uFFFD\uFFFDW\uFFFDq\uFFFD.\uFFFD\uFFFD^jY\uFFFDj\uFFFDa\uFFFD\uFFFD\uFFFDj\u0628\u0000", (java.lang.Throwable)var3, (java.io.Serializable)var36);
    byte[] var48 = var0.serialize((java.lang.Object)"\uFFFD\uFFFD#\uFFFD\uFFFD.\uFFFD+r\uFFFD\u6959(\uFFFD\uFFFDW\uFFFDq\uFFFD.\uFFFD\uFFFD^jY\uFFFDj\uFFFDa\uFFFD\uFFFD\uFFFDj\u0628\u0000");
    org.jsecurity.crypto.hash.Sha512Hash var50 = org.jsecurity.crypto.hash.Sha512Hash.fromBase64String("org.jsecurity.config.ConfigurationException: dd\uFFFD");
    byte[] var51 = var50.getBytes();
    java.lang.String var52 = org.jsecurity.codec.Base64.decodeToString(var51);
    byte[] var53 = org.jsecurity.codec.Base64.encodeChunked(var51);
    byte[] var55 = org.jsecurity.codec.Base64.encode(var53, false);
    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      java.lang.Object var56 = var0.deserialize(var53);
      fail("Expected exception of type org.jsecurity.io.SerializationException");
    } catch (org.jsecurity.io.SerializationException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var5);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var6);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var9);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var12);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var13);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var14);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var22);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var23);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var24);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var33);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var37 + "' != '" + "81b8bdf2-f2b4-45e0-ab5d-b196c73e83dd"+ "'", var37.equals("81b8bdf2-f2b4-45e0-ab5d-b196c73e83dd"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var38 + "' != '" + "81b8bdf2-f2b4-45e0-ab5d-b196c73e83dd"+ "'", var38.equals("81b8bdf2-f2b4-45e0-ab5d-b196c73e83dd"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var40 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var41 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var42 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var43);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var45);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var48);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var50);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var51);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var52 + "' != '" + "\u0000\u0000\u0000"+ "'", var52.equals("\u0000\u0000\u0000"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var53);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var55);

  }

  public void test372() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest5.test372");


    org.jsecurity.session.UnknownSessionException var5 = new org.jsecurity.session.UnknownSessionException("dd\uFFFD", (java.io.Serializable)100.0f);
    org.jsecurity.config.ConfigurationException var6 = new org.jsecurity.config.ConfigurationException("dd\uFFFD", (java.lang.Throwable)var5);
    org.jsecurity.session.ExpiredSessionException var8 = new org.jsecurity.session.ExpiredSessionException("", (java.lang.Throwable)var6, (java.io.Serializable)true);
    org.jsecurity.authc.pam.UnsupportedTokenException var9 = new org.jsecurity.authc.pam.UnsupportedTokenException((java.lang.Throwable)var8);
    org.jsecurity.authc.AccountException var10 = new org.jsecurity.authc.AccountException((java.lang.Throwable)var9);
    org.jsecurity.authz.UnauthorizedException var11 = new org.jsecurity.authz.UnauthorizedException("a2b823b1e72eae2b727289df8a00a89df8a0bab6ad8a89c4c5c7a9b62a270000", (java.lang.Throwable)var10);
    org.jsecurity.authc.ExcessiveAttemptsException var12 = new org.jsecurity.authc.ExcessiveAttemptsException((java.lang.Throwable)var11);

  }

  public void test373() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest5.test373");


    org.jsecurity.crypto.hash.Md5Hash var1 = org.jsecurity.crypto.hash.Md5Hash.fromBase64String("6464ff");
    java.lang.String var2 = var1.toHex();
    org.jsecurity.authz.SimpleRole var3 = new org.jsecurity.authz.SimpleRole();
    org.jsecurity.authz.SimpleAuthorizationInfo var4 = new org.jsecurity.authz.SimpleAuthorizationInfo();
    var4.addRole("a2b823b1e72eae2b727289df8a00a89df8a0bab6ad8a89c4c5c7a9b62a270000");
    org.jsecurity.session.UnknownSessionException var11 = new org.jsecurity.session.UnknownSessionException("dd\uFFFD", (java.io.Serializable)100.0f);
    org.jsecurity.subject.SubjectException var12 = new org.jsecurity.subject.SubjectException("dd\uFFFD", (java.lang.Throwable)var11);
    org.jsecurity.io.SerializationException var13 = new org.jsecurity.io.SerializationException("", (java.lang.Throwable)var12);
    java.lang.Throwable[] var14 = var12.getSuppressed();
    java.util.Set var15 = org.jsecurity.util.CollectionUtils.asSet((java.lang.Object[])var14);
    var4.addRoles((java.util.Collection)var15);
    var3.addAll((java.util.Collection)var15);
    org.jsecurity.authz.SimpleRole var19 = new org.jsecurity.authz.SimpleRole();
    org.jsecurity.authz.permission.WildcardPermission var22 = new org.jsecurity.authz.permission.WildcardPermission("hi!", false);
    boolean var23 = var19.isPermitted((org.jsecurity.authz.Permission)var22);
    org.jsecurity.session.InvalidSessionException var24 = new org.jsecurity.session.InvalidSessionException("org.jsecurity.config.ConfigurationException: dd\uFFFD", (java.io.Serializable)var22);
    org.jsecurity.authz.SimpleRole var25 = new org.jsecurity.authz.SimpleRole();
    org.jsecurity.authz.permission.WildcardPermission var28 = new org.jsecurity.authz.permission.WildcardPermission("hi!", false);
    boolean var29 = var25.isPermitted((org.jsecurity.authz.Permission)var28);
    boolean var30 = var22.implies((org.jsecurity.authz.Permission)var28);
    boolean var31 = var3.isPermitted((org.jsecurity.authz.Permission)var28);
    org.jsecurity.authz.SimpleAuthorizingAccount var32 = new org.jsecurity.authz.SimpleAuthorizingAccount();
    java.util.Set var33 = var32.getSimpleRoles();
    org.jsecurity.authz.SimpleRole var34 = new org.jsecurity.authz.SimpleRole();
    org.jsecurity.authz.SimpleAuthorizationInfo var35 = new org.jsecurity.authz.SimpleAuthorizationInfo();
    var35.addRole("a2b823b1e72eae2b727289df8a00a89df8a0bab6ad8a89c4c5c7a9b62a270000");
    org.jsecurity.session.UnknownSessionException var42 = new org.jsecurity.session.UnknownSessionException("dd\uFFFD", (java.io.Serializable)100.0f);
    org.jsecurity.subject.SubjectException var43 = new org.jsecurity.subject.SubjectException("dd\uFFFD", (java.lang.Throwable)var42);
    org.jsecurity.io.SerializationException var44 = new org.jsecurity.io.SerializationException("", (java.lang.Throwable)var43);
    java.lang.Throwable[] var45 = var43.getSuppressed();
    java.util.Set var46 = org.jsecurity.util.CollectionUtils.asSet((java.lang.Object[])var45);
    var35.addRoles((java.util.Collection)var46);
    var34.addAll((java.util.Collection)var46);
    org.jsecurity.authz.SimpleRole var50 = new org.jsecurity.authz.SimpleRole();
    org.jsecurity.authz.permission.WildcardPermission var53 = new org.jsecurity.authz.permission.WildcardPermission("hi!", false);
    boolean var54 = var50.isPermitted((org.jsecurity.authz.Permission)var53);
    org.jsecurity.session.InvalidSessionException var55 = new org.jsecurity.session.InvalidSessionException("org.jsecurity.config.ConfigurationException: dd\uFFFD", (java.io.Serializable)var53);
    org.jsecurity.authz.SimpleRole var56 = new org.jsecurity.authz.SimpleRole();
    org.jsecurity.authz.permission.WildcardPermission var59 = new org.jsecurity.authz.permission.WildcardPermission("hi!", false);
    boolean var60 = var56.isPermitted((org.jsecurity.authz.Permission)var59);
    boolean var61 = var53.implies((org.jsecurity.authz.Permission)var59);
    boolean var62 = var34.isPermitted((org.jsecurity.authz.Permission)var59);
    boolean var63 = var32.isPermitted((org.jsecurity.authz.Permission)var59);
    boolean var64 = var3.isPermitted((org.jsecurity.authz.Permission)var59);
    boolean var65 = var1.equals((java.lang.Object)var3);
    char[] var67 = new char[] { };
    org.jsecurity.authc.UsernamePasswordToken var69 = new org.jsecurity.authc.UsernamePasswordToken("hi!", var67, true);
    byte[] var70 = org.jsecurity.codec.Hex.decode(var67);
    byte[] var71 = org.jsecurity.codec.Hex.decode(var67);
    byte[] var72 = org.jsecurity.codec.Base64.encode(var71);
    char[] var73 = org.jsecurity.codec.Hex.encode(var71);
    char[] var74 = org.jsecurity.codec.CodecSupport.toChars(var71);
    byte[] var76 = org.jsecurity.codec.Base64.encode(var71, false);
    var1.setBytes(var71);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var2 + "' != '" + "eb8eb80000"+ "'", var2.equals("eb8eb80000"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var14);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var15);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var23 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var29 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var30 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var31 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var33);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var45);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var46);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var54 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var60 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var61 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var62 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var63 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var64 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var65 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var67);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var70);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var71);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var72);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var73);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var74);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var76);

  }

  public void test374() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest5.test374");


    org.jsecurity.jndi.JndiLocator var0 = new org.jsecurity.jndi.JndiLocator();
    boolean var1 = var0.isResourceRef();
    java.util.Properties var2 = var0.getJndiEnvironment();
    org.jsecurity.realm.jndi.JndiRealmFactory var3 = new org.jsecurity.realm.jndi.JndiRealmFactory();
    java.util.Collection var4 = var3.getJndiNames();
    var3.setJndiNames("e8e5d499-33c0-418e-93f9-76a51372c414");
    org.jsecurity.jndi.JndiTemplate var7 = var3.getJndiTemplate();
    var0.setJndiTemplate(var7);
    boolean var9 = var0.isResourceRef();
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var1 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var2);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var4);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var7);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var9 == false);

  }

  public void test375() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest5.test375");


    org.jsecurity.authz.UnauthorizedException var2 = new org.jsecurity.authz.UnauthorizedException();
    org.jsecurity.session.SessionException var4 = new org.jsecurity.session.SessionException("", (java.lang.Throwable)var2, (java.io.Serializable)"org.jsecurity.config.ConfigurationException: dd\uFFFD");
    org.jsecurity.session.ExpiredSessionException var5 = new org.jsecurity.session.ExpiredSessionException("", (java.io.Serializable)"");
    org.jsecurity.authz.UnauthorizedException var6 = new org.jsecurity.authz.UnauthorizedException((java.lang.Throwable)var5);
    org.jsecurity.authz.AuthorizationException var7 = new org.jsecurity.authz.AuthorizationException((java.lang.Throwable)var5);
    org.jsecurity.authc.ConcurrentAccessException var8 = new org.jsecurity.authc.ConcurrentAccessException((java.lang.Throwable)var7);
    org.jsecurity.session.StoppedSessionException var9 = new org.jsecurity.session.StoppedSessionException((java.io.Serializable)var8);

  }

  public void test376() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest5.test376");


    org.jsecurity.realm.text.TextConfigurationRealm var1 = new org.jsecurity.realm.text.TextConfigurationRealm();
    java.io.InputStream var3 = org.jsecurity.util.ClassUtils.getResourceAsStream("");
    java.lang.Object[] var4 = new java.lang.Object[] { var3};
    java.util.List var5 = org.jsecurity.util.CollectionUtils.asList(var4);
    org.jsecurity.authc.pam.ModularRealmAuthenticator var6 = new org.jsecurity.authc.pam.ModularRealmAuthenticator(var5);
    org.jsecurity.subject.SimplePrincipalCollection var8 = new org.jsecurity.subject.SimplePrincipalCollection((java.util.Collection)var5, "org.jsecurity.authz.UnauthorizedException: org.jsecurity.session.ExpiredSessionException: ");
    org.jsecurity.session.UnknownSessionException var13 = new org.jsecurity.session.UnknownSessionException("dd\uFFFD", (java.io.Serializable)100.0f);
    org.jsecurity.session.SessionException var15 = new org.jsecurity.session.SessionException("dd\uFFFD", (java.lang.Throwable)var13, (java.io.Serializable)0);
    org.jsecurity.session.SessionException var16 = new org.jsecurity.session.SessionException("dd\uFFFD", (java.lang.Throwable)var13);
    var8.add((java.lang.Object)var16, "org.jsecurity.config.ConfigurationException: dd\uFFFD");
    var1.onLogout((org.jsecurity.subject.PrincipalCollection)var8);
    java.util.Set var21 = org.jsecurity.util.PermissionUtils.toPermissionStrings("org.jsecurity.config.ConfigurationException: dd\uFFFD");
    org.jsecurity.authz.SimpleAuthorizationInfo var22 = new org.jsecurity.authz.SimpleAuthorizationInfo(var21);
    org.jsecurity.authz.SimpleAuthorizingAccount var23 = new org.jsecurity.authz.SimpleAuthorizingAccount((org.jsecurity.subject.PrincipalCollection)var8, (java.lang.Object)var21);
    org.jsecurity.session.StoppedSessionException var24 = new org.jsecurity.session.StoppedSessionException("org.jsecurity.realm.SimpleAccountRealm-55-authorization", (java.io.Serializable)var8);
    java.lang.String var25 = var24.toString();
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var3);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var4);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var5);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var21);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var25 + "' != '" + "org.jsecurity.session.StoppedSessionException: org.jsecurity.realm.SimpleAccountRealm-55-authorization"+ "'", var25.equals("org.jsecurity.session.StoppedSessionException: org.jsecurity.realm.SimpleAccountRealm-55-authorization"));

  }

  public void test377() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest5.test377");


    org.jsecurity.mgt.DefaultSecurityManager var0 = new org.jsecurity.mgt.DefaultSecurityManager();
    java.io.InputStream var2 = org.jsecurity.util.ClassUtils.getResourceAsStream("");
    java.lang.Object[] var3 = new java.lang.Object[] { var2};
    java.util.List var4 = org.jsecurity.util.CollectionUtils.asList(var3);
    org.jsecurity.authc.pam.ModularRealmAuthenticator var5 = new org.jsecurity.authc.pam.ModularRealmAuthenticator(var4);
    org.jsecurity.authc.pam.AllSuccessfulModularAuthenticationStrategy var6 = new org.jsecurity.authc.pam.AllSuccessfulModularAuthenticationStrategy();
    var5.setModularAuthenticationStrategy((org.jsecurity.authc.pam.ModularAuthenticationStrategy)var6);
    org.jsecurity.authz.SimpleAuthorizationInfo var8 = new org.jsecurity.authz.SimpleAuthorizationInfo();
    var8.addStringPermission("hi!");
    java.io.InputStream var12 = org.jsecurity.util.ClassUtils.getResourceAsStream("");
    java.lang.Object[] var13 = new java.lang.Object[] { var12};
    java.util.List var14 = org.jsecurity.util.CollectionUtils.asList(var13);
    var8.addRoles((java.util.Collection)var14);
    var5.setAuthenticationListeners((java.util.Collection)var14);
    var0.setSessionListeners((java.util.Collection)var14);
    org.jsecurity.realm.text.TextConfigurationRealm var18 = new org.jsecurity.realm.text.TextConfigurationRealm();
    java.io.InputStream var20 = org.jsecurity.util.ClassUtils.getResourceAsStream("");
    java.lang.Object[] var21 = new java.lang.Object[] { var20};
    java.util.List var22 = org.jsecurity.util.CollectionUtils.asList(var21);
    org.jsecurity.authc.pam.ModularRealmAuthenticator var23 = new org.jsecurity.authc.pam.ModularRealmAuthenticator(var22);
    org.jsecurity.subject.SimplePrincipalCollection var25 = new org.jsecurity.subject.SimplePrincipalCollection((java.util.Collection)var22, "org.jsecurity.authz.UnauthorizedException: org.jsecurity.session.ExpiredSessionException: ");
    org.jsecurity.session.UnknownSessionException var30 = new org.jsecurity.session.UnknownSessionException("dd\uFFFD", (java.io.Serializable)100.0f);
    org.jsecurity.session.SessionException var32 = new org.jsecurity.session.SessionException("dd\uFFFD", (java.lang.Throwable)var30, (java.io.Serializable)0);
    org.jsecurity.session.SessionException var33 = new org.jsecurity.session.SessionException("dd\uFFFD", (java.lang.Throwable)var30);
    var25.add((java.lang.Object)var33, "org.jsecurity.config.ConfigurationException: dd\uFFFD");
    var18.onLogout((org.jsecurity.subject.PrincipalCollection)var25);
    org.jsecurity.authc.pam.FirstSuccessfulAuthenticationStrategy var37 = new org.jsecurity.authc.pam.FirstSuccessfulAuthenticationStrategy();
    org.jsecurity.authz.UnauthorizedException var39 = new org.jsecurity.authz.UnauthorizedException("org.jsecurity.config.ConfigurationException: dd\uFFFD");
    java.lang.Throwable[] var40 = var39.getSuppressed();
    java.util.List var41 = org.jsecurity.util.CollectionUtils.asList((java.lang.Object[])var40);
    org.jsecurity.authc.UsernamePasswordToken var42 = new org.jsecurity.authc.UsernamePasswordToken();
    java.lang.String var43 = var42.getUsername();
    java.net.InetAddress var44 = var42.getInetAddress();
    org.jsecurity.authc.AuthenticationInfo var45 = var37.beforeAllAttempts((java.util.Collection)var41, (org.jsecurity.authc.AuthenticationToken)var42);
    boolean[] var46 = var0.hasRoles((org.jsecurity.subject.PrincipalCollection)var25, var41);
    org.jsecurity.authz.permission.WildcardPermissionResolver var47 = new org.jsecurity.authz.permission.WildcardPermissionResolver();
    org.jsecurity.authz.Permission var49 = var47.resolvePermission("hi!");
    org.jsecurity.authz.Permission var51 = var47.resolvePermission("hi!");
    var0.setPermissionResolver((org.jsecurity.authz.permission.PermissionResolver)var47);
    org.jsecurity.session.mgt.DefaultSessionManager var53 = new org.jsecurity.session.mgt.DefaultSessionManager();
    org.jsecurity.mgt.DefaultSecurityManager var54 = new org.jsecurity.mgt.DefaultSecurityManager();
    org.jsecurity.authz.permission.WildcardPermissionResolver var55 = new org.jsecurity.authz.permission.WildcardPermissionResolver();
    var54.setPermissionResolver((org.jsecurity.authz.permission.PermissionResolver)var55);
    org.jsecurity.cache.CacheManager var57 = var54.getCacheManager();
    var53.setCacheManager(var57);
    long var59 = var53.getSessionValidationInterval();
    boolean var60 = var53.isSessionValidationSchedulerEnabled();
    var0.setSessionManager((org.jsecurity.session.mgt.SessionManager)var53);
    org.jsecurity.codec.CodecException var64 = new org.jsecurity.codec.CodecException("dd\uFFFD");
    org.jsecurity.authc.ConcurrentAccessException var65 = new org.jsecurity.authc.ConcurrentAccessException("org.jsecurity.authz.UnauthorizedException: org.jsecurity.session.ExpiredSessionException: ", (java.lang.Throwable)var64);
    org.jsecurity.subject.SimplePrincipalCollection var67 = new org.jsecurity.subject.SimplePrincipalCollection((java.lang.Object)var64, "");
    java.io.InputStream var69 = org.jsecurity.util.ClassUtils.getResourceAsStream("");
    java.lang.Object[] var70 = new java.lang.Object[] { var69};
    java.util.List var71 = org.jsecurity.util.CollectionUtils.asList(var70);
    org.jsecurity.authc.pam.ModularRealmAuthenticator var72 = new org.jsecurity.authc.pam.ModularRealmAuthenticator(var71);
    var67.addAll((java.util.Collection)var71, "\u0000\u0000");
    java.io.InputStream var76 = org.jsecurity.util.ClassUtils.getResourceAsStream("");
    java.lang.Object[] var77 = new java.lang.Object[] { var76};
    java.util.List var78 = org.jsecurity.util.CollectionUtils.asList(var77);
    org.jsecurity.authc.pam.ModularRealmAuthenticator var79 = new org.jsecurity.authc.pam.ModularRealmAuthenticator(var78);
    var67.addAll((java.util.Collection)var78, "\u0000\u0000");
    org.jsecurity.authz.permission.WildcardPermission var84 = new org.jsecurity.authz.permission.WildcardPermission("a3e14b98-1050-4bcc-8787-431663db8814", false);
    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      var0.checkPermission((org.jsecurity.subject.PrincipalCollection)var67, (org.jsecurity.authz.Permission)var84);
      fail("Expected exception of type java.util.NoSuchElementException");
    } catch (java.util.NoSuchElementException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var2);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var3);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var4);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var12);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var13);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var14);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var20);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var21);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var22);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var40);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var41);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var43);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var44);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var45);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var46);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var49);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var51);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var57);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var59 == 3600000L);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var60 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var69);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var70);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var71);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var76);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var77);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var78);

  }

  public void test378() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest5.test378");


    org.jsecurity.realm.jndi.JndiRealmFactory var0 = new org.jsecurity.realm.jndi.JndiRealmFactory();
    java.util.Collection var1 = var0.getJndiNames();
    org.jsecurity.jndi.JndiTemplate var2 = var0.getJndiTemplate();
    java.util.Properties var3 = var0.getJndiEnvironment();
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var1);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var2);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var3);

  }

  public void test379() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest5.test379");


    org.jsecurity.session.StoppedSessionException var1 = new org.jsecurity.session.StoppedSessionException("01ce9c0e-cfba-431c-868c-f213e4a4ad24");
    org.jsecurity.subject.InvalidSubjectException var2 = new org.jsecurity.subject.InvalidSubjectException((java.lang.Throwable)var1);
    org.jsecurity.authc.UnknownAccountException var3 = new org.jsecurity.authc.UnknownAccountException((java.lang.Throwable)var1);

  }

  public void test380() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest5.test380");


    org.jsecurity.crypto.hash.Md5Hash var1 = org.jsecurity.crypto.hash.Md5Hash.fromBase64String("8ec85ffa-ab28-4808-9fcc-2d60518e27db");
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var1);

  }

  public void test381() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest5.test381");


    org.jsecurity.util.AntPathMatcher var0 = new org.jsecurity.util.AntPathMatcher();
    boolean var2 = var0.isPattern("\u0000\u0000\u0000");
    boolean var5 = var0.match("6464ff", "\uFFFD\uFFFD#\uFFFD\uFFFD.\uFFFD+rr\uFFFD\u07CA\u0000\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\u01E9\uFFFD*'\u0000\u0000");
    var0.setPathSeparator("orgjsecurityauthcCredentialsException783ccd3148a842dd890fdf885a7baafAA==");
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var2 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var5 == false);

  }

  public void test382() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest5.test382");


    org.jsecurity.authz.AuthorizationException var1 = new org.jsecurity.authz.AuthorizationException();
    org.jsecurity.authz.SimpleRole var2 = new org.jsecurity.authz.SimpleRole();
    org.jsecurity.authz.SimpleAuthorizationInfo var3 = new org.jsecurity.authz.SimpleAuthorizationInfo();
    var3.addRole("a2b823b1e72eae2b727289df8a00a89df8a0bab6ad8a89c4c5c7a9b62a270000");
    org.jsecurity.session.UnknownSessionException var10 = new org.jsecurity.session.UnknownSessionException("dd\uFFFD", (java.io.Serializable)100.0f);
    org.jsecurity.subject.SubjectException var11 = new org.jsecurity.subject.SubjectException("dd\uFFFD", (java.lang.Throwable)var10);
    org.jsecurity.io.SerializationException var12 = new org.jsecurity.io.SerializationException("", (java.lang.Throwable)var11);
    java.lang.Throwable[] var13 = var11.getSuppressed();
    java.util.Set var14 = org.jsecurity.util.CollectionUtils.asSet((java.lang.Object[])var13);
    var3.addRoles((java.util.Collection)var14);
    var2.addAll((java.util.Collection)var14);
    org.jsecurity.authz.SimpleRole var17 = new org.jsecurity.authz.SimpleRole();
    org.jsecurity.authz.SimpleAuthorizationInfo var18 = new org.jsecurity.authz.SimpleAuthorizationInfo();
    var18.addRole("a2b823b1e72eae2b727289df8a00a89df8a0bab6ad8a89c4c5c7a9b62a270000");
    org.jsecurity.session.UnknownSessionException var25 = new org.jsecurity.session.UnknownSessionException("dd\uFFFD", (java.io.Serializable)100.0f);
    org.jsecurity.subject.SubjectException var26 = new org.jsecurity.subject.SubjectException("dd\uFFFD", (java.lang.Throwable)var25);
    org.jsecurity.io.SerializationException var27 = new org.jsecurity.io.SerializationException("", (java.lang.Throwable)var26);
    java.lang.Throwable[] var28 = var26.getSuppressed();
    java.util.Set var29 = org.jsecurity.util.CollectionUtils.asSet((java.lang.Object[])var28);
    var18.addRoles((java.util.Collection)var29);
    var17.addAll((java.util.Collection)var29);
    java.lang.String var32 = var17.getName();
    org.jsecurity.authz.permission.WildcardPermission var35 = new org.jsecurity.authz.permission.WildcardPermission("hi!", false);
    var17.add((org.jsecurity.authz.Permission)var35);
    var2.add((org.jsecurity.authz.Permission)var35);
    org.jsecurity.authz.SimpleAuthorizationInfo var39 = new org.jsecurity.authz.SimpleAuthorizationInfo();
    org.jsecurity.session.UnknownSessionException var44 = new org.jsecurity.session.UnknownSessionException("dd\uFFFD", (java.io.Serializable)100.0f);
    org.jsecurity.subject.SubjectException var45 = new org.jsecurity.subject.SubjectException("dd\uFFFD", (java.lang.Throwable)var44);
    org.jsecurity.io.SerializationException var46 = new org.jsecurity.io.SerializationException("", (java.lang.Throwable)var45);
    java.lang.Throwable[] var47 = var45.getSuppressed();
    java.util.Set var48 = org.jsecurity.util.CollectionUtils.asSet((java.lang.Object[])var47);
    var39.setStringPermissions(var48);
    org.jsecurity.authz.SimpleRole var50 = new org.jsecurity.authz.SimpleRole("\u0000\u0000", var48);
    var2.setPermissions(var48);
    org.jsecurity.session.UnknownSessionException var52 = new org.jsecurity.session.UnknownSessionException("f4578b3a-1e8a-4019-b058-920d7e36ff9e", (java.lang.Throwable)var1, (java.io.Serializable)var2);
    org.jsecurity.authc.ExcessiveAttemptsException var53 = new org.jsecurity.authc.ExcessiveAttemptsException((java.lang.Throwable)var1);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var13);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var14);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var28);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var29);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var32);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var47);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var48);

  }

  public void test383() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest5.test383");


    org.jsecurity.authz.AuthorizationException var1 = new org.jsecurity.authz.AuthorizationException("org.jsecurity.realm.text.TextConfigurationRealm_2807");

  }

  public void test384() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest5.test384");


    org.jsecurity.session.mgt.ExecutorServiceSessionValidationScheduler var0 = new org.jsecurity.session.mgt.ExecutorServiceSessionValidationScheduler();
    var0.enableSessionValidation();
    boolean var2 = var0.isEnabled();
    var0.enableSessionValidation();
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var2 == true);

  }

  public void test385() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest5.test385");


    org.jsecurity.realm.activedirectory.ActiveDirectoryRealm var0 = new org.jsecurity.realm.activedirectory.ActiveDirectoryRealm();
    org.jsecurity.authc.credential.Sha256CredentialsMatcher var1 = new org.jsecurity.authc.credential.Sha256CredentialsMatcher();
    var0.setCredentialsMatcher((org.jsecurity.authc.credential.CredentialsMatcher)var1);
    java.lang.String var3 = var0.getAuthorizationCacheName();
    var0.setUrl("hi!");
    var0.setName("org.jsecurity.realm.text.PropertiesRealm_772");
    org.jsecurity.realm.activedirectory.ActiveDirectoryRealm var8 = new org.jsecurity.realm.activedirectory.ActiveDirectoryRealm();
    org.jsecurity.authc.credential.Sha256CredentialsMatcher var9 = new org.jsecurity.authc.credential.Sha256CredentialsMatcher();
    var8.setCredentialsMatcher((org.jsecurity.authc.credential.CredentialsMatcher)var9);
    java.lang.String var11 = var8.getAuthorizationCacheName();
    var8.setUrl("hi!");
    org.jsecurity.realm.ldap.DefaultLdapContextFactory var14 = new org.jsecurity.realm.ldap.DefaultLdapContextFactory();
    var8.setLdapContextFactory((org.jsecurity.realm.ldap.LdapContextFactory)var14);
    org.jsecurity.config.ReflectionBuilder var16 = new org.jsecurity.config.ReflectionBuilder();
    org.jsecurity.io.IniResource var17 = new org.jsecurity.io.IniResource();
    var17.setCharsetName("org.jsecurity.authz.UnauthorizedException: org.jsecurity.session.ExpiredSessionException: ");
    java.util.Map var20 = var17.getSections();
    java.util.Map var21 = var16.buildObjects(var20);
    org.jsecurity.config.ReflectionBuilder var22 = new org.jsecurity.config.ReflectionBuilder();
    org.jsecurity.io.IniResource var23 = new org.jsecurity.io.IniResource();
    var23.setCharsetName("org.jsecurity.authz.UnauthorizedException: org.jsecurity.session.ExpiredSessionException: ");
    java.util.Map var26 = var23.getSections();
    java.util.Map var27 = var22.buildObjects(var26);
    java.util.Map var28 = var16.buildObjects(var27);
    java.util.Map var29 = var16.getObjects();
    var14.setAdditionalEnvironment(var29);
    org.jsecurity.config.ReflectionBuilder var31 = new org.jsecurity.config.ReflectionBuilder();
    org.jsecurity.io.IniResource var32 = new org.jsecurity.io.IniResource();
    java.util.Map var33 = var32.getSections();
    var31.setObjects(var33);
    org.jsecurity.realm.activedirectory.ActiveDirectoryRealm var35 = new org.jsecurity.realm.activedirectory.ActiveDirectoryRealm();
    var35.init();
    var35.init();
    org.jsecurity.config.ReflectionBuilder var38 = new org.jsecurity.config.ReflectionBuilder();
    org.jsecurity.config.ReflectionBuilder var39 = new org.jsecurity.config.ReflectionBuilder();
    org.jsecurity.io.IniResource var40 = new org.jsecurity.io.IniResource();
    var40.setCharsetName("org.jsecurity.authz.UnauthorizedException: org.jsecurity.session.ExpiredSessionException: ");
    java.util.Map var43 = var40.getSections();
    java.util.Map var44 = var39.buildObjects(var43);
    org.jsecurity.config.ReflectionBuilder var45 = new org.jsecurity.config.ReflectionBuilder();
    org.jsecurity.io.IniResource var46 = new org.jsecurity.io.IniResource();
    var46.setCharsetName("org.jsecurity.authz.UnauthorizedException: org.jsecurity.session.ExpiredSessionException: ");
    java.util.Map var49 = var46.getSections();
    java.util.Map var50 = var45.buildObjects(var49);
    java.util.Map var51 = var39.buildObjects(var50);
    java.util.Map var52 = var38.buildObjects(var51);
    var35.setGroupRolesMap(var52);
    var31.setObjects(var52);
    org.jsecurity.config.ReflectionBuilder var55 = new org.jsecurity.config.ReflectionBuilder(var52);
    var14.setAdditionalEnvironment(var52);
    var0.setGroupRolesMap(var52);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var3);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var11);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var20);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var21);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var26);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var27);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var28);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var29);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var33);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var43);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var44);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var49);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var50);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var51);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var52);

  }

  public void test386() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest5.test386");


    org.jsecurity.realm.text.PropertiesRealm var0 = new org.jsecurity.realm.text.PropertiesRealm();
    org.jsecurity.realm.activedirectory.ActiveDirectoryRealm var1 = new org.jsecurity.realm.activedirectory.ActiveDirectoryRealm();
    org.jsecurity.authc.credential.Sha256CredentialsMatcher var2 = new org.jsecurity.authc.credential.Sha256CredentialsMatcher();
    var1.setCredentialsMatcher((org.jsecurity.authc.credential.CredentialsMatcher)var2);
    java.lang.String var4 = var1.getAuthorizationCacheName();
    var1.setPrincipalSuffix("org.jsecurity.config.ConfigurationException: dd\uFFFD");
    org.jsecurity.authz.permission.PermissionResolver var7 = var1.getPermissionResolver();
    var0.setPermissionResolver(var7);
    var0.setUseXmlFormat(false);
    var0.init();
    var0.setUseXmlFormat(false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var4);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var7);

  }

  public void test387() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest5.test387");


    org.jsecurity.realm.activedirectory.ActiveDirectoryRealm var0 = new org.jsecurity.realm.activedirectory.ActiveDirectoryRealm();
    org.jsecurity.authc.credential.Sha384CredentialsMatcher var1 = new org.jsecurity.authc.credential.Sha384CredentialsMatcher();
    var0.setCredentialsMatcher((org.jsecurity.authc.credential.CredentialsMatcher)var1);
    var0.setSystemPassword("4c3ac9b2-544e-4786-8da0-3c08b9281bd6");
    var0.setPrincipalSuffix("65e65177-d0e5-404e-b955-c04bc53877e7");
    var0.setSearchBase("1a1fe717-b2f7-4a28-9cfa-6f3955b8b913");
    org.jsecurity.realm.text.TextConfigurationRealm var10 = new org.jsecurity.realm.text.TextConfigurationRealm();
    java.io.InputStream var12 = org.jsecurity.util.ClassUtils.getResourceAsStream("");
    java.lang.Object[] var13 = new java.lang.Object[] { var12};
    java.util.List var14 = org.jsecurity.util.CollectionUtils.asList(var13);
    org.jsecurity.authc.pam.ModularRealmAuthenticator var15 = new org.jsecurity.authc.pam.ModularRealmAuthenticator(var14);
    org.jsecurity.subject.SimplePrincipalCollection var17 = new org.jsecurity.subject.SimplePrincipalCollection((java.util.Collection)var14, "org.jsecurity.authz.UnauthorizedException: org.jsecurity.session.ExpiredSessionException: ");
    org.jsecurity.session.UnknownSessionException var22 = new org.jsecurity.session.UnknownSessionException("dd\uFFFD", (java.io.Serializable)100.0f);
    org.jsecurity.session.SessionException var24 = new org.jsecurity.session.SessionException("dd\uFFFD", (java.lang.Throwable)var22, (java.io.Serializable)0);
    org.jsecurity.session.SessionException var25 = new org.jsecurity.session.SessionException("dd\uFFFD", (java.lang.Throwable)var22);
    var17.add((java.lang.Object)var25, "org.jsecurity.config.ConfigurationException: dd\uFFFD");
    var10.onLogout((org.jsecurity.subject.PrincipalCollection)var17);
    java.util.Set var30 = org.jsecurity.util.PermissionUtils.toPermissionStrings("org.jsecurity.config.ConfigurationException: dd\uFFFD");
    org.jsecurity.authz.SimpleAuthorizationInfo var31 = new org.jsecurity.authz.SimpleAuthorizationInfo(var30);
    org.jsecurity.authz.SimpleAuthorizingAccount var32 = new org.jsecurity.authz.SimpleAuthorizingAccount((org.jsecurity.subject.PrincipalCollection)var17, (java.lang.Object)var30);
    org.jsecurity.session.StoppedSessionException var33 = new org.jsecurity.session.StoppedSessionException("org.jsecurity.realm.SimpleAccountRealm-55-authorization", (java.io.Serializable)var17);
    byte[] var39 = new byte[] { (byte)100, (byte)100, (byte)(-1)};
    java.lang.String var40 = org.jsecurity.codec.CodecSupport.toString(var39);
    byte[] var41 = org.jsecurity.codec.Base64.encode(var39);
    char[] var42 = org.jsecurity.codec.CodecSupport.toChars(var41);
    org.jsecurity.authc.UsernamePasswordToken var44 = new org.jsecurity.authc.UsernamePasswordToken("org.jsecurity.realm.SimpleAccountRealm-55-authorization", var42, false);
    char[] var45 = var44.getPassword();
    org.jsecurity.session.mgt.SimpleSession var47 = new org.jsecurity.session.mgt.SimpleSession();
    var47.setTimeout((-1L));
    org.jsecurity.session.mgt.SimpleSession var50 = new org.jsecurity.session.mgt.SimpleSession();
    java.util.Date var51 = var50.getLastAccessTime();
    var47.setLastAccessTime(var51);
    java.net.InetAddress var53 = var47.getHostAddress();
    org.jsecurity.authc.UsernamePasswordToken var54 = new org.jsecurity.authc.UsernamePasswordToken("classpath:org/jsecurity/cache/ehcache/ehcache.xml", var45, false, var53);
    boolean var55 = var17.equals((java.lang.Object)var53);
    org.jsecurity.subject.SimplePrincipalCollection var56 = new org.jsecurity.subject.SimplePrincipalCollection((org.jsecurity.subject.PrincipalCollection)var17);
    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      boolean var58 = var0.isPermitted((org.jsecurity.subject.PrincipalCollection)var56, "3c0f8cd0-07d8-4de6-8030-3e8afad05e07");
      fail("Expected exception of type java.util.NoSuchElementException");
    } catch (java.util.NoSuchElementException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var12);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var13);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var14);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var30);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var39);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var40 + "' != '" + "dd\uFFFD"+ "'", var40.equals("dd\uFFFD"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var41);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var42);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var45);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var51);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var53);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var55 == false);

  }

  public void test388() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest5.test388");


    org.jsecurity.crypto.hash.Md2Hash var1 = org.jsecurity.crypto.hash.Md2Hash.fromBase64String("07e80a9d-8faf-4cf3-940d-6b8dc88fdd52");
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var1);

  }

  public void test389() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest5.test389");


    org.jsecurity.realm.jndi.JndiRealmFactory var0 = new org.jsecurity.realm.jndi.JndiRealmFactory();
    java.util.Collection var1 = var0.getJndiNames();
    var0.setJndiNames("e8e5d499-33c0-418e-93f9-76a51372c414");
    org.jsecurity.jndi.JndiTemplate var4 = var0.getJndiTemplate();
    org.jsecurity.authz.SimpleAuthorizationInfo var5 = new org.jsecurity.authz.SimpleAuthorizationInfo();
    var5.addRole("a2b823b1e72eae2b727289df8a00a89df8a0bab6ad8a89c4c5c7a9b62a270000");
    org.jsecurity.authz.SimpleAuthorizationInfo var8 = new org.jsecurity.authz.SimpleAuthorizationInfo();
    var8.addRole("a2b823b1e72eae2b727289df8a00a89df8a0bab6ad8a89c4c5c7a9b62a270000");
    org.jsecurity.session.UnknownSessionException var15 = new org.jsecurity.session.UnknownSessionException("dd\uFFFD", (java.io.Serializable)100.0f);
    org.jsecurity.subject.SubjectException var16 = new org.jsecurity.subject.SubjectException("dd\uFFFD", (java.lang.Throwable)var15);
    org.jsecurity.io.SerializationException var17 = new org.jsecurity.io.SerializationException("", (java.lang.Throwable)var16);
    java.lang.Throwable[] var18 = var16.getSuppressed();
    java.util.Set var19 = org.jsecurity.util.CollectionUtils.asSet((java.lang.Object[])var18);
    var8.addRoles((java.util.Collection)var19);
    var5.setObjectPermissions(var19);
    java.io.InputStream var23 = org.jsecurity.util.ClassUtils.getResourceAsStream("");
    java.lang.Object[] var24 = new java.lang.Object[] { var23};
    java.util.List var25 = org.jsecurity.util.CollectionUtils.asList(var24);
    org.jsecurity.authc.pam.ModularRealmAuthenticator var26 = new org.jsecurity.authc.pam.ModularRealmAuthenticator(var25);
    org.jsecurity.subject.SimplePrincipalCollection var28 = new org.jsecurity.subject.SimplePrincipalCollection((java.util.Collection)var25, "org.jsecurity.authz.UnauthorizedException: org.jsecurity.session.ExpiredSessionException: ");
    java.util.Set var29 = var28.getRealmNames();
    java.io.InputStream var31 = org.jsecurity.util.ClassUtils.getResourceAsStream("");
    java.lang.Object[] var32 = new java.lang.Object[] { var31};
    java.util.List var33 = org.jsecurity.util.CollectionUtils.asList(var32);
    org.jsecurity.authc.pam.ModularRealmAuthenticator var34 = new org.jsecurity.authc.pam.ModularRealmAuthenticator(var33);
    org.jsecurity.subject.SimplePrincipalCollection var36 = new org.jsecurity.subject.SimplePrincipalCollection((java.util.Collection)var33, "org.jsecurity.authz.UnauthorizedException: org.jsecurity.session.ExpiredSessionException: ");
    org.jsecurity.session.UnknownSessionException var41 = new org.jsecurity.session.UnknownSessionException("dd\uFFFD", (java.io.Serializable)100.0f);
    org.jsecurity.session.SessionException var43 = new org.jsecurity.session.SessionException("dd\uFFFD", (java.lang.Throwable)var41, (java.io.Serializable)0);
    org.jsecurity.session.SessionException var44 = new org.jsecurity.session.SessionException("dd\uFFFD", (java.lang.Throwable)var41);
    var36.add((java.lang.Object)var44, "org.jsecurity.config.ConfigurationException: dd\uFFFD");
    java.util.Set var47 = var36.asSet();
    var28.addAll((java.util.Collection)var47, "6464ff");
    var5.setStringPermissions(var47);
    var0.setJndiNames((java.util.Collection)var47);
    var0.setResourceRef(true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var1);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var4);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var18);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var19);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var23);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var24);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var25);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var29);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var31);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var32);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var33);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var47);

  }

  public void test390() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest5.test390");


    org.jsecurity.session.mgt.SimpleSession var0 = new org.jsecurity.session.mgt.SimpleSession();
    org.jsecurity.io.SerializationException var3 = new org.jsecurity.io.SerializationException("org.jsecurity.config.ConfigurationException: dd\uFFFD");
    org.jsecurity.authc.AccountException var4 = new org.jsecurity.authc.AccountException("a2b823b1e72eae2b727289df8a00a89df8a0bab6ad8a89c4c5c7a9b62a270000", (java.lang.Throwable)var3);
    var0.setId((java.io.Serializable)"a2b823b1e72eae2b727289df8a00a89df8a0bab6ad8a89c4c5c7a9b62a270000");
    org.jsecurity.session.mgt.eis.MemorySessionDAO var6 = new org.jsecurity.session.mgt.eis.MemorySessionDAO();
    org.jsecurity.cache.Cache var7 = var6.getActiveSessionsCache();
    org.jsecurity.cache.CacheManager var8 = var6.getCacheManager();
    org.jsecurity.cache.HashtableCacheManager var9 = new org.jsecurity.cache.HashtableCacheManager();
    org.jsecurity.cache.Cache var11 = var9.getCache("\u0000\u0000");
    var6.setActiveSessionsCache(var11);
    java.io.InputStream var14 = org.jsecurity.util.ClassUtils.getResourceAsStream("");
    java.lang.Object[] var15 = new java.lang.Object[] { var14};
    java.util.List var16 = org.jsecurity.util.CollectionUtils.asList(var15);
    org.jsecurity.authc.pam.ModularRealmAuthenticator var17 = new org.jsecurity.authc.pam.ModularRealmAuthenticator(var16);
    org.jsecurity.authc.pam.AllSuccessfulModularAuthenticationStrategy var18 = new org.jsecurity.authc.pam.AllSuccessfulModularAuthenticationStrategy();
    var17.setModularAuthenticationStrategy((org.jsecurity.authc.pam.ModularAuthenticationStrategy)var18);
    org.jsecurity.authz.SimpleAuthorizationInfo var20 = new org.jsecurity.authz.SimpleAuthorizationInfo();
    var20.addStringPermission("hi!");
    java.io.InputStream var24 = org.jsecurity.util.ClassUtils.getResourceAsStream("");
    java.lang.Object[] var25 = new java.lang.Object[] { var24};
    java.util.List var26 = org.jsecurity.util.CollectionUtils.asList(var25);
    var20.addRoles((java.util.Collection)var26);
    var17.setAuthenticationListeners((java.util.Collection)var26);
    org.jsecurity.realm.activedirectory.ActiveDirectoryRealm var29 = new org.jsecurity.realm.activedirectory.ActiveDirectoryRealm();
    var29.setPrincipalSuffix("");
    var17.setRealm((org.jsecurity.realm.Realm)var29);
    org.jsecurity.cache.HashtableCacheManager var33 = new org.jsecurity.cache.HashtableCacheManager();
    org.jsecurity.cache.Cache var35 = var33.getCache("\u0000\u0000");
    var29.setAuthorizationCache(var35);
    var6.setActiveSessionsCache(var35);
    org.jsecurity.session.mgt.SimpleSession var38 = new org.jsecurity.session.mgt.SimpleSession();
    java.io.Serializable var39 = var6.create((org.jsecurity.session.Session)var38);
    java.io.Serializable var40 = var38.getId();
    java.util.Map var41 = var38.getAttributes();
    org.jsecurity.session.mgt.SimpleSession var42 = new org.jsecurity.session.mgt.SimpleSession();
    var42.setTimeout((-1L));
    org.jsecurity.session.mgt.SimpleSession var45 = new org.jsecurity.session.mgt.SimpleSession();
    java.util.Date var46 = var45.getLastAccessTime();
    var42.setLastAccessTime(var46);
    org.jsecurity.session.mgt.SimpleSession var48 = new org.jsecurity.session.mgt.SimpleSession();
    java.util.Date var49 = var48.getLastAccessTime();
    var42.setStopTimestamp(var49);
    var38.setLastAccessTime(var49);
    var0.setStartTimestamp(var49);
    org.jsecurity.session.ProxiedSession var53 = new org.jsecurity.session.ProxiedSession((org.jsecurity.session.Session)var0);
    boolean var54 = var0.isValid();
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var7);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var8);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var11);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var14);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var15);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var16);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var24);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var25);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var26);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var35);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var39 + "' != '" + "b107504a-9dbb-4f22-a61f-4440c7af2158"+ "'", var39.equals("b107504a-9dbb-4f22-a61f-4440c7af2158"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var40 + "' != '" + "b107504a-9dbb-4f22-a61f-4440c7af2158"+ "'", var40.equals("b107504a-9dbb-4f22-a61f-4440c7af2158"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var41);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var46);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var49);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var54 == true);

  }

  public void test391() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest5.test391");


    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      org.jsecurity.io.IniResource var1 = new org.jsecurity.io.IniResource("org.jsecurity.realm.text.PropertiesRealm_3090");
      fail("Expected exception of type org.jsecurity.io.ResourceException");
    } catch (org.jsecurity.io.ResourceException e) {
      // Expected exception.
    }

  }

  public void test392() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest5.test392");


    org.jsecurity.util.UnavailableConstructorException var1 = new org.jsecurity.util.UnavailableConstructorException("95f7f9bef51a4a01d759fb43e86d7c04");

  }

  public void test393() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest5.test393");


    org.jsecurity.authz.ModularRealmAuthorizer var0 = new org.jsecurity.authz.ModularRealmAuthorizer();
    java.io.InputStream var2 = org.jsecurity.util.ClassUtils.getResourceAsStream("");
    java.lang.Object[] var3 = new java.lang.Object[] { var2};
    java.util.List var4 = org.jsecurity.util.CollectionUtils.asList(var3);
    org.jsecurity.authc.pam.ModularRealmAuthenticator var5 = new org.jsecurity.authc.pam.ModularRealmAuthenticator(var4);
    org.jsecurity.subject.SimplePrincipalCollection var7 = new org.jsecurity.subject.SimplePrincipalCollection((java.util.Collection)var4, "org.jsecurity.authz.UnauthorizedException: org.jsecurity.session.ExpiredSessionException: ");
    org.jsecurity.session.UnknownSessionException var12 = new org.jsecurity.session.UnknownSessionException("dd\uFFFD", (java.io.Serializable)100.0f);
    org.jsecurity.session.SessionException var14 = new org.jsecurity.session.SessionException("dd\uFFFD", (java.lang.Throwable)var12, (java.io.Serializable)0);
    org.jsecurity.session.SessionException var15 = new org.jsecurity.session.SessionException("dd\uFFFD", (java.lang.Throwable)var12);
    var7.add((java.lang.Object)var15, "org.jsecurity.config.ConfigurationException: dd\uFFFD");
    java.util.Set var18 = var7.asSet();
    var0.setRealms((java.util.Collection)var18);
    org.jsecurity.authz.UnauthorizedException var21 = new org.jsecurity.authz.UnauthorizedException("org.jsecurity.config.ConfigurationException: dd\uFFFD");
    java.lang.Throwable[] var22 = var21.getSuppressed();
    java.util.Set var23 = org.jsecurity.util.CollectionUtils.asSet((java.lang.Object[])var22);
    var0.setRealms((java.util.Collection)var23);
    org.jsecurity.realm.text.TextConfigurationRealm var25 = new org.jsecurity.realm.text.TextConfigurationRealm();
    org.jsecurity.realm.text.TextConfigurationRealm var26 = new org.jsecurity.realm.text.TextConfigurationRealm();
    java.io.InputStream var28 = org.jsecurity.util.ClassUtils.getResourceAsStream("");
    java.lang.Object[] var29 = new java.lang.Object[] { var28};
    java.util.List var30 = org.jsecurity.util.CollectionUtils.asList(var29);
    org.jsecurity.authc.pam.ModularRealmAuthenticator var31 = new org.jsecurity.authc.pam.ModularRealmAuthenticator(var30);
    org.jsecurity.subject.SimplePrincipalCollection var33 = new org.jsecurity.subject.SimplePrincipalCollection((java.util.Collection)var30, "org.jsecurity.authz.UnauthorizedException: org.jsecurity.session.ExpiredSessionException: ");
    org.jsecurity.session.UnknownSessionException var38 = new org.jsecurity.session.UnknownSessionException("dd\uFFFD", (java.io.Serializable)100.0f);
    org.jsecurity.session.SessionException var40 = new org.jsecurity.session.SessionException("dd\uFFFD", (java.lang.Throwable)var38, (java.io.Serializable)0);
    org.jsecurity.session.SessionException var41 = new org.jsecurity.session.SessionException("dd\uFFFD", (java.lang.Throwable)var38);
    var33.add((java.lang.Object)var41, "org.jsecurity.config.ConfigurationException: dd\uFFFD");
    var26.onLogout((org.jsecurity.subject.PrincipalCollection)var33);
    java.util.Collection var46 = var33.fromRealm("\u0000\u0000\u0000");
    var25.onLogout((org.jsecurity.subject.PrincipalCollection)var33);
    org.jsecurity.authz.aop.RoleAnnotationMethodInterceptor var48 = new org.jsecurity.authz.aop.RoleAnnotationMethodInterceptor();
    org.jsecurity.aop.AnnotationHandler var49 = var48.getHandler();
    java.lang.Class var50 = var49.getAnnotationClass();
    java.util.Collection var51 = var33.byType(var50);
    org.jsecurity.realm.jndi.JndiRealmFactory var52 = new org.jsecurity.realm.jndi.JndiRealmFactory();
    org.jsecurity.authc.ExpiredCredentialsException var54 = new org.jsecurity.authc.ExpiredCredentialsException();
    org.jsecurity.session.ExpiredSessionException var55 = new org.jsecurity.session.ExpiredSessionException("", (java.lang.Throwable)var54);
    java.lang.Throwable[] var56 = var55.getSuppressed();
    java.util.List var57 = org.jsecurity.util.CollectionUtils.asList((java.lang.Object[])var56);
    var52.setJndiNames((java.util.Collection)var57);
    var0.checkPermissions((org.jsecurity.subject.PrincipalCollection)var33, (java.util.Collection)var57);
    org.jsecurity.realm.text.TextConfigurationRealm var60 = new org.jsecurity.realm.text.TextConfigurationRealm();
    java.io.InputStream var62 = org.jsecurity.util.ClassUtils.getResourceAsStream("");
    java.lang.Object[] var63 = new java.lang.Object[] { var62};
    java.util.List var64 = org.jsecurity.util.CollectionUtils.asList(var63);
    org.jsecurity.authc.pam.ModularRealmAuthenticator var65 = new org.jsecurity.authc.pam.ModularRealmAuthenticator(var64);
    org.jsecurity.subject.SimplePrincipalCollection var67 = new org.jsecurity.subject.SimplePrincipalCollection((java.util.Collection)var64, "org.jsecurity.authz.UnauthorizedException: org.jsecurity.session.ExpiredSessionException: ");
    org.jsecurity.session.UnknownSessionException var72 = new org.jsecurity.session.UnknownSessionException("dd\uFFFD", (java.io.Serializable)100.0f);
    org.jsecurity.session.SessionException var74 = new org.jsecurity.session.SessionException("dd\uFFFD", (java.lang.Throwable)var72, (java.io.Serializable)0);
    org.jsecurity.session.SessionException var75 = new org.jsecurity.session.SessionException("dd\uFFFD", (java.lang.Throwable)var72);
    var67.add((java.lang.Object)var75, "org.jsecurity.config.ConfigurationException: dd\uFFFD");
    var60.onLogout((org.jsecurity.subject.PrincipalCollection)var67);
    org.jsecurity.cache.HashtableCacheManager var79 = new org.jsecurity.cache.HashtableCacheManager();
    org.jsecurity.cache.Cache var81 = var79.getCache("\u0000\u0000");
    var60.setAuthorizationCache(var81);
    org.jsecurity.codec.CodecException var85 = new org.jsecurity.codec.CodecException("dd\uFFFD");
    org.jsecurity.authc.ConcurrentAccessException var86 = new org.jsecurity.authc.ConcurrentAccessException("org.jsecurity.authz.UnauthorizedException: org.jsecurity.session.ExpiredSessionException: ", (java.lang.Throwable)var85);
    org.jsecurity.subject.SimplePrincipalCollection var88 = new org.jsecurity.subject.SimplePrincipalCollection((java.lang.Object)var85, "");
    var60.onLogout((org.jsecurity.subject.PrincipalCollection)var88);
    boolean var90 = var88.isEmpty();
    java.lang.String[] var94 = org.jsecurity.util.StringUtils.split("79fb14fe-52f1-4c29-b1e6-a4d06cd9ec79", 'a', ' ');
    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      boolean var95 = var0.isPermittedAll((org.jsecurity.subject.PrincipalCollection)var88, var94);
      fail("Expected exception of type java.lang.IllegalStateException");
    } catch (java.lang.IllegalStateException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var2);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var3);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var4);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var18);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var22);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var23);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var28);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var29);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var30);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var46);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var49);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var50);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var51);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var56);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var57);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var62);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var63);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var64);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var81);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var90 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var94);

  }

  public void test394() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest5.test394");


    org.jsecurity.realm.text.TextConfigurationRealm var0 = new org.jsecurity.realm.text.TextConfigurationRealm();
    java.io.InputStream var2 = org.jsecurity.util.ClassUtils.getResourceAsStream("");
    java.lang.Object[] var3 = new java.lang.Object[] { var2};
    java.util.List var4 = org.jsecurity.util.CollectionUtils.asList(var3);
    org.jsecurity.authc.pam.ModularRealmAuthenticator var5 = new org.jsecurity.authc.pam.ModularRealmAuthenticator(var4);
    org.jsecurity.subject.SimplePrincipalCollection var7 = new org.jsecurity.subject.SimplePrincipalCollection((java.util.Collection)var4, "org.jsecurity.authz.UnauthorizedException: org.jsecurity.session.ExpiredSessionException: ");
    org.jsecurity.session.UnknownSessionException var12 = new org.jsecurity.session.UnknownSessionException("dd\uFFFD", (java.io.Serializable)100.0f);
    org.jsecurity.session.SessionException var14 = new org.jsecurity.session.SessionException("dd\uFFFD", (java.lang.Throwable)var12, (java.io.Serializable)0);
    org.jsecurity.session.SessionException var15 = new org.jsecurity.session.SessionException("dd\uFFFD", (java.lang.Throwable)var12);
    var7.add((java.lang.Object)var15, "org.jsecurity.config.ConfigurationException: dd\uFFFD");
    var0.onLogout((org.jsecurity.subject.PrincipalCollection)var7);
    java.util.Set var20 = org.jsecurity.util.PermissionUtils.toPermissionStrings("org.jsecurity.config.ConfigurationException: dd\uFFFD");
    org.jsecurity.authz.SimpleAuthorizationInfo var21 = new org.jsecurity.authz.SimpleAuthorizationInfo(var20);
    org.jsecurity.authz.SimpleAuthorizingAccount var22 = new org.jsecurity.authz.SimpleAuthorizingAccount((org.jsecurity.subject.PrincipalCollection)var7, (java.lang.Object)var20);
    org.jsecurity.authz.SimpleAuthorizationInfo var23 = new org.jsecurity.authz.SimpleAuthorizationInfo();
    var23.addRole("a2b823b1e72eae2b727289df8a00a89df8a0bab6ad8a89c4c5c7a9b62a270000");
    org.jsecurity.session.UnknownSessionException var30 = new org.jsecurity.session.UnknownSessionException("dd\uFFFD", (java.io.Serializable)100.0f);
    org.jsecurity.subject.SubjectException var31 = new org.jsecurity.subject.SubjectException("dd\uFFFD", (java.lang.Throwable)var30);
    org.jsecurity.io.SerializationException var32 = new org.jsecurity.io.SerializationException("", (java.lang.Throwable)var31);
    java.lang.Throwable[] var33 = var31.getSuppressed();
    java.util.Set var34 = org.jsecurity.util.CollectionUtils.asSet((java.lang.Object[])var33);
    var23.addRoles((java.util.Collection)var34);
    var22.checkPermissions((java.util.Collection)var34);
    org.jsecurity.session.mgt.SimpleSession var37 = new org.jsecurity.session.mgt.SimpleSession();
    var37.setTimeout((-1L));
    org.jsecurity.session.mgt.SimpleSession var40 = new org.jsecurity.session.mgt.SimpleSession();
    java.util.Date var41 = var40.getLastAccessTime();
    var37.setLastAccessTime(var41);
    org.jsecurity.session.UnknownSessionException var47 = new org.jsecurity.session.UnknownSessionException("dd\uFFFD", (java.io.Serializable)100.0f);
    org.jsecurity.subject.SubjectException var48 = new org.jsecurity.subject.SubjectException("dd\uFFFD", (java.lang.Throwable)var47);
    org.jsecurity.io.SerializationException var49 = new org.jsecurity.io.SerializationException("", (java.lang.Throwable)var48);
    java.lang.Throwable[] var50 = var48.getSuppressed();
    java.lang.Throwable[] var51 = var48.getSuppressed();
    org.jsecurity.authz.SimpleAuthorizationInfo var54 = new org.jsecurity.authz.SimpleAuthorizationInfo();
    var54.addRole("a2b823b1e72eae2b727289df8a00a89df8a0bab6ad8a89c4c5c7a9b62a270000");
    org.jsecurity.session.UnknownSessionException var61 = new org.jsecurity.session.UnknownSessionException("dd\uFFFD", (java.io.Serializable)100.0f);
    org.jsecurity.subject.SubjectException var62 = new org.jsecurity.subject.SubjectException("dd\uFFFD", (java.lang.Throwable)var61);
    org.jsecurity.io.SerializationException var63 = new org.jsecurity.io.SerializationException("", (java.lang.Throwable)var62);
    java.lang.Throwable[] var64 = var62.getSuppressed();
    java.util.Set var65 = org.jsecurity.util.CollectionUtils.asSet((java.lang.Object[])var64);
    var54.addRoles((java.util.Collection)var65);
    java.io.InputStream var68 = org.jsecurity.util.ClassUtils.getResourceAsStream("");
    java.lang.Object[] var69 = new java.lang.Object[] { var68};
    java.util.List var70 = org.jsecurity.util.CollectionUtils.asList(var69);
    org.jsecurity.authc.pam.ModularRealmAuthenticator var71 = new org.jsecurity.authc.pam.ModularRealmAuthenticator(var70);
    org.jsecurity.subject.SimplePrincipalCollection var73 = new org.jsecurity.subject.SimplePrincipalCollection((java.util.Collection)var70, "org.jsecurity.authz.UnauthorizedException: org.jsecurity.session.ExpiredSessionException: ");
    org.jsecurity.session.UnknownSessionException var78 = new org.jsecurity.session.UnknownSessionException("dd\uFFFD", (java.io.Serializable)100.0f);
    org.jsecurity.session.SessionException var80 = new org.jsecurity.session.SessionException("dd\uFFFD", (java.lang.Throwable)var78, (java.io.Serializable)0);
    org.jsecurity.session.SessionException var81 = new org.jsecurity.session.SessionException("dd\uFFFD", (java.lang.Throwable)var78);
    var73.add((java.lang.Object)var81, "org.jsecurity.config.ConfigurationException: dd\uFFFD");
    java.util.Set var84 = var73.asSet();
    org.jsecurity.authz.SimpleAuthorizingAccount var85 = new org.jsecurity.authz.SimpleAuthorizingAccount((java.lang.Object)var51, (java.lang.Object)"\u0000\u0000\u0000", "\u0000\u0000\u0000", var65, var84);
    java.lang.Object var86 = var37.removeAttribute((java.lang.Object)var65);
    java.util.Collection var87 = var37.getAttributeKeys();
    boolean var88 = var22.hasAllRoles(var87);
    org.jsecurity.session.StoppedSessionException var89 = new org.jsecurity.session.StoppedSessionException((java.io.Serializable)var88);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var2);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var3);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var4);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var20);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var33);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var34);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var41);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var50);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var51);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var64);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var65);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var68);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var69);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var70);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var84);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var86);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var87);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var88 == true);

  }

  public void test395() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest5.test395");


    org.jsecurity.authz.SimpleAuthorizationInfo var1 = new org.jsecurity.authz.SimpleAuthorizationInfo();
    org.jsecurity.session.UnknownSessionException var6 = new org.jsecurity.session.UnknownSessionException("dd\uFFFD", (java.io.Serializable)100.0f);
    org.jsecurity.subject.SubjectException var7 = new org.jsecurity.subject.SubjectException("dd\uFFFD", (java.lang.Throwable)var6);
    org.jsecurity.io.SerializationException var8 = new org.jsecurity.io.SerializationException("", (java.lang.Throwable)var7);
    java.lang.Throwable[] var9 = var7.getSuppressed();
    java.util.Set var10 = org.jsecurity.util.CollectionUtils.asSet((java.lang.Object[])var9);
    var1.setStringPermissions(var10);
    java.util.Set var12 = var1.getRoles();
    org.jsecurity.authz.SimpleAuthorizationInfo var13 = new org.jsecurity.authz.SimpleAuthorizationInfo();
    var13.addRole("a2b823b1e72eae2b727289df8a00a89df8a0bab6ad8a89c4c5c7a9b62a270000");
    org.jsecurity.session.UnknownSessionException var20 = new org.jsecurity.session.UnknownSessionException("dd\uFFFD", (java.io.Serializable)100.0f);
    org.jsecurity.subject.SubjectException var21 = new org.jsecurity.subject.SubjectException("dd\uFFFD", (java.lang.Throwable)var20);
    org.jsecurity.io.SerializationException var22 = new org.jsecurity.io.SerializationException("", (java.lang.Throwable)var21);
    java.lang.Throwable[] var23 = var21.getSuppressed();
    java.util.Set var24 = org.jsecurity.util.CollectionUtils.asSet((java.lang.Object[])var23);
    var13.addRoles((java.util.Collection)var24);
    var1.setRoles(var24);
    org.jsecurity.authz.SimpleRole var27 = new org.jsecurity.authz.SimpleRole("org.jsecurity.authz.UnauthorizedException: org.jsecurity.session.ExpiredSessionException: ", var24);
    java.io.InputStream var29 = org.jsecurity.util.ClassUtils.getResourceAsStream("");
    java.lang.Object[] var30 = new java.lang.Object[] { var29};
    java.util.List var31 = org.jsecurity.util.CollectionUtils.asList(var30);
    org.jsecurity.authc.pam.ModularRealmAuthenticator var32 = new org.jsecurity.authc.pam.ModularRealmAuthenticator(var31);
    org.jsecurity.subject.SimplePrincipalCollection var34 = new org.jsecurity.subject.SimplePrincipalCollection((java.util.Collection)var31, "org.jsecurity.authz.UnauthorizedException: org.jsecurity.session.ExpiredSessionException: ");
    org.jsecurity.io.ResourceException var38 = new org.jsecurity.io.ResourceException("hi!");
    org.jsecurity.authc.UnknownAccountException var39 = new org.jsecurity.authc.UnknownAccountException((java.lang.Throwable)var38);
    org.jsecurity.session.StoppedSessionException var40 = new org.jsecurity.session.StoppedSessionException("dd\uFFFD", (java.io.Serializable)var38);
    org.jsecurity.session.UnknownSessionException var41 = new org.jsecurity.session.UnknownSessionException("org.jsecurity.authz.UnauthorizedException: org.jsecurity.session.ExpiredSessionException: ", (java.lang.Throwable)var38);
    boolean var42 = var34.equals((java.lang.Object)var38);
    org.jsecurity.authz.SimpleAuthorizationInfo var43 = new org.jsecurity.authz.SimpleAuthorizationInfo();
    var43.addRole("a2b823b1e72eae2b727289df8a00a89df8a0bab6ad8a89c4c5c7a9b62a270000");
    org.jsecurity.authz.SimpleAuthorizationInfo var46 = new org.jsecurity.authz.SimpleAuthorizationInfo();
    var46.addRole("a2b823b1e72eae2b727289df8a00a89df8a0bab6ad8a89c4c5c7a9b62a270000");
    org.jsecurity.session.UnknownSessionException var53 = new org.jsecurity.session.UnknownSessionException("dd\uFFFD", (java.io.Serializable)100.0f);
    org.jsecurity.subject.SubjectException var54 = new org.jsecurity.subject.SubjectException("dd\uFFFD", (java.lang.Throwable)var53);
    org.jsecurity.io.SerializationException var55 = new org.jsecurity.io.SerializationException("", (java.lang.Throwable)var54);
    java.lang.Throwable[] var56 = var54.getSuppressed();
    java.util.Set var57 = org.jsecurity.util.CollectionUtils.asSet((java.lang.Object[])var56);
    var46.addRoles((java.util.Collection)var57);
    var43.setObjectPermissions(var57);
    java.io.InputStream var61 = org.jsecurity.util.ClassUtils.getResourceAsStream("");
    java.lang.Object[] var62 = new java.lang.Object[] { var61};
    java.util.List var63 = org.jsecurity.util.CollectionUtils.asList(var62);
    org.jsecurity.authc.pam.ModularRealmAuthenticator var64 = new org.jsecurity.authc.pam.ModularRealmAuthenticator(var63);
    org.jsecurity.subject.SimplePrincipalCollection var66 = new org.jsecurity.subject.SimplePrincipalCollection((java.util.Collection)var63, "org.jsecurity.authz.UnauthorizedException: org.jsecurity.session.ExpiredSessionException: ");
    java.util.Set var67 = var66.getRealmNames();
    java.io.InputStream var69 = org.jsecurity.util.ClassUtils.getResourceAsStream("");
    java.lang.Object[] var70 = new java.lang.Object[] { var69};
    java.util.List var71 = org.jsecurity.util.CollectionUtils.asList(var70);
    org.jsecurity.authc.pam.ModularRealmAuthenticator var72 = new org.jsecurity.authc.pam.ModularRealmAuthenticator(var71);
    org.jsecurity.subject.SimplePrincipalCollection var74 = new org.jsecurity.subject.SimplePrincipalCollection((java.util.Collection)var71, "org.jsecurity.authz.UnauthorizedException: org.jsecurity.session.ExpiredSessionException: ");
    org.jsecurity.session.UnknownSessionException var79 = new org.jsecurity.session.UnknownSessionException("dd\uFFFD", (java.io.Serializable)100.0f);
    org.jsecurity.session.SessionException var81 = new org.jsecurity.session.SessionException("dd\uFFFD", (java.lang.Throwable)var79, (java.io.Serializable)0);
    org.jsecurity.session.SessionException var82 = new org.jsecurity.session.SessionException("dd\uFFFD", (java.lang.Throwable)var79);
    var74.add((java.lang.Object)var82, "org.jsecurity.config.ConfigurationException: dd\uFFFD");
    java.util.Set var85 = var74.asSet();
    var66.addAll((java.util.Collection)var85, "6464ff");
    var43.setStringPermissions(var85);
    var34.addAll((java.util.Collection)var85, "\uFFFD\uFFFD#\uFFFD\uFFFD.\uFFFD+r\uFFFD\u6959(\uFFFD\uFFFDW\uFFFDq\uFFFD.\uFFFD\uFFFD^jY\uFFFDj\uFFFDa\uFFFD\uFFFD\uFFFDj\u0628\u0000");
    var27.setPermissions(var85);
    org.jsecurity.authz.ModularRealmAuthorizer var92 = new org.jsecurity.authz.ModularRealmAuthorizer((java.util.Collection)var85);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var9);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var10);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var12);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var23);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var24);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var29);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var30);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var31);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var42 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var56);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var57);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var61);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var62);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var63);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var67);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var69);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var70);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var71);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var85);

  }

  public void test396() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest5.test396");


    org.jsecurity.session.UnknownSessionException var4 = new org.jsecurity.session.UnknownSessionException("dd\uFFFD", (java.io.Serializable)100.0f);
    org.jsecurity.config.ConfigurationException var5 = new org.jsecurity.config.ConfigurationException("dd\uFFFD", (java.lang.Throwable)var4);
    org.jsecurity.session.ExpiredSessionException var7 = new org.jsecurity.session.ExpiredSessionException("", (java.lang.Throwable)var5, (java.io.Serializable)true);
    org.jsecurity.authc.pam.UnsupportedTokenException var8 = new org.jsecurity.authc.pam.UnsupportedTokenException((java.lang.Throwable)var7);
    org.jsecurity.authc.IncorrectCredentialsException var9 = new org.jsecurity.authc.IncorrectCredentialsException((java.lang.Throwable)var7);
    org.jsecurity.session.ExpiredSessionException var10 = new org.jsecurity.session.ExpiredSessionException((java.lang.Throwable)var7);

  }

  public void test397() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest5.test397");


    org.jsecurity.cache.HashtableCache var1 = new org.jsecurity.cache.HashtableCache("\u0000\u0000\u0000");
    org.jsecurity.realm.text.TextConfigurationRealm var2 = new org.jsecurity.realm.text.TextConfigurationRealm();
    java.io.InputStream var4 = org.jsecurity.util.ClassUtils.getResourceAsStream("");
    java.lang.Object[] var5 = new java.lang.Object[] { var4};
    java.util.List var6 = org.jsecurity.util.CollectionUtils.asList(var5);
    org.jsecurity.authc.pam.ModularRealmAuthenticator var7 = new org.jsecurity.authc.pam.ModularRealmAuthenticator(var6);
    org.jsecurity.subject.SimplePrincipalCollection var9 = new org.jsecurity.subject.SimplePrincipalCollection((java.util.Collection)var6, "org.jsecurity.authz.UnauthorizedException: org.jsecurity.session.ExpiredSessionException: ");
    org.jsecurity.session.UnknownSessionException var14 = new org.jsecurity.session.UnknownSessionException("dd\uFFFD", (java.io.Serializable)100.0f);
    org.jsecurity.session.SessionException var16 = new org.jsecurity.session.SessionException("dd\uFFFD", (java.lang.Throwable)var14, (java.io.Serializable)0);
    org.jsecurity.session.SessionException var17 = new org.jsecurity.session.SessionException("dd\uFFFD", (java.lang.Throwable)var14);
    var9.add((java.lang.Object)var17, "org.jsecurity.config.ConfigurationException: dd\uFFFD");
    var2.onLogout((org.jsecurity.subject.PrincipalCollection)var9);
    org.jsecurity.authc.ExpiredCredentialsException var22 = new org.jsecurity.authc.ExpiredCredentialsException();
    org.jsecurity.session.ExpiredSessionException var23 = new org.jsecurity.session.ExpiredSessionException("", (java.lang.Throwable)var22);
    java.lang.Throwable[] var24 = var23.getSuppressed();
    org.jsecurity.io.ResourceException var25 = new org.jsecurity.io.ResourceException((java.lang.Throwable)var23);
    org.jsecurity.authc.SimpleAuthenticationInfo var26 = new org.jsecurity.authc.SimpleAuthenticationInfo((org.jsecurity.subject.PrincipalCollection)var9, (java.lang.Object)var23);
    org.jsecurity.codec.CodecException var29 = new org.jsecurity.codec.CodecException("dd\uFFFD");
    org.jsecurity.authc.ConcurrentAccessException var30 = new org.jsecurity.authc.ConcurrentAccessException("org.jsecurity.authz.UnauthorizedException: org.jsecurity.session.ExpiredSessionException: ", (java.lang.Throwable)var29);
    org.jsecurity.subject.SimplePrincipalCollection var32 = new org.jsecurity.subject.SimplePrincipalCollection((java.lang.Object)var29, "");
    java.io.InputStream var34 = org.jsecurity.util.ClassUtils.getResourceAsStream("");
    java.lang.Object[] var35 = new java.lang.Object[] { var34};
    java.util.List var36 = org.jsecurity.util.CollectionUtils.asList(var35);
    org.jsecurity.authc.pam.ModularRealmAuthenticator var37 = new org.jsecurity.authc.pam.ModularRealmAuthenticator(var36);
    var32.addAll((java.util.Collection)var36, "\u0000\u0000");
    org.jsecurity.authz.UnauthorizedException var41 = new org.jsecurity.authz.UnauthorizedException();
    org.jsecurity.session.SessionException var43 = new org.jsecurity.session.SessionException("", (java.lang.Throwable)var41, (java.io.Serializable)"org.jsecurity.config.ConfigurationException: dd\uFFFD");
    org.jsecurity.crypto.hash.Sha1Hash var44 = new org.jsecurity.crypto.hash.Sha1Hash((java.lang.Object)"");
    org.jsecurity.session.UnknownSessionException var49 = new org.jsecurity.session.UnknownSessionException("dd\uFFFD", (java.io.Serializable)100.0f);
    org.jsecurity.subject.SubjectException var50 = new org.jsecurity.subject.SubjectException("dd\uFFFD", (java.lang.Throwable)var49);
    org.jsecurity.io.SerializationException var51 = new org.jsecurity.io.SerializationException("", (java.lang.Throwable)var50);
    java.lang.Throwable[] var52 = var50.getSuppressed();
    java.util.Set var53 = org.jsecurity.util.CollectionUtils.asSet((java.lang.Object[])var52);
    org.jsecurity.authz.SimpleAuthorizationInfo var55 = new org.jsecurity.authz.SimpleAuthorizationInfo();
    org.jsecurity.session.UnknownSessionException var60 = new org.jsecurity.session.UnknownSessionException("dd\uFFFD", (java.io.Serializable)100.0f);
    org.jsecurity.subject.SubjectException var61 = new org.jsecurity.subject.SubjectException("dd\uFFFD", (java.lang.Throwable)var60);
    org.jsecurity.io.SerializationException var62 = new org.jsecurity.io.SerializationException("", (java.lang.Throwable)var61);
    java.lang.Throwable[] var63 = var61.getSuppressed();
    java.util.Set var64 = org.jsecurity.util.CollectionUtils.asSet((java.lang.Object[])var63);
    var55.setStringPermissions(var64);
    java.util.Set var66 = var55.getRoles();
    org.jsecurity.authz.SimpleAuthorizationInfo var67 = new org.jsecurity.authz.SimpleAuthorizationInfo();
    var67.addRole("a2b823b1e72eae2b727289df8a00a89df8a0bab6ad8a89c4c5c7a9b62a270000");
    org.jsecurity.session.UnknownSessionException var74 = new org.jsecurity.session.UnknownSessionException("dd\uFFFD", (java.io.Serializable)100.0f);
    org.jsecurity.subject.SubjectException var75 = new org.jsecurity.subject.SubjectException("dd\uFFFD", (java.lang.Throwable)var74);
    org.jsecurity.io.SerializationException var76 = new org.jsecurity.io.SerializationException("", (java.lang.Throwable)var75);
    java.lang.Throwable[] var77 = var75.getSuppressed();
    java.util.Set var78 = org.jsecurity.util.CollectionUtils.asSet((java.lang.Object[])var77);
    var67.addRoles((java.util.Collection)var78);
    var55.setRoles(var78);
    org.jsecurity.authz.SimpleRole var81 = new org.jsecurity.authz.SimpleRole("org.jsecurity.authz.UnauthorizedException: org.jsecurity.session.ExpiredSessionException: ", var78);
    org.jsecurity.authc.SimpleAccount var82 = new org.jsecurity.authc.SimpleAccount((org.jsecurity.subject.PrincipalCollection)var32, (java.lang.Object)"", var53, var78);
    var26.setPrincipals((org.jsecurity.subject.PrincipalCollection)var32);
    java.lang.String[] var87 = org.jsecurity.util.StringUtils.split("dd\uFFFD", '4', 'a');
    var1.put((java.lang.Object)var32, (java.lang.Object)'a');
    java.util.Set var89 = var1.keys();
    java.util.Set var90 = var1.keys();
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var4);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var5);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var6);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var24);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var34);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var35);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var36);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var52);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var53);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var63);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var64);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var66);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var77);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var78);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var87);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var89);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var90);

  }

  public void test398() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest5.test398");


    org.jsecurity.io.ResourceException var4 = new org.jsecurity.io.ResourceException("hi!");
    org.jsecurity.codec.CodecException var5 = new org.jsecurity.codec.CodecException((java.lang.Throwable)var4);
    org.jsecurity.JSecurityException var6 = new org.jsecurity.JSecurityException("a2b823b1e72eae2b727289df8a00a89df8a0bab6ad8a89c4c5c7a9b62a270000", (java.lang.Throwable)var4);
    org.jsecurity.util.InstantiationException var7 = new org.jsecurity.util.InstantiationException("org.jsecurity.config.ConfigurationException: dd\uFFFD", (java.lang.Throwable)var6);
    org.jsecurity.codec.CodecException var10 = new org.jsecurity.codec.CodecException("dd\uFFFD");
    org.jsecurity.authc.ConcurrentAccessException var11 = new org.jsecurity.authc.ConcurrentAccessException("org.jsecurity.authz.UnauthorizedException: org.jsecurity.session.ExpiredSessionException: ", (java.lang.Throwable)var10);
    org.jsecurity.subject.SimplePrincipalCollection var13 = new org.jsecurity.subject.SimplePrincipalCollection((java.lang.Object)var10, "");
    org.jsecurity.authc.pam.FirstSuccessfulAuthenticationStrategy var14 = new org.jsecurity.authc.pam.FirstSuccessfulAuthenticationStrategy();
    org.jsecurity.authz.UnauthorizedException var16 = new org.jsecurity.authz.UnauthorizedException("org.jsecurity.config.ConfigurationException: dd\uFFFD");
    java.lang.Throwable[] var17 = var16.getSuppressed();
    java.util.List var18 = org.jsecurity.util.CollectionUtils.asList((java.lang.Object[])var17);
    org.jsecurity.authc.UsernamePasswordToken var19 = new org.jsecurity.authc.UsernamePasswordToken();
    java.lang.String var20 = var19.getUsername();
    java.net.InetAddress var21 = var19.getInetAddress();
    org.jsecurity.authc.AuthenticationInfo var22 = var14.beforeAllAttempts((java.util.Collection)var18, (org.jsecurity.authc.AuthenticationToken)var19);
    org.jsecurity.session.UnknownSessionException var27 = new org.jsecurity.session.UnknownSessionException("dd\uFFFD", (java.io.Serializable)100.0f);
    org.jsecurity.subject.SubjectException var28 = new org.jsecurity.subject.SubjectException("dd\uFFFD", (java.lang.Throwable)var27);
    org.jsecurity.io.SerializationException var29 = new org.jsecurity.io.SerializationException("", (java.lang.Throwable)var28);
    java.lang.Throwable[] var30 = var28.getSuppressed();
    java.util.Set var31 = org.jsecurity.util.CollectionUtils.asSet((java.lang.Object[])var30);
    org.jsecurity.authc.SimpleAccount var32 = new org.jsecurity.authc.SimpleAccount((org.jsecurity.subject.PrincipalCollection)var13, (java.lang.Object)var18, var31);
    java.io.InputStream var34 = org.jsecurity.util.ClassUtils.getResourceAsStream("");
    java.lang.Object[] var35 = new java.lang.Object[] { var34};
    java.util.List var36 = org.jsecurity.util.CollectionUtils.asList(var35);
    org.jsecurity.authc.pam.ModularRealmAuthenticator var37 = new org.jsecurity.authc.pam.ModularRealmAuthenticator(var36);
    org.jsecurity.subject.SimplePrincipalCollection var39 = new org.jsecurity.subject.SimplePrincipalCollection((java.util.Collection)var36, "org.jsecurity.authz.UnauthorizedException: org.jsecurity.session.ExpiredSessionException: ");
    org.jsecurity.io.ResourceException var43 = new org.jsecurity.io.ResourceException("hi!");
    org.jsecurity.authc.UnknownAccountException var44 = new org.jsecurity.authc.UnknownAccountException((java.lang.Throwable)var43);
    org.jsecurity.session.StoppedSessionException var45 = new org.jsecurity.session.StoppedSessionException("dd\uFFFD", (java.io.Serializable)var43);
    org.jsecurity.session.UnknownSessionException var46 = new org.jsecurity.session.UnknownSessionException("org.jsecurity.authz.UnauthorizedException: org.jsecurity.session.ExpiredSessionException: ", (java.lang.Throwable)var43);
    boolean var47 = var39.equals((java.lang.Object)var43);
    var13.addAll((org.jsecurity.subject.PrincipalCollection)var39);
    java.util.List var49 = var39.asList();
    org.jsecurity.authz.ModularRealmAuthorizer var50 = new org.jsecurity.authz.ModularRealmAuthorizer((java.util.Collection)var49);
    java.io.InputStream var52 = org.jsecurity.util.ClassUtils.getResourceAsStream("");
    java.lang.Object[] var53 = new java.lang.Object[] { var52};
    java.util.List var54 = org.jsecurity.util.CollectionUtils.asList(var53);
    org.jsecurity.authc.pam.ModularRealmAuthenticator var55 = new org.jsecurity.authc.pam.ModularRealmAuthenticator(var54);
    org.jsecurity.subject.SimplePrincipalCollection var57 = new org.jsecurity.subject.SimplePrincipalCollection((java.util.Collection)var54, "org.jsecurity.authz.UnauthorizedException: org.jsecurity.session.ExpiredSessionException: ");
    java.util.List var58 = var57.asList();
    org.jsecurity.codec.CodecException var61 = new org.jsecurity.codec.CodecException("dd\uFFFD");
    org.jsecurity.authc.ConcurrentAccessException var62 = new org.jsecurity.authc.ConcurrentAccessException("org.jsecurity.authz.UnauthorizedException: org.jsecurity.session.ExpiredSessionException: ", (java.lang.Throwable)var61);
    org.jsecurity.subject.SimplePrincipalCollection var64 = new org.jsecurity.subject.SimplePrincipalCollection((java.lang.Object)var61, "");
    org.jsecurity.authc.pam.FirstSuccessfulAuthenticationStrategy var65 = new org.jsecurity.authc.pam.FirstSuccessfulAuthenticationStrategy();
    org.jsecurity.authz.UnauthorizedException var67 = new org.jsecurity.authz.UnauthorizedException("org.jsecurity.config.ConfigurationException: dd\uFFFD");
    java.lang.Throwable[] var68 = var67.getSuppressed();
    java.util.List var69 = org.jsecurity.util.CollectionUtils.asList((java.lang.Object[])var68);
    org.jsecurity.authc.UsernamePasswordToken var70 = new org.jsecurity.authc.UsernamePasswordToken();
    java.lang.String var71 = var70.getUsername();
    java.net.InetAddress var72 = var70.getInetAddress();
    org.jsecurity.authc.AuthenticationInfo var73 = var65.beforeAllAttempts((java.util.Collection)var69, (org.jsecurity.authc.AuthenticationToken)var70);
    org.jsecurity.session.UnknownSessionException var78 = new org.jsecurity.session.UnknownSessionException("dd\uFFFD", (java.io.Serializable)100.0f);
    org.jsecurity.subject.SubjectException var79 = new org.jsecurity.subject.SubjectException("dd\uFFFD", (java.lang.Throwable)var78);
    org.jsecurity.io.SerializationException var80 = new org.jsecurity.io.SerializationException("", (java.lang.Throwable)var79);
    java.lang.Throwable[] var81 = var79.getSuppressed();
    java.util.Set var82 = org.jsecurity.util.CollectionUtils.asSet((java.lang.Object[])var81);
    org.jsecurity.authc.SimpleAccount var83 = new org.jsecurity.authc.SimpleAccount((org.jsecurity.subject.PrincipalCollection)var64, (java.lang.Object)var69, var82);
    boolean[] var84 = var50.hasRoles((org.jsecurity.subject.PrincipalCollection)var57, var69);
    org.jsecurity.io.SerializationException var87 = new org.jsecurity.io.SerializationException("org.jsecurity.config.ConfigurationException: dd\uFFFD");
    org.jsecurity.authc.AccountException var88 = new org.jsecurity.authc.AccountException("a2b823b1e72eae2b727289df8a00a89df8a0bab6ad8a89c4c5c7a9b62a270000", (java.lang.Throwable)var87);
    org.jsecurity.session.InvalidSessionException var89 = new org.jsecurity.session.InvalidSessionException((java.lang.Throwable)var88);
    boolean var90 = var57.equals((java.lang.Object)var88);
    org.jsecurity.authc.SimpleAccount var92 = new org.jsecurity.authc.SimpleAccount();
    var92.setCredentialsExpired(false);
    boolean var95 = var92.isLocked();
    boolean var96 = var92.isLocked();
    org.jsecurity.session.InvalidSessionException var97 = new org.jsecurity.session.InvalidSessionException("6464ff", (java.io.Serializable)var92);
    boolean var98 = var57.equals((java.lang.Object)var92);
    org.jsecurity.session.UnknownSessionException var99 = new org.jsecurity.session.UnknownSessionException("org.jsecurity.realm.text.TextConfigurationRealm_3659", (java.lang.Throwable)var7, (java.io.Serializable)var98);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var17);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var18);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var20);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var21);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var22);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var30);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var31);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var34);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var35);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var36);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var47 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var49);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var52);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var53);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var54);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var58);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var68);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var69);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var71);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var72);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var73);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var81);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var82);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var84);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var90 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var95 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var96 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var98 == false);

  }

  public void test399() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest5.test399");


    java.lang.String var1 = org.jsecurity.util.StringUtils.clean("org.jsecurity.authz.UnauthorizedException: org.jsecurity.session.ExpiredSessionException: ");
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var1 + "' != '" + "org.jsecurity.authz.UnauthorizedException: org.jsecurity.session.ExpiredSessionException:"+ "'", var1.equals("org.jsecurity.authz.UnauthorizedException: org.jsecurity.session.ExpiredSessionException:"));

  }

  public void test400() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest5.test400");


    org.jsecurity.authc.pam.AllSuccessfulModularAuthenticationStrategy var1 = new org.jsecurity.authc.pam.AllSuccessfulModularAuthenticationStrategy();
    char[] var3 = new char[] { };
    org.jsecurity.authc.UsernamePasswordToken var5 = new org.jsecurity.authc.UsernamePasswordToken("hi!", var3, true);
    org.jsecurity.authc.SimpleAccount var6 = new org.jsecurity.authc.SimpleAccount();
    var6.setCredentialsExpired(false);
    boolean var9 = var6.isLocked();
    org.jsecurity.authc.AuthenticationInfo var10 = var1.afterAllAttempts((org.jsecurity.authc.AuthenticationToken)var5, (org.jsecurity.authc.AuthenticationInfo)var6);
    char[] var13 = new char[] { };
    org.jsecurity.authc.UsernamePasswordToken var15 = new org.jsecurity.authc.UsernamePasswordToken("hi!", var13, true);
    org.jsecurity.authc.UsernamePasswordToken var16 = new org.jsecurity.authc.UsernamePasswordToken("\u0000\u0000", var13);
    java.lang.Object var17 = var16.getPrincipal();
    org.jsecurity.authc.SimpleAccount var18 = new org.jsecurity.authc.SimpleAccount();
    var18.setCredentialsExpired(false);
    var18.setCredentialsExpired(false);
    boolean var23 = var18.isCredentialsExpired();
    org.jsecurity.authc.AuthenticationInfo var24 = var1.afterAllAttempts((org.jsecurity.authc.AuthenticationToken)var16, (org.jsecurity.authc.AuthenticationInfo)var18);
    var16.setUsername("org.jsecurity.config.ConfigurationException: dd\uFFFD");
    org.jsecurity.session.SessionException var27 = new org.jsecurity.session.SessionException("52a4a421-03d6-4e18-abbd-dd3112c2d7b3", (java.io.Serializable)"org.jsecurity.config.ConfigurationException: dd\uFFFD");
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var3);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var9 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var10);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var13);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var17 + "' != '" + "\u0000\u0000"+ "'", var17.equals("\u0000\u0000"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var23 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var24);

  }

  public void test401() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest5.test401");


    org.jsecurity.session.mgt.DefaultSessionManager var0 = new org.jsecurity.session.mgt.DefaultSessionManager();
    org.jsecurity.realm.SimpleAccountRealm var2 = new org.jsecurity.realm.SimpleAccountRealm("hi!");
    char[] var5 = new char[] { };
    org.jsecurity.authc.UsernamePasswordToken var7 = new org.jsecurity.authc.UsernamePasswordToken("hi!", var5, true);
    org.jsecurity.authc.UsernamePasswordToken var8 = new org.jsecurity.authc.UsernamePasswordToken("\u0000\u0000", var5);
    java.lang.Object var9 = var8.getPrincipal();
    boolean var10 = var2.supports((org.jsecurity.authc.AuthenticationToken)var8);
    org.jsecurity.session.mgt.eis.MemorySessionDAO var11 = new org.jsecurity.session.mgt.eis.MemorySessionDAO();
    org.jsecurity.cache.Cache var12 = var11.getActiveSessionsCache();
    org.jsecurity.cache.CacheManager var13 = var11.getCacheManager();
    org.jsecurity.cache.HashtableCacheManager var14 = new org.jsecurity.cache.HashtableCacheManager();
    org.jsecurity.cache.Cache var16 = var14.getCache("\u0000\u0000");
    var11.setActiveSessionsCache(var16);
    java.io.InputStream var19 = org.jsecurity.util.ClassUtils.getResourceAsStream("");
    java.lang.Object[] var20 = new java.lang.Object[] { var19};
    java.util.List var21 = org.jsecurity.util.CollectionUtils.asList(var20);
    org.jsecurity.authc.pam.ModularRealmAuthenticator var22 = new org.jsecurity.authc.pam.ModularRealmAuthenticator(var21);
    org.jsecurity.authc.pam.AllSuccessfulModularAuthenticationStrategy var23 = new org.jsecurity.authc.pam.AllSuccessfulModularAuthenticationStrategy();
    var22.setModularAuthenticationStrategy((org.jsecurity.authc.pam.ModularAuthenticationStrategy)var23);
    org.jsecurity.authz.SimpleAuthorizationInfo var25 = new org.jsecurity.authz.SimpleAuthorizationInfo();
    var25.addStringPermission("hi!");
    java.io.InputStream var29 = org.jsecurity.util.ClassUtils.getResourceAsStream("");
    java.lang.Object[] var30 = new java.lang.Object[] { var29};
    java.util.List var31 = org.jsecurity.util.CollectionUtils.asList(var30);
    var25.addRoles((java.util.Collection)var31);
    var22.setAuthenticationListeners((java.util.Collection)var31);
    org.jsecurity.realm.activedirectory.ActiveDirectoryRealm var34 = new org.jsecurity.realm.activedirectory.ActiveDirectoryRealm();
    var34.setPrincipalSuffix("");
    var22.setRealm((org.jsecurity.realm.Realm)var34);
    org.jsecurity.cache.HashtableCacheManager var38 = new org.jsecurity.cache.HashtableCacheManager();
    org.jsecurity.cache.Cache var40 = var38.getCache("\u0000\u0000");
    var34.setAuthorizationCache(var40);
    var11.setActiveSessionsCache(var40);
    org.jsecurity.session.mgt.SimpleSession var43 = new org.jsecurity.session.mgt.SimpleSession();
    java.io.Serializable var44 = var11.create((org.jsecurity.session.Session)var43);
    java.io.Serializable var45 = var43.getId();
    org.jsecurity.authc.credential.Md5CredentialsMatcher var46 = new org.jsecurity.authc.credential.Md5CredentialsMatcher();
    boolean var47 = var46.isHashSalted();
    boolean var48 = var46.isHashSalted();
    int var49 = var46.getHashIterations();
    java.lang.Object var50 = var43.removeAttribute((java.lang.Object)var46);
    java.net.InetAddress var51 = var43.getHostAddress();
    var8.setInetAddress(var51);
    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      java.util.Collection var53 = var0.getAttributeKeys((java.io.Serializable)var8);
      fail("Expected exception of type org.jsecurity.session.UnknownSessionException");
    } catch (org.jsecurity.session.UnknownSessionException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var5);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var9 + "' != '" + "\u0000\u0000"+ "'", var9.equals("\u0000\u0000"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var10 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var12);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var13);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var16);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var19);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var20);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var21);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var29);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var30);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var31);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var40);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var44 + "' != '" + "16809bfb-255f-4699-8398-6fb46489fb4f"+ "'", var44.equals("16809bfb-255f-4699-8398-6fb46489fb4f"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var45 + "' != '" + "16809bfb-255f-4699-8398-6fb46489fb4f"+ "'", var45.equals("16809bfb-255f-4699-8398-6fb46489fb4f"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var47 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var48 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var49 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var50);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var51);

  }

  public void test402() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest5.test402");


    org.jsecurity.authc.UnknownAccountException var1 = new org.jsecurity.authc.UnknownAccountException("org.jsecurity.realm.text.TextConfigurationRealm_1021");
    org.jsecurity.authc.UnknownAccountException var2 = new org.jsecurity.authc.UnknownAccountException((java.lang.Throwable)var1);

  }

  public void test403() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest5.test403");


    org.jsecurity.authc.DisabledAccountException var2 = new org.jsecurity.authc.DisabledAccountException("org.jsecurity.authz.UnauthorizedException: org.jsecurity.session.ExpiredSessionException: ");
    org.jsecurity.session.InvalidSessionException var3 = new org.jsecurity.session.InvalidSessionException("dade3937-164f-46fa-a082-f5f54b3b44e1", (java.io.Serializable)var2);

  }

  public void test404() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest5.test404");


    byte[] var1 = org.jsecurity.codec.CodecSupport.toBytes("ca73d1a4-706e-42e7-980f-896d3b153de8");
    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      java.lang.String var3 = org.jsecurity.codec.CodecSupport.toString(var1, "c25a1a23-4e04-4c16-9dcf-f5ed49ed2b3c");
      fail("Expected exception of type org.jsecurity.codec.CodecException");
    } catch (org.jsecurity.codec.CodecException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var1);

  }

  public void test405() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest5.test405");


    org.jsecurity.crypto.hash.Md5Hash var0 = new org.jsecurity.crypto.hash.Md5Hash();
    org.jsecurity.authz.SimpleAuthorizationInfo var1 = new org.jsecurity.authz.SimpleAuthorizationInfo();
    var1.addRole("a2b823b1e72eae2b727289df8a00a89df8a0bab6ad8a89c4c5c7a9b62a270000");
    org.jsecurity.session.UnknownSessionException var8 = new org.jsecurity.session.UnknownSessionException("dd\uFFFD", (java.io.Serializable)100.0f);
    org.jsecurity.subject.SubjectException var9 = new org.jsecurity.subject.SubjectException("dd\uFFFD", (java.lang.Throwable)var8);
    org.jsecurity.io.SerializationException var10 = new org.jsecurity.io.SerializationException("", (java.lang.Throwable)var9);
    java.lang.Throwable[] var11 = var9.getSuppressed();
    java.util.Set var12 = org.jsecurity.util.CollectionUtils.asSet((java.lang.Object[])var11);
    var1.addRoles((java.util.Collection)var12);
    java.util.Set var14 = var1.getObjectPermissions();
    var1.addStringPermission("783ccd31-48a8-42dd-890f-df885a7baaff");
    boolean var17 = var0.equals((java.lang.Object)var1);
    java.util.Set var18 = var1.getStringPermissions();
    java.util.Set var19 = var1.getObjectPermissions();
    var1.addRole("162be413-8160-455c-92e1-63fc287e0ac1");
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var11);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var12);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var14);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var17 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var18);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var19);

  }

  public void test406() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest5.test406");


    org.jsecurity.authz.UnauthenticatedException var2 = new org.jsecurity.authz.UnauthenticatedException();
    org.jsecurity.authc.AccountException var3 = new org.jsecurity.authc.AccountException("hi!", (java.lang.Throwable)var2);
    org.jsecurity.session.SessionException var4 = new org.jsecurity.session.SessionException("\u0000\u0000", (java.lang.Throwable)var2);
    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      org.jsecurity.crypto.hash.Md2Hash var5 = new org.jsecurity.crypto.hash.Md2Hash((java.lang.Object)var2);
      fail("Expected exception of type org.jsecurity.codec.CodecException");
    } catch (org.jsecurity.codec.CodecException e) {
      // Expected exception.
    }

  }

  public void test407() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest5.test407");


    org.jsecurity.io.ResourceException var1 = new org.jsecurity.io.ResourceException("bd543a96-831c-46a8-a7a1-55b4e9be61b4");

  }

  public void test408() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest5.test408");


    org.jsecurity.session.mgt.eis.MemorySessionDAO var0 = new org.jsecurity.session.mgt.eis.MemorySessionDAO();
    org.jsecurity.cache.HashtableCache var2 = new org.jsecurity.cache.HashtableCache("orgjsecurityauthcCredentialsException783ccd3148a842dd890fdf885a7baafAA==");
    org.jsecurity.realm.text.TextConfigurationRealm var3 = new org.jsecurity.realm.text.TextConfigurationRealm();
    java.io.InputStream var5 = org.jsecurity.util.ClassUtils.getResourceAsStream("");
    java.lang.Object[] var6 = new java.lang.Object[] { var5};
    java.util.List var7 = org.jsecurity.util.CollectionUtils.asList(var6);
    org.jsecurity.authc.pam.ModularRealmAuthenticator var8 = new org.jsecurity.authc.pam.ModularRealmAuthenticator(var7);
    org.jsecurity.subject.SimplePrincipalCollection var10 = new org.jsecurity.subject.SimplePrincipalCollection((java.util.Collection)var7, "org.jsecurity.authz.UnauthorizedException: org.jsecurity.session.ExpiredSessionException: ");
    org.jsecurity.session.UnknownSessionException var15 = new org.jsecurity.session.UnknownSessionException("dd\uFFFD", (java.io.Serializable)100.0f);
    org.jsecurity.session.SessionException var17 = new org.jsecurity.session.SessionException("dd\uFFFD", (java.lang.Throwable)var15, (java.io.Serializable)0);
    org.jsecurity.session.SessionException var18 = new org.jsecurity.session.SessionException("dd\uFFFD", (java.lang.Throwable)var15);
    var10.add((java.lang.Object)var18, "org.jsecurity.config.ConfigurationException: dd\uFFFD");
    var3.onLogout((org.jsecurity.subject.PrincipalCollection)var10);
    var2.remove((java.lang.Object)var10);
    java.util.Set var23 = var2.values();
    var0.setActiveSessionsCache((org.jsecurity.cache.Cache)var2);
    org.jsecurity.session.mgt.eis.MemorySessionDAO var25 = new org.jsecurity.session.mgt.eis.MemorySessionDAO();
    org.jsecurity.cache.Cache var26 = var25.getActiveSessionsCache();
    org.jsecurity.cache.CacheManager var27 = var25.getCacheManager();
    org.jsecurity.cache.HashtableCacheManager var28 = new org.jsecurity.cache.HashtableCacheManager();
    org.jsecurity.cache.Cache var30 = var28.getCache("\u0000\u0000");
    var25.setActiveSessionsCache(var30);
    java.io.InputStream var33 = org.jsecurity.util.ClassUtils.getResourceAsStream("");
    java.lang.Object[] var34 = new java.lang.Object[] { var33};
    java.util.List var35 = org.jsecurity.util.CollectionUtils.asList(var34);
    org.jsecurity.authc.pam.ModularRealmAuthenticator var36 = new org.jsecurity.authc.pam.ModularRealmAuthenticator(var35);
    org.jsecurity.authc.pam.AllSuccessfulModularAuthenticationStrategy var37 = new org.jsecurity.authc.pam.AllSuccessfulModularAuthenticationStrategy();
    var36.setModularAuthenticationStrategy((org.jsecurity.authc.pam.ModularAuthenticationStrategy)var37);
    org.jsecurity.authz.SimpleAuthorizationInfo var39 = new org.jsecurity.authz.SimpleAuthorizationInfo();
    var39.addStringPermission("hi!");
    java.io.InputStream var43 = org.jsecurity.util.ClassUtils.getResourceAsStream("");
    java.lang.Object[] var44 = new java.lang.Object[] { var43};
    java.util.List var45 = org.jsecurity.util.CollectionUtils.asList(var44);
    var39.addRoles((java.util.Collection)var45);
    var36.setAuthenticationListeners((java.util.Collection)var45);
    org.jsecurity.realm.activedirectory.ActiveDirectoryRealm var48 = new org.jsecurity.realm.activedirectory.ActiveDirectoryRealm();
    var48.setPrincipalSuffix("");
    var36.setRealm((org.jsecurity.realm.Realm)var48);
    org.jsecurity.cache.HashtableCacheManager var52 = new org.jsecurity.cache.HashtableCacheManager();
    org.jsecurity.cache.Cache var54 = var52.getCache("\u0000\u0000");
    var48.setAuthorizationCache(var54);
    var25.setActiveSessionsCache(var54);
    var0.setActiveSessionsCache(var54);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var5);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var6);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var7);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var23);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var26);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var27);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var30);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var33);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var34);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var35);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var43);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var44);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var45);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var54);

  }

  public void test409() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest5.test409");


    org.jsecurity.session.mgt.SimpleSession var0 = new org.jsecurity.session.mgt.SimpleSession();
    org.jsecurity.io.SerializationException var3 = new org.jsecurity.io.SerializationException("org.jsecurity.config.ConfigurationException: dd\uFFFD");
    org.jsecurity.authc.AccountException var4 = new org.jsecurity.authc.AccountException("a2b823b1e72eae2b727289df8a00a89df8a0bab6ad8a89c4c5c7a9b62a270000", (java.lang.Throwable)var3);
    var0.setId((java.io.Serializable)"a2b823b1e72eae2b727289df8a00a89df8a0bab6ad8a89c4c5c7a9b62a270000");
    org.jsecurity.config.ReflectionBuilder var6 = new org.jsecurity.config.ReflectionBuilder();
    org.jsecurity.config.ReflectionBuilder var7 = new org.jsecurity.config.ReflectionBuilder();
    org.jsecurity.io.IniResource var8 = new org.jsecurity.io.IniResource();
    var8.setCharsetName("org.jsecurity.authz.UnauthorizedException: org.jsecurity.session.ExpiredSessionException: ");
    java.util.Map var11 = var8.getSections();
    java.util.Map var12 = var7.buildObjects(var11);
    org.jsecurity.config.ReflectionBuilder var13 = new org.jsecurity.config.ReflectionBuilder();
    org.jsecurity.io.IniResource var14 = new org.jsecurity.io.IniResource();
    var14.setCharsetName("org.jsecurity.authz.UnauthorizedException: org.jsecurity.session.ExpiredSessionException: ");
    java.util.Map var17 = var14.getSections();
    java.util.Map var18 = var13.buildObjects(var17);
    java.util.Map var19 = var7.buildObjects(var18);
    java.util.Map var20 = var6.buildObjects(var19);
    var0.setAttributes(var20);
    java.net.InetAddress var22 = var0.getHostAddress();
    org.jsecurity.session.UnknownSessionException var26 = new org.jsecurity.session.UnknownSessionException("dd\uFFFD", (java.io.Serializable)100.0f);
    org.jsecurity.session.SessionException var28 = new org.jsecurity.session.SessionException("dd\uFFFD", (java.lang.Throwable)var26, (java.io.Serializable)0);
    org.jsecurity.authc.SimpleAuthenticationInfo var31 = new org.jsecurity.authc.SimpleAuthenticationInfo((java.lang.Object)0, (java.lang.Object)10, "hi!");
    org.jsecurity.session.UnknownSessionException var37 = new org.jsecurity.session.UnknownSessionException("dd\uFFFD", (java.io.Serializable)100.0f);
    org.jsecurity.subject.SubjectException var38 = new org.jsecurity.subject.SubjectException("dd\uFFFD", (java.lang.Throwable)var37);
    org.jsecurity.authc.AccountException var39 = new org.jsecurity.authc.AccountException("hi!", (java.lang.Throwable)var38);
    org.jsecurity.session.ExpiredSessionException var40 = new org.jsecurity.session.ExpiredSessionException("dd\uFFFD", (java.io.Serializable)var39);
    java.io.Serializable var41 = var40.getSessionId();
    boolean var42 = var31.equals((java.lang.Object)var40);
    byte[] var44 = org.jsecurity.codec.Base64.decode("hi!");
    org.jsecurity.authc.CredentialsException var46 = new org.jsecurity.authc.CredentialsException("org.jsecurity.authz.UnauthorizedException: org.jsecurity.session.ExpiredSessionException: ");
    org.jsecurity.authc.SimpleAuthenticationInfo var48 = new org.jsecurity.authc.SimpleAuthenticationInfo((java.lang.Object)"hi!", (java.lang.Object)var46, "org.jsecurity.config.ConfigurationException: dd\uFFFD");
    var31.merge((org.jsecurity.authc.AuthenticationInfo)var48);
    java.lang.String var50 = var48.toString();
    java.lang.String var51 = var48.toString();
    org.jsecurity.authc.credential.AllowAllCredentialsMatcher var52 = new org.jsecurity.authc.credential.AllowAllCredentialsMatcher();
    org.jsecurity.authc.UsernamePasswordToken var53 = new org.jsecurity.authc.UsernamePasswordToken();
    org.jsecurity.codec.CodecException var56 = new org.jsecurity.codec.CodecException("dd\uFFFD");
    org.jsecurity.authc.ConcurrentAccessException var57 = new org.jsecurity.authc.ConcurrentAccessException("org.jsecurity.authz.UnauthorizedException: org.jsecurity.session.ExpiredSessionException: ", (java.lang.Throwable)var56);
    org.jsecurity.subject.SimplePrincipalCollection var59 = new org.jsecurity.subject.SimplePrincipalCollection((java.lang.Object)var56, "");
    org.jsecurity.authc.pam.FirstSuccessfulAuthenticationStrategy var60 = new org.jsecurity.authc.pam.FirstSuccessfulAuthenticationStrategy();
    org.jsecurity.authz.UnauthorizedException var62 = new org.jsecurity.authz.UnauthorizedException("org.jsecurity.config.ConfigurationException: dd\uFFFD");
    java.lang.Throwable[] var63 = var62.getSuppressed();
    java.util.List var64 = org.jsecurity.util.CollectionUtils.asList((java.lang.Object[])var63);
    org.jsecurity.authc.UsernamePasswordToken var65 = new org.jsecurity.authc.UsernamePasswordToken();
    java.lang.String var66 = var65.getUsername();
    java.net.InetAddress var67 = var65.getInetAddress();
    org.jsecurity.authc.AuthenticationInfo var68 = var60.beforeAllAttempts((java.util.Collection)var64, (org.jsecurity.authc.AuthenticationToken)var65);
    org.jsecurity.session.UnknownSessionException var73 = new org.jsecurity.session.UnknownSessionException("dd\uFFFD", (java.io.Serializable)100.0f);
    org.jsecurity.subject.SubjectException var74 = new org.jsecurity.subject.SubjectException("dd\uFFFD", (java.lang.Throwable)var73);
    org.jsecurity.io.SerializationException var75 = new org.jsecurity.io.SerializationException("", (java.lang.Throwable)var74);
    java.lang.Throwable[] var76 = var74.getSuppressed();
    java.util.Set var77 = org.jsecurity.util.CollectionUtils.asSet((java.lang.Object[])var76);
    org.jsecurity.authc.SimpleAccount var78 = new org.jsecurity.authc.SimpleAccount((org.jsecurity.subject.PrincipalCollection)var59, (java.lang.Object)var64, var77);
    var78.addStringPermission("org.jsecurity.config.ConfigurationException: dd\uFFFD");
    org.jsecurity.authz.SimpleRole var81 = new org.jsecurity.authz.SimpleRole();
    org.jsecurity.authz.permission.WildcardPermission var84 = new org.jsecurity.authz.permission.WildcardPermission("hi!", false);
    boolean var85 = var81.isPermitted((org.jsecurity.authz.Permission)var84);
    var78.addObjectPermission((org.jsecurity.authz.Permission)var84);
    boolean var87 = var52.doCredentialsMatch((org.jsecurity.authc.AuthenticationToken)var53, (org.jsecurity.authc.AuthenticationInfo)var78);
    var48.merge((org.jsecurity.authc.AuthenticationInfo)var78);
    org.jsecurity.authc.SimpleAuthenticationInfo var90 = new org.jsecurity.authc.SimpleAuthenticationInfo((java.lang.Object)var22, (java.lang.Object)var48, "330a41fd-f404-4b7f-8f3c-bc52c3f67c3e");
    java.lang.String var91 = var90.toString();
    java.lang.Object var92 = var90.getCredentials();
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var11);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var12);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var17);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var18);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var19);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var20);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var22);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var41);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var42 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var44);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var63);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var64);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var66);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var67);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var68);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var76);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var77);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var85 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var87 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var92);

  }

  public void test410() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest5.test410");


    org.jsecurity.jndi.JndiLocator var0 = new org.jsecurity.jndi.JndiLocator();
    boolean var1 = var0.isResourceRef();
    java.util.Properties var2 = var0.getJndiEnvironment();
    boolean var3 = var0.isResourceRef();
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var1 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var2);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var3 == false);

  }

  public void test411() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest5.test411");


    boolean var1 = org.jsecurity.io.ResourceUtils.resourceExists("cfe8aded-c7e7-466a-8775-37cd34b9dc9d");
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var1 == false);

  }

  public void test412() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest5.test412");


    org.jsecurity.mgt.DefaultSecurityManager var0 = new org.jsecurity.mgt.DefaultSecurityManager();
    java.io.InputStream var2 = org.jsecurity.util.ClassUtils.getResourceAsStream("");
    java.lang.Object[] var3 = new java.lang.Object[] { var2};
    java.util.List var4 = org.jsecurity.util.CollectionUtils.asList(var3);
    org.jsecurity.authc.pam.ModularRealmAuthenticator var5 = new org.jsecurity.authc.pam.ModularRealmAuthenticator(var4);
    org.jsecurity.authc.pam.AllSuccessfulModularAuthenticationStrategy var6 = new org.jsecurity.authc.pam.AllSuccessfulModularAuthenticationStrategy();
    var5.setModularAuthenticationStrategy((org.jsecurity.authc.pam.ModularAuthenticationStrategy)var6);
    org.jsecurity.authz.SimpleAuthorizationInfo var8 = new org.jsecurity.authz.SimpleAuthorizationInfo();
    var8.addStringPermission("hi!");
    java.io.InputStream var12 = org.jsecurity.util.ClassUtils.getResourceAsStream("");
    java.lang.Object[] var13 = new java.lang.Object[] { var12};
    java.util.List var14 = org.jsecurity.util.CollectionUtils.asList(var13);
    var8.addRoles((java.util.Collection)var14);
    var5.setAuthenticationListeners((java.util.Collection)var14);
    var0.setSessionListeners((java.util.Collection)var14);
    org.jsecurity.realm.text.TextConfigurationRealm var18 = new org.jsecurity.realm.text.TextConfigurationRealm();
    java.io.InputStream var20 = org.jsecurity.util.ClassUtils.getResourceAsStream("");
    java.lang.Object[] var21 = new java.lang.Object[] { var20};
    java.util.List var22 = org.jsecurity.util.CollectionUtils.asList(var21);
    org.jsecurity.authc.pam.ModularRealmAuthenticator var23 = new org.jsecurity.authc.pam.ModularRealmAuthenticator(var22);
    org.jsecurity.subject.SimplePrincipalCollection var25 = new org.jsecurity.subject.SimplePrincipalCollection((java.util.Collection)var22, "org.jsecurity.authz.UnauthorizedException: org.jsecurity.session.ExpiredSessionException: ");
    org.jsecurity.session.UnknownSessionException var30 = new org.jsecurity.session.UnknownSessionException("dd\uFFFD", (java.io.Serializable)100.0f);
    org.jsecurity.session.SessionException var32 = new org.jsecurity.session.SessionException("dd\uFFFD", (java.lang.Throwable)var30, (java.io.Serializable)0);
    org.jsecurity.session.SessionException var33 = new org.jsecurity.session.SessionException("dd\uFFFD", (java.lang.Throwable)var30);
    var25.add((java.lang.Object)var33, "org.jsecurity.config.ConfigurationException: dd\uFFFD");
    var18.onLogout((org.jsecurity.subject.PrincipalCollection)var25);
    org.jsecurity.authc.pam.FirstSuccessfulAuthenticationStrategy var37 = new org.jsecurity.authc.pam.FirstSuccessfulAuthenticationStrategy();
    org.jsecurity.authz.UnauthorizedException var39 = new org.jsecurity.authz.UnauthorizedException("org.jsecurity.config.ConfigurationException: dd\uFFFD");
    java.lang.Throwable[] var40 = var39.getSuppressed();
    java.util.List var41 = org.jsecurity.util.CollectionUtils.asList((java.lang.Object[])var40);
    org.jsecurity.authc.UsernamePasswordToken var42 = new org.jsecurity.authc.UsernamePasswordToken();
    java.lang.String var43 = var42.getUsername();
    java.net.InetAddress var44 = var42.getInetAddress();
    org.jsecurity.authc.AuthenticationInfo var45 = var37.beforeAllAttempts((java.util.Collection)var41, (org.jsecurity.authc.AuthenticationToken)var42);
    boolean[] var46 = var0.hasRoles((org.jsecurity.subject.PrincipalCollection)var25, var41);
    org.jsecurity.authz.permission.WildcardPermissionResolver var47 = new org.jsecurity.authz.permission.WildcardPermissionResolver();
    org.jsecurity.authz.Permission var49 = var47.resolvePermission("hi!");
    org.jsecurity.authz.Permission var51 = var47.resolvePermission("hi!");
    var0.setPermissionResolver((org.jsecurity.authz.permission.PermissionResolver)var47);
    org.jsecurity.session.mgt.DefaultSessionManager var53 = new org.jsecurity.session.mgt.DefaultSessionManager();
    org.jsecurity.mgt.DefaultSecurityManager var54 = new org.jsecurity.mgt.DefaultSecurityManager();
    org.jsecurity.authz.permission.WildcardPermissionResolver var55 = new org.jsecurity.authz.permission.WildcardPermissionResolver();
    var54.setPermissionResolver((org.jsecurity.authz.permission.PermissionResolver)var55);
    org.jsecurity.cache.CacheManager var57 = var54.getCacheManager();
    var53.setCacheManager(var57);
    long var59 = var53.getSessionValidationInterval();
    boolean var60 = var53.isSessionValidationSchedulerEnabled();
    var0.setSessionManager((org.jsecurity.session.mgt.SessionManager)var53);
    org.jsecurity.session.mgt.DelegatingSession var63 = new org.jsecurity.session.mgt.DelegatingSession((org.jsecurity.session.mgt.SessionManager)var53, (java.io.Serializable)"classpath:org/jsecurity/cache/ehcache/ehcache.xml");
    var53.setSessionValidationInterval(100L);
    var53.enableSessionValidationIfNecessary();
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var2);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var3);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var4);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var12);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var13);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var14);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var20);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var21);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var22);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var40);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var41);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var43);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var44);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var45);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var46);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var49);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var51);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var57);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var59 == 3600000L);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var60 == true);

  }

  public void test413() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest5.test413");


    org.jsecurity.mgt.DefaultSecurityManager var0 = new org.jsecurity.mgt.DefaultSecurityManager();
    java.io.InputStream var2 = org.jsecurity.util.ClassUtils.getResourceAsStream("");
    java.lang.Object[] var3 = new java.lang.Object[] { var2};
    java.util.List var4 = org.jsecurity.util.CollectionUtils.asList(var3);
    org.jsecurity.authc.pam.ModularRealmAuthenticator var5 = new org.jsecurity.authc.pam.ModularRealmAuthenticator(var4);
    org.jsecurity.authc.pam.AllSuccessfulModularAuthenticationStrategy var6 = new org.jsecurity.authc.pam.AllSuccessfulModularAuthenticationStrategy();
    var5.setModularAuthenticationStrategy((org.jsecurity.authc.pam.ModularAuthenticationStrategy)var6);
    org.jsecurity.authz.SimpleAuthorizationInfo var8 = new org.jsecurity.authz.SimpleAuthorizationInfo();
    var8.addStringPermission("hi!");
    java.io.InputStream var12 = org.jsecurity.util.ClassUtils.getResourceAsStream("");
    java.lang.Object[] var13 = new java.lang.Object[] { var12};
    java.util.List var14 = org.jsecurity.util.CollectionUtils.asList(var13);
    var8.addRoles((java.util.Collection)var14);
    var5.setAuthenticationListeners((java.util.Collection)var14);
    var0.setSessionListeners((java.util.Collection)var14);
    org.jsecurity.authc.pam.ModularRealmAuthenticator var18 = new org.jsecurity.authc.pam.ModularRealmAuthenticator();
    org.jsecurity.authz.permission.InvalidPermissionStringException var21 = new org.jsecurity.authz.permission.InvalidPermissionStringException("", "dd\uFFFD");
    org.jsecurity.JSecurityException var23 = new org.jsecurity.JSecurityException("");
    org.jsecurity.authc.SimpleAuthenticationInfo var25 = new org.jsecurity.authc.SimpleAuthenticationInfo((java.lang.Object)var21, (java.lang.Object)"", "org.jsecurity.authz.UnauthorizedException: org.jsecurity.session.ExpiredSessionException: ");
    org.jsecurity.subject.PrincipalCollection var26 = var25.getPrincipals();
    var18.onLogout(var26);
    var0.setAuthenticator((org.jsecurity.authc.Authenticator)var18);
    org.jsecurity.codec.CodecException var31 = new org.jsecurity.codec.CodecException("dd\uFFFD");
    org.jsecurity.authc.ConcurrentAccessException var32 = new org.jsecurity.authc.ConcurrentAccessException("org.jsecurity.authz.UnauthorizedException: org.jsecurity.session.ExpiredSessionException: ", (java.lang.Throwable)var31);
    org.jsecurity.subject.SimplePrincipalCollection var34 = new org.jsecurity.subject.SimplePrincipalCollection((java.lang.Object)var31, "");
    org.jsecurity.authc.pam.FirstSuccessfulAuthenticationStrategy var35 = new org.jsecurity.authc.pam.FirstSuccessfulAuthenticationStrategy();
    org.jsecurity.authz.UnauthorizedException var37 = new org.jsecurity.authz.UnauthorizedException("org.jsecurity.config.ConfigurationException: dd\uFFFD");
    java.lang.Throwable[] var38 = var37.getSuppressed();
    java.util.List var39 = org.jsecurity.util.CollectionUtils.asList((java.lang.Object[])var38);
    org.jsecurity.authc.UsernamePasswordToken var40 = new org.jsecurity.authc.UsernamePasswordToken();
    java.lang.String var41 = var40.getUsername();
    java.net.InetAddress var42 = var40.getInetAddress();
    org.jsecurity.authc.AuthenticationInfo var43 = var35.beforeAllAttempts((java.util.Collection)var39, (org.jsecurity.authc.AuthenticationToken)var40);
    org.jsecurity.session.UnknownSessionException var48 = new org.jsecurity.session.UnknownSessionException("dd\uFFFD", (java.io.Serializable)100.0f);
    org.jsecurity.subject.SubjectException var49 = new org.jsecurity.subject.SubjectException("dd\uFFFD", (java.lang.Throwable)var48);
    org.jsecurity.io.SerializationException var50 = new org.jsecurity.io.SerializationException("", (java.lang.Throwable)var49);
    java.lang.Throwable[] var51 = var49.getSuppressed();
    java.util.Set var52 = org.jsecurity.util.CollectionUtils.asSet((java.lang.Object[])var51);
    org.jsecurity.authc.SimpleAccount var53 = new org.jsecurity.authc.SimpleAccount((org.jsecurity.subject.PrincipalCollection)var34, (java.lang.Object)var39, var52);
    java.io.InputStream var55 = org.jsecurity.util.ClassUtils.getResourceAsStream("");
    java.lang.Object[] var56 = new java.lang.Object[] { var55};
    java.util.List var57 = org.jsecurity.util.CollectionUtils.asList(var56);
    org.jsecurity.authc.pam.ModularRealmAuthenticator var58 = new org.jsecurity.authc.pam.ModularRealmAuthenticator(var57);
    org.jsecurity.subject.SimplePrincipalCollection var60 = new org.jsecurity.subject.SimplePrincipalCollection((java.util.Collection)var57, "org.jsecurity.authz.UnauthorizedException: org.jsecurity.session.ExpiredSessionException: ");
    org.jsecurity.io.ResourceException var64 = new org.jsecurity.io.ResourceException("hi!");
    org.jsecurity.authc.UnknownAccountException var65 = new org.jsecurity.authc.UnknownAccountException((java.lang.Throwable)var64);
    org.jsecurity.session.StoppedSessionException var66 = new org.jsecurity.session.StoppedSessionException("dd\uFFFD", (java.io.Serializable)var64);
    org.jsecurity.session.UnknownSessionException var67 = new org.jsecurity.session.UnknownSessionException("org.jsecurity.authz.UnauthorizedException: org.jsecurity.session.ExpiredSessionException: ", (java.lang.Throwable)var64);
    boolean var68 = var60.equals((java.lang.Object)var64);
    var34.addAll((org.jsecurity.subject.PrincipalCollection)var60);
    org.jsecurity.session.UnknownSessionException var74 = new org.jsecurity.session.UnknownSessionException("dd\uFFFD", (java.io.Serializable)100.0f);
    org.jsecurity.subject.SubjectException var75 = new org.jsecurity.subject.SubjectException("dd\uFFFD", (java.lang.Throwable)var74);
    org.jsecurity.io.SerializationException var76 = new org.jsecurity.io.SerializationException("", (java.lang.Throwable)var75);
    java.lang.Throwable[] var77 = var75.getSuppressed();
    java.util.List var78 = org.jsecurity.util.CollectionUtils.asList((java.lang.Object[])var77);
    boolean var79 = var0.isPermittedAll((org.jsecurity.subject.PrincipalCollection)var34, (java.util.Collection)var78);
    org.jsecurity.session.mgt.SessionManager var80 = var0.getSessionManager();
    org.jsecurity.subject.DelegatingSubject var81 = new org.jsecurity.subject.DelegatingSubject((org.jsecurity.mgt.SecurityManager)var0);
    boolean var83 = var81.isPermitted("34c4ddf9-2eae-40f0-acfd-24998b57e8d9");
    java.lang.String[] var90 = org.jsecurity.util.StringUtils.split("a841fcb8-4bf6-4cea-a7a1-055c1bccd5ae", ' ', ' ', ' ', false, true);
    boolean[] var91 = var81.isPermitted(var90);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var2);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var3);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var4);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var12);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var13);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var14);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var26);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var38);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var39);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var41);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var42);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var43);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var51);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var52);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var55);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var56);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var57);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var68 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var77);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var78);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var79 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var80);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var83 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var90);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var91);

  }

  public void test414() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest5.test414");


    org.jsecurity.mgt.DefaultSecurityManager var0 = new org.jsecurity.mgt.DefaultSecurityManager();
    java.io.InputStream var2 = org.jsecurity.util.ClassUtils.getResourceAsStream("");
    java.lang.Object[] var3 = new java.lang.Object[] { var2};
    java.util.List var4 = org.jsecurity.util.CollectionUtils.asList(var3);
    org.jsecurity.authc.pam.ModularRealmAuthenticator var5 = new org.jsecurity.authc.pam.ModularRealmAuthenticator(var4);
    org.jsecurity.authc.pam.AllSuccessfulModularAuthenticationStrategy var6 = new org.jsecurity.authc.pam.AllSuccessfulModularAuthenticationStrategy();
    var5.setModularAuthenticationStrategy((org.jsecurity.authc.pam.ModularAuthenticationStrategy)var6);
    org.jsecurity.authz.SimpleAuthorizationInfo var8 = new org.jsecurity.authz.SimpleAuthorizationInfo();
    var8.addStringPermission("hi!");
    java.io.InputStream var12 = org.jsecurity.util.ClassUtils.getResourceAsStream("");
    java.lang.Object[] var13 = new java.lang.Object[] { var12};
    java.util.List var14 = org.jsecurity.util.CollectionUtils.asList(var13);
    var8.addRoles((java.util.Collection)var14);
    var5.setAuthenticationListeners((java.util.Collection)var14);
    var0.setSessionListeners((java.util.Collection)var14);
    org.jsecurity.authz.UnauthenticatedException var21 = new org.jsecurity.authz.UnauthenticatedException();
    org.jsecurity.config.UnresolveableReferenceException var22 = new org.jsecurity.config.UnresolveableReferenceException("", (java.lang.Throwable)var21);
    org.jsecurity.cache.CacheException var23 = new org.jsecurity.cache.CacheException("org.jsecurity.config.ConfigurationException: dd\uFFFD", (java.lang.Throwable)var21);
    org.jsecurity.authc.SimpleAuthenticationInfo var25 = new org.jsecurity.authc.SimpleAuthenticationInfo((java.lang.Object)"org.jsecurity.config.ConfigurationException: dd\uFFFD", (java.lang.Object)var23, "a2b823b1e72eae2b727289df8a00a89df8a0bab6ad8a89c4c5c7a9b62a270000");
    org.jsecurity.realm.text.TextConfigurationRealm var26 = new org.jsecurity.realm.text.TextConfigurationRealm();
    java.io.InputStream var28 = org.jsecurity.util.ClassUtils.getResourceAsStream("");
    java.lang.Object[] var29 = new java.lang.Object[] { var28};
    java.util.List var30 = org.jsecurity.util.CollectionUtils.asList(var29);
    org.jsecurity.authc.pam.ModularRealmAuthenticator var31 = new org.jsecurity.authc.pam.ModularRealmAuthenticator(var30);
    org.jsecurity.subject.SimplePrincipalCollection var33 = new org.jsecurity.subject.SimplePrincipalCollection((java.util.Collection)var30, "org.jsecurity.authz.UnauthorizedException: org.jsecurity.session.ExpiredSessionException: ");
    org.jsecurity.session.UnknownSessionException var38 = new org.jsecurity.session.UnknownSessionException("dd\uFFFD", (java.io.Serializable)100.0f);
    org.jsecurity.session.SessionException var40 = new org.jsecurity.session.SessionException("dd\uFFFD", (java.lang.Throwable)var38, (java.io.Serializable)0);
    org.jsecurity.session.SessionException var41 = new org.jsecurity.session.SessionException("dd\uFFFD", (java.lang.Throwable)var38);
    var33.add((java.lang.Object)var41, "org.jsecurity.config.ConfigurationException: dd\uFFFD");
    var26.onLogout((org.jsecurity.subject.PrincipalCollection)var33);
    org.jsecurity.authc.ExpiredCredentialsException var46 = new org.jsecurity.authc.ExpiredCredentialsException();
    org.jsecurity.session.ExpiredSessionException var47 = new org.jsecurity.session.ExpiredSessionException("", (java.lang.Throwable)var46);
    java.lang.Throwable[] var48 = var47.getSuppressed();
    org.jsecurity.io.ResourceException var49 = new org.jsecurity.io.ResourceException((java.lang.Throwable)var47);
    org.jsecurity.authc.SimpleAuthenticationInfo var50 = new org.jsecurity.authc.SimpleAuthenticationInfo((org.jsecurity.subject.PrincipalCollection)var33, (java.lang.Object)var47);
    var25.merge((org.jsecurity.authc.AuthenticationInfo)var50);
    org.jsecurity.subject.PrincipalCollection var52 = var50.getPrincipals();
    org.jsecurity.authz.SimpleAuthorizingAccount var54 = new org.jsecurity.authz.SimpleAuthorizingAccount((java.util.Collection)var14, (java.lang.Object)var52, "org.jsecurity.realm.text.TextConfigurationRealm_445");
    org.jsecurity.session.UnknownSessionException var61 = new org.jsecurity.session.UnknownSessionException("dd\uFFFD", (java.io.Serializable)100.0f);
    org.jsecurity.subject.SubjectException var62 = new org.jsecurity.subject.SubjectException("dd\uFFFD", (java.lang.Throwable)var61);
    org.jsecurity.authc.AccountException var63 = new org.jsecurity.authc.AccountException("hi!", (java.lang.Throwable)var62);
    org.jsecurity.session.StoppedSessionException var64 = new org.jsecurity.session.StoppedSessionException((java.lang.Throwable)var63);
    org.jsecurity.JSecurityException var65 = new org.jsecurity.JSecurityException((java.lang.Throwable)var63);
    org.jsecurity.subject.SubjectException var66 = new org.jsecurity.subject.SubjectException("e7a91ff4-6903-4f3c-ac4f-2cf4ba6b7930", (java.lang.Throwable)var65);
    org.jsecurity.authz.UnauthenticatedException var67 = new org.jsecurity.authz.UnauthenticatedException("e2497199-95f2-4373-8934-d742f09a6cb1", (java.lang.Throwable)var66);
    boolean var68 = var54.equals((java.lang.Object)"e2497199-95f2-4373-8934-d742f09a6cb1");
    java.lang.String[] var73 = org.jsecurity.util.StringUtils.split("org.jsecurity.realm.text.TextConfigurationRealm_445", 'a', ' ', ' ');
    java.util.Set var74 = org.jsecurity.util.CollectionUtils.asSet((java.lang.Object[])var73);
    org.jsecurity.authz.ModularRealmAuthorizer var75 = new org.jsecurity.authz.ModularRealmAuthorizer((java.util.Collection)var74);
    var54.addAll((java.util.Collection)var74);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var2);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var3);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var4);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var12);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var13);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var14);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var28);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var29);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var30);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var48);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var52);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var68 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var73);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var74);

  }

  public void test415() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest5.test415");


    org.jsecurity.cache.ehcache.EhCacheManager var0 = new org.jsecurity.cache.ehcache.EhCacheManager();
    net.sf.ehcache.CacheManager var1 = var0.getCacheManager();
    var0.destroy();
    net.sf.ehcache.CacheManager var3 = var0.getCacheManager();
    net.sf.ehcache.CacheManager var4 = var0.getCacheManager();
    net.sf.ehcache.CacheManager var5 = var0.getCacheManager();
    org.jsecurity.cache.ehcache.EhCacheManager var6 = new org.jsecurity.cache.ehcache.EhCacheManager();
    net.sf.ehcache.CacheManager var7 = var6.getCacheManager();
    var6.setCacheManagerConfigFile("org.jsecurity.authz.UnauthorizedException: org.jsecurity.session.ExpiredSessionException: ");
    org.jsecurity.session.mgt.eis.MemorySessionDAO var10 = new org.jsecurity.session.mgt.eis.MemorySessionDAO();
    org.jsecurity.cache.Cache var11 = var10.getActiveSessionsCache();
    org.jsecurity.cache.CacheManager var12 = var10.getCacheManager();
    org.jsecurity.cache.HashtableCacheManager var13 = new org.jsecurity.cache.HashtableCacheManager();
    org.jsecurity.cache.Cache var15 = var13.getCache("\u0000\u0000");
    var10.setActiveSessionsCache(var15);
    java.io.InputStream var18 = org.jsecurity.util.ClassUtils.getResourceAsStream("");
    java.lang.Object[] var19 = new java.lang.Object[] { var18};
    java.util.List var20 = org.jsecurity.util.CollectionUtils.asList(var19);
    org.jsecurity.authc.pam.ModularRealmAuthenticator var21 = new org.jsecurity.authc.pam.ModularRealmAuthenticator(var20);
    org.jsecurity.authc.pam.AllSuccessfulModularAuthenticationStrategy var22 = new org.jsecurity.authc.pam.AllSuccessfulModularAuthenticationStrategy();
    var21.setModularAuthenticationStrategy((org.jsecurity.authc.pam.ModularAuthenticationStrategy)var22);
    org.jsecurity.authz.SimpleAuthorizationInfo var24 = new org.jsecurity.authz.SimpleAuthorizationInfo();
    var24.addStringPermission("hi!");
    java.io.InputStream var28 = org.jsecurity.util.ClassUtils.getResourceAsStream("");
    java.lang.Object[] var29 = new java.lang.Object[] { var28};
    java.util.List var30 = org.jsecurity.util.CollectionUtils.asList(var29);
    var24.addRoles((java.util.Collection)var30);
    var21.setAuthenticationListeners((java.util.Collection)var30);
    org.jsecurity.realm.activedirectory.ActiveDirectoryRealm var33 = new org.jsecurity.realm.activedirectory.ActiveDirectoryRealm();
    var33.setPrincipalSuffix("");
    var21.setRealm((org.jsecurity.realm.Realm)var33);
    org.jsecurity.cache.HashtableCacheManager var37 = new org.jsecurity.cache.HashtableCacheManager();
    org.jsecurity.cache.Cache var39 = var37.getCache("\u0000\u0000");
    var33.setAuthorizationCache(var39);
    var10.setActiveSessionsCache(var39);
    org.jsecurity.session.mgt.DefaultSessionManager var42 = new org.jsecurity.session.mgt.DefaultSessionManager();
    org.jsecurity.session.mgt.eis.MemorySessionDAO var43 = new org.jsecurity.session.mgt.eis.MemorySessionDAO();
    org.jsecurity.cache.Cache var44 = var43.getActiveSessionsCache();
    org.jsecurity.cache.CacheManager var45 = var43.getCacheManager();
    org.jsecurity.cache.HashtableCacheManager var46 = new org.jsecurity.cache.HashtableCacheManager();
    org.jsecurity.cache.Cache var48 = var46.getCache("\u0000\u0000");
    var43.setActiveSessionsCache(var48);
    java.io.InputStream var51 = org.jsecurity.util.ClassUtils.getResourceAsStream("");
    java.lang.Object[] var52 = new java.lang.Object[] { var51};
    java.util.List var53 = org.jsecurity.util.CollectionUtils.asList(var52);
    org.jsecurity.authc.pam.ModularRealmAuthenticator var54 = new org.jsecurity.authc.pam.ModularRealmAuthenticator(var53);
    org.jsecurity.authc.pam.AllSuccessfulModularAuthenticationStrategy var55 = new org.jsecurity.authc.pam.AllSuccessfulModularAuthenticationStrategy();
    var54.setModularAuthenticationStrategy((org.jsecurity.authc.pam.ModularAuthenticationStrategy)var55);
    org.jsecurity.authz.SimpleAuthorizationInfo var57 = new org.jsecurity.authz.SimpleAuthorizationInfo();
    var57.addStringPermission("hi!");
    java.io.InputStream var61 = org.jsecurity.util.ClassUtils.getResourceAsStream("");
    java.lang.Object[] var62 = new java.lang.Object[] { var61};
    java.util.List var63 = org.jsecurity.util.CollectionUtils.asList(var62);
    var57.addRoles((java.util.Collection)var63);
    var54.setAuthenticationListeners((java.util.Collection)var63);
    org.jsecurity.realm.activedirectory.ActiveDirectoryRealm var66 = new org.jsecurity.realm.activedirectory.ActiveDirectoryRealm();
    var66.setPrincipalSuffix("");
    var54.setRealm((org.jsecurity.realm.Realm)var66);
    org.jsecurity.cache.HashtableCacheManager var70 = new org.jsecurity.cache.HashtableCacheManager();
    org.jsecurity.cache.Cache var72 = var70.getCache("\u0000\u0000");
    var66.setAuthorizationCache(var72);
    var43.setActiveSessionsCache(var72);
    org.jsecurity.session.mgt.SimpleSession var75 = new org.jsecurity.session.mgt.SimpleSession();
    java.io.Serializable var76 = var43.create((org.jsecurity.session.Session)var75);
    var42.setSessionDAO((org.jsecurity.session.mgt.eis.SessionDAO)var43);
    org.jsecurity.cache.ehcache.EhCacheManager var78 = new org.jsecurity.cache.ehcache.EhCacheManager();
    net.sf.ehcache.CacheManager var79 = var78.getCacheManager();
    var78.destroy();
    java.lang.String var81 = var78.getCacheManagerConfigFile();
    java.lang.String var82 = var78.getCacheManagerConfigFile();
    var42.setCacheManager((org.jsecurity.cache.CacheManager)var78);
    var10.setCacheManager((org.jsecurity.cache.CacheManager)var78);
    org.jsecurity.cache.ehcache.EhCacheManager var85 = new org.jsecurity.cache.ehcache.EhCacheManager();
    var85.init();
    var85.setCacheManagerConfigFile("b6a77f71-73c4-466a-903e-72fc5968f9ac");
    net.sf.ehcache.CacheManager var89 = var85.getCacheManager();
    var78.setCacheManager(var89);
    var6.setCacheManager(var89);
    net.sf.ehcache.CacheManager var92 = var6.getCacheManager();
    var0.setCacheManager(var92);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var1);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var3);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var4);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var5);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var7);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var11);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var12);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var15);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var18);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var19);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var20);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var28);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var29);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var30);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var39);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var44);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var45);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var48);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var51);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var52);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var53);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var61);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var62);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var63);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var72);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var76 + "' != '" + "40513ab3-8ef7-4838-90d0-3db374f1b29c"+ "'", var76.equals("40513ab3-8ef7-4838-90d0-3db374f1b29c"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var79);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var81 + "' != '" + "classpath:org/jsecurity/cache/ehcache/ehcache.xml"+ "'", var81.equals("classpath:org/jsecurity/cache/ehcache/ehcache.xml"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var82 + "' != '" + "classpath:org/jsecurity/cache/ehcache/ehcache.xml"+ "'", var82.equals("classpath:org/jsecurity/cache/ehcache/ehcache.xml"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var89);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var92);

  }

  public void test416() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest5.test416");


    char[] var4 = new char[] { ' ', ' '};
    org.jsecurity.authc.UsernamePasswordToken var5 = new org.jsecurity.authc.UsernamePasswordToken("hi!", var4);
    char[] var9 = new char[] { '4', '#'};
    org.jsecurity.authc.UsernamePasswordToken var10 = new org.jsecurity.authc.UsernamePasswordToken("\u0000\u0000", var9);
    var5.setPassword(var9);
    byte[] var16 = new byte[] { (byte)100, (byte)100, (byte)(-1)};
    java.lang.String var17 = org.jsecurity.codec.CodecSupport.toString(var16);
    char[] var18 = org.jsecurity.codec.CodecSupport.toChars(var16);
    boolean var19 = org.jsecurity.codec.Base64.isBase64(var16);
    boolean var20 = org.jsecurity.codec.Base64.isBase64(var16);
    boolean var21 = org.jsecurity.codec.Base64.isBase64(var16);
    char[] var22 = org.jsecurity.codec.CodecSupport.toChars(var16);
    org.jsecurity.session.mgt.SimpleSession var23 = new org.jsecurity.session.mgt.SimpleSession();
    var23.setTimeout((-1L));
    org.jsecurity.session.mgt.SimpleSession var26 = new org.jsecurity.session.mgt.SimpleSession();
    java.util.Date var27 = var26.getLastAccessTime();
    var23.setLastAccessTime(var27);
    java.net.InetAddress var29 = var23.getHostAddress();
    org.jsecurity.authz.HostUnauthorizedException var30 = new org.jsecurity.authz.HostUnauthorizedException(var29);
    org.jsecurity.authc.UsernamePasswordToken var31 = new org.jsecurity.authc.UsernamePasswordToken("b725e8cc-690c-495e-ac27-b1b425834793", var22, var29);
    var5.setPassword(var22);
    org.jsecurity.authc.UsernamePasswordToken var34 = new org.jsecurity.authc.UsernamePasswordToken("e7d4bd33-56db-406b-a889-11d0765a3be3", var22, false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var4);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var9);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var16);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var17 + "' != '" + "dd\uFFFD"+ "'", var17.equals("dd\uFFFD"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var18);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var19 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var20 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var21 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var22);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var27);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var29);

  }

  public void test417() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest5.test417");


    org.jsecurity.subject.InvalidSubjectException var1 = new org.jsecurity.subject.InvalidSubjectException("org.jsecurity.realm.text.PropertiesRealm-343-authorization");

  }

  public void test418() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest5.test418");


    org.jsecurity.mgt.DefaultSecurityManager var0 = new org.jsecurity.mgt.DefaultSecurityManager();
    java.io.InputStream var2 = org.jsecurity.util.ClassUtils.getResourceAsStream("");
    java.lang.Object[] var3 = new java.lang.Object[] { var2};
    java.util.List var4 = org.jsecurity.util.CollectionUtils.asList(var3);
    org.jsecurity.authc.pam.ModularRealmAuthenticator var5 = new org.jsecurity.authc.pam.ModularRealmAuthenticator(var4);
    org.jsecurity.authc.pam.AllSuccessfulModularAuthenticationStrategy var6 = new org.jsecurity.authc.pam.AllSuccessfulModularAuthenticationStrategy();
    var5.setModularAuthenticationStrategy((org.jsecurity.authc.pam.ModularAuthenticationStrategy)var6);
    org.jsecurity.authz.SimpleAuthorizationInfo var8 = new org.jsecurity.authz.SimpleAuthorizationInfo();
    var8.addStringPermission("hi!");
    java.io.InputStream var12 = org.jsecurity.util.ClassUtils.getResourceAsStream("");
    java.lang.Object[] var13 = new java.lang.Object[] { var12};
    java.util.List var14 = org.jsecurity.util.CollectionUtils.asList(var13);
    var8.addRoles((java.util.Collection)var14);
    var5.setAuthenticationListeners((java.util.Collection)var14);
    var0.setSessionListeners((java.util.Collection)var14);
    org.jsecurity.realm.text.TextConfigurationRealm var18 = new org.jsecurity.realm.text.TextConfigurationRealm();
    java.io.InputStream var20 = org.jsecurity.util.ClassUtils.getResourceAsStream("");
    java.lang.Object[] var21 = new java.lang.Object[] { var20};
    java.util.List var22 = org.jsecurity.util.CollectionUtils.asList(var21);
    org.jsecurity.authc.pam.ModularRealmAuthenticator var23 = new org.jsecurity.authc.pam.ModularRealmAuthenticator(var22);
    org.jsecurity.subject.SimplePrincipalCollection var25 = new org.jsecurity.subject.SimplePrincipalCollection((java.util.Collection)var22, "org.jsecurity.authz.UnauthorizedException: org.jsecurity.session.ExpiredSessionException: ");
    org.jsecurity.session.UnknownSessionException var30 = new org.jsecurity.session.UnknownSessionException("dd\uFFFD", (java.io.Serializable)100.0f);
    org.jsecurity.session.SessionException var32 = new org.jsecurity.session.SessionException("dd\uFFFD", (java.lang.Throwable)var30, (java.io.Serializable)0);
    org.jsecurity.session.SessionException var33 = new org.jsecurity.session.SessionException("dd\uFFFD", (java.lang.Throwable)var30);
    var25.add((java.lang.Object)var33, "org.jsecurity.config.ConfigurationException: dd\uFFFD");
    var18.onLogout((org.jsecurity.subject.PrincipalCollection)var25);
    org.jsecurity.authc.pam.FirstSuccessfulAuthenticationStrategy var37 = new org.jsecurity.authc.pam.FirstSuccessfulAuthenticationStrategy();
    org.jsecurity.authz.UnauthorizedException var39 = new org.jsecurity.authz.UnauthorizedException("org.jsecurity.config.ConfigurationException: dd\uFFFD");
    java.lang.Throwable[] var40 = var39.getSuppressed();
    java.util.List var41 = org.jsecurity.util.CollectionUtils.asList((java.lang.Object[])var40);
    org.jsecurity.authc.UsernamePasswordToken var42 = new org.jsecurity.authc.UsernamePasswordToken();
    java.lang.String var43 = var42.getUsername();
    java.net.InetAddress var44 = var42.getInetAddress();
    org.jsecurity.authc.AuthenticationInfo var45 = var37.beforeAllAttempts((java.util.Collection)var41, (org.jsecurity.authc.AuthenticationToken)var42);
    boolean[] var46 = var0.hasRoles((org.jsecurity.subject.PrincipalCollection)var25, var41);
    org.jsecurity.codec.CodecException var49 = new org.jsecurity.codec.CodecException("dd\uFFFD");
    org.jsecurity.authc.ConcurrentAccessException var50 = new org.jsecurity.authc.ConcurrentAccessException("org.jsecurity.authz.UnauthorizedException: org.jsecurity.session.ExpiredSessionException: ", (java.lang.Throwable)var49);
    org.jsecurity.subject.SimplePrincipalCollection var52 = new org.jsecurity.subject.SimplePrincipalCollection((java.lang.Object)var49, "");
    java.io.InputStream var54 = org.jsecurity.util.ClassUtils.getResourceAsStream("");
    java.lang.Object[] var55 = new java.lang.Object[] { var54};
    java.util.List var56 = org.jsecurity.util.CollectionUtils.asList(var55);
    org.jsecurity.authc.pam.ModularRealmAuthenticator var57 = new org.jsecurity.authc.pam.ModularRealmAuthenticator(var56);
    var52.addAll((java.util.Collection)var56, "\u0000\u0000");
    var0.setSessionListeners((java.util.Collection)var56);
    org.jsecurity.subject.Subject var61 = var0.getSubject();
    org.jsecurity.subject.RememberMeManager var62 = var0.getRememberMeManager();
    var0.destroy();
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var2);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var3);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var4);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var12);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var13);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var14);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var20);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var21);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var22);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var40);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var41);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var43);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var44);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var45);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var46);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var54);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var55);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var56);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var61);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var62);

  }

  public void test419() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest5.test419");


    org.jsecurity.io.ResourceException var3 = new org.jsecurity.io.ResourceException("hi!");
    org.jsecurity.codec.CodecException var4 = new org.jsecurity.codec.CodecException((java.lang.Throwable)var3);
    org.jsecurity.JSecurityException var5 = new org.jsecurity.JSecurityException("a2b823b1e72eae2b727289df8a00a89df8a0bab6ad8a89c4c5c7a9b62a270000", (java.lang.Throwable)var3);
    org.jsecurity.session.UnknownSessionException var6 = new org.jsecurity.session.UnknownSessionException((java.lang.Throwable)var5);
    org.jsecurity.authc.IncorrectCredentialsException var7 = new org.jsecurity.authc.IncorrectCredentialsException((java.lang.Throwable)var5);
    org.jsecurity.authz.AuthorizationException var8 = new org.jsecurity.authz.AuthorizationException("\u0000\u0000\u0000", (java.lang.Throwable)var5);
    org.jsecurity.authc.AccountException var9 = new org.jsecurity.authc.AccountException((java.lang.Throwable)var8);
    org.jsecurity.subject.SimplePrincipalCollection var11 = new org.jsecurity.subject.SimplePrincipalCollection((java.lang.Object)var9, "org.jsecurity.authz.UnauthorizedException: org.jsecurity.session.ExpiredSessionException: ");
    org.jsecurity.mgt.DefaultSecurityManager var12 = new org.jsecurity.mgt.DefaultSecurityManager();
    java.io.InputStream var14 = org.jsecurity.util.ClassUtils.getResourceAsStream("");
    java.lang.Object[] var15 = new java.lang.Object[] { var14};
    java.util.List var16 = org.jsecurity.util.CollectionUtils.asList(var15);
    org.jsecurity.authc.pam.ModularRealmAuthenticator var17 = new org.jsecurity.authc.pam.ModularRealmAuthenticator(var16);
    org.jsecurity.authc.pam.AllSuccessfulModularAuthenticationStrategy var18 = new org.jsecurity.authc.pam.AllSuccessfulModularAuthenticationStrategy();
    var17.setModularAuthenticationStrategy((org.jsecurity.authc.pam.ModularAuthenticationStrategy)var18);
    org.jsecurity.authz.SimpleAuthorizationInfo var20 = new org.jsecurity.authz.SimpleAuthorizationInfo();
    var20.addStringPermission("hi!");
    java.io.InputStream var24 = org.jsecurity.util.ClassUtils.getResourceAsStream("");
    java.lang.Object[] var25 = new java.lang.Object[] { var24};
    java.util.List var26 = org.jsecurity.util.CollectionUtils.asList(var25);
    var20.addRoles((java.util.Collection)var26);
    var17.setAuthenticationListeners((java.util.Collection)var26);
    var12.setSessionListeners((java.util.Collection)var26);
    org.jsecurity.subject.Subject var30 = var12.getSubject();
    org.jsecurity.authz.permission.WildcardPermissionResolver var31 = new org.jsecurity.authz.permission.WildcardPermissionResolver();
    var12.setPermissionResolver((org.jsecurity.authz.permission.PermissionResolver)var31);
    boolean var33 = var11.equals((java.lang.Object)var12);
    org.jsecurity.io.XmlSerializer var34 = new org.jsecurity.io.XmlSerializer();
    org.jsecurity.session.mgt.quartz.QuartzSessionValidationScheduler var35 = new org.jsecurity.session.mgt.quartz.QuartzSessionValidationScheduler();
    var35.disableSessionValidation();
    byte[] var37 = var34.serialize((java.lang.Object)var35);
    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      var12.setRememberMeEncryptionCipherKey(var37);
      fail("Expected exception of type java.lang.IllegalStateException");
    } catch (java.lang.IllegalStateException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var14);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var15);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var16);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var24);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var25);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var26);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var30);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var33 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var37);

  }

  public void test420() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest5.test420");


    org.jsecurity.session.UnknownSessionException var2 = new org.jsecurity.session.UnknownSessionException("\u0000\u0000\u0000");
    org.jsecurity.subject.SubjectException var3 = new org.jsecurity.subject.SubjectException("0310766d-27fe-4aa3-9ad6-3a25c0be6154", (java.lang.Throwable)var2);
    org.jsecurity.session.StoppedSessionException var4 = new org.jsecurity.session.StoppedSessionException((java.lang.Throwable)var2);

  }

  public void test421() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest5.test421");


    org.jsecurity.mgt.DefaultSecurityManager var0 = new org.jsecurity.mgt.DefaultSecurityManager();
    java.io.InputStream var2 = org.jsecurity.util.ClassUtils.getResourceAsStream("");
    java.lang.Object[] var3 = new java.lang.Object[] { var2};
    java.util.List var4 = org.jsecurity.util.CollectionUtils.asList(var3);
    org.jsecurity.authc.pam.ModularRealmAuthenticator var5 = new org.jsecurity.authc.pam.ModularRealmAuthenticator(var4);
    org.jsecurity.authc.pam.AllSuccessfulModularAuthenticationStrategy var6 = new org.jsecurity.authc.pam.AllSuccessfulModularAuthenticationStrategy();
    var5.setModularAuthenticationStrategy((org.jsecurity.authc.pam.ModularAuthenticationStrategy)var6);
    org.jsecurity.authz.SimpleAuthorizationInfo var8 = new org.jsecurity.authz.SimpleAuthorizationInfo();
    var8.addStringPermission("hi!");
    java.io.InputStream var12 = org.jsecurity.util.ClassUtils.getResourceAsStream("");
    java.lang.Object[] var13 = new java.lang.Object[] { var12};
    java.util.List var14 = org.jsecurity.util.CollectionUtils.asList(var13);
    var8.addRoles((java.util.Collection)var14);
    var5.setAuthenticationListeners((java.util.Collection)var14);
    var0.setSessionListeners((java.util.Collection)var14);
    org.jsecurity.authc.pam.ModularRealmAuthenticator var18 = new org.jsecurity.authc.pam.ModularRealmAuthenticator();
    org.jsecurity.authz.permission.InvalidPermissionStringException var21 = new org.jsecurity.authz.permission.InvalidPermissionStringException("", "dd\uFFFD");
    org.jsecurity.JSecurityException var23 = new org.jsecurity.JSecurityException("");
    org.jsecurity.authc.SimpleAuthenticationInfo var25 = new org.jsecurity.authc.SimpleAuthenticationInfo((java.lang.Object)var21, (java.lang.Object)"", "org.jsecurity.authz.UnauthorizedException: org.jsecurity.session.ExpiredSessionException: ");
    org.jsecurity.subject.PrincipalCollection var26 = var25.getPrincipals();
    var18.onLogout(var26);
    var0.setAuthenticator((org.jsecurity.authc.Authenticator)var18);
    org.jsecurity.codec.CodecException var31 = new org.jsecurity.codec.CodecException("dd\uFFFD");
    org.jsecurity.authc.ConcurrentAccessException var32 = new org.jsecurity.authc.ConcurrentAccessException("org.jsecurity.authz.UnauthorizedException: org.jsecurity.session.ExpiredSessionException: ", (java.lang.Throwable)var31);
    org.jsecurity.subject.SimplePrincipalCollection var34 = new org.jsecurity.subject.SimplePrincipalCollection((java.lang.Object)var31, "");
    org.jsecurity.authc.pam.FirstSuccessfulAuthenticationStrategy var35 = new org.jsecurity.authc.pam.FirstSuccessfulAuthenticationStrategy();
    org.jsecurity.authz.UnauthorizedException var37 = new org.jsecurity.authz.UnauthorizedException("org.jsecurity.config.ConfigurationException: dd\uFFFD");
    java.lang.Throwable[] var38 = var37.getSuppressed();
    java.util.List var39 = org.jsecurity.util.CollectionUtils.asList((java.lang.Object[])var38);
    org.jsecurity.authc.UsernamePasswordToken var40 = new org.jsecurity.authc.UsernamePasswordToken();
    java.lang.String var41 = var40.getUsername();
    java.net.InetAddress var42 = var40.getInetAddress();
    org.jsecurity.authc.AuthenticationInfo var43 = var35.beforeAllAttempts((java.util.Collection)var39, (org.jsecurity.authc.AuthenticationToken)var40);
    org.jsecurity.session.UnknownSessionException var48 = new org.jsecurity.session.UnknownSessionException("dd\uFFFD", (java.io.Serializable)100.0f);
    org.jsecurity.subject.SubjectException var49 = new org.jsecurity.subject.SubjectException("dd\uFFFD", (java.lang.Throwable)var48);
    org.jsecurity.io.SerializationException var50 = new org.jsecurity.io.SerializationException("", (java.lang.Throwable)var49);
    java.lang.Throwable[] var51 = var49.getSuppressed();
    java.util.Set var52 = org.jsecurity.util.CollectionUtils.asSet((java.lang.Object[])var51);
    org.jsecurity.authc.SimpleAccount var53 = new org.jsecurity.authc.SimpleAccount((org.jsecurity.subject.PrincipalCollection)var34, (java.lang.Object)var39, var52);
    java.io.InputStream var55 = org.jsecurity.util.ClassUtils.getResourceAsStream("");
    java.lang.Object[] var56 = new java.lang.Object[] { var55};
    java.util.List var57 = org.jsecurity.util.CollectionUtils.asList(var56);
    org.jsecurity.authc.pam.ModularRealmAuthenticator var58 = new org.jsecurity.authc.pam.ModularRealmAuthenticator(var57);
    org.jsecurity.subject.SimplePrincipalCollection var60 = new org.jsecurity.subject.SimplePrincipalCollection((java.util.Collection)var57, "org.jsecurity.authz.UnauthorizedException: org.jsecurity.session.ExpiredSessionException: ");
    org.jsecurity.io.ResourceException var64 = new org.jsecurity.io.ResourceException("hi!");
    org.jsecurity.authc.UnknownAccountException var65 = new org.jsecurity.authc.UnknownAccountException((java.lang.Throwable)var64);
    org.jsecurity.session.StoppedSessionException var66 = new org.jsecurity.session.StoppedSessionException("dd\uFFFD", (java.io.Serializable)var64);
    org.jsecurity.session.UnknownSessionException var67 = new org.jsecurity.session.UnknownSessionException("org.jsecurity.authz.UnauthorizedException: org.jsecurity.session.ExpiredSessionException: ", (java.lang.Throwable)var64);
    boolean var68 = var60.equals((java.lang.Object)var64);
    var34.addAll((org.jsecurity.subject.PrincipalCollection)var60);
    org.jsecurity.session.UnknownSessionException var74 = new org.jsecurity.session.UnknownSessionException("dd\uFFFD", (java.io.Serializable)100.0f);
    org.jsecurity.subject.SubjectException var75 = new org.jsecurity.subject.SubjectException("dd\uFFFD", (java.lang.Throwable)var74);
    org.jsecurity.io.SerializationException var76 = new org.jsecurity.io.SerializationException("", (java.lang.Throwable)var75);
    java.lang.Throwable[] var77 = var75.getSuppressed();
    java.util.List var78 = org.jsecurity.util.CollectionUtils.asList((java.lang.Object[])var77);
    boolean var79 = var0.isPermittedAll((org.jsecurity.subject.PrincipalCollection)var34, (java.util.Collection)var78);
    org.jsecurity.realm.text.PropertiesRealm var80 = new org.jsecurity.realm.text.PropertiesRealm();
    var0.setRealm((org.jsecurity.realm.Realm)var80);
    org.jsecurity.cache.ehcache.EhCacheManager var82 = new org.jsecurity.cache.ehcache.EhCacheManager();
    var82.init();
    var82.setCacheManagerConfigFile("b6a77f71-73c4-466a-903e-72fc5968f9ac");
    var82.init();
    var80.setCacheManager((org.jsecurity.cache.CacheManager)var82);
    net.sf.ehcache.CacheManager var88 = var82.getCacheManager();
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var2);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var3);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var4);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var12);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var13);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var14);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var26);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var38);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var39);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var41);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var42);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var43);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var51);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var52);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var55);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var56);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var57);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var68 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var77);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var78);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var79 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var88);

  }

  public void test422() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest5.test422");


    org.jsecurity.util.AntPathMatcher var0 = new org.jsecurity.util.AntPathMatcher();
    boolean var3 = var0.matchStart("\uFFFD\uFFFD#\uFFFD\uFFFD.\uFFFD+rr\uFFFD\u07CA\u0000\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\u01E9\uFFFD*'\u0000\u0000", "ZGT/");
    var0.setPathSeparator("org.jsecurity.config.ConfigurationException: dd\uFFFD");
    boolean var8 = var0.matchStart("6464ff", "\uFFFD\uFFFD\u0000");
    boolean var11 = var0.matchStart("b598ff3d-5685-4491-8ee6-585d37adb1db", "1f4da124-b55c-4be1-ae95-84c40eba1207");
    boolean var14 = var0.matches("a2b823b1e72eae2b727289df8a00a89df8a0bab6ad8a89c4c5c7a9b62a270000", "org.jsecurity.realm.SimpleAccountRealm-384-authorization");
    boolean var16 = var0.isPattern("1ff0759d-a078-42db-aa3c-e9d1594c2032");
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var3 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var8 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var11 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var14 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var16 == false);

  }

  public void test423() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest5.test423");


    org.jsecurity.io.SerializationException var1 = new org.jsecurity.io.SerializationException("57f108f5-de1f-46bc-a431-6c2563f95e22");
    org.jsecurity.crypto.hash.Sha256Hash var2 = new org.jsecurity.crypto.hash.Sha256Hash((java.lang.Object)"57f108f5-de1f-46bc-a431-6c2563f95e22");

  }

  public void test424() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest5.test424");


    org.jsecurity.io.IniResource var4 = new org.jsecurity.io.IniResource();
    java.lang.String var5 = var4.getCharsetName();
    org.jsecurity.session.UnknownSessionException var6 = new org.jsecurity.session.UnknownSessionException("", (java.io.Serializable)var4);
    org.jsecurity.authz.UnauthorizedException var7 = new org.jsecurity.authz.UnauthorizedException("org.jsecurity.config.ConfigurationException: dd\uFFFD", (java.lang.Throwable)var6);
    org.jsecurity.session.SessionException var8 = new org.jsecurity.session.SessionException("65e65177-d0e5-404e-b955-c04bc53877e7", (java.lang.Throwable)var7);
    org.jsecurity.authc.ConcurrentAccessException var9 = new org.jsecurity.authc.ConcurrentAccessException("4a0e5e90-249b-4eb3-a134-0b53851d6caf", (java.lang.Throwable)var7);
    org.jsecurity.session.ExpiredSessionException var10 = new org.jsecurity.session.ExpiredSessionException((java.lang.Throwable)var7);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var5);

  }

  public void test425() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest5.test425");


    org.jsecurity.session.UnknownSessionException var2 = new org.jsecurity.session.UnknownSessionException("9370bad8-7774-4f3f-9431-c39c9f6aa37d");
    org.jsecurity.config.ConfigurationException var3 = new org.jsecurity.config.ConfigurationException((java.lang.Throwable)var2);
    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      org.jsecurity.crypto.hash.Sha384Hash var4 = new org.jsecurity.crypto.hash.Sha384Hash((java.lang.Object)"77ddc2f7-9066-46c8-b5f2-b99b8caec0fa", (java.lang.Object)var3);
      fail("Expected exception of type org.jsecurity.codec.CodecException");
    } catch (org.jsecurity.codec.CodecException e) {
      // Expected exception.
    }

  }

  public void test426() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest5.test426");


    org.jsecurity.session.mgt.SimpleSession var0 = new org.jsecurity.session.mgt.SimpleSession();
    var0.touch();
    var0.validate();
    org.jsecurity.session.mgt.SimpleSession var3 = new org.jsecurity.session.mgt.SimpleSession();
    var3.setTimeout((-1L));
    org.jsecurity.session.mgt.SimpleSession var6 = new org.jsecurity.session.mgt.SimpleSession();
    java.util.Date var7 = var6.getLastAccessTime();
    var3.setLastAccessTime(var7);
    org.jsecurity.session.mgt.SimpleSession var9 = new org.jsecurity.session.mgt.SimpleSession();
    java.util.Date var10 = var9.getLastAccessTime();
    var3.setStopTimestamp(var10);
    var0.setLastAccessTime(var10);
    java.io.Serializable var13 = var0.getId();
    var0.stop();
    org.jsecurity.jndi.JndiLocator var15 = new org.jsecurity.jndi.JndiLocator();
    boolean var16 = var15.isResourceRef();
    java.lang.Object var17 = var0.getAttribute((java.lang.Object)var15);
    org.jsecurity.realm.jndi.JndiRealmFactory var18 = new org.jsecurity.realm.jndi.JndiRealmFactory();
    java.util.Collection var19 = var18.getJndiNames();
    org.jsecurity.jndi.JndiTemplate var20 = var18.getJndiTemplate();
    java.util.Properties var21 = var20.getEnvironment();
    var15.setJndiTemplate(var20);
    var15.setResourceRef(false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var7);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var10);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var13);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var16 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var17);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var19);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var20);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var21);

  }

  public void test427() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest5.test427");


    org.jsecurity.realm.text.TextConfigurationRealm var0 = new org.jsecurity.realm.text.TextConfigurationRealm();
    java.io.InputStream var2 = org.jsecurity.util.ClassUtils.getResourceAsStream("");
    java.lang.Object[] var3 = new java.lang.Object[] { var2};
    java.util.List var4 = org.jsecurity.util.CollectionUtils.asList(var3);
    org.jsecurity.authc.pam.ModularRealmAuthenticator var5 = new org.jsecurity.authc.pam.ModularRealmAuthenticator(var4);
    org.jsecurity.subject.SimplePrincipalCollection var7 = new org.jsecurity.subject.SimplePrincipalCollection((java.util.Collection)var4, "org.jsecurity.authz.UnauthorizedException: org.jsecurity.session.ExpiredSessionException: ");
    org.jsecurity.session.UnknownSessionException var12 = new org.jsecurity.session.UnknownSessionException("dd\uFFFD", (java.io.Serializable)100.0f);
    org.jsecurity.session.SessionException var14 = new org.jsecurity.session.SessionException("dd\uFFFD", (java.lang.Throwable)var12, (java.io.Serializable)0);
    org.jsecurity.session.SessionException var15 = new org.jsecurity.session.SessionException("dd\uFFFD", (java.lang.Throwable)var12);
    var7.add((java.lang.Object)var15, "org.jsecurity.config.ConfigurationException: dd\uFFFD");
    var0.onLogout((org.jsecurity.subject.PrincipalCollection)var7);
    org.jsecurity.cache.HashtableCacheManager var19 = new org.jsecurity.cache.HashtableCacheManager();
    org.jsecurity.cache.Cache var21 = var19.getCache("\u0000\u0000");
    var0.setAuthorizationCache(var21);
    org.jsecurity.codec.CodecException var25 = new org.jsecurity.codec.CodecException("dd\uFFFD");
    org.jsecurity.authc.ConcurrentAccessException var26 = new org.jsecurity.authc.ConcurrentAccessException("org.jsecurity.authz.UnauthorizedException: org.jsecurity.session.ExpiredSessionException: ", (java.lang.Throwable)var25);
    org.jsecurity.subject.SimplePrincipalCollection var28 = new org.jsecurity.subject.SimplePrincipalCollection((java.lang.Object)var25, "");
    var0.onLogout((org.jsecurity.subject.PrincipalCollection)var28);
    var0.setRoleDefinitions("org.jsecurity.config.ConfigurationException: dd\uFFFD");
    java.lang.Class var32 = var0.getAuthenticationTokenClass();
    var0.setUserDefinitions("8d307df1-6623-4ef3-84b2-f75411643f59");
    java.lang.String var35 = var0.getAuthorizationCacheName();
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var2);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var3);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var4);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var21);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var32);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var35);

  }

  public void test428() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest5.test428");


    char[] var1 = new char[] { };
    org.jsecurity.authc.UsernamePasswordToken var3 = new org.jsecurity.authc.UsernamePasswordToken("hi!", var1, true);
    byte[] var4 = org.jsecurity.codec.Hex.decode(var1);
    byte[] var5 = org.jsecurity.codec.Hex.decode(var1);
    byte[] var7 = org.jsecurity.codec.Base64.encode(var5, true);
    java.lang.String var8 = org.jsecurity.codec.Base64.encodeToString(var5);
    java.lang.String var9 = org.jsecurity.codec.CodecSupport.toString(var5);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var1);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var4);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var5);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var7);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var8 + "' != '" + ""+ "'", var8.equals(""));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var9 + "' != '" + ""+ "'", var9.equals(""));

  }

  public void test429() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest5.test429");


    org.jsecurity.io.ResourceException var1 = new org.jsecurity.io.ResourceException("5dd0c65d-1422-49c2-becb-9e8dca619ab3");
    org.jsecurity.session.StoppedSessionException var2 = new org.jsecurity.session.StoppedSessionException((java.lang.Throwable)var1);

  }

  public void test430() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest5.test430");


    org.jsecurity.cache.HashtableCache var1 = new org.jsecurity.cache.HashtableCache("orgjsecurityauthcCredentialsException783ccd3148a842dd890fdf885a7baafAA==");
    org.jsecurity.realm.text.TextConfigurationRealm var2 = new org.jsecurity.realm.text.TextConfigurationRealm();
    java.io.InputStream var4 = org.jsecurity.util.ClassUtils.getResourceAsStream("");
    java.lang.Object[] var5 = new java.lang.Object[] { var4};
    java.util.List var6 = org.jsecurity.util.CollectionUtils.asList(var5);
    org.jsecurity.authc.pam.ModularRealmAuthenticator var7 = new org.jsecurity.authc.pam.ModularRealmAuthenticator(var6);
    org.jsecurity.subject.SimplePrincipalCollection var9 = new org.jsecurity.subject.SimplePrincipalCollection((java.util.Collection)var6, "org.jsecurity.authz.UnauthorizedException: org.jsecurity.session.ExpiredSessionException: ");
    org.jsecurity.session.UnknownSessionException var14 = new org.jsecurity.session.UnknownSessionException("dd\uFFFD", (java.io.Serializable)100.0f);
    org.jsecurity.session.SessionException var16 = new org.jsecurity.session.SessionException("dd\uFFFD", (java.lang.Throwable)var14, (java.io.Serializable)0);
    org.jsecurity.session.SessionException var17 = new org.jsecurity.session.SessionException("dd\uFFFD", (java.lang.Throwable)var14);
    var9.add((java.lang.Object)var17, "org.jsecurity.config.ConfigurationException: dd\uFFFD");
    var2.onLogout((org.jsecurity.subject.PrincipalCollection)var9);
    var1.remove((java.lang.Object)var9);
    org.jsecurity.config.ConfigurationException var22 = new org.jsecurity.config.ConfigurationException();
    org.jsecurity.util.UnknownClassException var23 = new org.jsecurity.util.UnknownClassException((java.lang.Throwable)var22);
    org.jsecurity.util.InstantiationException var24 = new org.jsecurity.util.InstantiationException((java.lang.Throwable)var23);
    org.jsecurity.session.UnknownSessionException var25 = new org.jsecurity.session.UnknownSessionException((java.lang.Throwable)var23);
    org.jsecurity.authz.SimpleAuthorizingAccount var26 = new org.jsecurity.authz.SimpleAuthorizingAccount((org.jsecurity.subject.PrincipalCollection)var9, (java.lang.Object)var25);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var4);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var5);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var6);

  }

  public void test431() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest5.test431");


    org.jsecurity.crypto.hash.Md5Hash var1 = org.jsecurity.crypto.hash.Md5Hash.fromBase64String("HashtableCache [orgjsecurityauthcCredentialsException783ccd3148a842dd890fdf885a7baafAA==]");
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var1);

  }

  public void test432() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest5.test432");


    org.jsecurity.crypto.BlowfishCipher var0 = new org.jsecurity.crypto.BlowfishCipher();
    byte[] var4 = new byte[] { (byte)100, (byte)100, (byte)(-1)};
    java.lang.String var5 = org.jsecurity.codec.CodecSupport.toString(var4);
    byte[] var7 = org.jsecurity.codec.Base64.decode("hi!");
    byte[] var8 = var0.encrypt(var4, var7);
    org.jsecurity.crypto.BlowfishCipher var9 = new org.jsecurity.crypto.BlowfishCipher();
    byte[] var13 = new byte[] { (byte)100, (byte)100, (byte)(-1)};
    java.lang.String var14 = org.jsecurity.codec.CodecSupport.toString(var13);
    byte[] var16 = org.jsecurity.codec.Base64.decode("hi!");
    byte[] var17 = var9.encrypt(var13, var16);
    org.jsecurity.crypto.BlowfishCipher var18 = new org.jsecurity.crypto.BlowfishCipher();
    java.security.Key var19 = var18.getKey();
    java.security.Key var20 = var18.getKey();
    var9.setKey(var20);
    var0.setKey(var20);
    byte[] var26 = new byte[] { (byte)100, (byte)100, (byte)(-1)};
    java.lang.String var27 = org.jsecurity.codec.CodecSupport.toString(var26);
    byte[] var29 = org.jsecurity.codec.Base64.encode(var26, false);
    java.lang.String var30 = org.jsecurity.codec.CodecSupport.toString(var29);
    org.jsecurity.crypto.hash.Sha512Hash var32 = org.jsecurity.crypto.hash.Sha512Hash.fromBase64String("org.jsecurity.config.ConfigurationException: dd\uFFFD");
    byte[] var33 = var32.getBytes();
    java.lang.String var34 = var32.toString();
    byte[] var35 = var32.getBytes();
    org.jsecurity.crypto.hash.Md2Hash var37 = org.jsecurity.crypto.hash.Md2Hash.fromHexString("6464ff");
    java.lang.String var38 = var37.toString();
    byte[] var39 = var37.getBytes();
    byte[] var40 = var37.getBytes();
    var32.setBytes(var40);
    java.lang.String var42 = org.jsecurity.codec.CodecSupport.toString(var40);
    byte[] var43 = var0.encrypt(var29, var40);
    byte[] var44 = org.jsecurity.codec.Base64.decode(var29);
    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      char[] var46 = org.jsecurity.codec.CodecSupport.toChars(var44, "11e31b8f-949c-4029-91a9-fc89cb88634c");
      fail("Expected exception of type org.jsecurity.codec.CodecException");
    } catch (org.jsecurity.codec.CodecException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var4);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var5 + "' != '" + "dd\uFFFD"+ "'", var5.equals("dd\uFFFD"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var7);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var8);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var13);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var14 + "' != '" + "dd\uFFFD"+ "'", var14.equals("dd\uFFFD"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var16);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var17);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var19);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var20);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var26);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var27 + "' != '" + "dd\uFFFD"+ "'", var27.equals("dd\uFFFD"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var29);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var30 + "' != '" + "ZGT/"+ "'", var30.equals("ZGT/"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var32);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var33);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var34 + "' != '" + "a2b823b1e72eae2b727289df8a00a89df8a0bab6ad8a89c4c5c7a9b62a270000"+ "'", var34.equals("a2b823b1e72eae2b727289df8a00a89df8a0bab6ad8a89c4c5c7a9b62a270000"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var35);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var37);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var38 + "' != '" + "6464ff"+ "'", var38.equals("6464ff"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var39);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var40);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var42 + "' != '" + "dd\uFFFD"+ "'", var42.equals("dd\uFFFD"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var43);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var44);

  }

  public void test433() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest5.test433");


    org.jsecurity.realm.activedirectory.ActiveDirectoryRealm var0 = new org.jsecurity.realm.activedirectory.ActiveDirectoryRealm();
    var0.init();
    var0.setSystemPassword("dd\uFFFD");
    org.jsecurity.authz.aop.GuestAnnotationHandler var4 = new org.jsecurity.authz.aop.GuestAnnotationHandler();
    java.lang.Class var5 = var4.getAnnotationClass();
    var0.setAuthenticationTokenClass(var5);
    org.jsecurity.mgt.DefaultSecurityManager var7 = new org.jsecurity.mgt.DefaultSecurityManager((org.jsecurity.realm.Realm)var0);
    org.jsecurity.cache.CacheManager var8 = var0.getCacheManager();
    org.jsecurity.realm.text.PropertiesRealm var9 = new org.jsecurity.realm.text.PropertiesRealm(var8);
    var9.afterRoleCacheSet();
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var5);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var8);

  }

  public void test434() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest5.test434");


    org.jsecurity.crypto.hash.Md2Hash var1 = new org.jsecurity.crypto.hash.Md2Hash((java.lang.Object)"d5db1411-b2ba-45db-90af-084ccdfc2a4d");

  }

  public void test435() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest5.test435");


    org.jsecurity.realm.text.PropertiesRealm var0 = new org.jsecurity.realm.text.PropertiesRealm();
    var0.setRoleDefinitions("5dd0c65d-1422-49c2-becb-9e8dca619ab3");
    var0.setUseXmlFormat(true);
    var0.setResourcePath("b6a77f71-73c4-466a-903e-72fc5968f9ac");
    org.jsecurity.mgt.DefaultSecurityManager var7 = new org.jsecurity.mgt.DefaultSecurityManager();
    java.io.InputStream var9 = org.jsecurity.util.ClassUtils.getResourceAsStream("");
    java.lang.Object[] var10 = new java.lang.Object[] { var9};
    java.util.List var11 = org.jsecurity.util.CollectionUtils.asList(var10);
    org.jsecurity.authc.pam.ModularRealmAuthenticator var12 = new org.jsecurity.authc.pam.ModularRealmAuthenticator(var11);
    org.jsecurity.authc.pam.AllSuccessfulModularAuthenticationStrategy var13 = new org.jsecurity.authc.pam.AllSuccessfulModularAuthenticationStrategy();
    var12.setModularAuthenticationStrategy((org.jsecurity.authc.pam.ModularAuthenticationStrategy)var13);
    org.jsecurity.authz.SimpleAuthorizationInfo var15 = new org.jsecurity.authz.SimpleAuthorizationInfo();
    var15.addStringPermission("hi!");
    java.io.InputStream var19 = org.jsecurity.util.ClassUtils.getResourceAsStream("");
    java.lang.Object[] var20 = new java.lang.Object[] { var19};
    java.util.List var21 = org.jsecurity.util.CollectionUtils.asList(var20);
    var15.addRoles((java.util.Collection)var21);
    var12.setAuthenticationListeners((java.util.Collection)var21);
    var7.setSessionListeners((java.util.Collection)var21);
    org.jsecurity.realm.text.TextConfigurationRealm var25 = new org.jsecurity.realm.text.TextConfigurationRealm();
    java.io.InputStream var27 = org.jsecurity.util.ClassUtils.getResourceAsStream("");
    java.lang.Object[] var28 = new java.lang.Object[] { var27};
    java.util.List var29 = org.jsecurity.util.CollectionUtils.asList(var28);
    org.jsecurity.authc.pam.ModularRealmAuthenticator var30 = new org.jsecurity.authc.pam.ModularRealmAuthenticator(var29);
    org.jsecurity.subject.SimplePrincipalCollection var32 = new org.jsecurity.subject.SimplePrincipalCollection((java.util.Collection)var29, "org.jsecurity.authz.UnauthorizedException: org.jsecurity.session.ExpiredSessionException: ");
    org.jsecurity.session.UnknownSessionException var37 = new org.jsecurity.session.UnknownSessionException("dd\uFFFD", (java.io.Serializable)100.0f);
    org.jsecurity.session.SessionException var39 = new org.jsecurity.session.SessionException("dd\uFFFD", (java.lang.Throwable)var37, (java.io.Serializable)0);
    org.jsecurity.session.SessionException var40 = new org.jsecurity.session.SessionException("dd\uFFFD", (java.lang.Throwable)var37);
    var32.add((java.lang.Object)var40, "org.jsecurity.config.ConfigurationException: dd\uFFFD");
    var25.onLogout((org.jsecurity.subject.PrincipalCollection)var32);
    org.jsecurity.authc.pam.FirstSuccessfulAuthenticationStrategy var44 = new org.jsecurity.authc.pam.FirstSuccessfulAuthenticationStrategy();
    org.jsecurity.authz.UnauthorizedException var46 = new org.jsecurity.authz.UnauthorizedException("org.jsecurity.config.ConfigurationException: dd\uFFFD");
    java.lang.Throwable[] var47 = var46.getSuppressed();
    java.util.List var48 = org.jsecurity.util.CollectionUtils.asList((java.lang.Object[])var47);
    org.jsecurity.authc.UsernamePasswordToken var49 = new org.jsecurity.authc.UsernamePasswordToken();
    java.lang.String var50 = var49.getUsername();
    java.net.InetAddress var51 = var49.getInetAddress();
    org.jsecurity.authc.AuthenticationInfo var52 = var44.beforeAllAttempts((java.util.Collection)var48, (org.jsecurity.authc.AuthenticationToken)var49);
    boolean[] var53 = var7.hasRoles((org.jsecurity.subject.PrincipalCollection)var32, var48);
    org.jsecurity.authz.permission.WildcardPermissionResolver var54 = new org.jsecurity.authz.permission.WildcardPermissionResolver();
    org.jsecurity.authz.Permission var56 = var54.resolvePermission("hi!");
    org.jsecurity.authz.Permission var58 = var54.resolvePermission("hi!");
    var7.setPermissionResolver((org.jsecurity.authz.permission.PermissionResolver)var54);
    var0.setPermissionResolver((org.jsecurity.authz.permission.PermissionResolver)var54);
    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      var0.afterRoleCacheSet();
      fail("Expected exception of type org.jsecurity.JSecurityException");
    } catch (org.jsecurity.JSecurityException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var9);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var10);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var11);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var19);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var20);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var21);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var27);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var28);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var29);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var47);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var48);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var50);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var51);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var52);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var53);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var56);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var58);

  }

  public void test436() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest5.test436");


    java.lang.String[] var3 = org.jsecurity.util.StringUtils.split("org.jsecurity.realm.text.TextConfigurationRealm_1021", '#', '4');
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var3);

  }

  public void test437() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest5.test437");


    org.jsecurity.session.mgt.SimpleSession var0 = new org.jsecurity.session.mgt.SimpleSession();
    org.jsecurity.session.UnknownSessionException var4 = new org.jsecurity.session.UnknownSessionException("dd\uFFFD", (java.io.Serializable)100.0f);
    org.jsecurity.session.SessionException var6 = new org.jsecurity.session.SessionException("dd\uFFFD", (java.lang.Throwable)var4, (java.io.Serializable)0);
    org.jsecurity.authc.AccountException var7 = new org.jsecurity.authc.AccountException((java.lang.Throwable)var4);
    var0.setId((java.io.Serializable)var4);
    var0.setTimeout((-1L));
    org.jsecurity.session.mgt.SimpleSession var11 = new org.jsecurity.session.mgt.SimpleSession();
    var11.setTimeout((-1L));
    org.jsecurity.session.mgt.SimpleSession var14 = new org.jsecurity.session.mgt.SimpleSession();
    var14.setTimeout((-1L));
    org.jsecurity.session.mgt.SimpleSession var17 = new org.jsecurity.session.mgt.SimpleSession();
    java.util.Date var18 = var17.getLastAccessTime();
    var14.setLastAccessTime(var18);
    org.jsecurity.session.mgt.SimpleSession var20 = new org.jsecurity.session.mgt.SimpleSession();
    java.util.Date var21 = var20.getLastAccessTime();
    var14.setStopTimestamp(var21);
    var11.setStartTimestamp(var21);
    var0.setLastAccessTime(var21);
    var0.stop();
    java.util.Map var26 = var0.getAttributes();
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var18);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var21);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var26);

  }

  public void test438() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest5.test438");


    org.jsecurity.cache.HashtableCache var2 = new org.jsecurity.cache.HashtableCache("\u0000\u0000\u0000");
    org.jsecurity.session.mgt.SimpleSession var3 = new org.jsecurity.session.mgt.SimpleSession();
    var3.touch();
    org.jsecurity.authz.UnauthenticatedException var7 = new org.jsecurity.authz.UnauthenticatedException();
    org.jsecurity.config.UnresolveableReferenceException var8 = new org.jsecurity.config.UnresolveableReferenceException("", (java.lang.Throwable)var7);
    org.jsecurity.cache.CacheException var9 = new org.jsecurity.cache.CacheException("org.jsecurity.config.ConfigurationException: dd\uFFFD", (java.lang.Throwable)var7);
    java.lang.Object var10 = var3.removeAttribute((java.lang.Object)var9);
    org.jsecurity.mgt.DefaultSecurityManager var11 = new org.jsecurity.mgt.DefaultSecurityManager();
    org.jsecurity.authc.pam.AllSuccessfulModularAuthenticationStrategy var12 = new org.jsecurity.authc.pam.AllSuccessfulModularAuthenticationStrategy();
    org.jsecurity.authc.pam.AllSuccessfulModularAuthenticationStrategy var13 = new org.jsecurity.authc.pam.AllSuccessfulModularAuthenticationStrategy();
    char[] var15 = new char[] { };
    org.jsecurity.authc.UsernamePasswordToken var17 = new org.jsecurity.authc.UsernamePasswordToken("hi!", var15, true);
    org.jsecurity.authc.SimpleAccount var18 = new org.jsecurity.authc.SimpleAccount();
    var18.setCredentialsExpired(false);
    boolean var21 = var18.isLocked();
    org.jsecurity.authc.AuthenticationInfo var22 = var13.afterAllAttempts((org.jsecurity.authc.AuthenticationToken)var17, (org.jsecurity.authc.AuthenticationInfo)var18);
    char[] var26 = new char[] { '4', '#'};
    org.jsecurity.authc.UsernamePasswordToken var27 = new org.jsecurity.authc.UsernamePasswordToken("\u0000\u0000", var26);
    org.jsecurity.authc.SimpleAccount var28 = new org.jsecurity.authc.SimpleAccount();
    var28.setCredentialsExpired(false);
    var28.setCredentialsExpired(false);
    boolean var33 = var28.isCredentialsExpired();
    org.jsecurity.authc.AuthenticationInfo var34 = var13.afterAllAttempts((org.jsecurity.authc.AuthenticationToken)var27, (org.jsecurity.authc.AuthenticationInfo)var28);
    org.jsecurity.authz.UnauthenticatedException var38 = new org.jsecurity.authz.UnauthenticatedException();
    org.jsecurity.config.UnresolveableReferenceException var39 = new org.jsecurity.config.UnresolveableReferenceException("", (java.lang.Throwable)var38);
    org.jsecurity.cache.CacheException var40 = new org.jsecurity.cache.CacheException("org.jsecurity.config.ConfigurationException: dd\uFFFD", (java.lang.Throwable)var38);
    org.jsecurity.authc.SimpleAuthenticationInfo var42 = new org.jsecurity.authc.SimpleAuthenticationInfo((java.lang.Object)"org.jsecurity.config.ConfigurationException: dd\uFFFD", (java.lang.Object)var40, "a2b823b1e72eae2b727289df8a00a89df8a0bab6ad8a89c4c5c7a9b62a270000");
    org.jsecurity.subject.PrincipalCollection var43 = var42.getPrincipals();
    org.jsecurity.authc.AuthenticationInfo var44 = var12.afterAllAttempts((org.jsecurity.authc.AuthenticationToken)var27, (org.jsecurity.authc.AuthenticationInfo)var42);
    var11.setModularAuthenticationStrategy((org.jsecurity.authc.pam.ModularAuthenticationStrategy)var12);
    org.jsecurity.subject.RememberMeManager var46 = var11.getRememberMeManager();
    org.jsecurity.authc.pam.ModularRealmAuthenticator var47 = new org.jsecurity.authc.pam.ModularRealmAuthenticator();
    var11.setAuthenticator((org.jsecurity.authc.Authenticator)var47);
    var2.put((java.lang.Object)var3, (java.lang.Object)var47);
    var3.setTimeout(10L);
    org.jsecurity.session.mgt.SimpleSession var52 = new org.jsecurity.session.mgt.SimpleSession();
    var52.validate();
    java.util.Date var54 = var52.getStartTimestamp();
    var3.setStopTimestamp(var54);
    org.jsecurity.session.UnknownSessionException var56 = new org.jsecurity.session.UnknownSessionException("a90fad7f-7d5f-46a8-a669-ef1c9ffd25bf", (java.io.Serializable)var3);
    long var57 = var3.getTimeout();
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var10);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var15);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var21 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var22);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var26);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var33 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var34);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var43);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var44);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var46);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var54);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var57 == 10L);

  }

  public void test439() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest5.test439");


    org.jsecurity.session.UnknownSessionException var5 = new org.jsecurity.session.UnknownSessionException("dd\uFFFD", (java.io.Serializable)100.0f);
    org.jsecurity.subject.SubjectException var6 = new org.jsecurity.subject.SubjectException("dd\uFFFD", (java.lang.Throwable)var5);
    org.jsecurity.authc.pam.UnsupportedTokenException var7 = new org.jsecurity.authc.pam.UnsupportedTokenException("dd\uFFFD", (java.lang.Throwable)var5);
    org.jsecurity.session.StoppedSessionException var8 = new org.jsecurity.session.StoppedSessionException("org.jsecurity.config.ConfigurationException: dd\uFFFD", (java.lang.Throwable)var7);
    org.jsecurity.util.UnknownClassException var9 = new org.jsecurity.util.UnknownClassException((java.lang.Throwable)var7);
    org.jsecurity.session.InvalidSessionException var10 = new org.jsecurity.session.InvalidSessionException((java.io.Serializable)var9);
    org.jsecurity.session.StoppedSessionException var11 = new org.jsecurity.session.StoppedSessionException((java.io.Serializable)var9);

  }

  public void test440() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest5.test440");


    org.jsecurity.util.InstantiationException var3 = new org.jsecurity.util.InstantiationException("org.jsecurity.authc.UsernamePasswordToken - org.jsecurity.config.ConfigurationException: dd\uFFFD, rememberMe=false");
    org.jsecurity.config.ConfigurationException var4 = new org.jsecurity.config.ConfigurationException("020e4fd5-81c8-4cbc-9bbb-975c45ce39a3", (java.lang.Throwable)var3);
    org.jsecurity.session.SessionException var5 = new org.jsecurity.session.SessionException("345d9036-762c-4f58-8690-c901bf299cde", (java.io.Serializable)var4);

  }

  public void test441() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest5.test441");


    org.jsecurity.crypto.hash.Md2Hash var1 = org.jsecurity.crypto.hash.Md2Hash.fromHexString("6464ff");
    java.lang.String var2 = var1.toString();
    byte[] var3 = var1.getBytes();
    byte[] var7 = new byte[] { (byte)100, (byte)100, (byte)(-1)};
    java.lang.String var8 = org.jsecurity.codec.CodecSupport.toString(var7);
    byte[] var9 = org.jsecurity.codec.Base64.encode(var7);
    byte[] var10 = org.jsecurity.codec.Base64.encode(var9);
    var1.setBytes(var9);
    byte[] var12 = org.jsecurity.codec.Base64.encodeChunked(var9);
    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      java.lang.String var14 = org.jsecurity.codec.CodecSupport.toString(var9, "f038fdb8-a003-42b2-ae02-712288013087");
      fail("Expected exception of type org.jsecurity.codec.CodecException");
    } catch (org.jsecurity.codec.CodecException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var2 + "' != '" + "6464ff"+ "'", var2.equals("6464ff"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var3);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var7);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var8 + "' != '" + "dd\uFFFD"+ "'", var8.equals("dd\uFFFD"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var9);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var10);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var12);

  }

  public void test442() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest5.test442");


    org.jsecurity.session.mgt.eis.MemorySessionDAO var0 = new org.jsecurity.session.mgt.eis.MemorySessionDAO();
    org.jsecurity.cache.Cache var1 = var0.getActiveSessionsCache();
    org.jsecurity.session.mgt.SimpleSession var2 = new org.jsecurity.session.mgt.SimpleSession();
    var2.setTimeout((-1L));
    org.jsecurity.session.mgt.SimpleSession var5 = new org.jsecurity.session.mgt.SimpleSession();
    java.util.Date var6 = var5.getLastAccessTime();
    var2.setLastAccessTime(var6);
    var0.update((org.jsecurity.session.Session)var2);
    var0.setActiveSessionsCacheName("hi!");
    java.lang.String var11 = var0.getActiveSessionsCacheName();
    org.jsecurity.session.mgt.SimpleSession var12 = new org.jsecurity.session.mgt.SimpleSession();
    java.io.Serializable var13 = var0.create((org.jsecurity.session.Session)var12);
    org.jsecurity.session.mgt.DelegatingSession var14 = new org.jsecurity.session.mgt.DelegatingSession();
    org.jsecurity.session.mgt.SessionManager var15 = var14.getSessionManager();
    var0.update((org.jsecurity.session.Session)var14);
    var0.setActiveSessionsCacheName("\uFFFD\uFFFD#\uFFFD\uFFFD.\uFFFD+r\uFFFD\u6959(\uFFFD\uFFFDW\uFFFDq\uFFFD.\uFFFD\uFFFD^jY\uFFFDj\uFFFDa\uFFFD\uFFFD\uFFFDj\u0628\u0000");
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var1);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var6);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var11 + "' != '" + "hi!"+ "'", var11.equals("hi!"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var13 + "' != '" + "5bf58f6a-9df6-4e91-9123-f0de4d0e543e"+ "'", var13.equals("5bf58f6a-9df6-4e91-9123-f0de4d0e543e"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var15);

  }

  public void test443() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest5.test443");


    org.jsecurity.authc.IncorrectCredentialsException var2 = new org.jsecurity.authc.IncorrectCredentialsException("\u0000\u0000");
    org.jsecurity.codec.CodecException var5 = new org.jsecurity.codec.CodecException("dd\uFFFD");
    org.jsecurity.authc.ConcurrentAccessException var6 = new org.jsecurity.authc.ConcurrentAccessException("org.jsecurity.authz.UnauthorizedException: org.jsecurity.session.ExpiredSessionException: ", (java.lang.Throwable)var5);
    org.jsecurity.subject.SimplePrincipalCollection var8 = new org.jsecurity.subject.SimplePrincipalCollection((java.lang.Object)var5, "");
    java.io.InputStream var10 = org.jsecurity.util.ClassUtils.getResourceAsStream("");
    java.lang.Object[] var11 = new java.lang.Object[] { var10};
    java.util.List var12 = org.jsecurity.util.CollectionUtils.asList(var11);
    org.jsecurity.authc.pam.ModularRealmAuthenticator var13 = new org.jsecurity.authc.pam.ModularRealmAuthenticator(var12);
    org.jsecurity.authc.pam.AllSuccessfulModularAuthenticationStrategy var14 = new org.jsecurity.authc.pam.AllSuccessfulModularAuthenticationStrategy();
    var13.setModularAuthenticationStrategy((org.jsecurity.authc.pam.ModularAuthenticationStrategy)var14);
    org.jsecurity.authz.SimpleAuthorizationInfo var16 = new org.jsecurity.authz.SimpleAuthorizationInfo();
    var16.addStringPermission("hi!");
    java.io.InputStream var20 = org.jsecurity.util.ClassUtils.getResourceAsStream("");
    java.lang.Object[] var21 = new java.lang.Object[] { var20};
    java.util.List var22 = org.jsecurity.util.CollectionUtils.asList(var21);
    var16.addRoles((java.util.Collection)var22);
    var13.setAuthenticationListeners((java.util.Collection)var22);
    org.jsecurity.realm.activedirectory.ActiveDirectoryRealm var25 = new org.jsecurity.realm.activedirectory.ActiveDirectoryRealm();
    var25.setPrincipalSuffix("");
    var13.setRealm((org.jsecurity.realm.Realm)var25);
    org.jsecurity.authc.pam.FirstSuccessfulAuthenticationStrategy var29 = new org.jsecurity.authc.pam.FirstSuccessfulAuthenticationStrategy();
    org.jsecurity.authz.UnauthorizedException var31 = new org.jsecurity.authz.UnauthorizedException("org.jsecurity.config.ConfigurationException: dd\uFFFD");
    java.lang.Throwable[] var32 = var31.getSuppressed();
    java.util.List var33 = org.jsecurity.util.CollectionUtils.asList((java.lang.Object[])var32);
    org.jsecurity.authc.UsernamePasswordToken var34 = new org.jsecurity.authc.UsernamePasswordToken();
    java.lang.String var35 = var34.getUsername();
    java.net.InetAddress var36 = var34.getInetAddress();
    org.jsecurity.authc.AuthenticationInfo var37 = var29.beforeAllAttempts((java.util.Collection)var33, (org.jsecurity.authc.AuthenticationToken)var34);
    var13.setModularAuthenticationStrategy((org.jsecurity.authc.pam.ModularAuthenticationStrategy)var29);
    org.jsecurity.authc.SimpleAccount var39 = new org.jsecurity.authc.SimpleAccount((org.jsecurity.subject.PrincipalCollection)var8, (java.lang.Object)var13);
    org.jsecurity.session.StoppedSessionException var40 = new org.jsecurity.session.StoppedSessionException("org.jsecurity.authz.UnauthorizedException: org.jsecurity.session.ExpiredSessionException: ", (java.lang.Throwable)var2, (java.io.Serializable)var39);
    org.jsecurity.cache.HashtableCache var42 = new org.jsecurity.cache.HashtableCache("\u0000\u0000\u0000");
    org.jsecurity.session.mgt.SimpleSession var43 = new org.jsecurity.session.mgt.SimpleSession();
    var43.touch();
    org.jsecurity.authz.UnauthenticatedException var47 = new org.jsecurity.authz.UnauthenticatedException();
    org.jsecurity.config.UnresolveableReferenceException var48 = new org.jsecurity.config.UnresolveableReferenceException("", (java.lang.Throwable)var47);
    org.jsecurity.cache.CacheException var49 = new org.jsecurity.cache.CacheException("org.jsecurity.config.ConfigurationException: dd\uFFFD", (java.lang.Throwable)var47);
    java.lang.Object var50 = var43.removeAttribute((java.lang.Object)var49);
    org.jsecurity.mgt.DefaultSecurityManager var51 = new org.jsecurity.mgt.DefaultSecurityManager();
    org.jsecurity.authc.pam.AllSuccessfulModularAuthenticationStrategy var52 = new org.jsecurity.authc.pam.AllSuccessfulModularAuthenticationStrategy();
    org.jsecurity.authc.pam.AllSuccessfulModularAuthenticationStrategy var53 = new org.jsecurity.authc.pam.AllSuccessfulModularAuthenticationStrategy();
    char[] var55 = new char[] { };
    org.jsecurity.authc.UsernamePasswordToken var57 = new org.jsecurity.authc.UsernamePasswordToken("hi!", var55, true);
    org.jsecurity.authc.SimpleAccount var58 = new org.jsecurity.authc.SimpleAccount();
    var58.setCredentialsExpired(false);
    boolean var61 = var58.isLocked();
    org.jsecurity.authc.AuthenticationInfo var62 = var53.afterAllAttempts((org.jsecurity.authc.AuthenticationToken)var57, (org.jsecurity.authc.AuthenticationInfo)var58);
    char[] var66 = new char[] { '4', '#'};
    org.jsecurity.authc.UsernamePasswordToken var67 = new org.jsecurity.authc.UsernamePasswordToken("\u0000\u0000", var66);
    org.jsecurity.authc.SimpleAccount var68 = new org.jsecurity.authc.SimpleAccount();
    var68.setCredentialsExpired(false);
    var68.setCredentialsExpired(false);
    boolean var73 = var68.isCredentialsExpired();
    org.jsecurity.authc.AuthenticationInfo var74 = var53.afterAllAttempts((org.jsecurity.authc.AuthenticationToken)var67, (org.jsecurity.authc.AuthenticationInfo)var68);
    org.jsecurity.authz.UnauthenticatedException var78 = new org.jsecurity.authz.UnauthenticatedException();
    org.jsecurity.config.UnresolveableReferenceException var79 = new org.jsecurity.config.UnresolveableReferenceException("", (java.lang.Throwable)var78);
    org.jsecurity.cache.CacheException var80 = new org.jsecurity.cache.CacheException("org.jsecurity.config.ConfigurationException: dd\uFFFD", (java.lang.Throwable)var78);
    org.jsecurity.authc.SimpleAuthenticationInfo var82 = new org.jsecurity.authc.SimpleAuthenticationInfo((java.lang.Object)"org.jsecurity.config.ConfigurationException: dd\uFFFD", (java.lang.Object)var80, "a2b823b1e72eae2b727289df8a00a89df8a0bab6ad8a89c4c5c7a9b62a270000");
    org.jsecurity.subject.PrincipalCollection var83 = var82.getPrincipals();
    org.jsecurity.authc.AuthenticationInfo var84 = var52.afterAllAttempts((org.jsecurity.authc.AuthenticationToken)var67, (org.jsecurity.authc.AuthenticationInfo)var82);
    var51.setModularAuthenticationStrategy((org.jsecurity.authc.pam.ModularAuthenticationStrategy)var52);
    org.jsecurity.subject.RememberMeManager var86 = var51.getRememberMeManager();
    org.jsecurity.authc.pam.ModularRealmAuthenticator var87 = new org.jsecurity.authc.pam.ModularRealmAuthenticator();
    var51.setAuthenticator((org.jsecurity.authc.Authenticator)var87);
    var42.put((java.lang.Object)var43, (java.lang.Object)var87);
    java.util.Set var90 = var42.keys();
    var39.addObjectPermissions((java.util.Collection)var90);
    boolean var92 = var39.isLocked();
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var10);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var11);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var12);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var20);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var21);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var22);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var32);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var33);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var35);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var36);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var37);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var50);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var55);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var61 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var62);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var66);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var73 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var74);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var83);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var84);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var86);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var90);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var92 == false);

  }

  public void test444() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest5.test444");


    org.jsecurity.crypto.hash.Sha512Hash var1 = org.jsecurity.crypto.hash.Sha512Hash.fromBase64String("org.jsecurity.config.ConfigurationException: dd\uFFFD");
    byte[] var2 = var1.getBytes();
    byte[] var3 = org.jsecurity.codec.Base64.encodeChunked(var2);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var1);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var2);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var3);

  }

  public void test445() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest5.test445");


    org.jsecurity.authc.pam.UnsupportedTokenException var1 = new org.jsecurity.authc.pam.UnsupportedTokenException();
    org.jsecurity.authc.UnknownAccountException var2 = new org.jsecurity.authc.UnknownAccountException((java.lang.Throwable)var1);
    org.jsecurity.session.SessionException var3 = new org.jsecurity.session.SessionException("org.jsecurity.realm.text.PropertiesRealm_772", (java.lang.Throwable)var2);
    org.jsecurity.authz.HostUnauthorizedException var4 = new org.jsecurity.authz.HostUnauthorizedException((java.lang.Throwable)var3);

  }

  public void test446() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest5.test446");


    org.jsecurity.realm.activedirectory.ActiveDirectoryRealm var0 = new org.jsecurity.realm.activedirectory.ActiveDirectoryRealm();
    org.jsecurity.authc.credential.Sha256CredentialsMatcher var1 = new org.jsecurity.authc.credential.Sha256CredentialsMatcher();
    var0.setCredentialsMatcher((org.jsecurity.authc.credential.CredentialsMatcher)var1);
    java.lang.String var3 = var0.getAuthorizationCacheName();
    var0.setPrincipalSuffix("org.jsecurity.config.ConfigurationException: dd\uFFFD");
    org.jsecurity.realm.text.TextConfigurationRealm var6 = new org.jsecurity.realm.text.TextConfigurationRealm();
    java.io.InputStream var8 = org.jsecurity.util.ClassUtils.getResourceAsStream("");
    java.lang.Object[] var9 = new java.lang.Object[] { var8};
    java.util.List var10 = org.jsecurity.util.CollectionUtils.asList(var9);
    org.jsecurity.authc.pam.ModularRealmAuthenticator var11 = new org.jsecurity.authc.pam.ModularRealmAuthenticator(var10);
    org.jsecurity.subject.SimplePrincipalCollection var13 = new org.jsecurity.subject.SimplePrincipalCollection((java.util.Collection)var10, "org.jsecurity.authz.UnauthorizedException: org.jsecurity.session.ExpiredSessionException: ");
    org.jsecurity.session.UnknownSessionException var18 = new org.jsecurity.session.UnknownSessionException("dd\uFFFD", (java.io.Serializable)100.0f);
    org.jsecurity.session.SessionException var20 = new org.jsecurity.session.SessionException("dd\uFFFD", (java.lang.Throwable)var18, (java.io.Serializable)0);
    org.jsecurity.session.SessionException var21 = new org.jsecurity.session.SessionException("dd\uFFFD", (java.lang.Throwable)var18);
    var13.add((java.lang.Object)var21, "org.jsecurity.config.ConfigurationException: dd\uFFFD");
    var6.onLogout((org.jsecurity.subject.PrincipalCollection)var13);
    var0.onLogout((org.jsecurity.subject.PrincipalCollection)var13);
    org.jsecurity.codec.CodecException var28 = new org.jsecurity.codec.CodecException("dd\uFFFD");
    org.jsecurity.authc.ConcurrentAccessException var29 = new org.jsecurity.authc.ConcurrentAccessException("org.jsecurity.authz.UnauthorizedException: org.jsecurity.session.ExpiredSessionException: ", (java.lang.Throwable)var28);
    org.jsecurity.subject.SimplePrincipalCollection var31 = new org.jsecurity.subject.SimplePrincipalCollection((java.lang.Object)var28, "");
    org.jsecurity.authc.pam.FirstSuccessfulAuthenticationStrategy var32 = new org.jsecurity.authc.pam.FirstSuccessfulAuthenticationStrategy();
    org.jsecurity.authz.UnauthorizedException var34 = new org.jsecurity.authz.UnauthorizedException("org.jsecurity.config.ConfigurationException: dd\uFFFD");
    java.lang.Throwable[] var35 = var34.getSuppressed();
    java.util.List var36 = org.jsecurity.util.CollectionUtils.asList((java.lang.Object[])var35);
    org.jsecurity.authc.UsernamePasswordToken var37 = new org.jsecurity.authc.UsernamePasswordToken();
    java.lang.String var38 = var37.getUsername();
    java.net.InetAddress var39 = var37.getInetAddress();
    org.jsecurity.authc.AuthenticationInfo var40 = var32.beforeAllAttempts((java.util.Collection)var36, (org.jsecurity.authc.AuthenticationToken)var37);
    org.jsecurity.session.UnknownSessionException var45 = new org.jsecurity.session.UnknownSessionException("dd\uFFFD", (java.io.Serializable)100.0f);
    org.jsecurity.subject.SubjectException var46 = new org.jsecurity.subject.SubjectException("dd\uFFFD", (java.lang.Throwable)var45);
    org.jsecurity.io.SerializationException var47 = new org.jsecurity.io.SerializationException("", (java.lang.Throwable)var46);
    java.lang.Throwable[] var48 = var46.getSuppressed();
    java.util.Set var49 = org.jsecurity.util.CollectionUtils.asSet((java.lang.Object[])var48);
    org.jsecurity.authc.SimpleAccount var50 = new org.jsecurity.authc.SimpleAccount((org.jsecurity.subject.PrincipalCollection)var31, (java.lang.Object)var36, var49);
    org.jsecurity.authz.SimpleAuthorizingAccount var51 = new org.jsecurity.authz.SimpleAuthorizingAccount((org.jsecurity.subject.PrincipalCollection)var13, (java.lang.Object)var50);
    org.jsecurity.mgt.DefaultSecurityManager var53 = new org.jsecurity.mgt.DefaultSecurityManager();
    java.io.InputStream var55 = org.jsecurity.util.ClassUtils.getResourceAsStream("");
    java.lang.Object[] var56 = new java.lang.Object[] { var55};
    java.util.List var57 = org.jsecurity.util.CollectionUtils.asList(var56);
    org.jsecurity.authc.pam.ModularRealmAuthenticator var58 = new org.jsecurity.authc.pam.ModularRealmAuthenticator(var57);
    org.jsecurity.authc.pam.AllSuccessfulModularAuthenticationStrategy var59 = new org.jsecurity.authc.pam.AllSuccessfulModularAuthenticationStrategy();
    var58.setModularAuthenticationStrategy((org.jsecurity.authc.pam.ModularAuthenticationStrategy)var59);
    org.jsecurity.authz.SimpleAuthorizationInfo var61 = new org.jsecurity.authz.SimpleAuthorizationInfo();
    var61.addStringPermission("hi!");
    java.io.InputStream var65 = org.jsecurity.util.ClassUtils.getResourceAsStream("");
    java.lang.Object[] var66 = new java.lang.Object[] { var65};
    java.util.List var67 = org.jsecurity.util.CollectionUtils.asList(var66);
    var61.addRoles((java.util.Collection)var67);
    var58.setAuthenticationListeners((java.util.Collection)var67);
    var53.setSessionListeners((java.util.Collection)var67);
    org.jsecurity.subject.Subject var71 = var53.getSubject();
    org.jsecurity.authz.permission.WildcardPermissionResolver var72 = new org.jsecurity.authz.permission.WildcardPermissionResolver();
    var53.setPermissionResolver((org.jsecurity.authz.permission.PermissionResolver)var72);
    java.util.Set var74 = org.jsecurity.util.PermissionUtils.resolveDelimitedPermissions("9370bad8-7774-4f3f-9431-c39c9f6aa37d", (org.jsecurity.authz.permission.PermissionResolver)var72);
    var51.setStringPermissions(var74);
    org.jsecurity.crypto.hash.Sha1Hash var77 = org.jsecurity.crypto.hash.Sha1Hash.fromBase64String("NfxhYN7ItBfRAmDBmprtU73ghfEEPpcDJrHPkZ06wiY=");
    java.lang.String var78 = var77.toBase64();
    org.jsecurity.authc.SimpleAccount var80 = new org.jsecurity.authc.SimpleAccount((java.util.Collection)var74, (java.lang.Object)var77, "org.jsecurity.authc.UsernamePasswordToken - classpath:org/jsecurity/cache/ehcache/ehcache.xml, rememberMe=false");
    java.util.Collection var81 = var80.getRoles();
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var3);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var8);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var9);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var10);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var35);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var36);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var38);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var39);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var40);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var48);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var49);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var55);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var56);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var57);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var65);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var66);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var67);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var71);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var74);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var77);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var78 + "' != '" + "NfxhYN7ItBfRAmDBmprtU73ghfEEPpcDJrHPkZ06wiY="+ "'", var78.equals("NfxhYN7ItBfRAmDBmprtU73ghfEEPpcDJrHPkZ06wiY="));
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var81);

  }

  public void test447() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest5.test447");


    org.jsecurity.authc.pam.FirstSuccessfulAuthenticationStrategy var0 = new org.jsecurity.authc.pam.FirstSuccessfulAuthenticationStrategy();
    org.jsecurity.authz.UnauthorizedException var2 = new org.jsecurity.authz.UnauthorizedException("org.jsecurity.config.ConfigurationException: dd\uFFFD");
    java.lang.Throwable[] var3 = var2.getSuppressed();
    java.util.List var4 = org.jsecurity.util.CollectionUtils.asList((java.lang.Object[])var3);
    org.jsecurity.authc.UsernamePasswordToken var5 = new org.jsecurity.authc.UsernamePasswordToken();
    java.lang.String var6 = var5.getUsername();
    java.net.InetAddress var7 = var5.getInetAddress();
    org.jsecurity.authc.AuthenticationInfo var8 = var0.beforeAllAttempts((java.util.Collection)var4, (org.jsecurity.authc.AuthenticationToken)var5);
    org.jsecurity.codec.CodecException var11 = new org.jsecurity.codec.CodecException("dd\uFFFD");
    org.jsecurity.authc.ConcurrentAccessException var12 = new org.jsecurity.authc.ConcurrentAccessException("org.jsecurity.authz.UnauthorizedException: org.jsecurity.session.ExpiredSessionException: ", (java.lang.Throwable)var11);
    org.jsecurity.subject.SimplePrincipalCollection var14 = new org.jsecurity.subject.SimplePrincipalCollection((java.lang.Object)var11, "");
    org.jsecurity.authc.pam.FirstSuccessfulAuthenticationStrategy var15 = new org.jsecurity.authc.pam.FirstSuccessfulAuthenticationStrategy();
    org.jsecurity.authz.UnauthorizedException var17 = new org.jsecurity.authz.UnauthorizedException("org.jsecurity.config.ConfigurationException: dd\uFFFD");
    java.lang.Throwable[] var18 = var17.getSuppressed();
    java.util.List var19 = org.jsecurity.util.CollectionUtils.asList((java.lang.Object[])var18);
    org.jsecurity.authc.UsernamePasswordToken var20 = new org.jsecurity.authc.UsernamePasswordToken();
    java.lang.String var21 = var20.getUsername();
    java.net.InetAddress var22 = var20.getInetAddress();
    org.jsecurity.authc.AuthenticationInfo var23 = var15.beforeAllAttempts((java.util.Collection)var19, (org.jsecurity.authc.AuthenticationToken)var20);
    org.jsecurity.session.UnknownSessionException var28 = new org.jsecurity.session.UnknownSessionException("dd\uFFFD", (java.io.Serializable)100.0f);
    org.jsecurity.subject.SubjectException var29 = new org.jsecurity.subject.SubjectException("dd\uFFFD", (java.lang.Throwable)var28);
    org.jsecurity.io.SerializationException var30 = new org.jsecurity.io.SerializationException("", (java.lang.Throwable)var29);
    java.lang.Throwable[] var31 = var29.getSuppressed();
    java.util.Set var32 = org.jsecurity.util.CollectionUtils.asSet((java.lang.Object[])var31);
    org.jsecurity.authc.SimpleAccount var33 = new org.jsecurity.authc.SimpleAccount((org.jsecurity.subject.PrincipalCollection)var14, (java.lang.Object)var19, var32);
    java.util.Collection var34 = var33.getStringPermissions();
    org.jsecurity.codec.CodecException var37 = new org.jsecurity.codec.CodecException("dd\uFFFD");
    org.jsecurity.authc.ConcurrentAccessException var38 = new org.jsecurity.authc.ConcurrentAccessException("org.jsecurity.authz.UnauthorizedException: org.jsecurity.session.ExpiredSessionException: ", (java.lang.Throwable)var37);
    org.jsecurity.subject.SimplePrincipalCollection var40 = new org.jsecurity.subject.SimplePrincipalCollection((java.lang.Object)var37, "");
    java.io.InputStream var42 = org.jsecurity.util.ClassUtils.getResourceAsStream("");
    java.lang.Object[] var43 = new java.lang.Object[] { var42};
    java.util.List var44 = org.jsecurity.util.CollectionUtils.asList(var43);
    org.jsecurity.authc.pam.ModularRealmAuthenticator var45 = new org.jsecurity.authc.pam.ModularRealmAuthenticator(var44);
    var40.addAll((java.util.Collection)var44, "\u0000\u0000");
    org.jsecurity.authz.UnauthorizedException var49 = new org.jsecurity.authz.UnauthorizedException();
    org.jsecurity.session.SessionException var51 = new org.jsecurity.session.SessionException("", (java.lang.Throwable)var49, (java.io.Serializable)"org.jsecurity.config.ConfigurationException: dd\uFFFD");
    org.jsecurity.crypto.hash.Sha1Hash var52 = new org.jsecurity.crypto.hash.Sha1Hash((java.lang.Object)"");
    org.jsecurity.session.UnknownSessionException var57 = new org.jsecurity.session.UnknownSessionException("dd\uFFFD", (java.io.Serializable)100.0f);
    org.jsecurity.subject.SubjectException var58 = new org.jsecurity.subject.SubjectException("dd\uFFFD", (java.lang.Throwable)var57);
    org.jsecurity.io.SerializationException var59 = new org.jsecurity.io.SerializationException("", (java.lang.Throwable)var58);
    java.lang.Throwable[] var60 = var58.getSuppressed();
    java.util.Set var61 = org.jsecurity.util.CollectionUtils.asSet((java.lang.Object[])var60);
    org.jsecurity.authz.SimpleAuthorizationInfo var63 = new org.jsecurity.authz.SimpleAuthorizationInfo();
    org.jsecurity.session.UnknownSessionException var68 = new org.jsecurity.session.UnknownSessionException("dd\uFFFD", (java.io.Serializable)100.0f);
    org.jsecurity.subject.SubjectException var69 = new org.jsecurity.subject.SubjectException("dd\uFFFD", (java.lang.Throwable)var68);
    org.jsecurity.io.SerializationException var70 = new org.jsecurity.io.SerializationException("", (java.lang.Throwable)var69);
    java.lang.Throwable[] var71 = var69.getSuppressed();
    java.util.Set var72 = org.jsecurity.util.CollectionUtils.asSet((java.lang.Object[])var71);
    var63.setStringPermissions(var72);
    java.util.Set var74 = var63.getRoles();
    org.jsecurity.authz.SimpleAuthorizationInfo var75 = new org.jsecurity.authz.SimpleAuthorizationInfo();
    var75.addRole("a2b823b1e72eae2b727289df8a00a89df8a0bab6ad8a89c4c5c7a9b62a270000");
    org.jsecurity.session.UnknownSessionException var82 = new org.jsecurity.session.UnknownSessionException("dd\uFFFD", (java.io.Serializable)100.0f);
    org.jsecurity.subject.SubjectException var83 = new org.jsecurity.subject.SubjectException("dd\uFFFD", (java.lang.Throwable)var82);
    org.jsecurity.io.SerializationException var84 = new org.jsecurity.io.SerializationException("", (java.lang.Throwable)var83);
    java.lang.Throwable[] var85 = var83.getSuppressed();
    java.util.Set var86 = org.jsecurity.util.CollectionUtils.asSet((java.lang.Object[])var85);
    var75.addRoles((java.util.Collection)var86);
    var63.setRoles(var86);
    org.jsecurity.authz.SimpleRole var89 = new org.jsecurity.authz.SimpleRole("org.jsecurity.authz.UnauthorizedException: org.jsecurity.session.ExpiredSessionException: ", var86);
    org.jsecurity.authc.SimpleAccount var90 = new org.jsecurity.authc.SimpleAccount((org.jsecurity.subject.PrincipalCollection)var40, (java.lang.Object)"", var61, var86);
    var33.setStringPermissions(var61);
    org.jsecurity.authc.UsernamePasswordToken var92 = new org.jsecurity.authc.UsernamePasswordToken();
    java.lang.String var93 = var92.getUsername();
    java.lang.Object var94 = var92.getPrincipal();
    var92.setUsername("hi!");
    java.lang.Object var97 = var92.getPrincipal();
    java.lang.String var98 = var92.toString();
    org.jsecurity.authc.AuthenticationInfo var99 = var0.beforeAllAttempts((java.util.Collection)var61, (org.jsecurity.authc.AuthenticationToken)var92);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var3);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var4);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var6);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var7);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var8);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var18);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var19);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var21);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var22);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var23);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var31);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var32);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var34);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var42);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var43);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var44);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var60);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var61);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var71);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var72);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var74);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var85);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var86);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var93);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var94);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var97 + "' != '" + "hi!"+ "'", var97.equals("hi!"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var98 + "' != '" + "org.jsecurity.authc.UsernamePasswordToken - hi!, rememberMe=false"+ "'", var98.equals("org.jsecurity.authc.UsernamePasswordToken - hi!, rememberMe=false"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var99);

  }

  public void test448() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest5.test448");


    org.jsecurity.crypto.hash.Md2Hash var2 = org.jsecurity.crypto.hash.Md2Hash.fromBase64String("a2b823b1e72eae2b727289df8a00a89df8a0bab6ad8a89c4c5c7a9b62a270000");
    org.jsecurity.authc.credential.Md2CredentialsMatcher var3 = new org.jsecurity.authc.credential.Md2CredentialsMatcher();
    org.jsecurity.authz.SimpleAuthorizingAccount var5 = new org.jsecurity.authz.SimpleAuthorizingAccount((java.lang.Object)"a2b823b1e72eae2b727289df8a00a89df8a0bab6ad8a89c4c5c7a9b62a270000", (java.lang.Object)var3, "");
    var5.addStringPermission("hi!");
    org.jsecurity.authz.SimpleAuthorizationInfo var8 = new org.jsecurity.authz.SimpleAuthorizationInfo();
    var8.addRole("a2b823b1e72eae2b727289df8a00a89df8a0bab6ad8a89c4c5c7a9b62a270000");
    org.jsecurity.session.UnknownSessionException var15 = new org.jsecurity.session.UnknownSessionException("dd\uFFFD", (java.io.Serializable)100.0f);
    org.jsecurity.subject.SubjectException var16 = new org.jsecurity.subject.SubjectException("dd\uFFFD", (java.lang.Throwable)var15);
    org.jsecurity.io.SerializationException var17 = new org.jsecurity.io.SerializationException("", (java.lang.Throwable)var16);
    java.lang.Throwable[] var18 = var16.getSuppressed();
    java.util.Set var19 = org.jsecurity.util.CollectionUtils.asSet((java.lang.Object[])var18);
    var8.addRoles((java.util.Collection)var19);
    boolean var21 = var5.isPermittedAll((java.util.Collection)var19);
    org.jsecurity.session.SessionException var22 = new org.jsecurity.session.SessionException((java.io.Serializable)var5);
    org.jsecurity.codec.CodecException var23 = new org.jsecurity.codec.CodecException("5c3cc6ba-00c8-4890-85cf-e7058c10f878", (java.lang.Throwable)var22);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var2);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var18);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var19);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var21 == true);

  }

  public void test449() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest5.test449");


    org.jsecurity.mgt.DefaultSecurityManager var0 = new org.jsecurity.mgt.DefaultSecurityManager();
    org.jsecurity.realm.text.TextConfigurationRealm var1 = new org.jsecurity.realm.text.TextConfigurationRealm();
    org.jsecurity.realm.text.TextConfigurationRealm var2 = new org.jsecurity.realm.text.TextConfigurationRealm();
    java.io.InputStream var4 = org.jsecurity.util.ClassUtils.getResourceAsStream("");
    java.lang.Object[] var5 = new java.lang.Object[] { var4};
    java.util.List var6 = org.jsecurity.util.CollectionUtils.asList(var5);
    org.jsecurity.authc.pam.ModularRealmAuthenticator var7 = new org.jsecurity.authc.pam.ModularRealmAuthenticator(var6);
    org.jsecurity.subject.SimplePrincipalCollection var9 = new org.jsecurity.subject.SimplePrincipalCollection((java.util.Collection)var6, "org.jsecurity.authz.UnauthorizedException: org.jsecurity.session.ExpiredSessionException: ");
    org.jsecurity.session.UnknownSessionException var14 = new org.jsecurity.session.UnknownSessionException("dd\uFFFD", (java.io.Serializable)100.0f);
    org.jsecurity.session.SessionException var16 = new org.jsecurity.session.SessionException("dd\uFFFD", (java.lang.Throwable)var14, (java.io.Serializable)0);
    org.jsecurity.session.SessionException var17 = new org.jsecurity.session.SessionException("dd\uFFFD", (java.lang.Throwable)var14);
    var9.add((java.lang.Object)var17, "org.jsecurity.config.ConfigurationException: dd\uFFFD");
    var2.onLogout((org.jsecurity.subject.PrincipalCollection)var9);
    java.util.Collection var22 = var9.fromRealm("\u0000\u0000\u0000");
    var1.onLogout((org.jsecurity.subject.PrincipalCollection)var9);
    java.util.Set var24 = var9.asSet();
    org.jsecurity.realm.activedirectory.ActiveDirectoryRealm var25 = new org.jsecurity.realm.activedirectory.ActiveDirectoryRealm();
    org.jsecurity.authc.credential.Sha256CredentialsMatcher var26 = new org.jsecurity.authc.credential.Sha256CredentialsMatcher();
    var25.setCredentialsMatcher((org.jsecurity.authc.credential.CredentialsMatcher)var26);
    java.lang.String var28 = var25.getAuthorizationCacheName();
    var25.setPrincipalSuffix("org.jsecurity.config.ConfigurationException: dd\uFFFD");
    org.jsecurity.realm.text.TextConfigurationRealm var31 = new org.jsecurity.realm.text.TextConfigurationRealm();
    java.io.InputStream var33 = org.jsecurity.util.ClassUtils.getResourceAsStream("");
    java.lang.Object[] var34 = new java.lang.Object[] { var33};
    java.util.List var35 = org.jsecurity.util.CollectionUtils.asList(var34);
    org.jsecurity.authc.pam.ModularRealmAuthenticator var36 = new org.jsecurity.authc.pam.ModularRealmAuthenticator(var35);
    org.jsecurity.subject.SimplePrincipalCollection var38 = new org.jsecurity.subject.SimplePrincipalCollection((java.util.Collection)var35, "org.jsecurity.authz.UnauthorizedException: org.jsecurity.session.ExpiredSessionException: ");
    org.jsecurity.session.UnknownSessionException var43 = new org.jsecurity.session.UnknownSessionException("dd\uFFFD", (java.io.Serializable)100.0f);
    org.jsecurity.session.SessionException var45 = new org.jsecurity.session.SessionException("dd\uFFFD", (java.lang.Throwable)var43, (java.io.Serializable)0);
    org.jsecurity.session.SessionException var46 = new org.jsecurity.session.SessionException("dd\uFFFD", (java.lang.Throwable)var43);
    var38.add((java.lang.Object)var46, "org.jsecurity.config.ConfigurationException: dd\uFFFD");
    var31.onLogout((org.jsecurity.subject.PrincipalCollection)var38);
    var25.onLogout((org.jsecurity.subject.PrincipalCollection)var38);
    org.jsecurity.realm.SimpleAccountRealm var52 = new org.jsecurity.realm.SimpleAccountRealm("hi!");
    java.lang.Class var53 = var52.getAuthenticationTokenClass();
    java.util.Collection var54 = org.jsecurity.util.CollectionUtils.emptyCollection(var53);
    java.util.Collection var55 = var38.byType(var53);
    org.jsecurity.authz.ModularRealmAuthorizer var56 = new org.jsecurity.authz.ModularRealmAuthorizer(var55);
    var0.checkRoles((org.jsecurity.subject.PrincipalCollection)var9, var55);
    org.jsecurity.crypto.BlowfishCipher var58 = new org.jsecurity.crypto.BlowfishCipher();
    java.security.Key var59 = var58.getKey();
    java.security.Key var60 = var58.getKey();
    java.security.Key var61 = var58.getKey();
    java.security.Key var62 = var58.getKey();
    java.security.Key var63 = var58.getKey();
    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      var0.setRememberMeCipher((org.jsecurity.crypto.Cipher)var58);
      fail("Expected exception of type java.lang.IllegalStateException");
    } catch (java.lang.IllegalStateException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var4);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var5);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var6);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var22);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var24);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var28);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var33);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var34);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var35);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var53);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var54);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var55);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var59);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var60);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var61);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var62);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var63);

  }

  public void test450() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest5.test450");


    org.jsecurity.mgt.DefaultSecurityManager var0 = new org.jsecurity.mgt.DefaultSecurityManager();
    java.io.InputStream var2 = org.jsecurity.util.ClassUtils.getResourceAsStream("");
    java.lang.Object[] var3 = new java.lang.Object[] { var2};
    java.util.List var4 = org.jsecurity.util.CollectionUtils.asList(var3);
    org.jsecurity.authc.pam.ModularRealmAuthenticator var5 = new org.jsecurity.authc.pam.ModularRealmAuthenticator(var4);
    org.jsecurity.authc.pam.AllSuccessfulModularAuthenticationStrategy var6 = new org.jsecurity.authc.pam.AllSuccessfulModularAuthenticationStrategy();
    var5.setModularAuthenticationStrategy((org.jsecurity.authc.pam.ModularAuthenticationStrategy)var6);
    org.jsecurity.authz.SimpleAuthorizationInfo var8 = new org.jsecurity.authz.SimpleAuthorizationInfo();
    var8.addStringPermission("hi!");
    java.io.InputStream var12 = org.jsecurity.util.ClassUtils.getResourceAsStream("");
    java.lang.Object[] var13 = new java.lang.Object[] { var12};
    java.util.List var14 = org.jsecurity.util.CollectionUtils.asList(var13);
    var8.addRoles((java.util.Collection)var14);
    var5.setAuthenticationListeners((java.util.Collection)var14);
    var0.setSessionListeners((java.util.Collection)var14);
    org.jsecurity.realm.text.TextConfigurationRealm var18 = new org.jsecurity.realm.text.TextConfigurationRealm();
    java.io.InputStream var20 = org.jsecurity.util.ClassUtils.getResourceAsStream("");
    java.lang.Object[] var21 = new java.lang.Object[] { var20};
    java.util.List var22 = org.jsecurity.util.CollectionUtils.asList(var21);
    org.jsecurity.authc.pam.ModularRealmAuthenticator var23 = new org.jsecurity.authc.pam.ModularRealmAuthenticator(var22);
    org.jsecurity.subject.SimplePrincipalCollection var25 = new org.jsecurity.subject.SimplePrincipalCollection((java.util.Collection)var22, "org.jsecurity.authz.UnauthorizedException: org.jsecurity.session.ExpiredSessionException: ");
    org.jsecurity.session.UnknownSessionException var30 = new org.jsecurity.session.UnknownSessionException("dd\uFFFD", (java.io.Serializable)100.0f);
    org.jsecurity.session.SessionException var32 = new org.jsecurity.session.SessionException("dd\uFFFD", (java.lang.Throwable)var30, (java.io.Serializable)0);
    org.jsecurity.session.SessionException var33 = new org.jsecurity.session.SessionException("dd\uFFFD", (java.lang.Throwable)var30);
    var25.add((java.lang.Object)var33, "org.jsecurity.config.ConfigurationException: dd\uFFFD");
    var18.onLogout((org.jsecurity.subject.PrincipalCollection)var25);
    org.jsecurity.authc.pam.FirstSuccessfulAuthenticationStrategy var37 = new org.jsecurity.authc.pam.FirstSuccessfulAuthenticationStrategy();
    org.jsecurity.authz.UnauthorizedException var39 = new org.jsecurity.authz.UnauthorizedException("org.jsecurity.config.ConfigurationException: dd\uFFFD");
    java.lang.Throwable[] var40 = var39.getSuppressed();
    java.util.List var41 = org.jsecurity.util.CollectionUtils.asList((java.lang.Object[])var40);
    org.jsecurity.authc.UsernamePasswordToken var42 = new org.jsecurity.authc.UsernamePasswordToken();
    java.lang.String var43 = var42.getUsername();
    java.net.InetAddress var44 = var42.getInetAddress();
    org.jsecurity.authc.AuthenticationInfo var45 = var37.beforeAllAttempts((java.util.Collection)var41, (org.jsecurity.authc.AuthenticationToken)var42);
    boolean[] var46 = var0.hasRoles((org.jsecurity.subject.PrincipalCollection)var25, var41);
    org.jsecurity.codec.CodecException var49 = new org.jsecurity.codec.CodecException("dd\uFFFD");
    org.jsecurity.authc.ConcurrentAccessException var50 = new org.jsecurity.authc.ConcurrentAccessException("org.jsecurity.authz.UnauthorizedException: org.jsecurity.session.ExpiredSessionException: ", (java.lang.Throwable)var49);
    org.jsecurity.subject.SimplePrincipalCollection var52 = new org.jsecurity.subject.SimplePrincipalCollection((java.lang.Object)var49, "");
    java.io.InputStream var54 = org.jsecurity.util.ClassUtils.getResourceAsStream("");
    java.lang.Object[] var55 = new java.lang.Object[] { var54};
    java.util.List var56 = org.jsecurity.util.CollectionUtils.asList(var55);
    org.jsecurity.authc.pam.ModularRealmAuthenticator var57 = new org.jsecurity.authc.pam.ModularRealmAuthenticator(var56);
    var52.addAll((java.util.Collection)var56, "\u0000\u0000");
    var0.setSessionListeners((java.util.Collection)var56);
    org.jsecurity.session.mgt.DefaultSessionManager var61 = new org.jsecurity.session.mgt.DefaultSessionManager();
    org.jsecurity.mgt.DefaultSecurityManager var62 = new org.jsecurity.mgt.DefaultSecurityManager();
    org.jsecurity.authz.permission.WildcardPermissionResolver var63 = new org.jsecurity.authz.permission.WildcardPermissionResolver();
    var62.setPermissionResolver((org.jsecurity.authz.permission.PermissionResolver)var63);
    org.jsecurity.cache.CacheManager var65 = var62.getCacheManager();
    var61.setCacheManager(var65);
    org.jsecurity.session.mgt.SessionValidationScheduler var67 = var61.getSessionValidationScheduler();
    var0.setSessionManager((org.jsecurity.session.mgt.SessionManager)var61);
    var61.destroy();
    org.jsecurity.cache.ehcache.EhCacheManager var70 = new org.jsecurity.cache.ehcache.EhCacheManager();
    var70.init();
    var61.setCacheManager((org.jsecurity.cache.CacheManager)var70);
    org.jsecurity.session.mgt.quartz.QuartzSessionValidationScheduler var73 = new org.jsecurity.session.mgt.quartz.QuartzSessionValidationScheduler((org.jsecurity.session.mgt.ValidatingSessionManager)var61);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var2);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var3);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var4);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var12);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var13);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var14);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var20);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var21);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var22);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var40);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var41);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var43);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var44);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var45);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var46);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var54);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var55);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var56);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var65);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var67);

  }

  public void test451() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest5.test451");


    java.io.InputStream var1 = org.jsecurity.util.ClassUtils.getResourceAsStream("");
    java.lang.Object[] var2 = new java.lang.Object[] { var1};
    java.util.List var3 = org.jsecurity.util.CollectionUtils.asList(var2);
    org.jsecurity.authc.pam.ModularRealmAuthenticator var4 = new org.jsecurity.authc.pam.ModularRealmAuthenticator(var3);
    java.io.InputStream var6 = org.jsecurity.util.ClassUtils.getResourceAsStream("");
    java.lang.Object[] var7 = new java.lang.Object[] { var6};
    java.util.List var8 = org.jsecurity.util.CollectionUtils.asList(var7);
    org.jsecurity.authc.pam.ModularRealmAuthenticator var9 = new org.jsecurity.authc.pam.ModularRealmAuthenticator(var8);
    var4.setRealms((java.util.Collection)var8);
    org.jsecurity.subject.SimplePrincipalCollection var12 = new org.jsecurity.subject.SimplePrincipalCollection((java.util.Collection)var8, "org.jsecurity.realm.SimpleAccountRealm-9-authorization");
    org.jsecurity.crypto.BlowfishCipher var13 = new org.jsecurity.crypto.BlowfishCipher();
    java.security.Key var14 = org.jsecurity.crypto.BlowfishCipher.generateNewKey();
    var13.setKey(var14);
    org.jsecurity.authz.SimpleAuthorizingAccount var16 = new org.jsecurity.authz.SimpleAuthorizingAccount((org.jsecurity.subject.PrincipalCollection)var12, (java.lang.Object)var14);
    org.jsecurity.authz.SimpleAuthorizationInfo var17 = new org.jsecurity.authz.SimpleAuthorizationInfo();
    java.util.Set var18 = var17.getStringPermissions();
    org.jsecurity.authz.SimpleAuthorizationInfo var20 = new org.jsecurity.authz.SimpleAuthorizationInfo();
    org.jsecurity.session.UnknownSessionException var25 = new org.jsecurity.session.UnknownSessionException("dd\uFFFD", (java.io.Serializable)100.0f);
    org.jsecurity.subject.SubjectException var26 = new org.jsecurity.subject.SubjectException("dd\uFFFD", (java.lang.Throwable)var25);
    org.jsecurity.io.SerializationException var27 = new org.jsecurity.io.SerializationException("", (java.lang.Throwable)var26);
    java.lang.Throwable[] var28 = var26.getSuppressed();
    java.util.Set var29 = org.jsecurity.util.CollectionUtils.asSet((java.lang.Object[])var28);
    var20.setStringPermissions(var29);
    java.util.Set var31 = var20.getRoles();
    org.jsecurity.authz.SimpleAuthorizationInfo var32 = new org.jsecurity.authz.SimpleAuthorizationInfo();
    var32.addRole("a2b823b1e72eae2b727289df8a00a89df8a0bab6ad8a89c4c5c7a9b62a270000");
    org.jsecurity.session.UnknownSessionException var39 = new org.jsecurity.session.UnknownSessionException("dd\uFFFD", (java.io.Serializable)100.0f);
    org.jsecurity.subject.SubjectException var40 = new org.jsecurity.subject.SubjectException("dd\uFFFD", (java.lang.Throwable)var39);
    org.jsecurity.io.SerializationException var41 = new org.jsecurity.io.SerializationException("", (java.lang.Throwable)var40);
    java.lang.Throwable[] var42 = var40.getSuppressed();
    java.util.Set var43 = org.jsecurity.util.CollectionUtils.asSet((java.lang.Object[])var42);
    var32.addRoles((java.util.Collection)var43);
    var20.setRoles(var43);
    org.jsecurity.authz.SimpleRole var46 = new org.jsecurity.authz.SimpleRole("org.jsecurity.authz.UnauthorizedException: org.jsecurity.session.ExpiredSessionException: ", var43);
    var17.addStringPermissions((java.util.Collection)var43);
    org.jsecurity.authz.SimpleAuthorizationInfo var48 = new org.jsecurity.authz.SimpleAuthorizationInfo();
    var48.addStringPermission("hi!");
    org.jsecurity.authz.SimpleAuthorizationInfo var52 = new org.jsecurity.authz.SimpleAuthorizationInfo();
    org.jsecurity.session.UnknownSessionException var57 = new org.jsecurity.session.UnknownSessionException("dd\uFFFD", (java.io.Serializable)100.0f);
    org.jsecurity.subject.SubjectException var58 = new org.jsecurity.subject.SubjectException("dd\uFFFD", (java.lang.Throwable)var57);
    org.jsecurity.io.SerializationException var59 = new org.jsecurity.io.SerializationException("", (java.lang.Throwable)var58);
    java.lang.Throwable[] var60 = var58.getSuppressed();
    java.util.Set var61 = org.jsecurity.util.CollectionUtils.asSet((java.lang.Object[])var60);
    var52.setStringPermissions(var61);
    org.jsecurity.authz.SimpleRole var63 = new org.jsecurity.authz.SimpleRole("\u0000\u0000", var61);
    var48.setRoles(var61);
    var17.setObjectPermissions(var61);
    var17.addRole("org.jsecurity.realm.text.TextConfigurationRealm_389");
    var17.addStringPermission("ecd29e3a-c551-4fce-8683-2e49992d04b8");
    java.util.Set var70 = var17.getObjectPermissions();
    var16.checkRoles((java.util.Collection)var70);
    org.jsecurity.authz.SimpleAuthorizationInfo var72 = new org.jsecurity.authz.SimpleAuthorizationInfo(var70);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var1);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var2);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var3);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var6);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var7);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var8);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var14);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var18);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var28);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var29);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var31);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var42);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var43);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var60);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var61);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var70);

  }

  public void test452() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest5.test452");


    org.jsecurity.session.mgt.eis.MemorySessionDAO var0 = new org.jsecurity.session.mgt.eis.MemorySessionDAO();
    org.jsecurity.cache.Cache var1 = var0.getActiveSessionsCache();
    var0.setActiveSessionsCacheName("dd\uFFFD");
    java.util.Collection var4 = var0.getActiveSessions();
    org.jsecurity.session.mgt.eis.MemorySessionDAO var5 = new org.jsecurity.session.mgt.eis.MemorySessionDAO();
    org.jsecurity.cache.Cache var6 = var5.getActiveSessionsCache();
    org.jsecurity.cache.CacheManager var7 = var5.getCacheManager();
    org.jsecurity.cache.HashtableCacheManager var8 = new org.jsecurity.cache.HashtableCacheManager();
    org.jsecurity.cache.Cache var10 = var8.getCache("\u0000\u0000");
    var5.setActiveSessionsCache(var10);
    java.io.InputStream var13 = org.jsecurity.util.ClassUtils.getResourceAsStream("");
    java.lang.Object[] var14 = new java.lang.Object[] { var13};
    java.util.List var15 = org.jsecurity.util.CollectionUtils.asList(var14);
    org.jsecurity.authc.pam.ModularRealmAuthenticator var16 = new org.jsecurity.authc.pam.ModularRealmAuthenticator(var15);
    org.jsecurity.authc.pam.AllSuccessfulModularAuthenticationStrategy var17 = new org.jsecurity.authc.pam.AllSuccessfulModularAuthenticationStrategy();
    var16.setModularAuthenticationStrategy((org.jsecurity.authc.pam.ModularAuthenticationStrategy)var17);
    org.jsecurity.authz.SimpleAuthorizationInfo var19 = new org.jsecurity.authz.SimpleAuthorizationInfo();
    var19.addStringPermission("hi!");
    java.io.InputStream var23 = org.jsecurity.util.ClassUtils.getResourceAsStream("");
    java.lang.Object[] var24 = new java.lang.Object[] { var23};
    java.util.List var25 = org.jsecurity.util.CollectionUtils.asList(var24);
    var19.addRoles((java.util.Collection)var25);
    var16.setAuthenticationListeners((java.util.Collection)var25);
    org.jsecurity.realm.activedirectory.ActiveDirectoryRealm var28 = new org.jsecurity.realm.activedirectory.ActiveDirectoryRealm();
    var28.setPrincipalSuffix("");
    var16.setRealm((org.jsecurity.realm.Realm)var28);
    org.jsecurity.cache.HashtableCacheManager var32 = new org.jsecurity.cache.HashtableCacheManager();
    org.jsecurity.cache.Cache var34 = var32.getCache("\u0000\u0000");
    var28.setAuthorizationCache(var34);
    var5.setActiveSessionsCache(var34);
    org.jsecurity.session.mgt.SimpleSession var37 = new org.jsecurity.session.mgt.SimpleSession();
    java.io.Serializable var38 = var5.create((org.jsecurity.session.Session)var37);
    org.jsecurity.session.mgt.SimpleSession var39 = new org.jsecurity.session.mgt.SimpleSession();
    var39.touch();
    var39.validate();
    org.jsecurity.session.mgt.SimpleSession var42 = new org.jsecurity.session.mgt.SimpleSession();
    var42.setTimeout((-1L));
    org.jsecurity.session.mgt.SimpleSession var45 = new org.jsecurity.session.mgt.SimpleSession();
    java.util.Date var46 = var45.getLastAccessTime();
    var42.setLastAccessTime(var46);
    org.jsecurity.session.mgt.SimpleSession var48 = new org.jsecurity.session.mgt.SimpleSession();
    java.util.Date var49 = var48.getLastAccessTime();
    var42.setStopTimestamp(var49);
    var39.setLastAccessTime(var49);
    var37.setLastAccessTime(var49);
    org.jsecurity.session.mgt.ImmutableProxiedSession var53 = new org.jsecurity.session.mgt.ImmutableProxiedSession((org.jsecurity.session.Session)var37);
    org.jsecurity.session.ProxiedSession var54 = new org.jsecurity.session.ProxiedSession((org.jsecurity.session.Session)var37);
    org.jsecurity.crypto.hash.Md2Hash var57 = org.jsecurity.crypto.hash.Md2Hash.fromBase64String("a2b823b1e72eae2b727289df8a00a89df8a0bab6ad8a89c4c5c7a9b62a270000");
    org.jsecurity.authc.credential.Md2CredentialsMatcher var58 = new org.jsecurity.authc.credential.Md2CredentialsMatcher();
    org.jsecurity.authz.SimpleAuthorizingAccount var60 = new org.jsecurity.authz.SimpleAuthorizingAccount((java.lang.Object)"a2b823b1e72eae2b727289df8a00a89df8a0bab6ad8a89c4c5c7a9b62a270000", (java.lang.Object)var58, "");
    org.jsecurity.session.SessionException var61 = new org.jsecurity.session.SessionException("org.jsecurity.realm.SimpleAccountRealm-9-authorization", (java.io.Serializable)var60);
    org.jsecurity.session.mgt.ExecutorServiceSessionValidationScheduler var62 = new org.jsecurity.session.mgt.ExecutorServiceSessionValidationScheduler();
    var54.setAttribute((java.lang.Object)var61, (java.lang.Object)var62);
    java.util.Date var64 = var54.getLastAccessTime();
    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      java.io.Serializable var65 = var0.create((org.jsecurity.session.Session)var54);
      fail("Expected exception of type java.lang.ClassCastException");
    } catch (java.lang.ClassCastException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var1);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var4);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var6);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var7);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var10);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var13);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var14);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var15);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var23);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var24);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var25);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var34);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var38 + "' != '" + "d856a825-a82d-420d-948f-1d7d1e07c45e"+ "'", var38.equals("d856a825-a82d-420d-948f-1d7d1e07c45e"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var46);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var49);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var57);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var64);

  }

  public void test453() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest5.test453");


    java.io.InputStream var1 = org.jsecurity.util.ClassUtils.getResourceAsStream("");
    java.lang.Object[] var2 = new java.lang.Object[] { var1};
    java.util.List var3 = org.jsecurity.util.CollectionUtils.asList(var2);
    java.util.Set var4 = org.jsecurity.util.CollectionUtils.asSet(var2);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var1);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var2);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var3);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var4);

  }

  public void test454() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest5.test454");


    org.jsecurity.session.mgt.eis.MemorySessionDAO var3 = new org.jsecurity.session.mgt.eis.MemorySessionDAO();
    org.jsecurity.cache.Cache var4 = var3.getActiveSessionsCache();
    org.jsecurity.cache.CacheManager var5 = var3.getCacheManager();
    org.jsecurity.cache.HashtableCacheManager var6 = new org.jsecurity.cache.HashtableCacheManager();
    org.jsecurity.cache.Cache var8 = var6.getCache("\u0000\u0000");
    var3.setActiveSessionsCache(var8);
    java.io.InputStream var11 = org.jsecurity.util.ClassUtils.getResourceAsStream("");
    java.lang.Object[] var12 = new java.lang.Object[] { var11};
    java.util.List var13 = org.jsecurity.util.CollectionUtils.asList(var12);
    org.jsecurity.authc.pam.ModularRealmAuthenticator var14 = new org.jsecurity.authc.pam.ModularRealmAuthenticator(var13);
    org.jsecurity.authc.pam.AllSuccessfulModularAuthenticationStrategy var15 = new org.jsecurity.authc.pam.AllSuccessfulModularAuthenticationStrategy();
    var14.setModularAuthenticationStrategy((org.jsecurity.authc.pam.ModularAuthenticationStrategy)var15);
    org.jsecurity.authz.SimpleAuthorizationInfo var17 = new org.jsecurity.authz.SimpleAuthorizationInfo();
    var17.addStringPermission("hi!");
    java.io.InputStream var21 = org.jsecurity.util.ClassUtils.getResourceAsStream("");
    java.lang.Object[] var22 = new java.lang.Object[] { var21};
    java.util.List var23 = org.jsecurity.util.CollectionUtils.asList(var22);
    var17.addRoles((java.util.Collection)var23);
    var14.setAuthenticationListeners((java.util.Collection)var23);
    org.jsecurity.realm.activedirectory.ActiveDirectoryRealm var26 = new org.jsecurity.realm.activedirectory.ActiveDirectoryRealm();
    var26.setPrincipalSuffix("");
    var14.setRealm((org.jsecurity.realm.Realm)var26);
    org.jsecurity.cache.HashtableCacheManager var30 = new org.jsecurity.cache.HashtableCacheManager();
    org.jsecurity.cache.Cache var32 = var30.getCache("\u0000\u0000");
    var26.setAuthorizationCache(var32);
    var3.setActiveSessionsCache(var32);
    org.jsecurity.session.mgt.SimpleSession var35 = new org.jsecurity.session.mgt.SimpleSession();
    java.io.Serializable var36 = var3.create((org.jsecurity.session.Session)var35);
    java.io.Serializable var37 = var35.getId();
    org.jsecurity.authc.credential.Md5CredentialsMatcher var38 = new org.jsecurity.authc.credential.Md5CredentialsMatcher();
    boolean var39 = var38.isHashSalted();
    boolean var40 = var38.isHashSalted();
    int var41 = var38.getHashIterations();
    java.lang.Object var42 = var35.removeAttribute((java.lang.Object)var38);
    boolean var43 = var35.isExpired();
    java.util.Date var44 = var35.getStartTimestamp();
    org.jsecurity.session.SessionException var45 = new org.jsecurity.session.SessionException((java.io.Serializable)var35);
    org.jsecurity.authc.UnknownAccountException var46 = new org.jsecurity.authc.UnknownAccountException("f3cec280-b0d4-4d1e-9ce8-a8b745fa003b", (java.lang.Throwable)var45);
    org.jsecurity.authz.AuthorizationException var47 = new org.jsecurity.authz.AuthorizationException((java.lang.Throwable)var46);
    org.jsecurity.authz.HostUnauthorizedException var48 = new org.jsecurity.authz.HostUnauthorizedException("4d3ad5aa-ac3f-4e82-99cd-6644fc7349ee", (java.lang.Throwable)var46);
    org.jsecurity.authc.DisabledAccountException var49 = new org.jsecurity.authc.DisabledAccountException("92ec7657-39a0-4fe8-843e-f3915140dc01", (java.lang.Throwable)var48);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var4);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var5);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var8);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var11);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var12);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var13);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var21);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var22);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var23);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var32);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var36 + "' != '" + "b8e654ef-0c0e-42ef-bab3-3620dabe0d0c"+ "'", var36.equals("b8e654ef-0c0e-42ef-bab3-3620dabe0d0c"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var37 + "' != '" + "b8e654ef-0c0e-42ef-bab3-3620dabe0d0c"+ "'", var37.equals("b8e654ef-0c0e-42ef-bab3-3620dabe0d0c"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var39 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var40 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var41 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var42);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var43 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var44);

  }

  public void test455() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest5.test455");


    org.jsecurity.session.mgt.eis.MemorySessionDAO var0 = new org.jsecurity.session.mgt.eis.MemorySessionDAO();
    org.jsecurity.cache.Cache var1 = var0.getActiveSessionsCache();
    org.jsecurity.cache.CacheManager var2 = var0.getCacheManager();
    org.jsecurity.cache.HashtableCacheManager var3 = new org.jsecurity.cache.HashtableCacheManager();
    org.jsecurity.cache.Cache var5 = var3.getCache("\u0000\u0000");
    var0.setActiveSessionsCache(var5);
    java.io.InputStream var8 = org.jsecurity.util.ClassUtils.getResourceAsStream("");
    java.lang.Object[] var9 = new java.lang.Object[] { var8};
    java.util.List var10 = org.jsecurity.util.CollectionUtils.asList(var9);
    org.jsecurity.authc.pam.ModularRealmAuthenticator var11 = new org.jsecurity.authc.pam.ModularRealmAuthenticator(var10);
    org.jsecurity.authc.pam.AllSuccessfulModularAuthenticationStrategy var12 = new org.jsecurity.authc.pam.AllSuccessfulModularAuthenticationStrategy();
    var11.setModularAuthenticationStrategy((org.jsecurity.authc.pam.ModularAuthenticationStrategy)var12);
    org.jsecurity.authz.SimpleAuthorizationInfo var14 = new org.jsecurity.authz.SimpleAuthorizationInfo();
    var14.addStringPermission("hi!");
    java.io.InputStream var18 = org.jsecurity.util.ClassUtils.getResourceAsStream("");
    java.lang.Object[] var19 = new java.lang.Object[] { var18};
    java.util.List var20 = org.jsecurity.util.CollectionUtils.asList(var19);
    var14.addRoles((java.util.Collection)var20);
    var11.setAuthenticationListeners((java.util.Collection)var20);
    org.jsecurity.realm.activedirectory.ActiveDirectoryRealm var23 = new org.jsecurity.realm.activedirectory.ActiveDirectoryRealm();
    var23.setPrincipalSuffix("");
    var11.setRealm((org.jsecurity.realm.Realm)var23);
    org.jsecurity.cache.HashtableCacheManager var27 = new org.jsecurity.cache.HashtableCacheManager();
    org.jsecurity.cache.Cache var29 = var27.getCache("\u0000\u0000");
    var23.setAuthorizationCache(var29);
    var0.setActiveSessionsCache(var29);
    org.jsecurity.session.mgt.SimpleSession var32 = new org.jsecurity.session.mgt.SimpleSession();
    java.io.Serializable var33 = var0.create((org.jsecurity.session.Session)var32);
    org.jsecurity.session.mgt.SimpleSession var34 = new org.jsecurity.session.mgt.SimpleSession();
    var34.touch();
    var34.validate();
    org.jsecurity.session.mgt.SimpleSession var37 = new org.jsecurity.session.mgt.SimpleSession();
    var37.setTimeout((-1L));
    org.jsecurity.session.mgt.SimpleSession var40 = new org.jsecurity.session.mgt.SimpleSession();
    java.util.Date var41 = var40.getLastAccessTime();
    var37.setLastAccessTime(var41);
    org.jsecurity.session.mgt.SimpleSession var43 = new org.jsecurity.session.mgt.SimpleSession();
    java.util.Date var44 = var43.getLastAccessTime();
    var37.setStopTimestamp(var44);
    var34.setLastAccessTime(var44);
    var32.setLastAccessTime(var44);
    org.jsecurity.session.mgt.ImmutableProxiedSession var48 = new org.jsecurity.session.mgt.ImmutableProxiedSession((org.jsecurity.session.Session)var32);
    org.jsecurity.session.ProxiedSession var49 = new org.jsecurity.session.ProxiedSession((org.jsecurity.session.Session)var32);
    org.jsecurity.session.ProxiedSession var50 = new org.jsecurity.session.ProxiedSession((org.jsecurity.session.Session)var49);
    org.jsecurity.realm.activedirectory.ActiveDirectoryRealm var52 = new org.jsecurity.realm.activedirectory.ActiveDirectoryRealm();
    org.jsecurity.authc.credential.Sha256CredentialsMatcher var53 = new org.jsecurity.authc.credential.Sha256CredentialsMatcher();
    var52.setCredentialsMatcher((org.jsecurity.authc.credential.CredentialsMatcher)var53);
    java.lang.String var55 = var52.getAuthorizationCacheName();
    var52.setUrl("hi!");
    org.jsecurity.realm.ldap.DefaultLdapContextFactory var58 = new org.jsecurity.realm.ldap.DefaultLdapContextFactory();
    var52.setLdapContextFactory((org.jsecurity.realm.ldap.LdapContextFactory)var58);
    var49.setAttribute((java.lang.Object)"57f108f5-de1f-46bc-a431-6c2563f95e22", (java.lang.Object)var52);
    java.net.InetAddress var61 = var49.getHostAddress();
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var1);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var2);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var5);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var8);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var9);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var10);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var18);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var19);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var20);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var29);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var33 + "' != '" + "de74753d-5858-4bf4-895a-379abad30b6d"+ "'", var33.equals("de74753d-5858-4bf4-895a-379abad30b6d"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var41);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var44);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var55);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var61);

  }

  public void test456() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest5.test456");


    org.jsecurity.session.mgt.eis.MemorySessionDAO var0 = new org.jsecurity.session.mgt.eis.MemorySessionDAO();
    org.jsecurity.cache.Cache var1 = var0.getActiveSessionsCache();
    org.jsecurity.cache.CacheManager var2 = var0.getCacheManager();
    org.jsecurity.cache.HashtableCacheManager var3 = new org.jsecurity.cache.HashtableCacheManager();
    org.jsecurity.cache.Cache var5 = var3.getCache("\u0000\u0000");
    var0.setActiveSessionsCache(var5);
    java.io.InputStream var8 = org.jsecurity.util.ClassUtils.getResourceAsStream("");
    java.lang.Object[] var9 = new java.lang.Object[] { var8};
    java.util.List var10 = org.jsecurity.util.CollectionUtils.asList(var9);
    org.jsecurity.authc.pam.ModularRealmAuthenticator var11 = new org.jsecurity.authc.pam.ModularRealmAuthenticator(var10);
    org.jsecurity.authc.pam.AllSuccessfulModularAuthenticationStrategy var12 = new org.jsecurity.authc.pam.AllSuccessfulModularAuthenticationStrategy();
    var11.setModularAuthenticationStrategy((org.jsecurity.authc.pam.ModularAuthenticationStrategy)var12);
    org.jsecurity.authz.SimpleAuthorizationInfo var14 = new org.jsecurity.authz.SimpleAuthorizationInfo();
    var14.addStringPermission("hi!");
    java.io.InputStream var18 = org.jsecurity.util.ClassUtils.getResourceAsStream("");
    java.lang.Object[] var19 = new java.lang.Object[] { var18};
    java.util.List var20 = org.jsecurity.util.CollectionUtils.asList(var19);
    var14.addRoles((java.util.Collection)var20);
    var11.setAuthenticationListeners((java.util.Collection)var20);
    org.jsecurity.realm.activedirectory.ActiveDirectoryRealm var23 = new org.jsecurity.realm.activedirectory.ActiveDirectoryRealm();
    var23.setPrincipalSuffix("");
    var11.setRealm((org.jsecurity.realm.Realm)var23);
    org.jsecurity.cache.HashtableCacheManager var27 = new org.jsecurity.cache.HashtableCacheManager();
    org.jsecurity.cache.Cache var29 = var27.getCache("\u0000\u0000");
    var23.setAuthorizationCache(var29);
    var0.setActiveSessionsCache(var29);
    org.jsecurity.session.mgt.SimpleSession var32 = new org.jsecurity.session.mgt.SimpleSession();
    java.io.Serializable var33 = var0.create((org.jsecurity.session.Session)var32);
    org.jsecurity.session.mgt.SimpleSession var34 = new org.jsecurity.session.mgt.SimpleSession();
    var34.touch();
    var34.validate();
    org.jsecurity.session.mgt.SimpleSession var37 = new org.jsecurity.session.mgt.SimpleSession();
    var37.setTimeout((-1L));
    org.jsecurity.session.mgt.SimpleSession var40 = new org.jsecurity.session.mgt.SimpleSession();
    java.util.Date var41 = var40.getLastAccessTime();
    var37.setLastAccessTime(var41);
    org.jsecurity.session.mgt.SimpleSession var43 = new org.jsecurity.session.mgt.SimpleSession();
    java.util.Date var44 = var43.getLastAccessTime();
    var37.setStopTimestamp(var44);
    var34.setLastAccessTime(var44);
    var32.setLastAccessTime(var44);
    org.jsecurity.session.mgt.ImmutableProxiedSession var48 = new org.jsecurity.session.mgt.ImmutableProxiedSession((org.jsecurity.session.Session)var32);
    java.util.Date var49 = var48.getStartTimestamp();
    java.io.Serializable var50 = var48.getId();
    java.util.Date var51 = var48.getStartTimestamp();
    java.util.Date var52 = var48.getLastAccessTime();
    long var53 = var48.getTimeout();
    java.util.Date var54 = var48.getStartTimestamp();
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var1);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var2);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var5);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var8);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var9);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var10);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var18);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var19);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var20);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var29);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var33 + "' != '" + "885fda6e-9dba-4444-95b1-0ecdf18b4020"+ "'", var33.equals("885fda6e-9dba-4444-95b1-0ecdf18b4020"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var41);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var44);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var49);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var50 + "' != '" + "885fda6e-9dba-4444-95b1-0ecdf18b4020"+ "'", var50.equals("885fda6e-9dba-4444-95b1-0ecdf18b4020"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var51);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var52);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var53 == 1800000L);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var54);

  }

  public void test457() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest5.test457");


    org.jsecurity.realm.activedirectory.ActiveDirectoryRealm var0 = new org.jsecurity.realm.activedirectory.ActiveDirectoryRealm();
    org.jsecurity.io.IniResource var1 = new org.jsecurity.io.IniResource();
    java.lang.String var2 = var1.getCharsetName();
    org.jsecurity.config.ReflectionBuilder var3 = new org.jsecurity.config.ReflectionBuilder();
    org.jsecurity.io.IniResource var4 = new org.jsecurity.io.IniResource();
    var4.setCharsetName("org.jsecurity.authz.UnauthorizedException: org.jsecurity.session.ExpiredSessionException: ");
    java.util.Map var7 = var4.getSections();
    java.util.Map var8 = var3.buildObjects(var7);
    var1.setSections(var8);
    var0.setGroupRolesMap(var8);
    org.jsecurity.mgt.DefaultSecurityManager var11 = new org.jsecurity.mgt.DefaultSecurityManager((org.jsecurity.realm.Realm)var0);
    org.jsecurity.realm.activedirectory.ActiveDirectoryRealm var12 = new org.jsecurity.realm.activedirectory.ActiveDirectoryRealm();
    org.jsecurity.authc.credential.Sha256CredentialsMatcher var13 = new org.jsecurity.authc.credential.Sha256CredentialsMatcher();
    var12.setCredentialsMatcher((org.jsecurity.authc.credential.CredentialsMatcher)var13);
    org.jsecurity.realm.activedirectory.ActiveDirectoryRealm var15 = new org.jsecurity.realm.activedirectory.ActiveDirectoryRealm();
    org.jsecurity.authc.credential.Sha256CredentialsMatcher var16 = new org.jsecurity.authc.credential.Sha256CredentialsMatcher();
    var15.setCredentialsMatcher((org.jsecurity.authc.credential.CredentialsMatcher)var16);
    java.lang.String var18 = var15.getAuthorizationCacheName();
    var15.setUrl("hi!");
    org.jsecurity.realm.ldap.DefaultLdapContextFactory var21 = new org.jsecurity.realm.ldap.DefaultLdapContextFactory();
    var15.setLdapContextFactory((org.jsecurity.realm.ldap.LdapContextFactory)var21);
    var21.setAuthentication("org.jsecurity.authz.UnauthorizedException: org.jsecurity.session.ExpiredSessionException: ");
    var12.setLdapContextFactory((org.jsecurity.realm.ldap.LdapContextFactory)var21);
    var21.setUsePooling(true);
    var0.setLdapContextFactory((org.jsecurity.realm.ldap.LdapContextFactory)var21);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var2);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var7);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var8);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var18);

  }

  public void test458() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest5.test458");


    org.jsecurity.session.UnknownSessionException var4 = new org.jsecurity.session.UnknownSessionException("dd\uFFFD", (java.io.Serializable)100.0f);
    org.jsecurity.subject.SubjectException var5 = new org.jsecurity.subject.SubjectException("dd\uFFFD", (java.lang.Throwable)var4);
    org.jsecurity.authc.CredentialsException var6 = new org.jsecurity.authc.CredentialsException("e8e5d499-33c0-418e-93f9-76a51372c414", (java.lang.Throwable)var5);
    org.jsecurity.session.UnknownSessionException var7 = new org.jsecurity.session.UnknownSessionException((java.lang.Throwable)var5);
    org.jsecurity.cache.CacheException var8 = new org.jsecurity.cache.CacheException((java.lang.Throwable)var5);

  }

  public void test459() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest5.test459");


    org.jsecurity.session.mgt.DefaultSessionManager var0 = new org.jsecurity.session.mgt.DefaultSessionManager();
    var0.setGlobalSessionTimeout(1);
    org.jsecurity.authz.UnauthorizedException var6 = new org.jsecurity.authz.UnauthorizedException("org.jsecurity.config.ConfigurationException: dd\uFFFD");
    java.lang.Throwable[] var7 = var6.getSuppressed();
    org.jsecurity.session.SessionException var8 = new org.jsecurity.session.SessionException((java.lang.Throwable)var6);
    org.jsecurity.session.SessionException var9 = new org.jsecurity.session.SessionException("org.jsecurity.realm.SimpleAccountRealm-9-authorization", (java.lang.Throwable)var6);
    org.jsecurity.session.StoppedSessionException var10 = new org.jsecurity.session.StoppedSessionException("ff1bb54d-80f9-4308-a260-ff3ddf1355e9", (java.lang.Throwable)var9);
    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      var0.validateSession((java.io.Serializable)"ff1bb54d-80f9-4308-a260-ff3ddf1355e9");
      fail("Expected exception of type org.jsecurity.session.UnknownSessionException");
    } catch (org.jsecurity.session.UnknownSessionException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var7);

  }

  public void test460() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest5.test460");


    org.jsecurity.mgt.DefaultSecurityManager var0 = new org.jsecurity.mgt.DefaultSecurityManager();
    org.jsecurity.authc.pam.AllSuccessfulModularAuthenticationStrategy var1 = new org.jsecurity.authc.pam.AllSuccessfulModularAuthenticationStrategy();
    org.jsecurity.authc.pam.AllSuccessfulModularAuthenticationStrategy var2 = new org.jsecurity.authc.pam.AllSuccessfulModularAuthenticationStrategy();
    char[] var4 = new char[] { };
    org.jsecurity.authc.UsernamePasswordToken var6 = new org.jsecurity.authc.UsernamePasswordToken("hi!", var4, true);
    org.jsecurity.authc.SimpleAccount var7 = new org.jsecurity.authc.SimpleAccount();
    var7.setCredentialsExpired(false);
    boolean var10 = var7.isLocked();
    org.jsecurity.authc.AuthenticationInfo var11 = var2.afterAllAttempts((org.jsecurity.authc.AuthenticationToken)var6, (org.jsecurity.authc.AuthenticationInfo)var7);
    char[] var15 = new char[] { '4', '#'};
    org.jsecurity.authc.UsernamePasswordToken var16 = new org.jsecurity.authc.UsernamePasswordToken("\u0000\u0000", var15);
    org.jsecurity.authc.SimpleAccount var17 = new org.jsecurity.authc.SimpleAccount();
    var17.setCredentialsExpired(false);
    var17.setCredentialsExpired(false);
    boolean var22 = var17.isCredentialsExpired();
    org.jsecurity.authc.AuthenticationInfo var23 = var2.afterAllAttempts((org.jsecurity.authc.AuthenticationToken)var16, (org.jsecurity.authc.AuthenticationInfo)var17);
    org.jsecurity.authz.UnauthenticatedException var27 = new org.jsecurity.authz.UnauthenticatedException();
    org.jsecurity.config.UnresolveableReferenceException var28 = new org.jsecurity.config.UnresolveableReferenceException("", (java.lang.Throwable)var27);
    org.jsecurity.cache.CacheException var29 = new org.jsecurity.cache.CacheException("org.jsecurity.config.ConfigurationException: dd\uFFFD", (java.lang.Throwable)var27);
    org.jsecurity.authc.SimpleAuthenticationInfo var31 = new org.jsecurity.authc.SimpleAuthenticationInfo((java.lang.Object)"org.jsecurity.config.ConfigurationException: dd\uFFFD", (java.lang.Object)var29, "a2b823b1e72eae2b727289df8a00a89df8a0bab6ad8a89c4c5c7a9b62a270000");
    org.jsecurity.subject.PrincipalCollection var32 = var31.getPrincipals();
    org.jsecurity.authc.AuthenticationInfo var33 = var1.afterAllAttempts((org.jsecurity.authc.AuthenticationToken)var16, (org.jsecurity.authc.AuthenticationInfo)var31);
    var0.setModularAuthenticationStrategy((org.jsecurity.authc.pam.ModularAuthenticationStrategy)var1);
    org.jsecurity.subject.RememberMeManager var35 = var0.getRememberMeManager();
    java.io.InputStream var37 = org.jsecurity.util.ClassUtils.getResourceAsStream("");
    java.lang.Object[] var38 = new java.lang.Object[] { var37};
    java.util.List var39 = org.jsecurity.util.CollectionUtils.asList(var38);
    org.jsecurity.authc.pam.ModularRealmAuthenticator var40 = new org.jsecurity.authc.pam.ModularRealmAuthenticator(var39);
    org.jsecurity.subject.SimplePrincipalCollection var42 = new org.jsecurity.subject.SimplePrincipalCollection((java.util.Collection)var39, "org.jsecurity.authz.UnauthorizedException: org.jsecurity.session.ExpiredSessionException: ");
    java.util.List var43 = var42.asList();
    org.jsecurity.authz.SimpleAuthorizationInfo var44 = new org.jsecurity.authz.SimpleAuthorizationInfo();
    var44.addRole("a2b823b1e72eae2b727289df8a00a89df8a0bab6ad8a89c4c5c7a9b62a270000");
    org.jsecurity.session.UnknownSessionException var51 = new org.jsecurity.session.UnknownSessionException("dd\uFFFD", (java.io.Serializable)100.0f);
    org.jsecurity.subject.SubjectException var52 = new org.jsecurity.subject.SubjectException("dd\uFFFD", (java.lang.Throwable)var51);
    org.jsecurity.io.SerializationException var53 = new org.jsecurity.io.SerializationException("", (java.lang.Throwable)var52);
    java.lang.Throwable[] var54 = var52.getSuppressed();
    java.util.Set var55 = org.jsecurity.util.CollectionUtils.asSet((java.lang.Object[])var54);
    var44.addRoles((java.util.Collection)var55);
    var0.checkRoles((org.jsecurity.subject.PrincipalCollection)var42, (java.util.Collection)var55);
    org.jsecurity.subject.Subject var58 = var0.getSubject();
    org.jsecurity.authc.UsernamePasswordToken var59 = new org.jsecurity.authc.UsernamePasswordToken();
    java.lang.String var60 = var59.getUsername();
    java.lang.Object var61 = var59.getPrincipal();
    var59.setUsername("hi!");
    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      org.jsecurity.authc.AuthenticationInfo var64 = var0.authenticate((org.jsecurity.authc.AuthenticationToken)var59);
      fail("Expected exception of type org.jsecurity.authc.AuthenticationException");
    } catch (org.jsecurity.authc.AuthenticationException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var4);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var10 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var11);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var15);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var22 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var23);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var32);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var33);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var35);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var37);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var38);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var39);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var43);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var54);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var55);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var58);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var60);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var61);

  }

  public void test461() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest5.test461");


    org.jsecurity.session.mgt.DefaultSessionManager var0 = new org.jsecurity.session.mgt.DefaultSessionManager();
    org.jsecurity.session.mgt.eis.MemorySessionDAO var1 = new org.jsecurity.session.mgt.eis.MemorySessionDAO();
    org.jsecurity.cache.Cache var2 = var1.getActiveSessionsCache();
    org.jsecurity.cache.CacheManager var3 = var1.getCacheManager();
    org.jsecurity.cache.HashtableCacheManager var4 = new org.jsecurity.cache.HashtableCacheManager();
    org.jsecurity.cache.Cache var6 = var4.getCache("\u0000\u0000");
    var1.setActiveSessionsCache(var6);
    java.io.InputStream var9 = org.jsecurity.util.ClassUtils.getResourceAsStream("");
    java.lang.Object[] var10 = new java.lang.Object[] { var9};
    java.util.List var11 = org.jsecurity.util.CollectionUtils.asList(var10);
    org.jsecurity.authc.pam.ModularRealmAuthenticator var12 = new org.jsecurity.authc.pam.ModularRealmAuthenticator(var11);
    org.jsecurity.authc.pam.AllSuccessfulModularAuthenticationStrategy var13 = new org.jsecurity.authc.pam.AllSuccessfulModularAuthenticationStrategy();
    var12.setModularAuthenticationStrategy((org.jsecurity.authc.pam.ModularAuthenticationStrategy)var13);
    org.jsecurity.authz.SimpleAuthorizationInfo var15 = new org.jsecurity.authz.SimpleAuthorizationInfo();
    var15.addStringPermission("hi!");
    java.io.InputStream var19 = org.jsecurity.util.ClassUtils.getResourceAsStream("");
    java.lang.Object[] var20 = new java.lang.Object[] { var19};
    java.util.List var21 = org.jsecurity.util.CollectionUtils.asList(var20);
    var15.addRoles((java.util.Collection)var21);
    var12.setAuthenticationListeners((java.util.Collection)var21);
    org.jsecurity.realm.activedirectory.ActiveDirectoryRealm var24 = new org.jsecurity.realm.activedirectory.ActiveDirectoryRealm();
    var24.setPrincipalSuffix("");
    var12.setRealm((org.jsecurity.realm.Realm)var24);
    org.jsecurity.cache.HashtableCacheManager var28 = new org.jsecurity.cache.HashtableCacheManager();
    org.jsecurity.cache.Cache var30 = var28.getCache("\u0000\u0000");
    var24.setAuthorizationCache(var30);
    var1.setActiveSessionsCache(var30);
    org.jsecurity.session.mgt.SimpleSession var33 = new org.jsecurity.session.mgt.SimpleSession();
    java.io.Serializable var34 = var1.create((org.jsecurity.session.Session)var33);
    var0.setSessionDAO((org.jsecurity.session.mgt.eis.SessionDAO)var1);
    long var36 = var0.getSessionValidationInterval();
    org.jsecurity.session.mgt.eis.MemorySessionDAO var37 = new org.jsecurity.session.mgt.eis.MemorySessionDAO();
    org.jsecurity.cache.Cache var38 = var37.getActiveSessionsCache();
    org.jsecurity.cache.CacheManager var39 = var37.getCacheManager();
    org.jsecurity.cache.HashtableCacheManager var40 = new org.jsecurity.cache.HashtableCacheManager();
    org.jsecurity.cache.Cache var42 = var40.getCache("\u0000\u0000");
    var37.setActiveSessionsCache(var42);
    java.io.InputStream var45 = org.jsecurity.util.ClassUtils.getResourceAsStream("");
    java.lang.Object[] var46 = new java.lang.Object[] { var45};
    java.util.List var47 = org.jsecurity.util.CollectionUtils.asList(var46);
    org.jsecurity.authc.pam.ModularRealmAuthenticator var48 = new org.jsecurity.authc.pam.ModularRealmAuthenticator(var47);
    org.jsecurity.authc.pam.AllSuccessfulModularAuthenticationStrategy var49 = new org.jsecurity.authc.pam.AllSuccessfulModularAuthenticationStrategy();
    var48.setModularAuthenticationStrategy((org.jsecurity.authc.pam.ModularAuthenticationStrategy)var49);
    org.jsecurity.authz.SimpleAuthorizationInfo var51 = new org.jsecurity.authz.SimpleAuthorizationInfo();
    var51.addStringPermission("hi!");
    java.io.InputStream var55 = org.jsecurity.util.ClassUtils.getResourceAsStream("");
    java.lang.Object[] var56 = new java.lang.Object[] { var55};
    java.util.List var57 = org.jsecurity.util.CollectionUtils.asList(var56);
    var51.addRoles((java.util.Collection)var57);
    var48.setAuthenticationListeners((java.util.Collection)var57);
    org.jsecurity.realm.activedirectory.ActiveDirectoryRealm var60 = new org.jsecurity.realm.activedirectory.ActiveDirectoryRealm();
    var60.setPrincipalSuffix("");
    var48.setRealm((org.jsecurity.realm.Realm)var60);
    org.jsecurity.cache.HashtableCacheManager var64 = new org.jsecurity.cache.HashtableCacheManager();
    org.jsecurity.cache.Cache var66 = var64.getCache("\u0000\u0000");
    var60.setAuthorizationCache(var66);
    var37.setActiveSessionsCache(var66);
    org.jsecurity.session.mgt.SimpleSession var69 = new org.jsecurity.session.mgt.SimpleSession();
    java.io.Serializable var70 = var37.create((org.jsecurity.session.Session)var69);
    org.jsecurity.cache.Cache var71 = var37.getActiveSessionsCache();
    var0.setSessionDAO((org.jsecurity.session.mgt.eis.SessionDAO)var37);
    org.jsecurity.session.mgt.SessionValidationScheduler var73 = var0.getSessionValidationScheduler();
    char[] var76 = new char[] { };
    org.jsecurity.authc.UsernamePasswordToken var78 = new org.jsecurity.authc.UsernamePasswordToken("hi!", var76, true);
    org.jsecurity.authc.UsernamePasswordToken var79 = new org.jsecurity.authc.UsernamePasswordToken("\u0000\u0000", var76);
    org.jsecurity.session.mgt.SimpleSession var80 = new org.jsecurity.session.mgt.SimpleSession();
    var80.setTimeout((-1L));
    org.jsecurity.session.mgt.SimpleSession var83 = new org.jsecurity.session.mgt.SimpleSession();
    java.util.Date var84 = var83.getLastAccessTime();
    var80.setLastAccessTime(var84);
    java.net.InetAddress var86 = var80.getHostAddress();
    var79.setInetAddress(var86);
    org.jsecurity.session.mgt.SimpleSession var88 = new org.jsecurity.session.mgt.SimpleSession(var86);
    org.jsecurity.session.mgt.SimpleSession var89 = new org.jsecurity.session.mgt.SimpleSession(var86);
    java.io.Serializable var90 = var0.start(var86);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var2);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var3);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var6);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var9);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var10);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var11);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var19);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var20);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var21);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var30);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var34 + "' != '" + "f4b8599c-fbb0-4aef-a414-9c2af50d9a69"+ "'", var34.equals("f4b8599c-fbb0-4aef-a414-9c2af50d9a69"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var36 == 3600000L);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var38);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var39);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var42);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var45);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var46);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var47);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var55);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var56);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var57);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var66);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var70 + "' != '" + "adb79161-cef5-49e9-bd54-996a669ad4e9"+ "'", var70.equals("adb79161-cef5-49e9-bd54-996a669ad4e9"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var71);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var73);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var76);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var84);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var86);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var90 + "' != '" + "a485effa-cd38-4fdc-94c9-df09d3b46d47"+ "'", var90.equals("a485effa-cd38-4fdc-94c9-df09d3b46d47"));

  }

  public void test462() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest5.test462");


    org.jsecurity.io.IniResource var1 = new org.jsecurity.io.IniResource();
    var1.setCharsetName("org.jsecurity.authz.UnauthorizedException: org.jsecurity.session.ExpiredSessionException: ");
    java.util.Map var4 = var1.getSections();
    java.util.Map var5 = var1.getSections();
    org.jsecurity.session.UnknownSessionException var6 = new org.jsecurity.session.UnknownSessionException("f9548f9e-497e-41ec-97ca-89ede08e20b0", (java.io.Serializable)var1);
    org.jsecurity.codec.CodecException var10 = new org.jsecurity.codec.CodecException("dd\uFFFD");
    org.jsecurity.authc.ConcurrentAccessException var11 = new org.jsecurity.authc.ConcurrentAccessException("org.jsecurity.authz.UnauthorizedException: org.jsecurity.session.ExpiredSessionException: ", (java.lang.Throwable)var10);
    org.jsecurity.authc.ConcurrentAccessException var12 = new org.jsecurity.authc.ConcurrentAccessException("020e4fd5-81c8-4cbc-9bbb-975c45ce39a3", (java.lang.Throwable)var10);
    org.jsecurity.authz.SimpleAuthorizingAccount var14 = new org.jsecurity.authz.SimpleAuthorizingAccount((java.lang.Object)var1, (java.lang.Object)var12, "org.jsecurity.authc.UsernamePasswordToken - hi!, rememberMe=false");
    java.lang.String var15 = var1.getCharsetName();
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var4);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var5);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var15 + "' != '" + "org.jsecurity.authz.UnauthorizedException: org.jsecurity.session.ExpiredSessionException: "+ "'", var15.equals("org.jsecurity.authz.UnauthorizedException: org.jsecurity.session.ExpiredSessionException: "));

  }

  public void test463() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest5.test463");


    org.jsecurity.authz.UnauthorizedException var3 = new org.jsecurity.authz.UnauthorizedException("org.jsecurity.config.ConfigurationException: dd\uFFFD");
    org.jsecurity.crypto.hash.Md2Hash var5 = org.jsecurity.crypto.hash.Md2Hash.fromBase64String("a2b823b1e72eae2b727289df8a00a89df8a0bab6ad8a89c4c5c7a9b62a270000");
    org.jsecurity.authc.credential.Md2CredentialsMatcher var6 = new org.jsecurity.authc.credential.Md2CredentialsMatcher();
    org.jsecurity.authz.SimpleAuthorizingAccount var8 = new org.jsecurity.authz.SimpleAuthorizingAccount((java.lang.Object)"a2b823b1e72eae2b727289df8a00a89df8a0bab6ad8a89c4c5c7a9b62a270000", (java.lang.Object)var6, "");
    org.jsecurity.session.UnknownSessionException var9 = new org.jsecurity.session.UnknownSessionException("org.jsecurity.config.ConfigurationException: dd\uFFFD", (java.lang.Throwable)var3, (java.io.Serializable)var8);
    org.jsecurity.authz.SimpleAuthorizationInfo var10 = new org.jsecurity.authz.SimpleAuthorizationInfo();
    org.jsecurity.session.UnknownSessionException var15 = new org.jsecurity.session.UnknownSessionException("dd\uFFFD", (java.io.Serializable)100.0f);
    org.jsecurity.subject.SubjectException var16 = new org.jsecurity.subject.SubjectException("dd\uFFFD", (java.lang.Throwable)var15);
    org.jsecurity.io.SerializationException var17 = new org.jsecurity.io.SerializationException("", (java.lang.Throwable)var16);
    java.lang.Throwable[] var18 = var16.getSuppressed();
    java.util.Set var19 = org.jsecurity.util.CollectionUtils.asSet((java.lang.Object[])var18);
    var10.setStringPermissions(var19);
    java.util.Set var21 = var10.getRoles();
    org.jsecurity.authz.SimpleAuthorizationInfo var22 = new org.jsecurity.authz.SimpleAuthorizationInfo();
    var22.addRole("a2b823b1e72eae2b727289df8a00a89df8a0bab6ad8a89c4c5c7a9b62a270000");
    org.jsecurity.session.UnknownSessionException var29 = new org.jsecurity.session.UnknownSessionException("dd\uFFFD", (java.io.Serializable)100.0f);
    org.jsecurity.subject.SubjectException var30 = new org.jsecurity.subject.SubjectException("dd\uFFFD", (java.lang.Throwable)var29);
    org.jsecurity.io.SerializationException var31 = new org.jsecurity.io.SerializationException("", (java.lang.Throwable)var30);
    java.lang.Throwable[] var32 = var30.getSuppressed();
    java.util.Set var33 = org.jsecurity.util.CollectionUtils.asSet((java.lang.Object[])var32);
    var22.addRoles((java.util.Collection)var33);
    var10.setRoles(var33);
    org.jsecurity.authz.SimpleAuthorizationInfo var36 = new org.jsecurity.authz.SimpleAuthorizationInfo();
    org.jsecurity.session.UnknownSessionException var41 = new org.jsecurity.session.UnknownSessionException("dd\uFFFD", (java.io.Serializable)100.0f);
    org.jsecurity.subject.SubjectException var42 = new org.jsecurity.subject.SubjectException("dd\uFFFD", (java.lang.Throwable)var41);
    org.jsecurity.io.SerializationException var43 = new org.jsecurity.io.SerializationException("", (java.lang.Throwable)var42);
    java.lang.Throwable[] var44 = var42.getSuppressed();
    java.util.Set var45 = org.jsecurity.util.CollectionUtils.asSet((java.lang.Object[])var44);
    var36.setStringPermissions(var45);
    java.util.Set var47 = var36.getRoles();
    org.jsecurity.authz.SimpleAuthorizationInfo var48 = new org.jsecurity.authz.SimpleAuthorizationInfo();
    var48.addRole("a2b823b1e72eae2b727289df8a00a89df8a0bab6ad8a89c4c5c7a9b62a270000");
    org.jsecurity.session.UnknownSessionException var55 = new org.jsecurity.session.UnknownSessionException("dd\uFFFD", (java.io.Serializable)100.0f);
    org.jsecurity.subject.SubjectException var56 = new org.jsecurity.subject.SubjectException("dd\uFFFD", (java.lang.Throwable)var55);
    org.jsecurity.io.SerializationException var57 = new org.jsecurity.io.SerializationException("", (java.lang.Throwable)var56);
    java.lang.Throwable[] var58 = var56.getSuppressed();
    java.util.Set var59 = org.jsecurity.util.CollectionUtils.asSet((java.lang.Object[])var58);
    var48.addRoles((java.util.Collection)var59);
    var36.setRoles(var59);
    var10.setRoles(var59);
    var8.setSimpleRoles(var59);
    org.jsecurity.crypto.hash.Md5Hash var65 = org.jsecurity.crypto.hash.Md5Hash.fromBase64String("org.jsecurity.authc.IncorrectCredentialsException: \u0000\u0000");
    byte[] var67 = org.jsecurity.codec.CodecSupport.toBytes("dd\uFFFD");
    var65.setBytes(var67);
    boolean var69 = var8.equals((java.lang.Object)var65);
    byte[] var70 = var65.getBytes();
    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      org.jsecurity.crypto.hash.Sha384Hash var71 = new org.jsecurity.crypto.hash.Sha384Hash((java.lang.Object)"f7b61ae8-4a38-47b6-912d-22bfe8ae3866", (java.lang.Object)var65);
      fail("Expected exception of type org.jsecurity.codec.CodecException");
    } catch (org.jsecurity.codec.CodecException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var5);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var18);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var19);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var21);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var32);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var33);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var44);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var45);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var47);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var58);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var59);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var65);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var67);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var69 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var70);

  }

  public void test464() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest5.test464");


    org.jsecurity.cache.HashtableCache var1 = new org.jsecurity.cache.HashtableCache("\u0000\u0000\u0000");
    org.jsecurity.session.mgt.SimpleSession var2 = new org.jsecurity.session.mgt.SimpleSession();
    var2.touch();
    org.jsecurity.authz.UnauthenticatedException var6 = new org.jsecurity.authz.UnauthenticatedException();
    org.jsecurity.config.UnresolveableReferenceException var7 = new org.jsecurity.config.UnresolveableReferenceException("", (java.lang.Throwable)var6);
    org.jsecurity.cache.CacheException var8 = new org.jsecurity.cache.CacheException("org.jsecurity.config.ConfigurationException: dd\uFFFD", (java.lang.Throwable)var6);
    java.lang.Object var9 = var2.removeAttribute((java.lang.Object)var8);
    org.jsecurity.mgt.DefaultSecurityManager var10 = new org.jsecurity.mgt.DefaultSecurityManager();
    org.jsecurity.authc.pam.AllSuccessfulModularAuthenticationStrategy var11 = new org.jsecurity.authc.pam.AllSuccessfulModularAuthenticationStrategy();
    org.jsecurity.authc.pam.AllSuccessfulModularAuthenticationStrategy var12 = new org.jsecurity.authc.pam.AllSuccessfulModularAuthenticationStrategy();
    char[] var14 = new char[] { };
    org.jsecurity.authc.UsernamePasswordToken var16 = new org.jsecurity.authc.UsernamePasswordToken("hi!", var14, true);
    org.jsecurity.authc.SimpleAccount var17 = new org.jsecurity.authc.SimpleAccount();
    var17.setCredentialsExpired(false);
    boolean var20 = var17.isLocked();
    org.jsecurity.authc.AuthenticationInfo var21 = var12.afterAllAttempts((org.jsecurity.authc.AuthenticationToken)var16, (org.jsecurity.authc.AuthenticationInfo)var17);
    char[] var25 = new char[] { '4', '#'};
    org.jsecurity.authc.UsernamePasswordToken var26 = new org.jsecurity.authc.UsernamePasswordToken("\u0000\u0000", var25);
    org.jsecurity.authc.SimpleAccount var27 = new org.jsecurity.authc.SimpleAccount();
    var27.setCredentialsExpired(false);
    var27.setCredentialsExpired(false);
    boolean var32 = var27.isCredentialsExpired();
    org.jsecurity.authc.AuthenticationInfo var33 = var12.afterAllAttempts((org.jsecurity.authc.AuthenticationToken)var26, (org.jsecurity.authc.AuthenticationInfo)var27);
    org.jsecurity.authz.UnauthenticatedException var37 = new org.jsecurity.authz.UnauthenticatedException();
    org.jsecurity.config.UnresolveableReferenceException var38 = new org.jsecurity.config.UnresolveableReferenceException("", (java.lang.Throwable)var37);
    org.jsecurity.cache.CacheException var39 = new org.jsecurity.cache.CacheException("org.jsecurity.config.ConfigurationException: dd\uFFFD", (java.lang.Throwable)var37);
    org.jsecurity.authc.SimpleAuthenticationInfo var41 = new org.jsecurity.authc.SimpleAuthenticationInfo((java.lang.Object)"org.jsecurity.config.ConfigurationException: dd\uFFFD", (java.lang.Object)var39, "a2b823b1e72eae2b727289df8a00a89df8a0bab6ad8a89c4c5c7a9b62a270000");
    org.jsecurity.subject.PrincipalCollection var42 = var41.getPrincipals();
    org.jsecurity.authc.AuthenticationInfo var43 = var11.afterAllAttempts((org.jsecurity.authc.AuthenticationToken)var26, (org.jsecurity.authc.AuthenticationInfo)var41);
    var10.setModularAuthenticationStrategy((org.jsecurity.authc.pam.ModularAuthenticationStrategy)var11);
    org.jsecurity.subject.RememberMeManager var45 = var10.getRememberMeManager();
    org.jsecurity.authc.pam.ModularRealmAuthenticator var46 = new org.jsecurity.authc.pam.ModularRealmAuthenticator();
    var10.setAuthenticator((org.jsecurity.authc.Authenticator)var46);
    var1.put((java.lang.Object)var2, (java.lang.Object)var46);
    var1.clear();
    java.util.Set var50 = var1.keys();
    int var51 = var1.size();
    int var52 = var1.size();
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var9);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var14);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var20 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var21);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var25);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var32 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var33);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var42);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var43);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var45);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var50);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var51 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var52 == 0);

  }

  public void test465() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest5.test465");


    org.jsecurity.authc.pam.AllSuccessfulModularAuthenticationStrategy var0 = new org.jsecurity.authc.pam.AllSuccessfulModularAuthenticationStrategy();
    char[] var2 = new char[] { };
    org.jsecurity.authc.UsernamePasswordToken var4 = new org.jsecurity.authc.UsernamePasswordToken("hi!", var2, true);
    org.jsecurity.authc.SimpleAccount var5 = new org.jsecurity.authc.SimpleAccount();
    var5.setCredentialsExpired(false);
    boolean var8 = var5.isLocked();
    org.jsecurity.authc.AuthenticationInfo var9 = var0.afterAllAttempts((org.jsecurity.authc.AuthenticationToken)var4, (org.jsecurity.authc.AuthenticationInfo)var5);
    char[] var13 = new char[] { '4', '#'};
    org.jsecurity.authc.UsernamePasswordToken var14 = new org.jsecurity.authc.UsernamePasswordToken("\u0000\u0000", var13);
    org.jsecurity.authc.SimpleAccount var15 = new org.jsecurity.authc.SimpleAccount();
    var15.setCredentialsExpired(false);
    var15.setCredentialsExpired(false);
    boolean var20 = var15.isCredentialsExpired();
    org.jsecurity.authc.AuthenticationInfo var21 = var0.afterAllAttempts((org.jsecurity.authc.AuthenticationToken)var14, (org.jsecurity.authc.AuthenticationInfo)var15);
    org.jsecurity.realm.activedirectory.ActiveDirectoryRealm var22 = new org.jsecurity.realm.activedirectory.ActiveDirectoryRealm();
    org.jsecurity.authc.credential.Sha256CredentialsMatcher var23 = new org.jsecurity.authc.credential.Sha256CredentialsMatcher();
    var22.setCredentialsMatcher((org.jsecurity.authc.credential.CredentialsMatcher)var23);
    java.lang.String var25 = var22.getAuthorizationCacheName();
    org.jsecurity.authc.UsernamePasswordToken var26 = new org.jsecurity.authc.UsernamePasswordToken();
    java.lang.String var27 = var26.getUsername();
    java.lang.Object var28 = var26.getPrincipal();
    boolean var29 = var22.supports((org.jsecurity.authc.AuthenticationToken)var26);
    org.jsecurity.session.UnknownSessionException var33 = new org.jsecurity.session.UnknownSessionException("dd\uFFFD", (java.io.Serializable)100.0f);
    org.jsecurity.session.SessionException var35 = new org.jsecurity.session.SessionException("dd\uFFFD", (java.lang.Throwable)var33, (java.io.Serializable)0);
    org.jsecurity.authc.SimpleAuthenticationInfo var38 = new org.jsecurity.authc.SimpleAuthenticationInfo((java.lang.Object)0, (java.lang.Object)10, "hi!");
    java.lang.Object var39 = var38.getCredentials();
    java.lang.String var40 = var38.toString();
    org.jsecurity.authc.AuthenticationInfo var41 = var0.afterAllAttempts((org.jsecurity.authc.AuthenticationToken)var26, (org.jsecurity.authc.AuthenticationInfo)var38);
    org.jsecurity.session.mgt.eis.MemorySessionDAO var42 = new org.jsecurity.session.mgt.eis.MemorySessionDAO();
    org.jsecurity.cache.Cache var43 = var42.getActiveSessionsCache();
    var42.setActiveSessionsCacheName("dd\uFFFD");
    var38.setCredentials((java.lang.Object)var42);
    org.jsecurity.session.mgt.SimpleSession var47 = new org.jsecurity.session.mgt.SimpleSession();
    var47.setTimeout((-1L));
    org.jsecurity.session.mgt.SimpleSession var50 = new org.jsecurity.session.mgt.SimpleSession();
    java.util.Date var51 = var50.getLastAccessTime();
    var47.setLastAccessTime(var51);
    org.jsecurity.session.mgt.SimpleSession var53 = new org.jsecurity.session.mgt.SimpleSession();
    java.util.Date var54 = var53.getLastAccessTime();
    var47.setStopTimestamp(var54);
    java.io.Serializable var56 = var42.create((org.jsecurity.session.Session)var47);
    org.jsecurity.session.mgt.eis.MemorySessionDAO var57 = new org.jsecurity.session.mgt.eis.MemorySessionDAO();
    org.jsecurity.cache.Cache var58 = var57.getActiveSessionsCache();
    org.jsecurity.cache.CacheManager var59 = var57.getCacheManager();
    org.jsecurity.cache.HashtableCacheManager var60 = new org.jsecurity.cache.HashtableCacheManager();
    org.jsecurity.cache.Cache var62 = var60.getCache("\u0000\u0000");
    var57.setActiveSessionsCache(var62);
    java.io.InputStream var65 = org.jsecurity.util.ClassUtils.getResourceAsStream("");
    java.lang.Object[] var66 = new java.lang.Object[] { var65};
    java.util.List var67 = org.jsecurity.util.CollectionUtils.asList(var66);
    org.jsecurity.authc.pam.ModularRealmAuthenticator var68 = new org.jsecurity.authc.pam.ModularRealmAuthenticator(var67);
    org.jsecurity.authc.pam.AllSuccessfulModularAuthenticationStrategy var69 = new org.jsecurity.authc.pam.AllSuccessfulModularAuthenticationStrategy();
    var68.setModularAuthenticationStrategy((org.jsecurity.authc.pam.ModularAuthenticationStrategy)var69);
    org.jsecurity.authz.SimpleAuthorizationInfo var71 = new org.jsecurity.authz.SimpleAuthorizationInfo();
    var71.addStringPermission("hi!");
    java.io.InputStream var75 = org.jsecurity.util.ClassUtils.getResourceAsStream("");
    java.lang.Object[] var76 = new java.lang.Object[] { var75};
    java.util.List var77 = org.jsecurity.util.CollectionUtils.asList(var76);
    var71.addRoles((java.util.Collection)var77);
    var68.setAuthenticationListeners((java.util.Collection)var77);
    org.jsecurity.realm.activedirectory.ActiveDirectoryRealm var80 = new org.jsecurity.realm.activedirectory.ActiveDirectoryRealm();
    var80.setPrincipalSuffix("");
    var68.setRealm((org.jsecurity.realm.Realm)var80);
    org.jsecurity.cache.HashtableCacheManager var84 = new org.jsecurity.cache.HashtableCacheManager();
    org.jsecurity.cache.Cache var86 = var84.getCache("\u0000\u0000");
    var80.setAuthorizationCache(var86);
    var57.setActiveSessionsCache(var86);
    org.jsecurity.session.mgt.SimpleSession var89 = new org.jsecurity.session.mgt.SimpleSession();
    java.io.Serializable var90 = var57.create((org.jsecurity.session.Session)var89);
    java.io.Serializable var91 = var89.getId();
    java.util.Map var92 = var89.getAttributes();
    var42.update((org.jsecurity.session.Session)var89);
    java.util.Date var94 = var89.getStopTimestamp();
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var2);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var8 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var9);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var13);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var20 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var21);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var25);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var27);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var28);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var29 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var39 + "' != '" + 10+ "'", var39.equals(10));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var41);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var43);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var51);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var54);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var56 + "' != '" + "e86ae671-9b55-425f-9fbe-53e372069fcd"+ "'", var56.equals("e86ae671-9b55-425f-9fbe-53e372069fcd"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var58);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var59);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var62);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var65);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var66);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var67);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var75);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var76);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var77);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var86);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var90 + "' != '" + "34a0f5d5-fe6a-4296-bcec-aa0a04e0cd40"+ "'", var90.equals("34a0f5d5-fe6a-4296-bcec-aa0a04e0cd40"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var91 + "' != '" + "34a0f5d5-fe6a-4296-bcec-aa0a04e0cd40"+ "'", var91.equals("34a0f5d5-fe6a-4296-bcec-aa0a04e0cd40"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var92);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var94);

  }

  public void test466() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest5.test466");


    org.jsecurity.session.mgt.DefaultSessionManager var0 = new org.jsecurity.session.mgt.DefaultSessionManager();
    var0.setGlobalSessionTimeout(1);
    org.jsecurity.session.mgt.quartz.QuartzSessionValidationScheduler var3 = new org.jsecurity.session.mgt.quartz.QuartzSessionValidationScheduler((org.jsecurity.session.mgt.ValidatingSessionManager)var0);
    var0.destroy();
    var0.setSessionValidationSchedulerEnabled(false);
    long var7 = var0.getSessionValidationInterval();
    org.jsecurity.session.mgt.DefaultSessionManager var8 = new org.jsecurity.session.mgt.DefaultSessionManager();
    org.jsecurity.mgt.DefaultSecurityManager var9 = new org.jsecurity.mgt.DefaultSecurityManager();
    org.jsecurity.authz.permission.WildcardPermissionResolver var10 = new org.jsecurity.authz.permission.WildcardPermissionResolver();
    var9.setPermissionResolver((org.jsecurity.authz.permission.PermissionResolver)var10);
    org.jsecurity.cache.CacheManager var12 = var9.getCacheManager();
    var8.setCacheManager(var12);
    long var14 = var8.getSessionValidationInterval();
    boolean var15 = var8.isSessionValidationSchedulerEnabled();
    var8.destroy();
    org.jsecurity.session.mgt.SimpleSession var17 = new org.jsecurity.session.mgt.SimpleSession();
    org.jsecurity.io.SerializationException var20 = new org.jsecurity.io.SerializationException("org.jsecurity.config.ConfigurationException: dd\uFFFD");
    org.jsecurity.authc.AccountException var21 = new org.jsecurity.authc.AccountException("a2b823b1e72eae2b727289df8a00a89df8a0bab6ad8a89c4c5c7a9b62a270000", (java.lang.Throwable)var20);
    var17.setId((java.io.Serializable)"a2b823b1e72eae2b727289df8a00a89df8a0bab6ad8a89c4c5c7a9b62a270000");
    org.jsecurity.config.ReflectionBuilder var23 = new org.jsecurity.config.ReflectionBuilder();
    org.jsecurity.config.ReflectionBuilder var24 = new org.jsecurity.config.ReflectionBuilder();
    org.jsecurity.io.IniResource var25 = new org.jsecurity.io.IniResource();
    var25.setCharsetName("org.jsecurity.authz.UnauthorizedException: org.jsecurity.session.ExpiredSessionException: ");
    java.util.Map var28 = var25.getSections();
    java.util.Map var29 = var24.buildObjects(var28);
    org.jsecurity.config.ReflectionBuilder var30 = new org.jsecurity.config.ReflectionBuilder();
    org.jsecurity.io.IniResource var31 = new org.jsecurity.io.IniResource();
    var31.setCharsetName("org.jsecurity.authz.UnauthorizedException: org.jsecurity.session.ExpiredSessionException: ");
    java.util.Map var34 = var31.getSections();
    java.util.Map var35 = var30.buildObjects(var34);
    java.util.Map var36 = var24.buildObjects(var35);
    java.util.Map var37 = var23.buildObjects(var36);
    var17.setAttributes(var37);
    java.net.InetAddress var39 = var17.getHostAddress();
    java.io.Serializable var40 = var8.start(var39);
    java.io.Serializable var41 = var0.start(var39);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var7 == 3600000L);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var12);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var14 == 3600000L);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var15 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var28);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var29);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var34);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var35);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var36);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var37);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var39);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var40 + "' != '" + "12556240-cd98-4b58-b866-d6186a3cc05c"+ "'", var40.equals("12556240-cd98-4b58-b866-d6186a3cc05c"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var41 + "' != '" + "d6532156-6422-4685-81a7-020ccc2abff2"+ "'", var41.equals("d6532156-6422-4685-81a7-020ccc2abff2"));

  }

  public void test467() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest5.test467");


    org.jsecurity.session.mgt.eis.MemorySessionDAO var0 = new org.jsecurity.session.mgt.eis.MemorySessionDAO();
    org.jsecurity.cache.Cache var1 = var0.getActiveSessionsCache();
    org.jsecurity.cache.CacheManager var2 = var0.getCacheManager();
    org.jsecurity.cache.HashtableCacheManager var3 = new org.jsecurity.cache.HashtableCacheManager();
    org.jsecurity.cache.Cache var5 = var3.getCache("\u0000\u0000");
    var0.setActiveSessionsCache(var5);
    java.io.InputStream var8 = org.jsecurity.util.ClassUtils.getResourceAsStream("");
    java.lang.Object[] var9 = new java.lang.Object[] { var8};
    java.util.List var10 = org.jsecurity.util.CollectionUtils.asList(var9);
    org.jsecurity.authc.pam.ModularRealmAuthenticator var11 = new org.jsecurity.authc.pam.ModularRealmAuthenticator(var10);
    org.jsecurity.authc.pam.AllSuccessfulModularAuthenticationStrategy var12 = new org.jsecurity.authc.pam.AllSuccessfulModularAuthenticationStrategy();
    var11.setModularAuthenticationStrategy((org.jsecurity.authc.pam.ModularAuthenticationStrategy)var12);
    org.jsecurity.authz.SimpleAuthorizationInfo var14 = new org.jsecurity.authz.SimpleAuthorizationInfo();
    var14.addStringPermission("hi!");
    java.io.InputStream var18 = org.jsecurity.util.ClassUtils.getResourceAsStream("");
    java.lang.Object[] var19 = new java.lang.Object[] { var18};
    java.util.List var20 = org.jsecurity.util.CollectionUtils.asList(var19);
    var14.addRoles((java.util.Collection)var20);
    var11.setAuthenticationListeners((java.util.Collection)var20);
    org.jsecurity.realm.activedirectory.ActiveDirectoryRealm var23 = new org.jsecurity.realm.activedirectory.ActiveDirectoryRealm();
    var23.setPrincipalSuffix("");
    var11.setRealm((org.jsecurity.realm.Realm)var23);
    org.jsecurity.cache.HashtableCacheManager var27 = new org.jsecurity.cache.HashtableCacheManager();
    org.jsecurity.cache.Cache var29 = var27.getCache("\u0000\u0000");
    var23.setAuthorizationCache(var29);
    var0.setActiveSessionsCache(var29);
    org.jsecurity.session.mgt.SimpleSession var32 = new org.jsecurity.session.mgt.SimpleSession();
    java.io.Serializable var33 = var0.create((org.jsecurity.session.Session)var32);
    org.jsecurity.session.mgt.SimpleSession var34 = new org.jsecurity.session.mgt.SimpleSession();
    var34.touch();
    var34.validate();
    org.jsecurity.session.mgt.SimpleSession var37 = new org.jsecurity.session.mgt.SimpleSession();
    var37.setTimeout((-1L));
    org.jsecurity.session.mgt.SimpleSession var40 = new org.jsecurity.session.mgt.SimpleSession();
    java.util.Date var41 = var40.getLastAccessTime();
    var37.setLastAccessTime(var41);
    org.jsecurity.session.mgt.SimpleSession var43 = new org.jsecurity.session.mgt.SimpleSession();
    java.util.Date var44 = var43.getLastAccessTime();
    var37.setStopTimestamp(var44);
    var34.setLastAccessTime(var44);
    var32.setLastAccessTime(var44);
    org.jsecurity.session.mgt.ImmutableProxiedSession var48 = new org.jsecurity.session.mgt.ImmutableProxiedSession((org.jsecurity.session.Session)var32);
    java.util.Date var49 = var48.getStartTimestamp();
    java.io.Serializable var50 = var48.getId();
    java.util.Date var51 = var48.getStartTimestamp();
    java.util.Date var52 = var48.getLastAccessTime();
    long var53 = var48.getTimeout();
    org.jsecurity.authz.UnauthorizedException var56 = new org.jsecurity.authz.UnauthorizedException("org.jsecurity.config.ConfigurationException: dd\uFFFD");
    java.lang.Throwable[] var57 = var56.getSuppressed();
    org.jsecurity.session.SessionException var58 = new org.jsecurity.session.SessionException((java.lang.Throwable)var56);
    org.jsecurity.session.SessionException var59 = new org.jsecurity.session.SessionException("org.jsecurity.realm.SimpleAccountRealm-9-authorization", (java.lang.Throwable)var56);
    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      java.lang.Object var60 = var48.removeAttribute((java.lang.Object)var56);
      fail("Expected exception of type org.jsecurity.session.InvalidSessionException");
    } catch (org.jsecurity.session.InvalidSessionException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var1);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var2);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var5);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var8);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var9);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var10);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var18);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var19);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var20);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var29);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var33 + "' != '" + "054300ff-c644-44bb-8ce6-1d073dcdd10a"+ "'", var33.equals("054300ff-c644-44bb-8ce6-1d073dcdd10a"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var41);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var44);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var49);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var50 + "' != '" + "054300ff-c644-44bb-8ce6-1d073dcdd10a"+ "'", var50.equals("054300ff-c644-44bb-8ce6-1d073dcdd10a"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var51);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var52);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var53 == 1800000L);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var57);

  }

  public void test468() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest5.test468");


    org.jsecurity.session.UnknownSessionException var7 = new org.jsecurity.session.UnknownSessionException("dd\uFFFD", (java.io.Serializable)100.0f);
    org.jsecurity.session.SessionException var9 = new org.jsecurity.session.SessionException("dd\uFFFD", (java.lang.Throwable)var7, (java.io.Serializable)0);
    org.jsecurity.io.SerializationException var10 = new org.jsecurity.io.SerializationException((java.lang.Throwable)var7);
    org.jsecurity.JSecurityException var11 = new org.jsecurity.JSecurityException("a2b823b1e72eae2b727289df8a00a89df8a0bab6ad8a89c4c5c7a9b62a270000", (java.lang.Throwable)var10);
    org.jsecurity.session.SessionException var12 = new org.jsecurity.session.SessionException("org.jsecurity.authc.CredentialsException: 783ccd31-48a8-42dd-890f-df885a7baaff", (java.io.Serializable)var10);
    org.jsecurity.authc.DisabledAccountException var13 = new org.jsecurity.authc.DisabledAccountException("1bda1aac-168a-4284-8541-abc425cc1ca7", (java.lang.Throwable)var12);
    org.jsecurity.authz.HostUnauthorizedException var14 = new org.jsecurity.authz.HostUnauthorizedException((java.lang.Throwable)var13);
    org.jsecurity.authz.UnauthorizedException var15 = new org.jsecurity.authz.UnauthorizedException("PD94bWwgdmVyc2lvbj0iMS4wIiBlbmNvZGluZz0iVVRGLTgiPz4KPGphdmEgdmVyc2lvbj0iMS43LjBfNzkiIGNsYXNzPSJqYXZhLmJlYW5zLlhNTERlY29kZXIiPgogPG9iamVjdCBjbGFzcz0ib3JnLmpzZWN1cml0eS5pby5SZXNvdXJjZUV4Y2VwdGlvbiI+CiAgPHZvaWQgcHJvcGVydHk9InN0YWNrVHJhY2UiPgogICA8YXJyYXkgY2xhc3M9ImphdmEubGFuZy5TdGFja1RyYWNlRWxlbWVudCIgbGVuZ3RoPSI3Ii8+CiAgPC92b2lkPgogPC9vYmplY3Q+CjwvamF2YT4K", (java.lang.Throwable)var14);

  }

  public void test469() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest5.test469");


    org.jsecurity.authz.permission.InvalidPermissionStringException var2 = new org.jsecurity.authz.permission.InvalidPermissionStringException("", "dd\uFFFD");
    org.jsecurity.JSecurityException var4 = new org.jsecurity.JSecurityException("");
    org.jsecurity.authc.SimpleAuthenticationInfo var6 = new org.jsecurity.authc.SimpleAuthenticationInfo((java.lang.Object)var2, (java.lang.Object)"", "org.jsecurity.authz.UnauthorizedException: org.jsecurity.session.ExpiredSessionException: ");
    org.jsecurity.subject.PrincipalCollection var7 = var6.getPrincipals();
    org.jsecurity.session.UnknownSessionException var11 = new org.jsecurity.session.UnknownSessionException("dd\uFFFD", (java.io.Serializable)100.0f);
    org.jsecurity.session.SessionException var13 = new org.jsecurity.session.SessionException("dd\uFFFD", (java.lang.Throwable)var11, (java.io.Serializable)0);
    org.jsecurity.authc.SimpleAccount var14 = new org.jsecurity.authc.SimpleAccount(var7, (java.lang.Object)var13);
    var14.addStringPermission("5f1a02c3-98db-421f-b1ba-f29f3b4f245c");
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var7);

  }

  public void test470() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest5.test470");


    org.jsecurity.realm.activedirectory.ActiveDirectoryRealm var0 = new org.jsecurity.realm.activedirectory.ActiveDirectoryRealm();
    var0.init();
    var0.setSystemPassword("dd\uFFFD");
    org.jsecurity.cache.Cache var4 = var0.getAuthorizationCache();
    org.jsecurity.mgt.DefaultSecurityManager var5 = new org.jsecurity.mgt.DefaultSecurityManager((org.jsecurity.realm.Realm)var0);
    org.jsecurity.session.UnknownSessionException var12 = new org.jsecurity.session.UnknownSessionException("dd\uFFFD", (java.io.Serializable)100.0f);
    org.jsecurity.config.ConfigurationException var13 = new org.jsecurity.config.ConfigurationException("dd\uFFFD", (java.lang.Throwable)var12);
    org.jsecurity.session.ExpiredSessionException var15 = new org.jsecurity.session.ExpiredSessionException("", (java.lang.Throwable)var13, (java.io.Serializable)true);
    org.jsecurity.authc.pam.UnsupportedTokenException var16 = new org.jsecurity.authc.pam.UnsupportedTokenException((java.lang.Throwable)var15);
    org.jsecurity.authc.AccountException var17 = new org.jsecurity.authc.AccountException((java.lang.Throwable)var16);
    org.jsecurity.authz.UnauthorizedException var18 = new org.jsecurity.authz.UnauthorizedException("a2b823b1e72eae2b727289df8a00a89df8a0bab6ad8a89c4c5c7a9b62a270000", (java.lang.Throwable)var17);
    org.jsecurity.codec.CodecException var21 = new org.jsecurity.codec.CodecException("dd\uFFFD");
    org.jsecurity.authc.ConcurrentAccessException var22 = new org.jsecurity.authc.ConcurrentAccessException("org.jsecurity.authz.UnauthorizedException: org.jsecurity.session.ExpiredSessionException: ", (java.lang.Throwable)var21);
    org.jsecurity.subject.SimplePrincipalCollection var24 = new org.jsecurity.subject.SimplePrincipalCollection((java.lang.Object)var21, "");
    java.io.InputStream var26 = org.jsecurity.util.ClassUtils.getResourceAsStream("");
    java.lang.Object[] var27 = new java.lang.Object[] { var26};
    java.util.List var28 = org.jsecurity.util.CollectionUtils.asList(var27);
    org.jsecurity.authc.pam.ModularRealmAuthenticator var29 = new org.jsecurity.authc.pam.ModularRealmAuthenticator(var28);
    org.jsecurity.authc.pam.AllSuccessfulModularAuthenticationStrategy var30 = new org.jsecurity.authc.pam.AllSuccessfulModularAuthenticationStrategy();
    var29.setModularAuthenticationStrategy((org.jsecurity.authc.pam.ModularAuthenticationStrategy)var30);
    org.jsecurity.authz.SimpleAuthorizationInfo var32 = new org.jsecurity.authz.SimpleAuthorizationInfo();
    var32.addStringPermission("hi!");
    java.io.InputStream var36 = org.jsecurity.util.ClassUtils.getResourceAsStream("");
    java.lang.Object[] var37 = new java.lang.Object[] { var36};
    java.util.List var38 = org.jsecurity.util.CollectionUtils.asList(var37);
    var32.addRoles((java.util.Collection)var38);
    var29.setAuthenticationListeners((java.util.Collection)var38);
    org.jsecurity.realm.activedirectory.ActiveDirectoryRealm var41 = new org.jsecurity.realm.activedirectory.ActiveDirectoryRealm();
    var41.setPrincipalSuffix("");
    var29.setRealm((org.jsecurity.realm.Realm)var41);
    org.jsecurity.authc.pam.FirstSuccessfulAuthenticationStrategy var45 = new org.jsecurity.authc.pam.FirstSuccessfulAuthenticationStrategy();
    org.jsecurity.authz.UnauthorizedException var47 = new org.jsecurity.authz.UnauthorizedException("org.jsecurity.config.ConfigurationException: dd\uFFFD");
    java.lang.Throwable[] var48 = var47.getSuppressed();
    java.util.List var49 = org.jsecurity.util.CollectionUtils.asList((java.lang.Object[])var48);
    org.jsecurity.authc.UsernamePasswordToken var50 = new org.jsecurity.authc.UsernamePasswordToken();
    java.lang.String var51 = var50.getUsername();
    java.net.InetAddress var52 = var50.getInetAddress();
    org.jsecurity.authc.AuthenticationInfo var53 = var45.beforeAllAttempts((java.util.Collection)var49, (org.jsecurity.authc.AuthenticationToken)var50);
    var29.setModularAuthenticationStrategy((org.jsecurity.authc.pam.ModularAuthenticationStrategy)var45);
    org.jsecurity.authc.SimpleAccount var55 = new org.jsecurity.authc.SimpleAccount((org.jsecurity.subject.PrincipalCollection)var24, (java.lang.Object)var29);
    java.util.Collection var56 = var55.getObjectPermissions();
    java.util.Collection var57 = var55.getObjectPermissions();
    org.jsecurity.codec.CodecException var60 = new org.jsecurity.codec.CodecException("dd\uFFFD");
    org.jsecurity.authc.ConcurrentAccessException var61 = new org.jsecurity.authc.ConcurrentAccessException("org.jsecurity.authz.UnauthorizedException: org.jsecurity.session.ExpiredSessionException: ", (java.lang.Throwable)var60);
    org.jsecurity.subject.SimplePrincipalCollection var63 = new org.jsecurity.subject.SimplePrincipalCollection((java.lang.Object)var60, "");
    org.jsecurity.authc.pam.FirstSuccessfulAuthenticationStrategy var64 = new org.jsecurity.authc.pam.FirstSuccessfulAuthenticationStrategy();
    org.jsecurity.authz.UnauthorizedException var66 = new org.jsecurity.authz.UnauthorizedException("org.jsecurity.config.ConfigurationException: dd\uFFFD");
    java.lang.Throwable[] var67 = var66.getSuppressed();
    java.util.List var68 = org.jsecurity.util.CollectionUtils.asList((java.lang.Object[])var67);
    org.jsecurity.authc.UsernamePasswordToken var69 = new org.jsecurity.authc.UsernamePasswordToken();
    java.lang.String var70 = var69.getUsername();
    java.net.InetAddress var71 = var69.getInetAddress();
    org.jsecurity.authc.AuthenticationInfo var72 = var64.beforeAllAttempts((java.util.Collection)var68, (org.jsecurity.authc.AuthenticationToken)var69);
    org.jsecurity.session.UnknownSessionException var77 = new org.jsecurity.session.UnknownSessionException("dd\uFFFD", (java.io.Serializable)100.0f);
    org.jsecurity.subject.SubjectException var78 = new org.jsecurity.subject.SubjectException("dd\uFFFD", (java.lang.Throwable)var77);
    org.jsecurity.io.SerializationException var79 = new org.jsecurity.io.SerializationException("", (java.lang.Throwable)var78);
    java.lang.Throwable[] var80 = var78.getSuppressed();
    java.util.Set var81 = org.jsecurity.util.CollectionUtils.asSet((java.lang.Object[])var80);
    org.jsecurity.authc.SimpleAccount var82 = new org.jsecurity.authc.SimpleAccount((org.jsecurity.subject.PrincipalCollection)var63, (java.lang.Object)var68, var81);
    var55.setObjectPermissions(var81);
    org.jsecurity.session.UnknownSessionException var84 = new org.jsecurity.session.UnknownSessionException("b598ff3d-5685-4491-8ee6-585d37adb1db", (java.lang.Throwable)var18, (java.io.Serializable)var55);
    boolean var85 = var55.isCredentialsExpired();
    org.jsecurity.subject.PrincipalCollection var86 = var55.getPrincipals();
    java.lang.String[] var91 = org.jsecurity.util.StringUtils.tokenizeToStringArray("c88beeba-81c4-4196-82b6-97784ab62fef", "e7e879cb-1172-4cea-8bca-f370fbe1f08c", true, true);
    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      boolean var92 = var0.isPermittedAll(var86, var91);
      fail("Expected exception of type java.util.NoSuchElementException");
    } catch (java.util.NoSuchElementException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var4);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var26);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var27);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var28);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var36);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var37);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var38);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var48);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var49);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var51);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var52);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var53);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var56);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var57);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var67);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var68);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var70);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var71);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var72);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var80);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var81);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var85 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var86);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var91);

  }

  public void test471() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest5.test471");


    org.jsecurity.mgt.DefaultSecurityManager var0 = new org.jsecurity.mgt.DefaultSecurityManager();
    java.io.InputStream var2 = org.jsecurity.util.ClassUtils.getResourceAsStream("");
    java.lang.Object[] var3 = new java.lang.Object[] { var2};
    java.util.List var4 = org.jsecurity.util.CollectionUtils.asList(var3);
    org.jsecurity.authc.pam.ModularRealmAuthenticator var5 = new org.jsecurity.authc.pam.ModularRealmAuthenticator(var4);
    org.jsecurity.authc.pam.AllSuccessfulModularAuthenticationStrategy var6 = new org.jsecurity.authc.pam.AllSuccessfulModularAuthenticationStrategy();
    var5.setModularAuthenticationStrategy((org.jsecurity.authc.pam.ModularAuthenticationStrategy)var6);
    org.jsecurity.authz.SimpleAuthorizationInfo var8 = new org.jsecurity.authz.SimpleAuthorizationInfo();
    var8.addStringPermission("hi!");
    java.io.InputStream var12 = org.jsecurity.util.ClassUtils.getResourceAsStream("");
    java.lang.Object[] var13 = new java.lang.Object[] { var12};
    java.util.List var14 = org.jsecurity.util.CollectionUtils.asList(var13);
    var8.addRoles((java.util.Collection)var14);
    var5.setAuthenticationListeners((java.util.Collection)var14);
    var0.setSessionListeners((java.util.Collection)var14);
    java.util.Collection var18 = var0.getRealms();
    org.jsecurity.codec.CodecException var21 = new org.jsecurity.codec.CodecException("dd\uFFFD");
    org.jsecurity.authc.ConcurrentAccessException var22 = new org.jsecurity.authc.ConcurrentAccessException("org.jsecurity.authz.UnauthorizedException: org.jsecurity.session.ExpiredSessionException: ", (java.lang.Throwable)var21);
    org.jsecurity.subject.SimplePrincipalCollection var24 = new org.jsecurity.subject.SimplePrincipalCollection((java.lang.Object)var21, "");
    java.io.InputStream var26 = org.jsecurity.util.ClassUtils.getResourceAsStream("");
    java.lang.Object[] var27 = new java.lang.Object[] { var26};
    java.util.List var28 = org.jsecurity.util.CollectionUtils.asList(var27);
    org.jsecurity.authc.pam.ModularRealmAuthenticator var29 = new org.jsecurity.authc.pam.ModularRealmAuthenticator(var28);
    var24.addAll((java.util.Collection)var28, "\u0000\u0000");
    org.jsecurity.authz.UnauthorizedException var33 = new org.jsecurity.authz.UnauthorizedException();
    org.jsecurity.session.SessionException var35 = new org.jsecurity.session.SessionException("", (java.lang.Throwable)var33, (java.io.Serializable)"org.jsecurity.config.ConfigurationException: dd\uFFFD");
    org.jsecurity.crypto.hash.Sha1Hash var36 = new org.jsecurity.crypto.hash.Sha1Hash((java.lang.Object)"");
    org.jsecurity.session.UnknownSessionException var41 = new org.jsecurity.session.UnknownSessionException("dd\uFFFD", (java.io.Serializable)100.0f);
    org.jsecurity.subject.SubjectException var42 = new org.jsecurity.subject.SubjectException("dd\uFFFD", (java.lang.Throwable)var41);
    org.jsecurity.io.SerializationException var43 = new org.jsecurity.io.SerializationException("", (java.lang.Throwable)var42);
    java.lang.Throwable[] var44 = var42.getSuppressed();
    java.util.Set var45 = org.jsecurity.util.CollectionUtils.asSet((java.lang.Object[])var44);
    org.jsecurity.authz.SimpleAuthorizationInfo var47 = new org.jsecurity.authz.SimpleAuthorizationInfo();
    org.jsecurity.session.UnknownSessionException var52 = new org.jsecurity.session.UnknownSessionException("dd\uFFFD", (java.io.Serializable)100.0f);
    org.jsecurity.subject.SubjectException var53 = new org.jsecurity.subject.SubjectException("dd\uFFFD", (java.lang.Throwable)var52);
    org.jsecurity.io.SerializationException var54 = new org.jsecurity.io.SerializationException("", (java.lang.Throwable)var53);
    java.lang.Throwable[] var55 = var53.getSuppressed();
    java.util.Set var56 = org.jsecurity.util.CollectionUtils.asSet((java.lang.Object[])var55);
    var47.setStringPermissions(var56);
    java.util.Set var58 = var47.getRoles();
    org.jsecurity.authz.SimpleAuthorizationInfo var59 = new org.jsecurity.authz.SimpleAuthorizationInfo();
    var59.addRole("a2b823b1e72eae2b727289df8a00a89df8a0bab6ad8a89c4c5c7a9b62a270000");
    org.jsecurity.session.UnknownSessionException var66 = new org.jsecurity.session.UnknownSessionException("dd\uFFFD", (java.io.Serializable)100.0f);
    org.jsecurity.subject.SubjectException var67 = new org.jsecurity.subject.SubjectException("dd\uFFFD", (java.lang.Throwable)var66);
    org.jsecurity.io.SerializationException var68 = new org.jsecurity.io.SerializationException("", (java.lang.Throwable)var67);
    java.lang.Throwable[] var69 = var67.getSuppressed();
    java.util.Set var70 = org.jsecurity.util.CollectionUtils.asSet((java.lang.Object[])var69);
    var59.addRoles((java.util.Collection)var70);
    var47.setRoles(var70);
    org.jsecurity.authz.SimpleRole var73 = new org.jsecurity.authz.SimpleRole("org.jsecurity.authz.UnauthorizedException: org.jsecurity.session.ExpiredSessionException: ", var70);
    org.jsecurity.authc.SimpleAccount var74 = new org.jsecurity.authc.SimpleAccount((org.jsecurity.subject.PrincipalCollection)var24, (java.lang.Object)"", var45, var70);
    org.jsecurity.authz.SimpleAuthorizationInfo var75 = new org.jsecurity.authz.SimpleAuthorizationInfo();
    var75.addStringPermission("hi!");
    org.jsecurity.authz.SimpleAuthorizationInfo var79 = new org.jsecurity.authz.SimpleAuthorizationInfo();
    org.jsecurity.session.UnknownSessionException var84 = new org.jsecurity.session.UnknownSessionException("dd\uFFFD", (java.io.Serializable)100.0f);
    org.jsecurity.subject.SubjectException var85 = new org.jsecurity.subject.SubjectException("dd\uFFFD", (java.lang.Throwable)var84);
    org.jsecurity.io.SerializationException var86 = new org.jsecurity.io.SerializationException("", (java.lang.Throwable)var85);
    java.lang.Throwable[] var87 = var85.getSuppressed();
    java.util.Set var88 = org.jsecurity.util.CollectionUtils.asSet((java.lang.Object[])var87);
    var79.setStringPermissions(var88);
    org.jsecurity.authz.SimpleRole var90 = new org.jsecurity.authz.SimpleRole("\u0000\u0000", var88);
    var75.setRoles(var88);
    boolean var92 = var0.isPermittedAll((org.jsecurity.subject.PrincipalCollection)var24, (java.util.Collection)var88);
    java.util.Set var94 = org.jsecurity.util.PermissionUtils.toPermissionStrings("org.jsecurity.config.ConfigurationException: dd\uFFFD");
    org.jsecurity.authz.SimpleAuthorizationInfo var95 = new org.jsecurity.authz.SimpleAuthorizationInfo(var94);
    org.jsecurity.authc.SimpleAccount var96 = new org.jsecurity.authc.SimpleAccount((org.jsecurity.subject.PrincipalCollection)var24, (java.lang.Object)var94);
    java.util.Collection var97 = var96.getObjectPermissions();
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var2);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var3);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var4);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var12);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var13);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var14);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var18);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var26);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var27);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var28);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var44);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var45);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var55);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var56);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var58);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var69);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var70);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var87);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var88);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var92 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var94);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var97);

  }

  public void test472() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest5.test472");


    org.jsecurity.realm.activedirectory.ActiveDirectoryRealm var0 = new org.jsecurity.realm.activedirectory.ActiveDirectoryRealm();
    org.jsecurity.authc.credential.Sha256CredentialsMatcher var1 = new org.jsecurity.authc.credential.Sha256CredentialsMatcher();
    var0.setCredentialsMatcher((org.jsecurity.authc.credential.CredentialsMatcher)var1);
    java.lang.String var3 = var0.getAuthorizationCacheName();
    var0.setUrl("hi!");
    org.jsecurity.realm.ldap.DefaultLdapContextFactory var6 = new org.jsecurity.realm.ldap.DefaultLdapContextFactory();
    var0.setLdapContextFactory((org.jsecurity.realm.ldap.LdapContextFactory)var6);
    org.jsecurity.config.ReflectionBuilder var8 = new org.jsecurity.config.ReflectionBuilder();
    org.jsecurity.io.IniResource var9 = new org.jsecurity.io.IniResource();
    var9.setCharsetName("org.jsecurity.authz.UnauthorizedException: org.jsecurity.session.ExpiredSessionException: ");
    java.util.Map var12 = var9.getSections();
    java.util.Map var13 = var8.buildObjects(var12);
    org.jsecurity.config.ReflectionBuilder var14 = new org.jsecurity.config.ReflectionBuilder();
    org.jsecurity.io.IniResource var15 = new org.jsecurity.io.IniResource();
    var15.setCharsetName("org.jsecurity.authz.UnauthorizedException: org.jsecurity.session.ExpiredSessionException: ");
    java.util.Map var18 = var15.getSections();
    java.util.Map var19 = var14.buildObjects(var18);
    java.util.Map var20 = var8.buildObjects(var19);
    java.util.Map var21 = var8.getObjects();
    var6.setAdditionalEnvironment(var21);
    var6.setReferral("NfxhYN7ItBfRAmDBmprtU73ghfEEPpcDJrHPkZ06wiY=");
    var6.setSearchBase("org.jsecurity.realm.text.PropertiesRealm_3427");
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var3);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var12);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var13);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var18);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var19);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var20);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var21);

  }

  public void test473() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest5.test473");


    org.jsecurity.crypto.hash.Md5Hash var1 = org.jsecurity.crypto.hash.Md5Hash.fromBase64String("d5807a18-6407-48b2-9fe3-106a1ef9f432");
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var1);

  }

  public void test474() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest5.test474");


    org.jsecurity.session.mgt.DefaultSessionManager var0 = new org.jsecurity.session.mgt.DefaultSessionManager();
    org.jsecurity.session.mgt.quartz.QuartzSessionValidationScheduler var1 = new org.jsecurity.session.mgt.quartz.QuartzSessionValidationScheduler();
    boolean var2 = var1.isEnabled();
    var1.enableSessionValidation();
    var0.setSessionValidationScheduler((org.jsecurity.session.mgt.SessionValidationScheduler)var1);
    var1.disableSessionValidation();
    org.jsecurity.session.mgt.DefaultSessionManager var6 = new org.jsecurity.session.mgt.DefaultSessionManager();
    org.jsecurity.session.mgt.eis.MemorySessionDAO var7 = new org.jsecurity.session.mgt.eis.MemorySessionDAO();
    org.jsecurity.cache.Cache var8 = var7.getActiveSessionsCache();
    org.jsecurity.cache.CacheManager var9 = var7.getCacheManager();
    org.jsecurity.cache.HashtableCacheManager var10 = new org.jsecurity.cache.HashtableCacheManager();
    org.jsecurity.cache.Cache var12 = var10.getCache("\u0000\u0000");
    var7.setActiveSessionsCache(var12);
    java.io.InputStream var15 = org.jsecurity.util.ClassUtils.getResourceAsStream("");
    java.lang.Object[] var16 = new java.lang.Object[] { var15};
    java.util.List var17 = org.jsecurity.util.CollectionUtils.asList(var16);
    org.jsecurity.authc.pam.ModularRealmAuthenticator var18 = new org.jsecurity.authc.pam.ModularRealmAuthenticator(var17);
    org.jsecurity.authc.pam.AllSuccessfulModularAuthenticationStrategy var19 = new org.jsecurity.authc.pam.AllSuccessfulModularAuthenticationStrategy();
    var18.setModularAuthenticationStrategy((org.jsecurity.authc.pam.ModularAuthenticationStrategy)var19);
    org.jsecurity.authz.SimpleAuthorizationInfo var21 = new org.jsecurity.authz.SimpleAuthorizationInfo();
    var21.addStringPermission("hi!");
    java.io.InputStream var25 = org.jsecurity.util.ClassUtils.getResourceAsStream("");
    java.lang.Object[] var26 = new java.lang.Object[] { var25};
    java.util.List var27 = org.jsecurity.util.CollectionUtils.asList(var26);
    var21.addRoles((java.util.Collection)var27);
    var18.setAuthenticationListeners((java.util.Collection)var27);
    org.jsecurity.realm.activedirectory.ActiveDirectoryRealm var30 = new org.jsecurity.realm.activedirectory.ActiveDirectoryRealm();
    var30.setPrincipalSuffix("");
    var18.setRealm((org.jsecurity.realm.Realm)var30);
    org.jsecurity.cache.HashtableCacheManager var34 = new org.jsecurity.cache.HashtableCacheManager();
    org.jsecurity.cache.Cache var36 = var34.getCache("\u0000\u0000");
    var30.setAuthorizationCache(var36);
    var7.setActiveSessionsCache(var36);
    org.jsecurity.session.mgt.SimpleSession var39 = new org.jsecurity.session.mgt.SimpleSession();
    java.io.Serializable var40 = var7.create((org.jsecurity.session.Session)var39);
    var6.setSessionDAO((org.jsecurity.session.mgt.eis.SessionDAO)var7);
    org.jsecurity.authc.pam.AllSuccessfulModularAuthenticationStrategy var42 = new org.jsecurity.authc.pam.AllSuccessfulModularAuthenticationStrategy();
    char[] var44 = new char[] { };
    org.jsecurity.authc.UsernamePasswordToken var46 = new org.jsecurity.authc.UsernamePasswordToken("hi!", var44, true);
    org.jsecurity.authc.SimpleAccount var47 = new org.jsecurity.authc.SimpleAccount();
    var47.setCredentialsExpired(false);
    boolean var50 = var47.isLocked();
    org.jsecurity.authc.AuthenticationInfo var51 = var42.afterAllAttempts((org.jsecurity.authc.AuthenticationToken)var46, (org.jsecurity.authc.AuthenticationInfo)var47);
    char[] var55 = new char[] { '4', '#'};
    org.jsecurity.authc.UsernamePasswordToken var56 = new org.jsecurity.authc.UsernamePasswordToken("\u0000\u0000", var55);
    org.jsecurity.authc.SimpleAccount var57 = new org.jsecurity.authc.SimpleAccount();
    var57.setCredentialsExpired(false);
    var57.setCredentialsExpired(false);
    boolean var62 = var57.isCredentialsExpired();
    org.jsecurity.authc.AuthenticationInfo var63 = var42.afterAllAttempts((org.jsecurity.authc.AuthenticationToken)var56, (org.jsecurity.authc.AuthenticationInfo)var57);
    org.jsecurity.realm.activedirectory.ActiveDirectoryRealm var64 = new org.jsecurity.realm.activedirectory.ActiveDirectoryRealm();
    org.jsecurity.authc.credential.Sha256CredentialsMatcher var65 = new org.jsecurity.authc.credential.Sha256CredentialsMatcher();
    var64.setCredentialsMatcher((org.jsecurity.authc.credential.CredentialsMatcher)var65);
    java.lang.String var67 = var64.getAuthorizationCacheName();
    org.jsecurity.authc.UsernamePasswordToken var68 = new org.jsecurity.authc.UsernamePasswordToken();
    java.lang.String var69 = var68.getUsername();
    java.lang.Object var70 = var68.getPrincipal();
    boolean var71 = var64.supports((org.jsecurity.authc.AuthenticationToken)var68);
    org.jsecurity.session.UnknownSessionException var75 = new org.jsecurity.session.UnknownSessionException("dd\uFFFD", (java.io.Serializable)100.0f);
    org.jsecurity.session.SessionException var77 = new org.jsecurity.session.SessionException("dd\uFFFD", (java.lang.Throwable)var75, (java.io.Serializable)0);
    org.jsecurity.authc.SimpleAuthenticationInfo var80 = new org.jsecurity.authc.SimpleAuthenticationInfo((java.lang.Object)0, (java.lang.Object)10, "hi!");
    java.lang.Object var81 = var80.getCredentials();
    java.lang.String var82 = var80.toString();
    org.jsecurity.authc.AuthenticationInfo var83 = var42.afterAllAttempts((org.jsecurity.authc.AuthenticationToken)var68, (org.jsecurity.authc.AuthenticationInfo)var80);
    org.jsecurity.session.mgt.eis.MemorySessionDAO var84 = new org.jsecurity.session.mgt.eis.MemorySessionDAO();
    org.jsecurity.cache.Cache var85 = var84.getActiveSessionsCache();
    var84.setActiveSessionsCacheName("dd\uFFFD");
    var80.setCredentials((java.lang.Object)var84);
    var6.setSessionDAO((org.jsecurity.session.mgt.eis.SessionDAO)var84);
    var1.setSessionManager((org.jsecurity.session.mgt.ValidatingSessionManager)var6);
    org.jsecurity.cache.ehcache.EhCacheManager var91 = new org.jsecurity.cache.ehcache.EhCacheManager();
    var91.init();
    var6.setCacheManager((org.jsecurity.cache.CacheManager)var91);
    var6.validateSessions();
    org.jsecurity.session.mgt.SessionValidationScheduler var95 = var6.getSessionValidationScheduler();
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var2 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var8);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var9);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var12);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var15);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var16);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var17);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var25);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var26);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var27);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var36);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var40 + "' != '" + "ae927f26-0f5d-42f6-b874-a7bf82cb71a2"+ "'", var40.equals("ae927f26-0f5d-42f6-b874-a7bf82cb71a2"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var44);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var50 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var51);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var55);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var62 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var63);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var67);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var69);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var70);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var71 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var81 + "' != '" + 10+ "'", var81.equals(10));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var83);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var85);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var95);

  }

  public void test475() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest5.test475");


    org.jsecurity.io.SerializationException var1 = new org.jsecurity.io.SerializationException("46b05a44-d2f3-4a9e-b289-ce4f2d173048");

  }

  public void test476() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest5.test476");


    org.jsecurity.authz.permission.InvalidPermissionStringException var2 = new org.jsecurity.authz.permission.InvalidPermissionStringException("e2dbce5a-2276-49d1-8175-015873d38faf", "092c22b9-945a-4905-99a2-455b7831cf4b");

  }

  public void test477() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest5.test477");


    boolean var2 = org.jsecurity.util.StringUtils.startsWithIgnoreCase("0efd2a5d-db7f-4119-871f-6c218f55416f", "4df977a5-1696-4e50-854e-904500d9e1c2");
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var2 == false);

  }

  public void test478() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest5.test478");


    org.jsecurity.authz.SimpleAuthorizationInfo var0 = new org.jsecurity.authz.SimpleAuthorizationInfo();
    org.jsecurity.realm.jndi.JndiRealmFactory var1 = new org.jsecurity.realm.jndi.JndiRealmFactory();
    java.io.InputStream var3 = org.jsecurity.util.ClassUtils.getResourceAsStream("");
    java.lang.Object[] var4 = new java.lang.Object[] { var3};
    java.util.List var5 = org.jsecurity.util.CollectionUtils.asList(var4);
    var1.setJndiNames((java.util.Collection)var5);
    org.jsecurity.authz.SimpleRole var7 = new org.jsecurity.authz.SimpleRole();
    org.jsecurity.authz.SimpleAuthorizationInfo var8 = new org.jsecurity.authz.SimpleAuthorizationInfo();
    var8.addRole("a2b823b1e72eae2b727289df8a00a89df8a0bab6ad8a89c4c5c7a9b62a270000");
    org.jsecurity.session.UnknownSessionException var15 = new org.jsecurity.session.UnknownSessionException("dd\uFFFD", (java.io.Serializable)100.0f);
    org.jsecurity.subject.SubjectException var16 = new org.jsecurity.subject.SubjectException("dd\uFFFD", (java.lang.Throwable)var15);
    org.jsecurity.io.SerializationException var17 = new org.jsecurity.io.SerializationException("", (java.lang.Throwable)var16);
    java.lang.Throwable[] var18 = var16.getSuppressed();
    java.util.Set var19 = org.jsecurity.util.CollectionUtils.asSet((java.lang.Object[])var18);
    var8.addRoles((java.util.Collection)var19);
    var7.addAll((java.util.Collection)var19);
    var1.setJndiNames((java.util.Collection)var19);
    var0.setStringPermissions(var19);
    java.util.Set var24 = var0.getObjectPermissions();
    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      var0.addStringPermission("4ef713cf-5dcd-4003-b930-c7cb38661a43");
      fail("Expected exception of type java.lang.UnsupportedOperationException");
    } catch (java.lang.UnsupportedOperationException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var3);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var4);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var5);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var18);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var19);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var24);

  }

  public void test479() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest5.test479");


    org.jsecurity.subject.InvalidSubjectException var1 = new org.jsecurity.subject.InvalidSubjectException("072be27b-6bd8-4897-92c3-67cf42b4a94f");

  }

  public void test480() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest5.test480");


    org.jsecurity.authz.AuthorizationException var2 = new org.jsecurity.authz.AuthorizationException("783ccd31-48a8-42dd-890f-df885a7baaff");
    org.jsecurity.session.SessionException var3 = new org.jsecurity.session.SessionException("46b7eeaa-afcc-499c-aad3-c2d089ce9a8c", (java.io.Serializable)"783ccd31-48a8-42dd-890f-df885a7baaff");

  }

  public void test481() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest5.test481");


    java.lang.String var1 = org.jsecurity.util.StringUtils.clean("4f3cc87b-b5e6-4046-98fb-24e207dce9ff");
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var1 + "' != '" + "4f3cc87b-b5e6-4046-98fb-24e207dce9ff"+ "'", var1.equals("4f3cc87b-b5e6-4046-98fb-24e207dce9ff"));

  }

  public void test482() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest5.test482");


    org.jsecurity.mgt.DefaultSecurityManager var0 = new org.jsecurity.mgt.DefaultSecurityManager();
    java.io.InputStream var2 = org.jsecurity.util.ClassUtils.getResourceAsStream("");
    java.lang.Object[] var3 = new java.lang.Object[] { var2};
    java.util.List var4 = org.jsecurity.util.CollectionUtils.asList(var3);
    org.jsecurity.authc.pam.ModularRealmAuthenticator var5 = new org.jsecurity.authc.pam.ModularRealmAuthenticator(var4);
    org.jsecurity.authc.pam.AllSuccessfulModularAuthenticationStrategy var6 = new org.jsecurity.authc.pam.AllSuccessfulModularAuthenticationStrategy();
    var5.setModularAuthenticationStrategy((org.jsecurity.authc.pam.ModularAuthenticationStrategy)var6);
    org.jsecurity.authz.SimpleAuthorizationInfo var8 = new org.jsecurity.authz.SimpleAuthorizationInfo();
    var8.addStringPermission("hi!");
    java.io.InputStream var12 = org.jsecurity.util.ClassUtils.getResourceAsStream("");
    java.lang.Object[] var13 = new java.lang.Object[] { var12};
    java.util.List var14 = org.jsecurity.util.CollectionUtils.asList(var13);
    var8.addRoles((java.util.Collection)var14);
    var5.setAuthenticationListeners((java.util.Collection)var14);
    var0.setSessionListeners((java.util.Collection)var14);
    java.io.InputStream var19 = org.jsecurity.util.ClassUtils.getResourceAsStream("");
    java.lang.Object[] var20 = new java.lang.Object[] { var19};
    java.util.List var21 = org.jsecurity.util.CollectionUtils.asList(var20);
    org.jsecurity.authc.pam.ModularRealmAuthenticator var22 = new org.jsecurity.authc.pam.ModularRealmAuthenticator(var21);
    org.jsecurity.authc.pam.AllSuccessfulModularAuthenticationStrategy var23 = new org.jsecurity.authc.pam.AllSuccessfulModularAuthenticationStrategy();
    var22.setModularAuthenticationStrategy((org.jsecurity.authc.pam.ModularAuthenticationStrategy)var23);
    org.jsecurity.authz.SimpleAuthorizationInfo var25 = new org.jsecurity.authz.SimpleAuthorizationInfo();
    var25.addStringPermission("hi!");
    java.io.InputStream var29 = org.jsecurity.util.ClassUtils.getResourceAsStream("");
    java.lang.Object[] var30 = new java.lang.Object[] { var29};
    java.util.List var31 = org.jsecurity.util.CollectionUtils.asList(var30);
    var25.addRoles((java.util.Collection)var31);
    var22.setAuthenticationListeners((java.util.Collection)var31);
    org.jsecurity.realm.activedirectory.ActiveDirectoryRealm var34 = new org.jsecurity.realm.activedirectory.ActiveDirectoryRealm();
    var34.setPrincipalSuffix("");
    var22.setRealm((org.jsecurity.realm.Realm)var34);
    org.jsecurity.cache.HashtableCacheManager var38 = new org.jsecurity.cache.HashtableCacheManager();
    org.jsecurity.cache.Cache var40 = var38.getCache("\u0000\u0000");
    var34.setAuthorizationCache(var40);
    var0.setRealm((org.jsecurity.realm.Realm)var34);
    org.jsecurity.realm.activedirectory.ActiveDirectoryRealm var43 = new org.jsecurity.realm.activedirectory.ActiveDirectoryRealm();
    org.jsecurity.authc.credential.Sha256CredentialsMatcher var44 = new org.jsecurity.authc.credential.Sha256CredentialsMatcher();
    var43.setCredentialsMatcher((org.jsecurity.authc.credential.CredentialsMatcher)var44);
    java.lang.String var46 = var43.getAuthorizationCacheName();
    var43.setUrl("hi!");
    var43.setName("org.jsecurity.realm.text.PropertiesRealm_772");
    var0.setAuthorizer((org.jsecurity.authz.Authorizer)var43);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var2);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var3);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var4);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var12);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var13);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var14);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var19);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var20);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var21);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var29);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var30);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var31);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var40);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var46);

  }

  public void test483() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest5.test483");


    org.jsecurity.session.SessionException var0 = new org.jsecurity.session.SessionException();
    org.jsecurity.io.ResourceException var1 = new org.jsecurity.io.ResourceException((java.lang.Throwable)var0);
    org.jsecurity.authz.HostUnauthorizedException var2 = new org.jsecurity.authz.HostUnauthorizedException((java.lang.Throwable)var1);
    org.jsecurity.session.ExpiredSessionException var3 = new org.jsecurity.session.ExpiredSessionException((java.lang.Throwable)var2);
    java.net.InetAddress var4 = var2.getHostAddress();
    java.net.InetAddress var5 = var2.getHostAddress();
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var4);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var5);

  }

  public void test484() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest5.test484");


    org.jsecurity.config.IniConfiguration var0 = new org.jsecurity.config.IniConfiguration();
    java.lang.String var1 = var0.getConfig();
    var0.setConfig("\uFFFD\uFFFD#\uFFFD\uFFFD.\uFFFD+rr\uFFFD\u07CA\u0000\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\u01E9\uFFFD*'\u0000\u0000");
    var0.setConfig("ff1bb54d-80f9-4308-a260-ff3ddf1355e9");
    org.jsecurity.realm.text.TextConfigurationRealm var6 = new org.jsecurity.realm.text.TextConfigurationRealm();
    java.io.InputStream var8 = org.jsecurity.util.ClassUtils.getResourceAsStream("");
    java.lang.Object[] var9 = new java.lang.Object[] { var8};
    java.util.List var10 = org.jsecurity.util.CollectionUtils.asList(var9);
    org.jsecurity.authc.pam.ModularRealmAuthenticator var11 = new org.jsecurity.authc.pam.ModularRealmAuthenticator(var10);
    org.jsecurity.subject.SimplePrincipalCollection var13 = new org.jsecurity.subject.SimplePrincipalCollection((java.util.Collection)var10, "org.jsecurity.authz.UnauthorizedException: org.jsecurity.session.ExpiredSessionException: ");
    org.jsecurity.session.UnknownSessionException var18 = new org.jsecurity.session.UnknownSessionException("dd\uFFFD", (java.io.Serializable)100.0f);
    org.jsecurity.session.SessionException var20 = new org.jsecurity.session.SessionException("dd\uFFFD", (java.lang.Throwable)var18, (java.io.Serializable)0);
    org.jsecurity.session.SessionException var21 = new org.jsecurity.session.SessionException("dd\uFFFD", (java.lang.Throwable)var18);
    var13.add((java.lang.Object)var21, "org.jsecurity.config.ConfigurationException: dd\uFFFD");
    var6.onLogout((org.jsecurity.subject.PrincipalCollection)var13);
    java.util.Collection var26 = var13.fromRealm("\u0000\u0000\u0000");
    org.jsecurity.session.mgt.eis.MemorySessionDAO var27 = new org.jsecurity.session.mgt.eis.MemorySessionDAO();
    org.jsecurity.authc.SimpleAuthenticationInfo var28 = new org.jsecurity.authc.SimpleAuthenticationInfo((org.jsecurity.subject.PrincipalCollection)var13, (java.lang.Object)var27);
    org.jsecurity.authz.SimpleAuthorizingAccount var30 = new org.jsecurity.authz.SimpleAuthorizingAccount((java.lang.Object)"ff1bb54d-80f9-4308-a260-ff3ddf1355e9", (java.lang.Object)var27, "330a41fd-f404-4b7f-8f3c-bc52c3f67c3e");
    org.jsecurity.session.mgt.SimpleSession var31 = new org.jsecurity.session.mgt.SimpleSession();
    java.util.Date var32 = var31.getLastAccessTime();
    org.jsecurity.session.mgt.eis.MemorySessionDAO var33 = new org.jsecurity.session.mgt.eis.MemorySessionDAO();
    org.jsecurity.cache.Cache var34 = var33.getActiveSessionsCache();
    org.jsecurity.cache.CacheManager var35 = var33.getCacheManager();
    org.jsecurity.cache.HashtableCacheManager var36 = new org.jsecurity.cache.HashtableCacheManager();
    org.jsecurity.cache.Cache var38 = var36.getCache("\u0000\u0000");
    var33.setActiveSessionsCache(var38);
    java.io.InputStream var41 = org.jsecurity.util.ClassUtils.getResourceAsStream("");
    java.lang.Object[] var42 = new java.lang.Object[] { var41};
    java.util.List var43 = org.jsecurity.util.CollectionUtils.asList(var42);
    org.jsecurity.authc.pam.ModularRealmAuthenticator var44 = new org.jsecurity.authc.pam.ModularRealmAuthenticator(var43);
    org.jsecurity.authc.pam.AllSuccessfulModularAuthenticationStrategy var45 = new org.jsecurity.authc.pam.AllSuccessfulModularAuthenticationStrategy();
    var44.setModularAuthenticationStrategy((org.jsecurity.authc.pam.ModularAuthenticationStrategy)var45);
    org.jsecurity.authz.SimpleAuthorizationInfo var47 = new org.jsecurity.authz.SimpleAuthorizationInfo();
    var47.addStringPermission("hi!");
    java.io.InputStream var51 = org.jsecurity.util.ClassUtils.getResourceAsStream("");
    java.lang.Object[] var52 = new java.lang.Object[] { var51};
    java.util.List var53 = org.jsecurity.util.CollectionUtils.asList(var52);
    var47.addRoles((java.util.Collection)var53);
    var44.setAuthenticationListeners((java.util.Collection)var53);
    org.jsecurity.realm.activedirectory.ActiveDirectoryRealm var56 = new org.jsecurity.realm.activedirectory.ActiveDirectoryRealm();
    var56.setPrincipalSuffix("");
    var44.setRealm((org.jsecurity.realm.Realm)var56);
    org.jsecurity.cache.HashtableCacheManager var60 = new org.jsecurity.cache.HashtableCacheManager();
    org.jsecurity.cache.Cache var62 = var60.getCache("\u0000\u0000");
    var56.setAuthorizationCache(var62);
    var33.setActiveSessionsCache(var62);
    org.jsecurity.session.mgt.SimpleSession var65 = new org.jsecurity.session.mgt.SimpleSession();
    java.io.Serializable var66 = var33.create((org.jsecurity.session.Session)var65);
    java.io.Serializable var67 = var65.getId();
    org.jsecurity.session.mgt.SimpleSession var68 = new org.jsecurity.session.mgt.SimpleSession();
    var68.touch();
    var68.validate();
    org.jsecurity.session.mgt.SimpleSession var71 = new org.jsecurity.session.mgt.SimpleSession();
    var71.setTimeout((-1L));
    org.jsecurity.session.mgt.SimpleSession var74 = new org.jsecurity.session.mgt.SimpleSession();
    java.util.Date var75 = var74.getLastAccessTime();
    var71.setLastAccessTime(var75);
    org.jsecurity.session.mgt.SimpleSession var77 = new org.jsecurity.session.mgt.SimpleSession();
    java.util.Date var78 = var77.getLastAccessTime();
    var71.setStopTimestamp(var78);
    var68.setLastAccessTime(var78);
    var65.setStartTimestamp(var78);
    var31.setLastAccessTime(var78);
    java.io.Serializable var83 = var27.create((org.jsecurity.session.Session)var31);
    org.jsecurity.cache.Cache var84 = var27.getActiveSessionsCache();
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var1);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var8);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var9);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var10);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var26);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var32);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var34);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var35);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var38);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var41);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var42);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var43);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var51);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var52);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var53);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var62);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var66 + "' != '" + "2b2d382d-b075-43d6-9e40-316e19c6c169"+ "'", var66.equals("2b2d382d-b075-43d6-9e40-316e19c6c169"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var67 + "' != '" + "2b2d382d-b075-43d6-9e40-316e19c6c169"+ "'", var67.equals("2b2d382d-b075-43d6-9e40-316e19c6c169"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var75);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var78);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var83 + "' != '" + "cd500aa8-eb9b-4c18-9b80-fcb92c4d4765"+ "'", var83.equals("cd500aa8-eb9b-4c18-9b80-fcb92c4d4765"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var84);

  }

  public void test485() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest5.test485");


    org.jsecurity.io.ResourceException var3 = new org.jsecurity.io.ResourceException("d8d550ee-3a8c-48f0-8061-1d82c827f505");
    org.jsecurity.util.UnavailableConstructorException var4 = new org.jsecurity.util.UnavailableConstructorException((java.lang.Throwable)var3);
    org.jsecurity.authc.AuthenticationException var5 = new org.jsecurity.authc.AuthenticationException("947c1ad9-ebd5-4704-882a-a14f51bda9a4", (java.lang.Throwable)var4);
    org.jsecurity.authz.UnauthenticatedException var9 = new org.jsecurity.authz.UnauthenticatedException();
    org.jsecurity.config.UnresolveableReferenceException var10 = new org.jsecurity.config.UnresolveableReferenceException("", (java.lang.Throwable)var9);
    org.jsecurity.cache.CacheException var11 = new org.jsecurity.cache.CacheException("org.jsecurity.config.ConfigurationException: dd\uFFFD", (java.lang.Throwable)var9);
    org.jsecurity.authc.SimpleAuthenticationInfo var13 = new org.jsecurity.authc.SimpleAuthenticationInfo((java.lang.Object)"org.jsecurity.config.ConfigurationException: dd\uFFFD", (java.lang.Object)var11, "a2b823b1e72eae2b727289df8a00a89df8a0bab6ad8a89c4c5c7a9b62a270000");
    org.jsecurity.session.UnknownSessionException var14 = new org.jsecurity.session.UnknownSessionException("org.jsecurity.realm.text.PropertiesRealm-209-authorization", (java.lang.Throwable)var4, (java.io.Serializable)var11);

  }

  public void test486() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest5.test486");


    org.jsecurity.session.UnknownSessionException var5 = new org.jsecurity.session.UnknownSessionException("dd\uFFFD", (java.io.Serializable)100.0f);
    org.jsecurity.subject.SubjectException var6 = new org.jsecurity.subject.SubjectException("dd\uFFFD", (java.lang.Throwable)var5);
    org.jsecurity.session.StoppedSessionException var7 = new org.jsecurity.session.StoppedSessionException((java.lang.Throwable)var5);
    org.jsecurity.session.SessionException var8 = new org.jsecurity.session.SessionException("0a4dfd98-4ec1-476c-a8b7-0ade4d007ab7", (java.lang.Throwable)var7);
    org.jsecurity.authc.AuthenticationException var9 = new org.jsecurity.authc.AuthenticationException("cbfc3e1d-dc49-47b1-a5ab-57e5cb694d7d", (java.lang.Throwable)var7);

  }

  public void test487() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest5.test487");


    org.jsecurity.session.InvalidSessionException var1 = new org.jsecurity.session.InvalidSessionException("classpath:org/jsecurity/cache/ehcache/ehcache.xml");

  }

  public void test488() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest5.test488");


    org.jsecurity.codec.CodecException var2 = new org.jsecurity.codec.CodecException("dd\uFFFD");
    org.jsecurity.authc.ConcurrentAccessException var3 = new org.jsecurity.authc.ConcurrentAccessException("org.jsecurity.authz.UnauthorizedException: org.jsecurity.session.ExpiredSessionException: ", (java.lang.Throwable)var2);
    org.jsecurity.subject.SimplePrincipalCollection var5 = new org.jsecurity.subject.SimplePrincipalCollection((java.lang.Object)var2, "");
    org.jsecurity.authc.AuthenticationException var6 = new org.jsecurity.authc.AuthenticationException((java.lang.Throwable)var2);

  }

  public void test489() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest5.test489");


    org.jsecurity.authz.SimpleRole var0 = new org.jsecurity.authz.SimpleRole();
    org.jsecurity.authz.permission.WildcardPermission var3 = new org.jsecurity.authz.permission.WildcardPermission("hi!", false);
    boolean var4 = var0.isPermitted((org.jsecurity.authz.Permission)var3);
    java.io.InputStream var6 = org.jsecurity.util.ClassUtils.getResourceAsStream("");
    java.lang.Object[] var7 = new java.lang.Object[] { var6};
    java.util.List var8 = org.jsecurity.util.CollectionUtils.asList(var7);
    var0.addAll((java.util.Collection)var8);
    org.jsecurity.authz.SimpleAuthorizingAccount var10 = new org.jsecurity.authz.SimpleAuthorizingAccount();
    java.util.Set var11 = var10.getSimpleRoles();
    org.jsecurity.authz.SimpleRole var12 = new org.jsecurity.authz.SimpleRole();
    org.jsecurity.authz.SimpleAuthorizationInfo var13 = new org.jsecurity.authz.SimpleAuthorizationInfo();
    var13.addRole("a2b823b1e72eae2b727289df8a00a89df8a0bab6ad8a89c4c5c7a9b62a270000");
    org.jsecurity.session.UnknownSessionException var20 = new org.jsecurity.session.UnknownSessionException("dd\uFFFD", (java.io.Serializable)100.0f);
    org.jsecurity.subject.SubjectException var21 = new org.jsecurity.subject.SubjectException("dd\uFFFD", (java.lang.Throwable)var20);
    org.jsecurity.io.SerializationException var22 = new org.jsecurity.io.SerializationException("", (java.lang.Throwable)var21);
    java.lang.Throwable[] var23 = var21.getSuppressed();
    java.util.Set var24 = org.jsecurity.util.CollectionUtils.asSet((java.lang.Object[])var23);
    var13.addRoles((java.util.Collection)var24);
    var12.addAll((java.util.Collection)var24);
    org.jsecurity.authz.SimpleRole var28 = new org.jsecurity.authz.SimpleRole();
    org.jsecurity.authz.permission.WildcardPermission var31 = new org.jsecurity.authz.permission.WildcardPermission("hi!", false);
    boolean var32 = var28.isPermitted((org.jsecurity.authz.Permission)var31);
    org.jsecurity.session.InvalidSessionException var33 = new org.jsecurity.session.InvalidSessionException("org.jsecurity.config.ConfigurationException: dd\uFFFD", (java.io.Serializable)var31);
    org.jsecurity.authz.SimpleRole var34 = new org.jsecurity.authz.SimpleRole();
    org.jsecurity.authz.permission.WildcardPermission var37 = new org.jsecurity.authz.permission.WildcardPermission("hi!", false);
    boolean var38 = var34.isPermitted((org.jsecurity.authz.Permission)var37);
    boolean var39 = var31.implies((org.jsecurity.authz.Permission)var37);
    boolean var40 = var12.isPermitted((org.jsecurity.authz.Permission)var37);
    boolean var41 = var10.isPermitted((org.jsecurity.authz.Permission)var37);
    var0.add((org.jsecurity.authz.Permission)var37);
    java.lang.String var43 = var0.getName();
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var4 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var6);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var7);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var8);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var11);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var23);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var24);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var32 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var38 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var39 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var40 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var41 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var43);

  }

  public void test490() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest5.test490");


    org.jsecurity.authc.CredentialsException var1 = new org.jsecurity.authc.CredentialsException("def3bb13-1c13-4efd-8418-6ca61c15cbd6");
    org.jsecurity.session.StoppedSessionException var2 = new org.jsecurity.session.StoppedSessionException((java.lang.Throwable)var1);

  }

  public void test491() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest5.test491");


    org.jsecurity.authz.SimpleRole var1 = new org.jsecurity.authz.SimpleRole("\u0000\u0000");
    org.jsecurity.realm.activedirectory.ActiveDirectoryRealm var2 = new org.jsecurity.realm.activedirectory.ActiveDirectoryRealm();
    var2.init();
    var2.setSystemPassword("dd\uFFFD");
    org.jsecurity.cache.Cache var6 = var2.getAuthorizationCache();
    var2.setSearchBase("a2b823b1e72eae2b727289df8a00a89df8a0bab6ad8a89c4c5c7a9b62a270000");
    var2.setSystemPassword("\uFFFD\uFFFD\uFFFDq\uFFFD\uFFFD\uFFFD\u01BC\uFFFDg]\uFFFD\uFFFD\u001Fu\uFFFD<\uFFFD\uFFFDi\uFFFD\uFFFD");
    org.jsecurity.authz.permission.PermissionResolver var11 = var2.getPermissionResolver();
    boolean var12 = var1.equals((java.lang.Object)var11);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var6);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var11);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var12 == false);

  }

  public void test492() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest5.test492");


    org.jsecurity.crypto.hash.Md2Hash var1 = org.jsecurity.crypto.hash.Md2Hash.fromBase64String("org.jsecurity.realm.text.PropertiesRealm-343-authorization");
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var1);

  }

  public void test493() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest5.test493");


    org.jsecurity.mgt.DefaultSecurityManager var0 = new org.jsecurity.mgt.DefaultSecurityManager();
    org.jsecurity.authc.pam.AllSuccessfulModularAuthenticationStrategy var1 = new org.jsecurity.authc.pam.AllSuccessfulModularAuthenticationStrategy();
    org.jsecurity.authc.pam.AllSuccessfulModularAuthenticationStrategy var2 = new org.jsecurity.authc.pam.AllSuccessfulModularAuthenticationStrategy();
    char[] var4 = new char[] { };
    org.jsecurity.authc.UsernamePasswordToken var6 = new org.jsecurity.authc.UsernamePasswordToken("hi!", var4, true);
    org.jsecurity.authc.SimpleAccount var7 = new org.jsecurity.authc.SimpleAccount();
    var7.setCredentialsExpired(false);
    boolean var10 = var7.isLocked();
    org.jsecurity.authc.AuthenticationInfo var11 = var2.afterAllAttempts((org.jsecurity.authc.AuthenticationToken)var6, (org.jsecurity.authc.AuthenticationInfo)var7);
    char[] var15 = new char[] { '4', '#'};
    org.jsecurity.authc.UsernamePasswordToken var16 = new org.jsecurity.authc.UsernamePasswordToken("\u0000\u0000", var15);
    org.jsecurity.authc.SimpleAccount var17 = new org.jsecurity.authc.SimpleAccount();
    var17.setCredentialsExpired(false);
    var17.setCredentialsExpired(false);
    boolean var22 = var17.isCredentialsExpired();
    org.jsecurity.authc.AuthenticationInfo var23 = var2.afterAllAttempts((org.jsecurity.authc.AuthenticationToken)var16, (org.jsecurity.authc.AuthenticationInfo)var17);
    org.jsecurity.authz.UnauthenticatedException var27 = new org.jsecurity.authz.UnauthenticatedException();
    org.jsecurity.config.UnresolveableReferenceException var28 = new org.jsecurity.config.UnresolveableReferenceException("", (java.lang.Throwable)var27);
    org.jsecurity.cache.CacheException var29 = new org.jsecurity.cache.CacheException("org.jsecurity.config.ConfigurationException: dd\uFFFD", (java.lang.Throwable)var27);
    org.jsecurity.authc.SimpleAuthenticationInfo var31 = new org.jsecurity.authc.SimpleAuthenticationInfo((java.lang.Object)"org.jsecurity.config.ConfigurationException: dd\uFFFD", (java.lang.Object)var29, "a2b823b1e72eae2b727289df8a00a89df8a0bab6ad8a89c4c5c7a9b62a270000");
    org.jsecurity.subject.PrincipalCollection var32 = var31.getPrincipals();
    org.jsecurity.authc.AuthenticationInfo var33 = var1.afterAllAttempts((org.jsecurity.authc.AuthenticationToken)var16, (org.jsecurity.authc.AuthenticationInfo)var31);
    var0.setModularAuthenticationStrategy((org.jsecurity.authc.pam.ModularAuthenticationStrategy)var1);
    org.jsecurity.subject.RememberMeManager var35 = var0.getRememberMeManager();
    org.jsecurity.subject.RememberMeManager var36 = var0.getRememberMeManager();
    org.jsecurity.authc.Authenticator var37 = var0.getAuthenticator();
    org.jsecurity.authc.Authenticator var38 = var0.getAuthenticator();
    org.jsecurity.authz.SimpleAuthorizationInfo var39 = new org.jsecurity.authz.SimpleAuthorizationInfo();
    var39.addRole("a2b823b1e72eae2b727289df8a00a89df8a0bab6ad8a89c4c5c7a9b62a270000");
    org.jsecurity.authz.SimpleAuthorizationInfo var42 = new org.jsecurity.authz.SimpleAuthorizationInfo();
    var42.addRole("a2b823b1e72eae2b727289df8a00a89df8a0bab6ad8a89c4c5c7a9b62a270000");
    org.jsecurity.session.UnknownSessionException var49 = new org.jsecurity.session.UnknownSessionException("dd\uFFFD", (java.io.Serializable)100.0f);
    org.jsecurity.subject.SubjectException var50 = new org.jsecurity.subject.SubjectException("dd\uFFFD", (java.lang.Throwable)var49);
    org.jsecurity.io.SerializationException var51 = new org.jsecurity.io.SerializationException("", (java.lang.Throwable)var50);
    java.lang.Throwable[] var52 = var50.getSuppressed();
    java.util.Set var53 = org.jsecurity.util.CollectionUtils.asSet((java.lang.Object[])var52);
    var42.addRoles((java.util.Collection)var53);
    var39.setObjectPermissions(var53);
    java.io.InputStream var57 = org.jsecurity.util.ClassUtils.getResourceAsStream("");
    java.lang.Object[] var58 = new java.lang.Object[] { var57};
    java.util.List var59 = org.jsecurity.util.CollectionUtils.asList(var58);
    org.jsecurity.authc.pam.ModularRealmAuthenticator var60 = new org.jsecurity.authc.pam.ModularRealmAuthenticator(var59);
    org.jsecurity.subject.SimplePrincipalCollection var62 = new org.jsecurity.subject.SimplePrincipalCollection((java.util.Collection)var59, "org.jsecurity.authz.UnauthorizedException: org.jsecurity.session.ExpiredSessionException: ");
    java.util.Set var63 = var62.getRealmNames();
    java.io.InputStream var65 = org.jsecurity.util.ClassUtils.getResourceAsStream("");
    java.lang.Object[] var66 = new java.lang.Object[] { var65};
    java.util.List var67 = org.jsecurity.util.CollectionUtils.asList(var66);
    org.jsecurity.authc.pam.ModularRealmAuthenticator var68 = new org.jsecurity.authc.pam.ModularRealmAuthenticator(var67);
    org.jsecurity.subject.SimplePrincipalCollection var70 = new org.jsecurity.subject.SimplePrincipalCollection((java.util.Collection)var67, "org.jsecurity.authz.UnauthorizedException: org.jsecurity.session.ExpiredSessionException: ");
    org.jsecurity.session.UnknownSessionException var75 = new org.jsecurity.session.UnknownSessionException("dd\uFFFD", (java.io.Serializable)100.0f);
    org.jsecurity.session.SessionException var77 = new org.jsecurity.session.SessionException("dd\uFFFD", (java.lang.Throwable)var75, (java.io.Serializable)0);
    org.jsecurity.session.SessionException var78 = new org.jsecurity.session.SessionException("dd\uFFFD", (java.lang.Throwable)var75);
    var70.add((java.lang.Object)var78, "org.jsecurity.config.ConfigurationException: dd\uFFFD");
    java.util.Set var81 = var70.asSet();
    var62.addAll((java.util.Collection)var81, "6464ff");
    var39.setStringPermissions(var81);
    java.util.Set var85 = var39.getStringPermissions();
    java.util.Set var86 = var39.getStringPermissions();
    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      var0.setRealms((java.util.Collection)var86);
      fail("Expected exception of type java.lang.ClassCastException");
    } catch (java.lang.ClassCastException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var4);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var10 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var11);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var15);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var22 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var23);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var32);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var33);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var35);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var36);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var37);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var38);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var52);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var53);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var57);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var58);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var59);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var63);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var65);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var66);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var67);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var81);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var85);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var86);

  }

  public void test494() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest5.test494");


    org.jsecurity.crypto.hash.Md5Hash var1 = org.jsecurity.crypto.hash.Md5Hash.fromBase64String("org.jsecurity.realm.text.PropertiesRealm-480-authorization");
    java.lang.String var2 = var1.toBase64();
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var2 + "' != '" + "orgjsecurityrealmtextPropertiesRealm480authorization"+ "'", var2.equals("orgjsecurityrealmtextPropertiesRealm480authorization"));

  }

  public void test495() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest5.test495");


    java.io.InputStream var1 = org.jsecurity.util.ClassUtils.getResourceAsStream("");
    java.lang.Object[] var2 = new java.lang.Object[] { var1};
    java.util.List var3 = org.jsecurity.util.CollectionUtils.asList(var2);
    org.jsecurity.authc.pam.ModularRealmAuthenticator var4 = new org.jsecurity.authc.pam.ModularRealmAuthenticator(var3);
    org.jsecurity.subject.SimplePrincipalCollection var6 = new org.jsecurity.subject.SimplePrincipalCollection((java.util.Collection)var3, "org.jsecurity.authz.UnauthorizedException: org.jsecurity.session.ExpiredSessionException: ");
    java.util.List var7 = var6.asList();
    org.jsecurity.realm.activedirectory.ActiveDirectoryRealm var9 = new org.jsecurity.realm.activedirectory.ActiveDirectoryRealm();
    org.jsecurity.authc.credential.Sha256CredentialsMatcher var10 = new org.jsecurity.authc.credential.Sha256CredentialsMatcher();
    var9.setCredentialsMatcher((org.jsecurity.authc.credential.CredentialsMatcher)var10);
    java.lang.String var12 = var9.getAuthorizationCacheName();
    var9.setPrincipalSuffix("org.jsecurity.config.ConfigurationException: dd\uFFFD");
    org.jsecurity.authz.permission.PermissionResolver var15 = var9.getPermissionResolver();
    java.util.Set var16 = org.jsecurity.util.PermissionUtils.resolveDelimitedPermissions("NfxhYN7ItBfRAmDBmprtU73ghfEEPpcDJrHPkZ06wiY=", var15);
    var6.addAll((java.util.Collection)var16, "cff098b5-6d79-4f6d-93d3-148185d0b987");
    java.util.Iterator var19 = var6.iterator();
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var1);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var2);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var3);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var7);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var12);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var15);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var16);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var19);

  }

  public void test496() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest5.test496");


    org.jsecurity.realm.text.TextConfigurationRealm var0 = new org.jsecurity.realm.text.TextConfigurationRealm();
    java.io.InputStream var2 = org.jsecurity.util.ClassUtils.getResourceAsStream("");
    java.lang.Object[] var3 = new java.lang.Object[] { var2};
    java.util.List var4 = org.jsecurity.util.CollectionUtils.asList(var3);
    org.jsecurity.authc.pam.ModularRealmAuthenticator var5 = new org.jsecurity.authc.pam.ModularRealmAuthenticator(var4);
    org.jsecurity.subject.SimplePrincipalCollection var7 = new org.jsecurity.subject.SimplePrincipalCollection((java.util.Collection)var4, "org.jsecurity.authz.UnauthorizedException: org.jsecurity.session.ExpiredSessionException: ");
    org.jsecurity.session.UnknownSessionException var12 = new org.jsecurity.session.UnknownSessionException("dd\uFFFD", (java.io.Serializable)100.0f);
    org.jsecurity.session.SessionException var14 = new org.jsecurity.session.SessionException("dd\uFFFD", (java.lang.Throwable)var12, (java.io.Serializable)0);
    org.jsecurity.session.SessionException var15 = new org.jsecurity.session.SessionException("dd\uFFFD", (java.lang.Throwable)var12);
    var7.add((java.lang.Object)var15, "org.jsecurity.config.ConfigurationException: dd\uFFFD");
    var0.onLogout((org.jsecurity.subject.PrincipalCollection)var7);
    org.jsecurity.authc.ExpiredCredentialsException var20 = new org.jsecurity.authc.ExpiredCredentialsException();
    org.jsecurity.session.ExpiredSessionException var21 = new org.jsecurity.session.ExpiredSessionException("", (java.lang.Throwable)var20);
    java.lang.Throwable[] var22 = var21.getSuppressed();
    org.jsecurity.io.ResourceException var23 = new org.jsecurity.io.ResourceException((java.lang.Throwable)var21);
    org.jsecurity.authc.SimpleAuthenticationInfo var24 = new org.jsecurity.authc.SimpleAuthenticationInfo((org.jsecurity.subject.PrincipalCollection)var7, (java.lang.Object)var21);
    java.util.Set var25 = var7.getRealmNames();
    org.jsecurity.realm.text.TextConfigurationRealm var26 = new org.jsecurity.realm.text.TextConfigurationRealm();
    java.io.InputStream var28 = org.jsecurity.util.ClassUtils.getResourceAsStream("");
    java.lang.Object[] var29 = new java.lang.Object[] { var28};
    java.util.List var30 = org.jsecurity.util.CollectionUtils.asList(var29);
    org.jsecurity.authc.pam.ModularRealmAuthenticator var31 = new org.jsecurity.authc.pam.ModularRealmAuthenticator(var30);
    org.jsecurity.subject.SimplePrincipalCollection var33 = new org.jsecurity.subject.SimplePrincipalCollection((java.util.Collection)var30, "org.jsecurity.authz.UnauthorizedException: org.jsecurity.session.ExpiredSessionException: ");
    org.jsecurity.session.UnknownSessionException var38 = new org.jsecurity.session.UnknownSessionException("dd\uFFFD", (java.io.Serializable)100.0f);
    org.jsecurity.session.SessionException var40 = new org.jsecurity.session.SessionException("dd\uFFFD", (java.lang.Throwable)var38, (java.io.Serializable)0);
    org.jsecurity.session.SessionException var41 = new org.jsecurity.session.SessionException("dd\uFFFD", (java.lang.Throwable)var38);
    var33.add((java.lang.Object)var41, "org.jsecurity.config.ConfigurationException: dd\uFFFD");
    var26.onLogout((org.jsecurity.subject.PrincipalCollection)var33);
    org.jsecurity.cache.HashtableCacheManager var45 = new org.jsecurity.cache.HashtableCacheManager();
    org.jsecurity.cache.Cache var47 = var45.getCache("\u0000\u0000");
    var26.setAuthorizationCache(var47);
    java.lang.String var49 = var26.getUserDefinitions();
    var26.init();
    var26.addRole("\uFFFD\uFFFD#\uFFFD\uFFFD.\uFFFD+rr\uFFFD\u07CA\u0000\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\u01E9\uFFFD*'\u0000\u0000");
    java.lang.String[] var61 = org.jsecurity.util.StringUtils.split("org.jsecurity.realm.text.TextConfigurationRealm_389", '#', '4', 'a', false, true);
    var26.addAccount("b74f4674-5868-4e94-a7d5-832b6ef0fcdb", "4a0e5e90-249b-4eb3-a134-0b53851d6caf", var61);
    java.lang.Class var63 = var26.getAuthenticationTokenClass();
    java.lang.Object var64 = var7.oneByType(var63);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var2);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var3);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var4);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var22);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var25);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var28);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var29);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var30);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var47);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var49);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var61);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var63);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var64);

  }

  public void test497() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest5.test497");


    boolean var1 = org.jsecurity.io.ResourceUtils.resourceExists("4854eb67-64de-45f3-aade-e631f39fbc7f");
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var1 == false);

  }

  public void test498() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest5.test498");


    org.jsecurity.crypto.hash.Md2Hash var1 = org.jsecurity.crypto.hash.Md2Hash.fromBase64String("org.jsecurity.realm.text.TextConfigurationRealm_2587");
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var1);

  }

  public void test499() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest5.test499");


    org.jsecurity.mgt.DefaultSecurityManager var0 = new org.jsecurity.mgt.DefaultSecurityManager();
    java.io.InputStream var2 = org.jsecurity.util.ClassUtils.getResourceAsStream("");
    java.lang.Object[] var3 = new java.lang.Object[] { var2};
    java.util.List var4 = org.jsecurity.util.CollectionUtils.asList(var3);
    org.jsecurity.authc.pam.ModularRealmAuthenticator var5 = new org.jsecurity.authc.pam.ModularRealmAuthenticator(var4);
    org.jsecurity.authc.pam.AllSuccessfulModularAuthenticationStrategy var6 = new org.jsecurity.authc.pam.AllSuccessfulModularAuthenticationStrategy();
    var5.setModularAuthenticationStrategy((org.jsecurity.authc.pam.ModularAuthenticationStrategy)var6);
    org.jsecurity.authz.SimpleAuthorizationInfo var8 = new org.jsecurity.authz.SimpleAuthorizationInfo();
    var8.addStringPermission("hi!");
    java.io.InputStream var12 = org.jsecurity.util.ClassUtils.getResourceAsStream("");
    java.lang.Object[] var13 = new java.lang.Object[] { var12};
    java.util.List var14 = org.jsecurity.util.CollectionUtils.asList(var13);
    var8.addRoles((java.util.Collection)var14);
    var5.setAuthenticationListeners((java.util.Collection)var14);
    var0.setSessionListeners((java.util.Collection)var14);
    org.jsecurity.realm.text.TextConfigurationRealm var18 = new org.jsecurity.realm.text.TextConfigurationRealm();
    java.io.InputStream var20 = org.jsecurity.util.ClassUtils.getResourceAsStream("");
    java.lang.Object[] var21 = new java.lang.Object[] { var20};
    java.util.List var22 = org.jsecurity.util.CollectionUtils.asList(var21);
    org.jsecurity.authc.pam.ModularRealmAuthenticator var23 = new org.jsecurity.authc.pam.ModularRealmAuthenticator(var22);
    org.jsecurity.subject.SimplePrincipalCollection var25 = new org.jsecurity.subject.SimplePrincipalCollection((java.util.Collection)var22, "org.jsecurity.authz.UnauthorizedException: org.jsecurity.session.ExpiredSessionException: ");
    org.jsecurity.session.UnknownSessionException var30 = new org.jsecurity.session.UnknownSessionException("dd\uFFFD", (java.io.Serializable)100.0f);
    org.jsecurity.session.SessionException var32 = new org.jsecurity.session.SessionException("dd\uFFFD", (java.lang.Throwable)var30, (java.io.Serializable)0);
    org.jsecurity.session.SessionException var33 = new org.jsecurity.session.SessionException("dd\uFFFD", (java.lang.Throwable)var30);
    var25.add((java.lang.Object)var33, "org.jsecurity.config.ConfigurationException: dd\uFFFD");
    var18.onLogout((org.jsecurity.subject.PrincipalCollection)var25);
    org.jsecurity.authc.pam.FirstSuccessfulAuthenticationStrategy var37 = new org.jsecurity.authc.pam.FirstSuccessfulAuthenticationStrategy();
    org.jsecurity.authz.UnauthorizedException var39 = new org.jsecurity.authz.UnauthorizedException("org.jsecurity.config.ConfigurationException: dd\uFFFD");
    java.lang.Throwable[] var40 = var39.getSuppressed();
    java.util.List var41 = org.jsecurity.util.CollectionUtils.asList((java.lang.Object[])var40);
    org.jsecurity.authc.UsernamePasswordToken var42 = new org.jsecurity.authc.UsernamePasswordToken();
    java.lang.String var43 = var42.getUsername();
    java.net.InetAddress var44 = var42.getInetAddress();
    org.jsecurity.authc.AuthenticationInfo var45 = var37.beforeAllAttempts((java.util.Collection)var41, (org.jsecurity.authc.AuthenticationToken)var42);
    boolean[] var46 = var0.hasRoles((org.jsecurity.subject.PrincipalCollection)var25, var41);
    org.jsecurity.authz.permission.WildcardPermissionResolver var47 = new org.jsecurity.authz.permission.WildcardPermissionResolver();
    org.jsecurity.authz.Permission var49 = var47.resolvePermission("hi!");
    org.jsecurity.authz.Permission var51 = var47.resolvePermission("hi!");
    var0.setPermissionResolver((org.jsecurity.authz.permission.PermissionResolver)var47);
    byte[] var54 = new byte[] { (byte)10};
    java.lang.String var55 = org.jsecurity.codec.Base64.decodeToString(var54);
    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      var0.setRememberMeEncryptionCipherKey(var54);
      fail("Expected exception of type java.lang.IllegalStateException");
    } catch (java.lang.IllegalStateException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var2);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var3);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var4);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var12);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var13);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var14);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var20);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var21);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var22);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var40);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var41);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var43);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var44);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var45);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var46);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var49);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var51);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var54);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var55 + "' != '" + ""+ "'", var55.equals(""));

  }

  public void test500() throws Throwable {

    if (debug) System.out.printf("%nRandoopTest5.test500");


    org.jsecurity.session.UnknownSessionException var1 = new org.jsecurity.session.UnknownSessionException((java.io.Serializable)"a1088bc1-eab4-414f-8f0c-33579d5b6ef9");

  }

}
