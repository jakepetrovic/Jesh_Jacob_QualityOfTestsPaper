/*
 * This file was automatically generated by EvoSuite
 */

package org.jsecurity.realm;

import org.junit.Test;
import org.junit.runner.RunWith;
import static org.junit.Assert.*;
import java.util.Collection;
import java.util.HashSet;
import java.util.LinkedList;
import java.util.List;
import java.util.NoSuchElementException;
import java.util.Set;
import java.util.TreeSet;
import org.jsecurity.authc.SimpleAccount;
import org.jsecurity.authz.AuthorizationException;
import org.jsecurity.authz.AuthorizationInfo;
import org.jsecurity.authz.Permission;
import org.jsecurity.authz.SimpleAuthorizationInfo;
import org.jsecurity.authz.SimpleAuthorizingAccount;
import org.jsecurity.authz.UnauthorizedException;
import org.jsecurity.authz.permission.PermissionResolver;
import org.jsecurity.authz.permission.WildcardPermission;
import org.jsecurity.authz.permission.WildcardPermissionResolver;
import org.jsecurity.cache.Cache;
import org.jsecurity.cache.CacheManager;
import org.jsecurity.cache.HashtableCache;
import org.jsecurity.cache.HashtableCacheManager;
import org.jsecurity.realm.SimpleAccountRealm;
import org.jsecurity.subject.PrincipalCollection;
import org.jsecurity.subject.SimplePrincipalCollection;

public class AuthorizingRealmEvoSuiteTest {


  //Test case number: 0
  /*
   * 17 covered goals:
   * 1 org.jsecurity.realm.AuthorizingRealm.isPermitted(Lorg/jsecurity/subject/PrincipalCollection;Ljava/lang/String;)Z: root-Branch
   * 2 org.jsecurity.realm.AuthorizingRealm.isPermitted(Lorg/jsecurity/subject/PrincipalCollection;Lorg/jsecurity/authz/Permission;)Z: root-Branch
   * 3 org.jsecurity.realm.AuthorizingRealm.getAuthorizationInfo(Lorg/jsecurity/subject/PrincipalCollection;)Lorg/jsecurity/authz/AuthorizationInfo;: I3 Branch 9 IFNONNULL L252 - false
   * 4 org.jsecurity.realm.AuthorizingRealm.getPermissions(Lorg/jsecurity/authz/AuthorizationInfo;)Ljava/util/Collection;: I9 Branch 21 IFNULL L341 - true
   * 5 org.jsecurity.realm.AuthorizingRealm.getPermissions(Lorg/jsecurity/authz/AuthorizationInfo;)Ljava/util/Collection;: I61 Branch 25 IFLE L354 - false
   * 6 org.jsecurity.realm.AuthorizingRealm.isPermitted(Lorg/jsecurity/authz/Permission;Lorg/jsecurity/authz/AuthorizationInfo;)Z: I4 Branch 26 IFEQ L374 - true
   * 7 org.jsecurity.realm.AuthorizingRealm.isPermitted(Lorg/jsecurity/authz/Permission;Lorg/jsecurity/authz/AuthorizationInfo;)Z: I21 Branch 27 IFNULL L379 - false
   * 8 org.jsecurity.realm.AuthorizingRealm.isPermitted(Lorg/jsecurity/authz/Permission;Lorg/jsecurity/authz/AuthorizationInfo;)Z: I24 Branch 28 IFGT L379 - true
   * 9 org.jsecurity.realm.AuthorizingRealm.getAuthorizationCache()Lorg/jsecurity/cache/Cache;: root-Branch
   * 10 org.jsecurity.realm.AuthorizingRealm.init()V: root-Branch
   * 11 org.jsecurity.realm.AuthorizingRealm.getPermissionResolver()Lorg/jsecurity/authz/permission/PermissionResolver;: root-Branch
   * 12 org.jsecurity.realm.AuthorizingRealm.<init>()V: root-Branch
   * 13 org.jsecurity.realm.AuthorizingRealm.initAuthorizationCache()V: I4 Branch 2 IFEQ L167 - true
   * 14 org.jsecurity.realm.AuthorizingRealm.initAuthorizationCache()V: I18 Branch 3 IFNONNULL L173 - false
   * 15 org.jsecurity.realm.AuthorizingRealm.initAuthorizationCache()V: I23 Branch 4 IFEQ L175 - true
   * 16 org.jsecurity.realm.AuthorizingRealm.initAuthorizationCache()V: I37 Branch 5 IFNULL L181 - true
   * 17 org.jsecurity.realm.AuthorizingRealm.initAuthorizationCache()V: I116 Branch 8 IFEQ L195 - false
   */
  @Test
  public void test0()  throws Throwable  {
      SimpleAccountRealm simpleAccountRealm0 = new SimpleAccountRealm("@bBzy!5z~<9&");
      assertNotNull(simpleAccountRealm0);
      
      boolean boolean0 = simpleAccountRealm0.isPermitted((PrincipalCollection) null, "@bBzy!5z~<9&");
      assertEquals(false, boolean0);
  }

  //Test case number: 1
  /*
   * 1 covered goal:
   * 1 org.jsecurity.realm.AuthorizingRealm.setPermissionResolver(Lorg/jsecurity/authz/permission/PermissionResolver;)V: root-Branch
   */
  @Test
  public void test1()  throws Throwable  {
      SimpleAccountRealm simpleAccountRealm0 = new SimpleAccountRealm();
      assertNotNull(simpleAccountRealm0);
      
      WildcardPermissionResolver wildcardPermissionResolver0 = new WildcardPermissionResolver();
      simpleAccountRealm0.setPermissionResolver((PermissionResolver) wildcardPermissionResolver0);
      assertEquals("org.jsecurity.realm.SimpleAccountRealm_32", simpleAccountRealm0.getName());
  }

  //Test case number: 2
  /*
   * 8 covered goals:
   * 1 org.jsecurity.realm.AuthorizingRealm.initAuthorizationCache()V: I46 Branch 6 IFNONNULL L183 - true
   * 2 org.jsecurity.realm.AuthorizingRealm.afterCacheManagerSet()V: root-Branch
   * 3 org.jsecurity.realm.AuthorizingRealm.getAuthorizationCacheName()Ljava/lang/String;: root-Branch
   * 4 org.jsecurity.realm.AuthorizingRealm.setAuthorizationCacheName(Ljava/lang/String;)V: root-Branch
   * 5 org.jsecurity.realm.AuthorizingRealm.setAuthorizationCache(Lorg/jsecurity/cache/Cache;)V: I9 Branch 1 IFNULL L106 - false
   * 6 org.jsecurity.realm.AuthorizingRealm.initAuthorizationCache()V: I37 Branch 5 IFNULL L181 - false
   * 7 org.jsecurity.realm.AuthorizingRealm.initAuthorizationCache()V: I46 Branch 6 IFNONNULL L183 - false
   * 8 org.jsecurity.realm.AuthorizingRealm.initAuthorizationCache()V: I77 Branch 7 IFEQ L188 - true
   */
  @Test
  public void test2()  throws Throwable  {
      SimpleAccountRealm simpleAccountRealm0 = new SimpleAccountRealm("@bBzy!5z~<9&");
      assertNotNull(simpleAccountRealm0);
      
      HashtableCacheManager hashtableCacheManager0 = new HashtableCacheManager();
      simpleAccountRealm0.setCacheManager((CacheManager) hashtableCacheManager0);
      simpleAccountRealm0.afterCacheManagerSet();
      assertEquals("org.jsecurity.realm.SimpleAccountRealm-2-authorization", simpleAccountRealm0.getAuthorizationCacheName());
  }

  //Test case number: 3
  /*
   * 2 covered goals:
   * 1 org.jsecurity.realm.AuthorizingRealm.onLogout(Lorg/jsecurity/subject/PrincipalCollection;)V: root-Branch
   * 2 org.jsecurity.realm.AuthorizingRealm.clearCachedAuthorizationInfo(Lorg/jsecurity/subject/PrincipalCollection;)V: I3 Branch 19 IFNONNULL L314 - false
   */
  @Test
  public void test3()  throws Throwable  {
      SimpleAccountRealm simpleAccountRealm0 = new SimpleAccountRealm("@bBzy!5z~<9&");
      simpleAccountRealm0.onLogout((PrincipalCollection) null);
      assertEquals("@bBzy!5z~<9&", simpleAccountRealm0.getName());
  }

  //Test case number: 4
  /*
   * 3 covered goals:
   * 1 org.jsecurity.realm.AuthorizingRealm.hasRole(Lorg/jsecurity/subject/PrincipalCollection;Ljava/lang/String;)Z: root-Branch
   * 2 org.jsecurity.realm.AuthorizingRealm.hasRole(Ljava/lang/String;Lorg/jsecurity/authz/AuthorizationInfo;)Z: I4 Branch 54 IFEQ L514 - true
   * 3 org.jsecurity.realm.AuthorizingRealm.hasRole(Ljava/lang/String;Lorg/jsecurity/authz/AuthorizationInfo;)Z: I15 Branch 55 IFNULL L517 - true
   */
  @Test
  public void test4()  throws Throwable  {
      SimpleAccountRealm simpleAccountRealm0 = new SimpleAccountRealm();
      assertNotNull(simpleAccountRealm0);
      
      boolean boolean0 = simpleAccountRealm0.hasRole((PrincipalCollection) null, "~cm2{v$VQhS%n+<*");
      assertEquals("org.jsecurity.realm.SimpleAccountRealm_102", simpleAccountRealm0.getName());
      assertEquals(false, boolean0);
  }

  //Test case number: 5
  /*
   * 4 covered goals:
   * 1 org.jsecurity.realm.AuthorizingRealm.checkRole(Lorg/jsecurity/subject/PrincipalCollection;Ljava/lang/String;)V: root-Branch
   * 2 org.jsecurity.realm.AuthorizingRealm.checkRole(Ljava/lang/String;Lorg/jsecurity/authz/AuthorizationInfo;)V: I4 Branch 71 IFEQ L580 - true
   * 3 org.jsecurity.realm.AuthorizingRealm.checkRole(Ljava/lang/String;Lorg/jsecurity/authz/AuthorizationInfo;)V: I18 Branch 72 IFNE L583 - false
   * 4 org.jsecurity.realm.AuthorizingRealm.hasRole(Ljava/lang/String;Lorg/jsecurity/authz/AuthorizationInfo;)Z: I15 Branch 55 IFNULL L517 - true
   */
  @Test
  public void test5()  throws Throwable  {
      SimpleAccountRealm simpleAccountRealm0 = new SimpleAccountRealm("-L[X2Adpt16>;Vl");
      try {
        simpleAccountRealm0.checkRole((PrincipalCollection) null, "-L[X2Adpt16>;Vl");
        fail("Expecting exception: UnauthorizedException");
      } catch(UnauthorizedException e) {
        /*
         * User does not have role [-L[X2Adpt16>;Vl]
         */
      }
  }

  //Test case number: 6
  /*
   * 3 covered goals:
   * 1 org.jsecurity.realm.AuthorizingRealm.checkPermissions(Lorg/jsecurity/subject/PrincipalCollection;Ljava/util/Collection;)V: root-Branch
   * 2 org.jsecurity.realm.AuthorizingRealm.checkPermissions(Ljava/util/Collection;Lorg/jsecurity/authz/AuthorizationInfo;)V: I4 Branch 50 IFEQ L495 - true
   * 3 org.jsecurity.realm.AuthorizingRealm.checkPermissions(Ljava/util/Collection;Lorg/jsecurity/authz/AuthorizationInfo;)V: I15 Branch 51 IFNULL L498 - true
   */
  @Test
  public void test6()  throws Throwable  {
      SimpleAccountRealm simpleAccountRealm0 = new SimpleAccountRealm("@bBzy!5z~<9&");
      simpleAccountRealm0.checkPermissions((PrincipalCollection) null, (Collection<Permission>) null);
      assertNull(simpleAccountRealm0.getAuthorizationCacheName());
  }

  //Test case number: 7
  /*
   * 5 covered goals:
   * 1 org.jsecurity.realm.AuthorizingRealm.checkRoles(Lorg/jsecurity/subject/PrincipalCollection;Ljava/util/Collection;)V: root-Branch
   * 2 org.jsecurity.realm.AuthorizingRealm.getAuthorizationInfo(Lorg/jsecurity/subject/PrincipalCollection;)Lorg/jsecurity/authz/AuthorizationInfo;: I3 Branch 9 IFNONNULL L252 - true
   * 3 org.jsecurity.realm.AuthorizingRealm.getAuthorizationInfo(Lorg/jsecurity/subject/PrincipalCollection;)Lorg/jsecurity/authz/AuthorizationInfo;: I16 Branch 10 IFEQ L258 - true
   * 4 org.jsecurity.realm.AuthorizingRealm.getAuthorizationInfo(Lorg/jsecurity/subject/PrincipalCollection;)Lorg/jsecurity/authz/AuthorizationInfo;: I39 Branch 11 IFNULL L263 - true
   * 5 org.jsecurity.realm.AuthorizingRealm.getAuthorizationInfo(Lorg/jsecurity/subject/PrincipalCollection;)Lorg/jsecurity/authz/AuthorizationInfo;: I104 Branch 15 IFNONNULL L279 - false
   */
  @Test
  public void test7()  throws Throwable  {
      SimpleAccountRealm simpleAccountRealm0 = new SimpleAccountRealm("[ERROR] LogFactory: Load of custom hashtable failed");
      SimpleAuthorizingAccount simpleAuthorizingAccount0 = new SimpleAuthorizingAccount((Object) "[]", (Object) null, "[]");
      SimplePrincipalCollection simplePrincipalCollection0 = (SimplePrincipalCollection)simpleAuthorizingAccount0.getPrincipals();
      // Undeclared exception!
      try {
        simpleAccountRealm0.checkRoles((PrincipalCollection) simplePrincipalCollection0, (Collection<String>) null);
        fail("Expecting exception: NoSuchElementException");
      } catch(NoSuchElementException e) {
      }
  }

  //Test case number: 8
  /*
   * 4 covered goals:
   * 1 org.jsecurity.realm.AuthorizingRealm.checkPermission(Lorg/jsecurity/subject/PrincipalCollection;Lorg/jsecurity/authz/Permission;)V: root-Branch
   * 2 org.jsecurity.realm.AuthorizingRealm.checkPermission(Lorg/jsecurity/subject/PrincipalCollection;Ljava/lang/String;)V: root-Branch
   * 3 org.jsecurity.realm.AuthorizingRealm.checkPermissions(Lorg/jsecurity/subject/PrincipalCollection;[Ljava/lang/String;)V: I3 Branch 48 IFNULL L480 - false
   * 4 org.jsecurity.realm.AuthorizingRealm.checkPermissions(Lorg/jsecurity/subject/PrincipalCollection;[Ljava/lang/String;)V: I18 Branch 49 IF_ICMPGE L481 - false
   */
  @Test
  public void test8()  throws Throwable  {
      SimpleAccountRealm simpleAccountRealm0 = new SimpleAccountRealm();
      assertNotNull(simpleAccountRealm0);
      
      SimplePrincipalCollection simplePrincipalCollection0 = new SimplePrincipalCollection();
      String[] stringArray0 = new String[1];
      stringArray0[0] = "].";
      // Undeclared exception!
      try {
        simpleAccountRealm0.checkPermissions((PrincipalCollection) simplePrincipalCollection0, stringArray0);
        fail("Expecting exception: NoSuchElementException");
      } catch(NoSuchElementException e) {
      }
  }

  //Test case number: 9
  /*
   * 1 covered goal:
   * 1 org.jsecurity.realm.AuthorizingRealm.setAuthorizationCache(Lorg/jsecurity/cache/Cache;)V: I9 Branch 1 IFNULL L106 - true
   */
  @Test
  public void test9()  throws Throwable  {
      SimpleAccountRealm simpleAccountRealm0 = new SimpleAccountRealm("[WARNING] Log class '");
      simpleAccountRealm0.setAuthorizationCache((Cache) null);
      assertNull(simpleAccountRealm0.getAuthorizationCacheName());
  }

  //Test case number: 10
  /*
   * 1 covered goal:
   * 1 org.jsecurity.realm.AuthorizingRealm.initAuthorizationCache()V: I18 Branch 3 IFNONNULL L173 - true
   */
  @Test
  public void test10()  throws Throwable  {
      SimpleAccountRealm simpleAccountRealm0 = new SimpleAccountRealm();
      assertNotNull(simpleAccountRealm0);
      
      HashtableCacheManager hashtableCacheManager0 = new HashtableCacheManager();
      HashtableCache hashtableCache0 = (HashtableCache)hashtableCacheManager0.getCache("~cm2{v$VQhS%n+<*");
      simpleAccountRealm0.setAuthorizationCache((Cache) hashtableCache0);
      simpleAccountRealm0.init();
      assertEquals("org.jsecurity.realm.SimpleAccountRealm_247", simpleAccountRealm0.getName());
  }

  //Test case number: 11
  /*
   * 20 covered goals:
   * 1 org.jsecurity.realm.AuthorizingRealm.getAuthorizationInfo(Lorg/jsecurity/subject/PrincipalCollection;)Lorg/jsecurity/authz/AuthorizationInfo;: I39 Branch 11 IFNULL L263 - false
   * 2 org.jsecurity.realm.AuthorizingRealm.getAuthorizationInfo(Lorg/jsecurity/subject/PrincipalCollection;)Lorg/jsecurity/authz/AuthorizationInfo;: I44 Branch 12 IFEQ L264 - true
   * 3 org.jsecurity.realm.AuthorizingRealm.getAuthorizationInfo(Lorg/jsecurity/subject/PrincipalCollection;)Lorg/jsecurity/authz/AuthorizationInfo;: I67 Branch 13 IFEQ L269 - true
   * 4 org.jsecurity.realm.AuthorizingRealm.getAuthorizationInfo(Lorg/jsecurity/subject/PrincipalCollection;)Lorg/jsecurity/authz/AuthorizationInfo;: I114 Branch 16 IFNULL L283 - true
   * 5 org.jsecurity.realm.AuthorizingRealm.afterCacheManagerSet()V: root-Branch
   * 6 org.jsecurity.realm.AuthorizingRealm.getAuthorizationCacheName()Ljava/lang/String;: root-Branch
   * 7 org.jsecurity.realm.AuthorizingRealm.setAuthorizationCacheName(Ljava/lang/String;)V: root-Branch
   * 8 org.jsecurity.realm.AuthorizingRealm.isPermitted(Lorg/jsecurity/subject/PrincipalCollection;Ljava/util/List;)[Z: root-Branch
   * 9 org.jsecurity.realm.AuthorizingRealm.isPermitted(Lorg/jsecurity/subject/PrincipalCollection;[Ljava/lang/String;)[Z: I22 Branch 31 IF_ICMPGE L391 - true
   * 10 org.jsecurity.realm.AuthorizingRealm.isPermitted(Lorg/jsecurity/subject/PrincipalCollection;[Ljava/lang/String;)[Z: I22 Branch 31 IF_ICMPGE L391 - false
   * 11 org.jsecurity.realm.AuthorizingRealm.setAuthorizationCache(Lorg/jsecurity/cache/Cache;)V: I9 Branch 1 IFNULL L106 - false
   * 12 org.jsecurity.realm.AuthorizingRealm.isPermitted(Ljava/util/List;Lorg/jsecurity/authz/AuthorizationInfo;)[Z: I18 Branch 34 IFGT L410 - false
   * 13 org.jsecurity.realm.AuthorizingRealm.isPermitted(Ljava/util/List;Lorg/jsecurity/authz/AuthorizationInfo;)[Z: I41 Branch 35 IFEQ L414 - true
   * 14 org.jsecurity.realm.AuthorizingRealm.isPermitted(Ljava/util/List;Lorg/jsecurity/authz/AuthorizationInfo;)[Z: I41 Branch 35 IFEQ L414 - false
   * 15 org.jsecurity.realm.AuthorizingRealm.initAuthorizationCache()V: I37 Branch 5 IFNULL L181 - false
   * 16 org.jsecurity.realm.AuthorizingRealm.initAuthorizationCache()V: I46 Branch 6 IFNONNULL L183 - false
   * 17 org.jsecurity.realm.AuthorizingRealm.initAuthorizationCache()V: I77 Branch 7 IFEQ L188 - true
   * 18 org.jsecurity.realm.AuthorizingRealm.getPermissions(Lorg/jsecurity/authz/AuthorizationInfo;)Ljava/util/Collection;: I9 Branch 21 IFNULL L341 - true
   * 19 org.jsecurity.realm.AuthorizingRealm.isPermitted(Ljava/util/List;Lorg/jsecurity/authz/AuthorizationInfo;)[Z: I4 Branch 32 IFEQ L405 - true
   * 20 org.jsecurity.realm.AuthorizingRealm.isPermitted(Ljava/util/List;Lorg/jsecurity/authz/AuthorizationInfo;)[Z: I15 Branch 33 IFNULL L410 - false
   */
  @Test
  public void test11()  throws Throwable  {
      SimpleAccountRealm simpleAccountRealm0 = new SimpleAccountRealm("@bBzy!5z~<9&");
      assertNotNull(simpleAccountRealm0);
      
      HashtableCacheManager hashtableCacheManager0 = new HashtableCacheManager();
      simpleAccountRealm0.setCacheManager((CacheManager) hashtableCacheManager0);
      SimpleAuthorizingAccount simpleAuthorizingAccount0 = new SimpleAuthorizingAccount();
      SimpleAccount simpleAccount0 = new SimpleAccount((Object) "UTF-8", (Object) simpleAuthorizingAccount0, "@bBzy!5z~<9&");
      SimpleAuthorizingAccount simpleAuthorizingAccount1 = new SimpleAuthorizingAccount((Object) simpleAccount0, (Object) "[]", "@bBzy!5z~<9&");
      SimplePrincipalCollection simplePrincipalCollection0 = (SimplePrincipalCollection)simpleAuthorizingAccount1.getPrincipals();
      String[] stringArray0 = new String[6];
      stringArray0[0] = "UTF-8";
      stringArray0[1] = " overrides file at '";
      stringArray0[2] = "@bBzy!5z~<9&";
      stringArray0[3] = "@bBzy!5z~<9&";
      stringArray0[4] = "[]";
      stringArray0[5] = "UTF-8";
      boolean[] booleanArray0 = simpleAccountRealm0.isPermitted((PrincipalCollection) simplePrincipalCollection0, stringArray0);
      assertEquals("org.jsecurity.realm.SimpleAccountRealm-11-authorization", simpleAccountRealm0.getAuthorizationCacheName());
      assertNotNull(booleanArray0);
  }

  //Test case number: 12
  /*
   * 2 covered goals:
   * 1 org.jsecurity.realm.AuthorizingRealm.clearCachedAuthorizationInfo(Lorg/jsecurity/subject/PrincipalCollection;)V: I3 Branch 19 IFNONNULL L314 - true
   * 2 org.jsecurity.realm.AuthorizingRealm.clearCachedAuthorizationInfo(Lorg/jsecurity/subject/PrincipalCollection;)V: I15 Branch 20 IFNULL L320 - true
   */
  @Test
  public void test12()  throws Throwable  {
      SimpleAccountRealm simpleAccountRealm0 = new SimpleAccountRealm();
      assertNotNull(simpleAccountRealm0);
      
      SimplePrincipalCollection simplePrincipalCollection0 = new SimplePrincipalCollection();
      simpleAccountRealm0.clearCachedAuthorizationInfo((PrincipalCollection) simplePrincipalCollection0);
      assertEquals("org.jsecurity.realm.SimpleAccountRealm_364", simpleAccountRealm0.getName());
  }

  //Test case number: 13
  /*
   * 9 covered goals:
   * 1 org.jsecurity.realm.AuthorizingRealm.getPermissions(Lorg/jsecurity/authz/AuthorizationInfo;)Ljava/util/Collection;: I9 Branch 21 IFNULL L341 - false
   * 2 org.jsecurity.realm.AuthorizingRealm.getPermissions(Lorg/jsecurity/authz/AuthorizationInfo;)Ljava/util/Collection;: I14 Branch 22 IFNULL L342 - true
   * 3 org.jsecurity.realm.AuthorizingRealm.getPermissions(Lorg/jsecurity/authz/AuthorizationInfo;)Ljava/util/Collection;: I26 Branch 23 IFNULL L346 - true
   * 4 org.jsecurity.realm.AuthorizingRealm.checkPermission(Lorg/jsecurity/authz/Permission;Lorg/jsecurity/authz/AuthorizationInfo;)V: I4 Branch 46 IFEQ L469 - true
   * 5 org.jsecurity.realm.AuthorizingRealm.checkPermission(Lorg/jsecurity/authz/Permission;Lorg/jsecurity/authz/AuthorizationInfo;)V: I18 Branch 47 IFNE L472 - false
   * 6 org.jsecurity.realm.AuthorizingRealm.isPermitted(Lorg/jsecurity/authz/Permission;Lorg/jsecurity/authz/AuthorizationInfo;)Z: I4 Branch 26 IFEQ L374 - true
   * 7 org.jsecurity.realm.AuthorizingRealm.isPermitted(Lorg/jsecurity/authz/Permission;Lorg/jsecurity/authz/AuthorizationInfo;)Z: I21 Branch 27 IFNULL L379 - false
   * 8 org.jsecurity.realm.AuthorizingRealm.isPermitted(Lorg/jsecurity/authz/Permission;Lorg/jsecurity/authz/AuthorizationInfo;)Z: I24 Branch 28 IFGT L379 - true
   * 9 org.jsecurity.realm.AuthorizingRealm.getPermissions(Lorg/jsecurity/authz/AuthorizationInfo;)Ljava/util/Collection;: I61 Branch 25 IFLE L354 - false
   */
  @Test
  public void test13()  throws Throwable  {
      SimpleAccountRealm simpleAccountRealm0 = new SimpleAccountRealm("[WARNING] Log class '");
      WildcardPermissionResolver wildcardPermissionResolver0 = new WildcardPermissionResolver();
      WildcardPermission wildcardPermission0 = (WildcardPermission)wildcardPermissionResolver0.resolvePermission("dukF<*");
      SimpleAccount simpleAccount0 = new SimpleAccount((Object) simpleAccountRealm0, (Object) simpleAccountRealm0, "dukF<*");
      // Undeclared exception!
      try {
        simpleAccountRealm0.checkPermission((Permission) wildcardPermission0, (AuthorizationInfo) simpleAccount0);
        fail("Expecting exception: UnauthorizedException");
      } catch(UnauthorizedException e) {
        /*
         * User is not permitted [org.jsecurity.authz.permission.WildcardPermission@7f852665]
         */
      }
  }

  //Test case number: 14
  /*
   * 1 covered goal:
   * 1 org.jsecurity.realm.AuthorizingRealm.isPermitted(Ljava/util/List;Lorg/jsecurity/authz/AuthorizationInfo;)[Z: I4 Branch 32 IFEQ L405 - false
   */
  @Test
  public void test14()  throws Throwable  {
      SimpleAccountRealm simpleAccountRealm0 = new SimpleAccountRealm();
      assertNotNull(simpleAccountRealm0);
      
      SimpleAuthorizingAccount simpleAuthorizingAccount0 = new SimpleAuthorizingAccount((Object) simpleAccountRealm0, (Object) null, "~cm2{v$VQhS%n+<*");
      simpleAccountRealm0.isPermitted((List<Permission>) null, (AuthorizationInfo) simpleAuthorizingAccount0);
      assertEquals("org.jsecurity.realm.SimpleAccountRealm_418", simpleAccountRealm0.getName());
  }

  //Test case number: 15
  /*
   * 1 covered goal:
   * 1 org.jsecurity.realm.AuthorizingRealm.isPermitted(Ljava/util/List;Lorg/jsecurity/authz/AuthorizationInfo;)[Z: I15 Branch 33 IFNULL L410 - true
   */
  @Test
  public void test15()  throws Throwable  {
      SimpleAccountRealm simpleAccountRealm0 = new SimpleAccountRealm();
      assertNotNull(simpleAccountRealm0);
      
      SimpleAuthorizationInfo simpleAuthorizationInfo0 = new SimpleAuthorizationInfo();
      simpleAccountRealm0.isPermitted((List<Permission>) null, (AuthorizationInfo) simpleAuthorizationInfo0);
      assertEquals("org.jsecurity.realm.SimpleAccountRealm_433", simpleAccountRealm0.getName());
  }

  //Test case number: 16
  /*
   * 3 covered goals:
   * 1 org.jsecurity.realm.AuthorizingRealm.isPermitted(Ljava/util/List;Lorg/jsecurity/authz/AuthorizationInfo;)[Z: I18 Branch 34 IFGT L410 - true
   * 2 org.jsecurity.realm.AuthorizingRealm.isPermitted(Ljava/util/List;Lorg/jsecurity/authz/AuthorizationInfo;)[Z: I4 Branch 32 IFEQ L405 - true
   * 3 org.jsecurity.realm.AuthorizingRealm.isPermitted(Ljava/util/List;Lorg/jsecurity/authz/AuthorizationInfo;)[Z: I15 Branch 33 IFNULL L410 - false
   */
  @Test
  public void test16()  throws Throwable  {
      SimpleAccountRealm simpleAccountRealm0 = new SimpleAccountRealm("@bBzy!5z~<9&");
      TreeSet<String> treeSet0 = new TreeSet<String>();
      SimpleAuthorizationInfo simpleAuthorizationInfo0 = new SimpleAuthorizationInfo((Set<String>) treeSet0);
      LinkedList<Permission> linkedList0 = new LinkedList<Permission>();
      boolean[] booleanArray0 = simpleAccountRealm0.isPermitted((List<Permission>) linkedList0, (AuthorizationInfo) simpleAuthorizationInfo0);
      assertNotNull(booleanArray0);
  }

  //Test case number: 17
  /*
   * 9 covered goals:
   * 1 org.jsecurity.realm.AuthorizingRealm.isPermittedAll(Lorg/jsecurity/subject/PrincipalCollection;[Ljava/lang/String;)Z: I29 Branch 38 IF_ICMPGE L426 - true
   * 2 org.jsecurity.realm.AuthorizingRealm.getPermissionResolver()Lorg/jsecurity/authz/permission/PermissionResolver;: root-Branch
   * 3 org.jsecurity.realm.AuthorizingRealm.getAuthorizationInfo(Lorg/jsecurity/subject/PrincipalCollection;)Lorg/jsecurity/authz/AuthorizationInfo;: I3 Branch 9 IFNONNULL L252 - true
   * 4 org.jsecurity.realm.AuthorizingRealm.getAuthorizationInfo(Lorg/jsecurity/subject/PrincipalCollection;)Lorg/jsecurity/authz/AuthorizationInfo;: I16 Branch 10 IFEQ L258 - true
   * 5 org.jsecurity.realm.AuthorizingRealm.getAuthorizationInfo(Lorg/jsecurity/subject/PrincipalCollection;)Lorg/jsecurity/authz/AuthorizationInfo;: I39 Branch 11 IFNULL L263 - true
   * 6 org.jsecurity.realm.AuthorizingRealm.getAuthorizationInfo(Lorg/jsecurity/subject/PrincipalCollection;)Lorg/jsecurity/authz/AuthorizationInfo;: I104 Branch 15 IFNONNULL L279 - false
   * 7 org.jsecurity.realm.AuthorizingRealm.isPermittedAll(Lorg/jsecurity/subject/PrincipalCollection;[Ljava/lang/String;)Z: I3 Branch 36 IFNULL L424 - false
   * 8 org.jsecurity.realm.AuthorizingRealm.isPermittedAll(Lorg/jsecurity/subject/PrincipalCollection;[Ljava/lang/String;)Z: I6 Branch 37 IFLE L424 - false
   * 9 org.jsecurity.realm.AuthorizingRealm.isPermittedAll(Lorg/jsecurity/subject/PrincipalCollection;[Ljava/lang/String;)Z: I29 Branch 38 IF_ICMPGE L426 - false
   */
  @Test
  public void test17()  throws Throwable  {
      SimpleAccountRealm simpleAccountRealm0 = new SimpleAccountRealm();
      assertNotNull(simpleAccountRealm0);
      
      SimplePrincipalCollection simplePrincipalCollection0 = new SimplePrincipalCollection();
      String[] stringArray0 = new String[5];
      stringArray0[0] = "IX<_*5SJmJ*";
      stringArray0[1] = "!''}W#)rL'6`n(}@\"i";
      stringArray0[2] = " loaded from classloader ";
      stringArray0[3] = "!''}W#)rL'6`n(}@\"i";
      stringArray0[4] = "!''}W#)rL'6`n(}@\"i";
      // Undeclared exception!
      try {
        simpleAccountRealm0.isPermittedAll((PrincipalCollection) simplePrincipalCollection0, stringArray0);
        fail("Expecting exception: NoSuchElementException");
      } catch(NoSuchElementException e) {
      }
  }

  //Test case number: 18
  /*
   * 1 covered goal:
   * 1 org.jsecurity.realm.AuthorizingRealm.isPermittedAll(Lorg/jsecurity/subject/PrincipalCollection;Ljava/util/Collection;)Z: I9 Branch 39 IFNULL L436 - true
   */
  @Test
  public void test18()  throws Throwable  {
      SimpleAccountRealm simpleAccountRealm0 = new SimpleAccountRealm("@bBzy!5z~<9&");
      assertNotNull(simpleAccountRealm0);
      
      LinkedList<Permission> linkedList0 = new LinkedList<Permission>();
      boolean boolean0 = simpleAccountRealm0.isPermittedAll((PrincipalCollection) null, (Collection<Permission>) linkedList0);
      assertEquals(false, boolean0);
  }

  //Test case number: 19
  /*
   * 2 covered goals:
   * 1 org.jsecurity.realm.AuthorizingRealm.isPermittedAll(Ljava/util/Collection;Lorg/jsecurity/authz/AuthorizationInfo;)Z: I4 Branch 41 IFEQ L442 - true
   * 2 org.jsecurity.realm.AuthorizingRealm.isPermittedAll(Ljava/util/Collection;Lorg/jsecurity/authz/AuthorizationInfo;)Z: I15 Branch 42 IFNULL L446 - true
   */
  @Test
  public void test19()  throws Throwable  {
      SimpleAccountRealm simpleAccountRealm0 = new SimpleAccountRealm("@bBzy!5z~<9&");
      assertNotNull(simpleAccountRealm0);
      
      TreeSet<String> treeSet0 = new TreeSet<String>();
      SimpleAuthorizationInfo simpleAuthorizationInfo0 = new SimpleAuthorizationInfo((Set<String>) treeSet0);
      boolean boolean0 = simpleAccountRealm0.isPermittedAll((Collection<Permission>) null, (AuthorizationInfo) simpleAuthorizationInfo0);
      assertEquals(true, boolean0);
  }

  //Test case number: 20
  /*
   * 3 covered goals:
   * 1 org.jsecurity.realm.AuthorizingRealm.isPermittedAll(Ljava/util/Collection;Lorg/jsecurity/authz/AuthorizationInfo;)Z: I15 Branch 42 IFNULL L446 - false
   * 2 org.jsecurity.realm.AuthorizingRealm.isPermittedAll(Ljava/util/Collection;Lorg/jsecurity/authz/AuthorizationInfo;)Z: I18 Branch 43 IFGT L446 - true
   * 3 org.jsecurity.realm.AuthorizingRealm.isPermittedAll(Ljava/util/Collection;Lorg/jsecurity/authz/AuthorizationInfo;)Z: I4 Branch 41 IFEQ L442 - true
   */
  @Test
  public void test20()  throws Throwable  {
      SimpleAccountRealm simpleAccountRealm0 = new SimpleAccountRealm("@bBzy!5z~<9&");
      assertNotNull(simpleAccountRealm0);
      
      TreeSet<String> treeSet0 = new TreeSet<String>();
      SimpleAuthorizationInfo simpleAuthorizationInfo0 = new SimpleAuthorizationInfo((Set<String>) treeSet0);
      HashSet<Permission> hashSet0 = new HashSet<Permission>();
      boolean boolean0 = simpleAccountRealm0.isPermittedAll((Collection<Permission>) hashSet0, (AuthorizationInfo) simpleAuthorizationInfo0);
      assertEquals(true, boolean0);
  }

  //Test case number: 21
  /*
   * 1 covered goal:
   * 1 org.jsecurity.realm.AuthorizingRealm.checkPermissions(Ljava/util/Collection;Lorg/jsecurity/authz/AuthorizationInfo;)V: I4 Branch 50 IFEQ L495 - false
   */
  @Test
  public void test21()  throws Throwable  {
      SimpleAccountRealm simpleAccountRealm0 = new SimpleAccountRealm("Warning: the context classloader is an ancestor of the classloader that loaded LogFactoryImpl; it should be the same or a descendant. The application using commons-logging should ensure the context classloader is used correctly.");
      WildcardPermission wildcardPermission0 = new WildcardPermission("Warning: the context classloader is an ancestor of the classloader that loaded LogFactoryImpl; it should be the same or a descendant. The application using commons-logging should ensure the context classloader is used correctly.");
      SimpleAuthorizingAccount simpleAuthorizingAccount0 = new SimpleAuthorizingAccount((Object) wildcardPermission0, (Object) "\u0000\uFFFD9\uFFFD\u0000", "Warning: the context classloader is an ancestor of the classloader that loaded LogFactoryImpl; it should be the same or a descendant. The application using commons-logging should ensure the context classloader is used correctly.");
      simpleAccountRealm0.checkPermissions((Collection<Permission>) null, (AuthorizationInfo) simpleAuthorizingAccount0);
      assertEquals("Warning: the context classloader is an ancestor of the classloader that loaded LogFactoryImpl; it should be the same or a descendant. The application using commons-logging should ensure the context classloader is used correctly.", simpleAccountRealm0.getName());
  }

  //Test case number: 22
  /*
   * 3 covered goals:
   * 1 org.jsecurity.realm.AuthorizingRealm.checkPermissions(Ljava/util/Collection;Lorg/jsecurity/authz/AuthorizationInfo;)V: I15 Branch 51 IFNULL L498 - false
   * 2 org.jsecurity.realm.AuthorizingRealm.checkPermissions(Ljava/util/Collection;Lorg/jsecurity/authz/AuthorizationInfo;)V: I18 Branch 52 IFGT L498 - true
   * 3 org.jsecurity.realm.AuthorizingRealm.checkPermissions(Ljava/util/Collection;Lorg/jsecurity/authz/AuthorizationInfo;)V: I4 Branch 50 IFEQ L495 - true
   */
  @Test
  public void test22()  throws Throwable  {
      SimpleAccountRealm simpleAccountRealm0 = new SimpleAccountRealm("@bBzy!5z~<9&");
      TreeSet<String> treeSet0 = new TreeSet<String>();
      SimpleAuthorizationInfo simpleAuthorizationInfo0 = new SimpleAuthorizationInfo((Set<String>) treeSet0);
      HashSet<Permission> hashSet0 = new HashSet<Permission>();
      simpleAccountRealm0.checkPermissions((Collection<Permission>) hashSet0, (AuthorizationInfo) simpleAuthorizationInfo0);
      assertEquals(true, hashSet0.isEmpty());
  }

  //Test case number: 23
  /*
   * 3 covered goals:
   * 1 org.jsecurity.realm.AuthorizingRealm.hasRole(Ljava/lang/String;Lorg/jsecurity/authz/AuthorizationInfo;)Z: I15 Branch 55 IFNULL L517 - false
   * 2 org.jsecurity.realm.AuthorizingRealm.hasRole(Ljava/lang/String;Lorg/jsecurity/authz/AuthorizationInfo;)Z: I18 Branch 56 IFNULL L517 - false
   * 3 org.jsecurity.realm.AuthorizingRealm.hasRole(Ljava/lang/String;Lorg/jsecurity/authz/AuthorizationInfo;)Z: I23 Branch 57 IFLE L517 - true
   */
  @Test
  public void test23()  throws Throwable  {
      SimpleAccountRealm simpleAccountRealm0 = new SimpleAccountRealm("@bBzy!5z~<9&");
      assertNotNull(simpleAccountRealm0);
      
      TreeSet<String> treeSet0 = new TreeSet<String>();
      SimpleAuthorizationInfo simpleAuthorizationInfo0 = new SimpleAuthorizationInfo((Set<String>) treeSet0);
      boolean boolean0 = simpleAccountRealm0.hasRole("@bBzy!5z~<9&", (AuthorizationInfo) simpleAuthorizationInfo0);
      assertEquals(false, boolean0);
  }

  //Test case number: 24
  /*
   * 2 covered goals:
   * 1 org.jsecurity.realm.AuthorizingRealm.hasRole(Ljava/lang/String;Lorg/jsecurity/authz/AuthorizationInfo;)Z: I18 Branch 56 IFNULL L517 - true
   * 2 org.jsecurity.realm.AuthorizingRealm.checkRole(Ljava/lang/String;Lorg/jsecurity/authz/AuthorizationInfo;)V: I18 Branch 72 IFNE L583 - false
   */
  @Test
  public void test24()  throws Throwable  {
      SimpleAccountRealm simpleAccountRealm0 = new SimpleAccountRealm("K|hTqL");
      SimpleAuthorizationInfo simpleAuthorizationInfo0 = new SimpleAuthorizationInfo();
      // Undeclared exception!
      try {
        simpleAccountRealm0.checkRole("K|hTqL", (AuthorizationInfo) simpleAuthorizationInfo0);
        fail("Expecting exception: UnauthorizedException");
      } catch(UnauthorizedException e) {
        /*
         * User does not have role [K|hTqL]
         */
      }
  }

  //Test case number: 25
  /*
   * 11 covered goals:
   * 1 org.jsecurity.realm.AuthorizingRealm.hasRole(Ljava/lang/String;Lorg/jsecurity/authz/AuthorizationInfo;)Z: I23 Branch 57 IFLE L517 - false
   * 2 org.jsecurity.realm.AuthorizingRealm.checkRole(Ljava/lang/String;Lorg/jsecurity/authz/AuthorizationInfo;)V: I18 Branch 72 IFNE L583 - true
   * 3 org.jsecurity.realm.AuthorizingRealm.checkRoles(Ljava/util/Collection;Lorg/jsecurity/authz/AuthorizationInfo;)V: I4 Branch 73 IFEQ L598 - true
   * 4 org.jsecurity.realm.AuthorizingRealm.checkRoles(Ljava/util/Collection;Lorg/jsecurity/authz/AuthorizationInfo;)V: I15 Branch 74 IFNULL L601 - false
   * 5 org.jsecurity.realm.AuthorizingRealm.checkRoles(Ljava/util/Collection;Lorg/jsecurity/authz/AuthorizationInfo;)V: I18 Branch 75 IFGT L601 - false
   * 6 org.jsecurity.realm.AuthorizingRealm.checkRoles(Ljava/util/Collection;Lorg/jsecurity/authz/AuthorizationInfo;)V: I27 Branch 76 IFEQ L602 - true
   * 7 org.jsecurity.realm.AuthorizingRealm.checkRoles(Ljava/util/Collection;Lorg/jsecurity/authz/AuthorizationInfo;)V: I27 Branch 76 IFEQ L602 - false
   * 8 org.jsecurity.realm.AuthorizingRealm.hasRole(Ljava/lang/String;Lorg/jsecurity/authz/AuthorizationInfo;)Z: I4 Branch 54 IFEQ L514 - true
   * 9 org.jsecurity.realm.AuthorizingRealm.hasRole(Ljava/lang/String;Lorg/jsecurity/authz/AuthorizationInfo;)Z: I15 Branch 55 IFNULL L517 - false
   * 10 org.jsecurity.realm.AuthorizingRealm.hasRole(Ljava/lang/String;Lorg/jsecurity/authz/AuthorizationInfo;)Z: I18 Branch 56 IFNULL L517 - false
   * 11 org.jsecurity.realm.AuthorizingRealm.checkRole(Ljava/lang/String;Lorg/jsecurity/authz/AuthorizationInfo;)V: I4 Branch 71 IFEQ L580 - true
   */
  @Test
  public void test25()  throws Throwable  {
      SimpleAccountRealm simpleAccountRealm0 = new SimpleAccountRealm("@bBzy!5z~<9&");
      TreeSet<String> treeSet0 = new TreeSet<String>();
      SimpleAuthorizationInfo simpleAuthorizationInfo0 = new SimpleAuthorizationInfo((Set<String>) treeSet0);
      treeSet0.add("@bBzy!5z~<9&");
      simpleAccountRealm0.checkRoles((Collection<String>) treeSet0, (AuthorizationInfo) simpleAuthorizationInfo0);
      assertEquals("[@bBzy!5z~<9&]", treeSet0.toString());
  }

  //Test case number: 26
  /*
   * 2 covered goals:
   * 1 org.jsecurity.realm.AuthorizingRealm.hasRoles(Lorg/jsecurity/subject/PrincipalCollection;Ljava/util/List;)[Z: I9 Branch 58 IFNULL L522 - false
   * 2 org.jsecurity.realm.AuthorizingRealm.hasRoles(Lorg/jsecurity/subject/PrincipalCollection;Ljava/util/List;)[Z: I21 Branch 59 IFNULL L523 - true
   */
  @Test
  public void test26()  throws Throwable  {
      SimpleAccountRealm simpleAccountRealm0 = new SimpleAccountRealm("x~%&2)");
      LinkedList<String> linkedList0 = new LinkedList<String>();
      boolean[] booleanArray0 = simpleAccountRealm0.hasRoles((PrincipalCollection) null, (List<String>) linkedList0);
      assertNotNull(booleanArray0);
  }

  //Test case number: 27
  /*
   * 3 covered goals:
   * 1 org.jsecurity.realm.AuthorizingRealm.hasRoles(Ljava/util/List;Lorg/jsecurity/authz/AuthorizationInfo;)[Z: I4 Branch 60 IFEQ L532 - true
   * 2 org.jsecurity.realm.AuthorizingRealm.hasRoles(Ljava/util/List;Lorg/jsecurity/authz/AuthorizationInfo;)[Z: I15 Branch 61 IFNULL L537 - false
   * 3 org.jsecurity.realm.AuthorizingRealm.hasRoles(Ljava/util/List;Lorg/jsecurity/authz/AuthorizationInfo;)[Z: I18 Branch 62 IFGT L537 - true
   */
  @Test
  public void test27()  throws Throwable  {
      SimpleAccountRealm simpleAccountRealm0 = new SimpleAccountRealm("@bBzy!5z~<9&");
      TreeSet<String> treeSet0 = new TreeSet<String>();
      SimpleAuthorizationInfo simpleAuthorizationInfo0 = new SimpleAuthorizationInfo((Set<String>) treeSet0);
      LinkedList<String> linkedList0 = new LinkedList<String>();
      boolean[] booleanArray0 = simpleAccountRealm0.hasRoles((List<String>) linkedList0, (AuthorizationInfo) simpleAuthorizationInfo0);
      assertNotNull(booleanArray0);
  }

  //Test case number: 28
  /*
   * 2 covered goals:
   * 1 org.jsecurity.realm.AuthorizingRealm.hasRoles(Ljava/util/List;Lorg/jsecurity/authz/AuthorizationInfo;)[Z: I15 Branch 61 IFNULL L537 - true
   * 2 org.jsecurity.realm.AuthorizingRealm.hasRoles(Ljava/util/List;Lorg/jsecurity/authz/AuthorizationInfo;)[Z: I4 Branch 60 IFEQ L532 - true
   */
  @Test
  public void test28()  throws Throwable  {
      SimpleAccountRealm simpleAccountRealm0 = new SimpleAccountRealm("@bBzy!5z~<9&");
      TreeSet<String> treeSet0 = new TreeSet<String>();
      SimpleAuthorizationInfo simpleAuthorizationInfo0 = new SimpleAuthorizationInfo((Set<String>) treeSet0);
      boolean[] booleanArray0 = simpleAccountRealm0.hasRoles((List<String>) null, (AuthorizationInfo) simpleAuthorizationInfo0);
      assertNotNull(booleanArray0);
  }

  //Test case number: 29
  /*
   * 2 covered goals:
   * 1 org.jsecurity.realm.AuthorizingRealm.hasAllRoles(Lorg/jsecurity/subject/PrincipalCollection;Ljava/util/Collection;)Z: I9 Branch 64 IFNULL L552 - true
   * 2 org.jsecurity.realm.AuthorizingRealm.getAuthorizationInfo(Lorg/jsecurity/subject/PrincipalCollection;)Lorg/jsecurity/authz/AuthorizationInfo;: I3 Branch 9 IFNONNULL L252 - false
   */
  @Test
  public void test29()  throws Throwable  {
      SimpleAccountRealm simpleAccountRealm0 = new SimpleAccountRealm("@bBzy!5z~<9&");
      assertNotNull(simpleAccountRealm0);
      
      TreeSet<String> treeSet0 = new TreeSet<String>();
      boolean boolean0 = simpleAccountRealm0.hasAllRoles((PrincipalCollection) null, (Collection<String>) treeSet0);
      assertEquals(false, boolean0);
  }

  //Test case number: 30
  /*
   * 1 covered goal:
   * 1 org.jsecurity.realm.AuthorizingRealm.checkRoles(Ljava/util/Collection;Lorg/jsecurity/authz/AuthorizationInfo;)V: I15 Branch 74 IFNULL L601 - true
   */
  @Test
  public void test30()  throws Throwable  {
      SimpleAccountRealm simpleAccountRealm0 = new SimpleAccountRealm("@bBzy!5z~<9&");
      TreeSet<String> treeSet0 = new TreeSet<String>();
      SimpleAuthorizationInfo simpleAuthorizationInfo0 = new SimpleAuthorizationInfo((Set<String>) treeSet0);
      simpleAccountRealm0.checkRoles((Collection<String>) null, (AuthorizationInfo) simpleAuthorizationInfo0);
      assertNull(simpleAccountRealm0.getAuthorizationCacheName());
  }

  //Test case number: 31
  /*
   * 11 covered goals:
   * 1 org.jsecurity.realm.AuthorizingRealm.checkRoles(Ljava/util/Collection;Lorg/jsecurity/authz/AuthorizationInfo;)V: I18 Branch 75 IFGT L601 - true
   * 2 org.jsecurity.realm.AuthorizingRealm.getAuthorizationCache()Lorg/jsecurity/cache/Cache;: root-Branch
   * 3 org.jsecurity.realm.AuthorizingRealm.init()V: root-Branch
   * 4 org.jsecurity.realm.AuthorizingRealm.<init>()V: root-Branch
   * 5 org.jsecurity.realm.AuthorizingRealm.checkRoles(Ljava/util/Collection;Lorg/jsecurity/authz/AuthorizationInfo;)V: I4 Branch 73 IFEQ L598 - true
   * 6 org.jsecurity.realm.AuthorizingRealm.checkRoles(Ljava/util/Collection;Lorg/jsecurity/authz/AuthorizationInfo;)V: I15 Branch 74 IFNULL L601 - false
   * 7 org.jsecurity.realm.AuthorizingRealm.initAuthorizationCache()V: I4 Branch 2 IFEQ L167 - true
   * 8 org.jsecurity.realm.AuthorizingRealm.initAuthorizationCache()V: I18 Branch 3 IFNONNULL L173 - false
   * 9 org.jsecurity.realm.AuthorizingRealm.initAuthorizationCache()V: I23 Branch 4 IFEQ L175 - true
   * 10 org.jsecurity.realm.AuthorizingRealm.initAuthorizationCache()V: I37 Branch 5 IFNULL L181 - true
   * 11 org.jsecurity.realm.AuthorizingRealm.initAuthorizationCache()V: I116 Branch 8 IFEQ L195 - false
   */
  @Test
  public void test31()  throws Throwable  {
      SimpleAccountRealm simpleAccountRealm0 = new SimpleAccountRealm("@bBzy!5z~<9&");
      TreeSet<String> treeSet0 = new TreeSet<String>();
      SimpleAuthorizationInfo simpleAuthorizationInfo0 = new SimpleAuthorizationInfo((Set<String>) treeSet0);
      simpleAccountRealm0.checkRoles((Collection<String>) treeSet0, (AuthorizationInfo) simpleAuthorizationInfo0);
      assertEquals(true, treeSet0.isEmpty());
  }
}
