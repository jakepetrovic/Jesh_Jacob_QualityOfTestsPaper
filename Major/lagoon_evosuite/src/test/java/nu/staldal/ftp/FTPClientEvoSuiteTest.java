/*
 * This file was automatically generated by EvoSuite
 */

package nu.staldal.ftp;

import org.junit.Test;
import org.junit.runner.RunWith;
import static org.junit.Assert.*;
import java.io.IOException;
import java.net.MalformedURLException;
import java.net.UnknownHostException;
import java.util.concurrent.ExecutorService;
import java.util.concurrent.Executors;
import java.util.concurrent.Future;
import java.util.concurrent.TimeUnit;
import nu.staldal.ftp.FTPAuthenticationException;
import nu.staldal.ftp.FTPClient;
import nu.staldal.ftp.FTPException;
import org.junit.After;
import org.junit.AfterClass;
import org.junit.Before;
import org.junit.BeforeClass;

public class FTPClientEvoSuiteTest {

  private static ExecutorService executor;
    
  //Test case number: 0
  /*
   * 2 covered goals:
   * 1 nu.staldal.ftp.FTPClient.<init>(Ljava/lang/String;ILjava/lang/String;Ljava/lang/String;Ljava/lang/String;)V: root-Branch
   * 2 nu.staldal.ftp.FTPClient.connect(Ljava/lang/String;ILjava/lang/String;Ljava/lang/String;)V: I3 Branch 28 IFLT L198 - true
   */
  @Test
  public void test0()  throws Throwable  {
    Future<?> future = executor.submit(new Runnable(){ 
            public void run() { 
        try {
          FTPClient fTPClient0 = null;
          try {
            fTPClient0 = new FTPClient("3:G42G_vu", (-2015), "3:G42G_vu", "3:G42G_vu", "3:G42G_vu");
            fail("Expecting exception: SecurityException");
          } catch(SecurityException e) {
            /*
             * Security manager blocks (\"java.net.SocketPermission\" \"[3:G42G_vu]\" \"resolve\")
             * java.lang.Thread.getStackTrace(Thread.java:1588)
             * org.evosuite.sandbox.MSecurityManager.checkPermission(MSecurityManager.java:303)
             * java.lang.SecurityManager.checkConnect(SecurityManager.java:1048)
             * java.net.InetAddress.getAllByName0(InetAddress.java:1238)
             * java.net.InetAddress.getAllByName(InetAddress.java:1162)
             * java.net.InetAddress.getAllByName(InetAddress.java:1098)
             * java.net.InetAddress.getByName(InetAddress.java:1048)
             * java.net.InetSocketAddress.<init>(InetSocketAddress.java:220)
             * java.net.Socket.<init>(Socket.java:208)
             * nu.staldal.ftp.FTPClient.connect(FTPClient.java:200)
             * nu.staldal.ftp.FTPClient.<init>(FTPClient.java:190)
             * sun.reflect.GeneratedConstructorAccessor14.newInstance(Unknown Source)
             * sun.reflect.DelegatingConstructorAccessorImpl.newInstance(DelegatingConstructorAccessorImpl.java:45)
             * java.lang.reflect.Constructor.newInstance(Constructor.java:526)
             * org.evosuite.testcase.ConstructorStatement$1.execute(ConstructorStatement.java:226)
             * org.evosuite.testcase.AbstractStatement.exceptionHandler(AbstractStatement.java:142)
             * org.evosuite.testcase.ConstructorStatement.execute(ConstructorStatement.java:188)
             * org.evosuite.testcase.TestRunnable.call(TestRunnable.java:291)
             * org.evosuite.testcase.TestRunnable.call(TestRunnable.java:44)
             * java.util.concurrent.FutureTask.run(FutureTask.java:262)
             * java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1145)
             * java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:615)
             * java.lang.Thread.run(Thread.java:744)
             */
          }
        } catch(Throwable t) {
            // Need to catch declared exceptions
        }
      } 
    }); 
    future.get(6000, TimeUnit.MILLISECONDS); 
  }

  //Test case number: 1
  /*
   * 4 covered goals:
   * 1 nu.staldal.ftp.FTPClient.<init>(Ljava/lang/String;Ljava/lang/String;)V: I20 Branch 17 IFGT L134 - true
   * 2 nu.staldal.ftp.FTPClient.<init>(Ljava/lang/String;Ljava/lang/String;)V: I44 Branch 18 IFGE L139 - true
   * 3 nu.staldal.ftp.FTPClient.<init>(Ljava/lang/String;Ljava/lang/String;)V: I66 Branch 19 IFGE L142 - false
   * 4 nu.staldal.ftp.FTPClient.<init>(Ljava/lang/String;Ljava/lang/String;)V: I92 Branch 20 IFGE L152 - false
   */
  @Test
  public void test1()  throws Throwable  {
      FTPClient fTPClient0 = null;
      try {
        fTPClient0 = new FTPClient("ftp://V2U><Ur]r@iAmmBb", "ftp://V2U><Ur]r@iAmmBb");
        fail("Expecting exception: StringIndexOutOfBoundsException");
      } catch(StringIndexOutOfBoundsException e) {
        /*
         * String index out of range: -17
         */
      }
  }

  //Test case number: 2
  /*
   * 1 covered goal:
   * 1 nu.staldal.ftp.FTPClient.<init>(Ljava/lang/String;Ljava/lang/String;)V: I20 Branch 17 IFGT L134 - false
   */
  @Test
  public void test2()  throws Throwable  {
      FTPClient fTPClient0 = null;
      try {
        fTPClient0 = new FTPClient(")AqWa>@[m *)|\r", ")AqWa>@[m *)|\r");
        fail("Expecting exception: MalformedURLException");
      } catch(MalformedURLException e) {
        /*
         * )AqWa>@[m *)|\r
         */
      }
  }

  //Test case number: 3
  /*
   * 2 covered goals:
   * 1 nu.staldal.ftp.FTPClient.<init>(Ljava/lang/String;Ljava/lang/String;)V: I44 Branch 18 IFGE L139 - false
   * 2 nu.staldal.ftp.FTPClient.<init>(Ljava/lang/String;Ljava/lang/String;)V: I20 Branch 17 IFGT L134 - true
   */
  @Test
  public void test3()  throws Throwable  {
      FTPClient fTPClient0 = null;
      try {
        fTPClient0 = new FTPClient("ftp://^qW}#C?&e", "ftp://^qW}#C?&e");
        fail("Expecting exception: MalformedURLException");
      } catch(MalformedURLException e) {
        /*
         * ftp://^qW}#C?&e
         */
      }
  }

  //Test case number: 4
  /*
   * 2 covered goals:
   * 1 nu.staldal.ftp.FTPClient.connect(Ljava/lang/String;ILjava/lang/String;Ljava/lang/String;)V: I3 Branch 28 IFLT L198 - false
   * 2 nu.staldal.ftp.FTPClient.connect(Ljava/lang/String;ILjava/lang/String;Ljava/lang/String;)V: I6 Branch 29 IF_ICMPLE L198 - false
   */
  @Test
  public void test4()  throws Throwable  {
    Future<?> future = executor.submit(new Runnable(){ 
            public void run() { 
        try {
          FTPClient fTPClient0 = null;
          try {
            fTPClient0 = new FTPClient("K<k%1X", 65552, "K<k%1X", "K<k%1X", "K<k%1X");
            fail("Expecting exception: SecurityException");
          } catch(SecurityException e) {
            /*
             * Security manager blocks (\"java.net.SocketPermission\" \"K<k%1X\" \"resolve\")
             * java.lang.Thread.getStackTrace(Thread.java:1588)
             * org.evosuite.sandbox.MSecurityManager.checkPermission(MSecurityManager.java:303)
             * java.lang.SecurityManager.checkConnect(SecurityManager.java:1048)
             * java.net.InetAddress.getAllByName0(InetAddress.java:1238)
             * java.net.InetAddress.getAllByName(InetAddress.java:1162)
             * java.net.InetAddress.getAllByName(InetAddress.java:1098)
             * java.net.InetAddress.getByName(InetAddress.java:1048)
             * java.net.InetSocketAddress.<init>(InetSocketAddress.java:220)
             * java.net.Socket.<init>(Socket.java:208)
             * nu.staldal.ftp.FTPClient.connect(FTPClient.java:200)
             * nu.staldal.ftp.FTPClient.<init>(FTPClient.java:190)
             * sun.reflect.GeneratedConstructorAccessor14.newInstance(Unknown Source)
             * sun.reflect.DelegatingConstructorAccessorImpl.newInstance(DelegatingConstructorAccessorImpl.java:45)
             * java.lang.reflect.Constructor.newInstance(Constructor.java:526)
             * org.evosuite.testcase.ConstructorStatement$1.execute(ConstructorStatement.java:226)
             * org.evosuite.testcase.AbstractStatement.exceptionHandler(AbstractStatement.java:142)
             * org.evosuite.testcase.ConstructorStatement.execute(ConstructorStatement.java:188)
             * org.evosuite.testcase.TestRunnable.call(TestRunnable.java:291)
             * org.evosuite.testcase.TestRunnable.call(TestRunnable.java:44)
             * java.util.concurrent.FutureTask.run(FutureTask.java:262)
             * java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1145)
             * java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:615)
             * java.lang.Thread.run(Thread.java:744)
             */
          }
        } catch(Throwable t) {
            // Need to catch declared exceptions
        }
      } 
    }); 
    future.get(6000, TimeUnit.MILLISECONDS); 
  }

  //Test case number: 5
  /*
   * 3 covered goals:
   * 1 nu.staldal.ftp.FTPClient.connect(Ljava/lang/String;ILjava/lang/String;Ljava/lang/String;)V: I6 Branch 29 IF_ICMPLE L198 - true
   * 2 nu.staldal.ftp.FTPClient.<init>(Ljava/lang/String;ILjava/lang/String;Ljava/lang/String;Ljava/lang/String;)V: root-Branch
   * 3 nu.staldal.ftp.FTPClient.connect(Ljava/lang/String;ILjava/lang/String;Ljava/lang/String;)V: I3 Branch 28 IFLT L198 - false
   */
  @Test
  public void test5()  throws Throwable  {
    Future<?> future = executor.submit(new Runnable(){ 
            public void run() { 
        try {
          FTPClient fTPClient0 = null;
          try {
            fTPClient0 = new FTPClient("ftp://^fqW}#C?&e", 1910, "ftp://^fqW}#C?&e", "ftp://^fqW}#C?&e", "ftp://^fqW}#C?&e");
            fail("Expecting exception: SecurityException");
          } catch(SecurityException e) {
            /*
             * Security manager blocks (\"java.net.SocketPermission\" \"[ftp://^fqW}#C?&e]\" \"resolve\")
             * java.lang.Thread.getStackTrace(Thread.java:1588)
             * org.evosuite.sandbox.MSecurityManager.checkPermission(MSecurityManager.java:303)
             * java.lang.SecurityManager.checkConnect(SecurityManager.java:1048)
             * java.net.InetAddress.getAllByName0(InetAddress.java:1238)
             * java.net.InetAddress.getAllByName(InetAddress.java:1162)
             * java.net.InetAddress.getAllByName(InetAddress.java:1098)
             * java.net.InetAddress.getByName(InetAddress.java:1048)
             * java.net.InetSocketAddress.<init>(InetSocketAddress.java:220)
             * java.net.Socket.<init>(Socket.java:208)
             * nu.staldal.ftp.FTPClient.connect(FTPClient.java:200)
             * nu.staldal.ftp.FTPClient.<init>(FTPClient.java:190)
             * sun.reflect.GeneratedConstructorAccessor14.newInstance(Unknown Source)
             * sun.reflect.DelegatingConstructorAccessorImpl.newInstance(DelegatingConstructorAccessorImpl.java:45)
             * java.lang.reflect.Constructor.newInstance(Constructor.java:526)
             * org.evosuite.testcase.ConstructorStatement$1.execute(ConstructorStatement.java:226)
             * org.evosuite.testcase.AbstractStatement.exceptionHandler(AbstractStatement.java:142)
             * org.evosuite.testcase.ConstructorStatement.execute(ConstructorStatement.java:188)
             * org.evosuite.testcase.TestRunnable.call(TestRunnable.java:291)
             * org.evosuite.testcase.TestRunnable.call(TestRunnable.java:44)
             * java.util.concurrent.FutureTask.run(FutureTask.java:262)
             * java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1145)
             * java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:615)
             * java.lang.Thread.run(Thread.java:744)
             */
          }
        } catch(Throwable t) {
            // Need to catch declared exceptions
        }
      } 
    }); 
    future.get(6000, TimeUnit.MILLISECONDS); 
  }
}
