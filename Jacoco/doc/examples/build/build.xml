<?xml version="1.0" encoding="UTF-8"?>

<!-- 
   Copyright (c) 2009, 2014 Mountainminds GmbH & Co. KG and Contributors
   All rights reserved. This program and the accompanying materials
   are made available under the terms of the Eclipse Public License v1.0
   which accompanies this distribution, and is available at
   http://www.eclipse.org/legal/epl-v10.html
  
   Contributors:
      Marc R. Hoffmann - initial API and implementation
-->

<project name="Example Ant Build with JaCoCo" default="rebuild" xmlns:jacoco="antlib:org.jacoco.ant">
	
	<description>
	  Example Ant build file that demonstrates how a JaCoCo coverage report
	  can be itegrated into an existing build in three simple steps.
	</description>

	<property name="src.dir" location="./src/main/java" />
    <property name="test.dir"  location="./src/test/java"/>
	<property name="result.dir" location="./target" />
	<property name="result.classes.dir" location="${result.dir}/classes" />
	<property name="result.report.dir" location="${result.dir}/site/jacoco" />
	<property name="result.exec.file" location="${result.dir}/jacoco.exec" />

	<!-- Step 1: Import JaCoCo Ant tasks -->
	<taskdef uri="antlib:org.jacoco.ant" resource="org/jacoco/ant/antlib.xml">
		<classpath path="../../../lib/jacocoant.jar" />
	</taskdef>

	<target name="clean">
		<delete dir="${result.dir}" />
	</target>

	<target name="compile">
		<mkdir dir="${result.classes.dir}" />
		<javac srcdir="${src.dir}" destdir="${result.classes.dir}" debug="true" includeantruntime="false" encoding="windows-1252">
        <classpath>
            <fileset dir="lib">
                <include name="**/*.jar"/>
            </fileset>
	    </classpath>
        </javac>
	</target>
    
    <target name="compile.test">
		<mkdir dir="${result.classes.dir}" />
		<javac srcdir="${test.dir}" destdir="${result.classes.dir}" debug="true" includeantruntime="false" encoding="windows-1252">
            <classpath>
                <fileset dir="lib">
                    <include name="**/*.jar"/>
                </fileset>
            </classpath>
        </javac>
	</target>

	<target name="test" depends="compile">
		<!-- Step 2: Wrap test execution with the JaCoCo coverage task -->
		<jacoco:coverage destfile="${result.exec.file}">
				<junit printsummary="true"
                    showoutput="true"
                    haltonfailure="false"
                    fork="true">
                    <formatter type="plain" usefile="false"/>
                    <classpath>
                        <pathelement path="${result.classes.dir}"/>
                        <fileset dir="lib">
                            <include name="**/*.jar"/>
                        </fileset>
                    </classpath>
                    <batchtest>
                        <fileset dir="${test.dir}">
                            <include name="**/*Test*.java"/>
                            <exclude name="**/helpers/*Test*.java"/>
                        </fileset>
                    </batchtest>
                </junit>
		</jacoco:coverage>
	</target>

	<target name="report" depends="test">
		<!-- Step 3: Create coverage report -->
		<jacoco:report>

			<!-- This task needs the collected execution data and ... -->
			<executiondata>
				<file file="${result.exec.file}" />
			</executiondata>

			<!-- the class files and optional source files ... -->
			<structure name="JaCoCo Ant Example">
				<classfiles>
					<fileset dir="${result.classes.dir}" />
				</classfiles>
				<sourcefiles encoding="UTF-8">
					<fileset dir="${src.dir}" />
				</sourcefiles>
			</structure>

			<!-- to produce reports in different formats. -->
			<html destdir="${result.report.dir}" />
			<csv destfile="${result.report.dir}/report.csv" />
			<xml destfile="${result.report.dir}/report.xml" />
		</jacoco:report>
	</target>

	<target name="rebuild" depends="clean,compile,compile.test,test,report" />

</project>